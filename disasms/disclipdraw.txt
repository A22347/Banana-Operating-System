
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiBegin(void*)>:
10000000:	55                   	push   ebp
10000001:	89 e5                	mov    ebp,esp
10000003:	83 ec 08             	sub    esp,0x8
10000006:	83 ec 0c             	sub    esp,0xc
10000009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000000c:	e8 fc ff ff ff       	call   1000000d <NiBegin(void*)+0xd>	1000000d: R_386_PC32	NiMain(void*)
10000011:	83 c4 10             	add    esp,0x10
10000014:	90                   	nop
10000015:	c9                   	leave  
10000016:	c3                   	ret    

10000017 <NiMain(void*)>:
10000017:	55                   	push   ebp
10000018:	89 e5                	mov    ebp,esp
1000001a:	57                   	push   edi
1000001b:	56                   	push   esi
1000001c:	53                   	push   ebx
1000001d:	81 ec ec 00 00 00    	sub    esp,0xec
10000023:	83 ec 0c             	sub    esp,0xc
10000026:	68 1d 8e 00 10       	push   0x10008e1d	10000027: R_386_32	.text
1000002b:	e8 fc ff ff ff       	call   1000002c <NiMain(void*)+0x15>	1000002c: R_386_PC32	Dbg::kprintf(char const*, ...)
10000030:	83 c4 10             	add    esp,0x10
10000033:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10000035: R_386_32	screen
10000039:	a1 00 00 00 00       	mov    eax,ds:0x0	1000003a: R_386_32	screen
1000003e:	8b 00                	mov    eax,DWORD PTR [eax]
10000040:	83 c0 44             	add    eax,0x44
10000043:	8b 00                	mov    eax,DWORD PTR [eax]
10000045:	83 ec 08             	sub    esp,0x8
10000048:	68 80 80 00 00       	push   0x8080
1000004d:	52                   	push   edx
1000004e:	ff d0                	call   eax
10000050:	83 c4 10             	add    esp,0x10
10000053:	e8 fc ff ff ff       	call   10000054 <NiMain(void*)+0x3d>	10000054: R_386_PC32	initFonts()
10000058:	6a 00                	push   0x0
1000005a:	6a 0c                	push   0xc
1000005c:	68 90 8c 00 10       	push   0x10008c90	1000005d: R_386_32	.text
10000061:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10000067:	50                   	push   eax
10000068:	e8 fc ff ff ff       	call   10000069 <NiMain(void*)+0x52>	10000069: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
1000006d:	83 c4 10             	add    esp,0x10
10000070:	83 ec 08             	sub    esp,0x8
10000073:	81 ec 88 00 00 00    	sub    esp,0x88
10000079:	89 e0                	mov    eax,esp
1000007b:	89 c3                	mov    ebx,eax
1000007d:	8d 85 40 ff ff ff    	lea    eax,[ebp-0xc0]
10000083:	ba 22 00 00 00       	mov    edx,0x22
10000088:	89 df                	mov    edi,ebx
1000008a:	89 c6                	mov    esi,eax
1000008c:	89 d1                	mov    ecx,edx
1000008e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000090:	e8 fc ff ff ff       	call   10000091 <NiMain(void*)+0x7a>	10000091: R_386_PC32	getFontHandle(FontStyle)
10000095:	81 c4 90 00 00 00    	add    esp,0x90
1000009b:	a3 00 00 00 00       	mov    ds:0x0,eax	1000009c: R_386_32	SYSTEM_FONT_HANDLE
100000a0:	a1 00 00 00 00       	mov    eax,ds:0x0	100000a1: R_386_32	SYSTEM_FONT_HANDLE
100000a5:	83 ec 08             	sub    esp,0x8
100000a8:	50                   	push   eax
100000a9:	68 39 8e 00 10       	push   0x10008e39	100000aa: R_386_32	.text
100000ae:	e8 fc ff ff ff       	call   100000af <NiMain(void*)+0x98>	100000af: R_386_PC32	Dbg::kprintf(char const*, ...)
100000b3:	83 c4 10             	add    esp,0x10
100000b6:	c7 45 c8 90 00 00 00 	mov    DWORD PTR [ebp-0x38],0x90
100000bd:	83 ec 0c             	sub    esp,0xc
100000c0:	ff 75 c8             	push   DWORD PTR [ebp-0x38]
100000c3:	e8 fc ff ff ff       	call   100000c4 <NiMain(void*)+0xad>	100000c4: R_386_PC32	malloc
100000c8:	83 c4 10             	add    esp,0x10
100000cb:	89 c3                	mov    ebx,eax
100000cd:	83 ec 04             	sub    esp,0x4
100000d0:	6a 00                	push   0x0
100000d2:	68 52 8e 00 10       	push   0x10008e52	100000d3: R_386_32	.text
100000d7:	68 5e 01 00 00       	push   0x15e
100000dc:	68 5e 01 00 00       	push   0x15e
100000e1:	6a 32                	push   0x32
100000e3:	6a 50                	push   0x50
100000e5:	53                   	push   ebx
100000e6:	e8 fc ff ff ff       	call   100000e7 <NiMain(void*)+0xd0>	100000e7: R_386_PC32	NWindow::NWindow(int, int, int, int, char const*, int)
100000eb:	83 c4 20             	add    esp,0x20
100000ee:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
100000f1:	c7 45 cc 90 00 00 00 	mov    DWORD PTR [ebp-0x34],0x90
100000f8:	83 ec 0c             	sub    esp,0xc
100000fb:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
100000fe:	e8 fc ff ff ff       	call   100000ff <NiMain(void*)+0xe8>	100000ff: R_386_PC32	malloc
10000103:	83 c4 10             	add    esp,0x10
10000106:	89 c3                	mov    ebx,eax
10000108:	83 ec 04             	sub    esp,0x4
1000010b:	6a 00                	push   0x0
1000010d:	68 52 8e 00 10       	push   0x10008e52	1000010e: R_386_32	.text
10000112:	68 c2 01 00 00       	push   0x1c2
10000117:	68 c2 01 00 00       	push   0x1c2
1000011c:	6a 58                	push   0x58
1000011e:	68 b4 00 00 00       	push   0xb4
10000123:	53                   	push   ebx
10000124:	e8 fc ff ff ff       	call   10000125 <NiMain(void*)+0x10e>	10000125: R_386_PC32	NWindow::NWindow(int, int, int, int, char const*, int)
10000129:	83 c4 20             	add    esp,0x20
1000012c:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
1000012f:	c7 45 d0 88 00 00 00 	mov    DWORD PTR [ebp-0x30],0x88
10000136:	83 ec 0c             	sub    esp,0xc
10000139:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
1000013c:	e8 fc ff ff ff       	call   1000013d <NiMain(void*)+0x126>	1000013d: R_386_PC32	malloc
10000141:	83 c4 10             	add    esp,0x10
10000144:	89 c3                	mov    ebx,eax
10000146:	83 ec 0c             	sub    esp,0xc
10000149:	68 58 02 00 00       	push   0x258
1000014e:	68 40 06 00 00       	push   0x640
10000153:	6a 28                	push   0x28
10000155:	6a 0f                	push   0xf
10000157:	53                   	push   ebx
10000158:	e8 fc ff ff ff       	call   10000159 <NiMain(void*)+0x142>	10000159: R_386_PC32	NButton::NButton(int, int, int, int)
1000015d:	83 c4 20             	add    esp,0x20
10000160:	89 5d dc             	mov    DWORD PTR [ebp-0x24],ebx
10000163:	a1 00 00 00 00       	mov    eax,ds:0x0	10000164: R_386_32	screen
10000168:	83 ec 0c             	sub    esp,0xc
1000016b:	50                   	push   eax
1000016c:	e8 fc ff ff ff       	call   1000016d <NiMain(void*)+0x156>	1000016d: R_386_PC32	Video::getWidth()
10000171:	83 c4 10             	add    esp,0x10
10000174:	89 c6                	mov    esi,eax
10000176:	a1 00 00 00 00       	mov    eax,ds:0x0	10000177: R_386_32	screen
1000017b:	83 ec 0c             	sub    esp,0xc
1000017e:	50                   	push   eax
1000017f:	e8 fc ff ff ff       	call   10000180 <NiMain(void*)+0x169>	10000180: R_386_PC32	Video::getHeight()
10000184:	83 c4 10             	add    esp,0x10
10000187:	89 c7                	mov    edi,eax
10000189:	c7 45 d4 8c 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x8c
10000190:	83 ec 0c             	sub    esp,0xc
10000193:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000196:	e8 fc ff ff ff       	call   10000197 <NiMain(void*)+0x180>	10000197: R_386_PC32	malloc
1000019b:	83 c4 10             	add    esp,0x10
1000019e:	89 c3                	mov    ebx,eax
100001a0:	83 ec 08             	sub    esp,0x8
100001a3:	68 80 80 00 00       	push   0x8080
100001a8:	57                   	push   edi
100001a9:	56                   	push   esi
100001aa:	6a 00                	push   0x0
100001ac:	6a 00                	push   0x0
100001ae:	53                   	push   ebx
100001af:	e8 fc ff ff ff       	call   100001b0 <NiMain(void*)+0x199>	100001b0: R_386_PC32	NDesktopWindow::NDesktopWindow(int, int, int, int, int)
100001b4:	83 c4 20             	add    esp,0x20
100001b7:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100001b9: R_386_32	desktopWindow
100001bd:	a1 00 00 00 00       	mov    eax,ds:0x0	100001be: R_386_32	desktopWindow
100001c2:	83 ec 08             	sub    esp,0x8
100001c5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
100001c8:	50                   	push   eax
100001c9:	e8 fc ff ff ff       	call   100001ca <NiMain(void*)+0x1b3>	100001ca: R_386_PC32	NFrame::addChild(NFrame*)
100001ce:	83 c4 10             	add    esp,0x10
100001d1:	a1 00 00 00 00       	mov    eax,ds:0x0	100001d2: R_386_32	desktopWindow
100001d6:	83 ec 08             	sub    esp,0x8
100001d9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
100001dc:	50                   	push   eax
100001dd:	e8 fc ff ff ff       	call   100001de <NiMain(void*)+0x1c7>	100001de: R_386_PC32	NFrame::addChild(NFrame*)
100001e2:	83 c4 10             	add    esp,0x10
100001e5:	e8 fc ff ff ff       	call   100001e6 <NiMain(void*)+0x1cf>	100001e6: R_386_PC32	installSystemHooks()
100001ea:	a1 00 00 00 00       	mov    eax,ds:0x0	100001eb: R_386_32	screen
100001ef:	83 ec 0c             	sub    esp,0xc
100001f2:	50                   	push   eax
100001f3:	e8 fc ff ff ff       	call   100001f4 <NiMain(void*)+0x1dd>	100001f4: R_386_PC32	Video::getWidth()
100001f8:	83 c4 10             	add    esp,0x10
100001fb:	8d 50 01             	lea    edx,[eax+0x1]
100001fe:	8d 85 24 ff ff ff    	lea    eax,[ebp-0xdc]
10000204:	83 ec 0c             	sub    esp,0xc
10000207:	6a 01                	push   0x1
10000209:	6a 01                	push   0x1
1000020b:	6a 01                	push   0x1
1000020d:	52                   	push   edx
1000020e:	50                   	push   eax
1000020f:	e8 fc ff ff ff       	call   10000210 <NiMain(void*)+0x1f9>	10000210: R_386_PC32	createRectangleRegion(int, int, int, int)
10000214:	83 c4 1c             	add    esp,0x1c
10000217:	a1 00 00 00 00       	mov    eax,ds:0x0	10000218: R_386_32	desktopWindow
1000021c:	83 ec 0c             	sub    esp,0xc
1000021f:	50                   	push   eax
10000220:	e8 fc ff ff ff       	call   10000221 <NiMain(void*)+0x20a>	10000221: R_386_PC32	NFrame::tryInvalidate()
10000225:	83 c4 10             	add    esp,0x10
10000228:	a1 00 00 00 00       	mov    eax,ds:0x0	10000229: R_386_32	desktopWindow
1000022d:	89 85 14 ff ff ff    	mov    DWORD PTR [ebp-0xec],eax
10000233:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10000235: R_386_32	screen
10000239:	89 8d 10 ff ff ff    	mov    DWORD PTR [ebp-0xf0],ecx
1000023f:	83 ec 0c             	sub    esp,0xc
10000242:	83 ec 1c             	sub    esp,0x1c
10000245:	89 e0                	mov    eax,esp
10000247:	89 c3                	mov    ebx,eax
10000249:	8d 85 24 ff ff ff    	lea    eax,[ebp-0xdc]
1000024f:	ba 07 00 00 00       	mov    edx,0x7
10000254:	89 df                	mov    edi,ebx
10000256:	89 c6                	mov    esi,eax
10000258:	89 d1                	mov    ecx,edx
1000025a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000025c:	ff b5 10 ff ff ff    	push   DWORD PTR [ebp-0xf0]
10000262:	ff b5 14 ff ff ff    	push   DWORD PTR [ebp-0xec]
10000268:	e8 fc ff ff ff       	call   10000269 <NiMain(void*)+0x252>	10000269: R_386_PC32	NFrame::repaint(Video*, Region)
1000026d:	83 c4 30             	add    esp,0x30
10000270:	a1 00 00 00 00       	mov    eax,ds:0x0	10000271: R_386_32	screen
10000275:	83 ec 0c             	sub    esp,0xc
10000278:	50                   	push   eax
10000279:	e8 fc ff ff ff       	call   1000027a <NiMain(void*)+0x263>	1000027a: R_386_PC32	mouseInit(Video*)
1000027e:	83 c4 10             	add    esp,0x10
10000281:	c7 45 d8 c4 07 00 00 	mov    DWORD PTR [ebp-0x28],0x7c4
10000288:	83 ec 0c             	sub    esp,0xc
1000028b:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
1000028e:	e8 fc ff ff ff       	call   1000028f <NiMain(void*)+0x278>	1000028f: R_386_PC32	malloc
10000293:	83 c4 10             	add    esp,0x10
10000296:	89 c3                	mov    ebx,eax
10000298:	6a 00                	push   0x0
1000029a:	6a 00                	push   0x0
1000029c:	68 62 8e 00 10       	push   0x10008e62	1000029d: R_386_32	.text
100002a1:	53                   	push   ebx
100002a2:	e8 fc ff ff ff       	call   100002a3 <NiMain(void*)+0x28c>	100002a3: R_386_PC32	Process::Process(char const*, Process*, char**)
100002a7:	83 c4 10             	add    esp,0x10
100002aa:	83 ec 0c             	sub    esp,0xc
100002ad:	53                   	push   ebx
100002ae:	e8 fc ff ff ff       	call   100002af <NiMain(void*)+0x298>	100002af: R_386_PC32	Process::createUserThread()
100002b3:	83 c4 10             	add    esp,0x10
100002b6:	83 ec 0c             	sub    esp,0xc
100002b9:	6a 02                	push   0x2
100002bb:	e8 fc ff ff ff       	call   100002bc <NiMain(void*)+0x2a5>	100002bc: R_386_PC32	blockTask(TaskState)
100002c0:	83 c4 10             	add    esp,0x10
100002c3:	eb f1                	jmp    100002b6 <NiMain(void*)+0x29f>

100002c5 <lookupInFontTableByNameOnly(char const*, int)>:
100002c5:	55                   	push   ebp
100002c6:	89 e5                	mov    ebp,esp
100002c8:	83 ec 18             	sub    esp,0x18
100002cb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100002d2:	a1 00 00 00 00       	mov    eax,ds:0x0	100002d3: R_386_32	fontTable
100002d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100002da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100002dd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
100002e1:	74 43                	je     10000326 <lookupInFontTableByNameOnly(char const*, int)+0x61>
100002e3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100002e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
100002e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
100002ec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100002ef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
100002f2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100002f5:	8b 00                	mov    eax,DWORD PTR [eax]
100002f7:	85 c0                	test   eax,eax
100002f9:	74 2a                	je     10000325 <lookupInFontTableByNameOnly(char const*, int)+0x60>
100002fb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
100002fe:	8b 00                	mov    eax,DWORD PTR [eax]
10000300:	83 ec 08             	sub    esp,0x8
10000303:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10000306:	50                   	push   eax
10000307:	e8 fc ff ff ff       	call   10000308 <lookupInFontTableByNameOnly(char const*, int)+0x43>	10000308: R_386_PC32	strcmp
1000030c:	83 c4 10             	add    esp,0x10
1000030f:	85 c0                	test   eax,eax
10000311:	75 0d                	jne    10000320 <lookupInFontTableByNameOnly(char const*, int)+0x5b>
10000313:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000316:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
10000319:	74 05                	je     10000320 <lookupInFontTableByNameOnly(char const*, int)+0x5b>
1000031b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000031e:	eb 0b                	jmp    1000032b <lookupInFontTableByNameOnly(char const*, int)+0x66>
10000320:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10000323:	eb b8                	jmp    100002dd <lookupInFontTableByNameOnly(char const*, int)+0x18>
10000325:	90                   	nop
10000326:	b8 ff ff ff ff       	mov    eax,0xffffffff
1000032b:	c9                   	leave  
1000032c:	c3                   	ret    

1000032d <lookupInFontTable(FontStyle)>:
1000032d:	55                   	push   ebp
1000032e:	89 e5                	mov    ebp,esp
10000330:	83 ec 18             	sub    esp,0x18
10000333:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
1000033a:	a1 00 00 00 00       	mov    eax,ds:0x0	1000033b: R_386_32	fontTable
1000033f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000342:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10000345:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10000349:	74 66                	je     100003b1 <lookupInFontTable(FontStyle)+0x84>
1000034b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
1000034e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10000351:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10000354:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000357:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
1000035a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000035d:	8b 00                	mov    eax,DWORD PTR [eax]
1000035f:	85 c0                	test   eax,eax
10000361:	74 4d                	je     100003b0 <lookupInFontTable(FontStyle)+0x83>
10000363:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000366:	8b 00                	mov    eax,DWORD PTR [eax]
10000368:	8b 90 80 00 00 00    	mov    edx,DWORD PTR [eax+0x80]
1000036e:	8b 85 88 00 00 00    	mov    eax,DWORD PTR [ebp+0x88]
10000374:	39 c2                	cmp    edx,eax
10000376:	75 33                	jne    100003ab <lookupInFontTable(FontStyle)+0x7e>
10000378:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
1000037b:	8b 00                	mov    eax,DWORD PTR [eax]
1000037d:	83 ec 08             	sub    esp,0x8
10000380:	8d 55 08             	lea    edx,[ebp+0x8]
10000383:	52                   	push   edx
10000384:	50                   	push   eax
10000385:	e8 fc ff ff ff       	call   10000386 <lookupInFontTable(FontStyle)+0x59>	10000386: R_386_PC32	strcmp
1000038a:	83 c4 10             	add    esp,0x10
1000038d:	85 c0                	test   eax,eax
1000038f:	75 1a                	jne    100003ab <lookupInFontTable(FontStyle)+0x7e>
10000391:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
10000394:	8b 00                	mov    eax,DWORD PTR [eax]
10000396:	8b 90 84 00 00 00    	mov    edx,DWORD PTR [eax+0x84]
1000039c:	8b 85 8c 00 00 00    	mov    eax,DWORD PTR [ebp+0x8c]
100003a2:	39 c2                	cmp    edx,eax
100003a4:	75 05                	jne    100003ab <lookupInFontTable(FontStyle)+0x7e>
100003a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
100003a9:	eb 0b                	jmp    100003b6 <lookupInFontTable(FontStyle)+0x89>
100003ab:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
100003ae:	eb 95                	jmp    10000345 <lookupInFontTable(FontStyle)+0x18>
100003b0:	90                   	nop
100003b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
100003b6:	c9                   	leave  
100003b7:	c3                   	ret    

100003b8 <getFontHandle(FontStyle)>:
100003b8:	55                   	push   ebp
100003b9:	89 e5                	mov    ebp,esp
100003bb:	57                   	push   edi
100003bc:	56                   	push   esi
100003bd:	53                   	push   ebx
100003be:	83 ec 2c             	sub    esp,0x2c
100003c1:	a1 00 00 00 00       	mov    eax,ds:0x0	100003c2: R_386_32	fontTable
100003c6:	85 c0                	test   eax,eax
100003c8:	75 29                	jne    100003f3 <getFontHandle(FontStyle)+0x3b>
100003ca:	c7 45 d8 0c 00 00 00 	mov    DWORD PTR [ebp-0x28],0xc
100003d1:	83 ec 0c             	sub    esp,0xc
100003d4:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
100003d7:	e8 fc ff ff ff       	call   100003d8 <getFontHandle(FontStyle)+0x20>	100003d8: R_386_PC32	malloc
100003dc:	83 c4 10             	add    esp,0x10
100003df:	89 c3                	mov    ebx,eax
100003e1:	83 ec 0c             	sub    esp,0xc
100003e4:	53                   	push   ebx
100003e5:	e8 fc ff ff ff       	call   100003e6 <getFontHandle(FontStyle)+0x2e>	100003e6: R_386_PC32	LinkedList2<Font*>::LinkedList2()
100003ea:	83 c4 10             	add    esp,0x10
100003ed:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	100003ef: R_386_32	fontTable
100003f3:	83 ec 08             	sub    esp,0x8
100003f6:	81 ec 88 00 00 00    	sub    esp,0x88
100003fc:	89 e0                	mov    eax,esp
100003fe:	89 c2                	mov    edx,eax
10000400:	8d 5d 08             	lea    ebx,[ebp+0x8]
10000403:	b8 22 00 00 00       	mov    eax,0x22
10000408:	89 d7                	mov    edi,edx
1000040a:	89 de                	mov    esi,ebx
1000040c:	89 c1                	mov    ecx,eax
1000040e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000410:	e8 fc ff ff ff       	call   10000411 <getFontHandle(FontStyle)+0x59>	10000411: R_386_PC32	lookupInFontTable(FontStyle)
10000415:	81 c4 90 00 00 00    	add    esp,0x90
1000041b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000041e:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
10000422:	74 08                	je     1000042c <getFontHandle(FontStyle)+0x74>
10000424:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000427:	e9 ea 00 00 00       	jmp    10000516 <getFontHandle(FontStyle)+0x15e>
1000042c:	c7 45 d4 94 06 00 00 	mov    DWORD PTR [ebp-0x2c],0x694
10000433:	83 ec 0c             	sub    esp,0xc
10000436:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10000439:	e8 fc ff ff ff       	call   1000043a <getFontHandle(FontStyle)+0x82>	1000043a: R_386_PC32	malloc
1000043e:	83 c4 10             	add    esp,0x10
10000441:	89 c6                	mov    esi,eax
10000443:	89 f3                	mov    ebx,esi
10000445:	ba a5 01 00 00       	mov    edx,0x1a5
1000044a:	b8 00 00 00 00       	mov    eax,0x0
1000044f:	89 df                	mov    edi,ebx
10000451:	89 d1                	mov    ecx,edx
10000453:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000455:	89 75 dc             	mov    DWORD PTR [ebp-0x24],esi
10000458:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000045b:	83 ec 08             	sub    esp,0x8
1000045e:	8d 55 08             	lea    edx,[ebp+0x8]
10000461:	52                   	push   edx
10000462:	50                   	push   eax
10000463:	e8 fc ff ff ff       	call   10000464 <getFontHandle(FontStyle)+0xac>	10000464: R_386_PC32	strcpy
10000468:	83 c4 10             	add    esp,0x10
1000046b:	8b 95 88 00 00 00    	mov    edx,DWORD PTR [ebp+0x88]
10000471:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000474:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
1000047a:	8b 95 8c 00 00 00    	mov    edx,DWORD PTR [ebp+0x8c]
10000480:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000483:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
10000489:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
1000048c:	3c 2a                	cmp    al,0x2a
1000048e:	0f 94 c2             	sete   dl
10000491:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10000494:	88 90 88 00 00 00    	mov    BYTE PTR [eax+0x88],dl
1000049a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
1000049d:	c7 80 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x8c],0x0
100004a7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100004ae:	83 7d e4 7f          	cmp    DWORD PTR [ebp-0x1c],0x7f
100004b2:	7f 19                	jg     100004cd <getFontHandle(FontStyle)+0x115>
100004b4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100004b7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100004ba:	81 c2 24 01 00 00    	add    edx,0x124
100004c0:	c7 44 90 04 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x4],0x0
100004c8:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
100004cb:	eb e1                	jmp    100004ae <getFontHandle(FontStyle)+0xf6>
100004cd:	a1 00 00 00 00       	mov    eax,ds:0x0	100004ce: R_386_32	fontTable
100004d2:	83 ec 0c             	sub    esp,0xc
100004d5:	50                   	push   eax
100004d6:	e8 fc ff ff ff       	call   100004d7 <getFontHandle(FontStyle)+0x11f>	100004d7: R_386_PC32	LinkedList2<Font*>::length()
100004db:	83 c4 10             	add    esp,0x10
100004de:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100004e1:	a1 00 00 00 00       	mov    eax,ds:0x0	100004e2: R_386_32	fontTable
100004e6:	83 ec 08             	sub    esp,0x8
100004e9:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
100004ec:	50                   	push   eax
100004ed:	e8 fc ff ff ff       	call   100004ee <getFontHandle(FontStyle)+0x136>	100004ee: R_386_PC32	LinkedList2<Font*>::appendNode(Font*)
100004f2:	83 c4 10             	add    esp,0x10
100004f5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100004f8:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
100004fe:	85 c0                	test   eax,eax
10000500:	75 11                	jne    10000513 <getFontHandle(FontStyle)+0x15b>
10000502:	83 ec 08             	sub    esp,0x8
10000505:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10000508:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
1000050b:	e8 fc ff ff ff       	call   1000050c <getFontHandle(FontStyle)+0x154>	1000050c: R_386_PC32	loadSSFNFont(Font*, int)
10000510:	83 c4 10             	add    esp,0x10
10000513:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10000516:	8d 65 f4             	lea    esp,[ebp-0xc]
10000519:	5b                   	pop    ebx
1000051a:	5e                   	pop    esi
1000051b:	5f                   	pop    edi
1000051c:	5d                   	pop    ebp
1000051d:	c3                   	ret    

1000051e <getFontFromHandle(int)>:
1000051e:	55                   	push   ebp
1000051f:	89 e5                	mov    ebp,esp
10000521:	83 ec 10             	sub    esp,0x10
10000524:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
1000052b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000052c: R_386_32	fontTable
10000530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000533:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
10000536:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
1000053a:	74 23                	je     1000055f <getFontFromHandle(int)+0x41>
1000053c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
1000053f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10000542:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
10000545:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10000548:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
1000054b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
1000054e:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
10000551:	75 07                	jne    1000055a <getFontFromHandle(int)+0x3c>
10000553:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10000556:	8b 00                	mov    eax,DWORD PTR [eax]
10000558:	eb 0a                	jmp    10000564 <getFontFromHandle(int)+0x46>
1000055a:	ff 45 fc             	inc    DWORD PTR [ebp-0x4]
1000055d:	eb d7                	jmp    10000536 <getFontFromHandle(int)+0x18>
1000055f:	b8 00 00 00 00       	mov    eax,0x0
10000564:	c9                   	leave  
10000565:	c3                   	ret    

10000566 <getFontRegion(int, int, bool*, int*, int*)>:
10000566:	55                   	push   ebp
10000567:	89 e5                	mov    ebp,esp
10000569:	57                   	push   edi
1000056a:	56                   	push   esi
1000056b:	53                   	push   ebx
1000056c:	83 ec 6c             	sub    esp,0x6c
1000056f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10000572:	e8 fc ff ff ff       	call   10000573 <getFontRegion(int, int, bool*, int*, int*)+0xd>	10000573: R_386_PC32	getFontFromHandle(int)
10000577:	83 c4 04             	add    esp,0x4
1000057a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000057d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000580:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10000583:	81 c2 24 01 00 00    	add    edx,0x124
10000589:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
1000058d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10000590:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10000593:	c6 00 00             	mov    BYTE PTR [eax],0x0
10000596:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
1000059a:	74 3f                	je     100005db <getFontRegion(int, int, bool*, int*, int*)+0x75>
1000059c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
1000059f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005a2:	83 c2 24             	add    edx,0x24
100005a5:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
100005a8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100005ab:	89 10                	mov    DWORD PTR [eax],edx
100005ad:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100005b0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100005b3:	81 c2 a4 00 00 00    	add    edx,0xa4
100005b9:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
100005bc:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
100005bf:	89 10                	mov    DWORD PTR [eax],edx
100005c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100005c4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100005c7:	89 c3                	mov    ebx,eax
100005c9:	b8 07 00 00 00       	mov    eax,0x7
100005ce:	89 d7                	mov    edi,edx
100005d0:	89 de                	mov    esi,ebx
100005d2:	89 c1                	mov    ecx,eax
100005d4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100005d6:	e9 1f 01 00 00       	jmp    100006fa <getFontRegion(int, int, bool*, int*, int*)+0x194>
100005db:	83 ec 0c             	sub    esp,0xc
100005de:	8d 45 88             	lea    eax,[ebp-0x78]
100005e1:	50                   	push   eax
100005e2:	e8 fc ff ff ff       	call   100005e3 <getFontRegion(int, int, bool*, int*, int*)+0x7d>	100005e3: R_386_PC32	Region::Region()
100005e7:	83 c4 10             	add    esp,0x10
100005ea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100005ed:	8a 80 88 00 00 00    	mov    al,BYTE PTR [eax+0x88]
100005f3:	84 c0                	test   al,al
100005f5:	74 2e                	je     10000625 <getFontRegion(int, int, bool*, int*, int*)+0xbf>
100005f7:	8d 45 a4             	lea    eax,[ebp-0x5c]
100005fa:	83 ec 0c             	sub    esp,0xc
100005fd:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10000600:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000603:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000606:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000609:	50                   	push   eax
1000060a:	e8 fc ff ff ff       	call   1000060b <getFontRegion(int, int, bool*, int*, int*)+0xa5>	1000060b: R_386_PC32	getLegacyFontRegion(Font*, int, int*, int*)
1000060f:	83 c4 1c             	add    esp,0x1c
10000612:	8d 45 88             	lea    eax,[ebp-0x78]
10000615:	8d 55 a4             	lea    edx,[ebp-0x5c]
10000618:	b9 19 00 00 00       	mov    ecx,0x19
1000061d:	89 c7                	mov    edi,eax
1000061f:	89 d6                	mov    esi,edx
10000621:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000623:	eb 2c                	jmp    10000651 <getFontRegion(int, int, bool*, int*, int*)+0xeb>
10000625:	8d 45 c0             	lea    eax,[ebp-0x40]
10000628:	83 ec 0c             	sub    esp,0xc
1000062b:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
1000062e:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10000631:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10000634:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10000637:	50                   	push   eax
10000638:	e8 fc ff ff ff       	call   10000639 <getFontRegion(int, int, bool*, int*, int*)+0xd3>	10000639: R_386_PC32	getSSFNFontRegion(Font*, int, int*, int*)
1000063d:	83 c4 1c             	add    esp,0x1c
10000640:	8d 45 88             	lea    eax,[ebp-0x78]
10000643:	8d 55 c0             	lea    edx,[ebp-0x40]
10000646:	b9 19 00 00 00       	mov    ecx,0x19
1000064b:	89 c7                	mov    edi,eax
1000064d:	89 d6                	mov    esi,edx
1000064f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000651:	83 7d 10 7f          	cmp    DWORD PTR [ebp+0x10],0x7f
10000655:	0f 8f 84 00 00 00    	jg     100006df <getFontRegion(int, int, bool*, int*, int*)+0x179>
1000065b:	c7 45 dc 1c 00 00 00 	mov    DWORD PTR [ebp-0x24],0x1c
10000662:	83 ec 0c             	sub    esp,0xc
10000665:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
10000668:	e8 fc ff ff ff       	call   10000669 <getFontRegion(int, int, bool*, int*, int*)+0x103>	10000669: R_386_PC32	malloc
1000066d:	83 c4 10             	add    esp,0x10
10000670:	89 c3                	mov    ebx,eax
10000672:	83 ec 0c             	sub    esp,0xc
10000675:	6a 00                	push   0x0
10000677:	6a 00                	push   0x0
10000679:	6a 00                	push   0x0
1000067b:	6a 00                	push   0x0
1000067d:	53                   	push   ebx
1000067e:	e8 fc ff ff ff       	call   1000067f <getFontRegion(int, int, bool*, int*, int*)+0x119>	1000067f: R_386_PC32	Region::Region(int, int, int, int)
10000683:	83 c4 20             	add    esp,0x20
10000686:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000689:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000068c:	81 c2 24 01 00 00    	add    edx,0x124
10000692:	89 5c 90 04          	mov    DWORD PTR [eax+edx*4+0x4],ebx
10000696:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10000699:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000069c:	81 c2 24 01 00 00    	add    edx,0x124
100006a2:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
100006a6:	89 c3                	mov    ebx,eax
100006a8:	8d 45 88             	lea    eax,[ebp-0x78]
100006ab:	ba 19 00 00 00       	mov    edx,0x19
100006b0:	89 df                	mov    edi,ebx
100006b2:	89 c6                	mov    esi,eax
100006b4:	89 d1                	mov    ecx,edx
100006b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100006b8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
100006bb:	8b 10                	mov    edx,DWORD PTR [eax]
100006bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100006c0:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100006c3:	83 c1 24             	add    ecx,0x24
100006c6:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
100006c9:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
100006cc:	8b 10                	mov    edx,DWORD PTR [eax]
100006ce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100006d1:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100006d4:	81 c1 a4 00 00 00    	add    ecx,0xa4
100006da:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
100006dd:	eb 06                	jmp    100006e5 <getFontRegion(int, int, bool*, int*, int*)+0x17f>
100006df:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
100006e2:	c6 00 01             	mov    BYTE PTR [eax],0x1
100006e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006e8:	89 c3                	mov    ebx,eax
100006ea:	8d 45 88             	lea    eax,[ebp-0x78]
100006ed:	ba 07 00 00 00       	mov    edx,0x7
100006f2:	89 df                	mov    edi,ebx
100006f4:	89 c6                	mov    esi,eax
100006f6:	89 d1                	mov    ecx,edx
100006f8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100006fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100006fd:	8d 65 f4             	lea    esp,[ebp-0xc]
10000700:	5b                   	pop    ebx
10000701:	5e                   	pop    esi
10000702:	5f                   	pop    edi
10000703:	5d                   	pop    ebp
10000704:	c2 04 00             	ret    0x4

10000707 <initFonts()>:
10000707:	55                   	push   ebp
10000708:	89 e5                	mov    ebp,esp
1000070a:	83 ec 08             	sub    esp,0x8
1000070d:	e8 fc ff ff ff       	call   1000070e <initFonts()+0x7>	1000070e: R_386_PC32	loadLegacyFonts()
10000712:	90                   	nop
10000713:	c9                   	leave  
10000714:	c3                   	ret    

10000715 <loadFont(FontStyle)>:
10000715:	55                   	push   ebp
10000716:	89 e5                	mov    ebp,esp
10000718:	57                   	push   edi
10000719:	56                   	push   esi
1000071a:	53                   	push   ebx
1000071b:	83 ec 0c             	sub    esp,0xc
1000071e:	83 ec 08             	sub    esp,0x8
10000721:	81 ec 88 00 00 00    	sub    esp,0x88
10000727:	89 e0                	mov    eax,esp
10000729:	89 c2                	mov    edx,eax
1000072b:	8d 5d 08             	lea    ebx,[ebp+0x8]
1000072e:	b8 22 00 00 00       	mov    eax,0x22
10000733:	89 d7                	mov    edi,edx
10000735:	89 de                	mov    esi,ebx
10000737:	89 c1                	mov    ecx,eax
10000739:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000073b:	e8 fc ff ff ff       	call   1000073c <loadFont(FontStyle)+0x27>	1000073c: R_386_PC32	getFontHandle(FontStyle)
10000740:	81 c4 90 00 00 00    	add    esp,0x90
10000746:	8d 65 f4             	lea    esp,[ebp-0xc]
10000749:	5b                   	pop    ebx
1000074a:	5e                   	pop    esi
1000074b:	5f                   	pop    edi
1000074c:	5d                   	pop    ebp
1000074d:	c3                   	ret    

1000074e <reverse(unsigned char)>:
1000074e:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
10000752:	c0 c0 04             	rol    al,0x4
10000755:	0f b6 c0             	movzx  eax,al
10000758:	89 c2                	mov    edx,eax
1000075a:	c1 e0 02             	shl    eax,0x2
1000075d:	c1 fa 02             	sar    edx,0x2
10000760:	83 e0 cc             	and    eax,0xffffffcc
10000763:	83 e2 33             	and    edx,0x33
10000766:	09 c2                	or     edx,eax
10000768:	0f b6 d2             	movzx  edx,dl
1000076b:	89 d0                	mov    eax,edx
1000076d:	01 d2                	add    edx,edx
1000076f:	d1 f8                	sar    eax,1
10000771:	83 e2 aa             	and    edx,0xffffffaa
10000774:	83 e0 55             	and    eax,0x55
10000777:	09 d0                	or     eax,edx
10000779:	c3                   	ret    

1000077a <loadLegacyFonts()>:
1000077a:	57                   	push   edi
1000077b:	b9 10 10 00 00       	mov    ecx,0x1010
10000780:	56                   	push   esi
10000781:	bf 00 00 00 00       	mov    edi,0x0	10000782: R_386_32	FONT
10000786:	53                   	push   ebx
10000787:	be 00 00 00 00       	mov    esi,0x0	10000788: R_386_32	systemFontBuiltin
1000078c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000078e:	b9 00 02 00 00       	mov    ecx,0x200
10000793:	0f be 81 10 00 00 00 	movsx  eax,BYTE PTR [ecx+0x10]	10000796: R_386_32	FONT
1000079a:	8a 91 1f 00 00 00    	mov    dl,BYTE PTR [ecx+0x1f]	1000079c: R_386_32	FONT
100007a0:	6b f0 1c             	imul   esi,eax,0x1c
100007a3:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	100007a5: R_386_32	FontWidths
100007a9:	31 db                	xor    ebx,ebx
100007ab:	0f b6 84 19 11 00 00 00 	movzx  eax,BYTE PTR [ecx+ebx*1+0x11]	100007af: R_386_32	FONT
100007b3:	50                   	push   eax
100007b4:	e8 fc ff ff ff       	call   100007b5 <loadLegacyFonts()+0x3b>	100007b5: R_386_PC32	reverse(unsigned char)
100007b9:	5a                   	pop    edx
100007ba:	0f b6 c0             	movzx  eax,al
100007bd:	66 89 84 5e 00 00 00 00 	mov    WORD PTR [esi+ebx*2+0x0],ax	100007c1: R_386_32	Fonts
100007c5:	43                   	inc    ebx
100007c6:	83 fb 0e             	cmp    ebx,0xe
100007c9:	75 e0                	jne    100007ab <loadLegacyFonts()+0x31>
100007cb:	83 c1 10             	add    ecx,0x10
100007ce:	81 f9 00 08 00 00    	cmp    ecx,0x800
100007d4:	75 bd                	jne    10000793 <loadLegacyFonts()+0x19>
100007d6:	5b                   	pop    ebx
100007d7:	5e                   	pop    esi
100007d8:	5f                   	pop    edi
100007d9:	c3                   	ret    

100007da <getLegacyFontRegion(Font*, int, int*, int*)>:
100007da:	55                   	push   ebp
100007db:	b9 38 00 00 00       	mov    ecx,0x38
100007e0:	57                   	push   edi
100007e1:	56                   	push   esi
100007e2:	53                   	push   ebx
100007e3:	81 ec fc 00 00 00    	sub    esp,0xfc
100007e9:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
100007f0:	8d 74 24 10          	lea    esi,[esp+0x10]
100007f4:	8b 9a 84 00 00 00    	mov    ebx,DWORD PTR [edx+0x84]
100007fa:	89 f7                	mov    edi,esi
100007fc:	89 d8                	mov    eax,ebx
100007fe:	8b b2 8c 00 00 00    	mov    esi,DWORD PTR [edx+0x8c]
10000804:	83 e0 02             	and    eax,0x2
10000807:	69 d6 e4 1b 00 00    	imul   edx,esi,0x1be4
1000080d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000811:	83 e3 01             	and    ebx,0x1
10000814:	31 c0                	xor    eax,eax
10000816:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000818:	6b 84 24 18 01 00 00 1c 	imul   eax,DWORD PTR [esp+0x118],0x1c
10000820:	01 d0                	add    eax,edx
10000822:	31 d2                	xor    edx,edx
10000824:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000828:	31 c0                	xor    eax,eax
1000082a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
1000082f:	74 0a                	je     1000083b <getLegacyFontRegion(Font*, int, int*, int*)+0x61>
10000831:	b8 0e 00 00 00       	mov    eax,0xe
10000836:	29 d0                	sub    eax,edx
10000838:	c1 f8 02             	sar    eax,0x2
1000083b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000083f:	89 d5                	mov    ebp,edx
10000841:	0f b6 bc 57 00 00 00 00 	movzx  edi,BYTE PTR [edi+edx*2+0x0]	10000845: R_386_32	Fonts
10000849:	c1 e5 04             	shl    ebp,0x4
1000084c:	8d 0c 28             	lea    ecx,[eax+ebp*1]
1000084f:	8d 6c 28 08          	lea    ebp,[eax+ebp*1+0x8]
10000853:	89 f8                	mov    eax,edi
10000855:	83 e7 01             	and    edi,0x1
10000858:	0f b6 c0             	movzx  eax,al
1000085b:	74 0e                	je     1000086b <getLegacyFontRegion(Font*, int, int*, int*)+0x91>
1000085d:	c6 44 0c 10 01       	mov    BYTE PTR [esp+ecx*1+0x10],0x1
10000862:	85 db                	test   ebx,ebx
10000864:	74 05                	je     1000086b <getLegacyFontRegion(Font*, int, int*, int*)+0x91>
10000866:	c6 44 0c 11 01       	mov    BYTE PTR [esp+ecx*1+0x11],0x1
1000086b:	d1 f8                	sar    eax,1
1000086d:	41                   	inc    ecx
1000086e:	89 c7                	mov    edi,eax
10000870:	39 cd                	cmp    ebp,ecx
10000872:	75 df                	jne    10000853 <getLegacyFontRegion(Font*, int, int*, int*)+0x79>
10000874:	42                   	inc    edx
10000875:	83 fa 0e             	cmp    edx,0xe
10000878:	75 ae                	jne    10000828 <getLegacyFontRegion(Font*, int, int*, int*)+0x4e>
1000087a:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
10000881:	69 f6 ff 00 00 00    	imul   esi,esi,0xff
10000887:	0f b6 84 30 00 00 00 00 	movzx  eax,BYTE PTR [eax+esi*1+0x0]	1000088b: R_386_32	FontWidths
1000088f:	01 c3                	add    ebx,eax
10000891:	8b 84 24 1c 01 00 00 	mov    eax,DWORD PTR [esp+0x11c]
10000898:	89 18                	mov    DWORD PTR [eax],ebx
1000089a:	8b 84 24 20 01 00 00 	mov    eax,DWORD PTR [esp+0x120]
100008a1:	c7 00 0e 00 00 00    	mov    DWORD PTR [eax],0xe
100008a7:	50                   	push   eax
100008a8:	50                   	push   eax
100008a9:	6a 0e                	push   0xe
100008ab:	6a 10                	push   0x10
100008ad:	8d 44 24 20          	lea    eax,[esp+0x20]
100008b1:	50                   	push   eax
100008b2:	6a 00                	push   0x0
100008b4:	6a 00                	push   0x0
100008b6:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
100008bd:	e8 fc ff ff ff       	call   100008be <getLegacyFontRegion(Font*, int, int*, int*)+0xe4>	100008be: R_386_PC32	createTightFontRegion(int, int, unsigned char*, int, int)
100008c2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
100008c9:	81 c4 18 01 00 00    	add    esp,0x118
100008cf:	5b                   	pop    ebx
100008d0:	5e                   	pop    esi
100008d1:	5f                   	pop    edi
100008d2:	5d                   	pop    ebp
100008d3:	c2 04 00             	ret    0x4

100008d6 <loadCursorFile(char const*)>:
100008d6:	57                   	push   edi
100008d7:	56                   	push   esi
100008d8:	53                   	push   ebx
100008d9:	83 ec 2c             	sub    esp,0x2c
100008dc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
100008e0:	68 14 01 00 00       	push   0x114
100008e5:	e8 fc ff ff ff       	call   100008e6 <loadCursorFile(char const*)+0x10>	100008e6: R_386_PC32	malloc
100008ea:	83 c4 0c             	add    esp,0xc
100008ed:	89 c6                	mov    esi,eax
100008ef:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100008f1: R_386_32	kernelProcess
100008f5:	53                   	push   ebx
100008f6:	50                   	push   eax
100008f7:	e8 fc ff ff ff       	call   100008f8 <loadCursorFile(char const*)+0x22>	100008f8: R_386_PC32	File::File(char const*, Process*)
100008fc:	5a                   	pop    edx
100008fd:	59                   	pop    ecx
100008fe:	6a 01                	push   0x1
10000900:	56                   	push   esi
10000901:	e8 fc ff ff ff       	call   10000902 <loadCursorFile(char const*)+0x2c>	10000902: R_386_PC32	File::open(FileOpenMode)
10000906:	83 c4 10             	add    esp,0x10
10000909:	85 c0                	test   eax,eax
1000090b:	74 0a                	je     10000917 <loadCursorFile(char const*)+0x41>
1000090d:	83 ec 0c             	sub    esp,0xc
10000910:	68 e0 8e 00 10       	push   0x10008ee0	10000911: R_386_32	.text
10000915:	eb 5b                	jmp    10000972 <loadCursorFile(char const*)+0x9c>
10000917:	50                   	push   eax
10000918:	8d 44 24 17          	lea    eax,[esp+0x17]
1000091c:	50                   	push   eax
1000091d:	8d 44 24 20          	lea    eax,[esp+0x20]
10000921:	50                   	push   eax
10000922:	56                   	push   esi
10000923:	e8 fc ff ff ff       	call   10000924 <loadCursorFile(char const*)+0x4e>	10000924: R_386_PC32	File::stat(unsigned long long*, bool*)
10000928:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
1000092c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10000930:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10000934:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10000938:	58                   	pop    eax
10000939:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
1000093d:	e8 fc ff ff ff       	call   1000093e <loadCursorFile(char const*)+0x68>	1000093e: R_386_PC32	malloc
10000942:	89 c3                	mov    ebx,eax
10000944:	58                   	pop    eax
10000945:	8b 06                	mov    eax,DWORD PTR [esi]
10000947:	8d 4c 24 20          	lea    ecx,[esp+0x20]
1000094b:	51                   	push   ecx
1000094c:	53                   	push   ebx
1000094d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000951:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10000955:	56                   	push   esi
10000956:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10000959:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000095d:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10000961:	83 c4 20             	add    esp,0x20
10000964:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10000968:	74 17                	je     10000981 <loadCursorFile(char const*)+0xab>
1000096a:	83 ec 0c             	sub    esp,0xc
1000096d:	68 f4 8e 00 10       	push   0x10008ef4	1000096e: R_386_32	.text
10000972:	e8 fc ff ff ff       	call   10000973 <loadCursorFile(char const*)+0x9d>	10000973: R_386_PC32	Dbg::kprintf(char const*, ...)
10000977:	83 c4 10             	add    esp,0x10
1000097a:	83 c4 20             	add    esp,0x20
1000097d:	5b                   	pop    ebx
1000097e:	5e                   	pop    esi
1000097f:	5f                   	pop    edi
10000980:	c3                   	ret    
10000981:	6a 00                	push   0x0
10000983:	68 04 01 00 00       	push   0x104
10000988:	52                   	push   edx
10000989:	50                   	push   eax
1000098a:	e8 fc ff ff ff       	call   1000098b <loadCursorFile(char const*)+0xb5>	1000098b: R_386_PC32	__udivdi3
1000098f:	83 c4 10             	add    esp,0x10
10000992:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000996:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
1000099d:	8d 04 83             	lea    eax,[ebx+eax*4]
100009a0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100009a4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
100009a8:	39 14 24             	cmp    DWORD PTR [esp],edx
100009ab:	0f 8d f8 00 00 00    	jge    10000aa9 <loadCursorFile(char const*)+0x1d3>
100009b1:	8b 04 24             	mov    eax,DWORD PTR [esp]
100009b4:	8d 34 83             	lea    esi,[ebx+eax*4]
100009b7:	50                   	push   eax
100009b8:	6a 04                	push   0x4
100009ba:	68 08 8f 00 10       	push   0x10008f08	100009bb: R_386_32	.text
100009bf:	56                   	push   esi
100009c0:	e8 fc ff ff ff       	call   100009c1 <loadCursorFile(char const*)+0xeb>	100009c1: R_386_PC32	memcmp
100009c5:	83 c4 10             	add    esp,0x10
100009c8:	85 c0                	test   eax,eax
100009ca:	0f 84 b8 00 00 00    	je     10000a88 <loadCursorFile(char const*)+0x1b2>
100009d0:	50                   	push   eax
100009d1:	6a 04                	push   0x4
100009d3:	68 0d 8f 00 10       	push   0x10008f0d	100009d4: R_386_32	.text
100009d8:	56                   	push   esi
100009d9:	e8 fc ff ff ff       	call   100009da <loadCursorFile(char const*)+0x104>	100009da: R_386_PC32	memcmp
100009de:	83 c4 10             	add    esp,0x10
100009e1:	85 c0                	test   eax,eax
100009e3:	74 7b                	je     10000a60 <loadCursorFile(char const*)+0x18a>
100009e5:	50                   	push   eax
100009e6:	6a 04                	push   0x4
100009e8:	68 12 8f 00 10       	push   0x10008f12	100009e9: R_386_32	.text
100009ed:	56                   	push   esi
100009ee:	e8 fc ff ff ff       	call   100009ef <loadCursorFile(char const*)+0x119>	100009ef: R_386_PC32	memcmp
100009f3:	83 c4 10             	add    esp,0x10
100009f6:	85 c0                	test   eax,eax
100009f8:	74 6d                	je     10000a67 <loadCursorFile(char const*)+0x191>
100009fa:	57                   	push   edi
100009fb:	6a 04                	push   0x4
100009fd:	68 17 8f 00 10       	push   0x10008f17	100009fe: R_386_32	.text
10000a02:	56                   	push   esi
10000a03:	e8 fc ff ff ff       	call   10000a04 <loadCursorFile(char const*)+0x12e>	10000a04: R_386_PC32	memcmp
10000a08:	83 c4 10             	add    esp,0x10
10000a0b:	85 c0                	test   eax,eax
10000a0d:	74 5f                	je     10000a6e <loadCursorFile(char const*)+0x198>
10000a0f:	51                   	push   ecx
10000a10:	6a 04                	push   0x4
10000a12:	68 1c 8f 00 10       	push   0x10008f1c	10000a13: R_386_32	.text
10000a17:	56                   	push   esi
10000a18:	e8 fc ff ff ff       	call   10000a19 <loadCursorFile(char const*)+0x143>	10000a19: R_386_PC32	memcmp
10000a1d:	83 c4 10             	add    esp,0x10
10000a20:	85 c0                	test   eax,eax
10000a22:	74 51                	je     10000a75 <loadCursorFile(char const*)+0x19f>
10000a24:	52                   	push   edx
10000a25:	6a 04                	push   0x4
10000a27:	68 21 8f 00 10       	push   0x10008f21	10000a28: R_386_32	.text
10000a2c:	56                   	push   esi
10000a2d:	e8 fc ff ff ff       	call   10000a2e <loadCursorFile(char const*)+0x158>	10000a2e: R_386_PC32	memcmp
10000a32:	83 c4 10             	add    esp,0x10
10000a35:	85 c0                	test   eax,eax
10000a37:	74 43                	je     10000a7c <loadCursorFile(char const*)+0x1a6>
10000a39:	50                   	push   eax
10000a3a:	6a 04                	push   0x4
10000a3c:	68 26 8f 00 10       	push   0x10008f26	10000a3d: R_386_32	.text
10000a41:	56                   	push   esi
10000a42:	e8 fc ff ff ff       	call   10000a43 <loadCursorFile(char const*)+0x16d>	10000a43: R_386_PC32	memcmp
10000a47:	83 c4 10             	add    esp,0x10
10000a4a:	85 c0                	test   eax,eax
10000a4c:	74 35                	je     10000a83 <loadCursorFile(char const*)+0x1ad>
10000a4e:	83 ec 0c             	sub    esp,0xc
10000a51:	68 2b 8f 00 10       	push   0x10008f2b	10000a52: R_386_32	.text
10000a56:	e8 fc ff ff ff       	call   10000a57 <loadCursorFile(char const*)+0x181>	10000a57: R_386_PC32	Dbg::kprintf(char const*, ...)
10000a5b:	83 c4 10             	add    esp,0x10
10000a5e:	eb 49                	jmp    10000aa9 <loadCursorFile(char const*)+0x1d3>
10000a60:	b8 00 02 00 00       	mov    eax,0x200
10000a65:	eb 21                	jmp    10000a88 <loadCursorFile(char const*)+0x1b2>
10000a67:	b8 00 03 00 00       	mov    eax,0x300
10000a6c:	eb 1a                	jmp    10000a88 <loadCursorFile(char const*)+0x1b2>
10000a6e:	b8 00 01 00 00       	mov    eax,0x100
10000a73:	eb 13                	jmp    10000a88 <loadCursorFile(char const*)+0x1b2>
10000a75:	b8 00 04 00 00       	mov    eax,0x400
10000a7a:	eb 0c                	jmp    10000a88 <loadCursorFile(char const*)+0x1b2>
10000a7c:	b8 00 05 00 00       	mov    eax,0x500
10000a81:	eb 05                	jmp    10000a88 <loadCursorFile(char const*)+0x1b2>
10000a83:	b8 00 06 00 00       	mov    eax,0x600
10000a88:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10000a8a: R_386_32	___mouse_data
10000a8e:	b9 00 01 00 00       	mov    ecx,0x100
10000a93:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10000a97:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000a99:	ff 04 24             	inc    DWORD PTR [esp]
10000a9c:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10000aa4:	e9 fb fe ff ff       	jmp    100009a4 <loadCursorFile(char const*)+0xce>
10000aa9:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
10000aad:	83 c4 20             	add    esp,0x20
10000ab0:	5b                   	pop    ebx
10000ab1:	5e                   	pop    esi
10000ab2:	5f                   	pop    edi
10000ab3:	e9 fc ff ff ff       	jmp    10000ab4 <loadCursorFile(char const*)+0x1de>	10000ab4: R_386_PC32	free

10000ab8 <mouseInit(Video*)>:
10000ab8:	57                   	push   edi
10000ab9:	bf 00 00 00 00       	mov    edi,0x0	10000aba: R_386_32	tightMouseRegionOld
10000abe:	56                   	push   esi
10000abf:	53                   	push   ebx
10000ac0:	83 ec 2c             	sub    esp,0x2c
10000ac3:	c7 05 00 00 00 00 32 00 00 00 	mov    DWORD PTR ds:0x0,0x32	10000ac5: R_386_32	mouseX
10000acd:	68 3f 8f 00 10       	push   0x10008f3f	10000ace: R_386_32	.text
10000ad2:	c7 05 00 00 00 00 32 00 00 00 	mov    DWORD PTR ds:0x0,0x32	10000ad4: R_386_32	mouseY
10000adc:	8d 5c 24 14          	lea    ebx,[esp+0x14]
10000ae0:	e8 fc ff ff ff       	call   10000ae1 <mouseInit(Video*)+0x29>	10000ae1: R_386_PC32	loadCursorFile(char const*)
10000ae5:	89 de                	mov    esi,ebx
10000ae7:	68 00 00 00 00       	push   0x0	10000ae8: R_386_32	___mouse_data
10000aec:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000aee: R_386_32	cursorOffset
10000af6:	6a 00                	push   0x0
10000af8:	6a 00                	push   0x0
10000afa:	53                   	push   ebx
10000afb:	e8 fc ff ff ff       	call   10000afc <mouseInit(Video*)+0x44>	10000afc: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000b00:	a1 00 00 00 00       	mov    eax,ds:0x0	10000b01: R_386_32	cursorOffset
10000b05:	83 c4 1c             	add    esp,0x1c
10000b08:	05 00 00 00 00       	add    eax,0x0	10000b09: R_386_32	___mouse_data
10000b0d:	b9 19 00 00 00       	mov    ecx,0x19
10000b12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000b14:	50                   	push   eax
10000b15:	89 de                	mov    esi,ebx
10000b17:	6a 00                	push   0x0
10000b19:	bf 00 00 00 00       	mov    edi,0x0	10000b1a: R_386_32	tightMouseRegionNew
10000b1e:	6a 00                	push   0x0
10000b20:	53                   	push   ebx
10000b21:	e8 fc ff ff ff       	call   10000b22 <mouseInit(Video*)+0x6a>	10000b22: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000b26:	b9 19 00 00 00       	mov    ecx,0x19
10000b2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000b2d:	50                   	push   eax
10000b2e:	bf 00 00 00 00       	mov    edi,0x0	10000b2f: R_386_32	pixelsUnderCursor
10000b33:	50                   	push   eax
10000b34:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000b36: R_386_32	mouseY
10000b3a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000b3c: R_386_32	mouseX
10000b40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000b44:	e8 fc ff ff ff       	call   10000b45 <mouseInit(Video*)+0x8d>	10000b45: R_386_PC32	videoSaveAreaUnderCursor(Video*, int, int)
10000b49:	b9 00 10 00 00       	mov    ecx,0x1000
10000b4e:	89 c6                	mov    esi,eax
10000b50:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000b52:	83 c4 40             	add    esp,0x40
10000b55:	5b                   	pop    ebx
10000b56:	5e                   	pop    esi
10000b57:	5f                   	pop    edi
10000b58:	c3                   	ret    

10000b59 <hideCursor(Video*, int, int, int, int)>:
10000b59:	57                   	push   edi
10000b5a:	56                   	push   esi
10000b5b:	be 00 00 00 00       	mov    esi,0x0	10000b5c: R_386_32	tightMouseRegionOld
10000b60:	83 ec 10             	sub    esp,0x10
10000b63:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
10000b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000b6b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10000b6f:	a3 10 00 00 00       	mov    ds:0x10,eax	10000b70: R_386_32	tightMouseRegionOld
10000b74:	89 15 14 00 00 00    	mov    DWORD PTR ds:0x14,edx	10000b76: R_386_32	tightMouseRegionOld
10000b7a:	89 0d 10 00 00 00    	mov    DWORD PTR ds:0x10,ecx	10000b7c: R_386_32	tightMouseRegionNew
10000b80:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
10000b84:	6a 20                	push   0x20
10000b86:	89 0d 14 00 00 00    	mov    DWORD PTR ds:0x14,ecx	10000b88: R_386_32	tightMouseRegionNew
10000b8c:	6a 20                	push   0x20
10000b8e:	b9 07 00 00 00       	mov    ecx,0x7
10000b93:	68 00 00 00 00       	push   0x0	10000b94: R_386_32	pixelsUnderCursor
10000b98:	52                   	push   edx
10000b99:	50                   	push   eax
10000b9a:	83 ec 1c             	sub    esp,0x1c
10000b9d:	89 e7                	mov    edi,esp
10000b9f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000ba1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10000ba5:	e8 fc ff ff ff       	call   10000ba6 <hideCursor(Video*, int, int, int, int)+0x4d>	10000ba6: R_386_PC32	shitBlit(Video*, Region, int, int, unsigned int*, int, int)
10000baa:	83 c4 44             	add    esp,0x44
10000bad:	5e                   	pop    esi
10000bae:	5f                   	pop    edi
10000baf:	c3                   	ret    

10000bb0 <showCursor(Video*)>:
10000bb0:	83 ec 0c             	sub    esp,0xc
10000bb3:	a1 00 00 00 00       	mov    eax,ds:0x0	10000bb4: R_386_32	cursorOffset
10000bb8:	05 00 00 00 00       	add    eax,0x0	10000bb9: R_386_32	___mouse_data
10000bbd:	50                   	push   eax
10000bbe:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000bc0: R_386_32	mouseY
10000bc4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000bc6: R_386_32	mouseX
10000bca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000bce:	e8 fc ff ff ff       	call   10000bcf <showCursor(Video*)+0x1f>	10000bcf: R_386_PC32	videoDrawCursor(Video*, int, int, unsigned int*)
10000bd3:	83 c4 1c             	add    esp,0x1c
10000bd6:	c3                   	ret    

10000bd7 <changeCursor(Video*, int)>:
10000bd7:	57                   	push   edi
10000bd8:	bf 00 00 00 00       	mov    edi,0x0	10000bd9: R_386_32	tightMouseRegionNew
10000bdd:	56                   	push   esi
10000bde:	53                   	push   ebx
10000bdf:	83 ec 2c             	sub    esp,0x2c
10000be2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10000be6:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000be8: R_386_32	tightMouseRegionNew
10000bec:	a3 00 00 00 00       	mov    ds:0x0,eax	10000bed: R_386_32	cursorOffset
10000bf1:	8d 5c 24 14          	lea    ebx,[esp+0x14]
10000bf5:	a1 00 00 00 00       	mov    eax,ds:0x0	10000bf6: R_386_32	mouseX
10000bfa:	89 de                	mov    esi,ebx
10000bfc:	a3 10 00 00 00       	mov    ds:0x10,eax	10000bfd: R_386_32	tightMouseRegionOld
10000c01:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c02: R_386_32	mouseY
10000c06:	a3 14 00 00 00       	mov    ds:0x14,eax	10000c07: R_386_32	tightMouseRegionOld
10000c0b:	e8 fc ff ff ff       	call   10000c0c <changeCursor(Video*, int)+0x35>	10000c0c: R_386_PC32	free
10000c10:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c11: R_386_32	cursorOffset
10000c15:	05 00 00 00 00       	add    eax,0x0	10000c16: R_386_32	___mouse_data
10000c1a:	50                   	push   eax
10000c1b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000c1d: R_386_32	mouseY
10000c21:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000c23: R_386_32	mouseX
10000c27:	53                   	push   ebx
10000c28:	e8 fc ff ff ff       	call   10000c29 <changeCursor(Video*, int)+0x52>	10000c29: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000c2d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10000c2f: R_386_32	mouseY
10000c33:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c34: R_386_32	mouseX
10000c38:	b9 19 00 00 00       	mov    ecx,0x19
10000c3d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000c3f:	52                   	push   edx
10000c40:	89 de                	mov    esi,ebx
10000c42:	50                   	push   eax
10000c43:	bf 00 00 00 00       	mov    edi,0x0	10000c44: R_386_32	tightMouseRegionOld
10000c48:	52                   	push   edx
10000c49:	50                   	push   eax
10000c4a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10000c4e:	e8 fc ff ff ff       	call   10000c4f <changeCursor(Video*, int)+0x78>	10000c4f: R_386_PC32	hideCursor(Video*, int, int, int, int)
10000c53:	83 c4 24             	add    esp,0x24
10000c56:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000c58: R_386_32	tightMouseRegionOld
10000c5c:	e8 fc ff ff ff       	call   10000c5d <changeCursor(Video*, int)+0x86>	10000c5d: R_386_PC32	free
10000c61:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c62: R_386_32	cursorOffset
10000c66:	05 00 00 00 00       	add    eax,0x0	10000c67: R_386_32	___mouse_data
10000c6b:	50                   	push   eax
10000c6c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000c6e: R_386_32	mouseY
10000c72:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000c74: R_386_32	mouseX
10000c78:	53                   	push   ebx
10000c79:	e8 fc ff ff ff       	call   10000c7a <changeCursor(Video*, int)+0xa3>	10000c7a: R_386_PC32	createTightCursorRegion(int, int, unsigned int*)
10000c7e:	b9 19 00 00 00       	mov    ecx,0x19
10000c83:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000c85:	83 c4 3c             	add    esp,0x3c
10000c88:	5b                   	pop    ebx
10000c89:	5e                   	pop    esi
10000c8a:	5f                   	pop    edi
10000c8b:	c3                   	ret    

10000c8c <handleMouse(Video*, int, int, int, int, int)>:
10000c8c:	57                   	push   edi
10000c8d:	56                   	push   esi
10000c8e:	53                   	push   ebx
10000c8f:	83 ec 60             	sub    esp,0x60
10000c92:	a1 00 00 00 00       	mov    eax,ds:0x0	10000c93: R_386_32	mouseX
10000c97:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10000c99: R_386_32	mouseButtons
10000c9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000ca1:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10000ca8:	a1 00 00 00 00       	mov    eax,ds:0x0	10000ca9: R_386_32	mouseY
10000cad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10000cb1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000cb5:	03 54 24 74          	add    edx,DWORD PTR [esp+0x74]
10000cb9:	03 44 24 78          	add    eax,DWORD PTR [esp+0x78]
10000cbd:	89 15 00 00 00 00    	mov    DWORD PTR ds:0x0,edx	10000cbf: R_386_32	mouseX
10000cc3:	a3 00 00 00 00       	mov    ds:0x0,eax	10000cc4: R_386_32	mouseY
10000cc8:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	10000cca: R_386_32	mouseButtons
10000cce:	85 d2                	test   edx,edx
10000cd0:	79 0a                	jns    10000cdc <handleMouse(Video*, int, int, int, int, int)+0x50>
10000cd2:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000cd4: R_386_32	mouseX
10000cdc:	85 c0                	test   eax,eax
10000cde:	79 0a                	jns    10000cea <handleMouse(Video*, int, int, int, int, int)+0x5e>
10000ce0:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10000ce2: R_386_32	mouseY
10000cea:	83 ec 0c             	sub    esp,0xc
10000ced:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
10000cf1:	e8 fc ff ff ff       	call   10000cf2 <handleMouse(Video*, int, int, int, int, int)+0x66>	10000cf2: R_386_PC32	Video::getWidth()
10000cf6:	83 c4 10             	add    esp,0x10
10000cf9:	3b 05 00 00 00 00    	cmp    eax,DWORD PTR ds:0x0	10000cfb: R_386_32	mouseX
10000cff:	7f 15                	jg     10000d16 <handleMouse(Video*, int, int, int, int, int)+0x8a>
10000d01:	83 ec 0c             	sub    esp,0xc
10000d04:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
10000d08:	e8 fc ff ff ff       	call   10000d09 <handleMouse(Video*, int, int, int, int, int)+0x7d>	10000d09: R_386_PC32	Video::getWidth()
10000d0d:	83 c4 10             	add    esp,0x10
10000d10:	48                   	dec    eax
10000d11:	a3 00 00 00 00       	mov    ds:0x0,eax	10000d12: R_386_32	mouseX
10000d16:	83 ec 0c             	sub    esp,0xc
10000d19:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
10000d1d:	e8 fc ff ff ff       	call   10000d1e <handleMouse(Video*, int, int, int, int, int)+0x92>	10000d1e: R_386_PC32	Video::getHeight()
10000d22:	83 c4 10             	add    esp,0x10
10000d25:	3b 05 00 00 00 00    	cmp    eax,DWORD PTR ds:0x0	10000d27: R_386_32	mouseY
10000d2b:	7f 15                	jg     10000d42 <handleMouse(Video*, int, int, int, int, int)+0xb6>
10000d2d:	83 ec 0c             	sub    esp,0xc
10000d30:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
10000d34:	e8 fc ff ff ff       	call   10000d35 <handleMouse(Video*, int, int, int, int, int)+0xa9>	10000d35: R_386_PC32	Video::getHeight()
10000d39:	83 c4 10             	add    esp,0x10
10000d3c:	48                   	dec    eax
10000d3d:	a3 00 00 00 00       	mov    ds:0x0,eax	10000d3e: R_386_32	mouseY
10000d42:	8d 74 24 44          	lea    esi,[esp+0x44]
10000d46:	a1 00 00 00 00       	mov    eax,ds:0x0	10000d47: R_386_32	desktopWindow
10000d4b:	83 e3 01             	and    ebx,0x1
10000d4e:	52                   	push   edx
10000d4f:	52                   	push   edx
10000d50:	50                   	push   eax
10000d51:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000d55:	56                   	push   esi
10000d56:	e8 fc ff ff ff       	call   10000d57 <handleMouse(Video*, int, int, int, int, int)+0xcb>	10000d57: R_386_PC32	NFrame::_getRegion()
10000d5b:	b9 07 00 00 00       	mov    ecx,0x7
10000d60:	83 ec 10             	sub    esp,0x10
10000d63:	89 e7                	mov    edi,esp
10000d65:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10000d67:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
10000d6b:	6a 01                	push   0x1
10000d6d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000d6f: R_386_32	mouseY
10000d73:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000d75: R_386_32	mouseX
10000d79:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
10000d80:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10000d84:	50                   	push   eax
10000d85:	e8 fc ff ff ff       	call   10000d86 <handleMouse(Video*, int, int, int, int, int)+0xfa>	10000d86: R_386_PC32	NFrame::getPixelOwner(Video*, int, int, bool, Region)
10000d8a:	83 c4 30             	add    esp,0x30
10000d8d:	89 c7                	mov    edi,eax
10000d8f:	f6 84 24 84 00 00 00 01 	test   BYTE PTR [esp+0x84],0x1
10000d97:	0f 84 c6 05 00 00    	je     10001363 <handleMouse(Video*, int, int, int, int, int)+0x6d7>
10000d9d:	85 db                	test   ebx,ebx
10000d9f:	0f 85 4d 02 00 00    	jne    10000ff2 <handleMouse(Video*, int, int, int, int, int)+0x366>
10000da5:	be 0a 00 00 00       	mov    esi,0xa
10000daa:	a1 00 00 00 00       	mov    eax,ds:0x0	10000dab: R_386_32	milliTenthsSinceBoot
10000daf:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10000db1: R_386_32	milliTenthsSinceBoot
10000db5:	89 c1                	mov    ecx,eax
10000db7:	89 d3                	mov    ebx,edx
10000db9:	2b 0d d0 ff 00 10    	sub    ecx,DWORD PTR ds:0x1000ffd0	10000dbb: R_386_32	.bss
10000dbf:	a3 d0 ff 00 10       	mov    ds:0x1000ffd0,eax	10000dc0: R_386_32	.bss
10000dc4:	1b 1d d4 ff 00 10    	sbb    ebx,DWORD PTR ds:0x1000ffd4	10000dc6: R_386_32	.bss
10000dca:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10000dce:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
10000dd2:	b9 a0 86 01 00       	mov    ecx,0x186a0
10000dd7:	83 ec 0c             	sub    esp,0xc
10000dda:	89 15 d4 ff 00 10    	mov    DWORD PTR ds:0x1000ffd4,edx	10000ddc: R_386_32	.bss
10000de0:	a1 00 00 00 00       	mov    eax,ds:0x0	10000de1: R_386_32	Phys::usablePages
10000de5:	c1 e0 02             	shl    eax,0x2
10000de8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10000dec:	6a 00                	push   0x0
10000dee:	a1 00 00 00 00       	mov    eax,ds:0x0	10000def: R_386_32	Phys::usedPages
10000df3:	68 ff ff ff 00       	push   0xffffff
10000df8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
10000dff:	89 d8                	mov    eax,ebx
10000e01:	99                   	cdq    
10000e02:	f7 f9                	idiv   ecx
10000e04:	99                   	cdq    
10000e05:	f7 fe                	idiv   esi
10000e07:	8d 42 30             	lea    eax,[edx+0x30]
10000e0a:	50                   	push   eax
10000e0b:	6a 00                	push   0x0
10000e0d:	6a 00                	push   0x0
10000e0f:	e8 fc ff ff ff       	call   10000e10 <handleMouse(Video*, int, int, int, int, int)+0x184>	10000e10: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000e14:	83 c4 14             	add    esp,0x14
10000e17:	b9 10 27 00 00       	mov    ecx,0x2710
10000e1c:	6a 00                	push   0x0
10000e1e:	89 d8                	mov    eax,ebx
10000e20:	68 ff ff ff 00       	push   0xffffff
10000e25:	99                   	cdq    
10000e26:	f7 f9                	idiv   ecx
10000e28:	99                   	cdq    
10000e29:	f7 fe                	idiv   esi
10000e2b:	8d 42 30             	lea    eax,[edx+0x30]
10000e2e:	50                   	push   eax
10000e2f:	6a 00                	push   0x0
10000e31:	6a 01                	push   0x1
10000e33:	e8 fc ff ff ff       	call   10000e34 <handleMouse(Video*, int, int, int, int, int)+0x1a8>	10000e34: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000e38:	83 c4 14             	add    esp,0x14
10000e3b:	89 d8                	mov    eax,ebx
10000e3d:	6a 00                	push   0x0
10000e3f:	b9 e8 03 00 00       	mov    ecx,0x3e8
10000e44:	68 ff ff ff 00       	push   0xffffff
10000e49:	99                   	cdq    
10000e4a:	f7 f9                	idiv   ecx
10000e4c:	99                   	cdq    
10000e4d:	f7 fe                	idiv   esi
10000e4f:	8d 42 30             	lea    eax,[edx+0x30]
10000e52:	50                   	push   eax
10000e53:	6a 00                	push   0x0
10000e55:	6a 02                	push   0x2
10000e57:	e8 fc ff ff ff       	call   10000e58 <handleMouse(Video*, int, int, int, int, int)+0x1cc>	10000e58: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000e5c:	83 c4 14             	add    esp,0x14
10000e5f:	b9 64 00 00 00       	mov    ecx,0x64
10000e64:	6a 00                	push   0x0
10000e66:	89 d8                	mov    eax,ebx
10000e68:	68 ff ff ff 00       	push   0xffffff
10000e6d:	99                   	cdq    
10000e6e:	f7 f9                	idiv   ecx
10000e70:	99                   	cdq    
10000e71:	f7 fe                	idiv   esi
10000e73:	8d 42 30             	lea    eax,[edx+0x30]
10000e76:	50                   	push   eax
10000e77:	6a 00                	push   0x0
10000e79:	6a 03                	push   0x3
10000e7b:	e8 fc ff ff ff       	call   10000e7c <handleMouse(Video*, int, int, int, int, int)+0x1f0>	10000e7c: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000e80:	83 c4 14             	add    esp,0x14
10000e83:	89 d8                	mov    eax,ebx
10000e85:	6a 00                	push   0x0
10000e87:	99                   	cdq    
10000e88:	68 ff ff ff 00       	push   0xffffff
10000e8d:	f7 fe                	idiv   esi
10000e8f:	89 d3                	mov    ebx,edx
10000e91:	99                   	cdq    
10000e92:	f7 fe                	idiv   esi
10000e94:	8d 42 30             	lea    eax,[edx+0x30]
10000e97:	50                   	push   eax
10000e98:	6a 00                	push   0x0
10000e9a:	6a 04                	push   0x4
10000e9c:	e8 fc ff ff ff       	call   10000e9d <handleMouse(Video*, int, int, int, int, int)+0x211>	10000e9d: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000ea1:	83 c4 14             	add    esp,0x14
10000ea4:	83 c3 30             	add    ebx,0x30
10000ea7:	6a 00                	push   0x0
10000ea9:	68 ff ff ff 00       	push   0xffffff
10000eae:	53                   	push   ebx
10000eaf:	6a 00                	push   0x0
10000eb1:	6a 05                	push   0x5
10000eb3:	e8 fc ff ff ff       	call   10000eb4 <handleMouse(Video*, int, int, int, int, int)+0x228>	10000eb4: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000eb8:	83 c4 14             	add    esp,0x14
10000ebb:	6a 00                	push   0x0
10000ebd:	68 ff ff ff 00       	push   0xffffff
10000ec2:	6a 2f                	push   0x2f
10000ec4:	6a 00                	push   0x0
10000ec6:	6a 06                	push   0x6
10000ec8:	e8 fc ff ff ff       	call   10000ec9 <handleMouse(Video*, int, int, int, int, int)+0x23d>	10000ec9: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000ecd:	83 c4 14             	add    esp,0x14
10000ed0:	b9 a0 86 01 00       	mov    ecx,0x186a0
10000ed5:	6a 00                	push   0x0
10000ed7:	68 ff ff ff 00       	push   0xffffff
10000edc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000ee0:	99                   	cdq    
10000ee1:	f7 f9                	idiv   ecx
10000ee3:	99                   	cdq    
10000ee4:	f7 fe                	idiv   esi
10000ee6:	8d 42 30             	lea    eax,[edx+0x30]
10000ee9:	50                   	push   eax
10000eea:	6a 00                	push   0x0
10000eec:	6a 07                	push   0x7
10000eee:	e8 fc ff ff ff       	call   10000eef <handleMouse(Video*, int, int, int, int, int)+0x263>	10000eef: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000ef3:	83 c4 14             	add    esp,0x14
10000ef6:	b9 10 27 00 00       	mov    ecx,0x2710
10000efb:	6a 00                	push   0x0
10000efd:	68 ff ff ff 00       	push   0xffffff
10000f02:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000f06:	99                   	cdq    
10000f07:	f7 f9                	idiv   ecx
10000f09:	99                   	cdq    
10000f0a:	f7 fe                	idiv   esi
10000f0c:	8d 42 30             	lea    eax,[edx+0x30]
10000f0f:	50                   	push   eax
10000f10:	6a 00                	push   0x0
10000f12:	6a 08                	push   0x8
10000f14:	e8 fc ff ff ff       	call   10000f15 <handleMouse(Video*, int, int, int, int, int)+0x289>	10000f15: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f19:	83 c4 14             	add    esp,0x14
10000f1c:	b9 e8 03 00 00       	mov    ecx,0x3e8
10000f21:	6a 00                	push   0x0
10000f23:	68 ff ff ff 00       	push   0xffffff
10000f28:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000f2c:	99                   	cdq    
10000f2d:	f7 f9                	idiv   ecx
10000f2f:	99                   	cdq    
10000f30:	f7 fe                	idiv   esi
10000f32:	8d 42 30             	lea    eax,[edx+0x30]
10000f35:	50                   	push   eax
10000f36:	6a 00                	push   0x0
10000f38:	6a 09                	push   0x9
10000f3a:	e8 fc ff ff ff       	call   10000f3b <handleMouse(Video*, int, int, int, int, int)+0x2af>	10000f3b: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f3f:	83 c4 14             	add    esp,0x14
10000f42:	b9 64 00 00 00       	mov    ecx,0x64
10000f47:	6a 00                	push   0x0
10000f49:	68 ff ff ff 00       	push   0xffffff
10000f4e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000f52:	99                   	cdq    
10000f53:	f7 f9                	idiv   ecx
10000f55:	99                   	cdq    
10000f56:	f7 fe                	idiv   esi
10000f58:	83 c2 30             	add    edx,0x30
10000f5b:	52                   	push   edx
10000f5c:	6a 00                	push   0x0
10000f5e:	6a 0a                	push   0xa
10000f60:	e8 fc ff ff ff       	call   10000f61 <handleMouse(Video*, int, int, int, int, int)+0x2d5>	10000f61: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f65:	83 c4 14             	add    esp,0x14
10000f68:	6a 00                	push   0x0
10000f6a:	68 ff ff ff 00       	push   0xffffff
10000f6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10000f73:	99                   	cdq    
10000f74:	f7 fe                	idiv   esi
10000f76:	89 d3                	mov    ebx,edx
10000f78:	99                   	cdq    
10000f79:	83 c3 30             	add    ebx,0x30
10000f7c:	f7 fe                	idiv   esi
10000f7e:	8d 42 30             	lea    eax,[edx+0x30]
10000f81:	50                   	push   eax
10000f82:	6a 00                	push   0x0
10000f84:	6a 0b                	push   0xb
10000f86:	e8 fc ff ff ff       	call   10000f87 <handleMouse(Video*, int, int, int, int, int)+0x2fb>	10000f87: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f8b:	83 c4 14             	add    esp,0x14
10000f8e:	6a 00                	push   0x0
10000f90:	68 ff ff ff 00       	push   0xffffff
10000f95:	53                   	push   ebx
10000f96:	6a 00                	push   0x0
10000f98:	6a 0c                	push   0xc
10000f9a:	e8 fc ff ff ff       	call   10000f9b <handleMouse(Video*, int, int, int, int, int)+0x30f>	10000f9b: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000f9f:	83 c4 14             	add    esp,0x14
10000fa2:	6a 00                	push   0x0
10000fa4:	68 ff ff ff 00       	push   0xffffff
10000fa9:	6a 20                	push   0x20
10000fab:	6a 00                	push   0x0
10000fad:	6a 0d                	push   0xd
10000faf:	e8 fc ff ff ff       	call   10000fb0 <handleMouse(Video*, int, int, int, int, int)+0x324>	10000fb0: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000fb4:	83 c4 14             	add    esp,0x14
10000fb7:	6a 00                	push   0x0
10000fb9:	68 ff ff ff 00       	push   0xffffff
10000fbe:	6a 4b                	push   0x4b
10000fc0:	6a 00                	push   0x0
10000fc2:	6a 0e                	push   0xe
10000fc4:	e8 fc ff ff ff       	call   10000fc5 <handleMouse(Video*, int, int, int, int, int)+0x339>	10000fc5: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000fc9:	83 c4 14             	add    esp,0x14
10000fcc:	6a 00                	push   0x0
10000fce:	68 ff ff ff 00       	push   0xffffff
10000fd3:	6a 42                	push   0x42
10000fd5:	6a 00                	push   0x0
10000fd7:	6a 0f                	push   0xf
10000fd9:	e8 fc ff ff ff       	call   10000fda <handleMouse(Video*, int, int, int, int, int)+0x34e>	10000fda: R_386_PC32	drawVGAChar(int, int, int, int, int)
10000fde:	83 c4 20             	add    esp,0x20
10000fe1:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10000fe3: R_386_32	draggingWindow
10000fe8:	75 08                	jne    10000ff2 <handleMouse(Video*, int, int, int, int, int)+0x366>
10000fea:	39 3d 00 00 00 00    	cmp    DWORD PTR ds:0x0,edi	10000fec: R_386_32	desktopWindow
10000ff0:	75 07                	jne    10000ff9 <handleMouse(Video*, int, int, int, int, int)+0x36d>
10000ff2:	31 db                	xor    ebx,ebx
10000ff4:	e9 5e 01 00 00       	jmp    10001157 <handleMouse(Video*, int, int, int, int, int)+0x4cb>
10000ff9:	83 ec 0c             	sub    esp,0xc
10000ffc:	57                   	push   edi
10000ffd:	e8 fc ff ff ff       	call   10000ffe <handleMouse(Video*, int, int, int, int, int)+0x372>	10000ffe: R_386_PC32	NFrame::raise()
10001002:	89 3c 24             	mov    DWORD PTR [esp],edi
10001005:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	10001007: R_386_32	mouseX
1000100b:	e8 fc ff ff ff       	call   1000100c <handleMouse(Video*, int, int, int, int, int)+0x380>	1000100c: R_386_PC32	NFrame::getAbsX()
10001010:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10001012: R_386_32	mouseY
10001016:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000101a:	89 3c 24             	mov    DWORD PTR [esp],edi
1000101d:	e8 fc ff ff ff       	call   1000101e <handleMouse(Video*, int, int, int, int, int)+0x392>	1000101e: R_386_PC32	NFrame::getAbsY()
10001022:	83 c4 10             	add    esp,0x10
10001025:	29 c6                	sub    esi,eax
10001027:	78 34                	js     1000105d <handleMouse(Video*, int, int, int, int, int)+0x3d1>
10001029:	83 ec 0c             	sub    esp,0xc
1000102c:	57                   	push   edi
1000102d:	e8 fc ff ff ff       	call   1000102e <handleMouse(Video*, int, int, int, int, int)+0x3a2>	1000102e: R_386_PC32	NFrame::getTitlebarHeight()
10001032:	83 c4 10             	add    esp,0x10
10001035:	39 f0                	cmp    eax,esi
10001037:	7e 24                	jle    1000105d <handleMouse(Video*, int, int, int, int, int)+0x3d1>
10001039:	b8 b7 0b 00 00       	mov    eax,0xbb7
1000103e:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10001042:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001046:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
1000104a:	72 5e                	jb     100010aa <handleMouse(Video*, int, int, int, int, int)+0x41e>
1000104c:	56                   	push   esi
1000104d:	56                   	push   esi
1000104e:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
10001052:	57                   	push   edi
10001053:	e8 fc ff ff ff       	call   10001054 <handleMouse(Video*, int, int, int, int, int)+0x3c8>	10001054: R_386_PC32	NFrame::toggleFullscreen(Video*)
10001058:	e9 df 00 00 00       	jmp    1000113c <handleMouse(Video*, int, int, int, int, int)+0x4b0>
1000105d:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
10001061:	83 ec 0c             	sub    esp,0xc
10001064:	57                   	push   edi
10001065:	e8 fc ff ff ff       	call   10001066 <handleMouse(Video*, int, int, int, int, int)+0x3da>	10001066: R_386_PC32	NFrame::getHeight()
1000106a:	83 c4 10             	add    esp,0x10
1000106d:	83 e8 14             	sub    eax,0x14
10001070:	39 f0                	cmp    eax,esi
10001072:	7e 5b                	jle    100010cf <handleMouse(Video*, int, int, int, int, int)+0x443>
10001074:	83 ec 0c             	sub    esp,0xc
10001077:	57                   	push   edi
10001078:	e8 fc ff ff ff       	call   10001079 <handleMouse(Video*, int, int, int, int, int)+0x3ed>	10001079: R_386_PC32	NFrame::getHeight()
1000107d:	83 c4 10             	add    esp,0x10
10001080:	83 e8 0c             	sub    eax,0xc
10001083:	39 f0                	cmp    eax,esi
10001085:	7f 7b                	jg     10001102 <handleMouse(Video*, int, int, int, int, int)+0x476>
10001087:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	10001089: R_386_32	draggingWindow
1000108d:	51                   	push   ecx
1000108e:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	10001090: R_386_32	startedDragging
10001095:	51                   	push   ecx
10001096:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	10001098: R_386_32	dragMode
100010a0:	68 00 04 00 00       	push   0x400
100010a5:	e9 89 00 00 00       	jmp    10001133 <handleMouse(Video*, int, int, int, int, int)+0x4a7>
100010aa:	83 ec 0c             	sub    esp,0xc
100010ad:	57                   	push   edi
100010ae:	e8 fc ff ff ff       	call   100010af <handleMouse(Video*, int, int, int, int, int)+0x423>	100010af: R_386_PC32	NFrame::isFullscreen()
100010b3:	83 c4 10             	add    esp,0x10
100010b6:	88 c3                	mov    bl,al
100010b8:	84 c0                	test   al,al
100010ba:	0f 85 97 00 00 00    	jne    10001157 <handleMouse(Video*, int, int, int, int, int)+0x4cb>
100010c0:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	100010c2: R_386_32	draggingWindow
100010c6:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100010c8: R_386_32	startedDragging
100010cd:	eb 7c                	jmp    1000114b <handleMouse(Video*, int, int, int, int, int)+0x4bf>
100010cf:	83 ec 0c             	sub    esp,0xc
100010d2:	57                   	push   edi
100010d3:	e8 fc ff ff ff       	call   100010d4 <handleMouse(Video*, int, int, int, int, int)+0x448>	100010d4: R_386_PC32	NFrame::getWidth()
100010d8:	83 c4 10             	add    esp,0x10
100010db:	83 e8 14             	sub    eax,0x14
100010de:	39 d8                	cmp    eax,ebx
100010e0:	7f 92                	jg     10001074 <handleMouse(Video*, int, int, int, int, int)+0x3e8>
100010e2:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	100010e4: R_386_32	draggingWindow
100010e8:	53                   	push   ebx
100010e9:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100010eb: R_386_32	startedDragging
100010f0:	53                   	push   ebx
100010f1:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	100010f3: R_386_32	dragMode
100010fb:	68 00 03 00 00       	push   0x300
10001100:	eb 31                	jmp    10001133 <handleMouse(Video*, int, int, int, int, int)+0x4a7>
10001102:	83 ec 0c             	sub    esp,0xc
10001105:	57                   	push   edi
10001106:	e8 fc ff ff ff       	call   10001107 <handleMouse(Video*, int, int, int, int, int)+0x47b>	10001107: R_386_PC32	NFrame::getWidth()
1000110b:	83 c4 10             	add    esp,0x10
1000110e:	83 e8 0c             	sub    eax,0xc
10001111:	39 d8                	cmp    eax,ebx
10001113:	7f 2c                	jg     10001141 <handleMouse(Video*, int, int, int, int, int)+0x4b5>
10001115:	89 3d 00 00 00 00    	mov    DWORD PTR ds:0x0,edi	10001117: R_386_32	draggingWindow
1000111b:	52                   	push   edx
1000111c:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	1000111e: R_386_32	startedDragging
10001123:	52                   	push   edx
10001124:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10001126: R_386_32	dragMode
1000112e:	68 00 05 00 00       	push   0x500
10001133:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
10001137:	e8 fc ff ff ff       	call   10001138 <handleMouse(Video*, int, int, int, int, int)+0x4ac>	10001138: R_386_PC32	changeCursor(Video*, int)
1000113c:	83 c4 10             	add    esp,0x10
1000113f:	eb 14                	jmp    10001155 <handleMouse(Video*, int, int, int, int, int)+0x4c9>
10001141:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10001143: R_386_32	draggingWindow
1000114b:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	1000114d: R_386_32	dragMode
10001155:	b3 01                	mov    bl,0x1
10001157:	a1 00 00 00 00       	mov    eax,ds:0x0	10001158: R_386_32	draggingWindow
1000115c:	85 c0                	test   eax,eax
1000115e:	0f 84 f8 00 00 00    	je     1000125c <handleMouse(Video*, int, int, int, int, int)+0x5d0>
10001164:	8b 7c 24 74          	mov    edi,DWORD PTR [esp+0x74]
10001168:	0b 7c 24 78          	or     edi,DWORD PTR [esp+0x78]
1000116c:	0f 84 ea 00 00 00    	je     1000125c <handleMouse(Video*, int, int, int, int, int)+0x5d0>
10001172:	83 ec 0c             	sub    esp,0xc
10001175:	50                   	push   eax
10001176:	e8 fc ff ff ff       	call   10001177 <handleMouse(Video*, int, int, int, int, int)+0x4eb>	10001177: R_386_PC32	NFrame::getX()
1000117b:	89 c3                	mov    ebx,eax
1000117d:	58                   	pop    eax
1000117e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001180: R_386_32	draggingWindow
10001184:	e8 fc ff ff ff       	call   10001185 <handleMouse(Video*, int, int, int, int, int)+0x4f9>	10001185: R_386_PC32	NFrame::getY()
10001189:	89 c6                	mov    esi,eax
1000118b:	58                   	pop    eax
1000118c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000118e: R_386_32	draggingWindow
10001192:	e8 fc ff ff ff       	call   10001193 <handleMouse(Video*, int, int, int, int, int)+0x507>	10001193: R_386_PC32	NFrame::getWidth()
10001197:	89 c7                	mov    edi,eax
10001199:	58                   	pop    eax
1000119a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000119c: R_386_32	draggingWindow
100011a0:	e8 fc ff ff ff       	call   100011a1 <handleMouse(Video*, int, int, int, int, int)+0x515>	100011a1: R_386_PC32	NFrame::getHeight()
100011a5:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100011a7: R_386_32	mouseX
100011ab:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
100011af:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	100011b1: R_386_32	mouseY
100011b5:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
100011b9:	83 c4 10             	add    esp,0x10
100011bc:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100011be: R_386_32	startedDragging
100011c3:	75 29                	jne    100011ee <handleMouse(Video*, int, int, int, int, int)+0x562>
100011c5:	c6 05 00 00 00 00 01 	mov    BYTE PTR ds:0x0,0x1	100011c7: R_386_32	startedDragging
100011cc:	80 3d 00 00 00 00 00 	cmp    BYTE PTR ds:0x0,0x0	100011ce: R_386_32	showWindowContentsWhileDragging
100011d3:	75 19                	jne    100011ee <handleMouse(Video*, int, int, int, int, int)+0x562>
100011d5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100011d9:	83 ec 0c             	sub    esp,0xc
100011dc:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100011de: R_386_32	draggingWindow
100011e2:	e8 fc ff ff ff       	call   100011e3 <handleMouse(Video*, int, int, int, int, int)+0x557>	100011e3: R_386_PC32	NFrame::startDragState()
100011e7:	83 c4 10             	add    esp,0x10
100011ea:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100011ee:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100011f0: R_386_32	dragMode
100011f4:	83 fa 01             	cmp    edx,0x1
100011f7:	75 24                	jne    1000121d <handleMouse(Video*, int, int, int, int, int)+0x591>
100011f9:	50                   	push   eax
100011fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100011fe:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10001202:	01 c6                	add    esi,eax
10001204:	56                   	push   esi
10001205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001209:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
1000120d:	01 c3                	add    ebx,eax
1000120f:	53                   	push   ebx
10001210:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001212: R_386_32	draggingWindow
10001216:	e8 fc ff ff ff       	call   10001217 <handleMouse(Video*, int, int, int, int, int)+0x58b>	10001217: R_386_PC32	NFrame::setPosition(int, int)
1000121b:	eb 29                	jmp    10001246 <handleMouse(Video*, int, int, int, int, int)+0x5ba>
1000121d:	83 fa 02             	cmp    edx,0x2
10001220:	75 0a                	jne    1000122c <handleMouse(Video*, int, int, int, int, int)+0x5a0>
10001222:	50                   	push   eax
10001223:	a1 00 00 00 00       	mov    eax,ds:0x0	10001224: R_386_32	mouseY
10001228:	29 f0                	sub    eax,esi
1000122a:	eb 25                	jmp    10001251 <handleMouse(Video*, int, int, int, int, int)+0x5c5>
1000122c:	83 fa 03             	cmp    edx,0x3
1000122f:	75 1a                	jne    1000124b <handleMouse(Video*, int, int, int, int, int)+0x5bf>
10001231:	50                   	push   eax
10001232:	a1 00 00 00 00       	mov    eax,ds:0x0	10001233: R_386_32	mouseY
10001237:	29 f0                	sub    eax,esi
10001239:	50                   	push   eax
1000123a:	57                   	push   edi
1000123b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000123d: R_386_32	draggingWindow
10001241:	e8 fc ff ff ff       	call   10001242 <handleMouse(Video*, int, int, int, int, int)+0x5b6>	10001242: R_386_PC32	NFrame::setSize(int, int)
10001246:	83 c4 10             	add    esp,0x10
10001249:	eb 19                	jmp    10001264 <handleMouse(Video*, int, int, int, int, int)+0x5d8>
1000124b:	83 fa 04             	cmp    edx,0x4
1000124e:	75 14                	jne    10001264 <handleMouse(Video*, int, int, int, int, int)+0x5d8>
10001250:	56                   	push   esi
10001251:	50                   	push   eax
10001252:	a1 00 00 00 00       	mov    eax,ds:0x0	10001253: R_386_32	mouseX
10001257:	29 d8                	sub    eax,ebx
10001259:	50                   	push   eax
1000125a:	eb df                	jmp    1000123b <handleMouse(Video*, int, int, int, int, int)+0x5af>
1000125c:	84 db                	test   bl,bl
1000125e:	0f 84 d7 00 00 00    	je     1000133b <handleMouse(Video*, int, int, int, int, int)+0x6af>
10001264:	8d 5c 24 28          	lea    ebx,[esp+0x28]
10001268:	89 de                	mov    esi,ebx
1000126a:	51                   	push   ecx
1000126b:	51                   	push   ecx
1000126c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000126e: R_386_32	desktopWindow
10001272:	53                   	push   ebx
10001273:	e8 fc ff ff ff       	call   10001274 <handleMouse(Video*, int, int, int, int, int)+0x5e8>	10001274: R_386_PC32	NFrame::getDirtyRegion()
10001278:	b9 07 00 00 00       	mov    ecx,0x7
1000127d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000127f: R_386_32	mouseY
10001283:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001285: R_386_32	mouseX
10001289:	83 ec 1c             	sub    esp,0x1c
1000128c:	89 e7                	mov    edi,esp
1000128e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001290:	e8 fc ff ff ff       	call   10001291 <handleMouse(Video*, int, int, int, int, int)+0x605>	10001291: R_386_PC32	isPointInRegion(Region, int, int)
10001295:	83 c4 30             	add    esp,0x30
10001298:	84 c0                	test   al,al
1000129a:	74 2a                	je     100012c6 <handleMouse(Video*, int, int, int, int, int)+0x63a>
1000129c:	83 ec 0c             	sub    esp,0xc
1000129f:	b3 01                	mov    bl,0x1
100012a1:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100012a3: R_386_32	mouseY
100012a7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100012a9: R_386_32	mouseX
100012ad:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100012b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
100012b5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
100012bc:	e8 fc ff ff ff       	call   100012bd <handleMouse(Video*, int, int, int, int, int)+0x631>	100012bd: R_386_PC32	hideCursor(Video*, int, int, int, int)
100012c1:	83 c4 20             	add    esp,0x20
100012c4:	eb 31                	jmp    100012f7 <handleMouse(Video*, int, int, int, int, int)+0x66b>
100012c6:	83 ec 0c             	sub    esp,0xc
100012c9:	a1 00 00 00 00       	mov    eax,ds:0x0	100012ca: R_386_32	mouseY
100012ce:	89 de                	mov    esi,ebx
100012d0:	83 c0 0f             	add    eax,0xf
100012d3:	b9 07 00 00 00       	mov    ecx,0x7
100012d8:	50                   	push   eax
100012d9:	a1 00 00 00 00       	mov    eax,ds:0x0	100012da: R_386_32	mouseX
100012de:	83 c0 0a             	add    eax,0xa
100012e1:	50                   	push   eax
100012e2:	83 ec 1c             	sub    esp,0x1c
100012e5:	89 e7                	mov    edi,esp
100012e7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100012e9:	e8 fc ff ff ff       	call   100012ea <handleMouse(Video*, int, int, int, int, int)+0x65e>	100012ea: R_386_PC32	isPointInRegion(Region, int, int)
100012ee:	83 c4 30             	add    esp,0x30
100012f1:	88 c3                	mov    bl,al
100012f3:	84 c0                	test   al,al
100012f5:	75 a5                	jne    1000129c <handleMouse(Video*, int, int, int, int, int)+0x610>
100012f7:	83 ec 28             	sub    esp,0x28
100012fa:	a1 00 00 00 00       	mov    eax,ds:0x0	100012fb: R_386_32	mouseX
100012ff:	89 e7                	mov    edi,esp
10001301:	a3 10 00 00 00       	mov    ds:0x10,eax	10001302: R_386_32	tightMouseRegionNew
10001306:	be 00 00 00 00       	mov    esi,0x0	10001307: R_386_32	tightMouseRegionNew
1000130b:	a1 00 00 00 00       	mov    eax,ds:0x0	1000130c: R_386_32	mouseY
10001310:	b9 07 00 00 00       	mov    ecx,0x7
10001315:	a3 14 00 00 00       	mov    ds:0x14,eax	10001316: R_386_32	tightMouseRegionNew
1000131a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000131c:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
10001323:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001325: R_386_32	desktopWindow
10001329:	e8 fc ff ff ff       	call   1000132a <handleMouse(Video*, int, int, int, int, int)+0x69e>	1000132a: R_386_PC32	NFrame::repaint(Video*, Region)
1000132e:	83 c4 30             	add    esp,0x30
10001331:	84 db                	test   bl,bl
10001333:	0f 85 9a 00 00 00    	jne    100013d3 <handleMouse(Video*, int, int, int, int, int)+0x747>
10001339:	b3 01                	mov    bl,0x1
1000133b:	83 ec 0c             	sub    esp,0xc
1000133e:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001340: R_386_32	mouseY
10001344:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10001346: R_386_32	mouseX
1000134a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000134e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10001352:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
10001359:	e8 fc ff ff ff       	call   1000135a <handleMouse(Video*, int, int, int, int, int)+0x6ce>	1000135a: R_386_PC32	hideCursor(Video*, int, int, int, int)
1000135e:	83 c4 20             	add    esp,0x20
10001361:	eb 70                	jmp    100013d3 <handleMouse(Video*, int, int, int, int, int)+0x747>
10001363:	85 db                	test   ebx,ebx
10001365:	0f 84 87 fc ff ff    	je     10000ff2 <handleMouse(Video*, int, int, int, int, int)+0x366>
1000136b:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	1000136d: R_386_32	draggingWindow
10001372:	74 10                	je     10001384 <handleMouse(Video*, int, int, int, int, int)+0x6f8>
10001374:	57                   	push   edi
10001375:	57                   	push   edi
10001376:	6a 00                	push   0x0
10001378:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
1000137c:	e8 fc ff ff ff       	call   1000137d <handleMouse(Video*, int, int, int, int, int)+0x6f1>	1000137d: R_386_PC32	changeCursor(Video*, int)
10001381:	83 c4 10             	add    esp,0x10
10001384:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10001386: R_386_32	draggingWindow
1000138a:	31 db                	xor    ebx,ebx
1000138c:	85 d2                	test   edx,edx
1000138e:	74 23                	je     100013b3 <handleMouse(Video*, int, int, int, int, int)+0x727>
10001390:	8a 1d 00 00 00 00    	mov    bl,BYTE PTR ds:0x0	10001392: R_386_32	startedDragging
10001396:	84 db                	test   bl,bl
10001398:	74 19                	je     100013b3 <handleMouse(Video*, int, int, int, int, int)+0x727>
1000139a:	a0 00 00 00 00       	mov    al,ds:0x0	1000139b: R_386_32	showWindowContentsWhileDragging
1000139f:	84 c0                	test   al,al
100013a1:	75 0e                	jne    100013b1 <handleMouse(Video*, int, int, int, int, int)+0x725>
100013a3:	83 ec 0c             	sub    esp,0xc
100013a6:	52                   	push   edx
100013a7:	e8 fc ff ff ff       	call   100013a8 <handleMouse(Video*, int, int, int, int, int)+0x71c>	100013a8: R_386_PC32	NFrame::endDragState()
100013ac:	83 c4 10             	add    esp,0x10
100013af:	eb 02                	jmp    100013b3 <handleMouse(Video*, int, int, int, int, int)+0x727>
100013b1:	88 c3                	mov    bl,al
100013b3:	c6 05 00 00 00 00 00 	mov    BYTE PTR ds:0x0,0x0	100013b5: R_386_32	startedDragging
100013ba:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	100013bc: R_386_32	dragMode
100013c4:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	100013c6: R_386_32	draggingWindow
100013ce:	e9 84 fd ff ff       	jmp    10001157 <handleMouse(Video*, int, int, int, int, int)+0x4cb>
100013d3:	bf 00 00 00 00       	mov    edi,0x0	100013d4: R_386_32	pixelsUnderCursor
100013d8:	50                   	push   eax
100013d9:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100013db: R_386_32	mouseY
100013df:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100013e1: R_386_32	mouseX
100013e5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
100013e9:	e8 fc ff ff ff       	call   100013ea <handleMouse(Video*, int, int, int, int, int)+0x75e>	100013ea: R_386_PC32	videoSaveAreaUnderCursor(Video*, int, int)
100013ee:	b9 00 10 00 00       	mov    ecx,0x1000
100013f3:	89 c6                	mov    esi,eax
100013f5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100013f7:	5a                   	pop    edx
100013f8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
100013fc:	e8 fc ff ff ff       	call   100013fd <handleMouse(Video*, int, int, int, int, int)+0x771>	100013fd: R_386_PC32	showCursor(Video*)
10001401:	83 c4 70             	add    esp,0x70
10001404:	88 d8                	mov    al,bl
10001406:	5b                   	pop    ebx
10001407:	5e                   	pop    esi
10001408:	5f                   	pop    edi
10001409:	c3                   	ret    

1000140a <__static_initialization_and_destruction_0(int, int)>:
1000140a:	83 ec 0c             	sub    esp,0xc
1000140d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001411:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
10001419:	75 20                	jne    1000143b <__static_initialization_and_destruction_0(int, int)+0x31>
1000141b:	48                   	dec    eax
1000141c:	75 1d                	jne    1000143b <__static_initialization_and_destruction_0(int, int)+0x31>
1000141e:	83 ec 0c             	sub    esp,0xc
10001421:	68 00 00 00 00       	push   0x0	10001422: R_386_32	tightMouseRegionOld
10001426:	e8 fc ff ff ff       	call   10001427 <__static_initialization_and_destruction_0(int, int)+0x1d>	10001427: R_386_PC32	Region::Region()
1000142b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0	1000142f: R_386_32	tightMouseRegionNew
10001433:	83 c4 1c             	add    esp,0x1c
10001436:	e9 fc ff ff ff       	jmp    10001437 <__static_initialization_and_destruction_0(int, int)+0x2d>	10001437: R_386_PC32	Region::Region()
1000143b:	83 c4 0c             	add    esp,0xc
1000143e:	c3                   	ret    

1000143f <drawCharacter(Video*, Region, int, int, unsigned int, char)>:
1000143f:	55                   	push   ebp
10001440:	57                   	push   edi
10001441:	31 ff                	xor    edi,edi
10001443:	56                   	push   esi
10001444:	31 f6                	xor    esi,esi
10001446:	53                   	push   ebx
10001447:	83 ec 3c             	sub    esp,0x3c
1000144a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000144e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001452:	0f be 44 24 7c       	movsx  eax,BYTE PTR [esp+0x7c]
10001457:	89 c5                	mov    ebp,eax
10001459:	39 74 24 5c          	cmp    DWORD PTR [esp+0x5c],esi
1000145d:	0f 8e 15 01 00 00    	jle    10001578 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x139>
10001463:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10001467:	83 c0 0c             	add    eax,0xc
1000146a:	39 f0                	cmp    eax,esi
1000146c:	0f 8e 06 01 00 00    	jle    10001578 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x139>
10001472:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10001476:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
1000147d:	8b 14 b9             	mov    edx,DWORD PTR [ecx+edi*4]
10001480:	0f b7 ca             	movzx  ecx,dx
10001483:	c1 ea 10             	shr    edx,0x10
10001486:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000148a:	8d 7c 0f 01          	lea    edi,[edi+ecx*1+0x1]
1000148e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
10001492:	8d 0c 16             	lea    ecx,[esi+edx*1]
10001495:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10001499:	3b 4c 24 74          	cmp    ecx,DWORD PTR [esp+0x74]
1000149d:	7d 06                	jge    100014a5 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x66>
1000149f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
100014a3:	eb b4                	jmp    10001459 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x1a>
100014a5:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
100014a9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
100014ae:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
100014b2:	31 db                	xor    ebx,ebx
100014b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100014b8:	39 5c 24 58          	cmp    DWORD PTR [esp+0x58],ebx
100014bc:	7e e1                	jle    1000149f <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x60>
100014be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100014c2:	39 18                	cmp    DWORD PTR [eax],ebx
100014c4:	75 0e                	jne    100014d4 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x95>
100014c6:	83 44 24 10 04       	add    DWORD PTR [esp+0x10],0x4
100014cb:	80 74 24 1f 01       	xor    BYTE PTR [esp+0x1f],0x1
100014d0:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
100014d4:	89 d9                	mov    ecx,ebx
100014d6:	2b 4c 24 70          	sub    ecx,DWORD PTR [esp+0x70]
100014da:	83 f9 07             	cmp    ecx,0x7
100014dd:	77 6d                	ja     1000154c <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
100014df:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
100014e4:	74 66                	je     1000154c <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
100014e6:	89 f0                	mov    eax,esi
100014e8:	2b 44 24 74          	sub    eax,DWORD PTR [esp+0x74]
100014ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100014f0:	31 c0                	xor    eax,eax
100014f2:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
100014f6:	7d 54                	jge    1000154c <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x10d>
100014f8:	83 7c 24 14 0b       	cmp    DWORD PTR [esp+0x14],0xb
100014fd:	77 46                	ja     10001545 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x106>
100014ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10001503:	c1 e2 07             	shl    edx,0x7
10001506:	0f b6 94 2a 00 00 00 00 	movzx  edx,BYTE PTR [edx+ebp*1+0x0]	1000150a: R_386_32	font_array
1000150e:	d3 e2                	shl    edx,cl
10001510:	80 e2 80             	and    dl,0x80
10001513:	74 30                	je     10001545 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x106>
10001515:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10001519:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
1000151d:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
10001521:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001525:	01 f2                	add    edx,esi
10001527:	01 c2                	add    edx,eax
10001529:	52                   	push   edx
1000152a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
1000152e:	01 da                	add    edx,ebx
10001530:	52                   	push   edx
10001531:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10001535:	e8 fc ff ff ff       	call   10001536 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0xf7>	10001536: R_386_PC32	videoPutpixel(Video*, int, int, unsigned int)
1000153a:	83 c4 10             	add    esp,0x10
1000153d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
10001541:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001545:	40                   	inc    eax
10001546:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
1000154a:	eb a6                	jmp    100014f2 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0xb3>
1000154c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10001551:	74 10                	je     10001563 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x124>
10001553:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001557:	8b 00                	mov    eax,DWORD PTR [eax]
10001559:	3b 44 24 70          	cmp    eax,DWORD PTR [esp+0x70]
1000155d:	73 04                	jae    10001563 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x124>
1000155f:	89 c3                	mov    ebx,eax
10001561:	eb 01                	jmp    10001564 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x125>
10001563:	43                   	inc    ebx
10001564:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10001568:	83 c0 08             	add    eax,0x8
1000156b:	39 d8                	cmp    eax,ebx
1000156d:	0f 8d 45 ff ff ff    	jge    100014b8 <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x79>
10001573:	e9 27 ff ff ff       	jmp    1000149f <drawCharacter(Video*, Region, int, int, unsigned int, char)+0x60>
10001578:	83 c4 3c             	add    esp,0x3c
1000157b:	b8 08 00 0c 00       	mov    eax,0xc0008
10001580:	5b                   	pop    ebx
10001581:	5e                   	pop    esi
10001582:	5f                   	pop    edi
10001583:	5d                   	pop    ebp
10001584:	c3                   	ret    

10001585 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)>:
10001585:	57                   	push   edi
10001586:	56                   	push   esi
10001587:	53                   	push   ebx
10001588:	83 ec 50             	sub    esp,0x50
1000158b:	8d 74 24 18          	lea    esi,[esp+0x18]
1000158f:	50                   	push   eax
10001590:	50                   	push   eax
10001591:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10001595:	50                   	push   eax
10001596:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000159a:	50                   	push   eax
1000159b:	8d 44 24 1f          	lea    eax,[esp+0x1f]
1000159f:	50                   	push   eax
100015a0:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
100015a7:	ff b4 24 98 00 00 00 	push   DWORD PTR [esp+0x98]
100015ae:	56                   	push   esi
100015af:	e8 fc ff ff ff       	call   100015b0 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x2b>	100015b0: R_386_PC32	getFontRegion(int, int, bool*, int*, int*)
100015b4:	b9 07 00 00 00       	mov    ecx,0x7
100015b9:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
100015c0:	8d 5c 24 50          	lea    ebx,[esp+0x50]
100015c4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100015c8:	8b 84 24 a8 00 00 00 	mov    eax,DWORD PTR [esp+0xa8]
100015cf:	83 ec 14             	sub    esp,0x14
100015d2:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
100015d6:	89 e7                	mov    edi,esp
100015d8:	83 ec 1c             	sub    esp,0x1c
100015db:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015dd:	8d b4 24 b0 00 00 00 	lea    esi,[esp+0xb0]
100015e4:	89 e7                	mov    edi,esp
100015e6:	b9 07 00 00 00       	mov    ecx,0x7
100015eb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100015ed:	53                   	push   ebx
100015ee:	89 de                	mov    esi,ebx
100015f0:	e8 fc ff ff ff       	call   100015f1 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x6c>	100015f1: R_386_PC32	getRegionIntersection(Region, Region)
100015f5:	b9 07 00 00 00       	mov    ecx,0x7
100015fa:	83 c4 40             	add    esp,0x40
100015fd:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
10001604:	83 ec 1c             	sub    esp,0x1c
10001607:	89 e7                	mov    edi,esp
10001609:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000160b:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
10001612:	e8 fc ff ff ff       	call   10001613 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0x8e>	10001613: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10001617:	83 c4 30             	add    esp,0x30
1000161a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
1000161f:	74 0f                	je     10001630 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xab>
10001621:	83 ec 0c             	sub    esp,0xc
10001624:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10001628:	e8 fc ff ff ff       	call   10001629 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xa4>	10001629: R_386_PC32	free
1000162d:	83 c4 10             	add    esp,0x10
10001630:	83 ec 0c             	sub    esp,0xc
10001633:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
10001637:	e8 fc ff ff ff       	call   10001638 <drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)+0xb3>	10001638: R_386_PC32	free
1000163c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10001640:	c1 e0 10             	shl    eax,0x10
10001643:	0b 44 24 20          	or     eax,DWORD PTR [esp+0x20]
10001647:	83 c4 60             	add    esp,0x60
1000164a:	5b                   	pop    ebx
1000164b:	5e                   	pop    esi
1000164c:	5f                   	pop    edi
1000164d:	c3                   	ret    

1000164e <blitRegion(Video*, Region, int, int, unsigned int*, int, int)>:
1000164e:	55                   	push   ebp
1000164f:	57                   	push   edi
10001650:	31 ff                	xor    edi,edi
10001652:	56                   	push   esi
10001653:	31 f6                	xor    esi,esi
10001655:	53                   	push   ebx
10001656:	83 ec 2c             	sub    esp,0x2c
10001659:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
1000165d:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
10001661:	0f 8e 07 01 00 00    	jle    1000176e <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x120>
10001667:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000166b:	03 44 24 70          	add    eax,DWORD PTR [esp+0x70]
1000166f:	39 f0                	cmp    eax,esi
10001671:	0f 8e f7 00 00 00    	jle    1000176e <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x120>
10001677:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
1000167b:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
10001682:	0f b7 da             	movzx  ebx,dx
10001685:	c1 ea 10             	shr    edx,0x10
10001688:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
1000168c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10001690:	8d 7c 1f 01          	lea    edi,[edi+ebx*1+0x1]
10001694:	8d 14 16             	lea    edx,[esi+edx*1]
10001697:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
1000169b:	3b 54 24 64          	cmp    edx,DWORD PTR [esp+0x64]
1000169f:	7d 06                	jge    100016a7 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x59>
100016a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100016a5:	eb b6                	jmp    1000165d <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf>
100016a7:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
100016ab:	31 db                	xor    ebx,ebx
100016ad:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100016b1:	31 d2                	xor    edx,edx
100016b3:	39 5c 24 48          	cmp    DWORD PTR [esp+0x48],ebx
100016b7:	7e e8                	jle    100016a1 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x53>
100016b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100016bd:	39 18                	cmp    DWORD PTR [eax],ebx
100016bf:	75 0c                	jne    100016cd <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x7f>
100016c1:	83 44 24 08 04       	add    DWORD PTR [esp+0x8],0x4
100016c6:	83 f2 01             	xor    edx,0x1
100016c9:	ff 4c 24 04          	dec    DWORD PTR [esp+0x4]
100016cd:	89 d8                	mov    eax,ebx
100016cf:	2b 44 24 60          	sub    eax,DWORD PTR [esp+0x60]
100016d3:	89 c1                	mov    ecx,eax
100016d5:	f7 d1                	not    ecx
100016d7:	c1 e9 1f             	shr    ecx,0x1f
100016da:	3b 44 24 6c          	cmp    eax,DWORD PTR [esp+0x6c]
100016de:	0f 9c c0             	setl   al
100016e1:	84 c8                	test   al,cl
100016e3:	74 5c                	je     10001741 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf3>
100016e5:	84 d2                	test   dl,dl
100016e7:	74 58                	je     10001741 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf3>
100016e9:	89 f0                	mov    eax,esi
100016eb:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
100016ef:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100016f3:	31 c0                	xor    eax,eax
100016f5:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
100016f9:	7d 46                	jge    10001741 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xf3>
100016fb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
100016ff:	39 4c 24 70          	cmp    DWORD PTR [esp+0x70],ecx
10001703:	7e 35                	jle    1000173a <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xec>
10001705:	85 c9                	test   ecx,ecx
10001707:	78 31                	js     1000173a <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xec>
10001709:	88 54 24 1f          	mov    BYTE PTR [esp+0x1f],dl
1000170d:	68 00 00 ff 00       	push   0xff0000
10001712:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10001716:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
1000171a:	01 f1                	add    ecx,esi
1000171c:	01 c1                	add    ecx,eax
1000171e:	51                   	push   ecx
1000171f:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10001723:	01 d9                	add    ecx,ebx
10001725:	51                   	push   ecx
10001726:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
1000172a:	e8 fc ff ff ff       	call   1000172b <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xdd>	1000172b: R_386_PC32	videoPutpixel(Video*, int, int, unsigned int)
1000172f:	83 c4 10             	add    esp,0x10
10001732:	8a 54 24 1f          	mov    dl,BYTE PTR [esp+0x1f]
10001736:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000173a:	40                   	inc    eax
1000173b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
1000173f:	eb b4                	jmp    100016f5 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0xa7>
10001741:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
10001746:	74 10                	je     10001758 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x10a>
10001748:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000174c:	8b 00                	mov    eax,DWORD PTR [eax]
1000174e:	3b 44 24 60          	cmp    eax,DWORD PTR [esp+0x60]
10001752:	73 04                	jae    10001758 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x10a>
10001754:	89 c3                	mov    ebx,eax
10001756:	eb 01                	jmp    10001759 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x10b>
10001758:	43                   	inc    ebx
10001759:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000175d:	03 44 24 6c          	add    eax,DWORD PTR [esp+0x6c]
10001761:	39 d8                	cmp    eax,ebx
10001763:	0f 8d 4a ff ff ff    	jge    100016b3 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x65>
10001769:	e9 33 ff ff ff       	jmp    100016a1 <blitRegion(Video*, Region, int, int, unsigned int*, int, int)+0x53>
1000176e:	83 c4 2c             	add    esp,0x2c
10001771:	5b                   	pop    ebx
10001772:	5e                   	pop    esi
10001773:	5f                   	pop    edi
10001774:	5d                   	pop    ebp
10001775:	c3                   	ret    

10001776 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)>:
10001776:	55                   	push   ebp
10001777:	57                   	push   edi
10001778:	56                   	push   esi
10001779:	53                   	push   ebx
1000177a:	83 ec 2c             	sub    esp,0x2c
1000177d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10001781:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001785:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10001789:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000178d:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001791:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001795:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001799:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
1000179d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100017a1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100017a5:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
100017a9:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
100017ad:	0f 8e 8d 00 00 00    	jle    10001840 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xca>
100017b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100017b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100017bb:	2b 5c 24 60          	sub    ebx,DWORD PTR [esp+0x60]
100017bf:	c1 e0 07             	shl    eax,0x7
100017c2:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
100017c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100017ca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
100017ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100017d2:	01 dd                	add    ebp,ebx
100017d4:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
100017d8:	39 e8                	cmp    eax,ebp
100017da:	7e 5b                	jle    10001837 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xc1>
100017dc:	83 fb 1f             	cmp    ebx,0x1f
100017df:	77 53                	ja     10001834 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xbe>
100017e1:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
100017e6:	77 4c                	ja     10001834 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xbe>
100017e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100017ec:	b9 07 00 00 00       	mov    ecx,0x7
100017f1:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100017f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100017f9:	83 ec 0c             	sub    esp,0xc
100017fc:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10001800:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10001804:	55                   	push   ebp
10001805:	83 ec 1c             	sub    esp,0x1c
10001808:	8d 74 24 74          	lea    esi,[esp+0x74]
1000180c:	89 e7                	mov    edi,esp
1000180e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10001810:	e8 fc ff ff ff       	call   10001811 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0x9b>	10001811: R_386_PC32	isPointInRegion(Region, int, int)
10001815:	83 c4 30             	add    esp,0x30
10001818:	84 c0                	test   al,al
1000181a:	74 18                	je     10001834 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xbe>
1000181c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001820:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
10001823:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10001827:	55                   	push   ebp
10001828:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
1000182c:	e8 fc ff ff ff       	call   1000182d <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0xb7>	1000182d: R_386_PC32	videoPutpixel(Video*, int, int, unsigned int)
10001831:	83 c4 10             	add    esp,0x10
10001834:	43                   	inc    ebx
10001835:	eb 93                	jmp    100017ca <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0x54>
10001837:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
1000183b:	e9 55 ff ff ff       	jmp    10001795 <shitBlit(Video*, Region, int, int, unsigned int*, int, int)+0x1f>
10001840:	83 c4 2c             	add    esp,0x2c
10001843:	5b                   	pop    ebx
10001844:	5e                   	pop    esi
10001845:	5f                   	pop    edi
10001846:	5d                   	pop    ebp
10001847:	c3                   	ret    

10001848 <fillRegion(Video*, Region, unsigned int)>:
10001848:	55                   	push   ebp
10001849:	31 ed                	xor    ebp,ebp
1000184b:	57                   	push   edi
1000184c:	56                   	push   esi
1000184d:	53                   	push   ebx
1000184e:	83 ec 1c             	sub    esp,0x1c
10001851:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001855:	89 04 24             	mov    DWORD PTR [esp],eax
10001858:	31 c0                	xor    eax,eax
1000185a:	39 6c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebp
1000185e:	0f 8e 91 00 00 00    	jle    100018f5 <fillRegion(Video*, Region, unsigned int)+0xad>
10001864:	8d 50 01             	lea    edx,[eax+0x1]
10001867:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000186e:	8b 34 24             	mov    esi,DWORD PTR [esp]
10001871:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001874:	83 f8 ff             	cmp    eax,0xffffffff
10001877:	74 7c                	je     100018f5 <fillRegion(Video*, Region, unsigned int)+0xad>
10001879:	0f b7 f0             	movzx  esi,ax
1000187c:	31 db                	xor    ebx,ebx
1000187e:	c1 e8 10             	shr    eax,0x10
10001881:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001885:	8b 04 24             	mov    eax,DWORD PTR [esp]
10001888:	8d 7c 08 04          	lea    edi,[eax+ecx*1+0x4]
1000188c:	8d 04 32             	lea    eax,[edx+esi*1]
1000188f:	31 d2                	xor    edx,edx
10001891:	39 5c 24 38          	cmp    DWORD PTR [esp+0x38],ebx
10001895:	7e 55                	jle    100018ec <fillRegion(Video*, Region, unsigned int)+0xa4>
10001897:	39 1f                	cmp    DWORD PTR [edi],ebx
10001899:	75 07                	jne    100018a2 <fillRegion(Video*, Region, unsigned int)+0x5a>
1000189b:	83 c7 04             	add    edi,0x4
1000189e:	83 f2 01             	xor    edx,0x1
100018a1:	4e                   	dec    esi
100018a2:	84 d2                	test   dl,dl
100018a4:	74 42                	je     100018e8 <fillRegion(Video*, Region, unsigned int)+0xa0>
100018a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100018aa:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
100018ae:	50                   	push   eax
100018af:	50                   	push   eax
100018b0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100018b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
100018b8:	8b 0f                	mov    ecx,DWORD PTR [edi]
100018ba:	29 d9                	sub    ecx,ebx
100018bc:	51                   	push   ecx
100018bd:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100018c1:	01 e9                	add    ecx,ebp
100018c3:	51                   	push   ecx
100018c4:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100018c8:	01 d9                	add    ecx,ebx
100018ca:	43                   	inc    ebx
100018cb:	51                   	push   ecx
100018cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
100018d0:	e8 fc ff ff ff       	call   100018d1 <fillRegion(Video*, Region, unsigned int)+0x89>	100018d1: R_386_PC32	videoDrawRect(Video*, int, int, int, int, unsigned int)
100018d5:	83 c4 20             	add    esp,0x20
100018d8:	85 f6                	test   esi,esi
100018da:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100018de:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
100018e2:	74 ad                	je     10001891 <fillRegion(Video*, Region, unsigned int)+0x49>
100018e4:	8b 1f                	mov    ebx,DWORD PTR [edi]
100018e6:	eb a9                	jmp    10001891 <fillRegion(Video*, Region, unsigned int)+0x49>
100018e8:	85 f6                	test   esi,esi
100018ea:	75 f8                	jne    100018e4 <fillRegion(Video*, Region, unsigned int)+0x9c>
100018ec:	03 6c 24 04          	add    ebp,DWORD PTR [esp+0x4]
100018f0:	e9 65 ff ff ff       	jmp    1000185a <fillRegion(Video*, Region, unsigned int)+0x12>
100018f5:	83 c4 1c             	add    esp,0x1c
100018f8:	5b                   	pop    ebx
100018f9:	5e                   	pop    esi
100018fa:	5f                   	pop    edi
100018fb:	5d                   	pop    ebp
100018fc:	c3                   	ret    

100018fd <readUnaligned32(unsigned char*)>:
100018fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001901:	8b 00                	mov    eax,DWORD PTR [eax]
10001903:	c3                   	ret    

10001904 <writeUnaligned32(unsigned char*, unsigned int)>:
10001904:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001908:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
1000190c:	89 10                	mov    DWORD PTR [eax],edx
1000190e:	c3                   	ret    

1000190f <createTightFontRegion(int, int, unsigned char*, int, int)>:
1000190f:	55                   	push   ebp
10001910:	57                   	push   edi
10001911:	31 ff                	xor    edi,edi
10001913:	56                   	push   esi
10001914:	53                   	push   ebx
10001915:	83 ec 68             	sub    esp,0x68
10001918:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
1000191c:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10001923:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001927:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
1000192a:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10001931:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10001934:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
1000193b:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000193e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10001945:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001948:	6b 84 24 90 00 00 00 11 	imul   eax,DWORD PTR [esp+0x90],0x11
10001950:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10001957:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
1000195a:	50                   	push   eax
1000195b:	e8 fc ff ff ff       	call   1000195c <createTightFontRegion(int, int, unsigned char*, int, int)+0x4d>	1000195c: R_386_PC32	malloc
10001960:	8b ac 24 8c 00 00 00 	mov    ebp,DWORD PTR [esp+0x8c]
10001967:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
1000196b:	89 03                	mov    DWORD PTR [ebx],eax
1000196d:	83 c4 10             	add    esp,0x10
10001970:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10001974:	3b bc 24 84 00 00 00 	cmp    edi,DWORD PTR [esp+0x84]
1000197b:	7d 6c                	jge    100019e9 <createTightFontRegion(int, int, unsigned char*, int, int)+0xda>
1000197d:	31 f6                	xor    esi,esi
1000197f:	31 c0                	xor    eax,eax
10001981:	31 c9                	xor    ecx,ecx
10001983:	3b b4 24 80 00 00 00 	cmp    esi,DWORD PTR [esp+0x80]
1000198a:	7d 24                	jge    100019b0 <createTightFontRegion(int, int, unsigned char*, int, int)+0xa1>
1000198c:	80 7c 35 00 00       	cmp    BYTE PTR [ebp+esi*1+0x0],0x0
10001991:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10001995:	0f 95 44 24 0e       	setne  BYTE PTR [esp+0xe]
1000199a:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
1000199e:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
100019a2:	74 05                	je     100019a9 <createTightFontRegion(int, int, unsigned char*, int, int)+0x9a>
100019a4:	89 74 8c 10          	mov    DWORD PTR [esp+ecx*4+0x10],esi
100019a8:	41                   	inc    ecx
100019a9:	46                   	inc    esi
100019aa:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
100019ae:	eb d3                	jmp    10001983 <createTightFontRegion(int, int, unsigned char*, int, int)+0x74>
100019b0:	84 c0                	test   al,al
100019b2:	74 0c                	je     100019c0 <createTightFontRegion(int, int, unsigned char*, int, int)+0xb1>
100019b4:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100019bb:	89 44 8c 10          	mov    DWORD PTR [esp+ecx*4+0x10],eax
100019bf:	41                   	inc    ecx
100019c0:	89 ce                	mov    esi,ecx
100019c2:	81 ce 00 00 01 00    	or     esi,0x10000
100019c8:	89 32                	mov    DWORD PTR [edx],esi
100019ca:	31 f6                	xor    esi,esi
100019cc:	39 f1                	cmp    ecx,esi
100019ce:	74 0b                	je     100019db <createTightFontRegion(int, int, unsigned char*, int, int)+0xcc>
100019d0:	8b 44 b4 10          	mov    eax,DWORD PTR [esp+esi*4+0x10]
100019d4:	89 44 b2 04          	mov    DWORD PTR [edx+esi*4+0x4],eax
100019d8:	46                   	inc    esi
100019d9:	eb f1                	jmp    100019cc <createTightFontRegion(int, int, unsigned char*, int, int)+0xbd>
100019db:	8d 54 8a 04          	lea    edx,[edx+ecx*4+0x4]
100019df:	47                   	inc    edi
100019e0:	03 ac 24 80 00 00 00 	add    ebp,DWORD PTR [esp+0x80]
100019e7:	eb 8b                	jmp    10001974 <createTightFontRegion(int, int, unsigned char*, int, int)+0x65>
100019e9:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
100019ef:	89 d8                	mov    eax,ebx
100019f1:	83 c2 04             	add    edx,0x4
100019f4:	2b 54 24 08          	sub    edx,DWORD PTR [esp+0x8]
100019f8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
100019fb:	83 c4 5c             	add    esp,0x5c
100019fe:	5b                   	pop    ebx
100019ff:	5e                   	pop    esi
10001a00:	5f                   	pop    edi
10001a01:	5d                   	pop    ebp
10001a02:	c2 04 00             	ret    0x4

10001a05 <createTightCursorRegion(int, int, unsigned int*)>:
10001a05:	55                   	push   ebp
10001a06:	57                   	push   edi
10001a07:	56                   	push   esi
10001a08:	31 f6                	xor    esi,esi
10001a0a:	53                   	push   ebx
10001a0b:	83 ec 68             	sub    esp,0x68
10001a0e:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10001a12:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10001a19:	c7 43 04 20 00 00 00 	mov    DWORD PTR [ebx+0x4],0x20
10001a20:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001a23:	c7 43 08 20 00 00 00 	mov    DWORD PTR [ebx+0x8],0x20
10001a2a:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10001a31:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001a35:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001a38:	c7 43 0c 84 08 00 00 	mov    DWORD PTR [ebx+0xc],0x884
10001a3f:	68 84 08 00 00       	push   0x884
10001a44:	e8 fc ff ff ff       	call   10001a45 <createTightCursorRegion(int, int, unsigned int*)+0x40>	10001a45: R_386_PC32	malloc
10001a49:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001a4d:	89 03                	mov    DWORD PTR [ebx],eax
10001a4f:	83 c4 10             	add    esp,0x10
10001a52:	89 c1                	mov    ecx,eax
10001a54:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10001a58:	31 ed                	xor    ebp,ebp
10001a5a:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10001a5d:	c6 44 24 07 00       	mov    BYTE PTR [esp+0x7],0x0
10001a62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10001a66:	31 d2                	xor    edx,edx
10001a68:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10001a6c:	8b 84 b0 80 00 00 00 	mov    eax,DWORD PTR [eax+esi*4+0x80]
10001a73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10001a77:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001a7b:	0b 7c 24 08          	or     edi,DWORD PTR [esp+0x8]
10001a7f:	83 e7 01             	and    edi,0x1
10001a82:	89 f8                	mov    eax,edi
10001a84:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
10001a88:	74 05                	je     10001a8f <createTightCursorRegion(int, int, unsigned int*)+0x8a>
10001a8a:	89 6c 94 10          	mov    DWORD PTR [esp+edx*4+0x10],ebp
10001a8e:	42                   	inc    edx
10001a8f:	d1 6c 24 08          	shr    DWORD PTR [esp+0x8],1
10001a93:	d1 6c 24 0c          	shr    DWORD PTR [esp+0xc],1
10001a97:	45                   	inc    ebp
10001a98:	89 f8                	mov    eax,edi
10001a9a:	83 fd 20             	cmp    ebp,0x20
10001a9d:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
10001aa1:	75 d4                	jne    10001a77 <createTightCursorRegion(int, int, unsigned int*)+0x72>
10001aa3:	84 c0                	test   al,al
10001aa5:	74 09                	je     10001ab0 <createTightCursorRegion(int, int, unsigned int*)+0xab>
10001aa7:	c7 44 94 10 20 00 00 00 	mov    DWORD PTR [esp+edx*4+0x10],0x20
10001aaf:	42                   	inc    edx
10001ab0:	89 d7                	mov    edi,edx
10001ab2:	8d 69 04             	lea    ebp,[ecx+0x4]
10001ab5:	81 cf 00 00 01 00    	or     edi,0x10000
10001abb:	89 39                	mov    DWORD PTR [ecx],edi
10001abd:	31 ff                	xor    edi,edi
10001abf:	39 fa                	cmp    edx,edi
10001ac1:	74 0b                	je     10001ace <createTightCursorRegion(int, int, unsigned int*)+0xc9>
10001ac3:	8b 44 bc 10          	mov    eax,DWORD PTR [esp+edi*4+0x10]
10001ac7:	89 44 b9 04          	mov    DWORD PTR [ecx+edi*4+0x4],eax
10001acb:	47                   	inc    edi
10001acc:	eb f1                	jmp    10001abf <createTightCursorRegion(int, int, unsigned int*)+0xba>
10001ace:	c1 e2 02             	shl    edx,0x2
10001ad1:	46                   	inc    esi
10001ad2:	8d 4c 15 00          	lea    ecx,[ebp+edx*1+0x0]
10001ad6:	83 fe 20             	cmp    esi,0x20
10001ad9:	8d 54 15 04          	lea    edx,[ebp+edx*1+0x4]
10001add:	0f 85 71 ff ff ff    	jne    10001a54 <createTightCursorRegion(int, int, unsigned int*)+0x4f>
10001ae3:	c7 01 ff ff ff ff    	mov    DWORD PTR [ecx],0xffffffff
10001ae9:	2b 14 24             	sub    edx,DWORD PTR [esp]
10001aec:	89 d8                	mov    eax,ebx
10001aee:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
10001af1:	83 c4 5c             	add    esp,0x5c
10001af4:	5b                   	pop    ebx
10001af5:	5e                   	pop    esi
10001af6:	5f                   	pop    edi
10001af7:	5d                   	pop    ebp
10001af8:	c2 04 00             	ret    0x4

10001afb <createEllipseRegion(int, int, int, int)>:
10001afb:	55                   	push   ebp
10001afc:	57                   	push   edi
10001afd:	56                   	push   esi
10001afe:	53                   	push   ebx
10001aff:	83 ec 28             	sub    esp,0x28
10001b02:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001b06:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
10001b0a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10001b0e:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
10001b11:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10001b14:	c6 46 18 00          	mov    BYTE PTR [esi+0x18],0x0
10001b18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10001b1c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
10001b1f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001b23:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
10001b26:	6b c3 0c             	imul   eax,ebx,0xc
10001b29:	83 c0 04             	add    eax,0x4
10001b2c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
10001b2f:	50                   	push   eax
10001b30:	e8 fc ff ff ff       	call   10001b31 <createEllipseRegion(int, int, int, int)+0x36>	10001b31: R_386_PC32	malloc
10001b35:	83 c4 10             	add    esp,0x10
10001b38:	89 c5                	mov    ebp,eax
10001b3a:	89 06                	mov    DWORD PTR [esi],eax
10001b3c:	85 c0                	test   eax,eax
10001b3e:	75 10                	jne    10001b50 <createEllipseRegion(int, int, int, int)+0x55>
10001b40:	83 ec 0c             	sub    esp,0xc
10001b43:	68 5e 8f 00 10       	push   0x10008f5e	10001b44: R_386_32	.text
10001b48:	e8 fc ff ff ff       	call   10001b49 <createEllipseRegion(int, int, int, int)+0x4e>	10001b49: R_386_PC32	KePanic(char const*)
10001b4d:	83 c4 10             	add    esp,0x10
10001b50:	89 ef                	mov    edi,ebp
10001b52:	31 c0                	xor    eax,eax
10001b54:	39 d8                	cmp    eax,ebx
10001b56:	0f 8d 88 00 00 00    	jge    10001be4 <createEllipseRegion(int, int, int, int)+0xe9>
10001b5c:	89 04 24             	mov    DWORD PTR [esp],eax
10001b5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001b63:	db 04 24             	fild   DWORD PTR [esp]
10001b66:	8d 53 ff             	lea    edx,[ebx-0x1]
10001b69:	83 ec 10             	sub    esp,0x10
10001b6c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10001b70:	d8 c0                	fadd   st,st(0)
10001b72:	83 c7 0c             	add    edi,0xc
10001b75:	da 74 24 10          	fidiv  DWORD PTR [esp+0x10]
10001b79:	d9 e8                	fld1   
10001b7b:	dc e1                	fsubr  st(1),st
10001b7d:	d9 c9                	fxch   st(1)
10001b7f:	d8 c8                	fmul   st,st(0)
10001b81:	de e9                	fsubp  st(1),st
10001b83:	dd 1c 24             	fstp   QWORD PTR [esp]
10001b86:	e8 fc ff ff ff       	call   10001b87 <createEllipseRegion(int, int, int, int)+0x8c>	10001b87: R_386_PC32	sqrt
10001b8b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001b8f:	d9 7c 24 1e          	fnstcw WORD PTR [esp+0x1e]
10001b93:	db 44 24 4c          	fild   DWORD PTR [esp+0x4c]
10001b97:	66 8b 54 24 1e       	mov    dx,WORD PTR [esp+0x1e]
10001b9c:	dc c9                	fmul   st(1),st
10001b9e:	80 ce 0c             	or     dh,0xc
10001ba1:	d8 e1                	fsub   st,st(1)
10001ba3:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
10001ba8:	d8 0d 64 8f 00 10    	fmul   DWORD PTR ds:0x10008f64	10001baa: R_386_32	.text
10001bae:	40                   	inc    eax
10001baf:	d9 6c 24 1c          	fldcw  WORD PTR [esp+0x1c]
10001bb3:	db 5c 24 18          	fistp  DWORD PTR [esp+0x18]
10001bb7:	d9 6c 24 1e          	fldcw  WORD PTR [esp+0x1e]
10001bbb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10001bbf:	c7 47 f4 02 00 01 00 	mov    DWORD PTR [edi-0xc],0x10002
10001bc6:	89 57 f8             	mov    DWORD PTR [edi-0x8],edx
10001bc9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10001bcd:	da 44 24 10          	fiadd  DWORD PTR [esp+0x10]
10001bd1:	d9 6c 24 1c          	fldcw  WORD PTR [esp+0x1c]
10001bd5:	db 5f fc             	fistp  DWORD PTR [edi-0x4]
10001bd8:	d9 6c 24 1e          	fldcw  WORD PTR [esp+0x1e]
10001bdc:	83 c4 10             	add    esp,0x10
10001bdf:	e9 70 ff ff ff       	jmp    10001b54 <createEllipseRegion(int, int, int, int)+0x59>
10001be4:	85 db                	test   ebx,ebx
10001be6:	79 02                	jns    10001bea <createEllipseRegion(int, int, int, int)+0xef>
10001be8:	31 db                	xor    ebx,ebx
10001bea:	6b db 0c             	imul   ebx,ebx,0xc
10001bed:	89 f0                	mov    eax,esi
10001bef:	c7 44 1d 00 ff ff ff ff 	mov    DWORD PTR [ebp+ebx*1+0x0],0xffffffff
10001bf7:	83 c4 1c             	add    esp,0x1c
10001bfa:	5b                   	pop    ebx
10001bfb:	5e                   	pop    esi
10001bfc:	5f                   	pop    edi
10001bfd:	5d                   	pop    ebp
10001bfe:	c2 04 00             	ret    0x4

10001c01 <createPolygonRegion(int*, int*, int)>:
10001c01:	55                   	push   ebp
10001c02:	57                   	push   edi
10001c03:	56                   	push   esi
10001c04:	53                   	push   ebx
10001c05:	51                   	push   ecx
10001c06:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10001c0a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10001c0e:	8b 0e                	mov    ecx,DWORD PTR [esi]
10001c10:	8b 17                	mov    edx,DWORD PTR [edi]
10001c12:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001c16:	89 14 24             	mov    DWORD PTR [esp],edx
10001c19:	89 cb                	mov    ebx,ecx
10001c1b:	31 f6                	xor    esi,esi
10001c1d:	3b 74 24 24          	cmp    esi,DWORD PTR [esp+0x24]
10001c21:	7d 2b                	jge    10001c4e <createPolygonRegion(int*, int*, int)+0x4d>
10001c23:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001c27:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001c2a:	39 e9                	cmp    ecx,ebp
10001c2c:	7e 02                	jle    10001c30 <createPolygonRegion(int*, int*, int)+0x2f>
10001c2e:	89 e9                	mov    ecx,ebp
10001c30:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10001c34:	8b 3c b7             	mov    edi,DWORD PTR [edi+esi*4]
10001c37:	39 fa                	cmp    edx,edi
10001c39:	7e 02                	jle    10001c3d <createPolygonRegion(int*, int*, int)+0x3c>
10001c3b:	89 fa                	mov    edx,edi
10001c3d:	39 eb                	cmp    ebx,ebp
10001c3f:	7d 02                	jge    10001c43 <createPolygonRegion(int*, int*, int)+0x42>
10001c41:	89 eb                	mov    ebx,ebp
10001c43:	39 3c 24             	cmp    DWORD PTR [esp],edi
10001c46:	7d 03                	jge    10001c4b <createPolygonRegion(int*, int*, int)+0x4a>
10001c48:	89 3c 24             	mov    DWORD PTR [esp],edi
10001c4b:	46                   	inc    esi
10001c4c:	eb cf                	jmp    10001c1d <createPolygonRegion(int*, int*, int)+0x1c>
10001c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10001c54:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
10001c5b:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
10001c5e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
10001c61:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
10001c65:	29 cb                	sub    ebx,ecx
10001c67:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
10001c6a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10001c6d:	29 d3                	sub    ebx,edx
10001c6f:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10001c72:	5a                   	pop    edx
10001c73:	5b                   	pop    ebx
10001c74:	5e                   	pop    esi
10001c75:	5f                   	pop    edi
10001c76:	5d                   	pop    ebp
10001c77:	c2 04 00             	ret    0x4

10001c7a <createRectangleRegion(int, int, int, int)>:
10001c7a:	57                   	push   edi
10001c7b:	56                   	push   esi
10001c7c:	53                   	push   ebx
10001c7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001c81:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001c85:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10001c89:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001c8d:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
10001c90:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10001c93:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001c96:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001c9a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10001c9e:	c7 43 0c 10 00 00 00 	mov    DWORD PTR [ebx+0xc],0x10
10001ca5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001ca8:	83 ec 0c             	sub    esp,0xc
10001cab:	c1 e6 10             	shl    esi,0x10
10001cae:	6a 10                	push   0x10
10001cb0:	83 ce 02             	or     esi,0x2
10001cb3:	e8 fc ff ff ff       	call   10001cb4 <createRectangleRegion(int, int, int, int)+0x3a>	10001cb4: R_386_PC32	malloc
10001cb8:	83 c4 10             	add    esp,0x10
10001cbb:	89 03                	mov    DWORD PTR [ebx],eax
10001cbd:	89 30                	mov    DWORD PTR [eax],esi
10001cbf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001cc6:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10001cc9:	c7 40 0c ff ff ff ff 	mov    DWORD PTR [eax+0xc],0xffffffff
10001cd0:	89 d8                	mov    eax,ebx
10001cd2:	5b                   	pop    ebx
10001cd3:	5e                   	pop    esi
10001cd4:	5f                   	pop    edi
10001cd5:	c2 04 00             	ret    0x4

10001cd8 <createBorderRegion(int, int, int, int, int)>:
10001cd8:	55                   	push   ebp
10001cd9:	57                   	push   edi
10001cda:	56                   	push   esi
10001cdb:	53                   	push   ebx
10001cdc:	83 ec 18             	sub    esp,0x18
10001cdf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10001ce3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10001ce7:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
10001ceb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
10001cef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001cf3:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
10001cf6:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10001cf9:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10001cfc:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
10001d00:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001d04:	c7 43 0c 30 00 00 00 	mov    DWORD PTR [ebx+0xc],0x30
10001d0b:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10001d0e:	6a 30                	push   0x30
10001d10:	e8 fc ff ff ff       	call   10001d11 <createBorderRegion(int, int, int, int, int)+0x39>	10001d11: R_386_PC32	malloc
10001d15:	8d 4c 2d 00          	lea    ecx,[ebp+ebp*1+0x0]
10001d19:	89 03                	mov    DWORD PTR [ebx],eax
10001d1b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10001d22:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
10001d25:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10001d2c:	89 68 14             	mov    DWORD PTR [eax+0x14],ebp
10001d2f:	89 78 1c             	mov    DWORD PTR [eax+0x1c],edi
10001d32:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
10001d39:	89 78 28             	mov    DWORD PTR [eax+0x28],edi
10001d3c:	c7 40 2c ff ff ff ff 	mov    DWORD PTR [eax+0x2c],0xffffffff
10001d43:	89 ea                	mov    edx,ebp
10001d45:	29 ce                	sub    esi,ecx
10001d47:	c1 e2 10             	shl    edx,0x10
10001d4a:	89 f9                	mov    ecx,edi
10001d4c:	83 ca 02             	or     edx,0x2
10001d4f:	29 e9                	sub    ecx,ebp
10001d51:	89 10                	mov    DWORD PTR [eax],edx
10001d53:	89 48 18             	mov    DWORD PTR [eax+0x18],ecx
10001d56:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
10001d59:	c1 e6 10             	shl    esi,0x10
10001d5c:	83 ce 04             	or     esi,0x4
10001d5f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
10001d62:	83 c4 1c             	add    esp,0x1c
10001d65:	89 d8                	mov    eax,ebx
10001d67:	5b                   	pop    ebx
10001d68:	5e                   	pop    esi
10001d69:	5f                   	pop    edi
10001d6a:	5d                   	pop    ebp
10001d6b:	c2 04 00             	ret    0x4

10001d6e <createAntRegion(int, int, int, int, int)>:
10001d6e:	53                   	push   ebx
10001d6f:	83 ec 10             	sub    esp,0x10
10001d72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10001d76:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10001d8a:	53                   	push   ebx
10001d8b:	e8 fc ff ff ff       	call   10001d8c <createAntRegion(int, int, int, int, int)+0x1e>	10001d8c: R_386_PC32	createBorderRegion(int, int, int, int, int)
10001d90:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
10001d94:	89 d8                	mov    eax,ebx
10001d96:	83 c4 24             	add    esp,0x24
10001d99:	5b                   	pop    ebx
10001d9a:	c2 04 00             	ret    0x4

10001d9d <compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)>:
10001d9d:	57                   	push   edi
10001d9e:	56                   	push   esi
10001d9f:	be 04 00 00 00       	mov    esi,0x4
10001da4:	53                   	push   ebx
10001da5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10001da9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001dad:	8b 18                	mov    ebx,DWORD PTR [eax]
10001daf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001db3:	99                   	cdq    
10001db4:	f7 fe                	idiv   esi
10001db6:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001dba:	8d 7c 83 04          	lea    edi,[ebx+eax*4+0x4]
10001dbe:	c1 e2 10             	shl    edx,0x10
10001dc1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10001dc5:	09 ca                	or     edx,ecx
10001dc7:	89 14 83             	mov    DWORD PTR [ebx+eax*4],edx
10001dca:	8d 14 8d 00 00 00 00 	lea    edx,[ecx*4+0x0]
10001dd1:	89 d1                	mov    ecx,edx
10001dd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10001dd5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001dd9:	5b                   	pop    ebx
10001dda:	8d 44 02 04          	lea    eax,[edx+eax*1+0x4]
10001dde:	5e                   	pop    esi
10001ddf:	5f                   	pop    edi
10001de0:	c3                   	ret    

10001de1 <performRegionOperation(Region, Region, RegionOperation)>:
10001de1:	55                   	push   ebp
10001de2:	57                   	push   edi
10001de3:	56                   	push   esi
10001de4:	53                   	push   ebx
10001de5:	81 ec 7c 20 00 00    	sub    esp,0x207c
10001deb:	8b 84 24 94 20 00 00 	mov    eax,DWORD PTR [esp+0x2094]
10001df2:	8b b4 24 b0 20 00 00 	mov    esi,DWORD PTR [esp+0x20b0]
10001df9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10001dfd:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001e01:	8b 84 24 9c 20 00 00 	mov    eax,DWORD PTR [esp+0x209c]
10001e08:	8b b4 24 b8 20 00 00 	mov    esi,DWORD PTR [esp+0x20b8]
10001e0f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10001e13:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
10001e17:	8b 84 24 a0 20 00 00 	mov    eax,DWORD PTR [esp+0x20a0]
10001e1e:	8b b4 24 bc 20 00 00 	mov    esi,DWORD PTR [esp+0x20bc]
10001e25:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10001e29:	8b 94 24 c0 20 00 00 	mov    edx,DWORD PTR [esp+0x20c0]
10001e30:	8b 84 24 a4 20 00 00 	mov    eax,DWORD PTR [esp+0x20a4]
10001e37:	8b ac 24 90 20 00 00 	mov    ebp,DWORD PTR [esp+0x2090]
10001e3e:	8b 8c 24 a8 20 00 00 	mov    ecx,DWORD PTR [esp+0x20a8]
10001e45:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10001e49:	8b 9c 24 c4 20 00 00 	mov    ebx,DWORD PTR [esp+0x20c4]
10001e50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001e54:	39 d0                	cmp    eax,edx
10001e56:	7e 04                	jle    10001e5c <performRegionOperation(Region, Region, RegionOperation)+0x7b>
10001e58:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
10001e5c:	89 ce                	mov    esi,ecx
10001e5e:	39 d9                	cmp    ecx,ebx
10001e60:	7e 02                	jle    10001e64 <performRegionOperation(Region, Region, RegionOperation)+0x83>
10001e62:	89 de                	mov    esi,ebx
10001e64:	8b bc 24 98 20 00 00 	mov    edi,DWORD PTR [esp+0x2098]
10001e6b:	01 c7                	add    edi,eax
10001e6d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10001e71:	8b bc 24 b4 20 00 00 	mov    edi,DWORD PTR [esp+0x20b4]
10001e78:	01 d7                	add    edi,edx
10001e7a:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10001e7e:	7d 04                	jge    10001e84 <performRegionOperation(Region, Region, RegionOperation)+0xa3>
10001e80:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10001e84:	2b 7c 24 04          	sub    edi,DWORD PTR [esp+0x4]
10001e88:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001e8c:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
10001e90:	01 cf                	add    edi,ecx
10001e92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
10001e96:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
10001e9a:	01 df                	add    edi,ebx
10001e9c:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10001ea0:	7d 04                	jge    10001ea6 <performRegionOperation(Region, Region, RegionOperation)+0xc5>
10001ea2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10001ea6:	29 f7                	sub    edi,esi
10001ea8:	39 d9                	cmp    ecx,ebx
10001eaa:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
10001eae:	7c 10                	jl     10001ec0 <performRegionOperation(Region, Region, RegionOperation)+0xdf>
10001eb0:	89 cf                	mov    edi,ecx
10001eb2:	29 df                	sub    edi,ebx
10001eb4:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10001eb8:	31 ff                	xor    edi,edi
10001eba:	39 d9                	cmp    ecx,ebx
10001ebc:	75 0e                	jne    10001ecc <performRegionOperation(Region, Region, RegionOperation)+0xeb>
10001ebe:	eb 08                	jmp    10001ec8 <performRegionOperation(Region, Region, RegionOperation)+0xe7>
10001ec0:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
10001ec8:	29 cb                	sub    ebx,ecx
10001eca:	89 df                	mov    edi,ebx
10001ecc:	39 d0                	cmp    eax,edx
10001ece:	7c 16                	jl     10001ee6 <performRegionOperation(Region, Region, RegionOperation)+0x105>
10001ed0:	89 c3                	mov    ebx,eax
10001ed2:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001eda:	29 d3                	sub    ebx,edx
10001edc:	39 d0                	cmp    eax,edx
10001ede:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
10001ee2:	75 10                	jne    10001ef4 <performRegionOperation(Region, Region, RegionOperation)+0x113>
10001ee4:	eb 08                	jmp    10001eee <performRegionOperation(Region, Region, RegionOperation)+0x10d>
10001ee6:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001eee:	29 c2                	sub    edx,eax
10001ef0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
10001ef4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001ef8:	89 75 14             	mov    DWORD PTR [ebp+0x14],esi
10001efb:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
10001efe:	c6 45 18 00          	mov    BYTE PTR [ebp+0x18],0x0
10001f02:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001f06:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
10001f09:	f7 df                	neg    edi
10001f0b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10001f0f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
10001f12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10001f16:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10001f1a:	c1 e0 02             	shl    eax,0x2
10001f1d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
10001f20:	51                   	push   ecx
10001f21:	51                   	push   ecx
10001f22:	6a 01                	push   0x1
10001f24:	50                   	push   eax
10001f25:	e8 fc ff ff ff       	call   10001f26 <performRegionOperation(Region, Region, RegionOperation)+0x145>	10001f26: R_386_PC32	calloc
10001f2a:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
10001f32:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10001f3a:	c7 84 24 80 08 00 00 ff ff ff ff 	mov    DWORD PTR [esp+0x880],0xffffffff
10001f45:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10001f49:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
10001f4c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001f50:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10001f54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10001f58:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10001f5c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001f60:	f7 d8                	neg    eax
10001f62:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001f66:	83 c4 10             	add    esp,0x10
10001f69:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
10001f71:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
10001f79:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
10001f81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10001f85:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
10001f89:	39 44 24 3c          	cmp    DWORD PTR [esp+0x3c],eax
10001f8d:	0f 8e cc 01 00 00    	jle    1000215f <performRegionOperation(Region, Region, RegionOperation)+0x37e>
10001f93:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
10001f97:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10001f9b:	f7 d2                	not    edx
10001f9d:	c1 ea 1f             	shr    edx,0x1f
10001fa0:	39 74 24 40          	cmp    DWORD PTR [esp+0x40],esi
10001fa4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10001fa8:	0f 9f c0             	setg   al
10001fab:	21 d0                	and    eax,edx
10001fad:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
10001fb1:	88 44 24 56          	mov    BYTE PTR [esp+0x56],al
10001fb5:	89 f2                	mov    edx,esi
10001fb7:	0f 9f c0             	setg   al
10001fba:	f7 d2                	not    edx
10001fbc:	31 db                	xor    ebx,ebx
10001fbe:	c1 ea 1f             	shr    edx,0x1f
10001fc1:	21 d0                	and    eax,edx
10001fc3:	88 44 24 57          	mov    BYTE PTR [esp+0x57],al
10001fc7:	80 7c 1c 56 00       	cmp    BYTE PTR [esp+ebx*1+0x56],0x0
10001fcc:	75 0a                	jne    10001fd8 <performRegionOperation(Region, Region, RegionOperation)+0x1f7>
10001fce:	c7 44 9c 68 00 00 00 00 	mov    DWORD PTR [esp+ebx*4+0x68],0x0
10001fd6:	eb 1b                	jmp    10001ff3 <performRegionOperation(Region, Region, RegionOperation)+0x212>
10001fd8:	83 7c 9c 68 00       	cmp    DWORD PTR [esp+ebx*4+0x68],0x0
10001fdd:	75 14                	jne    10001ff3 <performRegionOperation(Region, Region, RegionOperation)+0x212>
10001fdf:	8b 4c 9c 58          	mov    ecx,DWORD PTR [esp+ebx*4+0x58]
10001fe3:	8b 01                	mov    eax,DWORD PTR [ecx]
10001fe5:	83 f8 ff             	cmp    eax,0xffffffff
10001fe8:	0f 85 a5 01 00 00    	jne    10002193 <performRegionOperation(Region, Region, RegionOperation)+0x3b2>
10001fee:	c6 44 1c 56 00       	mov    BYTE PTR [esp+ebx*1+0x56],0x0
10001ff3:	83 fb 01             	cmp    ebx,0x1
10001ff6:	74 07                	je     10001fff <performRegionOperation(Region, Region, RegionOperation)+0x21e>
10001ff8:	bb 01 00 00 00       	mov    ebx,0x1
10001ffd:	eb c8                	jmp    10001fc7 <performRegionOperation(Region, Region, RegionOperation)+0x1e6>
10001fff:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002003:	c6 44 24 4e 01       	mov    BYTE PTR [esp+0x4e],0x1
10002008:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000200c:	c6 44 24 4d 00       	mov    BYTE PTR [esp+0x4d],0x0
10002011:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
10002016:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000201a:	0f 95 44 24 4f       	setne  BYTE PTR [esp+0x4f]
1000201f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002023:	31 f6                	xor    esi,esi
10002025:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10002029:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
10002031:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002035:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
1000203d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002041:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
10002049:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000204d:	31 c0                	xor    eax,eax
1000204f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
10002054:	74 0a                	je     10002060 <performRegionOperation(Region, Region, RegionOperation)+0x27f>
10002056:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000205a:	39 54 24 2c          	cmp    DWORD PTR [esp+0x2c],edx
1000205e:	7f 22                	jg     10002082 <performRegionOperation(Region, Region, RegionOperation)+0x2a1>
10002060:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002065:	74 62                	je     100020c9 <performRegionOperation(Region, Region, RegionOperation)+0x2e8>
10002067:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000206b:	39 54 24 34          	cmp    DWORD PTR [esp+0x34],edx
1000206f:	7e 58                	jle    100020c9 <performRegionOperation(Region, Region, RegionOperation)+0x2e8>
10002071:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002075:	39 54 24 2c          	cmp    DWORD PTR [esp+0x2c],edx
10002079:	7e 2e                	jle    100020a9 <performRegionOperation(Region, Region, RegionOperation)+0x2c8>
1000207b:	80 7c 24 4f 00       	cmp    BYTE PTR [esp+0x4f],0x0
10002080:	74 27                	je     100020a9 <performRegionOperation(Region, Region, RegionOperation)+0x2c8>
10002082:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10002086:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
1000208a:	03 8c 94 70 10 00 00 	add    ecx,DWORD PTR [esp+edx*4+0x1070]
10002091:	83 ca ff             	or     edx,0xffffffff
10002094:	89 cf                	mov    edi,ecx
10002096:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
1000209a:	39 4c 24 34          	cmp    DWORD PTR [esp+0x34],ecx
1000209e:	7e 1b                	jle    100020bb <performRegionOperation(Region, Region, RegionOperation)+0x2da>
100020a0:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
100020a5:	74 14                	je     100020bb <performRegionOperation(Region, Region, RegionOperation)+0x2da>
100020a7:	eb 03                	jmp    100020ac <performRegionOperation(Region, Region, RegionOperation)+0x2cb>
100020a9:	83 cf ff             	or     edi,0xffffffff
100020ac:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
100020b0:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
100020b4:	03 94 8c 70 18 00 00 	add    edx,DWORD PTR [esp+ecx*4+0x1870]
100020bb:	83 ff ff             	cmp    edi,0xffffffff
100020be:	0f 85 9e 01 00 00    	jne    10002262 <performRegionOperation(Region, Region, RegionOperation)+0x481>
100020c4:	e9 18 01 00 00       	jmp    100021e1 <performRegionOperation(Region, Region, RegionOperation)+0x400>
100020c9:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
100020cd:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
100020d1:	75 16                	jne    100020e9 <performRegionOperation(Region, Region, RegionOperation)+0x308>
100020d3:	80 7c 24 4e 00       	cmp    BYTE PTR [esp+0x4e],0x0
100020d8:	74 0f                	je     100020e9 <performRegionOperation(Region, Region, RegionOperation)+0x308>
100020da:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
100020de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100020e2:	43                   	inc    ebx
100020e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100020e7:	eb 43                	jmp    1000212c <performRegionOperation(Region, Region, RegionOperation)+0x34b>
100020e9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100020ee:	74 24                	je     10002114 <performRegionOperation(Region, Region, RegionOperation)+0x333>
100020f0:	83 ec 0c             	sub    esp,0xc
100020f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
100020f7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
100020fb:	8d 84 24 84 08 00 00 	lea    eax,[esp+0x884]
10002102:	50                   	push   eax
10002103:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10002107:	55                   	push   ebp
10002108:	e8 fc ff ff ff       	call   10002109 <performRegionOperation(Region, Region, RegionOperation)+0x328>	10002109: R_386_PC32	compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)
1000210d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002111:	83 c4 20             	add    esp,0x20
10002114:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002118:	8d 74 24 70          	lea    esi,[esp+0x70]
1000211c:	8d bc 24 70 08 00 00 	lea    edi,[esp+0x870]
10002123:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
1000212a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000212c:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002130:	85 c0                	test   eax,eax
10002132:	74 05                	je     10002139 <performRegionOperation(Region, Region, RegionOperation)+0x358>
10002134:	48                   	dec    eax
10002135:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10002139:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
1000213d:	85 c0                	test   eax,eax
1000213f:	74 05                	je     10002146 <performRegionOperation(Region, Region, RegionOperation)+0x365>
10002141:	48                   	dec    eax
10002142:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000214a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
1000214e:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
10002152:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002156:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
1000215a:	e9 22 fe ff ff       	jmp    10001f81 <performRegionOperation(Region, Region, RegionOperation)+0x1a0>
1000215f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10002164:	0f 84 2f 01 00 00    	je     10002299 <performRegionOperation(Region, Region, RegionOperation)+0x4b8>
1000216a:	83 ec 0c             	sub    esp,0xc
1000216d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10002171:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10002175:	8d 84 24 84 08 00 00 	lea    eax,[esp+0x884]
1000217c:	50                   	push   eax
1000217d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10002181:	55                   	push   ebp
10002182:	e8 fc ff ff ff       	call   10002183 <performRegionOperation(Region, Region, RegionOperation)+0x3a2>	10002183: R_386_PC32	compressScanlineAndAddToRegion(Region*, int, unsigned int*, unsigned int, unsigned int)
10002187:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
1000218b:	83 c4 20             	add    esp,0x20
1000218e:	e9 06 01 00 00       	jmp    10002299 <performRegionOperation(Region, Region, RegionOperation)+0x4b8>
10002193:	0f b7 d0             	movzx  edx,ax
10002196:	83 c1 04             	add    ecx,0x4
10002199:	c1 e8 10             	shr    eax,0x10
1000219c:	89 54 9c 60          	mov    DWORD PTR [esp+ebx*4+0x60],edx
100021a0:	89 44 9c 68          	mov    DWORD PTR [esp+ebx*4+0x68],eax
100021a4:	89 4c 9c 58          	mov    DWORD PTR [esp+ebx*4+0x58],ecx
100021a8:	89 d8                	mov    eax,ebx
100021aa:	8d b4 24 70 10 00 00 	lea    esi,[esp+0x1070]
100021b1:	c1 e0 0b             	shl    eax,0xb
100021b4:	89 d9                	mov    ecx,ebx
100021b6:	01 f0                	add    eax,esi
100021b8:	c1 e1 09             	shl    ecx,0x9
100021bb:	01 ca                	add    edx,ecx
100021bd:	8d 8c 94 70 10 00 00 	lea    ecx,[esp+edx*4+0x1070]
100021c4:	39 c8                	cmp    eax,ecx
100021c6:	0f 84 27 fe ff ff    	je     10001ff3 <performRegionOperation(Region, Region, RegionOperation)+0x212>
100021cc:	8b 54 9c 58          	mov    edx,DWORD PTR [esp+ebx*4+0x58]
100021d0:	83 c0 04             	add    eax,0x4
100021d3:	8b 32                	mov    esi,DWORD PTR [edx]
100021d5:	83 c2 04             	add    edx,0x4
100021d8:	89 70 fc             	mov    DWORD PTR [eax-0x4],esi
100021db:	89 54 9c 58          	mov    DWORD PTR [esp+ebx*4+0x58],edx
100021df:	eb e3                	jmp    100021c4 <performRegionOperation(Region, Region, RegionOperation)+0x3e3>
100021e1:	31 c0                	xor    eax,eax
100021e3:	83 fa ff             	cmp    edx,0xffffffff
100021e6:	74 0b                	je     100021f3 <performRegionOperation(Region, Region, RegionOperation)+0x412>
100021e8:	83 f6 01             	xor    esi,0x1
100021eb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
100021ef:	89 d7                	mov    edi,edx
100021f1:	eb 02                	jmp    100021f5 <performRegionOperation(Region, Region, RegionOperation)+0x414>
100021f3:	31 f6                	xor    esi,esi
100021f5:	89 f2                	mov    edx,esi
100021f7:	21 c2                	and    edx,eax
100021f9:	83 bc 24 cc 20 00 00 01 	cmp    DWORD PTR [esp+0x20cc],0x1
10002201:	74 2f                	je     10002232 <performRegionOperation(Region, Region, RegionOperation)+0x451>
10002203:	89 f2                	mov    edx,esi
10002205:	7f 0c                	jg     10002213 <performRegionOperation(Region, Region, RegionOperation)+0x432>
10002207:	09 c2                	or     edx,eax
10002209:	83 bc 24 cc 20 00 00 00 	cmp    DWORD PTR [esp+0x20cc],0x0
10002211:	eb 14                	jmp    10002227 <performRegionOperation(Region, Region, RegionOperation)+0x446>
10002213:	83 bc 24 cc 20 00 00 02 	cmp    DWORD PTR [esp+0x20cc],0x2
1000221b:	74 10                	je     1000222d <performRegionOperation(Region, Region, RegionOperation)+0x44c>
1000221d:	31 c2                	xor    edx,eax
1000221f:	83 bc 24 cc 20 00 00 03 	cmp    DWORD PTR [esp+0x20cc],0x3
10002227:	74 09                	je     10002232 <performRegionOperation(Region, Region, RegionOperation)+0x451>
10002229:	88 c2                	mov    dl,al
1000222b:	eb 05                	jmp    10002232 <performRegionOperation(Region, Region, RegionOperation)+0x451>
1000222d:	83 f2 01             	xor    edx,0x1
10002230:	21 c2                	and    edx,eax
10002232:	38 54 24 4d          	cmp    BYTE PTR [esp+0x4d],dl
10002236:	75 09                	jne    10002241 <performRegionOperation(Region, Region, RegionOperation)+0x460>
10002238:	88 54 24 4d          	mov    BYTE PTR [esp+0x4d],dl
1000223c:	e9 0e fe ff ff       	jmp    1000204f <performRegionOperation(Region, Region, RegionOperation)+0x26e>
10002241:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10002245:	39 bc 8c 70 08 00 00 	cmp    DWORD PTR [esp+ecx*4+0x870],edi
1000224c:	74 05                	je     10002253 <performRegionOperation(Region, Region, RegionOperation)+0x472>
1000224e:	c6 44 24 4e 00       	mov    BYTE PTR [esp+0x4e],0x0
10002253:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10002257:	89 7c 8c 70          	mov    DWORD PTR [esp+ecx*4+0x70],edi
1000225b:	41                   	inc    ecx
1000225c:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
10002260:	eb d6                	jmp    10002238 <performRegionOperation(Region, Region, RegionOperation)+0x457>
10002262:	83 fa ff             	cmp    edx,0xffffffff
10002265:	74 0a                	je     10002271 <performRegionOperation(Region, Region, RegionOperation)+0x490>
10002267:	39 d7                	cmp    edi,edx
10002269:	0f 8f 79 ff ff ff    	jg     100021e8 <performRegionOperation(Region, Region, RegionOperation)+0x407>
1000226f:	eb 02                	jmp    10002273 <performRegionOperation(Region, Region, RegionOperation)+0x492>
10002271:	31 f6                	xor    esi,esi
10002273:	83 f0 01             	xor    eax,0x1
10002276:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
1000227a:	83 fa ff             	cmp    edx,0xffffffff
1000227d:	0f 84 72 ff ff ff    	je     100021f5 <performRegionOperation(Region, Region, RegionOperation)+0x414>
10002283:	39 d7                	cmp    edi,edx
10002285:	0f 8d 5d ff ff ff    	jge    100021e8 <performRegionOperation(Region, Region, RegionOperation)+0x407>
1000228b:	83 ff ff             	cmp    edi,0xffffffff
1000228e:	0f 85 61 ff ff ff    	jne    100021f5 <performRegionOperation(Region, Region, RegionOperation)+0x414>
10002294:	e9 4f ff ff ff       	jmp    100021e8 <performRegionOperation(Region, Region, RegionOperation)+0x407>
10002299:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000229d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
100022a0:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100022a3:	bb 04 00 00 00       	mov    ebx,0x4
100022a8:	99                   	cdq    
100022a9:	f7 fb                	idiv   ebx
100022ab:	c7 04 81 ff ff ff ff 	mov    DWORD PTR [ecx+eax*4],0xffffffff
100022b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100022b5:	83 c0 04             	add    eax,0x4
100022b8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
100022bb:	52                   	push   edx
100022bc:	52                   	push   edx
100022bd:	50                   	push   eax
100022be:	51                   	push   ecx
100022bf:	e8 fc ff ff ff       	call   100022c0 <performRegionOperation(Region, Region, RegionOperation)+0x4df>	100022c0: R_386_PC32	realloc
100022c4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
100022c7:	81 c4 8c 20 00 00    	add    esp,0x208c
100022cd:	89 e8                	mov    eax,ebp
100022cf:	5b                   	pop    ebx
100022d0:	5e                   	pop    esi
100022d1:	5f                   	pop    edi
100022d2:	5d                   	pop    ebp
100022d3:	c2 04 00             	ret    0x4

100022d6 <getRegionUnion(Region, Region)>:
100022d6:	57                   	push   edi
100022d7:	b9 07 00 00 00       	mov    ecx,0x7
100022dc:	56                   	push   esi
100022dd:	53                   	push   ebx
100022de:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100022e2:	6a 00                	push   0x0
100022e4:	83 ec 1c             	sub    esp,0x1c
100022e7:	8d 74 24 50          	lea    esi,[esp+0x50]
100022eb:	89 e7                	mov    edi,esp
100022ed:	83 ec 1c             	sub    esp,0x1c
100022f0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022f2:	8d 74 24 50          	lea    esi,[esp+0x50]
100022f6:	89 e7                	mov    edi,esp
100022f8:	b9 07 00 00 00       	mov    ecx,0x7
100022fd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100022ff:	53                   	push   ebx
10002300:	e8 fc ff ff ff       	call   10002301 <getRegionUnion(Region, Region)+0x2b>	10002301: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
10002305:	89 d8                	mov    eax,ebx
10002307:	83 c4 3c             	add    esp,0x3c
1000230a:	5b                   	pop    ebx
1000230b:	5e                   	pop    esi
1000230c:	5f                   	pop    edi
1000230d:	c2 04 00             	ret    0x4

10002310 <getRegionDifference(Region, Region)>:
10002310:	57                   	push   edi
10002311:	b9 07 00 00 00       	mov    ecx,0x7
10002316:	56                   	push   esi
10002317:	53                   	push   ebx
10002318:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000231c:	6a 02                	push   0x2
1000231e:	83 ec 1c             	sub    esp,0x1c
10002321:	8d 74 24 50          	lea    esi,[esp+0x50]
10002325:	89 e7                	mov    edi,esp
10002327:	83 ec 1c             	sub    esp,0x1c
1000232a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000232c:	8d 74 24 50          	lea    esi,[esp+0x50]
10002330:	89 e7                	mov    edi,esp
10002332:	b9 07 00 00 00       	mov    ecx,0x7
10002337:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002339:	53                   	push   ebx
1000233a:	e8 fc ff ff ff       	call   1000233b <getRegionDifference(Region, Region)+0x2b>	1000233b: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
1000233f:	89 d8                	mov    eax,ebx
10002341:	83 c4 3c             	add    esp,0x3c
10002344:	5b                   	pop    ebx
10002345:	5e                   	pop    esi
10002346:	5f                   	pop    edi
10002347:	c2 04 00             	ret    0x4

1000234a <createSlowRoundedRectangleRegion(int, int, int, int, int)>:
1000234a:	55                   	push   ebp
1000234b:	57                   	push   edi
1000234c:	56                   	push   esi
1000234d:	53                   	push   ebx
1000234e:	81 ec 4c 01 00 00    	sub    esp,0x14c
10002354:	8b 9c 24 64 01 00 00 	mov    ebx,DWORD PTR [esp+0x164]
1000235b:	8b b4 24 68 01 00 00 	mov    esi,DWORD PTR [esp+0x168]
10002362:	8d 6c 24 28          	lea    ebp,[esp+0x28]
10002366:	83 ec 0c             	sub    esp,0xc
10002369:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
10002370:	ff b4 24 7c 01 00 00 	push   DWORD PTR [esp+0x17c]
10002377:	56                   	push   esi
10002378:	53                   	push   ebx
10002379:	55                   	push   ebp
1000237a:	e8 fc ff ff ff       	call   1000237b <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x31>	1000237b: R_386_PC32	createRectangleRegion(int, int, int, int)
1000237f:	ff b4 24 90 01 00 00 	push   DWORD PTR [esp+0x190]
10002386:	ff b4 24 94 01 00 00 	push   DWORD PTR [esp+0x194]
1000238d:	56                   	push   esi
1000238e:	53                   	push   ebx
1000238f:	8d 44 24 70          	lea    eax,[esp+0x70]
10002393:	50                   	push   eax
10002394:	e8 fc ff ff ff       	call   10002395 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x4b>	10002395: R_386_PC32	createRectangleRegion(int, int, int, int)
10002399:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100023a0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100023a4:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
100023ab:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100023af:	8b 84 24 a0 01 00 00 	mov    eax,DWORD PTR [esp+0x1a0]
100023b6:	83 c4 20             	add    esp,0x20
100023b9:	01 c0                	add    eax,eax
100023bb:	50                   	push   eax
100023bc:	50                   	push   eax
100023bd:	56                   	push   esi
100023be:	53                   	push   ebx
100023bf:	8d 44 24 7c          	lea    eax,[esp+0x7c]
100023c3:	50                   	push   eax
100023c4:	e8 fc ff ff ff       	call   100023c5 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x7b>	100023c5: R_386_PC32	createEllipseRegion(int, int, int, int)
100023c9:	b9 07 00 00 00       	mov    ecx,0x7
100023ce:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100023d5:	8d 9c 24 98 00 00 00 	lea    ebx,[esp+0x98]
100023dc:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100023e0:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
100023e7:	83 ec 14             	sub    esp,0x14
100023ea:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100023ee:	89 e7                	mov    edi,esp
100023f0:	8d 74 24 74          	lea    esi,[esp+0x74]
100023f4:	83 ec 1c             	sub    esp,0x1c
100023f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100023f9:	89 e7                	mov    edi,esp
100023fb:	89 ee                	mov    esi,ebp
100023fd:	b9 07 00 00 00       	mov    ecx,0x7
10002402:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002404:	53                   	push   ebx
10002405:	e8 fc ff ff ff       	call   10002406 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0xbc>	10002406: R_386_PC32	getRegionDifference(Region, Region)
1000240a:	b9 07 00 00 00       	mov    ecx,0x7
1000240f:	8b 94 24 b8 01 00 00 	mov    edx,DWORD PTR [esp+0x1b8]
10002416:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000241a:	2b 94 24 c0 01 00 00 	sub    edx,DWORD PTR [esp+0x1c0]
10002421:	8d ac 24 e4 00 00 00 	lea    ebp,[esp+0xe4]
10002428:	01 d0                	add    eax,edx
1000242a:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
1000242e:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
10002435:	83 c4 2c             	add    esp,0x2c
10002438:	89 e7                	mov    edi,esp
1000243a:	8d 74 24 64          	lea    esi,[esp+0x64]
1000243e:	83 ec 1c             	sub    esp,0x1c
10002441:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002443:	89 e7                	mov    edi,esp
10002445:	89 de                	mov    esi,ebx
10002447:	b9 07 00 00 00       	mov    ecx,0x7
1000244c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000244e:	55                   	push   ebp
1000244f:	e8 fc ff ff ff       	call   10002450 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x106>	10002450: R_386_PC32	getRegionDifference(Region, Region)
10002454:	b9 07 00 00 00       	mov    ecx,0x7
10002459:	8b 84 24 ac 01 00 00 	mov    eax,DWORD PTR [esp+0x1ac]
10002460:	8d 9c 24 f0 00 00 00 	lea    ebx,[esp+0xf0]
10002467:	2b 84 24 b0 01 00 00 	sub    eax,DWORD PTR [esp+0x1b0]
1000246e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002472:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10002476:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
1000247a:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10002481:	83 c4 1c             	add    esp,0x1c
10002484:	89 e7                	mov    edi,esp
10002486:	8d 74 24 64          	lea    esi,[esp+0x64]
1000248a:	83 ec 1c             	sub    esp,0x1c
1000248d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000248f:	89 e7                	mov    edi,esp
10002491:	89 ee                	mov    esi,ebp
10002493:	b9 07 00 00 00       	mov    ecx,0x7
10002498:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000249a:	53                   	push   ebx
1000249b:	e8 fc ff ff ff       	call   1000249c <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x152>	1000249c: R_386_PC32	getRegionDifference(Region, Region)
100024a0:	b9 07 00 00 00       	mov    ecx,0x7
100024a5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100024a9:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
100024b0:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
100024b7:	83 c4 1c             	add    esp,0x1c
100024ba:	89 e7                	mov    edi,esp
100024bc:	8d 74 24 64          	lea    esi,[esp+0x64]
100024c0:	83 ec 1c             	sub    esp,0x1c
100024c3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024c5:	89 e7                	mov    edi,esp
100024c7:	89 de                	mov    esi,ebx
100024c9:	b9 07 00 00 00       	mov    ecx,0x7
100024ce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024d0:	50                   	push   eax
100024d1:	e8 fc ff ff ff       	call   100024d2 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x188>	100024d2: R_386_PC32	getRegionDifference(Region, Region)
100024d6:	b9 07 00 00 00       	mov    ecx,0x7
100024db:	8d ac 24 28 01 00 00 	lea    ebp,[esp+0x128]
100024e2:	83 c4 1c             	add    esp,0x1c
100024e5:	89 e7                	mov    edi,esp
100024e7:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
100024ee:	83 ec 1c             	sub    esp,0x1c
100024f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100024f3:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
100024fa:	89 e7                	mov    edi,esp
100024fc:	89 c6                	mov    esi,eax
100024fe:	b9 07 00 00 00       	mov    ecx,0x7
10002503:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002505:	55                   	push   ebp
10002506:	e8 fc ff ff ff       	call   10002507 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x1bd>	10002507: R_386_PC32	getRegionUnion(Region, Region)
1000250b:	b9 07 00 00 00       	mov    ecx,0x7
10002510:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
10002514:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
1000251b:	2b 94 24 b0 01 00 00 	sub    edx,DWORD PTR [esp+0x1b0]
10002522:	03 54 24 4c          	add    edx,DWORD PTR [esp+0x4c]
10002526:	89 94 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],edx
1000252d:	83 c4 1c             	add    esp,0x1c
10002530:	89 e7                	mov    edi,esp
10002532:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
10002539:	83 ec 1c             	sub    esp,0x1c
1000253c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000253e:	89 e7                	mov    edi,esp
10002540:	89 ee                	mov    esi,ebp
10002542:	b9 07 00 00 00       	mov    ecx,0x7
10002547:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002549:	53                   	push   ebx
1000254a:	e8 fc ff ff ff       	call   1000254b <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x201>	1000254b: R_386_PC32	getRegionUnion(Region, Region)
1000254f:	b9 07 00 00 00       	mov    ecx,0x7
10002554:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002558:	8d ac 24 60 01 00 00 	lea    ebp,[esp+0x160]
1000255f:	2b 84 24 b0 01 00 00 	sub    eax,DWORD PTR [esp+0x1b0]
10002566:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
1000256a:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10002571:	83 c4 1c             	add    esp,0x1c
10002574:	89 e7                	mov    edi,esp
10002576:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
1000257d:	83 ec 1c             	sub    esp,0x1c
10002580:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002582:	89 e7                	mov    edi,esp
10002584:	89 de                	mov    esi,ebx
10002586:	b9 07 00 00 00       	mov    ecx,0x7
1000258b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000258d:	55                   	push   ebp
1000258e:	e8 fc ff ff ff       	call   1000258f <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x245>	1000258f: R_386_PC32	getRegionUnion(Region, Region)
10002593:	b9 07 00 00 00       	mov    ecx,0x7
10002598:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000259c:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
100025a3:	83 c4 1c             	add    esp,0x1c
100025a6:	89 e7                	mov    edi,esp
100025a8:	8d b4 24 80 00 00 00 	lea    esi,[esp+0x80]
100025af:	83 ec 1c             	sub    esp,0x1c
100025b2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100025b4:	89 e7                	mov    edi,esp
100025b6:	89 ee                	mov    esi,ebp
100025b8:	b9 07 00 00 00       	mov    ecx,0x7
100025bd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100025bf:	ff b4 24 9c 01 00 00 	push   DWORD PTR [esp+0x19c]
100025c6:	e8 fc ff ff ff       	call   100025c7 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x27d>	100025c7: R_386_PC32	getRegionUnion(Region, Region)
100025cb:	83 c4 30             	add    esp,0x30
100025ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100025d2:	e8 fc ff ff ff       	call   100025d3 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x289>	100025d3: R_386_PC32	free
100025d7:	58                   	pop    eax
100025d8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
100025dc:	e8 fc ff ff ff       	call   100025dd <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x293>	100025dd: R_386_PC32	free
100025e1:	5a                   	pop    edx
100025e2:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
100025e6:	e8 fc ff ff ff       	call   100025e7 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x29d>	100025e7: R_386_PC32	free
100025eb:	59                   	pop    ecx
100025ec:	ff b4 24 88 00 00 00 	push   DWORD PTR [esp+0x88]
100025f3:	e8 fc ff ff ff       	call   100025f4 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2aa>	100025f4: R_386_PC32	free
100025f8:	5b                   	pop    ebx
100025f9:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
10002600:	e8 fc ff ff ff       	call   10002601 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2b7>	10002601: R_386_PC32	free
10002605:	5e                   	pop    esi
10002606:	ff b4 24 c0 00 00 00 	push   DWORD PTR [esp+0xc0]
1000260d:	e8 fc ff ff ff       	call   1000260e <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2c4>	1000260e: R_386_PC32	free
10002612:	5f                   	pop    edi
10002613:	ff b4 24 dc 00 00 00 	push   DWORD PTR [esp+0xdc]
1000261a:	e8 fc ff ff ff       	call   1000261b <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2d1>	1000261b: R_386_PC32	free
1000261f:	5d                   	pop    ebp
10002620:	ff b4 24 f8 00 00 00 	push   DWORD PTR [esp+0xf8]
10002627:	e8 fc ff ff ff       	call   10002628 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2de>	10002628: R_386_PC32	free
1000262c:	58                   	pop    eax
1000262d:	ff b4 24 14 01 00 00 	push   DWORD PTR [esp+0x114]
10002634:	e8 fc ff ff ff       	call   10002635 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2eb>	10002635: R_386_PC32	free
10002639:	58                   	pop    eax
1000263a:	ff b4 24 30 01 00 00 	push   DWORD PTR [esp+0x130]
10002641:	e8 fc ff ff ff       	call   10002642 <createSlowRoundedRectangleRegion(int, int, int, int, int)+0x2f8>	10002642: R_386_PC32	free
10002646:	8b 84 24 70 01 00 00 	mov    eax,DWORD PTR [esp+0x170]
1000264d:	81 c4 5c 01 00 00    	add    esp,0x15c
10002653:	5b                   	pop    ebx
10002654:	5e                   	pop    esi
10002655:	5f                   	pop    edi
10002656:	5d                   	pop    ebp
10002657:	c2 04 00             	ret    0x4

1000265a <getRegionIntersection(Region, Region)>:
1000265a:	57                   	push   edi
1000265b:	b9 07 00 00 00       	mov    ecx,0x7
10002660:	56                   	push   esi
10002661:	53                   	push   ebx
10002662:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002666:	6a 01                	push   0x1
10002668:	83 ec 1c             	sub    esp,0x1c
1000266b:	8d 74 24 50          	lea    esi,[esp+0x50]
1000266f:	89 e7                	mov    edi,esp
10002671:	83 ec 1c             	sub    esp,0x1c
10002674:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002676:	8d 74 24 50          	lea    esi,[esp+0x50]
1000267a:	89 e7                	mov    edi,esp
1000267c:	b9 07 00 00 00       	mov    ecx,0x7
10002681:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10002683:	53                   	push   ebx
10002684:	e8 fc ff ff ff       	call   10002685 <getRegionIntersection(Region, Region)+0x2b>	10002685: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
10002689:	89 d8                	mov    eax,ebx
1000268b:	83 c4 3c             	add    esp,0x3c
1000268e:	5b                   	pop    ebx
1000268f:	5e                   	pop    esi
10002690:	5f                   	pop    edi
10002691:	c2 04 00             	ret    0x4

10002694 <getRegionXOR(Region, Region)>:
10002694:	57                   	push   edi
10002695:	b9 07 00 00 00       	mov    ecx,0x7
1000269a:	56                   	push   esi
1000269b:	53                   	push   ebx
1000269c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
100026a0:	6a 03                	push   0x3
100026a2:	83 ec 1c             	sub    esp,0x1c
100026a5:	8d 74 24 50          	lea    esi,[esp+0x50]
100026a9:	89 e7                	mov    edi,esp
100026ab:	83 ec 1c             	sub    esp,0x1c
100026ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100026b0:	8d 74 24 50          	lea    esi,[esp+0x50]
100026b4:	89 e7                	mov    edi,esp
100026b6:	b9 07 00 00 00       	mov    ecx,0x7
100026bb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100026bd:	53                   	push   ebx
100026be:	e8 fc ff ff ff       	call   100026bf <getRegionXOR(Region, Region)+0x2b>	100026bf: R_386_PC32	performRegionOperation(Region, Region, RegionOperation)
100026c3:	89 d8                	mov    eax,ebx
100026c5:	83 c4 3c             	add    esp,0x3c
100026c8:	5b                   	pop    ebx
100026c9:	5e                   	pop    esi
100026ca:	5f                   	pop    edi
100026cb:	c2 04 00             	ret    0x4

100026ce <isPointInRegion(Region, int, int)>:
100026ce:	55                   	push   ebp
100026cf:	31 ed                	xor    ebp,ebp
100026d1:	57                   	push   edi
100026d2:	31 ff                	xor    edi,edi
100026d4:	56                   	push   esi
100026d5:	53                   	push   ebx
100026d6:	83 ec 24             	sub    esp,0x24
100026d9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100026dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100026e1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100026e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100026e9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100026ed:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100026f1:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
100026f5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100026f9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100026fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002701:	39 6c 24 18          	cmp    DWORD PTR [esp+0x18],ebp
10002705:	0f 8e bf 00 00 00    	jle    100027ca <isPointInRegion(Region, int, int)+0xfc>
1000270b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
1000270f:	8d 47 01             	lea    eax,[edi+0x1]
10002712:	8b 1c be             	mov    ebx,DWORD PTR [esi+edi*4]
10002715:	8d 14 bd 00 00 00 00 	lea    edx,[edi*4+0x0]
1000271c:	83 fb ff             	cmp    ebx,0xffffffff
1000271f:	0f 84 a5 00 00 00    	je     100027ca <isPointInRegion(Region, int, int)+0xfc>
10002725:	8d 7c 16 04          	lea    edi,[esi+edx*1+0x4]
10002729:	0f b7 cb             	movzx  ecx,bx
1000272c:	89 3c 24             	mov    DWORD PTR [esp],edi
1000272f:	c1 eb 10             	shr    ebx,0x10
10002732:	8d 3c 08             	lea    edi,[eax+ecx*1]
10002735:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
10002739:	31 d2                	xor    edx,edx
1000273b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000273f:	31 c0                	xor    eax,eax
10002741:	01 eb                	add    ebx,ebp
10002743:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
10002747:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
1000274b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
1000274f:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
10002753:	7d 60                	jge    100027b5 <isPointInRegion(Region, int, int)+0xe7>
10002755:	8b 34 24             	mov    esi,DWORD PTR [esp]
10002758:	39 16                	cmp    DWORD PTR [esi],edx
1000275a:	75 08                	jne    10002764 <isPointInRegion(Region, int, int)+0x96>
1000275c:	83 04 24 04          	add    DWORD PTR [esp],0x4
10002760:	83 f0 01             	xor    eax,0x1
10002763:	49                   	dec    ecx
10002764:	84 c0                	test   al,al
10002766:	74 49                	je     100027b1 <isPointInRegion(Region, int, int)+0xe3>
10002768:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000276c:	3b 5c 24 58          	cmp    ebx,DWORD PTR [esp+0x58]
10002770:	7f 5c                	jg     100027ce <isPointInRegion(Region, int, int)+0x100>
10002772:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002776:	3b 5c 24 58          	cmp    ebx,DWORD PTR [esp+0x58]
1000277a:	7e 52                	jle    100027ce <isPointInRegion(Region, int, int)+0x100>
1000277c:	bb 01 00 00 00       	mov    ebx,0x1
10002781:	85 c9                	test   ecx,ecx
10002783:	74 07                	je     1000278c <isPointInRegion(Region, int, int)+0xbe>
10002785:	8b 34 24             	mov    esi,DWORD PTR [esp]
10002788:	8b 1e                	mov    ebx,DWORD PTR [esi]
1000278a:	29 d3                	sub    ebx,edx
1000278c:	8d 34 1a             	lea    esi,[edx+ebx*1]
1000278f:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
10002793:	7e 06                	jle    1000279b <isPointInRegion(Region, int, int)+0xcd>
10002795:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
10002799:	29 d3                	sub    ebx,edx
1000279b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
1000279f:	01 d6                	add    esi,edx
100027a1:	3b 74 24 54          	cmp    esi,DWORD PTR [esp+0x54]
100027a5:	7f 27                	jg     100027ce <isPointInRegion(Region, int, int)+0x100>
100027a7:	01 f3                	add    ebx,esi
100027a9:	3b 5c 24 54          	cmp    ebx,DWORD PTR [esp+0x54]
100027ad:	7e 1f                	jle    100027ce <isPointInRegion(Region, int, int)+0x100>
100027af:	eb 30                	jmp    100027e1 <isPointInRegion(Region, int, int)+0x113>
100027b1:	85 c9                	test   ecx,ecx
100027b3:	75 22                	jne    100027d7 <isPointInRegion(Region, int, int)+0x109>
100027b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100027b9:	01 e8                	add    eax,ebp
100027bb:	3b 44 24 58          	cmp    eax,DWORD PTR [esp+0x58]
100027bf:	74 09                	je     100027ca <isPointInRegion(Region, int, int)+0xfc>
100027c1:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
100027c5:	e9 37 ff ff ff       	jmp    10002701 <isPointInRegion(Region, int, int)+0x33>
100027ca:	31 c0                	xor    eax,eax
100027cc:	eb 13                	jmp    100027e1 <isPointInRegion(Region, int, int)+0x113>
100027ce:	42                   	inc    edx
100027cf:	85 c9                	test   ecx,ecx
100027d1:	0f 84 78 ff ff ff    	je     1000274f <isPointInRegion(Region, int, int)+0x81>
100027d7:	8b 14 24             	mov    edx,DWORD PTR [esp]
100027da:	8b 12                	mov    edx,DWORD PTR [edx]
100027dc:	e9 6e ff ff ff       	jmp    1000274f <isPointInRegion(Region, int, int)+0x81>
100027e1:	83 c4 24             	add    esp,0x24
100027e4:	5b                   	pop    ebx
100027e5:	5e                   	pop    esi
100027e6:	5f                   	pop    edi
100027e7:	5d                   	pop    ebp
100027e8:	c3                   	ret    

100027e9 <ssfn_utf8>:
100027e9:	56                   	push   esi
100027ea:	53                   	push   ebx
100027eb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
100027ef:	8b 11                	mov    edx,DWORD PTR [ecx]
100027f1:	0f b6 32             	movzx  esi,BYTE PTR [edx]
100027f4:	89 f0                	mov    eax,esi
100027f6:	84 c0                	test   al,al
100027f8:	0f be d8             	movsx  ebx,al
100027fb:	78 04                	js     10002801 <ssfn_utf8+0x18>
100027fd:	89 d8                	mov    eax,ebx
100027ff:	eb 7d                	jmp    1000287e <ssfn_utf8+0x95>
10002801:	f7 c6 20 00 00 00    	test   esi,0x20
10002807:	75 14                	jne    1000281d <ssfn_utf8+0x34>
10002809:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
1000280c:	c1 e3 06             	shl    ebx,0x6
1000280f:	83 e0 3f             	and    eax,0x3f
10002812:	81 e3 c0 07 00 00    	and    ebx,0x7c0
10002818:	42                   	inc    edx
10002819:	09 d8                	or     eax,ebx
1000281b:	eb 5f                	jmp    1000287c <ssfn_utf8+0x93>
1000281d:	f7 c6 10 00 00 00    	test   esi,0x10
10002823:	75 20                	jne    10002845 <ssfn_utf8+0x5c>
10002825:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10002829:	c1 e3 0c             	shl    ebx,0xc
1000282c:	c1 e0 06             	shl    eax,0x6
1000282f:	0f b7 db             	movzx  ebx,bx
10002832:	25 c0 0f 00 00       	and    eax,0xfc0
10002837:	83 c2 02             	add    edx,0x2
1000283a:	09 d8                	or     eax,ebx
1000283c:	8a 1a                	mov    bl,BYTE PTR [edx]
1000283e:	83 e3 3f             	and    ebx,0x3f
10002841:	09 d8                	or     eax,ebx
10002843:	eb 37                	jmp    1000287c <ssfn_utf8+0x93>
10002845:	31 c0                	xor    eax,eax
10002847:	83 e6 08             	and    esi,0x8
1000284a:	75 32                	jne    1000287e <ssfn_utf8+0x95>
1000284c:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
10002850:	c1 e3 12             	shl    ebx,0x12
10002853:	c1 e0 0c             	shl    eax,0xc
10002856:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
1000285c:	25 00 f0 03 00       	and    eax,0x3f000
10002861:	83 c2 03             	add    edx,0x3
10002864:	09 d8                	or     eax,ebx
10002866:	8a 1a                	mov    bl,BYTE PTR [edx]
10002868:	83 e3 3f             	and    ebx,0x3f
1000286b:	09 d8                	or     eax,ebx
1000286d:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10002871:	c1 e3 06             	shl    ebx,0x6
10002874:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
1000287a:	09 d8                	or     eax,ebx
1000287c:	89 11                	mov    DWORD PTR [ecx],edx
1000287e:	ff 01                	inc    DWORD PTR [ecx]
10002880:	5b                   	pop    ebx
10002881:	5e                   	pop    esi
10002882:	c3                   	ret    

10002883 <_ssfn_c>:
10002883:	55                   	push   ebp
10002884:	57                   	push   edi
10002885:	56                   	push   esi
10002886:	53                   	push   ebx
10002887:	51                   	push   ecx
10002888:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000288c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002890:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
10002896:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
1000289a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
1000289e:	85 c0                	test   eax,eax
100028a0:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
100028a6:	0f 84 63 01 00 00    	je     10002a0f <_ssfn_c+0x18c>
100028ac:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
100028b0:	0f 84 59 01 00 00    	je     10002a0f <_ssfn_c+0x18c>
100028b6:	85 c9                	test   ecx,ecx
100028b8:	0f 84 51 01 00 00    	je     10002a0f <_ssfn_c+0x18c>
100028be:	8a 11                	mov    dl,BYTE PTR [ecx]
100028c0:	84 d2                	test   dl,dl
100028c2:	0f 84 47 01 00 00    	je     10002a0f <_ssfn_c+0x18c>
100028c8:	8b 68 14             	mov    ebp,DWORD PTR [eax+0x14]
100028cb:	85 ed                	test   ebp,ebp
100028cd:	74 34                	je     10002903 <_ssfn_c+0x80>
100028cf:	8d 74 05 00          	lea    esi,[ebp+eax*1+0x0]
100028d3:	31 ff                	xor    edi,edi
100028d5:	89 34 24             	mov    DWORD PTR [esp],esi
100028d8:	8b 34 24             	mov    esi,DWORD PTR [esp]
100028db:	0f b7 34 7e          	movzx  esi,WORD PTR [esi+edi*2]
100028df:	66 85 f6             	test   si,si
100028e2:	74 1f                	je     10002903 <_ssfn_c+0x80>
100028e4:	01 c6                	add    esi,eax
100028e6:	89 cd                	mov    ebp,ecx
100028e8:	8a 1e                	mov    bl,BYTE PTR [esi]
100028ea:	84 db                	test   bl,bl
100028ec:	0f 84 27 01 00 00    	je     10002a19 <_ssfn_c+0x196>
100028f2:	3a 5d 00             	cmp    bl,BYTE PTR [ebp+0x0]
100028f5:	0f 85 18 01 00 00    	jne    10002a13 <_ssfn_c+0x190>
100028fb:	89 eb                	mov    ebx,ebp
100028fd:	46                   	inc    esi
100028fe:	43                   	inc    ebx
100028ff:	89 dd                	mov    ebp,ebx
10002901:	eb e5                	jmp    100028e8 <_ssfn_c+0x65>
10002903:	84 d2                	test   dl,dl
10002905:	0f b6 da             	movzx  ebx,dl
10002908:	78 09                	js     10002913 <_ssfn_c+0x90>
1000290a:	89 da                	mov    edx,ebx
1000290c:	89 cb                	mov    ebx,ecx
1000290e:	e9 83 00 00 00       	jmp    10002996 <_ssfn_c+0x113>
10002913:	f6 c2 20             	test   dl,0x20
10002916:	75 16                	jne    1000292e <_ssfn_c+0xab>
10002918:	c1 e3 06             	shl    ebx,0x6
1000291b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
1000291e:	81 e3 c0 07 00 00    	and    ebx,0x7c0
10002924:	83 e2 3f             	and    edx,0x3f
10002927:	09 da                	or     edx,ebx
10002929:	8d 59 01             	lea    ebx,[ecx+0x1]
1000292c:	eb 68                	jmp    10002996 <_ssfn_c+0x113>
1000292e:	f6 c2 10             	test   dl,0x10
10002931:	75 23                	jne    10002956 <_ssfn_c+0xd3>
10002933:	c1 e3 0c             	shl    ebx,0xc
10002936:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
1000293a:	0f b6 71 02          	movzx  esi,BYTE PTR [ecx+0x2]
1000293e:	c1 e2 06             	shl    edx,0x6
10002941:	83 e6 3f             	and    esi,0x3f
10002944:	81 e2 c0 0f 00 00    	and    edx,0xfc0
1000294a:	09 d6                	or     esi,edx
1000294c:	0f b7 d3             	movzx  edx,bx
1000294f:	8d 59 02             	lea    ebx,[ecx+0x2]
10002952:	09 f2                	or     edx,esi
10002954:	eb 40                	jmp    10002996 <_ssfn_c+0x113>
10002956:	80 e2 08             	and    dl,0x8
10002959:	75 37                	jne    10002992 <_ssfn_c+0x10f>
1000295b:	c1 e3 12             	shl    ebx,0x12
1000295e:	0f b6 71 01          	movzx  esi,BYTE PTR [ecx+0x1]
10002962:	0f b6 51 02          	movzx  edx,BYTE PTR [ecx+0x2]
10002966:	c1 e6 0c             	shl    esi,0xc
10002969:	c1 e2 06             	shl    edx,0x6
1000296c:	81 e6 00 f0 03 00    	and    esi,0x3f000
10002972:	81 e2 c0 0f 00 00    	and    edx,0xfc0
10002978:	09 f2                	or     edx,esi
1000297a:	0f b6 71 03          	movzx  esi,BYTE PTR [ecx+0x3]
1000297e:	83 e6 3f             	and    esi,0x3f
10002981:	09 d6                	or     esi,edx
10002983:	89 da                	mov    edx,ebx
10002985:	8d 59 03             	lea    ebx,[ecx+0x3]
10002988:	81 e2 00 00 1c 00    	and    edx,0x1c0000
1000298e:	09 f2                	or     edx,esi
10002990:	eb 04                	jmp    10002996 <_ssfn_c+0x113>
10002992:	89 cb                	mov    ebx,ecx
10002994:	31 d2                	xor    edx,edx
10002996:	8d 7b 01             	lea    edi,[ebx+0x1]
10002999:	89 fd                	mov    ebp,edi
1000299b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000299f:	89 eb                	mov    ebx,ebp
100029a1:	31 f6                	xor    esi,esi
100029a3:	29 cb                	sub    ebx,ecx
100029a5:	89 1f                	mov    DWORD PTR [edi],ebx
100029a7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
100029ab:	89 17                	mov    DWORD PTR [edi],edx
100029ad:	03 40 10             	add    eax,DWORD PTR [eax+0x10]
100029b0:	8a 08                	mov    cl,BYTE PTR [eax]
100029b2:	80 f9 ff             	cmp    cl,0xff
100029b5:	75 08                	jne    100029bf <_ssfn_c+0x13c>
100029b7:	81 c6 ff ff 00 00    	add    esi,0xffff
100029bd:	eb 2a                	jmp    100029e9 <_ssfn_c+0x166>
100029bf:	88 cb                	mov    bl,cl
100029c1:	83 e3 c0             	and    ebx,0xffffffc0
100029c4:	80 fb c0             	cmp    bl,0xc0
100029c7:	75 16                	jne    100029df <_ssfn_c+0x15c>
100029c9:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
100029cd:	c1 e1 08             	shl    ecx,0x8
100029d0:	83 c0 02             	add    eax,0x2
100029d3:	81 e1 00 3f 00 00    	and    ecx,0x3f00
100029d9:	09 d9                	or     ecx,ebx
100029db:	01 ce                	add    esi,ecx
100029dd:	eb 27                	jmp    10002a06 <_ssfn_c+0x183>
100029df:	80 fb 80             	cmp    bl,0x80
100029e2:	75 08                	jne    100029ec <_ssfn_c+0x169>
100029e4:	83 e1 3f             	and    ecx,0x3f
100029e7:	01 ce                	add    esi,ecx
100029e9:	40                   	inc    eax
100029ea:	eb 1a                	jmp    10002a06 <_ssfn_c+0x183>
100029ec:	39 f2                	cmp    edx,esi
100029ee:	74 34                	je     10002a24 <_ssfn_c+0x1a1>
100029f0:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
100029f4:	83 e1 40             	and    ecx,0x40
100029f7:	80 f9 01             	cmp    cl,0x1
100029fa:	19 c9                	sbb    ecx,ecx
100029fc:	83 c1 06             	add    ecx,0x6
100029ff:	0f af cb             	imul   ecx,ebx
10002a02:	8d 44 08 06          	lea    eax,[eax+ecx*1+0x6]
10002a06:	46                   	inc    esi
10002a07:	81 fe ff ff 10 00    	cmp    esi,0x10ffff
10002a0d:	76 a1                	jbe    100029b0 <_ssfn_c+0x12d>
10002a0f:	31 c0                	xor    eax,eax
10002a11:	eb 11                	jmp    10002a24 <_ssfn_c+0x1a1>
10002a13:	47                   	inc    edi
10002a14:	e9 bf fe ff ff       	jmp    100028d8 <_ssfn_c+0x55>
10002a19:	8d 97 00 f0 00 00    	lea    edx,[edi+0xf000]
10002a1f:	e9 77 ff ff ff       	jmp    1000299b <_ssfn_c+0x118>
10002a24:	5a                   	pop    edx
10002a25:	5b                   	pop    ebx
10002a26:	5e                   	pop    esi
10002a27:	5f                   	pop    edi
10002a28:	5d                   	pop    ebp
10002a29:	c3                   	ret    

10002a2a <_ssfn_l>:
10002a2a:	57                   	push   edi
10002a2b:	56                   	push   esi
10002a2c:	53                   	push   ebx
10002a2d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
10002a31:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10002a35:	3b 74 24 18          	cmp    esi,DWORD PTR [esp+0x18]
10002a39:	89 f2                	mov    edx,esi
10002a3b:	0f 9d c0             	setge  al
10002a3e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002a42:	c1 ea 1f             	shr    edx,0x1f
10002a45:	09 d0                	or     eax,edx
10002a47:	89 fa                	mov    edx,edi
10002a49:	c1 ea 1f             	shr    edx,0x1f
10002a4c:	08 d0                	or     al,dl
10002a4e:	0f 85 e9 00 00 00    	jne    10002b3d <_ssfn_l+0x113>
10002a54:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10002a58:	0f 8d df 00 00 00    	jge    10002b3d <_ssfn_l+0x113>
10002a5e:	8b 83 9c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf59c]
10002a64:	8d 57 08             	lea    edx,[edi+0x8]
10002a67:	83 c0 08             	add    eax,0x8
10002a6a:	c1 fa 04             	sar    edx,0x4
10002a6d:	c1 f8 04             	sar    eax,0x4
10002a70:	39 d0                	cmp    eax,edx
10002a72:	75 1a                	jne    10002a8e <_ssfn_l+0x64>
10002a74:	8b 83 a0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a0]
10002a7a:	8d 56 08             	lea    edx,[esi+0x8]
10002a7d:	83 c0 08             	add    eax,0x8
10002a80:	c1 fa 04             	sar    edx,0x4
10002a83:	c1 f8 04             	sar    eax,0x4
10002a86:	39 d0                	cmp    eax,edx
10002a88:	0f 84 af 00 00 00    	je     10002b3d <_ssfn_l+0x113>
10002a8e:	8b 83 80 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf580]
10002a94:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
10002a9a:	7f 3e                	jg     10002ada <_ssfn_l+0xb0>
10002a9c:	05 00 02 00 00       	add    eax,0x200
10002aa1:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
10002aa7:	52                   	push   edx
10002aa8:	01 c0                	add    eax,eax
10002aaa:	52                   	push   edx
10002aab:	50                   	push   eax
10002aac:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
10002ab2:	e8 fc ff ff ff       	call   10002ab3 <_ssfn_l+0x89>	10002ab3: R_386_PC32	realloc
10002ab7:	83 c4 10             	add    esp,0x10
10002aba:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
10002ac0:	85 c0                	test   eax,eax
10002ac2:	75 16                	jne    10002ada <_ssfn_l+0xb0>
10002ac4:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
10002ace:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
10002ad8:	eb 63                	jmp    10002b3d <_ssfn_l+0x113>
10002ada:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
10002ae1:	75 26                	jne    10002b09 <_ssfn_l+0xdf>
10002ae3:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002ae9:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
10002aef:	66 89 10             	mov    WORD PTR [eax],dx
10002af2:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002af8:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
10002afe:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
10002b02:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10002b09:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10002b0f:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002b15:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
10002b19:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
10002b1f:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10002b25:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
10002b2a:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
10002b30:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10002b37:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
10002b3d:	5b                   	pop    ebx
10002b3e:	5e                   	pop    esi
10002b3f:	5f                   	pop    edi
10002b40:	c3                   	ret    

10002b41 <_ssfn_b>:
10002b41:	55                   	push   ebp
10002b42:	57                   	push   edi
10002b43:	56                   	push   esi
10002b44:	53                   	push   ebx
10002b45:	83 ec 4c             	sub    esp,0x4c
10002b48:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10002b4c:	8b 6c 24 74          	mov    ebp,DWORD PTR [esp+0x74]
10002b50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002b54:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
10002b58:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002b5c:	8b 5c 24 7c          	mov    ebx,DWORD PTR [esp+0x7c]
10002b60:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002b64:	8b 8c 24 80 00 00 00 	mov    ecx,DWORD PTR [esp+0x80]
10002b6b:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10002b6f:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10002b73:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
10002b77:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10002b7b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10002b7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10002b83:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10002b8a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002b8e:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10002b95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002b99:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
10002ba0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10002ba4:	83 f8 03             	cmp    eax,0x3
10002ba7:	7e 34                	jle    10002bdd <_ssfn_b+0x9c>
10002ba9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002bad:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002bb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002bb5:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10002bb9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10002bbd:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10002bc1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002bc5:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10002bc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002bcd:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
10002bd1:	83 c4 4c             	add    esp,0x4c
10002bd4:	5b                   	pop    ebx
10002bd5:	5e                   	pop    esi
10002bd6:	5f                   	pop    edi
10002bd7:	5d                   	pop    ebp
10002bd8:	e9 4d fe ff ff       	jmp    10002a2a <_ssfn_l>
10002bdd:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10002be1:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10002be5:	75 0e                	jne    10002bf5 <_ssfn_b+0xb4>
10002be7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10002beb:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
10002bef:	0f 84 12 01 00 00    	je     10002d07 <_ssfn_b+0x1c6>
10002bf5:	bf 02 00 00 00       	mov    edi,0x2
10002bfa:	89 e8                	mov    eax,ebp
10002bfc:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
10002c00:	99                   	cdq    
10002c01:	f7 ff                	idiv   edi
10002c03:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
10002c07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002c0b:	89 f0                	mov    eax,esi
10002c0d:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
10002c11:	99                   	cdq    
10002c12:	f7 ff                	idiv   edi
10002c14:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10002c18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002c1c:	89 d8                	mov    eax,ebx
10002c1e:	29 e8                	sub    eax,ebp
10002c20:	99                   	cdq    
10002c21:	f7 ff                	idiv   edi
10002c23:	01 c5                	add    ebp,eax
10002c25:	89 c8                	mov    eax,ecx
10002c27:	29 f0                	sub    eax,esi
10002c29:	99                   	cdq    
10002c2a:	f7 ff                	idiv   edi
10002c2c:	01 c6                	add    esi,eax
10002c2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002c32:	29 d8                	sub    eax,ebx
10002c34:	99                   	cdq    
10002c35:	f7 ff                	idiv   edi
10002c37:	01 d8                	add    eax,ebx
10002c39:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002c3d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002c41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002c45:	29 c8                	sub    eax,ecx
10002c47:	99                   	cdq    
10002c48:	f7 ff                	idiv   edi
10002c4a:	01 c8                	add    eax,ecx
10002c4c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002c50:	89 e8                	mov    eax,ebp
10002c52:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
10002c56:	99                   	cdq    
10002c57:	f7 ff                	idiv   edi
10002c59:	8d 0c 18             	lea    ecx,[eax+ebx*1]
10002c5c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10002c60:	89 f0                	mov    eax,esi
10002c62:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10002c66:	99                   	cdq    
10002c67:	f7 ff                	idiv   edi
10002c69:	01 c3                	add    ebx,eax
10002c6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10002c6f:	29 e8                	sub    eax,ebp
10002c71:	99                   	cdq    
10002c72:	f7 ff                	idiv   edi
10002c74:	01 e8                	add    eax,ebp
10002c76:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10002c7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002c7e:	29 f0                	sub    eax,esi
10002c80:	99                   	cdq    
10002c81:	f7 ff                	idiv   edi
10002c83:	8d 2c 30             	lea    ebp,[eax+esi*1]
10002c86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002c8a:	29 c8                	sub    eax,ecx
10002c8c:	99                   	cdq    
10002c8d:	f7 ff                	idiv   edi
10002c8f:	8d 34 08             	lea    esi,[eax+ecx*1]
10002c92:	89 e8                	mov    eax,ebp
10002c94:	29 d8                	sub    eax,ebx
10002c96:	99                   	cdq    
10002c97:	f7 ff                	idiv   edi
10002c99:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
10002c9d:	01 d8                	add    eax,ebx
10002c9f:	8d 57 01             	lea    edx,[edi+0x1]
10002ca2:	52                   	push   edx
10002ca3:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002ca7:	50                   	push   eax
10002ca8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002cac:	56                   	push   esi
10002cad:	53                   	push   ebx
10002cae:	51                   	push   ecx
10002caf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002cb3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10002cb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10002cbb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10002cbf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cc3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cc7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002ccb:	e8 71 fe ff ff       	call   10002b41 <_ssfn_b>
10002cd0:	83 c4 30             	add    esp,0x30
10002cd3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10002cd7:	52                   	push   edx
10002cd8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10002cdc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10002ce0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10002ce4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10002ce8:	55                   	push   ebp
10002ce9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
10002ced:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10002cf1:	50                   	push   eax
10002cf2:	56                   	push   esi
10002cf3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cf7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cfb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10002cff:	e8 3d fe ff ff       	call   10002b41 <_ssfn_b>
10002d04:	83 c4 30             	add    esp,0x30
10002d07:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
10002d0c:	0f 85 97 fe ff ff    	jne    10002ba9 <_ssfn_b+0x68>
10002d12:	83 c4 4c             	add    esp,0x4c
10002d15:	5b                   	pop    ebx
10002d16:	5e                   	pop    esi
10002d17:	5f                   	pop    edi
10002d18:	5d                   	pop    ebp
10002d19:	c3                   	ret    

10002d1a <_ssfn_fc>:
10002d1a:	55                   	push   ebp
10002d1b:	57                   	push   edi
10002d1c:	56                   	push   esi
10002d1d:	53                   	push   ebx
10002d1e:	83 ec 0c             	sub    esp,0xc
10002d21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002d25:	85 c0                	test   eax,eax
10002d27:	74 75                	je     10002d9e <_ssfn_fc+0x84>
10002d29:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
10002d2f:	8d a8 6c f5 00 00    	lea    ebp,[eax+0xf56c]
10002d35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
10002d38:	74 5d                	je     10002d97 <_ssfn_fc+0x7d>
10002d3a:	31 f6                	xor    esi,esi
10002d3c:	8b 03                	mov    eax,DWORD PTR [ebx]
10002d3e:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
10002d42:	74 35                	je     10002d79 <_ssfn_fc+0x5f>
10002d44:	31 ff                	xor    edi,edi
10002d46:	8b 03                	mov    eax,DWORD PTR [ebx]
10002d48:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
10002d4b:	8b 04 38             	mov    eax,DWORD PTR [eax+edi*1]
10002d4e:	85 c0                	test   eax,eax
10002d50:	74 0c                	je     10002d5e <_ssfn_fc+0x44>
10002d52:	83 ec 0c             	sub    esp,0xc
10002d55:	50                   	push   eax
10002d56:	e8 fc ff ff ff       	call   10002d57 <_ssfn_fc+0x3d>	10002d57: R_386_PC32	free
10002d5b:	83 c4 10             	add    esp,0x10
10002d5e:	83 c7 04             	add    edi,0x4
10002d61:	81 ff 00 04 00 00    	cmp    edi,0x400
10002d67:	75 dd                	jne    10002d46 <_ssfn_fc+0x2c>
10002d69:	83 ec 0c             	sub    esp,0xc
10002d6c:	8b 03                	mov    eax,DWORD PTR [ebx]
10002d6e:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10002d71:	e8 fc ff ff ff       	call   10002d72 <_ssfn_fc+0x58>	10002d72: R_386_PC32	free
10002d76:	83 c4 10             	add    esp,0x10
10002d79:	83 c6 04             	add    esi,0x4
10002d7c:	81 fe 00 04 00 00    	cmp    esi,0x400
10002d82:	75 b8                	jne    10002d3c <_ssfn_fc+0x22>
10002d84:	83 ec 0c             	sub    esp,0xc
10002d87:	ff 33                	push   DWORD PTR [ebx]
10002d89:	e8 fc ff ff ff       	call   10002d8a <_ssfn_fc+0x70>	10002d8a: R_386_PC32	free
10002d8e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
10002d94:	83 c4 10             	add    esp,0x10
10002d97:	83 c3 04             	add    ebx,0x4
10002d9a:	39 eb                	cmp    ebx,ebp
10002d9c:	75 97                	jne    10002d35 <_ssfn_fc+0x1b>
10002d9e:	83 c4 0c             	add    esp,0xc
10002da1:	5b                   	pop    ebx
10002da2:	5e                   	pop    esi
10002da3:	5f                   	pop    edi
10002da4:	5d                   	pop    ebp
10002da5:	c3                   	ret    

10002da6 <_ssfn__bitreverse16>:
10002da6:	89 c2                	mov    edx,eax
10002da8:	01 c0                	add    eax,eax
10002daa:	d1 fa                	sar    edx,1
10002dac:	25 aa aa 00 00       	and    eax,0xaaaa
10002db1:	81 e2 55 55 00 00    	and    edx,0x5555
10002db7:	09 c2                	or     edx,eax
10002db9:	89 d0                	mov    eax,edx
10002dbb:	c1 e2 02             	shl    edx,0x2
10002dbe:	c1 f8 02             	sar    eax,0x2
10002dc1:	81 e2 cc cc 00 00    	and    edx,0xcccc
10002dc7:	25 33 33 00 00       	and    eax,0x3333
10002dcc:	09 d0                	or     eax,edx
10002dce:	89 c2                	mov    edx,eax
10002dd0:	c1 e0 04             	shl    eax,0x4
10002dd3:	c1 fa 04             	sar    edx,0x4
10002dd6:	25 f0 f0 00 00       	and    eax,0xf0f0
10002ddb:	81 e2 0f 0f 00 00    	and    edx,0xf0f
10002de1:	09 c2                	or     edx,eax
10002de3:	89 d1                	mov    ecx,edx
10002de5:	c1 e2 08             	shl    edx,0x8
10002de8:	c1 f9 08             	sar    ecx,0x8
10002deb:	0f b7 c2             	movzx  eax,dx
10002dee:	09 c8                	or     eax,ecx
10002df0:	c3                   	ret    

10002df1 <_ssfn__zbuild_huffman>:
10002df1:	55                   	push   ebp
10002df2:	b9 11 00 00 00       	mov    ecx,0x11
10002df7:	57                   	push   edi
10002df8:	56                   	push   esi
10002df9:	53                   	push   ebx
10002dfa:	81 ec 98 00 00 00    	sub    esp,0x98
10002e00:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
10002e07:	8d 54 24 54          	lea    edx,[esp+0x54]
10002e0b:	89 04 24             	mov    DWORD PTR [esp],eax
10002e0e:	89 d7                	mov    edi,edx
10002e10:	31 c0                	xor    eax,eax
10002e12:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10002e14:	b9 00 01 00 00       	mov    ecx,0x100
10002e19:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10002e1c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10002e1e:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
10002e25:	7d 12                	jge    10002e39 <_ssfn__zbuild_huffman+0x48>
10002e27:	8b 9c 24 b0 00 00 00 	mov    ebx,DWORD PTR [esp+0xb0]
10002e2e:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
10002e32:	40                   	inc    eax
10002e33:	ff 44 8c 54          	inc    DWORD PTR [esp+ecx*4+0x54]
10002e37:	eb e5                	jmp    10002e1e <_ssfn__zbuild_huffman+0x2d>
10002e39:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
10002e41:	b9 01 00 00 00       	mov    ecx,0x1
10002e46:	b8 01 00 00 00       	mov    eax,0x1
10002e4b:	89 c6                	mov    esi,eax
10002e4d:	d3 e6                	shl    esi,cl
10002e4f:	39 34 8a             	cmp    DWORD PTR [edx+ecx*4],esi
10002e52:	0f 8f 0c 01 00 00    	jg     10002f64 <_ssfn__zbuild_huffman+0x173>
10002e58:	41                   	inc    ecx
10002e59:	83 f9 10             	cmp    ecx,0x10
10002e5c:	75 ed                	jne    10002e4b <_ssfn__zbuild_huffman+0x5a>
10002e5e:	31 d2                	xor    edx,edx
10002e60:	31 f6                	xor    esi,esi
10002e62:	b8 01 00 00 00       	mov    eax,0x1
10002e67:	bd 01 00 00 00       	mov    ebp,0x1
10002e6c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
10002e6f:	89 54 84 14          	mov    DWORD PTR [esp+eax*4+0x14],edx
10002e73:	66 89 94 47 00 04 00 00 	mov    WORD PTR [edi+eax*2+0x400],dx
10002e7b:	66 89 b4 47 64 04 00 00 	mov    WORD PTR [edi+eax*2+0x464],si
10002e83:	8b 7c 84 54          	mov    edi,DWORD PTR [esp+eax*4+0x54]
10002e87:	01 fa                	add    edx,edi
10002e89:	85 ff                	test   edi,edi
10002e8b:	74 0e                	je     10002e9b <_ssfn__zbuild_huffman+0xaa>
10002e8d:	89 eb                	mov    ebx,ebp
10002e8f:	88 c1                	mov    cl,al
10002e91:	d3 e3                	shl    ebx,cl
10002e93:	39 d3                	cmp    ebx,edx
10002e95:	0f 8c c9 00 00 00    	jl     10002f64 <_ssfn__zbuild_huffman+0x173>
10002e9b:	89 d3                	mov    ebx,edx
10002e9d:	b9 10 00 00 00       	mov    ecx,0x10
10002ea2:	01 d2                	add    edx,edx
10002ea4:	29 c1                	sub    ecx,eax
10002ea6:	01 fe                	add    esi,edi
10002ea8:	d3 e3                	shl    ebx,cl
10002eaa:	89 d9                	mov    ecx,ebx
10002eac:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002eaf:	89 8c 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],ecx
10002eb6:	40                   	inc    eax
10002eb7:	83 f8 10             	cmp    eax,0x10
10002eba:	75 b0                	jne    10002e6c <_ssfn__zbuild_huffman+0x7b>
10002ebc:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
10002ec6:	31 ff                	xor    edi,edi
10002ec8:	3b bc 24 b4 00 00 00 	cmp    edi,DWORD PTR [esp+0xb4]
10002ecf:	0f 8d 93 00 00 00    	jge    10002f68 <_ssfn__zbuild_huffman+0x177>
10002ed5:	8b 84 24 b0 00 00 00 	mov    eax,DWORD PTR [esp+0xb0]
10002edc:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10002ee0:	89 f2                	mov    edx,esi
10002ee2:	85 f6                	test   esi,esi
10002ee4:	74 78                	je     10002f5e <_ssfn__zbuild_huffman+0x16d>
10002ee6:	8b 6c b4 14          	mov    ebp,DWORD PTR [esp+esi*4+0x14]
10002eea:	8d 0c 36             	lea    ecx,[esi+esi*1]
10002eed:	89 eb                	mov    ebx,ebp
10002eef:	03 0c 24             	add    ecx,DWORD PTR [esp]
10002ef2:	0f b7 81 00 04 00 00 	movzx  eax,WORD PTR [ecx+0x400]
10002ef9:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10002f00:	29 c3                	sub    ebx,eax
10002f02:	89 d8                	mov    eax,ebx
10002f04:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002f07:	01 c8                	add    eax,ecx
10002f09:	83 fe 09             	cmp    esi,0x9
10002f0c:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
10002f13:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
10002f1b:	7f 3c                	jg     10002f59 <_ssfn__zbuild_huffman+0x168>
10002f1d:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
10002f21:	89 e8                	mov    eax,ebp
10002f23:	bb 01 00 00 00       	mov    ebx,0x1
10002f28:	e8 79 fe ff ff       	call   10002da6 <_ssfn__bitreverse16>
10002f2d:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
10002f31:	b9 10 00 00 00       	mov    ecx,0x10
10002f36:	29 f1                	sub    ecx,esi
10002f38:	d3 f8                	sar    eax,cl
10002f3a:	88 d1                	mov    cl,dl
10002f3c:	89 f2                	mov    edx,esi
10002f3e:	d3 e3                	shl    ebx,cl
10002f40:	c1 e2 09             	shl    edx,0x9
10002f43:	89 d9                	mov    ecx,ebx
10002f45:	09 fa                	or     edx,edi
10002f47:	3d ff 01 00 00       	cmp    eax,0x1ff
10002f4c:	7f 0b                	jg     10002f59 <_ssfn__zbuild_huffman+0x168>
10002f4e:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
10002f51:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
10002f55:	01 c8                	add    eax,ecx
10002f57:	eb ee                	jmp    10002f47 <_ssfn__zbuild_huffman+0x156>
10002f59:	45                   	inc    ebp
10002f5a:	89 6c b4 14          	mov    DWORD PTR [esp+esi*4+0x14],ebp
10002f5e:	47                   	inc    edi
10002f5f:	e9 64 ff ff ff       	jmp    10002ec8 <_ssfn__zbuild_huffman+0xd7>
10002f64:	31 c0                	xor    eax,eax
10002f66:	eb 05                	jmp    10002f6d <_ssfn__zbuild_huffman+0x17c>
10002f68:	b8 01 00 00 00       	mov    eax,0x1
10002f6d:	81 c4 98 00 00 00    	add    esp,0x98
10002f73:	5b                   	pop    ebx
10002f74:	5e                   	pop    esi
10002f75:	5f                   	pop    edi
10002f76:	5d                   	pop    ebp
10002f77:	c3                   	ret    

10002f78 <_ssfn__fill_bits>:
10002f78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10002f7c:	8b 10                	mov    edx,DWORD PTR [eax]
10002f7e:	8d 4a 01             	lea    ecx,[edx+0x1]
10002f81:	89 08                	mov    DWORD PTR [eax],ecx
10002f83:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
10002f86:	0f b6 12             	movzx  edx,BYTE PTR [edx]
10002f89:	d3 e2                	shl    edx,cl
10002f8b:	83 c1 08             	add    ecx,0x8
10002f8e:	09 50 08             	or     DWORD PTR [eax+0x8],edx
10002f91:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10002f94:	83 f9 18             	cmp    ecx,0x18
10002f97:	7e e3                	jle    10002f7c <_ssfn__fill_bits+0x4>
10002f99:	c3                   	ret    

10002f9a <_ssfn__zreceive>:
10002f9a:	56                   	push   esi
10002f9b:	89 d1                	mov    ecx,edx
10002f9d:	53                   	push   ebx
10002f9e:	89 c6                	mov    esi,eax
10002fa0:	53                   	push   ebx
10002fa1:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
10002fa4:	7d 0d                	jge    10002fb3 <_ssfn__zreceive+0x19>
10002fa6:	89 14 24             	mov    DWORD PTR [esp],edx
10002fa9:	50                   	push   eax
10002faa:	e8 c9 ff ff ff       	call   10002f78 <_ssfn__fill_bits>
10002faf:	59                   	pop    ecx
10002fb0:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
10002fb3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
10002fb6:	29 4e 04             	sub    DWORD PTR [esi+0x4],ecx
10002fb9:	89 d0                	mov    eax,edx
10002fbb:	bb 01 00 00 00       	mov    ebx,0x1
10002fc0:	d3 e8                	shr    eax,cl
10002fc2:	d3 e3                	shl    ebx,cl
10002fc4:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
10002fc7:	8d 43 ff             	lea    eax,[ebx-0x1]
10002fca:	21 d0                	and    eax,edx
10002fcc:	5a                   	pop    edx
10002fcd:	5b                   	pop    ebx
10002fce:	5e                   	pop    esi
10002fcf:	c3                   	ret    

10002fd0 <_ssfn__zhuffman_decode_slowpath>:
10002fd0:	55                   	push   ebp
10002fd1:	57                   	push   edi
10002fd2:	56                   	push   esi
10002fd3:	53                   	push   ebx
10002fd4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10002fd8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10002fdc:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
10002fdf:	89 f8                	mov    eax,edi
10002fe1:	e8 c0 fd ff ff       	call   10002da6 <_ssfn__bitreverse16>
10002fe6:	ba 0a 00 00 00       	mov    edx,0xa
10002feb:	39 84 96 20 04 00 00 	cmp    DWORD PTR [esi+edx*4+0x420],eax
10002ff2:	7f 03                	jg     10002ff7 <_ssfn__zhuffman_decode_slowpath+0x27>
10002ff4:	42                   	inc    edx
10002ff5:	eb f4                	jmp    10002feb <_ssfn__zhuffman_decode_slowpath+0x1b>
10002ff7:	83 c9 ff             	or     ecx,0xffffffff
10002ffa:	83 fa 10             	cmp    edx,0x10
10002ffd:	74 34                	je     10003033 <_ssfn__zhuffman_decode_slowpath+0x63>
10002fff:	8d 2c 12             	lea    ebp,[edx+edx*1]
10003002:	b9 10 00 00 00       	mov    ecx,0x10
10003007:	01 f5                	add    ebp,esi
10003009:	29 d1                	sub    ecx,edx
1000300b:	d3 f8                	sar    eax,cl
1000300d:	0f b7 8d 00 04 00 00 	movzx  ecx,WORD PTR [ebp+0x400]
10003014:	0f b7 ad 64 04 00 00 	movzx  ebp,WORD PTR [ebp+0x464]
1000301b:	29 c8                	sub    eax,ecx
1000301d:	29 53 04             	sub    DWORD PTR [ebx+0x4],edx
10003020:	88 d1                	mov    cl,dl
10003022:	8d 84 28 d0 02 00 00 	lea    eax,[eax+ebp*1+0x2d0]
10003029:	d3 ef                	shr    edi,cl
1000302b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
1000302e:	0f b7 4c 46 04       	movzx  ecx,WORD PTR [esi+eax*2+0x4]
10003033:	5b                   	pop    ebx
10003034:	89 c8                	mov    eax,ecx
10003036:	5e                   	pop    esi
10003037:	5f                   	pop    edi
10003038:	5d                   	pop    ebp
10003039:	c3                   	ret    

1000303a <_ssfn__zhuffman_decode>:
1000303a:	57                   	push   edi
1000303b:	89 d7                	mov    edi,edx
1000303d:	56                   	push   esi
1000303e:	53                   	push   ebx
1000303f:	89 c3                	mov    ebx,eax
10003041:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
10003045:	7f 07                	jg     1000304e <_ssfn__zhuffman_decode+0x14>
10003047:	50                   	push   eax
10003048:	e8 2b ff ff ff       	call   10002f78 <_ssfn__fill_bits>
1000304d:	5e                   	pop    esi
1000304e:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
10003051:	89 f0                	mov    eax,esi
10003053:	25 ff 01 00 00       	and    eax,0x1ff
10003058:	0f b7 0c 47          	movzx  ecx,WORD PTR [edi+eax*2]
1000305c:	89 c8                	mov    eax,ecx
1000305e:	85 c9                	test   ecx,ecx
10003060:	74 12                	je     10003074 <_ssfn__zhuffman_decode+0x3a>
10003062:	c1 f9 09             	sar    ecx,0x9
10003065:	25 ff 01 00 00       	and    eax,0x1ff
1000306a:	d3 ee                	shr    esi,cl
1000306c:	29 4b 04             	sub    DWORD PTR [ebx+0x4],ecx
1000306f:	89 73 08             	mov    DWORD PTR [ebx+0x8],esi
10003072:	eb 09                	jmp    1000307d <_ssfn__zhuffman_decode+0x43>
10003074:	57                   	push   edi
10003075:	53                   	push   ebx
10003076:	e8 55 ff ff ff       	call   10002fd0 <_ssfn__zhuffman_decode_slowpath>
1000307b:	5a                   	pop    edx
1000307c:	59                   	pop    ecx
1000307d:	5b                   	pop    ebx
1000307e:	5e                   	pop    esi
1000307f:	5f                   	pop    edi
10003080:	c3                   	ret    

10003081 <_ssfn__zexpand>:
10003081:	55                   	push   ebp
10003082:	57                   	push   edi
10003083:	56                   	push   esi
10003084:	53                   	push   ebx
10003085:	83 ec 0c             	sub    esp,0xc
10003088:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
1000308c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10003090:	8b 5e 10             	mov    ebx,DWORD PTR [esi+0x10]
10003093:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
10003096:	89 7e 0c             	mov    DWORD PTR [esi+0xc],edi
10003099:	29 d8                	sub    eax,ebx
1000309b:	83 f8 08             	cmp    eax,0x8
1000309e:	74 04                	je     100030a4 <_ssfn__zexpand+0x23>
100030a0:	31 c0                	xor    eax,eax
100030a2:	eb 38                	jmp    100030dc <_ssfn__zexpand+0x5b>
100030a4:	80 3b 53             	cmp    BYTE PTR [ebx],0x53
100030a7:	75 f7                	jne    100030a0 <_ssfn__zexpand+0x1f>
100030a9:	80 7b 01 46          	cmp    BYTE PTR [ebx+0x1],0x46
100030ad:	75 f1                	jne    100030a0 <_ssfn__zexpand+0x1f>
100030af:	80 7b 02 4e          	cmp    BYTE PTR [ebx+0x2],0x4e
100030b3:	75 eb                	jne    100030a0 <_ssfn__zexpand+0x1f>
100030b5:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
100030b8:	50                   	push   eax
100030b9:	50                   	push   eax
100030ba:	55                   	push   ebp
100030bb:	53                   	push   ebx
100030bc:	e8 fc ff ff ff       	call   100030bd <_ssfn__zexpand+0x3c>	100030bd: R_386_PC32	realloc
100030c1:	83 c4 10             	add    esp,0x10
100030c4:	85 c0                	test   eax,eax
100030c6:	74 d8                	je     100030a0 <_ssfn__zexpand+0x1f>
100030c8:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
100030cb:	29 df                	sub    edi,ebx
100030cd:	01 c7                	add    edi,eax
100030cf:	01 e8                	add    eax,ebp
100030d1:	89 7e 0c             	mov    DWORD PTR [esi+0xc],edi
100030d4:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
100030d7:	b8 01 00 00 00       	mov    eax,0x1
100030dc:	83 c4 0c             	add    esp,0xc
100030df:	5b                   	pop    ebx
100030e0:	5e                   	pop    esi
100030e1:	5f                   	pop    edi
100030e2:	5d                   	pop    ebp
100030e3:	c3                   	ret    

100030e4 <_ssfn__parse_huffman_block>:
100030e4:	55                   	push   ebp
100030e5:	57                   	push   edi
100030e6:	56                   	push   esi
100030e7:	53                   	push   ebx
100030e8:	83 ec 1c             	sub    esp,0x1c
100030eb:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100030ef:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
100030f2:	8d 53 18             	lea    edx,[ebx+0x18]
100030f5:	89 d8                	mov    eax,ebx
100030f7:	e8 3e ff ff ff       	call   1000303a <_ssfn__zhuffman_decode>
100030fc:	89 c5                	mov    ebp,eax
100030fe:	3d ff 00 00 00       	cmp    eax,0xff
10003103:	7f 2c                	jg     10003131 <_ssfn__parse_huffman_block+0x4d>
10003105:	85 c0                	test   eax,eax
10003107:	0f 88 ef 00 00 00    	js     100031fc <_ssfn__parse_huffman_block+0x118>
1000310d:	39 7b 14             	cmp    DWORD PTR [ebx+0x14],edi
10003110:	77 17                	ja     10003129 <_ssfn__parse_huffman_block+0x45>
10003112:	52                   	push   edx
10003113:	52                   	push   edx
10003114:	57                   	push   edi
10003115:	53                   	push   ebx
10003116:	e8 66 ff ff ff       	call   10003081 <_ssfn__zexpand>
1000311b:	83 c4 10             	add    esp,0x10
1000311e:	85 c0                	test   eax,eax
10003120:	0f 84 d6 00 00 00    	je     100031fc <_ssfn__parse_huffman_block+0x118>
10003126:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
10003129:	89 e8                	mov    eax,ebp
1000312b:	47                   	inc    edi
1000312c:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
1000312f:	eb c1                	jmp    100030f2 <_ssfn__parse_huffman_block+0xe>
10003131:	3d 00 01 00 00       	cmp    eax,0x100
10003136:	75 0d                	jne    10003145 <_ssfn__parse_huffman_block+0x61>
10003138:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
1000313b:	b8 01 00 00 00       	mov    eax,0x1
10003140:	e9 b9 00 00 00       	jmp    100031fe <_ssfn__parse_huffman_block+0x11a>
10003145:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
1000314b:	8b 14 85 00 b0 00 10 	mov    edx,DWORD PTR [eax*4+0x1000b000]	1000314e: R_386_32	.data
10003152:	8b 2c 85 80 af 00 10 	mov    ebp,DWORD PTR [eax*4+0x1000af80]	10003155: R_386_32	.data
10003159:	85 d2                	test   edx,edx
1000315b:	74 09                	je     10003166 <_ssfn__parse_huffman_block+0x82>
1000315d:	89 d8                	mov    eax,ebx
1000315f:	e8 36 fe ff ff       	call   10002f9a <_ssfn__zreceive>
10003164:	01 c5                	add    ebp,eax
10003166:	8d 93 fc 07 00 00    	lea    edx,[ebx+0x7fc]
1000316c:	89 d8                	mov    eax,ebx
1000316e:	e8 c7 fe ff ff       	call   1000303a <_ssfn__zhuffman_decode>
10003173:	85 c0                	test   eax,eax
10003175:	0f 88 81 00 00 00    	js     100031fc <_ssfn__parse_huffman_block+0x118>
1000317b:	8b 0c 85 80 b0 00 10 	mov    ecx,DWORD PTR [eax*4+0x1000b080]	1000317e: R_386_32	.data
10003182:	8b 14 85 00 b1 00 10 	mov    edx,DWORD PTR [eax*4+0x1000b100]	10003185: R_386_32	.data
10003189:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
1000318d:	85 d2                	test   edx,edx
1000318f:	74 0b                	je     1000319c <_ssfn__parse_huffman_block+0xb8>
10003191:	89 d8                	mov    eax,ebx
10003193:	e8 02 fe ff ff       	call   10002f9a <_ssfn__zreceive>
10003198:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
1000319c:	89 f8                	mov    eax,edi
1000319e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
100031a1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
100031a5:	7c 55                	jl     100031fc <_ssfn__parse_huffman_block+0x118>
100031a7:	8d 04 2f             	lea    eax,[edi+ebp*1]
100031aa:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
100031ad:	73 13                	jae    100031c2 <_ssfn__parse_huffman_block+0xde>
100031af:	50                   	push   eax
100031b0:	50                   	push   eax
100031b1:	57                   	push   edi
100031b2:	53                   	push   ebx
100031b3:	e8 c9 fe ff ff       	call   10003081 <_ssfn__zexpand>
100031b8:	83 c4 10             	add    esp,0x10
100031bb:	85 c0                	test   eax,eax
100031bd:	74 3d                	je     100031fc <_ssfn__parse_huffman_block+0x118>
100031bf:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
100031c2:	89 fe                	mov    esi,edi
100031c4:	2b 74 24 0c          	sub    esi,DWORD PTR [esp+0xc]
100031c8:	83 7c 24 0c 01       	cmp    DWORD PTR [esp+0xc],0x1
100031cd:	75 19                	jne    100031e8 <_ssfn__parse_huffman_block+0x104>
100031cf:	85 ed                	test   ebp,ebp
100031d1:	0f 84 1b ff ff ff    	je     100030f2 <_ssfn__parse_huffman_block+0xe>
100031d7:	8a 06                	mov    al,BYTE PTR [esi]
100031d9:	01 fd                	add    ebp,edi
100031db:	47                   	inc    edi
100031dc:	88 47 ff             	mov    BYTE PTR [edi-0x1],al
100031df:	39 ef                	cmp    edi,ebp
100031e1:	75 f8                	jne    100031db <_ssfn__parse_huffman_block+0xf7>
100031e3:	e9 0a ff ff ff       	jmp    100030f2 <_ssfn__parse_huffman_block+0xe>
100031e8:	85 ed                	test   ebp,ebp
100031ea:	0f 84 02 ff ff ff    	je     100030f2 <_ssfn__parse_huffman_block+0xe>
100031f0:	01 fd                	add    ebp,edi
100031f2:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
100031f3:	39 ef                	cmp    edi,ebp
100031f5:	75 fb                	jne    100031f2 <_ssfn__parse_huffman_block+0x10e>
100031f7:	e9 f6 fe ff ff       	jmp    100030f2 <_ssfn__parse_huffman_block+0xe>
100031fc:	31 c0                	xor    eax,eax
100031fe:	83 c4 1c             	add    esp,0x1c
10003201:	5b                   	pop    ebx
10003202:	5e                   	pop    esi
10003203:	5f                   	pop    edi
10003204:	5d                   	pop    ebp
10003205:	c3                   	ret    

10003206 <_ssfn__compute_huffman_codes>:
10003206:	55                   	push   ebp
10003207:	ba 05 00 00 00       	mov    edx,0x5
1000320c:	57                   	push   edi
1000320d:	56                   	push   esi
1000320e:	53                   	push   ebx
1000320f:	81 ec c8 09 00 00    	sub    esp,0x9c8
10003215:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
1000321c:	8d 5c 24 0a          	lea    ebx,[esp+0xa]
10003220:	89 e8                	mov    eax,ebp
10003222:	89 df                	mov    edi,ebx
10003224:	e8 71 fd ff ff       	call   10002f9a <_ssfn__zreceive>
10003229:	ba 05 00 00 00       	mov    edx,0x5
1000322e:	89 c6                	mov    esi,eax
10003230:	89 e8                	mov    eax,ebp
10003232:	e8 63 fd ff ff       	call   10002f9a <_ssfn__zreceive>
10003237:	ba 04 00 00 00       	mov    edx,0x4
1000323c:	89 04 24             	mov    DWORD PTR [esp],eax
1000323f:	89 e8                	mov    eax,ebp
10003241:	e8 54 fd ff ff       	call   10002f9a <_ssfn__zreceive>
10003246:	b9 13 00 00 00       	mov    ecx,0x13
1000324b:	83 c0 04             	add    eax,0x4
1000324e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003252:	31 c0                	xor    eax,eax
10003254:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003256:	31 ff                	xor    edi,edi
10003258:	3b 7c 24 04          	cmp    edi,DWORD PTR [esp+0x4]
1000325c:	7d 1a                	jge    10003278 <_ssfn__compute_huffman_codes+0x72>
1000325e:	ba 03 00 00 00       	mov    edx,0x3
10003263:	89 e8                	mov    eax,ebp
10003265:	47                   	inc    edi
10003266:	e8 2f fd ff ff       	call   10002f9a <_ssfn__zreceive>
1000326b:	0f b6 97 7f b1 00 10 	movzx  edx,BYTE PTR [edi+0x1000b17f]	1000326e: R_386_32	.data
10003272:	88 44 14 0a          	mov    BYTE PTR [esp+edx*1+0xa],al
10003276:	eb e0                	jmp    10003258 <_ssfn__compute_huffman_codes+0x52>
10003278:	6a 13                	push   0x13
1000327a:	53                   	push   ebx
1000327b:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10003282:	50                   	push   eax
10003283:	e8 69 fb ff ff       	call   10002df1 <_ssfn__zbuild_huffman>
10003288:	83 c4 0c             	add    esp,0xc
1000328b:	85 c0                	test   eax,eax
1000328d:	75 07                	jne    10003296 <_ssfn__compute_huffman_codes+0x90>
1000328f:	31 c0                	xor    eax,eax
10003291:	e9 dd 00 00 00       	jmp    10003373 <_ssfn__compute_huffman_codes+0x16d>
10003296:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003299:	81 c6 01 01 00 00    	add    esi,0x101
1000329f:	40                   	inc    eax
100032a0:	31 db                	xor    ebx,ebx
100032a2:	89 04 24             	mov    DWORD PTR [esp],eax
100032a5:	01 f0                	add    eax,esi
100032a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100032ab:	3b 5c 24 04          	cmp    ebx,DWORD PTR [esp+0x4]
100032af:	0f 8d 81 00 00 00    	jge    10003336 <_ssfn__compute_huffman_codes+0x130>
100032b5:	8d 94 24 e4 01 00 00 	lea    edx,[esp+0x1e4]
100032bc:	89 e8                	mov    eax,ebp
100032be:	e8 77 fd ff ff       	call   1000303a <_ssfn__zhuffman_decode>
100032c3:	83 f8 12             	cmp    eax,0x12
100032c6:	77 c7                	ja     1000328f <_ssfn__compute_huffman_codes+0x89>
100032c8:	83 f8 0f             	cmp    eax,0xf
100032cb:	7f 07                	jg     100032d4 <_ssfn__compute_huffman_codes+0xce>
100032cd:	88 44 1c 1d          	mov    BYTE PTR [esp+ebx*1+0x1d],al
100032d1:	43                   	inc    ebx
100032d2:	eb d7                	jmp    100032ab <_ssfn__compute_huffman_codes+0xa5>
100032d4:	83 f8 10             	cmp    eax,0x10
100032d7:	75 19                	jne    100032f2 <_ssfn__compute_huffman_codes+0xec>
100032d9:	ba 02 00 00 00       	mov    edx,0x2
100032de:	89 e8                	mov    eax,ebp
100032e0:	e8 b5 fc ff ff       	call   10002f9a <_ssfn__zreceive>
100032e5:	85 db                	test   ebx,ebx
100032e7:	8d 50 03             	lea    edx,[eax+0x3]
100032ea:	74 a3                	je     1000328f <_ssfn__compute_huffman_codes+0x89>
100032ec:	8a 44 1c 1c          	mov    al,BYTE PTR [esp+ebx*1+0x1c]
100032f0:	eb 27                	jmp    10003319 <_ssfn__compute_huffman_codes+0x113>
100032f2:	83 f8 11             	cmp    eax,0x11
100032f5:	75 11                	jne    10003308 <_ssfn__compute_huffman_codes+0x102>
100032f7:	ba 03 00 00 00       	mov    edx,0x3
100032fc:	89 e8                	mov    eax,ebp
100032fe:	e8 97 fc ff ff       	call   10002f9a <_ssfn__zreceive>
10003303:	8d 50 03             	lea    edx,[eax+0x3]
10003306:	eb 0f                	jmp    10003317 <_ssfn__compute_huffman_codes+0x111>
10003308:	ba 07 00 00 00       	mov    edx,0x7
1000330d:	89 e8                	mov    eax,ebp
1000330f:	e8 86 fc ff ff       	call   10002f9a <_ssfn__zreceive>
10003314:	8d 50 0b             	lea    edx,[eax+0xb]
10003317:	31 c0                	xor    eax,eax
10003319:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
1000331d:	29 d9                	sub    ecx,ebx
1000331f:	39 d1                	cmp    ecx,edx
10003321:	0f 8c 68 ff ff ff    	jl     1000328f <_ssfn__compute_huffman_codes+0x89>
10003327:	8d 7c 1c 1d          	lea    edi,[esp+ebx*1+0x1d]
1000332b:	89 d1                	mov    ecx,edx
1000332d:	01 d3                	add    ebx,edx
1000332f:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003331:	e9 75 ff ff ff       	jmp    100032ab <_ssfn__compute_huffman_codes+0xa5>
10003336:	0f 85 53 ff ff ff    	jne    1000328f <_ssfn__compute_huffman_codes+0x89>
1000333c:	56                   	push   esi
1000333d:	8d 45 18             	lea    eax,[ebp+0x18]
10003340:	8d 5c 24 21          	lea    ebx,[esp+0x21]
10003344:	53                   	push   ebx
10003345:	50                   	push   eax
10003346:	e8 a6 fa ff ff       	call   10002df1 <_ssfn__zbuild_huffman>
1000334b:	83 c4 0c             	add    esp,0xc
1000334e:	85 c0                	test   eax,eax
10003350:	0f 84 39 ff ff ff    	je     1000328f <_ssfn__compute_huffman_codes+0x89>
10003356:	ff 34 24             	push   DWORD PTR [esp]
10003359:	01 de                	add    esi,ebx
1000335b:	8d 85 fc 07 00 00    	lea    eax,[ebp+0x7fc]
10003361:	56                   	push   esi
10003362:	50                   	push   eax
10003363:	e8 89 fa ff ff       	call   10002df1 <_ssfn__zbuild_huffman>
10003368:	83 c4 0c             	add    esp,0xc
1000336b:	85 c0                	test   eax,eax
1000336d:	0f 95 c0             	setne  al
10003370:	0f b6 c0             	movzx  eax,al
10003373:	81 c4 c8 09 00 00    	add    esp,0x9c8
10003379:	5b                   	pop    ebx
1000337a:	5e                   	pop    esi
1000337b:	5f                   	pop    edi
1000337c:	5d                   	pop    ebp
1000337d:	c3                   	ret    

1000337e <_ssfn__init_zdefaults>:
1000337e:	31 c0                	xor    eax,eax
10003380:	c6 80 e0 ff 00 10 08 	mov    BYTE PTR [eax+0x1000ffe0],0x8	10003382: R_386_32	.bss
10003387:	40                   	inc    eax
10003388:	3d 90 00 00 00       	cmp    eax,0x90
1000338d:	75 f1                	jne    10003380 <_ssfn__init_zdefaults+0x2>
1000338f:	c6 80 e0 ff 00 10 09 	mov    BYTE PTR [eax+0x1000ffe0],0x9	10003391: R_386_32	.bss
10003396:	40                   	inc    eax
10003397:	3d 00 01 00 00       	cmp    eax,0x100
1000339c:	75 f1                	jne    1000338f <_ssfn__init_zdefaults+0x11>
1000339e:	c6 80 e0 ff 00 10 07 	mov    BYTE PTR [eax+0x1000ffe0],0x7	100033a0: R_386_32	.bss
100033a5:	40                   	inc    eax
100033a6:	3d 18 01 00 00       	cmp    eax,0x118
100033ab:	75 f1                	jne    1000339e <_ssfn__init_zdefaults+0x20>
100033ad:	c7 05 f8 00 01 10 08 08 08 08 	mov    DWORD PTR ds:0x100100f8,0x8080808	100033af: R_386_32	.bss
100033b7:	c7 05 fc 00 01 10 08 08 08 08 	mov    DWORD PTR ds:0x100100fc,0x8080808	100033b9: R_386_32	.bss
100033c1:	31 c0                	xor    eax,eax
100033c3:	c6 80 00 01 01 10 05 	mov    BYTE PTR [eax+0x10010100],0x5	100033c5: R_386_32	.bss
100033ca:	40                   	inc    eax
100033cb:	83 f8 20             	cmp    eax,0x20
100033ce:	75 f3                	jne    100033c3 <_ssfn__init_zdefaults+0x45>
100033d0:	c3                   	ret    

100033d1 <_ssfn__parse_zlib>:
100033d1:	55                   	push   ebp
100033d2:	57                   	push   edi
100033d3:	56                   	push   esi
100033d4:	53                   	push   ebx
100033d5:	83 ec 1c             	sub    esp,0x1c
100033d8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100033dc:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
100033e3:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
100033ea:	ba 01 00 00 00       	mov    edx,0x1
100033ef:	89 d8                	mov    eax,ebx
100033f1:	e8 a4 fb ff ff       	call   10002f9a <_ssfn__zreceive>
100033f6:	ba 02 00 00 00       	mov    edx,0x2
100033fb:	89 c5                	mov    ebp,eax
100033fd:	89 d8                	mov    eax,ebx
100033ff:	e8 96 fb ff ff       	call   10002f9a <_ssfn__zreceive>
10003404:	89 c6                	mov    esi,eax
10003406:	85 c0                	test   eax,eax
10003408:	0f 85 ad 00 00 00    	jne    100034bb <_ssfn__parse_zlib+0xea>
1000340e:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
10003411:	83 e2 07             	and    edx,0x7
10003414:	74 07                	je     1000341d <_ssfn__parse_zlib+0x4c>
10003416:	89 d8                	mov    eax,ebx
10003418:	e8 7d fb ff ff       	call   10002f9a <_ssfn__zreceive>
1000341d:	31 c0                	xor    eax,eax
1000341f:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
10003422:	85 c9                	test   ecx,ecx
10003424:	7e 16                	jle    1000343c <_ssfn__parse_zlib+0x6b>
10003426:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10003429:	40                   	inc    eax
1000342a:	83 e9 08             	sub    ecx,0x8
1000342d:	88 54 04 0b          	mov    BYTE PTR [esp+eax*1+0xb],dl
10003431:	89 4b 04             	mov    DWORD PTR [ebx+0x4],ecx
10003434:	c1 ea 08             	shr    edx,0x8
10003437:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
1000343a:	eb e3                	jmp    1000341f <_ssfn__parse_zlib+0x4e>
1000343c:	83 f8 04             	cmp    eax,0x4
1000343f:	74 10                	je     10003451 <_ssfn__parse_zlib+0x80>
10003441:	8b 13                	mov    edx,DWORD PTR [ebx]
10003443:	40                   	inc    eax
10003444:	8d 4a 01             	lea    ecx,[edx+0x1]
10003447:	89 0b                	mov    DWORD PTR [ebx],ecx
10003449:	8a 12                	mov    dl,BYTE PTR [edx]
1000344b:	88 54 04 0b          	mov    BYTE PTR [esp+eax*1+0xb],dl
1000344f:	eb eb                	jmp    1000343c <_ssfn__parse_zlib+0x6b>
10003451:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
10003456:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
1000345b:	0f b6 7c 24 0d       	movzx  edi,BYTE PTR [esp+0xd]
10003460:	c1 e7 08             	shl    edi,0x8
10003463:	01 c7                	add    edi,eax
10003465:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
1000346a:	c1 e0 08             	shl    eax,0x8
1000346d:	01 d0                	add    eax,edx
1000346f:	89 fa                	mov    edx,edi
10003471:	81 f2 ff ff 00 00    	xor    edx,0xffff
10003477:	39 d0                	cmp    eax,edx
10003479:	0f 85 a6 00 00 00    	jne    10003525 <_ssfn__parse_zlib+0x154>
1000347f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
10003482:	8d 14 38             	lea    edx,[eax+edi*1]
10003485:	39 53 14             	cmp    DWORD PTR [ebx+0x14],edx
10003488:	73 14                	jae    1000349e <_ssfn__parse_zlib+0xcd>
1000348a:	51                   	push   ecx
1000348b:	51                   	push   ecx
1000348c:	50                   	push   eax
1000348d:	53                   	push   ebx
1000348e:	e8 ee fb ff ff       	call   10003081 <_ssfn__zexpand>
10003493:	83 c4 10             	add    esp,0x10
10003496:	85 c0                	test   eax,eax
10003498:	0f 84 87 00 00 00    	je     10003525 <_ssfn__parse_zlib+0x154>
1000349e:	8b 03                	mov    eax,DWORD PTR [ebx]
100034a0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
100034a3:	39 f7                	cmp    edi,esi
100034a5:	74 09                	je     100034b0 <_ssfn__parse_zlib+0xdf>
100034a7:	8a 04 30             	mov    al,BYTE PTR [eax+esi*1]
100034aa:	88 04 32             	mov    BYTE PTR [edx+esi*1],al
100034ad:	46                   	inc    esi
100034ae:	eb ee                	jmp    1000349e <_ssfn__parse_zlib+0xcd>
100034b0:	01 f8                	add    eax,edi
100034b2:	01 d7                	add    edi,edx
100034b4:	89 03                	mov    DWORD PTR [ebx],eax
100034b6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
100034b9:	eb 5d                	jmp    10003518 <_ssfn__parse_zlib+0x147>
100034bb:	83 f8 03             	cmp    eax,0x3
100034be:	75 04                	jne    100034c4 <_ssfn__parse_zlib+0xf3>
100034c0:	31 f6                	xor    esi,esi
100034c2:	eb 61                	jmp    10003525 <_ssfn__parse_zlib+0x154>
100034c4:	4e                   	dec    esi
100034c5:	75 31                	jne    100034f8 <_ssfn__parse_zlib+0x127>
100034c7:	8d 43 18             	lea    eax,[ebx+0x18]
100034ca:	52                   	push   edx
100034cb:	68 20 01 00 00       	push   0x120
100034d0:	68 e0 ff 00 10       	push   0x1000ffe0	100034d1: R_386_32	.bss
100034d5:	50                   	push   eax
100034d6:	e8 16 f9 ff ff       	call   10002df1 <_ssfn__zbuild_huffman>
100034db:	83 c4 10             	add    esp,0x10
100034de:	85 c0                	test   eax,eax
100034e0:	74 de                	je     100034c0 <_ssfn__parse_zlib+0xef>
100034e2:	50                   	push   eax
100034e3:	8d 83 fc 07 00 00    	lea    eax,[ebx+0x7fc]
100034e9:	6a 20                	push   0x20
100034eb:	68 00 01 01 10       	push   0x10010100	100034ec: R_386_32	.bss
100034f0:	50                   	push   eax
100034f1:	e8 fb f8 ff ff       	call   10002df1 <_ssfn__zbuild_huffman>
100034f6:	eb 09                	jmp    10003501 <_ssfn__parse_zlib+0x130>
100034f8:	83 ec 0c             	sub    esp,0xc
100034fb:	53                   	push   ebx
100034fc:	e8 05 fd ff ff       	call   10003206 <_ssfn__compute_huffman_codes>
10003501:	83 c4 10             	add    esp,0x10
10003504:	85 c0                	test   eax,eax
10003506:	74 b8                	je     100034c0 <_ssfn__parse_zlib+0xef>
10003508:	83 ec 0c             	sub    esp,0xc
1000350b:	53                   	push   ebx
1000350c:	e8 d3 fb ff ff       	call   100030e4 <_ssfn__parse_huffman_block>
10003511:	83 c4 10             	add    esp,0x10
10003514:	85 c0                	test   eax,eax
10003516:	74 a8                	je     100034c0 <_ssfn__parse_zlib+0xef>
10003518:	85 ed                	test   ebp,ebp
1000351a:	0f 84 ca fe ff ff    	je     100033ea <_ssfn__parse_zlib+0x19>
10003520:	be 01 00 00 00       	mov    esi,0x1
10003525:	83 c4 1c             	add    esp,0x1c
10003528:	89 f0                	mov    eax,esi
1000352a:	5b                   	pop    ebx
1000352b:	5e                   	pop    esi
1000352c:	5f                   	pop    edi
1000352d:	5d                   	pop    ebp
1000352e:	c3                   	ret    

1000352f <_ssfn_zlib_decode>:
1000352f:	81 ec f8 0f 00 00    	sub    esp,0xff8
10003535:	6a 08                	push   0x8
10003537:	e8 fc ff ff ff       	call   10003538 <_ssfn_zlib_decode+0x9>	10003538: R_386_PC32	malloc
1000353c:	83 c4 10             	add    esp,0x10
1000353f:	85 c0                	test   eax,eax
10003541:	74 49                	je     1000358c <_ssfn_zlib_decode+0x5d>
10003543:	8b 94 24 f0 0f 00 00 	mov    edx,DWORD PTR [esp+0xff0]
1000354a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000354e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003552:	89 14 24             	mov    DWORD PTR [esp],edx
10003555:	83 c0 08             	add    eax,0x8
10003558:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000355c:	e8 1d fe ff ff       	call   1000337e <_ssfn__init_zdefaults>
10003561:	83 ec 0c             	sub    esp,0xc
10003564:	8d 44 24 0c          	lea    eax,[esp+0xc]
10003568:	50                   	push   eax
10003569:	e8 63 fe ff ff       	call   100033d1 <_ssfn__parse_zlib>
1000356e:	83 c4 10             	add    esp,0x10
10003571:	85 c0                	test   eax,eax
10003573:	74 06                	je     1000357b <_ssfn_zlib_decode+0x4c>
10003575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003579:	eb 11                	jmp    1000358c <_ssfn_zlib_decode+0x5d>
1000357b:	83 ec 0c             	sub    esp,0xc
1000357e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10003582:	e8 fc ff ff ff       	call   10003583 <_ssfn_zlib_decode+0x54>	10003583: R_386_PC32	free
10003587:	83 c4 10             	add    esp,0x10
1000358a:	31 c0                	xor    eax,eax
1000358c:	81 c4 ec 0f 00 00    	add    esp,0xfec
10003592:	c3                   	ret    

10003593 <ssfn_load>:
10003593:	55                   	push   ebp
10003594:	57                   	push   edi
10003595:	56                   	push   esi
10003596:	53                   	push   ebx
10003597:	83 ec 1c             	sub    esp,0x1c
1000359a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
1000359e:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100035a2:	85 ff                	test   edi,edi
100035a4:	0f 84 d5 01 00 00    	je     1000377f <ssfn_load+0x1ec>
100035aa:	85 f6                	test   esi,esi
100035ac:	0f 84 cd 01 00 00    	je     1000377f <ssfn_load+0x1ec>
100035b2:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
100035b5:	0f 85 a8 00 00 00    	jne    10003663 <ssfn_load+0xd0>
100035bb:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
100035bf:	0f 85 9e 00 00 00    	jne    10003663 <ssfn_load+0xd0>
100035c5:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
100035c9:	74 0a                	je     100035d5 <ssfn_load+0x42>
100035cb:	bd fe ff ff ff       	mov    ebp,0xfffffffe
100035d0:	e9 af 01 00 00       	jmp    10003784 <ssfn_load+0x1f1>
100035d5:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
100035d8:	a8 04                	test   al,0x4
100035da:	75 05                	jne    100035e1 <ssfn_load+0x4e>
100035dc:	83 c6 0a             	add    esi,0xa
100035df:	eb 08                	jmp    100035e9 <ssfn_load+0x56>
100035e1:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
100035e5:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
100035e9:	a8 08                	test   al,0x8
100035eb:	74 07                	je     100035f4 <ssfn_load+0x61>
100035ed:	46                   	inc    esi
100035ee:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
100035f2:	eb f7                	jmp    100035eb <ssfn_load+0x58>
100035f4:	a8 10                	test   al,0x10
100035f6:	74 07                	je     100035ff <ssfn_load+0x6c>
100035f8:	46                   	inc    esi
100035f9:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
100035fd:	eb f7                	jmp    100035f6 <ssfn_load+0x63>
100035ff:	83 ec 0c             	sub    esp,0xc
10003602:	56                   	push   esi
10003603:	e8 fc ff ff ff       	call   10003604 <ssfn_load+0x71>	10003604: R_386_PC32	_ssfn_zlib_decode
10003608:	83 c4 10             	add    esp,0x10
1000360b:	89 c6                	mov    esi,eax
1000360d:	85 c0                	test   eax,eax
1000360f:	74 ba                	je     100035cb <ssfn_load+0x38>
10003611:	50                   	push   eax
10003612:	50                   	push   eax
10003613:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10003619:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10003620:	50                   	push   eax
10003621:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10003627:	e8 fc ff ff ff       	call   10003628 <ssfn_load+0x95>	10003628: R_386_PC32	realloc
1000362c:	83 c4 10             	add    esp,0x10
1000362f:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10003635:	85 c0                	test   eax,eax
10003637:	75 0f                	jne    10003648 <ssfn_load+0xb5>
10003639:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10003643:	e9 1a 01 00 00       	jmp    10003762 <ssfn_load+0x1cf>
10003648:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
1000364e:	8d 4a 01             	lea    ecx,[edx+0x1]
10003651:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10003657:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
1000365a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
1000365d:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10003663:	50                   	push   eax
10003664:	6a 04                	push   0x4
10003666:	68 e2 8f 00 10       	push   0x10008fe2	10003667: R_386_32	.text
1000366b:	56                   	push   esi
1000366c:	e8 fc ff ff ff       	call   1000366d <ssfn_load+0xda>	1000366d: R_386_PC32	memcmp
10003671:	83 c4 10             	add    esp,0x10
10003674:	89 c5                	mov    ebp,eax
10003676:	85 c0                	test   eax,eax
10003678:	75 29                	jne    100036a3 <ssfn_load+0x110>
1000367a:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
1000367d:	01 f3                	add    ebx,esi
1000367f:	83 c6 08             	add    esi,0x8
10003682:	39 de                	cmp    esi,ebx
10003684:	0f 83 fa 00 00 00    	jae    10003784 <ssfn_load+0x1f1>
1000368a:	50                   	push   eax
1000368b:	50                   	push   eax
1000368c:	56                   	push   esi
1000368d:	57                   	push   edi
1000368e:	e8 fc ff ff ff       	call   1000368f <ssfn_load+0xfc>	1000368f: R_386_PC32	ssfn_load
10003693:	83 c4 10             	add    esp,0x10
10003696:	85 c0                	test   eax,eax
10003698:	0f 85 e6 00 00 00    	jne    10003784 <ssfn_load+0x1f1>
1000369e:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
100036a1:	eb df                	jmp    10003682 <ssfn_load+0xef>
100036a3:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100036a6:	83 e0 0f             	and    eax,0xf
100036a9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100036ad:	53                   	push   ebx
100036ae:	6a 04                	push   0x4
100036b0:	68 e7 8f 00 10       	push   0x10008fe7	100036b1: R_386_32	.text
100036b5:	56                   	push   esi
100036b6:	e8 fc ff ff ff       	call   100036b7 <ssfn_load+0x124>	100036b7: R_386_PC32	memcmp
100036bb:	83 c4 10             	add    esp,0x10
100036be:	89 c5                	mov    ebp,eax
100036c0:	85 c0                	test   eax,eax
100036c2:	0f 85 03 ff ff ff    	jne    100035cb <ssfn_load+0x38>
100036c8:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
100036cb:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
100036cf:	51                   	push   ecx
100036d0:	6a 04                	push   0x4
100036d2:	68 ec 8f 00 10       	push   0x10008fec	100036d3: R_386_32	.text
100036d7:	50                   	push   eax
100036d8:	e8 fc ff ff ff       	call   100036d9 <ssfn_load+0x146>	100036d9: R_386_PC32	memcmp
100036dd:	83 c4 10             	add    esp,0x10
100036e0:	85 c0                	test   eax,eax
100036e2:	0f 85 e3 fe ff ff    	jne    100035cb <ssfn_load+0x38>
100036e8:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
100036ed:	0f 87 d8 fe ff ff    	ja     100035cb <ssfn_load+0x38>
100036f3:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
100036f7:	39 cb                	cmp    ebx,ecx
100036f9:	0f 86 cc fe ff ff    	jbe    100035cb <ssfn_load+0x38>
100036ff:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
10003702:	39 c3                	cmp    ebx,eax
10003704:	0f 86 c1 fe ff ff    	jbe    100035cb <ssfn_load+0x38>
1000370a:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
1000370d:	0f 86 b8 fe ff ff    	jbe    100035cb <ssfn_load+0x38>
10003713:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
10003716:	0f 86 af fe ff ff    	jbe    100035cb <ssfn_load+0x38>
1000371c:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
1000371f:	0f 86 a6 fe ff ff    	jbe    100035cb <ssfn_load+0x38>
10003725:	39 c1                	cmp    ecx,eax
10003727:	0f 83 9e fe ff ff    	jae    100035cb <ssfn_load+0x38>
1000372d:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
10003732:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
10003735:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
1000373b:	40                   	inc    eax
1000373c:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
10003742:	52                   	push   edx
10003743:	c1 e0 02             	shl    eax,0x2
10003746:	52                   	push   edx
10003747:	50                   	push   eax
10003748:	ff 33                	push   DWORD PTR [ebx]
1000374a:	e8 fc ff ff ff       	call   1000374b <ssfn_load+0x1b8>	1000374b: R_386_PC32	realloc
1000374f:	83 c4 10             	add    esp,0x10
10003752:	89 03                	mov    DWORD PTR [ebx],eax
10003754:	85 c0                	test   eax,eax
10003756:	75 0f                	jne    10003767 <ssfn_load+0x1d4>
10003758:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
10003762:	83 cd ff             	or     ebp,0xffffffff
10003765:	eb 1d                	jmp    10003784 <ssfn_load+0x1f1>
10003767:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
1000376d:	83 ec 0c             	sub    esp,0xc
10003770:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
10003774:	57                   	push   edi
10003775:	e8 a0 f5 ff ff       	call   10002d1a <_ssfn_fc>
1000377a:	83 c4 10             	add    esp,0x10
1000377d:	eb 05                	jmp    10003784 <ssfn_load+0x1f1>
1000377f:	bd fc ff ff ff       	mov    ebp,0xfffffffc
10003784:	83 c4 1c             	add    esp,0x1c
10003787:	89 e8                	mov    eax,ebp
10003789:	5b                   	pop    ebx
1000378a:	5e                   	pop    esi
1000378b:	5f                   	pop    edi
1000378c:	5d                   	pop    ebp
1000378d:	c3                   	ret    

1000378e <ssfn_free>:
1000378e:	57                   	push   edi
1000378f:	56                   	push   esi
10003790:	53                   	push   ebx
10003791:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10003795:	85 db                	test   ebx,ebx
10003797:	0f 84 83 00 00 00    	je     10003820 <ssfn_free+0x92>
1000379d:	83 ec 0c             	sub    esp,0xc
100037a0:	53                   	push   ebx
100037a1:	e8 74 f5 ff ff       	call   10002d1a <_ssfn_fc>
100037a6:	83 c4 10             	add    esp,0x10
100037a9:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
100037b0:	74 32                	je     100037e4 <ssfn_free+0x56>
100037b2:	31 f6                	xor    esi,esi
100037b4:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
100037ba:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
100037c0:	7e 16                	jle    100037d8 <ssfn_free+0x4a>
100037c2:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
100037c5:	85 c0                	test   eax,eax
100037c7:	74 0c                	je     100037d5 <ssfn_free+0x47>
100037c9:	83 ec 0c             	sub    esp,0xc
100037cc:	50                   	push   eax
100037cd:	e8 fc ff ff ff       	call   100037ce <ssfn_free+0x40>	100037ce: R_386_PC32	free
100037d2:	83 c4 10             	add    esp,0x10
100037d5:	46                   	inc    esi
100037d6:	eb dc                	jmp    100037b4 <ssfn_free+0x26>
100037d8:	83 ec 0c             	sub    esp,0xc
100037db:	50                   	push   eax
100037dc:	e8 fc ff ff ff       	call   100037dd <ssfn_free+0x4f>	100037dd: R_386_PC32	free
100037e1:	83 c4 10             	add    esp,0x10
100037e4:	31 f6                	xor    esi,esi
100037e6:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
100037e9:	85 c0                	test   eax,eax
100037eb:	74 0c                	je     100037f9 <ssfn_free+0x6b>
100037ed:	83 ec 0c             	sub    esp,0xc
100037f0:	50                   	push   eax
100037f1:	e8 fc ff ff ff       	call   100037f2 <ssfn_free+0x64>	100037f2: R_386_PC32	free
100037f6:	83 c4 10             	add    esp,0x10
100037f9:	46                   	inc    esi
100037fa:	83 fe 05             	cmp    esi,0x5
100037fd:	75 e7                	jne    100037e6 <ssfn_free+0x58>
100037ff:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10003805:	85 c0                	test   eax,eax
10003807:	74 0c                	je     10003815 <ssfn_free+0x87>
10003809:	83 ec 0c             	sub    esp,0xc
1000380c:	50                   	push   eax
1000380d:	e8 fc ff ff ff       	call   1000380e <ssfn_free+0x80>	1000380e: R_386_PC32	free
10003812:	83 c4 10             	add    esp,0x10
10003815:	b9 72 3d 00 00       	mov    ecx,0x3d72
1000381a:	31 c0                	xor    eax,eax
1000381c:	89 df                	mov    edi,ebx
1000381e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003820:	5b                   	pop    ebx
10003821:	5e                   	pop    esi
10003822:	5f                   	pop    edi
10003823:	c3                   	ret    

10003824 <ssfn_mem>:
10003824:	55                   	push   ebp
10003825:	31 c0                	xor    eax,eax
10003827:	57                   	push   edi
10003828:	56                   	push   esi
10003829:	53                   	push   ebx
1000382a:	83 ec 08             	sub    esp,0x8
1000382d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003831:	85 d2                	test   edx,edx
10003833:	0f 84 8e 00 00 00    	je     100038c7 <ssfn_mem+0xa3>
10003839:	b8 c8 f5 00 00       	mov    eax,0xf5c8
1000383e:	31 c9                	xor    ecx,ecx
10003840:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
10003847:	41                   	inc    ecx
10003848:	8d 04 98             	lea    eax,[eax+ebx*4]
1000384b:	83 f9 05             	cmp    ecx,0x5
1000384e:	75 f0                	jne    10003840 <ssfn_mem+0x1c>
10003850:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
10003856:	31 c9                	xor    ecx,ecx
10003858:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
1000385f:	89 34 24             	mov    DWORD PTR [esp],esi
10003862:	85 f6                	test   esi,esi
10003864:	74 48                	je     100038ae <ssfn_mem+0x8a>
10003866:	31 db                	xor    ebx,ebx
10003868:	8b 34 24             	mov    esi,DWORD PTR [esp]
1000386b:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
1000386e:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
10003872:	85 ff                	test   edi,edi
10003874:	74 2a                	je     100038a0 <ssfn_mem+0x7c>
10003876:	31 f6                	xor    esi,esi
10003878:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
1000387c:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
1000387f:	85 ed                	test   ebp,ebp
10003881:	74 0f                	je     10003892 <ssfn_mem+0x6e>
10003883:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
10003887:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
1000388b:	0f af fd             	imul   edi,ebp
1000388e:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
10003892:	46                   	inc    esi
10003893:	81 fe 00 01 00 00    	cmp    esi,0x100
10003899:	75 dd                	jne    10003878 <ssfn_mem+0x54>
1000389b:	05 00 04 00 00       	add    eax,0x400
100038a0:	43                   	inc    ebx
100038a1:	81 fb 00 01 00 00    	cmp    ebx,0x100
100038a7:	75 bf                	jne    10003868 <ssfn_mem+0x44>
100038a9:	05 00 04 00 00       	add    eax,0x400
100038ae:	41                   	inc    ecx
100038af:	83 f9 11             	cmp    ecx,0x11
100038b2:	75 a4                	jne    10003858 <ssfn_mem+0x34>
100038b4:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
100038bb:	74 0a                	je     100038c7 <ssfn_mem+0xa3>
100038bd:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
100038c3:	01 d2                	add    edx,edx
100038c5:	01 d0                	add    eax,edx
100038c7:	83 c4 08             	add    esp,0x8
100038ca:	5b                   	pop    ebx
100038cb:	5e                   	pop    esi
100038cc:	5f                   	pop    edi
100038cd:	5d                   	pop    ebp
100038ce:	c3                   	ret    

100038cf <ssfn_select>:
100038cf:	55                   	push   ebp
100038d0:	57                   	push   edi
100038d1:	56                   	push   esi
100038d2:	53                   	push   ebx
100038d3:	83 ec 1c             	sub    esp,0x1c
100038d6:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100038da:	85 db                	test   ebx,ebx
100038dc:	75 0a                	jne    100038e8 <ssfn_select+0x19>
100038de:	be fc ff ff ff       	mov    esi,0xfffffffc
100038e3:	e9 18 01 00 00       	jmp    10003a00 <ssfn_select+0x131>
100038e8:	83 ec 0c             	sub    esp,0xc
100038eb:	53                   	push   ebx
100038ec:	e8 29 f4 ff ff       	call   10002d1a <_ssfn_fc>
100038f1:	83 c4 10             	add    esp,0x10
100038f4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100038f8:	81 e6 00 c0 ff ff    	and    esi,0xffffc000
100038fe:	0f 85 e9 00 00 00    	jne    100039ed <ssfn_select+0x11e>
10003904:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003908:	83 e8 08             	sub    eax,0x8
1000390b:	3d b8 00 00 00       	cmp    eax,0xb8
10003910:	0f 87 de 00 00 00    	ja     100039f4 <ssfn_select+0x125>
10003916:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
1000391e:	75 76                	jne    10003996 <ssfn_select+0xc7>
10003920:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10003925:	74 b7                	je     100038de <ssfn_select+0xf>
10003927:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000392b:	80 38 00             	cmp    BYTE PTR [eax],0x0
1000392e:	74 ae                	je     100038de <ssfn_select+0xf>
10003930:	31 ed                	xor    ebp,ebp
10003932:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003936:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
1000393a:	74 03                	je     1000393f <ssfn_select+0x70>
1000393c:	45                   	inc    ebp
1000393d:	eb f3                	jmp    10003932 <ssfn_select+0x63>
1000393f:	8d 43 14             	lea    eax,[ebx+0x14]
10003942:	89 df                	mov    edi,ebx
10003944:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003948:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
1000394e:	31 d2                	xor    edx,edx
10003950:	89 04 24             	mov    DWORD PTR [esp],eax
10003953:	39 14 24             	cmp    DWORD PTR [esp],edx
10003956:	7e 33                	jle    1000398b <ssfn_select+0xbc>
10003958:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000395c:	8b 07                	mov    eax,DWORD PTR [edi]
1000395e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
10003961:	50                   	push   eax
10003962:	8d 41 20             	lea    eax,[ecx+0x20]
10003965:	55                   	push   ebp
10003966:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
1000396a:	50                   	push   eax
1000396b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
1000396f:	e8 fc ff ff ff       	call   10003970 <ssfn_select+0xa1>	10003970: R_386_PC32	memcmp
10003974:	83 c4 10             	add    esp,0x10
10003977:	85 c0                	test   eax,eax
10003979:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000397d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10003981:	75 05                	jne    10003988 <ssfn_select+0xb9>
10003983:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
10003986:	eb 34                	jmp    100039bc <ssfn_select+0xed>
10003988:	42                   	inc    edx
10003989:	eb c8                	jmp    10003953 <ssfn_select+0x84>
1000398b:	83 c7 04             	add    edi,0x4
1000398e:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10003992:	75 b4                	jne    10003948 <ssfn_select+0x79>
10003994:	eb 65                	jmp    100039fb <ssfn_select+0x12c>
10003996:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
1000399e:	74 15                	je     100039b5 <ssfn_select+0xe6>
100039a0:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
100039a5:	7f 54                	jg     100039fb <ssfn_select+0x12c>
100039a7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100039ab:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
100039b3:	74 46                	je     100039fb <ssfn_select+0x12c>
100039b5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
100039bc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100039c0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
100039c7:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
100039cd:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100039d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100039db:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
100039e1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100039e5:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
100039eb:	eb 13                	jmp    10003a00 <ssfn_select+0x131>
100039ed:	be fb ff ff ff       	mov    esi,0xfffffffb
100039f2:	eb 0c                	jmp    10003a00 <ssfn_select+0x131>
100039f4:	be fa ff ff ff       	mov    esi,0xfffffffa
100039f9:	eb 05                	jmp    10003a00 <ssfn_select+0x131>
100039fb:	be fd ff ff ff       	mov    esi,0xfffffffd
10003a00:	83 c4 1c             	add    esp,0x1c
10003a03:	89 f0                	mov    eax,esi
10003a05:	5b                   	pop    ebx
10003a06:	5e                   	pop    esi
10003a07:	5f                   	pop    edi
10003a08:	5d                   	pop    ebp
10003a09:	c3                   	ret    

10003a0a <ssfn_render>:
10003a0a:	55                   	push   ebp
10003a0b:	57                   	push   edi
10003a0c:	56                   	push   esi
10003a0d:	53                   	push   ebx
10003a0e:	81 ec ec 05 01 00    	sub    esp,0x105ec
10003a14:	83 bc 24 08 06 01 00 00 	cmp    DWORD PTR [esp+0x10608],0x0
10003a1c:	8b ac 24 00 06 01 00 	mov    ebp,DWORD PTR [esp+0x10600]
10003a23:	0f 94 c2             	sete   dl
10003a26:	c7 84 24 d8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xd8],0x0
10003a31:	85 ed                	test   ebp,ebp
10003a33:	0f 94 c0             	sete   al
10003a36:	08 c2                	or     dl,al
10003a38:	74 0a                	je     10003a44 <ssfn_render+0x3a>
10003a3a:	b8 fc ff ff ff       	mov    eax,0xfffffffc
10003a3f:	e9 c8 1d 00 00       	jmp    1000580c <ssfn_render+0x1e02>
10003a44:	8b 84 24 08 06 01 00 	mov    eax,DWORD PTR [esp+0x10608]
10003a4b:	8a 10                	mov    dl,BYTE PTR [eax]
10003a4d:	31 c0                	xor    eax,eax
10003a4f:	84 d2                	test   dl,dl
10003a51:	0f 84 b5 1d 00 00    	je     1000580c <ssfn_render+0x1e02>
10003a57:	80 fa 0d             	cmp    dl,0xd
10003a5a:	75 0f                	jne    10003a6b <ssfn_render+0x61>
10003a5c:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10003a63:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10003a69:	eb 32                	jmp    10003a9d <ssfn_render+0x93>
10003a6b:	80 fa 0a             	cmp    dl,0xa
10003a6e:	75 37                	jne    10003aa7 <ssfn_render+0x9d>
10003a70:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10003a77:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10003a7d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
10003a80:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
10003a86:	85 c0                	test   eax,eax
10003a88:	75 06                	jne    10003a90 <ssfn_render+0x86>
10003a8a:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
10003a90:	01 d0                	add    eax,edx
10003a92:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
10003a99:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
10003a9d:	b8 01 00 00 00       	mov    eax,0x1
10003aa2:	e9 65 1d 00 00       	jmp    1000580c <ssfn_render+0x1e02>
10003aa7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10003aaa:	85 c0                	test   eax,eax
10003aac:	74 43                	je     10003af1 <ssfn_render+0xe7>
10003aae:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10003ab1:	8d b4 24 d0 00 00 00 	lea    esi,[esp+0xd0]
10003ab8:	56                   	push   esi
10003ab9:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10003ac0:	52                   	push   edx
10003ac1:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003ac8:	50                   	push   eax
10003ac9:	e8 b5 ed ff ff       	call   10002883 <_ssfn_c>
10003ace:	83 c4 10             	add    esp,0x10
10003ad1:	89 c1                	mov    ecx,eax
10003ad3:	85 c0                	test   eax,eax
10003ad5:	0f 85 71 02 00 00    	jne    10003d4c <ssfn_render+0x342>
10003adb:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10003ae1:	25 00 01 00 00       	and    eax,0x100
10003ae6:	0f 84 fe 01 00 00    	je     10003cea <ssfn_render+0x2e0>
10003aec:	e9 1e 02 00 00       	jmp    10003d0f <ssfn_render+0x305>
10003af1:	8b b5 b8 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5b8]
10003af7:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
10003afe:	81 fe fd 00 00 00    	cmp    esi,0xfd
10003b04:	7f 07                	jg     10003b0d <ssfn_render+0x103>
10003b06:	89 f3                	mov    ebx,esi
10003b08:	89 34 24             	mov    DWORD PTR [esp],esi
10003b0b:	eb 37                	jmp    10003b44 <ssfn_render+0x13a>
10003b0d:	31 db                	xor    ebx,ebx
10003b0f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
10003b16:	eb 2c                	jmp    10003b44 <ssfn_render+0x13a>
10003b18:	85 c9                	test   ecx,ecx
10003b1a:	0f 84 65 01 00 00    	je     10003c85 <ssfn_render+0x27b>
10003b20:	43                   	inc    ebx
10003b21:	3b 1c 24             	cmp    ebx,DWORD PTR [esp]
10003b24:	7e 22                	jle    10003b48 <ssfn_render+0x13e>
10003b26:	85 c9                	test   ecx,ecx
10003b28:	0f 85 1e 02 00 00    	jne    10003d4c <ssfn_render+0x342>
10003b2e:	31 db                	xor    ebx,ebx
10003b30:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
10003b37:	81 fe ff 00 00 00    	cmp    esi,0xff
10003b3d:	74 9c                	je     10003adb <ssfn_render+0xd1>
10003b3f:	be ff 00 00 00       	mov    esi,0xff
10003b44:	31 c9                	xor    ecx,ecx
10003b46:	eb d9                	jmp    10003b21 <ssfn_render+0x117>
10003b48:	8b 7c 9d 00          	mov    edi,DWORD PTR [ebp+ebx*4+0x0]
10003b4c:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
10003b53:	74 c3                	je     10003b18 <ssfn_render+0x10e>
10003b55:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003b60:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003b67:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003b6e:	7e 53                	jle    10003bc3 <ssfn_render+0x1b9>
10003b70:	8b 14 87             	mov    edx,DWORD PTR [edi+eax*4]
10003b73:	0f b6 42 08          	movzx  eax,BYTE PTR [edx+0x8]
10003b77:	c1 f8 04             	sar    eax,0x4
10003b7a:	33 85 bc f5 00 00    	xor    eax,DWORD PTR [ebp+0xf5bc]
10003b80:	a8 03                	test   al,0x3
10003b82:	75 36                	jne    10003bba <ssfn_render+0x1b0>
10003b84:	0f b6 42 0b          	movzx  eax,BYTE PTR [edx+0xb]
10003b88:	3b 85 c0 f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf5c0]
10003b8e:	75 2a                	jne    10003bba <ssfn_render+0x1b0>
10003b90:	8d 84 24 d0 00 00 00 	lea    eax,[esp+0xd0]
10003b97:	50                   	push   eax
10003b98:	8d 84 24 dc 00 00 00 	lea    eax,[esp+0xdc]
10003b9f:	50                   	push   eax
10003ba0:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003ba7:	52                   	push   edx
10003ba8:	e8 d6 ec ff ff       	call   10002883 <_ssfn_c>
10003bad:	83 c4 10             	add    esp,0x10
10003bb0:	89 c1                	mov    ecx,eax
10003bb2:	85 c0                	test   eax,eax
10003bb4:	0f 85 0e 01 00 00    	jne    10003cc8 <ssfn_render+0x2be>
10003bba:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003bc1:	eb 9d                	jmp    10003b60 <ssfn_render+0x156>
10003bc3:	85 c9                	test   ecx,ecx
10003bc5:	0f 85 55 ff ff ff    	jne    10003b20 <ssfn_render+0x116>
10003bcb:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003bd6:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003bdd:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003be4:	0f 8e a3 1b 00 00    	jle    1000578d <ssfn_render+0x1d83>
10003bea:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
10003bed:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
10003bf1:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10003bf7:	74 09                	je     10003c02 <ssfn_render+0x1f8>
10003bf9:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003c00:	eb d4                	jmp    10003bd6 <ssfn_render+0x1cc>
10003c02:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10003c09:	51                   	push   ecx
10003c0a:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10003c11:	52                   	push   edx
10003c12:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003c19:	50                   	push   eax
10003c1a:	e8 64 ec ff ff       	call   10002883 <_ssfn_c>
10003c1f:	83 c4 10             	add    esp,0x10
10003c22:	89 c1                	mov    ecx,eax
10003c24:	85 c0                	test   eax,eax
10003c26:	74 d1                	je     10003bf9 <ssfn_render+0x1ef>
10003c28:	e9 9b 00 00 00       	jmp    10003cc8 <ssfn_render+0x2be>
10003c2d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
10003c30:	0f b6 41 08          	movzx  eax,BYTE PTR [ecx+0x8]
10003c34:	c1 f8 04             	sar    eax,0x4
10003c37:	31 d0                	xor    eax,edx
10003c39:	a8 03                	test   al,0x3
10003c3b:	0f 84 5c 1b 00 00    	je     1000579d <ssfn_render+0x1d93>
10003c41:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003c48:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003c4f:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
10003c55:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003c5c:	7f cf                	jg     10003c2d <ssfn_render+0x223>
10003c5e:	83 e2 03             	and    edx,0x3
10003c61:	83 fa 03             	cmp    edx,0x3
10003c64:	75 1f                	jne    10003c85 <ssfn_render+0x27b>
10003c66:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003c71:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003c78:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003c7f:	0f 8f 47 1b 00 00    	jg     100057cc <ssfn_render+0x1dc2>
10003c85:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10003c90:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003c97:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
10003c9e:	7e 43                	jle    10003ce3 <ssfn_render+0x2d9>
10003ca0:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10003ca7:	51                   	push   ecx
10003ca8:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
10003caf:	52                   	push   edx
10003cb0:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
10003cb7:	ff 34 87             	push   DWORD PTR [edi+eax*4]
10003cba:	e8 c4 eb ff ff       	call   10002883 <_ssfn_c>
10003cbf:	83 c4 10             	add    esp,0x10
10003cc2:	89 c1                	mov    ecx,eax
10003cc4:	85 c0                	test   eax,eax
10003cc6:	74 12                	je     10003cda <ssfn_render+0x2d0>
10003cc8:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10003ccf:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
10003cd2:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10003cd5:	e9 46 fe ff ff       	jmp    10003b20 <ssfn_render+0x116>
10003cda:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10003ce1:	eb ad                	jmp    10003c90 <ssfn_render+0x286>
10003ce3:	31 c9                	xor    ecx,ecx
10003ce5:	e9 36 fe ff ff       	jmp    10003b20 <ssfn_render+0x116>
10003cea:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
10003cf0:	c7 84 24 d0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xd0],0x0
10003cfb:	81 fb fd 00 00 00    	cmp    ebx,0xfd
10003d01:	7f 16                	jg     10003d19 <ssfn_render+0x30f>
10003d03:	89 d8                	mov    eax,ebx
10003d05:	31 c9                	xor    ecx,ecx
10003d07:	39 d8                	cmp    eax,ebx
10003d09:	7e 15                	jle    10003d20 <ssfn_render+0x316>
10003d0b:	85 c9                	test   ecx,ecx
10003d0d:	75 3d                	jne    10003d4c <ssfn_render+0x342>
10003d0f:	b8 f9 ff ff ff       	mov    eax,0xfffffff9
10003d14:	e9 f3 1a 00 00       	jmp    1000580c <ssfn_render+0x1e02>
10003d19:	bb 04 00 00 00       	mov    ebx,0x4
10003d1e:	eb e5                	jmp    10003d05 <ssfn_render+0x2fb>
10003d20:	85 c9                	test   ecx,ecx
10003d22:	75 28                	jne    10003d4c <ssfn_render+0x342>
10003d24:	83 bc 85 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+eax*4+0xf5a4],0x0
10003d2c:	74 1b                	je     10003d49 <ssfn_render+0x33f>
10003d2e:	8b 54 85 00          	mov    edx,DWORD PTR [ebp+eax*4+0x0]
10003d32:	8b 12                	mov    edx,DWORD PTR [edx]
10003d34:	85 d2                	test   edx,edx
10003d36:	74 11                	je     10003d49 <ssfn_render+0x33f>
10003d38:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
10003d3b:	80 3c 32 00          	cmp    BYTE PTR [edx+esi*1],0x0
10003d3f:	78 08                	js     10003d49 <ssfn_render+0x33f>
10003d41:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
10003d44:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
10003d47:	01 d1                	add    ecx,edx
10003d49:	40                   	inc    eax
10003d4a:	eb bb                	jmp    10003d07 <ssfn_render+0x2fd>
10003d4c:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
10003d4f:	b8 fd ff ff ff       	mov    eax,0xfffffffd
10003d54:	85 f6                	test   esi,esi
10003d56:	0f 84 b0 1a 00 00    	je     1000580c <ssfn_render+0x1e02>
10003d5c:	80 7e 0b 00          	cmp    BYTE PTR [esi+0xb],0x0
10003d60:	0f 84 a6 1a 00 00    	je     1000580c <ssfn_render+0x1e02>
10003d66:	8b 9d c0 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5c0]
10003d6c:	85 db                	test   ebx,ebx
10003d6e:	0f 84 98 1a 00 00    	je     1000580c <ssfn_render+0x1e02>
10003d74:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
10003d7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003d7f:	c1 e8 10             	shr    eax,0x10
10003d82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003d86:	83 f8 10             	cmp    eax,0x10
10003d89:	0f 87 ab fc ff ff    	ja     10003a3a <ssfn_render+0x30>
10003d8f:	8d 41 06             	lea    eax,[ecx+0x6]
10003d92:	89 8d 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],ecx
10003d98:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10003d9c:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
10003da0:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10003da6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003daa:	0f ba e0 0c          	bt     eax,0xc
10003dae:	72 22                	jb     10003dd2 <ssfn_render+0x3c8>
10003db0:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10003db3:	83 e0 0f             	and    eax,0xf
10003db6:	3c 03                	cmp    al,0x3
10003db8:	74 18                	je     10003dd2 <ssfn_render+0x3c8>
10003dba:	8a 56 0c             	mov    dl,BYTE PTR [esi+0xc]
10003dbd:	84 d2                	test   dl,dl
10003dbf:	74 11                	je     10003dd2 <ssfn_render+0x3c8>
10003dc1:	0f b6 fa             	movzx  edi,dl
10003dc4:	0f b6 46 0b          	movzx  eax,BYTE PTR [esi+0xb]
10003dc8:	0f af c3             	imul   eax,ebx
10003dcb:	99                   	cdq    
10003dcc:	f7 ff                	idiv   edi
10003dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10003dd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003dd6:	25 00 02 00 00       	and    eax,0x200
10003ddb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10003ddf:	75 34                	jne    10003e15 <ssfn_render+0x40b>
10003de1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003de5:	8b 84 85 28 f5 00 00 	mov    eax,DWORD PTR [ebp+eax*4+0xf528]
10003dec:	85 c0                	test   eax,eax
10003dee:	74 25                	je     10003e15 <ssfn_render+0x40b>
10003df0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10003df4:	0f b6 d6             	movzx  edx,dh
10003df7:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10003dfa:	85 c0                	test   eax,eax
10003dfc:	74 17                	je     10003e15 <ssfn_render+0x40b>
10003dfe:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
10003e03:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
10003e06:	85 c0                	test   eax,eax
10003e08:	74 0b                	je     10003e15 <ssfn_render+0x40b>
10003e0a:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003e10:	e9 cf 0c 00 00       	jmp    10004ae4 <ssfn_render+0x10da>
10003e15:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10003e19:	0f b6 7e 0b          	movzx  edi,BYTE PTR [esi+0xb]
10003e1d:	89 04 24             	mov    DWORD PTR [esp],eax
10003e20:	f6 44 24 08 40       	test   BYTE PTR [esp+0x8],0x40
10003e25:	75 10                	jne    10003e37 <ssfn_render+0x42d>
10003e27:	89 3c 24             	mov    DWORD PTR [esp],edi
10003e2a:	39 fb                	cmp    ebx,edi
10003e2c:	7e 09                	jle    10003e37 <ssfn_render+0x42d>
10003e2e:	83 c3 04             	add    ebx,0x4
10003e31:	83 e3 fc             	and    ebx,0xfffffffc
10003e34:	89 1c 24             	mov    DWORD PTR [esp],ebx
10003e37:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
10003e3c:	f6 44 24 08 02       	test   BYTE PTR [esp+0x8],0x2
10003e41:	74 10                	je     10003e53 <ssfn_render+0x449>
10003e43:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10003e46:	c0 e8 05             	shr    al,0x5
10003e49:	83 f0 01             	xor    eax,0x1
10003e4c:	83 e0 01             	and    eax,0x1
10003e4f:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
10003e53:	c6 44 24 40 00       	mov    BYTE PTR [esp+0x40],0x0
10003e58:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
10003e5d:	74 10                	je     10003e6f <ssfn_render+0x465>
10003e5f:	f6 46 08 10          	test   BYTE PTR [esi+0x8],0x10
10003e63:	75 0a                	jne    10003e6f <ssfn_render+0x465>
10003e65:	8d 47 40             	lea    eax,[edi+0x40]
10003e68:	c1 f8 06             	sar    eax,0x6
10003e6b:	88 44 24 40          	mov    BYTE PTR [esp+0x40],al
10003e6f:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
10003e73:	0f af 04 24          	imul   eax,DWORD PTR [esp]
10003e77:	8d 44 07 ff          	lea    eax,[edi+eax*1-0x1]
10003e7b:	99                   	cdq    
10003e7c:	f7 ff                	idiv   edi
10003e7e:	89 c1                	mov    ecx,eax
10003e80:	31 c0                	xor    eax,eax
10003e82:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10003e87:	74 0b                	je     10003e94 <ssfn_render+0x48a>
10003e89:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003e8c:	bb 04 00 00 00       	mov    ebx,0x4
10003e91:	99                   	cdq    
10003e92:	f7 fb                	idiv   ebx
10003e94:	0f b6 7c 24 40       	movzx  edi,BYTE PTR [esp+0x40]
10003e99:	01 c8                	add    eax,ecx
10003e9b:	8b 34 24             	mov    esi,DWORD PTR [esp]
10003e9e:	01 f8                	add    eax,edi
10003ea0:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10003ea4:	0f af f0             	imul   esi,eax
10003ea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003eab:	81 fe ff f4 00 00    	cmp    esi,0xf4ff
10003eb1:	b8 fa ff ff ff       	mov    eax,0xfffffffa
10003eb6:	0f 8f 50 19 00 00    	jg     1000580c <ssfn_render+0x1e02>
10003ebc:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
10003ec1:	0f 85 e4 00 00 00    	jne    10003fab <ssfn_render+0x5a1>
10003ec7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003ecb:	8d 5c 85 00          	lea    ebx,[ebp+eax*4+0x0]
10003ecf:	83 bb 28 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf528],0x0
10003ed6:	75 2f                	jne    10003f07 <ssfn_render+0x4fd>
10003ed8:	83 ec 0c             	sub    esp,0xc
10003edb:	68 00 04 00 00       	push   0x400
10003ee0:	e8 fc ff ff ff       	call   10003ee1 <ssfn_render+0x4d7>	10003ee1: R_386_PC32	malloc
10003ee5:	83 c4 10             	add    esp,0x10
10003ee8:	89 83 28 f5 00 00    	mov    DWORD PTR [ebx+0xf528],eax
10003eee:	85 c0                	test   eax,eax
10003ef0:	75 08                	jne    10003efa <ssfn_render+0x4f0>
10003ef2:	83 c8 ff             	or     eax,0xffffffff
10003ef5:	e9 12 19 00 00       	jmp    1000580c <ssfn_render+0x1e02>
10003efa:	89 c7                	mov    edi,eax
10003efc:	b9 00 01 00 00       	mov    ecx,0x100
10003f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10003f05:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003f0b:	0f b6 fc             	movzx  edi,ah
10003f0e:	8b 83 28 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf528]
10003f14:	8d 14 b8             	lea    edx,[eax+edi*4]
10003f17:	83 3a 00             	cmp    DWORD PTR [edx],0x0
10003f1a:	75 32                	jne    10003f4e <ssfn_render+0x544>
10003f1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003f20:	83 ec 0c             	sub    esp,0xc
10003f23:	68 00 04 00 00       	push   0x400
10003f28:	e8 fc ff ff ff       	call   10003f29 <ssfn_render+0x51f>	10003f29: R_386_PC32	malloc
10003f2d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
10003f31:	83 c4 10             	add    esp,0x10
10003f34:	89 02                	mov    DWORD PTR [edx],eax
10003f36:	8b 83 28 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf528]
10003f3c:	8b 14 b8             	mov    edx,DWORD PTR [eax+edi*4]
10003f3f:	85 d2                	test   edx,edx
10003f41:	74 af                	je     10003ef2 <ssfn_render+0x4e8>
10003f43:	b9 00 01 00 00       	mov    ecx,0x100
10003f48:	31 c0                	xor    eax,eax
10003f4a:	89 d7                	mov    edi,edx
10003f4c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10003f4e:	8b 9c 24 d0 00 00 00 	mov    ebx,DWORD PTR [esp+0xd0]
10003f55:	83 ec 0c             	sub    esp,0xc
10003f58:	0f b6 ff             	movzx  edi,bh
10003f5b:	89 d8                	mov    eax,ebx
10003f5d:	0f b6 db             	movzx  ebx,bl
10003f60:	c1 e8 10             	shr    eax,0x10
10003f63:	8d 54 85 00          	lea    edx,[ebp+eax*4+0x0]
10003f67:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10003f6b:	8b 82 28 f5 00 00    	mov    eax,DWORD PTR [edx+0xf528]
10003f71:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10003f74:	8d 0c 98             	lea    ecx,[eax+ebx*4]
10003f77:	8d 46 08             	lea    eax,[esi+0x8]
10003f7a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10003f7e:	50                   	push   eax
10003f7f:	e8 fc ff ff ff       	call   10003f80 <ssfn_render+0x576>	10003f80: R_386_PC32	malloc
10003f84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003f88:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10003f8c:	89 01                	mov    DWORD PTR [ecx],eax
10003f8e:	83 c4 10             	add    esp,0x10
10003f91:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003f97:	8b 82 28 f5 00 00    	mov    eax,DWORD PTR [edx+0xf528]
10003f9d:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10003fa0:	83 3c 98 00          	cmp    DWORD PTR [eax+ebx*4],0x0
10003fa4:	75 0e                	jne    10003fb4 <ssfn_render+0x5aa>
10003fa6:	e9 47 ff ff ff       	jmp    10003ef2 <ssfn_render+0x4e8>
10003fab:	8d 45 1c             	lea    eax,[ebp+0x1c]
10003fae:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10003fb4:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10003fba:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10003fbe:	74 29                	je     10003fe9 <ssfn_render+0x5df>
10003fc0:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10003fc5:	74 22                	je     10003fe9 <ssfn_render+0x5df>
10003fc7:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10003fca:	bb 04 00 00 00       	mov    ebx,0x4
10003fcf:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10003fd3:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
10003fd7:	89 cf                	mov    edi,ecx
10003fd9:	29 c7                	sub    edi,eax
10003fdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
10003fde:	0f af c7             	imul   eax,edi
10003fe1:	99                   	cdq    
10003fe2:	f7 fb                	idiv   ebx
10003fe4:	99                   	cdq    
10003fe5:	f7 f9                	idiv   ecx
10003fe7:	eb 02                	jmp    10003feb <ssfn_render+0x5e1>
10003fe9:	31 c0                	xor    eax,eax
10003feb:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10003ff1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10003ff5:	8a 1c 24             	mov    bl,BYTE PTR [esp]
10003ff8:	66 89 3a             	mov    WORD PTR [edx],di
10003ffb:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
10004003:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10004009:	c6 44 24 0c fe       	mov    BYTE PTR [esp+0xc],0xfe
1000400e:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
10004011:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10004017:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000401d:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
10004020:	01 c3                	add    ebx,eax
10004022:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
10004025:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
1000402b:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
10004031:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
10004034:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
10004037:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
1000403d:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10004043:	8a 12                	mov    dl,BYTE PTR [edx]
10004045:	83 e2 3f             	and    edx,0x3f
10004048:	01 d0                	add    eax,edx
1000404a:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
1000404d:	89 f1                	mov    ecx,esi
1000404f:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004055:	8d 50 08             	lea    edx,[eax+0x8]
10004058:	b0 ff                	mov    al,0xff
1000405a:	89 d7                	mov    edi,edx
1000405c:	f3 aa                	rep stos BYTE PTR es:[edi],al
1000405e:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004064:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
10004068:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000406e:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
10004072:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004075:	c1 e0 04             	shl    eax,0x4
10004078:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
1000407c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004080:	c1 e0 04             	shl    eax,0x4
10004083:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10004087:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
1000408d:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
10004091:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
10004095:	0f 8e 17 0a 00 00    	jle    10004ab2 <ssfn_render+0x10a8>
1000409b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000409f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100040a3:	8a 4f 01             	mov    cl,BYTE PTR [edi+0x1]
100040a6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
100040a9:	8a 12                	mov    dl,BYTE PTR [edx]
100040ab:	0f b6 5f 02          	movzx  ebx,BYTE PTR [edi+0x2]
100040af:	83 e2 40             	and    edx,0x40
100040b2:	88 54 24 14          	mov    BYTE PTR [esp+0x14],dl
100040b6:	88 c2                	mov    dl,al
100040b8:	21 ca                	and    edx,ecx
100040ba:	fe c2                	inc    dl
100040bc:	75 14                	jne    100040d2 <ssfn_render+0x6c8>
100040be:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
100040c3:	19 c0                	sbb    eax,eax
100040c5:	8d 44 07 06          	lea    eax,[edi+eax*1+0x6]
100040c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100040cd:	e9 d3 09 00 00       	jmp    10004aa5 <ssfn_render+0x109b>
100040d2:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
100040d6:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
100040d9:	c1 e0 04             	shl    eax,0x4
100040dc:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
100040e0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100040e4:	99                   	cdq    
100040e5:	f7 fe                	idiv   esi
100040e7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100040eb:	0f b6 c1             	movzx  eax,cl
100040ee:	c1 e0 04             	shl    eax,0x4
100040f1:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100040f5:	99                   	cdq    
100040f6:	f7 fe                	idiv   esi
100040f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100040fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004100:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
10004104:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
10004108:	c1 e2 10             	shl    edx,0x10
1000410b:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10004110:	74 0e                	je     10004120 <ssfn_render+0x716>
10004112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004116:	83 44 24 10 06       	add    DWORD PTR [esp+0x10],0x6
1000411b:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
1000411e:	eb 0c                	jmp    1000412c <ssfn_render+0x722>
10004120:	c1 e0 08             	shl    eax,0x8
10004123:	83 44 24 10 05       	add    DWORD PTR [esp+0x10],0x5
10004128:	09 d0                	or     eax,edx
1000412a:	09 c3                	or     ebx,eax
1000412c:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
1000412f:	8a 01                	mov    al,BYTE PTR [ecx]
10004131:	84 c0                	test   al,al
10004133:	0f 88 dc 04 00 00    	js     10004615 <ssfn_render+0xc0b>
10004139:	89 c7                	mov    edi,eax
1000413b:	83 e7 3f             	and    edi,0x3f
1000413e:	a8 40                	test   al,0x40
10004140:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
10004144:	74 10                	je     10004156 <ssfn_render+0x74c>
10004146:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
1000414a:	89 f8                	mov    eax,edi
1000414c:	41                   	inc    ecx
1000414d:	c1 e0 08             	shl    eax,0x8
10004150:	09 c2                	or     edx,eax
10004152:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10004156:	8d 41 01             	lea    eax,[ecx+0x1]
10004159:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10004163:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10004167:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10004172:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004176:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
1000417a:	83 c0 04             	add    eax,0x4
1000417d:	c1 f8 02             	sar    eax,0x2
10004180:	01 c7                	add    edi,eax
10004182:	8b 8c 24 dc 00 00 00 	mov    ecx,DWORD PTR [esp+0xdc]
10004189:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
1000418d:	0f 8f cb 01 00 00    	jg     1000435e <ssfn_render+0x954>
10004193:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10004196:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
1000419a:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
1000419e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100041a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100041a6:	0f b6 07             	movzx  eax,BYTE PTR [edi]
100041a9:	c1 e0 04             	shl    eax,0x4
100041ac:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100041b0:	99                   	cdq    
100041b1:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100041b5:	01 c6                	add    esi,eax
100041b7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
100041bb:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
100041bf:	c1 e0 04             	shl    eax,0x4
100041c2:	0f af 04 24          	imul   eax,DWORD PTR [esp]
100041c6:	99                   	cdq    
100041c7:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100041cb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
100041cf:	01 c3                	add    ebx,eax
100041d1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
100041d5:	89 c8                	mov    eax,ecx
100041d7:	01 c9                	add    ecx,ecx
100041d9:	c1 f8 02             	sar    eax,0x2
100041dc:	83 e1 06             	and    ecx,0x6
100041df:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
100041e3:	d3 f8                	sar    eax,cl
100041e5:	83 e0 03             	and    eax,0x3
100041e8:	89 c1                	mov    ecx,eax
100041ea:	83 f8 02             	cmp    eax,0x2
100041ed:	74 4a                	je     10004239 <ssfn_render+0x82f>
100041ef:	83 f8 03             	cmp    eax,0x3
100041f2:	0f 84 de 00 00 00    	je     100042d6 <ssfn_render+0x8cc>
100041f8:	49                   	dec    ecx
100041f9:	74 20                	je     1000421b <ssfn_render+0x811>
100041fb:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10004201:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10004207:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
1000420d:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10004213:	83 c7 02             	add    edi,0x2
10004216:	e9 37 01 00 00       	jmp    10004352 <ssfn_render+0x948>
1000421b:	83 ec 0c             	sub    esp,0xc
1000421e:	83 c7 02             	add    edi,0x2
10004221:	53                   	push   ebx
10004222:	56                   	push   esi
10004223:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
10004227:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
1000422b:	55                   	push   ebp
1000422c:	e8 f9 e7 ff ff       	call   10002a2a <_ssfn_l>
10004231:	83 c4 20             	add    esp,0x20
10004234:	e9 19 01 00 00       	jmp    10004352 <ssfn_render+0x948>
10004239:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
1000423d:	83 c7 04             	add    edi,0x4
10004240:	c1 e0 04             	shl    eax,0x4
10004243:	0f af 04 24          	imul   eax,DWORD PTR [esp]
10004247:	99                   	cdq    
10004248:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
1000424c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10004250:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10004254:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004258:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
1000425c:	c1 e0 04             	shl    eax,0x4
1000425f:	0f af 04 24          	imul   eax,DWORD PTR [esp]
10004263:	99                   	cdq    
10004264:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
10004268:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
1000426c:	6a 00                	push   0x0
1000426e:	53                   	push   ebx
1000426f:	56                   	push   esi
10004270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10004274:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
10004278:	99                   	cdq    
10004279:	f7 f9                	idiv   ecx
1000427b:	01 d8                	add    eax,ebx
1000427d:	50                   	push   eax
1000427e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10004282:	2b 44 24 5c          	sub    eax,DWORD PTR [esp+0x5c]
10004286:	99                   	cdq    
10004287:	f7 f9                	idiv   ecx
10004289:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
1000428d:	50                   	push   eax
1000428e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004292:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10004296:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
1000429c:	99                   	cdq    
1000429d:	f7 f9                	idiv   ecx
1000429f:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
100042a5:	50                   	push   eax
100042a6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100042aa:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
100042b0:	99                   	cdq    
100042b1:	f7 f9                	idiv   ecx
100042b3:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
100042b9:	50                   	push   eax
100042ba:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
100042c0:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
100042c6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100042ca:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
100042ce:	55                   	push   ebp
100042cf:	e8 6d e8 ff ff       	call   10002b41 <_ssfn_b>
100042d4:	eb 79                	jmp    1000434f <ssfn_render+0x945>
100042d6:	6a 00                	push   0x0
100042d8:	83 c7 06             	add    edi,0x6
100042db:	53                   	push   ebx
100042dc:	56                   	push   esi
100042dd:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
100042e1:	c1 e0 04             	shl    eax,0x4
100042e4:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100042e9:	99                   	cdq    
100042ea:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100042ee:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
100042f2:	50                   	push   eax
100042f3:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
100042f7:	c1 e0 04             	shl    eax,0x4
100042fa:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
100042ff:	99                   	cdq    
10004300:	f7 7c 24 24          	idiv   DWORD PTR [esp+0x24]
10004304:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
10004308:	50                   	push   eax
10004309:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
1000430d:	c1 e0 04             	shl    eax,0x4
10004310:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
10004315:	99                   	cdq    
10004316:	f7 7c 24 28          	idiv   DWORD PTR [esp+0x28]
1000431a:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
1000431e:	50                   	push   eax
1000431f:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10004323:	c1 e0 04             	shl    eax,0x4
10004326:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
1000432b:	99                   	cdq    
1000432c:	f7 7c 24 2c          	idiv   DWORD PTR [esp+0x2c]
10004330:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
10004334:	50                   	push   eax
10004335:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
1000433b:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10004341:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
10004345:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
10004349:	55                   	push   ebp
1000434a:	e8 f2 e7 ff ff       	call   10002b41 <_ssfn_b>
1000434f:	83 c4 30             	add    esp,0x30
10004352:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
10004359:	e9 24 fe ff ff       	jmp    10004182 <ssfn_render+0x778>
1000435e:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10004364:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
1000436a:	75 0e                	jne    1000437a <ssfn_render+0x970>
1000436c:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10004372:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10004378:	74 2e                	je     100043a8 <ssfn_render+0x99e>
1000437a:	8b 9d 80 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf580]
10004380:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10004386:	66 89 04 5a          	mov    WORD PTR [edx+ebx*2],ax
1000438a:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10004390:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10004396:	8b 9d 98 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf598]
1000439c:	66 89 5c 50 02       	mov    WORD PTR [eax+edx*2+0x2],bx
100043a1:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
100043a8:	b3 fe                	mov    bl,0xfe
100043aa:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
100043b1:	0f 8e ee 06 00 00    	jle    10004aa5 <ssfn_render+0x109b>
100043b7:	31 c0                	xor    eax,eax
100043b9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100043c1:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
100043c9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
100043d1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
100043d9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
100043e1:	8b 34 24             	mov    esi,DWORD PTR [esp]
100043e4:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
100043e8:	0f 8d aa 06 00 00    	jge    10004a98 <ssfn_render+0x108e>
100043ee:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
100043f4:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
100043fc:	83 e8 03             	sub    eax,0x3
100043ff:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10004403:	89 f0                	mov    eax,esi
10004405:	31 f6                	xor    esi,esi
10004407:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
1000440b:	c1 f8 02             	sar    eax,0x2
1000440e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10004412:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
10004416:	39 4c 24 4c          	cmp    DWORD PTR [esp+0x4c],ecx
1000441a:	0f 8e 05 01 00 00    	jle    10004525 <ssfn_render+0xb1b>
10004420:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10004426:	89 c8                	mov    eax,ecx
10004428:	40                   	inc    eax
10004429:	01 c0                	add    eax,eax
1000442b:	0f b7 3c 02          	movzx  edi,WORD PTR [edx+eax*1]
1000442f:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10004434:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
10004438:	7d 0c                	jge    10004446 <ssfn_render+0xa3c>
1000443a:	39 5c 24 28          	cmp    DWORD PTR [esp+0x28],ebx
1000443e:	0f 8f d7 00 00 00    	jg     1000451b <ssfn_render+0xb11>
10004444:	eb 0a                	jmp    10004450 <ssfn_render+0xa46>
10004446:	39 5c 24 28          	cmp    DWORD PTR [esp+0x28],ebx
1000444a:	0f 8e cb 00 00 00    	jle    1000451b <ssfn_render+0xb11>
10004450:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10004455:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
10004459:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
1000445e:	89 fa                	mov    edx,edi
10004460:	89 d8                	mov    eax,ebx
10004462:	c1 fa 04             	sar    edx,0x4
10004465:	c1 f8 04             	sar    eax,0x4
10004468:	39 c2                	cmp    edx,eax
1000446a:	75 0a                	jne    10004476 <ssfn_render+0xa6c>
1000446c:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10004470:	01 cf                	add    edi,ecx
10004472:	d1 ff                	sar    edi,1
10004474:	eb 18                	jmp    1000448e <ssfn_render+0xa84>
10004476:	29 fb                	sub    ebx,edi
10004478:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000447c:	2b 4c 24 44          	sub    ecx,DWORD PTR [esp+0x44]
10004480:	29 f8                	sub    eax,edi
10004482:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10004486:	0f af c1             	imul   eax,ecx
10004489:	99                   	cdq    
1000448a:	f7 fb                	idiv   ebx
1000448c:	01 c7                	add    edi,eax
1000448e:	c1 ff 04             	sar    edi,0x4
10004491:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10004496:	74 04                	je     1000449c <ssfn_render+0xa92>
10004498:	03 7c 24 50          	add    edi,DWORD PTR [esp+0x50]
1000449c:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
100044a1:	75 3f                	jne    100044e2 <ssfn_render+0xad8>
100044a3:	80 7c 24 40 00       	cmp    BYTE PTR [esp+0x40],0x0
100044a8:	74 38                	je     100044e2 <ssfn_render+0xad8>
100044aa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
100044ae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100044b2:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
100044b6:	f7 d8                	neg    eax
100044b8:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100044bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100044c0:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
100044c4:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
100044ca:	01 f8                	add    eax,edi
100044cc:	38 5c 01 08          	cmp    BYTE PTR [ecx+eax*1+0x8],bl
100044d0:	74 10                	je     100044e2 <ssfn_render+0xad8>
100044d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100044d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100044da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100044de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100044e2:	31 c0                	xor    eax,eax
100044e4:	39 f0                	cmp    eax,esi
100044e6:	75 0b                	jne    100044f3 <ssfn_render+0xae9>
100044e8:	66 89 bc 44 e0 00 00 00 	mov    WORD PTR [esp+eax*2+0xe0],di
100044f0:	46                   	inc    esi
100044f1:	eb 28                	jmp    1000451b <ssfn_render+0xb11>
100044f3:	0f b7 94 44 e0 00 00 00 	movzx  edx,WORD PTR [esp+eax*2+0xe0]
100044fb:	39 fa                	cmp    edx,edi
100044fd:	7d 03                	jge    10004502 <ssfn_render+0xaf8>
100044ff:	40                   	inc    eax
10004500:	eb e2                	jmp    100044e4 <ssfn_render+0xada>
10004502:	89 f2                	mov    edx,esi
10004504:	4a                   	dec    edx
10004505:	66 8b 8c 54 e0 00 00 00 	mov    cx,WORD PTR [esp+edx*2+0xe0]
1000450d:	39 c2                	cmp    edx,eax
1000450f:	66 89 8c 54 e2 00 00 00 	mov    WORD PTR [esp+edx*2+0xe2],cx
10004517:	7f eb                	jg     10004504 <ssfn_render+0xafa>
10004519:	eb cd                	jmp    100044e8 <ssfn_render+0xade>
1000451b:	83 44 24 30 02       	add    DWORD PTR [esp+0x30],0x2
10004520:	e9 ed fe ff ff       	jmp    10004412 <ssfn_render+0xa08>
10004525:	83 fe 01             	cmp    esi,0x1
10004528:	7e 1f                	jle    10004549 <ssfn_render+0xb3f>
1000452a:	f7 c6 01 00 00 00    	test   esi,0x1
10004530:	74 24                	je     10004556 <ssfn_render+0xb4c>
10004532:	8d 46 ff             	lea    eax,[esi-0x1]
10004535:	66 8b 94 44 e0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xe0]
1000453d:	66 89 94 74 dc 00 00 00 	mov    WORD PTR [esp+esi*2+0xdc],dx
10004545:	89 c6                	mov    esi,eax
10004547:	eb 0d                	jmp    10004556 <ssfn_render+0xb4c>
10004549:	85 f6                	test   esi,esi
1000454b:	0f 84 ac 00 00 00    	je     100045fd <ssfn_render+0xbf3>
10004551:	be 01 00 00 00       	mov    esi,0x1
10004556:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000455c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
10004560:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10004564:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
10004568:	39 d1                	cmp    ecx,edx
1000456a:	7d 0b                	jge    10004577 <ssfn_render+0xb6d>
1000456c:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
10004570:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
10004574:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10004577:	31 d2                	xor    edx,edx
10004579:	8d 46 ff             	lea    eax,[esi-0x1]
1000457c:	39 d0                	cmp    eax,edx
1000457e:	7e 78                	jle    100045f8 <ssfn_render+0xbee>
10004580:	0f b7 84 54 e0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xe0]
10004588:	0f b7 8c 54 e2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xe2]
10004590:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
10004594:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10004598:	79 02                	jns    1000459c <ssfn_render+0xb92>
1000459a:	31 c0                	xor    eax,eax
1000459c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100045a0:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
100045a4:	39 cf                	cmp    edi,ecx
100045a6:	7e 04                	jle    100045ac <ssfn_render+0xba2>
100045a8:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
100045ac:	85 d2                	test   edx,edx
100045ae:	74 12                	je     100045c2 <ssfn_render+0xbb8>
100045b0:	0f b7 8c 54 de 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xde]
100045b8:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
100045bc:	39 c8                	cmp    eax,ecx
100045be:	7d 02                	jge    100045c2 <ssfn_render+0xbb8>
100045c0:	89 c8                	mov    eax,ecx
100045c2:	3b 44 24 44          	cmp    eax,DWORD PTR [esp+0x44]
100045c6:	7d 2b                	jge    100045f3 <ssfn_render+0xbe9>
100045c8:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100045cc:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
100045d2:	8d 3c 01             	lea    edi,[ecx+eax*1]
100045d5:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
100045d9:	88 4c 24 30          	mov    BYTE PTR [esp+0x30],cl
100045dd:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
100045e1:	75 05                	jne    100045e8 <ssfn_render+0xbde>
100045e3:	c6 44 24 30 ff       	mov    BYTE PTR [esp+0x30],0xff
100045e8:	8a 4c 24 30          	mov    cl,BYTE PTR [esp+0x30]
100045ec:	40                   	inc    eax
100045ed:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
100045f1:	eb cf                	jmp    100045c2 <ssfn_render+0xbb8>
100045f3:	83 c2 02             	add    edx,0x2
100045f6:	eb 81                	jmp    10004579 <ssfn_render+0xb6f>
100045f8:	83 e6 fe             	and    esi,0xfffffffe
100045fb:	89 f1                	mov    ecx,esi
100045fd:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004601:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
10004605:	01 7c 24 3c          	add    DWORD PTR [esp+0x3c],edi
10004609:	83 44 24 28 10       	add    DWORD PTR [esp+0x28],0x10
1000460e:	b0 01                	mov    al,0x1
10004610:	e9 cc fd ff ff       	jmp    100043e1 <ssfn_render+0x9d7>
10004615:	88 c2                	mov    dl,al
10004617:	80 e2 60             	and    dl,0x60
1000461a:	0f 85 a4 02 00 00    	jne    100048c4 <ssfn_render+0xeba>
10004620:	83 e0 1f             	and    eax,0x1f
10004623:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004627:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
1000462e:	c1 fb 04             	sar    ebx,0x4
10004631:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004635:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10004639:	40                   	inc    eax
1000463a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
1000463e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004642:	c1 f8 04             	sar    eax,0x4
10004645:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004649:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000464c:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10004651:	99                   	cdq    
10004652:	f7 fe                	idiv   esi
10004654:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004658:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000465b:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10004660:	99                   	cdq    
10004661:	f7 fe                	idiv   esi
10004663:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004667:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000466d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10004671:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10004675:	8d 14 3b             	lea    edx,[ebx+edi*1]
10004678:	39 d6                	cmp    esi,edx
1000467a:	7d 0a                	jge    10004686 <ssfn_render+0xc7c>
1000467c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10004680:	8d 14 3b             	lea    edx,[ebx+edi*1]
10004683:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10004686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000468a:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
10004692:	0f af c3             	imul   eax,ebx
10004695:	31 f6                	xor    esi,esi
10004697:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
1000469b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000469f:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
100046a3:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
100046a7:	8b 04 24             	mov    eax,DWORD PTR [esp]
100046aa:	29 d8                	sub    eax,ebx
100046ac:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
100046b0:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
100046b4:	0f 8d b1 00 00 00    	jge    1000476b <ssfn_render+0xd61>
100046ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100046be:	99                   	cdq    
100046bf:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
100046c3:	89 c7                	mov    edi,eax
100046c5:	31 c0                	xor    eax,eax
100046c7:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
100046cc:	74 0e                	je     100046dc <ssfn_render+0xcd2>
100046ce:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100046d2:	bb 04 00 00 00       	mov    ebx,0x4
100046d7:	29 f0                	sub    eax,esi
100046d9:	99                   	cdq    
100046da:	f7 fb                	idiv   ebx
100046dc:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
100046e0:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
100046eb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100046ef:	0f af 7c 24 28       	imul   edi,DWORD PTR [esp+0x28]
100046f4:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
100046fb:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
100046ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004703:	39 d8                	cmp    eax,ebx
10004705:	7d 4e                	jge    10004755 <ssfn_render+0xd4b>
10004707:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
1000470b:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10004710:	99                   	cdq    
10004711:	f7 fb                	idiv   ebx
10004713:	8d 14 07             	lea    edx,[edi+eax*1]
10004716:	83 e0 07             	and    eax,0x7
10004719:	c1 fa 03             	sar    edx,0x3
1000471c:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
10004721:	0f a3 c2             	bt     edx,eax
10004724:	72 0e                	jb     10004734 <ssfn_render+0xd2a>
10004726:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000472a:	43                   	inc    ebx
1000472b:	89 9c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ebx
10004732:	eb c0                	jmp    100046f4 <ssfn_render+0xcea>
10004734:	31 c0                	xor    eax,eax
10004736:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
1000473a:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
1000473e:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10004744:	40                   	inc    eax
10004745:	03 54 24 50          	add    edx,DWORD PTR [esp+0x50]
10004749:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
1000474d:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
10004751:	7d e3                	jge    10004736 <ssfn_render+0xd2c>
10004753:	eb d1                	jmp    10004726 <ssfn_render+0xd1c>
10004755:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004759:	46                   	inc    esi
1000475a:	01 7c 24 4c          	add    DWORD PTR [esp+0x4c],edi
1000475e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10004762:	01 7c 24 3c          	add    DWORD PTR [esp+0x3c],edi
10004766:	e9 45 ff ff ff       	jmp    100046b0 <ssfn_render+0xca6>
1000476b:	b3 fe                	mov    bl,0xfe
1000476d:	f7 85 bc f5 00 00 40 20 00 00 	test   DWORD PTR [ebp+0xf5bc],0x2040
10004777:	0f 85 28 03 00 00    	jne    10004aa5 <ssfn_render+0x109b>
1000477d:	31 c0                	xor    eax,eax
1000477f:	8b 34 24             	mov    esi,DWORD PTR [esp]
10004782:	80 7c 24 0c fd       	cmp    BYTE PTR [esp+0xc],0xfd
10004787:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
1000478b:	0f 95 c0             	setne  al
1000478e:	8b 94 24 dc 00 00 00 	mov    edx,DWORD PTR [esp+0xdc]
10004795:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004799:	4f                   	dec    edi
1000479a:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000479e:	81 44 24 18 fc 00 00 00 	add    DWORD PTR [esp+0x18],0xfc
100047a6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100047aa:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
100047ae:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
100047b2:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
100047b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100047ba:	31 c0                	xor    eax,eax
100047bc:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100047bf:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100047c3:	83 c1 04             	add    ecx,0x4
100047c6:	3b 4c 24 28          	cmp    ecx,DWORD PTR [esp+0x28]
100047ca:	7d 19                	jge    100047e5 <ssfn_render+0xddb>
100047cc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
100047d0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
100047d4:	46                   	inc    esi
100047d5:	4f                   	dec    edi
100047d6:	89 74 24 2c          	mov    DWORD PTR [esp+0x2c],esi
100047da:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
100047de:	be 01 00 00 00       	mov    esi,0x1
100047e3:	eb 36                	jmp    1000481b <ssfn_render+0xe11>
100047e5:	84 c0                	test   al,al
100047e7:	0f 84 b6 02 00 00    	je     10004aa3 <ssfn_render+0x1099>
100047ed:	89 94 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],edx
100047f4:	e9 aa 02 00 00       	jmp    10004aa3 <ssfn_render+0x1099>
100047f9:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100047ff:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
10004804:	74 26                	je     1000482c <ssfn_render+0xe22>
10004806:	41                   	inc    ecx
10004807:	40                   	inc    eax
10004808:	89 ca                	mov    edx,ecx
1000480a:	3b 4c 24 3c          	cmp    ecx,DWORD PTR [esp+0x3c]
1000480e:	7c e9                	jl     100047f9 <ssfn_render+0xdef>
10004810:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004814:	46                   	inc    esi
10004815:	01 7c 24 2c          	add    DWORD PTR [esp+0x2c],edi
10004819:	b0 01                	mov    al,0x1
1000481b:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
1000481f:	7e 41                	jle    10004862 <ssfn_render+0xe58>
10004821:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10004825:	b9 01 00 00 00       	mov    ecx,0x1
1000482a:	eb dc                	jmp    10004808 <ssfn_render+0xdfe>
1000482c:	89 c7                	mov    edi,eax
1000482e:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
10004832:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
10004836:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
1000483a:	74 0c                	je     10004848 <ssfn_render+0xe3e>
1000483c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
10004840:	01 d7                	add    edi,edx
10004842:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
10004846:	75 be                	jne    10004806 <ssfn_render+0xdfc>
10004848:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
1000484c:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
10004850:	74 06                	je     10004858 <ssfn_render+0xe4e>
10004852:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
10004856:	75 ae                	jne    10004806 <ssfn_render+0xdfc>
10004858:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
1000485c:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
10004860:	eb a4                	jmp    10004806 <ssfn_render+0xdfc>
10004862:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10004866:	bb 01 00 00 00       	mov    ebx,0x1
1000486b:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000486f:	39 5c 24 24          	cmp    DWORD PTR [esp+0x24],ebx
10004873:	7e 3d                	jle    100048b2 <ssfn_render+0xea8>
10004875:	b8 01 00 00 00       	mov    eax,0x1
1000487a:	89 c2                	mov    edx,eax
1000487c:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
10004880:	7d 23                	jge    100048a5 <ssfn_render+0xe9b>
10004882:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10004886:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
1000488c:	8d 14 07             	lea    edx,[edi+eax*1]
1000488f:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
10004894:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10004898:	75 08                	jne    100048a2 <ssfn_render+0xe98>
1000489a:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
1000489e:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
100048a2:	40                   	inc    eax
100048a3:	eb d5                	jmp    1000487a <ssfn_render+0xe70>
100048a5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100048a9:	43                   	inc    ebx
100048aa:	01 7c 24 2c          	add    DWORD PTR [esp+0x2c],edi
100048ae:	b0 01                	mov    al,0x1
100048b0:	eb bd                	jmp    1000486f <ssfn_render+0xe65>
100048b2:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100048b5:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100048b9:	01 c9                	add    ecx,ecx
100048bb:	29 4c 24 28          	sub    DWORD PTR [esp+0x28],ecx
100048bf:	e9 f8 fe ff ff       	jmp    100047bc <ssfn_render+0xdb2>
100048c4:	b3 fe                	mov    bl,0xfe
100048c6:	80 fa 20             	cmp    dl,0x20
100048c9:	0f 85 d6 01 00 00    	jne    10004aa5 <ssfn_render+0x109b>
100048cf:	89 c3                	mov    ebx,eax
100048d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
100048d5:	c1 e3 08             	shl    ebx,0x8
100048d8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
100048dc:	81 e3 00 1f 00 00    	and    ebx,0x1f00
100048e2:	c1 ff 04             	sar    edi,0x4
100048e5:	09 c3                	or     ebx,eax
100048e7:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
100048eb:	43                   	inc    ebx
100048ec:	40                   	inc    eax
100048ed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100048f1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
100048f5:	40                   	inc    eax
100048f6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100048fa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100048fe:	c1 f8 04             	sar    eax,0x4
10004901:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004905:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004908:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
1000490d:	99                   	cdq    
1000490e:	f7 fe                	idiv   esi
10004910:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004914:	8b 04 24             	mov    eax,DWORD PTR [esp]
10004917:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
1000491c:	99                   	cdq    
1000491d:	f7 fe                	idiv   esi
1000491f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004923:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004929:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
1000492d:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10004931:	01 fa                	add    edx,edi
10004933:	39 d6                	cmp    esi,edx
10004935:	7d 0a                	jge    10004941 <ssfn_render+0xf37>
10004937:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
1000493b:	8d 14 37             	lea    edx,[edi+esi*1]
1000493e:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10004941:	83 c1 04             	add    ecx,0x4
10004944:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
1000494f:	8d 04 19             	lea    eax,[ecx+ebx*1]
10004952:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004956:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
1000495a:	72 30                	jb     1000498c <ssfn_render+0xf82>
1000495c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10004960:	8b 34 24             	mov    esi,DWORD PTR [esp]
10004963:	0f af d7             	imul   edx,edi
10004966:	29 fe                	sub    esi,edi
10004968:	03 54 24 24          	add    edx,DWORD PTR [esp+0x24]
1000496c:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
10004973:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
10004977:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
1000497f:	31 d2                	xor    edx,edx
10004981:	31 db                	xor    ebx,ebx
10004983:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10004987:	e9 d2 00 00 00       	jmp    10004a5e <ssfn_render+0x1054>
1000498c:	8a 11                	mov    dl,BYTE PTR [ecx]
1000498e:	89 d0                	mov    eax,edx
10004990:	83 e0 7f             	and    eax,0x7f
10004993:	84 d2                	test   dl,dl
10004995:	8d 70 01             	lea    esi,[eax+0x1]
10004998:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
1000499c:	78 09                	js     100049a7 <ssfn_render+0xf9d>
1000499e:	41                   	inc    ecx
1000499f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100049a3:	89 ca                	mov    edx,ecx
100049a5:	eb 3d                	jmp    100049e4 <ssfn_render+0xfda>
100049a7:	48                   	dec    eax
100049a8:	8b 94 24 dc 00 00 00 	mov    edx,DWORD PTR [esp+0xdc]
100049af:	83 f8 fe             	cmp    eax,0xfffffffe
100049b2:	74 16                	je     100049ca <ssfn_render+0xfc0>
100049b4:	8d 5a 01             	lea    ebx,[edx+0x1]
100049b7:	89 9c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ebx
100049be:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
100049c1:	88 9c 14 e0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5e0],bl
100049c8:	eb dd                	jmp    100049a7 <ssfn_render+0xf9d>
100049ca:	83 c1 02             	add    ecx,0x2
100049cd:	eb 87                	jmp    10004956 <ssfn_render+0xf4c>
100049cf:	42                   	inc    edx
100049d0:	8d 73 01             	lea    esi,[ebx+0x1]
100049d3:	89 b4 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],esi
100049da:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
100049dd:	88 84 1c e0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5e0],al
100049e4:	ff 4c 24 18          	dec    DWORD PTR [esp+0x18]
100049e8:	8b 9c 24 dc 00 00 00 	mov    ebx,DWORD PTR [esp+0xdc]
100049ef:	83 7c 24 18 fe       	cmp    DWORD PTR [esp+0x18],0xfffffffe
100049f4:	75 d9                	jne    100049cf <ssfn_render+0xfc5>
100049f6:	03 4c 24 3c          	add    ecx,DWORD PTR [esp+0x3c]
100049fa:	e9 57 ff ff ff       	jmp    10004956 <ssfn_render+0xf4c>
100049ff:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10004a03:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
10004a07:	99                   	cdq    
10004a08:	f7 7c 24 14          	idiv   DWORD PTR [esp+0x14]
10004a0c:	0f af c8             	imul   ecx,eax
10004a0f:	31 c0                	xor    eax,eax
10004a11:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10004a16:	74 0e                	je     10004a26 <ssfn_render+0x101c>
10004a18:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10004a1c:	be 04 00 00 00       	mov    esi,0x4
10004a21:	29 d8                	sub    eax,ebx
10004a23:	99                   	cdq    
10004a24:	f7 fe                	idiv   esi
10004a26:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10004a2a:	31 f6                	xor    esi,esi
10004a2c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10004a30:	31 ff                	xor    edi,edi
10004a32:	8d 84 24 e0 05 01 00 	lea    eax,[esp+0x105e0]
10004a39:	01 c1                	add    ecx,eax
10004a3b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
10004a3f:	7f 30                	jg     10004a71 <ssfn_render+0x1067>
10004a41:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004a45:	85 c0                	test   eax,eax
10004a47:	79 02                	jns    10004a4b <ssfn_render+0x1041>
10004a49:	31 c0                	xor    eax,eax
10004a4b:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10004a4f:	43                   	inc    ebx
10004a50:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
10004a54:	b2 01                	mov    dl,0x1
10004a56:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10004a5a:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
10004a5e:	3b 5c 24 14          	cmp    ebx,DWORD PTR [esp+0x14]
10004a62:	7c 9b                	jl     100049ff <ssfn_render+0xff5>
10004a64:	84 d2                	test   dl,dl
10004a66:	74 3b                	je     10004aa3 <ssfn_render+0x1099>
10004a68:	89 84 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],eax
10004a6f:	eb 32                	jmp    10004aa3 <ssfn_render+0x1099>
10004a71:	89 f0                	mov    eax,esi
10004a73:	99                   	cdq    
10004a74:	f7 7c 24 0c          	idiv   DWORD PTR [esp+0xc]
10004a78:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10004a7f:	3c ff                	cmp    al,0xff
10004a81:	74 0e                	je     10004a91 <ssfn_render+0x1087>
10004a83:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
10004a87:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10004a8d:	88 44 17 08          	mov    BYTE PTR [edi+edx*1+0x8],al
10004a91:	47                   	inc    edi
10004a92:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
10004a96:	eb a3                	jmp    10004a3b <ssfn_render+0x1031>
10004a98:	84 c0                	test   al,al
10004a9a:	74 07                	je     10004aa3 <ssfn_render+0x1099>
10004a9c:	89 8c 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],ecx
10004aa3:	b3 fe                	mov    bl,0xfe
10004aa5:	ff 44 24 48          	inc    DWORD PTR [esp+0x48]
10004aa9:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
10004aad:	e9 d5 f5 ff ff       	jmp    10004087 <ssfn_render+0x67d>
10004ab2:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004ab8:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10004abb:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
10004abe:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
10004ac1:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10004ac7:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
10004acb:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
10004acf:	89 f0                	mov    eax,esi
10004ad1:	89 d9                	mov    ecx,ebx
10004ad3:	43                   	inc    ebx
10004ad4:	39 de                	cmp    esi,ebx
10004ad6:	7e 08                	jle    10004ae0 <ssfn_render+0x10d6>
10004ad8:	48                   	dec    eax
10004ad9:	29 c8                	sub    eax,ecx
10004adb:	88 42 07             	mov    BYTE PTR [edx+0x7],al
10004ade:	eb 04                	jmp    10004ae4 <ssfn_render+0x10da>
10004ae0:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
10004ae4:	83 bc 24 04 06 01 00 00 	cmp    DWORD PTR [esp+0x10604],0x0
10004aec:	0f 84 92 0c 00 00    	je     10005784 <ssfn_render+0x1d7a>
10004af2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004af6:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
10004afc:	7d 06                	jge    10004b04 <ssfn_render+0x10fa>
10004afe:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10004b04:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
10004b0a:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
10004b0d:	0f b6 4e 02          	movzx  ecx,BYTE PTR [esi+0x2]
10004b11:	0f b7 16             	movzx  edx,WORD PTR [esi]
10004b14:	0f b6 7e 03          	movzx  edi,BYTE PTR [esi+0x3]
10004b18:	0f af 54 24 04       	imul   edx,DWORD PTR [esp+0x4]
10004b1d:	89 d0                	mov    eax,edx
10004b1f:	99                   	cdq    
10004b20:	f7 f9                	idiv   ecx
10004b22:	0f b6 4b 0b          	movzx  ecx,BYTE PTR [ebx+0xb]
10004b26:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10004b2a:	0f b6 46 04          	movzx  eax,BYTE PTR [esi+0x4]
10004b2e:	88 04 24             	mov    BYTE PTR [esp],al
10004b31:	29 f8                	sub    eax,edi
10004b33:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004b38:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10004b3c:	99                   	cdq    
10004b3d:	f7 f9                	idiv   ecx
10004b3f:	31 d2                	xor    edx,edx
10004b41:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10004b45:	83 bd c0 f5 00 00 10 	cmp    DWORD PTR [ebp+0xf5c0],0x10
10004b4c:	0f 9f c2             	setg   dl
10004b4f:	42                   	inc    edx
10004b50:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10004b54:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
10004b58:	7d 08                	jge    10004b62 <ssfn_render+0x1158>
10004b5a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004b5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10004b62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004b66:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10004b6a:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
10004b6e:	7d 04                	jge    10004b74 <ssfn_render+0x116a>
10004b70:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10004b74:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
10004b78:	74 46                	je     10004bc0 <ssfn_render+0x11b6>
10004b7a:	0f af 7c 24 04       	imul   edi,DWORD PTR [esp+0x4]
10004b7f:	8d 44 39 ff          	lea    eax,[ecx+edi*1-0x1]
10004b83:	99                   	cdq    
10004b84:	f7 f9                	idiv   ecx
10004b86:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
10004b8c:	81 e1 00 08 00 00    	and    ecx,0x800
10004b92:	74 04                	je     10004b98 <ssfn_render+0x118e>
10004b94:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004b98:	01 c1                	add    ecx,eax
10004b9a:	89 8d 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],ecx
10004ba0:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
10004ba4:	0f b6 46 06          	movzx  eax,BYTE PTR [esi+0x6]
10004ba8:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004bad:	8d 44 03 ff          	lea    eax,[ebx+eax*1-0x1]
10004bb1:	99                   	cdq    
10004bb2:	f7 fb                	idiv   ebx
10004bb4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004bb8:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
10004bbe:	eb 1e                	jmp    10004bde <ssfn_render+0x11d4>
10004bc0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004bc4:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
10004bce:	d1 f9                	sar    ecx,1
10004bd0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
10004bd8:	89 8d 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],ecx
10004bde:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004be5:	8b 00                	mov    eax,DWORD PTR [eax]
10004be7:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10004beb:	85 c0                	test   eax,eax
10004bed:	0f 84 42 09 00 00    	je     10005535 <ssfn_render+0x1b2b>
10004bf3:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004bfa:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
10004bfe:	89 d3                	mov    ebx,edx
10004c00:	89 d0                	mov    eax,edx
10004c02:	66 c1 fb 0b          	sar    bx,0xb
10004c06:	c1 f8 1f             	sar    eax,0x1f
10004c09:	31 c2                	xor    edx,eax
10004c0b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
10004c0f:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
10004c13:	88 d8                	mov    al,bl
10004c15:	83 e0 10             	and    eax,0x10
10004c18:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
10004c1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10004c20:	83 c0 40             	add    eax,0x40
10004c23:	c1 f8 06             	sar    eax,0x6
10004c26:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
10004c2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10004c31:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10004c35:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
10004c39:	7d 08                	jge    10004c43 <ssfn_render+0x1239>
10004c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004c3f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10004c43:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10004c46:	0f b6 58 0b          	movzx  ebx,BYTE PTR [eax+0xb]
10004c4a:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10004c4e:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10004c53:	8d 44 03 ff          	lea    eax,[ebx+eax*1-0x1]
10004c57:	99                   	cdq    
10004c58:	f7 fb                	idiv   ebx
10004c5a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10004c5e:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004c65:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10004c68:	0f b6 fc             	movzx  edi,ah
10004c6b:	89 c2                	mov    edx,eax
10004c6d:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
10004c71:	c1 ea 10             	shr    edx,0x10
10004c74:	0f b6 f2             	movzx  esi,dl
10004c77:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
10004c7b:	0f b6 f0             	movzx  esi,al
10004c7e:	c1 e8 18             	shr    eax,0x18
10004c81:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
10004c85:	89 04 24             	mov    DWORD PTR [esp],eax
10004c88:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004c8f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
10004c92:	89 c2                	mov    edx,eax
10004c94:	0f b6 f4             	movzx  esi,ah
10004c97:	c1 ea 10             	shr    edx,0x10
10004c9a:	0f b6 c0             	movzx  eax,al
10004c9d:	0f b6 fa             	movzx  edi,dl
10004ca0:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
10004ca7:	89 bc 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],edi
10004cae:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004cb5:	89 b4 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],esi
10004cbc:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10004cc0:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10004cc4:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004ccb:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10004ccf:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
10004cd3:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10004cd7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10004cdb:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004ce2:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10004ce6:	29 c8                	sub    eax,ecx
10004ce8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004cec:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10004cf0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10004cf4:	0f af 44 24 4c       	imul   eax,DWORD PTR [esp+0x4c]
10004cf9:	8d 04 b8             	lea    eax,[eax+edi*4]
10004cfc:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
10004d00:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10004d07:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
10004d0b:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
10004d13:	25 fc ff 00 00       	and    eax,0xfffc
10004d18:	c7 84 24 84 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x84],0x0
10004d23:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
10004d2a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10004d2e:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10004d35:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10004d39:	89 84 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],eax
10004d40:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
10004d45:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
10004d4c:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
10004d50:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10004d54:	0f 8e ef 04 00 00    	jle    10005249 <ssfn_render+0x183f>
10004d5a:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004d61:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
10004d65:	3b 84 24 9c 00 00 00 	cmp    eax,DWORD PTR [esp+0x9c]
10004d6c:	0f 8e d7 04 00 00    	jle    10005249 <ssfn_render+0x183f>
10004d72:	83 bc 24 9c 00 00 00 00 	cmp    DWORD PTR [esp+0x9c],0x0
10004d7a:	0f 88 ab 04 00 00    	js     1000522b <ssfn_render+0x1821>
10004d80:	89 f9                	mov    ecx,edi
10004d82:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004d88:	c1 e1 08             	shl    ecx,0x8
10004d8b:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10004d8f:	31 ff                	xor    edi,edi
10004d91:	89 c8                	mov    eax,ecx
10004d93:	0f af c3             	imul   eax,ebx
10004d96:	99                   	cdq    
10004d97:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004d9b:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
10004da2:	c1 f8 08             	sar    eax,0x8
10004da5:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
10004dac:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10004db2:	0f af c3             	imul   eax,ebx
10004db5:	99                   	cdq    
10004db6:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
10004dba:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
10004dbe:	c1 f8 08             	sar    eax,0x8
10004dc1:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
10004dc8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004dcc:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
10004dd3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
10004dd7:	2b 84 24 a4 00 00 00 	sub    eax,DWORD PTR [esp+0xa4]
10004dde:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
10004de5:	8b b4 24 a0 00 00 00 	mov    esi,DWORD PTR [esp+0xa0]
10004dec:	39 74 24 54          	cmp    DWORD PTR [esp+0x54],esi
10004df0:	0f 8e 35 04 00 00    	jle    1000522b <ssfn_render+0x1821>
10004df6:	85 f6                	test   esi,esi
10004df8:	0f 88 1b 04 00 00    	js     10005219 <ssfn_render+0x180f>
10004dfe:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10004e05:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
10004e09:	75 3e                	jne    10004e49 <ssfn_render+0x143f>
10004e0b:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
10004e12:	b9 10 00 00 00       	mov    ecx,0x10
10004e17:	8b 04 b8             	mov    eax,DWORD PTR [eax+edi*4]
10004e1a:	2b 8c 24 b4 00 00 00 	sub    ecx,DWORD PTR [esp+0xb4]
10004e21:	89 c2                	mov    edx,eax
10004e23:	d3 ea                	shr    edx,cl
10004e25:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10004e29:	0f b6 f2             	movzx  esi,dl
10004e2c:	89 b4 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],esi
10004e33:	0f b6 f4             	movzx  esi,ah
10004e36:	d3 e8                	shr    eax,cl
10004e38:	89 b4 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],esi
10004e3f:	0f b6 c0             	movzx  eax,al
10004e42:	89 84 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],eax
10004e49:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10004e4f:	89 f9                	mov    ecx,edi
10004e51:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10004e54:	c1 e1 08             	shl    ecx,0x8
10004e57:	89 44 24 78          	mov    DWORD PTR [esp+0x78],eax
10004e5b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
10004e63:	89 c8                	mov    eax,ecx
10004e65:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10004e6d:	0f af c3             	imul   eax,ebx
10004e70:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10004e78:	99                   	cdq    
10004e79:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
10004e81:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
10004e85:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
10004e8d:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
10004e94:	c1 f8 08             	sar    eax,0x8
10004e97:	89 84 24 c0 00 00 00 	mov    DWORD PTR [esp+0xc0],eax
10004e9e:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10004ea4:	0f af c3             	imul   eax,ebx
10004ea7:	99                   	cdq    
10004ea8:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
10004eac:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
10004eb0:	c1 f8 08             	sar    eax,0x8
10004eb3:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10004eba:	8b 84 24 a4 00 00 00 	mov    eax,DWORD PTR [esp+0xa4]
10004ec1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10004ec5:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
10004ec9:	39 74 24 3c          	cmp    DWORD PTR [esp+0x3c],esi
10004ecd:	0f 8d 46 02 00 00    	jge    10005119 <ssfn_render+0x170f>
10004ed3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10004ed7:	c1 fa 08             	sar    edx,0x8
10004eda:	3b 94 24 b8 00 00 00 	cmp    edx,DWORD PTR [esp+0xb8]
10004ee1:	75 25                	jne    10004f08 <ssfn_render+0x14fe>
10004ee3:	0f b6 4c 24 3c       	movzx  ecx,BYTE PTR [esp+0x3c]
10004ee8:	8b b4 24 b0 00 00 00 	mov    esi,DWORD PTR [esp+0xb0]
10004eef:	b8 00 01 00 00       	mov    eax,0x100
10004ef4:	81 64 24 3c 00 ff ff ff 	and    DWORD PTR [esp+0x3c],0xffffff00
10004efc:	29 c8                	sub    eax,ecx
10004efe:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10004f02:	39 c6                	cmp    esi,eax
10004f04:	7e 1c                	jle    10004f22 <ssfn_render+0x1518>
10004f06:	eb 16                	jmp    10004f1e <ssfn_render+0x1514>
10004f08:	c7 44 24 18 00 01 00 00 	mov    DWORD PTR [esp+0x18],0x100
10004f10:	3b 94 24 bc 00 00 00 	cmp    edx,DWORD PTR [esp+0xbc]
10004f17:	75 09                	jne    10004f22 <ssfn_render+0x1518>
10004f19:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
10004f1e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10004f22:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10004f26:	0f b7 00             	movzx  eax,WORD PTR [eax]
10004f29:	0f af c2             	imul   eax,edx
10004f2c:	89 84 24 c8 00 00 00 	mov    DWORD PTR [esp+0xc8],eax
10004f33:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10004f38:	0f af 44 24 18       	imul   eax,DWORD PTR [esp+0x18]
10004f3d:	c1 f8 08             	sar    eax,0x8
10004f40:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10004f47:	8b 84 24 a8 00 00 00 	mov    eax,DWORD PTR [esp+0xa8]
10004f4e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10004f52:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10004f56:	39 74 24 38          	cmp    DWORD PTR [esp+0x38],esi
10004f5a:	0f 8d ac 01 00 00    	jge    1000510c <ssfn_render+0x1702>
10004f60:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10004f64:	c1 f8 08             	sar    eax,0x8
10004f67:	3b 84 24 c0 00 00 00 	cmp    eax,DWORD PTR [esp+0xc0]
10004f6e:	75 39                	jne    10004fa9 <ssfn_render+0x159f>
10004f70:	0f b6 4c 24 38       	movzx  ecx,BYTE PTR [esp+0x38]
10004f75:	ba 00 01 00 00       	mov    edx,0x100
10004f7a:	81 64 24 38 00 ff ff ff 	and    DWORD PTR [esp+0x38],0xffffff00
10004f82:	29 ca                	sub    edx,ecx
10004f84:	89 f1                	mov    ecx,esi
10004f86:	2b 8c 24 a8 00 00 00 	sub    ecx,DWORD PTR [esp+0xa8]
10004f8d:	39 d1                	cmp    ecx,edx
10004f8f:	7c 0e                	jl     10004f9f <ssfn_render+0x1595>
10004f91:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004f95:	81 fa 00 01 00 00    	cmp    edx,0x100
10004f9b:	74 20                	je     10004fbd <ssfn_render+0x15b3>
10004f9d:	89 d1                	mov    ecx,edx
10004f9f:	0f af 4c 24 18       	imul   ecx,DWORD PTR [esp+0x18]
10004fa4:	c1 f9 08             	sar    ecx,0x8
10004fa7:	eb 14                	jmp    10004fbd <ssfn_render+0x15b3>
10004fa9:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10004fb0:	3b 84 24 c4 00 00 00 	cmp    eax,DWORD PTR [esp+0xc4]
10004fb7:	74 04                	je     10004fbd <ssfn_render+0x15b3>
10004fb9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004fbd:	03 44 24 78          	add    eax,DWORD PTR [esp+0x78]
10004fc1:	01 4c 24 20          	add    DWORD PTR [esp+0x20],ecx
10004fc5:	8b b4 24 c8 00 00 00 	mov    esi,DWORD PTR [esp+0xc8]
10004fcc:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
10004fd1:	81 fa ff 00 00 00    	cmp    edx,0xff
10004fd7:	75 35                	jne    1000500e <ssfn_render+0x1604>
10004fd9:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
10004fe0:	81 44 24 30 ff 00 00 00 	add    DWORD PTR [esp+0x30],0xff
10004fe8:	0f af c1             	imul   eax,ecx
10004feb:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
10004fef:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10004ff6:	0f af c1             	imul   eax,ecx
10004ff9:	0f af 8c 24 98 00 00 00 	imul   ecx,DWORD PTR [esp+0x98]
10005001:	01 44 24 28          	add    DWORD PTR [esp+0x28],eax
10005005:	01 4c 24 24          	add    DWORD PTR [esp+0x24],ecx
10005009:	e9 f1 00 00 00       	jmp    100050ff <ssfn_render+0x16f5>
1000500e:	81 fa fe 00 00 00    	cmp    edx,0xfe
10005014:	74 31                	je     10005047 <ssfn_render+0x163d>
10005016:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10005019:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
1000501c:	85 db                	test   ebx,ebx
1000501e:	74 27                	je     10005047 <ssfn_render+0x163d>
10005020:	01 d8                	add    eax,ebx
10005022:	8b 14 90             	mov    edx,DWORD PTR [eax+edx*4]
10005025:	89 d3                	mov    ebx,edx
10005027:	89 94 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],edx
1000502e:	c1 eb 10             	shr    ebx,0x10
10005031:	0f b6 f6             	movzx  esi,dh
10005034:	0f b6 c3             	movzx  eax,bl
10005037:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000503b:	0f b6 c2             	movzx  eax,dl
1000503e:	c1 ea 18             	shr    edx,0x18
10005041:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10005045:	eb 17                	jmp    1000505e <ssfn_render+0x1654>
10005047:	8b 04 24             	mov    eax,DWORD PTR [esp]
1000504a:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
1000504e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005052:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10005056:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000505a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000505e:	81 7c 24 14 ff 00 00 00 	cmp    DWORD PTR [esp+0x14],0xff
10005066:	75 21                	jne    10005089 <ssfn_render+0x167f>
10005068:	0f af c1             	imul   eax,ecx
1000506b:	0f af f1             	imul   esi,ecx
1000506e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
10005072:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
10005076:	0f af d9             	imul   ebx,ecx
10005079:	01 74 24 28          	add    DWORD PTR [esp+0x28],esi
1000507d:	01 5c 24 24          	add    DWORD PTR [esp+0x24],ebx
10005081:	69 c9 ff 00 00 00    	imul   ecx,ecx,0xff
10005087:	eb 72                	jmp    100050fb <ssfn_render+0x16f1>
10005089:	0f af 74 24 14       	imul   esi,DWORD PTR [esp+0x14]
1000508e:	bb ff 00 00 00       	mov    ebx,0xff
10005093:	0f af 44 24 14       	imul   eax,DWORD PTR [esp+0x14]
10005098:	2b 5c 24 14          	sub    ebx,DWORD PTR [esp+0x14]
1000509c:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
100050a3:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
100050a7:	0f af d3             	imul   edx,ebx
100050aa:	bb ff 00 00 00       	mov    ebx,0xff
100050af:	01 d0                	add    eax,edx
100050b1:	0f af c1             	imul   eax,ecx
100050b4:	99                   	cdq    
100050b5:	f7 fb                	idiv   ebx
100050b7:	01 44 24 2c          	add    DWORD PTR [esp+0x2c],eax
100050bb:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100050bf:	0f af 84 24 94 00 00 00 	imul   eax,DWORD PTR [esp+0x94]
100050c7:	01 f0                	add    eax,esi
100050c9:	89 de                	mov    esi,ebx
100050cb:	0f af c1             	imul   eax,ecx
100050ce:	99                   	cdq    
100050cf:	f7 fb                	idiv   ebx
100050d1:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
100050d5:	01 44 24 28          	add    DWORD PTR [esp+0x28],eax
100050d9:	0f af 5c 24 14       	imul   ebx,DWORD PTR [esp+0x14]
100050de:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100050e2:	0f af 84 24 98 00 00 00 	imul   eax,DWORD PTR [esp+0x98]
100050ea:	01 d8                	add    eax,ebx
100050ec:	0f af c1             	imul   eax,ecx
100050ef:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
100050f4:	99                   	cdq    
100050f5:	f7 fe                	idiv   esi
100050f7:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
100050fb:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
100050ff:	81 44 24 38 00 01 00 00 	add    DWORD PTR [esp+0x38],0x100
10005107:	e9 46 fe ff ff       	jmp    10004f52 <ssfn_render+0x1548>
1000510c:	81 44 24 3c 00 01 00 00 	add    DWORD PTR [esp+0x3c],0x100
10005114:	e9 ac fd ff ff       	jmp    10004ec5 <ssfn_render+0x14bb>
10005119:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
1000511e:	74 30                	je     10005150 <ssfn_render+0x1746>
10005120:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10005124:	31 d2                	xor    edx,edx
10005126:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
1000512a:	31 d2                	xor    edx,edx
1000512c:	89 c1                	mov    ecx,eax
1000512e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10005132:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
10005136:	31 d2                	xor    edx,edx
10005138:	89 c6                	mov    esi,eax
1000513a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
1000513e:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
10005142:	31 d2                	xor    edx,edx
10005144:	89 c3                	mov    ebx,eax
10005146:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000514a:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
1000514e:	eb 1c                	jmp    1000516c <ssfn_render+0x1762>
10005150:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
10005154:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10005158:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
1000515c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005160:	c1 e9 08             	shr    ecx,0x8
10005163:	c1 ee 08             	shr    esi,0x8
10005166:	c1 eb 08             	shr    ebx,0x8
10005169:	c1 e8 08             	shr    eax,0x8
1000516c:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10005173:	74 10                	je     10005185 <ssfn_render+0x177b>
10005175:	83 f8 7f             	cmp    eax,0x7f
10005178:	0f 86 9b 00 00 00    	jbe    10005219 <ssfn_render+0x180f>
1000517e:	b8 ff 00 00 00       	mov    eax,0xff
10005183:	eb 09                	jmp    1000518e <ssfn_render+0x1784>
10005185:	83 f8 0f             	cmp    eax,0xf
10005188:	0f 86 8b 00 00 00    	jbe    10005219 <ssfn_render+0x180f>
1000518e:	89 ca                	mov    edx,ecx
10005190:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10005196:	76 05                	jbe    1000519d <ssfn_render+0x1793>
10005198:	ba ff 00 00 00       	mov    edx,0xff
1000519d:	b9 10 00 00 00       	mov    ecx,0x10
100051a2:	2b 8c 24 b4 00 00 00 	sub    ecx,DWORD PTR [esp+0xb4]
100051a9:	d3 e2                	shl    edx,cl
100051ab:	81 fe ff 00 00 00    	cmp    esi,0xff
100051b1:	89 d1                	mov    ecx,edx
100051b3:	76 05                	jbe    100051ba <ssfn_render+0x17b0>
100051b5:	be ff 00 00 00       	mov    esi,0xff
100051ba:	c1 e6 08             	shl    esi,0x8
100051bd:	09 ce                	or     esi,ecx
100051bf:	81 fb ff 00 00 00    	cmp    ebx,0xff
100051c5:	76 05                	jbe    100051cc <ssfn_render+0x17c2>
100051c7:	bb ff 00 00 00       	mov    ebx,0xff
100051cc:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100051d0:	d3 e3                	shl    ebx,cl
100051d2:	09 de                	or     esi,ebx
100051d4:	3d ff 00 00 00       	cmp    eax,0xff
100051d9:	76 05                	jbe    100051e0 <ssfn_render+0x17d6>
100051db:	b8 ff 00 00 00       	mov    eax,0xff
100051e0:	c1 e0 18             	shl    eax,0x18
100051e3:	09 f0                	or     eax,esi
100051e5:	8b b4 24 88 00 00 00 	mov    esi,DWORD PTR [esp+0x88]
100051ec:	89 04 be             	mov    DWORD PTR [esi+edi*4],eax
100051ef:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
100051f3:	39 74 24 40          	cmp    DWORD PTR [esp+0x40],esi
100051f7:	75 20                	jne    10005219 <ssfn_render+0x180f>
100051f9:	39 bc 24 8c 00 00 00 	cmp    DWORD PTR [esp+0x8c],edi
10005200:	7e 07                	jle    10005209 <ssfn_render+0x17ff>
10005202:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
10005209:	39 bc 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],edi
10005210:	7d 07                	jge    10005219 <ssfn_render+0x180f>
10005212:	89 bc 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edi
10005219:	47                   	inc    edi
1000521a:	ff 84 24 a0 00 00 00 	inc    DWORD PTR [esp+0xa0]
10005221:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10005225:	0f 85 ba fb ff ff    	jne    10004de5 <ssfn_render+0x13db>
1000522b:	8b bc 24 80 00 00 00 	mov    edi,DWORD PTR [esp+0x80]
10005232:	ff 44 24 64          	inc    DWORD PTR [esp+0x64]
10005236:	01 bc 24 88 00 00 00 	add    DWORD PTR [esp+0x88],edi
1000523d:	ff 84 24 9c 00 00 00 	inc    DWORD PTR [esp+0x9c]
10005244:	e9 03 fb ff ff       	jmp    10004d4c <ssfn_render+0x1342>
10005249:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10005250:	0f 84 7c 01 00 00    	je     100053d2 <ssfn_render+0x19c8>
10005256:	0f b6 84 24 ac 00 00 00 	movzx  eax,BYTE PTR [esp+0xac]
1000525e:	8b bc 24 8c 00 00 00 	mov    edi,DWORD PTR [esp+0x8c]
10005265:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005269:	40                   	inc    eax
1000526a:	29 c7                	sub    edi,eax
1000526c:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
10005273:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10005277:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
1000527b:	8d 44 38 02          	lea    eax,[eax+edi*1+0x2]
1000527f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005283:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
10005287:	7e 09                	jle    10005292 <ssfn_render+0x1888>
10005289:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000528d:	40                   	inc    eax
1000528e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005292:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10005296:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000529a:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
1000529e:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
100052a3:	8d 44 b8 fc          	lea    eax,[eax+edi*4-0x4]
100052a7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
100052ab:	01 c7                	add    edi,eax
100052ad:	8b 04 24             	mov    eax,DWORD PTR [esp]
100052b0:	c1 e0 18             	shl    eax,0x18
100052b3:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100052b7:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
100052bb:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
100052bf:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
100052c3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
100052c7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100052cb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100052cf:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
100052d4:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100052d8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100052dc:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
100052e0:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
100052e4:	0f 8e e8 00 00 00    	jle    100053d2 <ssfn_render+0x19c8>
100052ea:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
100052f1:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
100052f5:	3b 44 24 24          	cmp    eax,DWORD PTR [esp+0x24]
100052f9:	0f 8e d3 00 00 00    	jle    100053d2 <ssfn_render+0x19c8>
100052ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
10005304:	79 11                	jns    10005317 <ssfn_render+0x190d>
10005306:	ff 44 24 30          	inc    DWORD PTR [esp+0x30]
1000530a:	03 bc 24 80 00 00 00 	add    edi,DWORD PTR [esp+0x80]
10005311:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
10005315:	eb c1                	jmp    100052d8 <ssfn_render+0x18ce>
10005317:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000531b:	31 f6                	xor    esi,esi
1000531d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10005321:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
10005325:	39 5c 24 54          	cmp    DWORD PTR [esp+0x54],ebx
10005329:	7e db                	jle    10005306 <ssfn_render+0x18fc>
1000532b:	85 db                	test   ebx,ebx
1000532d:	0f 88 8b 00 00 00    	js     100053be <ssfn_render+0x19b4>
10005333:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
10005337:	7e 06                	jle    1000533f <ssfn_render+0x1935>
10005339:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
1000533d:	7f 7f                	jg     100053be <ssfn_render+0x19b4>
1000533f:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10005342:	b8 10 00 00 00       	mov    eax,0x10
10005347:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
1000534b:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
1000534f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10005353:	89 d8                	mov    eax,ebx
10005355:	8a 4c 24 2c          	mov    cl,BYTE PTR [esp+0x2c]
10005359:	d3 e8                	shr    eax,cl
1000535b:	0f b6 cf             	movzx  ecx,bh
1000535e:	0f b6 c0             	movzx  eax,al
10005361:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
10005365:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
10005369:	d3 eb                	shr    ebx,cl
1000536b:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
1000536f:	0f b6 db             	movzx  ebx,bl
10005372:	29 c1                	sub    ecx,eax
10005374:	29 da                	sub    edx,ebx
10005376:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
1000537a:	0f af 14 24          	imul   edx,DWORD PTR [esp]
1000537e:	c1 f9 08             	sar    ecx,0x8
10005381:	c1 fa 08             	sar    edx,0x8
10005384:	01 c8                	add    eax,ecx
10005386:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
1000538a:	8a 4c 24 2c          	mov    cl,BYTE PTR [esp+0x2c]
1000538e:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10005392:	d3 e0                	shl    eax,cl
10005394:	2b 54 24 38          	sub    edx,DWORD PTR [esp+0x38]
10005398:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
1000539c:	0f af 14 24          	imul   edx,DWORD PTR [esp]
100053a0:	c1 fa 08             	sar    edx,0x8
100053a3:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
100053a7:	c1 e2 08             	shl    edx,0x8
100053aa:	09 d0                	or     eax,edx
100053ac:	8d 14 19             	lea    edx,[ecx+ebx*1]
100053af:	0b 44 24 50          	or     eax,DWORD PTR [esp+0x50]
100053b3:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100053b7:	d3 e2                	shl    edx,cl
100053b9:	09 c2                	or     edx,eax
100053bb:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
100053be:	46                   	inc    esi
100053bf:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
100053c3:	39 74 24 70          	cmp    DWORD PTR [esp+0x70],esi
100053c7:	0f 8d 54 ff ff ff    	jge    10005321 <ssfn_render+0x1917>
100053cd:	e9 34 ff ff ff       	jmp    10005306 <ssfn_render+0x18fc>
100053d2:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
100053d9:	0f 84 56 01 00 00    	je     10005535 <ssfn_render+0x1b2b>
100053df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100053e3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100053e7:	d1 f8                	sar    eax,1
100053e9:	47                   	inc    edi
100053ea:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100053ee:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
100053f2:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
100053f6:	7e 09                	jle    10005401 <ssfn_render+0x19f7>
100053f8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
100053fc:	47                   	inc    edi
100053fd:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
10005401:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10005405:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10005409:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
1000540d:	8b 34 24             	mov    esi,DWORD PTR [esp]
10005410:	01 c2                	add    edx,eax
10005412:	c1 e6 18             	shl    esi,0x18
10005415:	0f af 54 24 48       	imul   edx,DWORD PTR [esp+0x48]
1000541a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
1000541e:	8d 54 ba fc          	lea    edx,[edx+edi*4-0x4]
10005422:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
10005426:	01 d7                	add    edi,edx
10005428:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
1000542c:	01 c2                	add    edx,eax
1000542e:	0f b6 84 24 ac 00 00 00 	movzx  eax,BYTE PTR [esp+0xac]
10005436:	2b 54 24 34          	sub    edx,DWORD PTR [esp+0x34]
1000543a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
1000543e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
10005442:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10005446:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
1000544b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
1000544f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10005453:	39 74 24 34          	cmp    DWORD PTR [esp+0x34],esi
10005457:	0f 8e d8 00 00 00    	jle    10005535 <ssfn_render+0x1b2b>
1000545d:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10005464:	0f bf 40 06          	movsx  eax,WORD PTR [eax+0x6]
10005468:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
1000546c:	0f 8e c3 00 00 00    	jle    10005535 <ssfn_render+0x1b2b>
10005472:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
10005477:	79 11                	jns    1000548a <ssfn_render+0x1a80>
10005479:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
1000547d:	03 bc 24 80 00 00 00 	add    edi,DWORD PTR [esp+0x80]
10005484:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
10005488:	eb c5                	jmp    1000544f <ssfn_render+0x1a45>
1000548a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000548e:	31 f6                	xor    esi,esi
10005490:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005494:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10005498:	39 5c 24 54          	cmp    DWORD PTR [esp+0x54],ebx
1000549c:	7e db                	jle    10005479 <ssfn_render+0x1a6f>
1000549e:	85 db                	test   ebx,ebx
100054a0:	78 7f                	js     10005521 <ssfn_render+0x1b17>
100054a2:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
100054a5:	b8 10 00 00 00       	mov    eax,0x10
100054aa:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
100054ae:	2b 44 24 38          	sub    eax,DWORD PTR [esp+0x38]
100054b2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100054b6:	89 d8                	mov    eax,ebx
100054b8:	8a 4c 24 20          	mov    cl,BYTE PTR [esp+0x20]
100054bc:	d3 e8                	shr    eax,cl
100054be:	0f b6 cf             	movzx  ecx,bh
100054c1:	0f b6 c0             	movzx  eax,al
100054c4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
100054c8:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
100054cc:	d3 eb                	shr    ebx,cl
100054ce:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
100054d2:	0f b6 db             	movzx  ebx,bl
100054d5:	29 c1                	sub    ecx,eax
100054d7:	29 da                	sub    edx,ebx
100054d9:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
100054dd:	0f af 14 24          	imul   edx,DWORD PTR [esp]
100054e1:	c1 f9 08             	sar    ecx,0x8
100054e4:	c1 fa 08             	sar    edx,0x8
100054e7:	01 c8                	add    eax,ecx
100054e9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
100054ed:	8a 4c 24 20          	mov    cl,BYTE PTR [esp+0x20]
100054f1:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
100054f5:	d3 e0                	shl    eax,cl
100054f7:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
100054fb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100054ff:	0f af 14 24          	imul   edx,DWORD PTR [esp]
10005503:	c1 fa 08             	sar    edx,0x8
10005506:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
1000550a:	c1 e2 08             	shl    edx,0x8
1000550d:	09 d0                	or     eax,edx
1000550f:	8d 14 19             	lea    edx,[ecx+ebx*1]
10005512:	0b 44 24 30          	or     eax,DWORD PTR [esp+0x30]
10005516:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
1000551a:	d3 e2                	shl    edx,cl
1000551c:	09 c2                	or     edx,eax
1000551e:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10005521:	46                   	inc    esi
10005522:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
10005526:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
1000552a:	0f 8d 64 ff ff ff    	jge    10005494 <ssfn_render+0x1a8a>
10005530:	e9 44 ff ff ff       	jmp    10005479 <ssfn_render+0x1a6f>
10005535:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
1000553c:	74 04                	je     10005542 <ssfn_render+0x1b38>
1000553e:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
10005542:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10005546:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000554a:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10005550:	8b 84 24 04 06 01 00 	mov    eax,DWORD PTR [esp+0x10604]
10005557:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
1000555b:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
10005562:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10005565:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10005569:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000556f:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10005573:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10005578:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000557c:	99                   	cdq    
1000557d:	f7 f9                	idiv   ecx
1000557f:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10005583:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10005589:	25 80 00 00 00       	and    eax,0x80
1000558e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10005592:	0f 85 ec 01 00 00    	jne    10005784 <ssfn_render+0x1d7a>
10005598:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000559b:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
1000559f:	0f 84 df 01 00 00    	je     10005784 <ssfn_render+0x1d7a>
100055a5:	8d 94 24 d4 00 00 00 	lea    edx,[esp+0xd4]
100055ac:	52                   	push   edx
100055ad:	8d 94 24 e0 00 00 00 	lea    edx,[esp+0xe0]
100055b4:	52                   	push   edx
100055b5:	8b 94 24 10 06 01 00 	mov    edx,DWORD PTR [esp+0x10610]
100055bc:	03 94 24 e0 00 00 00 	add    edx,DWORD PTR [esp+0xe0]
100055c3:	52                   	push   edx
100055c4:	50                   	push   eax
100055c5:	e8 b9 d2 ff ff       	call   10002883 <_ssfn_c>
100055ca:	83 c4 10             	add    esp,0x10
100055cd:	85 c0                	test   eax,eax
100055cf:	0f 84 af 01 00 00    	je     10005784 <ssfn_render+0x1d7a>
100055d5:	83 bc 24 d4 00 00 00 20 	cmp    DWORD PTR [esp+0xd4],0x20
100055dd:	0f 86 a1 01 00 00    	jbe    10005784 <ssfn_render+0x1d7a>
100055e3:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100055e9:	8d 48 06             	lea    ecx,[eax+0x6]
100055ec:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
100055f2:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
100055f6:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
100055fa:	0f 8e 84 01 00 00    	jle    10005784 <ssfn_render+0x1d7a>
10005600:	8a 19                	mov    bl,BYTE PTR [ecx]
10005602:	88 5c 24 0c          	mov    BYTE PTR [esp+0xc],bl
10005606:	8a 18                	mov    bl,BYTE PTR [eax]
10005608:	83 e3 40             	and    ebx,0x40
1000560b:	80 7c 24 0c ff       	cmp    BYTE PTR [esp+0xc],0xff
10005610:	75 14                	jne    10005626 <ssfn_render+0x1c1c>
10005612:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10005616:	75 0e                	jne    10005626 <ssfn_render+0x1c1c>
10005618:	80 fb 01             	cmp    bl,0x1
1000561b:	19 c0                	sbb    eax,eax
1000561d:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10005621:	e9 55 01 00 00       	jmp    1000577b <ssfn_render+0x1d71>
10005626:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
1000562a:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
1000562e:	c1 e6 10             	shl    esi,0x10
10005631:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10005635:	84 db                	test   bl,bl
10005637:	74 08                	je     10005641 <ssfn_render+0x1c37>
10005639:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
1000563c:	83 c1 06             	add    ecx,0x6
1000563f:	eb 0c                	jmp    1000564d <ssfn_render+0x1c43>
10005641:	c1 e2 08             	shl    edx,0x8
10005644:	83 c1 05             	add    ecx,0x5
10005647:	89 d0                	mov    eax,edx
10005649:	09 f0                	or     eax,esi
1000564b:	09 c7                	or     edi,eax
1000564d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10005650:	89 04 24             	mov    DWORD PTR [esp],eax
10005653:	01 f8                	add    eax,edi
10005655:	8a 10                	mov    dl,BYTE PTR [eax]
10005657:	88 d3                	mov    bl,dl
10005659:	83 e3 e0             	and    ebx,0xffffffe0
1000565c:	80 fb c0             	cmp    bl,0xc0
1000565f:	0f 85 16 01 00 00    	jne    1000577b <ssfn_render+0x1d71>
10005665:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10005669:	c1 e2 08             	shl    edx,0x8
1000566c:	83 c0 02             	add    eax,0x2
1000566f:	81 e2 00 1f 00 00    	and    edx,0x1f00
10005675:	8b b4 24 d4 00 00 00 	mov    esi,DWORD PTR [esp+0xd4]
1000567c:	09 da                	or     edx,ebx
1000567e:	8d 7a 01             	lea    edi,[edx+0x1]
10005681:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10005685:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
10005689:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
1000568e:	0f 84 e7 00 00 00    	je     1000577b <ssfn_render+0x1d71>
10005694:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10005698:	0f b7 10             	movzx  edx,WORD PTR [eax]
1000569b:	c1 e3 10             	shl    ebx,0x10
1000569e:	81 e3 00 00 0f 00    	and    ebx,0xf0000
100056a4:	09 d3                	or     ebx,edx
100056a6:	39 de                	cmp    esi,ebx
100056a8:	0f 82 c5 00 00 00    	jb     10005773 <ssfn_render+0x1d69>
100056ae:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
100056b1:	89 d7                	mov    edi,edx
100056b3:	c1 e7 10             	shl    edi,0x10
100056b6:	81 e7 00 00 0f 00    	and    edi,0xf0000
100056bc:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
100056c0:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
100056c4:	0b 7c 24 14          	or     edi,DWORD PTR [esp+0x14]
100056c8:	39 fe                	cmp    esi,edi
100056ca:	0f 87 a3 00 00 00    	ja     10005773 <ssfn_render+0x1d69>
100056d0:	29 de                	sub    esi,ebx
100056d2:	c0 ea 04             	shr    dl,0x4
100056d5:	89 b4 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],esi
100056dc:	0f b6 d2             	movzx  edx,dl
100056df:	8b 3c 24             	mov    edi,DWORD PTR [esp]
100056e2:	89 d3                	mov    ebx,edx
100056e4:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
100056e8:	c1 e3 10             	shl    ebx,0x10
100056eb:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100056ee:	09 da                	or     edx,ebx
100056f0:	c0 e8 04             	shr    al,0x4
100056f3:	c1 e0 18             	shl    eax,0x18
100056f6:	09 c2                	or     edx,eax
100056f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
100056fb:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
100056fe:	01 c2                	add    edx,eax
10005700:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10005703:	8d 7c 07 fc          	lea    edi,[edi+eax*1-0x4]
10005707:	39 d7                	cmp    edi,edx
10005709:	76 70                	jbe    1000577b <ssfn_render+0x1d71>
1000570b:	8a 1a                	mov    bl,BYTE PTR [edx]
1000570d:	8b 84 24 d4 00 00 00 	mov    eax,DWORD PTR [esp+0xd4]
10005714:	89 de                	mov    esi,ebx
10005716:	83 e6 7f             	and    esi,0x7f
10005719:	39 c6                	cmp    esi,eax
1000571b:	73 1d                	jae    1000573a <ssfn_render+0x1d30>
1000571d:	48                   	dec    eax
1000571e:	bb 02 00 00 00       	mov    ebx,0x2
10005723:	29 f0                	sub    eax,esi
10005725:	89 84 24 d4 00 00 00 	mov    DWORD PTR [esp+0xd4],eax
1000572c:	0f b6 02             	movzx  eax,BYTE PTR [edx]
1000572f:	84 c0                	test   al,al
10005731:	78 03                	js     10005736 <ssfn_render+0x1d2c>
10005733:	8d 58 02             	lea    ebx,[eax+0x2]
10005736:	01 da                	add    edx,ebx
10005738:	eb cd                	jmp    10005707 <ssfn_render+0x1cfd>
1000573a:	be 01 00 00 00       	mov    esi,0x1
1000573f:	84 db                	test   bl,bl
10005741:	78 03                	js     10005746 <ssfn_render+0x1d3c>
10005743:	8d 70 01             	lea    esi,[eax+0x1]
10005746:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
1000574a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
1000574d:	0f af 44 24 04       	imul   eax,DWORD PTR [esp+0x4]
10005752:	0f b6 5f 0b          	movzx  ebx,BYTE PTR [edi+0xb]
10005756:	99                   	cdq    
10005757:	8b bc 24 04 06 01 00 	mov    edi,DWORD PTR [esp+0x10604]
1000575e:	f7 fb                	idiv   ebx
10005760:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
10005765:	74 06                	je     1000576d <ssfn_render+0x1d63>
10005767:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
1000576b:	eb 0e                	jmp    1000577b <ssfn_render+0x1d71>
1000576d:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10005771:	eb 08                	jmp    1000577b <ssfn_render+0x1d71>
10005773:	83 c0 08             	add    eax,0x8
10005776:	e9 0a ff ff ff       	jmp    10005685 <ssfn_render+0x1c7b>
1000577b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
1000577f:	e9 68 fe ff ff       	jmp    100055ec <ssfn_render+0x1be2>
10005784:	8b 84 24 d8 00 00 00 	mov    eax,DWORD PTR [esp+0xd8]
1000578b:	eb 7f                	jmp    1000580c <ssfn_render+0x1e02>
1000578d:	c7 84 24 dc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xdc],0x0
10005798:	e9 ab e4 ff ff       	jmp    10003c48 <ssfn_render+0x23e>
1000579d:	8d 84 24 d0 00 00 00 	lea    eax,[esp+0xd0]
100057a4:	50                   	push   eax
100057a5:	8d 84 24 dc 00 00 00 	lea    eax,[esp+0xdc]
100057ac:	50                   	push   eax
100057ad:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
100057b4:	51                   	push   ecx
100057b5:	e8 c9 d0 ff ff       	call   10002883 <_ssfn_c>
100057ba:	83 c4 10             	add    esp,0x10
100057bd:	89 c1                	mov    ecx,eax
100057bf:	85 c0                	test   eax,eax
100057c1:	0f 84 7a e4 ff ff    	je     10003c41 <ssfn_render+0x237>
100057c7:	e9 fc e4 ff ff       	jmp    10003cc8 <ssfn_render+0x2be>
100057cc:	8b 04 87             	mov    eax,DWORD PTR [edi+eax*4]
100057cf:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100057d3:	75 0c                	jne    100057e1 <ssfn_render+0x1dd7>
100057d5:	ff 84 24 dc 00 00 00 	inc    DWORD PTR [esp+0xdc]
100057dc:	e9 90 e4 ff ff       	jmp    10003c71 <ssfn_render+0x267>
100057e1:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
100057e8:	51                   	push   ecx
100057e9:	8d 94 24 dc 00 00 00 	lea    edx,[esp+0xdc]
100057f0:	52                   	push   edx
100057f1:	ff b4 24 10 06 01 00 	push   DWORD PTR [esp+0x10610]
100057f8:	50                   	push   eax
100057f9:	e8 85 d0 ff ff       	call   10002883 <_ssfn_c>
100057fe:	83 c4 10             	add    esp,0x10
10005801:	89 c1                	mov    ecx,eax
10005803:	85 c0                	test   eax,eax
10005805:	74 ce                	je     100057d5 <ssfn_render+0x1dcb>
10005807:	e9 bc e4 ff ff       	jmp    10003cc8 <ssfn_render+0x2be>
1000580c:	81 c4 ec 05 01 00    	add    esp,0x105ec
10005812:	5b                   	pop    ebx
10005813:	5e                   	pop    esi
10005814:	5f                   	pop    edi
10005815:	5d                   	pop    ebp
10005816:	c3                   	ret    

10005817 <ssfn_bbox>:
10005817:	55                   	push   ebp
10005818:	57                   	push   edi
10005819:	56                   	push   esi
1000581a:	53                   	push   ebx
1000581b:	83 ec 3c             	sub    esp,0x3c
1000581e:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
10005823:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
10005827:	0f 94 c0             	sete   al
1000582a:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
1000582f:	0f 94 c2             	sete   dl
10005832:	09 d0                	or     eax,edx
10005834:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
10005839:	0f 94 c2             	sete   dl
1000583c:	09 d0                	or     eax,edx
1000583e:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
10005843:	0f 94 c2             	sete   dl
10005846:	09 d0                	or     eax,edx
10005848:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
1000584d:	0f 94 c2             	sete   dl
10005850:	08 d0                	or     al,dl
10005852:	0f 85 7c 01 00 00    	jne    100059d4 <ssfn_bbox+0x1bd>
10005858:	85 db                	test   ebx,ebx
1000585a:	0f 84 74 01 00 00    	je     100059d4 <ssfn_bbox+0x1bd>
10005860:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10005864:	31 f6                	xor    esi,esi
10005866:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000586c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10005870:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10005876:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000587a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10005880:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10005884:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000588a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000588e:	80 38 00             	cmp    BYTE PTR [eax],0x0
10005891:	0f 84 42 01 00 00    	je     100059d9 <ssfn_bbox+0x1c2>
10005897:	8d 54 24 18          	lea    edx,[esp+0x18]
1000589b:	b9 06 00 00 00       	mov    ecx,0x6
100058a0:	89 d7                	mov    edi,edx
100058a2:	89 f0                	mov    eax,esi
100058a4:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100058ae:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100058b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100058b8:	31 ff                	xor    edi,edi
100058ba:	bd 01 00 00 00       	mov    ebp,0x1
100058bf:	50                   	push   eax
100058c0:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100058c4:	8d 44 24 20          	lea    eax,[esp+0x20]
100058c8:	50                   	push   eax
100058c9:	53                   	push   ebx
100058ca:	e8 fc ff ff ff       	call   100058cb <ssfn_bbox+0xb4>	100058cb: R_386_PC32	ssfn_render
100058cf:	83 c4 10             	add    esp,0x10
100058d2:	89 c6                	mov    esi,eax
100058d4:	85 c0                	test   eax,eax
100058d6:	74 6f                	je     10005947 <ssfn_bbox+0x130>
100058d8:	0f 88 fb 00 00 00    	js     100059d9 <ssfn_bbox+0x1c2>
100058de:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100058e4:	85 c0                	test   eax,eax
100058e6:	0f 84 ed 00 00 00    	je     100059d9 <ssfn_bbox+0x1c2>
100058ec:	85 ed                	test   ebp,ebp
100058ee:	74 0b                	je     100058fb <ssfn_bbox+0xe4>
100058f0:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
100058f6:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
100058fb:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
100058ff:	74 12                	je     10005913 <ssfn_bbox+0xfc>
10005901:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
10005907:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
1000590b:	7d 2f                	jge    1000593c <ssfn_bbox+0x125>
1000590d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10005911:	eb 29                	jmp    1000593c <ssfn_bbox+0x125>
10005913:	0f b7 08             	movzx  ecx,WORD PTR [eax]
10005916:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
1000591b:	39 cd                	cmp    ebp,ecx
1000591d:	7d 05                	jge    10005924 <ssfn_bbox+0x10d>
1000591f:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
10005924:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
10005928:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
1000592d:	84 d2                	test   dl,dl
1000592f:	75 04                	jne    10005935 <ssfn_bbox+0x11e>
10005931:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
10005935:	01 ca                	add    edx,ecx
10005937:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
1000593c:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
10005940:	31 ed                	xor    ebp,ebp
10005942:	e9 78 ff ff ff       	jmp    100058bf <ssfn_bbox+0xa8>
10005947:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
1000594e:	74 23                	je     10005973 <ssfn_bbox+0x15c>
10005950:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10005953:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
10005957:	75 1a                	jne    10005973 <ssfn_bbox+0x15c>
10005959:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
1000595f:	b9 04 00 00 00       	mov    ecx,0x4
10005964:	99                   	cdq    
10005965:	f7 f9                	idiv   ecx
10005967:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
1000596c:	29 f8                	sub    eax,edi
1000596e:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
10005973:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
10005979:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
1000597d:	74 29                	je     100059a8 <ssfn_bbox+0x191>
1000597f:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10005984:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10005988:	89 01                	mov    DWORD PTR [ecx],eax
1000598a:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
1000598e:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
10005994:	89 01                	mov    DWORD PTR [ecx],eax
10005996:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000599a:	89 38                	mov    DWORD PTR [eax],edi
1000599c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100059a0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100059a4:	89 38                	mov    DWORD PTR [eax],edi
100059a6:	eb 31                	jmp    100059d9 <ssfn_bbox+0x1c2>
100059a8:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
100059ad:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
100059b1:	89 07                	mov    DWORD PTR [edi],eax
100059b3:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
100059b8:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
100059bc:	89 07                	mov    DWORD PTR [edi],eax
100059be:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100059c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100059c8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100059cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100059d2:	eb 05                	jmp    100059d9 <ssfn_bbox+0x1c2>
100059d4:	be fc ff ff ff       	mov    esi,0xfffffffc
100059d9:	83 c4 3c             	add    esp,0x3c
100059dc:	89 f0                	mov    eax,esi
100059de:	5b                   	pop    ebx
100059df:	5e                   	pop    esi
100059e0:	5f                   	pop    edi
100059e1:	5d                   	pop    ebp
100059e2:	c3                   	ret    

100059e3 <ssfn_text>:
100059e3:	55                   	push   ebp
100059e4:	57                   	push   edi
100059e5:	56                   	push   esi
100059e6:	53                   	push   ebx
100059e7:	83 ec 1c             	sub    esp,0x1c
100059ea:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100059ee:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
100059f2:	85 f6                	test   esi,esi
100059f4:	0f 84 b2 00 00 00    	je     10005aac <ssfn_text+0xc9>
100059fa:	85 ed                	test   ebp,ebp
100059fc:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
10005a01:	0f 84 a5 00 00 00    	je     10005aac <ssfn_text+0xc9>
10005a07:	83 ec 0c             	sub    esp,0xc
10005a0a:	6a 18                	push   0x18
10005a0c:	e8 fc ff ff ff       	call   10005a0d <ssfn_text+0x2a>	10005a0d: R_386_PC32	malloc
10005a11:	83 c4 10             	add    esp,0x10
10005a14:	89 c3                	mov    ebx,eax
10005a16:	85 c0                	test   eax,eax
10005a18:	0f 84 8e 00 00 00    	je     10005aac <ssfn_text+0xc9>
10005a1e:	31 c0                	xor    eax,eax
10005a20:	b9 06 00 00 00       	mov    ecx,0x6
10005a25:	89 df                	mov    edi,ebx
10005a27:	80 3e 00             	cmp    BYTE PTR [esi],0x0
10005a2a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10005a2c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10005a30:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10005a33:	74 79                	je     10005aae <ssfn_text+0xcb>
10005a35:	8d 43 0c             	lea    eax,[ebx+0xc]
10005a38:	52                   	push   edx
10005a39:	52                   	push   edx
10005a3a:	50                   	push   eax
10005a3b:	8d 43 0a             	lea    eax,[ebx+0xa]
10005a3e:	50                   	push   eax
10005a3f:	8d 43 06             	lea    eax,[ebx+0x6]
10005a42:	50                   	push   eax
10005a43:	8d 43 04             	lea    eax,[ebx+0x4]
10005a46:	50                   	push   eax
10005a47:	56                   	push   esi
10005a48:	55                   	push   ebp
10005a49:	e8 fc ff ff ff       	call   10005a4a <ssfn_text+0x67>	10005a4a: R_386_PC32	ssfn_bbox
10005a4e:	83 c4 20             	add    esp,0x20
10005a51:	85 c0                	test   eax,eax
10005a53:	75 59                	jne    10005aae <ssfn_text+0xcb>
10005a55:	83 ec 0c             	sub    esp,0xc
10005a58:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
10005a5c:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
10005a60:	0f af c8             	imul   ecx,eax
10005a63:	c1 e1 02             	shl    ecx,0x2
10005a66:	51                   	push   ecx
10005a67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
10005a6b:	e8 fc ff ff ff       	call   10005a6c <ssfn_text+0x89>	10005a6c: R_386_PC32	malloc
10005a70:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10005a74:	89 c7                	mov    edi,eax
10005a76:	89 03                	mov    DWORD PTR [ebx],eax
10005a78:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
10005a7c:	83 c4 10             	add    esp,0x10
10005a7f:	f3 aa                	rep stos BYTE PTR es:[edi],al
10005a81:	50                   	push   eax
10005a82:	56                   	push   esi
10005a83:	53                   	push   ebx
10005a84:	55                   	push   ebp
10005a85:	e8 fc ff ff ff       	call   10005a86 <ssfn_text+0xa3>	10005a86: R_386_PC32	ssfn_render
10005a8a:	83 c4 10             	add    esp,0x10
10005a8d:	85 c0                	test   eax,eax
10005a8f:	7e 04                	jle    10005a95 <ssfn_text+0xb2>
10005a91:	01 c6                	add    esi,eax
10005a93:	eb ec                	jmp    10005a81 <ssfn_text+0x9e>
10005a95:	74 17                	je     10005aae <ssfn_text+0xcb>
10005a97:	83 ec 0c             	sub    esp,0xc
10005a9a:	ff 33                	push   DWORD PTR [ebx]
10005a9c:	e8 fc ff ff ff       	call   10005a9d <ssfn_text+0xba>	10005a9d: R_386_PC32	free
10005aa1:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005aa4:	e8 fc ff ff ff       	call   10005aa5 <ssfn_text+0xc2>	10005aa5: R_386_PC32	free
10005aa9:	83 c4 10             	add    esp,0x10
10005aac:	31 db                	xor    ebx,ebx
10005aae:	83 c4 1c             	add    esp,0x1c
10005ab1:	89 d8                	mov    eax,ebx
10005ab3:	5b                   	pop    ebx
10005ab4:	5e                   	pop    esi
10005ab5:	5f                   	pop    edi
10005ab6:	5d                   	pop    ebp
10005ab7:	c3                   	ret    

10005ab8 <loadSSFNFont(Font*, int)>:
10005ab8:	55                   	push   ebp
10005ab9:	57                   	push   edi
10005aba:	56                   	push   esi
10005abb:	53                   	push   ebx
10005abc:	81 ec 34 01 00 00    	sub    esp,0x134
10005ac2:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
10005ac9:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
10005ad0:	e8 fc ff ff ff       	call   10005ad1 <loadSSFNFont(Font*, int)+0x19>	10005ad1: R_386_PC32	lookupInFontTableByNameOnly(char const*, int)
10005ad5:	83 c4 10             	add    esp,0x10
10005ad8:	83 f8 ff             	cmp    eax,0xffffffff
10005adb:	0f 85 44 01 00 00    	jne    10005c25 <loadSSFNFont(Font*, int)+0x16d>
10005ae1:	50                   	push   eax
10005ae2:	50                   	push   eax
10005ae3:	68 f1 8f 00 10       	push   0x10008ff1	10005ae4: R_386_32	.text
10005ae8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
10005aec:	56                   	push   esi
10005aed:	e8 fc ff ff ff       	call   10005aee <loadSSFNFont(Font*, int)+0x36>	10005aee: R_386_PC32	strcpy
10005af2:	58                   	pop    eax
10005af3:	5a                   	pop    edx
10005af4:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
10005afb:	56                   	push   esi
10005afc:	e8 fc ff ff ff       	call   10005afd <loadSSFNFont(Font*, int)+0x45>	10005afd: R_386_PC32	strcat
10005b01:	59                   	pop    ecx
10005b02:	5b                   	pop    ebx
10005b03:	68 06 90 00 10       	push   0x10009006	10005b04: R_386_32	.text
10005b08:	56                   	push   esi
10005b09:	e8 fc ff ff ff       	call   10005b0a <loadSSFNFont(Font*, int)+0x52>	10005b0a: R_386_PC32	strcat
10005b0e:	5f                   	pop    edi
10005b0f:	5d                   	pop    ebp
10005b10:	56                   	push   esi
10005b11:	68 0b 90 00 10       	push   0x1000900b	10005b12: R_386_32	.text
10005b16:	e8 fc ff ff ff       	call   10005b17 <loadSSFNFont(Font*, int)+0x5f>	10005b17: R_386_PC32	Dbg::kprintf(char const*, ...)
10005b1b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
10005b22:	e8 fc ff ff ff       	call   10005b23 <loadSSFNFont(Font*, int)+0x6b>	10005b23: R_386_PC32	malloc
10005b27:	83 c4 0c             	add    esp,0xc
10005b2a:	89 c3                	mov    ebx,eax
10005b2c:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005b2e: R_386_32	kernelProcess
10005b32:	56                   	push   esi
10005b33:	50                   	push   eax
10005b34:	e8 fc ff ff ff       	call   10005b35 <loadSSFNFont(Font*, int)+0x7d>	10005b35: R_386_PC32	File::File(char const*, Process*)
10005b39:	83 c4 10             	add    esp,0x10
10005b3c:	85 db                	test   ebx,ebx
10005b3e:	75 0d                	jne    10005b4d <loadSSFNFont(Font*, int)+0x95>
10005b40:	83 ec 0c             	sub    esp,0xc
10005b43:	68 1e 90 00 10       	push   0x1000901e	10005b44: R_386_32	.text
10005b48:	e9 8d 00 00 00       	jmp    10005bda <loadSSFNFont(Font*, int)+0x122>
10005b4d:	50                   	push   eax
10005b4e:	50                   	push   eax
10005b4f:	6a 01                	push   0x1
10005b51:	53                   	push   ebx
10005b52:	e8 fc ff ff ff       	call   10005b53 <loadSSFNFont(Font*, int)+0x9b>	10005b53: R_386_PC32	File::open(FileOpenMode)
10005b57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10005b5b:	83 c4 10             	add    esp,0x10
10005b5e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10005b63:	74 1a                	je     10005b7f <loadSSFNFont(Font*, int)+0xc7>
10005b65:	83 ec 0c             	sub    esp,0xc
10005b68:	68 33 90 00 10       	push   0x10009033	10005b69: R_386_32	.text
10005b6d:	e8 fc ff ff ff       	call   10005b6e <loadSSFNFont(Font*, int)+0xb6>	10005b6e: R_386_PC32	Dbg::kprintf(char const*, ...)
10005b72:	8b 03                	mov    eax,DWORD PTR [ebx]
10005b74:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005b77:	ff 50 08             	call   DWORD PTR [eax+0x8]
10005b7a:	e9 ec 00 00 00       	jmp    10005c6b <loadSSFNFont(Font*, int)+0x1b3>
10005b7f:	51                   	push   ecx
10005b80:	8d 44 24 17          	lea    eax,[esp+0x17]
10005b84:	50                   	push   eax
10005b85:	8d 44 24 20          	lea    eax,[esp+0x20]
10005b89:	50                   	push   eax
10005b8a:	53                   	push   ebx
10005b8b:	e8 fc ff ff ff       	call   10005b8c <loadSSFNFont(Font*, int)+0xd4>	10005b8c: R_386_PC32	File::stat(unsigned long long*, bool*)
10005b90:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
10005b94:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
10005b98:	89 3c 24             	mov    DWORD PTR [esp],edi
10005b9b:	e8 fc ff ff ff       	call   10005b9c <loadSSFNFont(Font*, int)+0xe4>	10005b9c: R_386_PC32	malloc
10005ba0:	89 c6                	mov    esi,eax
10005ba2:	58                   	pop    eax
10005ba3:	8b 03                	mov    eax,DWORD PTR [ebx]
10005ba5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10005ba9:	51                   	push   ecx
10005baa:	56                   	push   esi
10005bab:	55                   	push   ebp
10005bac:	57                   	push   edi
10005bad:	53                   	push   ebx
10005bae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10005bb1:	83 c4 14             	add    esp,0x14
10005bb4:	53                   	push   ebx
10005bb5:	e8 fc ff ff ff       	call   10005bb6 <loadSSFNFont(Font*, int)+0xfe>	10005bb6: R_386_PC32	File::close()
10005bba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10005bbe:	83 c4 10             	add    esp,0x10
10005bc1:	89 c1                	mov    ecx,eax
10005bc3:	c1 f9 1f             	sar    ecx,0x1f
10005bc6:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
10005bca:	75 06                	jne    10005bd2 <loadSSFNFont(Font*, int)+0x11a>
10005bcc:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10005bd0:	74 17                	je     10005be9 <loadSSFNFont(Font*, int)+0x131>
10005bd2:	52                   	push   edx
10005bd3:	52                   	push   edx
10005bd4:	50                   	push   eax
10005bd5:	68 48 90 00 10       	push   0x10009048	10005bd6: R_386_32	.text
10005bda:	e8 fc ff ff ff       	call   10005bdb <loadSSFNFont(Font*, int)+0x123>	10005bdb: R_386_PC32	Dbg::kprintf(char const*, ...)
10005bdf:	83 c4 10             	add    esp,0x10
10005be2:	31 c0                	xor    eax,eax
10005be4:	e9 87 00 00 00       	jmp    10005c70 <loadSSFNFont(Font*, int)+0x1b8>
10005be9:	83 ec 0c             	sub    esp,0xc
10005bec:	68 c8 f5 00 00       	push   0xf5c8
10005bf1:	e8 fc ff ff ff       	call   10005bf2 <loadSSFNFont(Font*, int)+0x13a>	10005bf2: R_386_PC32	malloc
10005bf6:	b9 72 3d 00 00       	mov    ecx,0x3d72
10005bfb:	89 c2                	mov    edx,eax
10005bfd:	89 c7                	mov    edi,eax
10005bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005c03:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10005c05:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
10005c0c:	89 90 90 04 00 00    	mov    DWORD PTR [eax+0x490],edx
10005c12:	5f                   	pop    edi
10005c13:	5d                   	pop    ebp
10005c14:	56                   	push   esi
10005c15:	52                   	push   edx
10005c16:	e8 fc ff ff ff       	call   10005c17 <loadSSFNFont(Font*, int)+0x15f>	10005c17: R_386_PC32	ssfn_load
10005c1b:	89 34 24             	mov    DWORD PTR [esp],esi
10005c1e:	e8 fc ff ff ff       	call   10005c1f <loadSSFNFont(Font*, int)+0x167>	10005c1f: R_386_PC32	free
10005c23:	eb 46                	jmp    10005c6b <loadSSFNFont(Font*, int)+0x1b3>
10005c25:	89 c6                	mov    esi,eax
10005c27:	50                   	push   eax
10005c28:	50                   	push   eax
10005c29:	56                   	push   esi
10005c2a:	68 64 90 00 10       	push   0x10009064	10005c2b: R_386_32	.text
10005c2f:	e8 fc ff ff ff       	call   10005c30 <loadSSFNFont(Font*, int)+0x178>	10005c30: R_386_PC32	Dbg::kprintf(char const*, ...)
10005c34:	89 34 24             	mov    DWORD PTR [esp],esi
10005c37:	e8 fc ff ff ff       	call   10005c38 <loadSSFNFont(Font*, int)+0x180>	10005c38: R_386_PC32	getFontFromHandle(int)
10005c3c:	5a                   	pop    edx
10005c3d:	89 c6                	mov    esi,eax
10005c3f:	59                   	pop    ecx
10005c40:	50                   	push   eax
10005c41:	68 7a 90 00 10       	push   0x1000907a	10005c42: R_386_32	.text
10005c46:	e8 fc ff ff ff       	call   10005c47 <loadSSFNFont(Font*, int)+0x18f>	10005c47: R_386_PC32	Dbg::kprintf(char const*, ...)
10005c4b:	8b 8c 24 50 01 00 00 	mov    ecx,DWORD PTR [esp+0x150]
10005c52:	8b 86 90 04 00 00    	mov    eax,DWORD PTR [esi+0x490]
10005c58:	89 81 90 04 00 00    	mov    DWORD PTR [ecx+0x490],eax
10005c5e:	5b                   	pop    ebx
10005c5f:	5e                   	pop    esi
10005c60:	50                   	push   eax
10005c61:	68 90 90 00 10       	push   0x10009090	10005c62: R_386_32	.text
10005c66:	e8 fc ff ff ff       	call   10005c67 <loadSSFNFont(Font*, int)+0x1af>	10005c67: R_386_PC32	Dbg::kprintf(char const*, ...)
10005c6b:	83 c4 10             	add    esp,0x10
10005c6e:	b0 01                	mov    al,0x1
10005c70:	81 c4 2c 01 00 00    	add    esp,0x12c
10005c76:	5b                   	pop    ebx
10005c77:	5e                   	pop    esi
10005c78:	5f                   	pop    edi
10005c79:	5d                   	pop    ebp
10005c7a:	c3                   	ret    

10005c7b <getSSFNFontRegion(Font*, int, int*, int*)>:
10005c7b:	55                   	push   ebp
10005c7c:	57                   	push   edi
10005c7d:	56                   	push   esi
10005c7e:	53                   	push   ebx
10005c7f:	83 ec 4c             	sub    esp,0x4c
10005c82:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
10005c86:	8b 5c 24 6c          	mov    ebx,DWORD PTR [esp+0x6c]
10005c8a:	8b 96 84 00 00 00    	mov    edx,DWORD PTR [esi+0x84]
10005c90:	89 d0                	mov    eax,edx
10005c92:	83 e0 01             	and    eax,0x1
10005c95:	f6 c2 02             	test   dl,0x2
10005c98:	74 03                	je     10005c9d <getSSFNFontRegion(Font*, int, int*, int*)+0x22>
10005c9a:	83 c8 02             	or     eax,0x2
10005c9d:	f6 c2 04             	test   dl,0x4
10005ca0:	74 03                	je     10005ca5 <getSSFNFontRegion(Font*, int, int*, int*)+0x2a>
10005ca2:	83 c8 10             	or     eax,0x10
10005ca5:	80 e2 08             	and    dl,0x8
10005ca8:	74 03                	je     10005cad <getSSFNFontRegion(Font*, int, int*, int*)+0x32>
10005caa:	83 c8 20             	or     eax,0x20
10005cad:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
10005cb1:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
10005cb6:	88 54 24 1e          	mov    BYTE PTR [esp+0x1e],dl
10005cba:	0d 40 02 00 00       	or     eax,0x240
10005cbf:	83 ec 0c             	sub    esp,0xc
10005cc2:	ff b6 80 00 00 00    	push   DWORD PTR [esi+0x80]
10005cc8:	50                   	push   eax
10005cc9:	6a 00                	push   0x0
10005ccb:	68 ff 00 00 00       	push   0xff
10005cd0:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005cd6:	e8 fc ff ff ff       	call   10005cd7 <getSSFNFontRegion(Font*, int, int*, int*)+0x5c>	10005cd7: R_386_PC32	ssfn_select
10005cdb:	83 c4 18             	add    esp,0x18
10005cde:	8d 44 24 2c          	lea    eax,[esp+0x2c]
10005ce2:	50                   	push   eax
10005ce3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
10005ce7:	50                   	push   eax
10005ce8:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
10005cef:	53                   	push   ebx
10005cf0:	8d 6c 24 36          	lea    ebp,[esp+0x36]
10005cf4:	55                   	push   ebp
10005cf5:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005cfb:	e8 fc ff ff ff       	call   10005cfc <getSSFNFontRegion(Font*, int, int*, int*)+0x81>	10005cfc: R_386_PC32	ssfn_bbox
10005d00:	83 c4 14             	add    esp,0x14
10005d03:	8b 03                	mov    eax,DWORD PTR [ebx]
10005d05:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
10005d09:	0f af 07             	imul   eax,DWORD PTR [edi]
10005d0c:	c1 e0 02             	shl    eax,0x2
10005d0f:	50                   	push   eax
10005d10:	e8 fc ff ff ff       	call   10005d11 <getSSFNFontRegion(Font*, int, int*, int*)+0x96>	10005d11: R_386_PC32	malloc
10005d15:	66 c7 44 24 42 00 00 	mov    WORD PTR [esp+0x42],0x0
10005d1c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005d20:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10005d28:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10005d2f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
10005d33:	c7 44 24 48 20 20 20 ff 	mov    DWORD PTR [esp+0x48],0xff202020
10005d3b:	8b 13                	mov    edx,DWORD PTR [ebx]
10005d3d:	8b 00                	mov    eax,DWORD PTR [eax]
10005d3f:	66 89 54 24 3c       	mov    WORD PTR [esp+0x3c],dx
10005d44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005d48:	89 c1                	mov    ecx,eax
10005d4a:	31 c0                	xor    eax,eax
10005d4c:	0f af ca             	imul   ecx,edx
10005d4f:	c1 e2 02             	shl    edx,0x2
10005d52:	c1 e1 02             	shl    ecx,0x2
10005d55:	66 89 54 24 40       	mov    WORD PTR [esp+0x40],dx
10005d5a:	f3 aa                	rep stos BYTE PTR es:[edi],al
10005d5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10005d60:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
10005d65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10005d69:	66 89 44 24 3e       	mov    WORD PTR [esp+0x3e],ax
10005d6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005d72:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10005d76:	83 c4 0c             	add    esp,0xc
10005d79:	55                   	push   ebp
10005d7a:	8d 44 24 30          	lea    eax,[esp+0x30]
10005d7e:	50                   	push   eax
10005d7f:	ff b6 90 04 00 00    	push   DWORD PTR [esi+0x490]
10005d85:	e8 fc ff ff ff       	call   10005d86 <getSSFNFontRegion(Font*, int, int*, int*)+0x10b>	10005d86: R_386_PC32	ssfn_render
10005d8a:	8b 03                	mov    eax,DWORD PTR [ebx]
10005d8c:	8b bc 24 80 00 00 00 	mov    edi,DWORD PTR [esp+0x80]
10005d93:	0f af 07             	imul   eax,DWORD PTR [edi]
10005d96:	89 04 24             	mov    DWORD PTR [esp],eax
10005d99:	e8 fc ff ff ff       	call   10005d9a <getSSFNFontRegion(Font*, int, int*, int*)+0x11f>	10005d9a: R_386_PC32	malloc
10005d9e:	31 c9                	xor    ecx,ecx
10005da0:	89 c6                	mov    esi,eax
10005da2:	0f bf 44 24 3e       	movsx  eax,WORD PTR [esp+0x3e]
10005da7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10005dab:	0f bf 44 24 3c       	movsx  eax,WORD PTR [esp+0x3c]
10005db0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10005db4:	83 c4 10             	add    esp,0x10
10005db7:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
10005dbb:	7e 23                	jle    10005de0 <getSSFNFontRegion(Font*, int, int*, int*)+0x165>
10005dbd:	8b 2b                	mov    ebp,DWORD PTR [ebx]
10005dbf:	31 d2                	xor    edx,edx
10005dc1:	0f af e9             	imul   ebp,ecx
10005dc4:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
10005dc8:	7e 13                	jle    10005ddd <getSSFNFontRegion(Font*, int, int*, int*)+0x162>
10005dca:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
10005dce:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10005dd2:	83 3c 87 00          	cmp    DWORD PTR [edi+eax*4],0x0
10005dd6:	0f 95 04 06          	setne  BYTE PTR [esi+eax*1]
10005dda:	42                   	inc    edx
10005ddb:	eb e7                	jmp    10005dc4 <getSSFNFontRegion(Font*, int, int*, int*)+0x149>
10005ddd:	41                   	inc    ecx
10005dde:	eb d7                	jmp    10005db7 <getSSFNFontRegion(Font*, int, int*, int*)+0x13c>
10005de0:	50                   	push   eax
10005de1:	50                   	push   eax
10005de2:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
10005de6:	ff 30                	push   DWORD PTR [eax]
10005de8:	ff 33                	push   DWORD PTR [ebx]
10005dea:	56                   	push   esi
10005deb:	6a 00                	push   0x0
10005ded:	6a 00                	push   0x0
10005def:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
10005df3:	e8 fc ff ff ff       	call   10005df4 <getSSFNFontRegion(Font*, int, int*, int*)+0x179>	10005df4: R_386_PC32	createTightFontRegion(int, int, unsigned char*, int, int)
10005df8:	56                   	push   esi
10005df9:	e8 fc ff ff ff       	call   10005dfa <getSSFNFontRegion(Font*, int, int*, int*)+0x17f>	10005dfa: R_386_PC32	free
10005dfe:	83 c4 14             	add    esp,0x14
10005e01:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10005e05:	e8 fc ff ff ff       	call   10005e06 <getSSFNFontRegion(Font*, int, int*, int*)+0x18b>	10005e06: R_386_PC32	free
10005e0a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10005e0e:	83 c4 5c             	add    esp,0x5c
10005e11:	5b                   	pop    ebx
10005e12:	5e                   	pop    esi
10005e13:	5f                   	pop    edi
10005e14:	5d                   	pop    ebp
10005e15:	c2 04 00             	ret    0x4

10005e18 <kernelPanicHandler(char*)>:
10005e18:	53                   	push   ebx
10005e19:	bb 06 00 00 00       	mov    ebx,0x6
10005e1e:	83 ec 10             	sub    esp,0x10
10005e21:	a1 00 00 00 00       	mov    eax,ds:0x0	10005e22: R_386_32	screen
10005e26:	8b 10                	mov    edx,DWORD PTR [eax]
10005e28:	68 80 00 00 00       	push   0x80
10005e2d:	50                   	push   eax
10005e2e:	ff 52 40             	call   DWORD PTR [edx+0x40]
10005e31:	83 c4 10             	add    esp,0x10
10005e34:	0f be 83 a9 90 00 10 	movsx  eax,BYTE PTR [ebx+0x100090a9]	10005e37: R_386_32	.LC0
10005e3b:	84 c0                	test   al,al
10005e3d:	74 1c                	je     10005e5b <kernelPanicHandler(char*)+0x43>
10005e3f:	83 ec 0c             	sub    esp,0xc
10005e42:	68 ff ff ff 00       	push   0xffffff
10005e47:	68 80 00 00 00       	push   0x80
10005e4c:	50                   	push   eax
10005e4d:	6a 02                	push   0x2
10005e4f:	53                   	push   ebx
10005e50:	43                   	inc    ebx
10005e51:	e8 fc ff ff ff       	call   10005e52 <kernelPanicHandler(char*)+0x3a>	10005e52: R_386_PC32	drawVGAChar(int, int, int, int, int)
10005e56:	83 c4 20             	add    esp,0x20
10005e59:	eb d9                	jmp    10005e34 <kernelPanicHandler(char*)+0x1c>
10005e5b:	bb 06 00 00 00       	mov    ebx,0x6
10005e60:	0f be 83 b6 90 00 10 	movsx  eax,BYTE PTR [ebx+0x100090b6]	10005e63: R_386_32	.LC1
10005e67:	84 c0                	test   al,al
10005e69:	74 1c                	je     10005e87 <kernelPanicHandler(char*)+0x6f>
10005e6b:	83 ec 0c             	sub    esp,0xc
10005e6e:	68 80 00 00 00       	push   0x80
10005e73:	68 ff ff ff 00       	push   0xffffff
10005e78:	50                   	push   eax
10005e79:	6a 04                	push   0x4
10005e7b:	53                   	push   ebx
10005e7c:	43                   	inc    ebx
10005e7d:	e8 fc ff ff ff       	call   10005e7e <kernelPanicHandler(char*)+0x66>	10005e7e: R_386_PC32	drawVGAChar(int, int, int, int, int)
10005e82:	83 c4 20             	add    esp,0x20
10005e85:	eb d9                	jmp    10005e60 <kernelPanicHandler(char*)+0x48>
10005e87:	bb 0a 00 00 00       	mov    ebx,0xa
10005e8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10005e90:	0f be 44 18 f6       	movsx  eax,BYTE PTR [eax+ebx*1-0xa]
10005e95:	84 c0                	test   al,al
10005e97:	74 1c                	je     10005eb5 <kernelPanicHandler(char*)+0x9d>
10005e99:	83 ec 0c             	sub    esp,0xc
10005e9c:	68 80 00 00 00       	push   0x80
10005ea1:	68 ff ff ff 00       	push   0xffffff
10005ea6:	50                   	push   eax
10005ea7:	6a 06                	push   0x6
10005ea9:	53                   	push   ebx
10005eaa:	43                   	inc    ebx
10005eab:	e8 fc ff ff ff       	call   10005eac <kernelPanicHandler(char*)+0x94>	10005eac: R_386_PC32	drawVGAChar(int, int, int, int, int)
10005eb0:	83 c4 20             	add    esp,0x20
10005eb3:	eb d7                	jmp    10005e8c <kernelPanicHandler(char*)+0x74>
10005eb5:	f4                   	hlt    
10005eb6:	eb fd                	jmp    10005eb5 <kernelPanicHandler(char*)+0x9d>

10005eb8 <kernelMouseHandler(int, int, int, int)>:
10005eb8:	83 ec 14             	sub    esp,0x14
10005ebb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10005ebf:	6a 00                	push   0x0
10005ec1:	6a 00                	push   0x0
10005ec3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10005ec7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10005ecb:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005ecd: R_386_32	screen
10005ed1:	e8 fc ff ff ff       	call   10005ed2 <kernelMouseHandler(int, int, int, int)+0x1a>	10005ed2: R_386_PC32	handleMouse(Video*, int, int, int, int, int)
10005ed6:	83 c4 2c             	add    esp,0x2c
10005ed9:	c3                   	ret    

10005eda <kernelSystemCallHandler(regs*)>:
10005eda:	83 ec 10             	sub    esp,0x10
10005edd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10005ee1:	ff 70 24             	push   DWORD PTR [eax+0x24]
10005ee4:	ff 70 28             	push   DWORD PTR [eax+0x28]
10005ee7:	ff 70 20             	push   DWORD PTR [eax+0x20]
10005eea:	e8 fc ff ff ff       	call   10005eeb <kernelSystemCallHandler(regs*)+0x11>	10005eeb: R_386_PC32	usermodeLinkHandler(UserCommand, NFrame*, void*)
10005eef:	83 c4 1c             	add    esp,0x1c
10005ef2:	c3                   	ret    

10005ef3 <installSystemHooks()>:
10005ef3:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005ef5: R_386_32	guiPanicHandler
	10005ef9: R_386_32	kernelPanicHandler(char*)
10005efd:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005eff: R_386_32	guiMouseHandler
	10005f03: R_386_32	kernelMouseHandler(int, int, int, int)
10005f07:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10005f09: R_386_32	systemCallHandlers
	10005f0d: R_386_32	kernelSystemCallHandler(regs*)
10005f11:	c3                   	ret    

10005f12 <userlinkCreateWindow(UserCommandArg::CreateWindow*)>:
10005f12:	55                   	push   ebp
10005f13:	89 e5                	mov    ebp,esp
10005f15:	57                   	push   edi
10005f16:	56                   	push   esi
10005f17:	53                   	push   ebx
10005f18:	83 ec 2c             	sub    esp,0x2c
10005f1b:	c7 45 e0 90 00 00 00 	mov    DWORD PTR [ebp-0x20],0x90
10005f22:	83 ec 0c             	sub    esp,0xc
10005f25:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
10005f28:	e8 fc ff ff ff       	call   10005f29 <userlinkCreateWindow(UserCommandArg::CreateWindow*)+0x17>	10005f29: R_386_PC32	malloc
10005f2d:	83 c4 10             	add    esp,0x10
10005f30:	89 c3                	mov    ebx,eax
10005f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f35:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
10005f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f3b:	83 c0 14             	add    eax,0x14
10005f3e:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10005f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f44:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
10005f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f4a:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
10005f4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f50:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10005f53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10005f56:	8b 00                	mov    eax,DWORD PTR [eax]
10005f58:	83 ec 04             	sub    esp,0x4
10005f5b:	57                   	push   edi
10005f5c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
10005f5f:	56                   	push   esi
10005f60:	51                   	push   ecx
10005f61:	52                   	push   edx
10005f62:	50                   	push   eax
10005f63:	53                   	push   ebx
10005f64:	e8 fc ff ff ff       	call   10005f65 <userlinkCreateWindow(UserCommandArg::CreateWindow*)+0x53>	10005f65: R_386_PC32	NWindow::NWindow(int, int, int, int, char const*, int)
10005f69:	83 c4 20             	add    esp,0x20
10005f6c:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
10005f6f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10005f72:	8d 65 f4             	lea    esp,[ebp-0xc]
10005f75:	5b                   	pop    ebx
10005f76:	5e                   	pop    esi
10005f77:	5f                   	pop    edi
10005f78:	5d                   	pop    ebp
10005f79:	c3                   	ret    

10005f7a <userlinkAddChild(NFrame*, UserCommandArg::AddChild*)>:
10005f7a:	55                   	push   ebp
10005f7b:	89 e5                	mov    ebp,esp
10005f7d:	83 ec 08             	sub    esp,0x8
10005f80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005f83:	8b 00                	mov    eax,DWORD PTR [eax]
10005f85:	83 ec 08             	sub    esp,0x8
10005f88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005f8b:	50                   	push   eax
10005f8c:	e8 fc ff ff ff       	call   10005f8d <userlinkAddChild(NFrame*, UserCommandArg::AddChild*)+0x13>	10005f8d: R_386_PC32	NFrame::addChild(NFrame*)
10005f91:	83 c4 10             	add    esp,0x10
10005f94:	90                   	nop
10005f95:	c9                   	leave  
10005f96:	c3                   	ret    

10005f97 <userlinkGetDesktop()>:
10005f97:	a1 00 00 00 00       	mov    eax,ds:0x0	10005f98: R_386_32	desktopWindow
10005f9c:	c3                   	ret    

10005f9d <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)>:
10005f9d:	55                   	push   ebp
10005f9e:	89 e5                	mov    ebp,esp
10005fa0:	83 ec 08             	sub    esp,0x8
10005fa3:	83 ec 0c             	sub    esp,0xc
10005fa6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005fa9:	e8 fc ff ff ff       	call   10005faa <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xd>	10005faa: R_386_PC32	NFrame::getAbsX()
10005fae:	83 c4 10             	add    esp,0x10
10005fb1:	89 c2                	mov    edx,eax
10005fb3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005fb6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
10005fb9:	83 ec 0c             	sub    esp,0xc
10005fbc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005fbf:	e8 fc ff ff ff       	call   10005fc0 <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x23>	10005fc0: R_386_PC32	NFrame::getAbsY()
10005fc4:	83 c4 10             	add    esp,0x10
10005fc7:	89 c2                	mov    edx,eax
10005fc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005fcc:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
10005fcf:	83 ec 0c             	sub    esp,0xc
10005fd2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005fd5:	e8 fc ff ff ff       	call   10005fd6 <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x39>	10005fd6: R_386_PC32	NFrame::getX()
10005fda:	83 c4 10             	add    esp,0x10
10005fdd:	89 c2                	mov    edx,eax
10005fdf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005fe2:	89 10                	mov    DWORD PTR [eax],edx
10005fe4:	83 ec 0c             	sub    esp,0xc
10005fe7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10005fea:	e8 fc ff ff ff       	call   10005feb <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x4e>	10005feb: R_386_PC32	NFrame::getY()
10005fef:	83 c4 10             	add    esp,0x10
10005ff2:	89 c2                	mov    edx,eax
10005ff4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10005ff7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10005ffa:	83 ec 0c             	sub    esp,0xc
10005ffd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006000:	e8 fc ff ff ff       	call   10006001 <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x64>	10006001: R_386_PC32	NFrame::getWidth()
10006005:	83 c4 10             	add    esp,0x10
10006008:	89 c2                	mov    edx,eax
1000600a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000600d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10006010:	83 ec 0c             	sub    esp,0xc
10006013:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006016:	e8 fc ff ff ff       	call   10006017 <userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x7a>	10006017: R_386_PC32	NFrame::getHeight()
1000601b:	83 c4 10             	add    esp,0x10
1000601e:	89 c2                	mov    edx,eax
10006020:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006023:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10006026:	b8 00 00 00 00       	mov    eax,0x0
1000602b:	ba 00 00 00 00       	mov    edx,0x0
10006030:	c9                   	leave  
10006031:	c3                   	ret    

10006032 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)>:
10006032:	55                   	push   ebp
10006033:	89 e5                	mov    ebp,esp
10006035:	83 ec 08             	sub    esp,0x8
10006038:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000603b:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
1000603e:	84 c0                	test   al,al
10006040:	75 0a                	jne    1000604c <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x1a>
10006042:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006045:	8a 40 18             	mov    al,BYTE PTR [eax+0x18]
10006048:	84 c0                	test   al,al
1000604a:	74 14                	je     10006060 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x2e>
1000604c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000604f:	8b 00                	mov    eax,DWORD PTR [eax]
10006051:	83 ec 08             	sub    esp,0x8
10006054:	50                   	push   eax
10006055:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006058:	e8 fc ff ff ff       	call   10006059 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x27>	10006059: R_386_PC32	NFrame::setX(int)
1000605d:	83 c4 10             	add    esp,0x10
10006060:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006063:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
10006066:	84 c0                	test   al,al
10006068:	75 0a                	jne    10006074 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x42>
1000606a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000606d:	8a 40 19             	mov    al,BYTE PTR [eax+0x19]
10006070:	84 c0                	test   al,al
10006072:	74 15                	je     10006089 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x57>
10006074:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006077:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000607a:	83 ec 08             	sub    esp,0x8
1000607d:	50                   	push   eax
1000607e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006081:	e8 fc ff ff ff       	call   10006082 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x50>	10006082: R_386_PC32	NFrame::setY(int)
10006086:	83 c4 10             	add    esp,0x10
10006089:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000608c:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
1000608f:	84 c0                	test   al,al
10006091:	75 0a                	jne    1000609d <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x6b>
10006093:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006096:	8a 40 1a             	mov    al,BYTE PTR [eax+0x1a]
10006099:	84 c0                	test   al,al
1000609b:	74 15                	je     100060b2 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x80>
1000609d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100060a0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
100060a3:	83 ec 08             	sub    esp,0x8
100060a6:	50                   	push   eax
100060a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100060aa:	e8 fc ff ff ff       	call   100060ab <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x79>	100060ab: R_386_PC32	NFrame::setWidth(int)
100060af:	83 c4 10             	add    esp,0x10
100060b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100060b5:	8a 40 1c             	mov    al,BYTE PTR [eax+0x1c]
100060b8:	84 c0                	test   al,al
100060ba:	75 0a                	jne    100060c6 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x94>
100060bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100060bf:	8a 40 1b             	mov    al,BYTE PTR [eax+0x1b]
100060c2:	84 c0                	test   al,al
100060c4:	74 15                	je     100060db <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xa9>
100060c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100060c9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100060cc:	83 ec 08             	sub    esp,0x8
100060cf:	50                   	push   eax
100060d0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100060d3:	e8 fc ff ff ff       	call   100060d4 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xa2>	100060d4: R_386_PC32	NFrame::setHeight(int)
100060d8:	83 c4 10             	add    esp,0x10
100060db:	83 ec 0c             	sub    esp,0xc
100060de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100060e1:	e8 fc ff ff ff       	call   100060e2 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xb0>	100060e2: R_386_PC32	NFrame::getAbsX()
100060e6:	83 c4 10             	add    esp,0x10
100060e9:	89 c2                	mov    edx,eax
100060eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100060ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
100060f1:	83 ec 0c             	sub    esp,0xc
100060f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100060f7:	e8 fc ff ff ff       	call   100060f8 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xc6>	100060f8: R_386_PC32	NFrame::getAbsY()
100060fc:	83 c4 10             	add    esp,0x10
100060ff:	89 c2                	mov    edx,eax
10006101:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006104:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
10006107:	83 ec 0c             	sub    esp,0xc
1000610a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000610d:	e8 fc ff ff ff       	call   1000610e <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xdc>	1000610e: R_386_PC32	NFrame::getX()
10006112:	83 c4 10             	add    esp,0x10
10006115:	89 c2                	mov    edx,eax
10006117:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000611a:	89 10                	mov    DWORD PTR [eax],edx
1000611c:	83 ec 0c             	sub    esp,0xc
1000611f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006122:	e8 fc ff ff ff       	call   10006123 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0xf1>	10006123: R_386_PC32	NFrame::getY()
10006127:	83 c4 10             	add    esp,0x10
1000612a:	89 c2                	mov    edx,eax
1000612c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000612f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10006132:	83 ec 0c             	sub    esp,0xc
10006135:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006138:	e8 fc ff ff ff       	call   10006139 <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x107>	10006139: R_386_PC32	NFrame::getWidth()
1000613d:	83 c4 10             	add    esp,0x10
10006140:	89 c2                	mov    edx,eax
10006142:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006145:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10006148:	83 ec 0c             	sub    esp,0xc
1000614b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000614e:	e8 fc ff ff ff       	call   1000614f <userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)+0x11d>	1000614f: R_386_PC32	NFrame::getHeight()
10006153:	83 c4 10             	add    esp,0x10
10006156:	89 c2                	mov    edx,eax
10006158:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000615b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
1000615e:	b8 00 00 00 00       	mov    eax,0x0
10006163:	ba 00 00 00 00       	mov    edx,0x0
10006168:	c9                   	leave  
10006169:	c3                   	ret    

1000616a <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)>:
1000616a:	55                   	push   ebp
1000616b:	89 e5                	mov    ebp,esp
1000616d:	83 ec 08             	sub    esp,0x8
10006170:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006173:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
10006176:	84 c0                	test   al,al
10006178:	74 7a                	je     100061f4 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x8a>
1000617a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000617d:	8a 00                	mov    al,BYTE PTR [eax]
1000617f:	84 c0                	test   al,al
10006181:	74 19                	je     1000619c <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x32>
10006183:	83 ec 0c             	sub    esp,0xc
10006186:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006189:	e8 fc ff ff ff       	call   1000618a <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x20>	1000618a: R_386_PC32	NFrame::isFullscreen()
1000618e:	83 c4 10             	add    esp,0x10
10006191:	83 f0 01             	xor    eax,0x1
10006194:	84 c0                	test   al,al
10006196:	74 04                	je     1000619c <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x32>
10006198:	b0 01                	mov    al,0x1
1000619a:	eb 02                	jmp    1000619e <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x34>
1000619c:	b0 00                	mov    al,0x0
1000619e:	84 c0                	test   al,al
100061a0:	74 14                	je     100061b6 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x4c>
100061a2:	a1 00 00 00 00       	mov    eax,ds:0x0	100061a3: R_386_32	screen
100061a7:	83 ec 08             	sub    esp,0x8
100061aa:	50                   	push   eax
100061ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100061ae:	e8 fc ff ff ff       	call   100061af <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x45>	100061af: R_386_PC32	NFrame::toggleFullscreen(Video*)
100061b3:	83 c4 10             	add    esp,0x10
100061b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100061b9:	8a 00                	mov    al,BYTE PTR [eax]
100061bb:	83 f0 01             	xor    eax,0x1
100061be:	84 c0                	test   al,al
100061c0:	74 16                	je     100061d8 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x6e>
100061c2:	83 ec 0c             	sub    esp,0xc
100061c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100061c8:	e8 fc ff ff ff       	call   100061c9 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x5f>	100061c9: R_386_PC32	NFrame::isFullscreen()
100061cd:	83 c4 10             	add    esp,0x10
100061d0:	84 c0                	test   al,al
100061d2:	74 04                	je     100061d8 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x6e>
100061d4:	b0 01                	mov    al,0x1
100061d6:	eb 02                	jmp    100061da <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x70>
100061d8:	b0 00                	mov    al,0x0
100061da:	84 c0                	test   al,al
100061dc:	74 34                	je     10006212 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0xa8>
100061de:	a1 00 00 00 00       	mov    eax,ds:0x0	100061df: R_386_32	screen
100061e3:	83 ec 08             	sub    esp,0x8
100061e6:	50                   	push   eax
100061e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100061ea:	e8 fc ff ff ff       	call   100061eb <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0x81>	100061eb: R_386_PC32	NFrame::toggleFullscreen(Video*)
100061ef:	83 c4 10             	add    esp,0x10
100061f2:	eb 1e                	jmp    10006212 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0xa8>
100061f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100061f7:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
100061fa:	84 c0                	test   al,al
100061fc:	74 14                	je     10006212 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0xa8>
100061fe:	a1 00 00 00 00       	mov    eax,ds:0x0	100061ff: R_386_32	screen
10006203:	83 ec 08             	sub    esp,0x8
10006206:	50                   	push   eax
10006207:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000620a:	e8 fc ff ff ff       	call   1000620b <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0xa1>	1000620b: R_386_PC32	NFrame::toggleFullscreen(Video*)
1000620f:	83 c4 10             	add    esp,0x10
10006212:	83 ec 0c             	sub    esp,0xc
10006215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006218:	e8 fc ff ff ff       	call   10006219 <userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)+0xaf>	10006219: R_386_PC32	NFrame::isFullscreen()
1000621d:	83 c4 10             	add    esp,0x10
10006220:	88 c2                	mov    dl,al
10006222:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006225:	88 10                	mov    BYTE PTR [eax],dl
10006227:	b8 00 00 00 00       	mov    eax,0x0
1000622c:	ba 00 00 00 00       	mov    edx,0x0
10006231:	c9                   	leave  
10006232:	c3                   	ret    

10006233 <userlinkHide(NFrame*, UserCommandArg::Hide*)>:
10006233:	55                   	push   ebp
10006234:	89 e5                	mov    ebp,esp
10006236:	83 ec 08             	sub    esp,0x8
10006239:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000623c:	8a 40 01             	mov    al,BYTE PTR [eax+0x1]
1000623f:	84 c0                	test   al,al
10006241:	74 17                	je     1000625a <userlinkHide(NFrame*, UserCommandArg::Hide*)+0x27>
10006243:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006246:	8a 00                	mov    al,BYTE PTR [eax]
10006248:	0f b6 c0             	movzx  eax,al
1000624b:	83 ec 08             	sub    esp,0x8
1000624e:	50                   	push   eax
1000624f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006252:	e8 fc ff ff ff       	call   10006253 <userlinkHide(NFrame*, UserCommandArg::Hide*)+0x20>	10006253: R_386_PC32	NFrame::hide(bool)
10006257:	83 c4 10             	add    esp,0x10
1000625a:	83 ec 0c             	sub    esp,0xc
1000625d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006260:	e8 fc ff ff ff       	call   10006261 <userlinkHide(NFrame*, UserCommandArg::Hide*)+0x2e>	10006261: R_386_PC32	NFrame::isHidden()
10006265:	83 c4 10             	add    esp,0x10
10006268:	88 c2                	mov    dl,al
1000626a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000626d:	88 10                	mov    BYTE PTR [eax],dl
1000626f:	83 ec 0c             	sub    esp,0xc
10006272:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006275:	e8 fc ff ff ff       	call   10006276 <userlinkHide(NFrame*, UserCommandArg::Hide*)+0x43>	10006276: R_386_PC32	NFrame::isHiddenOverall()
1000627a:	83 c4 10             	add    esp,0x10
1000627d:	88 c2                	mov    dl,al
1000627f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006282:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
10006285:	b8 00 00 00 00       	mov    eax,0x0
1000628a:	ba 00 00 00 00       	mov    edx,0x0
1000628f:	c9                   	leave  
10006290:	c3                   	ret    

10006291 <userlinkRaise(NFrame*)>:
10006291:	55                   	push   ebp
10006292:	89 e5                	mov    ebp,esp
10006294:	83 ec 08             	sub    esp,0x8
10006297:	83 ec 0c             	sub    esp,0xc
1000629a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000629d:	e8 fc ff ff ff       	call   1000629e <userlinkRaise(NFrame*)+0xd>	1000629e: R_386_PC32	NFrame::raise()
100062a2:	83 c4 10             	add    esp,0x10
100062a5:	b8 00 00 00 00       	mov    eax,0x0
100062aa:	ba 00 00 00 00       	mov    edx,0x0
100062af:	c9                   	leave  
100062b0:	c3                   	ret    

100062b1 <userlinkInvalidate(NFrame*)>:
100062b1:	55                   	push   ebp
100062b2:	89 e5                	mov    ebp,esp
100062b4:	83 ec 08             	sub    esp,0x8
100062b7:	83 ec 0c             	sub    esp,0xc
100062ba:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100062bd:	e8 fc ff ff ff       	call   100062be <userlinkInvalidate(NFrame*)+0xd>	100062be: R_386_PC32	NFrame::tryInvalidate()
100062c2:	83 c4 10             	add    esp,0x10
100062c5:	b8 00 00 00 00       	mov    eax,0x0
100062ca:	ba 00 00 00 00       	mov    edx,0x0
100062cf:	c9                   	leave  
100062d0:	c3                   	ret    

100062d1 <usermodeLinkHandler(UserCommand, NFrame*, void*)>:
100062d1:	55                   	push   ebp
100062d2:	89 e5                	mov    ebp,esp
100062d4:	83 ec 08             	sub    esp,0x8
100062d7:	83 7d 08 08          	cmp    DWORD PTR [ebp+0x8],0x8
100062db:	0f 87 aa 00 00 00    	ja     1000638b <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xba>
100062e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100062e4:	c1 e0 02             	shl    eax,0x2
100062e7:	05 fc 90 00 10       	add    eax,0x100090fc	100062e8: R_386_32	.text
100062ec:	8b 00                	mov    eax,DWORD PTR [eax]
100062ee:	ff e0                	jmp    eax
100062f0:	83 ec 0c             	sub    esp,0xc
100062f3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100062f6:	e8 fc ff ff ff       	call   100062f7 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x26>	100062f7: R_386_PC32	userlinkCreateWindow(UserCommandArg::CreateWindow*)
100062fb:	83 c4 10             	add    esp,0x10
100062fe:	99                   	cdq    
100062ff:	e9 91 00 00 00       	jmp    10006395 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
10006304:	83 ec 08             	sub    esp,0x8
10006307:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000630a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000630d:	e8 fc ff ff ff       	call   1000630e <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x3d>	1000630e: R_386_PC32	userlinkAddChild(NFrame*, UserCommandArg::AddChild*)
10006312:	83 c4 10             	add    esp,0x10
10006315:	eb 7e                	jmp    10006395 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
10006317:	e8 fc ff ff ff       	call   10006318 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x47>	10006318: R_386_PC32	userlinkGetDesktop()
1000631c:	99                   	cdq    
1000631d:	eb 76                	jmp    10006395 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
1000631f:	83 ec 08             	sub    esp,0x8
10006322:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006325:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006328:	e8 fc ff ff ff       	call   10006329 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x58>	10006329: R_386_PC32	userlinkGetCoordinates(NFrame*, UserCommandArg::Coordinates*)
1000632d:	83 c4 10             	add    esp,0x10
10006330:	eb 63                	jmp    10006395 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
10006332:	83 ec 08             	sub    esp,0x8
10006335:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006338:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000633b:	e8 fc ff ff ff       	call   1000633c <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x6b>	1000633c: R_386_PC32	userlinkSetCoordinates(NFrame*, UserCommandArg::Coordinates*)
10006340:	83 c4 10             	add    esp,0x10
10006343:	eb 50                	jmp    10006395 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
10006345:	83 ec 08             	sub    esp,0x8
10006348:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000634b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000634e:	e8 fc ff ff ff       	call   1000634f <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x7e>	1000634f: R_386_PC32	userlinkFullscreen(NFrame*, UserCommandArg::Fullscreen*)
10006353:	83 c4 10             	add    esp,0x10
10006356:	eb 3d                	jmp    10006395 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
10006358:	83 ec 08             	sub    esp,0x8
1000635b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000635e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006361:	e8 fc ff ff ff       	call   10006362 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0x91>	10006362: R_386_PC32	userlinkHide(NFrame*, UserCommandArg::Hide*)
10006366:	83 c4 10             	add    esp,0x10
10006369:	eb 2a                	jmp    10006395 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
1000636b:	83 ec 0c             	sub    esp,0xc
1000636e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006371:	e8 fc ff ff ff       	call   10006372 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xa1>	10006372: R_386_PC32	userlinkRaise(NFrame*)
10006376:	83 c4 10             	add    esp,0x10
10006379:	eb 1a                	jmp    10006395 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
1000637b:	83 ec 0c             	sub    esp,0xc
1000637e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006381:	e8 fc ff ff ff       	call   10006382 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xb1>	10006382: R_386_PC32	userlinkInvalidate(NFrame*)
10006386:	83 c4 10             	add    esp,0x10
10006389:	eb 0a                	jmp    10006395 <usermodeLinkHandler(UserCommand, NFrame*, void*)+0xc4>
1000638b:	b8 ff ff ff ff       	mov    eax,0xffffffff
10006390:	ba ff ff ff ff       	mov    edx,0xffffffff
10006395:	c9                   	leave  
10006396:	c3                   	ret    

10006397 <drawVGAChar(int, int, int, int, int)>:
10006397:	55                   	push   ebp
10006398:	57                   	push   edi
10006399:	56                   	push   esi
1000639a:	53                   	push   ebx
1000639b:	83 ec 1c             	sub    esp,0x1c
1000639e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100063a2:	c1 e0 04             	shl    eax,0x4
100063a5:	89 04 24             	mov    DWORD PTR [esp],eax
100063a8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100063ac:	c1 e0 04             	shl    eax,0x4
100063af:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100063b3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100063b7:	c1 e0 03             	shl    eax,0x3
100063ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100063be:	31 db                	xor    ebx,ebx
100063c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
100063c3:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	100063c6: R_386_32	cp
100063ca:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
100063ce:	8d 2c 1f             	lea    ebp,[edi+ebx*1]
100063d1:	31 f6                	xor    esi,esi
100063d3:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100063d5: R_386_32	screen
100063d9:	8b 0a                	mov    ecx,DWORD PTR [edx]
100063db:	8b 79 24             	mov    edi,DWORD PTR [ecx+0x24]
100063de:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100063e2:	84 c0                	test   al,al
100063e4:	79 04                	jns    100063ea <drawVGAChar(int, int, int, int, int)+0x53>
100063e6:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
100063ea:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
100063ee:	51                   	push   ecx
100063ef:	55                   	push   ebp
100063f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100063f4:	8d 0c 06             	lea    ecx,[esi+eax*1]
100063f7:	51                   	push   ecx
100063f8:	52                   	push   edx
100063f9:	ff d7                	call   edi
100063fb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
100063ff:	d1 e0                	shl    eax,1
10006401:	46                   	inc    esi
10006402:	83 c4 10             	add    esp,0x10
10006405:	83 fe 08             	cmp    esi,0x8
10006408:	75 c9                	jne    100063d3 <drawVGAChar(int, int, int, int, int)+0x3c>
1000640a:	43                   	inc    ebx
1000640b:	83 fb 10             	cmp    ebx,0x10
1000640e:	75 b0                	jne    100063c0 <drawVGAChar(int, int, int, int, int)+0x29>
10006410:	83 c4 1c             	add    esp,0x1c
10006413:	5b                   	pop    ebx
10006414:	5e                   	pop    esi
10006415:	5f                   	pop    edi
10006416:	5d                   	pop    ebp
10006417:	c3                   	ret    

10006418 <videoDrawRect(Video*, int, int, int, int, unsigned int)>:
10006418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000641c:	8b 00                	mov    eax,DWORD PTR [eax]
1000641e:	ff 60 28             	jmp    DWORD PTR [eax+0x28]

10006421 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)>:
10006421:	55                   	push   ebp
10006422:	57                   	push   edi
10006423:	56                   	push   esi
10006424:	53                   	push   ebx
10006425:	83 ec 28             	sub    esp,0x28
10006428:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
1000642c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10006430:	53                   	push   ebx
10006431:	e8 fc ff ff ff       	call   10006432 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x11>	10006432: R_386_PC32	Video::getWidth()
10006436:	83 c4 10             	add    esp,0x10
10006439:	39 f0                	cmp    eax,esi
1000643b:	0f 8c df 00 00 00    	jl     10006520 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10006441:	83 ec 0c             	sub    esp,0xc
10006444:	53                   	push   ebx
10006445:	e8 fc ff ff ff       	call   10006446 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x25>	10006446: R_386_PC32	Video::getHeight()
1000644a:	83 c4 10             	add    esp,0x10
1000644d:	3b 44 24 38          	cmp    eax,DWORD PTR [esp+0x38]
10006451:	0f 8c c9 00 00 00    	jl     10006520 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10006457:	89 f7                	mov    edi,esi
10006459:	03 7c 24 3c          	add    edi,DWORD PTR [esp+0x3c]
1000645d:	0f 88 bd 00 00 00    	js     10006520 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10006463:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
10006467:	03 6c 24 40          	add    ebp,DWORD PTR [esp+0x40]
1000646b:	0f 88 af 00 00 00    	js     10006520 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
10006471:	85 f6                	test   esi,esi
10006473:	79 06                	jns    1000647b <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x5a>
10006475:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
10006479:	31 f6                	xor    esi,esi
1000647b:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10006480:	79 0c                	jns    1000648e <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x6d>
10006482:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
10006486:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
1000648e:	83 ec 0c             	sub    esp,0xc
10006491:	53                   	push   ebx
10006492:	e8 fc ff ff ff       	call   10006493 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x72>	10006493: R_386_PC32	Video::getWidth()
10006497:	83 c4 10             	add    esp,0x10
1000649a:	39 c7                	cmp    edi,eax
1000649c:	7e 12                	jle    100064b0 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x8f>
1000649e:	83 ec 0c             	sub    esp,0xc
100064a1:	53                   	push   ebx
100064a2:	e8 fc ff ff ff       	call   100064a3 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x82>	100064a3: R_386_PC32	Video::getWidth()
100064a7:	29 f0                	sub    eax,esi
100064a9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
100064ad:	83 c4 10             	add    esp,0x10
100064b0:	83 ec 0c             	sub    esp,0xc
100064b3:	53                   	push   ebx
100064b4:	e8 fc ff ff ff       	call   100064b5 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0x94>	100064b5: R_386_PC32	Video::getHeight()
100064b9:	83 c4 10             	add    esp,0x10
100064bc:	39 c5                	cmp    ebp,eax
100064be:	7e 14                	jle    100064d4 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xb3>
100064c0:	83 ec 0c             	sub    esp,0xc
100064c3:	53                   	push   ebx
100064c4:	e8 fc ff ff ff       	call   100064c5 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xa4>	100064c5: R_386_PC32	Video::getHeight()
100064c9:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
100064cd:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
100064d1:	83 c4 10             	add    esp,0x10
100064d4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100064d8:	89 f8                	mov    eax,edi
100064da:	2b 44 24 38          	sub    eax,DWORD PTR [esp+0x38]
100064de:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
100064e2:	7e 3c                	jle    10006520 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xff>
100064e4:	8d 14 37             	lea    edx,[edi+esi*1]
100064e7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100064eb:	80 e2 01             	and    dl,0x1
100064ee:	74 05                	je     100064f5 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xd4>
100064f0:	35 ff ff ff 00       	xor    eax,0xffffff
100064f5:	31 ed                	xor    ebp,ebp
100064f7:	39 6c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebp
100064fb:	7e 20                	jle    1000651d <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xfc>
100064fd:	8b 13                	mov    edx,DWORD PTR [ebx]
100064ff:	8d 4c 35 00          	lea    ecx,[ebp+esi*1+0x0]
10006503:	50                   	push   eax
10006504:	45                   	inc    ebp
10006505:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10006509:	57                   	push   edi
1000650a:	51                   	push   ecx
1000650b:	53                   	push   ebx
1000650c:	ff 52 24             	call   DWORD PTR [edx+0x24]
1000650f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10006513:	83 c4 10             	add    esp,0x10
10006516:	35 ff ff ff 00       	xor    eax,0xffffff
1000651b:	eb da                	jmp    100064f7 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xd6>
1000651d:	47                   	inc    edi
1000651e:	eb b8                	jmp    100064d8 <videoDrawRectDotted(Video*, int, int, int, int, unsigned int)+0xb7>
10006520:	83 c4 1c             	add    esp,0x1c
10006523:	5b                   	pop    ebx
10006524:	5e                   	pop    esi
10006525:	5f                   	pop    edi
10006526:	5d                   	pop    ebp
10006527:	c3                   	ret    

10006528 <videoGetpixel(Video*, int, int)>:
10006528:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000652c:	8b 00                	mov    eax,DWORD PTR [eax]
1000652e:	ff 60 38             	jmp    DWORD PTR [eax+0x38]

10006531 <videoSaveAreaUnderCursor(Video*, int, int)>:
10006531:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10006535:	8b 00                	mov    eax,DWORD PTR [eax]
10006537:	ff 60 34             	jmp    DWORD PTR [eax+0x34]

1000653a <videoPutpixel(Video*, int, int, unsigned int)>:
1000653a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000653e:	8b 00                	mov    eax,DWORD PTR [eax]
10006540:	ff 60 24             	jmp    DWORD PTR [eax+0x24]

10006543 <videoDrawCursor(Video*, int, int, unsigned int*)>:
10006543:	83 ec 18             	sub    esp,0x18
10006546:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000654a:	8b 10                	mov    edx,DWORD PTR [eax]
1000654c:	6a 00                	push   0x0
1000654e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10006552:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
10006556:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000655a:	50                   	push   eax
1000655b:	ff 52 30             	call   DWORD PTR [edx+0x30]
1000655e:	83 c4 2c             	add    esp,0x2c
10006561:	c3                   	ret    

10006562 <Region::Region()>:
10006562:	55                   	push   ebp
10006563:	89 e5                	mov    ebp,esp
10006565:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006568:	c7 40 04 39 94 60 f9 	mov    DWORD PTR [eax+0x4],0xf9609439
1000656f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006572:	c7 40 08 72 28 c1 f2 	mov    DWORD PTR [eax+0x8],0xf2c12872
10006579:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000657c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10006582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006585:	c7 40 0c ab bc 21 ec 	mov    DWORD PTR [eax+0xc],0xec21bcab
1000658c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000658f:	c7 40 10 e4 50 82 e5 	mov    DWORD PTR [eax+0x10],0xe58250e4
10006596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006599:	c7 40 14 1d e5 e2 de 	mov    DWORD PTR [eax+0x14],0xdee2e51d
100065a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065a3:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
100065a7:	90                   	nop
100065a8:	5d                   	pop    ebp
100065a9:	c3                   	ret    

100065aa <Region::Region(int, int, int, int)>:
100065aa:	55                   	push   ebp
100065ab:	89 e5                	mov    ebp,esp
100065ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065b0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
100065b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100065b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065b9:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
100065bc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
100065bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100065c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065cb:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
100065d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100065d8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
100065db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065de:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100065e1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
100065e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065e7:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
100065eb:	90                   	nop
100065ec:	5d                   	pop    ebp
100065ed:	c3                   	ret    

100065ee <FontStyle::FontStyle(char const*, int, int)>:
100065ee:	55                   	push   ebp
100065ef:	89 e5                	mov    ebp,esp
100065f1:	83 ec 08             	sub    esp,0x8
100065f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100065f7:	83 ec 08             	sub    esp,0x8
100065fa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100065fd:	50                   	push   eax
100065fe:	e8 fc ff ff ff       	call   100065ff <FontStyle::FontStyle(char const*, int, int)+0x11>	100065ff: R_386_PC32	strcpy
10006603:	83 c4 10             	add    esp,0x10
10006606:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006609:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
1000660c:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
10006612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006615:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
10006618:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
1000661e:	90                   	nop
1000661f:	c9                   	leave  
10006620:	c3                   	ret    
10006621:	90                   	nop

10006622 <NFrame::Graphics::Graphics(Video*, Region)>:
10006622:	55                   	push   ebp
10006623:	89 e5                	mov    ebp,esp
10006625:	57                   	push   edi
10006626:	56                   	push   esi
10006627:	53                   	push   ebx
10006628:	83 ec 0c             	sub    esp,0xc
1000662b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000662e:	83 c0 04             	add    eax,0x4
10006631:	83 ec 0c             	sub    esp,0xc
10006634:	50                   	push   eax
10006635:	e8 fc ff ff ff       	call   10006636 <NFrame::Graphics::Graphics(Video*, Region)+0x14>	10006636: R_386_PC32	Region::Region()
1000663a:	83 c4 10             	add    esp,0x10
1000663d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006640:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10006643:	89 10                	mov    DWORD PTR [eax],edx
10006645:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006648:	8d 58 04             	lea    ebx,[eax+0x4]
1000664b:	8d 45 10             	lea    eax,[ebp+0x10]
1000664e:	ba 19 00 00 00       	mov    edx,0x19
10006653:	89 df                	mov    edi,ebx
10006655:	89 c6                	mov    esi,eax
10006657:	89 d1                	mov    ecx,edx
10006659:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000665b:	90                   	nop
1000665c:	8d 65 f4             	lea    esp,[ebp-0xc]
1000665f:	5b                   	pop    ebx
10006660:	5e                   	pop    esi
10006661:	5f                   	pop    edi
10006662:	5d                   	pop    ebp
10006663:	c3                   	ret    

10006664 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)>:
10006664:	55                   	push   ebp
10006665:	89 e5                	mov    ebp,esp
10006667:	57                   	push   edi
10006668:	56                   	push   esi
10006669:	53                   	push   ebx
1000666a:	83 ec 3c             	sub    esp,0x3c
1000666d:	8d 45 cc             	lea    eax,[ebp-0x34]
10006670:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10006673:	83 ec 04             	sub    esp,0x4
10006676:	83 ec 1c             	sub    esp,0x1c
10006679:	89 e0                	mov    eax,esp
1000667b:	89 c3                	mov    ebx,eax
1000667d:	8d 45 0c             	lea    eax,[ebp+0xc]
10006680:	ba 07 00 00 00       	mov    edx,0x7
10006685:	89 df                	mov    edi,ebx
10006687:	89 c6                	mov    esi,eax
10006689:	89 d1                	mov    ecx,edx
1000668b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000668d:	83 ec 1c             	sub    esp,0x1c
10006690:	89 e0                	mov    eax,esp
10006692:	89 c3                	mov    ebx,eax
10006694:	8d 45 2c             	lea    eax,[ebp+0x2c]
10006697:	ba 07 00 00 00       	mov    edx,0x7
1000669c:	89 df                	mov    edi,ebx
1000669e:	89 c6                	mov    esi,eax
100066a0:	89 d1                	mov    ecx,edx
100066a2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100066a4:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100066a7:	e8 fc ff ff ff       	call   100066a8 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x44>	100066a8: R_386_PC32	getRegionIntersection(Region, Region)
100066ac:	83 c4 3c             	add    esp,0x3c
100066af:	8b 45 28             	mov    eax,DWORD PTR [ebp+0x28]
100066b2:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
100066b5:	83 ec 0c             	sub    esp,0xc
100066b8:	ff 75 48             	push   DWORD PTR [ebp+0x48]
100066bb:	83 ec 1c             	sub    esp,0x1c
100066be:	89 e0                	mov    eax,esp
100066c0:	89 c3                	mov    ebx,eax
100066c2:	8d 45 cc             	lea    eax,[ebp-0x34]
100066c5:	ba 07 00 00 00       	mov    edx,0x7
100066ca:	89 df                	mov    edi,ebx
100066cc:	89 c6                	mov    esi,eax
100066ce:	89 d1                	mov    ecx,edx
100066d0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100066d2:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100066d5:	e8 fc ff ff ff       	call   100066d6 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x72>	100066d6: R_386_PC32	fillRegion(Video*, Region, unsigned int)
100066da:	83 c4 30             	add    esp,0x30
100066dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100066e0:	83 ec 0c             	sub    esp,0xc
100066e3:	50                   	push   eax
100066e4:	e8 fc ff ff ff       	call   100066e5 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x81>	100066e5: R_386_PC32	free
100066e9:	83 c4 10             	add    esp,0x10
100066ec:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100066ef:	83 ec 0c             	sub    esp,0xc
100066f2:	50                   	push   eax
100066f3:	e8 fc ff ff ff       	call   100066f4 <NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)+0x90>	100066f4: R_386_PC32	free
100066f8:	83 c4 10             	add    esp,0x10
100066fb:	90                   	nop
100066fc:	8d 65 f4             	lea    esp,[ebp-0xc]
100066ff:	5b                   	pop    ebx
10006700:	5e                   	pop    esi
10006701:	5f                   	pop    edi
10006702:	5d                   	pop    ebp
10006703:	c3                   	ret    

10006704 <NFrame::markRegionAsDirty(Region)>:
10006704:	55                   	push   ebp
10006705:	89 e5                	mov    ebp,esp
10006707:	57                   	push   edi
10006708:	56                   	push   esi
10006709:	53                   	push   ebx
1000670a:	83 ec 3c             	sub    esp,0x3c
1000670d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006710:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006713:	85 c0                	test   eax,eax
10006715:	74 2d                	je     10006744 <NFrame::markRegionAsDirty(Region)+0x40>
10006717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000671a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
1000671d:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10006720:	83 ec 1c             	sub    esp,0x1c
10006723:	89 e0                	mov    eax,esp
10006725:	89 c3                	mov    ebx,eax
10006727:	8d 45 0c             	lea    eax,[ebp+0xc]
1000672a:	ba 07 00 00 00       	mov    edx,0x7
1000672f:	89 df                	mov    edi,ebx
10006731:	89 c6                	mov    esi,eax
10006733:	89 d1                	mov    ecx,edx
10006735:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006737:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000673a:	e8 fc ff ff ff       	call   1000673b <NFrame::markRegionAsDirty(Region)+0x37>	1000673b: R_386_PC32	NFrame::markRegionAsDirty(Region)
1000673f:	83 c4 20             	add    esp,0x20
10006742:	eb 6b                	jmp    100067af <NFrame::markRegionAsDirty(Region)+0xab>
10006744:	8d 45 cc             	lea    eax,[ebp-0x34]
10006747:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
1000674a:	83 ec 04             	sub    esp,0x4
1000674d:	83 ec 1c             	sub    esp,0x1c
10006750:	89 e0                	mov    eax,esp
10006752:	89 c3                	mov    ebx,eax
10006754:	8d 45 0c             	lea    eax,[ebp+0xc]
10006757:	ba 07 00 00 00       	mov    edx,0x7
1000675c:	89 df                	mov    edi,ebx
1000675e:	89 c6                	mov    esi,eax
10006760:	89 d1                	mov    ecx,edx
10006762:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006767:	83 ec 1c             	sub    esp,0x1c
1000676a:	89 e2                	mov    edx,esp
1000676c:	8d 58 4c             	lea    ebx,[eax+0x4c]
1000676f:	b8 07 00 00 00       	mov    eax,0x7
10006774:	89 d7                	mov    edi,edx
10006776:	89 de                	mov    esi,ebx
10006778:	89 c1                	mov    ecx,eax
1000677a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000677c:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
1000677f:	e8 fc ff ff ff       	call   10006780 <NFrame::markRegionAsDirty(Region)+0x7c>	10006780: R_386_PC32	getRegionUnion(Region, Region)
10006784:	83 c4 3c             	add    esp,0x3c
10006787:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000678a:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
1000678d:	83 ec 0c             	sub    esp,0xc
10006790:	50                   	push   eax
10006791:	e8 fc ff ff ff       	call   10006792 <NFrame::markRegionAsDirty(Region)+0x8e>	10006792: R_386_PC32	free
10006796:	83 c4 10             	add    esp,0x10
10006799:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000679c:	8d 58 4c             	lea    ebx,[eax+0x4c]
1000679f:	8d 45 cc             	lea    eax,[ebp-0x34]
100067a2:	ba 19 00 00 00       	mov    edx,0x19
100067a7:	89 df                	mov    edi,ebx
100067a9:	89 c6                	mov    esi,eax
100067ab:	89 d1                	mov    ecx,edx
100067ad:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100067af:	90                   	nop
100067b0:	8d 65 f4             	lea    esp,[ebp-0xc]
100067b3:	5b                   	pop    ebx
100067b4:	5e                   	pop    esi
100067b5:	5f                   	pop    edi
100067b6:	5d                   	pop    ebp
100067b7:	c3                   	ret    

100067b8 <NFrame::invalidate()>:
100067b8:	55                   	push   ebp
100067b9:	89 e5                	mov    ebp,esp
100067bb:	57                   	push   edi
100067bc:	56                   	push   esi
100067bd:	53                   	push   ebx
100067be:	83 ec 2c             	sub    esp,0x2c
100067c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100067c4:	8d 45 cc             	lea    eax,[ebp-0x34]
100067c7:	8d 5a 14             	lea    ebx,[edx+0x14]
100067ca:	ba 07 00 00 00       	mov    edx,0x7
100067cf:	89 c7                	mov    edi,eax
100067d1:	89 de                	mov    esi,ebx
100067d3:	89 d1                	mov    ecx,edx
100067d5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100067d7:	83 ec 0c             	sub    esp,0xc
100067da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100067dd:	e8 fc ff ff ff       	call   100067de <NFrame::invalidate()+0x26>	100067de: R_386_PC32	NFrame::getAbsX()
100067e2:	83 c4 10             	add    esp,0x10
100067e5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
100067e8:	83 ec 0c             	sub    esp,0xc
100067eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100067ee:	e8 fc ff ff ff       	call   100067ef <NFrame::invalidate()+0x37>	100067ef: R_386_PC32	NFrame::getAbsY()
100067f3:	83 c4 10             	add    esp,0x10
100067f6:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100067f9:	83 ec 1c             	sub    esp,0x1c
100067fc:	89 e0                	mov    eax,esp
100067fe:	89 c3                	mov    ebx,eax
10006800:	8d 45 cc             	lea    eax,[ebp-0x34]
10006803:	ba 07 00 00 00       	mov    edx,0x7
10006808:	89 df                	mov    edi,ebx
1000680a:	89 c6                	mov    esi,eax
1000680c:	89 d1                	mov    ecx,edx
1000680e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006810:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006813:	e8 fc ff ff ff       	call   10006814 <NFrame::invalidate()+0x5c>	10006814: R_386_PC32	NFrame::markRegionAsDirty(Region)
10006818:	83 c4 20             	add    esp,0x20
1000681b:	90                   	nop
1000681c:	8d 65 f4             	lea    esp,[ebp-0xc]
1000681f:	5b                   	pop    ebx
10006820:	5e                   	pop    esi
10006821:	5f                   	pop    edi
10006822:	5d                   	pop    ebp
10006823:	c3                   	ret    

10006824 <NFrame::postResizeCleanup()>:
10006824:	55                   	push   ebp
10006825:	89 e5                	mov    ebp,esp
10006827:	83 ec 08             	sub    esp,0x8
1000682a:	83 ec 0c             	sub    esp,0xc
1000682d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006830:	e8 fc ff ff ff       	call   10006831 <NFrame::postResizeCleanup()+0xd>	10006831: R_386_PC32	NFrame::tryInvalidate()
10006835:	83 c4 10             	add    esp,0x10
10006838:	90                   	nop
10006839:	c9                   	leave  
1000683a:	c3                   	ret    
1000683b:	90                   	nop

1000683c <NFrame::getChildAllowableRegion()>:
1000683c:	55                   	push   ebp
1000683d:	89 e5                	mov    ebp,esp
1000683f:	57                   	push   edi
10006840:	56                   	push   esi
10006841:	53                   	push   ebx
10006842:	83 ec 2c             	sub    esp,0x2c
10006845:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006848:	8b 78 1c             	mov    edi,DWORD PTR [eax+0x1c]
1000684b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000684e:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
10006851:	83 ec 0c             	sub    esp,0xc
10006854:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006857:	e8 fc ff ff ff       	call   10006858 <NFrame::getChildAllowableRegion()+0x1c>	10006858: R_386_PC32	NFrame::getAbsY()
1000685c:	83 c4 10             	add    esp,0x10
1000685f:	89 c3                	mov    ebx,eax
10006861:	83 ec 0c             	sub    esp,0xc
10006864:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006867:	e8 fc ff ff ff       	call   10006868 <NFrame::getChildAllowableRegion()+0x2c>	10006868: R_386_PC32	NFrame::getAbsX()
1000686c:	83 c4 10             	add    esp,0x10
1000686f:	83 ec 0c             	sub    esp,0xc
10006872:	57                   	push   edi
10006873:	56                   	push   esi
10006874:	53                   	push   ebx
10006875:	50                   	push   eax
10006876:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10006879:	e8 fc ff ff ff       	call   1000687a <NFrame::getChildAllowableRegion()+0x3e>	1000687a: R_386_PC32	Region::Region(int, int, int, int)
1000687e:	83 c4 20             	add    esp,0x20
10006881:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006884:	8a 50 2c             	mov    dl,BYTE PTR [eax+0x2c]
10006887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000688a:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
1000688d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006890:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
10006893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006896:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10006899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000689c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
1000689f:	83 ec 0c             	sub    esp,0xc
100068a2:	50                   	push   eax
100068a3:	e8 fc ff ff ff       	call   100068a4 <NFrame::getChildAllowableRegion()+0x68>	100068a4: R_386_PC32	malloc
100068a8:	83 c4 10             	add    esp,0x10
100068ab:	89 c2                	mov    edx,eax
100068ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100068b0:	89 10                	mov    DWORD PTR [eax],edx
100068b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100068b5:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
100068b8:	89 c1                	mov    ecx,eax
100068ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100068bd:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
100068c0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100068c3:	8b 12                	mov    edx,DWORD PTR [edx]
100068c5:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
100068c8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100068cb:	89 4d dc             	mov    DWORD PTR [ebp-0x24],ecx
100068ce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100068d1:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
100068d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100068d7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
100068da:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
100068dd:	89 c6                	mov    esi,eax
100068df:	89 d7                	mov    edi,edx
100068e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100068e3:	89 c8                	mov    eax,ecx
100068e5:	89 fa                	mov    edx,edi
100068e7:	89 f3                	mov    ebx,esi
100068e9:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
100068ec:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
100068ef:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
100068f2:	90                   	nop
100068f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100068f6:	8d 65 f4             	lea    esp,[ebp-0xc]
100068f9:	5b                   	pop    ebx
100068fa:	5e                   	pop    esi
100068fb:	5f                   	pop    edi
100068fc:	5d                   	pop    ebp
100068fd:	c2 04 00             	ret    0x4

10006900 <NFrame::repaintAux(Video*, Region, bool)>:
10006900:	55                   	push   ebp
10006901:	89 e5                	mov    ebp,esp
10006903:	57                   	push   edi
10006904:	56                   	push   esi
10006905:	53                   	push   ebx
10006906:	81 ec 2c 01 00 00    	sub    esp,0x12c
1000690c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
1000690f:	88 85 d4 fe ff ff    	mov    BYTE PTR [ebp-0x12c],al
10006915:	8d 45 84             	lea    eax,[ebp-0x7c]
10006918:	83 ec 08             	sub    esp,0x8
1000691b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000691e:	50                   	push   eax
1000691f:	e8 fc ff ff ff       	call   10006920 <NFrame::repaintAux(Video*, Region, bool)+0x20>	10006920: R_386_PC32	NFrame::getDrawRegion()
10006924:	83 c4 0c             	add    esp,0xc
10006927:	83 ec 0c             	sub    esp,0xc
1000692a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000692d:	e8 fc ff ff ff       	call   1000692e <NFrame::repaintAux(Video*, Region, bool)+0x2e>	1000692e: R_386_PC32	NFrame::getAbsX()
10006932:	83 c4 10             	add    esp,0x10
10006935:	89 45 94             	mov    DWORD PTR [ebp-0x6c],eax
10006938:	83 ec 0c             	sub    esp,0xc
1000693b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
1000693e:	e8 fc ff ff ff       	call   1000693f <NFrame::repaintAux(Video*, Region, bool)+0x3f>	1000693f: R_386_PC32	NFrame::getAbsY()
10006943:	83 c4 10             	add    esp,0x10
10006946:	89 45 98             	mov    DWORD PTR [ebp-0x68],eax
10006949:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000694c:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006952:	83 ec 04             	sub    esp,0x4
10006955:	83 ec 1c             	sub    esp,0x1c
10006958:	89 e0                	mov    eax,esp
1000695a:	89 c3                	mov    ebx,eax
1000695c:	8d 45 14             	lea    eax,[ebp+0x14]
1000695f:	ba 07 00 00 00       	mov    edx,0x7
10006964:	89 df                	mov    edi,ebx
10006966:	89 c6                	mov    esi,eax
10006968:	89 d1                	mov    ecx,edx
1000696a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000696c:	83 ec 1c             	sub    esp,0x1c
1000696f:	89 e0                	mov    eax,esp
10006971:	89 c3                	mov    ebx,eax
10006973:	8d 45 84             	lea    eax,[ebp-0x7c]
10006976:	ba 07 00 00 00       	mov    edx,0x7
1000697b:	89 df                	mov    edi,ebx
1000697d:	89 c6                	mov    esi,eax
1000697f:	89 d1                	mov    ecx,edx
10006981:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006983:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006989:	e8 fc ff ff ff       	call   1000698a <NFrame::repaintAux(Video*, Region, bool)+0x8a>	1000698a: R_386_PC32	getRegionIntersection(Region, Region)
1000698e:	83 c4 3c             	add    esp,0x3c
10006991:	8b 45 84             	mov    eax,DWORD PTR [ebp-0x7c]
10006994:	83 ec 0c             	sub    esp,0xc
10006997:	50                   	push   eax
10006998:	e8 fc ff ff ff       	call   10006999 <NFrame::repaintAux(Video*, Region, bool)+0x99>	10006999: R_386_PC32	free
1000699d:	83 c4 10             	add    esp,0x10
100069a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100069a3:	8b 00                	mov    eax,DWORD PTR [eax]
100069a5:	83 c0 04             	add    eax,0x4
100069a8:	8b 00                	mov    eax,DWORD PTR [eax]
100069aa:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
100069b0:	83 ec 0c             	sub    esp,0xc
100069b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100069b6:	83 ec 1c             	sub    esp,0x1c
100069b9:	89 e2                	mov    edx,esp
100069bb:	89 c3                	mov    ebx,eax
100069bd:	b8 07 00 00 00       	mov    eax,0x7
100069c2:	89 d7                	mov    edi,edx
100069c4:	89 de                	mov    esi,ebx
100069c6:	89 c1                	mov    ecx,eax
100069c8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100069ca:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100069cd:	8d 45 a0             	lea    eax,[ebp-0x60]
100069d0:	50                   	push   eax
100069d1:	e8 fc ff ff ff       	call   100069d2 <NFrame::repaintAux(Video*, Region, bool)+0xd2>	100069d2: R_386_PC32	NFrame::Graphics::Graphics(Video*, Region)
100069d6:	83 c4 30             	add    esp,0x30
100069d9:	83 ec 0c             	sub    esp,0xc
100069dc:	83 ec 20             	sub    esp,0x20
100069df:	89 e0                	mov    eax,esp
100069e1:	89 c3                	mov    ebx,eax
100069e3:	8d 45 a0             	lea    eax,[ebp-0x60]
100069e6:	ba 08 00 00 00       	mov    edx,0x8
100069eb:	89 df                	mov    edi,ebx
100069ed:	89 c6                	mov    esi,eax
100069ef:	89 d1                	mov    ecx,edx
100069f1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100069f3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100069f6:	8b 85 d0 fe ff ff    	mov    eax,DWORD PTR [ebp-0x130]
100069fc:	ff d0                	call   eax
100069fe:	83 c4 30             	add    esp,0x30
10006a01:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006a04:	8b 00                	mov    eax,DWORD PTR [eax]
10006a06:	83 c0 08             	add    eax,0x8
10006a09:	8b 00                	mov    eax,DWORD PTR [eax]
10006a0b:	8d 95 68 ff ff ff    	lea    edx,[ebp-0x98]
10006a11:	83 ec 08             	sub    esp,0x8
10006a14:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006a17:	52                   	push   edx
10006a18:	ff d0                	call   eax
10006a1a:	83 c4 0c             	add    esp,0xc
10006a1d:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006a23:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006a29:	83 ec 04             	sub    esp,0x4
10006a2c:	83 ec 1c             	sub    esp,0x1c
10006a2f:	89 e0                	mov    eax,esp
10006a31:	89 c3                	mov    ebx,eax
10006a33:	8d 85 68 ff ff ff    	lea    eax,[ebp-0x98]
10006a39:	ba 07 00 00 00       	mov    edx,0x7
10006a3e:	89 df                	mov    edi,ebx
10006a40:	89 c6                	mov    esi,eax
10006a42:	89 d1                	mov    ecx,edx
10006a44:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006a46:	83 ec 1c             	sub    esp,0x1c
10006a49:	89 e0                	mov    eax,esp
10006a4b:	89 c3                	mov    ebx,eax
10006a4d:	8d 45 14             	lea    eax,[ebp+0x14]
10006a50:	ba 07 00 00 00       	mov    edx,0x7
10006a55:	89 df                	mov    edi,ebx
10006a57:	89 c6                	mov    esi,eax
10006a59:	89 d1                	mov    ecx,edx
10006a5b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006a5d:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006a63:	e8 fc ff ff ff       	call   10006a64 <NFrame::repaintAux(Video*, Region, bool)+0x164>	10006a64: R_386_PC32	getRegionIntersection(Region, Region)
10006a68:	83 c4 3c             	add    esp,0x3c
10006a6b:	8b 85 68 ff ff ff    	mov    eax,DWORD PTR [ebp-0x98]
10006a71:	83 ec 0c             	sub    esp,0xc
10006a74:	50                   	push   eax
10006a75:	e8 fc ff ff ff       	call   10006a76 <NFrame::repaintAux(Video*, Region, bool)+0x176>	10006a76: R_386_PC32	free
10006a7a:	83 c4 10             	add    esp,0x10
10006a7d:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10006a84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006a87:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10006a8a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10006a8d:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
10006a91:	0f 84 8d 01 00 00    	je     10006c24 <NFrame::repaintAux(Video*, Region, bool)+0x324>
10006a97:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006a9a:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10006a9d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006aa0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10006aa3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10006aa6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006aa9:	8b 00                	mov    eax,DWORD PTR [eax]
10006aab:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10006aae:	84 c0                	test   al,al
10006ab0:	74 1a                	je     10006acc <NFrame::repaintAux(Video*, Region, bool)+0x1cc>
10006ab2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006ab5:	8b 00                	mov    eax,DWORD PTR [eax]
10006ab7:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
10006aba:	84 c0                	test   al,al
10006abc:	0f 84 5c 01 00 00    	je     10006c1e <NFrame::repaintAux(Video*, Region, bool)+0x31e>
10006ac2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006ac5:	8b 00                	mov    eax,DWORD PTR [eax]
10006ac7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10006aca:	eb c1                	jmp    10006a8d <NFrame::repaintAux(Video*, Region, bool)+0x18d>
10006acc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10006acf:	8b 00                	mov    eax,DWORD PTR [eax]
10006ad1:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006ad7:	8d 9d 30 ff ff ff    	lea    ebx,[ebp-0xd0]
10006add:	89 9d cc fe ff ff    	mov    DWORD PTR [ebp-0x134],ebx
10006ae3:	83 ec 04             	sub    esp,0x4
10006ae6:	6a 01                	push   0x1
10006ae8:	83 ec 1c             	sub    esp,0x1c
10006aeb:	89 e0                	mov    eax,esp
10006aed:	89 c3                	mov    ebx,eax
10006aef:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006af5:	ba 07 00 00 00       	mov    edx,0x7
10006afa:	89 df                	mov    edi,ebx
10006afc:	89 c6                	mov    esi,eax
10006afe:	89 d1                	mov    ecx,edx
10006b00:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006b02:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006b05:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006b0b:	ff b5 cc fe ff ff    	push   DWORD PTR [ebp-0x134]
10006b11:	e8 fc ff ff ff       	call   10006b12 <NFrame::repaintAux(Video*, Region, bool)+0x212>	10006b12: R_386_PC32	NFrame::repaintAux(Video*, Region, bool)
10006b16:	83 c4 2c             	add    esp,0x2c
10006b19:	8d 85 14 ff ff ff    	lea    eax,[ebp-0xec]
10006b1f:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006b25:	83 ec 04             	sub    esp,0x4
10006b28:	83 ec 1c             	sub    esp,0x1c
10006b2b:	89 e0                	mov    eax,esp
10006b2d:	89 c3                	mov    ebx,eax
10006b2f:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
10006b35:	ba 07 00 00 00       	mov    edx,0x7
10006b3a:	89 df                	mov    edi,ebx
10006b3c:	89 c6                	mov    esi,eax
10006b3e:	89 d1                	mov    ecx,edx
10006b40:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006b42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b45:	83 ec 1c             	sub    esp,0x1c
10006b48:	89 e2                	mov    edx,esp
10006b4a:	89 c3                	mov    ebx,eax
10006b4c:	b8 07 00 00 00       	mov    eax,0x7
10006b51:	89 d7                	mov    edi,edx
10006b53:	89 de                	mov    esi,ebx
10006b55:	89 c1                	mov    ecx,eax
10006b57:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006b59:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006b5f:	e8 fc ff ff ff       	call   10006b60 <NFrame::repaintAux(Video*, Region, bool)+0x260>	10006b60: R_386_PC32	getRegionUnion(Region, Region)
10006b64:	83 c4 3c             	add    esp,0x3c
10006b67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b6a:	8b 00                	mov    eax,DWORD PTR [eax]
10006b6c:	83 ec 0c             	sub    esp,0xc
10006b6f:	50                   	push   eax
10006b70:	e8 fc ff ff ff       	call   10006b71 <NFrame::repaintAux(Video*, Region, bool)+0x271>	10006b71: R_386_PC32	free
10006b75:	83 c4 10             	add    esp,0x10
10006b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006b7b:	89 c3                	mov    ebx,eax
10006b7d:	8d 85 14 ff ff ff    	lea    eax,[ebp-0xec]
10006b83:	ba 19 00 00 00       	mov    edx,0x19
10006b88:	89 df                	mov    edi,ebx
10006b8a:	89 c6                	mov    esi,eax
10006b8c:	89 d1                	mov    ecx,edx
10006b8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006b90:	8d 85 f8 fe ff ff    	lea    eax,[ebp-0x108]
10006b96:	89 85 d0 fe ff ff    	mov    DWORD PTR [ebp-0x130],eax
10006b9c:	83 ec 04             	sub    esp,0x4
10006b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ba2:	83 ec 1c             	sub    esp,0x1c
10006ba5:	89 e2                	mov    edx,esp
10006ba7:	89 c3                	mov    ebx,eax
10006ba9:	b8 07 00 00 00       	mov    eax,0x7
10006bae:	89 d7                	mov    edi,edx
10006bb0:	89 de                	mov    esi,ebx
10006bb2:	89 c1                	mov    ecx,eax
10006bb4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006bb6:	83 ec 1c             	sub    esp,0x1c
10006bb9:	89 e0                	mov    eax,esp
10006bbb:	89 c3                	mov    ebx,eax
10006bbd:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006bc3:	ba 07 00 00 00       	mov    edx,0x7
10006bc8:	89 df                	mov    edi,ebx
10006bca:	89 c6                	mov    esi,eax
10006bcc:	89 d1                	mov    ecx,edx
10006bce:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006bd0:	ff b5 d0 fe ff ff    	push   DWORD PTR [ebp-0x130]
10006bd6:	e8 fc ff ff ff       	call   10006bd7 <NFrame::repaintAux(Video*, Region, bool)+0x2d7>	10006bd7: R_386_PC32	getRegionDifference(Region, Region)
10006bdb:	83 c4 3c             	add    esp,0x3c
10006bde:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [ebp-0xb4]
10006be4:	83 ec 0c             	sub    esp,0xc
10006be7:	50                   	push   eax
10006be8:	e8 fc ff ff ff       	call   10006be9 <NFrame::repaintAux(Video*, Region, bool)+0x2e9>	10006be9: R_386_PC32	free
10006bed:	83 c4 10             	add    esp,0x10
10006bf0:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10006bf6:	8d 95 f8 fe ff ff    	lea    edx,[ebp-0x108]
10006bfc:	b9 19 00 00 00       	mov    ecx,0x19
10006c01:	89 c7                	mov    edi,eax
10006c03:	89 d6                	mov    esi,edx
10006c05:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006c07:	8b 85 30 ff ff ff    	mov    eax,DWORD PTR [ebp-0xd0]
10006c0d:	83 ec 0c             	sub    esp,0xc
10006c10:	50                   	push   eax
10006c11:	e8 fc ff ff ff       	call   10006c12 <NFrame::repaintAux(Video*, Region, bool)+0x312>	10006c12: R_386_PC32	free
10006c16:	83 c4 10             	add    esp,0x10
10006c19:	e9 6f fe ff ff       	jmp    10006a8d <NFrame::repaintAux(Video*, Region, bool)+0x18d>
10006c1e:	90                   	nop
10006c1f:	e9 69 fe ff ff       	jmp    10006a8d <NFrame::repaintAux(Video*, Region, bool)+0x18d>
10006c24:	8b 85 4c ff ff ff    	mov    eax,DWORD PTR [ebp-0xb4]
10006c2a:	83 ec 0c             	sub    esp,0xc
10006c2d:	50                   	push   eax
10006c2e:	e8 fc ff ff ff       	call   10006c2f <NFrame::repaintAux(Video*, Region, bool)+0x32f>	10006c2f: R_386_PC32	free
10006c33:	83 c4 10             	add    esp,0x10
10006c36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006c39:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006c3c:	85 c0                	test   eax,eax
10006c3e:	75 48                	jne    10006c88 <NFrame::repaintAux(Video*, Region, bool)+0x388>
10006c40:	80 bd d4 fe ff ff 00 	cmp    BYTE PTR [ebp-0x12c],0x0
10006c47:	74 3f                	je     10006c88 <NFrame::repaintAux(Video*, Region, bool)+0x388>
10006c49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006c4c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
10006c4f:	83 ec 0c             	sub    esp,0xc
10006c52:	50                   	push   eax
10006c53:	e8 fc ff ff ff       	call   10006c54 <NFrame::repaintAux(Video*, Region, bool)+0x354>	10006c54: R_386_PC32	free
10006c58:	83 c4 10             	add    esp,0x10
10006c5b:	8d 45 c0             	lea    eax,[ebp-0x40]
10006c5e:	83 ec 0c             	sub    esp,0xc
10006c61:	6a 01                	push   0x1
10006c63:	6a 00                	push   0x0
10006c65:	6a 00                	push   0x0
10006c67:	6a 00                	push   0x0
10006c69:	50                   	push   eax
10006c6a:	e8 fc ff ff ff       	call   10006c6b <NFrame::repaintAux(Video*, Region, bool)+0x36b>	10006c6b: R_386_PC32	createRectangleRegion(int, int, int, int)
10006c6f:	83 c4 1c             	add    esp,0x1c
10006c72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006c75:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006c78:	8d 45 c0             	lea    eax,[ebp-0x40]
10006c7b:	ba 19 00 00 00       	mov    edx,0x19
10006c80:	89 df                	mov    edi,ebx
10006c82:	89 c6                	mov    esi,eax
10006c84:	89 d1                	mov    ecx,edx
10006c86:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006c88:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10006c8c:	0f 84 80 00 00 00    	je     10006d12 <NFrame::repaintAux(Video*, Region, bool)+0x412>
10006c92:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
10006c95:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10006c9b:	8d 5a 30             	lea    ebx,[edx+0x30]
10006c9e:	ba 07 00 00 00       	mov    edx,0x7
10006ca3:	89 c7                	mov    edi,eax
10006ca5:	89 de                	mov    esi,ebx
10006ca7:	89 d1                	mov    ecx,edx
10006ca9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006cab:	83 ec 0c             	sub    esp,0xc
10006cae:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006cb1:	e8 fc ff ff ff       	call   10006cb2 <NFrame::repaintAux(Video*, Region, bool)+0x3b2>	10006cb2: R_386_PC32	NFrame::getAbsX()
10006cb6:	83 c4 10             	add    esp,0x10
10006cb9:	89 c2                	mov    edx,eax
10006cbb:	8b 85 ec fe ff ff    	mov    eax,DWORD PTR [ebp-0x114]
10006cc1:	01 d0                	add    eax,edx
10006cc3:	89 85 ec fe ff ff    	mov    DWORD PTR [ebp-0x114],eax
10006cc9:	83 ec 0c             	sub    esp,0xc
10006ccc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006ccf:	e8 fc ff ff ff       	call   10006cd0 <NFrame::repaintAux(Video*, Region, bool)+0x3d0>	10006cd0: R_386_PC32	NFrame::getAbsY()
10006cd4:	83 c4 10             	add    esp,0x10
10006cd7:	89 c2                	mov    edx,eax
10006cd9:	8b 85 f0 fe ff ff    	mov    eax,DWORD PTR [ebp-0x110]
10006cdf:	01 d0                	add    eax,edx
10006ce1:	89 85 f0 fe ff ff    	mov    DWORD PTR [ebp-0x110],eax
10006ce7:	83 ec 0c             	sub    esp,0xc
10006cea:	6a 00                	push   0x0
10006cec:	83 ec 1c             	sub    esp,0x1c
10006cef:	89 e0                	mov    eax,esp
10006cf1:	89 c3                	mov    ebx,eax
10006cf3:	8d 85 dc fe ff ff    	lea    eax,[ebp-0x124]
10006cf9:	ba 07 00 00 00       	mov    edx,0x7
10006cfe:	89 df                	mov    edi,ebx
10006d00:	89 c6                	mov    esi,eax
10006d02:	89 d1                	mov    ecx,edx
10006d04:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006d06:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006d09:	e8 fc ff ff ff       	call   10006d0a <NFrame::repaintAux(Video*, Region, bool)+0x40a>	10006d0a: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10006d0e:	83 c4 30             	add    esp,0x30
10006d11:	90                   	nop
10006d12:	90                   	nop
10006d13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d16:	8d 65 f4             	lea    esp,[ebp-0xc]
10006d19:	5b                   	pop    ebx
10006d1a:	5e                   	pop    esi
10006d1b:	5f                   	pop    edi
10006d1c:	5d                   	pop    ebp
10006d1d:	c2 04 00             	ret    0x4

10006d20 <NFrame::NFrame(Region)>:
10006d20:	55                   	push   ebp
10006d21:	89 e5                	mov    ebp,esp
10006d23:	57                   	push   edi
10006d24:	56                   	push   esi
10006d25:	53                   	push   ebx
10006d26:	83 ec 2c             	sub    esp,0x2c
10006d29:	ba 08 00 00 00       	mov    edx,0x8	10006d2a: R_386_32	vtable for NFrame
10006d2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d31:	89 10                	mov    DWORD PTR [eax],edx
10006d33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d36:	83 c0 04             	add    eax,0x4
10006d39:	83 ec 0c             	sub    esp,0xc
10006d3c:	50                   	push   eax
10006d3d:	e8 fc ff ff ff       	call   10006d3e <NFrame::NFrame(Region)+0x1e>	10006d3e: R_386_PC32	LinkedList2<NFrame*>::LinkedList2()
10006d42:	83 c4 10             	add    esp,0x10
10006d45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d48:	83 c0 14             	add    eax,0x14
10006d4b:	83 ec 0c             	sub    esp,0xc
10006d4e:	50                   	push   eax
10006d4f:	e8 fc ff ff ff       	call   10006d50 <NFrame::NFrame(Region)+0x30>	10006d50: R_386_PC32	Region::Region()
10006d54:	83 c4 10             	add    esp,0x10
10006d57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d5a:	83 c0 30             	add    eax,0x30
10006d5d:	83 ec 0c             	sub    esp,0xc
10006d60:	50                   	push   eax
10006d61:	e8 fc ff ff ff       	call   10006d62 <NFrame::NFrame(Region)+0x42>	10006d62: R_386_PC32	Region::Region()
10006d66:	83 c4 10             	add    esp,0x10
10006d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d6c:	83 c0 4c             	add    eax,0x4c
10006d6f:	83 ec 0c             	sub    esp,0xc
10006d72:	50                   	push   eax
10006d73:	e8 fc ff ff ff       	call   10006d74 <NFrame::NFrame(Region)+0x54>	10006d74: R_386_PC32	Region::Region()
10006d78:	83 c4 10             	add    esp,0x10
10006d7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d7e:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
10006d82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d85:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
10006d89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d8c:	c7 40 6c 00 00 00 00 	mov    DWORD PTR [eax+0x6c],0x0
10006d93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d96:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
10006d9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006d9d:	c7 40 74 0a 00 00 00 	mov    DWORD PTR [eax+0x74],0xa
10006da4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006da7:	c7 40 78 0a 00 00 00 	mov    DWORD PTR [eax+0x78],0xa
10006dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006db1:	c7 40 7c 64 00 00 00 	mov    DWORD PTR [eax+0x7c],0x64
10006db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006dbb:	c7 80 80 00 00 00 4b 00 00 00 	mov    DWORD PTR [eax+0x80],0x4b
10006dc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006dc8:	c7 80 84 00 00 00 18 00 00 00 	mov    DWORD PTR [eax+0x84],0x18
10006dd2:	8d 45 cc             	lea    eax,[ebp-0x34]
10006dd5:	83 ec 0c             	sub    esp,0xc
10006dd8:	6a 01                	push   0x1
10006dda:	6a 00                	push   0x0
10006ddc:	6a 00                	push   0x0
10006dde:	6a 00                	push   0x0
10006de0:	50                   	push   eax
10006de1:	e8 fc ff ff ff       	call   10006de2 <NFrame::NFrame(Region)+0xc2>	10006de2: R_386_PC32	createRectangleRegion(int, int, int, int)
10006de6:	83 c4 1c             	add    esp,0x1c
10006de9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006dec:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006def:	8d 45 cc             	lea    eax,[ebp-0x34]
10006df2:	ba 19 00 00 00       	mov    edx,0x19
10006df7:	89 df                	mov    edi,ebx
10006df9:	89 c6                	mov    esi,eax
10006dfb:	89 d1                	mov    ecx,edx
10006dfd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e02:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10006e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e0c:	8d 58 14             	lea    ebx,[eax+0x14]
10006e0f:	8d 45 0c             	lea    eax,[ebp+0xc]
10006e12:	ba 19 00 00 00       	mov    edx,0x19
10006e17:	89 df                	mov    edi,ebx
10006e19:	89 c6                	mov    esi,eax
10006e1b:	89 d1                	mov    ecx,edx
10006e1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006e1f:	90                   	nop
10006e20:	8d 65 f4             	lea    esp,[ebp-0xc]
10006e23:	5b                   	pop    ebx
10006e24:	5e                   	pop    esi
10006e25:	5f                   	pop    edi
10006e26:	5d                   	pop    ebp
10006e27:	c3                   	ret    

10006e28 <NFrame::NFrame(int, int, int, int)>:
10006e28:	55                   	push   ebp
10006e29:	89 e5                	mov    ebp,esp
10006e2b:	57                   	push   edi
10006e2c:	56                   	push   esi
10006e2d:	53                   	push   ebx
10006e2e:	83 ec 4c             	sub    esp,0x4c
10006e31:	ba 08 00 00 00       	mov    edx,0x8	10006e32: R_386_32	vtable for NFrame
10006e36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e39:	89 10                	mov    DWORD PTR [eax],edx
10006e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e3e:	83 c0 04             	add    eax,0x4
10006e41:	83 ec 0c             	sub    esp,0xc
10006e44:	50                   	push   eax
10006e45:	e8 fc ff ff ff       	call   10006e46 <NFrame::NFrame(int, int, int, int)+0x1e>	10006e46: R_386_PC32	LinkedList2<NFrame*>::LinkedList2()
10006e4a:	83 c4 10             	add    esp,0x10
10006e4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e50:	83 c0 14             	add    eax,0x14
10006e53:	83 ec 0c             	sub    esp,0xc
10006e56:	50                   	push   eax
10006e57:	e8 fc ff ff ff       	call   10006e58 <NFrame::NFrame(int, int, int, int)+0x30>	10006e58: R_386_PC32	Region::Region()
10006e5c:	83 c4 10             	add    esp,0x10
10006e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e62:	83 c0 30             	add    eax,0x30
10006e65:	83 ec 0c             	sub    esp,0xc
10006e68:	50                   	push   eax
10006e69:	e8 fc ff ff ff       	call   10006e6a <NFrame::NFrame(int, int, int, int)+0x42>	10006e6a: R_386_PC32	Region::Region()
10006e6e:	83 c4 10             	add    esp,0x10
10006e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e74:	83 c0 4c             	add    eax,0x4c
10006e77:	83 ec 0c             	sub    esp,0xc
10006e7a:	50                   	push   eax
10006e7b:	e8 fc ff ff ff       	call   10006e7c <NFrame::NFrame(int, int, int, int)+0x54>	10006e7c: R_386_PC32	Region::Region()
10006e80:	83 c4 10             	add    esp,0x10
10006e83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e86:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
10006e8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e8d:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
10006e91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e94:	c7 40 6c 00 00 00 00 	mov    DWORD PTR [eax+0x6c],0x0
10006e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006e9e:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
10006ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ea5:	c7 40 74 0a 00 00 00 	mov    DWORD PTR [eax+0x74],0xa
10006eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006eaf:	c7 40 78 0a 00 00 00 	mov    DWORD PTR [eax+0x78],0xa
10006eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006eb9:	c7 40 7c 64 00 00 00 	mov    DWORD PTR [eax+0x7c],0x64
10006ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ec3:	c7 80 80 00 00 00 4b 00 00 00 	mov    DWORD PTR [eax+0x80],0x4b
10006ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006ed0:	c7 80 84 00 00 00 18 00 00 00 	mov    DWORD PTR [eax+0x84],0x18
10006eda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006edd:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
10006ee4:	8d 45 b0             	lea    eax,[ebp-0x50]
10006ee7:	83 ec 0c             	sub    esp,0xc
10006eea:	6a 01                	push   0x1
10006eec:	6a 00                	push   0x0
10006eee:	6a 00                	push   0x0
10006ef0:	6a 00                	push   0x0
10006ef2:	50                   	push   eax
10006ef3:	e8 fc ff ff ff       	call   10006ef4 <NFrame::NFrame(int, int, int, int)+0xcc>	10006ef4: R_386_PC32	createRectangleRegion(int, int, int, int)
10006ef8:	83 c4 1c             	add    esp,0x1c
10006efb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006efe:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006f01:	8d 45 b0             	lea    eax,[ebp-0x50]
10006f04:	ba 19 00 00 00       	mov    edx,0x19
10006f09:	89 df                	mov    edi,ebx
10006f0b:	89 c6                	mov    esi,eax
10006f0d:	89 d1                	mov    ecx,edx
10006f0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006f11:	8d 45 cc             	lea    eax,[ebp-0x34]
10006f14:	83 ec 0c             	sub    esp,0xc
10006f17:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10006f1a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10006f1d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10006f20:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006f23:	50                   	push   eax
10006f24:	e8 fc ff ff ff       	call   10006f25 <NFrame::NFrame(int, int, int, int)+0xfd>	10006f25: R_386_PC32	createRectangleRegion(int, int, int, int)
10006f29:	83 c4 1c             	add    esp,0x1c
10006f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f2f:	8d 58 14             	lea    ebx,[eax+0x14]
10006f32:	8d 45 cc             	lea    eax,[ebp-0x34]
10006f35:	ba 19 00 00 00       	mov    edx,0x19
10006f3a:	89 df                	mov    edi,ebx
10006f3c:	89 c6                	mov    esi,eax
10006f3e:	89 d1                	mov    ecx,edx
10006f40:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10006f42:	90                   	nop
10006f43:	8d 65 f4             	lea    esp,[ebp-0xc]
10006f46:	5b                   	pop    ebx
10006f47:	5e                   	pop    esi
10006f48:	5f                   	pop    edi
10006f49:	5d                   	pop    ebp
10006f4a:	c3                   	ret    
10006f4b:	90                   	nop

10006f4c <NFrame::addChild(NFrame*)>:
10006f4c:	55                   	push   ebp
10006f4d:	89 e5                	mov    ebp,esp
10006f4f:	83 ec 08             	sub    esp,0x8
10006f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f55:	83 c0 04             	add    eax,0x4
10006f58:	83 ec 08             	sub    esp,0x8
10006f5b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10006f5e:	50                   	push   eax
10006f5f:	e8 fc ff ff ff       	call   10006f60 <NFrame::addChild(NFrame*)+0x14>	10006f60: R_386_PC32	LinkedList2<NFrame*>::prependNode(NFrame*)
10006f64:	83 c4 10             	add    esp,0x10
10006f67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006f6a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10006f6d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
10006f70:	90                   	nop
10006f71:	c9                   	leave  
10006f72:	c3                   	ret    
10006f73:	90                   	nop

10006f74 <NFrame::getDirtyRegion()>:
10006f74:	55                   	push   ebp
10006f75:	89 e5                	mov    ebp,esp
10006f77:	57                   	push   edi
10006f78:	56                   	push   esi
10006f79:	53                   	push   ebx
10006f7a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10006f7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006f80:	8d 58 4c             	lea    ebx,[eax+0x4c]
10006f83:	b8 07 00 00 00       	mov    eax,0x7
10006f88:	89 d7                	mov    edi,edx
10006f8a:	89 de                	mov    esi,ebx
10006f8c:	89 c1                	mov    ecx,eax
10006f8e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006f90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10006f93:	5b                   	pop    ebx
10006f94:	5e                   	pop    esi
10006f95:	5f                   	pop    edi
10006f96:	5d                   	pop    ebp
10006f97:	c2 04 00             	ret    0x4

10006f9a <NFrame::getDrawRegion()>:
10006f9a:	55                   	push   ebp
10006f9b:	89 e5                	mov    ebp,esp
10006f9d:	57                   	push   edi
10006f9e:	56                   	push   esi
10006f9f:	53                   	push   ebx
10006fa0:	81 ec bc 00 00 00    	sub    esp,0xbc
10006fa6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006fa9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
10006fac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006faf:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
10006fb2:	8d 45 c4             	lea    eax,[ebp-0x3c]
10006fb5:	83 ec 0c             	sub    esp,0xc
10006fb8:	6a 01                	push   0x1
10006fba:	6a 00                	push   0x0
10006fbc:	51                   	push   ecx
10006fbd:	52                   	push   edx
10006fbe:	50                   	push   eax
10006fbf:	e8 fc ff ff ff       	call   10006fc0 <NFrame::getDrawRegion()+0x26>	10006fc0: R_386_PC32	createRectangleRegion(int, int, int, int)
10006fc4:	83 c4 1c             	add    esp,0x1c
10006fc7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10006fca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
10006fcd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10006fd0:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
10006fd4:	0f 84 54 01 00 00    	je     1000712e <NFrame::getDrawRegion()+0x194>
10006fda:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10006fdd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
10006fe0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
10006fe3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10006fe6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10006fe9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006fec:	8b 00                	mov    eax,DWORD PTR [eax]
10006fee:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10006ff1:	84 c0                	test   al,al
10006ff3:	0f 85 2f 01 00 00    	jne    10007128 <NFrame::getDrawRegion()+0x18e>
10006ff9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
10006ffc:	8b 10                	mov    edx,DWORD PTR [eax]
10006ffe:	8d 45 a8             	lea    eax,[ebp-0x58]
10007001:	8d 5a 14             	lea    ebx,[edx+0x14]
10007004:	ba 07 00 00 00       	mov    edx,0x7
10007009:	89 c7                	mov    edi,eax
1000700b:	89 de                	mov    esi,ebx
1000700d:	89 d1                	mov    ecx,edx
1000700f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007011:	8b 55 b8             	mov    edx,DWORD PTR [ebp-0x48]
10007014:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007017:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
1000701a:	01 d0                	add    eax,edx
1000701c:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
1000701f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
10007022:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007025:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10007028:	01 d0                	add    eax,edx
1000702a:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
1000702d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007030:	8b 00                	mov    eax,DWORD PTR [eax]
10007032:	83 c0 08             	add    eax,0x8
10007035:	8b 00                	mov    eax,DWORD PTR [eax]
10007037:	8d 55 8c             	lea    edx,[ebp-0x74]
1000703a:	83 ec 08             	sub    esp,0x8
1000703d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007040:	52                   	push   edx
10007041:	ff d0                	call   eax
10007043:	83 c4 0c             	add    esp,0xc
10007046:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
1000704c:	89 85 44 ff ff ff    	mov    DWORD PTR [ebp-0xbc],eax
10007052:	83 ec 04             	sub    esp,0x4
10007055:	83 ec 1c             	sub    esp,0x1c
10007058:	89 e0                	mov    eax,esp
1000705a:	89 c3                	mov    ebx,eax
1000705c:	8d 45 a8             	lea    eax,[ebp-0x58]
1000705f:	ba 07 00 00 00       	mov    edx,0x7
10007064:	89 df                	mov    edi,ebx
10007066:	89 c6                	mov    esi,eax
10007068:	89 d1                	mov    ecx,edx
1000706a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000706c:	83 ec 1c             	sub    esp,0x1c
1000706f:	89 e0                	mov    eax,esp
10007071:	89 c3                	mov    ebx,eax
10007073:	8d 45 8c             	lea    eax,[ebp-0x74]
10007076:	ba 07 00 00 00       	mov    edx,0x7
1000707b:	89 df                	mov    edi,ebx
1000707d:	89 c6                	mov    esi,eax
1000707f:	89 d1                	mov    ecx,edx
10007081:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007083:	ff b5 44 ff ff ff    	push   DWORD PTR [ebp-0xbc]
10007089:	e8 fc ff ff ff       	call   1000708a <NFrame::getDrawRegion()+0xf0>	1000708a: R_386_PC32	getRegionIntersection(Region, Region)
1000708e:	83 c4 3c             	add    esp,0x3c
10007091:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
10007097:	89 85 44 ff ff ff    	mov    DWORD PTR [ebp-0xbc],eax
1000709d:	83 ec 04             	sub    esp,0x4
100070a0:	83 ec 1c             	sub    esp,0x1c
100070a3:	89 e0                	mov    eax,esp
100070a5:	89 c3                	mov    ebx,eax
100070a7:	8d 85 70 ff ff ff    	lea    eax,[ebp-0x90]
100070ad:	ba 07 00 00 00       	mov    edx,0x7
100070b2:	89 df                	mov    edi,ebx
100070b4:	89 c6                	mov    esi,eax
100070b6:	89 d1                	mov    ecx,edx
100070b8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100070ba:	83 ec 1c             	sub    esp,0x1c
100070bd:	89 e0                	mov    eax,esp
100070bf:	89 c3                	mov    ebx,eax
100070c1:	8d 45 c4             	lea    eax,[ebp-0x3c]
100070c4:	ba 07 00 00 00       	mov    edx,0x7
100070c9:	89 df                	mov    edi,ebx
100070cb:	89 c6                	mov    esi,eax
100070cd:	89 d1                	mov    ecx,edx
100070cf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100070d1:	ff b5 44 ff ff ff    	push   DWORD PTR [ebp-0xbc]
100070d7:	e8 fc ff ff ff       	call   100070d8 <NFrame::getDrawRegion()+0x13e>	100070d8: R_386_PC32	getRegionUnion(Region, Region)
100070dc:	83 c4 3c             	add    esp,0x3c
100070df:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
100070e2:	83 ec 0c             	sub    esp,0xc
100070e5:	50                   	push   eax
100070e6:	e8 fc ff ff ff       	call   100070e7 <NFrame::getDrawRegion()+0x14d>	100070e7: R_386_PC32	free
100070eb:	83 c4 10             	add    esp,0x10
100070ee:	8b 45 8c             	mov    eax,DWORD PTR [ebp-0x74]
100070f1:	83 ec 0c             	sub    esp,0xc
100070f4:	50                   	push   eax
100070f5:	e8 fc ff ff ff       	call   100070f6 <NFrame::getDrawRegion()+0x15c>	100070f6: R_386_PC32	free
100070fa:	83 c4 10             	add    esp,0x10
100070fd:	8b 85 70 ff ff ff    	mov    eax,DWORD PTR [ebp-0x90]
10007103:	83 ec 0c             	sub    esp,0xc
10007106:	50                   	push   eax
10007107:	e8 fc ff ff ff       	call   10007108 <NFrame::getDrawRegion()+0x16e>	10007108: R_386_PC32	free
1000710c:	83 c4 10             	add    esp,0x10
1000710f:	8d 45 c4             	lea    eax,[ebp-0x3c]
10007112:	8d 95 54 ff ff ff    	lea    edx,[ebp-0xac]
10007118:	b9 19 00 00 00       	mov    ecx,0x19
1000711d:	89 c7                	mov    edi,eax
1000711f:	89 d6                	mov    esi,edx
10007121:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10007123:	e9 a8 fe ff ff       	jmp    10006fd0 <NFrame::getDrawRegion()+0x36>
10007128:	90                   	nop
10007129:	e9 a2 fe ff ff       	jmp    10006fd0 <NFrame::getDrawRegion()+0x36>
1000712e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007131:	89 85 44 ff ff ff    	mov    DWORD PTR [ebp-0xbc],eax
10007137:	83 ec 04             	sub    esp,0x4
1000713a:	83 ec 1c             	sub    esp,0x1c
1000713d:	89 e0                	mov    eax,esp
1000713f:	89 c3                	mov    ebx,eax
10007141:	8d 45 c4             	lea    eax,[ebp-0x3c]
10007144:	ba 07 00 00 00       	mov    edx,0x7
10007149:	89 df                	mov    edi,ebx
1000714b:	89 c6                	mov    esi,eax
1000714d:	89 d1                	mov    ecx,edx
1000714f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007151:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007154:	83 ec 1c             	sub    esp,0x1c
10007157:	89 e2                	mov    edx,esp
10007159:	8d 58 14             	lea    ebx,[eax+0x14]
1000715c:	b8 07 00 00 00       	mov    eax,0x7
10007161:	89 d7                	mov    edi,edx
10007163:	89 de                	mov    esi,ebx
10007165:	89 c1                	mov    ecx,eax
10007167:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007169:	ff b5 44 ff ff ff    	push   DWORD PTR [ebp-0xbc]
1000716f:	e8 fc ff ff ff       	call   10007170 <NFrame::getDrawRegion()+0x1d6>	10007170: R_386_PC32	getRegionDifference(Region, Region)
10007174:	83 c4 3c             	add    esp,0x3c
10007177:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
1000717a:	83 ec 0c             	sub    esp,0xc
1000717d:	50                   	push   eax
1000717e:	e8 fc ff ff ff       	call   1000717f <NFrame::getDrawRegion()+0x1e5>	1000717f: R_386_PC32	free
10007183:	83 c4 10             	add    esp,0x10
10007186:	90                   	nop
10007187:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000718a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000718d:	5b                   	pop    ebx
1000718e:	5e                   	pop    esi
1000718f:	5f                   	pop    edi
10007190:	5d                   	pop    ebp
10007191:	c2 04 00             	ret    0x4

10007194 <NFrame::regenerateRegion()>:
10007194:	55                   	push   ebp
10007195:	89 e5                	mov    ebp,esp
10007197:	57                   	push   edi
10007198:	56                   	push   esi
10007199:	53                   	push   ebx
1000719a:	83 ec 6c             	sub    esp,0x6c
1000719d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100071a0:	8d 45 94             	lea    eax,[ebp-0x6c]
100071a3:	8d 5a 14             	lea    ebx,[edx+0x14]
100071a6:	ba 07 00 00 00       	mov    edx,0x7
100071ab:	89 c7                	mov    edi,eax
100071ad:	89 de                	mov    esi,ebx
100071af:	89 d1                	mov    ecx,edx
100071b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100071b3:	8b 75 9c             	mov    esi,DWORD PTR [ebp-0x64]
100071b6:	8b 5d 98             	mov    ebx,DWORD PTR [ebp-0x68]
100071b9:	8b 4d a8             	mov    ecx,DWORD PTR [ebp-0x58]
100071bc:	8b 55 a4             	mov    edx,DWORD PTR [ebp-0x5c]
100071bf:	8d 45 b0             	lea    eax,[ebp-0x50]
100071c2:	83 ec 0c             	sub    esp,0xc
100071c5:	56                   	push   esi
100071c6:	53                   	push   ebx
100071c7:	51                   	push   ecx
100071c8:	52                   	push   edx
100071c9:	50                   	push   eax
100071ca:	e8 fc ff ff ff       	call   100071cb <NFrame::regenerateRegion()+0x37>	100071cb: R_386_PC32	createRectangleRegion(int, int, int, int)
100071cf:	83 c4 1c             	add    esp,0x1c
100071d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100071d5:	8d 58 14             	lea    ebx,[eax+0x14]
100071d8:	8d 45 b0             	lea    eax,[ebp-0x50]
100071db:	ba 19 00 00 00       	mov    edx,0x19
100071e0:	89 df                	mov    edi,ebx
100071e2:	89 c6                	mov    esi,eax
100071e4:	89 d1                	mov    ecx,edx
100071e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100071e8:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
100071eb:	83 ec 0c             	sub    esp,0xc
100071ee:	50                   	push   eax
100071ef:	e8 fc ff ff ff       	call   100071f0 <NFrame::regenerateRegion()+0x5c>	100071f0: R_386_PC32	free
100071f4:	83 c4 10             	add    esp,0x10
100071f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100071fa:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
100071fd:	84 c0                	test   al,al
100071ff:	74 68                	je     10007269 <NFrame::regenerateRegion()+0xd5>
10007201:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007204:	8d 45 94             	lea    eax,[ebp-0x6c]
10007207:	8d 5a 30             	lea    ebx,[edx+0x30]
1000720a:	ba 19 00 00 00       	mov    edx,0x19
1000720f:	89 c7                	mov    edi,eax
10007211:	89 de                	mov    esi,ebx
10007213:	89 d1                	mov    ecx,edx
10007215:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10007217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000721a:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
1000721d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007220:	8b 58 18             	mov    ebx,DWORD PTR [eax+0x18]
10007223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007226:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
10007229:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000722c:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
1000722f:	8d 45 cc             	lea    eax,[ebp-0x34]
10007232:	83 ec 08             	sub    esp,0x8
10007235:	6a 02                	push   0x2
10007237:	56                   	push   esi
10007238:	53                   	push   ebx
10007239:	51                   	push   ecx
1000723a:	52                   	push   edx
1000723b:	50                   	push   eax
1000723c:	e8 fc ff ff ff       	call   1000723d <NFrame::regenerateRegion()+0xa9>	1000723d: R_386_PC32	createAntRegion(int, int, int, int, int)
10007241:	83 c4 1c             	add    esp,0x1c
10007244:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007247:	8d 58 30             	lea    ebx,[eax+0x30]
1000724a:	8d 45 cc             	lea    eax,[ebp-0x34]
1000724d:	ba 19 00 00 00       	mov    edx,0x19
10007252:	89 df                	mov    edi,ebx
10007254:	89 c6                	mov    esi,eax
10007256:	89 d1                	mov    ecx,edx
10007258:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
1000725a:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
1000725d:	83 ec 0c             	sub    esp,0xc
10007260:	50                   	push   eax
10007261:	e8 fc ff ff ff       	call   10007262 <NFrame::regenerateRegion()+0xce>	10007262: R_386_PC32	free
10007266:	83 c4 10             	add    esp,0x10
10007269:	90                   	nop
1000726a:	8d 65 f4             	lea    esp,[ebp-0xc]
1000726d:	5b                   	pop    ebx
1000726e:	5e                   	pop    esi
1000726f:	5f                   	pop    edi
10007270:	5d                   	pop    ebp
10007271:	c3                   	ret    

10007272 <NFrame::hasTitleBar()>:
10007272:	55                   	push   ebp
10007273:	89 e5                	mov    ebp,esp
10007275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007278:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
1000727b:	83 e0 08             	and    eax,0x8
1000727e:	85 c0                	test   eax,eax
10007280:	75 11                	jne    10007293 <NFrame::hasTitleBar()+0x21>
10007282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007285:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007288:	83 e0 01             	and    eax,0x1
1000728b:	85 c0                	test   eax,eax
1000728d:	75 04                	jne    10007293 <NFrame::hasTitleBar()+0x21>
1000728f:	b0 01                	mov    al,0x1
10007291:	eb 02                	jmp    10007295 <NFrame::hasTitleBar()+0x23>
10007293:	b0 00                	mov    al,0x0
10007295:	5d                   	pop    ebp
10007296:	c3                   	ret    
10007297:	90                   	nop

10007298 <NFrame::isHiddenOverall()>:
10007298:	55                   	push   ebp
10007299:	89 e5                	mov    ebp,esp
1000729b:	83 ec 08             	sub    esp,0x8
1000729e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072a1:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
100072a4:	84 c0                	test   al,al
100072a6:	75 20                	jne    100072c8 <NFrame::isHiddenOverall()+0x30>
100072a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072ab:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100072ae:	85 c0                	test   eax,eax
100072b0:	74 1a                	je     100072cc <NFrame::isHiddenOverall()+0x34>
100072b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072b5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100072b8:	83 ec 0c             	sub    esp,0xc
100072bb:	50                   	push   eax
100072bc:	e8 fc ff ff ff       	call   100072bd <NFrame::isHiddenOverall()+0x25>	100072bd: R_386_PC32	NFrame::isHiddenOverall()
100072c1:	83 c4 10             	add    esp,0x10
100072c4:	84 c0                	test   al,al
100072c6:	74 04                	je     100072cc <NFrame::isHiddenOverall()+0x34>
100072c8:	b0 01                	mov    al,0x1
100072ca:	eb 02                	jmp    100072ce <NFrame::isHiddenOverall()+0x36>
100072cc:	b0 00                	mov    al,0x0
100072ce:	c9                   	leave  
100072cf:	c3                   	ret    

100072d0 <NFrame::tryInvalidate()>:
100072d0:	55                   	push   ebp
100072d1:	89 e5                	mov    ebp,esp
100072d3:	57                   	push   edi
100072d4:	56                   	push   esi
100072d5:	53                   	push   ebx
100072d6:	83 ec 2c             	sub    esp,0x2c
100072d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100072dc:	8a 40 69             	mov    al,BYTE PTR [eax+0x69]
100072df:	84 c0                	test   al,al
100072e1:	74 5c                	je     1000733f <NFrame::tryInvalidate()+0x6f>
100072e3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100072e6:	8d 45 cc             	lea    eax,[ebp-0x34]
100072e9:	8d 5a 30             	lea    ebx,[edx+0x30]
100072ec:	ba 07 00 00 00       	mov    edx,0x7
100072f1:	89 c7                	mov    edi,eax
100072f3:	89 de                	mov    esi,ebx
100072f5:	89 d1                	mov    ecx,edx
100072f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100072f9:	83 ec 0c             	sub    esp,0xc
100072fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100072ff:	e8 fc ff ff ff       	call   10007300 <NFrame::tryInvalidate()+0x30>	10007300: R_386_PC32	NFrame::getAbsX()
10007304:	83 c4 10             	add    esp,0x10
10007307:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
1000730a:	83 ec 0c             	sub    esp,0xc
1000730d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007310:	e8 fc ff ff ff       	call   10007311 <NFrame::tryInvalidate()+0x41>	10007311: R_386_PC32	NFrame::getAbsY()
10007315:	83 c4 10             	add    esp,0x10
10007318:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
1000731b:	83 ec 1c             	sub    esp,0x1c
1000731e:	89 e0                	mov    eax,esp
10007320:	89 c3                	mov    ebx,eax
10007322:	8d 45 cc             	lea    eax,[ebp-0x34]
10007325:	ba 07 00 00 00       	mov    edx,0x7
1000732a:	89 df                	mov    edi,ebx
1000732c:	89 c6                	mov    esi,eax
1000732e:	89 d1                	mov    ecx,edx
10007330:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007332:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007335:	e8 fc ff ff ff       	call   10007336 <NFrame::tryInvalidate()+0x66>	10007336: R_386_PC32	NFrame::markRegionAsDirty(Region)
1000733a:	83 c4 20             	add    esp,0x20
1000733d:	eb 23                	jmp    10007362 <NFrame::tryInvalidate()+0x92>
1000733f:	83 ec 0c             	sub    esp,0xc
10007342:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007345:	e8 fc ff ff ff       	call   10007346 <NFrame::tryInvalidate()+0x76>	10007346: R_386_PC32	NFrame::isHiddenOverall()
1000734a:	83 c4 10             	add    esp,0x10
1000734d:	83 f0 01             	xor    eax,0x1
10007350:	84 c0                	test   al,al
10007352:	74 0e                	je     10007362 <NFrame::tryInvalidate()+0x92>
10007354:	83 ec 0c             	sub    esp,0xc
10007357:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000735a:	e8 fc ff ff ff       	call   1000735b <NFrame::tryInvalidate()+0x8b>	1000735b: R_386_PC32	NFrame::invalidate()
1000735f:	83 c4 10             	add    esp,0x10
10007362:	8d 65 f4             	lea    esp,[ebp-0xc]
10007365:	5b                   	pop    ebx
10007366:	5e                   	pop    esi
10007367:	5f                   	pop    edi
10007368:	5d                   	pop    ebp
10007369:	c3                   	ret    

1000736a <NFrame::getAbsX()>:
1000736a:	55                   	push   ebp
1000736b:	89 e5                	mov    ebp,esp
1000736d:	83 ec 08             	sub    esp,0x8
10007370:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007373:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10007376:	85 c0                	test   eax,eax
10007378:	74 1e                	je     10007398 <NFrame::getAbsX()+0x2e>
1000737a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000737d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10007380:	83 ec 0c             	sub    esp,0xc
10007383:	50                   	push   eax
10007384:	e8 fc ff ff ff       	call   10007385 <NFrame::getAbsX()+0x1b>	10007385: R_386_PC32	NFrame::getAbsX()
10007389:	83 c4 10             	add    esp,0x10
1000738c:	89 c2                	mov    edx,eax
1000738e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007391:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10007394:	01 d0                	add    eax,edx
10007396:	eb 06                	jmp    1000739e <NFrame::getAbsX()+0x34>
10007398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000739b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
1000739e:	c9                   	leave  
1000739f:	c3                   	ret    

100073a0 <NFrame::getAbsY()>:
100073a0:	55                   	push   ebp
100073a1:	89 e5                	mov    ebp,esp
100073a3:	83 ec 08             	sub    esp,0x8
100073a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073a9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100073ac:	85 c0                	test   eax,eax
100073ae:	74 1e                	je     100073ce <NFrame::getAbsY()+0x2e>
100073b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
100073b6:	83 ec 0c             	sub    esp,0xc
100073b9:	50                   	push   eax
100073ba:	e8 fc ff ff ff       	call   100073bb <NFrame::getAbsY()+0x1b>	100073bb: R_386_PC32	NFrame::getAbsY()
100073bf:	83 c4 10             	add    esp,0x10
100073c2:	89 c2                	mov    edx,eax
100073c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073c7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
100073ca:	01 d0                	add    eax,edx
100073cc:	eb 06                	jmp    100073d4 <NFrame::getAbsY()+0x34>
100073ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100073d1:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
100073d4:	c9                   	leave  
100073d5:	c3                   	ret    

100073d6 <NFrame::repaint(Video*, Region)>:
100073d6:	55                   	push   ebp
100073d7:	89 e5                	mov    ebp,esp
100073d9:	57                   	push   edi
100073da:	56                   	push   esi
100073db:	53                   	push   ebx
100073dc:	83 ec 5c             	sub    esp,0x5c
100073df:	8d 45 cc             	lea    eax,[ebp-0x34]
100073e2:	83 ec 08             	sub    esp,0x8
100073e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100073e8:	50                   	push   eax
100073e9:	e8 fc ff ff ff       	call   100073ea <NFrame::repaint(Video*, Region)+0x14>	100073ea: R_386_PC32	NFrame::getDirtyRegion()
100073ee:	83 c4 0c             	add    esp,0xc
100073f1:	8d 45 b0             	lea    eax,[ebp-0x50]
100073f4:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
100073f7:	83 ec 04             	sub    esp,0x4
100073fa:	6a 01                	push   0x1
100073fc:	83 ec 1c             	sub    esp,0x1c
100073ff:	89 e0                	mov    eax,esp
10007401:	89 c3                	mov    ebx,eax
10007403:	8d 45 cc             	lea    eax,[ebp-0x34]
10007406:	ba 07 00 00 00       	mov    edx,0x7
1000740b:	89 df                	mov    edi,ebx
1000740d:	89 c6                	mov    esi,eax
1000740f:	89 d1                	mov    ecx,edx
10007411:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007413:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007416:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007419:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
1000741c:	e8 fc ff ff ff       	call   1000741d <NFrame::repaint(Video*, Region)+0x47>	1000741d: R_386_PC32	NFrame::repaintAux(Video*, Region, bool)
10007421:	83 c4 2c             	add    esp,0x2c
10007424:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
10007427:	83 ec 0c             	sub    esp,0xc
1000742a:	50                   	push   eax
1000742b:	e8 fc ff ff ff       	call   1000742c <NFrame::repaint(Video*, Region)+0x56>	1000742c: R_386_PC32	free
10007430:	83 c4 10             	add    esp,0x10
10007433:	90                   	nop
10007434:	8d 65 f4             	lea    esp,[ebp-0xc]
10007437:	5b                   	pop    ebx
10007438:	5e                   	pop    esi
10007439:	5f                   	pop    edi
1000743a:	5d                   	pop    ebp
1000743b:	c3                   	ret    

1000743c <NFrame::paintSolid(NFrame::Graphics, unsigned int)>:
1000743c:	55                   	push   ebp
1000743d:	89 e5                	mov    ebp,esp
1000743f:	57                   	push   edi
10007440:	56                   	push   esi
10007441:	53                   	push   ebx
10007442:	83 ec 1c             	sub    esp,0x1c
10007445:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007448:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
1000744b:	83 ec 0c             	sub    esp,0xc
1000744e:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
10007451:	83 ec 1c             	sub    esp,0x1c
10007454:	89 e0                	mov    eax,esp
10007456:	89 c3                	mov    ebx,eax
10007458:	8d 45 10             	lea    eax,[ebp+0x10]
1000745b:	ba 07 00 00 00       	mov    edx,0x7
10007460:	89 df                	mov    edi,ebx
10007462:	89 c6                	mov    esi,eax
10007464:	89 d1                	mov    ecx,edx
10007466:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007468:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
1000746b:	e8 fc ff ff ff       	call   1000746c <NFrame::paintSolid(NFrame::Graphics, unsigned int)+0x30>	1000746c: R_386_PC32	fillRegion(Video*, Region, unsigned int)
10007470:	83 c4 30             	add    esp,0x30
10007473:	90                   	nop
10007474:	8d 65 f4             	lea    esp,[ebp-0xc]
10007477:	5b                   	pop    ebx
10007478:	5e                   	pop    esi
10007479:	5f                   	pop    edi
1000747a:	5d                   	pop    ebp
1000747b:	c3                   	ret    

1000747c <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)>:
1000747c:	55                   	push   ebp
1000747d:	89 e5                	mov    ebp,esp
1000747f:	57                   	push   edi
10007480:	56                   	push   esi
10007481:	53                   	push   ebx
10007482:	83 ec 2c             	sub    esp,0x2c
10007485:	83 ec 0c             	sub    esp,0xc
10007488:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000748b:	e8 fc ff ff ff       	call   1000748c <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x10>	1000748c: R_386_PC32	NFrame::getAbsY()
10007490:	83 c4 10             	add    esp,0x10
10007493:	89 c2                	mov    edx,eax
10007495:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
10007498:	8d 1c 02             	lea    ebx,[edx+eax*1]
1000749b:	83 ec 0c             	sub    esp,0xc
1000749e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100074a1:	e8 fc ff ff ff       	call   100074a2 <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x26>	100074a2: R_386_PC32	NFrame::getAbsX()
100074a6:	83 c4 10             	add    esp,0x10
100074a9:	89 c2                	mov    edx,eax
100074ab:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
100074ae:	01 c2                	add    edx,eax
100074b0:	8d 45 cc             	lea    eax,[ebp-0x34]
100074b3:	83 ec 0c             	sub    esp,0xc
100074b6:	ff 75 38             	push   DWORD PTR [ebp+0x38]
100074b9:	ff 75 34             	push   DWORD PTR [ebp+0x34]
100074bc:	53                   	push   ebx
100074bd:	52                   	push   edx
100074be:	50                   	push   eax
100074bf:	e8 fc ff ff ff       	call   100074c0 <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x44>	100074c0: R_386_PC32	createRectangleRegion(int, int, int, int)
100074c4:	83 c4 1c             	add    esp,0x1c
100074c7:	83 ec 0c             	sub    esp,0xc
100074ca:	ff 75 3c             	push   DWORD PTR [ebp+0x3c]
100074cd:	83 ec 20             	sub    esp,0x20
100074d0:	89 e0                	mov    eax,esp
100074d2:	89 c3                	mov    ebx,eax
100074d4:	8d 45 0c             	lea    eax,[ebp+0xc]
100074d7:	ba 08 00 00 00       	mov    edx,0x8
100074dc:	89 df                	mov    edi,ebx
100074de:	89 c6                	mov    esi,eax
100074e0:	89 d1                	mov    ecx,edx
100074e2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100074e4:	83 ec 1c             	sub    esp,0x1c
100074e7:	89 e0                	mov    eax,esp
100074e9:	89 c3                	mov    ebx,eax
100074eb:	8d 45 cc             	lea    eax,[ebp-0x34]
100074ee:	ba 07 00 00 00       	mov    edx,0x7
100074f3:	89 df                	mov    edi,ebx
100074f5:	89 c6                	mov    esi,eax
100074f7:	89 d1                	mov    ecx,edx
100074f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100074fb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100074fe:	e8 fc ff ff ff       	call   100074ff <NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)+0x83>	100074ff: R_386_PC32	NFrame::paintClippedCommon(Region, NFrame::Graphics, unsigned int)
10007503:	83 c4 50             	add    esp,0x50
10007506:	90                   	nop
10007507:	8d 65 f4             	lea    esp,[ebp-0xc]
1000750a:	5b                   	pop    ebx
1000750b:	5e                   	pop    esi
1000750c:	5f                   	pop    edi
1000750d:	5d                   	pop    ebp
1000750e:	c3                   	ret    
1000750f:	90                   	nop

10007510 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)>:
10007510:	55                   	push   ebp
10007511:	89 e5                	mov    ebp,esp
10007513:	57                   	push   edi
10007514:	56                   	push   esi
10007515:	53                   	push   ebx
10007516:	81 ec bc 00 00 00    	sub    esp,0xbc
1000751c:	83 7d 3c ff          	cmp    DWORD PTR [ebp+0x3c],0xffffffff
10007520:	75 46                	jne    10007568 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x58>
10007522:	6a 00                	push   0x0
10007524:	6a 0c                	push   0xc
10007526:	68 90 8c 00 10       	push   0x10008c90	10007527: R_386_32	.text
1000752b:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
10007531:	50                   	push   eax
10007532:	e8 fc ff ff ff       	call   10007533 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x23>	10007533: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10007537:	83 c4 10             	add    esp,0x10
1000753a:	83 ec 08             	sub    esp,0x8
1000753d:	81 ec 88 00 00 00    	sub    esp,0x88
10007543:	89 e0                	mov    eax,esp
10007545:	89 c3                	mov    ebx,eax
10007547:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
1000754d:	ba 22 00 00 00       	mov    edx,0x22
10007552:	89 df                	mov    edi,ebx
10007554:	89 c6                	mov    esi,eax
10007556:	89 d1                	mov    ecx,edx
10007558:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000755a:	e8 fc ff ff ff       	call   1000755b <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x4b>	1000755b: R_386_PC32	getFontHandle(FontStyle)
1000755f:	81 c4 90 00 00 00    	add    esp,0x90
10007565:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
10007568:	83 ec 0c             	sub    esp,0xc
1000756b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000756e:	e8 fc ff ff ff       	call   1000756f <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x5f>	1000756f: R_386_PC32	NFrame::getAbsX()
10007573:	83 c4 10             	add    esp,0x10
10007576:	01 45 2c             	add    DWORD PTR [ebp+0x2c],eax
10007579:	83 ec 0c             	sub    esp,0xc
1000757c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000757f:	e8 fc ff ff ff       	call   10007580 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x70>	10007580: R_386_PC32	NFrame::getAbsY()
10007584:	83 c4 10             	add    esp,0x10
10007587:	01 45 30             	add    DWORD PTR [ebp+0x30],eax
1000758a:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
1000758d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10007590:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
10007597:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
1000759e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
100075a1:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
100075a4:	01 d0                	add    eax,edx
100075a6:	8a 00                	mov    al,BYTE PTR [eax]
100075a8:	84 c0                	test   al,al
100075aa:	0f 84 9e 00 00 00    	je     1000764e <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x13e>
100075b0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
100075b3:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
100075b6:	01 d0                	add    eax,edx
100075b8:	8a 00                	mov    al,BYTE PTR [eax]
100075ba:	3c 0a                	cmp    al,0xa
100075bc:	75 15                	jne    100075d3 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0xc3>
100075be:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100075c1:	01 45 30             	add    DWORD PTR [ebp+0x30],eax
100075c4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
100075cb:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
100075ce:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
100075d1:	eb 73                	jmp    10007646 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x136>
100075d3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
100075d6:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
100075d9:	01 d0                	add    eax,edx
100075db:	8a 00                	mov    al,BYTE PTR [eax]
100075dd:	0f be c0             	movsx  eax,al
100075e0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100075e3:	89 8d 44 ff ff ff    	mov    DWORD PTR [ebp-0xbc],ecx
100075e9:	83 ec 0c             	sub    esp,0xc
100075ec:	ff 75 38             	push   DWORD PTR [ebp+0x38]
100075ef:	ff 75 30             	push   DWORD PTR [ebp+0x30]
100075f2:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
100075f5:	50                   	push   eax
100075f6:	ff 75 3c             	push   DWORD PTR [ebp+0x3c]
100075f9:	83 ec 1c             	sub    esp,0x1c
100075fc:	89 e0                	mov    eax,esp
100075fe:	89 c3                	mov    ebx,eax
10007600:	8d 45 10             	lea    eax,[ebp+0x10]
10007603:	ba 07 00 00 00       	mov    edx,0x7
10007608:	89 df                	mov    edi,ebx
1000760a:	89 c6                	mov    esi,eax
1000760c:	89 d1                	mov    ecx,edx
1000760e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007610:	ff b5 44 ff ff ff    	push   DWORD PTR [ebp-0xbc]
10007616:	e8 fc ff ff ff       	call   10007617 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x107>	10007617: R_386_PC32	drawFontCharacter(Video*, Region, int, int, int, int, unsigned int)
1000761b:	83 c4 40             	add    esp,0x40
1000761e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
10007621:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10007624:	0f b7 d0             	movzx  edx,ax
10007627:	8b 45 2c             	mov    eax,DWORD PTR [ebp+0x2c]
1000762a:	01 d0                	add    eax,edx
1000762c:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
1000762f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
10007632:	c1 e8 10             	shr    eax,0x10
10007635:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10007638:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
1000763b:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
1000763e:	7e 06                	jle    10007646 <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x136>
10007640:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
10007643:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10007646:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
10007649:	e9 50 ff ff ff       	jmp    1000759e <NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)+0x8e>
1000764e:	90                   	nop
1000764f:	8d 65 f4             	lea    esp,[ebp-0xc]
10007652:	5b                   	pop    ebx
10007653:	5e                   	pop    esi
10007654:	5f                   	pop    edi
10007655:	5d                   	pop    ebp
10007656:	c3                   	ret    
10007657:	90                   	nop

10007658 <NFrame::getTitlebarHeight()>:
10007658:	55                   	push   ebp
10007659:	89 e5                	mov    ebp,esp
1000765b:	83 ec 08             	sub    esp,0x8
1000765e:	83 ec 0c             	sub    esp,0xc
10007661:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007664:	e8 fc ff ff ff       	call   10007665 <NFrame::getTitlebarHeight()+0xd>	10007665: R_386_PC32	NFrame::hasTitleBar()
10007669:	83 c4 10             	add    esp,0x10
1000766c:	84 c0                	test   al,al
1000766e:	74 0b                	je     1000767b <NFrame::getTitlebarHeight()+0x23>
10007670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007673:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007679:	eb 05                	jmp    10007680 <NFrame::getTitlebarHeight()+0x28>
1000767b:	b8 00 00 00 00       	mov    eax,0x0
10007680:	c9                   	leave  
10007681:	c3                   	ret    

10007682 <NWindow::NWindow(int, int, int, int, char const*, int)>:
10007682:	55                   	push   ebp
10007683:	89 e5                	mov    ebp,esp
10007685:	57                   	push   edi
10007686:	56                   	push   esi
10007687:	53                   	push   ebx
10007688:	83 ec 3c             	sub    esp,0x3c
1000768b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000768e:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
10007691:	8d 45 cc             	lea    eax,[ebp-0x34]
10007694:	83 ec 0c             	sub    esp,0xc
10007697:	ff 75 18             	push   DWORD PTR [ebp+0x18]
1000769a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000769d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
100076a0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
100076a3:	50                   	push   eax
100076a4:	e8 fc ff ff ff       	call   100076a5 <NWindow::NWindow(int, int, int, int, char const*, int)+0x23>	100076a5: R_386_PC32	createRectangleRegion(int, int, int, int)
100076a9:	83 c4 1c             	add    esp,0x1c
100076ac:	83 ec 1c             	sub    esp,0x1c
100076af:	89 e0                	mov    eax,esp
100076b1:	89 c3                	mov    ebx,eax
100076b3:	8d 45 cc             	lea    eax,[ebp-0x34]
100076b6:	ba 07 00 00 00       	mov    edx,0x7
100076bb:	89 df                	mov    edi,ebx
100076bd:	89 c6                	mov    esi,eax
100076bf:	89 d1                	mov    ecx,edx
100076c1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100076c3:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
100076c6:	e8 fc ff ff ff       	call   100076c7 <NWindow::NWindow(int, int, int, int, char const*, int)+0x45>	100076c7: R_386_PC32	NFrame::NFrame(Region)
100076cb:	83 c4 20             	add    esp,0x20
100076ce:	ba 08 00 00 00       	mov    edx,0x8	100076cf: R_386_32	vtable for NWindow
100076d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100076d6:	89 10                	mov    DWORD PTR [eax],edx
100076d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100076db:	c7 80 88 00 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x88],0x3
100076e5:	c6 45 cb 00          	mov    BYTE PTR [ebp-0x35],0x0
100076e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100076ec:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
100076ef:	89 50 6c             	mov    DWORD PTR [eax+0x6c],edx
100076f2:	83 7d 1c 00          	cmp    DWORD PTR [ebp+0x1c],0x0
100076f6:	75 06                	jne    100076fe <NWindow::NWindow(int, int, int, int, char const*, int)+0x7c>
100076f8:	8d 45 cb             	lea    eax,[ebp-0x35]
100076fb:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
100076fe:	83 ec 0c             	sub    esp,0xc
10007701:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10007704:	e8 fc ff ff ff       	call   10007705 <NWindow::NWindow(int, int, int, int, char const*, int)+0x83>	10007705: R_386_PC32	strlen
10007709:	83 c4 10             	add    esp,0x10
1000770c:	40                   	inc    eax
1000770d:	83 ec 0c             	sub    esp,0xc
10007710:	50                   	push   eax
10007711:	e8 fc ff ff ff       	call   10007712 <NWindow::NWindow(int, int, int, int, char const*, int)+0x90>	10007712: R_386_PC32	malloc
10007716:	83 c4 10             	add    esp,0x10
10007719:	89 c2                	mov    edx,eax
1000771b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000771e:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
10007724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007727:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
1000772d:	83 ec 08             	sub    esp,0x8
10007730:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
10007733:	50                   	push   eax
10007734:	e8 fc ff ff ff       	call   10007735 <NWindow::NWindow(int, int, int, int, char const*, int)+0xb3>	10007735: R_386_PC32	strcpy
10007739:	83 c4 10             	add    esp,0x10
1000773c:	83 ec 0c             	sub    esp,0xc
1000773f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007742:	e8 fc ff ff ff       	call   10007743 <NWindow::NWindow(int, int, int, int, char const*, int)+0xc1>	10007743: R_386_PC32	NWindow::clipCornersIfNeededToMakeShadows()
10007747:	83 c4 10             	add    esp,0x10
1000774a:	90                   	nop
1000774b:	8d 65 f4             	lea    esp,[ebp-0xc]
1000774e:	5b                   	pop    ebx
1000774f:	5e                   	pop    esi
10007750:	5f                   	pop    edi
10007751:	5d                   	pop    ebp
10007752:	c3                   	ret    
10007753:	90                   	nop

10007754 <NWindow::getChildAllowableRegion()>:
10007754:	55                   	push   ebp
10007755:	89 e5                	mov    ebp,esp
10007757:	57                   	push   edi
10007758:	56                   	push   esi
10007759:	53                   	push   ebx
1000775a:	83 ec 2c             	sub    esp,0x2c
1000775d:	83 ec 0c             	sub    esp,0xc
10007760:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007763:	e8 fc ff ff ff       	call   10007764 <NWindow::getChildAllowableRegion()+0x10>	10007764: R_386_PC32	NWindow::allowShadows()
10007768:	83 c4 10             	add    esp,0x10
1000776b:	84 c0                	test   al,al
1000776d:	0f 84 9e 00 00 00    	je     10007811 <NWindow::getChildAllowableRegion()+0xbd>
10007773:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
10007776:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007779:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000777c:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10007782:	29 c2                	sub    edx,eax
10007784:	89 d0                	mov    eax,edx
10007786:	8d 58 fe             	lea    ebx,[eax-0x2]
10007789:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000778c:	83 ec 0c             	sub    esp,0xc
1000778f:	50                   	push   eax
10007790:	e8 fc ff ff ff       	call   10007791 <NWindow::getChildAllowableRegion()+0x3d>	10007791: R_386_PC32	NFrame::getTitlebarHeight()
10007795:	83 c4 10             	add    esp,0x10
10007798:	89 df                	mov    edi,ebx
1000779a:	29 c7                	sub    edi,eax
1000779c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000779f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
100077a2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100077a5:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
100077ab:	29 c2                	sub    edx,eax
100077ad:	89 d0                	mov    eax,edx
100077af:	8d 70 fe             	lea    esi,[eax-0x2]
100077b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100077b5:	83 ec 0c             	sub    esp,0xc
100077b8:	50                   	push   eax
100077b9:	e8 fc ff ff ff       	call   100077ba <NWindow::getChildAllowableRegion()+0x66>	100077ba: R_386_PC32	NFrame::getAbsY()
100077be:	83 c4 10             	add    esp,0x10
100077c1:	8d 58 01             	lea    ebx,[eax+0x1]
100077c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100077c7:	83 ec 0c             	sub    esp,0xc
100077ca:	50                   	push   eax
100077cb:	e8 fc ff ff ff       	call   100077cc <NWindow::getChildAllowableRegion()+0x78>	100077cc: R_386_PC32	NFrame::getTitlebarHeight()
100077d0:	83 c4 10             	add    esp,0x10
100077d3:	01 c3                	add    ebx,eax
100077d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100077d8:	83 ec 0c             	sub    esp,0xc
100077db:	50                   	push   eax
100077dc:	e8 fc ff ff ff       	call   100077dd <NWindow::getChildAllowableRegion()+0x89>	100077dd: R_386_PC32	NFrame::getAbsX()
100077e1:	83 c4 10             	add    esp,0x10
100077e4:	8d 50 01             	lea    edx,[eax+0x1]
100077e7:	8d 45 cc             	lea    eax,[ebp-0x34]
100077ea:	83 ec 0c             	sub    esp,0xc
100077ed:	57                   	push   edi
100077ee:	56                   	push   esi
100077ef:	53                   	push   ebx
100077f0:	52                   	push   edx
100077f1:	50                   	push   eax
100077f2:	e8 fc ff ff ff       	call   100077f3 <NWindow::getChildAllowableRegion()+0x9f>	100077f3: R_386_PC32	createRectangleRegion(int, int, int, int)
100077f7:	83 c4 1c             	add    esp,0x1c
100077fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100077fd:	89 c3                	mov    ebx,eax
100077ff:	8d 45 cc             	lea    eax,[ebp-0x34]
10007802:	ba 07 00 00 00       	mov    edx,0x7
10007807:	89 df                	mov    edi,ebx
10007809:	89 c6                	mov    esi,eax
1000780b:	89 d1                	mov    ecx,edx
1000780d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000780f:	eb 13                	jmp    10007824 <NWindow::getChildAllowableRegion()+0xd0>
10007811:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10007814:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007817:	83 ec 08             	sub    esp,0x8
1000781a:	52                   	push   edx
1000781b:	50                   	push   eax
1000781c:	e8 fc ff ff ff       	call   1000781d <NWindow::getChildAllowableRegion()+0xc9>	1000781d: R_386_PC32	NFrame::getChildAllowableRegion()
10007821:	83 c4 0c             	add    esp,0xc
10007824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007827:	8d 65 f4             	lea    esp,[ebp-0xc]
1000782a:	5b                   	pop    ebx
1000782b:	5e                   	pop    esi
1000782c:	5f                   	pop    edi
1000782d:	5d                   	pop    ebp
1000782e:	c2 04 00             	ret    0x4
10007831:	90                   	nop

10007832 <NWindow::allowShadows()>:
10007832:	55                   	push   ebp
10007833:	89 e5                	mov    ebp,esp
10007835:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007838:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
1000783b:	83 e0 04             	and    eax,0x4
1000783e:	85 c0                	test   eax,eax
10007840:	75 11                	jne    10007853 <NWindow::allowShadows()+0x21>
10007842:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007845:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
10007848:	83 f0 01             	xor    eax,0x1
1000784b:	84 c0                	test   al,al
1000784d:	74 04                	je     10007853 <NWindow::allowShadows()+0x21>
1000784f:	b0 01                	mov    al,0x1
10007851:	eb 02                	jmp    10007855 <NWindow::allowShadows()+0x23>
10007853:	b0 00                	mov    al,0x0
10007855:	5d                   	pop    ebp
10007856:	c3                   	ret    
10007857:	90                   	nop

10007858 <NWindow::clipCornersIfNeededToMakeShadows()>:
10007858:	55                   	push   ebp
10007859:	89 e5                	mov    ebp,esp
1000785b:	57                   	push   edi
1000785c:	56                   	push   esi
1000785d:	53                   	push   ebx
1000785e:	81 ec 8c 00 00 00    	sub    esp,0x8c
10007864:	83 ec 0c             	sub    esp,0xc
10007867:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000786a:	e8 fc ff ff ff       	call   1000786b <NWindow::clipCornersIfNeededToMakeShadows()+0x13>	1000786b: R_386_PC32	NWindow::allowShadows()
1000786f:	83 c4 10             	add    esp,0x10
10007872:	84 c0                	test   al,al
10007874:	0f 84 85 01 00 00    	je     100079ff <NWindow::clipCornersIfNeededToMakeShadows()+0x1a7>
1000787a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000787d:	c7 80 88 00 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x88],0x3
10007887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000788a:	8b 98 88 00 00 00    	mov    ebx,DWORD PTR [eax+0x88]
10007890:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007893:	8b 88 88 00 00 00    	mov    ecx,DWORD PTR [eax+0x88]
10007899:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000789c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
1000789f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078a2:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
100078a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078a8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
100078ab:	01 c6                	add    esi,eax
100078ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078b0:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
100078b6:	29 c6                	sub    esi,eax
100078b8:	8d 45 cc             	lea    eax,[ebp-0x34]
100078bb:	83 ec 0c             	sub    esp,0xc
100078be:	53                   	push   ebx
100078bf:	51                   	push   ecx
100078c0:	52                   	push   edx
100078c1:	56                   	push   esi
100078c2:	50                   	push   eax
100078c3:	e8 fc ff ff ff       	call   100078c4 <NWindow::clipCornersIfNeededToMakeShadows()+0x6c>	100078c4: R_386_PC32	createRectangleRegion(int, int, int, int)
100078c8:	83 c4 1c             	add    esp,0x1c
100078cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078ce:	8b 98 88 00 00 00    	mov    ebx,DWORD PTR [eax+0x88]
100078d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078d7:	8b 88 88 00 00 00    	mov    ecx,DWORD PTR [eax+0x88]
100078dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078e0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
100078e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078e6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
100078e9:	01 c2                	add    edx,eax
100078eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078ee:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
100078f4:	89 d6                	mov    esi,edx
100078f6:	29 c6                	sub    esi,eax
100078f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100078fb:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
100078fe:	8d 45 b0             	lea    eax,[ebp-0x50]
10007901:	83 ec 0c             	sub    esp,0xc
10007904:	53                   	push   ebx
10007905:	51                   	push   ecx
10007906:	56                   	push   esi
10007907:	52                   	push   edx
10007908:	50                   	push   eax
10007909:	e8 fc ff ff ff       	call   1000790a <NWindow::clipCornersIfNeededToMakeShadows()+0xb2>	1000790a: R_386_PC32	createRectangleRegion(int, int, int, int)
1000790e:	83 c4 1c             	add    esp,0x1c
10007911:	8d 45 94             	lea    eax,[ebp-0x6c]
10007914:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
1000791a:	83 ec 04             	sub    esp,0x4
1000791d:	83 ec 1c             	sub    esp,0x1c
10007920:	89 e0                	mov    eax,esp
10007922:	89 c3                	mov    ebx,eax
10007924:	8d 45 b0             	lea    eax,[ebp-0x50]
10007927:	ba 07 00 00 00       	mov    edx,0x7
1000792c:	89 df                	mov    edi,ebx
1000792e:	89 c6                	mov    esi,eax
10007930:	89 d1                	mov    ecx,edx
10007932:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007937:	83 ec 1c             	sub    esp,0x1c
1000793a:	89 e2                	mov    edx,esp
1000793c:	8d 58 14             	lea    ebx,[eax+0x14]
1000793f:	b8 07 00 00 00       	mov    eax,0x7
10007944:	89 d7                	mov    edi,edx
10007946:	89 de                	mov    esi,ebx
10007948:	89 c1                	mov    ecx,eax
1000794a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000794c:	ff b5 74 ff ff ff    	push   DWORD PTR [ebp-0x8c]
10007952:	e8 fc ff ff ff       	call   10007953 <NWindow::clipCornersIfNeededToMakeShadows()+0xfb>	10007953: R_386_PC32	getRegionDifference(Region, Region)
10007957:	83 c4 3c             	add    esp,0x3c
1000795a:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
10007960:	89 85 74 ff ff ff    	mov    DWORD PTR [ebp-0x8c],eax
10007966:	83 ec 04             	sub    esp,0x4
10007969:	83 ec 1c             	sub    esp,0x1c
1000796c:	89 e0                	mov    eax,esp
1000796e:	89 c3                	mov    ebx,eax
10007970:	8d 45 cc             	lea    eax,[ebp-0x34]
10007973:	ba 07 00 00 00       	mov    edx,0x7
10007978:	89 df                	mov    edi,ebx
1000797a:	89 c6                	mov    esi,eax
1000797c:	89 d1                	mov    ecx,edx
1000797e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007980:	83 ec 1c             	sub    esp,0x1c
10007983:	89 e0                	mov    eax,esp
10007985:	89 c3                	mov    ebx,eax
10007987:	8d 45 94             	lea    eax,[ebp-0x6c]
1000798a:	ba 07 00 00 00       	mov    edx,0x7
1000798f:	89 df                	mov    edi,ebx
10007991:	89 c6                	mov    esi,eax
10007993:	89 d1                	mov    ecx,edx
10007995:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007997:	ff b5 74 ff ff ff    	push   DWORD PTR [ebp-0x8c]
1000799d:	e8 fc ff ff ff       	call   1000799e <NWindow::clipCornersIfNeededToMakeShadows()+0x146>	1000799e: R_386_PC32	getRegionDifference(Region, Region)
100079a2:	83 c4 3c             	add    esp,0x3c
100079a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100079a8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
100079ab:	83 ec 0c             	sub    esp,0xc
100079ae:	50                   	push   eax
100079af:	e8 fc ff ff ff       	call   100079b0 <NWindow::clipCornersIfNeededToMakeShadows()+0x158>	100079b0: R_386_PC32	free
100079b4:	83 c4 10             	add    esp,0x10
100079b7:	8b 45 94             	mov    eax,DWORD PTR [ebp-0x6c]
100079ba:	83 ec 0c             	sub    esp,0xc
100079bd:	50                   	push   eax
100079be:	e8 fc ff ff ff       	call   100079bf <NWindow::clipCornersIfNeededToMakeShadows()+0x167>	100079bf: R_386_PC32	free
100079c3:	83 c4 10             	add    esp,0x10
100079c6:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
100079c9:	83 ec 0c             	sub    esp,0xc
100079cc:	50                   	push   eax
100079cd:	e8 fc ff ff ff       	call   100079ce <NWindow::clipCornersIfNeededToMakeShadows()+0x176>	100079ce: R_386_PC32	free
100079d2:	83 c4 10             	add    esp,0x10
100079d5:	8b 45 b0             	mov    eax,DWORD PTR [ebp-0x50]
100079d8:	83 ec 0c             	sub    esp,0xc
100079db:	50                   	push   eax
100079dc:	e8 fc ff ff ff       	call   100079dd <NWindow::clipCornersIfNeededToMakeShadows()+0x185>	100079dd: R_386_PC32	free
100079e1:	83 c4 10             	add    esp,0x10
100079e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100079e7:	8d 58 14             	lea    ebx,[eax+0x14]
100079ea:	8d 85 78 ff ff ff    	lea    eax,[ebp-0x88]
100079f0:	ba 19 00 00 00       	mov    edx,0x19
100079f5:	89 df                	mov    edi,ebx
100079f7:	89 c6                	mov    esi,eax
100079f9:	89 d1                	mov    ecx,edx
100079fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
100079fd:	eb 0d                	jmp    10007a0c <NWindow::clipCornersIfNeededToMakeShadows()+0x1b4>
100079ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a02:	c7 80 88 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x88],0x0
10007a0c:	90                   	nop
10007a0d:	8d 65 f4             	lea    esp,[ebp-0xc]
10007a10:	5b                   	pop    ebx
10007a11:	5e                   	pop    esi
10007a12:	5f                   	pop    edi
10007a13:	5d                   	pop    ebp
10007a14:	c3                   	ret    
10007a15:	90                   	nop

10007a16 <NWindow::postResizeCleanup()>:
10007a16:	55                   	push   ebp
10007a17:	89 e5                	mov    ebp,esp
10007a19:	83 ec 08             	sub    esp,0x8
10007a1c:	83 ec 0c             	sub    esp,0xc
10007a1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10007a22:	e8 fc ff ff ff       	call   10007a23 <NWindow::postResizeCleanup()+0xd>	10007a23: R_386_PC32	NWindow::clipCornersIfNeededToMakeShadows()
10007a27:	83 c4 10             	add    esp,0x10
10007a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a2d:	83 ec 0c             	sub    esp,0xc
10007a30:	50                   	push   eax
10007a31:	e8 fc ff ff ff       	call   10007a32 <NWindow::postResizeCleanup()+0x1c>	10007a32: R_386_PC32	NFrame::tryInvalidate()
10007a36:	83 c4 10             	add    esp,0x10
10007a39:	90                   	nop
10007a3a:	c9                   	leave  
10007a3b:	c3                   	ret    

10007a3c <NWindow::paintHandler(NFrame::Graphics)>:
10007a3c:	55                   	push   ebp
10007a3d:	89 e5                	mov    ebp,esp
10007a3f:	57                   	push   edi
10007a40:	56                   	push   esi
10007a41:	53                   	push   ebx
10007a42:	83 ec 4c             	sub    esp,0x4c
10007a45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a48:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007a4b:	83 e0 08             	and    eax,0x8
10007a4e:	85 c0                	test   eax,eax
10007a50:	0f 85 5a 04 00 00    	jne    10007eb0 <NWindow::paintHandler(NFrame::Graphics)+0x474>
10007a56:	c7 45 e4 18 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x18
10007a5d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
10007a64:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
10007a6b:	c7 45 d8 c0 c0 c0 00 	mov    DWORD PTR [ebp-0x28],0xc0c0c0
10007a72:	c7 45 d4 ff ff ff 00 	mov    DWORD PTR [ebp-0x2c],0xffffff
10007a79:	c7 45 d0 ff ff ff 00 	mov    DWORD PTR [ebp-0x30],0xffffff
10007a80:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
10007a87:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
10007a8e:	c7 45 c4 c0 c0 c0 00 	mov    DWORD PTR [ebp-0x3c],0xc0c0c0
10007a95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007a98:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007a9b:	83 e0 01             	and    eax,0x1
10007a9e:	85 c0                	test   eax,eax
10007aa0:	0f 85 0d 02 00 00    	jne    10007cb3 <NWindow::paintHandler(NFrame::Graphics)+0x277>
10007aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007aa9:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007aaf:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007ab2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ab5:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007abb:	89 d1                	mov    ecx,edx
10007abd:	29 c1                	sub    ecx,eax
10007abf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ac2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
10007ac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ac8:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007ace:	83 ec 08             	sub    esp,0x8
10007ad1:	68 c0 c0 c0 00       	push   0xc0c0c0
10007ad6:	51                   	push   ecx
10007ad7:	52                   	push   edx
10007ad8:	50                   	push   eax
10007ad9:	6a 00                	push   0x0
10007adb:	83 ec 20             	sub    esp,0x20
10007ade:	89 e0                	mov    eax,esp
10007ae0:	89 c3                	mov    ebx,eax
10007ae2:	8d 45 0c             	lea    eax,[ebp+0xc]
10007ae5:	ba 08 00 00 00       	mov    edx,0x8
10007aea:	89 df                	mov    edi,ebx
10007aec:	89 c6                	mov    esi,eax
10007aee:	89 d1                	mov    ecx,edx
10007af0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007af2:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007af5:	e8 fc ff ff ff       	call   10007af6 <NWindow::paintHandler(NFrame::Graphics)+0xba>	10007af6: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007afa:	83 c4 40             	add    esp,0x40
10007afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b00:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007b03:	83 e0 02             	and    eax,0x2
10007b06:	85 c0                	test   eax,eax
10007b08:	0f 85 14 01 00 00    	jne    10007c22 <NWindow::paintHandler(NFrame::Graphics)+0x1e6>
10007b0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b11:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007b14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b17:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007b1d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007b20:	8b 4a 18             	mov    ecx,DWORD PTR [edx+0x18]
10007b23:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007b26:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007b2c:	29 d1                	sub    ecx,edx
10007b2e:	89 ca                	mov    edx,ecx
10007b30:	83 ea 18             	sub    edx,0x18
10007b33:	83 ec 08             	sub    esp,0x8
10007b36:	68 ff ff ff 00       	push   0xffffff
10007b3b:	50                   	push   eax
10007b3c:	52                   	push   edx
10007b3d:	6a 00                	push   0x0
10007b3f:	6a 00                	push   0x0
10007b41:	83 ec 20             	sub    esp,0x20
10007b44:	89 e0                	mov    eax,esp
10007b46:	89 c3                	mov    ebx,eax
10007b48:	8d 45 0c             	lea    eax,[ebp+0xc]
10007b4b:	ba 08 00 00 00       	mov    edx,0x8
10007b50:	89 df                	mov    edi,ebx
10007b52:	89 c6                	mov    esi,eax
10007b54:	89 d1                	mov    ecx,edx
10007b56:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007b58:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007b5b:	e8 fc ff ff ff       	call   10007b5c <NWindow::paintHandler(NFrame::Graphics)+0x120>	10007b5c: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007b60:	83 c4 40             	add    esp,0x40
10007b63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b66:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007b69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007b6c:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007b72:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007b75:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
10007b78:	8d 4a e8             	lea    ecx,[edx-0x18]
10007b7b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007b7e:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007b84:	29 d1                	sub    ecx,edx
10007b86:	89 ca                	mov    edx,ecx
10007b88:	83 ec 08             	sub    esp,0x8
10007b8b:	68 ff ff ff 00       	push   0xffffff
10007b90:	50                   	push   eax
10007b91:	6a 18                	push   0x18
10007b93:	6a 00                	push   0x0
10007b95:	52                   	push   edx
10007b96:	83 ec 20             	sub    esp,0x20
10007b99:	89 e0                	mov    eax,esp
10007b9b:	89 c3                	mov    ebx,eax
10007b9d:	8d 45 0c             	lea    eax,[ebp+0xc]
10007ba0:	ba 08 00 00 00       	mov    edx,0x8
10007ba5:	89 df                	mov    edi,ebx
10007ba7:	89 c6                	mov    esi,eax
10007ba9:	89 d1                	mov    ecx,edx
10007bab:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007bad:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007bb0:	e8 fc ff ff ff       	call   10007bb1 <NWindow::paintHandler(NFrame::Graphics)+0x175>	10007bb1: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007bb5:	83 c4 40             	add    esp,0x40
10007bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007bbb:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007bbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007bc1:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007bc4:	83 e0 10             	and    eax,0x10
10007bc7:	85 c0                	test   eax,eax
10007bc9:	74 07                	je     10007bd2 <NWindow::paintHandler(NFrame::Graphics)+0x196>
10007bcb:	b8 c0 c0 c0 00       	mov    eax,0xc0c0c0
10007bd0:	eb 05                	jmp    10007bd7 <NWindow::paintHandler(NFrame::Graphics)+0x19b>
10007bd2:	b8 00 00 00 00       	mov    eax,0x0
10007bd7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007bda:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
10007bdd:	8d 4a e8             	lea    ecx,[edx-0x18]
10007be0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007be3:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007be9:	29 d1                	sub    ecx,edx
10007beb:	89 ca                	mov    edx,ecx
10007bed:	83 c2 08             	add    edx,0x8
10007bf0:	83 ec 08             	sub    esp,0x8
10007bf3:	6a ff                	push   0xffffffff
10007bf5:	50                   	push   eax
10007bf6:	68 98 8c 00 10       	push   0x10008c98	10007bf7: R_386_32	.text
10007bfb:	6a 06                	push   0x6
10007bfd:	52                   	push   edx
10007bfe:	83 ec 20             	sub    esp,0x20
10007c01:	89 e0                	mov    eax,esp
10007c03:	89 c3                	mov    ebx,eax
10007c05:	8d 45 0c             	lea    eax,[ebp+0xc]
10007c08:	ba 08 00 00 00       	mov    edx,0x8
10007c0d:	89 df                	mov    edi,ebx
10007c0f:	89 c6                	mov    esi,eax
10007c11:	89 d1                	mov    ecx,edx
10007c13:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007c15:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007c18:	e8 fc ff ff ff       	call   10007c19 <NWindow::paintHandler(NFrame::Graphics)+0x1dd>	10007c19: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
10007c1d:	83 c4 40             	add    esp,0x40
10007c20:	eb 52                	jmp    10007c74 <NWindow::paintHandler(NFrame::Graphics)+0x238>
10007c22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c25:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c2b:	8b 80 84 00 00 00    	mov    eax,DWORD PTR [eax+0x84]
10007c31:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007c34:	8b 4a 18             	mov    ecx,DWORD PTR [edx+0x18]
10007c37:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007c3a:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007c40:	29 d1                	sub    ecx,edx
10007c42:	89 ca                	mov    edx,ecx
10007c44:	83 ec 08             	sub    esp,0x8
10007c47:	68 ff ff ff 00       	push   0xffffff
10007c4c:	50                   	push   eax
10007c4d:	52                   	push   edx
10007c4e:	6a 00                	push   0x0
10007c50:	6a 00                	push   0x0
10007c52:	83 ec 20             	sub    esp,0x20
10007c55:	89 e0                	mov    eax,esp
10007c57:	89 c3                	mov    ebx,eax
10007c59:	8d 45 0c             	lea    eax,[ebp+0xc]
10007c5c:	ba 08 00 00 00       	mov    edx,0x8
10007c61:	89 df                	mov    edi,ebx
10007c63:	89 c6                	mov    esi,eax
10007c65:	89 d1                	mov    ecx,edx
10007c67:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007c69:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007c6c:	e8 fc ff ff ff       	call   10007c6d <NWindow::paintHandler(NFrame::Graphics)+0x231>	10007c6d: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007c71:	83 c4 40             	add    esp,0x40
10007c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c77:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007c7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007c7d:	8b 80 8c 00 00 00    	mov    eax,DWORD PTR [eax+0x8c]
10007c83:	83 ec 08             	sub    esp,0x8
10007c86:	6a ff                	push   0xffffffff
10007c88:	6a 00                	push   0x0
10007c8a:	50                   	push   eax
10007c8b:	6a 06                	push   0x6
10007c8d:	6a 08                	push   0x8
10007c8f:	83 ec 20             	sub    esp,0x20
10007c92:	89 e0                	mov    eax,esp
10007c94:	89 c3                	mov    ebx,eax
10007c96:	8d 45 0c             	lea    eax,[ebp+0xc]
10007c99:	ba 08 00 00 00       	mov    edx,0x8
10007c9e:	89 df                	mov    edi,ebx
10007ca0:	89 c6                	mov    esi,eax
10007ca2:	89 d1                	mov    ecx,edx
10007ca4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007ca6:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007ca9:	e8 fc ff ff ff       	call   10007caa <NWindow::paintHandler(NFrame::Graphics)+0x26e>	10007caa: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
10007cae:	83 c4 40             	add    esp,0x40
10007cb1:	eb 30                	jmp    10007ce3 <NWindow::paintHandler(NFrame::Graphics)+0x2a7>
10007cb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007cb6:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007cb9:	83 ec 08             	sub    esp,0x8
10007cbc:	68 c0 c0 c0 00       	push   0xc0c0c0
10007cc1:	83 ec 20             	sub    esp,0x20
10007cc4:	89 e0                	mov    eax,esp
10007cc6:	89 c3                	mov    ebx,eax
10007cc8:	8d 45 0c             	lea    eax,[ebp+0xc]
10007ccb:	ba 08 00 00 00       	mov    edx,0x8
10007cd0:	89 df                	mov    edi,ebx
10007cd2:	89 c6                	mov    esi,eax
10007cd4:	89 d1                	mov    ecx,edx
10007cd6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007cd8:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007cdb:	e8 fc ff ff ff       	call   10007cdc <NWindow::paintHandler(NFrame::Graphics)+0x2a0>	10007cdc: R_386_PC32	NFrame::paintSolid(NFrame::Graphics, unsigned int)
10007ce0:	83 c4 30             	add    esp,0x30
10007ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ce6:	8b 40 6c             	mov    eax,DWORD PTR [eax+0x6c]
10007ce9:	83 e0 04             	and    eax,0x4
10007cec:	85 c0                	test   eax,eax
10007cee:	0f 85 bd 01 00 00    	jne    10007eb1 <NWindow::paintHandler(NFrame::Graphics)+0x475>
10007cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007cf7:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007cfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007cfd:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007d00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d03:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10007d09:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10007d0c:	8b 59 18             	mov    ebx,DWORD PTR [ecx+0x18]
10007d0f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10007d12:	8b 89 88 00 00 00    	mov    ecx,DWORD PTR [ecx+0x88]
10007d18:	29 cb                	sub    ebx,ecx
10007d1a:	89 d9                	mov    ecx,ebx
10007d1c:	83 ec 08             	sub    esp,0x8
10007d1f:	6a 00                	push   0x0
10007d21:	52                   	push   edx
10007d22:	50                   	push   eax
10007d23:	6a 00                	push   0x0
10007d25:	51                   	push   ecx
10007d26:	83 ec 20             	sub    esp,0x20
10007d29:	89 e0                	mov    eax,esp
10007d2b:	89 c3                	mov    ebx,eax
10007d2d:	8d 45 0c             	lea    eax,[ebp+0xc]
10007d30:	ba 08 00 00 00       	mov    edx,0x8
10007d35:	89 df                	mov    edi,ebx
10007d37:	89 c6                	mov    esi,eax
10007d39:	89 d1                	mov    ecx,edx
10007d3b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007d3d:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007d40:	e8 fc ff ff ff       	call   10007d41 <NWindow::paintHandler(NFrame::Graphics)+0x305>	10007d41: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007d45:	83 c4 40             	add    esp,0x40
10007d48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d4b:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007d4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d51:	8b 90 88 00 00 00    	mov    edx,DWORD PTR [eax+0x88]
10007d57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d5a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007d5d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10007d60:	8b 59 1c             	mov    ebx,DWORD PTR [ecx+0x1c]
10007d63:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
10007d66:	8b 89 88 00 00 00    	mov    ecx,DWORD PTR [ecx+0x88]
10007d6c:	29 cb                	sub    ebx,ecx
10007d6e:	89 d9                	mov    ecx,ebx
10007d70:	83 ec 08             	sub    esp,0x8
10007d73:	6a 00                	push   0x0
10007d75:	52                   	push   edx
10007d76:	50                   	push   eax
10007d77:	51                   	push   ecx
10007d78:	6a 00                	push   0x0
10007d7a:	83 ec 20             	sub    esp,0x20
10007d7d:	89 e0                	mov    eax,esp
10007d7f:	89 c3                	mov    ebx,eax
10007d81:	8d 45 0c             	lea    eax,[ebp+0xc]
10007d84:	ba 08 00 00 00       	mov    edx,0x8
10007d89:	89 df                	mov    edi,ebx
10007d8b:	89 c6                	mov    esi,eax
10007d8d:	89 d1                	mov    ecx,edx
10007d8f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007d91:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007d94:	e8 fc ff ff ff       	call   10007d95 <NWindow::paintHandler(NFrame::Graphics)+0x359>	10007d95: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007d99:	83 c4 40             	add    esp,0x40
10007d9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007d9f:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007da2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007da5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007da8:	83 ec 08             	sub    esp,0x8
10007dab:	6a 00                	push   0x0
10007dad:	6a 01                	push   0x1
10007daf:	50                   	push   eax
10007db0:	6a 00                	push   0x0
10007db2:	6a 00                	push   0x0
10007db4:	83 ec 20             	sub    esp,0x20
10007db7:	89 e0                	mov    eax,esp
10007db9:	89 c3                	mov    ebx,eax
10007dbb:	8d 45 0c             	lea    eax,[ebp+0xc]
10007dbe:	ba 08 00 00 00       	mov    edx,0x8
10007dc3:	89 df                	mov    edi,ebx
10007dc5:	89 c6                	mov    esi,eax
10007dc7:	89 d1                	mov    ecx,edx
10007dc9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007dcb:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007dce:	e8 fc ff ff ff       	call   10007dcf <NWindow::paintHandler(NFrame::Graphics)+0x393>	10007dcf: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007dd3:	83 c4 40             	add    esp,0x40
10007dd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007dd9:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007ddc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ddf:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007de2:	83 ec 08             	sub    esp,0x8
10007de5:	6a 00                	push   0x0
10007de7:	50                   	push   eax
10007de8:	6a 01                	push   0x1
10007dea:	6a 00                	push   0x0
10007dec:	6a 00                	push   0x0
10007dee:	83 ec 20             	sub    esp,0x20
10007df1:	89 e0                	mov    eax,esp
10007df3:	89 c3                	mov    ebx,eax
10007df5:	8d 45 0c             	lea    eax,[ebp+0xc]
10007df8:	ba 08 00 00 00       	mov    edx,0x8
10007dfd:	89 df                	mov    edi,ebx
10007dff:	89 c6                	mov    esi,eax
10007e01:	89 d1                	mov    ecx,edx
10007e03:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007e05:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007e08:	e8 fc ff ff ff       	call   10007e09 <NWindow::paintHandler(NFrame::Graphics)+0x3cd>	10007e09: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007e0d:	83 c4 40             	add    esp,0x40
10007e10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e13:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e19:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007e1c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007e1f:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
10007e22:	8d 4a ff             	lea    ecx,[edx-0x1]
10007e25:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007e28:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007e2e:	29 d1                	sub    ecx,edx
10007e30:	89 ca                	mov    edx,ecx
10007e32:	83 ec 08             	sub    esp,0x8
10007e35:	6a 00                	push   0x0
10007e37:	6a 01                	push   0x1
10007e39:	50                   	push   eax
10007e3a:	52                   	push   edx
10007e3b:	6a 00                	push   0x0
10007e3d:	83 ec 20             	sub    esp,0x20
10007e40:	89 e0                	mov    eax,esp
10007e42:	89 c3                	mov    ebx,eax
10007e44:	8d 45 0c             	lea    eax,[ebp+0xc]
10007e47:	ba 08 00 00 00       	mov    edx,0x8
10007e4c:	89 df                	mov    edi,ebx
10007e4e:	89 c6                	mov    esi,eax
10007e50:	89 d1                	mov    ecx,edx
10007e52:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007e54:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007e57:	e8 fc ff ff ff       	call   10007e58 <NWindow::paintHandler(NFrame::Graphics)+0x41c>	10007e58: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007e5c:	83 c4 40             	add    esp,0x40
10007e5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e62:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
10007e65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007e68:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10007e6b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007e6e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
10007e71:	8d 4a ff             	lea    ecx,[edx-0x1]
10007e74:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
10007e77:	8b 92 88 00 00 00    	mov    edx,DWORD PTR [edx+0x88]
10007e7d:	29 d1                	sub    ecx,edx
10007e7f:	89 ca                	mov    edx,ecx
10007e81:	83 ec 08             	sub    esp,0x8
10007e84:	6a 00                	push   0x0
10007e86:	50                   	push   eax
10007e87:	6a 01                	push   0x1
10007e89:	6a 00                	push   0x0
10007e8b:	52                   	push   edx
10007e8c:	83 ec 20             	sub    esp,0x20
10007e8f:	89 e0                	mov    eax,esp
10007e91:	89 c3                	mov    ebx,eax
10007e93:	8d 45 0c             	lea    eax,[ebp+0xc]
10007e96:	ba 08 00 00 00       	mov    edx,0x8
10007e9b:	89 df                	mov    edi,ebx
10007e9d:	89 c6                	mov    esi,eax
10007e9f:	89 d1                	mov    ecx,edx
10007ea1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007ea3:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
10007ea6:	e8 fc ff ff ff       	call   10007ea7 <NWindow::paintHandler(NFrame::Graphics)+0x46b>	10007ea7: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007eab:	83 c4 40             	add    esp,0x40
10007eae:	eb 01                	jmp    10007eb1 <NWindow::paintHandler(NFrame::Graphics)+0x475>
10007eb0:	90                   	nop
10007eb1:	8d 65 f4             	lea    esp,[ebp-0xc]
10007eb4:	5b                   	pop    ebx
10007eb5:	5e                   	pop    esi
10007eb6:	5f                   	pop    edi
10007eb7:	5d                   	pop    ebp
10007eb8:	c3                   	ret    
10007eb9:	90                   	nop

10007eba <NDesktopWindow::NDesktopWindow(int, int, int, int, int)>:
10007eba:	55                   	push   ebp
10007ebb:	89 e5                	mov    ebp,esp
10007ebd:	83 ec 08             	sub    esp,0x8
10007ec0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ec3:	83 ec 0c             	sub    esp,0xc
10007ec6:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10007ec9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10007ecc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10007ecf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007ed2:	50                   	push   eax
10007ed3:	e8 fc ff ff ff       	call   10007ed4 <NDesktopWindow::NDesktopWindow(int, int, int, int, int)+0x1a>	10007ed4: R_386_PC32	NFrame::NFrame(int, int, int, int)
10007ed8:	83 c4 20             	add    esp,0x20
10007edb:	ba 08 00 00 00       	mov    edx,0x8	10007edc: R_386_32	vtable for NDesktopWindow
10007ee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ee3:	89 10                	mov    DWORD PTR [eax],edx
10007ee5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007ee8:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
10007eeb:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
10007ef1:	90                   	nop
10007ef2:	c9                   	leave  
10007ef3:	c3                   	ret    

10007ef4 <NDesktopWindow::paintHandler(NFrame::Graphics)>:
10007ef4:	55                   	push   ebp
10007ef5:	89 e5                	mov    ebp,esp
10007ef7:	57                   	push   edi
10007ef8:	56                   	push   esi
10007ef9:	53                   	push   ebx
10007efa:	83 ec 1c             	sub    esp,0x1c
10007efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f00:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
10007f03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f06:	8b 80 88 00 00 00    	mov    eax,DWORD PTR [eax+0x88]
10007f0c:	89 c1                	mov    ecx,eax
10007f0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f11:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f17:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007f1a:	83 ec 08             	sub    esp,0x8
10007f1d:	51                   	push   ecx
10007f1e:	52                   	push   edx
10007f1f:	50                   	push   eax
10007f20:	6a 00                	push   0x0
10007f22:	6a 00                	push   0x0
10007f24:	83 ec 20             	sub    esp,0x20
10007f27:	89 e0                	mov    eax,esp
10007f29:	89 c3                	mov    ebx,eax
10007f2b:	8d 45 0c             	lea    eax,[ebp+0xc]
10007f2e:	ba 08 00 00 00       	mov    edx,0x8
10007f33:	89 df                	mov    edi,ebx
10007f35:	89 c6                	mov    esi,eax
10007f37:	89 d1                	mov    ecx,edx
10007f39:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007f3b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
10007f3e:	e8 fc ff ff ff       	call   10007f3f <NDesktopWindow::paintHandler(NFrame::Graphics)+0x4b>	10007f3f: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007f43:	83 c4 40             	add    esp,0x40
10007f46:	90                   	nop
10007f47:	8d 65 f4             	lea    esp,[ebp-0xc]
10007f4a:	5b                   	pop    ebx
10007f4b:	5e                   	pop    esi
10007f4c:	5f                   	pop    edi
10007f4d:	5d                   	pop    ebp
10007f4e:	c3                   	ret    
10007f4f:	90                   	nop

10007f50 <NButton::NButton(int, int, int, int)>:
10007f50:	55                   	push   ebp
10007f51:	89 e5                	mov    ebp,esp
10007f53:	83 ec 08             	sub    esp,0x8
10007f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f59:	83 ec 0c             	sub    esp,0xc
10007f5c:	ff 75 18             	push   DWORD PTR [ebp+0x18]
10007f5f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10007f62:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10007f65:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10007f68:	50                   	push   eax
10007f69:	e8 fc ff ff ff       	call   10007f6a <NButton::NButton(int, int, int, int)+0x1a>	10007f6a: R_386_PC32	NFrame::NFrame(int, int, int, int)
10007f6e:	83 c4 20             	add    esp,0x20
10007f71:	ba 08 00 00 00       	mov    edx,0x8	10007f72: R_386_32	vtable for NButton
10007f76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f79:	89 10                	mov    DWORD PTR [eax],edx
10007f7b:	90                   	nop
10007f7c:	c9                   	leave  
10007f7d:	c3                   	ret    

10007f7e <NButton::paintHandler(NFrame::Graphics)>:
10007f7e:	55                   	push   ebp
10007f7f:	89 e5                	mov    ebp,esp
10007f81:	57                   	push   edi
10007f82:	56                   	push   esi
10007f83:	53                   	push   ebx
10007f84:	81 ec 4c 03 00 00    	sub    esp,0x34c
10007f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f8d:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
10007f93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f96:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
10007f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007f9c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10007f9f:	83 ec 08             	sub    esp,0x8
10007fa2:	68 c0 c0 c0 00       	push   0xc0c0c0
10007fa7:	52                   	push   edx
10007fa8:	50                   	push   eax
10007fa9:	6a 00                	push   0x0
10007fab:	6a 00                	push   0x0
10007fad:	83 ec 20             	sub    esp,0x20
10007fb0:	89 e0                	mov    eax,esp
10007fb2:	89 c3                	mov    ebx,eax
10007fb4:	8d 45 0c             	lea    eax,[ebp+0xc]
10007fb7:	ba 08 00 00 00       	mov    edx,0x8
10007fbc:	89 df                	mov    edi,ebx
10007fbe:	89 c6                	mov    esi,eax
10007fc0:	89 d1                	mov    ecx,edx
10007fc2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10007fc4:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
10007fca:	e8 fc ff ff ff       	call   10007fcb <NButton::paintHandler(NFrame::Graphics)+0x4d>	10007fcb: R_386_PC32	NFrame::paintRectangle(NFrame::Graphics, int, int, int, int, unsigned int)
10007fcf:	83 c4 40             	add    esp,0x40
10007fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10007fd5:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
10007fdb:	6a 00                	push   0x0
10007fdd:	6a 0c                	push   0xc
10007fdf:	68 9a 8c 00 10       	push   0x10008c9a	10007fe0: R_386_32	.text
10007fe4:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
10007fea:	50                   	push   eax
10007feb:	e8 fc ff ff ff       	call   10007fec <NButton::paintHandler(NFrame::Graphics)+0x6e>	10007fec: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10007ff0:	83 c4 10             	add    esp,0x10
10007ff3:	83 ec 08             	sub    esp,0x8
10007ff6:	81 ec 88 00 00 00    	sub    esp,0x88
10007ffc:	89 e0                	mov    eax,esp
10007ffe:	89 c3                	mov    ebx,eax
10008000:	8d 85 b8 fc ff ff    	lea    eax,[ebp-0x348]
10008006:	ba 22 00 00 00       	mov    edx,0x22
1000800b:	89 df                	mov    edi,ebx
1000800d:	89 c6                	mov    esi,eax
1000800f:	89 d1                	mov    ecx,edx
10008011:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008013:	e8 fc ff ff ff       	call   10008014 <NButton::paintHandler(NFrame::Graphics)+0x96>	10008014: R_386_PC32	getFontHandle(FontStyle)
10008018:	81 c4 90 00 00 00    	add    esp,0x90
1000801e:	83 ec 08             	sub    esp,0x8
10008021:	50                   	push   eax
10008022:	6a 00                	push   0x0
10008024:	68 a0 8c 00 10       	push   0x10008ca0	10008025: R_386_32	.text
10008029:	6a 00                	push   0x0
1000802b:	6a 00                	push   0x0
1000802d:	83 ec 20             	sub    esp,0x20
10008030:	89 e0                	mov    eax,esp
10008032:	89 c3                	mov    ebx,eax
10008034:	8d 45 0c             	lea    eax,[ebp+0xc]
10008037:	ba 08 00 00 00       	mov    edx,0x8
1000803c:	89 df                	mov    edi,ebx
1000803e:	89 c6                	mov    esi,eax
10008040:	89 d1                	mov    ecx,edx
10008042:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008044:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
1000804a:	e8 fc ff ff ff       	call   1000804b <NButton::paintHandler(NFrame::Graphics)+0xcd>	1000804b: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
1000804f:	83 c4 40             	add    esp,0x40
10008052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008055:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
1000805b:	6a 00                	push   0x0
1000805d:	6a 0c                	push   0xc
1000805f:	68 9a 8c 00 10       	push   0x10008c9a	10008060: R_386_32	.text
10008064:	8d 85 40 fd ff ff    	lea    eax,[ebp-0x2c0]
1000806a:	50                   	push   eax
1000806b:	e8 fc ff ff ff       	call   1000806c <NButton::paintHandler(NFrame::Graphics)+0xee>	1000806c: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10008070:	83 c4 10             	add    esp,0x10
10008073:	83 ec 08             	sub    esp,0x8
10008076:	81 ec 88 00 00 00    	sub    esp,0x88
1000807c:	89 e0                	mov    eax,esp
1000807e:	89 c3                	mov    ebx,eax
10008080:	8d 85 40 fd ff ff    	lea    eax,[ebp-0x2c0]
10008086:	ba 22 00 00 00       	mov    edx,0x22
1000808b:	89 df                	mov    edi,ebx
1000808d:	89 c6                	mov    esi,eax
1000808f:	89 d1                	mov    ecx,edx
10008091:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008093:	e8 fc ff ff ff       	call   10008094 <NButton::paintHandler(NFrame::Graphics)+0x116>	10008094: R_386_PC32	getFontHandle(FontStyle)
10008098:	81 c4 90 00 00 00    	add    esp,0x90
1000809e:	83 ec 08             	sub    esp,0x8
100080a1:	50                   	push   eax
100080a2:	6a 00                	push   0x0
100080a4:	68 cc 8c 00 10       	push   0x10008ccc	100080a5: R_386_32	.text
100080a9:	6a 19                	push   0x19
100080ab:	6a 00                	push   0x0
100080ad:	83 ec 20             	sub    esp,0x20
100080b0:	89 e0                	mov    eax,esp
100080b2:	89 c3                	mov    ebx,eax
100080b4:	8d 45 0c             	lea    eax,[ebp+0xc]
100080b7:	ba 08 00 00 00       	mov    edx,0x8
100080bc:	89 df                	mov    edi,ebx
100080be:	89 c6                	mov    esi,eax
100080c0:	89 d1                	mov    ecx,edx
100080c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100080c4:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100080ca:	e8 fc ff ff ff       	call   100080cb <NButton::paintHandler(NFrame::Graphics)+0x14d>	100080cb: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100080cf:	83 c4 40             	add    esp,0x40
100080d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100080d5:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
100080db:	6a 00                	push   0x0
100080dd:	6a 0c                	push   0xc
100080df:	68 9a 8c 00 10       	push   0x10008c9a	100080e0: R_386_32	.text
100080e4:	8d 85 c8 fd ff ff    	lea    eax,[ebp-0x238]
100080ea:	50                   	push   eax
100080eb:	e8 fc ff ff ff       	call   100080ec <NButton::paintHandler(NFrame::Graphics)+0x16e>	100080ec: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
100080f0:	83 c4 10             	add    esp,0x10
100080f3:	83 ec 08             	sub    esp,0x8
100080f6:	81 ec 88 00 00 00    	sub    esp,0x88
100080fc:	89 e0                	mov    eax,esp
100080fe:	89 c3                	mov    ebx,eax
10008100:	8d 85 c8 fd ff ff    	lea    eax,[ebp-0x238]
10008106:	ba 22 00 00 00       	mov    edx,0x22
1000810b:	89 df                	mov    edi,ebx
1000810d:	89 c6                	mov    esi,eax
1000810f:	89 d1                	mov    ecx,edx
10008111:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008113:	e8 fc ff ff ff       	call   10008114 <NButton::paintHandler(NFrame::Graphics)+0x196>	10008114: R_386_PC32	getFontHandle(FontStyle)
10008118:	81 c4 90 00 00 00    	add    esp,0x90
1000811e:	83 ec 08             	sub    esp,0x8
10008121:	50                   	push   eax
10008122:	6a 00                	push   0x0
10008124:	68 ac 8d 00 10       	push   0x10008dac	10008125: R_386_32	.text
10008129:	6a 32                	push   0x32
1000812b:	6a 00                	push   0x0
1000812d:	83 ec 20             	sub    esp,0x20
10008130:	89 e0                	mov    eax,esp
10008132:	89 c3                	mov    ebx,eax
10008134:	8d 45 0c             	lea    eax,[ebp+0xc]
10008137:	ba 08 00 00 00       	mov    edx,0x8
1000813c:	89 df                	mov    edi,ebx
1000813e:	89 c6                	mov    esi,eax
10008140:	89 d1                	mov    ecx,edx
10008142:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008144:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
1000814a:	e8 fc ff ff ff       	call   1000814b <NButton::paintHandler(NFrame::Graphics)+0x1cd>	1000814b: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
1000814f:	83 c4 40             	add    esp,0x40
10008152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008155:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
1000815b:	6a 00                	push   0x0
1000815d:	6a 0c                	push   0xc
1000815f:	68 9a 8c 00 10       	push   0x10008c9a	10008160: R_386_32	.text
10008164:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
1000816a:	50                   	push   eax
1000816b:	e8 fc ff ff ff       	call   1000816c <NButton::paintHandler(NFrame::Graphics)+0x1ee>	1000816c: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10008170:	83 c4 10             	add    esp,0x10
10008173:	83 ec 08             	sub    esp,0x8
10008176:	81 ec 88 00 00 00    	sub    esp,0x88
1000817c:	89 e0                	mov    eax,esp
1000817e:	89 c3                	mov    ebx,eax
10008180:	8d 85 50 fe ff ff    	lea    eax,[ebp-0x1b0]
10008186:	ba 22 00 00 00       	mov    edx,0x22
1000818b:	89 df                	mov    edi,ebx
1000818d:	89 c6                	mov    esi,eax
1000818f:	89 d1                	mov    ecx,edx
10008191:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008193:	e8 fc ff ff ff       	call   10008194 <NButton::paintHandler(NFrame::Graphics)+0x216>	10008194: R_386_PC32	getFontHandle(FontStyle)
10008198:	81 c4 90 00 00 00    	add    esp,0x90
1000819e:	83 ec 08             	sub    esp,0x8
100081a1:	50                   	push   eax
100081a2:	6a 00                	push   0x0
100081a4:	68 e8 8d 00 10       	push   0x10008de8	100081a5: R_386_32	.text
100081a9:	6a 4b                	push   0x4b
100081ab:	6a 00                	push   0x0
100081ad:	83 ec 20             	sub    esp,0x20
100081b0:	89 e0                	mov    eax,esp
100081b2:	89 c3                	mov    ebx,eax
100081b4:	8d 45 0c             	lea    eax,[ebp+0xc]
100081b7:	ba 08 00 00 00       	mov    edx,0x8
100081bc:	89 df                	mov    edi,ebx
100081be:	89 c6                	mov    esi,eax
100081c0:	89 d1                	mov    ecx,edx
100081c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100081c4:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100081ca:	e8 fc ff ff ff       	call   100081cb <NButton::paintHandler(NFrame::Graphics)+0x24d>	100081cb: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100081cf:	83 c4 40             	add    esp,0x40
100081d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100081d5:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
100081db:	6a 00                	push   0x0
100081dd:	6a 10                	push   0x10
100081df:	68 9a 8c 00 10       	push   0x10008c9a	100081e0: R_386_32	.text
100081e4:	8d 85 d8 fe ff ff    	lea    eax,[ebp-0x128]
100081ea:	50                   	push   eax
100081eb:	e8 fc ff ff ff       	call   100081ec <NButton::paintHandler(NFrame::Graphics)+0x26e>	100081ec: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
100081f0:	83 c4 10             	add    esp,0x10
100081f3:	83 ec 08             	sub    esp,0x8
100081f6:	81 ec 88 00 00 00    	sub    esp,0x88
100081fc:	89 e0                	mov    eax,esp
100081fe:	89 c3                	mov    ebx,eax
10008200:	8d 85 d8 fe ff ff    	lea    eax,[ebp-0x128]
10008206:	ba 22 00 00 00       	mov    edx,0x22
1000820b:	89 df                	mov    edi,ebx
1000820d:	89 c6                	mov    esi,eax
1000820f:	89 d1                	mov    ecx,edx
10008211:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008213:	e8 fc ff ff ff       	call   10008214 <NButton::paintHandler(NFrame::Graphics)+0x296>	10008214: R_386_PC32	getFontHandle(FontStyle)
10008218:	81 c4 90 00 00 00    	add    esp,0x90
1000821e:	83 ec 08             	sub    esp,0x8
10008221:	50                   	push   eax
10008222:	6a 00                	push   0x0
10008224:	68 a0 8c 00 10       	push   0x10008ca0	10008225: R_386_32	.text
10008229:	6a 64                	push   0x64
1000822b:	6a 00                	push   0x0
1000822d:	83 ec 20             	sub    esp,0x20
10008230:	89 e0                	mov    eax,esp
10008232:	89 c3                	mov    ebx,eax
10008234:	8d 45 0c             	lea    eax,[ebp+0xc]
10008237:	ba 08 00 00 00       	mov    edx,0x8
1000823c:	89 df                	mov    edi,ebx
1000823e:	89 c6                	mov    esi,eax
10008240:	89 d1                	mov    ecx,edx
10008242:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008244:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
1000824a:	e8 fc ff ff ff       	call   1000824b <NButton::paintHandler(NFrame::Graphics)+0x2cd>	1000824b: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
1000824f:	83 c4 40             	add    esp,0x40
10008252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008255:	89 85 b4 fc ff ff    	mov    DWORD PTR [ebp-0x34c],eax
1000825b:	6a 00                	push   0x0
1000825d:	6a 18                	push   0x18
1000825f:	68 9a 8c 00 10       	push   0x10008c9a	10008260: R_386_32	.text
10008264:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
1000826a:	50                   	push   eax
1000826b:	e8 fc ff ff ff       	call   1000826c <NButton::paintHandler(NFrame::Graphics)+0x2ee>	1000826c: R_386_PC32	FontStyle::FontStyle(char const*, int, int)
10008270:	83 c4 10             	add    esp,0x10
10008273:	83 ec 08             	sub    esp,0x8
10008276:	81 ec 88 00 00 00    	sub    esp,0x88
1000827c:	89 e0                	mov    eax,esp
1000827e:	89 c3                	mov    ebx,eax
10008280:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
10008286:	ba 22 00 00 00       	mov    edx,0x22
1000828b:	89 df                	mov    edi,ebx
1000828d:	89 c6                	mov    esi,eax
1000828f:	89 d1                	mov    ecx,edx
10008291:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008293:	e8 fc ff ff ff       	call   10008294 <NButton::paintHandler(NFrame::Graphics)+0x316>	10008294: R_386_PC32	getFontHandle(FontStyle)
10008298:	81 c4 90 00 00 00    	add    esp,0x90
1000829e:	83 ec 08             	sub    esp,0x8
100082a1:	50                   	push   eax
100082a2:	6a 00                	push   0x0
100082a4:	68 a0 8c 00 10       	push   0x10008ca0	100082a5: R_386_32	.text
100082a9:	68 82 00 00 00       	push   0x82
100082ae:	6a 00                	push   0x0
100082b0:	83 ec 20             	sub    esp,0x20
100082b3:	89 e0                	mov    eax,esp
100082b5:	89 c3                	mov    ebx,eax
100082b7:	8d 45 0c             	lea    eax,[ebp+0xc]
100082ba:	ba 08 00 00 00       	mov    edx,0x8
100082bf:	89 df                	mov    edi,ebx
100082c1:	89 c6                	mov    esi,eax
100082c3:	89 d1                	mov    ecx,edx
100082c5:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100082c7:	ff b5 b4 fc ff ff    	push   DWORD PTR [ebp-0x34c]
100082cd:	e8 fc ff ff ff       	call   100082ce <NButton::paintHandler(NFrame::Graphics)+0x350>	100082ce: R_386_PC32	NFrame::paintText(NFrame::Graphics, int, int, char const*, unsigned int, int)
100082d2:	83 c4 40             	add    esp,0x40
100082d5:	90                   	nop
100082d6:	8d 65 f4             	lea    esp,[ebp-0xc]
100082d9:	5b                   	pop    ebx
100082da:	5e                   	pop    esi
100082db:	5f                   	pop    edi
100082dc:	5d                   	pop    ebp
100082dd:	c3                   	ret    

100082de <LinkedList2<NFrame*>::LinkedList2()>:
100082de:	55                   	push   ebp
100082df:	89 e5                	mov    ebp,esp
100082e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100082e4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100082ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100082ed:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
100082f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100082f7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100082fe:	90                   	nop
100082ff:	5d                   	pop    ebp
10008300:	c3                   	ret    
10008301:	90                   	nop

10008302 <LinkedList2<NFrame*>::prependNode(NFrame*)>:
10008302:	55                   	push   ebp
10008303:	89 e5                	mov    ebp,esp
10008305:	83 ec 18             	sub    esp,0x18
10008308:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
1000830f:	83 ec 0c             	sub    esp,0xc
10008312:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
10008315:	e8 fc ff ff ff       	call   10008316 <LinkedList2<NFrame*>::prependNode(NFrame*)+0x14>	10008316: R_386_PC32	malloc
1000831a:	83 c4 10             	add    esp,0x10
1000831d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10008320:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10008323:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
10008326:	89 10                	mov    DWORD PTR [eax],edx
10008328:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000832b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
1000832e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10008331:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10008334:	83 ec 0c             	sub    esp,0xc
10008337:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000833a:	e8 fc ff ff ff       	call   1000833b <LinkedList2<NFrame*>::prependNode(NFrame*)+0x39>	1000833b: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
1000833f:	83 c4 10             	add    esp,0x10
10008342:	84 c0                	test   al,al
10008344:	74 09                	je     1000834f <LinkedList2<NFrame*>::prependNode(NFrame*)+0x4d>
10008346:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008349:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000834c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
1000834f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008352:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
10008355:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10008358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000835b:	8b 00                	mov    eax,DWORD PTR [eax]
1000835d:	8d 50 01             	lea    edx,[eax+0x1]
10008360:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008363:	89 10                	mov    DWORD PTR [eax],edx
10008365:	90                   	nop
10008366:	c9                   	leave  
10008367:	c3                   	ret    

10008368 <LinkedList2<NFrame*>::isEmpty()>:
10008368:	55                   	push   ebp
10008369:	89 e5                	mov    ebp,esp
1000836b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000836e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008371:	85 c0                	test   eax,eax
10008373:	0f 94 c0             	sete   al
10008376:	5d                   	pop    ebp
10008377:	c3                   	ret    

10008378 <LinkedList2<Font*>::LinkedList2()>:
10008378:	55                   	push   ebp
10008379:	89 e5                	mov    ebp,esp
1000837b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000837e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10008384:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008387:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
1000838e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008391:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10008398:	90                   	nop
10008399:	5d                   	pop    ebp
1000839a:	c3                   	ret    
1000839b:	90                   	nop

1000839c <LinkedList2<Font*>::length()>:
1000839c:	55                   	push   ebp
1000839d:	89 e5                	mov    ebp,esp
1000839f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083a2:	8b 00                	mov    eax,DWORD PTR [eax]
100083a4:	5d                   	pop    ebp
100083a5:	c3                   	ret    

100083a6 <LinkedList2<Font*>::appendNode(Font*)>:
100083a6:	55                   	push   ebp
100083a7:	89 e5                	mov    ebp,esp
100083a9:	83 ec 18             	sub    esp,0x18
100083ac:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
100083b3:	83 ec 0c             	sub    esp,0xc
100083b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100083b9:	e8 fc ff ff ff       	call   100083ba <LinkedList2<Font*>::appendNode(Font*)+0x14>	100083ba: R_386_PC32	LinkedList2<Font*>::isEmpty()
100083be:	83 c4 10             	add    esp,0x10
100083c1:	84 c0                	test   al,al
100083c3:	74 23                	je     100083e8 <LinkedList2<Font*>::appendNode(Font*)+0x42>
100083c5:	c7 45 f0 08 00 00 00 	mov    DWORD PTR [ebp-0x10],0x8
100083cc:	83 ec 0c             	sub    esp,0xc
100083cf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
100083d2:	e8 fc ff ff ff       	call   100083d3 <LinkedList2<Font*>::appendNode(Font*)+0x2d>	100083d3: R_386_PC32	malloc
100083d7:	83 c4 10             	add    esp,0x10
100083da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100083dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083e0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
100083e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
100083e6:	eb 2f                	jmp    10008417 <LinkedList2<Font*>::appendNode(Font*)+0x71>
100083e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100083eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
100083ee:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
100083f1:	c7 45 ec 08 00 00 00 	mov    DWORD PTR [ebp-0x14],0x8
100083f8:	83 ec 0c             	sub    esp,0xc
100083fb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
100083fe:	e8 fc ff ff ff       	call   100083ff <LinkedList2<Font*>::appendNode(Font*)+0x59>	100083ff: R_386_PC32	malloc
10008403:	83 c4 10             	add    esp,0x10
10008406:	89 c2                	mov    edx,eax
10008408:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000840b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000840e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10008411:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008414:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
10008417:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
1000841a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000841d:	89 10                	mov    DWORD PTR [eax],edx
1000841f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
10008422:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10008429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000842c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
1000842f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10008432:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008435:	8b 00                	mov    eax,DWORD PTR [eax]
10008437:	8d 50 01             	lea    edx,[eax+0x1]
1000843a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000843d:	89 10                	mov    DWORD PTR [eax],edx
1000843f:	90                   	nop
10008440:	c9                   	leave  
10008441:	c3                   	ret    

10008442 <LinkedList2<Font*>::isEmpty()>:
10008442:	55                   	push   ebp
10008443:	89 e5                	mov    ebp,esp
10008445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008448:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
1000844b:	85 c0                	test   eax,eax
1000844d:	0f 94 c0             	sete   al
10008450:	5d                   	pop    ebp
10008451:	c3                   	ret    

10008452 <NFrame::invalidateRectangularBoundingBox()>:
10008452:	55                   	push   ebp
10008453:	89 e5                	mov    ebp,esp
10008455:	57                   	push   edi
10008456:	56                   	push   esi
10008457:	53                   	push   ebx
10008458:	83 ec 2c             	sub    esp,0x2c
1000845b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000845e:	8b 78 1c             	mov    edi,DWORD PTR [eax+0x1c]
10008461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008464:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
10008467:	83 ec 0c             	sub    esp,0xc
1000846a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000846d:	e8 fc ff ff ff       	call   1000846e <NFrame::invalidateRectangularBoundingBox()+0x1c>	1000846e: R_386_PC32	NFrame::getAbsY()
10008472:	83 c4 10             	add    esp,0x10
10008475:	89 c3                	mov    ebx,eax
10008477:	83 ec 0c             	sub    esp,0xc
1000847a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000847d:	e8 fc ff ff ff       	call   1000847e <NFrame::invalidateRectangularBoundingBox()+0x2c>	1000847e: R_386_PC32	NFrame::getAbsX()
10008482:	83 c4 10             	add    esp,0x10
10008485:	89 c2                	mov    edx,eax
10008487:	8d 45 cc             	lea    eax,[ebp-0x34]
1000848a:	83 ec 0c             	sub    esp,0xc
1000848d:	57                   	push   edi
1000848e:	56                   	push   esi
1000848f:	53                   	push   ebx
10008490:	52                   	push   edx
10008491:	50                   	push   eax
10008492:	e8 fc ff ff ff       	call   10008493 <NFrame::invalidateRectangularBoundingBox()+0x41>	10008493: R_386_PC32	createRectangleRegion(int, int, int, int)
10008497:	83 c4 1c             	add    esp,0x1c
1000849a:	83 ec 1c             	sub    esp,0x1c
1000849d:	89 e0                	mov    eax,esp
1000849f:	89 c3                	mov    ebx,eax
100084a1:	8d 45 cc             	lea    eax,[ebp-0x34]
100084a4:	ba 07 00 00 00       	mov    edx,0x7
100084a9:	89 df                	mov    edi,ebx
100084ab:	89 c6                	mov    esi,eax
100084ad:	89 d1                	mov    ecx,edx
100084af:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100084b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100084b4:	e8 fc ff ff ff       	call   100084b5 <NFrame::invalidateRectangularBoundingBox()+0x63>	100084b5: R_386_PC32	NFrame::markRegionAsDirty(Region)
100084b9:	83 c4 20             	add    esp,0x20
100084bc:	90                   	nop
100084bd:	8d 65 f4             	lea    esp,[ebp-0xc]
100084c0:	5b                   	pop    ebx
100084c1:	5e                   	pop    esi
100084c2:	5f                   	pop    edi
100084c3:	5d                   	pop    ebp
100084c4:	c3                   	ret    
100084c5:	90                   	nop

100084c6 <NFrame::raiseChild(NFrame*)>:
100084c6:	55                   	push   ebp
100084c7:	89 e5                	mov    ebp,esp
100084c9:	83 ec 08             	sub    esp,0x8
100084cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100084cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
100084d2:	85 c0                	test   eax,eax
100084d4:	74 0c                	je     100084e2 <NFrame::raiseChild(NFrame*)+0x1c>
100084d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100084d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
100084dc:	8b 00                	mov    eax,DWORD PTR [eax]
100084de:	85 c0                	test   eax,eax
100084e0:	75 04                	jne    100084e6 <NFrame::raiseChild(NFrame*)+0x20>
100084e2:	b0 00                	mov    al,0x0
100084e4:	eb 39                	jmp    1000851f <NFrame::raiseChild(NFrame*)+0x59>
100084e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100084e9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
100084ec:	8b 00                	mov    eax,DWORD PTR [eax]
100084ee:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100084f1:	75 04                	jne    100084f7 <NFrame::raiseChild(NFrame*)+0x31>
100084f3:	b0 00                	mov    al,0x0
100084f5:	eb 28                	jmp    1000851f <NFrame::raiseChild(NFrame*)+0x59>
100084f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100084fa:	83 c0 04             	add    eax,0x4
100084fd:	83 ec 08             	sub    esp,0x8
10008500:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008503:	50                   	push   eax
10008504:	e8 fc ff ff ff       	call   10008505 <NFrame::raiseChild(NFrame*)+0x3f>	10008505: R_386_PC32	LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)
10008509:	83 c4 10             	add    esp,0x10
1000850c:	83 ec 08             	sub    esp,0x8
1000850f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008512:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008515:	e8 fc ff ff ff       	call   10008516 <NFrame::raiseChild(NFrame*)+0x50>	10008516: R_386_PC32	NFrame::addChild(NFrame*)
1000851a:	83 c4 10             	add    esp,0x10
1000851d:	b0 01                	mov    al,0x1
1000851f:	c9                   	leave  
10008520:	c3                   	ret    
10008521:	90                   	nop

10008522 <NFrame::getPixelOwner(Video*, int, int, bool, Region)>:
10008522:	55                   	push   ebp
10008523:	89 e5                	mov    ebp,esp
10008525:	57                   	push   edi
10008526:	56                   	push   esi
10008527:	53                   	push   ebx
10008528:	83 ec 4c             	sub    esp,0x4c
1000852b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000852e:	88 45 b4             	mov    BYTE PTR [ebp-0x4c],al
10008531:	8d 45 c0             	lea    eax,[ebp-0x40]
10008534:	83 ec 08             	sub    esp,0x8
10008537:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000853a:	50                   	push   eax
1000853b:	e8 fc ff ff ff       	call   1000853c <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x1a>	1000853c: R_386_PC32	NFrame::getDrawRegion()
10008540:	83 c4 0c             	add    esp,0xc
10008543:	83 ec 0c             	sub    esp,0xc
10008546:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008549:	e8 fc ff ff ff       	call   1000854a <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x28>	1000854a: R_386_PC32	NFrame::getAbsX()
1000854e:	83 c4 10             	add    esp,0x10
10008551:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
10008554:	83 ec 0c             	sub    esp,0xc
10008557:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000855a:	e8 fc ff ff ff       	call   1000855b <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x39>	1000855b: R_386_PC32	NFrame::getAbsY()
1000855f:	83 c4 10             	add    esp,0x10
10008562:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
10008565:	83 ec 0c             	sub    esp,0xc
10008568:	ff 75 14             	push   DWORD PTR [ebp+0x14]
1000856b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
1000856e:	83 ec 1c             	sub    esp,0x1c
10008571:	89 e0                	mov    eax,esp
10008573:	89 c3                	mov    ebx,eax
10008575:	8d 45 c0             	lea    eax,[ebp-0x40]
10008578:	ba 07 00 00 00       	mov    edx,0x7
1000857d:	89 df                	mov    edi,ebx
1000857f:	89 c6                	mov    esi,eax
10008581:	89 d1                	mov    ecx,edx
10008583:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10008585:	e8 fc ff ff ff       	call   10008586 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x64>	10008586: R_386_PC32	isPointInRegion(Region, int, int)
1000858a:	83 c4 30             	add    esp,0x30
1000858d:	84 c0                	test   al,al
1000858f:	74 17                	je     100085a8 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x86>
10008591:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
10008594:	83 ec 0c             	sub    esp,0xc
10008597:	50                   	push   eax
10008598:	e8 fc ff ff ff       	call   10008599 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x77>	10008599: R_386_PC32	free
1000859d:	83 c4 10             	add    esp,0x10
100085a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100085a3:	e9 a8 00 00 00       	jmp    10008650 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x12e>
100085a8:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
100085ab:	83 ec 0c             	sub    esp,0xc
100085ae:	50                   	push   eax
100085af:	e8 fc ff ff ff       	call   100085b0 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x8e>	100085b0: R_386_PC32	free
100085b4:	83 c4 10             	add    esp,0x10
100085b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100085ba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
100085bd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100085c0:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
100085c4:	0f 84 81 00 00 00    	je     1000864b <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x129>
100085ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100085cd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
100085d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
100085d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100085d6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
100085d9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100085dc:	8b 00                	mov    eax,DWORD PTR [eax]
100085de:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
100085e1:	84 c0                	test   al,al
100085e3:	75 60                	jne    10008645 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x123>
100085e5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
100085e8:	8b 00                	mov    eax,DWORD PTR [eax]
100085ea:	89 45 b0             	mov    DWORD PTR [ebp-0x50],eax
100085ed:	0f b6 55 b4          	movzx  edx,BYTE PTR [ebp-0x4c]
100085f1:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
100085f4:	83 ec 1c             	sub    esp,0x1c
100085f7:	89 e0                	mov    eax,esp
100085f9:	89 c3                	mov    ebx,eax
100085fb:	8d 45 1c             	lea    eax,[ebp+0x1c]
100085fe:	ba 07 00 00 00       	mov    edx,0x7
10008603:	89 df                	mov    edi,ebx
10008605:	89 c6                	mov    esi,eax
10008607:	89 d1                	mov    ecx,edx
10008609:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000860b:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
1000860e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
10008611:	ff 75 10             	push   DWORD PTR [ebp+0x10]
10008614:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008617:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
1000861a:	e8 fc ff ff ff       	call   1000861b <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0xf9>	1000861b: R_386_PC32	NFrame::getPixelOwner(Video*, int, int, bool, Region)
1000861f:	83 c4 30             	add    esp,0x30
10008622:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
10008625:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
10008629:	74 95                	je     100085c0 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x9e>
1000862b:	80 7d b4 00          	cmp    BYTE PTR [ebp-0x4c],0x0
1000862f:	74 0f                	je     10008640 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x11e>
10008631:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008634:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10008637:	85 c0                	test   eax,eax
10008639:	74 05                	je     10008640 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x11e>
1000863b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000863e:	eb 10                	jmp    10008650 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x12e>
10008640:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
10008643:	eb 0b                	jmp    10008650 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x12e>
10008645:	90                   	nop
10008646:	e9 75 ff ff ff       	jmp    100085c0 <NFrame::getPixelOwner(Video*, int, int, bool, Region)+0x9e>
1000864b:	b8 00 00 00 00       	mov    eax,0x0
10008650:	8d 65 f4             	lea    esp,[ebp-0xc]
10008653:	5b                   	pop    ebx
10008654:	5e                   	pop    esi
10008655:	5f                   	pop    edi
10008656:	5d                   	pop    ebp
10008657:	c3                   	ret    

10008658 <NFrame::unhide()>:
10008658:	55                   	push   ebp
10008659:	89 e5                	mov    ebp,esp
1000865b:	83 ec 08             	sub    esp,0x8
1000865e:	83 ec 08             	sub    esp,0x8
10008661:	6a 00                	push   0x0
10008663:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008666:	e8 fc ff ff ff       	call   10008667 <NFrame::unhide()+0xf>	10008667: R_386_PC32	NFrame::hide(bool)
1000866b:	83 c4 10             	add    esp,0x10
1000866e:	90                   	nop
1000866f:	c9                   	leave  
10008670:	c3                   	ret    
10008671:	90                   	nop

10008672 <NFrame::hide(bool)>:
10008672:	55                   	push   ebp
10008673:	89 e5                	mov    ebp,esp
10008675:	83 ec 18             	sub    esp,0x18
10008678:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
1000867b:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
1000867e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008681:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10008684:	38 45 f4             	cmp    BYTE PTR [ebp-0xc],al
10008687:	74 31                	je     100086ba <NFrame::hide(bool)+0x48>
10008689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000868c:	8a 55 f4             	mov    dl,BYTE PTR [ebp-0xc]
1000868f:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
10008692:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008695:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10008698:	84 c0                	test   al,al
1000869a:	74 10                	je     100086ac <NFrame::hide(bool)+0x3a>
1000869c:	83 ec 0c             	sub    esp,0xc
1000869f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100086a2:	e8 fc ff ff ff       	call   100086a3 <NFrame::hide(bool)+0x31>	100086a3: R_386_PC32	NFrame::invalidate()
100086a7:	83 c4 10             	add    esp,0x10
100086aa:	eb 0e                	jmp    100086ba <NFrame::hide(bool)+0x48>
100086ac:	83 ec 0c             	sub    esp,0xc
100086af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100086b2:	e8 fc ff ff ff       	call   100086b3 <NFrame::hide(bool)+0x41>	100086b3: R_386_PC32	NFrame::invalidateRectangularBoundingBox()
100086b7:	83 c4 10             	add    esp,0x10
100086ba:	90                   	nop
100086bb:	c9                   	leave  
100086bc:	c3                   	ret    
100086bd:	90                   	nop

100086be <NFrame::_getRegion()>:
100086be:	55                   	push   ebp
100086bf:	89 e5                	mov    ebp,esp
100086c1:	57                   	push   edi
100086c2:	56                   	push   esi
100086c3:	53                   	push   ebx
100086c4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
100086c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
100086ca:	8d 58 14             	lea    ebx,[eax+0x14]
100086cd:	b8 07 00 00 00       	mov    eax,0x7
100086d2:	89 d7                	mov    edi,edx
100086d4:	89 de                	mov    esi,ebx
100086d6:	89 c1                	mov    ecx,eax
100086d8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100086da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100086dd:	5b                   	pop    ebx
100086de:	5e                   	pop    esi
100086df:	5f                   	pop    edi
100086e0:	5d                   	pop    ebp
100086e1:	c2 04 00             	ret    0x4

100086e4 <NFrame::getWidth()>:
100086e4:	55                   	push   ebp
100086e5:	89 e5                	mov    ebp,esp
100086e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100086ea:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
100086ed:	5d                   	pop    ebp
100086ee:	c3                   	ret    
100086ef:	90                   	nop

100086f0 <NFrame::getHeight()>:
100086f0:	55                   	push   ebp
100086f1:	89 e5                	mov    ebp,esp
100086f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100086f6:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
100086f9:	5d                   	pop    ebp
100086fa:	c3                   	ret    
100086fb:	90                   	nop

100086fc <NFrame::startDragState()>:
100086fc:	55                   	push   ebp
100086fd:	89 e5                	mov    ebp,esp
100086ff:	57                   	push   edi
10008700:	56                   	push   esi
10008701:	53                   	push   ebx
10008702:	83 ec 2c             	sub    esp,0x2c
10008705:	83 ec 08             	sub    esp,0x8
10008708:	6a 01                	push   0x1
1000870a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000870d:	e8 fc ff ff ff       	call   1000870e <NFrame::startDragState()+0x12>	1000870e: R_386_PC32	NFrame::hide(bool)
10008712:	83 c4 10             	add    esp,0x10
10008715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008718:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
1000871b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000871e:	8b 58 18             	mov    ebx,DWORD PTR [eax+0x18]
10008721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008724:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
10008727:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000872a:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
1000872d:	8d 45 cc             	lea    eax,[ebp-0x34]
10008730:	83 ec 08             	sub    esp,0x8
10008733:	6a 02                	push   0x2
10008735:	56                   	push   esi
10008736:	53                   	push   ebx
10008737:	51                   	push   ecx
10008738:	52                   	push   edx
10008739:	50                   	push   eax
1000873a:	e8 fc ff ff ff       	call   1000873b <NFrame::startDragState()+0x3f>	1000873b: R_386_PC32	createAntRegion(int, int, int, int, int)
1000873f:	83 c4 1c             	add    esp,0x1c
10008742:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008745:	8d 58 30             	lea    ebx,[eax+0x30]
10008748:	8d 45 cc             	lea    eax,[ebp-0x34]
1000874b:	ba 19 00 00 00       	mov    edx,0x19
10008750:	89 df                	mov    edi,ebx
10008752:	89 c6                	mov    esi,eax
10008754:	89 d1                	mov    ecx,edx
10008756:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10008758:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000875b:	c6 40 69 01          	mov    BYTE PTR [eax+0x69],0x1
1000875f:	90                   	nop
10008760:	8d 65 f4             	lea    esp,[ebp-0xc]
10008763:	5b                   	pop    ebx
10008764:	5e                   	pop    esi
10008765:	5f                   	pop    edi
10008766:	5d                   	pop    ebp
10008767:	c3                   	ret    

10008768 <NFrame::endDragState()>:
10008768:	55                   	push   ebp
10008769:	89 e5                	mov    ebp,esp
1000876b:	83 ec 08             	sub    esp,0x8
1000876e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008771:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
10008775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008778:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
1000877b:	83 ec 0c             	sub    esp,0xc
1000877e:	50                   	push   eax
1000877f:	e8 fc ff ff ff       	call   10008780 <NFrame::endDragState()+0x18>	10008780: R_386_PC32	free
10008784:	83 c4 10             	add    esp,0x10
10008787:	83 ec 0c             	sub    esp,0xc
1000878a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000878d:	e8 fc ff ff ff       	call   1000878e <NFrame::endDragState()+0x26>	1000878e: R_386_PC32	NFrame::unhide()
10008792:	83 c4 10             	add    esp,0x10
10008795:	90                   	nop
10008796:	c9                   	leave  
10008797:	c3                   	ret    

10008798 <NFrame::setSize(int, int)>:
10008798:	55                   	push   ebp
10008799:	89 e5                	mov    ebp,esp
1000879b:	83 ec 08             	sub    esp,0x8
1000879e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
100087a2:	7f 07                	jg     100087ab <NFrame::setSize(int, int)+0x13>
100087a4:	c7 45 0c 01 00 00 00 	mov    DWORD PTR [ebp+0xc],0x1
100087ab:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
100087af:	7f 07                	jg     100087b8 <NFrame::setSize(int, int)+0x20>
100087b1:	c7 45 10 01 00 00 00 	mov    DWORD PTR [ebp+0x10],0x1
100087b8:	83 ec 0c             	sub    esp,0xc
100087bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100087be:	e8 fc ff ff ff       	call   100087bf <NFrame::setSize(int, int)+0x27>	100087bf: R_386_PC32	NFrame::hasTitleBar()
100087c3:	83 c4 10             	add    esp,0x10
100087c6:	84 c0                	test   al,al
100087c8:	74 1a                	je     100087e4 <NFrame::setSize(int, int)+0x4c>
100087ca:	83 7d 0c 4a          	cmp    DWORD PTR [ebp+0xc],0x4a
100087ce:	7f 07                	jg     100087d7 <NFrame::setSize(int, int)+0x3f>
100087d0:	c7 45 0c 4b 00 00 00 	mov    DWORD PTR [ebp+0xc],0x4b
100087d7:	83 7d 10 27          	cmp    DWORD PTR [ebp+0x10],0x27
100087db:	7f 07                	jg     100087e4 <NFrame::setSize(int, int)+0x4c>
100087dd:	c7 45 10 28 00 00 00 	mov    DWORD PTR [ebp+0x10],0x28
100087e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100087e7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
100087ea:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
100087ed:	75 0b                	jne    100087fa <NFrame::setSize(int, int)+0x62>
100087ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100087f2:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
100087f5:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
100087f8:	74 4b                	je     10008845 <NFrame::setSize(int, int)+0xad>
100087fa:	83 ec 0c             	sub    esp,0xc
100087fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008800:	e8 fc ff ff ff       	call   10008801 <NFrame::setSize(int, int)+0x69>	10008801: R_386_PC32	NFrame::tryInvalidate()
10008805:	83 c4 10             	add    esp,0x10
10008808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000880b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
1000880e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
10008811:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008814:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
10008817:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
1000881a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000881d:	8b 00                	mov    eax,DWORD PTR [eax]
1000881f:	83 c0 0c             	add    eax,0xc
10008822:	8b 00                	mov    eax,DWORD PTR [eax]
10008824:	83 ec 0c             	sub    esp,0xc
10008827:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000882a:	ff d0                	call   eax
1000882c:	83 c4 10             	add    esp,0x10
1000882f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008832:	8b 00                	mov    eax,DWORD PTR [eax]
10008834:	8b 00                	mov    eax,DWORD PTR [eax]
10008836:	83 ec 0c             	sub    esp,0xc
10008839:	ff 75 08             	push   DWORD PTR [ebp+0x8]
1000883c:	ff d0                	call   eax
1000883e:	83 c4 10             	add    esp,0x10
10008841:	b0 01                	mov    al,0x1
10008843:	eb 02                	jmp    10008847 <NFrame::setSize(int, int)+0xaf>
10008845:	b0 00                	mov    al,0x0
10008847:	c9                   	leave  
10008848:	c3                   	ret    
10008849:	90                   	nop

1000884a <NFrame::getX()>:
1000884a:	55                   	push   ebp
1000884b:	89 e5                	mov    ebp,esp
1000884d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008850:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10008853:	5d                   	pop    ebp
10008854:	c3                   	ret    
10008855:	90                   	nop

10008856 <NFrame::getY()>:
10008856:	55                   	push   ebp
10008857:	89 e5                	mov    ebp,esp
10008859:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000885c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
1000885f:	5d                   	pop    ebp
10008860:	c3                   	ret    
10008861:	90                   	nop

10008862 <NFrame::setPosition(int, int)>:
10008862:	55                   	push   ebp
10008863:	89 e5                	mov    ebp,esp
10008865:	83 ec 08             	sub    esp,0x8
10008868:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000886b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
1000886e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10008871:	75 0b                	jne    1000887e <NFrame::setPosition(int, int)+0x1c>
10008873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008876:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10008879:	39 45 10             	cmp    DWORD PTR [ebp+0x10],eax
1000887c:	74 7b                	je     100088f9 <NFrame::setPosition(int, int)+0x97>
1000887e:	83 ec 0c             	sub    esp,0xc
10008881:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008884:	e8 fc ff ff ff       	call   10008885 <NFrame::setPosition(int, int)+0x23>	10008885: R_386_PC32	NFrame::tryInvalidate()
10008889:	83 c4 10             	add    esp,0x10
1000888c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000888f:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10008892:	84 c0                	test   al,al
10008894:	74 36                	je     100088cc <NFrame::setPosition(int, int)+0x6a>
10008896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008899:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
1000889c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000889f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
100088a2:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
100088a5:	29 c1                	sub    ecx,eax
100088a7:	89 c8                	mov    eax,ecx
100088a9:	01 c2                	add    edx,eax
100088ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088ae:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
100088b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088b4:	8b 50 44             	mov    edx,DWORD PTR [eax+0x44]
100088b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088ba:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
100088bd:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
100088c0:	29 c1                	sub    ecx,eax
100088c2:	89 c8                	mov    eax,ecx
100088c4:	01 c2                	add    edx,eax
100088c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088c9:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
100088cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088cf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
100088d2:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
100088d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088d8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
100088db:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
100088de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100088e1:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
100088e4:	83 f0 01             	xor    eax,0x1
100088e7:	84 c0                	test   al,al
100088e9:	74 0e                	je     100088f9 <NFrame::setPosition(int, int)+0x97>
100088eb:	83 ec 0c             	sub    esp,0xc
100088ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100088f1:	e8 fc ff ff ff       	call   100088f2 <NFrame::setPosition(int, int)+0x90>	100088f2: R_386_PC32	NFrame::tryInvalidate()
100088f6:	83 c4 10             	add    esp,0x10
100088f9:	90                   	nop
100088fa:	c9                   	leave  
100088fb:	c3                   	ret    

100088fc <NFrame::raise()>:
100088fc:	55                   	push   ebp
100088fd:	89 e5                	mov    ebp,esp
100088ff:	83 ec 18             	sub    esp,0x18
10008902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008905:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10008908:	85 c0                	test   eax,eax
1000890a:	74 2c                	je     10008938 <NFrame::raise()+0x3c>
1000890c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000890f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10008912:	83 ec 08             	sub    esp,0x8
10008915:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008918:	50                   	push   eax
10008919:	e8 fc ff ff ff       	call   1000891a <NFrame::raise()+0x1e>	1000891a: R_386_PC32	NFrame::raiseChild(NFrame*)
1000891e:	83 c4 10             	add    esp,0x10
10008921:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
10008924:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
10008928:	74 0e                	je     10008938 <NFrame::raise()+0x3c>
1000892a:	83 ec 0c             	sub    esp,0xc
1000892d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008930:	e8 fc ff ff ff       	call   10008931 <NFrame::raise()+0x35>	10008931: R_386_PC32	NFrame::invalidate()
10008935:	83 c4 10             	add    esp,0x10
10008938:	90                   	nop
10008939:	c9                   	leave  
1000893a:	c3                   	ret    
1000893b:	90                   	nop

1000893c <NFrame::isFullscreen()>:
1000893c:	55                   	push   ebp
1000893d:	89 e5                	mov    ebp,esp
1000893f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008942:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
10008945:	5d                   	pop    ebp
10008946:	c3                   	ret    
10008947:	90                   	nop

10008948 <NFrame::toggleFullscreen(Video*)>:
10008948:	55                   	push   ebp
10008949:	89 e5                	mov    ebp,esp
1000894b:	53                   	push   ebx
1000894c:	83 ec 04             	sub    esp,0x4
1000894f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008952:	8a 40 70             	mov    al,BYTE PTR [eax+0x70]
10008955:	84 c0                	test   al,al
10008957:	74 47                	je     100089a0 <NFrame::toggleFullscreen(Video*)+0x58>
10008959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000895c:	c6 40 70 00          	mov    BYTE PTR [eax+0x70],0x0
10008960:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008963:	8b 90 80 00 00 00    	mov    edx,DWORD PTR [eax+0x80]
10008969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
1000896c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
1000896f:	83 ec 04             	sub    esp,0x4
10008972:	52                   	push   edx
10008973:	50                   	push   eax
10008974:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008977:	e8 fc ff ff ff       	call   10008978 <NFrame::toggleFullscreen(Video*)+0x30>	10008978: R_386_PC32	NFrame::setSize(int, int)
1000897c:	83 c4 10             	add    esp,0x10
1000897f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008982:	8b 50 78             	mov    edx,DWORD PTR [eax+0x78]
10008985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008988:	8b 40 74             	mov    eax,DWORD PTR [eax+0x74]
1000898b:	83 ec 04             	sub    esp,0x4
1000898e:	52                   	push   edx
1000898f:	50                   	push   eax
10008990:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008993:	e8 fc ff ff ff       	call   10008994 <NFrame::toggleFullscreen(Video*)+0x4c>	10008994: R_386_PC32	NFrame::setPosition(int, int)
10008998:	83 c4 10             	add    esp,0x10
1000899b:	e9 88 00 00 00       	jmp    10008a28 <NFrame::toggleFullscreen(Video*)+0xe0>
100089a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089a3:	c6 40 70 01          	mov    BYTE PTR [eax+0x70],0x1
100089a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089aa:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
100089ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089b0:	89 50 74             	mov    DWORD PTR [eax+0x74],edx
100089b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089b6:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
100089b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089bc:	89 50 78             	mov    DWORD PTR [eax+0x78],edx
100089bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
100089c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089c8:	89 50 7c             	mov    DWORD PTR [eax+0x7c],edx
100089cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089ce:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
100089d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089d4:	89 90 80 00 00 00    	mov    DWORD PTR [eax+0x80],edx
100089da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089dd:	c6 40 68 01          	mov    BYTE PTR [eax+0x68],0x1
100089e1:	83 ec 04             	sub    esp,0x4
100089e4:	6a 00                	push   0x0
100089e6:	6a 00                	push   0x0
100089e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
100089eb:	e8 fc ff ff ff       	call   100089ec <NFrame::toggleFullscreen(Video*)+0xa4>	100089ec: R_386_PC32	NFrame::setPosition(int, int)
100089f0:	83 c4 10             	add    esp,0x10
100089f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
100089f6:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
100089fa:	83 ec 0c             	sub    esp,0xc
100089fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008a00:	e8 fc ff ff ff       	call   10008a01 <NFrame::toggleFullscreen(Video*)+0xb9>	10008a01: R_386_PC32	Video::getHeight()
10008a05:	83 c4 10             	add    esp,0x10
10008a08:	89 c3                	mov    ebx,eax
10008a0a:	83 ec 0c             	sub    esp,0xc
10008a0d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008a10:	e8 fc ff ff ff       	call   10008a11 <NFrame::toggleFullscreen(Video*)+0xc9>	10008a11: R_386_PC32	Video::getWidth()
10008a15:	83 c4 10             	add    esp,0x10
10008a18:	83 ec 04             	sub    esp,0x4
10008a1b:	53                   	push   ebx
10008a1c:	50                   	push   eax
10008a1d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008a20:	e8 fc ff ff ff       	call   10008a21 <NFrame::toggleFullscreen(Video*)+0xd9>	10008a21: R_386_PC32	NFrame::setSize(int, int)
10008a25:	83 c4 10             	add    esp,0x10
10008a28:	90                   	nop
10008a29:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
10008a2c:	c9                   	leave  
10008a2d:	c3                   	ret    

10008a2e <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)>:
10008a2e:	55                   	push   ebp
10008a2f:	89 e5                	mov    ebp,esp
10008a31:	83 ec 18             	sub    esp,0x18
10008a34:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
10008a3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008a41:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10008a44:	83 ec 0c             	sub    esp,0xc
10008a47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008a4a:	e8 fc ff ff ff       	call   10008a4b <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x1d>	10008a4b: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10008a4f:	83 c4 10             	add    esp,0x10
10008a52:	83 f0 01             	xor    eax,0x1
10008a55:	84 c0                	test   al,al
10008a57:	74 0e                	je     10008a67 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x39>
10008a59:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008a5c:	8b 00                	mov    eax,DWORD PTR [eax]
10008a5e:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10008a61:	75 04                	jne    10008a67 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x39>
10008a63:	b0 01                	mov    al,0x1
10008a65:	eb 02                	jmp    10008a69 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x3b>
10008a67:	b0 00                	mov    al,0x0
10008a69:	84 c0                	test   al,al
10008a6b:	74 30                	je     10008a9d <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x6f>
10008a6d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008a70:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10008a73:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008a76:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10008a79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008a7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10008a7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008a82:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008a85:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10008a88:	83 ec 08             	sub    esp,0x8
10008a8b:	6a 08                	push   0x8
10008a8d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10008a90:	e8 fc ff ff ff       	call   10008a91 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x63>	10008a91: R_386_PC32	operator delete(void*, unsigned long)
10008a95:	83 c4 10             	add    esp,0x10
10008a98:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10008a9b:	eb a7                	jmp    10008a44 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x16>
10008a9d:	83 ec 0c             	sub    esp,0xc
10008aa0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008aa3:	e8 fc ff ff ff       	call   10008aa4 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x76>	10008aa4: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10008aa8:	83 c4 10             	add    esp,0x10
10008aab:	83 f0 01             	xor    eax,0x1
10008aae:	84 c0                	test   al,al
10008ab0:	74 14                	je     10008ac6 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
10008ab2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
10008ab6:	74 0e                	je     10008ac6 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
10008ab8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008abb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008abe:	85 c0                	test   eax,eax
10008ac0:	74 04                	je     10008ac6 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x98>
10008ac2:	b0 01                	mov    al,0x1
10008ac4:	eb 02                	jmp    10008ac8 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x9a>
10008ac6:	b0 00                	mov    al,0x0
10008ac8:	84 c0                	test   al,al
10008aca:	74 59                	je     10008b25 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xf7>
10008acc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008acf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008ad2:	8b 00                	mov    eax,DWORD PTR [eax]
10008ad4:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
10008ad7:	75 3e                	jne    10008b17 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xe9>
10008ad9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008adc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008adf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
10008ae2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008ae5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008ae8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
10008aeb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008aee:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10008af1:	83 ec 08             	sub    esp,0x8
10008af4:	6a 08                	push   0x8
10008af6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
10008af9:	e8 fc ff ff ff       	call   10008afa <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xcc>	10008afa: R_386_PC32	operator delete(void*, unsigned long)
10008afe:	83 c4 10             	add    esp,0x10
10008b01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008b04:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008b07:	85 c0                	test   eax,eax
10008b09:	75 09                	jne    10008b14 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xe6>
10008b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008b0e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
10008b11:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
10008b14:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
10008b17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
10008b1a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10008b1d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
10008b20:	e9 78 ff ff ff       	jmp    10008a9d <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x6f>
10008b25:	83 ec 0c             	sub    esp,0xc
10008b28:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008b2b:	e8 fc ff ff ff       	call   10008b2c <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0xfe>	10008b2c: R_386_PC32	LinkedList2<NFrame*>::isEmpty()
10008b30:	83 c4 10             	add    esp,0x10
10008b33:	84 c0                	test   al,al
10008b35:	74 0a                	je     10008b41 <LinkedList2<NFrame*>::deleteNodesByValue(NFrame*)+0x113>
10008b37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008b3a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
10008b41:	90                   	nop
10008b42:	c9                   	leave  
10008b43:	c3                   	ret    

10008b44 <_GLOBAL__sub_I_mouseX>:
10008b44:	83 ec 18             	sub    esp,0x18
10008b47:	68 00 00 00 00       	push   0x0	10008b48: R_386_32	tightMouseRegionOld
10008b4c:	e8 fc ff ff ff       	call   10008b4d <_GLOBAL__sub_I_mouseX+0x9>	10008b4d: R_386_PC32	Region::Region()
10008b51:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0	10008b54: R_386_32	tightMouseRegionNew
10008b58:	e8 fc ff ff ff       	call   10008b59 <_GLOBAL__sub_I_mouseX+0x15>	10008b59: R_386_PC32	Region::Region()
10008b5d:	83 c4 1c             	add    esp,0x1c
10008b60:	c3                   	ret    
10008b61:	90                   	nop

10008b62 <NFrame::isHidden()>:
10008b62:	55                   	push   ebp
10008b63:	89 e5                	mov    ebp,esp
10008b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008b68:	8a 40 68             	mov    al,BYTE PTR [eax+0x68]
10008b6b:	5d                   	pop    ebp
10008b6c:	c3                   	ret    
10008b6d:	90                   	nop

10008b6e <NFrame::setWidth(int)>:
10008b6e:	55                   	push   ebp
10008b6f:	89 e5                	mov    ebp,esp
10008b71:	83 ec 08             	sub    esp,0x8
10008b74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008b77:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
10008b7a:	83 ec 04             	sub    esp,0x4
10008b7d:	50                   	push   eax
10008b7e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008b81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008b84:	e8 fc ff ff ff       	call   10008b85 <NFrame::setWidth(int)+0x17>	10008b85: R_386_PC32	NFrame::setSize(int, int)
10008b89:	83 c4 10             	add    esp,0x10
10008b8c:	90                   	nop
10008b8d:	c9                   	leave  
10008b8e:	c3                   	ret    
10008b8f:	90                   	nop

10008b90 <NFrame::setHeight(int)>:
10008b90:	55                   	push   ebp
10008b91:	89 e5                	mov    ebp,esp
10008b93:	83 ec 08             	sub    esp,0x8
10008b96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008b99:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
10008b9c:	83 ec 04             	sub    esp,0x4
10008b9f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008ba2:	50                   	push   eax
10008ba3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008ba6:	e8 fc ff ff ff       	call   10008ba7 <NFrame::setHeight(int)+0x17>	10008ba7: R_386_PC32	NFrame::setSize(int, int)
10008bab:	83 c4 10             	add    esp,0x10
10008bae:	90                   	nop
10008baf:	c9                   	leave  
10008bb0:	c3                   	ret    
10008bb1:	90                   	nop

10008bb2 <NFrame::setX(int)>:
10008bb2:	55                   	push   ebp
10008bb3:	89 e5                	mov    ebp,esp
10008bb5:	83 ec 08             	sub    esp,0x8
10008bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008bbb:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
10008bbe:	83 ec 04             	sub    esp,0x4
10008bc1:	50                   	push   eax
10008bc2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008bc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008bc8:	e8 fc ff ff ff       	call   10008bc9 <NFrame::setX(int)+0x17>	10008bc9: R_386_PC32	NFrame::setPosition(int, int)
10008bcd:	83 c4 10             	add    esp,0x10
10008bd0:	90                   	nop
10008bd1:	c9                   	leave  
10008bd2:	c3                   	ret    
10008bd3:	90                   	nop

10008bd4 <NFrame::setY(int)>:
10008bd4:	55                   	push   ebp
10008bd5:	89 e5                	mov    ebp,esp
10008bd7:	83 ec 08             	sub    esp,0x8
10008bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
10008bdd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
10008be0:	83 ec 04             	sub    esp,0x4
10008be3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
10008be6:	50                   	push   eax
10008be7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
10008bea:	e8 fc ff ff ff       	call   10008beb <NFrame::setY(int)+0x17>	10008beb: R_386_PC32	NFrame::setPosition(int, int)
10008bef:	83 c4 10             	add    esp,0x10
10008bf2:	90                   	nop
10008bf3:	c9                   	leave  
10008bf4:	c3                   	ret    
10008bf5:	66 90                	xchg   ax,ax
10008bf7:	90                   	nop

10008bf8 <PHYS_RAM_TABLE_SIZE>:
10008bf8:	13 05 00 00                                         ....

10008bfc <PHYS_HIGHEST_UNUSED_ADDRESS>:
10008bfc:	24 05 00 00                                         $...

10008c00 <PHYS_RAM_TABLE>:
10008c00:	00 06 00 00                                         ....

10008c04 <PHYS_DMA_MEMORY_1>:
10008c04:	00 00 01 00                                         ....

10008c08 <PHYS_PHYS_PAGE_BITMAP>:
10008c08:	00 00 02 00                                         ....

10008c0c <PHYS_VIRT_PAGE_BITMAP>:
10008c0c:	00 00 04 00                                         ....

10008c10 <PHYS_DMA_MEMORY_2>:
10008c10:	00 00 06 00                                         ....

10008c14 <PHYS_ALLOCED_VIRT_PAGES>:
10008c14:	00 00 10 00                                         ....

10008c18 <PHYS_KRNL_PAGE_DIRECTORY>:
10008c18:	00 10 00 00                                         ....

10008c1c <VIRT_KERNEL_BASE>:
10008c1c:	00 00 00 c0                                         ....

10008c20 <VIRT_LOW_MEGS>:
10008c20:	00 00 00 c2                                         ....

10008c24 <VIRT_CPU_SPECIFIC>:
10008c24:	00 00 40 c2                                         ..@.

10008c28 <VIRT_RECURSIVE_SPOT_1>:
10008c28:	00 00 80 c2                                         ....

10008c2c <VIRT_RECURSIVE_SPOT_2>:
10008c2c:	00 00 c0 c2                                         ....

10008c30 <VIRT_DMA_MEMORY_1>:
10008c30:	00 00 01 c2                                         ....

10008c34 <SIZE_DMA_MEMORY_1>:
10008c34:	00 00 01 00                                         ....

10008c38 <VIRT_KRNL_PAGE_DIRECTORY>:
10008c38:	00 10 00 c2                                         ....

10008c3c <VIRT_PHYS_PAGE_BITMAP>:
10008c3c:	00 00 02 c2                                         ....

10008c40 <SIZE_PHYS_PAGE_BITMAP>:
10008c40:	00 00 02 00                                         ....

10008c44 <VIRT_VIRT_PAGE_BITMAP>:
10008c44:	00 00 04 c2                                         ....

10008c48 <SIZE_VIRT_PAGE_BITMAP>:
10008c48:	00 80 00 00                                         ....

10008c4c <VIRT_RAM_TABLE>:
10008c4c:	00 06 00 c2                                         ....

10008c50 <VIRT_RAM_TABLE_SIZE>:
10008c50:	13 05 00 c2                                         ....

10008c54 <VIRT_HIGHEST_UNUSED_ADDRESS>:
10008c54:	24 05 00 c2                                         $...

10008c58 <SIZE_APP_STACK_USER>:
10008c58:	00 00 18 00                                         ....

10008c5c <SIZE_APP_STACK_KRNL>:
10008c5c:	00 00 08 00                                         ....

10008c60 <SIZE_APP_STACK_TOTAL>:
10008c60:	00 00 20 00                                         .. .

10008c64 <VIRT_APP_DATA>:
10008c64:	00 00 00 10                                         ....

10008c68 <VIRT_APP_STACK_USER_TOP>:
10008c68:	00 00 00 02                                         ....

10008c6c <VIRT_APP_STACK_KRNL_TOP>:
10008c6c:	00 00 e8 01                                         ....

10008c70 <VIRT_HEAP_MIN>:
10008c70:	00 00 00 c8                                         ....

10008c74 <VIRT_HEAP_MAX>:
10008c74:	ff ff ff ef                                         ....

10008c78 <VIRT_SBRK_MIN>:
10008c78:	00 00 00 f0                                         ....

10008c7c <VIRT_SBRK_MAX>:
10008c7c:	00 00 c0 ff                                         ....

10008c80 <VIRT_ALLOCED_VIRT_PAGES>:
10008c80:	00 00 10 c2                                         ....

10008c84 <VIRT_ACPI_DRIVER>:
10008c84:	00 40 48 c2                                         .@H.

10008c88 <TERMINAL_KEYBUFFER_IN_SIZE>:
10008c88:	80 00 00 00                                         ....

10008c8c <TERMINAL_KEYBUFFER_OUT_SIZE>:
10008c8c:	80 00 00 00 2a 53 59 53 54 45 4d 00 58 00 53 65     ....*SYSTEM.X.Se
10008c9c:	72 69 66 00 54 68 65 20 71 75 69 63 6b 20 62 72     rif.The quick br
10008cac:	6f 77 6e 20 66 6f 78 20 6a 75 6d 70 73 20 6f 76     own fox jumps ov
10008cbc:	65 72 20 61 20 6c 61 7a 79 20 64 6f 67 2e 00 00     er a lazy dog...
10008ccc:	31 3e 43 3a 2f 55 73 65 72 73 2f 41 6c 65 78 2f     1>C:/Users/Alex/
10008cdc:	44 65 73 6b 74 6f 70 2f 42 61 6e 61 6e 61 2f 6b     Desktop/Banana/k
10008cec:	65 72 6e 65 6c 2f 6c 69 62 6b 2f 73 74 72 69 6e     ernel/libk/strin
10008cfc:	67 2e 68 28 33 36 2c 38 29 3a 20 77 61 72 6e 69     g.h(36,8): warni
10008d0c:	6e 67 20 47 41 45 34 42 46 37 39 39 3a 20 64 65     ng GAE4BF799: de
10008d1c:	63 6c 61 72 61 74 69 6f 6e 20 6f 66 20 27 63 68     claration of 'ch
10008d2c:	61 72 2a 20 73 74 72 63 68 72 28 63 68 61 72 2a     ar* strchr(char*
10008d3c:	2c 20 69 6e 74 29 27 20 63 6f 6e 66 6c 69 63 74     , int)' conflict
10008d4c:	73 20 77 69 74 68 20 62 75 69 6c 74 2d 69 6e 20     s with built-in 
10008d5c:	64 65 63 6c 61 72 61 74 69 6f 6e 20 27 63 68 61     declaration 'cha
10008d6c:	72 2a 20 73 74 72 63 68 72 28 63 6f 6e 73 74 20     r* strchr(const 
10008d7c:	63 68 61 72 2a 2c 20 69 6e 74 29 27 20 5b 2d 57     char*, int)' [-W
10008d8c:	62 75 69 6c 74 69 6e 2d 64 65 63 6c 61 72 61 74     builtin-declarat
10008d9c:	69 6f 6e 2d 6d 69 73 6d 61 74 63 68 5d 00 00 00     ion-mismatch]...
10008dac:	4e 42 75 74 74 6f 6e 28 69 6e 74 20 78 2c 20 69     NButton(int x, i
10008dbc:	6e 74 20 79 2c 20 69 6e 74 20 77 2c 20 69 6e 74     nt y, int w, int
10008dcc:	20 68 29 20 3a 20 4e 46 72 61 6d 65 28 78 2c 20      h) : NFrame(x, 
10008ddc:	79 2c 20 77 2c 20 68 29 00 00 00 00 70 61 69 6e     y, w, h)....pain
10008dec:	74 52 65 63 74 61 6e 67 6c 65 28 67 2c 20 30 2c     tRectangle(g, 0,
10008dfc:	20 30 2c 20 72 67 6e 2e 77 69 64 74 68 2c 20 72      0, rgn.width, r
10008e0c:	67 6e 2e 68 65 69 67 68 74 2c 20 63 6f 6c 29 3b     gn.height, col);
10008e1c:	00 43 6c 69 70 64 72 61 77 20 69 73 20 6e 6f 77     .Clipdraw is now
10008e2c:	20 72 75 6e 6e 69 6e 67 2e 2e 2e 0a 00 53 79 73      running.....Sys
10008e3c:	74 65 6d 20 66 6f 6e 74 20 68 61 6e 64 6c 65 20     tem font handle 
10008e4c:	3d 20 25 64 0a 00 55 6e 74 69 74 6c 65 64 20 57     = %d..Untitled W
10008e5c:	69 6e 64 6f 77 00 43 3a 2f 42 61 6e 61 6e 61 2f     indow.C:/Banana/
10008e6c:	53 79 73 74 65 6d 2f 43 4c 49 50 44 45 4d 4f 2e     System/CLIPDEMO.
10008e7c:	45 58 45 00                                         EXE.

10008e80 <vtable for NButton>:
	...
	10008e88: R_386_32	NFrame::postResizeCleanup()
	10008e8c: R_386_32	NButton::paintHandler(NFrame::Graphics)
	10008e90: R_386_32	NFrame::getChildAllowableRegion()
	10008e94: R_386_32	NFrame::regenerateRegion()

10008e98 <vtable for NDesktopWindow>:
	...
	10008ea0: R_386_32	NFrame::postResizeCleanup()
	10008ea4: R_386_32	NDesktopWindow::paintHandler(NFrame::Graphics)
	10008ea8: R_386_32	NFrame::getChildAllowableRegion()
	10008eac: R_386_32	NFrame::regenerateRegion()

10008eb0 <vtable for NWindow>:
	...
	10008eb8: R_386_32	NWindow::postResizeCleanup()
	10008ebc: R_386_32	NWindow::paintHandler(NFrame::Graphics)
	10008ec0: R_386_32	NWindow::getChildAllowableRegion()
	10008ec4: R_386_32	NFrame::regenerateRegion()

10008ec8 <vtable for NFrame>:
	...
	10008ed0: R_386_32	NFrame::postResizeCleanup()
	10008ed4: R_386_32	__cxa_pure_virtual
	10008ed8: R_386_32	NFrame::getChildAllowableRegion()
	10008edc: R_386_32	NFrame::regenerateRegion()
10008ee0:	43 55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44     CURSOR LOAD: BAD
10008ef0:	20 31 0a 00 43 55 52 53 4f 52 20 4c 4f 41 44 3a      1..CURSOR LOAD:
10008f00:	20 42 41 44 20 32 0a 00 4e 52 4d 4c 00 57 41 49      BAD 2..NRML.WAI
10008f10:	54 00 54 4c 44 52 00 54 45 58 54 00 56 45 52 54     T.TLDR.TEXT.VERT
10008f20:	00 48 4f 52 5a 00 48 41 4e 44 00 43 55 52 53 4f     .HORZ.HAND.CURSO
10008f30:	52 20 4c 4f 41 44 3a 20 42 41 44 20 33 0a 00 43     R LOAD: BAD 3..C
10008f40:	3a 2f 42 61 6e 61 6e 61 2f 43 75 72 73 6f 72 73     :/Banana/Cursors
10008f50:	2f 53 54 41 4e 44 41 52 44 2e 43 55 52 00 61 62     /STANDARD.CUR.ab
10008f60:	6f 72 74 00 00 00 00 3f 4d 65 6d 6f 72 79 20 61     ort....?Memory a
10008f70:	6c 6c 6f 63 61 74 69 6f 6e 20 65 72 72 6f 72 00     llocation error.
10008f80:	42 61 64 20 66 69 6c 65 20 66 6f 72 6d 61 74 00     Bad file format.
10008f90:	4e 6f 20 66 6f 6e 74 20 66 61 63 65 20 66 6f 75     No font face fou
10008fa0:	6e 64 00 49 6e 76 61 6c 69 64 20 69 6e 70 75 74     nd.Invalid input
10008fb0:	20 76 61 6c 75 65 00 49 6e 76 61 6c 69 64 20 73      value.Invalid s
10008fc0:	74 79 6c 65 00 49 6e 76 61 6c 69 64 20 73 69 7a     tyle.Invalid siz
10008fd0:	65 00 47 6c 79 70 68 20 6e 6f 74 20 66 6f 75 6e     e.Glyph not foun
10008fe0:	64 00 53 46 4e 43 00 53 46 4e 32 00 32 4e 46 53     d.SFNC.SFN2.2NFS
10008ff0:	00 43 3a 2f 42 61 6e 61 6e 61 2f 46 6f 6e 74 73     .C:/Banana/Fonts
10009000:	2f 53 46 4e 2f 00 2e 53 46 4e 00 4c 6f 61 64 69     /SFN/..SFN.Loadi
10009010:	6e 67 20 66 6f 6e 74 20 27 25 73 27 0a 00 63 61     ng font '%s'..ca
10009020:	6e 6e 6f 74 20 63 72 65 61 74 65 20 66 69 6c 65     nnot create file
10009030:	2e 0a 00 63 61 6e 6e 6f 74 20 63 72 65 61 74 65     ...cannot create
10009040:	20 72 65 61 64 2e 0a 00 62 75 74 20 77 65 20 6f      read...but we o
10009050:	6e 6c 79 20 72 65 61 64 20 25 64 20 62 79 74 65     nly read %d byte
10009060:	73 2e 0a 00 65 78 69 73 74 69 6e 67 20 68 61 6e     s...existing han
10009070:	64 6c 65 20 3d 20 25 64 0a 00 65 78 69 73 74 69     dle = %d..existi
10009080:	6e 67 20 66 6f 6e 74 20 3d 20 30 78 25 58 0a 00     ng font = 0x%X..
10009090:	65 78 69 73 74 69 6e 67 46 6f 6e 74 2d 3e 73 73     existingFont->ss
100090a0:	66 6e 44 61 74 61 20 3d 20 30 78 25 58 0a 00        fnData = 0x%X..

100090af <.LC0>:
100090af:	20 53 54             	and    BYTE PTR [ebx+0x54],dl
100090b2:	4f                   	dec    edi
100090b3:	50                   	push   eax
100090b4:	20 45 52             	and    BYTE PTR [ebp+0x52],al
100090b7:	52                   	push   edx
100090b8:	4f                   	dec    edi
100090b9:	52                   	push   edx
100090ba:	20 00                	and    BYTE PTR [eax],al

100090bc <.LC1>:
100090bc:	41                   	inc    ecx
100090bd:	20 70 72             	and    BYTE PTR [eax+0x72],dh
100090c0:	6f                   	outs   dx,DWORD PTR ds:[esi]
100090c1:	62 6c 65 6d          	bound  ebp,QWORD PTR [ebp+eiz*2+0x6d]
100090c5:	20 68 61             	and    BYTE PTR [eax+0x61],ch
100090c8:	73 20                	jae    100090ea <.LC1+0x2e>
100090ca:	6f                   	outs   dx,DWORD PTR ds:[esi]
100090cb:	63 63 75             	arpl   WORD PTR [ebx+0x75],sp
100090ce:	72 65                	jb     10009135 <systemFontBuiltin+0x15>
100090d0:	64 20 61 6e          	and    BYTE PTR fs:[ecx+0x6e],ah
100090d4:	64 20 42 61          	and    BYTE PTR fs:[edx+0x61],al
100090d8:	6e                   	outs   dx,BYTE PTR ds:[esi]
100090d9:	61                   	popa   
100090da:	6e                   	outs   dx,BYTE PTR ds:[esi]
100090db:	61                   	popa   
100090dc:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
100090df:	6e                   	outs   dx,BYTE PTR ds:[esi]
100090e0:	6e                   	outs   dx,BYTE PTR ds:[esi]
100090e1:	6f                   	outs   dx,DWORD PTR ds:[esi]
100090e2:	74 20                	je     10009104 <.LC1+0x48>
100090e4:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
100090e7:	74 69                	je     10009152 <systemFontBuiltin+0x32>
100090e9:	6e                   	outs   dx,BYTE PTR ds:[esi]
100090ea:	75 65                	jne    10009151 <systemFontBuiltin+0x31>
100090ec:	2e 00 66 90          	add    BYTE PTR cs:[esi-0x70],ah
100090f0:	2a 53 59             	sub    dl,BYTE PTR [ebx+0x59]
100090f3:	53                   	push   ebx
100090f4:	54                   	push   esp
100090f5:	45                   	inc    ebp
100090f6:	4d                   	dec    ebp
100090f7:	00 58 00             	add    BYTE PTR [eax+0x0],bl
100090fa:	00 00                	add    BYTE PTR [eax],al
100090fc:	f0 62 00             	lock bound eax,QWORD PTR [eax]	100090fc: R_386_32	.text
100090ff:	10 04 63             	adc    BYTE PTR [ebx+eiz*2],al	10009100: R_386_32	.text
10009102:	00 10                	add    BYTE PTR [eax],dl
10009104:	17                   	pop    ss	10009104: R_386_32	.text
10009105:	63 00                	arpl   WORD PTR [eax],ax
10009107:	10 32                	adc    BYTE PTR [edx],dh	10009108: R_386_32	.text
10009109:	63 00                	arpl   WORD PTR [eax],ax
1000910b:	10 1f                	adc    BYTE PTR [edi],bl	1000910c: R_386_32	.text
1000910d:	63 00                	arpl   WORD PTR [eax],ax
1000910f:	10 45 63             	adc    BYTE PTR [ebp+0x63],al	10009110: R_386_32	.text
10009112:	00 10                	add    BYTE PTR [eax],dl
10009114:	6b 63 00 10          	imul   esp,DWORD PTR [ebx+0x0],0x10	10009114: R_386_32	.text
10009118:	58                   	pop    eax	10009118: R_386_32	.text
10009119:	63 00                	arpl   WORD PTR [eax],ax
1000911b:	10 7b 63             	adc    BYTE PTR [ebx+0x63],bh	1000911c: R_386_32	.text
1000911e:	00 10                	add    BYTE PTR [eax],dl
