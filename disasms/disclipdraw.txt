
packages/banana/32/0001/clipdraw.dll:     file format elf32-i386


Disassembly of section .text:

10000000 <NiMain(void*)>:
10000000:	55                   	push   ebp
10000001:	57                   	push   edi
10000002:	56                   	push   esi
10000003:	53                   	push   ebx
10000004:	83 ec 0c             	sub    esp,0xc
10000007:	e8 fc ff ff ff       	call   10000008 <NiMain(void*)+0x8>	10000008: R_386_PC32	NiInstallSysHooks()
1000000c:	e8 fc ff ff ff       	call   1000000d <NiMain(void*)+0xd>	1000000d: R_386_PC32	NiLoadCursors()
10000011:	83 ec 0c             	sub    esp,0xc
10000014:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000016: R_386_32	screen
1000001a:	e8 fc ff ff ff       	call   1000001b <NiMain(void*)+0x1b>	1000001b: R_386_PC32	Video::getWidth()
1000001f:	89 c6                	mov    esi,eax
10000021:	58                   	pop    eax
10000022:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000024: R_386_32	screen
10000028:	e8 fc ff ff ff       	call   10000029 <NiMain(void*)+0x29>	10000029: R_386_PC32	Video::getHeight()
1000002d:	5a                   	pop    edx
1000002e:	89 c7                	mov    edi,eax
10000030:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000032: R_386_32	screen
10000036:	e8 fc ff ff ff       	call   10000037 <NiMain(void*)+0x37>	10000037: R_386_PC32	Video::getWidth()
1000003b:	c7 04 24 1c 04 00 00 	mov    DWORD PTR [esp],0x41c
10000042:	89 c5                	mov    ebp,eax
10000044:	e8 fc ff ff ff       	call   10000045 <NiMain(void*)+0x45>	10000045: R_386_PC32	malloc
10000049:	59                   	pop    ecx
1000004a:	89 c3                	mov    ebx,eax
1000004c:	58                   	pop    eax
1000004d:	6a 20                	push   0x20
1000004f:	55                   	push   ebp
10000050:	57                   	push   edi
10000051:	56                   	push   esi
10000052:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10000054: R_386_32	screen
10000058:	53                   	push   ebx
10000059:	e8 fc ff ff ff       	call   1000005a <NiMain(void*)+0x5a>	1000005a: R_386_PC32	NIContext::NIContext(Video*, int, int, int, int)
1000005e:	83 c4 14             	add    esp,0x14
10000061:	89 1d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebx	10000063: R_386_32	ctxt
10000067:	68 24 04 00 00       	push   0x424
1000006c:	e8 fc ff ff ff       	call   1000006d <NiMain(void*)+0x6d>	1000006d: R_386_PC32	malloc
10000071:	89 c6                	mov    esi,eax
10000073:	58                   	pop    eax
10000074:	5a                   	pop    edx
10000075:	53                   	push   ebx
10000076:	56                   	push   esi
10000077:	e8 fc ff ff ff       	call   10000078 <NiMain(void*)+0x78>	10000078: R_386_PC32	NIDesktop::NIDesktop(NIContext*)
1000007c:	c7 04 24 90 02 00 00 	mov    DWORD PTR [esp],0x290
10000083:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10000085: R_386_32	desktop
10000089:	e8 fc ff ff ff       	call   1000008a <NiMain(void*)+0x8a>	1000008a: R_386_PC32	malloc
1000008e:	59                   	pop    ecx
1000008f:	89 c3                	mov    ebx,eax
10000091:	5e                   	pop    esi
10000092:	6a 01                	push   0x1
10000094:	6a 01                	push   0x1
10000096:	6a 00                	push   0x0
10000098:	6a 00                	push   0x0
1000009a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	1000009c: R_386_32	ctxt
100000a0:	50                   	push   eax
100000a1:	e8 fc ff ff ff       	call   100000a2 <NiMain(void*)+0xa2>	100000a2: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
100000a6:	83 c4 18             	add    esp,0x18
100000a9:	53                   	push   ebx
100000aa:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100000ac: R_386_32	desktop
100000b0:	e8 fc ff ff ff       	call   100000b1 <NiMain(void*)+0xb1>	100000b1: R_386_PC32	NIDesktop::addWindow(NIWindow*)
100000b5:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
100000bc:	e8 fc ff ff ff       	call   100000bd <NiMain(void*)+0xbd>	100000bd: R_386_PC32	malloc
100000c1:	6a 00                	push   0x0
100000c3:	89 c3                	mov    ebx,eax
100000c5:	6a 00                	push   0x0
100000c7:	68 0f 69 00 10       	push   0x1000690f	100000c8: R_386_32	.text
100000cc:	50                   	push   eax
100000cd:	e8 fc ff ff ff       	call   100000ce <NiMain(void*)+0xce>	100000ce: R_386_PC32	Process::Process(char const*, Process*, char**)
100000d2:	83 c4 14             	add    esp,0x14
100000d5:	53                   	push   ebx
100000d6:	e8 fc ff ff ff       	call   100000d7 <NiMain(void*)+0xd7>	100000d7: R_386_PC32	Process::createUserThread()
100000db:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
100000e2:	e8 fc ff ff ff       	call   100000e3 <NiMain(void*)+0xe3>	100000e3: R_386_PC32	malloc
100000e7:	6a 00                	push   0x0
100000e9:	89 c3                	mov    ebx,eax
100000eb:	6a 00                	push   0x0
100000ed:	68 2c 69 00 10       	push   0x1000692c	100000ee: R_386_32	.text
100000f2:	50                   	push   eax
100000f3:	e8 fc ff ff ff       	call   100000f4 <NiMain(void*)+0xf4>	100000f4: R_386_PC32	Process::Process(char const*, Process*, char**)
100000f8:	83 c4 14             	add    esp,0x14
100000fb:	53                   	push   ebx
100000fc:	e8 fc ff ff ff       	call   100000fd <NiMain(void*)+0xfd>	100000fd: R_386_PC32	Process::createUserThread()
10000101:	83 c4 10             	add    esp,0x10
10000104:	83 ec 0c             	sub    esp,0xc
10000107:	6a 02                	push   0x2
10000109:	e8 fc ff ff ff       	call   1000010a <NiMain(void*)+0x10a>	1000010a: R_386_PC32	blockTask(TaskState)
1000010e:	eb f1                	jmp    10000101 <NiMain(void*)+0x101>

10000110 <NiBegin(void*)>:
10000110:	83 ec 18             	sub    esp,0x18
10000113:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10000117:	e8 fc ff ff ff       	call   10000118 <NiBegin(void*)+0x8>	10000118: R_386_PC32	NiMain(void*)

1000011c <_ssfn__bitreverse16>:
1000011c:	89 c2                	mov    edx,eax
1000011e:	01 c0                	add    eax,eax
10000120:	d1 fa                	sar    edx,1
10000122:	25 aa aa 00 00       	and    eax,0xaaaa
10000127:	81 e2 55 55 00 00    	and    edx,0x5555
1000012d:	09 c2                	or     edx,eax
1000012f:	89 d0                	mov    eax,edx
10000131:	c1 e2 02             	shl    edx,0x2
10000134:	c1 f8 02             	sar    eax,0x2
10000137:	81 e2 cc cc 00 00    	and    edx,0xcccc
1000013d:	25 33 33 00 00       	and    eax,0x3333
10000142:	09 d0                	or     eax,edx
10000144:	89 c2                	mov    edx,eax
10000146:	c1 e0 04             	shl    eax,0x4
10000149:	c1 fa 04             	sar    edx,0x4
1000014c:	25 f0 f0 00 00       	and    eax,0xf0f0
10000151:	81 e2 0f 0f 00 00    	and    edx,0xf0f
10000157:	09 c2                	or     edx,eax
10000159:	89 d1                	mov    ecx,edx
1000015b:	c1 e2 08             	shl    edx,0x8
1000015e:	c1 f9 08             	sar    ecx,0x8
10000161:	0f b7 c2             	movzx  eax,dx
10000164:	09 c8                	or     eax,ecx
10000166:	c3                   	ret    

10000167 <_ssfn__zhuffman_decode>:
10000167:	55                   	push   ebp
10000168:	57                   	push   edi
10000169:	56                   	push   esi
1000016a:	53                   	push   ebx
1000016b:	83 78 04 0f          	cmp    DWORD PTR [eax+0x4],0xf
1000016f:	7f 1d                	jg     1000018e <_ssfn__zhuffman_decode+0x27>
10000171:	8b 18                	mov    ebx,DWORD PTR [eax]
10000173:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000176:	89 08                	mov    DWORD PTR [eax],ecx
10000178:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000017b:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
1000017e:	d3 e3                	shl    ebx,cl
10000180:	83 c1 08             	add    ecx,0x8
10000183:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000186:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
10000189:	83 f9 18             	cmp    ecx,0x18
1000018c:	eb e1                	jmp    1000016f <_ssfn__zhuffman_decode+0x8>
1000018e:	8b 78 08             	mov    edi,DWORD PTR [eax+0x8]
10000191:	89 f9                	mov    ecx,edi
10000193:	81 e1 ff 01 00 00    	and    ecx,0x1ff
10000199:	0f b7 0c 4a          	movzx  ecx,WORD PTR [edx+ecx*2]
1000019d:	89 cb                	mov    ebx,ecx
1000019f:	85 c9                	test   ecx,ecx
100001a1:	74 15                	je     100001b8 <_ssfn__zhuffman_decode+0x51>
100001a3:	c1 f9 09             	sar    ecx,0x9
100001a6:	89 da                	mov    edx,ebx
100001a8:	d3 ef                	shr    edi,cl
100001aa:	29 48 04             	sub    DWORD PTR [eax+0x4],ecx
100001ad:	89 78 08             	mov    DWORD PTR [eax+0x8],edi
100001b0:	81 e2 ff 01 00 00    	and    edx,0x1ff
100001b6:	eb 58                	jmp    10000210 <_ssfn__zhuffman_decode+0xa9>
100001b8:	89 d5                	mov    ebp,edx
100001ba:	89 c3                	mov    ebx,eax
100001bc:	be 0a 00 00 00       	mov    esi,0xa
100001c1:	89 f8                	mov    eax,edi
100001c3:	e8 54 ff ff ff       	call   1000011c <_ssfn__bitreverse16>
100001c8:	3b 84 b5 20 04 00 00 	cmp    eax,DWORD PTR [ebp+esi*4+0x420]
100001cf:	7c 03                	jl     100001d4 <_ssfn__zhuffman_decode+0x6d>
100001d1:	46                   	inc    esi
100001d2:	eb f4                	jmp    100001c8 <_ssfn__zhuffman_decode+0x61>
100001d4:	83 ca ff             	or     edx,0xffffffff
100001d7:	83 fe 10             	cmp    esi,0x10
100001da:	74 34                	je     10000210 <_ssfn__zhuffman_decode+0xa9>
100001dc:	8d 14 36             	lea    edx,[esi+esi*1]
100001df:	b9 10 00 00 00       	mov    ecx,0x10
100001e4:	01 ea                	add    edx,ebp
100001e6:	29 f1                	sub    ecx,esi
100001e8:	d3 f8                	sar    eax,cl
100001ea:	0f b7 8a 00 04 00 00 	movzx  ecx,WORD PTR [edx+0x400]
100001f1:	0f b7 92 64 04 00 00 	movzx  edx,WORD PTR [edx+0x464]
100001f8:	29 c8                	sub    eax,ecx
100001fa:	29 73 04             	sub    DWORD PTR [ebx+0x4],esi
100001fd:	89 f1                	mov    ecx,esi
100001ff:	8d 84 10 d0 02 00 00 	lea    eax,[eax+edx*1+0x2d0]
10000206:	d3 ef                	shr    edi,cl
10000208:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
1000020b:	0f b7 54 45 04       	movzx  edx,WORD PTR [ebp+eax*2+0x4]
10000210:	5b                   	pop    ebx
10000211:	89 d0                	mov    eax,edx
10000213:	5e                   	pop    esi
10000214:	5f                   	pop    edi
10000215:	5d                   	pop    ebp
10000216:	c3                   	ret    

10000217 <_ssfn__zexpand>:
10000217:	55                   	push   ebp
10000218:	57                   	push   edi
10000219:	56                   	push   esi
1000021a:	53                   	push   ebx
1000021b:	83 ec 0c             	sub    esp,0xc
1000021e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
10000221:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
10000224:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
10000227:	29 f9                	sub    ecx,edi
10000229:	83 f9 08             	cmp    ecx,0x8
1000022c:	74 04                	je     10000232 <_ssfn__zexpand+0x1b>
1000022e:	31 c0                	xor    eax,eax
10000230:	eb 3c                	jmp    1000026e <_ssfn__zexpand+0x57>
10000232:	80 3f 53             	cmp    BYTE PTR [edi],0x53
10000235:	75 f7                	jne    1000022e <_ssfn__zexpand+0x17>
10000237:	80 7f 01 46          	cmp    BYTE PTR [edi+0x1],0x46
1000023b:	75 f1                	jne    1000022e <_ssfn__zexpand+0x17>
1000023d:	80 7f 02 4e          	cmp    BYTE PTR [edi+0x2],0x4e
10000241:	75 eb                	jne    1000022e <_ssfn__zexpand+0x17>
10000243:	8b 6f 04             	mov    ebp,DWORD PTR [edi+0x4]
10000246:	89 c3                	mov    ebx,eax
10000248:	89 d6                	mov    esi,edx
1000024a:	50                   	push   eax
1000024b:	50                   	push   eax
1000024c:	55                   	push   ebp
1000024d:	57                   	push   edi
1000024e:	e8 fc ff ff ff       	call   1000024f <_ssfn__zexpand+0x38>	1000024f: R_386_PC32	realloc
10000253:	83 c4 10             	add    esp,0x10
10000256:	85 c0                	test   eax,eax
10000258:	74 d4                	je     1000022e <_ssfn__zexpand+0x17>
1000025a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
1000025d:	29 fe                	sub    esi,edi
1000025f:	01 c6                	add    esi,eax
10000261:	01 e8                	add    eax,ebp
10000263:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
10000266:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
10000269:	b8 01 00 00 00       	mov    eax,0x1
1000026e:	83 c4 0c             	add    esp,0xc
10000271:	5b                   	pop    ebx
10000272:	5e                   	pop    esi
10000273:	5f                   	pop    edi
10000274:	5d                   	pop    ebp
10000275:	c3                   	ret    

10000276 <_ssfn__zbuild_huffman>:
10000276:	55                   	push   ebp
10000277:	57                   	push   edi
10000278:	56                   	push   esi
10000279:	53                   	push   ebx
1000027a:	89 c3                	mov    ebx,eax
1000027c:	81 ec a0 00 00 00    	sub    esp,0xa0
10000282:	31 c0                	xor    eax,eax
10000284:	89 0c 24             	mov    DWORD PTR [esp],ecx
10000287:	8d 6c 24 5c          	lea    ebp,[esp+0x5c]
1000028b:	b9 11 00 00 00       	mov    ecx,0x11
10000290:	89 ef                	mov    edi,ebp
10000292:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
10000296:	f3 ab                	rep stos DWORD PTR es:[edi],eax
10000298:	b9 00 01 00 00       	mov    ecx,0x100
1000029d:	89 df                	mov    edi,ebx
1000029f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100002a1:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100002a4:	7d 0f                	jge    100002b5 <_ssfn__zbuild_huffman+0x3f>
100002a6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
100002aa:	0f b6 0c 06          	movzx  ecx,BYTE PTR [esi+eax*1]
100002ae:	40                   	inc    eax
100002af:	ff 44 8c 5c          	inc    DWORD PTR [esp+ecx*4+0x5c]
100002b3:	eb ec                	jmp    100002a1 <_ssfn__zbuild_huffman+0x2b>
100002b5:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
100002bd:	b9 01 00 00 00       	mov    ecx,0x1
100002c2:	b8 01 00 00 00       	mov    eax,0x1
100002c7:	89 c7                	mov    edi,eax
100002c9:	d3 e7                	shl    edi,cl
100002cb:	39 7c 8d 00          	cmp    DWORD PTR [ebp+ecx*4+0x0],edi
100002cf:	0f 8f 10 01 00 00    	jg     100003e5 <_ssfn__zbuild_huffman+0x16f>
100002d5:	41                   	inc    ecx
100002d6:	83 f9 10             	cmp    ecx,0x10
100002d9:	75 ec                	jne    100002c7 <_ssfn__zbuild_huffman+0x51>
100002db:	31 ff                	xor    edi,edi
100002dd:	31 f6                	xor    esi,esi
100002df:	b8 01 00 00 00       	mov    eax,0x1
100002e4:	8b 6c 84 5c          	mov    ebp,DWORD PTR [esp+eax*4+0x5c]
100002e8:	89 7c 84 1c          	mov    DWORD PTR [esp+eax*4+0x1c],edi
100002ec:	66 89 bc 43 00 04 00 00 	mov    WORD PTR [ebx+eax*2+0x400],di
100002f4:	66 89 b4 43 64 04 00 00 	mov    WORD PTR [ebx+eax*2+0x464],si
100002fc:	01 ef                	add    edi,ebp
100002fe:	85 ed                	test   ebp,ebp
10000300:	74 11                	je     10000313 <_ssfn__zbuild_huffman+0x9d>
10000302:	ba 01 00 00 00       	mov    edx,0x1
10000307:	88 c1                	mov    cl,al
10000309:	d3 e2                	shl    edx,cl
1000030b:	39 fa                	cmp    edx,edi
1000030d:	0f 8c d2 00 00 00    	jl     100003e5 <_ssfn__zbuild_huffman+0x16f>
10000313:	89 fa                	mov    edx,edi
10000315:	b9 10 00 00 00       	mov    ecx,0x10
1000031a:	01 ff                	add    edi,edi
1000031c:	29 c1                	sub    ecx,eax
1000031e:	01 ee                	add    esi,ebp
10000320:	d3 e2                	shl    edx,cl
10000322:	89 94 83 20 04 00 00 	mov    DWORD PTR [ebx+eax*4+0x420],edx
10000329:	40                   	inc    eax
1000032a:	83 f8 10             	cmp    eax,0x10
1000032d:	75 b5                	jne    100002e4 <_ssfn__zbuild_huffman+0x6e>
1000032f:	8b 04 24             	mov    eax,DWORD PTR [esp]
10000332:	c7 83 60 04 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x460],0x10000
1000033c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000340:	31 ff                	xor    edi,edi
10000342:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
10000346:	0f 8d 9d 00 00 00    	jge    100003e9 <_ssfn__zbuild_huffman+0x173>
1000034c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10000350:	0f b6 34 38          	movzx  esi,BYTE PTR [eax+edi*1]
10000354:	89 f2                	mov    edx,esi
10000356:	85 f6                	test   esi,esi
10000358:	0f 84 81 00 00 00    	je     100003df <_ssfn__zbuild_huffman+0x169>
1000035e:	8d 0c 36             	lea    ecx,[esi+esi*1]
10000361:	8b 6c b4 1c          	mov    ebp,DWORD PTR [esp+esi*4+0x1c]
10000365:	8d 04 19             	lea    eax,[ecx+ebx*1]
10000368:	89 e9                	mov    ecx,ebp
1000036a:	89 04 24             	mov    DWORD PTR [esp],eax
1000036d:	0f b7 80 00 04 00 00 	movzx  eax,WORD PTR [eax+0x400]
10000374:	29 c1                	sub    ecx,eax
10000376:	89 c8                	mov    eax,ecx
10000378:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000037b:	0f b7 89 64 04 00 00 	movzx  ecx,WORD PTR [ecx+0x464]
10000382:	01 c8                	add    eax,ecx
10000384:	83 fe 09             	cmp    esi,0x9
10000387:	88 94 03 84 04 00 00 	mov    BYTE PTR [ebx+eax*1+0x484],dl
1000038e:	66 89 bc 43 a4 05 00 00 	mov    WORD PTR [ebx+eax*2+0x5a4],di
10000396:	7f 42                	jg     100003da <_ssfn__zbuild_huffman+0x164>
10000398:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
1000039c:	89 e8                	mov    eax,ebp
1000039e:	e8 79 fd ff ff       	call   1000011c <_ssfn__bitreverse16>
100003a3:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
100003a7:	b9 10 00 00 00       	mov    ecx,0x10
100003ac:	29 f1                	sub    ecx,esi
100003ae:	d3 f8                	sar    eax,cl
100003b0:	88 d1                	mov    cl,dl
100003b2:	89 04 24             	mov    DWORD PTR [esp],eax
100003b5:	89 f2                	mov    edx,esi
100003b7:	b8 01 00 00 00       	mov    eax,0x1
100003bc:	c1 e2 09             	shl    edx,0x9
100003bf:	d3 e0                	shl    eax,cl
100003c1:	09 fa                	or     edx,edi
100003c3:	89 c1                	mov    ecx,eax
100003c5:	81 3c 24 ff 01 00 00 	cmp    DWORD PTR [esp],0x1ff
100003cc:	7f 0c                	jg     100003da <_ssfn__zbuild_huffman+0x164>
100003ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
100003d1:	01 0c 24             	add    DWORD PTR [esp],ecx
100003d4:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
100003d8:	eb eb                	jmp    100003c5 <_ssfn__zbuild_huffman+0x14f>
100003da:	45                   	inc    ebp
100003db:	89 6c b4 1c          	mov    DWORD PTR [esp+esi*4+0x1c],ebp
100003df:	47                   	inc    edi
100003e0:	e9 5d ff ff ff       	jmp    10000342 <_ssfn__zbuild_huffman+0xcc>
100003e5:	31 c0                	xor    eax,eax
100003e7:	eb 05                	jmp    100003ee <_ssfn__zbuild_huffman+0x178>
100003e9:	b8 01 00 00 00       	mov    eax,0x1
100003ee:	81 c4 a0 00 00 00    	add    esp,0xa0
100003f4:	5b                   	pop    ebx
100003f5:	5e                   	pop    esi
100003f6:	5f                   	pop    edi
100003f7:	5d                   	pop    ebp
100003f8:	c3                   	ret    

100003f9 <_ssfn_fc.part.1>:
100003f9:	55                   	push   ebp
100003fa:	57                   	push   edi
100003fb:	8d b8 6c f5 00 00    	lea    edi,[eax+0xf56c]
10000401:	56                   	push   esi
10000402:	53                   	push   ebx
10000403:	8d 98 28 f5 00 00    	lea    ebx,[eax+0xf528]
10000409:	83 ec 0c             	sub    esp,0xc
1000040c:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
1000040f:	74 5d                	je     1000046e <_ssfn_fc.part.1+0x75>
10000411:	31 f6                	xor    esi,esi
10000413:	8b 03                	mov    eax,DWORD PTR [ebx]
10000415:	83 3c 30 00          	cmp    DWORD PTR [eax+esi*1],0x0
10000419:	74 35                	je     10000450 <_ssfn_fc.part.1+0x57>
1000041b:	31 ed                	xor    ebp,ebp
1000041d:	8b 03                	mov    eax,DWORD PTR [ebx]
1000041f:	8b 04 30             	mov    eax,DWORD PTR [eax+esi*1]
10000422:	8b 04 28             	mov    eax,DWORD PTR [eax+ebp*1]
10000425:	85 c0                	test   eax,eax
10000427:	74 0c                	je     10000435 <_ssfn_fc.part.1+0x3c>
10000429:	83 ec 0c             	sub    esp,0xc
1000042c:	50                   	push   eax
1000042d:	e8 fc ff ff ff       	call   1000042e <_ssfn_fc.part.1+0x35>	1000042e: R_386_PC32	free
10000432:	83 c4 10             	add    esp,0x10
10000435:	83 c5 04             	add    ebp,0x4
10000438:	81 fd 00 04 00 00    	cmp    ebp,0x400
1000043e:	75 dd                	jne    1000041d <_ssfn_fc.part.1+0x24>
10000440:	83 ec 0c             	sub    esp,0xc
10000443:	8b 03                	mov    eax,DWORD PTR [ebx]
10000445:	ff 34 30             	push   DWORD PTR [eax+esi*1]
10000448:	e8 fc ff ff ff       	call   10000449 <_ssfn_fc.part.1+0x50>	10000449: R_386_PC32	free
1000044d:	83 c4 10             	add    esp,0x10
10000450:	83 c6 04             	add    esi,0x4
10000453:	81 fe 00 04 00 00    	cmp    esi,0x400
10000459:	75 b8                	jne    10000413 <_ssfn_fc.part.1+0x1a>
1000045b:	83 ec 0c             	sub    esp,0xc
1000045e:	ff 33                	push   DWORD PTR [ebx]
10000460:	e8 fc ff ff ff       	call   10000461 <_ssfn_fc.part.1+0x68>	10000461: R_386_PC32	free
10000465:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
1000046b:	83 c4 10             	add    esp,0x10
1000046e:	83 c3 04             	add    ebx,0x4
10000471:	39 fb                	cmp    ebx,edi
10000473:	75 97                	jne    1000040c <_ssfn_fc.part.1+0x13>
10000475:	83 c4 0c             	add    esp,0xc
10000478:	5b                   	pop    ebx
10000479:	5e                   	pop    esi
1000047a:	5f                   	pop    edi
1000047b:	5d                   	pop    ebp
1000047c:	c3                   	ret    

1000047d <_ssfn_l>:
1000047d:	57                   	push   edi
1000047e:	56                   	push   esi
1000047f:	53                   	push   ebx
10000480:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000484:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000488:	39 ce                	cmp    esi,ecx
1000048a:	89 f3                	mov    ebx,esi
1000048c:	0f 9d c1             	setge  cl
1000048f:	c1 eb 1f             	shr    ebx,0x1f
10000492:	09 d9                	or     ecx,ebx
10000494:	89 fb                	mov    ebx,edi
10000496:	c1 eb 1f             	shr    ebx,0x1f
10000499:	08 d9                	or     cl,bl
1000049b:	0f 85 e9 00 00 00    	jne    1000058a <_ssfn_l+0x10d>
100004a1:	39 d7                	cmp    edi,edx
100004a3:	0f 8d e1 00 00 00    	jge    1000058a <_ssfn_l+0x10d>
100004a9:	8b 88 9c f5 00 00    	mov    ecx,DWORD PTR [eax+0xf59c]
100004af:	8d 51 08             	lea    edx,[ecx+0x8]
100004b2:	8d 4f 08             	lea    ecx,[edi+0x8]
100004b5:	c1 fa 04             	sar    edx,0x4
100004b8:	c1 f9 04             	sar    ecx,0x4
100004bb:	39 ca                	cmp    edx,ecx
100004bd:	75 1a                	jne    100004d9 <_ssfn_l+0x5c>
100004bf:	8b 90 a0 f5 00 00    	mov    edx,DWORD PTR [eax+0xf5a0]
100004c5:	8d 4e 08             	lea    ecx,[esi+0x8]
100004c8:	83 c2 08             	add    edx,0x8
100004cb:	c1 f9 04             	sar    ecx,0x4
100004ce:	c1 fa 04             	sar    edx,0x4
100004d1:	39 ca                	cmp    edx,ecx
100004d3:	0f 84 b1 00 00 00    	je     1000058a <_ssfn_l+0x10d>
100004d9:	89 c3                	mov    ebx,eax
100004db:	8b 80 80 f5 00 00    	mov    eax,DWORD PTR [eax+0xf580]
100004e1:	39 83 84 f5 00 00    	cmp    DWORD PTR [ebx+0xf584],eax
100004e7:	7f 3e                	jg     10000527 <_ssfn_l+0xaa>
100004e9:	05 00 02 00 00       	add    eax,0x200
100004ee:	89 83 84 f5 00 00    	mov    DWORD PTR [ebx+0xf584],eax
100004f4:	52                   	push   edx
100004f5:	01 c0                	add    eax,eax
100004f7:	52                   	push   edx
100004f8:	50                   	push   eax
100004f9:	ff b3 6c f5 00 00    	push   DWORD PTR [ebx+0xf56c]
100004ff:	e8 fc ff ff ff       	call   10000500 <_ssfn_l+0x83>	10000500: R_386_PC32	realloc
10000504:	83 c4 10             	add    esp,0x10
10000507:	89 83 6c f5 00 00    	mov    DWORD PTR [ebx+0xf56c],eax
1000050d:	85 c0                	test   eax,eax
1000050f:	75 16                	jne    10000527 <_ssfn_l+0xaa>
10000511:	c7 83 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf580],0x0
1000051b:	c7 83 84 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf584],0x0
10000525:	eb 63                	jmp    1000058a <_ssfn_l+0x10d>
10000527:	83 bb 80 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf580],0x0
1000052e:	75 26                	jne    10000556 <_ssfn_l+0xd9>
10000530:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000536:	8b 93 94 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf594]
1000053c:	66 89 10             	mov    WORD PTR [eax],dx
1000053f:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000545:	8b 93 98 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf598]
1000054b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
1000054f:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000556:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
1000055c:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000562:	66 89 3c 50          	mov    WORD PTR [eax+edx*2],di
10000566:	8b 93 80 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf580]
1000056c:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
10000572:	66 89 74 50 02       	mov    WORD PTR [eax+edx*2+0x2],si
10000577:	89 bb 9c f5 00 00    	mov    DWORD PTR [ebx+0xf59c],edi
1000057d:	83 83 80 f5 00 00 02 	add    DWORD PTR [ebx+0xf580],0x2
10000584:	89 b3 a0 f5 00 00    	mov    DWORD PTR [ebx+0xf5a0],esi
1000058a:	5b                   	pop    ebx
1000058b:	5e                   	pop    esi
1000058c:	5f                   	pop    edi
1000058d:	c3                   	ret    

1000058e <_ssfn_b>:
1000058e:	55                   	push   ebp
1000058f:	57                   	push   edi
10000590:	56                   	push   esi
10000591:	53                   	push   ebx
10000592:	83 ec 4c             	sub    esp,0x4c
10000595:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10000599:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
1000059d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100005a1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
100005a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100005a9:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
100005ad:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100005b1:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
100005b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100005b9:	8b 7c 24 70          	mov    edi,DWORD PTR [esp+0x70]
100005bd:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100005c1:	8b 4c 24 74          	mov    ecx,DWORD PTR [esp+0x74]
100005c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100005c9:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100005cd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100005d1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
100005d8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100005dc:	83 f8 04             	cmp    eax,0x4
100005df:	75 28                	jne    10000609 <_ssfn_b+0x7b>
100005e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100005e5:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
100005e9:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100005ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
100005f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
100005f5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
100005f9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
100005fd:	83 c4 4c             	add    esp,0x4c
10000600:	5b                   	pop    ebx
10000601:	5e                   	pop    esi
10000602:	5f                   	pop    edi
10000603:	5d                   	pop    ebp
10000604:	e9 74 fe ff ff       	jmp    1000047d <_ssfn_l>
10000609:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000060d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
10000611:	75 0e                	jne    10000621 <_ssfn_b+0x93>
10000613:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
10000617:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
1000061b:	0f 84 19 01 00 00    	je     1000073a <_ssfn_b+0x1ac>
10000621:	be 02 00 00 00       	mov    esi,0x2
10000626:	89 d8                	mov    eax,ebx
10000628:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
1000062c:	99                   	cdq    
1000062d:	f7 fe                	idiv   esi
1000062f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
10000633:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10000637:	89 e8                	mov    eax,ebp
10000639:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
1000063d:	99                   	cdq    
1000063e:	f7 fe                	idiv   esi
10000640:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
10000644:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10000648:	89 f8                	mov    eax,edi
1000064a:	29 d8                	sub    eax,ebx
1000064c:	99                   	cdq    
1000064d:	f7 fe                	idiv   esi
1000064f:	01 c3                	add    ebx,eax
10000651:	89 c8                	mov    eax,ecx
10000653:	29 e8                	sub    eax,ebp
10000655:	99                   	cdq    
10000656:	f7 fe                	idiv   esi
10000658:	01 e8                	add    eax,ebp
1000065a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000065e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10000662:	29 f8                	sub    eax,edi
10000664:	99                   	cdq    
10000665:	f7 fe                	idiv   esi
10000667:	01 f8                	add    eax,edi
10000669:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
1000066d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10000671:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10000675:	29 c8                	sub    eax,ecx
10000677:	99                   	cdq    
10000678:	f7 fe                	idiv   esi
1000067a:	01 c8                	add    eax,ecx
1000067c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10000680:	89 d8                	mov    eax,ebx
10000682:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10000686:	99                   	cdq    
10000687:	f7 fe                	idiv   esi
10000689:	8d 0c 38             	lea    ecx,[eax+edi*1]
1000068c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10000690:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10000694:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10000698:	99                   	cdq    
10000699:	f7 fe                	idiv   esi
1000069b:	8d 2c 38             	lea    ebp,[eax+edi*1]
1000069e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100006a2:	29 d8                	sub    eax,ebx
100006a4:	99                   	cdq    
100006a5:	f7 fe                	idiv   esi
100006a7:	83 ec 0c             	sub    esp,0xc
100006aa:	01 d8                	add    eax,ebx
100006ac:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100006b0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100006b4:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
100006b8:	99                   	cdq    
100006b9:	f7 fe                	idiv   esi
100006bb:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
100006bf:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
100006c3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
100006c7:	29 c8                	sub    eax,ecx
100006c9:	99                   	cdq    
100006ca:	f7 fe                	idiv   esi
100006cc:	8d 1c 08             	lea    ebx,[eax+ecx*1]
100006cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100006d3:	29 e8                	sub    eax,ebp
100006d5:	99                   	cdq    
100006d6:	f7 fe                	idiv   esi
100006d8:	8d 34 28             	lea    esi,[eax+ebp*1]
100006db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
100006df:	8d 78 01             	lea    edi,[eax+0x1]
100006e2:	57                   	push   edi
100006e3:	56                   	push   esi
100006e4:	53                   	push   ebx
100006e5:	55                   	push   ebp
100006e6:	51                   	push   ecx
100006e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100006eb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100006ef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100006f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
100006f7:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
100006fb:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
100006ff:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000703:	e8 86 fe ff ff       	call   1000058e <_ssfn_b>
10000708:	83 c4 24             	add    esp,0x24
1000070b:	57                   	push   edi
1000070c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000710:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
10000714:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
10000718:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
1000071c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
10000720:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
10000724:	56                   	push   esi
10000725:	53                   	push   ebx
10000726:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
1000072a:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
1000072e:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10000732:	e8 57 fe ff ff       	call   1000058e <_ssfn_b>
10000737:	83 c4 30             	add    esp,0x30
1000073a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
1000073f:	0f 85 9c fe ff ff    	jne    100005e1 <_ssfn_b+0x53>
10000745:	83 c4 4c             	add    esp,0x4c
10000748:	5b                   	pop    ebx
10000749:	5e                   	pop    esi
1000074a:	5f                   	pop    edi
1000074b:	5d                   	pop    ebp
1000074c:	c3                   	ret    

1000074d <_ssfn__zreceive>:
1000074d:	56                   	push   esi
1000074e:	53                   	push   ebx
1000074f:	39 50 04             	cmp    DWORD PTR [eax+0x4],edx
10000752:	7d 1d                	jge    10000771 <_ssfn__zreceive+0x24>
10000754:	8b 18                	mov    ebx,DWORD PTR [eax]
10000756:	8d 4b 01             	lea    ecx,[ebx+0x1]
10000759:	89 08                	mov    DWORD PTR [eax],ecx
1000075b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
1000075e:	0f b6 1b             	movzx  ebx,BYTE PTR [ebx]
10000761:	d3 e3                	shl    ebx,cl
10000763:	83 c1 08             	add    ecx,0x8
10000766:	09 58 08             	or     DWORD PTR [eax+0x8],ebx
10000769:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
1000076c:	83 f9 18             	cmp    ecx,0x18
1000076f:	7e e3                	jle    10000754 <_ssfn__zreceive+0x7>
10000771:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
10000774:	29 50 04             	sub    DWORD PTR [eax+0x4],edx
10000777:	89 f3                	mov    ebx,esi
10000779:	88 d1                	mov    cl,dl
1000077b:	d3 eb                	shr    ebx,cl
1000077d:	88 d1                	mov    cl,dl
1000077f:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
10000782:	bb 01 00 00 00       	mov    ebx,0x1
10000787:	d3 e3                	shl    ebx,cl
10000789:	8d 43 ff             	lea    eax,[ebx-0x1]
1000078c:	5b                   	pop    ebx
1000078d:	21 f0                	and    eax,esi
1000078f:	5e                   	pop    esi
10000790:	c3                   	ret    

10000791 <ssfn_utf8>:
10000791:	56                   	push   esi
10000792:	53                   	push   ebx
10000793:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10000797:	8b 11                	mov    edx,DWORD PTR [ecx]
10000799:	0f b6 32             	movzx  esi,BYTE PTR [edx]
1000079c:	89 f0                	mov    eax,esi
1000079e:	84 c0                	test   al,al
100007a0:	0f be d8             	movsx  ebx,al
100007a3:	78 04                	js     100007a9 <ssfn_utf8+0x18>
100007a5:	89 d8                	mov    eax,ebx
100007a7:	eb 7d                	jmp    10000826 <ssfn_utf8+0x95>
100007a9:	f7 c6 20 00 00 00    	test   esi,0x20
100007af:	75 14                	jne    100007c5 <ssfn_utf8+0x34>
100007b1:	8a 42 01             	mov    al,BYTE PTR [edx+0x1]
100007b4:	c1 e3 06             	shl    ebx,0x6
100007b7:	83 e0 3f             	and    eax,0x3f
100007ba:	81 e3 c0 07 00 00    	and    ebx,0x7c0
100007c0:	42                   	inc    edx
100007c1:	09 d8                	or     eax,ebx
100007c3:	eb 5f                	jmp    10000824 <ssfn_utf8+0x93>
100007c5:	f7 c6 10 00 00 00    	test   esi,0x10
100007cb:	75 20                	jne    100007ed <ssfn_utf8+0x5c>
100007cd:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100007d1:	c1 e3 0c             	shl    ebx,0xc
100007d4:	c1 e0 06             	shl    eax,0x6
100007d7:	0f b7 db             	movzx  ebx,bx
100007da:	25 c0 0f 00 00       	and    eax,0xfc0
100007df:	83 c2 02             	add    edx,0x2
100007e2:	09 d8                	or     eax,ebx
100007e4:	8a 1a                	mov    bl,BYTE PTR [edx]
100007e6:	83 e3 3f             	and    ebx,0x3f
100007e9:	09 d8                	or     eax,ebx
100007eb:	eb 37                	jmp    10000824 <ssfn_utf8+0x93>
100007ed:	31 c0                	xor    eax,eax
100007ef:	83 e6 08             	and    esi,0x8
100007f2:	75 32                	jne    10000826 <ssfn_utf8+0x95>
100007f4:	0f be 42 01          	movsx  eax,BYTE PTR [edx+0x1]
100007f8:	c1 e3 12             	shl    ebx,0x12
100007fb:	c1 e0 0c             	shl    eax,0xc
100007fe:	81 e3 00 00 1c 00    	and    ebx,0x1c0000
10000804:	25 00 f0 03 00       	and    eax,0x3f000
10000809:	83 c2 03             	add    edx,0x3
1000080c:	09 d8                	or     eax,ebx
1000080e:	8a 1a                	mov    bl,BYTE PTR [edx]
10000810:	83 e3 3f             	and    ebx,0x3f
10000813:	09 d8                	or     eax,ebx
10000815:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
10000819:	c1 e3 06             	shl    ebx,0x6
1000081c:	81 e3 c0 0f 00 00    	and    ebx,0xfc0
10000822:	09 d8                	or     eax,ebx
10000824:	89 11                	mov    DWORD PTR [ecx],edx
10000826:	ff 01                	inc    DWORD PTR [ecx]
10000828:	5b                   	pop    ebx
10000829:	5e                   	pop    esi
1000082a:	c3                   	ret    

1000082b <_ssfn_c>:
1000082b:	55                   	push   ebp
1000082c:	57                   	push   edi
1000082d:	56                   	push   esi
1000082e:	53                   	push   ebx
1000082f:	83 ec 14             	sub    esp,0x14
10000832:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
10000838:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
1000083c:	85 c0                	test   eax,eax
1000083e:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
10000844:	0f 84 e6 00 00 00    	je     10000930 <_ssfn_c+0x105>
1000084a:	31 ff                	xor    edi,edi
1000084c:	83 78 10 00          	cmp    DWORD PTR [eax+0x10],0x0
10000850:	0f 84 f3 00 00 00    	je     10000949 <_ssfn_c+0x11e>
10000856:	85 d2                	test   edx,edx
10000858:	0f 84 eb 00 00 00    	je     10000949 <_ssfn_c+0x11e>
1000085e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
10000861:	0f 84 e2 00 00 00    	je     10000949 <_ssfn_c+0x11e>
10000867:	89 d6                	mov    esi,edx
10000869:	89 cd                	mov    ebp,ecx
1000086b:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
1000086e:	89 c3                	mov    ebx,eax
10000870:	85 d2                	test   edx,edx
10000872:	74 38                	je     100008ac <_ssfn_c+0x81>
10000874:	8d 0c 13             	lea    ecx,[ebx+edx*1]
10000877:	31 c0                	xor    eax,eax
10000879:	89 0c 24             	mov    DWORD PTR [esp],ecx
1000087c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
1000087f:	0f b7 14 41          	movzx  edx,WORD PTR [ecx+eax*2]
10000883:	66 85 d2             	test   dx,dx
10000886:	74 24                	je     100008ac <_ssfn_c+0x81>
10000888:	01 da                	add    edx,ebx
1000088a:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
1000088e:	8a 0a                	mov    cl,BYTE PTR [edx]
10000890:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10000894:	84 c9                	test   cl,cl
10000896:	0f 84 9e 00 00 00    	je     1000093a <_ssfn_c+0x10f>
1000089c:	3a 0f                	cmp    cl,BYTE PTR [edi]
1000089e:	0f 85 90 00 00 00    	jne    10000934 <_ssfn_c+0x109>
100008a4:	47                   	inc    edi
100008a5:	42                   	inc    edx
100008a6:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
100008aa:	eb e2                	jmp    1000088e <_ssfn_c+0x63>
100008ac:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
100008b0:	8d 44 24 10          	lea    eax,[esp+0x10]
100008b4:	50                   	push   eax
100008b5:	e8 fc ff ff ff       	call   100008b6 <_ssfn_c+0x8b>	100008b6: R_386_PC32	ssfn_utf8
100008ba:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100008be:	29 f2                	sub    edx,esi
100008c0:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
100008c3:	5a                   	pop    edx
100008c4:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
100008c8:	89 06                	mov    DWORD PTR [esi],eax
100008ca:	03 5b 10             	add    ebx,DWORD PTR [ebx+0x10]
100008cd:	89 df                	mov    edi,ebx
100008cf:	31 db                	xor    ebx,ebx
100008d1:	8a 17                	mov    dl,BYTE PTR [edi]
100008d3:	80 fa ff             	cmp    dl,0xff
100008d6:	75 08                	jne    100008e0 <_ssfn_c+0xb5>
100008d8:	81 c3 ff ff 00 00    	add    ebx,0xffff
100008de:	eb 2a                	jmp    1000090a <_ssfn_c+0xdf>
100008e0:	88 d1                	mov    cl,dl
100008e2:	83 e1 c0             	and    ecx,0xffffffc0
100008e5:	80 f9 c0             	cmp    cl,0xc0
100008e8:	75 16                	jne    10000900 <_ssfn_c+0xd5>
100008ea:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
100008ee:	c1 e2 08             	shl    edx,0x8
100008f1:	83 c7 02             	add    edi,0x2
100008f4:	81 e2 00 3f 00 00    	and    edx,0x3f00
100008fa:	09 ca                	or     edx,ecx
100008fc:	01 d3                	add    ebx,edx
100008fe:	eb 27                	jmp    10000927 <_ssfn_c+0xfc>
10000900:	80 f9 80             	cmp    cl,0x80
10000903:	75 08                	jne    1000090d <_ssfn_c+0xe2>
10000905:	83 e2 3f             	and    edx,0x3f
10000908:	01 d3                	add    ebx,edx
1000090a:	47                   	inc    edi
1000090b:	eb 1a                	jmp    10000927 <_ssfn_c+0xfc>
1000090d:	39 d8                	cmp    eax,ebx
1000090f:	74 38                	je     10000949 <_ssfn_c+0x11e>
10000911:	0f b6 4f 01          	movzx  ecx,BYTE PTR [edi+0x1]
10000915:	83 e2 40             	and    edx,0x40
10000918:	80 fa 01             	cmp    dl,0x1
1000091b:	19 d2                	sbb    edx,edx
1000091d:	83 c2 06             	add    edx,0x6
10000920:	0f af d1             	imul   edx,ecx
10000923:	8d 7c 17 06          	lea    edi,[edi+edx*1+0x6]
10000927:	43                   	inc    ebx
10000928:	81 fb ff ff 10 00    	cmp    ebx,0x10ffff
1000092e:	76 a1                	jbe    100008d1 <_ssfn_c+0xa6>
10000930:	31 ff                	xor    edi,edi
10000932:	eb 15                	jmp    10000949 <_ssfn_c+0x11e>
10000934:	40                   	inc    eax
10000935:	e9 42 ff ff ff       	jmp    1000087c <_ssfn_c+0x51>
1000093a:	29 f7                	sub    edi,esi
1000093c:	05 00 f0 00 00       	add    eax,0xf000
10000941:	89 7d 00             	mov    DWORD PTR [ebp+0x0],edi
10000944:	e9 7b ff ff ff       	jmp    100008c4 <_ssfn_c+0x99>
10000949:	83 c4 14             	add    esp,0x14
1000094c:	89 f8                	mov    eax,edi
1000094e:	5b                   	pop    ebx
1000094f:	5e                   	pop    esi
10000950:	5f                   	pop    edi
10000951:	5d                   	pop    ebp
10000952:	c3                   	ret    

10000953 <_ssfn_zlib_decode>:
10000953:	55                   	push   ebp
10000954:	57                   	push   edi
10000955:	56                   	push   esi
10000956:	53                   	push   ebx
10000957:	81 ec c8 19 00 00    	sub    esp,0x19c8
1000095d:	6a 08                	push   0x8
1000095f:	e8 fc ff ff ff       	call   10000960 <_ssfn_zlib_decode+0xd>	10000960: R_386_PC32	malloc
10000964:	83 c4 10             	add    esp,0x10
10000967:	89 c2                	mov    edx,eax
10000969:	85 c0                	test   eax,eax
1000096b:	0f 84 eb 04 00 00    	je     10000e5c <_ssfn_zlib_decode+0x509>
10000971:	8b 84 24 d0 19 00 00 	mov    eax,DWORD PTR [esp+0x19d0]
10000978:	89 94 24 e0 09 00 00 	mov    DWORD PTR [esp+0x9e0],edx
1000097f:	89 84 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],eax
10000986:	89 94 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],edx
1000098d:	31 c0                	xor    eax,eax
1000098f:	83 c2 08             	add    edx,0x8
10000992:	89 94 24 e4 09 00 00 	mov    DWORD PTR [esp+0x9e4],edx
10000999:	c6 80 20 2f 05 10 08 	mov    BYTE PTR [eax+0x10052f20],0x8	1000099b: R_386_32	.bss
100009a0:	40                   	inc    eax
100009a1:	3d 90 00 00 00       	cmp    eax,0x90
100009a6:	75 f1                	jne    10000999 <_ssfn_zlib_decode+0x46>
100009a8:	c6 80 20 2f 05 10 09 	mov    BYTE PTR [eax+0x10052f20],0x9	100009aa: R_386_32	.bss
100009af:	40                   	inc    eax
100009b0:	3d 00 01 00 00       	cmp    eax,0x100
100009b5:	75 f1                	jne    100009a8 <_ssfn_zlib_decode+0x55>
100009b7:	c6 80 20 2f 05 10 07 	mov    BYTE PTR [eax+0x10052f20],0x7	100009b9: R_386_32	.bss
100009be:	40                   	inc    eax
100009bf:	3d 18 01 00 00       	cmp    eax,0x118
100009c4:	75 f1                	jne    100009b7 <_ssfn_zlib_decode+0x64>
100009c6:	c7 05 38 30 05 10 08 08 08 08 	mov    DWORD PTR ds:0x10053038,0x8080808	100009c8: R_386_32	.bss
100009d0:	c7 05 3c 30 05 10 08 08 08 08 	mov    DWORD PTR ds:0x1005303c,0x8080808	100009d2: R_386_32	.bss
100009da:	31 c0                	xor    eax,eax
100009dc:	c6 80 00 2f 05 10 05 	mov    BYTE PTR [eax+0x10052f00],0x5	100009de: R_386_32	.bss
100009e3:	40                   	inc    eax
100009e4:	83 f8 20             	cmp    eax,0x20
100009e7:	75 f3                	jne    100009dc <_ssfn_zlib_decode+0x89>
100009e9:	c7 84 24 d4 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d4],0x0
100009f4:	c7 84 24 d8 09 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x9d8],0x0
100009ff:	ba 01 00 00 00       	mov    edx,0x1
10000a04:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a0b:	e8 3d fd ff ff       	call   1000074d <_ssfn__zreceive>
10000a10:	ba 02 00 00 00       	mov    edx,0x2
10000a15:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10000a19:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a20:	e8 28 fd ff ff       	call   1000074d <_ssfn__zreceive>
10000a25:	89 c6                	mov    esi,eax
10000a27:	85 c0                	test   eax,eax
10000a29:	0f 85 09 01 00 00    	jne    10000b38 <_ssfn_zlib_decode+0x1e5>
10000a2f:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000a36:	83 e2 07             	and    edx,0x7
10000a39:	74 0c                	je     10000a47 <_ssfn_zlib_decode+0xf4>
10000a3b:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000a42:	e8 06 fd ff ff       	call   1000074d <_ssfn__zreceive>
10000a47:	8b 94 24 d4 09 00 00 	mov    edx,DWORD PTR [esp+0x9d4]
10000a4e:	8b 8c 24 d8 09 00 00 	mov    ecx,DWORD PTR [esp+0x9d8]
10000a55:	31 c0                	xor    eax,eax
10000a57:	31 db                	xor    ebx,ebx
10000a59:	85 d2                	test   edx,edx
10000a5b:	7f 14                	jg     10000a71 <_ssfn_zlib_decode+0x11e>
10000a5d:	84 db                	test   bl,bl
10000a5f:	74 22                	je     10000a83 <_ssfn_zlib_decode+0x130>
10000a61:	89 94 24 d4 09 00 00 	mov    DWORD PTR [esp+0x9d4],edx
10000a68:	89 8c 24 d8 09 00 00 	mov    DWORD PTR [esp+0x9d8],ecx
10000a6f:	eb 12                	jmp    10000a83 <_ssfn_zlib_decode+0x130>
10000a71:	40                   	inc    eax
10000a72:	83 ea 08             	sub    edx,0x8
10000a75:	88 8c 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],cl
10000a7c:	b3 01                	mov    bl,0x1
10000a7e:	c1 e9 08             	shr    ecx,0x8
10000a81:	eb d6                	jmp    10000a59 <_ssfn_zlib_decode+0x106>
10000a83:	83 f8 04             	cmp    eax,0x4
10000a86:	74 1d                	je     10000aa5 <_ssfn_zlib_decode+0x152>
10000a88:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000a8f:	40                   	inc    eax
10000a90:	8d 4a 01             	lea    ecx,[edx+0x1]
10000a93:	89 8c 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],ecx
10000a9a:	8a 12                	mov    dl,BYTE PTR [edx]
10000a9c:	88 94 04 eb 01 00 00 	mov    BYTE PTR [esp+eax*1+0x1eb],dl
10000aa3:	eb de                	jmp    10000a83 <_ssfn_zlib_decode+0x130>
10000aa5:	0f b6 84 24 ec 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ec]
10000aad:	0f b6 94 24 ee 01 00 00 	movzx  edx,BYTE PTR [esp+0x1ee]
10000ab5:	0f b6 9c 24 ed 01 00 00 	movzx  ebx,BYTE PTR [esp+0x1ed]
10000abd:	c1 e3 08             	shl    ebx,0x8
10000ac0:	01 c3                	add    ebx,eax
10000ac2:	0f b6 84 24 ef 01 00 00 	movzx  eax,BYTE PTR [esp+0x1ef]
10000aca:	c1 e0 08             	shl    eax,0x8
10000acd:	01 d0                	add    eax,edx
10000acf:	89 da                	mov    edx,ebx
10000ad1:	81 f2 ff ff 00 00    	xor    edx,0xffff
10000ad7:	39 d0                	cmp    eax,edx
10000ad9:	0f 85 69 03 00 00    	jne    10000e48 <_ssfn_zlib_decode+0x4f5>
10000adf:	8b 94 24 dc 09 00 00 	mov    edx,DWORD PTR [esp+0x9dc]
10000ae6:	8d 04 1a             	lea    eax,[edx+ebx*1]
10000ae9:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000af0:	73 14                	jae    10000b06 <_ssfn_zlib_decode+0x1b3>
10000af2:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000af9:	e8 19 f7 ff ff       	call   10000217 <_ssfn__zexpand>
10000afe:	85 c0                	test   eax,eax
10000b00:	0f 84 42 03 00 00    	je     10000e48 <_ssfn_zlib_decode+0x4f5>
10000b06:	8b 94 24 d0 09 00 00 	mov    edx,DWORD PTR [esp+0x9d0]
10000b0d:	8b 84 24 dc 09 00 00 	mov    eax,DWORD PTR [esp+0x9dc]
10000b14:	39 f3                	cmp    ebx,esi
10000b16:	74 09                	je     10000b21 <_ssfn_zlib_decode+0x1ce>
10000b18:	8a 14 32             	mov    dl,BYTE PTR [edx+esi*1]
10000b1b:	88 14 30             	mov    BYTE PTR [eax+esi*1],dl
10000b1e:	46                   	inc    esi
10000b1f:	eb e5                	jmp    10000b06 <_ssfn_zlib_decode+0x1b3>
10000b21:	01 da                	add    edx,ebx
10000b23:	01 c3                	add    ebx,eax
10000b25:	89 94 24 d0 09 00 00 	mov    DWORD PTR [esp+0x9d0],edx
10000b2c:	89 9c 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebx
10000b33:	e9 fc 02 00 00       	jmp    10000e34 <_ssfn_zlib_decode+0x4e1>
10000b38:	83 f8 03             	cmp    eax,0x3
10000b3b:	0f 84 07 03 00 00    	je     10000e48 <_ssfn_zlib_decode+0x4f5>
10000b41:	4e                   	dec    esi
10000b42:	75 2d                	jne    10000b71 <_ssfn_zlib_decode+0x21e>
10000b44:	b9 20 01 00 00       	mov    ecx,0x120
10000b49:	ba 20 2f 05 10       	mov    edx,0x10052f20	10000b4a: R_386_32	.bss
10000b4e:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000b55:	e8 1c f7 ff ff       	call   10000276 <_ssfn__zbuild_huffman>
10000b5a:	85 c0                	test   eax,eax
10000b5c:	0f 84 e6 02 00 00    	je     10000e48 <_ssfn_zlib_decode+0x4f5>
10000b62:	b9 20 00 00 00       	mov    ecx,0x20
10000b67:	ba 00 2f 05 10       	mov    edx,0x10052f00	10000b68: R_386_32	.bss
10000b6c:	e9 78 01 00 00       	jmp    10000ce9 <_ssfn_zlib_decode+0x396>
10000b71:	ba 05 00 00 00       	mov    edx,0x5
10000b76:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b7d:	8d 5c 24 12          	lea    ebx,[esp+0x12]
10000b81:	e8 c7 fb ff ff       	call   1000074d <_ssfn__zreceive>
10000b86:	89 df                	mov    edi,ebx
10000b88:	ba 05 00 00 00       	mov    edx,0x5
10000b8d:	89 c5                	mov    ebp,eax
10000b8f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000b96:	e8 b2 fb ff ff       	call   1000074d <_ssfn__zreceive>
10000b9b:	ba 04 00 00 00       	mov    edx,0x4
10000ba0:	89 c6                	mov    esi,eax
10000ba2:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000ba9:	e8 9f fb ff ff       	call   1000074d <_ssfn__zreceive>
10000bae:	b9 13 00 00 00       	mov    ecx,0x13
10000bb3:	83 c0 04             	add    eax,0x4
10000bb6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000bba:	31 c0                	xor    eax,eax
10000bbc:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000bbe:	31 ff                	xor    edi,edi
10000bc0:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10000bc4:	7e 1f                	jle    10000be5 <_ssfn_zlib_decode+0x292>
10000bc6:	ba 03 00 00 00       	mov    edx,0x3
10000bcb:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000bd2:	47                   	inc    edi
10000bd3:	e8 75 fb ff ff       	call   1000074d <_ssfn__zreceive>
10000bd8:	0f b6 97 7f 6a 00 10 	movzx  edx,BYTE PTR [edi+0x10006a7f]	10000bdb: R_386_32	.text
10000bdf:	88 44 14 12          	mov    BYTE PTR [esp+edx*1+0x12],al
10000be3:	eb db                	jmp    10000bc0 <_ssfn_zlib_decode+0x26d>
10000be5:	b9 13 00 00 00       	mov    ecx,0x13
10000bea:	89 da                	mov    edx,ebx
10000bec:	8d 84 24 ec 01 00 00 	lea    eax,[esp+0x1ec]
10000bf3:	e8 7e f6 ff ff       	call   10000276 <_ssfn__zbuild_huffman>
10000bf8:	85 c0                	test   eax,eax
10000bfa:	0f 84 48 02 00 00    	je     10000e48 <_ssfn_zlib_decode+0x4f5>
10000c00:	8d 46 01             	lea    eax,[esi+0x1]
10000c03:	81 c5 01 01 00 00    	add    ebp,0x101
10000c09:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10000c0d:	31 f6                	xor    esi,esi
10000c0f:	01 e8                	add    eax,ebp
10000c11:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10000c15:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
10000c19:	0f 8e 9f 00 00 00    	jle    10000cbe <_ssfn_zlib_decode+0x36b>
10000c1f:	8d 94 24 ec 01 00 00 	lea    edx,[esp+0x1ec]
10000c26:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c2d:	e8 35 f5 ff ff       	call   10000167 <_ssfn__zhuffman_decode>
10000c32:	83 f8 12             	cmp    eax,0x12
10000c35:	0f 87 0d 02 00 00    	ja     10000e48 <_ssfn_zlib_decode+0x4f5>
10000c3b:	83 f8 0f             	cmp    eax,0xf
10000c3e:	7f 07                	jg     10000c47 <_ssfn_zlib_decode+0x2f4>
10000c40:	88 44 34 25          	mov    BYTE PTR [esp+esi*1+0x25],al
10000c44:	46                   	inc    esi
10000c45:	eb ce                	jmp    10000c15 <_ssfn_zlib_decode+0x2c2>
10000c47:	83 f8 10             	cmp    eax,0x10
10000c4a:	75 22                	jne    10000c6e <_ssfn_zlib_decode+0x31b>
10000c4c:	ba 02 00 00 00       	mov    edx,0x2
10000c51:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c58:	e8 f0 fa ff ff       	call   1000074d <_ssfn__zreceive>
10000c5d:	85 f6                	test   esi,esi
10000c5f:	8d 58 03             	lea    ebx,[eax+0x3]
10000c62:	0f 84 e0 01 00 00    	je     10000e48 <_ssfn_zlib_decode+0x4f5>
10000c68:	8a 44 34 24          	mov    al,BYTE PTR [esp+esi*1+0x24]
10000c6c:	eb 31                	jmp    10000c9f <_ssfn_zlib_decode+0x34c>
10000c6e:	83 f8 11             	cmp    eax,0x11
10000c71:	75 16                	jne    10000c89 <_ssfn_zlib_decode+0x336>
10000c73:	ba 03 00 00 00       	mov    edx,0x3
10000c78:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c7f:	e8 c9 fa ff ff       	call   1000074d <_ssfn__zreceive>
10000c84:	8d 58 03             	lea    ebx,[eax+0x3]
10000c87:	eb 14                	jmp    10000c9d <_ssfn_zlib_decode+0x34a>
10000c89:	ba 07 00 00 00       	mov    edx,0x7
10000c8e:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000c95:	e8 b3 fa ff ff       	call   1000074d <_ssfn__zreceive>
10000c9a:	8d 58 0b             	lea    ebx,[eax+0xb]
10000c9d:	31 c0                	xor    eax,eax
10000c9f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10000ca3:	29 f2                	sub    edx,esi
10000ca5:	39 da                	cmp    edx,ebx
10000ca7:	0f 8c 9b 01 00 00    	jl     10000e48 <_ssfn_zlib_decode+0x4f5>
10000cad:	8d 54 34 25          	lea    edx,[esp+esi*1+0x25]
10000cb1:	89 d9                	mov    ecx,ebx
10000cb3:	89 d7                	mov    edi,edx
10000cb5:	01 de                	add    esi,ebx
10000cb7:	f3 aa                	rep stos BYTE PTR es:[edi],al
10000cb9:	e9 57 ff ff ff       	jmp    10000c15 <_ssfn_zlib_decode+0x2c2>
10000cbe:	0f 85 84 01 00 00    	jne    10000e48 <_ssfn_zlib_decode+0x4f5>
10000cc4:	89 e9                	mov    ecx,ebp
10000cc6:	8d 54 24 25          	lea    edx,[esp+0x25]
10000cca:	8d 84 24 e8 09 00 00 	lea    eax,[esp+0x9e8]
10000cd1:	e8 a0 f5 ff ff       	call   10000276 <_ssfn__zbuild_huffman>
10000cd6:	85 c0                	test   eax,eax
10000cd8:	0f 84 6a 01 00 00    	je     10000e48 <_ssfn_zlib_decode+0x4f5>
10000cde:	8d 44 24 25          	lea    eax,[esp+0x25]
10000ce2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10000ce6:	8d 14 28             	lea    edx,[eax+ebp*1]
10000ce9:	8d 84 24 cc 11 00 00 	lea    eax,[esp+0x11cc]
10000cf0:	e8 81 f5 ff ff       	call   10000276 <_ssfn__zbuild_huffman>
10000cf5:	85 c0                	test   eax,eax
10000cf7:	0f 84 4b 01 00 00    	je     10000e48 <_ssfn_zlib_decode+0x4f5>
10000cfd:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000d04:	8d 94 24 e8 09 00 00 	lea    edx,[esp+0x9e8]
10000d0b:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d12:	e8 50 f4 ff ff       	call   10000167 <_ssfn__zhuffman_decode>
10000d17:	89 c3                	mov    ebx,eax
10000d19:	3d ff 00 00 00       	cmp    eax,0xff
10000d1e:	7f 34                	jg     10000d54 <_ssfn_zlib_decode+0x401>
10000d20:	85 c0                	test   eax,eax
10000d22:	0f 88 20 01 00 00    	js     10000e48 <_ssfn_zlib_decode+0x4f5>
10000d28:	39 ac 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],ebp
10000d2f:	77 1d                	ja     10000d4e <_ssfn_zlib_decode+0x3fb>
10000d31:	89 ea                	mov    edx,ebp
10000d33:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d3a:	e8 d8 f4 ff ff       	call   10000217 <_ssfn__zexpand>
10000d3f:	85 c0                	test   eax,eax
10000d41:	0f 84 01 01 00 00    	je     10000e48 <_ssfn_zlib_decode+0x4f5>
10000d47:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000d4e:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
10000d51:	45                   	inc    ebp
10000d52:	eb b0                	jmp    10000d04 <_ssfn_zlib_decode+0x3b1>
10000d54:	3d 00 01 00 00       	cmp    eax,0x100
10000d59:	75 0c                	jne    10000d67 <_ssfn_zlib_decode+0x414>
10000d5b:	89 ac 24 dc 09 00 00 	mov    DWORD PTR [esp+0x9dc],ebp
10000d62:	e9 cd 00 00 00       	jmp    10000e34 <_ssfn_zlib_decode+0x4e1>
10000d67:	8d 80 ff fe ff ff    	lea    eax,[eax-0x101]
10000d6d:	8b 14 85 a0 6b 00 10 	mov    edx,DWORD PTR [eax*4+0x10006ba0]	10000d70: R_386_32	.text
10000d74:	8b 1c 85 20 6c 00 10 	mov    ebx,DWORD PTR [eax*4+0x10006c20]	10000d77: R_386_32	.text
10000d7b:	85 d2                	test   edx,edx
10000d7d:	74 0e                	je     10000d8d <_ssfn_zlib_decode+0x43a>
10000d7f:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d86:	e8 c2 f9 ff ff       	call   1000074d <_ssfn__zreceive>
10000d8b:	01 c3                	add    ebx,eax
10000d8d:	8d 94 24 cc 11 00 00 	lea    edx,[esp+0x11cc]
10000d94:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000d9b:	e8 c7 f3 ff ff       	call   10000167 <_ssfn__zhuffman_decode>
10000da0:	85 c0                	test   eax,eax
10000da2:	0f 88 a0 00 00 00    	js     10000e48 <_ssfn_zlib_decode+0x4f5>
10000da8:	8b 14 85 a0 6a 00 10 	mov    edx,DWORD PTR [eax*4+0x10006aa0]	10000dab: R_386_32	.text
10000daf:	8b 3c 85 20 6b 00 10 	mov    edi,DWORD PTR [eax*4+0x10006b20]	10000db2: R_386_32	.text
10000db6:	85 d2                	test   edx,edx
10000db8:	74 0e                	je     10000dc8 <_ssfn_zlib_decode+0x475>
10000dba:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000dc1:	e8 87 f9 ff ff       	call   1000074d <_ssfn__zreceive>
10000dc6:	01 c7                	add    edi,eax
10000dc8:	89 e8                	mov    eax,ebp
10000dca:	2b 84 24 e0 09 00 00 	sub    eax,DWORD PTR [esp+0x9e0]
10000dd1:	39 f8                	cmp    eax,edi
10000dd3:	7c 73                	jl     10000e48 <_ssfn_zlib_decode+0x4f5>
10000dd5:	8d 44 1d 00          	lea    eax,[ebp+ebx*1+0x0]
10000dd9:	39 84 24 e4 09 00 00 	cmp    DWORD PTR [esp+0x9e4],eax
10000de0:	73 19                	jae    10000dfb <_ssfn_zlib_decode+0x4a8>
10000de2:	89 ea                	mov    edx,ebp
10000de4:	8d 84 24 d0 09 00 00 	lea    eax,[esp+0x9d0]
10000deb:	e8 27 f4 ff ff       	call   10000217 <_ssfn__zexpand>
10000df0:	85 c0                	test   eax,eax
10000df2:	74 54                	je     10000e48 <_ssfn_zlib_decode+0x4f5>
10000df4:	8b ac 24 dc 09 00 00 	mov    ebp,DWORD PTR [esp+0x9dc]
10000dfb:	89 ee                	mov    esi,ebp
10000dfd:	29 fe                	sub    esi,edi
10000dff:	4f                   	dec    edi
10000e00:	75 19                	jne    10000e1b <_ssfn_zlib_decode+0x4c8>
10000e02:	85 db                	test   ebx,ebx
10000e04:	0f 84 fa fe ff ff    	je     10000d04 <_ssfn_zlib_decode+0x3b1>
10000e0a:	8a 06                	mov    al,BYTE PTR [esi]
10000e0c:	01 eb                	add    ebx,ebp
10000e0e:	45                   	inc    ebp
10000e0f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
10000e12:	39 dd                	cmp    ebp,ebx
10000e14:	75 f8                	jne    10000e0e <_ssfn_zlib_decode+0x4bb>
10000e16:	e9 e9 fe ff ff       	jmp    10000d04 <_ssfn_zlib_decode+0x3b1>
10000e1b:	85 db                	test   ebx,ebx
10000e1d:	0f 84 e1 fe ff ff    	je     10000d04 <_ssfn_zlib_decode+0x3b1>
10000e23:	8d 04 1e             	lea    eax,[esi+ebx*1]
10000e26:	89 ef                	mov    edi,ebp
10000e28:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
10000e29:	39 f0                	cmp    eax,esi
10000e2b:	75 fb                	jne    10000e28 <_ssfn_zlib_decode+0x4d5>
10000e2d:	01 dd                	add    ebp,ebx
10000e2f:	e9 d0 fe ff ff       	jmp    10000d04 <_ssfn_zlib_decode+0x3b1>
10000e34:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10000e39:	0f 84 c0 fb ff ff    	je     100009ff <_ssfn_zlib_decode+0xac>
10000e3f:	8b 84 24 e0 09 00 00 	mov    eax,DWORD PTR [esp+0x9e0]
10000e46:	eb 14                	jmp    10000e5c <_ssfn_zlib_decode+0x509>
10000e48:	83 ec 0c             	sub    esp,0xc
10000e4b:	ff b4 24 ec 09 00 00 	push   DWORD PTR [esp+0x9ec]
10000e52:	e8 fc ff ff ff       	call   10000e53 <_ssfn_zlib_decode+0x500>	10000e53: R_386_PC32	free
10000e57:	83 c4 10             	add    esp,0x10
10000e5a:	31 c0                	xor    eax,eax
10000e5c:	81 c4 bc 19 00 00    	add    esp,0x19bc
10000e62:	5b                   	pop    ebx
10000e63:	5e                   	pop    esi
10000e64:	5f                   	pop    edi
10000e65:	5d                   	pop    ebp
10000e66:	c3                   	ret    

10000e67 <ssfn_load>:
10000e67:	55                   	push   ebp
10000e68:	57                   	push   edi
10000e69:	56                   	push   esi
10000e6a:	53                   	push   ebx
10000e6b:	83 ec 1c             	sub    esp,0x1c
10000e6e:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
10000e72:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
10000e76:	85 ff                	test   edi,edi
10000e78:	0f 84 d0 01 00 00    	je     1000104e <ssfn_load+0x1e7>
10000e7e:	85 f6                	test   esi,esi
10000e80:	0f 84 c8 01 00 00    	je     1000104e <ssfn_load+0x1e7>
10000e86:	80 3e 1f             	cmp    BYTE PTR [esi],0x1f
10000e89:	0f 85 a8 00 00 00    	jne    10000f37 <ssfn_load+0xd0>
10000e8f:	80 7e 01 8b          	cmp    BYTE PTR [esi+0x1],0x8b
10000e93:	0f 85 9e 00 00 00    	jne    10000f37 <ssfn_load+0xd0>
10000e99:	80 7e 02 08          	cmp    BYTE PTR [esi+0x2],0x8
10000e9d:	74 0a                	je     10000ea9 <ssfn_load+0x42>
10000e9f:	bd fe ff ff ff       	mov    ebp,0xfffffffe
10000ea4:	e9 aa 01 00 00       	jmp    10001053 <ssfn_load+0x1ec>
10000ea9:	8a 46 03             	mov    al,BYTE PTR [esi+0x3]
10000eac:	a8 04                	test   al,0x4
10000eae:	75 05                	jne    10000eb5 <ssfn_load+0x4e>
10000eb0:	83 c6 0a             	add    esi,0xa
10000eb3:	eb 08                	jmp    10000ebd <ssfn_load+0x56>
10000eb5:	0f b6 56 0a          	movzx  edx,BYTE PTR [esi+0xa]
10000eb9:	8d 74 16 0c          	lea    esi,[esi+edx*1+0xc]
10000ebd:	a8 08                	test   al,0x8
10000ebf:	74 07                	je     10000ec8 <ssfn_load+0x61>
10000ec1:	46                   	inc    esi
10000ec2:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000ec6:	eb f7                	jmp    10000ebf <ssfn_load+0x58>
10000ec8:	a8 10                	test   al,0x10
10000eca:	74 07                	je     10000ed3 <ssfn_load+0x6c>
10000ecc:	46                   	inc    esi
10000ecd:	80 7e ff 00          	cmp    BYTE PTR [esi-0x1],0x0
10000ed1:	eb f7                	jmp    10000eca <ssfn_load+0x63>
10000ed3:	83 ec 0c             	sub    esp,0xc
10000ed6:	56                   	push   esi
10000ed7:	e8 fc ff ff ff       	call   10000ed8 <ssfn_load+0x71>	10000ed8: R_386_PC32	_ssfn_zlib_decode
10000edc:	83 c4 10             	add    esp,0x10
10000edf:	89 c6                	mov    esi,eax
10000ee1:	85 c0                	test   eax,eax
10000ee3:	74 ba                	je     10000e9f <ssfn_load+0x38>
10000ee5:	50                   	push   eax
10000ee6:	50                   	push   eax
10000ee7:	8b 87 78 f5 00 00    	mov    eax,DWORD PTR [edi+0xf578]
10000eed:	8d 04 85 04 00 00 00 	lea    eax,[eax*4+0x4]
10000ef4:	50                   	push   eax
10000ef5:	ff b7 70 f5 00 00    	push   DWORD PTR [edi+0xf570]
10000efb:	e8 fc ff ff ff       	call   10000efc <ssfn_load+0x95>	10000efc: R_386_PC32	realloc
10000f00:	83 c4 10             	add    esp,0x10
10000f03:	89 87 70 f5 00 00    	mov    DWORD PTR [edi+0xf570],eax
10000f09:	85 c0                	test   eax,eax
10000f0b:	75 0f                	jne    10000f1c <ssfn_load+0xb5>
10000f0d:	c7 87 78 f5 00 00 00 00 00 00 	mov    DWORD PTR [edi+0xf578],0x0
10000f17:	e9 1a 01 00 00       	jmp    10001036 <ssfn_load+0x1cf>
10000f1c:	8b 97 78 f5 00 00    	mov    edx,DWORD PTR [edi+0xf578]
10000f22:	8d 4a 01             	lea    ecx,[edx+0x1]
10000f25:	89 8f 78 f5 00 00    	mov    DWORD PTR [edi+0xf578],ecx
10000f2b:	89 34 90             	mov    DWORD PTR [eax+edx*4],esi
10000f2e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
10000f31:	01 87 7c f5 00 00    	add    DWORD PTR [edi+0xf57c],eax
10000f37:	50                   	push   eax
10000f38:	6a 04                	push   0x4
10000f3a:	68 48 69 00 10       	push   0x10006948	10000f3b: R_386_32	.text
10000f3f:	56                   	push   esi
10000f40:	e8 fc ff ff ff       	call   10000f41 <ssfn_load+0xda>	10000f41: R_386_PC32	memcmp
10000f45:	83 c4 10             	add    esp,0x10
10000f48:	89 c5                	mov    ebp,eax
10000f4a:	85 c0                	test   eax,eax
10000f4c:	75 29                	jne    10000f77 <ssfn_load+0x110>
10000f4e:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000f51:	01 f3                	add    ebx,esi
10000f53:	83 c6 08             	add    esi,0x8
10000f56:	39 de                	cmp    esi,ebx
10000f58:	0f 83 f5 00 00 00    	jae    10001053 <ssfn_load+0x1ec>
10000f5e:	50                   	push   eax
10000f5f:	50                   	push   eax
10000f60:	56                   	push   esi
10000f61:	57                   	push   edi
10000f62:	e8 fc ff ff ff       	call   10000f63 <ssfn_load+0xfc>	10000f63: R_386_PC32	ssfn_load
10000f67:	83 c4 10             	add    esp,0x10
10000f6a:	85 c0                	test   eax,eax
10000f6c:	0f 85 e1 00 00 00    	jne    10001053 <ssfn_load+0x1ec>
10000f72:	03 76 04             	add    esi,DWORD PTR [esi+0x4]
10000f75:	eb df                	jmp    10000f56 <ssfn_load+0xef>
10000f77:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
10000f7a:	83 e0 0f             	and    eax,0xf
10000f7d:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10000f81:	53                   	push   ebx
10000f82:	6a 04                	push   0x4
10000f84:	68 4d 69 00 10       	push   0x1000694d	10000f85: R_386_32	.text
10000f89:	56                   	push   esi
10000f8a:	e8 fc ff ff ff       	call   10000f8b <ssfn_load+0x124>	10000f8b: R_386_PC32	memcmp
10000f8f:	83 c4 10             	add    esp,0x10
10000f92:	89 c5                	mov    ebp,eax
10000f94:	85 c0                	test   eax,eax
10000f96:	0f 85 03 ff ff ff    	jne    10000e9f <ssfn_load+0x38>
10000f9c:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
10000f9f:	8d 44 1e fc          	lea    eax,[esi+ebx*1-0x4]
10000fa3:	51                   	push   ecx
10000fa4:	6a 04                	push   0x4
10000fa6:	68 52 69 00 10       	push   0x10006952	10000fa7: R_386_32	.text
10000fab:	50                   	push   eax
10000fac:	e8 fc ff ff ff       	call   10000fad <ssfn_load+0x146>	10000fad: R_386_PC32	memcmp
10000fb1:	83 c4 10             	add    esp,0x10
10000fb4:	85 c0                	test   eax,eax
10000fb6:	0f 85 e3 fe ff ff    	jne    10000e9f <ssfn_load+0x38>
10000fbc:	80 7c 24 0f 04       	cmp    BYTE PTR [esp+0xf],0x4
10000fc1:	0f 87 d8 fe ff ff    	ja     10000e9f <ssfn_load+0x38>
10000fc7:	0f b7 4e 0e          	movzx  ecx,WORD PTR [esi+0xe]
10000fcb:	39 cb                	cmp    ebx,ecx
10000fcd:	0f 86 cc fe ff ff    	jbe    10000e9f <ssfn_load+0x38>
10000fd3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
10000fd6:	39 c3                	cmp    ebx,eax
10000fd8:	0f 86 c1 fe ff ff    	jbe    10000e9f <ssfn_load+0x38>
10000fde:	3b 5e 14             	cmp    ebx,DWORD PTR [esi+0x14]
10000fe1:	0f 86 b8 fe ff ff    	jbe    10000e9f <ssfn_load+0x38>
10000fe7:	3b 5e 18             	cmp    ebx,DWORD PTR [esi+0x18]
10000fea:	0f 86 af fe ff ff    	jbe    10000e9f <ssfn_load+0x38>
10000ff0:	3b 5e 1c             	cmp    ebx,DWORD PTR [esi+0x1c]
10000ff3:	0f 86 a6 fe ff ff    	jbe    10000e9f <ssfn_load+0x38>
10000ff9:	39 c1                	cmp    ecx,eax
10000ffb:	0f 83 9e fe ff ff    	jae    10000e9f <ssfn_load+0x38>
10001001:	0f b6 5c 24 0f       	movzx  ebx,BYTE PTR [esp+0xf]
10001006:	8d 1c 9f             	lea    ebx,[edi+ebx*4]
10001009:	8b 83 a4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5a4]
1000100f:	40                   	inc    eax
10001010:	89 83 a4 f5 00 00    	mov    DWORD PTR [ebx+0xf5a4],eax
10001016:	52                   	push   edx
10001017:	c1 e0 02             	shl    eax,0x2
1000101a:	52                   	push   edx
1000101b:	50                   	push   eax
1000101c:	ff 33                	push   DWORD PTR [ebx]
1000101e:	e8 fc ff ff ff       	call   1000101f <ssfn_load+0x1b8>	1000101f: R_386_PC32	realloc
10001023:	83 c4 10             	add    esp,0x10
10001026:	89 03                	mov    DWORD PTR [ebx],eax
10001028:	85 c0                	test   eax,eax
1000102a:	75 0f                	jne    1000103b <ssfn_load+0x1d4>
1000102c:	c7 83 a4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5a4],0x0
10001036:	83 cd ff             	or     ebp,0xffffffff
10001039:	eb 18                	jmp    10001053 <ssfn_load+0x1ec>
1000103b:	8b 93 a4 f5 00 00    	mov    edx,DWORD PTR [ebx+0xf5a4]
10001041:	89 74 90 fc          	mov    DWORD PTR [eax+edx*4-0x4],esi
10001045:	89 f8                	mov    eax,edi
10001047:	e8 ad f3 ff ff       	call   100003f9 <_ssfn_fc.part.1>
1000104c:	eb 05                	jmp    10001053 <ssfn_load+0x1ec>
1000104e:	bd fc ff ff ff       	mov    ebp,0xfffffffc
10001053:	83 c4 1c             	add    esp,0x1c
10001056:	89 e8                	mov    eax,ebp
10001058:	5b                   	pop    ebx
10001059:	5e                   	pop    esi
1000105a:	5f                   	pop    edi
1000105b:	5d                   	pop    ebp
1000105c:	c3                   	ret    

1000105d <ssfn_free>:
1000105d:	57                   	push   edi
1000105e:	56                   	push   esi
1000105f:	53                   	push   ebx
10001060:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10001064:	85 db                	test   ebx,ebx
10001066:	74 7e                	je     100010e6 <ssfn_free+0x89>
10001068:	89 d8                	mov    eax,ebx
1000106a:	e8 8a f3 ff ff       	call   100003f9 <_ssfn_fc.part.1>
1000106f:	83 bb 70 f5 00 00 00 	cmp    DWORD PTR [ebx+0xf570],0x0
10001076:	74 32                	je     100010aa <ssfn_free+0x4d>
10001078:	31 f6                	xor    esi,esi
1000107a:	8b 83 70 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf570]
10001080:	39 b3 78 f5 00 00    	cmp    DWORD PTR [ebx+0xf578],esi
10001086:	7e 16                	jle    1000109e <ssfn_free+0x41>
10001088:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
1000108b:	85 c0                	test   eax,eax
1000108d:	74 0c                	je     1000109b <ssfn_free+0x3e>
1000108f:	83 ec 0c             	sub    esp,0xc
10001092:	50                   	push   eax
10001093:	e8 fc ff ff ff       	call   10001094 <ssfn_free+0x37>	10001094: R_386_PC32	free
10001098:	83 c4 10             	add    esp,0x10
1000109b:	46                   	inc    esi
1000109c:	eb dc                	jmp    1000107a <ssfn_free+0x1d>
1000109e:	83 ec 0c             	sub    esp,0xc
100010a1:	50                   	push   eax
100010a2:	e8 fc ff ff ff       	call   100010a3 <ssfn_free+0x46>	100010a3: R_386_PC32	free
100010a7:	83 c4 10             	add    esp,0x10
100010aa:	31 f6                	xor    esi,esi
100010ac:	8b 04 b3             	mov    eax,DWORD PTR [ebx+esi*4]
100010af:	85 c0                	test   eax,eax
100010b1:	74 0c                	je     100010bf <ssfn_free+0x62>
100010b3:	83 ec 0c             	sub    esp,0xc
100010b6:	50                   	push   eax
100010b7:	e8 fc ff ff ff       	call   100010b8 <ssfn_free+0x5b>	100010b8: R_386_PC32	free
100010bc:	83 c4 10             	add    esp,0x10
100010bf:	46                   	inc    esi
100010c0:	83 fe 05             	cmp    esi,0x5
100010c3:	75 e7                	jne    100010ac <ssfn_free+0x4f>
100010c5:	8b 83 6c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf56c]
100010cb:	85 c0                	test   eax,eax
100010cd:	74 0c                	je     100010db <ssfn_free+0x7e>
100010cf:	83 ec 0c             	sub    esp,0xc
100010d2:	50                   	push   eax
100010d3:	e8 fc ff ff ff       	call   100010d4 <ssfn_free+0x77>	100010d4: R_386_PC32	free
100010d8:	83 c4 10             	add    esp,0x10
100010db:	b9 72 3d 00 00       	mov    ecx,0x3d72
100010e0:	31 c0                	xor    eax,eax
100010e2:	89 df                	mov    edi,ebx
100010e4:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100010e6:	5b                   	pop    ebx
100010e7:	5e                   	pop    esi
100010e8:	5f                   	pop    edi
100010e9:	c3                   	ret    

100010ea <ssfn_mem>:
100010ea:	55                   	push   ebp
100010eb:	31 c0                	xor    eax,eax
100010ed:	57                   	push   edi
100010ee:	56                   	push   esi
100010ef:	53                   	push   ebx
100010f0:	83 ec 08             	sub    esp,0x8
100010f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
100010f7:	85 d2                	test   edx,edx
100010f9:	0f 84 8e 00 00 00    	je     1000118d <ssfn_mem+0xa3>
100010ff:	b8 c8 f5 00 00       	mov    eax,0xf5c8
10001104:	31 c9                	xor    ecx,ecx
10001106:	8b 9c 8a a4 f5 00 00 	mov    ebx,DWORD PTR [edx+ecx*4+0xf5a4]
1000110d:	41                   	inc    ecx
1000110e:	8d 04 98             	lea    eax,[eax+ebx*4]
10001111:	83 f9 05             	cmp    ecx,0x5
10001114:	75 f0                	jne    10001106 <ssfn_mem+0x1c>
10001116:	03 82 7c f5 00 00    	add    eax,DWORD PTR [edx+0xf57c]
1000111c:	31 c9                	xor    ecx,ecx
1000111e:	8b b4 8a 28 f5 00 00 	mov    esi,DWORD PTR [edx+ecx*4+0xf528]
10001125:	89 34 24             	mov    DWORD PTR [esp],esi
10001128:	85 f6                	test   esi,esi
1000112a:	74 48                	je     10001174 <ssfn_mem+0x8a>
1000112c:	31 db                	xor    ebx,ebx
1000112e:	8b 34 24             	mov    esi,DWORD PTR [esp]
10001131:	8b 3c 9e             	mov    edi,DWORD PTR [esi+ebx*4]
10001134:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
10001138:	85 ff                	test   edi,edi
1000113a:	74 2a                	je     10001166 <ssfn_mem+0x7c>
1000113c:	31 f6                	xor    esi,esi
1000113e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
10001142:	8b 2c b7             	mov    ebp,DWORD PTR [edi+esi*4]
10001145:	85 ed                	test   ebp,ebp
10001147:	74 0f                	je     10001158 <ssfn_mem+0x6e>
10001149:	0f b7 7d 00          	movzx  edi,WORD PTR [ebp+0x0]
1000114d:	0f b6 6d 02          	movzx  ebp,BYTE PTR [ebp+0x2]
10001151:	0f af fd             	imul   edi,ebp
10001154:	8d 44 38 08          	lea    eax,[eax+edi*1+0x8]
10001158:	46                   	inc    esi
10001159:	81 fe 00 01 00 00    	cmp    esi,0x100
1000115f:	75 dd                	jne    1000113e <ssfn_mem+0x54>
10001161:	05 00 04 00 00       	add    eax,0x400
10001166:	43                   	inc    ebx
10001167:	81 fb 00 01 00 00    	cmp    ebx,0x100
1000116d:	75 bf                	jne    1000112e <ssfn_mem+0x44>
1000116f:	05 00 04 00 00       	add    eax,0x400
10001174:	41                   	inc    ecx
10001175:	83 f9 11             	cmp    ecx,0x11
10001178:	75 a4                	jne    1000111e <ssfn_mem+0x34>
1000117a:	83 ba 6c f5 00 00 00 	cmp    DWORD PTR [edx+0xf56c],0x0
10001181:	74 0a                	je     1000118d <ssfn_mem+0xa3>
10001183:	8b 92 84 f5 00 00    	mov    edx,DWORD PTR [edx+0xf584]
10001189:	01 d2                	add    edx,edx
1000118b:	01 d0                	add    eax,edx
1000118d:	83 c4 08             	add    esp,0x8
10001190:	5b                   	pop    ebx
10001191:	5e                   	pop    esi
10001192:	5f                   	pop    edi
10001193:	5d                   	pop    ebp
10001194:	c3                   	ret    

10001195 <ssfn_select>:
10001195:	55                   	push   ebp
10001196:	57                   	push   edi
10001197:	56                   	push   esi
10001198:	53                   	push   ebx
10001199:	83 ec 1c             	sub    esp,0x1c
1000119c:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
100011a0:	85 db                	test   ebx,ebx
100011a2:	75 0a                	jne    100011ae <ssfn_select+0x19>
100011a4:	be fc ff ff ff       	mov    esi,0xfffffffc
100011a9:	e9 13 01 00 00       	jmp    100012c1 <ssfn_select+0x12c>
100011ae:	89 d8                	mov    eax,ebx
100011b0:	e8 44 f2 ff ff       	call   100003f9 <_ssfn_fc.part.1>
100011b5:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100011b9:	81 e6 00 e0 ff ff    	and    esi,0xffffe000
100011bf:	0f 85 e9 00 00 00    	jne    100012ae <ssfn_select+0x119>
100011c5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100011c9:	83 e8 08             	sub    eax,0x8
100011cc:	3d b8 00 00 00       	cmp    eax,0xb8
100011d1:	0f 87 de 00 00 00    	ja     100012b5 <ssfn_select+0x120>
100011d7:	81 7c 24 34 fe 00 00 00 	cmp    DWORD PTR [esp+0x34],0xfe
100011df:	75 76                	jne    10001257 <ssfn_select+0xc2>
100011e1:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
100011e6:	74 bc                	je     100011a4 <ssfn_select+0xf>
100011e8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100011ec:	80 38 00             	cmp    BYTE PTR [eax],0x0
100011ef:	74 b3                	je     100011a4 <ssfn_select+0xf>
100011f1:	31 ed                	xor    ebp,ebp
100011f3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100011f7:	80 3c 28 00          	cmp    BYTE PTR [eax+ebp*1],0x0
100011fb:	74 03                	je     10001200 <ssfn_select+0x6b>
100011fd:	45                   	inc    ebp
100011fe:	eb f3                	jmp    100011f3 <ssfn_select+0x5e>
10001200:	8d 43 14             	lea    eax,[ebx+0x14]
10001203:	89 df                	mov    edi,ebx
10001205:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10001209:	8b 87 a4 f5 00 00    	mov    eax,DWORD PTR [edi+0xf5a4]
1000120f:	31 d2                	xor    edx,edx
10001211:	89 04 24             	mov    DWORD PTR [esp],eax
10001214:	39 14 24             	cmp    DWORD PTR [esp],edx
10001217:	7e 33                	jle    1000124c <ssfn_select+0xb7>
10001219:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
1000121d:	8b 07                	mov    eax,DWORD PTR [edi]
1000121f:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
10001222:	50                   	push   eax
10001223:	8d 41 20             	lea    eax,[ecx+0x20]
10001226:	55                   	push   ebp
10001227:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
1000122b:	50                   	push   eax
1000122c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
10001230:	e8 fc ff ff ff       	call   10001231 <ssfn_select+0x9c>	10001231: R_386_PC32	memcmp
10001235:	83 c4 10             	add    esp,0x10
10001238:	85 c0                	test   eax,eax
1000123a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
1000123e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10001242:	75 05                	jne    10001249 <ssfn_select+0xb4>
10001244:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
10001247:	eb 34                	jmp    1000127d <ssfn_select+0xe8>
10001249:	42                   	inc    edx
1000124a:	eb c8                	jmp    10001214 <ssfn_select+0x7f>
1000124c:	83 c7 04             	add    edi,0x4
1000124f:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
10001253:	75 b4                	jne    10001209 <ssfn_select+0x74>
10001255:	eb 65                	jmp    100012bc <ssfn_select+0x127>
10001257:	81 7c 24 34 ff 00 00 00 	cmp    DWORD PTR [esp+0x34],0xff
1000125f:	74 15                	je     10001276 <ssfn_select+0xe1>
10001261:	83 7c 24 34 04       	cmp    DWORD PTR [esp+0x34],0x4
10001266:	7f 54                	jg     100012bc <ssfn_select+0x127>
10001268:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
1000126c:	83 bc 83 a4 f5 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0xf5a4],0x0
10001274:	74 46                	je     100012bc <ssfn_select+0x127>
10001276:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
1000127d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001281:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
10001288:	89 83 b8 f5 00 00    	mov    DWORD PTR [ebx+0xf5b8],eax
1000128e:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
10001298:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
1000129c:	89 83 bc f5 00 00    	mov    DWORD PTR [ebx+0xf5bc],eax
100012a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
100012a6:	89 83 c0 f5 00 00    	mov    DWORD PTR [ebx+0xf5c0],eax
100012ac:	eb 13                	jmp    100012c1 <ssfn_select+0x12c>
100012ae:	be fb ff ff ff       	mov    esi,0xfffffffb
100012b3:	eb 0c                	jmp    100012c1 <ssfn_select+0x12c>
100012b5:	be fa ff ff ff       	mov    esi,0xfffffffa
100012ba:	eb 05                	jmp    100012c1 <ssfn_select+0x12c>
100012bc:	be fd ff ff ff       	mov    esi,0xfffffffd
100012c1:	83 c4 1c             	add    esp,0x1c
100012c4:	89 f0                	mov    eax,esi
100012c6:	5b                   	pop    ebx
100012c7:	5e                   	pop    esi
100012c8:	5f                   	pop    edi
100012c9:	5d                   	pop    ebp
100012ca:	c3                   	ret    

100012cb <ssfn_render>:
100012cb:	55                   	push   ebp
100012cc:	57                   	push   edi
100012cd:	56                   	push   esi
100012ce:	53                   	push   ebx
100012cf:	81 ec dc 05 01 00    	sub    esp,0x105dc
100012d5:	8b ac 24 f0 05 01 00 	mov    ebp,DWORD PTR [esp+0x105f0]
100012dc:	c7 84 24 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc8],0x0
100012e7:	85 ed                	test   ebp,ebp
100012e9:	0f 94 c2             	sete   dl
100012ec:	83 bc 24 f8 05 01 00 00 	cmp    DWORD PTR [esp+0x105f8],0x0
100012f4:	0f 94 c0             	sete   al
100012f7:	08 c2                	or     dl,al
100012f9:	74 0a                	je     10001305 <ssfn_render+0x3a>
100012fb:	b9 fc ff ff ff       	mov    ecx,0xfffffffc
10001300:	e9 14 1e 00 00       	jmp    10003119 <ssfn_render+0x1e4e>
10001305:	8b 84 24 f8 05 01 00 	mov    eax,DWORD PTR [esp+0x105f8]
1000130c:	31 c9                	xor    ecx,ecx
1000130e:	8a 00                	mov    al,BYTE PTR [eax]
10001310:	84 c0                	test   al,al
10001312:	0f 84 01 1e 00 00    	je     10003119 <ssfn_render+0x1e4e>
10001318:	3c 0d                	cmp    al,0xd
1000131a:	75 0f                	jne    1000132b <ssfn_render+0x60>
1000131c:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10001323:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
10001329:	eb 31                	jmp    1000135c <ssfn_render+0x91>
1000132b:	3c 0a                	cmp    al,0xa
1000132d:	75 37                	jne    10001366 <ssfn_render+0x9b>
1000132f:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10001336:	66 c7 40 0a 00 00    	mov    WORD PTR [eax+0xa],0x0
1000133c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
1000133f:	8b 85 c4 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c4]
10001345:	85 c0                	test   eax,eax
10001347:	75 06                	jne    1000134f <ssfn_render+0x84>
10001349:	8b 85 c0 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5c0]
1000134f:	01 d0                	add    eax,edx
10001351:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10001358:	66 89 47 0c          	mov    WORD PTR [edi+0xc],ax
1000135c:	b9 01 00 00 00       	mov    ecx,0x1
10001361:	e9 b3 1d 00 00       	jmp    10003119 <ssfn_render+0x1e4e>
10001366:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
10001369:	85 c0                	test   eax,eax
1000136b:	74 3e                	je     100013ab <ssfn_render+0xe0>
1000136d:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
10001370:	8d b4 24 c0 00 00 00 	lea    esi,[esp+0xc0]
10001377:	56                   	push   esi
10001378:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
1000137f:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001386:	e8 a0 f4 ff ff       	call   1000082b <_ssfn_c>
1000138b:	5b                   	pop    ebx
1000138c:	85 c0                	test   eax,eax
1000138e:	0f 85 71 02 00 00    	jne    10001605 <ssfn_render+0x33a>
10001394:	8b 95 bc f5 00 00    	mov    edx,DWORD PTR [ebp+0xf5bc]
1000139a:	81 e2 00 01 00 00    	and    edx,0x100
100013a0:	0f 84 fd 01 00 00    	je     100015a3 <ssfn_render+0x2d8>
100013a6:	e9 1d 02 00 00       	jmp    100015c8 <ssfn_render+0x2fd>
100013ab:	8b 85 b8 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5b8]
100013b1:	c7 45 18 00 00 00 00 	mov    DWORD PTR [ebp+0x18],0x0
100013b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100013bc:	3d fd 00 00 00       	cmp    eax,0xfd
100013c1:	7f 08                	jg     100013cb <ssfn_render+0x100>
100013c3:	89 c3                	mov    ebx,eax
100013c5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100013c9:	eb 3f                	jmp    1000140a <ssfn_render+0x13f>
100013cb:	31 db                	xor    ebx,ebx
100013cd:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100013d5:	eb 33                	jmp    1000140a <ssfn_render+0x13f>
100013d7:	85 c0                	test   eax,eax
100013d9:	0f 84 64 01 00 00    	je     10001543 <ssfn_render+0x278>
100013df:	43                   	inc    ebx
100013e0:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
100013e4:	7e 28                	jle    1000140e <ssfn_render+0x143>
100013e6:	85 c0                	test   eax,eax
100013e8:	0f 85 17 02 00 00    	jne    10001605 <ssfn_render+0x33a>
100013ee:	31 db                	xor    ebx,ebx
100013f0:	c7 44 24 10 04 00 00 00 	mov    DWORD PTR [esp+0x10],0x4
100013f8:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
10001400:	74 92                	je     10001394 <ssfn_render+0xc9>
10001402:	c7 44 24 0c ff 00 00 00 	mov    DWORD PTR [esp+0xc],0xff
1000140a:	31 c0                	xor    eax,eax
1000140c:	eb d2                	jmp    100013e0 <ssfn_render+0x115>
1000140e:	8b 74 9d 00          	mov    esi,DWORD PTR [ebp+ebx*4+0x0]
10001412:	f6 85 bc f5 00 00 03 	test   BYTE PTR [ebp+0xf5bc],0x3
10001419:	74 bc                	je     100013d7 <ssfn_render+0x10c>
1000141b:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001426:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
1000142d:	39 94 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],edx
10001434:	7e 50                	jle    10001486 <ssfn_render+0x1bb>
10001436:	8b 3c 96             	mov    edi,DWORD PTR [esi+edx*4]
10001439:	0f b6 57 08          	movzx  edx,BYTE PTR [edi+0x8]
1000143d:	c1 fa 04             	sar    edx,0x4
10001440:	33 95 bc f5 00 00    	xor    edx,DWORD PTR [ebp+0xf5bc]
10001446:	80 e2 03             	and    dl,0x3
10001449:	75 32                	jne    1000147d <ssfn_render+0x1b2>
1000144b:	0f b6 57 0b          	movzx  edx,BYTE PTR [edi+0xb]
1000144f:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
10001455:	75 26                	jne    1000147d <ssfn_render+0x1b2>
10001457:	8d 84 24 c0 00 00 00 	lea    eax,[esp+0xc0]
1000145e:	50                   	push   eax
1000145f:	89 f8                	mov    eax,edi
10001461:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001468:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000146f:	e8 b7 f3 ff ff       	call   1000082b <_ssfn_c>
10001474:	59                   	pop    ecx
10001475:	85 c0                	test   eax,eax
10001477:	0f 85 04 01 00 00    	jne    10001581 <ssfn_render+0x2b6>
1000147d:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001484:	eb a0                	jmp    10001426 <ssfn_render+0x15b>
10001486:	85 c0                	test   eax,eax
10001488:	0f 85 51 ff ff ff    	jne    100013df <ssfn_render+0x114>
1000148e:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001499:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
100014a0:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
100014a7:	0f 8e f9 1b 00 00    	jle    100030a6 <ssfn_render+0x1ddb>
100014ad:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100014b0:	0f b6 50 0b          	movzx  edx,BYTE PTR [eax+0xb]
100014b4:	3b 95 c0 f5 00 00    	cmp    edx,DWORD PTR [ebp+0xf5c0]
100014ba:	74 09                	je     100014c5 <ssfn_render+0x1fa>
100014bc:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100014c3:	eb d4                	jmp    10001499 <ssfn_render+0x1ce>
100014c5:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100014cc:	57                   	push   edi
100014cd:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100014d4:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100014db:	e8 4b f3 ff ff       	call   1000082b <_ssfn_c>
100014e0:	5a                   	pop    edx
100014e1:	85 c0                	test   eax,eax
100014e3:	74 d7                	je     100014bc <ssfn_render+0x1f1>
100014e5:	e9 97 00 00 00       	jmp    10001581 <ssfn_render+0x2b6>
100014ea:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100014ed:	0f b6 50 08          	movzx  edx,BYTE PTR [eax+0x8]
100014f1:	c1 fa 04             	sar    edx,0x4
100014f4:	31 ca                	xor    edx,ecx
100014f6:	80 e2 03             	and    dl,0x3
100014f9:	0f 84 b7 1b 00 00    	je     100030b6 <ssfn_render+0x1deb>
100014ff:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001506:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000150d:	8b 8d bc f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf5bc]
10001513:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000151a:	7f ce                	jg     100014ea <ssfn_render+0x21f>
1000151c:	83 e1 03             	and    ecx,0x3
1000151f:	83 f9 03             	cmp    ecx,0x3
10001522:	75 1f                	jne    10001543 <ssfn_render+0x278>
10001524:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000152f:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001536:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000153d:	0f 8f 9c 1b 00 00    	jg     100030df <ssfn_render+0x1e14>
10001543:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
1000154e:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001555:	39 84 9d a4 f5 00 00 	cmp    DWORD PTR [ebp+ebx*4+0xf5a4],eax
1000155c:	7e 3e                	jle    1000159c <ssfn_render+0x2d1>
1000155e:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
10001561:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
10001568:	57                   	push   edi
10001569:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10001570:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
10001577:	e8 af f2 ff ff       	call   1000082b <_ssfn_c>
1000157c:	5a                   	pop    edx
1000157d:	85 c0                	test   eax,eax
1000157f:	74 12                	je     10001593 <ssfn_render+0x2c8>
10001581:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10001588:	8b 14 96             	mov    edx,DWORD PTR [esi+edx*4]
1000158b:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
1000158e:	e9 4c fe ff ff       	jmp    100013df <ssfn_render+0x114>
10001593:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
1000159a:	eb b2                	jmp    1000154e <ssfn_render+0x283>
1000159c:	31 c0                	xor    eax,eax
1000159e:	e9 3c fe ff ff       	jmp    100013df <ssfn_render+0x114>
100015a3:	8b 9d b8 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf5b8]
100015a9:	c7 84 24 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xc0],0x0
100015b4:	81 fb fd 00 00 00    	cmp    ebx,0xfd
100015ba:	7f 16                	jg     100015d2 <ssfn_render+0x307>
100015bc:	89 da                	mov    edx,ebx
100015be:	31 c0                	xor    eax,eax
100015c0:	39 da                	cmp    edx,ebx
100015c2:	7e 15                	jle    100015d9 <ssfn_render+0x30e>
100015c4:	85 c0                	test   eax,eax
100015c6:	75 3d                	jne    10001605 <ssfn_render+0x33a>
100015c8:	b9 f9 ff ff ff       	mov    ecx,0xfffffff9
100015cd:	e9 47 1b 00 00       	jmp    10003119 <ssfn_render+0x1e4e>
100015d2:	bb 04 00 00 00       	mov    ebx,0x4
100015d7:	eb e5                	jmp    100015be <ssfn_render+0x2f3>
100015d9:	85 c0                	test   eax,eax
100015db:	75 28                	jne    10001605 <ssfn_render+0x33a>
100015dd:	83 bc 95 a4 f5 00 00 00 	cmp    DWORD PTR [ebp+edx*4+0xf5a4],0x0
100015e5:	74 1b                	je     10001602 <ssfn_render+0x337>
100015e7:	8b 4c 95 00          	mov    ecx,DWORD PTR [ebp+edx*4+0x0]
100015eb:	8b 09                	mov    ecx,DWORD PTR [ecx]
100015ed:	85 c9                	test   ecx,ecx
100015ef:	74 11                	je     10001602 <ssfn_render+0x337>
100015f1:	8b 71 10             	mov    esi,DWORD PTR [ecx+0x10]
100015f4:	80 3c 31 00          	cmp    BYTE PTR [ecx+esi*1],0x0
100015f8:	78 08                	js     10001602 <ssfn_render+0x337>
100015fa:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
100015fd:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
10001600:	01 c8                	add    eax,ecx
10001602:	42                   	inc    edx
10001603:	eb bb                	jmp    100015c0 <ssfn_render+0x2f5>
10001605:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
10001608:	b9 fd ff ff ff       	mov    ecx,0xfffffffd
1000160d:	85 d2                	test   edx,edx
1000160f:	0f 84 04 1b 00 00    	je     10003119 <ssfn_render+0x1e4e>
10001615:	80 7a 0b 00          	cmp    BYTE PTR [edx+0xb],0x0
10001619:	0f 84 fa 1a 00 00    	je     10003119 <ssfn_render+0x1e4e>
1000161f:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
10001625:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
10001629:	85 ff                	test   edi,edi
1000162b:	0f 84 e8 1a 00 00    	je     10003119 <ssfn_render+0x1e4e>
10001631:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
10001638:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
1000163c:	c1 ef 10             	shr    edi,0x10
1000163f:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
10001643:	83 ff 10             	cmp    edi,0x10
10001646:	0f 87 af fc ff ff    	ja     100012fb <ssfn_render+0x30>
1000164c:	8d 70 06             	lea    esi,[eax+0x6]
1000164f:	89 85 74 f5 00 00    	mov    DWORD PTR [ebp+0xf574],eax
10001655:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
10001659:	8b b5 bc f5 00 00    	mov    esi,DWORD PTR [ebp+0xf5bc]
1000165f:	89 f7                	mov    edi,esi
10001661:	81 e7 00 02 00 00    	and    edi,0x200
10001667:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
1000166b:	75 34                	jne    100016a1 <ssfn_render+0x3d6>
1000166d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001671:	8b 8c bd 28 f5 00 00 	mov    ecx,DWORD PTR [ebp+edi*4+0xf528]
10001678:	85 c9                	test   ecx,ecx
1000167a:	74 25                	je     100016a1 <ssfn_render+0x3d6>
1000167c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10001680:	0f b6 ff             	movzx  edi,bh
10001683:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001686:	85 c9                	test   ecx,ecx
10001688:	74 17                	je     100016a1 <ssfn_render+0x3d6>
1000168a:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
1000168f:	8b 0c b9             	mov    ecx,DWORD PTR [ecx+edi*4]
10001692:	85 c9                	test   ecx,ecx
10001694:	74 0b                	je     100016a1 <ssfn_render+0x3d6>
10001696:	89 8d 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],ecx
1000169c:	e9 25 0d 00 00       	jmp    100023c6 <ssfn_render+0x10fb>
100016a1:	0f b6 4a 0b          	movzx  ecx,BYTE PTR [edx+0xb]
100016a5:	f7 c6 40 00 00 00    	test   esi,0x40
100016ab:	75 1a                	jne    100016c7 <ssfn_render+0x3fc>
100016ad:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
100016b1:	7e 10                	jle    100016c3 <ssfn_render+0x3f8>
100016b3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100016b7:	83 c7 04             	add    edi,0x4
100016ba:	83 e7 fc             	and    edi,0xfffffffc
100016bd:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100016c1:	eb 04                	jmp    100016c7 <ssfn_render+0x3fc>
100016c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
100016c7:	c6 44 24 28 00       	mov    BYTE PTR [esp+0x28],0x0
100016cc:	f7 c6 02 00 00 00    	test   esi,0x2
100016d2:	74 14                	je     100016e8 <ssfn_render+0x41d>
100016d4:	8a 5a 08             	mov    bl,BYTE PTR [edx+0x8]
100016d7:	c0 eb 05             	shr    bl,0x5
100016da:	89 df                	mov    edi,ebx
100016dc:	83 f7 01             	xor    edi,0x1
100016df:	83 e7 01             	and    edi,0x1
100016e2:	89 fb                	mov    ebx,edi
100016e4:	88 5c 24 28          	mov    BYTE PTR [esp+0x28],bl
100016e8:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
100016ed:	83 e6 01             	and    esi,0x1
100016f0:	74 10                	je     10001702 <ssfn_render+0x437>
100016f2:	f6 42 08 10          	test   BYTE PTR [edx+0x8],0x10
100016f6:	75 0a                	jne    10001702 <ssfn_render+0x437>
100016f8:	8d 51 40             	lea    edx,[ecx+0x40]
100016fb:	c1 fa 06             	sar    edx,0x6
100016fe:	88 54 24 48          	mov    BYTE PTR [esp+0x48],dl
10001702:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
10001706:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000170b:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
1000170f:	99                   	cdq    
10001710:	f7 f9                	idiv   ecx
10001712:	89 c1                	mov    ecx,eax
10001714:	31 c0                	xor    eax,eax
10001716:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
1000171b:	74 0c                	je     10001729 <ssfn_render+0x45e>
1000171d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001721:	be 04 00 00 00       	mov    esi,0x4
10001726:	99                   	cdq    
10001727:	f7 fe                	idiv   esi
10001729:	01 c8                	add    eax,ecx
1000172b:	0f b6 74 24 48       	movzx  esi,BYTE PTR [esp+0x48]
10001730:	b9 fa ff ff ff       	mov    ecx,0xfffffffa
10001735:	01 f0                	add    eax,esi
10001737:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
1000173b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
1000173f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001743:	0f af 44 24 10       	imul   eax,DWORD PTR [esp+0x10]
10001748:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000174c:	3d ff f4 00 00       	cmp    eax,0xf4ff
10001751:	0f 8f c2 19 00 00    	jg     10003119 <ssfn_render+0x1e4e>
10001757:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
1000175c:	0f 85 f0 00 00 00    	jne    10001852 <ssfn_render+0x587>
10001762:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10001766:	8d 74 85 00          	lea    esi,[ebp+eax*4+0x0]
1000176a:	83 be 28 f5 00 00 00 	cmp    DWORD PTR [esi+0xf528],0x0
10001771:	75 2f                	jne    100017a2 <ssfn_render+0x4d7>
10001773:	83 ec 0c             	sub    esp,0xc
10001776:	68 00 04 00 00       	push   0x400
1000177b:	e8 fc ff ff ff       	call   1000177c <ssfn_render+0x4b1>	1000177c: R_386_PC32	malloc
10001780:	83 c4 10             	add    esp,0x10
10001783:	89 86 28 f5 00 00    	mov    DWORD PTR [esi+0xf528],eax
10001789:	85 c0                	test   eax,eax
1000178b:	75 08                	jne    10001795 <ssfn_render+0x4ca>
1000178d:	83 c9 ff             	or     ecx,0xffffffff
10001790:	e9 84 19 00 00       	jmp    10003119 <ssfn_render+0x1e4e>
10001795:	89 c7                	mov    edi,eax
10001797:	b9 00 01 00 00       	mov    ecx,0x100
1000179c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100017a0:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100017a2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100017a6:	0f b6 dc             	movzx  ebx,ah
100017a9:	8b 86 28 f5 00 00    	mov    eax,DWORD PTR [esi+0xf528]
100017af:	8d 1c 98             	lea    ebx,[eax+ebx*4]
100017b2:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
100017b5:	75 3a                	jne    100017f1 <ssfn_render+0x526>
100017b7:	83 ec 0c             	sub    esp,0xc
100017ba:	68 00 04 00 00       	push   0x400
100017bf:	e8 fc ff ff ff       	call   100017c0 <ssfn_render+0x4f5>	100017c0: R_386_PC32	malloc
100017c4:	89 03                	mov    DWORD PTR [ebx],eax
100017c6:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
100017cd:	83 c4 10             	add    esp,0x10
100017d0:	89 c2                	mov    edx,eax
100017d2:	0f b6 c4             	movzx  eax,ah
100017d5:	c1 ea 10             	shr    edx,0x10
100017d8:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
100017df:	8b 14 82             	mov    edx,DWORD PTR [edx+eax*4]
100017e2:	85 d2                	test   edx,edx
100017e4:	74 a7                	je     1000178d <ssfn_render+0x4c2>
100017e6:	b9 00 01 00 00       	mov    ecx,0x100
100017eb:	31 c0                	xor    eax,eax
100017ed:	89 d7                	mov    edi,edx
100017ef:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100017f1:	8b 84 24 c0 00 00 00 	mov    eax,DWORD PTR [esp+0xc0]
100017f8:	83 ec 0c             	sub    esp,0xc
100017fb:	0f b6 cc             	movzx  ecx,ah
100017fe:	89 c2                	mov    edx,eax
10001800:	0f b6 c0             	movzx  eax,al
10001803:	c1 ea 10             	shr    edx,0x10
10001806:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
1000180d:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001810:	8d 1c 82             	lea    ebx,[edx+eax*4]
10001813:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001817:	83 c0 08             	add    eax,0x8
1000181a:	50                   	push   eax
1000181b:	e8 fc ff ff ff       	call   1000181c <ssfn_render+0x551>	1000181c: R_386_PC32	malloc
10001820:	89 03                	mov    DWORD PTR [ebx],eax
10001822:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
10001828:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
1000182f:	83 c4 10             	add    esp,0x10
10001832:	89 c2                	mov    edx,eax
10001834:	0f b6 cc             	movzx  ecx,ah
10001837:	c1 ea 10             	shr    edx,0x10
1000183a:	0f b6 c0             	movzx  eax,al
1000183d:	8b 94 95 28 f5 00 00 	mov    edx,DWORD PTR [ebp+edx*4+0xf528]
10001844:	8b 14 8a             	mov    edx,DWORD PTR [edx+ecx*4]
10001847:	83 3c 82 00          	cmp    DWORD PTR [edx+eax*4],0x0
1000184b:	75 0e                	jne    1000185b <ssfn_render+0x590>
1000184d:	e9 3b ff ff ff       	jmp    1000178d <ssfn_render+0x4c2>
10001852:	8d 45 1c             	lea    eax,[ebp+0x1c]
10001855:	89 85 24 f5 00 00    	mov    DWORD PTR [ebp+0xf524],eax
1000185b:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10001861:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
10001865:	74 2a                	je     10001891 <ssfn_render+0x5c6>
10001867:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
1000186c:	74 23                	je     10001891 <ssfn_render+0x5c6>
1000186e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001871:	bb 04 00 00 00       	mov    ebx,0x4
10001876:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
1000187a:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
1000187e:	89 cf                	mov    edi,ecx
10001880:	29 c7                	sub    edi,eax
10001882:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001886:	0f af c7             	imul   eax,edi
10001889:	99                   	cdq    
1000188a:	f7 fb                	idiv   ebx
1000188c:	99                   	cdq    
1000188d:	f7 f9                	idiv   ecx
1000188f:	eb 02                	jmp    10001893 <ssfn_render+0x5c8>
10001891:	31 c0                	xor    eax,eax
10001893:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001899:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
1000189d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100018a1:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
100018a9:	66 89 32             	mov    WORD PTR [edx],si
100018ac:	c6 44 24 14 fe       	mov    BYTE PTR [esp+0x14],0xfe
100018b1:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018b7:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
100018ba:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
100018c0:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018c6:	8a 59 04             	mov    bl,BYTE PTR [ecx+0x4]
100018c9:	01 c3                	add    ebx,eax
100018cb:	88 5a 04             	mov    BYTE PTR [edx+0x4],bl
100018ce:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100018d4:	8b 8d 74 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf574]
100018da:	8a 49 05             	mov    cl,BYTE PTR [ecx+0x5]
100018dd:	88 4a 05             	mov    BYTE PTR [edx+0x5],cl
100018e0:	8b 8d 24 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf524]
100018e6:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
100018ec:	8a 12                	mov    dl,BYTE PTR [edx]
100018ee:	83 e2 3f             	and    edx,0x3f
100018f1:	01 d0                	add    eax,edx
100018f3:	88 41 03             	mov    BYTE PTR [ecx+0x3],al
100018f6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
100018fa:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001900:	8d 50 08             	lea    edx,[eax+0x8]
10001903:	b0 ff                	mov    al,0xff
10001905:	89 d7                	mov    edi,edx
10001907:	f3 aa                	rep stos BYTE PTR es:[edi],al
10001909:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000190f:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
10001913:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001919:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
1000191d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001921:	c1 e0 04             	shl    eax,0x4
10001924:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10001928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000192c:	c1 e0 04             	shl    eax,0x4
1000192f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10001933:	8b 95 74 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf574]
10001939:	0f b6 42 01          	movzx  eax,BYTE PTR [edx+0x1]
1000193d:	3b 44 24 50          	cmp    eax,DWORD PTR [esp+0x50]
10001941:	0f 8e 4d 0a 00 00    	jle    10002394 <ssfn_render+0x10c9>
10001947:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
1000194b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000194f:	8a 4e 01             	mov    cl,BYTE PTR [esi+0x1]
10001952:	0f b6 00             	movzx  eax,BYTE PTR [eax]
10001955:	8a 12                	mov    dl,BYTE PTR [edx]
10001957:	0f b6 5e 02          	movzx  ebx,BYTE PTR [esi+0x2]
1000195b:	83 e2 40             	and    edx,0x40
1000195e:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
10001962:	88 c2                	mov    dl,al
10001964:	21 ca                	and    edx,ecx
10001966:	fe c2                	inc    dl
10001968:	75 14                	jne    1000197e <ssfn_render+0x6b3>
1000196a:	80 7c 24 1c 01       	cmp    BYTE PTR [esp+0x1c],0x1
1000196f:	19 c0                	sbb    eax,eax
10001971:	8d 44 06 06          	lea    eax,[esi+eax*1+0x6]
10001975:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10001979:	e9 09 0a 00 00       	jmp    10002387 <ssfn_render+0x10bc>
1000197e:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
10001982:	8b 7d 18             	mov    edi,DWORD PTR [ebp+0x18]
10001985:	c1 e0 04             	shl    eax,0x4
10001988:	0f b6 77 0b          	movzx  esi,BYTE PTR [edi+0xb]
1000198c:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001991:	99                   	cdq    
10001992:	f7 fe                	idiv   esi
10001994:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001998:	0f b6 c1             	movzx  eax,cl
1000199b:	c1 e0 04             	shl    eax,0x4
1000199e:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100019a3:	99                   	cdq    
100019a4:	f7 fe                	idiv   esi
100019a6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100019aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019ae:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
100019b2:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
100019b6:	c1 e2 10             	shl    edx,0x10
100019b9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
100019be:	74 0e                	je     100019ce <ssfn_render+0x703>
100019c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100019c4:	83 44 24 18 06       	add    DWORD PTR [esp+0x18],0x6
100019c9:	8b 58 02             	mov    ebx,DWORD PTR [eax+0x2]
100019cc:	eb 0c                	jmp    100019da <ssfn_render+0x70f>
100019ce:	c1 e0 08             	shl    eax,0x8
100019d1:	83 44 24 18 05       	add    DWORD PTR [esp+0x18],0x5
100019d6:	09 d0                	or     eax,edx
100019d8:	09 c3                	or     ebx,eax
100019da:	8d 0c 1f             	lea    ecx,[edi+ebx*1]
100019dd:	8a 01                	mov    al,BYTE PTR [ecx]
100019df:	84 c0                	test   al,al
100019e1:	0f 88 17 05 00 00    	js     10001efe <ssfn_render+0xc33>
100019e7:	89 c7                	mov    edi,eax
100019e9:	83 e7 3f             	and    edi,0x3f
100019ec:	a8 40                	test   al,0x40
100019ee:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
100019f2:	74 10                	je     10001a04 <ssfn_render+0x739>
100019f4:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
100019f8:	89 f8                	mov    eax,edi
100019fa:	41                   	inc    ecx
100019fb:	c1 e0 08             	shl    eax,0x8
100019fe:	09 c2                	or     edx,eax
10001a00:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
10001a04:	8d 41 01             	lea    eax,[ecx+0x1]
10001a07:	c7 85 80 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf580],0x0
10001a11:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001a15:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001a20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001a24:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10001a28:	83 c0 04             	add    eax,0x4
10001a2b:	c1 f8 02             	sar    eax,0x2
10001a2e:	01 c7                	add    edi,eax
10001a30:	8b 8c 24 cc 00 00 00 	mov    ecx,DWORD PTR [esp+0xcc]
10001a37:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001a3b:	0f 8f d7 01 00 00    	jg     10001c18 <ssfn_render+0x94d>
10001a41:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10001a44:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
10001a48:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
10001a4c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001a50:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001a54:	0f b6 07             	movzx  eax,BYTE PTR [edi]
10001a57:	c1 e0 04             	shl    eax,0x4
10001a5a:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a5f:	99                   	cdq    
10001a60:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001a64:	01 c6                	add    esi,eax
10001a66:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10001a6a:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
10001a6e:	c1 e0 04             	shl    eax,0x4
10001a71:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001a76:	99                   	cdq    
10001a77:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001a7b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001a7f:	01 c3                	add    ebx,eax
10001a81:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001a85:	89 c8                	mov    eax,ecx
10001a87:	01 c9                	add    ecx,ecx
10001a89:	c1 f8 02             	sar    eax,0x2
10001a8c:	83 e1 06             	and    ecx,0x6
10001a8f:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
10001a93:	d3 f8                	sar    eax,cl
10001a95:	83 e0 03             	and    eax,0x3
10001a98:	89 c1                	mov    ecx,eax
10001a9a:	83 f8 02             	cmp    eax,0x2
10001a9d:	74 4a                	je     10001ae9 <ssfn_render+0x81e>
10001a9f:	83 f8 03             	cmp    eax,0x3
10001aa2:	0f 84 e4 00 00 00    	je     10001b8c <ssfn_render+0x8c1>
10001aa8:	49                   	dec    ecx
10001aa9:	74 20                	je     10001acb <ssfn_render+0x800>
10001aab:	89 b5 9c f5 00 00    	mov    DWORD PTR [ebp+0xf59c],esi
10001ab1:	89 b5 94 f5 00 00    	mov    DWORD PTR [ebp+0xf594],esi
10001ab7:	89 9d a0 f5 00 00    	mov    DWORD PTR [ebp+0xf5a0],ebx
10001abd:	89 9d 98 f5 00 00    	mov    DWORD PTR [ebp+0xf598],ebx
10001ac3:	83 c7 02             	add    edi,0x2
10001ac6:	e9 41 01 00 00       	jmp    10001c0c <ssfn_render+0x941>
10001acb:	83 c7 02             	add    edi,0x2
10001ace:	50                   	push   eax
10001acf:	50                   	push   eax
10001ad0:	89 e8                	mov    eax,ebp
10001ad2:	53                   	push   ebx
10001ad3:	56                   	push   esi
10001ad4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
10001ad8:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
10001adc:	e8 9c e9 ff ff       	call   1000047d <_ssfn_l>
10001ae1:	83 c4 10             	add    esp,0x10
10001ae4:	e9 23 01 00 00       	jmp    10001c0c <ssfn_render+0x941>
10001ae9:	0f b6 47 02          	movzx  eax,BYTE PTR [edi+0x2]
10001aed:	83 c7 04             	add    edi,0x4
10001af0:	c1 e0 04             	shl    eax,0x4
10001af3:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001af8:	99                   	cdq    
10001af9:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001afd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001b01:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10001b05:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001b09:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001b0d:	c1 e0 04             	shl    eax,0x4
10001b10:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10001b15:	99                   	cdq    
10001b16:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001b1a:	83 ec 0c             	sub    esp,0xc
10001b1d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10001b21:	6a 00                	push   0x0
10001b23:	53                   	push   ebx
10001b24:	56                   	push   esi
10001b25:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10001b29:	2b 44 24 64          	sub    eax,DWORD PTR [esp+0x64]
10001b2d:	99                   	cdq    
10001b2e:	f7 f9                	idiv   ecx
10001b30:	01 d8                	add    eax,ebx
10001b32:	50                   	push   eax
10001b33:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10001b37:	2b 44 24 70          	sub    eax,DWORD PTR [esp+0x70]
10001b3b:	99                   	cdq    
10001b3c:	f7 f9                	idiv   ecx
10001b3e:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001b42:	50                   	push   eax
10001b43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10001b47:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001b4b:	2b 85 a0 f5 00 00    	sub    eax,DWORD PTR [ebp+0xf5a0]
10001b51:	99                   	cdq    
10001b52:	f7 f9                	idiv   ecx
10001b54:	03 85 a0 f5 00 00    	add    eax,DWORD PTR [ebp+0xf5a0]
10001b5a:	50                   	push   eax
10001b5b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001b5f:	2b 85 9c f5 00 00    	sub    eax,DWORD PTR [ebp+0xf59c]
10001b65:	99                   	cdq    
10001b66:	f7 f9                	idiv   ecx
10001b68:	03 85 9c f5 00 00    	add    eax,DWORD PTR [ebp+0xf59c]
10001b6e:	50                   	push   eax
10001b6f:	89 e8                	mov    eax,ebp
10001b71:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001b77:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001b7d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001b81:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001b85:	e8 04 ea ff ff       	call   1000058e <_ssfn_b>
10001b8a:	eb 7d                	jmp    10001c09 <ssfn_render+0x93e>
10001b8c:	83 ec 0c             	sub    esp,0xc
10001b8f:	83 c7 06             	add    edi,0x6
10001b92:	6a 00                	push   0x0
10001b94:	53                   	push   ebx
10001b95:	56                   	push   esi
10001b96:	0f b6 47 ff          	movzx  eax,BYTE PTR [edi-0x1]
10001b9a:	c1 e0 04             	shl    eax,0x4
10001b9d:	0f af 44 24 24       	imul   eax,DWORD PTR [esp+0x24]
10001ba2:	99                   	cdq    
10001ba3:	f7 7c 24 34          	idiv   DWORD PTR [esp+0x34]
10001ba7:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001bab:	50                   	push   eax
10001bac:	0f b6 47 fe          	movzx  eax,BYTE PTR [edi-0x2]
10001bb0:	c1 e0 04             	shl    eax,0x4
10001bb3:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
10001bb8:	99                   	cdq    
10001bb9:	f7 7c 24 38          	idiv   DWORD PTR [esp+0x38]
10001bbd:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
10001bc1:	50                   	push   eax
10001bc2:	0f b6 47 fd          	movzx  eax,BYTE PTR [edi-0x3]
10001bc6:	c1 e0 04             	shl    eax,0x4
10001bc9:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
10001bce:	99                   	cdq    
10001bcf:	f7 7c 24 3c          	idiv   DWORD PTR [esp+0x3c]
10001bd3:	03 44 24 40          	add    eax,DWORD PTR [esp+0x40]
10001bd7:	50                   	push   eax
10001bd8:	0f b6 47 fc          	movzx  eax,BYTE PTR [edi-0x4]
10001bdc:	c1 e0 04             	shl    eax,0x4
10001bdf:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001be4:	99                   	cdq    
10001be5:	f7 7c 24 40          	idiv   DWORD PTR [esp+0x40]
10001be9:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
10001bed:	50                   	push   eax
10001bee:	89 e8                	mov    eax,ebp
10001bf0:	ff b5 a0 f5 00 00    	push   DWORD PTR [ebp+0xf5a0]
10001bf6:	ff b5 9c f5 00 00    	push   DWORD PTR [ebp+0xf59c]
10001bfc:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
10001c00:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
10001c04:	e8 85 e9 ff ff       	call   1000058e <_ssfn_b>
10001c09:	83 c4 30             	add    esp,0x30
10001c0c:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
10001c13:	e9 18 fe ff ff       	jmp    10001a30 <ssfn_render+0x765>
10001c18:	8b 85 94 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf594]
10001c1e:	3b 85 9c f5 00 00    	cmp    eax,DWORD PTR [ebp+0xf59c]
10001c24:	75 0e                	jne    10001c34 <ssfn_render+0x969>
10001c26:	8b bd a0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5a0]
10001c2c:	39 bd 98 f5 00 00    	cmp    DWORD PTR [ebp+0xf598],edi
10001c32:	74 2e                	je     10001c62 <ssfn_render+0x997>
10001c34:	8b 8d 80 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf580]
10001c3a:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001c40:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
10001c44:	8b 95 80 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf580]
10001c4a:	8b 85 6c f5 00 00    	mov    eax,DWORD PTR [ebp+0xf56c]
10001c50:	8b 8d 98 f5 00 00    	mov    ecx,DWORD PTR [ebp+0xf598]
10001c56:	66 89 4c 50 02       	mov    WORD PTR [eax+edx*2+0x2],cx
10001c5b:	83 85 80 f5 00 00 02 	add    DWORD PTR [ebp+0xf580],0x2
10001c62:	b3 fe                	mov    bl,0xfe
10001c64:	83 bd 80 f5 00 00 04 	cmp    DWORD PTR [ebp+0xf580],0x4
10001c6b:	0f 8e 16 07 00 00    	jle    10002387 <ssfn_render+0x10bc>
10001c71:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10001c79:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001c81:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10001c89:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
10001c91:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10001c99:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10001c9d:	39 7c 24 2c          	cmp    DWORD PTR [esp+0x2c],edi
10001ca1:	0f 8d de 06 00 00    	jge    10002385 <ssfn_render+0x10ba>
10001ca7:	8b 85 80 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf580]
10001cad:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001cb8:	83 e8 03             	sub    eax,0x3
10001cbb:	31 f6                	xor    esi,esi
10001cbd:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001cc1:	89 f8                	mov    eax,edi
10001cc3:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
10001cc7:	c1 f8 02             	sar    eax,0x2
10001cca:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001cce:	8b bc 24 cc 00 00 00 	mov    edi,DWORD PTR [esp+0xcc]
10001cd5:	39 7c 24 54          	cmp    DWORD PTR [esp+0x54],edi
10001cd9:	0f 8e 16 01 00 00    	jle    10001df5 <ssfn_render+0xb2a>
10001cdf:	8b 95 6c f5 00 00    	mov    edx,DWORD PTR [ebp+0xf56c]
10001ce5:	8d 47 01             	lea    eax,[edi+0x1]
10001ce8:	01 c0                	add    eax,eax
10001cea:	0f b7 1c 02          	movzx  ebx,WORD PTR [edx+eax*1]
10001cee:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10001cf2:	0f b7 5c 02 04       	movzx  ebx,WORD PTR [edx+eax*1+0x4]
10001cf7:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10001cfb:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
10001cff:	7d 0c                	jge    10001d0d <ssfn_render+0xa42>
10001d01:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d05:	0f 8f db 00 00 00    	jg     10001de6 <ssfn_render+0xb1b>
10001d0b:	eb 0a                	jmp    10001d17 <ssfn_render+0xa4c>
10001d0d:	39 5c 24 30          	cmp    DWORD PTR [esp+0x30],ebx
10001d11:	0f 8e cf 00 00 00    	jle    10001de6 <ssfn_render+0xb1b>
10001d17:	0f b7 4c 02 fe       	movzx  ecx,WORD PTR [edx+eax*1-0x2]
10001d1c:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001d20:	0f b7 4c 02 02       	movzx  ecx,WORD PTR [edx+eax*1+0x2]
10001d25:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
10001d29:	89 d8                	mov    eax,ebx
10001d2b:	c1 fa 04             	sar    edx,0x4
10001d2e:	c1 f8 04             	sar    eax,0x4
10001d31:	39 c2                	cmp    edx,eax
10001d33:	75 0a                	jne    10001d3f <ssfn_render+0xa74>
10001d35:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10001d39:	01 c8                	add    eax,ecx
10001d3b:	d1 f8                	sar    eax,1
10001d3d:	eb 1a                	jmp    10001d59 <ssfn_render+0xa8e>
10001d3f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001d43:	2b 4c 24 4c          	sub    ecx,DWORD PTR [esp+0x4c]
10001d47:	2b 44 24 34          	sub    eax,DWORD PTR [esp+0x34]
10001d4b:	2b 5c 24 34          	sub    ebx,DWORD PTR [esp+0x34]
10001d4f:	0f af c1             	imul   eax,ecx
10001d52:	99                   	cdq    
10001d53:	f7 fb                	idiv   ebx
10001d55:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001d59:	c1 f8 04             	sar    eax,0x4
10001d5c:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001d61:	74 04                	je     10001d67 <ssfn_render+0xa9c>
10001d63:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
10001d67:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
10001d6c:	75 3f                	jne    10001dad <ssfn_render+0xae2>
10001d6e:	80 7c 24 48 00       	cmp    BYTE PTR [esp+0x48],0x0
10001d73:	74 38                	je     10001dad <ssfn_render+0xae2>
10001d75:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001d79:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
10001d7f:	f7 db                	neg    ebx
10001d81:	01 c2                	add    edx,eax
10001d83:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001d87:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001d8b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001d8f:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001d93:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10001d97:	38 5c 11 08          	cmp    BYTE PTR [ecx+edx*1+0x8],bl
10001d9b:	74 10                	je     10001dad <ssfn_render+0xae2>
10001d9d:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
10001da1:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
10001da5:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
10001da9:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
10001dad:	31 d2                	xor    edx,edx
10001daf:	39 f2                	cmp    edx,esi
10001db1:	75 0b                	jne    10001dbe <ssfn_render+0xaf3>
10001db3:	66 89 84 54 d0 00 00 00 	mov    WORD PTR [esp+edx*2+0xd0],ax
10001dbb:	46                   	inc    esi
10001dbc:	eb 28                	jmp    10001de6 <ssfn_render+0xb1b>
10001dbe:	0f b7 8c 54 d0 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd0]
10001dc6:	39 c1                	cmp    ecx,eax
10001dc8:	7d 03                	jge    10001dcd <ssfn_render+0xb02>
10001dca:	42                   	inc    edx
10001dcb:	eb e2                	jmp    10001daf <ssfn_render+0xae4>
10001dcd:	89 f1                	mov    ecx,esi
10001dcf:	49                   	dec    ecx
10001dd0:	66 8b 9c 4c d0 00 00 00 	mov    bx,WORD PTR [esp+ecx*2+0xd0]
10001dd8:	39 d1                	cmp    ecx,edx
10001dda:	66 89 9c 4c d2 00 00 00 	mov    WORD PTR [esp+ecx*2+0xd2],bx
10001de2:	7f eb                	jg     10001dcf <ssfn_render+0xb04>
10001de4:	eb cd                	jmp    10001db3 <ssfn_render+0xae8>
10001de6:	8d 47 02             	lea    eax,[edi+0x2]
10001de9:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10001df0:	e9 d9 fe ff ff       	jmp    10001cce <ssfn_render+0xa03>
10001df5:	83 fe 01             	cmp    esi,0x1
10001df8:	7e 1f                	jle    10001e19 <ssfn_render+0xb4e>
10001dfa:	f7 c6 01 00 00 00    	test   esi,0x1
10001e00:	74 24                	je     10001e26 <ssfn_render+0xb5b>
10001e02:	8d 46 ff             	lea    eax,[esi-0x1]
10001e05:	66 8b 94 44 d0 00 00 00 	mov    dx,WORD PTR [esp+eax*2+0xd0]
10001e0d:	66 89 94 74 cc 00 00 00 	mov    WORD PTR [esp+esi*2+0xcc],dx
10001e15:	89 c6                	mov    esi,eax
10001e17:	eb 0d                	jmp    10001e26 <ssfn_render+0xb5b>
10001e19:	85 f6                	test   esi,esi
10001e1b:	0f 84 c7 00 00 00    	je     10001ee8 <ssfn_render+0xc1d>
10001e21:	be 01 00 00 00       	mov    esi,0x1
10001e26:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001e2c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10001e30:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
10001e34:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001e38:	39 d1                	cmp    ecx,edx
10001e3a:	7d 0b                	jge    10001e47 <ssfn_render+0xb7c>
10001e3c:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10001e40:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
10001e44:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001e47:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001e52:	31 c0                	xor    eax,eax
10001e54:	31 d2                	xor    edx,edx
10001e56:	8d 4e ff             	lea    ecx,[esi-0x1]
10001e59:	39 d1                	cmp    ecx,edx
10001e5b:	7e 7d                	jle    10001eda <ssfn_render+0xc0f>
10001e5d:	0f b7 84 54 d0 00 00 00 	movzx  eax,WORD PTR [esp+edx*2+0xd0]
10001e65:	0f b7 8c 54 d2 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xd2]
10001e6d:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001e71:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
10001e75:	79 02                	jns    10001e79 <ssfn_render+0xbae>
10001e77:	31 c0                	xor    eax,eax
10001e79:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001e7d:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
10001e81:	39 cf                	cmp    edi,ecx
10001e83:	7e 04                	jle    10001e89 <ssfn_render+0xbbe>
10001e85:	89 4c 24 4c          	mov    DWORD PTR [esp+0x4c],ecx
10001e89:	85 d2                	test   edx,edx
10001e8b:	74 12                	je     10001e9f <ssfn_render+0xbd4>
10001e8d:	0f b7 8c 54 ce 00 00 00 	movzx  ecx,WORD PTR [esp+edx*2+0xce]
10001e95:	03 4c 24 1c          	add    ecx,DWORD PTR [esp+0x1c]
10001e99:	39 c8                	cmp    eax,ecx
10001e9b:	7d 02                	jge    10001e9f <ssfn_render+0xbd4>
10001e9d:	89 c8                	mov    eax,ecx
10001e9f:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
10001ea3:	7d 2b                	jge    10001ed0 <ssfn_render+0xc05>
10001ea5:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
10001ea9:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
10001eaf:	8d 3c 01             	lea    edi,[ecx+eax*1]
10001eb2:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10001eb6:	88 4c 24 34          	mov    BYTE PTR [esp+0x34],cl
10001eba:	38 4c 3b 08          	cmp    BYTE PTR [ebx+edi*1+0x8],cl
10001ebe:	75 05                	jne    10001ec5 <ssfn_render+0xbfa>
10001ec0:	c6 44 24 34 ff       	mov    BYTE PTR [esp+0x34],0xff
10001ec5:	8a 4c 24 34          	mov    cl,BYTE PTR [esp+0x34]
10001ec9:	40                   	inc    eax
10001eca:	88 4c 3b 08          	mov    BYTE PTR [ebx+edi*1+0x8],cl
10001ece:	eb cf                	jmp    10001e9f <ssfn_render+0xbd4>
10001ed0:	83 c2 02             	add    edx,0x2
10001ed3:	b0 01                	mov    al,0x1
10001ed5:	e9 7c ff ff ff       	jmp    10001e56 <ssfn_render+0xb8b>
10001eda:	83 e6 fe             	and    esi,0xfffffffe
10001edd:	84 c0                	test   al,al
10001edf:	74 07                	je     10001ee8 <ssfn_render+0xc1d>
10001ee1:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
10001ee8:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10001eec:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
10001ef0:	01 7c 24 44          	add    DWORD PTR [esp+0x44],edi
10001ef4:	83 44 24 30 10       	add    DWORD PTR [esp+0x30],0x10
10001ef9:	e9 9b fd ff ff       	jmp    10001c99 <ssfn_render+0x9ce>
10001efe:	88 c2                	mov    dl,al
10001f00:	80 e2 60             	and    dl,0x60
10001f03:	0f 85 95 02 00 00    	jne    1000219e <ssfn_render+0xed3>
10001f09:	83 e0 1f             	and    eax,0x1f
10001f0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10001f10:	8d 04 c5 08 00 00 00 	lea    eax,[eax*8+0x8]
10001f17:	c1 fb 04             	sar    ebx,0x4
10001f1a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10001f1e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
10001f22:	40                   	inc    eax
10001f23:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10001f27:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10001f2b:	c1 f8 04             	sar    eax,0x4
10001f2e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10001f32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f36:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
10001f3b:	99                   	cdq    
10001f3c:	f7 fe                	idiv   esi
10001f3e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10001f42:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f46:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
10001f4b:	99                   	cdq    
10001f4c:	f7 fe                	idiv   esi
10001f4e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10001f52:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10001f58:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001f5c:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10001f60:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001f63:	39 d6                	cmp    esi,edx
10001f65:	7d 0a                	jge    10001f71 <ssfn_render+0xca6>
10001f67:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
10001f6b:	8d 14 3b             	lea    edx,[ebx+edi*1]
10001f6e:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10001f71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10001f75:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
10001f7d:	0f af c3             	imul   eax,ebx
10001f80:	31 ff                	xor    edi,edi
10001f82:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
10001f86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10001f8a:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10001f8e:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
10001f92:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10001f96:	29 d8                	sub    eax,ebx
10001f98:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
10001f9c:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
10001fa0:	0f 8d b1 00 00 00    	jge    10002057 <ssfn_render+0xd8c>
10001fa6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10001faa:	99                   	cdq    
10001fab:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
10001faf:	89 c6                	mov    esi,eax
10001fb1:	31 c0                	xor    eax,eax
10001fb3:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
10001fb8:	74 0e                	je     10001fc8 <ssfn_render+0xcfd>
10001fba:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10001fbe:	bb 04 00 00 00       	mov    ebx,0x4
10001fc3:	29 f8                	sub    eax,edi
10001fc5:	99                   	cdq    
10001fc6:	f7 fb                	idiv   ebx
10001fc8:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
10001fcc:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10001fd7:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
10001fdb:	0f af 74 24 30       	imul   esi,DWORD PTR [esp+0x30]
10001fe0:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
10001fe7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10001feb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10001fef:	39 d8                	cmp    eax,ebx
10001ff1:	7d 4e                	jge    10002041 <ssfn_render+0xd76>
10001ff3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10001ff7:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
10001ffc:	99                   	cdq    
10001ffd:	f7 fb                	idiv   ebx
10001fff:	8d 14 06             	lea    edx,[esi+eax*1]
10002002:	83 e0 07             	and    eax,0x7
10002005:	c1 fa 03             	sar    edx,0x3
10002008:	0f b6 54 11 02       	movzx  edx,BYTE PTR [ecx+edx*1+0x2]
1000200d:	0f a3 c2             	bt     edx,eax
10002010:	72 0e                	jb     10002020 <ssfn_render+0xd55>
10002012:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10002016:	43                   	inc    ebx
10002017:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
1000201e:	eb c0                	jmp    10001fe0 <ssfn_render+0xd15>
10002020:	31 c0                	xor    eax,eax
10002022:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
10002026:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
1000202a:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
10002030:	40                   	inc    eax
10002031:	03 54 24 58          	add    edx,DWORD PTR [esp+0x58]
10002035:	88 5c 10 07          	mov    BYTE PTR [eax+edx*1+0x7],bl
10002039:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
1000203d:	7d e3                	jge    10002022 <ssfn_render+0xd57>
1000203f:	eb d1                	jmp    10002012 <ssfn_render+0xd47>
10002041:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002045:	47                   	inc    edi
10002046:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
1000204a:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
1000204e:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
10002052:	e9 45 ff ff ff       	jmp    10001f9c <ssfn_render+0xcd1>
10002057:	b3 fe                	mov    bl,0xfe
10002059:	f6 85 bc f5 00 00 40 	test   BYTE PTR [ebp+0xf5bc],0x40
10002060:	0f 85 21 03 00 00    	jne    10002387 <ssfn_render+0x10bc>
10002066:	31 c0                	xor    eax,eax
10002068:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000206c:	80 7c 24 14 fd       	cmp    BYTE PTR [esp+0x14],0xfd
10002071:	89 7c 24 30          	mov    DWORD PTR [esp+0x30],edi
10002075:	0f 95 c0             	setne  al
10002078:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
1000207c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002080:	4f                   	dec    edi
10002081:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
10002085:	81 44 24 20 fc 00 00 00 	add    DWORD PTR [esp+0x20],0xfc
1000208d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002091:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002098:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
1000209c:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
100020a0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100020a4:	31 c0                	xor    eax,eax
100020a6:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
100020a9:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
100020ad:	83 c1 04             	add    ecx,0x4
100020b0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
100020b4:	0f 8d c0 02 00 00    	jge    1000237a <ssfn_render+0x10af>
100020ba:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
100020be:	8d 77 01             	lea    esi,[edi+0x1]
100020c1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
100020c5:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
100020c9:	4f                   	dec    edi
100020ca:	be 01 00 00 00       	mov    esi,0x1
100020cf:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100020d3:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
100020d7:	7e 63                	jle    1000213c <ssfn_render+0xe71>
100020d9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100020dd:	b9 01 00 00 00       	mov    ecx,0x1
100020e2:	89 ca                	mov    edx,ecx
100020e4:	39 4c 24 44          	cmp    DWORD PTR [esp+0x44],ecx
100020e8:	7e 45                	jle    1000212f <ssfn_render+0xe64>
100020ea:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100020f0:	80 7c 02 08 ff       	cmp    BYTE PTR [edx+eax*1+0x8],0xff
100020f5:	75 34                	jne    1000212b <ssfn_render+0xe60>
100020f7:	89 c7                	mov    edi,eax
100020f9:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
100020fd:	2b 7c 24 10          	sub    edi,DWORD PTR [esp+0x10]
10002101:	38 5c 3a 08          	cmp    BYTE PTR [edx+edi*1+0x8],bl
10002105:	74 0c                	je     10002113 <ssfn_render+0xe48>
10002107:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000210b:	01 d7                	add    edi,edx
1000210d:	38 5c 38 08          	cmp    BYTE PTR [eax+edi*1+0x8],bl
10002111:	75 18                	jne    1000212b <ssfn_render+0xe60>
10002113:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
10002117:	38 5c 02 07          	cmp    BYTE PTR [edx+eax*1+0x7],bl
1000211b:	74 06                	je     10002123 <ssfn_render+0xe58>
1000211d:	38 5c 02 09          	cmp    BYTE PTR [edx+eax*1+0x9],bl
10002121:	75 08                	jne    1000212b <ssfn_render+0xe60>
10002123:	8a 5c 24 20          	mov    bl,BYTE PTR [esp+0x20]
10002127:	88 5c 02 08          	mov    BYTE PTR [edx+eax*1+0x8],bl
1000212b:	41                   	inc    ecx
1000212c:	40                   	inc    eax
1000212d:	eb b3                	jmp    100020e2 <ssfn_render+0xe17>
1000212f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002133:	46                   	inc    esi
10002134:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
10002138:	b0 01                	mov    al,0x1
1000213a:	eb 97                	jmp    100020d3 <ssfn_render+0xe08>
1000213c:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
10002140:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
10002144:	bb 01 00 00 00       	mov    ebx,0x1
10002149:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
1000214d:	7e 3d                	jle    1000218c <ssfn_render+0xec1>
1000214f:	b8 01 00 00 00       	mov    eax,0x1
10002154:	89 c2                	mov    edx,eax
10002156:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
1000215a:	7e 23                	jle    1000217f <ssfn_render+0xeb4>
1000215c:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
10002160:	8b b5 24 f5 00 00    	mov    esi,DWORD PTR [ebp+0xf524]
10002166:	8d 14 07             	lea    edx,[edi+eax*1]
10002169:	0f b6 7c 16 08       	movzx  edi,BYTE PTR [esi+edx*1+0x8]
1000216e:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002172:	75 08                	jne    1000217c <ssfn_render+0xeb1>
10002174:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
10002178:	88 4c 16 08          	mov    BYTE PTR [esi+edx*1+0x8],cl
1000217c:	40                   	inc    eax
1000217d:	eb d5                	jmp    10002154 <ssfn_render+0xe89>
1000217f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002183:	43                   	inc    ebx
10002184:	01 74 24 34          	add    DWORD PTR [esp+0x34],esi
10002188:	b0 01                	mov    al,0x1
1000218a:	eb bd                	jmp    10002149 <ssfn_render+0xe7e>
1000218c:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
1000218f:	0f b6 49 0b          	movzx  ecx,BYTE PTR [ecx+0xb]
10002193:	01 c9                	add    ecx,ecx
10002195:	29 4c 24 30          	sub    DWORD PTR [esp+0x30],ecx
10002199:	e9 08 ff ff ff       	jmp    100020a6 <ssfn_render+0xddb>
1000219e:	b3 fe                	mov    bl,0xfe
100021a0:	80 fa 20             	cmp    dl,0x20
100021a3:	0f 85 de 01 00 00    	jne    10002387 <ssfn_render+0x10bc>
100021a9:	89 c3                	mov    ebx,eax
100021ab:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
100021af:	c1 e3 08             	shl    ebx,0x8
100021b2:	81 e3 00 1f 00 00    	and    ebx,0x1f00
100021b8:	09 c3                	or     ebx,eax
100021ba:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
100021be:	43                   	inc    ebx
100021bf:	40                   	inc    eax
100021c0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
100021c4:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
100021c8:	40                   	inc    eax
100021c9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
100021cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100021d1:	c1 f8 04             	sar    eax,0x4
100021d4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100021d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
100021dc:	c1 f8 04             	sar    eax,0x4
100021df:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100021e3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100021e7:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
100021ec:	99                   	cdq    
100021ed:	f7 fe                	idiv   esi
100021ef:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100021f3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100021f7:	0f af 44 24 34       	imul   eax,DWORD PTR [esp+0x34]
100021fc:	99                   	cdq    
100021fd:	f7 fe                	idiv   esi
100021ff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002203:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002207:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000220d:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
10002211:	0f b6 70 07          	movzx  esi,BYTE PTR [eax+0x7]
10002215:	39 d6                	cmp    esi,edx
10002217:	7d 0b                	jge    10002224 <ssfn_render+0xf59>
10002219:	8a 54 24 14          	mov    dl,BYTE PTR [esp+0x14]
1000221d:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
10002221:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
10002224:	83 c1 04             	add    ecx,0x4
10002227:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
10002232:	8d 04 19             	lea    eax,[ecx+ebx*1]
10002235:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002239:	3b 4c 24 44          	cmp    ecx,DWORD PTR [esp+0x44]
1000223d:	72 35                	jb     10002274 <ssfn_render+0xfa9>
1000223f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10002243:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10002247:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
1000224c:	2b 74 24 14          	sub    esi,DWORD PTR [esp+0x14]
10002250:	03 54 24 38          	add    edx,DWORD PTR [esp+0x38]
10002254:	8b 84 24 cc 00 00 00 	mov    eax,DWORD PTR [esp+0xcc]
1000225b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
1000225f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
10002267:	31 d2                	xor    edx,edx
10002269:	31 ff                	xor    edi,edi
1000226b:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
1000226f:	e9 cc 00 00 00       	jmp    10002340 <ssfn_render+0x1075>
10002274:	8a 11                	mov    dl,BYTE PTR [ecx]
10002276:	89 d0                	mov    eax,edx
10002278:	83 e0 7f             	and    eax,0x7f
1000227b:	84 d2                	test   dl,dl
1000227d:	8d 78 01             	lea    edi,[eax+0x1]
10002280:	78 09                	js     1000228b <ssfn_render+0xfc0>
10002282:	41                   	inc    ecx
10002283:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002287:	89 ca                	mov    edx,ecx
10002289:	eb 3d                	jmp    100022c8 <ssfn_render+0xffd>
1000228b:	48                   	dec    eax
1000228c:	8b 94 24 cc 00 00 00 	mov    edx,DWORD PTR [esp+0xcc]
10002293:	83 f8 fe             	cmp    eax,0xfffffffe
10002296:	74 16                	je     100022ae <ssfn_render+0xfe3>
10002298:	8d 5a 01             	lea    ebx,[edx+0x1]
1000229b:	89 9c 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],ebx
100022a2:	8a 59 01             	mov    bl,BYTE PTR [ecx+0x1]
100022a5:	88 9c 14 d0 05 00 00 	mov    BYTE PTR [esp+edx*1+0x5d0],bl
100022ac:	eb dd                	jmp    1000228b <ssfn_render+0xfc0>
100022ae:	83 c1 02             	add    ecx,0x2
100022b1:	eb 86                	jmp    10002239 <ssfn_render+0xf6e>
100022b3:	42                   	inc    edx
100022b4:	8d 73 01             	lea    esi,[ebx+0x1]
100022b7:	89 b4 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],esi
100022be:	8a 42 ff             	mov    al,BYTE PTR [edx-0x1]
100022c1:	88 84 1c d0 05 00 00 	mov    BYTE PTR [esp+ebx*1+0x5d0],al
100022c8:	ff 4c 24 2c          	dec    DWORD PTR [esp+0x2c]
100022cc:	8b 9c 24 cc 00 00 00 	mov    ebx,DWORD PTR [esp+0xcc]
100022d3:	83 7c 24 2c fe       	cmp    DWORD PTR [esp+0x2c],0xfffffffe
100022d8:	75 d9                	jne    100022b3 <ssfn_render+0xfe8>
100022da:	01 f9                	add    ecx,edi
100022dc:	e9 58 ff ff ff       	jmp    10002239 <ssfn_render+0xf6e>
100022e1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
100022e5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
100022e9:	99                   	cdq    
100022ea:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
100022ee:	0f af c8             	imul   ecx,eax
100022f1:	31 c0                	xor    eax,eax
100022f3:	80 7c 24 28 00       	cmp    BYTE PTR [esp+0x28],0x0
100022f8:	74 0e                	je     10002308 <ssfn_render+0x103d>
100022fa:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
100022fe:	bb 04 00 00 00       	mov    ebx,0x4
10002303:	29 f8                	sub    eax,edi
10002305:	99                   	cdq    
10002306:	f7 fb                	idiv   ebx
10002308:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
1000230c:	31 db                	xor    ebx,ebx
1000230e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002312:	31 f6                	xor    esi,esi
10002314:	8d 84 24 d0 05 01 00 	lea    eax,[esp+0x105d0]
1000231b:	01 c1                	add    ecx,eax
1000231d:	39 74 24 1c          	cmp    DWORD PTR [esp+0x1c],esi
10002321:	7f 30                	jg     10002353 <ssfn_render+0x1088>
10002323:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10002327:	85 c0                	test   eax,eax
10002329:	79 02                	jns    1000232d <ssfn_render+0x1062>
1000232b:	31 c0                	xor    eax,eax
1000232d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002331:	47                   	inc    edi
10002332:	01 5c 24 38          	add    DWORD PTR [esp+0x38],ebx
10002336:	b2 01                	mov    dl,0x1
10002338:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
1000233c:	01 5c 24 2c          	add    DWORD PTR [esp+0x2c],ebx
10002340:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
10002344:	7c 9b                	jl     100022e1 <ssfn_render+0x1016>
10002346:	84 d2                	test   dl,dl
10002348:	74 3b                	je     10002385 <ssfn_render+0x10ba>
1000234a:	89 84 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],eax
10002351:	eb 32                	jmp    10002385 <ssfn_render+0x10ba>
10002353:	89 d8                	mov    eax,ebx
10002355:	99                   	cdq    
10002356:	f7 7c 24 1c          	idiv   DWORD PTR [esp+0x1c]
1000235a:	8a 84 08 00 00 ff ff 	mov    al,BYTE PTR [eax+ecx*1-0x10000]
10002361:	3c ff                	cmp    al,0xff
10002363:	74 0e                	je     10002373 <ssfn_render+0x10a8>
10002365:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10002369:	03 95 24 f5 00 00    	add    edx,DWORD PTR [ebp+0xf524]
1000236f:	88 44 16 08          	mov    BYTE PTR [esi+edx*1+0x8],al
10002373:	46                   	inc    esi
10002374:	03 5c 24 30          	add    ebx,DWORD PTR [esp+0x30]
10002378:	eb a3                	jmp    1000231d <ssfn_render+0x1052>
1000237a:	84 c0                	test   al,al
1000237c:	74 07                	je     10002385 <ssfn_render+0x10ba>
1000237e:	89 94 24 cc 00 00 00 	mov    DWORD PTR [esp+0xcc],edx
10002385:	b3 fe                	mov    bl,0xfe
10002387:	ff 44 24 50          	inc    DWORD PTR [esp+0x50]
1000238b:	88 5c 24 14          	mov    BYTE PTR [esp+0x14],bl
1000238f:	e9 9f f5 ff ff       	jmp    10001933 <ssfn_render+0x668>
10002394:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000239a:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
1000239d:	8a 52 0c             	mov    dl,BYTE PTR [edx+0xc]
100023a0:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
100023a3:	8b 95 24 f5 00 00    	mov    edx,DWORD PTR [ebp+0xf524]
100023a9:	0f b6 72 07          	movzx  esi,BYTE PTR [edx+0x7]
100023ad:	0f b6 5a 06          	movzx  ebx,BYTE PTR [edx+0x6]
100023b1:	89 f0                	mov    eax,esi
100023b3:	89 d9                	mov    ecx,ebx
100023b5:	43                   	inc    ebx
100023b6:	39 de                	cmp    esi,ebx
100023b8:	7e 08                	jle    100023c2 <ssfn_render+0x10f7>
100023ba:	48                   	dec    eax
100023bb:	29 c8                	sub    eax,ecx
100023bd:	88 42 07             	mov    BYTE PTR [edx+0x7],al
100023c0:	eb 04                	jmp    100023c6 <ssfn_render+0x10fb>
100023c2:	c6 42 07 00          	mov    BYTE PTR [edx+0x7],0x0
100023c6:	83 bc 24 f4 05 01 00 00 	cmp    DWORD PTR [esp+0x105f4],0x0
100023ce:	0f 84 c9 0c 00 00    	je     1000309d <ssfn_render+0x1dd2>
100023d4:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
100023da:	8b bd c0 f5 00 00    	mov    edi,DWORD PTR [ebp+0xf5c0]
100023e0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100023e4:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
100023e7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
100023eb:	0f ba e0 0c          	bt     eax,0xc
100023ef:	72 22                	jb     10002413 <ssfn_render+0x1148>
100023f1:	8a 46 08             	mov    al,BYTE PTR [esi+0x8]
100023f4:	83 e0 0f             	and    eax,0xf
100023f7:	3c 03                	cmp    al,0x3
100023f9:	74 18                	je     10002413 <ssfn_render+0x1148>
100023fb:	0f b6 4e 0c          	movzx  ecx,BYTE PTR [esi+0xc]
100023ff:	84 c9                	test   cl,cl
10002401:	74 10                	je     10002413 <ssfn_render+0x1148>
10002403:	0f b6 56 0b          	movzx  edx,BYTE PTR [esi+0xb]
10002407:	0f af d7             	imul   edx,edi
1000240a:	89 d0                	mov    eax,edx
1000240c:	99                   	cdq    
1000240d:	f7 f9                	idiv   ecx
1000240f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10002413:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10002417:	39 85 c4 f5 00 00    	cmp    DWORD PTR [ebp+0xf5c4],eax
1000241d:	7d 06                	jge    10002425 <ssfn_render+0x115a>
1000241f:	89 85 c4 f5 00 00    	mov    DWORD PTR [ebp+0xf5c4],eax
10002425:	8b 9d 24 f5 00 00    	mov    ebx,DWORD PTR [ebp+0xf524]
1000242b:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
1000242f:	0f b7 13             	movzx  edx,WORD PTR [ebx]
10002432:	0f af 54 24 0c       	imul   edx,DWORD PTR [esp+0xc]
10002437:	89 d0                	mov    eax,edx
10002439:	99                   	cdq    
1000243a:	f7 f9                	idiv   ecx
1000243c:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
10002440:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10002444:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
10002447:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
1000244b:	0f b6 43 03          	movzx  eax,BYTE PTR [ebx+0x3]
1000244f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10002453:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
10002458:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
1000245c:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002461:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002465:	99                   	cdq    
10002466:	f7 f9                	idiv   ecx
10002468:	31 d2                	xor    edx,edx
1000246a:	83 ff 10             	cmp    edi,0x10
1000246d:	0f 9f c2             	setg   dl
10002470:	42                   	inc    edx
10002471:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
10002475:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
10002479:	7d 08                	jge    10002483 <ssfn_render+0x11b8>
1000247b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000247f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10002483:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
10002487:	39 c2                	cmp    edx,eax
10002489:	7d 04                	jge    1000248f <ssfn_render+0x11c4>
1000248b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
1000248f:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
10002494:	74 4c                	je     100024e2 <ssfn_render+0x1217>
10002496:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
1000249a:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000249f:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100024a3:	99                   	cdq    
100024a4:	f7 f9                	idiv   ecx
100024a6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100024aa:	81 e2 00 08 00 00    	and    edx,0x800
100024b0:	74 04                	je     100024b6 <ssfn_render+0x11eb>
100024b2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100024b6:	01 d0                	add    eax,edx
100024b8:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
100024be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100024c2:	0f b6 4e 0b          	movzx  ecx,BYTE PTR [esi+0xb]
100024c6:	0f b6 43 06          	movzx  eax,BYTE PTR [ebx+0x6]
100024ca:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
100024cf:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
100024d3:	99                   	cdq    
100024d4:	f7 f9                	idiv   ecx
100024d6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
100024da:	89 85 8c f5 00 00    	mov    DWORD PTR [ebp+0xf58c],eax
100024e0:	eb 22                	jmp    10002504 <ssfn_render+0x1239>
100024e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100024e6:	c7 85 8c f5 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xf58c],0x0
100024f0:	d1 f8                	sar    eax,1
100024f2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
100024fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100024fe:	89 85 88 f5 00 00    	mov    DWORD PTR [ebp+0xf588],eax
10002504:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000250b:	8b 18                	mov    ebx,DWORD PTR [eax]
1000250d:	85 db                	test   ebx,ebx
1000250f:	0f 84 2e 09 00 00    	je     10002e43 <ssfn_render+0x1b78>
10002515:	0f bf 50 04          	movsx  edx,WORD PTR [eax+0x4]
10002519:	89 d1                	mov    ecx,edx
1000251b:	89 d0                	mov    eax,edx
1000251d:	66 c1 f9 0b          	sar    cx,0xb
10002521:	c1 f8 1f             	sar    eax,0x1f
10002524:	31 c2                	xor    edx,eax
10002526:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
1000252a:	29 44 24 54          	sub    DWORD PTR [esp+0x54],eax
1000252e:	88 c8                	mov    al,cl
10002530:	83 e0 10             	and    eax,0x10
10002533:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
10002537:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000253b:	83 c0 40             	add    eax,0x40
1000253e:	c1 f8 06             	sar    eax,0x6
10002541:	89 84 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],eax
10002548:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
1000254c:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
10002550:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
10002554:	7d 08                	jge    1000255e <ssfn_render+0x1293>
10002556:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
1000255a:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
1000255e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002561:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
10002569:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
1000256d:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
10002575:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
10002579:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
1000257e:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002582:	99                   	cdq    
10002583:	f7 f9                	idiv   ecx
10002585:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
10002589:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002590:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10002593:	0f b6 f4             	movzx  esi,ah
10002596:	89 c2                	mov    edx,eax
10002598:	89 74 24 5c          	mov    DWORD PTR [esp+0x5c],esi
1000259c:	c1 ea 10             	shr    edx,0x10
1000259f:	0f b6 fa             	movzx  edi,dl
100025a2:	89 7c 24 58          	mov    DWORD PTR [esp+0x58],edi
100025a6:	0f b6 f8             	movzx  edi,al
100025a9:	c1 e8 18             	shr    eax,0x18
100025ac:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
100025b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
100025b4:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025bb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
100025be:	0f b6 fc             	movzx  edi,ah
100025c1:	89 c2                	mov    edx,eax
100025c3:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
100025ca:	c1 ea 10             	shr    edx,0x10
100025cd:	0f b6 c0             	movzx  eax,al
100025d0:	0f b6 f2             	movzx  esi,dl
100025d3:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
100025da:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
100025e1:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
100025e5:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100025ec:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
100025f3:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
100025f7:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
100025fb:	0f af c2             	imul   eax,edx
100025fe:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002602:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002606:	8d 04 90             	lea    eax,[eax+edx*4]
10002609:	01 d8                	add    eax,ebx
1000260b:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
10002612:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
10002616:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
1000261d:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002622:	89 84 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],eax
10002629:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
1000262d:	39 74 24 4c          	cmp    DWORD PTR [esp+0x4c],esi
10002631:	0f 8d e2 04 00 00    	jge    10002b19 <ssfn_render+0x184e>
10002637:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
1000263e:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002645:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002649:	0f bf 57 06          	movsx  edx,WORD PTR [edi+0x6]
1000264d:	03 44 24 4c          	add    eax,DWORD PTR [esp+0x4c]
10002651:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002655:	39 d0                	cmp    eax,edx
10002657:	0f 8d bc 04 00 00    	jge    10002b19 <ssfn_render+0x184e>
1000265d:	85 c0                	test   eax,eax
1000265f:	0f 88 94 04 00 00    	js     10002af9 <ssfn_render+0x182e>
10002665:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000266b:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
1000266f:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002673:	c1 e1 08             	shl    ecx,0x8
10002676:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
1000267e:	89 c8                	mov    eax,ecx
10002680:	0f af c3             	imul   eax,ebx
10002683:	99                   	cdq    
10002684:	f7 fe                	idiv   esi
10002686:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
1000268d:	c1 f8 08             	sar    eax,0x8
10002690:	89 84 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],eax
10002697:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
1000269d:	0f af c3             	imul   eax,ebx
100026a0:	99                   	cdq    
100026a1:	f7 fe                	idiv   esi
100026a3:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
100026a7:	c1 f8 08             	sar    eax,0x8
100026aa:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
100026b1:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
100026b5:	2b 84 24 94 00 00 00 	sub    eax,DWORD PTR [esp+0x94]
100026bc:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
100026c3:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026ca:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
100026ce:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
100026d2:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
100026d6:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100026da:	0f 8d 19 04 00 00    	jge    10002af9 <ssfn_render+0x182e>
100026e0:	85 c0                	test   eax,eax
100026e2:	0f 88 ff 03 00 00    	js     10002ae7 <ssfn_render+0x181c>
100026e8:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
100026ef:	83 78 14 00          	cmp    DWORD PTR [eax+0x14],0x0
100026f3:	75 42                	jne    10002737 <ssfn_render+0x146c>
100026f5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
100026f9:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002700:	b9 10 00 00 00       	mov    ecx,0x10
10002705:	8b 04 b0             	mov    eax,DWORD PTR [eax+esi*4]
10002708:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
1000270f:	89 c2                	mov    edx,eax
10002711:	0f b6 fc             	movzx  edi,ah
10002714:	d3 ea                	shr    edx,cl
10002716:	89 bc 24 8c 00 00 00 	mov    DWORD PTR [esp+0x8c],edi
1000271d:	0f b6 f2             	movzx  esi,dl
10002720:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002724:	89 b4 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],esi
1000272b:	d3 e8                	shr    eax,cl
1000272d:	0f b6 c0             	movzx  eax,al
10002730:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
10002737:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
1000273d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10002741:	0f b7 18             	movzx  ebx,WORD PTR [eax]
10002744:	c1 e1 08             	shl    ecx,0x8
10002747:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
1000274b:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
10002753:	89 c8                	mov    eax,ecx
10002755:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
1000275d:	0f af c3             	imul   eax,ebx
10002760:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
10002768:	99                   	cdq    
10002769:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
10002771:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
10002775:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
1000277d:	89 84 24 98 00 00 00 	mov    DWORD PTR [esp+0x98],eax
10002784:	c1 f8 08             	sar    eax,0x8
10002787:	89 84 24 b0 00 00 00 	mov    DWORD PTR [esp+0xb0],eax
1000278e:	8d 81 00 01 00 00    	lea    eax,[ecx+0x100]
10002794:	0f af c3             	imul   eax,ebx
10002797:	99                   	cdq    
10002798:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
1000279c:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
100027a0:	c1 f8 08             	sar    eax,0x8
100027a3:	89 84 24 b4 00 00 00 	mov    DWORD PTR [esp+0xb4],eax
100027aa:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
100027b1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100027b5:	8b 74 24 68          	mov    esi,DWORD PTR [esp+0x68]
100027b9:	39 74 24 48          	cmp    DWORD PTR [esp+0x48],esi
100027bd:	0f 8d 3b 02 00 00    	jge    100029fe <ssfn_render+0x1733>
100027c3:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
100027c7:	c1 fa 08             	sar    edx,0x8
100027ca:	3b 94 24 a8 00 00 00 	cmp    edx,DWORD PTR [esp+0xa8]
100027d1:	75 25                	jne    100027f8 <ssfn_render+0x152d>
100027d3:	0f b6 4c 24 48       	movzx  ecx,BYTE PTR [esp+0x48]
100027d8:	8b bc 24 a0 00 00 00 	mov    edi,DWORD PTR [esp+0xa0]
100027df:	b8 00 01 00 00       	mov    eax,0x100
100027e4:	81 64 24 48 00 ff ff ff 	and    DWORD PTR [esp+0x48],0xffffff00
100027ec:	29 c8                	sub    eax,ecx
100027ee:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
100027f2:	39 c7                	cmp    edi,eax
100027f4:	7e 1c                	jle    10002812 <ssfn_render+0x1547>
100027f6:	eb 16                	jmp    1000280e <ssfn_render+0x1543>
100027f8:	c7 44 24 2c 00 01 00 00 	mov    DWORD PTR [esp+0x2c],0x100
10002800:	3b 94 24 ac 00 00 00 	cmp    edx,DWORD PTR [esp+0xac]
10002807:	75 09                	jne    10002812 <ssfn_render+0x1547>
10002809:	0f b6 44 24 68       	movzx  eax,BYTE PTR [esp+0x68]
1000280e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002812:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
10002816:	0f b7 00             	movzx  eax,WORD PTR [eax]
10002819:	0f af c2             	imul   eax,edx
1000281c:	89 84 24 b8 00 00 00 	mov    DWORD PTR [esp+0xb8],eax
10002823:	0f b6 44 24 6c       	movzx  eax,BYTE PTR [esp+0x6c]
10002828:	0f af 44 24 2c       	imul   eax,DWORD PTR [esp+0x2c]
1000282d:	c1 f8 08             	sar    eax,0x8
10002830:	89 84 24 bc 00 00 00 	mov    DWORD PTR [esp+0xbc],eax
10002837:	8b 84 24 98 00 00 00 	mov    eax,DWORD PTR [esp+0x98]
1000283e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002842:	8b 74 24 6c          	mov    esi,DWORD PTR [esp+0x6c]
10002846:	39 74 24 44          	cmp    DWORD PTR [esp+0x44],esi
1000284a:	0f 8d a1 01 00 00    	jge    100029f1 <ssfn_render+0x1726>
10002850:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
10002854:	c1 f8 08             	sar    eax,0x8
10002857:	3b 84 24 b0 00 00 00 	cmp    eax,DWORD PTR [esp+0xb0]
1000285e:	75 3b                	jne    1000289b <ssfn_render+0x15d0>
10002860:	0f b6 4c 24 44       	movzx  ecx,BYTE PTR [esp+0x44]
10002865:	ba 00 01 00 00       	mov    edx,0x100
1000286a:	81 64 24 44 00 ff ff ff 	and    DWORD PTR [esp+0x44],0xffffff00
10002872:	29 ca                	sub    edx,ecx
10002874:	89 f1                	mov    ecx,esi
10002876:	2b 8c 24 98 00 00 00 	sub    ecx,DWORD PTR [esp+0x98]
1000287d:	39 d1                	cmp    ecx,edx
1000287f:	7c 0e                	jl     1000288f <ssfn_render+0x15c4>
10002881:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10002885:	81 fa 00 01 00 00    	cmp    edx,0x100
1000288b:	74 22                	je     100028af <ssfn_render+0x15e4>
1000288d:	89 d1                	mov    ecx,edx
1000288f:	0f af 4c 24 2c       	imul   ecx,DWORD PTR [esp+0x2c]
10002894:	89 cf                	mov    edi,ecx
10002896:	c1 ff 08             	sar    edi,0x8
10002899:	eb 14                	jmp    100028af <ssfn_render+0x15e4>
1000289b:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
100028a2:	3b 84 24 b4 00 00 00 	cmp    eax,DWORD PTR [esp+0xb4]
100028a9:	74 04                	je     100028af <ssfn_render+0x15e4>
100028ab:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
100028af:	03 44 24 74          	add    eax,DWORD PTR [esp+0x74]
100028b3:	01 7c 24 30          	add    DWORD PTR [esp+0x30],edi
100028b7:	8b b4 24 b8 00 00 00 	mov    esi,DWORD PTR [esp+0xb8]
100028be:	0f b6 54 06 08       	movzx  edx,BYTE PTR [esi+eax*1+0x8]
100028c3:	81 fa ff 00 00 00    	cmp    edx,0xff
100028c9:	75 37                	jne    10002902 <ssfn_render+0x1637>
100028cb:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
100028d2:	81 44 24 40 ff 00 00 00 	add    DWORD PTR [esp+0x40],0xff
100028da:	0f af c7             	imul   eax,edi
100028dd:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100028e1:	8b 84 24 8c 00 00 00 	mov    eax,DWORD PTR [esp+0x8c]
100028e8:	0f af c7             	imul   eax,edi
100028eb:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100028ef:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
100028f6:	0f af c7             	imul   eax,edi
100028f9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100028fd:	e9 e2 00 00 00       	jmp    100029e4 <ssfn_render+0x1719>
10002902:	81 fa fe 00 00 00    	cmp    edx,0xfe
10002908:	74 2d                	je     10002937 <ssfn_render+0x166c>
1000290a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
1000290d:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
10002910:	85 c9                	test   ecx,ecx
10002912:	74 23                	je     10002937 <ssfn_render+0x166c>
10002914:	01 c8                	add    eax,ecx
10002916:	8b 1c 90             	mov    ebx,DWORD PTR [eax+edx*4]
10002919:	89 d9                	mov    ecx,ebx
1000291b:	89 9c 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],ebx
10002922:	c1 e9 10             	shr    ecx,0x10
10002925:	0f b6 f7             	movzx  esi,bh
10002928:	0f b6 c1             	movzx  eax,cl
1000292b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000292f:	0f b6 c3             	movzx  eax,bl
10002932:	c1 eb 18             	shr    ebx,0x18
10002935:	eb 14                	jmp    1000294b <ssfn_render+0x1680>
10002937:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
1000293b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
1000293f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10002943:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
10002947:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
1000294b:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002951:	75 25                	jne    10002978 <ssfn_render+0x16ad>
10002953:	0f af c7             	imul   eax,edi
10002956:	0f af f7             	imul   esi,edi
10002959:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
1000295d:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
10002961:	69 c7 ff 00 00 00    	imul   eax,edi,0xff
10002967:	0f af cf             	imul   ecx,edi
1000296a:	01 74 24 38          	add    DWORD PTR [esp+0x38],esi
1000296e:	01 4c 24 34          	add    DWORD PTR [esp+0x34],ecx
10002972:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
10002976:	eb 6c                	jmp    100029e4 <ssfn_render+0x1719>
10002978:	0f af f3             	imul   esi,ebx
1000297b:	0f af c3             	imul   eax,ebx
1000297e:	b9 ff 00 00 00       	mov    ecx,0xff
10002983:	8b 94 24 88 00 00 00 	mov    edx,DWORD PTR [esp+0x88]
1000298a:	29 d9                	sub    ecx,ebx
1000298c:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
10002990:	0f af d1             	imul   edx,ecx
10002993:	b9 ff 00 00 00       	mov    ecx,0xff
10002998:	01 d0                	add    eax,edx
1000299a:	0f af c7             	imul   eax,edi
1000299d:	99                   	cdq    
1000299e:	f7 f9                	idiv   ecx
100029a0:	01 44 24 3c          	add    DWORD PTR [esp+0x3c],eax
100029a4:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100029a8:	0f af 84 24 8c 00 00 00 	imul   eax,DWORD PTR [esp+0x8c]
100029b0:	01 f0                	add    eax,esi
100029b2:	89 ce                	mov    esi,ecx
100029b4:	0f af c7             	imul   eax,edi
100029b7:	99                   	cdq    
100029b8:	f7 f9                	idiv   ecx
100029ba:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
100029be:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
100029c2:	0f af cb             	imul   ecx,ebx
100029c5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
100029c9:	0f af df             	imul   ebx,edi
100029cc:	0f af 84 24 90 00 00 00 	imul   eax,DWORD PTR [esp+0x90]
100029d4:	01 5c 24 40          	add    DWORD PTR [esp+0x40],ebx
100029d8:	01 c8                	add    eax,ecx
100029da:	0f af c7             	imul   eax,edi
100029dd:	99                   	cdq    
100029de:	f7 fe                	idiv   esi
100029e0:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
100029e4:	81 44 24 44 00 01 00 00 	add    DWORD PTR [esp+0x44],0x100
100029ec:	e9 51 fe ff ff       	jmp    10002842 <ssfn_render+0x1577>
100029f1:	81 44 24 48 00 01 00 00 	add    DWORD PTR [esp+0x48],0x100
100029f9:	e9 b7 fd ff ff       	jmp    100027b5 <ssfn_render+0x14ea>
100029fe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
10002a03:	74 30                	je     10002a35 <ssfn_render+0x176a>
10002a05:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002a09:	31 d2                	xor    edx,edx
10002a0b:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a0f:	31 d2                	xor    edx,edx
10002a11:	89 c1                	mov    ecx,eax
10002a13:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10002a17:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a1b:	31 d2                	xor    edx,edx
10002a1d:	89 c6                	mov    esi,eax
10002a1f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10002a23:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a27:	31 d2                	xor    edx,edx
10002a29:	89 c3                	mov    ebx,eax
10002a2b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002a2f:	f7 74 24 30          	div    DWORD PTR [esp+0x30]
10002a33:	eb 1c                	jmp    10002a51 <ssfn_render+0x1786>
10002a35:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002a39:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
10002a3d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10002a41:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10002a45:	c1 e9 08             	shr    ecx,0x8
10002a48:	c1 ee 08             	shr    esi,0x8
10002a4b:	c1 eb 08             	shr    ebx,0x8
10002a4e:	c1 e8 08             	shr    eax,0x8
10002a51:	83 f8 0f             	cmp    eax,0xf
10002a54:	0f 86 8d 00 00 00    	jbe    10002ae7 <ssfn_render+0x181c>
10002a5a:	89 ca                	mov    edx,ecx
10002a5c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
10002a62:	76 05                	jbe    10002a69 <ssfn_render+0x179e>
10002a64:	ba ff 00 00 00       	mov    edx,0xff
10002a69:	b9 10 00 00 00       	mov    ecx,0x10
10002a6e:	2b 8c 24 a4 00 00 00 	sub    ecx,DWORD PTR [esp+0xa4]
10002a75:	d3 e2                	shl    edx,cl
10002a77:	3d ff 00 00 00       	cmp    eax,0xff
10002a7c:	89 d1                	mov    ecx,edx
10002a7e:	76 05                	jbe    10002a85 <ssfn_render+0x17ba>
10002a80:	b8 ff 00 00 00       	mov    eax,0xff
10002a85:	c1 e0 18             	shl    eax,0x18
10002a88:	09 c8                	or     eax,ecx
10002a8a:	81 fe ff 00 00 00    	cmp    esi,0xff
10002a90:	76 05                	jbe    10002a97 <ssfn_render+0x17cc>
10002a92:	be ff 00 00 00       	mov    esi,0xff
10002a97:	c1 e6 08             	shl    esi,0x8
10002a9a:	09 f0                	or     eax,esi
10002a9c:	81 fb ff 00 00 00    	cmp    ebx,0xff
10002aa2:	76 05                	jbe    10002aa9 <ssfn_render+0x17de>
10002aa4:	bb ff 00 00 00       	mov    ebx,0xff
10002aa9:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002aad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002ab1:	d3 e3                	shl    ebx,cl
10002ab3:	09 c3                	or     ebx,eax
10002ab5:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
10002abc:	89 1c b0             	mov    DWORD PTR [eax+esi*4],ebx
10002abf:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
10002ac3:	39 5c 24 4c          	cmp    DWORD PTR [esp+0x4c],ebx
10002ac7:	75 1e                	jne    10002ae7 <ssfn_render+0x181c>
10002ac9:	39 b4 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],esi
10002ad0:	7e 07                	jle    10002ad9 <ssfn_render+0x180e>
10002ad2:	89 b4 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],esi
10002ad9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002add:	39 5c 24 7c          	cmp    DWORD PTR [esp+0x7c],ebx
10002ae1:	7d 04                	jge    10002ae7 <ssfn_render+0x181c>
10002ae3:	89 5c 24 7c          	mov    DWORD PTR [esp+0x7c],ebx
10002ae7:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10002aef:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10002af3:	0f 85 ca fb ff ff    	jne    100026c3 <ssfn_render+0x13f8>
10002af9:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002b00:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
10002b04:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002b08:	25 fc ff 00 00       	and    eax,0xfffc
10002b0d:	01 84 24 80 00 00 00 	add    DWORD PTR [esp+0x80],eax
10002b14:	e9 10 fb ff ff       	jmp    10002629 <ssfn_render+0x135e>
10002b19:	f6 85 bc f5 00 00 10 	test   BYTE PTR [ebp+0xf5bc],0x10
10002b20:	0f 84 90 01 00 00    	je     10002cb6 <ssfn_render+0x19eb>
10002b26:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002b2e:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
10002b35:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
10002b39:	40                   	inc    eax
10002b3a:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
10002b3e:	29 c7                	sub    edi,eax
10002b40:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
10002b44:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
10002b48:	8d 44 18 02          	lea    eax,[eax+ebx*1+0x2]
10002b4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002b50:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
10002b54:	7e 09                	jle    10002b5f <ssfn_render+0x1894>
10002b56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10002b5a:	40                   	inc    eax
10002b5b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002b5f:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002b66:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002b6d:	0f b7 57 08          	movzx  edx,WORD PTR [edi+0x8]
10002b71:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002b75:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002b79:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002b7d:	0f af c2             	imul   eax,edx
10002b80:	0f bf 57 0a          	movsx  edx,WORD PTR [edi+0xa]
10002b84:	2b 54 24 1c          	sub    edx,DWORD PTR [esp+0x1c]
10002b88:	8d 44 90 fc          	lea    eax,[eax+edx*4-0x4]
10002b8c:	03 07                	add    eax,DWORD PTR [edi]
10002b8e:	89 c7                	mov    edi,eax
10002b90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002b94:	c1 e0 18             	shl    eax,0x18
10002b97:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
10002b9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10002b9f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002ba3:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002ba8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
10002bac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10002bb0:	03 44 24 64          	add    eax,DWORD PTR [esp+0x64]
10002bb4:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
10002bb8:	0f 8e f8 00 00 00    	jle    10002cb6 <ssfn_render+0x19eb>
10002bbe:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bc5:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10002bcc:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002bd0:	0f bf 56 06          	movsx  edx,WORD PTR [esi+0x6]
10002bd4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
10002bd8:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002bdc:	39 d0                	cmp    eax,edx
10002bde:	0f 8d d2 00 00 00    	jge    10002cb6 <ssfn_render+0x19eb>
10002be4:	31 db                	xor    ebx,ebx
10002be6:	85 c0                	test   eax,eax
10002be8:	79 23                	jns    10002c0d <ssfn_render+0x1942>
10002bea:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002bf1:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002bf5:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002bf9:	25 fc ff 00 00       	and    eax,0xfffc
10002bfe:	01 c7                	add    edi,eax
10002c00:	eb aa                	jmp    10002bac <ssfn_render+0x18e1>
10002c02:	85 c0                	test   eax,eax
10002c04:	79 20                	jns    10002c26 <ssfn_render+0x195b>
10002c06:	43                   	inc    ebx
10002c07:	39 5c 24 70          	cmp    DWORD PTR [esp+0x70],ebx
10002c0b:	7c dd                	jl     10002bea <ssfn_render+0x191f>
10002c0d:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002c14:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002c18:	01 d8                	add    eax,ebx
10002c1a:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002c1e:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002c22:	7c de                	jl     10002c02 <ssfn_render+0x1937>
10002c24:	eb c4                	jmp    10002bea <ssfn_render+0x191f>
10002c26:	39 5c 24 2c          	cmp    DWORD PTR [esp+0x2c],ebx
10002c2a:	7e 06                	jle    10002c32 <ssfn_render+0x1967>
10002c2c:	3b 5c 24 34          	cmp    ebx,DWORD PTR [esp+0x34]
10002c30:	7f d4                	jg     10002c06 <ssfn_render+0x193b>
10002c32:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
10002c35:	b8 10 00 00 00       	mov    eax,0x10
10002c3a:	0f b6 f6             	movzx  esi,dh
10002c3d:	2b 44 24 48          	sub    eax,DWORD PTR [esp+0x48]
10002c41:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
10002c45:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002c49:	89 d0                	mov    eax,edx
10002c4b:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002c4f:	d3 e8                	shr    eax,cl
10002c51:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002c55:	0f b6 c0             	movzx  eax,al
10002c58:	d3 ea                	shr    edx,cl
10002c5a:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002c5e:	0f b6 f2             	movzx  esi,dl
10002c61:	29 c1                	sub    ecx,eax
10002c63:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002c67:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002c6c:	29 f2                	sub    edx,esi
10002c6e:	c1 f9 08             	sar    ecx,0x8
10002c71:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002c76:	01 c8                	add    eax,ecx
10002c78:	c1 fa 08             	sar    edx,0x8
10002c7b:	8a 4c 24 38          	mov    cl,BYTE PTR [esp+0x38]
10002c7f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
10002c83:	d3 e0                	shl    eax,cl
10002c85:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002c89:	03 74 24 40          	add    esi,DWORD PTR [esp+0x40]
10002c8d:	2b 54 24 3c          	sub    edx,DWORD PTR [esp+0x3c]
10002c91:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002c95:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002c9a:	d3 e6                	shl    esi,cl
10002c9c:	c1 fa 08             	sar    edx,0x8
10002c9f:	03 54 24 3c          	add    edx,DWORD PTR [esp+0x3c]
10002ca3:	c1 e2 08             	shl    edx,0x8
10002ca6:	09 d0                	or     eax,edx
10002ca8:	0b 44 24 44          	or     eax,DWORD PTR [esp+0x44]
10002cac:	09 c6                	or     esi,eax
10002cae:	89 34 9f             	mov    DWORD PTR [edi+ebx*4],esi
10002cb1:	e9 50 ff ff ff       	jmp    10002c06 <ssfn_render+0x193b>
10002cb6:	f6 85 bc f5 00 00 20 	test   BYTE PTR [ebp+0xf5bc],0x20
10002cbd:	0f 84 80 01 00 00    	je     10002e43 <ssfn_render+0x1b78>
10002cc3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10002cc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002ccb:	d1 fa                	sar    edx,1
10002ccd:	40                   	inc    eax
10002cce:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002cd2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002cd6:	39 7c 24 18          	cmp    DWORD PTR [esp+0x18],edi
10002cda:	7e 09                	jle    10002ce5 <ssfn_render+0x1a1a>
10002cdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10002ce0:	40                   	inc    eax
10002ce1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
10002ce5:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002cec:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002cf3:	0f b7 4b 08          	movzx  ecx,WORD PTR [ebx+0x8]
10002cf7:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002cfb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10002cff:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d03:	01 d0                	add    eax,edx
10002d05:	0f af c1             	imul   eax,ecx
10002d08:	0f bf 4b 0a          	movsx  ecx,WORD PTR [ebx+0xa]
10002d0c:	2b 4c 24 1c          	sub    ecx,DWORD PTR [esp+0x1c]
10002d10:	8d 44 88 fc          	lea    eax,[eax+ecx*4-0x4]
10002d14:	03 03                	add    eax,DWORD PTR [ebx]
10002d16:	89 c7                	mov    edi,eax
10002d18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10002d1c:	c1 e0 18             	shl    eax,0x18
10002d1f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
10002d23:	0f b6 84 24 9c 00 00 00 	movzx  eax,BYTE PTR [esp+0x9c]
10002d2b:	01 d0                	add    eax,edx
10002d2d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
10002d31:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
10002d36:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
10002d3a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10002d3e:	39 5c 24 3c          	cmp    DWORD PTR [esp+0x3c],ebx
10002d42:	0f 8e fb 00 00 00    	jle    10002e43 <ssfn_render+0x1b78>
10002d48:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d4f:	0f bf 40 0c          	movsx  eax,WORD PTR [eax+0xc]
10002d53:	01 d8                	add    eax,ebx
10002d55:	8b 9c 24 f4 05 01 00 	mov    ebx,DWORD PTR [esp+0x105f4]
10002d5c:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
10002d60:	0f bf 53 06          	movsx  edx,WORD PTR [ebx+0x6]
10002d64:	39 d0                	cmp    eax,edx
10002d66:	0f 8d d7 00 00 00    	jge    10002e43 <ssfn_render+0x1b78>
10002d6c:	31 f6                	xor    esi,esi
10002d6e:	85 c0                	test   eax,eax
10002d70:	0f 89 ad 00 00 00    	jns    10002e23 <ssfn_render+0x1b58>
10002d76:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002d7d:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
10002d81:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
10002d85:	25 fc ff 00 00       	and    eax,0xfffc
10002d8a:	01 c7                	add    edi,eax
10002d8c:	eb ac                	jmp    10002d3a <ssfn_render+0x1a6f>
10002d8e:	85 c0                	test   eax,eax
10002d90:	0f 88 82 00 00 00    	js     10002e18 <ssfn_render+0x1b4d>
10002d96:	8b 1c b7             	mov    ebx,DWORD PTR [edi+esi*4]
10002d99:	b8 10 00 00 00       	mov    eax,0x10
10002d9e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
10002da2:	2b 44 24 40          	sub    eax,DWORD PTR [esp+0x40]
10002da6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
10002daa:	89 d8                	mov    eax,ebx
10002dac:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002db0:	d3 e8                	shr    eax,cl
10002db2:	0f b6 cf             	movzx  ecx,bh
10002db5:	0f b6 c0             	movzx  eax,al
10002db8:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
10002dbc:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002dc0:	d3 eb                	shr    ebx,cl
10002dc2:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10002dc6:	0f b6 db             	movzx  ebx,bl
10002dc9:	29 c1                	sub    ecx,eax
10002dcb:	29 da                	sub    edx,ebx
10002dcd:	0f af 4c 24 14       	imul   ecx,DWORD PTR [esp+0x14]
10002dd2:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002dd7:	c1 f9 08             	sar    ecx,0x8
10002dda:	c1 fa 08             	sar    edx,0x8
10002ddd:	01 c8                	add    eax,ecx
10002ddf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
10002de3:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
10002de7:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
10002deb:	d3 e0                	shl    eax,cl
10002ded:	2b 54 24 30          	sub    edx,DWORD PTR [esp+0x30]
10002df1:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
10002df5:	0f af 54 24 14       	imul   edx,DWORD PTR [esp+0x14]
10002dfa:	c1 fa 08             	sar    edx,0x8
10002dfd:	03 54 24 30          	add    edx,DWORD PTR [esp+0x30]
10002e01:	c1 e2 08             	shl    edx,0x8
10002e04:	09 d0                	or     eax,edx
10002e06:	8d 14 19             	lea    edx,[ecx+ebx*1]
10002e09:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
10002e0d:	8a 4c 24 24          	mov    cl,BYTE PTR [esp+0x24]
10002e11:	d3 e2                	shl    edx,cl
10002e13:	09 c2                	or     edx,eax
10002e15:	89 14 b7             	mov    DWORD PTR [edi+esi*4],edx
10002e18:	46                   	inc    esi
10002e19:	39 74 24 2c          	cmp    DWORD PTR [esp+0x2c],esi
10002e1d:	0f 8c 53 ff ff ff    	jl     10002d76 <ssfn_render+0x1aab>
10002e23:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e2a:	0f bf 40 0a          	movsx  eax,WORD PTR [eax+0xa]
10002e2e:	01 f0                	add    eax,esi
10002e30:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
10002e34:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10002e38:	0f 8c 50 ff ff ff    	jl     10002d8e <ssfn_render+0x1ac3>
10002e3e:	e9 33 ff ff ff       	jmp    10002d76 <ssfn_render+0x1aab>
10002e43:	f6 85 bd f5 00 00 08 	test   BYTE PTR [ebp+0xf5bd],0x8
10002e4a:	74 04                	je     10002e50 <ssfn_render+0x1b85>
10002e4c:	f7 5c 24 20          	neg    DWORD PTR [esp+0x20]
10002e50:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10002e54:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
10002e58:	89 85 90 f5 00 00    	mov    DWORD PTR [ebp+0xf590],eax
10002e5e:	8b 84 24 f4 05 01 00 	mov    eax,DWORD PTR [esp+0x105f4]
10002e65:	66 01 78 0a          	add    WORD PTR [eax+0xa],di
10002e69:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10002e70:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002e73:	0f b6 48 0b          	movzx  ecx,BYTE PTR [eax+0xb]
10002e77:	8b 85 24 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf524]
10002e7d:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
10002e81:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10002e86:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10002e8a:	99                   	cdq    
10002e8b:	f7 f9                	idiv   ecx
10002e8d:	66 01 47 0c          	add    WORD PTR [edi+0xc],ax
10002e91:	8b 85 bc f5 00 00    	mov    eax,DWORD PTR [ebp+0xf5bc]
10002e97:	25 80 00 00 00       	and    eax,0x80
10002e9c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10002ea0:	0f 85 f7 01 00 00    	jne    1000309d <ssfn_render+0x1dd2>
10002ea6:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002ea9:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
10002ead:	0f 84 ea 01 00 00    	je     1000309d <ssfn_render+0x1dd2>
10002eb3:	8b 94 24 f8 05 01 00 	mov    edx,DWORD PTR [esp+0x105f8]
10002eba:	83 ec 0c             	sub    esp,0xc
10002ebd:	03 94 24 d4 00 00 00 	add    edx,DWORD PTR [esp+0xd4]
10002ec4:	8d 8c 24 d0 00 00 00 	lea    ecx,[esp+0xd0]
10002ecb:	51                   	push   ecx
10002ecc:	8d 8c 24 dc 00 00 00 	lea    ecx,[esp+0xdc]
10002ed3:	e8 53 d9 ff ff       	call   1000082b <_ssfn_c>
10002ed8:	83 c4 10             	add    esp,0x10
10002edb:	85 c0                	test   eax,eax
10002edd:	0f 84 ba 01 00 00    	je     1000309d <ssfn_render+0x1dd2>
10002ee3:	83 bc 24 c4 00 00 00 20 	cmp    DWORD PTR [esp+0xc4],0x20
10002eeb:	0f 86 ac 01 00 00    	jbe    1000309d <ssfn_render+0x1dd2>
10002ef1:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002ef7:	8d 48 06             	lea    ecx,[eax+0x6]
10002efa:	8b 85 74 f5 00 00    	mov    eax,DWORD PTR [ebp+0xf574]
10002f00:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
10002f04:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10002f08:	0f 8e 8f 01 00 00    	jle    1000309d <ssfn_render+0x1dd2>
10002f0e:	8a 19                	mov    bl,BYTE PTR [ecx]
10002f10:	88 5c 24 18          	mov    BYTE PTR [esp+0x18],bl
10002f14:	8a 18                	mov    bl,BYTE PTR [eax]
10002f16:	83 e3 40             	and    ebx,0x40
10002f19:	80 7c 24 18 ff       	cmp    BYTE PTR [esp+0x18],0xff
10002f1e:	75 14                	jne    10002f34 <ssfn_render+0x1c69>
10002f20:	80 79 01 ff          	cmp    BYTE PTR [ecx+0x1],0xff
10002f24:	75 0e                	jne    10002f34 <ssfn_render+0x1c69>
10002f26:	80 fb 01             	cmp    bl,0x1
10002f29:	19 c0                	sbb    eax,eax
10002f2b:	8d 4c 01 06          	lea    ecx,[ecx+eax*1+0x6]
10002f2f:	e9 60 01 00 00       	jmp    10003094 <ssfn_render+0x1dc9>
10002f34:	0f b6 71 04          	movzx  esi,BYTE PTR [ecx+0x4]
10002f38:	0f b6 51 03          	movzx  edx,BYTE PTR [ecx+0x3]
10002f3c:	c1 e6 10             	shl    esi,0x10
10002f3f:	0f b6 79 02          	movzx  edi,BYTE PTR [ecx+0x2]
10002f43:	84 db                	test   bl,bl
10002f45:	74 08                	je     10002f4f <ssfn_render+0x1c84>
10002f47:	8b 79 02             	mov    edi,DWORD PTR [ecx+0x2]
10002f4a:	83 c1 06             	add    ecx,0x6
10002f4d:	eb 0c                	jmp    10002f5b <ssfn_render+0x1c90>
10002f4f:	c1 e2 08             	shl    edx,0x8
10002f52:	83 c1 05             	add    ecx,0x5
10002f55:	89 d0                	mov    eax,edx
10002f57:	09 f0                	or     eax,esi
10002f59:	09 c7                	or     edi,eax
10002f5b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
10002f5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10002f62:	01 f8                	add    eax,edi
10002f64:	8a 10                	mov    dl,BYTE PTR [eax]
10002f66:	88 d3                	mov    bl,dl
10002f68:	83 e3 e0             	and    ebx,0xffffffe0
10002f6b:	80 fb c0             	cmp    bl,0xc0
10002f6e:	0f 85 20 01 00 00    	jne    10003094 <ssfn_render+0x1dc9>
10002f74:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
10002f78:	c1 e2 08             	shl    edx,0x8
10002f7b:	83 c0 02             	add    eax,0x2
10002f7e:	81 e2 00 1f 00 00    	and    edx,0x1f00
10002f84:	09 da                	or     edx,ebx
10002f86:	8d 72 01             	lea    esi,[edx+0x1]
10002f89:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
10002f8d:	8b b4 24 c4 00 00 00 	mov    esi,DWORD PTR [esp+0xc4]
10002f94:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10002f98:	83 7c 24 1c ff       	cmp    DWORD PTR [esp+0x1c],0xffffffff
10002f9d:	0f 84 f1 00 00 00    	je     10003094 <ssfn_render+0x1dc9>
10002fa3:	0f b6 58 02          	movzx  ebx,BYTE PTR [eax+0x2]
10002fa7:	0f b7 10             	movzx  edx,WORD PTR [eax]
10002faa:	c1 e3 10             	shl    ebx,0x10
10002fad:	81 e3 00 00 0f 00    	and    ebx,0xf0000
10002fb3:	09 d3                	or     ebx,edx
10002fb5:	39 de                	cmp    esi,ebx
10002fb7:	0f 82 cf 00 00 00    	jb     1000308c <ssfn_render+0x1dc1>
10002fbd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
10002fc0:	89 d7                	mov    edi,edx
10002fc2:	c1 e7 10             	shl    edi,0x10
10002fc5:	81 e7 00 00 0f 00    	and    edi,0xf0000
10002fcb:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10002fcf:	0f b7 78 03          	movzx  edi,WORD PTR [eax+0x3]
10002fd3:	0b 7c 24 20          	or     edi,DWORD PTR [esp+0x20]
10002fd7:	39 fe                	cmp    esi,edi
10002fd9:	0f 87 ad 00 00 00    	ja     1000308c <ssfn_render+0x1dc1>
10002fdf:	29 de                	sub    esi,ebx
10002fe1:	c0 ea 04             	shr    dl,0x4
10002fe4:	89 b4 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],esi
10002feb:	0f b6 d2             	movzx  edx,dl
10002fee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10002ff2:	89 d3                	mov    ebx,edx
10002ff4:	0f b7 50 06          	movzx  edx,WORD PTR [eax+0x6]
10002ff8:	c1 e3 10             	shl    ebx,0x10
10002ffb:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
10002ffe:	09 da                	or     edx,ebx
10003000:	c0 e8 04             	shr    al,0x4
10003003:	c1 e0 18             	shl    eax,0x18
10003006:	09 c2                	or     edx,eax
10003008:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000300c:	03 50 18             	add    edx,DWORD PTR [eax+0x18]
1000300f:	01 c2                	add    edx,eax
10003011:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003014:	8d 7c 06 fc          	lea    edi,[esi+eax*1-0x4]
10003018:	39 d7                	cmp    edi,edx
1000301a:	76 78                	jbe    10003094 <ssfn_render+0x1dc9>
1000301c:	8a 1a                	mov    bl,BYTE PTR [edx]
1000301e:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
10003025:	89 de                	mov    esi,ebx
10003027:	83 e6 7f             	and    esi,0x7f
1000302a:	39 c6                	cmp    esi,eax
1000302c:	73 1d                	jae    1000304b <ssfn_render+0x1d80>
1000302e:	48                   	dec    eax
1000302f:	bb 02 00 00 00       	mov    ebx,0x2
10003034:	29 f0                	sub    eax,esi
10003036:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
1000303d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
10003040:	84 c0                	test   al,al
10003042:	78 03                	js     10003047 <ssfn_render+0x1d7c>
10003044:	8d 58 02             	lea    ebx,[eax+0x2]
10003047:	01 da                	add    edx,ebx
10003049:	eb cd                	jmp    10003018 <ssfn_render+0x1d4d>
1000304b:	be 01 00 00 00       	mov    esi,0x1
10003050:	84 db                	test   bl,bl
10003052:	78 03                	js     10003057 <ssfn_render+0x1d8c>
10003054:	8d 70 01             	lea    esi,[eax+0x1]
10003057:	0f be 04 32          	movsx  eax,BYTE PTR [edx+esi*1]
1000305b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000305f:	0f af 44 24 0c       	imul   eax,DWORD PTR [esp+0xc]
10003064:	0f b6 5b 0b          	movzx  ebx,BYTE PTR [ebx+0xb]
10003068:	99                   	cdq    
10003069:	f7 fb                	idiv   ebx
1000306b:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10003070:	74 0d                	je     1000307f <ssfn_render+0x1db4>
10003072:	8b bc 24 f4 05 01 00 	mov    edi,DWORD PTR [esp+0x105f4]
10003079:	66 01 47 0a          	add    WORD PTR [edi+0xa],ax
1000307d:	eb 15                	jmp    10003094 <ssfn_render+0x1dc9>
1000307f:	8b b4 24 f4 05 01 00 	mov    esi,DWORD PTR [esp+0x105f4]
10003086:	66 01 46 0c          	add    WORD PTR [esi+0xc],ax
1000308a:	eb 08                	jmp    10003094 <ssfn_render+0x1dc9>
1000308c:	83 c0 08             	add    eax,0x8
1000308f:	e9 00 ff ff ff       	jmp    10002f94 <ssfn_render+0x1cc9>
10003094:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
10003098:	e9 5d fe ff ff       	jmp    10002efa <ssfn_render+0x1c2f>
1000309d:	8b 8c 24 c8 00 00 00 	mov    ecx,DWORD PTR [esp+0xc8]
100030a4:	eb 73                	jmp    10003119 <ssfn_render+0x1e4e>
100030a6:	c7 84 24 cc 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0xcc],0x0
100030b1:	e9 50 e4 ff ff       	jmp    10001506 <ssfn_render+0x23b>
100030b6:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100030bd:	57                   	push   edi
100030be:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
100030c5:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
100030cc:	e8 5a d7 ff ff       	call   1000082b <_ssfn_c>
100030d1:	5f                   	pop    edi
100030d2:	85 c0                	test   eax,eax
100030d4:	0f 84 25 e4 ff ff    	je     100014ff <ssfn_render+0x234>
100030da:	e9 a2 e4 ff ff       	jmp    10001581 <ssfn_render+0x2b6>
100030df:	8b 04 86             	mov    eax,DWORD PTR [esi+eax*4]
100030e2:	f6 40 08 30          	test   BYTE PTR [eax+0x8],0x30
100030e6:	75 0c                	jne    100030f4 <ssfn_render+0x1e29>
100030e8:	ff 84 24 cc 00 00 00 	inc    DWORD PTR [esp+0xcc]
100030ef:	e9 3b e4 ff ff       	jmp    1000152f <ssfn_render+0x264>
100030f4:	8d bc 24 c0 00 00 00 	lea    edi,[esp+0xc0]
100030fb:	57                   	push   edi
100030fc:	8d 8c 24 cc 00 00 00 	lea    ecx,[esp+0xcc]
10003103:	8b 94 24 fc 05 01 00 	mov    edx,DWORD PTR [esp+0x105fc]
1000310a:	e8 1c d7 ff ff       	call   1000082b <_ssfn_c>
1000310f:	59                   	pop    ecx
10003110:	85 c0                	test   eax,eax
10003112:	74 d4                	je     100030e8 <ssfn_render+0x1e1d>
10003114:	e9 68 e4 ff ff       	jmp    10001581 <ssfn_render+0x2b6>
10003119:	81 c4 dc 05 01 00    	add    esp,0x105dc
1000311f:	89 c8                	mov    eax,ecx
10003121:	5b                   	pop    ebx
10003122:	5e                   	pop    esi
10003123:	5f                   	pop    edi
10003124:	5d                   	pop    ebp
10003125:	c3                   	ret    

10003126 <ssfn_bbox>:
10003126:	55                   	push   ebp
10003127:	57                   	push   edi
10003128:	56                   	push   esi
10003129:	53                   	push   ebx
1000312a:	83 ec 3c             	sub    esp,0x3c
1000312d:	83 7c 24 64 00       	cmp    DWORD PTR [esp+0x64],0x0
10003132:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
10003136:	0f 94 c0             	sete   al
10003139:	83 7c 24 60 00       	cmp    DWORD PTR [esp+0x60],0x0
1000313e:	0f 94 c2             	sete   dl
10003141:	09 d0                	or     eax,edx
10003143:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
10003148:	0f 94 c2             	sete   dl
1000314b:	09 d0                	or     eax,edx
1000314d:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
10003152:	0f 94 c2             	sete   dl
10003155:	09 d0                	or     eax,edx
10003157:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
1000315c:	0f 94 c2             	sete   dl
1000315f:	08 d0                	or     al,dl
10003161:	0f 85 7c 01 00 00    	jne    100032e3 <ssfn_bbox+0x1bd>
10003167:	85 db                	test   ebx,ebx
10003169:	0f 84 74 01 00 00    	je     100032e3 <ssfn_bbox+0x1bd>
1000316f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
10003173:	31 f6                	xor    esi,esi
10003175:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000317b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
1000317f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003185:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003189:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
1000318f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003193:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003199:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
1000319d:	80 38 00             	cmp    BYTE PTR [eax],0x0
100031a0:	0f 84 42 01 00 00    	je     100032e8 <ssfn_bbox+0x1c2>
100031a6:	8d 54 24 18          	lea    edx,[esp+0x18]
100031aa:	b9 06 00 00 00       	mov    ecx,0x6
100031af:	89 d7                	mov    edi,edx
100031b1:	89 f0                	mov    eax,esi
100031b3:	c7 83 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xf5c4],0x0
100031bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100031bf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
100031c7:	31 ff                	xor    edi,edi
100031c9:	bd 01 00 00 00       	mov    ebp,0x1
100031ce:	50                   	push   eax
100031cf:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
100031d3:	8d 44 24 20          	lea    eax,[esp+0x20]
100031d7:	50                   	push   eax
100031d8:	53                   	push   ebx
100031d9:	e8 fc ff ff ff       	call   100031da <ssfn_bbox+0xb4>	100031da: R_386_PC32	ssfn_render
100031de:	83 c4 10             	add    esp,0x10
100031e1:	89 c6                	mov    esi,eax
100031e3:	85 c0                	test   eax,eax
100031e5:	74 6f                	je     10003256 <ssfn_bbox+0x130>
100031e7:	0f 88 fb 00 00 00    	js     100032e8 <ssfn_bbox+0x1c2>
100031ed:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
100031f3:	85 c0                	test   eax,eax
100031f5:	0f 84 ed 00 00 00    	je     100032e8 <ssfn_bbox+0x1c2>
100031fb:	85 ed                	test   ebp,ebp
100031fd:	74 0b                	je     1000320a <ssfn_bbox+0xe4>
100031ff:	8b bb 88 f5 00 00    	mov    edi,DWORD PTR [ebx+0xf588]
10003205:	66 01 7c 24 22       	add    WORD PTR [esp+0x22],di
1000320a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
1000320e:	74 12                	je     10003222 <ssfn_bbox+0xfc>
10003210:	8b 83 8c f5 00 00    	mov    eax,DWORD PTR [ebx+0xf58c]
10003216:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
1000321a:	7d 2f                	jge    1000324b <ssfn_bbox+0x125>
1000321c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003220:	eb 29                	jmp    1000324b <ssfn_bbox+0x125>
10003222:	0f b7 08             	movzx  ecx,WORD PTR [eax]
10003225:	0f bf 6c 24 1c       	movsx  ebp,WORD PTR [esp+0x1c]
1000322a:	39 cd                	cmp    ebp,ecx
1000322c:	7d 05                	jge    10003233 <ssfn_bbox+0x10d>
1000322e:	66 89 4c 24 1c       	mov    WORD PTR [esp+0x1c],cx
10003233:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
10003237:	66 8b 4c 24 1e       	mov    cx,WORD PTR [esp+0x1e]
1000323c:	84 d2                	test   dl,dl
1000323e:	75 04                	jne    10003244 <ssfn_bbox+0x11e>
10003240:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
10003244:	01 ca                	add    edx,ecx
10003246:	66 89 54 24 1e       	mov    WORD PTR [esp+0x1e],dx
1000324b:	01 74 24 54          	add    DWORD PTR [esp+0x54],esi
1000324f:	31 ed                	xor    ebp,ebp
10003251:	e9 78 ff ff ff       	jmp    100031ce <ssfn_bbox+0xa8>
10003256:	f6 83 bc f5 00 00 02 	test   BYTE PTR [ebx+0xf5bc],0x2
1000325d:	74 23                	je     10003282 <ssfn_bbox+0x15c>
1000325f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
10003262:	f6 40 08 20          	test   BYTE PTR [eax+0x8],0x20
10003266:	75 1a                	jne    10003282 <ssfn_bbox+0x15c>
10003268:	8b 83 c0 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c0]
1000326e:	b9 04 00 00 00       	mov    ecx,0x4
10003273:	99                   	cdq    
10003274:	f7 f9                	idiv   ecx
10003276:	66 03 44 24 22       	add    ax,WORD PTR [esp+0x22]
1000327b:	29 f8                	sub    eax,edi
1000327d:	66 89 44 24 22       	mov    WORD PTR [esp+0x22],ax
10003282:	8b 83 24 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf524]
10003288:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
1000328c:	74 29                	je     100032b7 <ssfn_bbox+0x191>
1000328e:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003293:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
10003297:	89 01                	mov    DWORD PTR [ecx],eax
10003299:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
1000329d:	8b 83 c4 f5 00 00    	mov    eax,DWORD PTR [ebx+0xf5c4]
100032a3:	89 01                	mov    DWORD PTR [ecx],eax
100032a5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100032a9:	89 38                	mov    DWORD PTR [eax],edi
100032ab:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100032af:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
100032b3:	89 38                	mov    DWORD PTR [eax],edi
100032b5:	eb 31                	jmp    100032e8 <ssfn_bbox+0x1c2>
100032b7:	0f bf 44 24 1c       	movsx  eax,WORD PTR [esp+0x1c]
100032bc:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
100032c0:	89 07                	mov    DWORD PTR [edi],eax
100032c2:	0f bf 44 24 24       	movsx  eax,WORD PTR [esp+0x24]
100032c7:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
100032cb:	89 07                	mov    DWORD PTR [edi],eax
100032cd:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
100032d1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100032d7:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
100032db:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
100032e1:	eb 05                	jmp    100032e8 <ssfn_bbox+0x1c2>
100032e3:	be fc ff ff ff       	mov    esi,0xfffffffc
100032e8:	83 c4 3c             	add    esp,0x3c
100032eb:	89 f0                	mov    eax,esi
100032ed:	5b                   	pop    ebx
100032ee:	5e                   	pop    esi
100032ef:	5f                   	pop    edi
100032f0:	5d                   	pop    ebp
100032f1:	c3                   	ret    

100032f2 <ssfn_text>:
100032f2:	55                   	push   ebp
100032f3:	57                   	push   edi
100032f4:	56                   	push   esi
100032f5:	53                   	push   ebx
100032f6:	83 ec 1c             	sub    esp,0x1c
100032f9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
100032fd:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
10003301:	85 f6                	test   esi,esi
10003303:	0f 84 b2 00 00 00    	je     100033bb <ssfn_text+0xc9>
10003309:	85 ed                	test   ebp,ebp
1000330b:	0f 94 44 24 0b       	sete   BYTE PTR [esp+0xb]
10003310:	0f 84 a5 00 00 00    	je     100033bb <ssfn_text+0xc9>
10003316:	83 ec 0c             	sub    esp,0xc
10003319:	6a 18                	push   0x18
1000331b:	e8 fc ff ff ff       	call   1000331c <ssfn_text+0x2a>	1000331c: R_386_PC32	malloc
10003320:	83 c4 10             	add    esp,0x10
10003323:	89 c3                	mov    ebx,eax
10003325:	85 c0                	test   eax,eax
10003327:	0f 84 8e 00 00 00    	je     100033bb <ssfn_text+0xc9>
1000332d:	31 c0                	xor    eax,eax
1000332f:	b9 06 00 00 00       	mov    ecx,0x6
10003334:	89 df                	mov    edi,ebx
10003336:	80 3e 00             	cmp    BYTE PTR [esi],0x0
10003339:	f3 ab                	rep stos DWORD PTR es:[edi],eax
1000333b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
1000333f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
10003342:	74 79                	je     100033bd <ssfn_text+0xcb>
10003344:	8d 43 0c             	lea    eax,[ebx+0xc]
10003347:	52                   	push   edx
10003348:	52                   	push   edx
10003349:	50                   	push   eax
1000334a:	8d 43 0a             	lea    eax,[ebx+0xa]
1000334d:	50                   	push   eax
1000334e:	8d 43 06             	lea    eax,[ebx+0x6]
10003351:	50                   	push   eax
10003352:	8d 43 04             	lea    eax,[ebx+0x4]
10003355:	50                   	push   eax
10003356:	56                   	push   esi
10003357:	55                   	push   ebp
10003358:	e8 fc ff ff ff       	call   10003359 <ssfn_text+0x67>	10003359: R_386_PC32	ssfn_bbox
1000335d:	83 c4 20             	add    esp,0x20
10003360:	85 c0                	test   eax,eax
10003362:	75 59                	jne    100033bd <ssfn_text+0xcb>
10003364:	83 ec 0c             	sub    esp,0xc
10003367:	0f bf 4b 04          	movsx  ecx,WORD PTR [ebx+0x4]
1000336b:	0f bf 43 06          	movsx  eax,WORD PTR [ebx+0x6]
1000336f:	0f af c8             	imul   ecx,eax
10003372:	c1 e1 02             	shl    ecx,0x2
10003375:	51                   	push   ecx
10003376:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
1000337a:	e8 fc ff ff ff       	call   1000337b <ssfn_text+0x89>	1000337b: R_386_PC32	malloc
1000337f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003383:	89 c7                	mov    edi,eax
10003385:	89 03                	mov    DWORD PTR [ebx],eax
10003387:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
1000338b:	83 c4 10             	add    esp,0x10
1000338e:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003390:	50                   	push   eax
10003391:	56                   	push   esi
10003392:	53                   	push   ebx
10003393:	55                   	push   ebp
10003394:	e8 fc ff ff ff       	call   10003395 <ssfn_text+0xa3>	10003395: R_386_PC32	ssfn_render
10003399:	83 c4 10             	add    esp,0x10
1000339c:	85 c0                	test   eax,eax
1000339e:	7e 04                	jle    100033a4 <ssfn_text+0xb2>
100033a0:	01 c6                	add    esi,eax
100033a2:	eb ec                	jmp    10003390 <ssfn_text+0x9e>
100033a4:	74 17                	je     100033bd <ssfn_text+0xcb>
100033a6:	83 ec 0c             	sub    esp,0xc
100033a9:	ff 33                	push   DWORD PTR [ebx]
100033ab:	e8 fc ff ff ff       	call   100033ac <ssfn_text+0xba>	100033ac: R_386_PC32	free
100033b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
100033b3:	e8 fc ff ff ff       	call   100033b4 <ssfn_text+0xc2>	100033b4: R_386_PC32	free
100033b8:	83 c4 10             	add    esp,0x10
100033bb:	31 db                	xor    ebx,ebx
100033bd:	83 c4 1c             	add    esp,0x1c
100033c0:	89 d8                	mov    eax,ebx
100033c2:	5b                   	pop    ebx
100033c3:	5e                   	pop    esi
100033c4:	5f                   	pop    edi
100033c5:	5d                   	pop    ebp
100033c6:	c3                   	ret    
100033c7:	90                   	nop

100033c8 <NIContext::drvPutpixel4(int, int, unsigned int)>:
100033c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100033cc:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
100033d2:	8b 10                	mov    edx,DWORD PTR [eax]
100033d4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100033d8:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
100033db:	90                   	nop

100033dc <NIContext::drvDarken4(int, int, int)>:
100033dc:	55                   	push   ebp
100033dd:	57                   	push   edi
100033de:	56                   	push   esi
100033df:	53                   	push   ebx
100033e0:	83 ec 20             	sub    esp,0x20
100033e3:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
100033e7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
100033eb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
100033ef:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
100033f3:	8b 87 08 04 00 00    	mov    eax,DWORD PTR [edi+0x408]
100033f9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
100033fd:	8b 10                	mov    edx,DWORD PTR [eax]
100033ff:	56                   	push   esi
10003400:	53                   	push   ebx
10003401:	50                   	push   eax
10003402:	ff 52 34             	call   DWORD PTR [edx+0x34]
10003405:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
10003409:	89 c2                	mov    edx,eax
1000340b:	0f b6 ec             	movzx  ebp,ah
1000340e:	c1 ea 10             	shr    edx,0x10
10003411:	0f af e9             	imul   ebp,ecx
10003414:	0f b6 d2             	movzx  edx,dl
10003417:	0f b6 c0             	movzx  eax,al
1000341a:	0f af d1             	imul   edx,ecx
1000341d:	0f af c1             	imul   eax,ecx
10003420:	c1 ea 07             	shr    edx,0x7
10003423:	8b 8f 08 04 00 00    	mov    ecx,DWORD PTR [edi+0x408]
10003429:	c1 e8 07             	shr    eax,0x7
1000342c:	8b 39                	mov    edi,DWORD PTR [ecx]
1000342e:	c1 e2 10             	shl    edx,0x10
10003431:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
10003435:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
10003439:	89 4c 24 40          	mov    DWORD PTR [esp+0x40],ecx
1000343d:	c1 ed 07             	shr    ebp,0x7
10003440:	c1 e5 08             	shl    ebp,0x8
10003443:	09 ea                	or     edx,ebp
10003445:	09 c2                	or     edx,eax
10003447:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
1000344b:	8b 47 24             	mov    eax,DWORD PTR [edi+0x24]
1000344e:	83 c4 2c             	add    esp,0x2c
10003451:	5b                   	pop    ebx
10003452:	5e                   	pop    esi
10003453:	5f                   	pop    edi
10003454:	5d                   	pop    ebp
10003455:	ff e0                	jmp    eax
10003457:	90                   	nop

10003458 <NIContext::renderTTF(int, int, unsigned int, char*, int*)>:
10003458:	55                   	push   ebp
10003459:	b9 00 40 00 00       	mov    ecx,0x4000
1000345e:	57                   	push   edi
1000345f:	b0 ff                	mov    al,0xff
10003461:	56                   	push   esi
10003462:	53                   	push   ebx
10003463:	83 ec 3c             	sub    esp,0x3c
10003466:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
1000346a:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
1000346e:	8b 7d 00             	mov    edi,DWORD PTR [ebp+0x0]
10003471:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
10003475:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003477:	85 db                	test   ebx,ebx
10003479:	75 10                	jne    1000348b <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x33>
1000347b:	83 ec 0c             	sub    esp,0xc
1000347e:	68 57 69 00 10       	push   0x10006957	1000347f: R_386_32	.text
10003483:	e8 fc ff ff ff       	call   10003484 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x2c>	10003484: R_386_PC32	KePanic(char const*)
10003488:	83 c4 10             	add    esp,0x10
1000348b:	50                   	push   eax
1000348c:	50                   	push   eax
1000348d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003491:	50                   	push   eax
10003492:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10003496:	50                   	push   eax
10003497:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000349b:	50                   	push   eax
1000349c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100034a0:	50                   	push   eax
100034a1:	56                   	push   esi
100034a2:	68 00 00 00 00       	push   0x0	100034a3: R_386_32	ssfn_ctx
100034a7:	e8 fc ff ff ff       	call   100034a8 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x50>	100034a8: R_386_PC32	ssfn_bbox
100034ac:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100034af:	c7 44 24 3c 40 00 40 00 	mov    DWORD PTR [esp+0x3c],0x400040
100034b7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
100034bb:	c7 44 24 40 00 01 00 00 	mov    DWORD PTR [esp+0x40],0x100
100034c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100034c7:	66 89 44 24 44       	mov    WORD PTR [esp+0x44],ax
100034cc:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100034d0:	0d 00 00 00 ff       	or     eax,0xff000000
100034d5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
100034d9:	83 c4 1c             	add    esp,0x1c
100034dc:	56                   	push   esi
100034dd:	8d 44 24 20          	lea    eax,[esp+0x20]
100034e1:	50                   	push   eax
100034e2:	68 00 00 00 00       	push   0x0	100034e3: R_386_32	ssfn_ctx
100034e7:	e8 fc ff ff ff       	call   100034e8 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x90>	100034e8: R_386_PC32	ssfn_render
100034ec:	83 c4 10             	add    esp,0x10
100034ef:	89 03                	mov    DWORD PTR [ebx],eax
100034f1:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
100034f5:	31 db                	xor    ebx,ebx
100034f7:	89 f0                	mov    eax,esi
100034f9:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
100034fd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
10003501:	7e 3f                	jle    10003542 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xea>
10003503:	31 ff                	xor    edi,edi
10003505:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
1000350a:	39 f8                	cmp    eax,edi
1000350c:	7e 2c                	jle    1000353a <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xe2>
1000350e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003511:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
10003514:	83 f8 ff             	cmp    eax,0xffffffff
10003517:	74 1d                	je     10003536 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xde>
10003519:	8b 95 08 04 00 00    	mov    edx,DWORD PTR [ebp+0x408]
1000351f:	25 ff ff ff 00       	and    eax,0xffffff
10003524:	8b 0a                	mov    ecx,DWORD PTR [edx]
10003526:	50                   	push   eax
10003527:	56                   	push   esi
10003528:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
1000352c:	01 f8                	add    eax,edi
1000352e:	50                   	push   eax
1000352f:	52                   	push   edx
10003530:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10003533:	83 c4 10             	add    esp,0x10
10003536:	43                   	inc    ebx
10003537:	47                   	inc    edi
10003538:	eb cb                	jmp    10003505 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0xad>
1000353a:	29 c3                	sub    ebx,eax
1000353c:	46                   	inc    esi
1000353d:	83 c3 40             	add    ebx,0x40
10003540:	eb b5                	jmp    100034f7 <NIContext::renderTTF(int, int, unsigned int, char*, int*)+0x9f>
10003542:	0f bf 44 24 22       	movsx  eax,WORD PTR [esp+0x22]
10003547:	83 c4 3c             	add    esp,0x3c
1000354a:	5b                   	pop    ebx
1000354b:	5e                   	pop    esi
1000354c:	5f                   	pop    edi
1000354d:	5d                   	pop    ebp
1000354e:	c3                   	ret    
1000354f:	90                   	nop

10003550 <NIContext::~NIContext()>:
10003550:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0	10003554: R_386_32	ssfn_ctx
10003558:	e9 00 db ff ff       	jmp    1000105d <ssfn_free>
1000355d:	90                   	nop

1000355e <NIContext::NIContext(Video*, int, int, int, int)>:
1000355e:	55                   	push   ebp
1000355f:	ba 00 00 00 00       	mov    edx,0x0	10003560: R_386_32	ssfn_ctx
10003564:	57                   	push   edi
10003565:	b9 72 3d 00 00       	mov    ecx,0x3d72
1000356a:	56                   	push   esi
1000356b:	89 d7                	mov    edi,edx
1000356d:	53                   	push   ebx
1000356e:	81 ec 48 02 00 00    	sub    esp,0x248
10003574:	8b 9c 24 5c 02 00 00 	mov    ebx,DWORD PTR [esp+0x25c]
1000357b:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
10003582:	89 83 08 04 00 00    	mov    DWORD PTR [ebx+0x408],eax
10003588:	8b 84 24 64 02 00 00 	mov    eax,DWORD PTR [esp+0x264]
1000358f:	89 83 0c 04 00 00    	mov    DWORD PTR [ebx+0x40c],eax
10003595:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
1000359c:	89 83 10 04 00 00    	mov    DWORD PTR [ebx+0x410],eax
100035a2:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
100035a9:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
100035af:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
100035b6:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
100035bc:	31 c0                	xor    eax,eax
100035be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
100035c0:	68 00 40 00 00       	push   0x4000
100035c5:	e8 fc ff ff ff       	call   100035c6 <NIContext::NIContext(Video*, int, int, int, int)+0x68>	100035c6: R_386_PC32	malloc
100035ca:	c7 83 04 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x404],0x0
100035d4:	89 03                	mov    DWORD PTR [ebx],eax
100035d6:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100035dd:	e8 fc ff ff ff       	call   100035de <NIContext::NIContext(Video*, int, int, int, int)+0x80>	100035de: R_386_PC32	malloc
100035e2:	83 c4 0c             	add    esp,0xc
100035e5:	89 c6                	mov    esi,eax
100035e7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100035e9: R_386_32	kernelProcess
100035ed:	68 70 69 00 10       	push   0x10006970	100035ee: R_386_32	.text
100035f2:	50                   	push   eax
100035f3:	e8 fc ff ff ff       	call   100035f4 <NIContext::NIContext(Video*, int, int, int, int)+0x96>	100035f4: R_386_PC32	Directory::Directory(char const*, Process*)
100035f8:	83 c4 10             	add    esp,0x10
100035fb:	85 f6                	test   esi,esi
100035fd:	75 10                	jne    1000360f <NIContext::NIContext(Video*, int, int, int, int)+0xb1>
100035ff:	83 ec 0c             	sub    esp,0xc
10003602:	68 84 69 00 10       	push   0x10006984	10003603: R_386_32	.text
10003607:	e8 fc ff ff ff       	call   10003608 <NIContext::NIContext(Video*, int, int, int, int)+0xaa>	10003608: R_386_PC32	KePanic(char const*)
1000360c:	83 c4 10             	add    esp,0x10
1000360f:	83 ec 0c             	sub    esp,0xc
10003612:	56                   	push   esi
10003613:	e8 fc ff ff ff       	call   10003614 <NIContext::NIContext(Video*, int, int, int, int)+0xb6>	10003614: R_386_PC32	Directory::open()
10003618:	83 c4 10             	add    esp,0x10
1000361b:	85 c0                	test   eax,eax
1000361d:	75 e0                	jne    100035ff <NIContext::NIContext(Video*, int, int, int, int)+0xa1>
1000361f:	83 ec 0c             	sub    esp,0xc
10003622:	8b 06                	mov    eax,DWORD PTR [esi]
10003624:	8d 4c 24 20          	lea    ecx,[esp+0x20]
10003628:	51                   	push   ecx
10003629:	8d 94 24 30 01 00 00 	lea    edx,[esp+0x130]
10003630:	52                   	push   edx
10003631:	6a 00                	push   0x0
10003633:	68 10 01 00 00       	push   0x110
10003638:	56                   	push   esi
10003639:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000363c:	83 c4 20             	add    esp,0x20
1000363f:	85 c0                	test   eax,eax
10003641:	0f 85 a0 01 00 00    	jne    100037e7 <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003647:	81 7c 24 14 10 01 00 00 	cmp    DWORD PTR [esp+0x14],0x110
1000364f:	0f 85 92 01 00 00    	jne    100037e7 <NIContext::NIContext(Video*, int, int, int, int)+0x289>
10003655:	8d ac 24 30 01 00 00 	lea    ebp,[esp+0x130]
1000365c:	83 c9 ff             	or     ecx,0xffffffff
1000365f:	83 ec 0c             	sub    esp,0xc
10003662:	89 ef                	mov    edi,ebp
10003664:	f2 ae                	repnz scas al,BYTE PTR es:[edi]
10003666:	8b bb 04 04 00 00    	mov    edi,DWORD PTR [ebx+0x404]
1000366c:	89 ca                	mov    edx,ecx
1000366e:	f7 d2                	not    edx
10003670:	52                   	push   edx
10003671:	e8 fc ff ff ff       	call   10003672 <NIContext::NIContext(Video*, int, int, int, int)+0x114>	10003672: R_386_PC32	malloc
10003676:	89 44 bb 04          	mov    DWORD PTR [ebx+edi*4+0x4],eax
1000367a:	47                   	inc    edi
1000367b:	89 bb 04 04 00 00    	mov    DWORD PTR [ebx+0x404],edi
10003681:	5a                   	pop    edx
10003682:	59                   	pop    ecx
10003683:	55                   	push   ebp
10003684:	50                   	push   eax
10003685:	e8 fc ff ff ff       	call   10003686 <NIContext::NIContext(Video*, int, int, int, int)+0x128>	10003686: R_386_PC32	strcpy
1000368a:	5f                   	pop    edi
1000368b:	58                   	pop    eax
1000368c:	68 9f 69 00 10       	push   0x1000699f	1000368d: R_386_32	.text
10003691:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
10003695:	57                   	push   edi
10003696:	e8 fc ff ff ff       	call   10003697 <NIContext::NIContext(Video*, int, int, int, int)+0x139>	10003697: R_386_PC32	strcpy
1000369b:	58                   	pop    eax
1000369c:	5a                   	pop    edx
1000369d:	55                   	push   ebp
1000369e:	57                   	push   edi
1000369f:	e8 fc ff ff ff       	call   100036a0 <NIContext::NIContext(Video*, int, int, int, int)+0x142>	100036a0: R_386_PC32	strcat
100036a4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
100036ab:	e8 fc ff ff ff       	call   100036ac <NIContext::NIContext(Video*, int, int, int, int)+0x14e>	100036ac: R_386_PC32	malloc
100036b0:	83 c4 0c             	add    esp,0xc
100036b3:	89 c5                	mov    ebp,eax
100036b5:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100036b7: R_386_32	kernelProcess
100036bb:	57                   	push   edi
100036bc:	50                   	push   eax
100036bd:	e8 fc ff ff ff       	call   100036be <NIContext::NIContext(Video*, int, int, int, int)+0x160>	100036be: R_386_PC32	File::File(char const*, Process*)
100036c2:	83 c4 10             	add    esp,0x10
100036c5:	85 ed                	test   ebp,ebp
100036c7:	0f 84 52 ff ff ff    	je     1000361f <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100036cd:	50                   	push   eax
100036ce:	50                   	push   eax
100036cf:	6a 01                	push   0x1
100036d1:	55                   	push   ebp
100036d2:	e8 fc ff ff ff       	call   100036d3 <NIContext::NIContext(Video*, int, int, int, int)+0x175>	100036d3: R_386_PC32	File::open(FileOpenMode)
100036d7:	83 c4 10             	add    esp,0x10
100036da:	85 c0                	test   eax,eax
100036dc:	74 0c                	je     100036ea <NIContext::NIContext(Video*, int, int, int, int)+0x18c>
100036de:	83 ec 0c             	sub    esp,0xc
100036e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100036e4:	55                   	push   ebp
100036e5:	e9 b4 00 00 00       	jmp    1000379e <NIContext::NIContext(Video*, int, int, int, int)+0x240>
100036ea:	50                   	push   eax
100036eb:	8d 44 24 17          	lea    eax,[esp+0x17]
100036ef:	50                   	push   eax
100036f0:	8d 44 24 20          	lea    eax,[esp+0x20]
100036f4:	50                   	push   eax
100036f5:	55                   	push   ebp
100036f6:	e8 fc ff ff ff       	call   100036f7 <NIContext::NIContext(Video*, int, int, int, int)+0x199>	100036f7: R_386_PC32	File::stat(unsigned long long*, bool*)
100036fb:	83 c4 10             	add    esp,0x10
100036fe:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
10003703:	74 0e                	je     10003713 <NIContext::NIContext(Video*, int, int, int, int)+0x1b5>
10003705:	83 ec 0c             	sub    esp,0xc
10003708:	55                   	push   ebp
10003709:	e8 fc ff ff ff       	call   1000370a <NIContext::NIContext(Video*, int, int, int, int)+0x1ac>	1000370a: R_386_PC32	File::close()
1000370e:	e9 85 00 00 00       	jmp    10003798 <NIContext::NIContext(Video*, int, int, int, int)+0x23a>
10003713:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10003717:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
1000371b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
1000371f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
10003723:	83 ec 0c             	sub    esp,0xc
10003726:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000372a:	e8 fc ff ff ff       	call   1000372b <NIContext::NIContext(Video*, int, int, int, int)+0x1cd>	1000372b: R_386_PC32	malloc
1000372f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003733:	58                   	pop    eax
10003734:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003737:	8d 54 24 20          	lea    edx,[esp+0x20]
1000373b:	52                   	push   edx
1000373c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10003740:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003744:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003748:	55                   	push   ebp
10003749:	ff 50 0c             	call   DWORD PTR [eax+0xc]
1000374c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003750:	83 c4 1c             	add    esp,0x1c
10003753:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10003757:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000375b:	68 b4 69 00 10       	push   0x100069b4	1000375c: R_386_32	.text
10003760:	e8 fc ff ff ff       	call   10003761 <NIContext::NIContext(Video*, int, int, int, int)+0x203>	10003761: R_386_PC32	Dbg::kprintf(char const*, ...)
10003765:	83 c4 10             	add    esp,0x10
10003768:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000376c:	85 c0                	test   eax,eax
1000376e:	75 15                	jne    10003785 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
10003770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003774:	89 c1                	mov    ecx,eax
10003776:	c1 f9 1f             	sar    ecx,0x1f
10003779:	3b 4c 24 1c          	cmp    ecx,DWORD PTR [esp+0x1c]
1000377d:	75 06                	jne    10003785 <NIContext::NIContext(Video*, int, int, int, int)+0x227>
1000377f:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
10003783:	74 24                	je     100037a9 <NIContext::NIContext(Video*, int, int, int, int)+0x24b>
10003785:	83 ec 0c             	sub    esp,0xc
10003788:	55                   	push   ebp
10003789:	e8 fc ff ff ff       	call   1000378a <NIContext::NIContext(Video*, int, int, int, int)+0x22c>	1000378a: R_386_PC32	File::close()
1000378e:	58                   	pop    eax
1000378f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10003793:	e8 fc ff ff ff       	call   10003794 <NIContext::NIContext(Video*, int, int, int, int)+0x236>	10003794: R_386_PC32	free
10003798:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
1000379b:	89 2c 24             	mov    DWORD PTR [esp],ebp
1000379e:	ff 50 08             	call   DWORD PTR [eax+0x8]
100037a1:	83 c4 10             	add    esp,0x10
100037a4:	e9 76 fe ff ff       	jmp    1000361f <NIContext::NIContext(Video*, int, int, int, int)+0xc1>
100037a9:	50                   	push   eax
100037aa:	50                   	push   eax
100037ab:	57                   	push   edi
100037ac:	68 c8 69 00 10       	push   0x100069c8	100037ad: R_386_32	.text
100037b1:	e8 fc ff ff ff       	call   100037b2 <NIContext::NIContext(Video*, int, int, int, int)+0x254>	100037b2: R_386_PC32	Dbg::kprintf(char const*, ...)
100037b6:	5a                   	pop    edx
100037b7:	59                   	pop    ecx
100037b8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
100037bc:	68 00 00 00 00       	push   0x0	100037bd: R_386_32	ssfn_ctx
100037c1:	e8 fc ff ff ff       	call   100037c2 <NIContext::NIContext(Video*, int, int, int, int)+0x264>	100037c2: R_386_PC32	ssfn_load
100037c6:	5b                   	pop    ebx
100037c7:	5f                   	pop    edi
100037c8:	50                   	push   eax
100037c9:	68 d9 69 00 10       	push   0x100069d9	100037ca: R_386_32	.text
100037ce:	e8 fc ff ff ff       	call   100037cf <NIContext::NIContext(Video*, int, int, int, int)+0x271>	100037cf: R_386_PC32	Dbg::kprintf(char const*, ...)
100037d3:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037d6:	e8 fc ff ff ff       	call   100037d7 <NIContext::NIContext(Video*, int, int, int, int)+0x279>	100037d7: R_386_PC32	File::close()
100037db:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
100037de:	89 2c 24             	mov    DWORD PTR [esp],ebp
100037e1:	ff 50 08             	call   DWORD PTR [eax+0x8]
100037e4:	83 c4 10             	add    esp,0x10
100037e7:	83 ec 0c             	sub    esp,0xc
100037ea:	56                   	push   esi
100037eb:	e8 fc ff ff ff       	call   100037ec <NIContext::NIContext(Video*, int, int, int, int)+0x28e>	100037ec: R_386_PC32	Directory::close()
100037f0:	8b 06                	mov    eax,DWORD PTR [esi]
100037f2:	89 34 24             	mov    DWORD PTR [esp],esi
100037f5:	ff 50 08             	call   DWORD PTR [eax+0x8]
100037f8:	b8 00 00 00 00       	mov    eax,0x0	100037f9: R_386_32	ssfn_ctx
100037fd:	e8 f7 cb ff ff       	call   100003f9 <_ssfn_fc.part.1>
10003802:	c7 05 14 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x14,0x0	10003804: R_386_32	ssfn_ctx
1000380c:	c7 05 18 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x18,0x0	1000380e: R_386_32	ssfn_ctx
10003816:	c7 05 b8 f5 00 00 ff 00 00 00 	mov    DWORD PTR ds:0xf5b8,0xff	10003818: R_386_32	ssfn_ctx
10003820:	c7 05 bc f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5bc,0x0	10003822: R_386_32	ssfn_ctx
1000382a:	c7 05 c0 f5 00 00 10 00 00 00 	mov    DWORD PTR ds:0xf5c0,0x10	1000382c: R_386_32	ssfn_ctx
10003834:	c7 05 c4 f5 00 00 00 00 00 00 	mov    DWORD PTR ds:0xf5c4,0x0	10003836: R_386_32	ssfn_ctx
1000383e:	81 c4 4c 02 00 00    	add    esp,0x24c
10003844:	5b                   	pop    ebx
10003845:	5e                   	pop    esi
10003846:	5f                   	pop    edi
10003847:	5d                   	pop    ebp
10003848:	c3                   	ret    
10003849:	90                   	nop

1000384a <NiCreateEvent(NIWindow*, int, bool)>:
1000384a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
1000384e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10003852:	81 e2 ff ff 03 00    	and    edx,0x3ffff
10003858:	89 d1                	mov    ecx,edx
1000385a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
1000385d:	c1 e1 0d             	shl    ecx,0xd
10003860:	81 e2 ff 1f 00 80    	and    edx,0x80001fff
10003866:	09 ca                	or     edx,ecx
10003868:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
1000386b:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
1000386f:	8a 50 07             	mov    dl,BYTE PTR [eax+0x7]
10003872:	c1 e1 07             	shl    ecx,0x7
10003875:	83 e2 7f             	and    edx,0x7f
10003878:	09 ca                	or     edx,ecx
1000387a:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
1000387d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
10003881:	89 10                	mov    DWORD PTR [eax],edx
10003883:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003885: R_386_32	mouseDesktop
10003889:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000388f:	66 89 48 08          	mov    WORD PTR [eax+0x8],cx
10003893:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10003899:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000389f:	66 89 48 0a          	mov    WORD PTR [eax+0xa],cx
100038a3:	89 d1                	mov    ecx,edx
100038a5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
100038a8:	66 81 e1 ff 03       	and    cx,0x3ff
100038ad:	66 81 e2 00 fc       	and    dx,0xfc00
100038b2:	09 ca                	or     edx,ecx
100038b4:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
100038b8:	c2 04 00             	ret    0x4

100038bb <NiKeyhandler(KeyboardToken, bool*)>:
100038bb:	57                   	push   edi
100038bc:	56                   	push   esi
100038bd:	53                   	push   ebx
100038be:	83 ec 20             	sub    esp,0x20
100038c1:	8b 1d 00 00 00 00    	mov    ebx,DWORD PTR ds:0x0	100038c3: R_386_32	mouseDesktop
100038c7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
100038cb:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
100038ce:	8b 00                	mov    eax,DWORD PTR [eax]
100038d0:	85 c0                	test   eax,eax
100038d2:	0f 84 e7 00 00 00    	je     100039bf <NiKeyhandler(KeyboardToken, bool*)+0x104>
100038d8:	8b 10                	mov    edx,DWORD PTR [eax]
100038da:	85 d2                	test   edx,edx
100038dc:	0f 84 dd 00 00 00    	je     100039bf <NiKeyhandler(KeyboardToken, bool*)+0x104>
100038e2:	80 7c 24 32 01       	cmp    BYTE PTR [esp+0x32],0x1
100038e7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100038eb:	19 c0                	sbb    eax,eax
100038ed:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
100038f1:	81 e6 ff 1f 00 80    	and    esi,0x80001fff
100038f7:	83 c0 09             	add    eax,0x9
100038fa:	25 ff ff 03 00       	and    eax,0x3ffff
100038ff:	c1 e0 0d             	shl    eax,0xd
10003902:	09 f0                	or     eax,esi
10003904:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003908:	80 64 24 0f 7f       	and    BYTE PTR [esp+0xf],0x7f
1000390d:	83 ec 1c             	sub    esp,0x1c
10003910:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10003916:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
1000391b:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10003921:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
10003926:	8b 83 1c 04 00 00    	mov    eax,DWORD PTR [ebx+0x41c]
1000392c:	89 c3                	mov    ebx,eax
1000392e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10003932:	66 81 e3 ff 03       	and    bx,0x3ff
10003937:	66 25 00 fc          	and    ax,0xfc00
1000393b:	09 d8                	or     eax,ebx
1000393d:	8a 99 04 01 00 00    	mov    bl,BYTE PTR [ecx+0x104]
10003943:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
10003948:	83 e3 01             	and    ebx,0x1
1000394b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
1000394f:	c1 e3 04             	shl    ebx,0x4
10003952:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
10003957:	8a 81 00 01 00 00    	mov    al,BYTE PTR [ecx+0x100]
1000395d:	8a 89 01 01 00 00    	mov    cl,BYTE PTR [ecx+0x101]
10003963:	83 e0 01             	and    eax,0x1
10003966:	83 e1 01             	and    ecx,0x1
10003969:	8d 34 85 00 00 00 00 	lea    esi,[eax*4+0x0]
10003970:	c1 e1 03             	shl    ecx,0x3
10003973:	8a 44 24 29          	mov    al,BYTE PTR [esp+0x29]
10003977:	83 e0 eb             	and    eax,0xffffffeb
1000397a:	09 f0                	or     eax,esi
1000397c:	09 d8                	or     eax,ebx
1000397e:	83 e0 f7             	and    eax,0xfffffff7
10003981:	09 c8                	or     eax,ecx
10003983:	b9 06 00 00 00       	mov    ecx,0x6
10003988:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
1000398c:	8d 74 24 24          	lea    esi,[esp+0x24]
10003990:	89 e7                	mov    edi,esp
10003992:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003994:	52                   	push   edx
10003995:	e8 fc ff ff ff       	call   10003996 <NiKeyhandler(KeyboardToken, bool*)+0xdb>	10003996: R_386_PC32	NIWindow::postEvent(NiEvent)
1000399a:	83 c4 20             	add    esp,0x20
1000399d:	a1 00 00 00 00       	mov    eax,ds:0x0	1000399e: R_386_32	desktopWindowDummy
100039a2:	8d 74 24 08          	lea    esi,[esp+0x8]
100039a6:	85 c0                	test   eax,eax
100039a8:	74 15                	je     100039bf <NiKeyhandler(KeyboardToken, bool*)+0x104>
100039aa:	83 ec 1c             	sub    esp,0x1c
100039ad:	b9 06 00 00 00       	mov    ecx,0x6
100039b2:	89 e7                	mov    edi,esp
100039b4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100039b6:	50                   	push   eax
100039b7:	e8 fc ff ff ff       	call   100039b8 <NiKeyhandler(KeyboardToken, bool*)+0xfd>	100039b8: R_386_PC32	NIWindow::postEvent(NiEvent)
100039bc:	83 c4 20             	add    esp,0x20
100039bf:	83 c4 20             	add    esp,0x20
100039c2:	5b                   	pop    ebx
100039c3:	5e                   	pop    esi
100039c4:	5f                   	pop    edi
100039c5:	c3                   	ret    

100039c6 <NiLoadCursors()>:
100039c6:	55                   	push   ebp
100039c7:	57                   	push   edi
100039c8:	56                   	push   esi
100039c9:	53                   	push   ebx
100039ca:	83 ec 38             	sub    esp,0x38
100039cd:	68 14 01 00 00       	push   0x114
100039d2:	e8 fc ff ff ff       	call   100039d3 <NiLoadCursors()+0xd>	100039d3: R_386_PC32	malloc
100039d7:	83 c4 0c             	add    esp,0xc
100039da:	89 c5                	mov    ebp,eax
100039dc:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100039de: R_386_32	kernelProcess
100039e2:	68 9c 6c 00 10       	push   0x10006c9c	100039e3: R_386_32	.text
100039e7:	50                   	push   eax
100039e8:	e8 fc ff ff ff       	call   100039e9 <NiLoadCursors()+0x23>	100039e9: R_386_PC32	File::File(char const*, Process*)
100039ed:	58                   	pop    eax
100039ee:	5a                   	pop    edx
100039ef:	6a 01                	push   0x1
100039f1:	55                   	push   ebp
100039f2:	e8 fc ff ff ff       	call   100039f3 <NiLoadCursors()+0x2d>	100039f3: R_386_PC32	File::open(FileOpenMode)
100039f7:	83 c4 10             	add    esp,0x10
100039fa:	85 c0                	test   eax,eax
100039fc:	74 0a                	je     10003a08 <NiLoadCursors()+0x42>
100039fe:	83 ec 0c             	sub    esp,0xc
10003a01:	68 bb 6c 00 10       	push   0x10006cbb	10003a02: R_386_32	.text
10003a06:	eb 4c                	jmp    10003a54 <NiLoadCursors()+0x8e>
10003a08:	50                   	push   eax
10003a09:	8d 44 24 17          	lea    eax,[esp+0x17]
10003a0d:	50                   	push   eax
10003a0e:	8d 44 24 20          	lea    eax,[esp+0x20]
10003a12:	50                   	push   eax
10003a13:	55                   	push   ebp
10003a14:	e8 fc ff ff ff       	call   10003a15 <NiLoadCursors()+0x4f>	10003a15: R_386_PC32	File::stat(unsigned long long*, bool*)
10003a19:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10003a1d:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
10003a21:	89 34 24             	mov    DWORD PTR [esp],esi
10003a24:	e8 fc ff ff ff       	call   10003a25 <NiLoadCursors()+0x5f>	10003a25: R_386_PC32	malloc
10003a29:	89 c3                	mov    ebx,eax
10003a2b:	58                   	pop    eax
10003a2c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
10003a2f:	8d 54 24 20          	lea    edx,[esp+0x20]
10003a33:	52                   	push   edx
10003a34:	53                   	push   ebx
10003a35:	57                   	push   edi
10003a36:	56                   	push   esi
10003a37:	55                   	push   ebp
10003a38:	ff 50 0c             	call   DWORD PTR [eax+0xc]
10003a3b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
10003a3f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
10003a43:	83 c4 20             	add    esp,0x20
10003a46:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
10003a4a:	74 12                	je     10003a5e <NiLoadCursors()+0x98>
10003a4c:	83 ec 0c             	sub    esp,0xc
10003a4f:	68 cf 6c 00 10       	push   0x10006ccf	10003a50: R_386_32	.text
10003a54:	e8 fc ff ff ff       	call   10003a55 <NiLoadCursors()+0x8f>	10003a55: R_386_PC32	Dbg::kprintf(char const*, ...)
10003a59:	e9 24 01 00 00       	jmp    10003b82 <NiLoadCursors()+0x1bc>
10003a5e:	6a 00                	push   0x0
10003a60:	31 ed                	xor    ebp,ebp
10003a62:	68 04 01 00 00       	push   0x104
10003a67:	52                   	push   edx
10003a68:	50                   	push   eax
10003a69:	e8 fc ff ff ff       	call   10003a6a <NiLoadCursors()+0xa4>	10003a6a: R_386_PC32	__udivdi3
10003a6e:	83 c4 10             	add    esp,0x10
10003a71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003a75:	8d 04 83             	lea    eax,[ebx+eax*4]
10003a78:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
10003a7c:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
10003a80:	0f 8d f3 00 00 00    	jge    10003b79 <NiLoadCursors()+0x1b3>
10003a86:	8d 34 ab             	lea    esi,[ebx+ebp*4]
10003a89:	50                   	push   eax
10003a8a:	6a 04                	push   0x4
10003a8c:	68 e3 6c 00 10       	push   0x10006ce3	10003a8d: R_386_32	.text
10003a91:	56                   	push   esi
10003a92:	e8 fc ff ff ff       	call   10003a93 <NiLoadCursors()+0xcd>	10003a93: R_386_PC32	memcmp
10003a97:	83 c4 10             	add    esp,0x10
10003a9a:	85 c0                	test   eax,eax
10003a9c:	0f 84 b8 00 00 00    	je     10003b5a <NiLoadCursors()+0x194>
10003aa2:	50                   	push   eax
10003aa3:	6a 04                	push   0x4
10003aa5:	68 e8 6c 00 10       	push   0x10006ce8	10003aa6: R_386_32	.text
10003aaa:	56                   	push   esi
10003aab:	e8 fc ff ff ff       	call   10003aac <NiLoadCursors()+0xe6>	10003aac: R_386_PC32	memcmp
10003ab0:	83 c4 10             	add    esp,0x10
10003ab3:	85 c0                	test   eax,eax
10003ab5:	74 7b                	je     10003b32 <NiLoadCursors()+0x16c>
10003ab7:	50                   	push   eax
10003ab8:	6a 04                	push   0x4
10003aba:	68 ed 6c 00 10       	push   0x10006ced	10003abb: R_386_32	.text
10003abf:	56                   	push   esi
10003ac0:	e8 fc ff ff ff       	call   10003ac1 <NiLoadCursors()+0xfb>	10003ac1: R_386_PC32	memcmp
10003ac5:	83 c4 10             	add    esp,0x10
10003ac8:	85 c0                	test   eax,eax
10003aca:	74 6d                	je     10003b39 <NiLoadCursors()+0x173>
10003acc:	57                   	push   edi
10003acd:	6a 04                	push   0x4
10003acf:	68 f2 6c 00 10       	push   0x10006cf2	10003ad0: R_386_32	.text
10003ad4:	56                   	push   esi
10003ad5:	e8 fc ff ff ff       	call   10003ad6 <NiLoadCursors()+0x110>	10003ad6: R_386_PC32	memcmp
10003ada:	83 c4 10             	add    esp,0x10
10003add:	85 c0                	test   eax,eax
10003adf:	74 5f                	je     10003b40 <NiLoadCursors()+0x17a>
10003ae1:	51                   	push   ecx
10003ae2:	6a 04                	push   0x4
10003ae4:	68 f7 6c 00 10       	push   0x10006cf7	10003ae5: R_386_32	.text
10003ae9:	56                   	push   esi
10003aea:	e8 fc ff ff ff       	call   10003aeb <NiLoadCursors()+0x125>	10003aeb: R_386_PC32	memcmp
10003aef:	83 c4 10             	add    esp,0x10
10003af2:	85 c0                	test   eax,eax
10003af4:	74 51                	je     10003b47 <NiLoadCursors()+0x181>
10003af6:	52                   	push   edx
10003af7:	6a 04                	push   0x4
10003af9:	68 fc 6c 00 10       	push   0x10006cfc	10003afa: R_386_32	.text
10003afe:	56                   	push   esi
10003aff:	e8 fc ff ff ff       	call   10003b00 <NiLoadCursors()+0x13a>	10003b00: R_386_PC32	memcmp
10003b04:	83 c4 10             	add    esp,0x10
10003b07:	85 c0                	test   eax,eax
10003b09:	74 43                	je     10003b4e <NiLoadCursors()+0x188>
10003b0b:	50                   	push   eax
10003b0c:	6a 04                	push   0x4
10003b0e:	68 01 6d 00 10       	push   0x10006d01	10003b0f: R_386_32	.text
10003b13:	56                   	push   esi
10003b14:	e8 fc ff ff ff       	call   10003b15 <NiLoadCursors()+0x14f>	10003b15: R_386_PC32	memcmp
10003b19:	83 c4 10             	add    esp,0x10
10003b1c:	85 c0                	test   eax,eax
10003b1e:	74 35                	je     10003b55 <NiLoadCursors()+0x18f>
10003b20:	83 ec 0c             	sub    esp,0xc
10003b23:	68 06 6d 00 10       	push   0x10006d06	10003b24: R_386_32	.text
10003b28:	e8 fc ff ff ff       	call   10003b29 <NiLoadCursors()+0x163>	10003b29: R_386_PC32	Dbg::kprintf(char const*, ...)
10003b2d:	83 c4 10             	add    esp,0x10
10003b30:	eb 47                	jmp    10003b79 <NiLoadCursors()+0x1b3>
10003b32:	b8 00 02 00 00       	mov    eax,0x200
10003b37:	eb 21                	jmp    10003b5a <NiLoadCursors()+0x194>
10003b39:	b8 00 03 00 00       	mov    eax,0x300
10003b3e:	eb 1a                	jmp    10003b5a <NiLoadCursors()+0x194>
10003b40:	b8 00 01 00 00       	mov    eax,0x100
10003b45:	eb 13                	jmp    10003b5a <NiLoadCursors()+0x194>
10003b47:	b8 00 04 00 00       	mov    eax,0x400
10003b4c:	eb 0c                	jmp    10003b5a <NiLoadCursors()+0x194>
10003b4e:	b8 00 05 00 00       	mov    eax,0x500
10003b53:	eb 05                	jmp    10003b5a <NiLoadCursors()+0x194>
10003b55:	b8 00 06 00 00       	mov    eax,0x600
10003b5a:	8d b8 00 00 00 00    	lea    edi,[eax+0x0]	10003b5c: R_386_32	___mouse_data
10003b60:	b9 00 01 00 00       	mov    ecx,0x100
10003b65:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
10003b69:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10003b6b:	45                   	inc    ebp
10003b6c:	81 44 24 08 00 01 00 00 	add    DWORD PTR [esp+0x8],0x100
10003b74:	e9 03 ff ff ff       	jmp    10003a7c <NiLoadCursors()+0xb6>
10003b79:	83 ec 0c             	sub    esp,0xc
10003b7c:	53                   	push   ebx
10003b7d:	e8 fc ff ff ff       	call   10003b7e <NiLoadCursors()+0x1b8>	10003b7e: R_386_PC32	free
10003b82:	83 c4 10             	add    esp,0x10
10003b85:	83 c4 2c             	add    esp,0x2c
10003b88:	5b                   	pop    ebx
10003b89:	5e                   	pop    esi
10003b8a:	5f                   	pop    edi
10003b8b:	5d                   	pop    ebp
10003b8c:	c3                   	ret    
10003b8d:	90                   	nop

10003b8e <NIDesktop::desktopDecode(int)>:
10003b8e:	57                   	push   edi
10003b8f:	56                   	push   esi
10003b90:	53                   	push   ebx
10003b91:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10003b95:	0f ba e1 0f          	bt     ecx,0xf
10003b99:	73 45                	jae    10003be0 <NIDesktop::desktopDecode(int)+0x52>
10003b9b:	bf 33 00 00 00       	mov    edi,0x33
10003ba0:	89 ce                	mov    esi,ecx
10003ba2:	89 cb                	mov    ebx,ecx
10003ba4:	83 e6 1f             	and    esi,0x1f
10003ba7:	c1 fb 05             	sar    ebx,0x5
10003baa:	c1 f9 0a             	sar    ecx,0xa
10003bad:	83 e3 1f             	and    ebx,0x1f
10003bb0:	83 e1 1f             	and    ecx,0x1f
10003bb3:	69 f6 a5 01 00 00    	imul   esi,esi,0x1a5
10003bb9:	69 c1 a5 01 00 00    	imul   eax,ecx,0x1a5
10003bbf:	69 db a5 01 00 00    	imul   ebx,ebx,0x1a5
10003bc5:	99                   	cdq    
10003bc6:	f7 ff                	idiv   edi
10003bc8:	c1 e0 10             	shl    eax,0x10
10003bcb:	89 c1                	mov    ecx,eax
10003bcd:	89 d8                	mov    eax,ebx
10003bcf:	99                   	cdq    
10003bd0:	f7 ff                	idiv   edi
10003bd2:	c1 e0 08             	shl    eax,0x8
10003bd5:	09 c1                	or     ecx,eax
10003bd7:	89 f0                	mov    eax,esi
10003bd9:	99                   	cdq    
10003bda:	f7 ff                	idiv   edi
10003bdc:	09 c8                	or     eax,ecx
10003bde:	eb 0b                	jmp    10003beb <NIDesktop::desktopDecode(int)+0x5d>
10003be0:	0f b6 c9             	movzx  ecx,cl
10003be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003be7:	8b 44 88 08          	mov    eax,DWORD PTR [eax+ecx*4+0x8]
10003beb:	5b                   	pop    ebx
10003bec:	5e                   	pop    esi
10003bed:	5f                   	pop    edi
10003bee:	c3                   	ret    
10003bef:	90                   	nop

10003bf0 <NIDesktop::NIDesktop(NIContext*)>:
10003bf0:	55                   	push   ebp
10003bf1:	57                   	push   edi
10003bf2:	31 ff                	xor    edi,edi
10003bf4:	56                   	push   esi
10003bf5:	53                   	push   ebx
10003bf6:	83 ec 1c             	sub    esp,0x1c
10003bf9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
10003bfd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
10003c01:	c7 86 14 04 00 00 1e 00 00 00 	mov    DWORD PTR [esi+0x414],0x1e
10003c0b:	89 2e                	mov    DWORD PTR [esi],ebp
10003c0d:	c7 86 18 04 00 00 1e 00 00 00 	mov    DWORD PTR [esi+0x418],0x1e
10003c17:	c7 86 20 04 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x420],0x0
10003c21:	89 f9                	mov    ecx,edi
10003c23:	89 fb                	mov    ebx,edi
10003c25:	83 e1 03             	and    ecx,0x3
10003c28:	c1 fb 02             	sar    ebx,0x2
10003c2b:	69 c9 ff 00 00 00    	imul   ecx,ecx,0xff
10003c31:	83 e3 07             	and    ebx,0x7
10003c34:	89 f8                	mov    eax,edi
10003c36:	69 d3 ff 00 00 00    	imul   edx,ebx,0xff
10003c3c:	c1 f8 05             	sar    eax,0x5
10003c3f:	bb 03 00 00 00       	mov    ebx,0x3
10003c44:	69 c0 ff 00 00 00    	imul   eax,eax,0xff
10003c4a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
10003c4e:	31 d2                	xor    edx,edx
10003c50:	f7 f3                	div    ebx
10003c52:	31 d2                	xor    edx,edx
10003c54:	c1 e0 10             	shl    eax,0x10
10003c57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003c5b:	89 c8                	mov    eax,ecx
10003c5d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
10003c61:	f7 f3                	div    ebx
10003c63:	31 d2                	xor    edx,edx
10003c65:	09 c1                	or     ecx,eax
10003c67:	bb 07 00 00 00       	mov    ebx,0x7
10003c6c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10003c70:	f7 f3                	div    ebx
10003c72:	c1 e0 08             	shl    eax,0x8
10003c75:	09 c1                	or     ecx,eax
10003c77:	89 4c be 08          	mov    DWORD PTR [esi+edi*4+0x8],ecx
10003c7b:	47                   	inc    edi
10003c7c:	81 ff 80 00 00 00    	cmp    edi,0x80
10003c82:	75 9d                	jne    10003c21 <NIDesktop::NIDesktop(NIContext*)+0x31>
10003c84:	83 ec 0c             	sub    esp,0xc
10003c87:	8b 85 10 04 00 00    	mov    eax,DWORD PTR [ebp+0x410]
10003c8d:	0f af 85 0c 04 00 00 	imul   eax,DWORD PTR [ebp+0x40c]
10003c94:	01 c0                	add    eax,eax
10003c96:	50                   	push   eax
10003c97:	e8 fc ff ff ff       	call   10003c98 <NIDesktop::NIDesktop(NIContext*)+0xa8>	10003c98: R_386_PC32	malloc
10003c9c:	89 86 08 04 00 00    	mov    DWORD PTR [esi+0x408],eax
10003ca2:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
10003ca9:	e8 fc ff ff ff       	call   10003caa <NIDesktop::NIDesktop(NIContext*)+0xba>	10003caa: R_386_PC32	malloc
10003cae:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10003cb0: R_386_32	mouseDesktop
10003cb4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
10003cbb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
10003cc1:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
10003cc4:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10003cc6: R_386_32	guiMouseHandler
	10003cca: R_386_32	NiHandleMouse(int, int, int, int)
10003cce:	83 c4 2c             	add    esp,0x2c
10003cd1:	5b                   	pop    ebx
10003cd2:	5e                   	pop    esi
10003cd3:	5f                   	pop    edi
10003cd4:	5d                   	pop    ebp
10003cd5:	c3                   	ret    

10003cd6 <NiShutdownHandler(void*)>:
10003cd6:	56                   	push   esi
10003cd7:	53                   	push   ebx
10003cd8:	31 db                	xor    ebx,ebx
10003cda:	52                   	push   edx
10003cdb:	83 ec 0c             	sub    esp,0xc
10003cde:	a1 00 00 00 00       	mov    eax,ds:0x0	10003cdf: R_386_32	mouseDesktop
10003ce3:	8b 00                	mov    eax,DWORD PTR [eax]
10003ce5:	ff b0 08 04 00 00    	push   DWORD PTR [eax+0x408]
10003ceb:	e8 fc ff ff ff       	call   10003cec <NiShutdownHandler(void*)+0x16>	10003cec: R_386_PC32	Video::getHeight()
10003cf0:	83 c4 10             	add    esp,0x10
10003cf3:	39 d8                	cmp    eax,ebx
10003cf5:	7e 45                	jle    10003d3c <NiShutdownHandler(void*)+0x66>
10003cf7:	31 f6                	xor    esi,esi
10003cf9:	83 ec 0c             	sub    esp,0xc
10003cfc:	a1 00 00 00 00       	mov    eax,ds:0x0	10003cfd: R_386_32	mouseDesktop
10003d01:	8b 00                	mov    eax,DWORD PTR [eax]
10003d03:	ff b0 08 04 00 00    	push   DWORD PTR [eax+0x408]
10003d09:	e8 fc ff ff ff       	call   10003d0a <NiShutdownHandler(void*)+0x34>	10003d0a: R_386_PC32	Video::getWidth()
10003d0e:	83 c4 10             	add    esp,0x10
10003d11:	39 f0                	cmp    eax,esi
10003d13:	7e 24                	jle    10003d39 <NiShutdownHandler(void*)+0x63>
10003d15:	8d 04 33             	lea    eax,[ebx+esi*1]
10003d18:	a8 01                	test   al,0x1
10003d1a:	74 1a                	je     10003d36 <NiShutdownHandler(void*)+0x60>
10003d1c:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d1d: R_386_32	mouseDesktop
10003d21:	8b 00                	mov    eax,DWORD PTR [eax]
10003d23:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10003d29:	8b 10                	mov    edx,DWORD PTR [eax]
10003d2b:	6a 00                	push   0x0
10003d2d:	53                   	push   ebx
10003d2e:	56                   	push   esi
10003d2f:	50                   	push   eax
10003d30:	ff 52 24             	call   DWORD PTR [edx+0x24]
10003d33:	83 c4 10             	add    esp,0x10
10003d36:	46                   	inc    esi
10003d37:	eb c0                	jmp    10003cf9 <NiShutdownHandler(void*)+0x23>
10003d39:	43                   	inc    ebx
10003d3a:	eb 9f                	jmp    10003cdb <NiShutdownHandler(void*)+0x5>
10003d3c:	58                   	pop    eax
10003d3d:	5b                   	pop    ebx
10003d3e:	5e                   	pop    esi
10003d3f:	c3                   	ret    

10003d40 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)>:
10003d40:	55                   	push   ebp
10003d41:	57                   	push   edi
10003d42:	56                   	push   esi
10003d43:	53                   	push   ebx
10003d44:	83 ec 2c             	sub    esp,0x2c
10003d47:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
10003d4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003d4e:	8b 28                	mov    ebp,DWORD PTR [eax]
10003d50:	83 7d 04 00          	cmp    DWORD PTR [ebp+0x4],0x0
10003d54:	0f 84 a2 00 00 00    	je     10003dfc <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xbc>
10003d5a:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
10003d5d:	85 db                	test   ebx,ebx
10003d5f:	0f 84 8f 00 00 00    	je     10003df4 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xb4>
10003d65:	3b 5c 24 44          	cmp    ebx,DWORD PTR [esp+0x44]
10003d69:	0f 84 85 00 00 00    	je     10003df4 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xb4>
10003d6f:	83 ec 0c             	sub    esp,0xc
10003d72:	53                   	push   ebx
10003d73:	e8 fc ff ff ff       	call   10003d74 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x34>	10003d74: R_386_PC32	NIWindow::invalidate()
10003d78:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
10003d7c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
10003d80:	a1 00 00 00 00       	mov    eax,ds:0x0	10003d81: R_386_32	milliTenthsSinceBoot
10003d85:	83 ec 0c             	sub    esp,0xc
10003d88:	89 86 0c 04 00 00    	mov    DWORD PTR [esi+0x40c],eax
10003d8e:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10003d90: R_386_32	milliTenthsSinceBoot
10003d94:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10003d98:	89 96 10 04 00 00    	mov    DWORD PTR [esi+0x410],edx
10003d9e:	25 ff 1f 00 00       	and    eax,0x1fff
10003da3:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10003da5: R_386_32	mouseDesktop
10003da9:	0d 00 60 00 80       	or     eax,0x80006000
10003dae:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10003db4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10003db8:	66 89 4c 24 2c       	mov    WORD PTR [esp+0x2c],cx
10003dbd:	66 25 00 7c          	and    ax,0x7c00
10003dc1:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10003dc7:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10003dcd:	66 89 4c 24 2e       	mov    WORD PTR [esp+0x2e],cx
10003dd2:	66 81 e2 ff 03       	and    dx,0x3ff
10003dd7:	b9 06 00 00 00       	mov    ecx,0x6
10003ddc:	09 d0                	or     eax,edx
10003dde:	66 89 44 24 28       	mov    WORD PTR [esp+0x28],ax
10003de3:	8d 74 24 24          	lea    esi,[esp+0x24]
10003de7:	89 e7                	mov    edi,esp
10003de9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10003deb:	53                   	push   ebx
10003dec:	e8 fc ff ff ff       	call   10003ded <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0xad>	10003ded: R_386_PC32	NIWindow::postEvent(NiEvent)
10003df1:	83 c4 20             	add    esp,0x20
10003df4:	8b 6d 04             	mov    ebp,DWORD PTR [ebp+0x4]
10003df7:	e9 54 ff ff ff       	jmp    10003d50 <NIDesktop::invalidateAllDueToFullscreen(NIWindow*)+0x10>
10003dfc:	83 c4 2c             	add    esp,0x2c
10003dff:	5b                   	pop    ebx
10003e00:	5e                   	pop    esi
10003e01:	5f                   	pop    edi
10003e02:	5d                   	pop    ebp
10003e03:	c3                   	ret    

10003e04 <NIDesktop::getTopmostWindowAtPixel(int, int)>:
10003e04:	57                   	push   edi
10003e05:	56                   	push   esi
10003e06:	53                   	push   ebx
10003e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10003e0b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10003e0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003e12:	8b 00                	mov    eax,DWORD PTR [eax]
10003e14:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
10003e17:	85 db                	test   ebx,ebx
10003e19:	74 52                	je     10003e6d <NIDesktop::getTopmostWindowAtPixel(int, int)+0x69>
10003e1b:	8b 00                	mov    eax,DWORD PTR [eax]
10003e1d:	85 c0                	test   eax,eax
10003e1f:	74 4e                	je     10003e6f <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6b>
10003e21:	8b 90 6c 02 00 00    	mov    edx,DWORD PTR [eax+0x26c]
10003e27:	39 ca                	cmp    edx,ecx
10003e29:	7e 04                	jle    10003e2f <NIDesktop::getTopmostWindowAtPixel(int, int)+0x2b>
10003e2b:	89 d8                	mov    eax,ebx
10003e2d:	eb e5                	jmp    10003e14 <NIDesktop::getTopmostWindowAtPixel(int, int)+0x10>
10003e2f:	8b b0 74 02 00 00    	mov    esi,DWORD PTR [eax+0x274]
10003e35:	01 d6                	add    esi,edx
10003e37:	39 ce                	cmp    esi,ecx
10003e39:	7e f0                	jle    10003e2b <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003e3b:	89 ce                	mov    esi,ecx
10003e3d:	29 d6                	sub    esi,edx
10003e3f:	8b 90 64 02 00 00    	mov    edx,DWORD PTR [eax+0x264]
10003e45:	8d 34 b2             	lea    esi,[edx+esi*4]
10003e48:	8b 90 68 02 00 00    	mov    edx,DWORD PTR [eax+0x268]
10003e4e:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10003e51:	01 d7                	add    edi,edx
10003e53:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
10003e57:	7f d2                	jg     10003e2b <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003e59:	03 90 70 02 00 00    	add    edx,DWORD PTR [eax+0x270]
10003e5f:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10003e63:	29 f2                	sub    edx,esi
10003e65:	3b 54 24 14          	cmp    edx,DWORD PTR [esp+0x14]
10003e69:	7e c0                	jle    10003e2b <NIDesktop::getTopmostWindowAtPixel(int, int)+0x27>
10003e6b:	eb 02                	jmp    10003e6f <NIDesktop::getTopmostWindowAtPixel(int, int)+0x6b>
10003e6d:	31 c0                	xor    eax,eax
10003e6f:	5b                   	pop    ebx
10003e70:	5e                   	pop    esi
10003e71:	5f                   	pop    edi
10003e72:	c3                   	ret    
10003e73:	90                   	nop

10003e74 <NIDesktop::renderScanline(int, int, int)>:
10003e74:	55                   	push   ebp
10003e75:	57                   	push   edi
10003e76:	56                   	push   esi
10003e77:	53                   	push   ebx
10003e78:	83 ec 3c             	sub    esp,0x3c
10003e7b:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
10003e80:	0f 88 cd 05 00 00    	js     10004453 <NIDesktop::renderScanline(int, int, int)+0x5df>
10003e86:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10003e8a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
10003e8e:	8b 00                	mov    eax,DWORD PTR [eax]
10003e90:	39 98 10 04 00 00    	cmp    DWORD PTR [eax+0x410],ebx
10003e96:	0f 8e b7 05 00 00    	jle    10004453 <NIDesktop::renderScanline(int, int, int)+0x5df>
10003e9c:	83 7c 24 58 00       	cmp    DWORD PTR [esp+0x58],0x0
10003ea1:	0f 88 ac 05 00 00    	js     10004453 <NIDesktop::renderScanline(int, int, int)+0x5df>
10003ea7:	8b 90 0c 04 00 00    	mov    edx,DWORD PTR [eax+0x40c]
10003ead:	3b 54 24 58          	cmp    edx,DWORD PTR [esp+0x58]
10003eb1:	0f 9c c0             	setl   al
10003eb4:	3b 54 24 5c          	cmp    edx,DWORD PTR [esp+0x5c]
10003eb8:	0f 9c c1             	setl   cl
10003ebb:	09 c8                	or     eax,ecx
10003ebd:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
10003ec1:	c1 e9 1f             	shr    ecx,0x1f
10003ec4:	08 c8                	or     al,cl
10003ec6:	89 c5                	mov    ebp,eax
10003ec8:	0f 85 85 05 00 00    	jne    10004453 <NIDesktop::renderScanline(int, int, int)+0x5df>
10003ece:	0f af d3             	imul   edx,ebx
10003ed1:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
10003ed5:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
10003ed9:	2b 44 24 58          	sub    eax,DWORD PTR [esp+0x58]
10003edd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10003ee1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003ee5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10003ee9:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003eeb: R_386_32	render
10003eef:	89 e8                	mov    eax,ebp
10003ef1:	89 d7                	mov    edi,edx
10003ef3:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003ef5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10003ef9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
10003efd:	8d 90 00 00 00 00    	lea    edx,[eax+0x0]	10003eff: R_386_32	shadow
10003f03:	b0 80                	mov    al,0x80
10003f05:	89 d7                	mov    edi,edx
10003f07:	f3 aa                	rep stos BYTE PTR es:[edi],al
10003f09:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10003f0d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f10:	8b 00                	mov    eax,DWORD PTR [eax]
10003f12:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003f16:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10003f1a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10003f1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10003f22:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10003f25:	85 c0                	test   eax,eax
10003f27:	0f 84 2e 04 00 00    	je     1000435b <NIDesktop::renderScanline(int, int, int)+0x4e7>
10003f2d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
10003f31:	8b 1b                	mov    ebx,DWORD PTR [ebx]
10003f33:	85 db                	test   ebx,ebx
10003f35:	0f 84 20 04 00 00    	je     1000435b <NIDesktop::renderScanline(int, int, int)+0x4e7>
10003f3b:	39 1d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebx	10003f3d: R_386_32	movingWin
10003f41:	75 06                	jne    10003f49 <NIDesktop::renderScanline(int, int, int)+0xd5>
10003f43:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
10003f47:	eb d5                	jmp    10003f1e <NIDesktop::renderScanline(int, int, int)+0xaa>
10003f49:	8b 93 8c 02 00 00    	mov    edx,DWORD PTR [ebx+0x28c]
10003f4f:	89 d1                	mov    ecx,edx
10003f51:	83 e1 12             	and    ecx,0x12
10003f54:	83 f9 12             	cmp    ecx,0x12
10003f57:	74 ea                	je     10003f43 <NIDesktop::renderScanline(int, int, int)+0xcf>
10003f59:	0f ba e2 09          	bt     edx,0x9
10003f5d:	72 e4                	jb     10003f43 <NIDesktop::renderScanline(int, int, int)+0xcf>
10003f5f:	83 ec 0c             	sub    esp,0xc
10003f62:	53                   	push   ebx
10003f63:	e8 fc ff ff ff       	call   10003f64 <NIDesktop::renderScanline(int, int, int)+0xf0>	10003f64: R_386_PC32	NIWindow::request()
10003f68:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10003f6e:	8b 93 74 02 00 00    	mov    edx,DWORD PTR [ebx+0x274]
10003f74:	83 c4 10             	add    esp,0x10
10003f77:	01 c2                	add    edx,eax
10003f79:	3b 54 24 54          	cmp    edx,DWORD PTR [esp+0x54]
10003f7d:	0f 8e 0e 01 00 00    	jle    10004091 <NIDesktop::renderScanline(int, int, int)+0x21d>
10003f83:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
10003f8a:	0f 85 01 01 00 00    	jne    10004091 <NIDesktop::renderScanline(int, int, int)+0x21d>
10003f90:	f6 83 8c 02 00 00 40 	test   BYTE PTR [ebx+0x28c],0x40
10003f97:	0f 85 17 02 00 00    	jne    100041b4 <NIDesktop::renderScanline(int, int, int)+0x340>
10003f9d:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10003fa3:	8b b3 68 02 00 00    	mov    esi,DWORD PTR [ebx+0x268]
10003fa9:	8b bb 70 02 00 00    	mov    edi,DWORD PTR [ebx+0x270]
10003faf:	01 f7                	add    edi,esi
10003fb1:	89 7c 24 10          	mov    DWORD PTR [esp+0x10],edi
10003fb5:	39 c7                	cmp    edi,eax
10003fb7:	0f 8e f7 01 00 00    	jle    100041b4 <NIDesktop::renderScanline(int, int, int)+0x340>
10003fbd:	3b 44 24 58          	cmp    eax,DWORD PTR [esp+0x58]
10003fc1:	0f 8c c4 00 00 00    	jl     1000408b <NIDesktop::renderScanline(int, int, int)+0x217>
10003fc7:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
10003fcb:	0f 8f e3 01 00 00    	jg     100041b4 <NIDesktop::renderScanline(int, int, int)+0x340>
10003fd1:	8b bb 8c 02 00 00    	mov    edi,DWORD PTR [ebx+0x28c]
10003fd7:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
10003fdb:	81 e7 00 01 00 00    	and    edi,0x100
10003fe1:	83 ff 01             	cmp    edi,0x1
10003fe4:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10003fe8:	19 c9                	sbb    ecx,ecx
10003fea:	8b bb 6c 02 00 00    	mov    edi,DWORD PTR [ebx+0x26c]
10003ff0:	83 e1 03             	and    ecx,0x3
10003ff3:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
10003ff7:	83 c1 02             	add    ecx,0x2
10003ffa:	6b ff fc             	imul   edi,edi,0xfffffffc
10003ffd:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
10004001:	89 c7                	mov    edi,eax
10004003:	29 f7                	sub    edi,esi
10004005:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10004009:	39 54 24 20          	cmp    DWORD PTR [esp+0x20],edx
1000400d:	7f 24                	jg     10004033 <NIDesktop::renderScanline(int, int, int)+0x1bf>
1000400f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10004013:	8d 34 96             	lea    esi,[esi+edx*4]
10004016:	03 b3 64 02 00 00    	add    esi,DWORD PTR [ebx+0x264]
1000401c:	0f b7 3e             	movzx  edi,WORD PTR [esi]
1000401f:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
10004023:	7f 0e                	jg     10004033 <NIDesktop::renderScanline(int, int, int)+0x1bf>
10004025:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
10004029:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
1000402d:	29 f7                	sub    edi,esi
1000402f:	39 c7                	cmp    edi,eax
10004031:	7d 0b                	jge    1000403e <NIDesktop::renderScanline(int, int, int)+0x1ca>
10004033:	42                   	inc    edx
10004034:	89 d6                	mov    esi,edx
10004036:	2b 74 24 54          	sub    esi,DWORD PTR [esp+0x54]
1000403a:	39 f1                	cmp    ecx,esi
1000403c:	7d cb                	jge    10004009 <NIDesktop::renderScanline(int, int, int)+0x195>
1000403e:	89 d6                	mov    esi,edx
10004040:	2b 74 24 54          	sub    esi,DWORD PTR [esp+0x54]
10004044:	39 f1                	cmp    ecx,esi
10004046:	0f 9f c1             	setg   cl
10004049:	85 f6                	test   esi,esi
1000404b:	0f 9f c2             	setg   dl
1000404e:	20 d1                	and    cl,dl
10004050:	74 39                	je     1000408b <NIDesktop::renderScanline(int, int, int)+0x217>
10004052:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10004054: R_386_32	render
10004059:	75 30                	jne    1000408b <NIDesktop::renderScanline(int, int, int)+0x217>
1000405b:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
10004060:	74 09                	je     1000406b <NIDesktop::renderScanline(int, int, int)+0x1f7>
10004062:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10004064: R_386_32	shadow
10004069:	eb 1e                	jmp    10004089 <NIDesktop::renderScanline(int, int, int)+0x215>
1000406b:	8d 34 f5 5d 00 00 00 	lea    esi,[esi*8+0x5d]
10004072:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	10004075: R_386_32	shadow
10004079:	0f af d6             	imul   edx,esi
1000407c:	d1 fe                	sar    esi,1
1000407e:	c1 fa 08             	sar    edx,0x8
10004081:	01 f2                	add    edx,esi
10004083:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	10004085: R_386_32	shadow
10004089:	89 cd                	mov    ebp,ecx
1000408b:	40                   	inc    eax
1000408c:	e9 12 ff ff ff       	jmp    10003fa3 <NIDesktop::renderScanline(int, int, int)+0x12f>
10004091:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
10004095:	0f 8d 19 01 00 00    	jge    100041b4 <NIDesktop::renderScanline(int, int, int)+0x340>
1000409b:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
100040a2:	0f 85 0c 01 00 00    	jne    100041b4 <NIDesktop::renderScanline(int, int, int)+0x340>
100040a8:	f6 83 8c 02 00 00 40 	test   BYTE PTR [ebx+0x28c],0x40
100040af:	0f 85 ff 00 00 00    	jne    100041b4 <NIDesktop::renderScanline(int, int, int)+0x340>
100040b5:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
100040bb:	8b b3 68 02 00 00    	mov    esi,DWORD PTR [ebx+0x268]
100040c1:	8b bb 70 02 00 00    	mov    edi,DWORD PTR [ebx+0x270]
100040c7:	01 f7                	add    edi,esi
100040c9:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
100040cd:	39 c7                	cmp    edi,eax
100040cf:	0f 8e df 00 00 00    	jle    100041b4 <NIDesktop::renderScanline(int, int, int)+0x340>
100040d5:	3b 44 24 58          	cmp    eax,DWORD PTR [esp+0x58]
100040d9:	0f 8c cf 00 00 00    	jl     100041ae <NIDesktop::renderScanline(int, int, int)+0x33a>
100040df:	3b 44 24 5c          	cmp    eax,DWORD PTR [esp+0x5c]
100040e3:	0f 8f cb 00 00 00    	jg     100041b4 <NIDesktop::renderScanline(int, int, int)+0x340>
100040e9:	8b bb 8c 02 00 00    	mov    edi,DWORD PTR [ebx+0x28c]
100040ef:	81 e7 00 01 00 00    	and    edi,0x100
100040f5:	83 ff 01             	cmp    edi,0x1
100040f8:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
100040fc:	19 c9                	sbb    ecx,ecx
100040fe:	89 c7                	mov    edi,eax
10004100:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
10004104:	29 f7                	sub    edi,esi
10004106:	83 64 24 10 03       	and    DWORD PTR [esp+0x10],0x3
1000410b:	8b 4c 24 54          	mov    ecx,DWORD PTR [esp+0x54]
1000410f:	83 44 24 10 02       	add    DWORD PTR [esp+0x10],0x2
10004114:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
10004118:	49                   	dec    ecx
10004119:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
1000411d:	29 cf                	sub    edi,ecx
1000411f:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
10004123:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
10004127:	7c 3b                	jl     10004164 <NIDesktop::renderScanline(int, int, int)+0x2f0>
10004129:	8b bb 6c 02 00 00    	mov    edi,DWORD PTR [ebx+0x26c]
1000412f:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
10004135:	8d 14 37             	lea    edx,[edi+esi*1]
10004138:	39 ca                	cmp    edx,ecx
1000413a:	7e dc                	jle    10004118 <NIDesktop::renderScanline(int, int, int)+0x2a4>
1000413c:	89 ca                	mov    edx,ecx
1000413e:	29 fa                	sub    edx,edi
10004140:	39 d6                	cmp    esi,edx
10004142:	7e 20                	jle    10004164 <NIDesktop::renderScanline(int, int, int)+0x2f0>
10004144:	8b b3 64 02 00 00    	mov    esi,DWORD PTR [ebx+0x264]
1000414a:	8d 34 96             	lea    esi,[esi+edx*4]
1000414d:	0f b7 3e             	movzx  edi,WORD PTR [esi]
10004150:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
10004154:	7f c2                	jg     10004118 <NIDesktop::renderScanline(int, int, int)+0x2a4>
10004156:	0f b7 76 02          	movzx  esi,WORD PTR [esi+0x2]
1000415a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
1000415e:	29 f7                	sub    edi,esi
10004160:	39 c7                	cmp    edi,eax
10004162:	7c b4                	jl     10004118 <NIDesktop::renderScanline(int, int, int)+0x2a4>
10004164:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
10004168:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
1000416c:	76 40                	jbe    100041ae <NIDesktop::renderScanline(int, int, int)+0x33a>
1000416e:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10004170: R_386_32	render
10004175:	75 37                	jne    100041ae <NIDesktop::renderScanline(int, int, int)+0x33a>
10004177:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
1000417c:	74 09                	je     10004187 <NIDesktop::renderScanline(int, int, int)+0x313>
1000417e:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	10004180: R_386_32	shadow
10004185:	eb 22                	jmp    100041a9 <NIDesktop::renderScanline(int, int, int)+0x335>
10004187:	0f b6 90 00 00 00 00 	movzx  edx,BYTE PTR [eax+0x0]	1000418a: R_386_32	shadow
1000418e:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
10004192:	8d 0c f5 5d 00 00 00 	lea    ecx,[esi*8+0x5d]
10004199:	0f af d1             	imul   edx,ecx
1000419c:	d1 f9                	sar    ecx,1
1000419e:	c1 fa 08             	sar    edx,0x8
100041a1:	01 d1                	add    ecx,edx
100041a3:	88 88 00 00 00 00    	mov    BYTE PTR [eax+0x0],cl	100041a5: R_386_32	shadow
100041a9:	bd 01 00 00 00       	mov    ebp,0x1
100041ae:	40                   	inc    eax
100041af:	e9 07 ff ff ff       	jmp    100040bb <NIDesktop::renderScanline(int, int, int)+0x247>
100041b4:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
100041ba:	3b 44 24 54          	cmp    eax,DWORD PTR [esp+0x54]
100041be:	0f 8f 82 01 00 00    	jg     10004346 <NIDesktop::renderScanline(int, int, int)+0x4d2>
100041c4:	8b 93 74 02 00 00    	mov    edx,DWORD PTR [ebx+0x274]
100041ca:	01 c2                	add    edx,eax
100041cc:	3b 54 24 54          	cmp    edx,DWORD PTR [esp+0x54]
100041d0:	0f 8e 70 01 00 00    	jle    10004346 <NIDesktop::renderScanline(int, int, int)+0x4d2>
100041d6:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
100041da:	29 c2                	sub    edx,eax
100041dc:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
100041e2:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
100041e9:	8d 04 90             	lea    eax,[eax+edx*4]
100041ec:	0f b7 30             	movzx  esi,WORD PTR [eax]
100041ef:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
100041f3:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
100041f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100041fb:	0f 85 d8 00 00 00    	jne    100042d9 <NIDesktop::renderScanline(int, int, int)+0x465>
10004201:	8b 83 8c 02 00 00    	mov    eax,DWORD PTR [ebx+0x28c]
10004207:	a8 40                	test   al,0x40
10004209:	0f 85 ca 00 00 00    	jne    100042d9 <NIDesktop::renderScanline(int, int, int)+0x465>
1000420f:	25 00 01 00 00       	and    eax,0x100
10004214:	83 f8 01             	cmp    eax,0x1
10004217:	19 c9                	sbb    ecx,ecx
10004219:	83 e1 fe             	and    ecx,0xfffffffe
1000421c:	83 c1 03             	add    ecx,0x3
1000421f:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10004225:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
10004229:	8b bb 8c 02 00 00    	mov    edi,DWORD PTR [ebx+0x28c]
1000422f:	8d 74 30 fc          	lea    esi,[eax+esi*1-0x4]
10004233:	81 e7 00 01 00 00    	and    edi,0x100
10004239:	01 ce                	add    esi,ecx
1000423b:	03 83 70 02 00 00    	add    eax,DWORD PTR [ebx+0x270]
10004241:	89 fa                	mov    edx,edi
10004243:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
10004247:	01 c8                	add    eax,ecx
10004249:	83 ff 01             	cmp    edi,0x1
1000424c:	19 ff                	sbb    edi,edi
1000424e:	f7 d7                	not    edi
10004250:	83 e7 03             	and    edi,0x3
10004253:	29 f8                	sub    eax,edi
10004255:	80 be 00 00 00 00 00 	cmp    BYTE PTR [esi+0x0],0x0	10004257: R_386_32	render
1000425c:	75 31                	jne    1000428f <NIDesktop::renderScanline(int, int, int)+0x41b>
1000425e:	85 d2                	test   edx,edx
10004260:	74 09                	je     1000426b <NIDesktop::renderScanline(int, int, int)+0x3f7>
10004262:	c6 86 00 00 00 00 00 	mov    BYTE PTR [esi+0x0],0x0	10004264: R_386_32	shadow
10004269:	eb 1f                	jmp    1000428a <NIDesktop::renderScanline(int, int, int)+0x416>
1000426b:	0f b6 be 00 00 00 00 	movzx  edi,BYTE PTR [esi+0x0]	1000426e: R_386_32	shadow
10004272:	6b e9 f8             	imul   ebp,ecx,0xfffffff8
10004275:	83 c5 7d             	add    ebp,0x7d
10004278:	0f af fd             	imul   edi,ebp
1000427b:	d1 fd                	sar    ebp,1
1000427d:	c1 ff 08             	sar    edi,0x8
10004280:	01 fd                	add    ebp,edi
10004282:	89 ea                	mov    edx,ebp
10004284:	88 96 00 00 00 00    	mov    BYTE PTR [esi+0x0],dl	10004286: R_386_32	shadow
1000428a:	bd 01 00 00 00       	mov    ebp,0x1
1000428f:	80 b8 00 00 00 00 00 	cmp    BYTE PTR [eax+0x0],0x0	10004291: R_386_32	render
10004296:	75 37                	jne    100042cf <NIDesktop::renderScanline(int, int, int)+0x45b>
10004298:	f6 83 8d 02 00 00 01 	test   BYTE PTR [ebx+0x28d],0x1
1000429f:	74 09                	je     100042aa <NIDesktop::renderScanline(int, int, int)+0x436>
100042a1:	c6 80 00 00 00 00 00 	mov    BYTE PTR [eax+0x0],0x0	100042a3: R_386_32	shadow
100042a8:	eb 20                	jmp    100042ca <NIDesktop::renderScanline(int, int, int)+0x456>
100042aa:	8d 3c cd 65 00 00 00 	lea    edi,[ecx*8+0x65]
100042b1:	0f b6 b0 00 00 00 00 	movzx  esi,BYTE PTR [eax+0x0]	100042b4: R_386_32	shadow
100042b8:	0f af f7             	imul   esi,edi
100042bb:	d1 ff                	sar    edi,1
100042bd:	c1 fe 08             	sar    esi,0x8
100042c0:	01 f7                	add    edi,esi
100042c2:	89 fa                	mov    edx,edi
100042c4:	88 90 00 00 00 00    	mov    BYTE PTR [eax+0x0],dl	100042c6: R_386_32	shadow
100042ca:	bd 01 00 00 00       	mov    ebp,0x1
100042cf:	41                   	inc    ecx
100042d0:	83 f9 04             	cmp    ecx,0x4
100042d3:	0f 85 46 ff ff ff    	jne    1000421f <NIDesktop::renderScanline(int, int, int)+0x3ab>
100042d9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
100042dd:	03 93 68 02 00 00    	add    edx,DWORD PTR [ebx+0x268]
100042e3:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100042e9:	03 83 68 02 00 00    	add    eax,DWORD PTR [ebx+0x268]
100042ef:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
100042f3:	39 d0                	cmp    eax,edx
100042f5:	7e 4f                	jle    10004346 <NIDesktop::renderScanline(int, int, int)+0x4d2>
100042f7:	3b 54 24 58          	cmp    edx,DWORD PTR [esp+0x58]
100042fb:	7c 46                	jl     10004343 <NIDesktop::renderScanline(int, int, int)+0x4cf>
100042fd:	3b 54 24 5c          	cmp    edx,DWORD PTR [esp+0x5c]
10004301:	7f 43                	jg     10004346 <NIDesktop::renderScanline(int, int, int)+0x4d2>
10004303:	80 ba 00 00 00 00 00 	cmp    BYTE PTR [edx+0x0],0x0	10004305: R_386_32	render
1000430a:	75 37                	jne    10004343 <NIDesktop::renderScanline(int, int, int)+0x4cf>
1000430c:	c6 82 00 00 00 00 01 	mov    BYTE PTR [edx+0x0],0x1	1000430e: R_386_32	render
10004313:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
10004317:	2b 83 6c 02 00 00    	sub    eax,DWORD PTR [ebx+0x26c]
1000431d:	0f af 83 70 02 00 00 	imul   eax,DWORD PTR [ebx+0x270]
10004324:	89 c1                	mov    ecx,eax
10004326:	89 d0                	mov    eax,edx
10004328:	2b 83 68 02 00 00    	sub    eax,DWORD PTR [ebx+0x268]
1000432e:	01 c8                	add    eax,ecx
10004330:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
10004333:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
10004337:	8b 04 81             	mov    eax,DWORD PTR [ecx+eax*4]
1000433a:	89 04 95 00 00 00 00 	mov    DWORD PTR [edx*4+0x0],eax	1000433d: R_386_32	renderData
10004341:	74 66                	je     100043a9 <NIDesktop::renderScanline(int, int, int)+0x535>
10004343:	42                   	inc    edx
10004344:	eb 9d                	jmp    100042e3 <NIDesktop::renderScanline(int, int, int)+0x46f>
10004346:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
1000434d:	75 0c                	jne    1000435b <NIDesktop::renderScanline(int, int, int)+0x4e7>
1000434f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004353:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
10004356:	e9 e8 fb ff ff       	jmp    10003f43 <NIDesktop::renderScanline(int, int, int)+0xcf>
1000435b:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
1000435f:	3b 5c 24 5c          	cmp    ebx,DWORD PTR [esp+0x5c]
10004363:	7d 44                	jge    100043a9 <NIDesktop::renderScanline(int, int, int)+0x535>
10004365:	80 bb 00 00 00 00 00 	cmp    BYTE PTR [ebx+0x0],0x0	10004367: R_386_32	render
1000436c:	75 38                	jne    100043a6 <NIDesktop::renderScanline(int, int, int)+0x532>
1000436e:	c6 83 00 00 00 00 01 	mov    BYTE PTR [ebx+0x0],0x1	10004370: R_386_32	render
10004375:	50                   	push   eax
10004376:	50                   	push   eax
10004377:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
1000437b:	8d 14 18             	lea    edx,[eax+ebx*1]
1000437e:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
10004382:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004388:	0f b7 04 50          	movzx  eax,WORD PTR [eax+edx*2]
1000438c:	50                   	push   eax
1000438d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
10004391:	e8 fc ff ff ff       	call   10004392 <NIDesktop::renderScanline(int, int, int)+0x51e>	10004392: R_386_PC32	NIDesktop::desktopDecode(int)
10004396:	83 c4 10             	add    esp,0x10
10004399:	89 04 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],eax	1000439c: R_386_32	renderData
100043a0:	ff 4c 24 1c          	dec    DWORD PTR [esp+0x1c]
100043a4:	74 03                	je     100043a9 <NIDesktop::renderScanline(int, int, int)+0x535>
100043a6:	43                   	inc    ebx
100043a7:	eb b6                	jmp    1000435f <NIDesktop::renderScanline(int, int, int)+0x4eb>
100043a9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
100043ad:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
100043b0:	8b 00                	mov    eax,DWORD PTR [eax]
100043b2:	85 c0                	test   eax,eax
100043b4:	74 67                	je     1000441d <NIDesktop::renderScanline(int, int, int)+0x5a9>
100043b6:	8b 00                	mov    eax,DWORD PTR [eax]
100043b8:	85 c0                	test   eax,eax
100043ba:	74 61                	je     1000441d <NIDesktop::renderScanline(int, int, int)+0x5a9>
100043bc:	80 b8 78 02 00 00 01 	cmp    BYTE PTR [eax+0x278],0x1
100043c3:	74 58                	je     1000441d <NIDesktop::renderScanline(int, int, int)+0x5a9>
100043c5:	89 e8                	mov    eax,ebp
100043c7:	84 c0                	test   al,al
100043c9:	74 52                	je     1000441d <NIDesktop::renderScanline(int, int, int)+0x5a9>
100043cb:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
100043cf:	3b 5c 24 5c          	cmp    ebx,DWORD PTR [esp+0x5c]
100043d3:	7d 48                	jge    1000441d <NIDesktop::renderScanline(int, int, int)+0x5a9>
100043d5:	8a 83 00 00 00 00    	mov    al,BYTE PTR [ebx+0x0]	100043d7: R_386_32	shadow
100043db:	3c 80                	cmp    al,0x80
100043dd:	74 3b                	je     1000441a <NIDesktop::renderScanline(int, int, int)+0x5a6>
100043df:	8b 14 9d 00 00 00 00 	mov    edx,DWORD PTR [ebx*4+0x0]	100043e2: R_386_32	renderData
100043e6:	0f b6 f0             	movzx  esi,al
100043e9:	89 d1                	mov    ecx,edx
100043eb:	0f b6 c6             	movzx  eax,dh
100043ee:	c1 e9 10             	shr    ecx,0x10
100043f1:	0f af c6             	imul   eax,esi
100043f4:	0f b6 c9             	movzx  ecx,cl
100043f7:	0f b6 d2             	movzx  edx,dl
100043fa:	0f af ce             	imul   ecx,esi
100043fd:	0f af d6             	imul   edx,esi
10004400:	c1 e9 07             	shr    ecx,0x7
10004403:	c1 e8 07             	shr    eax,0x7
10004406:	c1 e1 10             	shl    ecx,0x10
10004409:	c1 e0 08             	shl    eax,0x8
1000440c:	c1 ea 07             	shr    edx,0x7
1000440f:	09 c1                	or     ecx,eax
10004411:	09 ca                	or     edx,ecx
10004413:	89 14 9d 00 00 00 00 	mov    DWORD PTR [ebx*4+0x0],edx	10004416: R_386_32	renderData
1000441a:	43                   	inc    ebx
1000441b:	eb b2                	jmp    100043cf <NIDesktop::renderScanline(int, int, int)+0x55b>
1000441d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
10004421:	83 ec 0c             	sub    esp,0xc
10004424:	8b 00                	mov    eax,DWORD PTR [eax]
10004426:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
1000442c:	8b 10                	mov    edx,DWORD PTR [eax]
1000442e:	68 00 00 00 00       	push   0x0	1000442f: R_386_32	renderData
10004433:	6a 00                	push   0x0
10004435:	6a 01                	push   0x1
10004437:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
1000443b:	6a 00                	push   0x0
1000443d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
10004441:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
10004445:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
1000444c:	50                   	push   eax
1000444d:	ff 52 38             	call   DWORD PTR [edx+0x38]
10004450:	83 c4 30             	add    esp,0x30
10004453:	83 c4 3c             	add    esp,0x3c
10004456:	5b                   	pop    ebx
10004457:	5e                   	pop    esi
10004458:	5f                   	pop    edi
10004459:	5d                   	pop    ebp
1000445a:	c3                   	ret    
1000445b:	90                   	nop

1000445c <NIDesktop::rangeRefresh(int, int, int, int, bool*)>:
1000445c:	57                   	push   edi
1000445d:	56                   	push   esi
1000445e:	53                   	push   ebx
1000445f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10004463:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10004467:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
1000446b:	3b 5c 24 18          	cmp    ebx,DWORD PTR [esp+0x18]
1000446f:	7d 29                	jge    1000449a <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3e>
10004471:	85 f6                	test   esi,esi
10004473:	74 06                	je     1000447b <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x1f>
10004475:	80 3c 1e 00          	cmp    BYTE PTR [esi+ebx*1],0x0
10004479:	74 1c                	je     10004497 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3b>
1000447b:	8b 07                	mov    eax,DWORD PTR [edi]
1000447d:	39 98 10 04 00 00    	cmp    DWORD PTR [eax+0x410],ebx
10004483:	7e 15                	jle    1000449a <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x3e>
10004485:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10004489:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
1000448d:	53                   	push   ebx
1000448e:	57                   	push   edi
1000448f:	e8 fc ff ff ff       	call   10004490 <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0x34>	10004490: R_386_PC32	NIDesktop::renderScanline(int, int, int)
10004494:	83 c4 10             	add    esp,0x10
10004497:	43                   	inc    ebx
10004498:	eb d1                	jmp    1000446b <NIDesktop::rangeRefresh(int, int, int, int, bool*)+0xf>
1000449a:	5b                   	pop    ebx
1000449b:	5e                   	pop    esi
1000449c:	5f                   	pop    edi
1000449d:	c3                   	ret    

1000449e <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)>:
1000449e:	55                   	push   ebp
1000449f:	57                   	push   edi
100044a0:	56                   	push   esi
100044a1:	53                   	push   ebx
100044a2:	83 ec 34             	sub    esp,0x34
100044a5:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
100044a9:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
100044ad:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
100044b1:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
100044b7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
100044bb:	8d 4a 20             	lea    ecx,[edx+0x20]
100044be:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
100044c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
100044c6:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
100044ca:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
100044ce:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100044d4:	6a 00                	push   0x0
100044d6:	51                   	push   ecx
100044d7:	52                   	push   edx
100044d8:	8d 50 20             	lea    edx,[eax+0x20]
100044db:	52                   	push   edx
100044dc:	50                   	push   eax
100044dd:	53                   	push   ebx
100044de:	e8 fc ff ff ff       	call   100044df <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x41>	100044df: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
100044e3:	8b 86 6c 02 00 00    	mov    eax,DWORD PTR [esi+0x26c]
100044e9:	8b 3b                	mov    edi,DWORD PTR [ebx]
100044eb:	8b 96 74 02 00 00    	mov    edx,DWORD PTR [esi+0x274]
100044f1:	8b 8f 10 04 00 00    	mov    ecx,DWORD PTR [edi+0x410]
100044f7:	01 c2                	add    edx,eax
100044f9:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
100044fd:	83 e9 05             	sub    ecx,0x5
10004500:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
10004504:	83 c4 20             	add    esp,0x20
10004507:	8d 4a 05             	lea    ecx,[edx+0x5]
1000450a:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
1000450e:	7f 05                	jg     10004515 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x77>
10004510:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004514:	49                   	dec    ecx
10004515:	8b 96 68 02 00 00    	mov    edx,DWORD PTR [esi+0x268]
1000451b:	89 d5                	mov    ebp,edx
1000451d:	83 fa 05             	cmp    edx,0x5
10004520:	7d 05                	jge    10004527 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0x89>
10004522:	bd 05 00 00 00       	mov    ebp,0x5
10004527:	03 96 70 02 00 00    	add    edx,DWORD PTR [esi+0x270]
1000452d:	83 ed 05             	sub    ebp,0x5
10004530:	8b bf 0c 04 00 00    	mov    edi,DWORD PTR [edi+0x40c]
10004536:	8d 77 fb             	lea    esi,[edi-0x5]
10004539:	89 74 24 1c          	mov    DWORD PTR [esp+0x1c],esi
1000453d:	8d 72 05             	lea    esi,[edx+0x5]
10004540:	39 54 24 1c          	cmp    DWORD PTR [esp+0x1c],edx
10004544:	7f 03                	jg     10004549 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xab>
10004546:	8d 77 ff             	lea    esi,[edi-0x1]
10004549:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
1000454e:	75 07                	jne    10004557 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xb9>
10004550:	89 c2                	mov    edx,eax
10004552:	83 f8 05             	cmp    eax,0x5
10004555:	eb 09                	jmp    10004560 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xc2>
10004557:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
1000455b:	01 c2                	add    edx,eax
1000455d:	83 fa 05             	cmp    edx,0x5
10004560:	7d 05                	jge    10004567 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xc9>
10004562:	ba 05 00 00 00       	mov    edx,0x5
10004567:	83 ea 05             	sub    edx,0x5
1000456a:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
1000456f:	74 12                	je     10004583 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xe5>
10004571:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
10004575:	8d 48 05             	lea    ecx,[eax+0x5]
10004578:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
1000457c:	7f 05                	jg     10004583 <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xe5>
1000457e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
10004582:	49                   	dec    ecx
10004583:	50                   	push   eax
10004584:	50                   	push   eax
10004585:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
10004589:	56                   	push   esi
1000458a:	55                   	push   ebp
1000458b:	51                   	push   ecx
1000458c:	52                   	push   edx
1000458d:	53                   	push   ebx
1000458e:	e8 fc ff ff ff       	call   1000458f <NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)+0xf1>	1000458f: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004593:	8b 03                	mov    eax,DWORD PTR [ebx]
10004595:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
1000459b:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000459d:	c7 44 24 70 00 00 00 00 	mov    DWORD PTR [esp+0x70],0x0
100045a5:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
100045ab:	05 00 00 00 00       	add    eax,0x0	100045ac: R_386_32	___mouse_data
100045b0:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
100045b4:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100045ba:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
100045be:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
100045c4:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
100045c8:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
100045cc:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
100045cf:	83 c4 4c             	add    esp,0x4c
100045d2:	5b                   	pop    ebx
100045d3:	5e                   	pop    esi
100045d4:	5f                   	pop    edi
100045d5:	5d                   	pop    ebp
100045d6:	ff e0                	jmp    eax

100045d8 <NIDesktop::completeRefresh()>:
100045d8:	56                   	push   esi
100045d9:	31 f6                	xor    esi,esi
100045db:	53                   	push   ebx
100045dc:	83 ec 0c             	sub    esp,0xc
100045df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100045e3:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
100045e9:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100045ef:	8d 4a 20             	lea    ecx,[edx+0x20]
100045f2:	6a 00                	push   0x0
100045f4:	51                   	push   ecx
100045f5:	52                   	push   edx
100045f6:	8d 50 20             	lea    edx,[eax+0x20]
100045f9:	52                   	push   edx
100045fa:	50                   	push   eax
100045fb:	53                   	push   ebx
100045fc:	e8 fc ff ff ff       	call   100045fd <NIDesktop::completeRefresh()+0x25>	100045fd: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004601:	83 c4 20             	add    esp,0x20
10004604:	8b 03                	mov    eax,DWORD PTR [ebx]
10004606:	39 b0 10 04 00 00    	cmp    DWORD PTR [eax+0x410],esi
1000460c:	7e 15                	jle    10004623 <NIDesktop::completeRefresh()+0x4b>
1000460e:	ff b0 0c 04 00 00    	push   DWORD PTR [eax+0x40c]
10004614:	6a 00                	push   0x0
10004616:	56                   	push   esi
10004617:	46                   	inc    esi
10004618:	53                   	push   ebx
10004619:	e8 fc ff ff ff       	call   1000461a <NIDesktop::completeRefresh()+0x42>	1000461a: R_386_PC32	NIDesktop::renderScanline(int, int, int)
1000461e:	83 c4 10             	add    esp,0x10
10004621:	eb e1                	jmp    10004604 <NIDesktop::completeRefresh()+0x2c>
10004623:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004629:	83 ec 0c             	sub    esp,0xc
1000462c:	8b 0a                	mov    ecx,DWORD PTR [edx]
1000462e:	6a 00                	push   0x0
10004630:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
10004636:	05 00 00 00 00       	add    eax,0x0	10004637: R_386_32	___mouse_data
1000463b:	50                   	push   eax
1000463c:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
10004642:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
10004648:	52                   	push   edx
10004649:	ff 51 30             	call   DWORD PTR [ecx+0x30]
1000464c:	83 c4 24             	add    esp,0x24
1000464f:	5b                   	pop    ebx
10004650:	5e                   	pop    esi
10004651:	c3                   	ret    

10004652 <NIDesktop::addWindow(NIWindow*)>:
10004652:	56                   	push   esi
10004653:	53                   	push   ebx
10004654:	83 ec 0c             	sub    esp,0xc
10004657:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
1000465b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
1000465f:	56                   	push   esi
10004660:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10004663:	e8 fc ff ff ff       	call   10004664 <NIDesktop::addWindow(NIWindow*)+0x12>	10004664: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
10004668:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
1000466f:	6a ff                	push   0xffffffff
10004671:	6a ff                	push   0xffffffff
10004673:	56                   	push   esi
10004674:	53                   	push   ebx
10004675:	e8 fc ff ff ff       	call   10004676 <NIDesktop::addWindow(NIWindow*)+0x24>	10004676: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
1000467a:	83 c4 24             	add    esp,0x24
1000467d:	5b                   	pop    ebx
1000467e:	5e                   	pop    esi
1000467f:	c3                   	ret    

10004680 <NIDesktop::raiseWindow(NIWindow*)>:
10004680:	53                   	push   ebx
10004681:	83 ec 10             	sub    esp,0x10
10004684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
10004688:	8d 44 24 1c          	lea    eax,[esp+0x1c]
1000468c:	50                   	push   eax
1000468d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
10004690:	e8 fc ff ff ff       	call   10004691 <NIDesktop::raiseWindow(NIWindow*)+0x11>	10004691: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
10004695:	58                   	pop    eax
10004696:	5a                   	pop    edx
10004697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
1000469b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
1000469e:	e8 fc ff ff ff       	call   1000469f <NIDesktop::raiseWindow(NIWindow*)+0x1f>	1000469f: R_386_PC32	List<NIWindow*>::insertAtHead(NIWindow*)
100046a3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100046aa:	6a ff                	push   0xffffffff
100046ac:	6a ff                	push   0xffffffff
100046ae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100046b2:	53                   	push   ebx
100046b3:	e8 fc ff ff ff       	call   100046b4 <NIDesktop::raiseWindow(NIWindow*)+0x34>	100046b4: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
100046b8:	83 c4 28             	add    esp,0x28
100046bb:	5b                   	pop    ebx
100046bc:	c3                   	ret    
100046bd:	90                   	nop

100046be <NIDesktop::deleteWindow(NIWindow*)>:
100046be:	53                   	push   ebx
100046bf:	83 ec 10             	sub    esp,0x10
100046c2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
100046c6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
100046ca:	50                   	push   eax
100046cb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
100046ce:	e8 fc ff ff ff       	call   100046cf <NIDesktop::deleteWindow(NIWindow*)+0x11>	100046cf: R_386_PC32	List<NIWindow*>::deleteElement(NIWindow*&)
100046d3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100046da:	6a ff                	push   0xffffffff
100046dc:	6a ff                	push   0xffffffff
100046de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
100046e2:	53                   	push   ebx
100046e3:	e8 fc ff ff ff       	call   100046e4 <NIDesktop::deleteWindow(NIWindow*)+0x26>	100046e4: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
100046e8:	83 c4 28             	add    esp,0x28
100046eb:	5b                   	pop    ebx
100046ec:	c3                   	ret    
100046ed:	90                   	nop

100046ee <NIDesktop::handleMouse(int, int, int, int)>:
100046ee:	55                   	push   ebp
100046ef:	57                   	push   edi
100046f0:	56                   	push   esi
100046f1:	53                   	push   ebx
100046f2:	81 ec 64 01 00 00    	sub    esp,0x164
100046f8:	8b 9c 24 78 01 00 00 	mov    ebx,DWORD PTR [esp+0x178]
100046ff:	8b b4 24 7c 01 00 00 	mov    esi,DWORD PTR [esp+0x17c]
10004706:	8b bc 24 80 01 00 00 	mov    edi,DWORD PTR [esp+0x180]
1000470d:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
10004713:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004719:	8d 4a 20             	lea    ecx,[edx+0x20]
1000471c:	6a 00                	push   0x0
1000471e:	51                   	push   ecx
1000471f:	52                   	push   edx
10004720:	8d 50 20             	lea    edx,[eax+0x20]
10004723:	52                   	push   edx
10004724:	50                   	push   eax
10004725:	53                   	push   ebx
10004726:	e8 fc ff ff ff       	call   10004727 <NIDesktop::handleMouse(int, int, int, int)+0x39>	10004727: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
1000472b:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10004731:	8b 8b 1c 04 00 00    	mov    ecx,DWORD PTR [ebx+0x41c]
10004737:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
1000473b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
1000473f:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004745:	8b 8c 24 9c 01 00 00 	mov    ecx,DWORD PTR [esp+0x19c]
1000474c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
10004750:	89 8b 1c 04 00 00    	mov    DWORD PTR [ebx+0x41c],ecx
10004756:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
1000475a:	8d 14 30             	lea    edx,[eax+esi*1]
1000475d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10004761:	89 93 14 04 00 00    	mov    DWORD PTR [ebx+0x414],edx
10004767:	01 f8                	add    eax,edi
10004769:	83 c4 20             	add    esp,0x20
1000476c:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
10004772:	85 d2                	test   edx,edx
10004774:	79 0a                	jns    10004780 <NIDesktop::handleMouse(int, int, int, int)+0x92>
10004776:	c7 83 14 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x414],0x0
10004780:	85 c0                	test   eax,eax
10004782:	79 0a                	jns    1000478e <NIDesktop::handleMouse(int, int, int, int)+0xa0>
10004784:	c7 83 18 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x418],0x0
1000478e:	8b 13                	mov    edx,DWORD PTR [ebx]
10004790:	8b 82 0c 04 00 00    	mov    eax,DWORD PTR [edx+0x40c]
10004796:	3b 83 14 04 00 00    	cmp    eax,DWORD PTR [ebx+0x414]
1000479c:	7f 07                	jg     100047a5 <NIDesktop::handleMouse(int, int, int, int)+0xb7>
1000479e:	48                   	dec    eax
1000479f:	89 83 14 04 00 00    	mov    DWORD PTR [ebx+0x414],eax
100047a5:	8b 82 10 04 00 00    	mov    eax,DWORD PTR [edx+0x410]
100047ab:	3b 83 18 04 00 00    	cmp    eax,DWORD PTR [ebx+0x418]
100047b1:	7f 07                	jg     100047ba <NIDesktop::handleMouse(int, int, int, int)+0xcc>
100047b3:	48                   	dec    eax
100047b4:	89 83 18 04 00 00    	mov    DWORD PTR [ebx+0x418],eax
100047ba:	55                   	push   ebp
100047bb:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
100047c1:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
100047c7:	53                   	push   ebx
100047c8:	e8 fc ff ff ff       	call   100047c9 <NIDesktop::handleMouse(int, int, int, int)+0xdb>	100047c9: R_386_PC32	NIDesktop::getTopmostWindowAtPixel(int, int)
100047cd:	83 c4 10             	add    esp,0x10
100047d0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100047d4:	8b 84 24 7c 01 00 00 	mov    eax,DWORD PTR [esp+0x17c]
100047db:	83 e0 01             	and    eax,0x1
100047de:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100047e3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100047e7:	0f 85 af 0c 00 00    	jne    1000549c <NIDesktop::handleMouse(int, int, int, int)+0xdae>
100047ed:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	100047ef: R_386_32	prevClickon
100047f3:	85 ed                	test   ebp,ebp
100047f5:	0f 85 a5 0c 00 00    	jne    100054a0 <NIDesktop::handleMouse(int, int, int, int)+0xdb2>
100047fb:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	100047fd: R_386_32	desktopWindowDummy
10004801:	85 ed                	test   ebp,ebp
10004803:	0f 84 64 02 00 00    	je     10004a6d <NIDesktop::handleMouse(int, int, int, int)+0x37f>
10004809:	09 fe                	or     esi,edi
1000480b:	74 72                	je     1000487f <NIDesktop::handleMouse(int, int, int, int)+0x191>
1000480d:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
10004812:	0f 84 e1 00 00 00    	je     100048f9 <NIDesktop::handleMouse(int, int, int, int)+0x20b>
10004818:	8b 84 24 dc 00 00 00 	mov    eax,DWORD PTR [esp+0xdc]
1000481f:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004821: R_386_32	mouseDesktop
10004825:	89 ac 24 d8 00 00 00 	mov    DWORD PTR [esp+0xd8],ebp
1000482c:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10004832:	25 ff 1f 00 00       	and    eax,0x1fff
10004837:	66 89 8c 24 e0 00 00 00 	mov    WORD PTR [esp+0xe0],cx
1000483f:	80 cc a0             	or     ah,0xa0
10004842:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004848:	89 84 24 dc 00 00 00 	mov    DWORD PTR [esp+0xdc],eax
1000484f:	66 89 8c 24 e2 00 00 00 	mov    WORD PTR [esp+0xe2],cx
10004857:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000485d:	66 25 00 bc          	and    ax,0xbc00
10004861:	66 81 e2 ff 03       	and    dx,0x3ff
10004866:	83 ec 1c             	sub    esp,0x1c
10004869:	09 d0                	or     eax,edx
1000486b:	66 89 84 24 f8 00 00 00 	mov    WORD PTR [esp+0xf8],ax
10004873:	8d b4 24 f4 00 00 00 	lea    esi,[esp+0xf4]
1000487a:	e9 e3 00 00 00       	jmp    10004962 <NIDesktop::handleMouse(int, int, int, int)+0x274>
1000487f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10004883:	83 e0 01             	and    eax,0x1
10004886:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
1000488b:	74 6c                	je     100048f9 <NIDesktop::handleMouse(int, int, int, int)+0x20b>
1000488d:	85 c0                	test   eax,eax
1000488f:	0f 85 df 00 00 00    	jne    10004974 <NIDesktop::handleMouse(int, int, int, int)+0x286>
10004895:	8b 84 24 f4 00 00 00 	mov    eax,DWORD PTR [esp+0xf4]
1000489c:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000489e: R_386_32	mouseDesktop
100048a2:	89 ac 24 f0 00 00 00 	mov    DWORD PTR [esp+0xf0],ebp
100048a9:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100048af:	25 ff 1f 00 00       	and    eax,0x1fff
100048b4:	66 89 8c 24 f8 00 00 00 	mov    WORD PTR [esp+0xf8],cx
100048bc:	80 cc c0             	or     ah,0xc0
100048bf:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100048c5:	89 84 24 f4 00 00 00 	mov    DWORD PTR [esp+0xf4],eax
100048cc:	66 89 8c 24 fa 00 00 00 	mov    WORD PTR [esp+0xfa],cx
100048d4:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100048da:	66 25 00 dc          	and    ax,0xdc00
100048de:	66 81 e2 ff 03       	and    dx,0x3ff
100048e3:	83 ec 1c             	sub    esp,0x1c
100048e6:	09 d0                	or     eax,edx
100048e8:	66 89 84 24 10 01 00 00 	mov    WORD PTR [esp+0x110],ax
100048f0:	8d b4 24 0c 01 00 00 	lea    esi,[esp+0x10c]
100048f7:	eb 69                	jmp    10004962 <NIDesktop::handleMouse(int, int, int, int)+0x274>
100048f9:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
100048fe:	74 74                	je     10004974 <NIDesktop::handleMouse(int, int, int, int)+0x286>
10004900:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
10004907:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004909: R_386_32	mouseDesktop
1000490d:	89 ac 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],ebp
10004914:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000491a:	25 ff 1f 00 00       	and    eax,0x1fff
1000491f:	66 89 8c 24 10 01 00 00 	mov    WORD PTR [esp+0x110],cx
10004927:	80 cc e0             	or     ah,0xe0
1000492a:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004930:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
10004937:	66 89 8c 24 12 01 00 00 	mov    WORD PTR [esp+0x112],cx
1000493f:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10004945:	66 25 00 fc          	and    ax,0xfc00
10004949:	66 81 e2 ff 03       	and    dx,0x3ff
1000494e:	83 ec 1c             	sub    esp,0x1c
10004951:	09 d0                	or     eax,edx
10004953:	66 89 84 24 28 01 00 00 	mov    WORD PTR [esp+0x128],ax
1000495b:	8d b4 24 24 01 00 00 	lea    esi,[esp+0x124]
10004962:	89 e7                	mov    edi,esp
10004964:	b9 06 00 00 00       	mov    ecx,0x6
10004969:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000496b:	55                   	push   ebp
1000496c:	e8 fc ff ff ff       	call   1000496d <NIDesktop::handleMouse(int, int, int, int)+0x27f>	1000496d: R_386_PC32	NIWindow::postEvent(NiEvent)
10004971:	83 c4 20             	add    esp,0x20
10004974:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10004978:	83 e0 02             	and    eax,0x2
1000497b:	f6 84 24 7c 01 00 00 02 	test   BYTE PTR [esp+0x17c],0x2
10004983:	74 6e                	je     100049f3 <NIDesktop::handleMouse(int, int, int, int)+0x305>
10004985:	85 c0                	test   eax,eax
10004987:	0f 85 e0 00 00 00    	jne    10004a6d <NIDesktop::handleMouse(int, int, int, int)+0x37f>
1000498d:	8b 84 24 24 01 00 00 	mov    eax,DWORD PTR [esp+0x124]
10004994:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004996: R_386_32	mouseDesktop
1000499a:	89 ac 24 20 01 00 00 	mov    DWORD PTR [esp+0x120],ebp
100049a1:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100049a7:	25 ff 1f 00 00       	and    eax,0x1fff
100049ac:	66 89 8c 24 28 01 00 00 	mov    WORD PTR [esp+0x128],cx
100049b4:	0d 00 40 01 00       	or     eax,0x14000
100049b9:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100049bf:	89 84 24 24 01 00 00 	mov    DWORD PTR [esp+0x124],eax
100049c6:	66 89 8c 24 2a 01 00 00 	mov    WORD PTR [esp+0x12a],cx
100049ce:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100049d4:	66 25 00 5c          	and    ax,0x5c00
100049d8:	66 81 e2 ff 03       	and    dx,0x3ff
100049dd:	83 ec 1c             	sub    esp,0x1c
100049e0:	09 d0                	or     eax,edx
100049e2:	66 89 84 24 40 01 00 00 	mov    WORD PTR [esp+0x140],ax
100049ea:	8d b4 24 3c 01 00 00 	lea    esi,[esp+0x13c]
100049f1:	eb 68                	jmp    10004a5b <NIDesktop::handleMouse(int, int, int, int)+0x36d>
100049f3:	85 c0                	test   eax,eax
100049f5:	74 76                	je     10004a6d <NIDesktop::handleMouse(int, int, int, int)+0x37f>
100049f7:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
100049fe:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004a00: R_386_32	mouseDesktop
10004a04:	89 ac 24 38 01 00 00 	mov    DWORD PTR [esp+0x138],ebp
10004a0b:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10004a11:	25 ff 1f 00 00       	and    eax,0x1fff
10004a16:	66 89 8c 24 40 01 00 00 	mov    WORD PTR [esp+0x140],cx
10004a1e:	0d 00 60 01 00       	or     eax,0x16000
10004a23:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10004a29:	89 84 24 3c 01 00 00 	mov    DWORD PTR [esp+0x13c],eax
10004a30:	66 89 8c 24 42 01 00 00 	mov    WORD PTR [esp+0x142],cx
10004a38:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10004a3e:	66 25 00 7c          	and    ax,0x7c00
10004a42:	66 81 e2 ff 03       	and    dx,0x3ff
10004a47:	83 ec 1c             	sub    esp,0x1c
10004a4a:	09 d0                	or     eax,edx
10004a4c:	66 89 84 24 58 01 00 00 	mov    WORD PTR [esp+0x158],ax
10004a54:	8d b4 24 54 01 00 00 	lea    esi,[esp+0x154]
10004a5b:	89 e7                	mov    edi,esp
10004a5d:	b9 06 00 00 00       	mov    ecx,0x6
10004a62:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10004a64:	55                   	push   ebp
10004a65:	e8 fc ff ff ff       	call   10004a66 <NIDesktop::handleMouse(int, int, int, int)+0x378>	10004a66: R_386_PC32	NIWindow::postEvent(NiEvent)
10004a6a:	83 c4 20             	add    esp,0x20
10004a6d:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10004a6f: R_386_32	movingWin
10004a74:	0f 84 0a 02 00 00    	je     10004c84 <NIDesktop::handleMouse(int, int, int, int)+0x596>
10004a7a:	83 3d 00 00 00 00 01 	cmp    DWORD PTR ds:0x0,0x1	10004a7c: R_386_32	movingType
10004a81:	0f 85 fd 01 00 00    	jne    10004c84 <NIDesktop::handleMouse(int, int, int, int)+0x596>
10004a87:	c6 44 24 18 00       	mov    BYTE PTR [esp+0x18],0x0
10004a8c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
10004a91:	75 0c                	jne    10004a9f <NIDesktop::handleMouse(int, int, int, int)+0x3b1>
10004a93:	a0 78 60 05 10       	mov    al,ds:0x10056078	10004a94: R_386_32	.bss
10004a98:	83 e0 01             	and    eax,0x1
10004a9b:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
10004a9f:	bf 01 00 00 00       	mov    edi,0x1
10004aa4:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	10004aa6: R_386_32	movingWin
10004aaa:	8b 85 74 02 00 00    	mov    eax,DWORD PTR [ebp+0x274]
10004ab0:	48                   	dec    eax
10004ab1:	39 f8                	cmp    eax,edi
10004ab3:	0f 8e b7 00 00 00    	jle    10004b70 <NIDesktop::handleMouse(int, int, int, int)+0x482>
10004ab9:	89 f8                	mov    eax,edi
10004abb:	be 01 00 00 00       	mov    esi,0x1
10004ac0:	83 e0 07             	and    eax,0x7
10004ac3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
10004ac7:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ac8: R_386_32	movingWin
10004acc:	8b 80 70 02 00 00    	mov    eax,DWORD PTR [eax+0x270]
10004ad2:	48                   	dec    eax
10004ad3:	39 f0                	cmp    eax,esi
10004ad5:	0f 8e 8f 00 00 00    	jle    10004b6a <NIDesktop::handleMouse(int, int, int, int)+0x47c>
10004adb:	8d 04 37             	lea    eax,[edi+esi*1]
10004ade:	83 e0 3f             	and    eax,0x3f
10004ae1:	0b 44 24 20          	or     eax,DWORD PTR [esp+0x20]
10004ae5:	75 7d                	jne    10004b64 <NIDesktop::handleMouse(int, int, int, int)+0x476>
10004ae7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10004aeb:	2b 05 74 60 05 10    	sub    eax,DWORD PTR ds:0x10056074	10004aed: R_386_32	.bss
10004af1:	01 f0                	add    eax,esi
10004af3:	78 2d                	js     10004b22 <NIDesktop::handleMouse(int, int, int, int)+0x434>
10004af5:	8b 13                	mov    edx,DWORD PTR [ebx]
10004af7:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004afd:	7d 23                	jge    10004b22 <NIDesktop::handleMouse(int, int, int, int)+0x434>
10004aff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
10004b03:	2b 15 70 60 05 10    	sub    edx,DWORD PTR ds:0x10056070	10004b05: R_386_32	.bss
10004b09:	51                   	push   ecx
10004b0a:	01 fa                	add    edx,edi
10004b0c:	51                   	push   ecx
10004b0d:	8d 48 01             	lea    ecx,[eax+0x1]
10004b10:	6a 00                	push   0x0
10004b12:	51                   	push   ecx
10004b13:	50                   	push   eax
10004b14:	8d 42 01             	lea    eax,[edx+0x1]
10004b17:	50                   	push   eax
10004b18:	52                   	push   edx
10004b19:	53                   	push   ebx
10004b1a:	e8 fc ff ff ff       	call   10004b1b <NIDesktop::handleMouse(int, int, int, int)+0x42d>	10004b1b: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004b1f:	83 c4 20             	add    esp,0x20
10004b22:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10004b27:	75 3b                	jne    10004b64 <NIDesktop::handleMouse(int, int, int, int)+0x476>
10004b29:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
10004b2f:	01 f0                	add    eax,esi
10004b31:	2b 05 74 60 05 10    	sub    eax,DWORD PTR ds:0x10056074	10004b33: R_386_32	.bss
10004b37:	78 2b                	js     10004b64 <NIDesktop::handleMouse(int, int, int, int)+0x476>
10004b39:	8b 13                	mov    edx,DWORD PTR [ebx]
10004b3b:	3b 82 0c 04 00 00    	cmp    eax,DWORD PTR [edx+0x40c]
10004b41:	7d 21                	jge    10004b64 <NIDesktop::handleMouse(int, int, int, int)+0x476>
10004b43:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10004b49:	8b 29                	mov    ebp,DWORD PTR [ecx]
10004b4b:	6a 00                	push   0x0
10004b4d:	8b 93 18 04 00 00    	mov    edx,DWORD PTR [ebx+0x418]
10004b53:	01 fa                	add    edx,edi
10004b55:	2b 15 70 60 05 10    	sub    edx,DWORD PTR ds:0x10056070	10004b57: R_386_32	.bss
10004b5b:	52                   	push   edx
10004b5c:	50                   	push   eax
10004b5d:	51                   	push   ecx
10004b5e:	ff 55 24             	call   DWORD PTR [ebp+0x24]
10004b61:	83 c4 10             	add    esp,0x10
10004b64:	46                   	inc    esi
10004b65:	e9 5d ff ff ff       	jmp    10004ac7 <NIDesktop::handleMouse(int, int, int, int)+0x3d9>
10004b6a:	47                   	inc    edi
10004b6b:	e9 34 ff ff ff       	jmp    10004aa4 <NIDesktop::handleMouse(int, int, int, int)+0x3b6>
10004b70:	8b 15 74 60 05 10    	mov    edx,DWORD PTR ds:0x10056074	10004b72: R_386_32	.bss
10004b76:	8b b3 14 04 00 00    	mov    esi,DWORD PTR [ebx+0x414]
10004b7c:	29 d6                	sub    esi,edx
10004b7e:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
10004b83:	0f 85 85 08 00 00    	jne    1000540e <NIDesktop::handleMouse(int, int, int, int)+0xd20>
10004b89:	89 f1                	mov    ecx,esi
10004b8b:	85 f6                	test   esi,esi
10004b8d:	79 02                	jns    10004b91 <NIDesktop::handleMouse(int, int, int, int)+0x4a3>
10004b8f:	31 c9                	xor    ecx,ecx
10004b91:	8b bd 70 02 00 00    	mov    edi,DWORD PTR [ebp+0x270]
10004b97:	8b 03                	mov    eax,DWORD PTR [ebx]
10004b99:	01 fe                	add    esi,edi
10004b9b:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
10004ba1:	39 c6                	cmp    esi,eax
10004ba3:	7d 04                	jge    10004ba9 <NIDesktop::handleMouse(int, int, int, int)+0x4bb>
10004ba5:	29 ce                	sub    esi,ecx
10004ba7:	eb 0a                	jmp    10004bb3 <NIDesktop::handleMouse(int, int, int, int)+0x4c5>
10004ba9:	89 c6                	mov    esi,eax
10004bab:	29 ce                	sub    esi,ecx
10004bad:	0f 88 d1 00 00 00    	js     10004c84 <NIDesktop::handleMouse(int, int, int, int)+0x596>
10004bb3:	85 f6                	test   esi,esi
10004bb5:	0f 84 c9 00 00 00    	je     10004c84 <NIDesktop::handleMouse(int, int, int, int)+0x596>
10004bbb:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10004bbf:	29 d5                	sub    ebp,edx
10004bc1:	89 ea                	mov    edx,ebp
10004bc3:	79 02                	jns    10004bc7 <NIDesktop::handleMouse(int, int, int, int)+0x4d9>
10004bc5:	31 ed                	xor    ebp,ebp
10004bc7:	01 d7                	add    edi,edx
10004bc9:	39 f8                	cmp    eax,edi
10004bcb:	7e 04                	jle    10004bd1 <NIDesktop::handleMouse(int, int, int, int)+0x4e3>
10004bcd:	29 ef                	sub    edi,ebp
10004bcf:	eb 08                	jmp    10004bd9 <NIDesktop::handleMouse(int, int, int, int)+0x4eb>
10004bd1:	29 e8                	sub    eax,ebp
10004bd3:	89 c7                	mov    edi,eax
10004bd5:	79 02                	jns    10004bd9 <NIDesktop::handleMouse(int, int, int, int)+0x4eb>
10004bd7:	31 ff                	xor    edi,edi
10004bd9:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
10004bdd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004be1:	01 ef                	add    edi,ebp
10004be3:	2b 05 70 60 05 10    	sub    eax,DWORD PTR ds:0x10056070	10004be5: R_386_32	.bss
10004be9:	52                   	push   edx
10004bea:	52                   	push   edx
10004beb:	8d 50 01             	lea    edx,[eax+0x1]
10004bee:	6a 00                	push   0x0
10004bf0:	57                   	push   edi
10004bf1:	55                   	push   ebp
10004bf2:	52                   	push   edx
10004bf3:	50                   	push   eax
10004bf4:	53                   	push   ebx
10004bf5:	e8 fc ff ff ff       	call   10004bf6 <NIDesktop::handleMouse(int, int, int, int)+0x508>	10004bf6: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004bfa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10004bfe:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004c00: R_386_32	movingWin
10004c04:	83 c4 18             	add    esp,0x18
10004c07:	2b 05 70 60 05 10    	sub    eax,DWORD PTR ds:0x10056070	10004c09: R_386_32	.bss
10004c0d:	03 82 74 02 00 00    	add    eax,DWORD PTR [edx+0x274]
10004c13:	6a 00                	push   0x0
10004c15:	57                   	push   edi
10004c16:	55                   	push   ebp
10004c17:	50                   	push   eax
10004c18:	48                   	dec    eax
10004c19:	50                   	push   eax
10004c1a:	53                   	push   ebx
10004c1b:	e8 fc ff ff ff       	call   10004c1c <NIDesktop::handleMouse(int, int, int, int)+0x52e>	10004c1c: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004c20:	83 c4 18             	add    esp,0x18
10004c23:	8b 03                	mov    eax,DWORD PTR [ebx]
10004c25:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004c2b:	8b 3a                	mov    edi,DWORD PTR [edx]
10004c2d:	6a 00                	push   0x0
10004c2f:	6a 01                	push   0x1
10004c31:	56                   	push   esi
10004c32:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004c38:	2b 05 70 60 05 10    	sub    eax,DWORD PTR ds:0x10056070	10004c3a: R_386_32	.bss
10004c3e:	50                   	push   eax
10004c3f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
10004c43:	51                   	push   ecx
10004c44:	89 4c 24 34          	mov    DWORD PTR [esp+0x34],ecx
10004c48:	52                   	push   edx
10004c49:	ff 57 28             	call   DWORD PTR [edi+0x28]
10004c4c:	8b 03                	mov    eax,DWORD PTR [ebx]
10004c4e:	83 c4 18             	add    esp,0x18
10004c51:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004c57:	8b 3a                	mov    edi,DWORD PTR [edx]
10004c59:	6a 00                	push   0x0
10004c5b:	6a 01                	push   0x1
10004c5d:	56                   	push   esi
10004c5e:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10004c60: R_386_32	movingWin
10004c64:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004c6a:	2b 05 70 60 05 10    	sub    eax,DWORD PTR ds:0x10056070	10004c6c: R_386_32	.bss
10004c70:	03 86 74 02 00 00    	add    eax,DWORD PTR [esi+0x274]
10004c76:	48                   	dec    eax
10004c77:	50                   	push   eax
10004c78:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
10004c7c:	51                   	push   ecx
10004c7d:	52                   	push   edx
10004c7e:	ff 57 28             	call   DWORD PTR [edi+0x28]
10004c81:	83 c4 20             	add    esp,0x20
10004c84:	a1 00 00 00 00       	mov    eax,ds:0x0	10004c85: R_386_32	movingWin
10004c89:	85 c0                	test   eax,eax
10004c8b:	0f 84 21 03 00 00    	je     10004fb2 <NIDesktop::handleMouse(int, int, int, int)+0x8c4>
10004c91:	8b 3d 00 00 00 00    	mov    edi,DWORD PTR ds:0x0	10004c93: R_386_32	movingType
10004c97:	8d 57 fe             	lea    edx,[edi-0x2]
10004c9a:	83 fa 02             	cmp    edx,0x2
10004c9d:	0f 87 0f 03 00 00    	ja     10004fb2 <NIDesktop::handleMouse(int, int, int, int)+0x8c4>
10004ca3:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
10004ca8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
10004cad:	75 0d                	jne    10004cbc <NIDesktop::handleMouse(int, int, int, int)+0x5ce>
10004caf:	8a 0d 78 60 05 10    	mov    cl,BYTE PTR ds:0x10056078	10004cb1: R_386_32	.bss
10004cb5:	83 e1 01             	and    ecx,0x1
10004cb8:	88 4c 24 20          	mov    BYTE PTR [esp+0x20],cl
10004cbc:	8b 88 70 02 00 00    	mov    ecx,DWORD PTR [eax+0x270]
10004cc2:	8b b0 74 02 00 00    	mov    esi,DWORD PTR [eax+0x274]
10004cc8:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
10004ccc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004cd0:	01 cd                	add    ebp,ecx
10004cd2:	01 f0                	add    eax,esi
10004cd4:	2b 2d 74 60 05 10    	sub    ebp,DWORD PTR ds:0x10056074	10004cd6: R_386_32	.bss
10004cda:	2b 05 70 60 05 10    	sub    eax,DWORD PTR ds:0x10056070	10004cdc: R_386_32	.bss
10004ce0:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
10004ce6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10004cea:	01 ca                	add    edx,ecx
10004cec:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10004cf2:	2b 15 74 60 05 10    	sub    edx,DWORD PTR ds:0x10056074	10004cf4: R_386_32	.bss
10004cf8:	01 f0                	add    eax,esi
10004cfa:	2b 05 70 60 05 10    	sub    eax,DWORD PTR ds:0x10056070	10004cfc: R_386_32	.bss
10004d00:	83 ff 03             	cmp    edi,0x3
10004d03:	74 0d                	je     10004d12 <NIDesktop::handleMouse(int, int, int, int)+0x624>
10004d05:	83 ff 04             	cmp    edi,0x4
10004d08:	75 0c                	jne    10004d16 <NIDesktop::handleMouse(int, int, int, int)+0x628>
10004d0a:	89 f0                	mov    eax,esi
10004d0c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
10004d10:	eb 04                	jmp    10004d16 <NIDesktop::handleMouse(int, int, int, int)+0x628>
10004d12:	89 ca                	mov    edx,ecx
10004d14:	89 cd                	mov    ebp,ecx
10004d16:	89 d7                	mov    edi,edx
10004d18:	83 fa 32             	cmp    edx,0x32
10004d1b:	7d 05                	jge    10004d22 <NIDesktop::handleMouse(int, int, int, int)+0x634>
10004d1d:	bf 32 00 00 00       	mov    edi,0x32
10004d22:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10004d26:	83 f8 32             	cmp    eax,0x32
10004d29:	7d 08                	jge    10004d33 <NIDesktop::handleMouse(int, int, int, int)+0x645>
10004d2b:	c7 44 24 10 32 00 00 00 	mov    DWORD PTR [esp+0x10],0x32
10004d33:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
10004d37:	83 fd 32             	cmp    ebp,0x32
10004d3a:	7d 08                	jge    10004d44 <NIDesktop::handleMouse(int, int, int, int)+0x656>
10004d3c:	c7 44 24 18 32 00 00 00 	mov    DWORD PTR [esp+0x18],0x32
10004d44:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004d48:	83 f8 32             	cmp    eax,0x32
10004d4b:	7d 08                	jge    10004d55 <NIDesktop::handleMouse(int, int, int, int)+0x667>
10004d4d:	c7 44 24 14 32 00 00 00 	mov    DWORD PTR [esp+0x14],0x32
10004d55:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
10004d59:	3b 7c 24 18          	cmp    edi,DWORD PTR [esp+0x18]
10004d5d:	7d 08                	jge    10004d67 <NIDesktop::handleMouse(int, int, int, int)+0x679>
10004d5f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10004d63:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
10004d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
10004d6b:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004d6f:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
10004d73:	7d 08                	jge    10004d7d <NIDesktop::handleMouse(int, int, int, int)+0x68f>
10004d75:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
10004d79:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
10004d7d:	be 01 00 00 00       	mov    esi,0x1
10004d82:	bd 01 00 00 00       	mov    ebp,0x1
10004d87:	8d 04 2e             	lea    eax,[esi+ebp*1]
10004d8a:	89 f2                	mov    edx,esi
10004d8c:	83 e0 3f             	and    eax,0x3f
10004d8f:	83 e2 07             	and    edx,0x7
10004d92:	09 d0                	or     eax,edx
10004d94:	0f 85 9e 00 00 00    	jne    10004e38 <NIDesktop::handleMouse(int, int, int, int)+0x74a>
10004d9a:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004d9c: R_386_32	movingWin
10004da0:	8b 81 68 02 00 00    	mov    eax,DWORD PTR [ecx+0x268]
10004da6:	89 c2                	mov    edx,eax
10004da8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
10004dac:	01 ea                	add    edx,ebp
10004dae:	78 2f                	js     10004ddf <NIDesktop::handleMouse(int, int, int, int)+0x6f1>
10004db0:	8b 03                	mov    eax,DWORD PTR [ebx]
10004db2:	3b 90 0c 04 00 00    	cmp    edx,DWORD PTR [eax+0x40c]
10004db8:	7d 25                	jge    10004ddf <NIDesktop::handleMouse(int, int, int, int)+0x6f1>
10004dba:	8b 89 6c 02 00 00    	mov    ecx,DWORD PTR [ecx+0x26c]
10004dc0:	50                   	push   eax
10004dc1:	50                   	push   eax
10004dc2:	6a 00                	push   0x0
10004dc4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
10004dc8:	8d 44 28 01          	lea    eax,[eax+ebp*1+0x1]
10004dcc:	50                   	push   eax
10004dcd:	8d 44 31 01          	lea    eax,[ecx+esi*1+0x1]
10004dd1:	52                   	push   edx
10004dd2:	01 f1                	add    ecx,esi
10004dd4:	50                   	push   eax
10004dd5:	51                   	push   ecx
10004dd6:	53                   	push   ebx
10004dd7:	e8 fc ff ff ff       	call   10004dd8 <NIDesktop::handleMouse(int, int, int, int)+0x6ea>	10004dd8: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004ddc:	83 c4 20             	add    esp,0x20
10004ddf:	8a 54 24 20          	mov    dl,BYTE PTR [esp+0x20]
10004de3:	83 f2 01             	xor    edx,0x1
10004de6:	39 74 24 10          	cmp    DWORD PTR [esp+0x10],esi
10004dea:	0f 9f c0             	setg   al
10004ded:	84 c2                	test   dl,al
10004def:	74 47                	je     10004e38 <NIDesktop::handleMouse(int, int, int, int)+0x74a>
10004df1:	39 ef                	cmp    edi,ebp
10004df3:	7e 43                	jle    10004e38 <NIDesktop::handleMouse(int, int, int, int)+0x74a>
10004df5:	a1 00 00 00 00       	mov    eax,ds:0x0	10004df6: R_386_32	movingWin
10004dfa:	89 e9                	mov    ecx,ebp
10004dfc:	03 88 68 02 00 00    	add    ecx,DWORD PTR [eax+0x268]
10004e02:	78 34                	js     10004e38 <NIDesktop::handleMouse(int, int, int, int)+0x74a>
10004e04:	8b 13                	mov    edx,DWORD PTR [ebx]
10004e06:	3b 8a 0c 04 00 00    	cmp    ecx,DWORD PTR [edx+0x40c]
10004e0c:	7d 2a                	jge    10004e38 <NIDesktop::handleMouse(int, int, int, int)+0x74a>
10004e0e:	8b 92 08 04 00 00    	mov    edx,DWORD PTR [edx+0x408]
10004e14:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
10004e18:	8b 12                	mov    edx,DWORD PTR [edx]
10004e1a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
10004e1e:	6a 00                	push   0x0
10004e20:	8b 90 6c 02 00 00    	mov    edx,DWORD PTR [eax+0x26c]
10004e26:	01 f2                	add    edx,esi
10004e28:	52                   	push   edx
10004e29:	51                   	push   ecx
10004e2a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10004e2e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
10004e32:	ff 50 24             	call   DWORD PTR [eax+0x24]
10004e35:	83 c4 10             	add    esp,0x10
10004e38:	45                   	inc    ebp
10004e39:	3b 6c 24 28          	cmp    ebp,DWORD PTR [esp+0x28]
10004e3d:	0f 85 44 ff ff ff    	jne    10004d87 <NIDesktop::handleMouse(int, int, int, int)+0x699>
10004e43:	46                   	inc    esi
10004e44:	3b 74 24 24          	cmp    esi,DWORD PTR [esp+0x24]
10004e48:	0f 85 34 ff ff ff    	jne    10004d82 <NIDesktop::handleMouse(int, int, int, int)+0x694>
10004e4e:	8b 2d 00 00 00 00    	mov    ebp,DWORD PTR ds:0x0	10004e50: R_386_32	movingWin
10004e54:	80 7c 24 20 00       	cmp    BYTE PTR [esp+0x20],0x0
10004e59:	0f 85 06 05 00 00    	jne    10005365 <NIDesktop::handleMouse(int, int, int, int)+0xc77>
10004e5f:	8b 95 68 02 00 00    	mov    edx,DWORD PTR [ebp+0x268]
10004e65:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10004e69:	85 d2                	test   edx,edx
10004e6b:	8d 0c 02             	lea    ecx,[edx+eax*1]
10004e6e:	8b 85 6c 02 00 00    	mov    eax,DWORD PTR [ebp+0x26c]
10004e74:	8d 70 01             	lea    esi,[eax+0x1]
10004e77:	0f 89 9d 00 00 00    	jns    10004f1a <NIDesktop::handleMouse(int, int, int, int)+0x82c>
10004e7d:	52                   	push   edx
10004e7e:	52                   	push   edx
10004e7f:	6a 00                	push   0x0
10004e81:	51                   	push   ecx
10004e82:	6a 00                	push   0x0
10004e84:	56                   	push   esi
10004e85:	50                   	push   eax
10004e86:	53                   	push   ebx
10004e87:	e8 fc ff ff ff       	call   10004e88 <NIDesktop::handleMouse(int, int, int, int)+0x79a>	10004e88: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004e8c:	83 c4 18             	add    esp,0x18
10004e8f:	8b 03                	mov    eax,DWORD PTR [ebx]
10004e91:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004e93: R_386_32	movingWin
10004e97:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004e9d:	8b 08                	mov    ecx,DWORD PTR [eax]
10004e9f:	6a 00                	push   0x0
10004ea1:	6a 01                	push   0x1
10004ea3:	8b b2 68 02 00 00    	mov    esi,DWORD PTR [edx+0x268]
10004ea9:	01 fe                	add    esi,edi
10004eab:	56                   	push   esi
10004eac:	ff b2 6c 02 00 00    	push   DWORD PTR [edx+0x26c]
10004eb2:	6a 00                	push   0x0
10004eb4:	50                   	push   eax
10004eb5:	ff 51 28             	call   DWORD PTR [ecx+0x28]
10004eb8:	83 c4 18             	add    esp,0x18
10004ebb:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004ebd: R_386_32	movingWin
10004ec1:	8b 82 6c 02 00 00    	mov    eax,DWORD PTR [edx+0x26c]
10004ec7:	6a 00                	push   0x0
10004ec9:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
10004ecd:	03 aa 68 02 00 00    	add    ebp,DWORD PTR [edx+0x268]
10004ed3:	55                   	push   ebp
10004ed4:	6a 00                	push   0x0
10004ed6:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10004eda:	8d 54 30 01          	lea    edx,[eax+esi*1+0x1]
10004ede:	52                   	push   edx
10004edf:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10004ee3:	50                   	push   eax
10004ee4:	53                   	push   ebx
10004ee5:	e8 fc ff ff ff       	call   10004ee6 <NIDesktop::handleMouse(int, int, int, int)+0x7f8>	10004ee6: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004eea:	8b 03                	mov    eax,DWORD PTR [ebx]
10004eec:	83 c4 18             	add    esp,0x18
10004eef:	8b 88 08 04 00 00    	mov    ecx,DWORD PTR [eax+0x408]
10004ef5:	a1 00 00 00 00       	mov    eax,ds:0x0	10004ef6: R_386_32	movingWin
10004efa:	8b 31                	mov    esi,DWORD PTR [ecx]
10004efc:	6a 00                	push   0x0
10004efe:	6a 01                	push   0x1
10004f00:	03 b8 68 02 00 00    	add    edi,DWORD PTR [eax+0x268]
10004f06:	57                   	push   edi
10004f07:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
10004f0b:	03 b8 6c 02 00 00    	add    edi,DWORD PTR [eax+0x26c]
10004f11:	57                   	push   edi
10004f12:	6a 00                	push   0x0
10004f14:	51                   	push   ecx
10004f15:	e9 92 00 00 00       	jmp    10004fac <NIDesktop::handleMouse(int, int, int, int)+0x8be>
10004f1a:	55                   	push   ebp
10004f1b:	55                   	push   ebp
10004f1c:	6a 00                	push   0x0
10004f1e:	51                   	push   ecx
10004f1f:	52                   	push   edx
10004f20:	56                   	push   esi
10004f21:	50                   	push   eax
10004f22:	53                   	push   ebx
10004f23:	e8 fc ff ff ff       	call   10004f24 <NIDesktop::handleMouse(int, int, int, int)+0x836>	10004f24: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004f28:	83 c4 18             	add    esp,0x18
10004f2b:	8b 03                	mov    eax,DWORD PTR [ebx]
10004f2d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10004f2f: R_386_32	movingWin
10004f33:	8b 80 08 04 00 00    	mov    eax,DWORD PTR [eax+0x408]
10004f39:	8b 08                	mov    ecx,DWORD PTR [eax]
10004f3b:	6a 00                	push   0x0
10004f3d:	6a 01                	push   0x1
10004f3f:	57                   	push   edi
10004f40:	ff b2 6c 02 00 00    	push   DWORD PTR [edx+0x26c]
10004f46:	ff b2 68 02 00 00    	push   DWORD PTR [edx+0x268]
10004f4c:	50                   	push   eax
10004f4d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
10004f50:	83 c4 18             	add    esp,0x18
10004f53:	a1 00 00 00 00       	mov    eax,ds:0x0	10004f54: R_386_32	movingWin
10004f58:	8b 90 68 02 00 00    	mov    edx,DWORD PTR [eax+0x268]
10004f5e:	8b 80 6c 02 00 00    	mov    eax,DWORD PTR [eax+0x26c]
10004f64:	6a 00                	push   0x0
10004f66:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
10004f6a:	01 d5                	add    ebp,edx
10004f6c:	55                   	push   ebp
10004f6d:	52                   	push   edx
10004f6e:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
10004f72:	8d 54 30 01          	lea    edx,[eax+esi*1+0x1]
10004f76:	52                   	push   edx
10004f77:	03 44 24 2c          	add    eax,DWORD PTR [esp+0x2c]
10004f7b:	50                   	push   eax
10004f7c:	53                   	push   ebx
10004f7d:	e8 fc ff ff ff       	call   10004f7e <NIDesktop::handleMouse(int, int, int, int)+0x890>	10004f7e: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10004f82:	8b 03                	mov    eax,DWORD PTR [ebx]
10004f84:	83 c4 18             	add    esp,0x18
10004f87:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10004f8d:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10004f8f: R_386_32	movingWin
10004f93:	8b 32                	mov    esi,DWORD PTR [edx]
10004f95:	6a 00                	push   0x0
10004f97:	6a 01                	push   0x1
10004f99:	57                   	push   edi
10004f9a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
10004f9e:	03 81 6c 02 00 00    	add    eax,DWORD PTR [ecx+0x26c]
10004fa4:	50                   	push   eax
10004fa5:	ff b1 68 02 00 00    	push   DWORD PTR [ecx+0x268]
10004fab:	52                   	push   edx
10004fac:	ff 56 28             	call   DWORD PTR [esi+0x28]
10004faf:	83 c4 20             	add    esp,0x20
10004fb2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
10004fb7:	0f 84 5d 03 00 00    	je     1000531a <NIDesktop::handleMouse(int, int, int, int)+0xc2c>
10004fbd:	f6 84 24 7c 01 00 00 01 	test   BYTE PTR [esp+0x17c],0x1
10004fc5:	0f 84 4f 03 00 00    	je     1000531a <NIDesktop::handleMouse(int, int, int, int)+0xc2c>
10004fcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10004fcf:	39 05 00 00 00 00    	cmp    DWORD PTR ds:0x0,eax	10004fd1: R_386_32	clickonWhenMouseFirstClicked
10004fd5:	0f 85 3f 03 00 00    	jne    1000531a <NIDesktop::handleMouse(int, int, int, int)+0xc2c>
10004fdb:	8b 0d 78 60 05 10    	mov    ecx,DWORD PTR ds:0x10056078	10004fdd: R_386_32	.bss
10004fe1:	83 e1 01             	and    ecx,0x1
10004fe4:	0f 85 bf 01 00 00    	jne    100051a9 <NIDesktop::handleMouse(int, int, int, int)+0xabb>
10004fea:	a1 00 00 00 00       	mov    eax,ds:0x0	10004feb: R_386_32	milliTenthsSinceBoot
10004fef:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10004ff1: R_386_32	milliTenthsSinceBoot
10004ff5:	2b 05 68 60 05 10    	sub    eax,DWORD PTR ds:0x10056068	10004ff7: R_386_32	.bss
10004ffb:	be b7 0b 00 00       	mov    esi,0xbb7
10005000:	1b 15 6c 60 05 10    	sbb    edx,DWORD PTR ds:0x1005606c	10005002: R_386_32	.bss
10005006:	39 c6                	cmp    esi,eax
10005008:	19 d1                	sbb    ecx,edx
1000500a:	0f 82 62 01 00 00    	jb     10005172 <NIDesktop::handleMouse(int, int, int, int)+0xa84>
10005010:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10005014:	8b 90 6c 02 00 00    	mov    edx,DWORD PTR [eax+0x26c]
1000501a:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10005020:	29 d0                	sub    eax,edx
10005022:	83 f8 18             	cmp    eax,0x18
10005025:	0f 8f 47 01 00 00    	jg     10005172 <NIDesktop::handleMouse(int, int, int, int)+0xa84>
1000502b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000502f:	f6 80 8c 02 00 00 01 	test   BYTE PTR [eax+0x28c],0x1
10005036:	0f 85 36 01 00 00    	jne    10005172 <NIDesktop::handleMouse(int, int, int, int)+0xa84>
1000503c:	80 b8 78 02 00 00 00 	cmp    BYTE PTR [eax+0x278],0x0
10005043:	74 45                	je     1000508a <NIDesktop::handleMouse(int, int, int, int)+0x99c>
10005045:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10005049:	8b 80 7c 02 00 00    	mov    eax,DWORD PTR [eax+0x27c]
1000504f:	89 87 68 02 00 00    	mov    DWORD PTR [edi+0x268],eax
10005055:	8b 87 80 02 00 00    	mov    eax,DWORD PTR [edi+0x280]
1000505b:	89 87 6c 02 00 00    	mov    DWORD PTR [edi+0x26c],eax
10005061:	8b 87 84 02 00 00    	mov    eax,DWORD PTR [edi+0x284]
10005067:	89 87 70 02 00 00    	mov    DWORD PTR [edi+0x270],eax
1000506d:	8b 87 88 02 00 00    	mov    eax,DWORD PTR [edi+0x288]
10005073:	89 87 74 02 00 00    	mov    DWORD PTR [edi+0x274],eax
10005079:	50                   	push   eax
1000507a:	50                   	push   eax
1000507b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000507f:	53                   	push   ebx
10005080:	e8 fc ff ff ff       	call   10005081 <NIDesktop::handleMouse(int, int, int, int)+0x993>	10005081: R_386_PC32	NIDesktop::invalidateAllDueToFullscreen(NIWindow*)
10005085:	83 c4 10             	add    esp,0x10
10005088:	eb 62                	jmp    100050ec <NIDesktop::handleMouse(int, int, int, int)+0x9fe>
1000508a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
1000508e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10005092:	8b 80 68 02 00 00    	mov    eax,DWORD PTR [eax+0x268]
10005098:	89 97 80 02 00 00    	mov    DWORD PTR [edi+0x280],edx
1000509e:	89 87 7c 02 00 00    	mov    DWORD PTR [edi+0x27c],eax
100050a4:	c7 87 68 02 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x268],0x0
100050ae:	c7 87 6c 02 00 00 00 00 00 00 	mov    DWORD PTR [edi+0x26c],0x0
100050b8:	8b 87 70 02 00 00    	mov    eax,DWORD PTR [edi+0x270]
100050be:	89 87 84 02 00 00    	mov    DWORD PTR [edi+0x284],eax
100050c4:	8b 87 74 02 00 00    	mov    eax,DWORD PTR [edi+0x274]
100050ca:	89 87 88 02 00 00    	mov    DWORD PTR [edi+0x288],eax
100050d0:	8b 03                	mov    eax,DWORD PTR [ebx]
100050d2:	8b 80 0c 04 00 00    	mov    eax,DWORD PTR [eax+0x40c]
100050d8:	89 87 70 02 00 00    	mov    DWORD PTR [edi+0x270],eax
100050de:	8b 03                	mov    eax,DWORD PTR [ebx]
100050e0:	8b 80 10 04 00 00    	mov    eax,DWORD PTR [eax+0x410]
100050e6:	89 87 74 02 00 00    	mov    DWORD PTR [edi+0x274],eax
100050ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100050f0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100050f4:	80 b0 78 02 00 00 01 	xor    BYTE PTR [eax+0x278],0x1
100050fb:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
100050ff:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10005103:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005105: R_386_32	mouseDesktop
10005109:	83 ec 1c             	sub    esp,0x1c
1000510c:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005112:	25 ff 1f 00 00       	and    eax,0x1fff
10005117:	66 89 4c 24 54       	mov    WORD PTR [esp+0x54],cx
1000511c:	0d 00 80 01 80       	or     eax,0x80018000
10005121:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005127:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
1000512b:	66 89 4c 24 56       	mov    WORD PTR [esp+0x56],cx
10005130:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005136:	66 25 00 9c          	and    ax,0x9c00
1000513a:	66 81 e2 ff 03       	and    dx,0x3ff
1000513f:	b9 06 00 00 00       	mov    ecx,0x6
10005144:	09 d0                	or     eax,edx
10005146:	66 89 44 24 50       	mov    WORD PTR [esp+0x50],ax
1000514b:	8d 74 24 4c          	lea    esi,[esp+0x4c]
1000514f:	89 e7                	mov    edi,esp
10005151:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005153:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
10005157:	e8 fc ff ff ff       	call   10005158 <NIDesktop::handleMouse(int, int, int, int)+0xa6a>	10005158: R_386_PC32	NIWindow::postEvent(NiEvent)
1000515c:	83 c4 14             	add    esp,0x14
1000515f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
10005163:	e8 fc ff ff ff       	call   10005164 <NIDesktop::handleMouse(int, int, int, int)+0xa76>	10005164: R_386_PC32	NIWindow::rerender()
10005168:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000516b:	e8 fc ff ff ff       	call   1000516c <NIDesktop::handleMouse(int, int, int, int)+0xa7e>	1000516c: R_386_PC32	NIDesktop::completeRefresh()
10005170:	eb 19                	jmp    1000518b <NIDesktop::handleMouse(int, int, int, int)+0xa9d>
10005172:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
10005175:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10005179:	8b 00                	mov    eax,DWORD PTR [eax]
1000517b:	39 38                	cmp    DWORD PTR [eax],edi
1000517d:	74 0f                	je     1000518e <NIDesktop::handleMouse(int, int, int, int)+0xaa0>
1000517f:	50                   	push   eax
10005180:	50                   	push   eax
10005181:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10005185:	53                   	push   ebx
10005186:	e8 fc ff ff ff       	call   10005187 <NIDesktop::handleMouse(int, int, int, int)+0xa99>	10005187: R_386_PC32	NIDesktop::raiseWindow(NIWindow*)
1000518b:	83 c4 10             	add    esp,0x10
1000518e:	a1 00 00 00 00       	mov    eax,ds:0x0	1000518f: R_386_32	milliTenthsSinceBoot
10005193:	8b 15 04 00 00 00    	mov    edx,DWORD PTR ds:0x4	10005195: R_386_32	milliTenthsSinceBoot
10005199:	a3 68 60 05 10       	mov    ds:0x10056068,eax	1000519a: R_386_32	.bss
1000519e:	89 15 6c 60 05 10    	mov    DWORD PTR ds:0x1005606c,edx	100051a0: R_386_32	.bss
100051a4:	e9 71 01 00 00       	jmp    1000531a <NIDesktop::handleMouse(int, int, int, int)+0xc2c>
100051a9:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100051ab: R_386_32	movingWin
100051b0:	0f 85 64 01 00 00    	jne    1000531a <NIDesktop::handleMouse(int, int, int, int)+0xc2c>
100051b6:	8b 93 18 04 00 00    	mov    edx,DWORD PTR [ebx+0x418]
100051bc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100051c0:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100051c4:	8b 80 74 02 00 00    	mov    eax,DWORD PTR [eax+0x274]
100051ca:	89 d1                	mov    ecx,edx
100051cc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
100051d0:	2b 8e 6c 02 00 00    	sub    ecx,DWORD PTR [esi+0x26c]
100051d6:	83 e8 0e             	sub    eax,0xe
100051d9:	39 c8                	cmp    eax,ecx
100051db:	7f 4c                	jg     10005229 <NIDesktop::handleMouse(int, int, int, int)+0xb3b>
100051dd:	80 be 78 02 00 00 00 	cmp    BYTE PTR [esi+0x278],0x0
100051e4:	75 43                	jne    10005229 <NIDesktop::handleMouse(int, int, int, int)+0xb3b>
100051e6:	f6 86 8c 02 00 00 01 	test   BYTE PTR [esi+0x28c],0x1
100051ed:	75 3a                	jne    10005229 <NIDesktop::handleMouse(int, int, int, int)+0xb3b>
100051ef:	8b 83 14 04 00 00    	mov    eax,DWORD PTR [ebx+0x414]
100051f5:	c7 83 20 04 00 00 00 04 00 00 	mov    DWORD PTR [ebx+0x420],0x400
100051ff:	a3 74 60 05 10       	mov    ds:0x10056074,eax	10005200: R_386_32	.bss
10005204:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	10005206: R_386_32	movingWin
1000520a:	c7 05 00 00 00 00 03 00 00 00 	mov    DWORD PTR ds:0x0,0x3	1000520c: R_386_32	movingType
10005214:	50                   	push   eax
10005215:	89 15 70 60 05 10    	mov    DWORD PTR ds:0x10056070,edx	10005217: R_386_32	.bss
1000521b:	50                   	push   eax
1000521c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10005220:	53                   	push   ebx
10005221:	e8 fc ff ff ff       	call   10005222 <NIDesktop::handleMouse(int, int, int, int)+0xb34>	10005222: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10005226:	83 c4 10             	add    esp,0x10
10005229:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
1000522f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
10005233:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
10005237:	8b 80 70 02 00 00    	mov    eax,DWORD PTR [eax+0x270]
1000523d:	89 d1                	mov    ecx,edx
1000523f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
10005243:	2b 8e 68 02 00 00    	sub    ecx,DWORD PTR [esi+0x268]
10005249:	83 e8 0e             	sub    eax,0xe
1000524c:	39 c8                	cmp    eax,ecx
1000524e:	7f 6d                	jg     100052bd <NIDesktop::handleMouse(int, int, int, int)+0xbcf>
10005250:	80 be 78 02 00 00 00 	cmp    BYTE PTR [esi+0x278],0x0
10005257:	75 64                	jne    100052bd <NIDesktop::handleMouse(int, int, int, int)+0xbcf>
10005259:	f6 86 8c 02 00 00 01 	test   BYTE PTR [esi+0x28c],0x1
10005260:	75 5b                	jne    100052bd <NIDesktop::handleMouse(int, int, int, int)+0xbcf>
10005262:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10005264: R_386_32	movingWin
10005269:	75 3c                	jne    100052a7 <NIDesktop::handleMouse(int, int, int, int)+0xbb9>
1000526b:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10005271:	c7 83 20 04 00 00 00 05 00 00 	mov    DWORD PTR [ebx+0x420],0x500
1000527b:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	1000527d: R_386_32	movingWin
10005281:	55                   	push   ebp
10005282:	c7 05 00 00 00 00 04 00 00 00 	mov    DWORD PTR ds:0x0,0x4	10005284: R_386_32	movingType
1000528c:	55                   	push   ebp
1000528d:	89 15 74 60 05 10    	mov    DWORD PTR ds:0x10056074,edx	1000528f: R_386_32	.bss
10005293:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
10005297:	a3 70 60 05 10       	mov    ds:0x10056070,eax	10005298: R_386_32	.bss
1000529c:	53                   	push   ebx
1000529d:	e8 fc ff ff ff       	call   1000529e <NIDesktop::handleMouse(int, int, int, int)+0xbb0>	1000529e: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
100052a2:	83 c4 10             	add    esp,0x10
100052a5:	eb 16                	jmp    100052bd <NIDesktop::handleMouse(int, int, int, int)+0xbcf>
100052a7:	c7 05 00 00 00 00 02 00 00 00 	mov    DWORD PTR ds:0x0,0x2	100052a9: R_386_32	movingType
100052b1:	c7 83 20 04 00 00 00 03 00 00 	mov    DWORD PTR [ebx+0x420],0x300
100052bb:	eb 5d                	jmp    1000531a <NIDesktop::handleMouse(int, int, int, int)+0xc2c>
100052bd:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100052bf: R_386_32	movingWin
100052c4:	75 54                	jne    1000531a <NIDesktop::handleMouse(int, int, int, int)+0xc2c>
100052c6:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
100052cc:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
100052d0:	2b 86 6c 02 00 00    	sub    eax,DWORD PTR [esi+0x26c]
100052d6:	83 f8 18             	cmp    eax,0x18
100052d9:	7f 3f                	jg     1000531a <NIDesktop::handleMouse(int, int, int, int)+0xc2c>
100052db:	80 be 78 02 00 00 00 	cmp    BYTE PTR [esi+0x278],0x0
100052e2:	75 36                	jne    1000531a <NIDesktop::handleMouse(int, int, int, int)+0xc2c>
100052e4:	8b 93 14 04 00 00    	mov    edx,DWORD PTR [ebx+0x414]
100052ea:	2b 96 68 02 00 00    	sub    edx,DWORD PTR [esi+0x268]
100052f0:	89 35 00 00 00 00    	mov    DWORD PTR ds:0x0,esi	100052f2: R_386_32	movingWin
100052f6:	57                   	push   edi
100052f7:	c7 05 00 00 00 00 01 00 00 00 	mov    DWORD PTR ds:0x0,0x1	100052f9: R_386_32	movingType
10005301:	57                   	push   edi
10005302:	89 15 74 60 05 10    	mov    DWORD PTR ds:0x10056074,edx	10005304: R_386_32	.bss
10005308:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
1000530c:	a3 70 60 05 10       	mov    ds:0x10056070,eax	1000530d: R_386_32	.bss
10005311:	53                   	push   ebx
10005312:	e8 fc ff ff ff       	call   10005313 <NIDesktop::handleMouse(int, int, int, int)+0xc25>	10005313: R_386_PC32	NIDesktop::deleteWindow(NIWindow*)
10005317:	83 c4 10             	add    esp,0x10
1000531a:	8b 03                	mov    eax,DWORD PTR [ebx]
1000531c:	83 ec 0c             	sub    esp,0xc
1000531f:	8b 90 08 04 00 00    	mov    edx,DWORD PTR [eax+0x408]
10005325:	8b 0a                	mov    ecx,DWORD PTR [edx]
10005327:	6a 00                	push   0x0
10005329:	8b 83 20 04 00 00    	mov    eax,DWORD PTR [ebx+0x420]
1000532f:	05 00 00 00 00       	add    eax,0x0	10005330: R_386_32	___mouse_data
10005334:	50                   	push   eax
10005335:	ff b3 18 04 00 00    	push   DWORD PTR [ebx+0x418]
1000533b:	ff b3 14 04 00 00    	push   DWORD PTR [ebx+0x414]
10005341:	52                   	push   edx
10005342:	ff 51 30             	call   DWORD PTR [ecx+0x30]
10005345:	8b 84 24 9c 01 00 00 	mov    eax,DWORD PTR [esp+0x19c]
1000534c:	a3 78 60 05 10       	mov    ds:0x10056078,eax	1000534d: R_386_32	.bss
10005351:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
10005355:	a3 00 00 00 00       	mov    ds:0x0,eax	10005356: R_386_32	prevClickon
1000535a:	81 c4 7c 01 00 00    	add    esp,0x17c
10005360:	5b                   	pop    ebx
10005361:	5e                   	pop    esi
10005362:	5f                   	pop    edi
10005363:	5d                   	pop    ebp
10005364:	c3                   	ret    
10005365:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
10005369:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
1000536d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000536f: R_386_32	mouseDesktop
10005373:	83 ec 0c             	sub    esp,0xc
10005376:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
1000537c:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000537e: R_386_32	movingWin
10005386:	66 89 4c 24 44       	mov    WORD PTR [esp+0x44],cx
1000538b:	25 ff 1f 00 00       	and    eax,0x1fff
10005390:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005396:	0d 00 20 00 80       	or     eax,0x80002000
1000539b:	66 89 4c 24 46       	mov    WORD PTR [esp+0x46],cx
100053a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100053a4:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
100053aa:	66 25 00 3c          	and    ax,0x3c00
100053ae:	66 81 e2 ff 03       	and    dx,0x3ff
100053b3:	89 bd 70 02 00 00    	mov    DWORD PTR [ebp+0x270],edi
100053b9:	09 d0                	or     eax,edx
100053bb:	66 89 44 24 40       	mov    WORD PTR [esp+0x40],ax
100053c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
100053c4:	89 85 74 02 00 00    	mov    DWORD PTR [ebp+0x274],eax
100053ca:	55                   	push   ebp
100053cb:	e8 fc ff ff ff       	call   100053cc <NIDesktop::handleMouse(int, int, int, int)+0xcde>	100053cc: R_386_PC32	NIWindow::rerender()
100053d0:	5a                   	pop    edx
100053d1:	59                   	pop    ecx
100053d2:	55                   	push   ebp
100053d3:	53                   	push   ebx
100053d4:	e8 fc ff ff ff       	call   100053d5 <NIDesktop::handleMouse(int, int, int, int)+0xce7>	100053d5: R_386_PC32	NIDesktop::addWindow(NIWindow*)
100053d9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
100053e0:	6a ff                	push   0xffffffff
100053e2:	6a ff                	push   0xffffffff
100053e4:	55                   	push   ebp
100053e5:	53                   	push   ebx
100053e6:	e8 fc ff ff ff       	call   100053e7 <NIDesktop::handleMouse(int, int, int, int)+0xcf9>	100053e7: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
100053eb:	5e                   	pop    esi
100053ec:	b9 06 00 00 00       	mov    ecx,0x6
100053f1:	8d 74 24 4c          	lea    esi,[esp+0x4c]
100053f5:	89 e7                	mov    edi,esp
100053f7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
100053f9:	55                   	push   ebp
100053fa:	e8 fc ff ff ff       	call   100053fb <NIDesktop::handleMouse(int, int, int, int)+0xd0d>	100053fb: R_386_PC32	NIWindow::postEvent(NiEvent)
100053ff:	c7 83 20 04 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x420],0x0
10005409:	e9 a1 fb ff ff       	jmp    10004faf <NIDesktop::handleMouse(int, int, int, int)+0x8c1>
1000540e:	89 b5 68 02 00 00    	mov    DWORD PTR [ebp+0x268],esi
10005414:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005416: R_386_32	movingWin
1000541e:	8b 83 18 04 00 00    	mov    eax,DWORD PTR [ebx+0x418]
10005424:	2b 05 70 60 05 10    	sub    eax,DWORD PTR ds:0x10056070	10005426: R_386_32	.bss
1000542a:	89 85 6c 02 00 00    	mov    DWORD PTR [ebp+0x26c],eax
10005430:	50                   	push   eax
10005431:	50                   	push   eax
10005432:	55                   	push   ebp
10005433:	53                   	push   ebx
10005434:	e8 fc ff ff ff       	call   10005435 <NIDesktop::handleMouse(int, int, int, int)+0xd47>	10005435: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005439:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
1000543d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
10005441:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005443: R_386_32	mouseDesktop
10005447:	83 ec 0c             	sub    esp,0xc
1000544a:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005450:	25 ff 1f 00 00       	and    eax,0x1fff
10005455:	66 89 4c 24 54       	mov    WORD PTR [esp+0x54],cx
1000545a:	0d 00 40 00 80       	or     eax,0x80004000
1000545f:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005465:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
10005469:	66 89 4c 24 56       	mov    WORD PTR [esp+0x56],cx
1000546e:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005474:	66 25 00 5c          	and    ax,0x5c00
10005478:	66 81 e2 ff 03       	and    dx,0x3ff
1000547d:	b9 06 00 00 00       	mov    ecx,0x6
10005482:	09 d0                	or     eax,edx
10005484:	66 89 44 24 50       	mov    WORD PTR [esp+0x50],ax
10005489:	8d 74 24 4c          	lea    esi,[esp+0x4c]
1000548d:	89 e7                	mov    edi,esp
1000548f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005491:	55                   	push   ebp
10005492:	e8 fc ff ff ff       	call   10005493 <NIDesktop::handleMouse(int, int, int, int)+0xda5>	10005493: R_386_PC32	NIWindow::postEvent(NiEvent)
10005497:	e9 e5 f7 ff ff       	jmp    10004c81 <NIDesktop::handleMouse(int, int, int, int)+0x593>
1000549c:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
100054a0:	85 f6                	test   esi,esi
100054a2:	0f 84 00 01 00 00    	je     100055a8 <NIDesktop::handleMouse(int, int, int, int)+0xeba>
100054a8:	39 2d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebp	100054aa: R_386_32	clickonWhenMouseFirstClicked
100054ae:	74 08                	je     100054b8 <NIDesktop::handleMouse(int, int, int, int)+0xdca>
100054b0:	39 2d 00 00 00 00    	cmp    DWORD PTR ds:0x0,ebp	100054b2: R_386_32	prevClickon
100054b6:	75 6e                	jne    10005526 <NIDesktop::handleMouse(int, int, int, int)+0xe38>
100054b8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
100054bd:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
100054c1:	19 c0                	sbb    eax,eax
100054c3:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
100054c7:	81 e2 ff 1f 00 80    	and    edx,0x80001fff
100054cd:	83 c0 05             	add    eax,0x5
100054d0:	25 ff ff 03 00       	and    eax,0x3ffff
100054d5:	c1 e0 0d             	shl    eax,0xd
100054d8:	09 d0                	or     eax,edx
100054da:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
100054de:	a1 00 00 00 00       	mov    eax,ds:0x0	100054df: R_386_32	mouseDesktop
100054e3:	80 64 24 4f 7f       	and    BYTE PTR [esp+0x4f],0x7f
100054e8:	83 ec 1c             	sub    esp,0x1c
100054eb:	8b 90 14 04 00 00    	mov    edx,DWORD PTR [eax+0x414]
100054f1:	66 89 54 24 6c       	mov    WORD PTR [esp+0x6c],dx
100054f6:	8b 90 18 04 00 00    	mov    edx,DWORD PTR [eax+0x418]
100054fc:	8b 80 1c 04 00 00    	mov    eax,DWORD PTR [eax+0x41c]
10005502:	66 89 54 24 6e       	mov    WORD PTR [esp+0x6e],dx
10005507:	89 c2                	mov    edx,eax
10005509:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
1000550d:	66 81 e2 ff 03       	and    dx,0x3ff
10005512:	66 25 00 fc          	and    ax,0xfc00
10005516:	09 d0                	or     eax,edx
10005518:	66 89 44 24 68       	mov    WORD PTR [esp+0x68],ax
1000551d:	8d 74 24 64          	lea    esi,[esp+0x64]
10005521:	e9 06 01 00 00       	jmp    1000562c <NIDesktop::handleMouse(int, int, int, int)+0xf3e>
10005526:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
1000552b:	0f 84 0d 01 00 00    	je     1000563e <NIDesktop::handleMouse(int, int, int, int)+0xf50>
10005531:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
10005535:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
10005539:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000553b: R_386_32	mouseDesktop
1000553f:	89 7c 24 60          	mov    DWORD PTR [esp+0x60],edi
10005543:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005549:	83 ec 1c             	sub    esp,0x1c
1000554c:	66 89 8c 24 84 00 00 00 	mov    WORD PTR [esp+0x84],cx
10005554:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	10005556: R_386_32	clickonWhenMouseFirstClicked
1000555a:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005560:	25 ff 1f 00 00       	and    eax,0x1fff
10005565:	66 89 8c 24 86 00 00 00 	mov    WORD PTR [esp+0x86],cx
1000556d:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
10005573:	0d 00 a0 01 00       	or     eax,0x1a000
10005578:	66 81 e2 ff 03       	and    dx,0x3ff
1000557d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
10005584:	b9 06 00 00 00       	mov    ecx,0x6
10005589:	66 25 00 bc          	and    ax,0xbc00
1000558d:	09 d0                	or     eax,edx
1000558f:	66 89 84 24 80 00 00 00 	mov    WORD PTR [esp+0x80],ax
10005597:	8d 74 24 7c          	lea    esi,[esp+0x7c]
1000559b:	89 e7                	mov    edi,esp
1000559d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000559f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100055a3:	e9 8e 00 00 00       	jmp    10005636 <NIDesktop::handleMouse(int, int, int, int)+0xf48>
100055a8:	85 ff                	test   edi,edi
100055aa:	0f 85 f8 fe ff ff    	jne    100054a8 <NIDesktop::handleMouse(int, int, int, int)+0xdba>
100055b0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
100055b4:	83 e0 01             	and    eax,0x1
100055b7:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
100055bc:	0f 84 6f 01 00 00    	je     10005731 <NIDesktop::handleMouse(int, int, int, int)+0x1043>
100055c2:	85 c0                	test   eax,eax
100055c4:	75 78                	jne    1000563e <NIDesktop::handleMouse(int, int, int, int)+0xf50>
100055c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
100055cb:	74 06                	je     100055d3 <NIDesktop::handleMouse(int, int, int, int)+0xee5>
100055cd:	89 2d 00 00 00 00    	mov    DWORD PTR ds:0x0,ebp	100055cf: R_386_32	clickonWhenMouseFirstClicked
100055d3:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
100055d7:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100055d9: R_386_32	mouseDesktop
100055dd:	89 6c 24 78          	mov    DWORD PTR [esp+0x78],ebp
100055e1:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100055e7:	25 ff 1f 00 00       	and    eax,0x1fff
100055ec:	66 89 8c 24 80 00 00 00 	mov    WORD PTR [esp+0x80],cx
100055f4:	80 cc c0             	or     ah,0xc0
100055f7:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100055fd:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
10005601:	66 89 8c 24 82 00 00 00 	mov    WORD PTR [esp+0x82],cx
10005609:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000560f:	66 25 00 dc          	and    ax,0xdc00
10005613:	66 81 e2 ff 03       	and    dx,0x3ff
10005618:	83 ec 1c             	sub    esp,0x1c
1000561b:	09 d0                	or     eax,edx
1000561d:	66 89 84 24 98 00 00 00 	mov    WORD PTR [esp+0x98],ax
10005625:	8d b4 24 94 00 00 00 	lea    esi,[esp+0x94]
1000562c:	89 e7                	mov    edi,esp
1000562e:	b9 06 00 00 00       	mov    ecx,0x6
10005633:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005635:	55                   	push   ebp
10005636:	e8 fc ff ff ff       	call   10005637 <NIDesktop::handleMouse(int, int, int, int)+0xf49>	10005637: R_386_PC32	NIWindow::postEvent(NiEvent)
1000563b:	83 c4 20             	add    esp,0x20
1000563e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
10005642:	83 e0 02             	and    eax,0x2
10005645:	f6 84 24 7c 01 00 00 02 	test   BYTE PTR [esp+0x17c],0x2
1000564d:	74 71                	je     100056c0 <NIDesktop::handleMouse(int, int, int, int)+0xfd2>
1000564f:	85 c0                	test   eax,eax
10005651:	0f 85 16 f4 ff ff    	jne    10004a6d <NIDesktop::handleMouse(int, int, int, int)+0x37f>
10005657:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
1000565e:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005660: R_386_32	mouseDesktop
10005664:	89 ac 24 a8 00 00 00 	mov    DWORD PTR [esp+0xa8],ebp
1000566b:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005671:	25 ff 1f 00 00       	and    eax,0x1fff
10005676:	66 89 8c 24 b0 00 00 00 	mov    WORD PTR [esp+0xb0],cx
1000567e:	0d 00 40 01 00       	or     eax,0x14000
10005683:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005689:	89 84 24 ac 00 00 00 	mov    DWORD PTR [esp+0xac],eax
10005690:	66 89 8c 24 b2 00 00 00 	mov    WORD PTR [esp+0xb2],cx
10005698:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000569e:	66 25 00 5c          	and    ax,0x5c00
100056a2:	66 81 e2 ff 03       	and    dx,0x3ff
100056a7:	83 ec 1c             	sub    esp,0x1c
100056aa:	09 d0                	or     eax,edx
100056ac:	66 89 84 24 c8 00 00 00 	mov    WORD PTR [esp+0xc8],ax
100056b4:	8d b4 24 c4 00 00 00 	lea    esi,[esp+0xc4]
100056bb:	e9 9b f3 ff ff       	jmp    10004a5b <NIDesktop::handleMouse(int, int, int, int)+0x36d>
100056c0:	85 c0                	test   eax,eax
100056c2:	0f 84 a5 f3 ff ff    	je     10004a6d <NIDesktop::handleMouse(int, int, int, int)+0x37f>
100056c8:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
100056cf:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	100056d1: R_386_32	mouseDesktop
100056d5:	89 ac 24 c0 00 00 00 	mov    DWORD PTR [esp+0xc0],ebp
100056dc:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
100056e2:	25 ff 1f 00 00       	and    eax,0x1fff
100056e7:	66 89 8c 24 c8 00 00 00 	mov    WORD PTR [esp+0xc8],cx
100056ef:	0d 00 60 01 00       	or     eax,0x16000
100056f4:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
100056fa:	89 84 24 c4 00 00 00 	mov    DWORD PTR [esp+0xc4],eax
10005701:	66 89 8c 24 ca 00 00 00 	mov    WORD PTR [esp+0xca],cx
10005709:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000570f:	66 25 00 7c          	and    ax,0x7c00
10005713:	66 81 e2 ff 03       	and    dx,0x3ff
10005718:	83 ec 1c             	sub    esp,0x1c
1000571b:	09 d0                	or     eax,edx
1000571d:	66 89 84 24 e0 00 00 00 	mov    WORD PTR [esp+0xe0],ax
10005725:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
1000572c:	e9 2a f3 ff ff       	jmp    10004a5b <NIDesktop::handleMouse(int, int, int, int)+0x36d>
10005731:	85 c0                	test   eax,eax
10005733:	0f 84 05 ff ff ff    	je     1000563e <NIDesktop::handleMouse(int, int, int, int)+0xf50>
10005739:	8b 84 24 94 00 00 00 	mov    eax,DWORD PTR [esp+0x94]
10005740:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005742: R_386_32	mouseDesktop
10005746:	89 ac 24 90 00 00 00 	mov    DWORD PTR [esp+0x90],ebp
1000574d:	8b 8a 14 04 00 00    	mov    ecx,DWORD PTR [edx+0x414]
10005753:	25 ff 1f 00 00       	and    eax,0x1fff
10005758:	66 89 8c 24 98 00 00 00 	mov    WORD PTR [esp+0x98],cx
10005760:	80 cc e0             	or     ah,0xe0
10005763:	8b 8a 18 04 00 00    	mov    ecx,DWORD PTR [edx+0x418]
10005769:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
10005770:	66 89 8c 24 9a 00 00 00 	mov    WORD PTR [esp+0x9a],cx
10005778:	8b 92 1c 04 00 00    	mov    edx,DWORD PTR [edx+0x41c]
1000577e:	66 25 00 fc          	and    ax,0xfc00
10005782:	66 81 e2 ff 03       	and    dx,0x3ff
10005787:	83 ec 1c             	sub    esp,0x1c
1000578a:	09 d0                	or     eax,edx
1000578c:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	1000578e: R_386_32	clickonWhenMouseFirstClicked
10005796:	66 89 84 24 b0 00 00 00 	mov    WORD PTR [esp+0xb0],ax
1000579e:	8d b4 24 ac 00 00 00 	lea    esi,[esp+0xac]
100057a5:	e9 82 fe ff ff       	jmp    1000562c <NIDesktop::handleMouse(int, int, int, int)+0xf3e>

100057aa <NiHandleMouse(int, int, int, int)>:
100057aa:	83 ec 18             	sub    esp,0x18
100057ad:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100057b1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100057b5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100057b9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
100057bd:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	100057bf: R_386_32	mouseDesktop
100057c3:	e8 fc ff ff ff       	call   100057c4 <NiHandleMouse(int, int, int, int)+0x1a>	100057c4: R_386_PC32	NIDesktop::handleMouse(int, int, int, int)
100057c8:	83 c4 2c             	add    esp,0x2c
100057cb:	c3                   	ret    

100057cc <drawVGAChar(int, int, int)>:
100057cc:	55                   	push   ebp
100057cd:	57                   	push   edi
100057ce:	56                   	push   esi
100057cf:	53                   	push   ebx
100057d0:	31 db                	xor    ebx,ebx
100057d2:	83 ec 1c             	sub    esp,0x1c
100057d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
100057d9:	c1 e0 04             	shl    eax,0x4
100057dc:	89 04 24             	mov    DWORD PTR [esp],eax
100057df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
100057e3:	c1 e0 04             	shl    eax,0x4
100057e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
100057ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
100057ee:	c1 e0 03             	shl    eax,0x3
100057f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
100057f5:	8b 04 24             	mov    eax,DWORD PTR [esp]
100057f8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
100057fc:	8a 84 18 00 00 00 00 	mov    al,BYTE PTR [eax+ebx*1+0x0]	100057ff: R_386_32	cp
10005803:	8d 3c 19             	lea    edi,[ecx+ebx*1]
10005806:	31 f6                	xor    esi,esi
10005808:	84 c0                	test   al,al
1000580a:	79 22                	jns    1000582e <drawVGAChar(int, int, int)+0x62>
1000580c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
10005810:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	10005812: R_386_32	screen
10005816:	8b 0a                	mov    ecx,DWORD PTR [edx]
10005818:	6a 00                	push   0x0
1000581a:	57                   	push   edi
1000581b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000581f:	8d 2c 06             	lea    ebp,[esi+eax*1]
10005822:	55                   	push   ebp
10005823:	52                   	push   edx
10005824:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10005827:	83 c4 10             	add    esp,0x10
1000582a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
1000582e:	d1 e0                	shl    eax,1
10005830:	46                   	inc    esi
10005831:	83 fe 08             	cmp    esi,0x8
10005834:	75 d2                	jne    10005808 <drawVGAChar(int, int, int)+0x3c>
10005836:	43                   	inc    ebx
10005837:	83 fb 10             	cmp    ebx,0x10
1000583a:	75 b9                	jne    100057f5 <drawVGAChar(int, int, int)+0x29>
1000583c:	83 c4 1c             	add    esp,0x1c
1000583f:	5b                   	pop    ebx
10005840:	5e                   	pop    esi
10005841:	5f                   	pop    edi
10005842:	5d                   	pop    ebp
10005843:	c3                   	ret    

10005844 <NiDisplayRAM(void*)>:
10005844:	56                   	push   esi
10005845:	53                   	push   ebx
10005846:	83 ec 14             	sub    esp,0x14
10005849:	a1 00 00 00 00       	mov    eax,ds:0x0	1000584a: R_386_32	irqDisableCounter
1000584e:	48                   	dec    eax
1000584f:	a3 00 00 00 00       	mov    ds:0x0,eax	10005850: R_386_32	irqDisableCounter
10005854:	75 01                	jne    10005857 <NiDisplayRAM(void*)+0x13>
10005856:	fb                   	sti    
10005857:	6b 05 00 00 00 00 64 	imul   eax,DWORD PTR ds:0x0,0x64	10005859: R_386_32	Phys::usedPages
1000585e:	31 db                	xor    ebx,ebx
10005860:	99                   	cdq    
10005861:	f7 3d 00 00 00 00    	idiv   DWORD PTR ds:0x0	10005863: R_386_32	Phys::usablePages
10005867:	31 f6                	xor    esi,esi
10005869:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
1000586d:	8b 15 00 00 00 00    	mov    edx,DWORD PTR ds:0x0	1000586f: R_386_32	screen
10005873:	8b 0a                	mov    ecx,DWORD PTR [edx]
10005875:	68 ff ff ff 00       	push   0xffffff
1000587a:	53                   	push   ebx
1000587b:	56                   	push   esi
1000587c:	46                   	inc    esi
1000587d:	52                   	push   edx
1000587e:	ff 51 24             	call   DWORD PTR [ecx+0x24]
10005881:	83 c4 10             	add    esp,0x10
10005884:	83 fe 60             	cmp    esi,0x60
10005887:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
1000588b:	75 dc                	jne    10005869 <NiDisplayRAM(void*)+0x25>
1000588d:	43                   	inc    ebx
1000588e:	83 fb 10             	cmp    ebx,0x10
10005891:	75 d4                	jne    10005867 <NiDisplayRAM(void*)+0x23>
10005893:	b9 0a 00 00 00       	mov    ecx,0xa
10005898:	52                   	push   edx
10005899:	99                   	cdq    
1000589a:	f7 f9                	idiv   ecx
1000589c:	89 d3                	mov    ebx,edx
1000589e:	83 c0 30             	add    eax,0x30
100058a1:	50                   	push   eax
100058a2:	6a 00                	push   0x0
100058a4:	6a 00                	push   0x0
100058a6:	e8 fc ff ff ff       	call   100058a7 <NiDisplayRAM(void*)+0x63>	100058a7: R_386_PC32	drawVGAChar(int, int, int)
100058ab:	8d 43 30             	lea    eax,[ebx+0x30]
100058ae:	83 c4 0c             	add    esp,0xc
100058b1:	50                   	push   eax
100058b2:	6a 00                	push   0x0
100058b4:	6a 01                	push   0x1
100058b6:	e8 fc ff ff ff       	call   100058b7 <NiDisplayRAM(void*)+0x73>	100058b7: R_386_PC32	drawVGAChar(int, int, int)
100058bb:	83 c4 0c             	add    esp,0xc
100058be:	6a 25                	push   0x25
100058c0:	6a 00                	push   0x0
100058c2:	6a 02                	push   0x2
100058c4:	e8 fc ff ff ff       	call   100058c5 <NiDisplayRAM(void*)+0x81>	100058c5: R_386_PC32	drawVGAChar(int, int, int)
100058c9:	83 c4 0c             	add    esp,0xc
100058cc:	6a 20                	push   0x20
100058ce:	6a 00                	push   0x0
100058d0:	6a 03                	push   0x3
100058d2:	e8 fc ff ff ff       	call   100058d3 <NiDisplayRAM(void*)+0x8f>	100058d3: R_386_PC32	drawVGAChar(int, int, int)
100058d7:	83 c4 0c             	add    esp,0xc
100058da:	6a 52                	push   0x52
100058dc:	6a 00                	push   0x0
100058de:	6a 04                	push   0x4
100058e0:	e8 fc ff ff ff       	call   100058e1 <NiDisplayRAM(void*)+0x9d>	100058e1: R_386_PC32	drawVGAChar(int, int, int)
100058e5:	83 c4 0c             	add    esp,0xc
100058e8:	6a 41                	push   0x41
100058ea:	6a 00                	push   0x0
100058ec:	6a 05                	push   0x5
100058ee:	e8 fc ff ff ff       	call   100058ef <NiDisplayRAM(void*)+0xab>	100058ef: R_386_PC32	drawVGAChar(int, int, int)
100058f3:	83 c4 0c             	add    esp,0xc
100058f6:	6a 4d                	push   0x4d
100058f8:	6a 00                	push   0x0
100058fa:	6a 06                	push   0x6
100058fc:	e8 fc ff ff ff       	call   100058fd <NiDisplayRAM(void*)+0xb9>	100058fd: R_386_PC32	drawVGAChar(int, int, int)
10005901:	83 c4 0c             	add    esp,0xc
10005904:	6a 20                	push   0x20
10005906:	6a 00                	push   0x0
10005908:	6a 07                	push   0x7
1000590a:	e8 fc ff ff ff       	call   1000590b <NiDisplayRAM(void*)+0xc7>	1000590b: R_386_PC32	drawVGAChar(int, int, int)
1000590f:	83 c4 0c             	add    esp,0xc
10005912:	6a 75                	push   0x75
10005914:	6a 00                	push   0x0
10005916:	6a 08                	push   0x8
10005918:	e8 fc ff ff ff       	call   10005919 <NiDisplayRAM(void*)+0xd5>	10005919: R_386_PC32	drawVGAChar(int, int, int)
1000591d:	83 c4 0c             	add    esp,0xc
10005920:	6a 73                	push   0x73
10005922:	6a 00                	push   0x0
10005924:	6a 09                	push   0x9
10005926:	e8 fc ff ff ff       	call   10005927 <NiDisplayRAM(void*)+0xe3>	10005927: R_386_PC32	drawVGAChar(int, int, int)
1000592b:	83 c4 0c             	add    esp,0xc
1000592e:	6a 65                	push   0x65
10005930:	6a 00                	push   0x0
10005932:	6a 0a                	push   0xa
10005934:	e8 fc ff ff ff       	call   10005935 <NiDisplayRAM(void*)+0xf1>	10005935: R_386_PC32	drawVGAChar(int, int, int)
10005939:	83 c4 0c             	add    esp,0xc
1000593c:	6a 64                	push   0x64
1000593e:	6a 00                	push   0x0
10005940:	6a 0b                	push   0xb
10005942:	e8 fc ff ff ff       	call   10005943 <NiDisplayRAM(void*)+0xff>	10005943: R_386_PC32	drawVGAChar(int, int, int)
10005947:	c7 04 24 4c 1d 00 00 	mov    DWORD PTR [esp],0x1d4c
1000594e:	e8 fc ff ff ff       	call   1000594f <NiDisplayRAM(void*)+0x10b>	1000594f: R_386_PC32	milliTenthSleep(unsigned int)
10005953:	83 c4 10             	add    esp,0x10
10005956:	e9 fc fe ff ff       	jmp    10005857 <NiDisplayRAM(void*)+0x13>

1000595b <monikaBsod(char*)>:
1000595b:	55                   	push   ebp
1000595c:	57                   	push   edi
1000595d:	56                   	push   esi
1000595e:	53                   	push   ebx
1000595f:	83 ec 24             	sub    esp,0x24
10005962:	a1 00 00 00 00       	mov    eax,ds:0x0	10005963: R_386_32	screen
10005967:	8b 10                	mov    edx,DWORD PTR [eax]
10005969:	68 ff ff ff 00       	push   0xffffff
1000596e:	50                   	push   eax
1000596f:	ff 52 40             	call   DWORD PTR [edx+0x40]
10005972:	5e                   	pop    esi
10005973:	5f                   	pop    edi
10005974:	bf 00 00 00 00       	mov    edi,0x0	10005975: R_386_32	justMonika
10005979:	68 1a 6d 00 10       	push   0x10006d1a	1000597a: R_386_32	.text
1000597e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
10005982:	e8 fc ff ff ff       	call   10005983 <monikaBsod(char*)+0x28>	10005983: R_386_PC32	strcmp
10005987:	83 c4 10             	add    esp,0x10
1000598a:	85 c0                	test   eax,eax
1000598c:	75 26                	jne    100059b4 <monikaBsod(char*)+0x59>
1000598e:	83 ec 0c             	sub    esp,0xc
10005991:	bf 00 00 00 00       	mov    edi,0x0	10005992: R_386_32	justMonika2
10005996:	6a 20                	push   0x20
10005998:	e8 fc ff ff ff       	call   10005999 <monikaBsod(char*)+0x3e>	10005999: R_386_PC32	malloc
1000599d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
100059a1:	59                   	pop    ecx
100059a2:	5b                   	pop    ebx
100059a3:	68 23 6d 00 10       	push   0x10006d23	100059a4: R_386_32	.text
100059a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
100059ac:	e8 fc ff ff ff       	call   100059ad <monikaBsod(char*)+0x52>	100059ad: R_386_PC32	strcpy
100059b1:	83 c4 10             	add    esp,0x10
100059b4:	31 db                	xor    ebx,ebx
100059b6:	31 ed                	xor    ebp,ebp
100059b8:	8a 14 1f             	mov    dl,BYTE PTR [edi+ebx*1]
100059bb:	8d 43 01             	lea    eax,[ebx+0x1]
100059be:	84 d2                	test   dl,dl
100059c0:	79 0b                	jns    100059cd <monikaBsod(char*)+0x72>
100059c2:	8d 4a 80             	lea    ecx,[edx-0x80]
100059c5:	83 c3 02             	add    ebx,0x2
100059c8:	8a 14 07             	mov    dl,BYTE PTR [edi+eax*1]
100059cb:	eb 04                	jmp    100059d1 <monikaBsod(char*)+0x76>
100059cd:	89 c3                	mov    ebx,eax
100059cf:	b1 01                	mov    cl,0x1
100059d1:	0f b6 c2             	movzx  eax,dl
100059d4:	83 e2 03             	and    edx,0x3
100059d7:	89 c6                	mov    esi,eax
100059d9:	c1 f8 02             	sar    eax,0x2
100059dc:	c1 fe 05             	sar    esi,0x5
100059df:	83 e0 07             	and    eax,0x7
100059e2:	83 e6 03             	and    esi,0x3
100059e5:	6b c0 24             	imul   eax,eax,0x24
100059e8:	6b f6 55             	imul   esi,esi,0x55
100059eb:	c1 e0 08             	shl    eax,0x8
100059ee:	c1 e6 10             	shl    esi,0x10
100059f1:	09 c6                	or     esi,eax
100059f3:	6b c2 55             	imul   eax,edx,0x55
100059f6:	09 c6                	or     esi,eax
100059f8:	0f b6 c1             	movzx  eax,cl
100059fb:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
100059ff:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
10005a03:	31 f6                	xor    esi,esi
10005a05:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
10005a09:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
10005a0d:	7f 10                	jg     10005a1f <monikaBsod(char*)+0xc4>
10005a0f:	03 6c 24 04          	add    ebp,DWORD PTR [esp+0x4]
10005a13:	81 fd ff af 04 00    	cmp    ebp,0x4afff
10005a19:	7e 9d                	jle    100059b8 <monikaBsod(char*)+0x5d>
10005a1b:	31 db                	xor    ebx,ebx
10005a1d:	eb 2d                	jmp    10005a4c <monikaBsod(char*)+0xf1>
10005a1f:	8b 0d 00 00 00 00    	mov    ecx,DWORD PTR ds:0x0	10005a21: R_386_32	screen
10005a25:	99                   	cdq    
10005a26:	8b 09                	mov    ecx,DWORD PTR [ecx]
10005a28:	46                   	inc    esi
10005a29:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10005a2d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
10005a31:	b9 80 02 00 00       	mov    ecx,0x280
10005a36:	f7 f9                	idiv   ecx
10005a38:	50                   	push   eax
10005a39:	52                   	push   edx
10005a3a:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005a3c: R_386_32	screen
10005a40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
10005a44:	ff 50 24             	call   DWORD PTR [eax+0x24]
10005a47:	83 c4 10             	add    esp,0x10
10005a4a:	eb b9                	jmp    10005a05 <monikaBsod(char*)+0xaa>
10005a4c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
10005a50:	0f be 04 18          	movsx  eax,BYTE PTR [eax+ebx*1]
10005a54:	84 c0                	test   al,al
10005a56:	74 1d                	je     10005a75 <monikaBsod(char*)+0x11a>
10005a58:	b9 19 00 00 00       	mov    ecx,0x19
10005a5d:	52                   	push   edx
10005a5e:	50                   	push   eax
10005a5f:	89 d8                	mov    eax,ebx
10005a61:	43                   	inc    ebx
10005a62:	99                   	cdq    
10005a63:	f7 f9                	idiv   ecx
10005a65:	83 c0 0a             	add    eax,0xa
10005a68:	42                   	inc    edx
10005a69:	50                   	push   eax
10005a6a:	52                   	push   edx
10005a6b:	e8 fc ff ff ff       	call   10005a6c <monikaBsod(char*)+0x111>	10005a6c: R_386_PC32	drawVGAChar(int, int, int)
10005a70:	83 c4 10             	add    esp,0x10
10005a73:	eb d7                	jmp    10005a4c <monikaBsod(char*)+0xf1>
10005a75:	f4                   	hlt    
10005a76:	eb fd                	jmp    10005a75 <monikaBsod(char*)+0x11a>

10005a78 <NiInstallSysHooks()>:
10005a78:	83 ec 14             	sub    esp,0x14
10005a7b:	6a 00                	push   0x0
10005a7d:	68 00 00 00 00       	push   0x0	10005a7e: R_386_32	NiShutdownHandler(void*)
10005a82:	e8 fc ff ff ff       	call   10005a83 <NiInstallSysHooks()+0xb>	10005a83: R_386_PC32	KeRegisterAtexit(void (*)(void*), void*)
10005a87:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005a89: R_386_32	guiPanicHandler
	10005a8d: R_386_32	monikaBsod(char*)
10005a91:	c7 05 00 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0x0,0x0	10005a93: R_386_32	guiKeyboardHandler
	10005a97: R_386_32	NiKeyhandler(KeyboardToken, bool*)
10005a9b:	c7 05 bc 00 00 00 00 00 00 00 	mov    DWORD PTR ds:0xbc,0x0	10005a9d: R_386_32	systemCallHandlers
	10005aa1: R_386_32	NiSystemCallHandler(regs*)
10005aa5:	83 c4 1c             	add    esp,0x1c
10005aa8:	c3                   	ret    

10005aa9 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)>:
10005aa9:	56                   	push   esi
10005aaa:	53                   	push   ebx
10005aab:	83 ec 10             	sub    esp,0x10
10005aae:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
10005ab2:	68 90 02 00 00       	push   0x290
10005ab7:	e8 fc ff ff ff       	call   10005ab8 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0xf>	10005ab8: R_386_PC32	malloc
10005abc:	89 c6                	mov    esi,eax
10005abe:	58                   	pop    eax
10005abf:	5a                   	pop    edx
10005ac0:	ff b3 b0 00 00 00    	push   DWORD PTR [ebx+0xb0]
10005ac6:	ff b3 ac 00 00 00    	push   DWORD PTR [ebx+0xac]
10005acc:	ff b3 a8 00 00 00    	push   DWORD PTR [ebx+0xa8]
10005ad2:	ff b3 a4 00 00 00    	push   DWORD PTR [ebx+0xa4]
10005ad8:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005ada: R_386_32	ctxt
10005ade:	56                   	push   esi
10005adf:	e8 fc ff ff ff       	call   10005ae0 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x37>	10005ae0: R_386_PC32	NIWindow::NIWindow(NIContext*, int, int, int, int)
10005ae4:	8b 83 b4 00 00 00    	mov    eax,DWORD PTR [ebx+0xb4]
10005aea:	83 c4 18             	add    esp,0x18
10005aed:	89 86 8c 02 00 00    	mov    DWORD PTR [esi+0x28c],eax
10005af3:	56                   	push   esi
10005af4:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005af6: R_386_32	desktop
10005afa:	e8 fc ff ff ff       	call   10005afb <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x52>	10005afb: R_386_PC32	NIDesktop::addWindow(NIWindow*)
10005aff:	59                   	pop    ecx
10005b00:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005b02: R_386_32	desktop
10005b06:	e8 fc ff ff ff       	call   10005b07 <NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)+0x5e>	10005b07: R_386_PC32	NIDesktop::completeRefresh()
10005b0b:	89 b3 a0 00 00 00    	mov    DWORD PTR [ebx+0xa0],esi
10005b11:	31 c0                	xor    eax,eax
10005b13:	83 c4 14             	add    esp,0x14
10005b16:	31 d2                	xor    edx,edx
10005b18:	5b                   	pop    ebx
10005b19:	5e                   	pop    esi
10005b1a:	c3                   	ret    

10005b1b <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)>:
10005b1b:	53                   	push   ebx
10005b1c:	83 ec 14             	sub    esp,0x14
10005b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005b23:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005b29:	53                   	push   ebx
10005b2a:	e8 fc ff ff ff       	call   10005b2b <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x10>	10005b2b: R_386_PC32	NIWindow::rerender()
10005b2f:	8b 83 8c 02 00 00    	mov    eax,DWORD PTR [ebx+0x28c]
10005b35:	83 c4 10             	add    esp,0x10
10005b38:	89 c2                	mov    edx,eax
10005b3a:	83 e2 ef             	and    edx,0xffffffef
10005b3d:	a8 20                	test   al,0x20
10005b3f:	89 93 8c 02 00 00    	mov    DWORD PTR [ebx+0x28c],edx
10005b45:	74 0c                	je     10005b53 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x38>
10005b47:	83 ec 0c             	sub    esp,0xc
10005b4a:	53                   	push   ebx
10005b4b:	e8 fc ff ff ff       	call   10005b4c <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x31>	10005b4c: R_386_PC32	NIWindow::drawResizeMarker()
10005b50:	83 c4 10             	add    esp,0x10
10005b53:	83 ec 0c             	sub    esp,0xc
10005b56:	6a 00                	push   0x0
10005b58:	6a ff                	push   0xffffffff
10005b5a:	6a ff                	push   0xffffffff
10005b5c:	53                   	push   ebx
10005b5d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005b5f: R_386_32	desktop
10005b63:	e8 fc ff ff ff       	call   10005b64 <NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)+0x49>	10005b64: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10005b68:	31 c0                	xor    eax,eax
10005b6a:	31 d2                	xor    edx,edx
10005b6c:	83 c4 28             	add    esp,0x28
10005b6f:	5b                   	pop    ebx
10005b70:	c3                   	ret    

10005b71 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)>:
10005b71:	55                   	push   ebp
10005b72:	57                   	push   edi
10005b73:	56                   	push   esi
10005b74:	53                   	push   ebx
10005b75:	83 ec 0c             	sub    esp,0xc
10005b78:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
10005b7c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
10005b80:	8d 41 ff             	lea    eax,[ecx-0x1]
10005b83:	3d fe 0f 00 00       	cmp    eax,0xffe
10005b88:	76 72                	jbe    10005bfc <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x8b>
10005b8a:	a1 00 00 00 00       	mov    eax,ds:0x0	10005b8b: R_386_32	desktop
10005b8f:	85 c9                	test   ecx,ecx
10005b91:	8b b8 08 04 00 00    	mov    edi,DWORD PTR [eax+0x408]
10005b97:	75 1a                	jne    10005bb3 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x42>
10005b99:	8b 00                	mov    eax,DWORD PTR [eax]
10005b9b:	8b 88 0c 04 00 00    	mov    ecx,DWORD PTR [eax+0x40c]
10005ba1:	0f af 88 10 04 00 00 	imul   ecx,DWORD PTR [eax+0x410]
10005ba8:	01 c9                	add    ecx,ecx
10005baa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005bac:	31 c0                	xor    eax,eax
10005bae:	e9 9b 00 00 00       	jmp    10005c4e <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xdd>
10005bb3:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
10005bb6:	8b 19                	mov    ebx,DWORD PTR [ecx]
10005bb8:	8b 69 08             	mov    ebp,DWORD PTR [ecx+0x8]
10005bbb:	8b 51 0c             	mov    edx,DWORD PTR [ecx+0xc]
10005bbe:	8d 0c 1b             	lea    ecx,[ebx+ebx*1]
10005bc1:	01 cf                	add    edi,ecx
10005bc3:	8d 0c 00             	lea    ecx,[eax+eax*1]
10005bc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005bc8:	8b 35 00 00 00 00    	mov    esi,DWORD PTR ds:0x0	10005bca: R_386_32	desktop
10005bce:	8b 0e                	mov    ecx,DWORD PTR [esi]
10005bd0:	01 d8                	add    eax,ebx
10005bd2:	8b 89 0c 04 00 00    	mov    ecx,DWORD PTR [ecx+0x40c]
10005bd8:	57                   	push   edi
10005bd9:	8d 44 01 ff          	lea    eax,[ecx+eax*1-0x1]
10005bdd:	57                   	push   edi
10005bde:	6a 00                	push   0x0
10005be0:	52                   	push   edx
10005be1:	99                   	cdq    
10005be2:	55                   	push   ebp
10005be3:	f7 f9                	idiv   ecx
10005be5:	50                   	push   eax
10005be6:	89 d8                	mov    eax,ebx
10005be8:	99                   	cdq    
10005be9:	f7 f9                	idiv   ecx
10005beb:	50                   	push   eax
10005bec:	56                   	push   esi
10005bed:	e8 fc ff ff ff       	call   10005bee <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0x7d>	10005bee: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10005bf2:	83 c4 20             	add    esp,0x20
10005bf5:	b8 04 00 00 00       	mov    eax,0x4
10005bfa:	eb 52                	jmp    10005c4e <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xdd>
10005bfc:	83 f9 01             	cmp    ecx,0x1
10005bff:	75 2d                	jne    10005c2e <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xbd>
10005c01:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c02: R_386_32	desktop
10005c06:	b9 00 02 00 00       	mov    ecx,0x200
10005c0b:	8d b8 08 02 00 00    	lea    edi,[eax+0x208]
10005c11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
10005c13:	a1 00 00 00 00       	mov    eax,ds:0x0	10005c14: R_386_32	desktop
10005c18:	8b 00                	mov    eax,DWORD PTR [eax]
10005c1a:	8b 88 0c 04 00 00    	mov    ecx,DWORD PTR [eax+0x40c]
10005c20:	c1 e1 10             	shl    ecx,0x10
10005c23:	0b 88 10 04 00 00    	or     ecx,DWORD PTR [eax+0x410]
10005c29:	89 c8                	mov    eax,ecx
10005c2b:	99                   	cdq    
10005c2c:	eb 22                	jmp    10005c50 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xdf>
10005c2e:	83 c8 ff             	or     eax,0xffffffff
10005c31:	83 f9 02             	cmp    ecx,0x2
10005c34:	89 c2                	mov    edx,eax
10005c36:	75 18                	jne    10005c50 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xdf>
10005c38:	83 ec 0c             	sub    esp,0xc
10005c3b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005c3d: R_386_32	desktop
10005c41:	e8 fc ff ff ff       	call   10005c42 <NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)+0xd1>	10005c42: R_386_PC32	NIDesktop::completeRefresh()
10005c46:	83 c4 10             	add    esp,0x10
10005c49:	b8 02 00 00 00       	mov    eax,0x2
10005c4e:	31 d2                	xor    edx,edx
10005c50:	83 c4 0c             	add    esp,0xc
10005c53:	5b                   	pop    ebx
10005c54:	5e                   	pop    esi
10005c55:	5f                   	pop    edi
10005c56:	5d                   	pop    ebp
10005c57:	c3                   	ret    

10005c58 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)>:
10005c58:	55                   	push   ebp
10005c59:	57                   	push   edi
10005c5a:	56                   	push   esi
10005c5b:	53                   	push   ebx
10005c5c:	81 ec 28 08 00 00    	sub    esp,0x828
10005c62:	8b bc 24 3c 08 00 00 	mov    edi,DWORD PTR [esp+0x83c]
10005c69:	8b 84 24 44 08 00 00 	mov    eax,DWORD PTR [esp+0x844]
10005c70:	0f b7 f7             	movzx  esi,di
10005c73:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
10005c77:	c1 ef 10             	shr    edi,0x10
10005c7a:	8b 84 24 40 08 00 00 	mov    eax,DWORD PTR [esp+0x840]
10005c81:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005c87:	53                   	push   ebx
10005c88:	e8 fc ff ff ff       	call   10005c89 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x31>	10005c89: R_386_PC32	NIWindow::request()
10005c8d:	83 c4 10             	add    esp,0x10
10005c90:	81 fe ff ff 00 00    	cmp    esi,0xffff
10005c96:	75 02                	jne    10005c9a <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x42>
10005c98:	31 f6                	xor    esi,esi
10005c9a:	81 ff ff ff 00 00    	cmp    edi,0xffff
10005ca0:	74 05                	je     10005ca7 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x4f>
10005ca2:	89 3c 24             	mov    DWORD PTR [esp],edi
10005ca5:	eb 09                	jmp    10005cb0 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x58>
10005ca7:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10005cad:	89 04 24             	mov    DWORD PTR [esp],eax
10005cb0:	8b ab 70 02 00 00    	mov    ebp,DWORD PTR [ebx+0x270]
10005cb6:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
10005cba:	0f af ee             	imul   ebp,esi
10005cbd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
10005cc1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
10005cc4:	7e 73                	jle    10005d39 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xe1>
10005cc6:	8d 84 24 10 08 00 00 	lea    eax,[esp+0x810]
10005ccd:	8d 0c 08             	lea    ecx,[eax+ecx*1]
10005cd0:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10005cd6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
10005cda:	01 c8                	add    eax,ecx
10005cdc:	c6 80 00 f8 ff ff 00 	mov    BYTE PTR [eax-0x800],0x0
10005ce3:	89 e8                	mov    eax,ebp
10005ce5:	89 c1                	mov    ecx,eax
10005ce7:	29 e9                	sub    ecx,ebp
10005ce9:	39 8b 70 02 00 00    	cmp    DWORD PTR [ebx+0x270],ecx
10005cef:	7e 40                	jle    10005d31 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd9>
10005cf1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
10005cf8:	89 d7                	mov    edi,edx
10005cfa:	8b 94 24 34 08 00 00 	mov    edx,DWORD PTR [esp+0x834]
10005d01:	8b 8a b8 00 00 00    	mov    ecx,DWORD PTR [edx+0xb8]
10005d07:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
10005d0a:	83 f9 ff             	cmp    ecx,0xffffffff
10005d0d:	74 1f                	je     10005d2e <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd6>
10005d0f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005d12:	39 0c 82             	cmp    DWORD PTR [edx+eax*4],ecx
10005d15:	74 11                	je     10005d28 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xd0>
10005d17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
10005d1b:	03 93 6c 02 00 00    	add    edx,DWORD PTR [ebx+0x26c]
10005d21:	c6 82 00 f8 ff ff 01 	mov    BYTE PTR [edx-0x800],0x1
10005d28:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10005d2b:	89 0c 3a             	mov    DWORD PTR [edx+edi*1],ecx
10005d2e:	40                   	inc    eax
10005d2f:	eb b4                	jmp    10005ce5 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x8d>
10005d31:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
10005d35:	89 c5                	mov    ebp,eax
10005d37:	eb 84                	jmp    10005cbd <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x65>
10005d39:	8b 83 8c 02 00 00    	mov    eax,DWORD PTR [ebx+0x28c]
10005d3f:	89 c2                	mov    edx,eax
10005d41:	83 e2 ef             	and    edx,0xffffffef
10005d44:	a8 20                	test   al,0x20
10005d46:	89 93 8c 02 00 00    	mov    DWORD PTR [ebx+0x28c],edx
10005d4c:	74 0c                	je     10005d5a <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x102>
10005d4e:	83 ec 0c             	sub    esp,0xc
10005d51:	53                   	push   ebx
10005d52:	e8 fc ff ff ff       	call   10005d53 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0xfb>	10005d53: R_386_PC32	NIWindow::drawResizeMarker()
10005d57:	83 c4 10             	add    esp,0x10
10005d5a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
10005d5f:	74 1c                	je     10005d7d <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x125>
10005d61:	83 ec 0c             	sub    esp,0xc
10005d64:	8d 44 24 1c          	lea    eax,[esp+0x1c]
10005d68:	50                   	push   eax
10005d69:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
10005d6d:	56                   	push   esi
10005d6e:	53                   	push   ebx
10005d6f:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005d71: R_386_32	desktop
10005d75:	e8 fc ff ff ff       	call   10005d76 <NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)+0x11e>	10005d76: R_386_PC32	NIDesktop::refreshWindowBounds(NIWindow*, int, int, bool*)
10005d7a:	83 c4 20             	add    esp,0x20
10005d7d:	81 c4 1c 08 00 00    	add    esp,0x81c
10005d83:	31 c0                	xor    eax,eax
10005d85:	5b                   	pop    ebx
10005d86:	31 d2                	xor    edx,edx
10005d88:	5e                   	pop    esi
10005d89:	5f                   	pop    edi
10005d8a:	5d                   	pop    ebp
10005d8b:	c3                   	ret    

10005d8c <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10005d8c:	83 ec 10             	sub    esp,0x10
10005d8f:	6a 00                	push   0x0
10005d91:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
10005d95:	6a ff                	push   0xffffffff
10005d97:	e8 fc ff ff ff       	call   10005d98 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0xc>	10005d98: R_386_PC32	NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)
10005d9c:	58                   	pop    eax
10005d9d:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0	10005d9f: R_386_32	desktop
10005da3:	e8 fc ff ff ff       	call   10005da4 <NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)+0x18>	10005da4: R_386_PC32	NIDesktop::completeRefresh()
10005da8:	31 c0                	xor    eax,eax
10005daa:	31 d2                	xor    edx,edx
10005dac:	83 c4 1c             	add    esp,0x1c
10005daf:	c3                   	ret    

10005db0 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)>:
10005db0:	53                   	push   ebx
10005db1:	83 ec 14             	sub    esp,0x14
10005db4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
10005db8:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10005dbe:	53                   	push   ebx
10005dbf:	e8 fc ff ff ff       	call   10005dc0 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x10>	10005dc0: R_386_PC32	NIWindow::request()
10005dc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
10005dc7:	e8 fc ff ff ff       	call   10005dc8 <NiLinkCommandClearFramebuffer(unsigned long, NiLinkWindowStruct*)+0x18>	10005dc8: R_386_PC32	NIWindow::drawBasicWindow()
10005dcc:	31 c0                	xor    eax,eax
10005dce:	31 d2                	xor    edx,edx
10005dd0:	83 c4 18             	add    esp,0x18
10005dd3:	5b                   	pop    ebx
10005dd4:	c3                   	ret    

10005dd5 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)>:
10005dd5:	55                   	push   ebp
10005dd6:	57                   	push   edi
10005dd7:	56                   	push   esi
10005dd8:	53                   	push   ebx
10005dd9:	83 ec 38             	sub    esp,0x38
10005ddc:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
10005de0:	8b 9d a0 00 00 00    	mov    ebx,DWORD PTR [ebp+0xa0]
10005de6:	53                   	push   ebx
10005de7:	e8 fc ff ff ff       	call   10005de8 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x13>	10005de8: R_386_PC32	NIWindow::getEventCount()
10005dec:	83 c4 10             	add    esp,0x10
10005def:	85 c0                	test   eax,eax
10005df1:	74 54                	je     10005e47 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x72>
10005df3:	89 e6                	mov    esi,esp
10005df5:	8d bd c0 00 00 00    	lea    edi,[ebp+0xc0]
10005dfb:	50                   	push   eax
10005dfc:	50                   	push   eax
10005dfd:	53                   	push   ebx
10005dfe:	56                   	push   esi
10005dff:	e8 fc ff ff ff       	call   10005e00 <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x2b>	10005e00: R_386_PC32	NIWindow::grabEvent()
10005e04:	b9 06 00 00 00       	mov    ecx,0x6
10005e09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10005e0b:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
10005e11:	89 85 a4 00 00 00    	mov    DWORD PTR [ebp+0xa4],eax
10005e17:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10005e1d:	89 85 a8 00 00 00    	mov    DWORD PTR [ebp+0xa8],eax
10005e23:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10005e29:	89 85 ac 00 00 00    	mov    DWORD PTR [ebp+0xac],eax
10005e2f:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10005e35:	89 85 b0 00 00 00    	mov    DWORD PTR [ebp+0xb0],eax
10005e3b:	53                   	push   ebx
10005e3c:	e8 fc ff ff ff       	call   10005e3d <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x68>	10005e3d: R_386_PC32	NIWindow::getEventCount()
10005e41:	83 c4 10             	add    esp,0x10
10005e44:	99                   	cdq    
10005e45:	eb 05                	jmp    10005e4c <NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)+0x77>
10005e47:	83 c8 ff             	or     eax,0xffffffff
10005e4a:	89 c2                	mov    edx,eax
10005e4c:	83 c4 2c             	add    esp,0x2c
10005e4f:	5b                   	pop    ebx
10005e50:	5e                   	pop    esi
10005e51:	5f                   	pop    edi
10005e52:	5d                   	pop    ebp
10005e53:	c3                   	ret    

10005e54 <NiLinkCommandReadFlags(unsigned long, NiLinkWindowStruct*)>:
10005e54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005e58:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
10005e5e:	8b 8a 8c 02 00 00    	mov    ecx,DWORD PTR [edx+0x28c]
10005e64:	89 88 b4 00 00 00    	mov    DWORD PTR [eax+0xb4],ecx
10005e6a:	8b 8a 68 02 00 00    	mov    ecx,DWORD PTR [edx+0x268]
10005e70:	89 88 a4 00 00 00    	mov    DWORD PTR [eax+0xa4],ecx
10005e76:	8b 8a 6c 02 00 00    	mov    ecx,DWORD PTR [edx+0x26c]
10005e7c:	89 88 a8 00 00 00    	mov    DWORD PTR [eax+0xa8],ecx
10005e82:	8b 8a 70 02 00 00    	mov    ecx,DWORD PTR [edx+0x270]
10005e88:	89 88 ac 00 00 00    	mov    DWORD PTR [eax+0xac],ecx
10005e8e:	8b 92 74 02 00 00    	mov    edx,DWORD PTR [edx+0x274]
10005e94:	89 90 b0 00 00 00    	mov    DWORD PTR [eax+0xb0],edx
10005e9a:	31 c0                	xor    eax,eax
10005e9c:	31 d2                	xor    edx,edx
10005e9e:	c3                   	ret    

10005e9f <NiLinkCommandUpdateFlags(unsigned long, NiLinkWindowStruct*)>:
10005e9f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005ea3:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
10005ea9:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [eax+0xb4]
10005eaf:	89 82 8c 02 00 00    	mov    DWORD PTR [edx+0x28c],eax
10005eb5:	31 c0                	xor    eax,eax
10005eb7:	31 d2                	xor    edx,edx
10005eb9:	c3                   	ret    

10005eba <NiLinkCommandBeTheDesktop(unsigned long, unsigned char*)>:
10005eba:	31 d2                	xor    edx,edx
10005ebc:	b8 01 00 00 00       	mov    eax,0x1
10005ec1:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	10005ec3: R_386_32	desktopWindowDummy
10005ec8:	75 0d                	jne    10005ed7 <NiLinkCommandBeTheDesktop(unsigned long, unsigned char*)+0x1d>
10005eca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
10005ece:	31 d2                	xor    edx,edx
10005ed0:	a3 00 00 00 00       	mov    ds:0x0,eax	10005ed1: R_386_32	desktopWindowDummy
10005ed5:	31 c0                	xor    eax,eax
10005ed7:	c3                   	ret    

10005ed8 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)>:
10005ed8:	53                   	push   ebx
10005ed9:	83 ec 08             	sub    esp,0x8
10005edc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
10005ee0:	a1 00 00 00 00       	mov    eax,ds:0x0	10005ee1: R_386_32	desktop
10005ee5:	85 d2                	test   edx,edx
10005ee7:	75 0c                	jne    10005ef5 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x1d>
10005ee9:	c7 80 20 04 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x420],0x0
10005ef3:	eb 20                	jmp    10005f15 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
10005ef5:	83 fa 01             	cmp    edx,0x1
10005ef8:	75 0c                	jne    10005f06 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x2e>
10005efa:	c7 80 20 04 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x420],0x200
10005f04:	eb 0f                	jmp    10005f15 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
10005f06:	83 fa 02             	cmp    edx,0x2
10005f09:	75 0a                	jne    10005f15 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x3d>
10005f0b:	c7 80 20 04 00 00 00 01 00 00 	mov    DWORD PTR [eax+0x420],0x100
10005f15:	8b 88 14 04 00 00    	mov    ecx,DWORD PTR [eax+0x414]
10005f1b:	8b 90 18 04 00 00    	mov    edx,DWORD PTR [eax+0x418]
10005f21:	53                   	push   ebx
10005f22:	53                   	push   ebx
10005f23:	8d 59 20             	lea    ebx,[ecx+0x20]
10005f26:	6a 00                	push   0x0
10005f28:	53                   	push   ebx
10005f29:	51                   	push   ecx
10005f2a:	8d 4a 20             	lea    ecx,[edx+0x20]
10005f2d:	51                   	push   ecx
10005f2e:	52                   	push   edx
10005f2f:	50                   	push   eax
10005f30:	e8 fc ff ff ff       	call   10005f31 <NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)+0x59>	10005f31: R_386_PC32	NIDesktop::rangeRefresh(int, int, int, int, bool*)
10005f35:	83 c4 14             	add    esp,0x14
10005f38:	a1 00 00 00 00       	mov    eax,ds:0x0	10005f39: R_386_32	desktop
10005f3d:	8b 10                	mov    edx,DWORD PTR [eax]
10005f3f:	8b 8a 08 04 00 00    	mov    ecx,DWORD PTR [edx+0x408]
10005f45:	8b 19                	mov    ebx,DWORD PTR [ecx]
10005f47:	6a 00                	push   0x0
10005f49:	8b 90 20 04 00 00    	mov    edx,DWORD PTR [eax+0x420]
10005f4f:	81 c2 00 00 00 00    	add    edx,0x0	10005f51: R_386_32	___mouse_data
10005f55:	52                   	push   edx
10005f56:	ff b0 18 04 00 00    	push   DWORD PTR [eax+0x418]
10005f5c:	ff b0 14 04 00 00    	push   DWORD PTR [eax+0x414]
10005f62:	51                   	push   ecx
10005f63:	ff 53 30             	call   DWORD PTR [ebx+0x30]
10005f66:	31 c0                	xor    eax,eax
10005f68:	31 d2                	xor    edx,edx
10005f6a:	83 c4 28             	add    esp,0x28
10005f6d:	5b                   	pop    ebx
10005f6e:	c3                   	ret    

10005f6f <NiSystemCallHandler(regs*)>:
10005f6f:	53                   	push   ebx
10005f70:	83 ec 08             	sub    esp,0x8
10005f73:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
10005f77:	fa                   	cli    
10005f78:	ff 05 00 00 00 00    	inc    DWORD PTR ds:0x0	10005f7a: R_386_32	irqDisableCounter
10005f7e:	8b 59 20             	mov    ebx,DWORD PTR [ecx+0x20]
10005f81:	83 fb 08             	cmp    ebx,0x8
10005f84:	0f 84 e0 00 00 00    	je     1000606a <NiSystemCallHandler(regs*)+0xfb>
10005f8a:	77 2a                	ja     10005fb6 <NiSystemCallHandler(regs*)+0x47>
10005f8c:	83 fb 05             	cmp    ebx,0x5
10005f8f:	0f 84 90 00 00 00    	je     10006025 <NiSystemCallHandler(regs*)+0xb6>
10005f95:	77 0b                	ja     10005fa2 <NiSystemCallHandler(regs*)+0x33>
10005f97:	85 db                	test   ebx,ebx
10005f99:	74 66                	je     10006001 <NiSystemCallHandler(regs*)+0x92>
10005f9b:	83 fb 04             	cmp    ebx,0x4
10005f9e:	74 73                	je     10006013 <NiSystemCallHandler(regs*)+0xa4>
10005fa0:	eb 55                	jmp    10005ff7 <NiSystemCallHandler(regs*)+0x88>
10005fa2:	83 fb 06             	cmp    ebx,0x6
10005fa5:	0f 84 99 00 00 00    	je     10006044 <NiSystemCallHandler(regs*)+0xd5>
10005fab:	83 fb 07             	cmp    ebx,0x7
10005fae:	0f 84 9f 00 00 00    	je     10006053 <NiSystemCallHandler(regs*)+0xe4>
10005fb4:	eb 41                	jmp    10005ff7 <NiSystemCallHandler(regs*)+0x88>
10005fb6:	83 fb 0b             	cmp    ebx,0xb
10005fb9:	0f 84 d9 00 00 00    	je     10006098 <NiSystemCallHandler(regs*)+0x129>
10005fbf:	77 14                	ja     10005fd5 <NiSystemCallHandler(regs*)+0x66>
10005fc1:	83 fb 09             	cmp    ebx,0x9
10005fc4:	0f 84 af 00 00 00    	je     10006079 <NiSystemCallHandler(regs*)+0x10a>
10005fca:	83 fb 0a             	cmp    ebx,0xa
10005fcd:	0f 84 b5 00 00 00    	je     10006088 <NiSystemCallHandler(regs*)+0x119>
10005fd3:	eb 22                	jmp    10005ff7 <NiSystemCallHandler(regs*)+0x88>
10005fd5:	83 fb 0d             	cmp    ebx,0xd
10005fd8:	0f 84 e7 00 00 00    	je     100060c5 <NiSystemCallHandler(regs*)+0x156>
10005fde:	0f 82 c3 00 00 00    	jb     100060a7 <NiSystemCallHandler(regs*)+0x138>
10005fe4:	31 d2                	xor    edx,edx
10005fe6:	b8 04 00 00 00       	mov    eax,0x4
10005feb:	81 fb 96 78 34 a5    	cmp    ebx,0xa5347896
10005ff1:	0f 84 de 00 00 00    	je     100060d5 <NiSystemCallHandler(regs*)+0x166>
10005ff7:	83 c8 ff             	or     eax,0xffffffff
10005ffa:	89 c2                	mov    edx,eax
10005ffc:	e9 d4 00 00 00       	jmp    100060d5 <NiSystemCallHandler(regs*)+0x166>
10006001:	53                   	push   ebx
10006002:	53                   	push   ebx
10006003:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006006:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006009:	e8 fc ff ff ff       	call   1000600a <NiSystemCallHandler(regs*)+0x9b>	1000600a: R_386_PC32	NiLinkCommandCreateWindow(unsigned long, NiLinkWindowStruct*)
1000600e:	e9 bf 00 00 00       	jmp    100060d2 <NiSystemCallHandler(regs*)+0x163>
10006013:	52                   	push   edx
10006014:	52                   	push   edx
10006015:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006018:	ff 71 28             	push   DWORD PTR [ecx+0x28]
1000601b:	e8 fc ff ff ff       	call   1000601c <NiSystemCallHandler(regs*)+0xad>	1000601c: R_386_PC32	NiLinkCommandResupplyFramebuffer(unsigned long, NiLinkWindowStruct*)
10006020:	e9 ad 00 00 00       	jmp    100060d2 <NiSystemCallHandler(regs*)+0x163>
10006025:	83 ec 0c             	sub    esp,0xc
10006028:	8b 41 24             	mov    eax,DWORD PTR [ecx+0x24]
1000602b:	8b 98 a0 00 00 00    	mov    ebx,DWORD PTR [eax+0xa0]
10006031:	53                   	push   ebx
10006032:	e8 fc ff ff ff       	call   10006033 <NiSystemCallHandler(regs*)+0xc4>	10006033: R_386_PC32	NIWindow::request()
10006037:	89 1c 24             	mov    DWORD PTR [esp],ebx
1000603a:	e8 fc ff ff ff       	call   1000603b <NiSystemCallHandler(regs*)+0xcc>	1000603b: R_386_PC32	NIWindow::drawBasicWindow()
1000603f:	83 c4 10             	add    esp,0x10
10006042:	eb 7b                	jmp    100060bf <NiSystemCallHandler(regs*)+0x150>
10006044:	50                   	push   eax
10006045:	50                   	push   eax
10006046:	ff 71 24             	push   DWORD PTR [ecx+0x24]
10006049:	ff 71 28             	push   DWORD PTR [ecx+0x28]
1000604c:	e8 fc ff ff ff       	call   1000604d <NiSystemCallHandler(regs*)+0xde>	1000604d: R_386_PC32	NiLinkCommandGetEvents(unsigned long, NiLinkWindowStruct*)
10006051:	eb 7f                	jmp    100060d2 <NiSystemCallHandler(regs*)+0x163>
10006053:	8b 41 24             	mov    eax,DWORD PTR [ecx+0x24]
10006056:	8b 90 a0 00 00 00    	mov    edx,DWORD PTR [eax+0xa0]
1000605c:	8b 80 b4 00 00 00    	mov    eax,DWORD PTR [eax+0xb4]
10006062:	89 82 8c 02 00 00    	mov    DWORD PTR [edx+0x28c],eax
10006068:	eb 55                	jmp    100060bf <NiSystemCallHandler(regs*)+0x150>
1000606a:	50                   	push   eax
1000606b:	50                   	push   eax
1000606c:	ff 71 24             	push   DWORD PTR [ecx+0x24]
1000606f:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006072:	e8 fc ff ff ff       	call   10006073 <NiSystemCallHandler(regs*)+0x104>	10006073: R_386_PC32	NiLinkCommandRedraw(unsigned long, NiLinkWindowStruct*)
10006077:	eb 59                	jmp    100060d2 <NiSystemCallHandler(regs*)+0x163>
10006079:	50                   	push   eax
1000607a:	50                   	push   eax
1000607b:	ff 71 24             	push   DWORD PTR [ecx+0x24]
1000607e:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006081:	e8 fc ff ff ff       	call   10006082 <NiSystemCallHandler(regs*)+0x113>	10006082: R_386_PC32	NiLinkCommandReadFlags(unsigned long, NiLinkWindowStruct*)
10006086:	eb 4a                	jmp    100060d2 <NiSystemCallHandler(regs*)+0x163>
10006088:	50                   	push   eax
10006089:	6a 01                	push   0x1
1000608b:	ff 71 24             	push   DWORD PTR [ecx+0x24]
1000608e:	ff 71 28             	push   DWORD PTR [ecx+0x28]
10006091:	e8 fc ff ff ff       	call   10006092 <NiSystemCallHandler(regs*)+0x123>	10006092: R_386_PC32	NiLinkCommandResupplyScanline(unsigned long, NiLinkWindowStruct*, bool)
10006096:	eb 3a                	jmp    100060d2 <NiSystemCallHandler(regs*)+0x163>
10006098:	50                   	push   eax
10006099:	50                   	push   eax
1000609a:	ff 71 24             	push   DWORD PTR [ecx+0x24]
1000609d:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100060a0:	e8 fc ff ff ff       	call   100060a1 <NiSystemCallHandler(regs*)+0x132>	100060a1: R_386_PC32	NiLinkCommandResupplyDesktop(unsigned long, unsigned short*)
100060a5:	eb 2b                	jmp    100060d2 <NiSystemCallHandler(regs*)+0x163>
100060a7:	31 d2                	xor    edx,edx
100060a9:	b8 01 00 00 00       	mov    eax,0x1
100060ae:	83 3d 00 00 00 00 00 	cmp    DWORD PTR ds:0x0,0x0	100060b0: R_386_32	desktopWindowDummy
100060b5:	75 1e                	jne    100060d5 <NiSystemCallHandler(regs*)+0x166>
100060b7:	8b 41 24             	mov    eax,DWORD PTR [ecx+0x24]
100060ba:	a3 00 00 00 00       	mov    ds:0x0,eax	100060bb: R_386_32	desktopWindowDummy
100060bf:	31 c0                	xor    eax,eax
100060c1:	31 d2                	xor    edx,edx
100060c3:	eb 10                	jmp    100060d5 <NiSystemCallHandler(regs*)+0x166>
100060c5:	50                   	push   eax
100060c6:	50                   	push   eax
100060c7:	ff 71 24             	push   DWORD PTR [ecx+0x24]
100060ca:	ff 71 28             	push   DWORD PTR [ecx+0x28]
100060cd:	e8 fc ff ff ff       	call   100060ce <NiSystemCallHandler(regs*)+0x15f>	100060ce: R_386_PC32	NiLinkCommandSetCursor(unsigned long, NiLinkWindowStruct*)
100060d2:	83 c4 10             	add    esp,0x10
100060d5:	ff 0d 00 00 00 00    	dec    DWORD PTR ds:0x0	100060d7: R_386_32	irqDisableCounter
100060db:	75 01                	jne    100060de <NiSystemCallHandler(regs*)+0x16f>
100060dd:	fb                   	sti    
100060de:	83 c4 08             	add    esp,0x8
100060e1:	5b                   	pop    ebx
100060e2:	c3                   	ret    
100060e3:	90                   	nop

100060e4 <NIWindow::postEvent(NiEvent)>:
100060e4:	55                   	push   ebp
100060e5:	57                   	push   edi
100060e6:	56                   	push   esi
100060e7:	53                   	push   ebx
100060e8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
100060ec:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
100060ef:	83 fd 18             	cmp    ebp,0x18
100060f2:	74 25                	je     10006119 <NIWindow::postEvent(NiEvent)+0x35>
100060f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
100060f7:	8d 74 24 18          	lea    esi,[esp+0x18]
100060fb:	6b d0 18             	imul   edx,eax,0x18
100060fe:	b9 06 00 00 00       	mov    ecx,0x6
10006103:	8d 7c 13 1c          	lea    edi,[ebx+edx*1+0x1c]
10006107:	40                   	inc    eax
10006108:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
1000610a:	99                   	cdq    
1000610b:	b9 18 00 00 00       	mov    ecx,0x18
10006110:	45                   	inc    ebp
10006111:	f7 f9                	idiv   ecx
10006113:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
10006116:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
10006119:	5b                   	pop    ebx
1000611a:	5e                   	pop    esi
1000611b:	5f                   	pop    edi
1000611c:	5d                   	pop    ebp
1000611d:	c3                   	ret    

1000611e <NIWindow::getEventCount()>:
1000611e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10006122:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
10006125:	c3                   	ret    

10006126 <NIWindow::grabEvent()>:
10006126:	57                   	push   edi
10006127:	b9 06 00 00 00       	mov    ecx,0x6
1000612c:	56                   	push   esi
1000612d:	53                   	push   ebx
1000612e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
10006132:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
10006136:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
10006139:	6b c2 18             	imul   eax,edx,0x18
1000613c:	01 d8                	add    eax,ebx
1000613e:	8d 70 1c             	lea    esi,[eax+0x1c]
10006141:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
10006143:	b9 18 00 00 00       	mov    ecx,0x18
10006148:	81 60 20 ff 1f 00 80 	and    DWORD PTR [eax+0x20],0x80001fff
1000614f:	8d 42 01             	lea    eax,[edx+0x1]
10006152:	ff 4b 10             	dec    DWORD PTR [ebx+0x10]
10006155:	99                   	cdq    
10006156:	f7 f9                	idiv   ecx
10006158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
1000615c:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
1000615f:	5b                   	pop    ebx
10006160:	5e                   	pop    esi
10006161:	5f                   	pop    edi
10006162:	c2 04 00             	ret    0x4
10006165:	90                   	nop

10006166 <NIWindow::invalidate()>:
10006166:	53                   	push   ebx
10006167:	83 ec 08             	sub    esp,0x8
1000616a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
1000616e:	80 bb 5c 02 00 00 00 	cmp    BYTE PTR [ebx+0x25c],0x0
10006175:	74 28                	je     1000619f <NIWindow::invalidate()+0x39>
10006177:	83 bb 64 02 00 00 00 	cmp    DWORD PTR [ebx+0x264],0x0
1000617e:	74 1f                	je     1000619f <NIWindow::invalidate()+0x39>
10006180:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
10006183:	85 c0                	test   eax,eax
10006185:	74 18                	je     1000619f <NIWindow::invalidate()+0x39>
10006187:	83 ec 0c             	sub    esp,0xc
1000618a:	50                   	push   eax
1000618b:	e8 fc ff ff ff       	call   1000618c <NIWindow::invalidate()+0x26>	1000618c: R_386_PC32	free
10006190:	59                   	pop    ecx
10006191:	ff b3 64 02 00 00    	push   DWORD PTR [ebx+0x264]
10006197:	e8 fc ff ff ff       	call   10006198 <NIWindow::invalidate()+0x32>	10006198: R_386_PC32	free
1000619c:	83 c4 10             	add    esp,0x10
1000619f:	c7 83 64 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x264],0x0
100061a9:	c7 83 60 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x260],0x0
100061b3:	c6 83 5c 02 00 00 00 	mov    BYTE PTR [ebx+0x25c],0x0
100061ba:	c6 43 0c 00          	mov    BYTE PTR [ebx+0xc],0x0
100061be:	83 8b 8c 02 00 00 10 	or     DWORD PTR [ebx+0x28c],0x10
100061c5:	83 c4 08             	add    esp,0x8
100061c8:	5b                   	pop    ebx
100061c9:	c3                   	ret    

100061ca <NIWindow::putpixel(int, int, unsigned int)>:
100061ca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
100061ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
100061d2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100061d6:	0f af 82 70 02 00 00 	imul   eax,DWORD PTR [edx+0x270]
100061dd:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
100061e0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
100061e4:	89 0c 82             	mov    DWORD PTR [edx+eax*4],ecx
100061e7:	c3                   	ret    

100061e8 <NIWindow::drawBasicWindow()>:
100061e8:	55                   	push   ebp
100061e9:	57                   	push   edi
100061ea:	56                   	push   esi
100061eb:	31 f6                	xor    esi,esi
100061ed:	53                   	push   ebx
100061ee:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
100061f2:	39 b5 74 02 00 00    	cmp    DWORD PTR [ebp+0x274],esi
100061f8:	7e 31                	jle    1000622b <NIWindow::drawBasicWindow()+0x43>
100061fa:	31 db                	xor    ebx,ebx
100061fc:	83 fe 19             	cmp    esi,0x19
100061ff:	0f 9e c3             	setle  bl
10006202:	31 ff                	xor    edi,edi
10006204:	4b                   	dec    ebx
10006205:	81 e3 d5 d4 d4 ff    	and    ebx,0xffd4d4d5
1000620b:	81 c3 ff ff ff 00    	add    ebx,0xffffff
10006211:	39 bd 70 02 00 00    	cmp    DWORD PTR [ebp+0x270],edi
10006217:	7e 0f                	jle    10006228 <NIWindow::drawBasicWindow()+0x40>
10006219:	53                   	push   ebx
1000621a:	56                   	push   esi
1000621b:	57                   	push   edi
1000621c:	47                   	inc    edi
1000621d:	55                   	push   ebp
1000621e:	e8 fc ff ff ff       	call   1000621f <NIWindow::drawBasicWindow()+0x37>	1000621f: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006223:	83 c4 10             	add    esp,0x10
10006226:	eb e9                	jmp    10006211 <NIWindow::drawBasicWindow()+0x29>
10006228:	46                   	inc    esi
10006229:	eb c7                	jmp    100061f2 <NIWindow::drawBasicWindow()+0xa>
1000622b:	5b                   	pop    ebx
1000622c:	5e                   	pop    esi
1000622d:	5f                   	pop    edi
1000622e:	5d                   	pop    ebp
1000622f:	c3                   	ret    

10006230 <NIWindow::rerender()>:
10006230:	57                   	push   edi
10006231:	56                   	push   esi
10006232:	53                   	push   ebx
10006233:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
10006237:	80 bb 5c 02 00 00 00 	cmp    BYTE PTR [ebx+0x25c],0x0
1000623e:	74 0c                	je     1000624c <NIWindow::rerender()+0x1c>
10006240:	83 ec 0c             	sub    esp,0xc
10006243:	53                   	push   ebx
10006244:	e8 fc ff ff ff       	call   10006245 <NIWindow::rerender()+0x15>	10006245: R_386_PC32	NIWindow::invalidate()
10006249:	83 c4 10             	add    esp,0x10
1000624c:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
10006252:	83 ec 0c             	sub    esp,0xc
10006255:	89 b3 60 02 00 00    	mov    DWORD PTR [ebx+0x260],esi
1000625b:	8d 04 b5 00 00 00 00 	lea    eax,[esi*4+0x0]
10006262:	50                   	push   eax
10006263:	e8 fc ff ff ff       	call   10006264 <NIWindow::rerender()+0x34>	10006264: R_386_PC32	malloc
10006268:	0f af b3 70 02 00 00 	imul   esi,DWORD PTR [ebx+0x270]
1000626f:	89 83 64 02 00 00    	mov    DWORD PTR [ebx+0x264],eax
10006275:	0f af 73 04          	imul   esi,DWORD PTR [ebx+0x4]
10006279:	89 34 24             	mov    DWORD PTR [esp],esi
1000627c:	e8 fc ff ff ff       	call   1000627d <NIWindow::rerender()+0x4d>	1000627d: R_386_PC32	malloc
10006281:	83 c4 10             	add    esp,0x10
10006284:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
10006287:	31 c0                	xor    eax,eax
10006289:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
1000628f:	0f 8e 91 00 00 00    	jle    10006326 <NIWindow::rerender()+0xf6>
10006295:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
1000629c:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
100062a2:	01 d1                	add    ecx,edx
100062a4:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
100062ab:	75 61                	jne    1000630e <NIWindow::rerender()+0xde>
100062ad:	f6 83 8c 02 00 00 80 	test   BYTE PTR [ebx+0x28c],0x80
100062b4:	75 58                	jne    1000630e <NIWindow::rerender()+0xde>
100062b6:	83 f8 06             	cmp    eax,0x6
100062b9:	7f 1e                	jg     100062d9 <NIWindow::rerender()+0xa9>
100062bb:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	100062be: R_386_32	curveLookup7
100062c2:	66 89 31             	mov    WORD PTR [ecx],si
100062c5:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
100062cb:	8b 34 85 00 00 00 00 	mov    esi,DWORD PTR [eax*4+0x0]	100062ce: R_386_32	curveLookup7
100062d2:	66 89 74 11 02       	mov    WORD PTR [ecx+edx*1+0x2],si
100062d7:	eb 47                	jmp    10006320 <NIWindow::rerender()+0xf0>
100062d9:	8b b3 74 02 00 00    	mov    esi,DWORD PTR [ebx+0x274]
100062df:	8d 7e fa             	lea    edi,[esi-0x6]
100062e2:	39 c7                	cmp    edi,eax
100062e4:	7f 28                	jg     1000630e <NIWindow::rerender()+0xde>
100062e6:	29 c6                	sub    esi,eax
100062e8:	8b 34 b5 00 00 00 00 	mov    esi,DWORD PTR [esi*4+0x0]	100062eb: R_386_32	curveLookup7
100062ef:	66 89 31             	mov    WORD PTR [ecx],si
100062f2:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
100062f8:	8b b3 64 02 00 00    	mov    esi,DWORD PTR [ebx+0x264]
100062fe:	29 c1                	sub    ecx,eax
10006300:	8b 0c 8d 00 00 00 00 	mov    ecx,DWORD PTR [ecx*4+0x0]	10006303: R_386_32	curveLookup7
10006307:	66 89 4c 16 02       	mov    WORD PTR [esi+edx*1+0x2],cx
1000630c:	eb 12                	jmp    10006320 <NIWindow::rerender()+0xf0>
1000630e:	66 c7 01 00 00       	mov    WORD PTR [ecx],0x0
10006313:	8b 8b 64 02 00 00    	mov    ecx,DWORD PTR [ebx+0x264]
10006319:	66 c7 44 11 02 00 00 	mov    WORD PTR [ecx+edx*1+0x2],0x0
10006320:	40                   	inc    eax
10006321:	e9 63 ff ff ff       	jmp    10006289 <NIWindow::rerender()+0x59>
10006326:	8b 83 8c 02 00 00    	mov    eax,DWORD PTR [ebx+0x28c]
1000632c:	c6 83 5c 02 00 00 01 	mov    BYTE PTR [ebx+0x25c],0x1
10006333:	a8 02                	test   al,0x2
10006335:	75 31                	jne    10006368 <NIWindow::rerender()+0x138>
10006337:	a8 04                	test   al,0x4
10006339:	74 18                	je     10006353 <NIWindow::rerender()+0x123>
1000633b:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
10006341:	31 c0                	xor    eax,eax
10006343:	0f af 8b 70 02 00 00 	imul   ecx,DWORD PTR [ebx+0x270]
1000634a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
1000634d:	0f af 4b 04          	imul   ecx,DWORD PTR [ebx+0x4]
10006351:	f3 aa                	rep stos BYTE PTR es:[edi],al
10006353:	f6 83 8c 02 00 00 08 	test   BYTE PTR [ebx+0x28c],0x8
1000635a:	74 0c                	je     10006368 <NIWindow::rerender()+0x138>
1000635c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
10006360:	5b                   	pop    ebx
10006361:	5e                   	pop    esi
10006362:	5f                   	pop    edi
10006363:	e9 80 fe ff ff       	jmp    100061e8 <NIWindow::drawBasicWindow()>
10006368:	5b                   	pop    ebx
10006369:	5e                   	pop    esi
1000636a:	5f                   	pop    edi
1000636b:	c3                   	ret    

1000636c <NIWindow::changeContext(NIContext*, int, int)>:
1000636c:	55                   	push   ebp
1000636d:	57                   	push   edi
1000636e:	56                   	push   esi
1000636f:	53                   	push   ebx
10006370:	83 ec 18             	sub    esp,0x18
10006373:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
10006377:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
1000637b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
1000637f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
10006383:	53                   	push   ebx
10006384:	e8 fc ff ff ff       	call   10006385 <NIWindow::changeContext(NIContext*, int, int)+0x19>	10006385: R_386_PC32	NIWindow::invalidate()
10006389:	89 33                	mov    DWORD PTR [ebx],esi
1000638b:	89 ab 68 02 00 00    	mov    DWORD PTR [ebx+0x268],ebp
10006391:	89 bb 6c 02 00 00    	mov    DWORD PTR [ebx+0x26c],edi
10006397:	83 c4 10             	add    esp,0x10
1000639a:	8b 86 18 04 00 00    	mov    eax,DWORD PTR [esi+0x418]
100063a0:	83 f8 08             	cmp    eax,0x8
100063a3:	7f 09                	jg     100063ae <NIWindow::changeContext(NIContext*, int, int)+0x42>
100063a5:	c7 43 04 01 00 00 00 	mov    DWORD PTR [ebx+0x4],0x1
100063ac:	eb 15                	jmp    100063c3 <NIWindow::changeContext(NIContext*, int, int)+0x57>
100063ae:	83 f8 10             	cmp    eax,0x10
100063b1:	7f 09                	jg     100063bc <NIWindow::changeContext(NIContext*, int, int)+0x50>
100063b3:	c7 43 04 02 00 00 00 	mov    DWORD PTR [ebx+0x4],0x2
100063ba:	eb 07                	jmp    100063c3 <NIWindow::changeContext(NIContext*, int, int)+0x57>
100063bc:	c7 43 04 04 00 00 00 	mov    DWORD PTR [ebx+0x4],0x4
100063c3:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
100063c7:	83 c4 0c             	add    esp,0xc
100063ca:	5b                   	pop    ebx
100063cb:	5e                   	pop    esi
100063cc:	5f                   	pop    edi
100063cd:	5d                   	pop    ebp
100063ce:	e9 5d fe ff ff       	jmp    10006230 <NIWindow::rerender()>
100063d3:	90                   	nop

100063d4 <NIWindow::NIWindow(NIContext*, int, int, int, int)>:
100063d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
100063d8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
100063dc:	c6 80 78 02 00 00 00 	mov    BYTE PTR [eax+0x278],0x0
100063e3:	89 90 70 02 00 00    	mov    DWORD PTR [eax+0x270],edx
100063e9:	c7 80 8c 02 00 00 00 02 00 00 	mov    DWORD PTR [eax+0x28c],0x200
100063f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
100063f7:	c6 80 5c 02 00 00 00 	mov    BYTE PTR [eax+0x25c],0x0
100063fe:	89 90 74 02 00 00    	mov    DWORD PTR [eax+0x274],edx
10006404:	c7 80 64 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x264],0x0
1000640e:	c7 80 60 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x260],0x0
10006418:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
1000641f:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
10006426:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
1000642d:	e9 3a ff ff ff       	jmp    1000636c <NIWindow::changeContext(NIContext*, int, int)>

10006432 <NIWindow::request()>:
10006432:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
10006436:	80 b8 5c 02 00 00 00 	cmp    BYTE PTR [eax+0x25c],0x0
1000643d:	75 05                	jne    10006444 <NIWindow::request()+0x12>
1000643f:	e9 ec fd ff ff       	jmp    10006230 <NIWindow::rerender()>
10006444:	c3                   	ret    
10006445:	90                   	nop

10006446 <NIWindow::SHADOW_TEST()>:
10006446:	55                   	push   ebp
10006447:	57                   	push   edi
10006448:	56                   	push   esi
10006449:	53                   	push   ebx
1000644a:	83 ec 28             	sub    esp,0x28
1000644d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
10006451:	53                   	push   ebx
10006452:	e8 fc ff ff ff       	call   10006453 <NIWindow::SHADOW_TEST()+0xd>	10006453: R_386_PC32	NIWindow::request()
10006457:	83 c4 10             	add    esp,0x10
1000645a:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006460:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
10006466:	74 10                	je     10006478 <NIWindow::SHADOW_TEST()+0x32>
10006468:	83 ec 0c             	sub    esp,0xc
1000646b:	68 26 6d 00 10       	push   0x10006d26	1000646c: R_386_32	.text
10006470:	e8 fc ff ff ff       	call   10006471 <NIWindow::SHADOW_TEST()+0x2b>	10006471: R_386_PC32	KePanic(char const*)
10006475:	83 c4 10             	add    esp,0x10
10006478:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
1000647c:	0f 85 3a 01 00 00    	jne    100065bc <NIWindow::SHADOW_TEST()+0x176>
10006482:	c7 44 24 04 05 00 00 00 	mov    DWORD PTR [esp+0x4],0x5
1000648a:	31 ff                	xor    edi,edi
1000648c:	39 bb 74 02 00 00    	cmp    DWORD PTR [ebx+0x274],edi
10006492:	0f 8e 24 01 00 00    	jle    100065bc <NIWindow::SHADOW_TEST()+0x176>
10006498:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
1000649e:	8d 04 b8             	lea    eax,[eax+edi*4]
100064a1:	0f b7 30             	movzx  esi,WORD PTR [eax]
100064a4:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
100064a8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
100064ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
100064b0:	89 34 24             	mov    DWORD PTR [esp],esi
100064b3:	8b ab 70 02 00 00    	mov    ebp,DWORD PTR [ebx+0x270]
100064b9:	8b 8b 74 02 00 00    	mov    ecx,DWORD PTR [ebx+0x274]
100064bf:	2b 6c 24 0c          	sub    ebp,DWORD PTR [esp+0xc]
100064c3:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
100064c6:	0f 8e da 00 00 00    	jle    100065a6 <NIWindow::SHADOW_TEST()+0x160>
100064cc:	83 ff 05             	cmp    edi,0x5
100064cf:	7e 1f                	jle    100064f0 <NIWindow::SHADOW_TEST()+0xaa>
100064d1:	8d 41 fb             	lea    eax,[ecx-0x5]
100064d4:	39 f8                	cmp    eax,edi
100064d6:	7e 18                	jle    100064f0 <NIWindow::SHADOW_TEST()+0xaa>
100064d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
100064dc:	83 c0 05             	add    eax,0x5
100064df:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100064e2:	7d 0c                	jge    100064f0 <NIWindow::SHADOW_TEST()+0xaa>
100064e4:	8d 45 fb             	lea    eax,[ebp-0x5]
100064e7:	3b 04 24             	cmp    eax,DWORD PTR [esp]
100064ea:	0f 8f ae 00 00 00    	jg     1000659e <NIWindow::SHADOW_TEST()+0x158>
100064f0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
100064f4:	be ea 01 00 00       	mov    esi,0x1ea
100064f9:	29 f9                	sub    ecx,edi
100064fb:	89 f0                	mov    eax,esi
100064fd:	83 c1 04             	add    ecx,0x4
10006500:	99                   	cdq    
10006501:	f7 f9                	idiv   ecx
10006503:	89 c1                	mov    ecx,eax
10006505:	89 f0                	mov    eax,esi
10006507:	99                   	cdq    
10006508:	f7 7c 24 04          	idiv   DWORD PTR [esp+0x4]
1000650c:	83 f8 0a             	cmp    eax,0xa
1000650f:	7d 05                	jge    10006516 <NIWindow::SHADOW_TEST()+0xd0>
10006511:	b8 0a 00 00 00       	mov    eax,0xa
10006516:	39 c1                	cmp    ecx,eax
10006518:	7d 02                	jge    1000651c <NIWindow::SHADOW_TEST()+0xd6>
1000651a:	89 c1                	mov    ecx,eax
1000651c:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
1000651f:	b8 ea 01 00 00       	mov    eax,0x1ea
10006524:	83 c5 04             	add    ebp,0x4
10006527:	99                   	cdq    
10006528:	f7 fd                	idiv   ebp
1000652a:	89 c6                	mov    esi,eax
1000652c:	83 f8 0a             	cmp    eax,0xa
1000652f:	7d 05                	jge    10006536 <NIWindow::SHADOW_TEST()+0xf0>
10006531:	be 0a 00 00 00       	mov    esi,0xa
10006536:	8b 04 24             	mov    eax,DWORD PTR [esp]
10006539:	8d 68 05             	lea    ebp,[eax+0x5]
1000653c:	b8 ea 01 00 00       	mov    eax,0x1ea
10006541:	99                   	cdq    
10006542:	f7 fd                	idiv   ebp
10006544:	39 c6                	cmp    esi,eax
10006546:	7d 02                	jge    1000654a <NIWindow::SHADOW_TEST()+0x104>
10006548:	89 c6                	mov    esi,eax
1000654a:	89 f0                	mov    eax,esi
1000654c:	89 ca                	mov    edx,ecx
1000654e:	0f af c6             	imul   eax,esi
10006551:	0f af d1             	imul   edx,ecx
10006554:	0f af f1             	imul   esi,ecx
10006557:	01 d0                	add    eax,edx
10006559:	8d 04 c6             	lea    eax,[esi+eax*8]
1000655c:	c1 f8 08             	sar    eax,0x8
1000655f:	83 f8 66             	cmp    eax,0x66
10006562:	7e 4c                	jle    100065b0 <NIWindow::SHADOW_TEST()+0x16a>
10006564:	8d 50 9a             	lea    edx,[eax-0x66]
10006567:	d1 fa                	sar    edx,1
10006569:	8d 42 66             	lea    eax,[edx+0x66]
1000656c:	83 f8 73             	cmp    eax,0x73
1000656f:	7e 3f                	jle    100065b0 <NIWindow::SHADOW_TEST()+0x16a>
10006571:	83 ea 0d             	sub    edx,0xd
10006574:	c1 fa 02             	sar    edx,0x2
10006577:	8d 42 73             	lea    eax,[edx+0x73]
1000657a:	83 f8 7f             	cmp    eax,0x7f
1000657d:	7f 1f                	jg     1000659e <NIWindow::SHADOW_TEST()+0x158>
1000657f:	50                   	push   eax
10006580:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10006586:	01 f8                	add    eax,edi
10006588:	50                   	push   eax
10006589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
1000658d:	03 83 68 02 00 00    	add    eax,DWORD PTR [ebx+0x268]
10006593:	50                   	push   eax
10006594:	ff 33                	push   DWORD PTR [ebx]
10006596:	e8 fc ff ff ff       	call   10006597 <NIWindow::SHADOW_TEST()+0x151>	10006597: R_386_PC32	NIContext::drvDarken4(int, int, int)
1000659b:	83 c4 10             	add    esp,0x10
1000659e:	ff 04 24             	inc    DWORD PTR [esp]
100065a1:	e9 0d ff ff ff       	jmp    100064b3 <NIWindow::SHADOW_TEST()+0x6d>
100065a6:	47                   	inc    edi
100065a7:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
100065ab:	e9 dc fe ff ff       	jmp    1000648c <NIWindow::SHADOW_TEST()+0x46>
100065b0:	83 f8 0a             	cmp    eax,0xa
100065b3:	7d ca                	jge    1000657f <NIWindow::SHADOW_TEST()+0x139>
100065b5:	b8 0a 00 00 00       	mov    eax,0xa
100065ba:	eb c3                	jmp    1000657f <NIWindow::SHADOW_TEST()+0x139>
100065bc:	83 c4 1c             	add    esp,0x1c
100065bf:	5b                   	pop    ebx
100065c0:	5e                   	pop    esi
100065c1:	5f                   	pop    edi
100065c2:	5d                   	pop    ebp
100065c3:	c3                   	ret    

100065c4 <NIWindow::realdraw()>:
100065c4:	55                   	push   ebp
100065c5:	57                   	push   edi
100065c6:	56                   	push   esi
100065c7:	53                   	push   ebx
100065c8:	83 ec 18             	sub    esp,0x18
100065cb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
100065cf:	53                   	push   ebx
100065d0:	e8 fc ff ff ff       	call   100065d1 <NIWindow::realdraw()+0xd>	100065d1: R_386_PC32	NIWindow::request()
100065d5:	83 c4 10             	add    esp,0x10
100065d8:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100065de:	39 83 60 02 00 00    	cmp    DWORD PTR [ebx+0x260],eax
100065e4:	74 10                	je     100065f6 <NIWindow::realdraw()+0x32>
100065e6:	83 ec 0c             	sub    esp,0xc
100065e9:	68 26 6d 00 10       	push   0x10006d26	100065ea: R_386_32	.text
100065ee:	e8 fc ff ff ff       	call   100065ef <NIWindow::realdraw()+0x2b>	100065ef: R_386_PC32	KePanic(char const*)
100065f3:	83 c4 10             	add    esp,0x10
100065f6:	83 7b 04 04          	cmp    DWORD PTR [ebx+0x4],0x4
100065fa:	75 55                	jne    10006651 <NIWindow::realdraw()+0x8d>
100065fc:	31 f6                	xor    esi,esi
100065fe:	39 b3 74 02 00 00    	cmp    DWORD PTR [ebx+0x274],esi
10006604:	7e 4b                	jle    10006651 <NIWindow::realdraw()+0x8d>
10006606:	8b 83 64 02 00 00    	mov    eax,DWORD PTR [ebx+0x264]
1000660c:	8d 04 b0             	lea    eax,[eax+esi*4]
1000660f:	0f b7 28             	movzx  ebp,WORD PTR [eax]
10006612:	0f b7 78 02          	movzx  edi,WORD PTR [eax+0x2]
10006616:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
1000661c:	89 c2                	mov    edx,eax
1000661e:	29 fa                	sub    edx,edi
10006620:	39 ea                	cmp    edx,ebp
10006622:	7e 2a                	jle    1000664e <NIWindow::realdraw()+0x8a>
10006624:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
10006627:	0f af c6             	imul   eax,esi
1000662a:	01 e8                	add    eax,ebp
1000662c:	ff 34 82             	push   DWORD PTR [edx+eax*4]
1000662f:	8b 83 6c 02 00 00    	mov    eax,DWORD PTR [ebx+0x26c]
10006635:	01 f0                	add    eax,esi
10006637:	50                   	push   eax
10006638:	8b 83 68 02 00 00    	mov    eax,DWORD PTR [ebx+0x268]
1000663e:	01 e8                	add    eax,ebp
10006640:	45                   	inc    ebp
10006641:	50                   	push   eax
10006642:	ff 33                	push   DWORD PTR [ebx]
10006644:	e8 fc ff ff ff       	call   10006645 <NIWindow::realdraw()+0x81>	10006645: R_386_PC32	NIContext::drvPutpixel4(int, int, unsigned int)
10006649:	83 c4 10             	add    esp,0x10
1000664c:	eb c8                	jmp    10006616 <NIWindow::realdraw()+0x52>
1000664e:	46                   	inc    esi
1000664f:	eb ad                	jmp    100065fe <NIWindow::realdraw()+0x3a>
10006651:	83 c4 0c             	add    esp,0xc
10006654:	5b                   	pop    ebx
10006655:	5e                   	pop    esi
10006656:	5f                   	pop    edi
10006657:	5d                   	pop    ebp
10006658:	c3                   	ret    
10006659:	90                   	nop

1000665a <NIWindow::drawResizeMarker()>:
1000665a:	53                   	push   ebx
1000665b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
1000665f:	f6 83 8c 02 00 00 01 	test   BYTE PTR [ebx+0x28c],0x1
10006666:	0f 85 f6 01 00 00    	jne    10006862 <NIWindow::drawResizeMarker()+0x208>
1000666c:	80 bb 78 02 00 00 00 	cmp    BYTE PTR [ebx+0x278],0x0
10006673:	0f 85 e9 01 00 00    	jne    10006862 <NIWindow::drawResizeMarker()+0x208>
10006679:	68 55 55 55 00       	push   0x555555
1000667e:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006684:	83 e8 05             	sub    eax,0x5
10006687:	50                   	push   eax
10006688:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
1000668e:	83 e8 0d             	sub    eax,0xd
10006691:	50                   	push   eax
10006692:	53                   	push   ebx
10006693:	e8 fc ff ff ff       	call   10006694 <NIWindow::drawResizeMarker()+0x3a>	10006694: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006698:	68 55 55 55 00       	push   0x555555
1000669d:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100066a3:	83 e8 05             	sub    eax,0x5
100066a6:	50                   	push   eax
100066a7:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100066ad:	83 e8 0b             	sub    eax,0xb
100066b0:	50                   	push   eax
100066b1:	53                   	push   ebx
100066b2:	e8 fc ff ff ff       	call   100066b3 <NIWindow::drawResizeMarker()+0x59>	100066b3: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100066b7:	83 c4 20             	add    esp,0x20
100066ba:	68 55 55 55 00       	push   0x555555
100066bf:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100066c5:	83 e8 05             	sub    eax,0x5
100066c8:	50                   	push   eax
100066c9:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100066cf:	83 e8 09             	sub    eax,0x9
100066d2:	50                   	push   eax
100066d3:	53                   	push   ebx
100066d4:	e8 fc ff ff ff       	call   100066d5 <NIWindow::drawResizeMarker()+0x7b>	100066d5: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100066d9:	68 55 55 55 00       	push   0x555555
100066de:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100066e4:	83 e8 05             	sub    eax,0x5
100066e7:	50                   	push   eax
100066e8:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100066ee:	83 e8 07             	sub    eax,0x7
100066f1:	50                   	push   eax
100066f2:	53                   	push   ebx
100066f3:	e8 fc ff ff ff       	call   100066f4 <NIWindow::drawResizeMarker()+0x9a>	100066f4: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100066f8:	83 c4 20             	add    esp,0x20
100066fb:	68 55 55 55 00       	push   0x555555
10006700:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006706:	83 e8 05             	sub    eax,0x5
10006709:	50                   	push   eax
1000670a:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006710:	83 e8 05             	sub    eax,0x5
10006713:	50                   	push   eax
10006714:	53                   	push   ebx
10006715:	e8 fc ff ff ff       	call   10006716 <NIWindow::drawResizeMarker()+0xbc>	10006716: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000671a:	68 55 55 55 00       	push   0x555555
1000671f:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006725:	83 e8 07             	sub    eax,0x7
10006728:	50                   	push   eax
10006729:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
1000672f:	83 e8 0b             	sub    eax,0xb
10006732:	50                   	push   eax
10006733:	53                   	push   ebx
10006734:	e8 fc ff ff ff       	call   10006735 <NIWindow::drawResizeMarker()+0xdb>	10006735: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
10006739:	83 c4 20             	add    esp,0x20
1000673c:	68 55 55 55 00       	push   0x555555
10006741:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006747:	83 e8 07             	sub    eax,0x7
1000674a:	50                   	push   eax
1000674b:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006751:	83 e8 09             	sub    eax,0x9
10006754:	50                   	push   eax
10006755:	53                   	push   ebx
10006756:	e8 fc ff ff ff       	call   10006757 <NIWindow::drawResizeMarker()+0xfd>	10006757: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000675b:	68 55 55 55 00       	push   0x555555
10006760:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006766:	83 e8 07             	sub    eax,0x7
10006769:	50                   	push   eax
1000676a:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006770:	83 e8 07             	sub    eax,0x7
10006773:	50                   	push   eax
10006774:	53                   	push   ebx
10006775:	e8 fc ff ff ff       	call   10006776 <NIWindow::drawResizeMarker()+0x11c>	10006776: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000677a:	83 c4 20             	add    esp,0x20
1000677d:	68 55 55 55 00       	push   0x555555
10006782:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006788:	83 e8 07             	sub    eax,0x7
1000678b:	50                   	push   eax
1000678c:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006792:	83 e8 05             	sub    eax,0x5
10006795:	50                   	push   eax
10006796:	53                   	push   ebx
10006797:	e8 fc ff ff ff       	call   10006798 <NIWindow::drawResizeMarker()+0x13e>	10006798: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000679c:	68 55 55 55 00       	push   0x555555
100067a1:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100067a7:	83 e8 09             	sub    eax,0x9
100067aa:	50                   	push   eax
100067ab:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100067b1:	83 e8 09             	sub    eax,0x9
100067b4:	50                   	push   eax
100067b5:	53                   	push   ebx
100067b6:	e8 fc ff ff ff       	call   100067b7 <NIWindow::drawResizeMarker()+0x15d>	100067b7: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100067bb:	83 c4 20             	add    esp,0x20
100067be:	68 55 55 55 00       	push   0x555555
100067c3:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100067c9:	83 e8 09             	sub    eax,0x9
100067cc:	50                   	push   eax
100067cd:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100067d3:	83 e8 07             	sub    eax,0x7
100067d6:	50                   	push   eax
100067d7:	53                   	push   ebx
100067d8:	e8 fc ff ff ff       	call   100067d9 <NIWindow::drawResizeMarker()+0x17f>	100067d9: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100067dd:	68 55 55 55 00       	push   0x555555
100067e2:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
100067e8:	83 e8 09             	sub    eax,0x9
100067eb:	50                   	push   eax
100067ec:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
100067f2:	83 e8 05             	sub    eax,0x5
100067f5:	50                   	push   eax
100067f6:	53                   	push   ebx
100067f7:	e8 fc ff ff ff       	call   100067f8 <NIWindow::drawResizeMarker()+0x19e>	100067f8: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
100067fc:	83 c4 20             	add    esp,0x20
100067ff:	68 55 55 55 00       	push   0x555555
10006804:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
1000680a:	83 e8 0b             	sub    eax,0xb
1000680d:	50                   	push   eax
1000680e:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006814:	83 e8 07             	sub    eax,0x7
10006817:	50                   	push   eax
10006818:	53                   	push   ebx
10006819:	e8 fc ff ff ff       	call   1000681a <NIWindow::drawResizeMarker()+0x1c0>	1000681a: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000681e:	68 55 55 55 00       	push   0x555555
10006823:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
10006829:	83 e8 0b             	sub    eax,0xb
1000682c:	50                   	push   eax
1000682d:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006833:	83 e8 05             	sub    eax,0x5
10006836:	50                   	push   eax
10006837:	53                   	push   ebx
10006838:	e8 fc ff ff ff       	call   10006839 <NIWindow::drawResizeMarker()+0x1df>	10006839: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000683d:	83 c4 20             	add    esp,0x20
10006840:	68 55 55 55 00       	push   0x555555
10006845:	8b 83 74 02 00 00    	mov    eax,DWORD PTR [ebx+0x274]
1000684b:	83 e8 0d             	sub    eax,0xd
1000684e:	50                   	push   eax
1000684f:	8b 83 70 02 00 00    	mov    eax,DWORD PTR [ebx+0x270]
10006855:	83 e8 05             	sub    eax,0x5
10006858:	50                   	push   eax
10006859:	53                   	push   ebx
1000685a:	e8 fc ff ff ff       	call   1000685b <NIWindow::drawResizeMarker()+0x201>	1000685b: R_386_PC32	NIWindow::putpixel(int, int, unsigned int)
1000685f:	83 c4 10             	add    esp,0x10
10006862:	5b                   	pop    ebx
10006863:	c3                   	ret    

10006864 <List<NIWindow*>::insertAtHead(NIWindow*)>:
10006864:	53                   	push   ebx
10006865:	83 ec 14             	sub    esp,0x14
10006868:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
1000686c:	6a 0c                	push   0xc
1000686e:	e8 fc ff ff ff       	call   1000686f <List<NIWindow*>::insertAtHead(NIWindow*)+0xb>	1000686f: R_386_PC32	malloc
10006873:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
10006877:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
1000687e:	89 10                	mov    DWORD PTR [eax],edx
10006880:	83 c4 10             	add    esp,0x10
10006883:	8b 13                	mov    edx,DWORD PTR [ebx]
10006885:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
10006888:	85 d2                	test   edx,edx
1000688a:	74 05                	je     10006891 <List<NIWindow*>::insertAtHead(NIWindow*)+0x2d>
1000688c:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
1000688f:	eb 03                	jmp    10006894 <List<NIWindow*>::insertAtHead(NIWindow*)+0x30>
10006891:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
10006894:	89 03                	mov    DWORD PTR [ebx],eax
10006896:	83 c4 08             	add    esp,0x8
10006899:	5b                   	pop    ebx
1000689a:	c3                   	ret    
1000689b:	90                   	nop

1000689c <List<NIWindow*>::deleteElement(NIWindow*&)>:
1000689c:	57                   	push   edi
1000689d:	56                   	push   esi
1000689e:	53                   	push   ebx
1000689f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
100068a3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
100068a7:	8b 19                	mov    ebx,DWORD PTR [ecx]
100068a9:	85 db                	test   ebx,ebx
100068ab:	74 5e                	je     1000690b <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
100068ad:	8b 30                	mov    esi,DWORD PTR [eax]
100068af:	89 da                	mov    edx,ebx
100068b1:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
100068b4:	8b 3a                	mov    edi,DWORD PTR [edx]
100068b6:	85 c0                	test   eax,eax
100068b8:	74 08                	je     100068c2 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
100068ba:	39 f7                	cmp    edi,esi
100068bc:	73 04                	jae    100068c2 <List<NIWindow*>::deleteElement(NIWindow*&)+0x26>
100068be:	89 c2                	mov    edx,eax
100068c0:	eb ef                	jmp    100068b1 <List<NIWindow*>::deleteElement(NIWindow*&)+0x15>
100068c2:	39 f7                	cmp    edi,esi
100068c4:	75 45                	jne    1000690b <List<NIWindow*>::deleteElement(NIWindow*&)+0x6f>
100068c6:	39 d3                	cmp    ebx,edx
100068c8:	75 18                	jne    100068e2 <List<NIWindow*>::deleteElement(NIWindow*&)+0x46>
100068ca:	89 01                	mov    DWORD PTR [ecx],eax
100068cc:	85 c0                	test   eax,eax
100068ce:	75 09                	jne    100068d9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x3d>
100068d0:	c7 41 04 00 00 00 00 	mov    DWORD PTR [ecx+0x4],0x0
100068d7:	eb 1e                	jmp    100068f7 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100068d9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
100068e0:	eb 15                	jmp    100068f7 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100068e2:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
100068e5:	85 c0                	test   eax,eax
100068e7:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
100068ea:	8b 5a 08             	mov    ebx,DWORD PTR [edx+0x8]
100068ed:	74 05                	je     100068f4 <List<NIWindow*>::deleteElement(NIWindow*&)+0x58>
100068ef:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
100068f2:	eb 03                	jmp    100068f7 <List<NIWindow*>::deleteElement(NIWindow*&)+0x5b>
100068f4:	89 59 04             	mov    DWORD PTR [ecx+0x4],ebx
100068f7:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
100068ff:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
10006903:	5b                   	pop    ebx
10006904:	5e                   	pop    esi
10006905:	5f                   	pop    edi
10006906:	e9 fc ff ff ff       	jmp    10006907 <List<NIWindow*>::deleteElement(NIWindow*&)+0x6b>	10006907: R_386_PC32	operator delete(void*, unsigned long)
1000690b:	5b                   	pop    ebx
1000690c:	5e                   	pop    esi
1000690d:	5f                   	pop    edi
1000690e:	c3                   	ret    
1000690f:	43                   	inc    ebx
10006910:	3a 2f                	cmp    ch,BYTE PTR [edi]
10006912:	42                   	inc    edx
10006913:	61                   	popa   
10006914:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006915:	61                   	popa   
10006916:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006917:	61                   	popa   
10006918:	2f                   	das    
10006919:	53                   	push   ebx
1000691a:	79 73                	jns    1000698f <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
1000691c:	74 65                	je     10006983 <List<NIWindow*>::deleteElement(NIWindow*&)+0xe7>
1000691e:	6d                   	ins    DWORD PTR es:[edi],dx
1000691f:	2f                   	das    
10006920:	64 65 73 6b          	fs gs jae 1000698f <List<NIWindow*>::deleteElement(NIWindow*&)+0xf3>
10006924:	74 6f                	je     10006995 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf9>
10006926:	70 2e                	jo     10006956 <List<NIWindow*>::deleteElement(NIWindow*&)+0xba>
10006928:	65 78 65             	gs js  10006990 <List<NIWindow*>::deleteElement(NIWindow*&)+0xf4>
1000692b:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
1000692e:	2f                   	das    
1000692f:	42                   	inc    edx
10006930:	61                   	popa   
10006931:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006932:	61                   	popa   
10006933:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006934:	61                   	popa   
10006935:	2f                   	das    
10006936:	53                   	push   ebx
10006937:	79 73                	jns    100069ac <List<NIWindow*>::deleteElement(NIWindow*&)+0x110>
10006939:	74 65                	je     100069a0 <List<NIWindow*>::deleteElement(NIWindow*&)+0x104>
1000693b:	6d                   	ins    DWORD PTR es:[edi],dx
1000693c:	2f                   	das    
1000693d:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000693e:	65 77 67             	gs ja  100069a8 <List<NIWindow*>::deleteElement(NIWindow*&)+0x10c>
10006941:	75 69                	jne    100069ac <List<NIWindow*>::deleteElement(NIWindow*&)+0x110>
10006943:	2e 65 78 65          	cs gs js 100069ac <List<NIWindow*>::deleteElement(NIWindow*&)+0x110>
10006947:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
1000694a:	4e                   	dec    esi
1000694b:	43                   	inc    ebx
1000694c:	00 53 46             	add    BYTE PTR [ebx+0x46],dl
1000694f:	4e                   	dec    esi
10006950:	32 00                	xor    al,BYTE PTR [eax]
10006952:	32 4e 46             	xor    cl,BYTE PTR [esi+0x46]
10006955:	53                   	push   ebx
10006956:	00 4e 49             	add    BYTE PTR [esi+0x49],cl
10006959:	43                   	inc    ebx
1000695a:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000695b:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000695c:	74 65                	je     100069c3 <List<NIWindow*>::deleteElement(NIWindow*&)+0x127>
1000695e:	78 74                	js     100069d4 <List<NIWindow*>::deleteElement(NIWindow*&)+0x138>
10006960:	3a 3a                	cmp    bh,BYTE PTR [edx]
10006962:	64 72 76             	fs jb  100069db <List<NIWindow*>::deleteElement(NIWindow*&)+0x13f>
10006965:	52                   	push   edx
10006966:	65 6e                	outs   dx,BYTE PTR gs:[esi]
10006968:	64 65 72 54          	fs gs jb 100069c0 <List<NIWindow*>::deleteElement(NIWindow*&)+0x124>
1000696c:	54                   	push   esp
1000696d:	46                   	inc    esi
1000696e:	34 00                	xor    al,0x0
10006970:	43                   	inc    ebx
10006971:	3a 2f                	cmp    ch,BYTE PTR [edi]
10006973:	42                   	inc    edx
10006974:	61                   	popa   
10006975:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006976:	61                   	popa   
10006977:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006978:	61                   	popa   
10006979:	2f                   	das    
1000697a:	46                   	inc    esi
1000697b:	6f                   	outs   dx,DWORD PTR ds:[esi]
1000697c:	6e                   	outs   dx,BYTE PTR ds:[esi]
1000697d:	74 73                	je     100069f2 <List<NIWindow*>::deleteElement(NIWindow*&)+0x156>
1000697f:	2f                   	das    
10006980:	53                   	push   ebx
10006981:	46                   	inc    esi
10006982:	4e                   	dec    esi
10006983:	00 43 41             	add    BYTE PTR [ebx+0x41],al
10006986:	4e                   	dec    esi
10006987:	4e                   	dec    esi
10006988:	4f                   	dec    edi
10006989:	54                   	push   esp
1000698a:	20 4c 4f 41          	and    BYTE PTR [edi+ecx*2+0x41],cl
1000698e:	44                   	inc    esp
1000698f:	20 46 4f             	and    BYTE PTR [esi+0x4f],al
10006992:	4e                   	dec    esi
10006993:	54                   	push   esp
10006994:	20 44 49 52          	and    BYTE PTR [ecx+ecx*2+0x52],al
10006998:	45                   	inc    ebp
10006999:	43                   	inc    ebx
1000699a:	54                   	push   esp
1000699b:	4f                   	dec    edi
1000699c:	52                   	push   edx
1000699d:	59                   	pop    ecx
1000699e:	00 43 3a             	add    BYTE PTR [ebx+0x3a],al
100069a1:	2f                   	das    
100069a2:	42                   	inc    edx
100069a3:	61                   	popa   
100069a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
100069a5:	61                   	popa   
100069a6:	6e                   	outs   dx,BYTE PTR ds:[esi]
100069a7:	61                   	popa   
100069a8:	2f                   	das    
100069a9:	46                   	inc    esi
100069aa:	6f                   	outs   dx,DWORD PTR ds:[esi]
100069ab:	6e                   	outs   dx,BYTE PTR ds:[esi]
100069ac:	74 73                	je     10006a21 <List<NIWindow*>::deleteElement(NIWindow*&)+0x185>
100069ae:	2f                   	das    
100069af:	53                   	push   ebx
100069b0:	46                   	inc    esi
100069b1:	4e                   	dec    esi
100069b2:	2f                   	das    
100069b3:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
100069b6:	6e                   	outs   dx,BYTE PTR ds:[esi]
100069b7:	74 20                	je     100069d9 <List<NIWindow*>::deleteElement(NIWindow*&)+0x13d>
100069b9:	69 73 20 6f 66 20 73 	imul   esi,DWORD PTR [ebx+0x20],0x7320666f
100069c0:	69 7a 65 20 25 64 0a 	imul   edi,DWORD PTR [edx+0x65],0xa642520
100069c7:	00 4c 6f 61          	add    BYTE PTR [edi+ebp*2+0x61],cl
100069cb:	64 65 64 20 66 6f    	fs gs and BYTE PTR fs:[esi+0x6f],ah
100069d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
100069d2:	74 3a                	je     10006a0e <List<NIWindow*>::deleteElement(NIWindow*&)+0x172>
100069d4:	20 25 73 0a 00 53    	and    BYTE PTR ds:0x53000a73,ah
100069da:	53                   	push   ebx
100069db:	46                   	inc    esi
100069dc:	4e                   	dec    esi
100069dd:	5f                   	pop    edi
100069de:	52                   	push   edx
100069df:	45                   	inc    ebp
100069e0:	53                   	push   ebx
100069e1:	20 3d 20 25 64 0a    	and    BYTE PTR ds:0xa642520,bh
100069e7:	00 4d 65             	add    BYTE PTR [ebp+0x65],cl
100069ea:	6d                   	ins    DWORD PTR es:[edi],dx
100069eb:	6f                   	outs   dx,DWORD PTR ds:[esi]
100069ec:	72 79                	jb     10006a67 <List<NIWindow*>::deleteElement(NIWindow*&)+0x1cb>
100069ee:	20 61 6c             	and    BYTE PTR [ecx+0x6c],ah
100069f1:	6c                   	ins    BYTE PTR es:[edi],dx
100069f2:	6f                   	outs   dx,DWORD PTR ds:[esi]
100069f3:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
100069f6:	69 6f 6e 20 65 72 72 	imul   ebp,DWORD PTR [edi+0x6e],0x72726520
100069fd:	6f                   	outs   dx,DWORD PTR ds:[esi]
100069fe:	72 00                	jb     10006a00 <List<NIWindow*>::deleteElement(NIWindow*&)+0x164>
10006a00:	42                   	inc    edx
10006a01:	61                   	popa   
10006a02:	64 20 66 69          	and    BYTE PTR fs:[esi+0x69],ah
10006a06:	6c                   	ins    BYTE PTR es:[edi],dx
10006a07:	65 20 66 6f          	and    BYTE PTR gs:[esi+0x6f],ah
10006a0b:	72 6d                	jb     10006a7a <List<NIWindow*>::deleteElement(NIWindow*&)+0x1de>
10006a0d:	61                   	popa   
10006a0e:	74 00                	je     10006a10 <List<NIWindow*>::deleteElement(NIWindow*&)+0x174>
10006a10:	4e                   	dec    esi
10006a11:	6f                   	outs   dx,DWORD PTR ds:[esi]
10006a12:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10006a15:	6e                   	outs   dx,BYTE PTR ds:[esi]
10006a16:	74 20                	je     10006a38 <List<NIWindow*>::deleteElement(NIWindow*&)+0x19c>
10006a18:	66 61                	popaw  
10006a1a:	63 65 20             	arpl   WORD PTR [ebp+0x20],sp
10006a1d:	66 6f                	outs   dx,WORD PTR ds:[esi]
10006a1f:	75 6e                	jne    10006a8f <_ssfn__compute_huffman_codes::length_dezigzag+0xf>
10006a21:	64 00 49 6e          	add    BYTE PTR fs:[ecx+0x6e],cl
10006a25:	76 61                	jbe    10006a88 <_ssfn__compute_huffman_codes::length_dezigzag+0x8>
10006a27:	6c                   	ins    BYTE PTR es:[edi],dx
10006a28:	69 64 20 69 6e 70 75 74 	imul   esp,DWORD PTR [eax+eiz*1+0x69],0x7475706e
10006a30:	20 76 61             	and    BYTE PTR [esi+0x61],dh
10006a33:	6c                   	ins    BYTE PTR es:[edi],dx
10006a34:	75 65                	jne    10006a9b <_ssfn__compute_huffman_codes::length_dezigzag+0x1b>
10006a36:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10006a39:	76 61                	jbe    10006a9c <_ssfn__compute_huffman_codes::length_dezigzag+0x1c>
10006a3b:	6c                   	ins    BYTE PTR es:[edi],dx
10006a3c:	69 64 20 73 74 79 6c 65 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x656c7974
10006a44:	00 49 6e             	add    BYTE PTR [ecx+0x6e],cl
10006a47:	76 61                	jbe    10006aaa <_ssfn__zdist_extra+0xa>
10006a49:	6c                   	ins    BYTE PTR es:[edi],dx
10006a4a:	69 64 20 73 69 7a 65 00 	imul   esp,DWORD PTR [eax+eiz*1+0x73],0x657a69
10006a52:	47                   	inc    edi
10006a53:	6c                   	ins    BYTE PTR es:[edi],dx
10006a54:	79 70                	jns    10006ac6 <_ssfn__zdist_extra+0x26>
10006a56:	68 20 6e 6f 74       	push   0x746f6e20
10006a5b:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
10006a5e:	75 6e                	jne    10006ace <_ssfn__zdist_extra+0x2e>
10006a60:	64 00 66 90          	add    BYTE PTR fs:[esi-0x70],ah
10006a64:	66 90                	xchg   ax,ax
10006a66:	66 90                	xchg   ax,ax
10006a68:	66 90                	xchg   ax,ax
10006a6a:	66 90                	xchg   ax,ax
10006a6c:	66 90                	xchg   ax,ax
10006a6e:	66 90                	xchg   ax,ax
10006a70:	66 90                	xchg   ax,ax
10006a72:	66 90                	xchg   ax,ax
10006a74:	66 90                	xchg   ax,ax
10006a76:	66 90                	xchg   ax,ax
10006a78:	66 90                	xchg   ax,ax
10006a7a:	66 90                	xchg   ax,ax
10006a7c:	66 90                	xchg   ax,ax
10006a7e:	66 90                	xchg   ax,ax

10006a80 <_ssfn__compute_huffman_codes::length_dezigzag>:
10006a80:	10 11 12 00 08 07 09 06 0a 05 0b 04 0c 03 0d 02     ................
10006a90:	0e 01 0f 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

10006aa0 <_ssfn__zdist_extra>:
	...
10006ab0:	01 00 00 00 01 00 00 00 02 00 00 00 02 00 00 00     ................
10006ac0:	03 00 00 00 03 00 00 00 04 00 00 00 04 00 00 00     ................
10006ad0:	05 00 00 00 05 00 00 00 06 00 00 00 06 00 00 00     ................
10006ae0:	07 00 00 00 07 00 00 00 08 00 00 00 08 00 00 00     ................
10006af0:	09 00 00 00 09 00 00 00 0a 00 00 00 0a 00 00 00     ................
10006b00:	0b 00 00 00 0b 00 00 00 0c 00 00 00 0c 00 00 00     ................
10006b10:	0d 00 00 00 0d 00 00 00 00 00 00 00 00 00 00 00     ................

10006b20 <_ssfn__zdist_base>:
10006b20:	01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00     ................
10006b30:	05 00 00 00 07 00 00 00 09 00 00 00 0d 00 00 00     ................
10006b40:	11 00 00 00 19 00 00 00 21 00 00 00 31 00 00 00     ........!...1...
10006b50:	41 00 00 00 61 00 00 00 81 00 00 00 c1 00 00 00     A...a...........
10006b60:	01 01 00 00 81 01 00 00 01 02 00 00 01 03 00 00     ................
10006b70:	01 04 00 00 01 06 00 00 01 08 00 00 01 0c 00 00     ................
10006b80:	01 10 00 00 01 18 00 00 01 20 00 00 01 30 00 00     ......... ...0..
10006b90:	01 40 00 00 01 60 00 00 00 00 00 00 00 00 00 00     .@...`..........

10006ba0 <_ssfn__zlength_extra>:
	...
10006bc0:	01 00 00 00 01 00 00 00 01 00 00 00 01 00 00 00     ................
10006bd0:	02 00 00 00 02 00 00 00 02 00 00 00 02 00 00 00     ................
10006be0:	03 00 00 00 03 00 00 00 03 00 00 00 03 00 00 00     ................
10006bf0:	04 00 00 00 04 00 00 00 04 00 00 00 04 00 00 00     ................
10006c00:	05 00 00 00 05 00 00 00 05 00 00 00 05 00 00 00     ................
	...

10006c20 <_ssfn__zlength_base>:
10006c20:	03 00 00 00 04 00 00 00 05 00 00 00 06 00 00 00     ................
10006c30:	07 00 00 00 08 00 00 00 09 00 00 00 0a 00 00 00     ................
10006c40:	0b 00 00 00 0d 00 00 00 0f 00 00 00 11 00 00 00     ................
10006c50:	13 00 00 00 17 00 00 00 1b 00 00 00 1f 00 00 00     ................
10006c60:	23 00 00 00 2b 00 00 00 33 00 00 00 3b 00 00 00     #...+...3...;...
10006c70:	43 00 00 00 53 00 00 00 63 00 00 00 73 00 00 00     C...S...c...s...
10006c80:	83 00 00 00 a3 00 00 00 c3 00 00 00 e3 00 00 00     ................
10006c90:	02 01 00 00 00 00 00 00 00 00 00 00 43 3a 2f 42     ............C:/B
10006ca0:	61 6e 61 6e 61 2f 43 75 72 73 6f 72 73 2f 53 54     anana/Cursors/ST
10006cb0:	41 4e 44 41 52 44 2e 43 55 52 00 43 55 52 53 4f     ANDARD.CUR.CURSO
10006cc0:	52 20 4c 4f 41 44 3a 20 42 41 44 20 31 0a 00 43     R LOAD: BAD 1..C
10006cd0:	55 52 53 4f 52 20 4c 4f 41 44 3a 20 42 41 44 20     URSOR LOAD: BAD 
10006ce0:	32 0a 00 4e 52 4d 4c 00 57 41 49 54 00 54 4c 44     2..NRML.WAIT.TLD
10006cf0:	52 00 54 45 58 54 00 56 45 52 54 00 48 4f 52 5a     R.TEXT.VERT.HORZ
10006d00:	00 48 41 4e 44 00 43 55 52 53 4f 52 20 4c 4f 41     .HAND.CURSOR LOA
10006d10:	44 3a 20 42 41 44 20 33 0a 00 46 5a 77 4e 59 26     D: BAD 3..FZwNY&
10006d20:	61 62 00 3a 29 00 41 53 53 45 52 54 49 4f 4e 20     ab.:).ASSERTION 
10006d30:	46 41 49 4c 55 52 45 20 28 41 29 2e 00              FAILURE (A)..
