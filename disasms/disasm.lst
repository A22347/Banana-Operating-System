
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 9b eb 00 00       	call   c000ebbb <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 c8 44 02 c0       	mov    eax,0xc00244c8
c0000025:	3d c8 44 02 c0       	cmp    eax,0xc00244c8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 c8 44 02 c0       	push   0xc00244c8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 c8 44 02 c0       	mov    eax,0xc00244c8
c0000051:	2d c8 44 02 c0       	sub    eax,0xc00244c8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 c8 44 02 c0       	push   0xc00244c8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 60 02 c0 00 	cmp    BYTE PTR ds:0xc00260c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 60 07 02 c0       	mov    ebx,0xc0020760
c0000097:	81 eb 5c 07 02 c0    	sub    ebx,0xc002075c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 5c 07 02 c0       	mov    esi,0xc002075c
c00000a6:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 60 02 c0       	mov    ds:0xc00260c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 60 02 c0       	mov    eax,ds:0xc00260c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 c8 44 02 c0       	push   0xc00244c8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 60 02 c0 01 	mov    BYTE PTR ds:0xc00260c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 60 02 c0       	push   0xc00260c8
c0000108:	68 c8 44 02 c0       	push   0xc00244c8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 0b 4a 01 00       	call   c0014cb8 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 b8 2d 01 00       	call   c001307d <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 e9 49 01 00       	call   c0014cb8 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 f6 4e 01 00       	call   c00151e4 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 99 53 01 00       	call   c0015690 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 bd 02 c0 	lgdtd  ds:0xc002bd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 3c e4 00 00       	jmp    c000e7bb <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 60 02 c0       	mov    ds:0xc00260e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 60 02 c0    	mov    DWORD PTR ds:0xc00260e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 80 07 02 c0 02 	test   BYTE PTR [edx-0x3ffdf880],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 80 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf880],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 80 07 02 c0 08 	test   BYTE PTR [edx-0x3ffdf880],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 80 07 02 c0 04 	test   BYTE PTR [ecx-0x3ffdf880],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 80 07 02 c0 01 	test   BYTE PTR [edx-0x3ffdf880],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 61 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd9efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 61 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 61 02 c0    	mov    DWORD PTR ds:0xc0026100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 61 02 c0    	mov    ecx,DWORD PTR ds:0xc002613c
c0000df7:	c7 42 0c 34 61 02 c0 	mov    DWORD PTR [edx+0xc],0xc0026134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 61 02 c0 02 	test   BYTE PTR ds:0xc0026100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 64 02 c0    	dec    DWORD PTR ds:0xc0026450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 64 02 c0    	sub    DWORD PTR ds:0xc0026464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 9b da 00 00       	call   c000e8fb <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 a8 d9 00 00       	call   c000e89d <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 87 d8 00 00       	call   c000e867 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 82 d8 00 00       	call   c000e89d <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 2e d7 00 00       	call   c000e867 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 14 d7 00 00       	call   c000e867 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 ea d6 00 00       	call   c000e867 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 61 02 c0    	mov    edi,DWORD PTR ds:0xc0026100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 61 02 c0       	mov    eax,0xc0026100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 61 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 61 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 61 02 c0 	lea    edx,[eax*8-0x3ffd9ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 61 02 c0    	mov    ebx,DWORD PTR ds:0xc0026140
c00012e5:	81 fb 34 61 02 c0    	cmp    ebx,0xc0026134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 61 02 c0       	cmp    eax,0xc0026134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 61 02 c0    	cmp    DWORD PTR ds:0xc0026130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 61 02 c0       	mov    ds:0xc002613c,eax
c0001321:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001326:	a3 30 61 02 c0       	mov    ds:0xc0026130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c0001334:	c7 40 0c 34 61 02 c0 	mov    DWORD PTR [eax+0xc],0xc0026134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 61 02 c0       	mov    ds:0xc0026140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 61 02 c0 	mov    DWORD PTR [eax+0x8],0xc0026134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 60 02 c0 	lea    ebp,[edx*4-0x3ffd9f08]
c0001385:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 61 02 c0 	lea    ecx,[edx*4-0x3ffd9f00]
c00013a0:	8b 14 95 00 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 64 02 c0 	or     DWORD PTR [edi*4-0x3ffd9bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 61 02 c0 	lea    eax,[eax*8-0x3ffd9ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,ecx
c000145a:	89 0d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,ecx
c0001460:	c7 41 08 34 61 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0026134
c0001467:	c7 41 0c 34 61 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0026134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 61 02 c0 	lea    edx,[ecx*8-0x3ffd9ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 64 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd9bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 61 02 c0 	lea    edx,[eax*4-0x3ffd9ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 64 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 61 02 c0    	mov    DWORD PTR ds:0xc002613c,edi
c000152d:	89 3d 40 61 02 c0    	mov    DWORD PTR ds:0xc0026140,edi
c0001533:	c7 47 08 34 61 02 c0 	mov    DWORD PTR [edi+0x8],0xc0026134
c000153a:	c7 47 0c 34 61 02 c0 	mov    DWORD PTR [edi+0xc],0xc0026134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 61 02 c0    	mov    DWORD PTR ds:0xc0026130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 61 02 c0       	mov    edx,0xc0026100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 61 02 c0       	mov    eax,0xc0026100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 64 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 61 02 c0    	cmp    DWORD PTR ds:0xc002612c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 61 02 c0    	mov    DWORD PTR ds:0xc002612c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 64 02 c0    	push   DWORD PTR ds:0xc002645c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 61 02 c0 00 	cmp    DWORD PTR ds:0xc0026100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 64 02 c0       	mov    eax,ds:0xc002645c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 61 02 c0 00 	cmp    DWORD PTR ds:0xc002612c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 61 02 c0       	mov    eax,ds:0xc002612c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 61 02 c0       	mov    eax,0xc0026134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 64 02 c0       	cmp    eax,0xc002642c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 64 02 c0       	mov    eax,ds:0xc0026468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 64 02 c0    	mov    esi,DWORD PTR ds:0xc0026474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 61 02 c0       	mov    eax,0xc0026100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 84 08 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf77c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 61 02 c0       	mov    eax,ds:0xc0026100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 61 02 c0       	mov    ds:0xc0026100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 64 02 c0    	mov    DWORD PTR ds:0xc0026444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 64 02 c0    	mov    DWORD PTR ds:0xc0026448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 64 02 c0    	mov    DWORD PTR ds:0xc002644c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 64 02 c0    	mov    DWORD PTR ds:0xc0026454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 79 82 01 00       	jmp    c001a204 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 a3 82 01 00       	jmp    c001a244 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 40 c8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd37c0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 c4 82 01 00       	jmp    c001a284 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 e0 09 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdf620]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 e0 09 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf620]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 30 31 02 c0       	mov    edx,0xc0023130
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba 9c 08 02 c0       	mov    edx,0xc002089c
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 64 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 64 02 c0    	mov    ax,ds:0xc0026480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 64 02 c0    	mov    ds:0xc0026480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 a2 08 02 c0       	mov    eax,0xc00208a2
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 60 09 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdf6a0]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 ab 08 02 c0       	mov    eax,0xc00208ab
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 e0 09 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdf620]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 64 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd9b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 64 02 c0 	mov    DWORD PTR [edx*4-0x3ffd9b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 30 09 02 c0       	mov    eax,0xc0020930
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 64 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 20 09 02 c0       	mov    ebx,0xc0020920
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 00 09 02 c0       	mov    eax,0xc0020900
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 10 09 02 c0       	mov    eax,0xc0020910
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba b2 08 02 c0       	mov    edx,0xc00208b2
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba be 08 02 c0       	mov    edx,0xc00208be
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba d2 08 02 c0       	mov    edx,0xc00208d2
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 64 8b 00 00       	call   c000e97b <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 5c 8b 00 00       	call   c000e98b <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 00 0d 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020d00
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 00 0d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020d00
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 00 0b 02 c0       	mov    eax,0xc0020b00
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 40 0a 02 c0       	mov    eax,0xc0020a40
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 00 0a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdf600]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 00 0e 02 c0       	push   0xc0020e00
c0006303:	e8 98 48 01 00       	call   c001aba0 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 60 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 0e 0e 02 c0       	push   0xc0020e0e
c000633b:	e8 60 48 01 00       	call   c001aba0 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 65 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd9a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 60 02 c0 	movsx  eax,BYTE PTR ds:0xc0026060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 c9 47 01 00       	call   c001ab44 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 60 02 c0       	mov    eax,0xc0026080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 60 02 c0       	mov    eax,0xc0026020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 6e 02 c0    	mov    ebp,DWORD PTR ds:0xc0026eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 1d 0e 02 c0       	push   0xc0020e1d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 6e 02 c0       	mov    ecx,0xc0026e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 65 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd9ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd9ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9abc],esi
c0006746:	89 87 40 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ac0],eax
c000674c:	c7 87 48 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 65 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd9a30],0x0
c0006768:	89 87 4c 65 02 c0    	mov    DWORD PTR [edi-0x3ffd9ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 65 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 65 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd9a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c00067e1:	8b 8d 4c 65 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd9ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 65 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd9ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 60 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd9fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 65 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd9ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 65 02 c0    	add    DWORD PTR [ebp-0x3ffd9ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 65 02 c0    	lea    ecx,[ebp-0x3ffd9ac0]
c00068d9:	83 bd 40 65 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd9ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 65 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd9ab4]
c0006917:	05 40 65 02 c0       	add    eax,0xc0026540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 65 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd9a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 65 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd9ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 65 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd9a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 65 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd9ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 65 02 c0    	lea    edi,[eax-0x3ffd9ac0]
c00069d6:	83 b8 40 65 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd9ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 20 0e 02 c0       	push   0xc0020e20
c00069fa:	e8 a1 41 01 00       	call   c001aba0 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 b5 41 01 00       	call   c001abbc <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 25 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e25
c0006a14:	e8 87 41 01 00       	call   c001aba0 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9ac0]
c0006a20:	e8 97 41 01 00       	call   c001abbc <iso_kprintfd>
c0006a25:	c7 04 24 2b 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e2b
c0006a2c:	e8 6f 41 01 00       	call   c001aba0 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9abc]
c0006a38:	e8 7f 41 01 00       	call   c001abbc <iso_kprintfd>
c0006a3d:	c7 04 24 31 0e 02 c0 	mov    DWORD PTR [esp],0xc0020e31
c0006a44:	e8 57 41 01 00       	call   c001aba0 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 65 02 c0    	push   DWORD PTR [ebx-0x3ffd9a30]
c0006a50:	e8 67 41 01 00       	call   c001abbc <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 65 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd9ab8]
c0006ab6:	81 c2 40 65 02 c0    	add    edx,0xc0026540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 60 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd9f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 65 02 c0    	lea    ebp,[eax-0x3ffd9aa8]
c0006b12:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 65 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd9aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 1d 0e 02 c0       	push   0xc0020e1d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 65 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd9aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9ab0],eax
c0006bee:	89 93 54 65 02 c0    	mov    DWORD PTR [ebx-0x3ffd9aac],edx
c0006bf4:	81 c3 40 65 02 c0    	add    ebx,0xc0026540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 65 02 c0       	add    eax,0xc0026550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 3a 0e 02 c0       	push   0xc0020e3a
c0006c19:	e8 82 3f 01 00       	call   c001aba0 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 60 02 c0       	mov    ds:0xc0026060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb4,0x0
c0006c4e:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 60 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd9f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 45 0e 02 c0       	push   0xc0020e45
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 6e 02 c0       	mov    ds:0xc0026eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 6e 02 c0 00 	cmp    DWORD PTR ds:0xc0026eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 6e 02 c0       	mov    eax,ds:0xc0026eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 60 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd9f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 4c 0e 02 c0       	push   0xc0020e4c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 60 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd9f80]
c0006cec:	bf 80 6e 02 c0       	mov    edi,0xc0026e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 6e 02 c0       	mov    eax,0xc0026e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 6e 02 c0       	mov    ds:0xc0026ea8,eax
c0006d0f:	b8 8a 6e 02 c0       	mov    eax,0xc0026e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 6e 02 c0       	mov    ds:0xc0026ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 53 0e 02 c0       	push   0xc0020e53
c0006d30:	e8 6b 3e 01 00       	call   c001aba0 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 5e 0e 02 c0       	push   0xc0020e5e
c0006d4b:	e8 50 3e 01 00       	call   c001aba0 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 65 02 c0       	push   0xc0026540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 65 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0026540,0xffffffff
c0006d75:	e8 01 7c 00 00       	call   c000e97b <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 6e 02 c0       	mov    ds:0xc0026eb0,eax
c0006d86:	e8 f0 7b 00 00       	call   c000e97b <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 65 02 c0       	mov    ds:0xc0026520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 db 7b 00 00       	call   c000e97b <malloc>
c0006da0:	89 04 9d 80 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 c2 7b 00 00       	call   c000e97b <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 60 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd9fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9f80]
c0006de6:	e8 a0 7b 00 00       	call   c000e98b <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 60 02 c0 	push   DWORD PTR [ebx*4-0x3ffd9fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 92 7b 00 00       	call   c000e98b <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 6e 02 c0       	mov    eax,ds:0xc0026eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 78 7b 00 00       	call   c000e98b <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 65 02 c0       	mov    eax,ds:0xc0026520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 63 7b 00 00       	call   c000e98b <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 65 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026520,0x0
c0006e35:	c7 05 b0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 70 0e 02 c0       	mov    esi,0xc0020e70
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 6f 0e 02 c0       	mov    al,ds:0xc0020e6f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 90 bd 02 c0 10 	test   BYTE PTR ds:0xc002bd90,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 80 0e 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf180]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 d0 0f 02 c0       	push   0xc0020fd0
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 e4 0f 02 c0       	push   0xc0020fe4
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 ee 0f 02 c0       	push   0xc0020fee
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 f8 0f 02 c0       	push   0xc0020ff8
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 3c 11 02 c0       	push   0xc002113c
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 02 10 02 c0       	push   0xc0021002
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 5c 11 02 c0       	push   0xc002115c
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 17 10 02 c0       	push   0xc0021017
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 31 10 02 c0       	push   0xc0021031
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 80 3a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc580]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 84 11 02 c0       	push   0xc0021184
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 3c 11 02 c0       	push   0xc002113c
c00071d4:	e8 f9 7a 00 00       	call   c000ecd2 <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 cc 11 02 c0       	push   0xc00211cc
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 cc 11 02 c0       	push   0xc00211cc
c0007203:	e8 ca 7a 00 00       	call   c000ecd2 <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 3c 10 02 c0       	push   0xc002103c
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 3c 10 02 c0       	push   0xc002103c
c000722f:	e8 9e 7a 00 00       	call   c000ecd2 <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 59 10 02 c0       	push   0xc0021059
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 59 10 02 c0       	push   0xc0021059
c000725b:	e8 72 7a 00 00       	call   c000ecd2 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 ec 11 02 c0       	push   0xc00211ec
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 ec 11 02 c0       	push   0xc00211ec
c0007287:	e8 46 7a 00 00       	call   c000ecd2 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 10 12 02 c0       	push   0xc0021210
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 10 12 02 c0       	push   0xc0021210
c00072b3:	e8 1a 7a 00 00       	call   c000ecd2 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 75 10 02 c0       	push   0xc0021075
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 75 10 02 c0       	push   0xc0021075
c00072df:	e8 ee 79 00 00       	call   c000ecd2 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 91 10 02 c0       	push   0xc0021091
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 91 10 02 c0       	push   0xc0021091
c000730b:	e8 c2 79 00 00       	call   c000ecd2 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 30 12 02 c0       	push   0xc0021230
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 30 12 02 c0       	push   0xc0021230
c0007337:	e8 96 79 00 00       	call   c000ecd2 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 54 12 02 c0       	push   0xc0021254
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 54 12 02 c0       	push   0xc0021254
c0007363:	e8 6a 79 00 00       	call   c000ecd2 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 73 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd8d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 73 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd8d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 73 02 c0    	mov    BYTE PTR [ebx-0x3ffd8d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 b1 75 00 00       	call   c000e97b <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00073d5:	68 73 12 02 c0       	push   0xc0021273
c00073da:	50                   	push   eax
c00073db:	e8 32 0d 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 91 12 02 c0       	push   0xc0021291
c00073ef:	e8 de 78 00 00       	call   c000ecd2 <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 2f 0d 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 ab 12 02 c0       	push   0xc00212ab
c0007410:	e8 bd 78 00 00       	call   c000ecd2 <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 c5 12 02 c0       	push   0xc00212c5
c0007457:	e8 76 78 00 00       	call   c000ecd2 <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 6e 02 c0 	lea    edx,[esi*8-0x3ffd9120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 df 12 02 c0       	push   0xc00212df
c0007487:	e8 46 78 00 00       	call   c000ecd2 <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 f3 0c 00 00       	call   c000818e <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 c0 62 00 00       	call   c000d799 <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 aa 81 00 00       	call   c000f69d <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 93 02 c0    	mov    ebp,DWORD PTR ds:0xc0029300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 93 02 c0    	mov    DWORD PTR ds:0xc0029300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 f9 12 02 c0       	push   0xc00212f9
c000752c:	e8 a1 77 00 00       	call   c000ecd2 <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd911c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 6e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd9120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 6f 02 c0       	add    eax,0xc0026f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 6e 02 c0       	mov    eax,ds:0xc0026ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 6e 02 c0       	mov    ds:0xc0026ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 6e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0026ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 73 02 c0       	push   0xc0027300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 71 4f 00 00       	call   c000c582 <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 5e 73 00 00       	call   c000e97b <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007628:	68 73 12 02 c0       	push   0xc0021273
c000762d:	50                   	push   eax
c000762e:	e8 df 0a 00 00       	call   c0008112 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 02 13 02 c0       	push   0xc0021302
c0007642:	e8 8b 76 00 00       	call   c000ecd2 <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 a1 0d 00 00       	call   c00083f4 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 cc 0a 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 1f 13 02 c0       	push   0xc002131f
c0007673:	e8 5a 76 00 00       	call   c000ecd2 <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 0a 0b 00 00       	call   c000818e <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 92 0a 00 00       	call   c0008130 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 3c 13 02 c0       	push   0xc002133c
c00076ad:	e8 20 76 00 00       	call   c000ecd2 <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 93 02 c0    	inc    DWORD PTR ds:0xc0029300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 70 0a 00 00       	call   c000818e <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 6e 02 c0    	cmp    DWORD PTR ds:0xc0026ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 6f 02 c0       	add    eax,0xc0026f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 6e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd9120]
c0007790:	8b 14 dd e4 6e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd911c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 cf 71 00 00       	call   c000e97b <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00077b7:	68 73 12 02 c0       	push   0xc0021273
c00077bc:	50                   	push   eax
c00077bd:	e8 50 09 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 57 13 02 c0       	push   0xc0021357
c00077d1:	e8 fc 74 00 00       	call   c000ecd2 <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 10 0c 00 00       	call   c00083f4 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 3b 09 00 00       	call   c0008130 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 72 13 02 c0       	push   0xc0021372
c0007804:	e8 c9 74 00 00       	call   c000ecd2 <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 25 09 00 00       	call   c000818e <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 07 09 00 00       	call   c000818e <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 a8 70 00 00       	call   c000e97b <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 2d 08 00 00       	call   c0008112 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 36 08 00 00       	call   c0008130 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 9d 0a 00 00       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 77 07 00 00       	call   c000818e <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 5e 07 00 00       	call   c000818e <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 1e 6f 00 00       	call   c000e97b <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 a5 06 00 00       	call   c0008130 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be 8d 13 02 c0       	mov    esi,0xc002138d
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 3a 06 00 00       	call   c000818e <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 22 06 00 00       	call   c000818e <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba 4c 14 02 c0       	mov    edx,0xc002144c
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 f3 a0 00 00       	call   c0011de2 <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 ed 49 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba 68 14 02 c0       	mov    edx,0xc0021468
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 a5 a0 00 00       	call   c0011de2 <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 9f 49 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba e0 13 02 c0       	mov    edx,0xc00213e0
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 93 02 c0    	mov    edx,DWORD PTR ds:0xc0029304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 93 02 c0       	mov    ds:0xc0029304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba e0 13 02 c0       	mov    edx,0xc00213e0
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 49 49 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 81 6b 00 00       	call   c000e97b <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 9e 25 01 00       	call   c001a3a0 <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 6d 6b 00 00       	call   c000e97b <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 b6 34 01 00       	call   c001b2cc <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 65 2a 02 c0       	push   0xc0022a65
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 96 13 02 c0       	push   0xc0021396
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 b1 13 02 c0       	push   0xc00213b1
c000801f:	e8 ae 6c 00 00       	call   c000ecd2 <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 ae 9b 00 00       	call   c0011bfc <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba 4c 14 02 c0       	mov    edx,0xc002144c
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080a0:	83 e8 41             	sub    eax,0x41
c00080a3:	88 c2                	mov    dl,al
c00080a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080a9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080b3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080b7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bb:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080c1:	0f b6 c0             	movzx  eax,al
c00080c4:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080cb:	85 c0                	test   eax,eax
c00080cd:	74 3e                	je     c000810d <File::File(char const*, Process*, bool)+0xd9>
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080d9:	0f b6 c0             	movzx  eax,al
c00080dc:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00080e3:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00080e9:	85 c0                	test   eax,eax
c00080eb:	75 20                	jne    c000810d <File::File(char const*, Process*, bool)+0xd9>
c00080ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f1:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f7:	0f b6 c0             	movzx  eax,al
c00080fa:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008101:	83 ec 0c             	sub    esp,0xc
c0008104:	50                   	push   eax
c0008105:	e8 10 1f 00 00       	call   c000a01a <LogicalDisk::mount()>
c000810a:	83 c4 10             	add    esp,0x10
c000810d:	90                   	nop
c000810e:	83 c4 1c             	add    esp,0x1c
c0008111:	c3                   	ret    

c0008112 <File::File(char const*, Process*)>:
c0008112:	83 ec 0c             	sub    esp,0xc
c0008115:	6a 01                	push   0x1
c0008117:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000811f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008123:	e8 0c ff ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008128:	83 c4 10             	add    esp,0x10
c000812b:	90                   	nop
c000812c:	83 c4 0c             	add    esp,0xc
c000812f:	c3                   	ret    

c0008130 <File::open(FileOpenMode)>:
c0008130:	53                   	push   ebx
c0008131:	b8 0b 00 00 00       	mov    eax,0xb
c0008136:	83 ec 08             	sub    esp,0x8
c0008139:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000813d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008144:	83 fa 19             	cmp    edx,0x19
c0008147:	77 40                	ja     c0008189 <File::open(FileOpenMode)+0x59>
c0008149:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008150:	85 d2                	test   edx,edx
c0008152:	74 35                	je     c0008189 <File::open(FileOpenMode)+0x59>
c0008154:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000815a:	85 d2                	test   edx,edx
c000815c:	74 2b                	je     c0008189 <File::open(FileOpenMode)+0x59>
c000815e:	b8 06 00 00 00       	mov    eax,0x6
c0008163:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008167:	75 20                	jne    c0008189 <File::open(FileOpenMode)+0x59>
c0008169:	8b 02                	mov    eax,DWORD PTR [edx]
c000816b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008171:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008175:	51                   	push   ecx
c0008176:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008179:	51                   	push   ecx
c000817a:	52                   	push   edx
c000817b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000817e:	83 c4 10             	add    esp,0x10
c0008181:	85 c0                	test   eax,eax
c0008183:	75 04                	jne    c0008189 <File::open(FileOpenMode)+0x59>
c0008185:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008189:	83 c4 08             	add    esp,0x8
c000818c:	5b                   	pop    ebx
c000818d:	c3                   	ret    

c000818e <File::close()>:
c000818e:	53                   	push   ebx
c000818f:	b8 0b 00 00 00       	mov    eax,0xb
c0008194:	83 ec 08             	sub    esp,0x8
c0008197:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000819b:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081a2:	83 f9 19             	cmp    ecx,0x19
c00081a5:	77 41                	ja     c00081e8 <File::close()+0x5a>
c00081a7:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c00081ae:	85 db                	test   ebx,ebx
c00081b0:	74 36                	je     c00081e8 <File::close()+0x5a>
c00081b2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081b9:	74 2d                	je     c00081e8 <File::close()+0x5a>
c00081bb:	b8 05 00 00 00       	mov    eax,0x5
c00081c0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081c4:	74 22                	je     c00081e8 <File::close()+0x5a>
c00081c6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ca:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c00081d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081d7:	53                   	push   ebx
c00081d8:	53                   	push   ebx
c00081d9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081db:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00081e1:	50                   	push   eax
c00081e2:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c00081e5:	83 c4 10             	add    esp,0x10
c00081e8:	83 c4 08             	add    esp,0x8
c00081eb:	5b                   	pop    ebx
c00081ec:	c3                   	ret    
c00081ed:	90                   	nop

c00081ee <File::seek(unsigned long long)>:
c00081ee:	56                   	push   esi
c00081ef:	53                   	push   ebx
c00081f0:	b8 0b 00 00 00       	mov    eax,0xb
c00081f5:	51                   	push   ecx
c00081f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00081fa:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00081fe:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008205:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008209:	83 fa 19             	cmp    edx,0x19
c000820c:	77 31                	ja     c000823f <File::seek(unsigned long long)+0x51>
c000820e:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c0008215:	85 d2                	test   edx,edx
c0008217:	74 26                	je     c000823f <File::seek(unsigned long long)+0x51>
c0008219:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000821f:	85 d2                	test   edx,edx
c0008221:	74 1c                	je     c000823f <File::seek(unsigned long long)+0x51>
c0008223:	b8 05 00 00 00       	mov    eax,0x5
c0008228:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000822c:	74 11                	je     c000823f <File::seek(unsigned long long)+0x51>
c000822e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008230:	53                   	push   ebx
c0008231:	51                   	push   ecx
c0008232:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008238:	52                   	push   edx
c0008239:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000823c:	83 c4 10             	add    esp,0x10
c000823f:	5a                   	pop    edx
c0008240:	5b                   	pop    ebx
c0008241:	5e                   	pop    esi
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <File::truncate(unsigned long long)>:
c0008244:	56                   	push   esi
c0008245:	53                   	push   ebx
c0008246:	b8 0b 00 00 00       	mov    eax,0xb
c000824b:	51                   	push   ecx
c000824c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008250:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008254:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000825b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000825f:	83 fa 19             	cmp    edx,0x19
c0008262:	77 31                	ja     c0008295 <File::truncate(unsigned long long)+0x51>
c0008264:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c000826b:	85 d2                	test   edx,edx
c000826d:	74 26                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c000826f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008275:	85 d2                	test   edx,edx
c0008277:	74 1c                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c0008279:	b8 05 00 00 00       	mov    eax,0x5
c000827e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0008282:	74 11                	je     c0008295 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 02                	mov    eax,DWORD PTR [edx]
c0008286:	53                   	push   ebx
c0008287:	51                   	push   ecx
c0008288:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000828e:	52                   	push   edx
c000828f:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0008292:	83 c4 10             	add    esp,0x10
c0008295:	5a                   	pop    edx
c0008296:	5b                   	pop    ebx
c0008297:	5e                   	pop    esi
c0008298:	c3                   	ret    
c0008299:	90                   	nop

c000829a <File::tell(unsigned long long*)>:
c000829a:	83 ec 0c             	sub    esp,0xc
c000829d:	b8 0b 00 00 00       	mov    eax,0xb
c00082a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082a6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082ad:	83 fa 19             	cmp    edx,0x19
c00082b0:	77 34                	ja     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082b2:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00082b9:	85 d2                	test   edx,edx
c00082bb:	74 29                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082bd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082c3:	85 d2                	test   edx,edx
c00082c5:	74 1f                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082c7:	b8 05 00 00 00       	mov    eax,0x5
c00082cc:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082d0:	74 14                	je     c00082e6 <File::tell(unsigned long long*)+0x4c>
c00082d2:	50                   	push   eax
c00082d3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082d5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082d9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082df:	52                   	push   edx
c00082e0:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00082e3:	83 c4 10             	add    esp,0x10
c00082e6:	83 c4 0c             	add    esp,0xc
c00082e9:	c3                   	ret    

c00082ea <File::rewind()>:
c00082ea:	83 ec 10             	sub    esp,0x10
c00082ed:	6a 00                	push   0x0
c00082ef:	6a 00                	push   0x0
c00082f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00082f5:	e8 f4 fe ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00082fa:	83 c4 1c             	add    esp,0x1c
c00082fd:	c3                   	ret    

c00082fe <File::unlink()>:
c00082fe:	83 ec 0c             	sub    esp,0xc
c0008301:	b8 0b 00 00 00       	mov    eax,0xb
c0008306:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000830a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008311:	83 f9 19             	cmp    ecx,0x19
c0008314:	77 2f                	ja     c0008345 <File::unlink()+0x47>
c0008316:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000831d:	85 c9                	test   ecx,ecx
c000831f:	74 24                	je     c0008345 <File::unlink()+0x47>
c0008321:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008327:	85 c9                	test   ecx,ecx
c0008329:	74 1a                	je     c0008345 <File::unlink()+0x47>
c000832b:	b8 06 00 00 00       	mov    eax,0x6
c0008330:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008334:	75 0f                	jne    c0008345 <File::unlink()+0x47>
c0008336:	83 c2 0d             	add    edx,0xd
c0008339:	50                   	push   eax
c000833a:	50                   	push   eax
c000833b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000833d:	52                   	push   edx
c000833e:	51                   	push   ecx
c000833f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008342:	83 c4 10             	add    esp,0x10
c0008345:	83 c4 0c             	add    esp,0xc
c0008348:	c3                   	ret    
c0008349:	90                   	nop

c000834a <File::rename(char const*)>:
c000834a:	83 ec 0c             	sub    esp,0xc
c000834d:	b8 0b 00 00 00       	mov    eax,0xb
c0008352:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008356:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000835d:	83 f9 19             	cmp    ecx,0x19
c0008360:	77 32                	ja     c0008394 <File::rename(char const*)+0x4a>
c0008362:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008369:	85 c9                	test   ecx,ecx
c000836b:	74 27                	je     c0008394 <File::rename(char const*)+0x4a>
c000836d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008373:	85 c9                	test   ecx,ecx
c0008375:	74 1d                	je     c0008394 <File::rename(char const*)+0x4a>
c0008377:	b8 06 00 00 00       	mov    eax,0x6
c000837c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008380:	75 12                	jne    c0008394 <File::rename(char const*)+0x4a>
c0008382:	83 c2 0d             	add    edx,0xd
c0008385:	50                   	push   eax
c0008386:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008388:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000838c:	52                   	push   edx
c000838d:	51                   	push   ecx
c000838e:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008391:	83 c4 10             	add    esp,0x10
c0008394:	83 c4 0c             	add    esp,0xc
c0008397:	c3                   	ret    

c0008398 <File::chfatattr(unsigned char, unsigned char)>:
c0008398:	57                   	push   edi
c0008399:	b8 0b 00 00 00       	mov    eax,0xb
c000839e:	56                   	push   esi
c000839f:	53                   	push   ebx
c00083a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083a4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083a8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083af:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083b3:	83 f9 19             	cmp    ecx,0x19
c00083b6:	77 37                	ja     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083b8:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00083bf:	85 c9                	test   ecx,ecx
c00083c1:	74 2c                	je     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083c3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083c9:	85 c9                	test   ecx,ecx
c00083cb:	74 22                	je     c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083cd:	b8 06 00 00 00       	mov    eax,0x6
c00083d2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083d6:	75 17                	jne    c00083ef <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083da:	89 f0                	mov    eax,esi
c00083dc:	83 c2 0d             	add    edx,0xd
c00083df:	0f b6 f0             	movzx  esi,al
c00083e2:	0f b6 db             	movzx  ebx,bl
c00083e5:	56                   	push   esi
c00083e6:	53                   	push   ebx
c00083e7:	52                   	push   edx
c00083e8:	51                   	push   ecx
c00083e9:	ff 57 38             	call   DWORD PTR [edi+0x38]
c00083ec:	83 c4 10             	add    esp,0x10
c00083ef:	5b                   	pop    ebx
c00083f0:	5e                   	pop    esi
c00083f1:	5f                   	pop    edi
c00083f2:	c3                   	ret    
c00083f3:	90                   	nop

c00083f4 <File::exists()>:
c00083f4:	83 ec 0c             	sub    esp,0xc
c00083f7:	31 c0                	xor    eax,eax
c00083f9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083fd:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008404:	83 f9 19             	cmp    ecx,0x19
c0008407:	77 24                	ja     c000842d <File::exists()+0x39>
c0008409:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008410:	85 c9                	test   ecx,ecx
c0008412:	74 19                	je     c000842d <File::exists()+0x39>
c0008414:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000841a:	85 c9                	test   ecx,ecx
c000841c:	74 0f                	je     c000842d <File::exists()+0x39>
c000841e:	83 c2 0d             	add    edx,0xd
c0008421:	50                   	push   eax
c0008422:	50                   	push   eax
c0008423:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008425:	52                   	push   edx
c0008426:	51                   	push   ecx
c0008427:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000842a:	83 c4 10             	add    esp,0x10
c000842d:	83 c4 0c             	add    esp,0xc
c0008430:	c3                   	ret    
c0008431:	90                   	nop

c0008432 <File::stat(unsigned long long*, bool*)>:
c0008432:	56                   	push   esi
c0008433:	53                   	push   ebx
c0008434:	50                   	push   eax
c0008435:	b8 0b 00 00 00       	mov    eax,0xb
c000843a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000843e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008442:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008449:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000844d:	83 f9 19             	cmp    ecx,0x19
c0008450:	77 3d                	ja     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c0008452:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008459:	85 c9                	test   ecx,ecx
c000845b:	74 32                	je     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c000845d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008463:	85 c9                	test   ecx,ecx
c0008465:	74 28                	je     c000848f <File::stat(unsigned long long*, bool*)+0x5d>
c0008467:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008469:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000846d:	74 13                	je     c0008482 <File::stat(unsigned long long*, bool*)+0x50>
c000846f:	83 ec 04             	sub    esp,0x4
c0008472:	56                   	push   esi
c0008473:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008479:	51                   	push   ecx
c000847a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000847d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0008480:	eb 0a                	jmp    c000848c <File::stat(unsigned long long*, bool*)+0x5a>
c0008482:	53                   	push   ebx
c0008483:	83 c2 0d             	add    edx,0xd
c0008486:	56                   	push   esi
c0008487:	52                   	push   edx
c0008488:	51                   	push   ecx
c0008489:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000848c:	83 c4 10             	add    esp,0x10
c000848f:	5a                   	pop    edx
c0008490:	5b                   	pop    ebx
c0008491:	5e                   	pop    esi
c0008492:	c3                   	ret    

c0008493 <Fs::setcwd(Process*, char*)>:
c0008493:	55                   	push   ebp
c0008494:	57                   	push   edi
c0008495:	56                   	push   esi
c0008496:	53                   	push   ebx
c0008497:	81 ec 1c 02 00 00    	sub    esp,0x21c
c000849d:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084a4:	6a 00                	push   0x0
c00084a6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084ac:	57                   	push   edi
c00084ad:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084b4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084b8:	56                   	push   esi
c00084b9:	e8 5c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084be:	89 34 24             	mov    DWORD PTR [esp],esi
c00084c1:	e8 aa 80 ff ff       	call   c0000570 <strlen>
c00084c6:	83 c4 10             	add    esp,0x10
c00084c9:	83 f8 02             	cmp    eax,0x2
c00084cc:	77 15                	ja     c00084e3 <Fs::setcwd(Process*, char*)+0x50>
c00084ce:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084d3:	83 eb 41             	sub    ebx,0x41
c00084d6:	8b 04 9d 80 97 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6880]
c00084dd:	85 c0                	test   eax,eax
c00084df:	75 1c                	jne    c00084fd <Fs::setcwd(Process*, char*)+0x6a>
c00084e1:	eb 2f                	jmp    c0008512 <Fs::setcwd(Process*, char*)+0x7f>
c00084e3:	83 ec 0c             	sub    esp,0xc
c00084e6:	56                   	push   esi
c00084e7:	e8 84 80 ff ff       	call   c0000570 <strlen>
c00084ec:	83 c4 10             	add    esp,0x10
c00084ef:	83 f8 03             	cmp    eax,0x3
c00084f2:	75 57                	jne    c000854b <Fs::setcwd(Process*, char*)+0xb8>
c00084f4:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00084f9:	75 50                	jne    c000854b <Fs::setcwd(Process*, char*)+0xb8>
c00084fb:	eb d1                	jmp    c00084ce <Fs::setcwd(Process*, char*)+0x3b>
c00084fd:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008504:	75 0c                	jne    c0008512 <Fs::setcwd(Process*, char*)+0x7f>
c0008506:	83 ec 0c             	sub    esp,0xc
c0008509:	50                   	push   eax
c000850a:	e8 0b 1b 00 00       	call   c000a01a <LogicalDisk::mount()>
c000850f:	83 c4 10             	add    esp,0x10
c0008512:	b8 03 00 00 00       	mov    eax,0x3
c0008517:	83 fb 19             	cmp    ebx,0x19
c000851a:	0f 87 c6 00 00 00    	ja     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008520:	8b 14 9d 80 97 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd6880]
c0008527:	b8 05 00 00 00       	mov    eax,0x5
c000852c:	85 d2                	test   edx,edx
c000852e:	0f 84 b2 00 00 00    	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008534:	b8 06 00 00 00       	mov    eax,0x6
c0008539:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008540:	0f 85 92 00 00 00    	jne    c00085d8 <Fs::setcwd(Process*, char*)+0x145>
c0008546:	e9 9b 00 00 00       	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c000854b:	83 ec 0c             	sub    esp,0xc
c000854e:	68 14 01 00 00       	push   0x114
c0008553:	e8 23 64 00 00       	call   c000e97b <malloc>
c0008558:	83 c4 0c             	add    esp,0xc
c000855b:	89 c3                	mov    ebx,eax
c000855d:	55                   	push   ebp
c000855e:	56                   	push   esi
c000855f:	50                   	push   eax
c0008560:	e8 ad fb ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0008565:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000856a:	83 c4 0c             	add    esp,0xc
c000856d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008571:	50                   	push   eax
c0008572:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008576:	50                   	push   eax
c0008577:	53                   	push   ebx
c0008578:	e8 b5 fe ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c000857d:	83 c4 10             	add    esp,0x10
c0008580:	83 f8 02             	cmp    eax,0x2
c0008583:	74 27                	je     c00085ac <Fs::setcwd(Process*, char*)+0x119>
c0008585:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000858a:	75 1c                	jne    c00085a8 <Fs::setcwd(Process*, char*)+0x115>
c000858c:	b8 02 00 00 00       	mov    eax,0x2
c0008591:	85 db                	test   ebx,ebx
c0008593:	74 51                	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	8b 03                	mov    eax,DWORD PTR [ebx]
c000859a:	53                   	push   ebx
c000859b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000859e:	83 c4 10             	add    esp,0x10
c00085a1:	b8 02 00 00 00       	mov    eax,0x2
c00085a6:	eb 3e                	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085a8:	85 c0                	test   eax,eax
c00085aa:	74 1c                	je     c00085c8 <Fs::setcwd(Process*, char*)+0x135>
c00085ac:	b8 01 00 00 00       	mov    eax,0x1
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 31                	je     c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 01 00 00 00       	mov    eax,0x1
c00085c6:	eb 1e                	jmp    c00085e6 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 db                	test   ebx,ebx
c00085ca:	74 0c                	je     c00085d8 <Fs::setcwd(Process*, char*)+0x145>
c00085cc:	83 ec 0c             	sub    esp,0xc
c00085cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085d1:	53                   	push   ebx
c00085d2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085d5:	83 c4 10             	add    esp,0x10
c00085d8:	50                   	push   eax
c00085d9:	50                   	push   eax
c00085da:	56                   	push   esi
c00085db:	57                   	push   edi
c00085dc:	e8 5f 80 ff ff       	call   c0000640 <strcpy>
c00085e1:	83 c4 10             	add    esp,0x10
c00085e4:	31 c0                	xor    eax,eax
c00085e6:	81 c4 1c 02 00 00    	add    esp,0x21c
c00085ec:	5b                   	pop    ebx
c00085ed:	5e                   	pop    esi
c00085ee:	5f                   	pop    edi
c00085ef:	5d                   	pop    ebp
c00085f0:	c3                   	ret    
c00085f1:	90                   	nop

c00085f2 <Directory::Directory(char const*, Process*)>:
c00085f2:	83 ec 0c             	sub    esp,0xc
c00085f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085f9:	83 ec 08             	sub    esp,0x8
c00085fc:	6a 00                	push   0x0
c00085fe:	50                   	push   eax
c00085ff:	e8 f8 95 00 00       	call   c0011bfc <UnixFile::UnixFile(int)>
c0008604:	83 c4 10             	add    esp,0x10
c0008607:	ba 68 14 02 c0       	mov    edx,0xc0021468
c000860c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008610:	89 10                	mov    DWORD PTR [eax],edx
c0008612:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0008617:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000861b:	0f 95 c0             	setne  al
c000861e:	0f b6 c0             	movzx  eax,al
c0008621:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008625:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000862b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000862f:	83 c2 0d             	add    edx,0xd
c0008632:	50                   	push   eax
c0008633:	51                   	push   ecx
c0008634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008638:	52                   	push   edx
c0008639:	e8 dc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000863e:	83 c4 10             	add    esp,0x10
c0008641:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008645:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008648:	83 e8 41             	sub    eax,0x41
c000864b:	88 c2                	mov    dl,al
c000864d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008651:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008657:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000865b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000865f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008663:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008669:	0f b6 c0             	movzx  eax,al
c000866c:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0008673:	85 c0                	test   eax,eax
c0008675:	74 3e                	je     c00086b5 <Directory::Directory(char const*, Process*)+0xc3>
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008681:	0f b6 c0             	movzx  eax,al
c0008684:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c000868b:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008691:	85 c0                	test   eax,eax
c0008693:	75 20                	jne    c00086b5 <Directory::Directory(char const*, Process*)+0xc3>
c0008695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008699:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000869f:	0f b6 c0             	movzx  eax,al
c00086a2:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c00086a9:	83 ec 0c             	sub    esp,0xc
c00086ac:	50                   	push   eax
c00086ad:	e8 68 19 00 00       	call   c000a01a <LogicalDisk::mount()>
c00086b2:	83 c4 10             	add    esp,0x10
c00086b5:	90                   	nop
c00086b6:	83 c4 0c             	add    esp,0xc
c00086b9:	c3                   	ret    

c00086ba <Directory::open()>:
c00086ba:	53                   	push   ebx
c00086bb:	b8 0b 00 00 00       	mov    eax,0xb
c00086c0:	83 ec 08             	sub    esp,0x8
c00086c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086c7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ce:	83 fa 19             	cmp    edx,0x19
c00086d1:	77 3d                	ja     c0008710 <Directory::open()+0x56>
c00086d3:	8b 14 95 80 97 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd6880]
c00086da:	85 d2                	test   edx,edx
c00086dc:	74 32                	je     c0008710 <Directory::open()+0x56>
c00086de:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00086e4:	85 d2                	test   edx,edx
c00086e6:	74 28                	je     c0008710 <Directory::open()+0x56>
c00086e8:	b8 06 00 00 00       	mov    eax,0x6
c00086ed:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00086f1:	75 1d                	jne    c0008710 <Directory::open()+0x56>
c00086f3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00086f9:	50                   	push   eax
c00086fa:	8b 02                	mov    eax,DWORD PTR [edx]
c00086fc:	51                   	push   ecx
c00086fd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008700:	51                   	push   ecx
c0008701:	52                   	push   edx
c0008702:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008705:	83 c4 10             	add    esp,0x10
c0008708:	85 c0                	test   eax,eax
c000870a:	75 04                	jne    c0008710 <Directory::open()+0x56>
c000870c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008710:	83 c4 08             	add    esp,0x8
c0008713:	5b                   	pop    ebx
c0008714:	c3                   	ret    
c0008715:	90                   	nop

c0008716 <Directory::close()>:
c0008716:	53                   	push   ebx
c0008717:	b8 0b 00 00 00       	mov    eax,0xb
c000871c:	83 ec 08             	sub    esp,0x8
c000871f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008723:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000872a:	83 f9 19             	cmp    ecx,0x19
c000872d:	77 41                	ja     c0008770 <Directory::close()+0x5a>
c000872f:	8b 1c 8d 80 97 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd6880]
c0008736:	85 db                	test   ebx,ebx
c0008738:	74 36                	je     c0008770 <Directory::close()+0x5a>
c000873a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008741:	74 2d                	je     c0008770 <Directory::close()+0x5a>
c0008743:	b8 05 00 00 00       	mov    eax,0x5
c0008748:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000874c:	74 22                	je     c0008770 <Directory::close()+0x5a>
c000874e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008752:	8b 04 8d 80 97 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd6880]
c0008759:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000875f:	53                   	push   ebx
c0008760:	53                   	push   ebx
c0008761:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008763:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008769:	50                   	push   eax
c000876a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000876d:	83 c4 10             	add    esp,0x10
c0008770:	83 c4 08             	add    esp,0x8
c0008773:	5b                   	pop    ebx
c0008774:	c3                   	ret    
c0008775:	90                   	nop

c0008776 <Directory::unlink()>:
c0008776:	83 ec 0c             	sub    esp,0xc
c0008779:	b8 0b 00 00 00       	mov    eax,0xb
c000877e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008782:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008789:	83 f9 19             	cmp    ecx,0x19
c000878c:	77 2f                	ja     c00087bd <Directory::unlink()+0x47>
c000878e:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0008795:	85 c9                	test   ecx,ecx
c0008797:	74 24                	je     c00087bd <Directory::unlink()+0x47>
c0008799:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000879f:	85 c9                	test   ecx,ecx
c00087a1:	74 1a                	je     c00087bd <Directory::unlink()+0x47>
c00087a3:	b8 06 00 00 00       	mov    eax,0x6
c00087a8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087ac:	75 0f                	jne    c00087bd <Directory::unlink()+0x47>
c00087ae:	83 c2 0d             	add    edx,0xd
c00087b1:	50                   	push   eax
c00087b2:	50                   	push   eax
c00087b3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087b5:	52                   	push   edx
c00087b6:	51                   	push   ecx
c00087b7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087ba:	83 c4 10             	add    esp,0x10
c00087bd:	83 c4 0c             	add    esp,0xc
c00087c0:	c3                   	ret    
c00087c1:	90                   	nop

c00087c2 <Directory::rename(char const*)>:
c00087c2:	83 ec 0c             	sub    esp,0xc
c00087c5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087d5:	83 f9 19             	cmp    ecx,0x19
c00087d8:	77 32                	ja     c000880c <Directory::rename(char const*)+0x4a>
c00087da:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00087e1:	85 c9                	test   ecx,ecx
c00087e3:	74 27                	je     c000880c <Directory::rename(char const*)+0x4a>
c00087e5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087eb:	85 c9                	test   ecx,ecx
c00087ed:	74 1d                	je     c000880c <Directory::rename(char const*)+0x4a>
c00087ef:	b8 06 00 00 00       	mov    eax,0x6
c00087f4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087f8:	75 12                	jne    c000880c <Directory::rename(char const*)+0x4a>
c00087fa:	83 c2 0d             	add    edx,0xd
c00087fd:	50                   	push   eax
c00087fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008804:	52                   	push   edx
c0008805:	51                   	push   ecx
c0008806:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008809:	83 c4 10             	add    esp,0x10
c000880c:	83 c4 0c             	add    esp,0xc
c000880f:	c3                   	ret    

c0008810 <Directory::exists()>:
c0008810:	83 ec 0c             	sub    esp,0xc
c0008813:	31 c0                	xor    eax,eax
c0008815:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008819:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008820:	83 f9 19             	cmp    ecx,0x19
c0008823:	77 24                	ja     c0008849 <Directory::exists()+0x39>
c0008825:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000882c:	85 c9                	test   ecx,ecx
c000882e:	74 19                	je     c0008849 <Directory::exists()+0x39>
c0008830:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008836:	85 c9                	test   ecx,ecx
c0008838:	74 0f                	je     c0008849 <Directory::exists()+0x39>
c000883a:	83 c2 0d             	add    edx,0xd
c000883d:	50                   	push   eax
c000883e:	50                   	push   eax
c000883f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008841:	52                   	push   edx
c0008842:	51                   	push   ecx
c0008843:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008846:	83 c4 10             	add    esp,0x10
c0008849:	83 c4 0c             	add    esp,0xc
c000884c:	c3                   	ret    
c000884d:	90                   	nop

c000884e <Directory::read(dirent*)>:
c000884e:	83 ec 1c             	sub    esp,0x1c
c0008851:	b8 0b 00 00 00       	mov    eax,0xb
c0008856:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000885a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008861:	83 f9 19             	cmp    ecx,0x19
c0008864:	77 30                	ja     c0008896 <Directory::read(dirent*)+0x48>
c0008866:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c000886d:	85 c9                	test   ecx,ecx
c000886f:	74 25                	je     c0008896 <Directory::read(dirent*)+0x48>
c0008871:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008878:	74 1c                	je     c0008896 <Directory::read(dirent*)+0x48>
c000887a:	83 ec 0c             	sub    esp,0xc
c000887d:	8b 02                	mov    eax,DWORD PTR [edx]
c000887f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0008883:	51                   	push   ecx
c0008884:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0008888:	6a 00                	push   0x0
c000888a:	68 10 01 00 00       	push   0x110
c000888f:	52                   	push   edx
c0008890:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0008893:	83 c4 20             	add    esp,0x20
c0008896:	83 c4 1c             	add    esp,0x1c
c0008899:	c3                   	ret    

c000889a <Directory::create()>:
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	b8 0b 00 00 00       	mov    eax,0xb
c00088a2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088a6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088ad:	83 f9 19             	cmp    ecx,0x19
c00088b0:	77 2f                	ja     c00088e1 <Directory::create()+0x47>
c00088b2:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c00088b9:	85 c9                	test   ecx,ecx
c00088bb:	74 24                	je     c00088e1 <Directory::create()+0x47>
c00088bd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088c3:	85 c9                	test   ecx,ecx
c00088c5:	74 1a                	je     c00088e1 <Directory::create()+0x47>
c00088c7:	b8 06 00 00 00       	mov    eax,0x6
c00088cc:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088d0:	75 0f                	jne    c00088e1 <Directory::create()+0x47>
c00088d2:	83 c2 0d             	add    edx,0xd
c00088d5:	50                   	push   eax
c00088d6:	50                   	push   eax
c00088d7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088d9:	52                   	push   edx
c00088da:	51                   	push   ecx
c00088db:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088de:	83 c4 10             	add    esp,0x10
c00088e1:	83 c4 0c             	add    esp,0xc
c00088e4:	c3                   	ret    
c00088e5:	90                   	nop

c00088e6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c00088e6:	b8 0a 00 00 00       	mov    eax,0xa
c00088eb:	c3                   	ret    

c00088ec <Bus::Bus(char const*)>:
c00088ec:	83 ec 0c             	sub    esp,0xc
c00088ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00088f3:	83 ec 08             	sub    esp,0x8
c00088f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00088fa:	50                   	push   eax
c00088fb:	e8 a0 08 00 00       	call   c00091a0 <Device::Device(char const*)>
c0008900:	83 c4 10             	add    esp,0x10
c0008903:	ba 84 14 02 c0       	mov    edx,0xc0021484
c0008908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000890c:	89 10                	mov    DWORD PTR [eax],edx
c000890e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008912:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000891c:	90                   	nop
c000891d:	83 c4 0c             	add    esp,0xc
c0008920:	c3                   	ret    
c0008921:	90                   	nop
c0008922:	66 90                	xchg   ax,ax

c0008924 <Bus::~Bus()>:
c0008924:	83 ec 0c             	sub    esp,0xc
c0008927:	ba 84 14 02 c0       	mov    edx,0xc0021484
c000892c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008930:	89 10                	mov    DWORD PTR [eax],edx
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	83 ec 0c             	sub    esp,0xc
c0008939:	50                   	push   eax
c000893a:	e8 01 06 00 00       	call   c0008f40 <Device::~Device()>
c000893f:	83 c4 10             	add    esp,0x10
c0008942:	90                   	nop
c0008943:	83 c4 0c             	add    esp,0xc
c0008946:	c3                   	ret    
c0008947:	90                   	nop

c0008948 <Bus::~Bus()>:
c0008948:	83 ec 0c             	sub    esp,0xc
c000894b:	83 ec 0c             	sub    esp,0xc
c000894e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008952:	e8 cd ff ff ff       	call   c0008924 <Bus::~Bus()>
c0008957:	83 c4 10             	add    esp,0x10
c000895a:	83 ec 08             	sub    esp,0x8
c000895d:	68 58 01 00 00       	push   0x158
c0008962:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008966:	e8 9d 3d 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000896b:	83 c4 10             	add    esp,0x10
c000896e:	83 c4 0c             	add    esp,0xc
c0008971:	c3                   	ret    

c0008972 <KeBeepThread(void*)>:
c0008972:	83 ec 0c             	sub    esp,0xc
c0008975:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000897a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000897e:	48                   	dec    eax
c000897f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0008984:	75 01                	jne    c0008987 <KeBeepThread(void*)+0x15>
c0008986:	fb                   	sti    
c0008987:	83 ec 0c             	sub    esp,0xc
c000898a:	6b c2 0a             	imul   eax,edx,0xa
c000898d:	50                   	push   eax
c000898e:	e8 cd cc 00 00       	call   c0015660 <milliTenthSleep(unsigned int)>
c0008993:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000899a:	e8 67 fc 00 00       	call   c0018606 <HalMakeBeep(int)>
c000899f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089a7:	83 c4 1c             	add    esp,0x1c
c00089aa:	e9 95 cb 00 00       	jmp    c0015544 <blockTask(TaskState)>

c00089af <KeBeep(int, int, bool)>:
c00089af:	56                   	push   esi
c00089b0:	53                   	push   ebx
c00089b1:	83 ec 10             	sub    esp,0x10
c00089b4:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089b8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089c0:	e8 41 fc 00 00       	call   c0018606 <HalMakeBeep(int)>
c00089c5:	83 c4 10             	add    esp,0x10
c00089c8:	89 f0                	mov    eax,esi
c00089ca:	84 c0                	test   al,al
c00089cc:	74 1e                	je     c00089ec <KeBeep(int, int, bool)+0x3d>
c00089ce:	83 ec 0c             	sub    esp,0xc
c00089d1:	6b db 0a             	imul   ebx,ebx,0xa
c00089d4:	53                   	push   ebx
c00089d5:	e8 86 cc 00 00       	call   c0015660 <milliTenthSleep(unsigned int)>
c00089da:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00089e2:	83 c4 14             	add    esp,0x14
c00089e5:	5b                   	pop    ebx
c00089e6:	5e                   	pop    esi
c00089e7:	e9 1a fc 00 00       	jmp    c0018606 <HalMakeBeep(int)>
c00089ec:	68 e6 00 00 00       	push   0xe6
c00089f1:	53                   	push   ebx
c00089f2:	68 72 89 00 c0       	push   0xc0008972
c00089f7:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00089fd:	e8 36 c8 00 00       	call   c0015238 <Process::createThread(void (*)(void*), void*, int)>
c0008a02:	83 c4 14             	add    esp,0x14
c0008a05:	5b                   	pop    ebx
c0008a06:	5e                   	pop    esi
c0008a07:	c3                   	ret    

c0008a08 <KeLoadClockSettings()>:
c0008a08:	57                   	push   edi
c0008a09:	56                   	push   esi
c0008a0a:	53                   	push   ebx
c0008a0b:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a11:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a16:	68 a8 14 02 c0       	push   0xc00214a8
c0008a1b:	e8 40 3d 00 00       	call   c000c760 <CmOpen(char const*)>
c0008a20:	59                   	pop    ecx
c0008a21:	89 c3                	mov    ebx,eax
c0008a23:	5e                   	pop    esi
c0008a24:	68 cd 14 02 c0       	push   0xc00214cd
c0008a29:	50                   	push   eax
c0008a2a:	e8 31 49 00 00       	call   c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a2f:	5f                   	pop    edi
c0008a30:	89 c6                	mov    esi,eax
c0008a32:	5a                   	pop    edx
c0008a33:	50                   	push   eax
c0008a34:	68 e2 14 02 c0       	push   0xc00214e2
c0008a39:	e8 26 e5 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a3e:	83 c4 10             	add    esp,0x10
c0008a41:	85 f6                	test   esi,esi
c0008a43:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a47:	7e 0c                	jle    c0008a55 <KeLoadClockSettings()+0x4d>
c0008a49:	52                   	push   edx
c0008a4a:	57                   	push   edi
c0008a4b:	56                   	push   esi
c0008a4c:	53                   	push   ebx
c0008a4d:	e8 7e 3e 00 00       	call   c000c8d0 <CmGetString(Reghive_Tag*, int, char*)>
c0008a52:	83 c4 10             	add    esp,0x10
c0008a55:	83 ec 0c             	sub    esp,0xc
c0008a58:	53                   	push   ebx
c0008a59:	e8 20 3e 00 00       	call   c000c87e <CmClose(Reghive_Tag*)>
c0008a5e:	83 c4 0c             	add    esp,0xc
c0008a61:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a66:	50                   	push   eax
c0008a67:	57                   	push   edi
c0008a68:	68 f0 14 02 c0       	push   0xc00214f0
c0008a6d:	e8 f2 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a72:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a76:	c6 05 08 93 02 c0 00 	mov    BYTE PTR ds:0xc0029308,0x0
c0008a7d:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008a80:	83 c4 10             	add    esp,0x10
c0008a83:	a8 fd                	test   al,0xfd
c0008a85:	75 50                	jne    c0008ad7 <KeLoadClockSettings()+0xcf>
c0008a87:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008a8c:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008a91:	83 fb 2e             	cmp    ebx,0x2e
c0008a94:	75 07                	jne    c0008a9d <KeLoadClockSettings()+0x95>
c0008a96:	b0 01                	mov    al,0x1
c0008a98:	83 fa 35             	cmp    edx,0x35
c0008a9b:	74 0f                	je     c0008aac <KeLoadClockSettings()+0xa4>
c0008a9d:	31 c0                	xor    eax,eax
c0008a9f:	83 fa 2e             	cmp    edx,0x2e
c0008aa2:	75 08                	jne    c0008aac <KeLoadClockSettings()+0xa4>
c0008aa4:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008aa9:	0f 94 c0             	sete   al
c0008aac:	a2 09 93 02 c0       	mov    ds:0xc0029309,al
c0008ab1:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ab6:	83 e8 30             	sub    eax,0x30
c0008ab9:	83 fa 2e             	cmp    edx,0x2e
c0008abc:	75 07                	jne    c0008ac5 <KeLoadClockSettings()+0xbd>
c0008abe:	6b c0 0a             	imul   eax,eax,0xa
c0008ac1:	8d 44 03 d0          	lea    eax,[ebx+eax*1-0x30]
c0008ac5:	a3 0c 93 02 c0       	mov    ds:0xc002930c,eax
c0008aca:	80 f9 2d             	cmp    cl,0x2d
c0008acd:	75 19                	jne    c0008ae8 <KeLoadClockSettings()+0xe0>
c0008acf:	f7 1d 0c 93 02 c0    	neg    DWORD PTR ds:0xc002930c
c0008ad5:	eb 11                	jmp    c0008ae8 <KeLoadClockSettings()+0xe0>
c0008ad7:	c6 05 09 93 02 c0 00 	mov    BYTE PTR ds:0xc0029309,0x0
c0008ade:	c7 05 0c 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002930c,0x0
c0008ae8:	50                   	push   eax
c0008ae9:	0f b6 05 09 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029309
c0008af0:	8d 04 80             	lea    eax,[eax+eax*4]
c0008af3:	50                   	push   eax
c0008af4:	ff 35 0c 93 02 c0    	push   DWORD PTR ds:0xc002930c
c0008afa:	68 07 15 02 c0       	push   0xc0021507
c0008aff:	e8 60 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b04:	81 c4 70 02 00 00    	add    esp,0x270
c0008b0a:	5b                   	pop    ebx
c0008b0b:	5e                   	pop    esi
c0008b0c:	5f                   	pop    edi
c0008b0d:	c3                   	ret    

c0008b0e <Clock::Clock(char const*)>:
c0008b0e:	83 ec 0c             	sub    esp,0xc
c0008b11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b15:	83 ec 08             	sub    esp,0x8
c0008b18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b1c:	50                   	push   eax
c0008b1d:	e8 7e 06 00 00       	call   c00091a0 <Device::Device(char const*)>
c0008b22:	83 c4 10             	add    esp,0x10
c0008b25:	ba 20 15 02 c0       	mov    edx,0xc0021520
c0008b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b2e:	89 10                	mov    DWORD PTR [eax],edx
c0008b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b34:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b3e:	90                   	nop
c0008b3f:	83 c4 0c             	add    esp,0xc
c0008b42:	c3                   	ret    
c0008b43:	90                   	nop

c0008b44 <Clock::~Clock()>:
c0008b44:	83 ec 0c             	sub    esp,0xc
c0008b47:	ba 20 15 02 c0       	mov    edx,0xc0021520
c0008b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b50:	89 10                	mov    DWORD PTR [eax],edx
c0008b52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b56:	83 ec 0c             	sub    esp,0xc
c0008b59:	50                   	push   eax
c0008b5a:	e8 e1 03 00 00       	call   c0008f40 <Device::~Device()>
c0008b5f:	83 c4 10             	add    esp,0x10
c0008b62:	90                   	nop
c0008b63:	83 c4 0c             	add    esp,0xc
c0008b66:	c3                   	ret    
c0008b67:	90                   	nop

c0008b68 <Clock::~Clock()>:
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b72:	e8 cd ff ff ff       	call   c0008b44 <Clock::~Clock()>
c0008b77:	83 c4 10             	add    esp,0x10
c0008b7a:	83 ec 08             	sub    esp,0x8
c0008b7d:	68 58 01 00 00       	push   0x158
c0008b82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b86:	e8 7d 3b 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0008b8b:	83 c4 10             	add    esp,0x10
c0008b8e:	83 c4 0c             	add    esp,0xc
c0008b91:	c3                   	ret    

c0008b92 <Clock::timeInSecondsLocal()>:
c0008b92:	53                   	push   ebx
c0008b93:	83 ec 14             	sub    esp,0x14
c0008b96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008b9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0008b9c:	50                   	push   eax
c0008b9d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008ba0:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008ba7:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008bad:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bb3:	89 cb                	mov    ebx,ecx
c0008bb5:	c1 fb 1f             	sar    ebx,0x1f
c0008bb8:	01 c8                	add    eax,ecx
c0008bba:	11 da                	adc    edx,ebx
c0008bbc:	83 c4 10             	add    esp,0x10
c0008bbf:	31 c9                	xor    ecx,ecx
c0008bc1:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008bc8:	74 05                	je     c0008bcf <Clock::timeInSecondsLocal()+0x3d>
c0008bca:	b9 08 07 00 00       	mov    ecx,0x708
c0008bcf:	31 db                	xor    ebx,ebx
c0008bd1:	01 c8                	add    eax,ecx
c0008bd3:	11 da                	adc    edx,ebx
c0008bd5:	83 c4 08             	add    esp,0x8
c0008bd8:	5b                   	pop    ebx
c0008bd9:	c3                   	ret    

c0008bda <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bda:	57                   	push   edi
c0008bdb:	56                   	push   esi
c0008bdc:	53                   	push   ebx
c0008bdd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008be1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008be5:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008be7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008beb:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008bee:	0f b6 05 08 93 02 c0 	movzx  eax,BYTE PTR ds:0xc0029308
c0008bf5:	03 05 0c 93 02 c0    	add    eax,DWORD PTR ds:0xc002930c
c0008bfb:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c01:	99                   	cdq    
c0008c02:	29 c6                	sub    esi,eax
c0008c04:	19 d7                	sbb    edi,edx
c0008c06:	89 f0                	mov    eax,esi
c0008c08:	89 fa                	mov    edx,edi
c0008c0a:	31 f6                	xor    esi,esi
c0008c0c:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008c13:	74 05                	je     c0008c1a <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c15:	be 08 07 00 00       	mov    esi,0x708
c0008c1a:	31 ff                	xor    edi,edi
c0008c1c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c20:	29 f0                	sub    eax,esi
c0008c22:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c26:	19 fa                	sbb    edx,edi
c0008c28:	89 d8                	mov    eax,ebx
c0008c2a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c2e:	5b                   	pop    ebx
c0008c2f:	5e                   	pop    esi
c0008c30:	5f                   	pop    edi
c0008c31:	ff e0                	jmp    eax

c0008c33 <KeDatetimeToSeconds(datetime_t)>:
c0008c33:	55                   	push   ebp
c0008c34:	57                   	push   edi
c0008c35:	56                   	push   esi
c0008c36:	53                   	push   ebx
c0008c37:	83 ec 0c             	sub    esp,0xc
c0008c3a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008c3e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008c42:	89 d6                	mov    esi,edx
c0008c44:	0f b6 c7             	movzx  eax,bh
c0008c47:	c1 ee 10             	shr    esi,0x10
c0008c4a:	6b e8 3c             	imul   ebp,eax,0x3c
c0008c4d:	81 ee 6c 07 00 00    	sub    esi,0x76c
c0008c53:	0f b6 ce             	movzx  ecx,dh
c0008c56:	89 df                	mov    edi,ebx
c0008c58:	49                   	dec    ecx
c0008c59:	c1 ef 10             	shr    edi,0x10
c0008c5c:	0f b6 db             	movzx  ebx,bl
c0008c5f:	89 f8                	mov    eax,edi
c0008c61:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c0008c67:	0f b6 f8             	movzx  edi,al
c0008c6a:	0f b6 d2             	movzx  edx,dl
c0008c6d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0008c71:	01 d8                	add    eax,ebx
c0008c73:	0f b7 de             	movzx  ebx,si
c0008c76:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c79:	c1 f8 1f             	sar    eax,0x1f
c0008c7c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008c80:	0f b6 c1             	movzx  eax,cl
c0008c83:	8b 0c 85 60 15 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdeaa0]
c0008c8a:	83 f8 01             	cmp    eax,0x1
c0008c8d:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0008c91:	76 27                	jbe    c0008cba <KeDatetimeToSeconds(datetime_t)+0x87>
c0008c93:	83 e6 03             	and    esi,0x3
c0008c96:	75 22                	jne    c0008cba <KeDatetimeToSeconds(datetime_t)+0x87>
c0008c98:	31 d2                	xor    edx,edx
c0008c9a:	be 64 00 00 00       	mov    esi,0x64
c0008c9f:	89 d8                	mov    eax,ebx
c0008ca1:	f7 f6                	div    esi
c0008ca3:	85 d2                	test   edx,edx
c0008ca5:	75 12                	jne    c0008cb9 <KeDatetimeToSeconds(datetime_t)+0x86>
c0008ca7:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cad:	be 90 01 00 00       	mov    esi,0x190
c0008cb2:	99                   	cdq    
c0008cb3:	f7 fe                	idiv   esi
c0008cb5:	85 d2                	test   edx,edx
c0008cb7:	75 01                	jne    c0008cba <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cb9:	41                   	inc    ecx
c0008cba:	83 fb 46             	cmp    ebx,0x46
c0008cbd:	76 48                	jbe    c0008d07 <KeDatetimeToSeconds(datetime_t)+0xd4>
c0008cbf:	be 46 00 00 00       	mov    esi,0x46
c0008cc4:	bf 64 00 00 00       	mov    edi,0x64
c0008cc9:	bd 90 01 00 00       	mov    ebp,0x190
c0008cce:	b8 6d 01 00 00       	mov    eax,0x16d
c0008cd3:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cd9:	75 23                	jne    c0008cfe <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008cdb:	89 f0                	mov    eax,esi
c0008cdd:	99                   	cdq    
c0008cde:	f7 ff                	idiv   edi
c0008ce0:	b8 6e 01 00 00       	mov    eax,0x16e
c0008ce5:	85 d2                	test   edx,edx
c0008ce7:	75 15                	jne    c0008cfe <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008ce9:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008cef:	99                   	cdq    
c0008cf0:	f7 fd                	idiv   ebp
c0008cf2:	83 fa 01             	cmp    edx,0x1
c0008cf5:	19 c0                	sbb    eax,eax
c0008cf7:	f7 d0                	not    eax
c0008cf9:	05 6e 01 00 00       	add    eax,0x16e
c0008cfe:	01 c1                	add    ecx,eax
c0008d00:	46                   	inc    esi
c0008d01:	39 de                	cmp    esi,ebx
c0008d03:	7c c9                	jl     c0008cce <KeDatetimeToSeconds(datetime_t)+0x9b>
c0008d05:	eb 34                	jmp    c0008d3b <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d07:	74 32                	je     c0008d3b <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d09:	b8 45 00 00 00       	mov    eax,0x45
c0008d0e:	89 c2                	mov    edx,eax
c0008d10:	83 e2 03             	and    edx,0x3
c0008d13:	39 d8                	cmp    eax,ebx
c0008d15:	7e 0f                	jle    c0008d26 <KeDatetimeToSeconds(datetime_t)+0xf3>
c0008d17:	83 fa 01             	cmp    edx,0x1
c0008d1a:	19 d2                	sbb    edx,edx
c0008d1c:	48                   	dec    eax
c0008d1d:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d24:	eb e8                	jmp    c0008d0e <KeDatetimeToSeconds(datetime_t)+0xdb>
c0008d26:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d2b:	85 d2                	test   edx,edx
c0008d2d:	75 0a                	jne    c0008d39 <KeDatetimeToSeconds(datetime_t)+0x106>
c0008d2f:	83 fb 01             	cmp    ebx,0x1
c0008d32:	19 c0                	sbb    eax,eax
c0008d34:	05 6e 01 00 00       	add    eax,0x16e
c0008d39:	29 c1                	sub    ecx,eax
c0008d3b:	b8 80 51 01 00       	mov    eax,0x15180
c0008d40:	f7 e9                	imul   ecx
c0008d42:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d45:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d49:	83 c4 0c             	add    esp,0xc
c0008d4c:	5b                   	pop    ebx
c0008d4d:	5e                   	pop    esi
c0008d4e:	5f                   	pop    edi
c0008d4f:	5d                   	pop    ebp
c0008d50:	c3                   	ret    
c0008d51:	90                   	nop

c0008d52 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d52:	57                   	push   edi
c0008d53:	56                   	push   esi
c0008d54:	53                   	push   ebx
c0008d55:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008d59:	8b 06                	mov    eax,DWORD PTR [esi]
c0008d5b:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0008d5e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008d66:	e8 c8 fe ff ff       	call   c0008c33 <KeDatetimeToSeconds(datetime_t)>
c0008d6b:	59                   	pop    ecx
c0008d6c:	0f b6 0d 08 93 02 c0 	movzx  ecx,BYTE PTR ds:0xc0029308
c0008d73:	5b                   	pop    ebx
c0008d74:	03 0d 0c 93 02 c0    	add    ecx,DWORD PTR ds:0xc002930c
c0008d7a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008d80:	89 cb                	mov    ebx,ecx
c0008d82:	c1 fb 1f             	sar    ebx,0x1f
c0008d85:	29 c8                	sub    eax,ecx
c0008d87:	19 da                	sbb    edx,ebx
c0008d89:	31 c9                	xor    ecx,ecx
c0008d8b:	80 3d 09 93 02 c0 00 	cmp    BYTE PTR ds:0xc0029309,0x0
c0008d92:	74 05                	je     c0008d99 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0008d94:	b9 08 07 00 00       	mov    ecx,0x708
c0008d99:	31 db                	xor    ebx,ebx
c0008d9b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0008d9f:	29 c8                	sub    eax,ecx
c0008da1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008da5:	19 da                	sbb    edx,ebx
c0008da7:	89 f8                	mov    eax,edi
c0008da9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008dad:	5b                   	pop    ebx
c0008dae:	5e                   	pop    esi
c0008daf:	5f                   	pop    edi
c0008db0:	ff e0                	jmp    eax

c0008db2 <KeSecondsToDatetime(unsigned long long)>:
c0008db2:	55                   	push   ebp
c0008db3:	57                   	push   edi
c0008db4:	56                   	push   esi
c0008db5:	53                   	push   ebx
c0008db6:	83 ec 1c             	sub    esp,0x1c
c0008db9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008dbd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008dc1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008dc5:	6a 00                	push   0x0
c0008dc7:	68 80 51 01 00       	push   0x15180
c0008dcc:	55                   	push   ebp
c0008dcd:	57                   	push   edi
c0008dce:	e8 c1 6c 01 00       	call   c001fa94 <__udivdi3>
c0008dd3:	83 c4 10             	add    esp,0x10
c0008dd6:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008ddc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008de0:	6a 00                	push   0x0
c0008de2:	68 80 51 01 00       	push   0x15180
c0008de7:	55                   	push   ebp
c0008de8:	57                   	push   edi
c0008de9:	bf 10 0e 00 00       	mov    edi,0xe10
c0008dee:	e8 a1 6d 01 00       	call   c001fb94 <__umoddi3>
c0008df3:	83 c4 10             	add    esp,0x10
c0008df6:	99                   	cdq    
c0008df7:	f7 ff                	idiv   edi
c0008df9:	bf 3c 00 00 00       	mov    edi,0x3c
c0008dfe:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e01:	89 d0                	mov    eax,edx
c0008e03:	99                   	cdq    
c0008e04:	f7 ff                	idiv   edi
c0008e06:	85 db                	test   ebx,ebx
c0008e08:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e0b:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e0e:	79 11                	jns    c0008e21 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e14:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e1a:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e1f:	eb 07                	jmp    c0008e28 <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e21:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e26:	89 d8                	mov    eax,ebx
c0008e28:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e2d:	99                   	cdq    
c0008e2e:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e33:	f7 f9                	idiv   ecx
c0008e35:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e3a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e3e:	31 d2                	xor    edx,edx
c0008e40:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e48:	01 c3                	add    ebx,eax
c0008e4a:	89 d8                	mov    eax,ebx
c0008e4c:	f7 f1                	div    ecx
c0008e4e:	31 d2                	xor    edx,edx
c0008e50:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008e53:	89 d8                	mov    eax,ebx
c0008e55:	f7 f7                	div    edi
c0008e57:	31 d2                	xor    edx,edx
c0008e59:	29 c1                	sub    ecx,eax
c0008e5b:	89 d8                	mov    eax,ebx
c0008e5d:	f7 f5                	div    ebp
c0008e5f:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008e64:	29 c1                	sub    ecx,eax
c0008e66:	31 d2                	xor    edx,edx
c0008e68:	89 c8                	mov    eax,ecx
c0008e6a:	f7 f5                	div    ebp
c0008e6c:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008e71:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008e75:	31 d2                	xor    edx,edx
c0008e77:	89 c8                	mov    eax,ecx
c0008e79:	f7 f5                	div    ebp
c0008e7b:	31 d2                	xor    edx,edx
c0008e7d:	01 c3                	add    ebx,eax
c0008e7f:	89 c8                	mov    eax,ecx
c0008e81:	f7 f7                	div    edi
c0008e83:	bf 99 00 00 00       	mov    edi,0x99
c0008e88:	29 c3                	sub    ebx,eax
c0008e8a:	31 d2                	xor    edx,edx
c0008e8c:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008e94:	29 c3                	sub    ebx,eax
c0008e96:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008e99:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008e9c:	bb 05 00 00 00       	mov    ebx,0x5
c0008ea1:	83 c1 02             	add    ecx,0x2
c0008ea4:	89 c8                	mov    eax,ecx
c0008ea6:	f7 f7                	div    edi
c0008ea8:	31 d2                	xor    edx,edx
c0008eaa:	89 c7                	mov    edi,eax
c0008eac:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008eb2:	83 c0 02             	add    eax,0x2
c0008eb5:	f7 f3                	div    ebx
c0008eb7:	89 eb                	mov    ebx,ebp
c0008eb9:	29 c3                	sub    ebx,eax
c0008ebb:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008ec1:	88 1e                	mov    BYTE PTR [esi],bl
c0008ec3:	19 c0                	sbb    eax,eax
c0008ec5:	31 d2                	xor    edx,edx
c0008ec7:	83 e0 0c             	and    eax,0xc
c0008eca:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0008ece:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008ed6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008eda:	83 f9 01             	cmp    ecx,0x1
c0008edd:	0f 96 c2             	setbe  dl
c0008ee0:	41                   	inc    ecx
c0008ee1:	01 d0                	add    eax,edx
c0008ee3:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0008ee6:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008eea:	83 c4 1c             	add    esp,0x1c
c0008eed:	89 f0                	mov    eax,esi
c0008eef:	5b                   	pop    ebx
c0008ef0:	5e                   	pop    esi
c0008ef1:	5f                   	pop    edi
c0008ef2:	5d                   	pop    ebp
c0008ef3:	c2 04 00             	ret    0x4

c0008ef6 <Clock::timeInDatetimeLocal()>:
c0008ef6:	53                   	push   ebx
c0008ef7:	83 ec 14             	sub    esp,0x14
c0008efa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008efe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f02:	e8 8b fc ff ff       	call   c0008b92 <Clock::timeInSecondsLocal()>
c0008f07:	83 c4 0c             	add    esp,0xc
c0008f0a:	52                   	push   edx
c0008f0b:	50                   	push   eax
c0008f0c:	53                   	push   ebx
c0008f0d:	e8 a0 fe ff ff       	call   c0008db2 <KeSecondsToDatetime(unsigned long long)>
c0008f12:	89 d8                	mov    eax,ebx
c0008f14:	83 c4 14             	add    esp,0x14
c0008f17:	5b                   	pop    ebx
c0008f18:	c2 04 00             	ret    0x4
c0008f1b:	90                   	nop

c0008f1c <Device::hibernate()>:
c0008f1c:	c3                   	ret    
c0008f1d:	90                   	nop

c0008f1e <Device::wake()>:
c0008f1e:	c3                   	ret    
c0008f1f:	90                   	nop

c0008f20 <Device::detect()>:
c0008f20:	c3                   	ret    
c0008f21:	90                   	nop

c0008f22 <Device::disableLegacy()>:
c0008f22:	c3                   	ret    
c0008f23:	90                   	nop

c0008f24 <Device::powerSaving(PowerSavingLevel)>:
c0008f24:	c3                   	ret    
c0008f25:	90                   	nop

c0008f26 <DriverlessDevice::close(int, int, void*)>:
c0008f26:	31 c0                	xor    eax,eax
c0008f28:	c3                   	ret    
c0008f29:	90                   	nop

c0008f2a <DriverlessDevice::detect()>:
c0008f2a:	c3                   	ret    
c0008f2b:	90                   	nop

c0008f2c <DriverlessDevice::open(int, int, void*)>:
c0008f2c:	83 ec 18             	sub    esp,0x18
c0008f2f:	68 90 15 02 c0       	push   0xc0021590
c0008f34:	e8 99 5d 00 00       	call   c000ecd2 <KePanic(char const*)>
c0008f39:	83 c8 ff             	or     eax,0xffffffff
c0008f3c:	83 c4 1c             	add    esp,0x1c
c0008f3f:	c3                   	ret    

c0008f40 <Device::~Device()>:
c0008f40:	ba 34 16 02 c0       	mov    edx,0xc0021634
c0008f45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f49:	89 10                	mov    DWORD PTR [eax],edx
c0008f4b:	90                   	nop
c0008f4c:	c3                   	ret    
c0008f4d:	90                   	nop

c0008f4e <Device::~Device()>:
c0008f4e:	83 ec 0c             	sub    esp,0xc
c0008f51:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f55:	e8 e6 ff ff ff       	call   c0008f40 <Device::~Device()>
c0008f5a:	83 c4 04             	add    esp,0x4
c0008f5d:	83 ec 08             	sub    esp,0x8
c0008f60:	68 58 01 00 00       	push   0x158
c0008f65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008f69:	e8 9a 37 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0008f6e:	83 c4 10             	add    esp,0x10
c0008f71:	83 c4 0c             	add    esp,0xc
c0008f74:	c3                   	ret    
c0008f75:	90                   	nop

c0008f76 <Device::findAndLoadDriver()>:
c0008f76:	c7 44 24 04 ae 15 02 c0 	mov    DWORD PTR [esp+0x4],0xc00215ae
c0008f7e:	e9 e1 df ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0008f83:	90                   	nop

c0008f84 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008f84:	57                   	push   edi
c0008f85:	b9 09 00 00 00       	mov    ecx,0x9
c0008f8a:	56                   	push   esi
c0008f8b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008f8f:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008f93:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008f9d:	81 c7 18 01 00 00    	add    edi,0x118
c0008fa3:	fc                   	cld    
c0008fa4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008fa6:	5e                   	pop    esi
c0008fa7:	5f                   	pop    edi
c0008fa8:	c3                   	ret    
c0008fa9:	90                   	nop

c0008faa <Device::preOpenACPI(void*, char*, char*)>:
c0008faa:	57                   	push   edi
c0008fab:	b9 1e 00 00 00       	mov    ecx,0x1e
c0008fb0:	56                   	push   esi
c0008fb1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008fb5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008fb9:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0008fc3:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0008fc9:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0008fcf:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008fd3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fd5:	b9 0e 00 00 00       	mov    ecx,0xe
c0008fda:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0008fe0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008fe4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008fe6:	5e                   	pop    esi
c0008fe7:	5f                   	pop    edi
c0008fe8:	c3                   	ret    
c0008fe9:	90                   	nop

c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0008fea:	53                   	push   ebx
c0008feb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008fef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008ff3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008ff7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008ffb:	0f b6 c0             	movzx  eax,al
c0008ffe:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009002:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009006:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000900a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000900e:	5b                   	pop    ebx
c000900f:	e9 bb f9 00 00       	jmp    c00189cf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009014 <Device::getParent()>:
c0009014:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009018:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000901e:	c3                   	ret    
c000901f:	90                   	nop

c0009020 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009020:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009024:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009028:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000902d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009031:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009035:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009039:	e9 f3 fa 00 00       	jmp    c0018b31 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000903e <Device::addChild(Device*)>:
c000903e:	53                   	push   ebx
c000903f:	83 ec 08             	sub    esp,0x8
c0009042:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009046:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000904a:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009050:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009056:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009058:	85 d2                	test   edx,edx
c000905a:	74 04                	je     c0009060 <Device::addChild(Device*)+0x22>
c000905c:	89 d3                	mov    ebx,edx
c000905e:	eb f6                	jmp    c0009056 <Device::addChild(Device*)+0x18>
c0009060:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009063:	83 ec 0c             	sub    esp,0xc
c0009066:	6a 08                	push   0x8
c0009068:	e8 0e 59 00 00       	call   c000e97b <malloc>
c000906d:	89 03                	mov    DWORD PTR [ebx],eax
c000906f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009075:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000907c:	83 c4 18             	add    esp,0x18
c000907f:	5b                   	pop    ebx
c0009080:	c3                   	ret    
c0009081:	90                   	nop

c0009082 <Device::removeAllChildren()>:
c0009082:	56                   	push   esi
c0009083:	53                   	push   ebx
c0009084:	52                   	push   edx
c0009085:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009089:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000908f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009092:	74 17                	je     c00090ab <Device::removeAllChildren()+0x29>
c0009094:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009097:	85 c0                	test   eax,eax
c0009099:	74 0c                	je     c00090a7 <Device::removeAllChildren()+0x25>
c000909b:	83 ec 0c             	sub    esp,0xc
c000909e:	8b 10                	mov    edx,DWORD PTR [eax]
c00090a0:	50                   	push   eax
c00090a1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090a9:	eb e4                	jmp    c000908f <Device::removeAllChildren()+0xd>
c00090ab:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090b1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090b7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00090bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090c4:	58                   	pop    eax
c00090c5:	5b                   	pop    ebx
c00090c6:	5e                   	pop    esi
c00090c7:	c3                   	ret    

c00090c8 <Device::hibernateAll()>:
c00090c8:	53                   	push   ebx
c00090c9:	83 ec 14             	sub    esp,0x14
c00090cc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00090d0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00090d2:	53                   	push   ebx
c00090d3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00090d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00090dc:	83 c4 10             	add    esp,0x10
c00090df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090e2:	74 0f                	je     c00090f3 <Device::hibernateAll()+0x2b>
c00090e4:	83 ec 0c             	sub    esp,0xc
c00090e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090ea:	e8 d9 ff ff ff       	call   c00090c8 <Device::hibernateAll()>
c00090ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090f1:	eb e9                	jmp    c00090dc <Device::hibernateAll()+0x14>
c00090f3:	83 c4 08             	add    esp,0x8
c00090f6:	5b                   	pop    ebx
c00090f7:	c3                   	ret    

c00090f8 <Device::wakeAll()>:
c00090f8:	53                   	push   ebx
c00090f9:	83 ec 14             	sub    esp,0x14
c00090fc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009100:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009102:	53                   	push   ebx
c0009103:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009106:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000910c:	83 c4 10             	add    esp,0x10
c000910f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009112:	74 0f                	je     c0009123 <Device::wakeAll()+0x2b>
c0009114:	83 ec 0c             	sub    esp,0xc
c0009117:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000911a:	e8 d9 ff ff ff       	call   c00090f8 <Device::wakeAll()>
c000911f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009121:	eb e9                	jmp    c000910c <Device::wakeAll()+0x14>
c0009123:	83 c4 08             	add    esp,0x8
c0009126:	5b                   	pop    ebx
c0009127:	c3                   	ret    

c0009128 <Device::detectAll()>:
c0009128:	53                   	push   ebx
c0009129:	83 ec 14             	sub    esp,0x14
c000912c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009130:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009132:	53                   	push   ebx
c0009133:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009136:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000913c:	83 c4 10             	add    esp,0x10
c000913f:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009142:	74 0f                	je     c0009153 <Device::detectAll()+0x2b>
c0009144:	83 ec 0c             	sub    esp,0xc
c0009147:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000914a:	e8 d9 ff ff ff       	call   c0009128 <Device::detectAll()>
c000914f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009151:	eb e9                	jmp    c000913c <Device::detectAll()+0x14>
c0009153:	83 c4 08             	add    esp,0x8
c0009156:	5b                   	pop    ebx
c0009157:	c3                   	ret    

c0009158 <Device::disableLegacyAll()>:
c0009158:	c3                   	ret    
c0009159:	90                   	nop

c000915a <Device::loadDriversForAll()>:
c000915a:	c3                   	ret    
c000915b:	90                   	nop

c000915c <Device::powerSavingAll(PowerSavingLevel)>:
c000915c:	56                   	push   esi
c000915d:	53                   	push   ebx
c000915e:	83 ec 0c             	sub    esp,0xc
c0009161:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009165:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009169:	8b 03                	mov    eax,DWORD PTR [ebx]
c000916b:	56                   	push   esi
c000916c:	53                   	push   ebx
c000916d:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009170:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009176:	83 c4 10             	add    esp,0x10
c0009179:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000917c:	74 0f                	je     c000918d <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000917e:	52                   	push   edx
c000917f:	52                   	push   edx
c0009180:	56                   	push   esi
c0009181:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009184:	e8 d3 ff ff ff       	call   c000915c <Device::powerSavingAll(PowerSavingLevel)>
c0009189:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000918b:	eb e9                	jmp    c0009176 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000918d:	58                   	pop    eax
c000918e:	5b                   	pop    ebx
c000918f:	5e                   	pop    esi
c0009190:	c3                   	ret    
c0009191:	90                   	nop

c0009192 <Device::setName(char const*)>:
c0009192:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000919a:	e9 a1 74 ff ff       	jmp    c0000640 <strcpy>
c000919f:	90                   	nop

c00091a0 <Device::Device(char const*)>:
c00091a0:	83 ec 1c             	sub    esp,0x1c
c00091a3:	ba 34 16 02 c0       	mov    edx,0xc0021634
c00091a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091ac:	89 10                	mov    DWORD PTR [eax],edx
c00091ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091b2:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00091bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091c0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00091ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091ce:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00091d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00091dc:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00091e6:	83 ec 08             	sub    esp,0x8
c00091e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00091f1:	e8 9c ff ff ff       	call   c0009192 <Device::setName(char const*)>
c00091f6:	83 c4 10             	add    esp,0x10
c00091f9:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009201:	83 ec 0c             	sub    esp,0xc
c0009204:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009208:	e8 6e 57 00 00       	call   c000e97b <malloc>
c000920d:	83 c4 10             	add    esp,0x10
c0009210:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009216:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000921d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009221:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009227:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000922b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009231:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009237:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000923b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009241:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000924c:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009253:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009257:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000925e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009262:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000926c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009270:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000927a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927e:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000928c:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009296:	90                   	nop
c0009297:	83 c4 1c             	add    esp,0x1c
c000929a:	c3                   	ret    
c000929b:	90                   	nop

c000929c <Device::getName()>:
c000929c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092a0:	05 d0 00 00 00       	add    eax,0xd0
c00092a5:	c3                   	ret    

c00092a6 <Device::closeAll()>:
c00092a6:	53                   	push   ebx
c00092a7:	83 ec 08             	sub    esp,0x8
c00092aa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00092ae:	53                   	push   ebx
c00092af:	e8 e8 ff ff ff       	call   c000929c <Device::getName()>
c00092b4:	52                   	push   edx
c00092b5:	50                   	push   eax
c00092b6:	68 e8 15 02 c0       	push   0xc00215e8
c00092bb:	e8 a4 dc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00092c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00092c2:	6a 00                	push   0x0
c00092c4:	6a 00                	push   0x0
c00092c6:	6a 00                	push   0x0
c00092c8:	53                   	push   ebx
c00092c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00092cc:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00092d2:	83 c4 20             	add    esp,0x20
c00092d5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00092d8:	74 12                	je     c00092ec <Device::closeAll()+0x46>
c00092da:	83 ec 0c             	sub    esp,0xc
c00092dd:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00092e0:	e8 c1 ff ff ff       	call   c00092a6 <Device::closeAll()>
c00092e5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00092e7:	83 c4 10             	add    esp,0x10
c00092ea:	eb e9                	jmp    c00092d5 <Device::closeAll()+0x2f>
c00092ec:	83 c4 08             	add    esp,0x8
c00092ef:	5b                   	pop    ebx
c00092f0:	c3                   	ret    
c00092f1:	90                   	nop

c00092f2 <DriverlessDevice::DriverlessDevice(char const*)>:
c00092f2:	83 ec 0c             	sub    esp,0xc
c00092f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00092f9:	83 ec 08             	sub    esp,0x8
c00092fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009300:	50                   	push   eax
c0009301:	e8 9a fe ff ff       	call   c00091a0 <Device::Device(char const*)>
c0009306:	83 c4 10             	add    esp,0x10
c0009309:	ba 60 16 02 c0       	mov    edx,0xc0021660
c000930e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009312:	89 10                	mov    DWORD PTR [eax],edx
c0009314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009318:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009322:	90                   	nop
c0009323:	83 c4 0c             	add    esp,0xc
c0009326:	c3                   	ret    
c0009327:	90                   	nop

c0009328 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009328:	57                   	push   edi
c0009329:	56                   	push   esi
c000932a:	53                   	push   ebx
c000932b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000932f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009333:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009337:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000933d:	75 0c                	jne    c000934b <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000933f:	52                   	push   edx
c0009340:	52                   	push   edx
c0009341:	53                   	push   ebx
c0009342:	56                   	push   esi
c0009343:	e8 c4 69 01 00       	call   c001fd0c <LinkedList<Device>::addElement(Device*)>
c0009348:	83 c4 10             	add    esp,0x10
c000934b:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009351:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009354:	74 12                	je     c0009368 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009356:	50                   	push   eax
c0009357:	57                   	push   edi
c0009358:	56                   	push   esi
c0009359:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000935c:	e8 c7 ff ff ff       	call   c0009328 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009361:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009363:	83 c4 10             	add    esp,0x10
c0009366:	eb e9                	jmp    c0009351 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009368:	5b                   	pop    ebx
c0009369:	5e                   	pop    esi
c000936a:	5f                   	pop    edi
c000936b:	c3                   	ret    

c000936c <getDevicesOfType(DeviceType)>:
c000936c:	53                   	push   ebx
c000936d:	83 ec 14             	sub    esp,0x14
c0009370:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009374:	53                   	push   ebx
c0009375:	e8 6e 6a 01 00       	call   c001fde8 <LinkedList<Device>::LinkedList()>
c000937a:	83 c4 0c             	add    esp,0xc
c000937d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009381:	53                   	push   ebx
c0009382:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c0009388:	e8 9b ff ff ff       	call   c0009328 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000938d:	89 d8                	mov    eax,ebx
c000938f:	83 c4 18             	add    esp,0x18
c0009392:	5b                   	pop    ebx
c0009393:	c2 04 00             	ret    0x4
c0009396:	66 90                	xchg   ax,ax

c0009398 <HardDiskController::HardDiskController(char const*)>:
c0009398:	83 ec 0c             	sub    esp,0xc
c000939b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000939f:	83 ec 08             	sub    esp,0x8
c00093a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093a6:	50                   	push   eax
c00093a7:	e8 f4 fd ff ff       	call   c00091a0 <Device::Device(char const*)>
c00093ac:	83 c4 10             	add    esp,0x10
c00093af:	ba 8c 16 02 c0       	mov    edx,0xc002168c
c00093b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093b8:	89 10                	mov    DWORD PTR [eax],edx
c00093ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093be:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00093c8:	90                   	nop
c00093c9:	83 c4 0c             	add    esp,0xc
c00093cc:	c3                   	ret    
c00093cd:	90                   	nop
c00093ce:	66 90                	xchg   ax,ax

c00093d0 <HardDiskController::~HardDiskController()>:
c00093d0:	83 ec 0c             	sub    esp,0xc
c00093d3:	ba 8c 16 02 c0       	mov    edx,0xc002168c
c00093d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093dc:	89 10                	mov    DWORD PTR [eax],edx
c00093de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093e2:	83 ec 0c             	sub    esp,0xc
c00093e5:	50                   	push   eax
c00093e6:	e8 55 fb ff ff       	call   c0008f40 <Device::~Device()>
c00093eb:	83 c4 10             	add    esp,0x10
c00093ee:	90                   	nop
c00093ef:	83 c4 0c             	add    esp,0xc
c00093f2:	c3                   	ret    
c00093f3:	90                   	nop

c00093f4 <HardDiskController::~HardDiskController()>:
c00093f4:	83 ec 0c             	sub    esp,0xc
c00093f7:	83 ec 0c             	sub    esp,0xc
c00093fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093fe:	e8 cd ff ff ff       	call   c00093d0 <HardDiskController::~HardDiskController()>
c0009403:	83 c4 10             	add    esp,0x10
c0009406:	83 ec 08             	sub    esp,0x8
c0009409:	68 58 01 00 00       	push   0x158
c000940e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009412:	e8 f1 32 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0009417:	83 c4 10             	add    esp,0x10
c000941a:	83 c4 0c             	add    esp,0xc
c000941d:	c3                   	ret    

c000941e <PhysicalDisk::eject()>:
c000941e:	83 c8 ff             	or     eax,0xffffffff
c0009421:	c3                   	ret    

c0009422 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009422:	83 ec 0c             	sub    esp,0xc
c0009425:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009429:	83 ec 08             	sub    esp,0x8
c000942c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009430:	50                   	push   eax
c0009431:	e8 6a fd ff ff       	call   c00091a0 <Device::Device(char const*)>
c0009436:	83 c4 10             	add    esp,0x10
c0009439:	ba b8 16 02 c0       	mov    edx,0xc00216b8
c000943e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009442:	89 10                	mov    DWORD PTR [eax],edx
c0009444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009448:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000944f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009453:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000945a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000945e:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000946c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009470:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009484:	90                   	nop
c0009485:	83 c4 0c             	add    esp,0xc
c0009488:	c3                   	ret    
c0009489:	90                   	nop

c000948a <PhysicalDisk::startCache()>:
c000948a:	56                   	push   esi
c000948b:	53                   	push   ebx
c000948c:	83 ec 10             	sub    esp,0x10
c000948f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009493:	6a 44                	push   0x44
c0009495:	e8 e1 54 00 00       	call   c000e97b <malloc>
c000949a:	89 c6                	mov    esi,eax
c000949c:	58                   	pop    eax
c000949d:	5a                   	pop    edx
c000949e:	53                   	push   ebx
c000949f:	56                   	push   esi
c00094a0:	e8 1b 14 00 00       	call   c000a8c0 <VCache::VCache(PhysicalDisk*)>
c00094a5:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094ab:	83 c4 14             	add    esp,0x14
c00094ae:	5b                   	pop    ebx
c00094af:	5e                   	pop    esi
c00094b0:	c3                   	ret    
c00094b1:	90                   	nop

c00094b2 <PhysicalDisk::~PhysicalDisk()>:
c00094b2:	83 ec 0c             	sub    esp,0xc
c00094b5:	ba b8 16 02 c0       	mov    edx,0xc00216b8
c00094ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094be:	89 10                	mov    DWORD PTR [eax],edx
c00094c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c4:	83 ec 0c             	sub    esp,0xc
c00094c7:	50                   	push   eax
c00094c8:	e8 73 fa ff ff       	call   c0008f40 <Device::~Device()>
c00094cd:	83 c4 10             	add    esp,0x10
c00094d0:	90                   	nop
c00094d1:	83 c4 0c             	add    esp,0xc
c00094d4:	c3                   	ret    
c00094d5:	90                   	nop

c00094d6 <PhysicalDisk::~PhysicalDisk()>:
c00094d6:	83 ec 0c             	sub    esp,0xc
c00094d9:	83 ec 0c             	sub    esp,0xc
c00094dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094e0:	e8 cd ff ff ff       	call   c00094b2 <PhysicalDisk::~PhysicalDisk()>
c00094e5:	83 c4 10             	add    esp,0x10
c00094e8:	83 ec 08             	sub    esp,0x8
c00094eb:	68 6c 01 00 00       	push   0x16c
c00094f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094f4:	e8 0f 32 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c00094f9:	83 c4 10             	add    esp,0x10
c00094fc:	83 c4 0c             	add    esp,0xc
c00094ff:	c3                   	ret    

c0009500 <startGUI(void*)>:
c0009500:	55                   	push   ebp
c0009501:	89 e5                	mov    ebp,esp
c0009503:	53                   	push   ebx
c0009504:	83 ec 04             	sub    esp,0x4
c0009507:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000950c:	83 e8 01             	sub    eax,0x1
c000950f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009514:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009519:	85 c0                	test   eax,eax
c000951b:	75 01                	jne    c000951e <startGUI(void*)+0x1e>
c000951d:	fb                   	sti    
c000951e:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009524:	83 ec 08             	sub    esp,0x8
c0009527:	6a 01                	push   0x1
c0009529:	68 e8 16 02 c0       	push   0xc00216e8
c000952e:	e8 76 b4 00 00       	call   c00149a9 <Thr::loadDLL(char const*, bool)>
c0009533:	83 c4 10             	add    esp,0x10
c0009536:	83 ec 08             	sub    esp,0x8
c0009539:	53                   	push   ebx
c000953a:	50                   	push   eax
c000953b:	e8 bb b6 00 00       	call   c0014bfb <Thr::executeDLL(unsigned long, void*)>
c0009540:	83 c4 10             	add    esp,0x10
c0009543:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c0009549:	83 ec 08             	sub    esp,0x8
c000954c:	6a 01                	push   0x1
c000954e:	68 02 17 02 c0       	push   0xc0021702
c0009553:	e8 51 b4 00 00       	call   c00149a9 <Thr::loadDLL(char const*, bool)>
c0009558:	83 c4 10             	add    esp,0x10
c000955b:	83 ec 08             	sub    esp,0x8
c000955e:	53                   	push   ebx
c000955f:	50                   	push   eax
c0009560:	e8 96 b6 00 00       	call   c0014bfb <Thr::executeDLL(unsigned long, void*)>
c0009565:	83 c4 10             	add    esp,0x10
c0009568:	eb fe                	jmp    c0009568 <startGUI(void*)+0x68>

c000956a <startGUIVESA(void*)>:
c000956a:	55                   	push   ebp
c000956b:	89 e5                	mov    ebp,esp
c000956d:	53                   	push   ebx
c000956e:	83 ec 04             	sub    esp,0x4
c0009571:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009576:	83 e8 01             	sub    eax,0x1
c0009579:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000957e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009583:	85 c0                	test   eax,eax
c0009585:	75 01                	jne    c0009588 <startGUIVESA(void*)+0x1e>
c0009587:	fb                   	sti    
c0009588:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000958e:	83 ec 08             	sub    esp,0x8
c0009591:	6a 01                	push   0x1
c0009593:	68 20 17 02 c0       	push   0xc0021720
c0009598:	e8 0c b4 00 00       	call   c00149a9 <Thr::loadDLL(char const*, bool)>
c000959d:	83 c4 10             	add    esp,0x10
c00095a0:	83 ec 08             	sub    esp,0x8
c00095a3:	53                   	push   ebx
c00095a4:	50                   	push   eax
c00095a5:	e8 51 b6 00 00       	call   c0014bfb <Thr::executeDLL(unsigned long, void*)>
c00095aa:	83 c4 10             	add    esp,0x10
c00095ad:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c00095b3:	83 ec 08             	sub    esp,0x8
c00095b6:	6a 01                	push   0x1
c00095b8:	68 02 17 02 c0       	push   0xc0021702
c00095bd:	e8 e7 b3 00 00       	call   c00149a9 <Thr::loadDLL(char const*, bool)>
c00095c2:	83 c4 10             	add    esp,0x10
c00095c5:	83 ec 08             	sub    esp,0x8
c00095c8:	53                   	push   ebx
c00095c9:	50                   	push   eax
c00095ca:	e8 2c b6 00 00       	call   c0014bfb <Thr::executeDLL(unsigned long, void*)>
c00095cf:	83 c4 10             	add    esp,0x10
c00095d2:	eb fe                	jmp    c00095d2 <startGUIVESA(void*)+0x68>

c00095d4 <sendKeyToTerminal(unsigned char)>:
c00095d4:	55                   	push   ebp
c00095d5:	89 e5                	mov    ebp,esp
c00095d7:	83 ec 28             	sub    esp,0x28
c00095da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095dd:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00095e0:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c00095e5:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c00095e9:	83 ec 08             	sub    esp,0x8
c00095ec:	52                   	push   edx
c00095ed:	50                   	push   eax
c00095ee:	e8 7f 81 00 00       	call   c0011772 <VgaText::receiveKey(unsigned char)>
c00095f3:	83 c4 10             	add    esp,0x10
c00095f6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00095fa:	83 f8 0a             	cmp    eax,0xa
c00095fd:	74 16                	je     c0009615 <sendKeyToTerminal(unsigned char)+0x41>
c00095ff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009603:	83 f8 03             	cmp    eax,0x3
c0009606:	74 0d                	je     c0009615 <sendKeyToTerminal(unsigned char)+0x41>
c0009608:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000960c:	83 f8 1c             	cmp    eax,0x1c
c000960f:	0f 85 97 00 00 00    	jne    c00096ac <sendKeyToTerminal(unsigned char)+0xd8>
c0009615:	fa                   	cli    
c0009616:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000961b:	83 c0 01             	add    eax,0x1
c000961e:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009623:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009628:	83 c0 01             	add    eax,0x1
c000962b:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0009630:	a1 20 93 02 c0       	mov    eax,ds:0xc0029320
c0009635:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009638:	c7 05 20 93 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029320,0x0
c0009642:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009646:	74 1f                	je     c0009667 <sendKeyToTerminal(unsigned char)+0x93>
c0009648:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000964b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000964e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009651:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0009654:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000965d:	e8 1e c1 00 00       	call   c0015780 <unblockTask(ThreadControlBlock*)>
c0009662:	83 c4 10             	add    esp,0x10
c0009665:	eb db                	jmp    c0009642 <sendKeyToTerminal(unsigned char)+0x6e>
c0009667:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000966c:	83 e8 01             	sub    eax,0x1
c000966f:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0009674:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0009679:	85 c0                	test   eax,eax
c000967b:	75 18                	jne    c0009695 <sendKeyToTerminal(unsigned char)+0xc1>
c000967d:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0009682:	85 c0                	test   eax,eax
c0009684:	74 0f                	je     c0009695 <sendKeyToTerminal(unsigned char)+0xc1>
c0009686:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0009690:	e8 f3 bd 00 00       	call   c0015488 <schedule()>
c0009695:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000969a:	83 e8 01             	sub    eax,0x1
c000969d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00096a2:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00096a7:	85 c0                	test   eax,eax
c00096a9:	75 01                	jne    c00096ac <sendKeyToTerminal(unsigned char)+0xd8>
c00096ab:	fb                   	sti    
c00096ac:	90                   	nop
c00096ad:	c9                   	leave  
c00096ae:	c3                   	ret    

c00096af <sendKeyboardToken(KeyboardToken)>:
c00096af:	55                   	push   ebp
c00096b0:	89 e5                	mov    ebp,esp
c00096b2:	83 ec 18             	sub    esp,0x18
c00096b5:	e8 1f 5f 00 00       	call   c000f5d9 <KeUserIOReceived()>
c00096ba:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c00096bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c0:	0f b7 c0             	movzx  eax,ax
c00096c3:	83 f2 01             	xor    edx,0x1
c00096c6:	88 90 40 93 02 c0    	mov    BYTE PTR [eax-0x3ffd6cc0],dl
c00096cc:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c00096d1:	85 c0                	test   eax,eax
c00096d3:	74 24                	je     c00096f9 <sendKeyboardToken(KeyboardToken)+0x4a>
c00096d5:	8b 0d 28 93 02 c0    	mov    ecx,DWORD PTR ds:0xc0029328
c00096db:	83 ec 04             	sub    esp,0x4
c00096de:	68 40 93 02 c0       	push   0xc0029340
c00096e3:	83 ec 08             	sub    esp,0x8
c00096e6:	89 e2                	mov    edx,esp
c00096e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096eb:	89 02                	mov    DWORD PTR [edx],eax
c00096ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00096f0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c00096f4:	ff d1                	call   ecx
c00096f6:	83 c4 10             	add    esp,0x10
c00096f9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c00096fd:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009700:	0f b6 c0             	movzx  eax,al
c0009703:	85 c0                	test   eax,eax
c0009705:	0f 84 da 00 00 00    	je     c00097e5 <sendKeyboardToken(KeyboardToken)+0x136>
c000970b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000970e:	0f b7 c0             	movzx  eax,ax
c0009711:	3d 18 03 00 00       	cmp    eax,0x318
c0009716:	75 06                	jne    c000971e <sendKeyboardToken(KeyboardToken)+0x6f>
c0009718:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000971e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009721:	0f b7 c0             	movzx  eax,ax
c0009724:	3d 19 03 00 00       	cmp    eax,0x319
c0009729:	75 06                	jne    c0009731 <sendKeyboardToken(KeyboardToken)+0x82>
c000972b:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009734:	0f b7 c0             	movzx  eax,ax
c0009737:	3d 1a 03 00 00       	cmp    eax,0x31a
c000973c:	75 06                	jne    c0009744 <sendKeyboardToken(KeyboardToken)+0x95>
c000973e:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009744:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009747:	0f b7 c0             	movzx  eax,ax
c000974a:	3d 1b 03 00 00       	cmp    eax,0x31b
c000974f:	75 06                	jne    c0009757 <sendKeyboardToken(KeyboardToken)+0xa8>
c0009751:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0009757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000975a:	0f b7 c0             	movzx  eax,ax
c000975d:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009762:	75 06                	jne    c000976a <sendKeyboardToken(KeyboardToken)+0xbb>
c0009764:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000976a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000976d:	0f b7 c0             	movzx  eax,ax
c0009770:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009775:	75 06                	jne    c000977d <sendKeyboardToken(KeyboardToken)+0xce>
c0009777:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000977d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009780:	0f b7 c0             	movzx  eax,ax
c0009783:	3d 1e 03 00 00       	cmp    eax,0x31e
c0009788:	75 06                	jne    c0009790 <sendKeyboardToken(KeyboardToken)+0xe1>
c000978a:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0009790:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009793:	0f b7 c0             	movzx  eax,ax
c0009796:	3d 1f 03 00 00       	cmp    eax,0x31f
c000979b:	75 06                	jne    c00097a3 <sendKeyboardToken(KeyboardToken)+0xf4>
c000979d:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097a6:	0f b7 c0             	movzx  eax,ax
c00097a9:	3d 20 03 00 00       	cmp    eax,0x320
c00097ae:	75 06                	jne    c00097b6 <sendKeyboardToken(KeyboardToken)+0x107>
c00097b0:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097b9:	0f b7 c0             	movzx  eax,ax
c00097bc:	3d 21 03 00 00       	cmp    eax,0x321
c00097c1:	75 06                	jne    c00097c9 <sendKeyboardToken(KeyboardToken)+0x11a>
c00097c3:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c00097c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097cc:	0f b7 c0             	movzx  eax,ax
c00097cf:	3d 22 03 00 00       	cmp    eax,0x322
c00097d4:	0f 85 f1 00 00 00    	jne    c00098cb <sendKeyboardToken(KeyboardToken)+0x21c>
c00097da:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c00097e0:	e9 e6 00 00 00       	jmp    c00098cb <sendKeyboardToken(KeyboardToken)+0x21c>
c00097e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097e8:	0f b7 c0             	movzx  eax,ax
c00097eb:	3d 18 03 00 00       	cmp    eax,0x318
c00097f0:	75 0a                	jne    c00097fc <sendKeyboardToken(KeyboardToken)+0x14d>
c00097f2:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c00097f8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00097fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097ff:	0f b7 c0             	movzx  eax,ax
c0009802:	3d 19 03 00 00       	cmp    eax,0x319
c0009807:	75 0a                	jne    c0009813 <sendKeyboardToken(KeyboardToken)+0x164>
c0009809:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000980f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009816:	0f b7 c0             	movzx  eax,ax
c0009819:	3d 1a 03 00 00       	cmp    eax,0x31a
c000981e:	75 0a                	jne    c000982a <sendKeyboardToken(KeyboardToken)+0x17b>
c0009820:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0009826:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000982a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000982d:	0f b7 c0             	movzx  eax,ax
c0009830:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009835:	75 0a                	jne    c0009841 <sendKeyboardToken(KeyboardToken)+0x192>
c0009837:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000983d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009844:	0f b7 c0             	movzx  eax,ax
c0009847:	3d 1c 03 00 00       	cmp    eax,0x31c
c000984c:	75 0a                	jne    c0009858 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000984e:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009854:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000985b:	0f b7 c0             	movzx  eax,ax
c000985e:	3d 1d 03 00 00       	cmp    eax,0x31d
c0009863:	75 0a                	jne    c000986f <sendKeyboardToken(KeyboardToken)+0x1c0>
c0009865:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000986b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000986f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009872:	0f b7 c0             	movzx  eax,ax
c0009875:	3d 1e 03 00 00       	cmp    eax,0x31e
c000987a:	75 0a                	jne    c0009886 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000987c:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0009882:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009889:	0f b7 c0             	movzx  eax,ax
c000988c:	3d 1f 03 00 00       	cmp    eax,0x31f
c0009891:	75 0a                	jne    c000989d <sendKeyboardToken(KeyboardToken)+0x1ee>
c0009893:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0009899:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000989d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a0:	0f b7 c0             	movzx  eax,ax
c00098a3:	3d 20 03 00 00       	cmp    eax,0x320
c00098a8:	75 0a                	jne    c00098b4 <sendKeyboardToken(KeyboardToken)+0x205>
c00098aa:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b7:	0f b7 c0             	movzx  eax,ax
c00098ba:	3d 21 03 00 00       	cmp    eax,0x321
c00098bf:	75 0a                	jne    c00098cb <sendKeyboardToken(KeyboardToken)+0x21c>
c00098c1:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c00098c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ce:	0f b7 c0             	movzx  eax,ax
c00098d1:	3d 00 02 00 00       	cmp    eax,0x200
c00098d6:	75 2f                	jne    c0009907 <sendKeyboardToken(KeyboardToken)+0x258>
c00098d8:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c00098dd:	83 f0 01             	xor    eax,0x1
c00098e0:	0f b6 c0             	movzx  eax,al
c00098e3:	85 c0                	test   eax,eax
c00098e5:	74 20                	je     c0009907 <sendKeyboardToken(KeyboardToken)+0x258>
c00098e7:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00098ec:	6a 01                	push   0x1
c00098ee:	6a 00                	push   0x0
c00098f0:	68 00 95 00 c0       	push   0xc0009500
c00098f5:	50                   	push   eax
c00098f6:	e8 3d b9 00 00       	call   c0015238 <Process::createThread(void (*)(void*), void*, int)>
c00098fb:	83 c4 10             	add    esp,0x10
c00098fe:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c0009905:	eb 3a                	jmp    c0009941 <sendKeyboardToken(KeyboardToken)+0x292>
c0009907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000990a:	0f b7 c0             	movzx  eax,ax
c000990d:	3d 01 02 00 00       	cmp    eax,0x201
c0009912:	75 2d                	jne    c0009941 <sendKeyboardToken(KeyboardToken)+0x292>
c0009914:	a0 40 97 02 c0       	mov    al,ds:0xc0029740
c0009919:	83 f0 01             	xor    eax,0x1
c000991c:	0f b6 c0             	movzx  eax,al
c000991f:	85 c0                	test   eax,eax
c0009921:	74 1e                	je     c0009941 <sendKeyboardToken(KeyboardToken)+0x292>
c0009923:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0009928:	6a 01                	push   0x1
c000992a:	6a 00                	push   0x0
c000992c:	68 6a 95 00 c0       	push   0xc000956a
c0009931:	50                   	push   eax
c0009932:	e8 01 b9 00 00       	call   c0015238 <Process::createThread(void (*)(void*), void*, int)>
c0009937:	83 c4 10             	add    esp,0x10
c000993a:	c6 05 40 97 02 c0 01 	mov    BYTE PTR ds:0xc0029740,0x1
c0009941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009944:	0f b7 c0             	movzx  eax,ax
c0009947:	3d 25 03 00 00       	cmp    eax,0x325
c000994c:	75 06                	jne    c0009954 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000994e:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009957:	0f b7 c0             	movzx  eax,ax
c000995a:	3d 24 03 00 00       	cmp    eax,0x324
c000995f:	75 06                	jne    c0009967 <sendKeyboardToken(KeyboardToken)+0x2b8>
c0009961:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0009967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000996a:	0f b7 c0             	movzx  eax,ax
c000996d:	3d 23 03 00 00       	cmp    eax,0x323
c0009972:	75 06                	jne    c000997a <sendKeyboardToken(KeyboardToken)+0x2cb>
c0009974:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000997a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000997d:	0f b7 c0             	movzx  eax,ax
c0009980:	3d 26 03 00 00       	cmp    eax,0x326
c0009985:	75 06                	jne    c000998d <sendKeyboardToken(KeyboardToken)+0x2de>
c0009987:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000998d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009990:	0f b7 c0             	movzx  eax,ax
c0009993:	3d 27 03 00 00       	cmp    eax,0x327
c0009998:	75 06                	jne    c00099a0 <sendKeyboardToken(KeyboardToken)+0x2f1>
c000999a:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099a3:	0f b7 c0             	movzx  eax,ax
c00099a6:	3d 22 03 00 00       	cmp    eax,0x322
c00099ab:	75 06                	jne    c00099b3 <sendKeyboardToken(KeyboardToken)+0x304>
c00099ad:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099b3:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099b7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099ba:	83 f0 01             	xor    eax,0x1
c00099bd:	0f b6 c0             	movzx  eax,al
c00099c0:	85 c0                	test   eax,eax
c00099c2:	74 7c                	je     c0009a40 <sendKeyboardToken(KeyboardToken)+0x391>
c00099c4:	a0 41 94 02 c0       	mov    al,ds:0xc0029441
c00099c9:	0f b6 c0             	movzx  eax,al
c00099cc:	85 c0                	test   eax,eax
c00099ce:	74 43                	je     c0009a13 <sendKeyboardToken(KeyboardToken)+0x364>
c00099d0:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00099d4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00099d8:	85 c0                	test   eax,eax
c00099da:	74 2b                	je     c0009a07 <sendKeyboardToken(KeyboardToken)+0x358>
c00099dc:	8b 15 44 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029744
c00099e2:	89 d0                	mov    eax,edx
c00099e4:	c1 e0 02             	shl    eax,0x2
c00099e7:	01 d0                	add    eax,edx
c00099e9:	01 c0                	add    eax,eax
c00099eb:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c00099f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099f3:	0f b7 c0             	movzx  eax,ax
c00099f6:	8d 50 d0             	lea    edx,[eax-0x30]
c00099f9:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c00099fe:	01 d0                	add    eax,edx
c0009a00:	a3 44 97 02 c0       	mov    ds:0xc0029744,eax
c0009a05:	eb 71                	jmp    c0009a78 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a07:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a11:	eb 65                	jmp    c0009a78 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a13:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a18:	85 c0                	test   eax,eax
c0009a1a:	74 18                	je     c0009a34 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a1c:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a21:	0f b6 c0             	movzx  eax,al
c0009a24:	83 ec 0c             	sub    esp,0xc
c0009a27:	50                   	push   eax
c0009a28:	e8 a7 fb ff ff       	call   c00095d4 <sendKeyToTerminal(unsigned char)>
c0009a2d:	83 c4 10             	add    esp,0x10
c0009a30:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a34:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a3e:	eb 38                	jmp    c0009a78 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a43:	0f b7 c0             	movzx  eax,ax
c0009a46:	3d 01 01 00 00       	cmp    eax,0x101
c0009a4b:	75 2b                	jne    c0009a78 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a4d:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a52:	85 c0                	test   eax,eax
c0009a54:	74 18                	je     c0009a6e <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a56:	a1 44 97 02 c0       	mov    eax,ds:0xc0029744
c0009a5b:	0f b6 c0             	movzx  eax,al
c0009a5e:	83 ec 0c             	sub    esp,0xc
c0009a61:	50                   	push   eax
c0009a62:	e8 6d fb ff ff       	call   c00095d4 <sendKeyToTerminal(unsigned char)>
c0009a67:	83 c4 10             	add    esp,0x10
c0009a6a:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a6e:	c7 05 44 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029744,0x0
c0009a78:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009a7b:	83 f0 01             	xor    eax,0x1
c0009a7e:	0f b6 c0             	movzx  eax,al
c0009a81:	85 c0                	test   eax,eax
c0009a83:	74 5a                	je     c0009adf <sendKeyboardToken(KeyboardToken)+0x430>
c0009a85:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009a88:	83 f0 01             	xor    eax,0x1
c0009a8b:	0f b6 c0             	movzx  eax,al
c0009a8e:	85 c0                	test   eax,eax
c0009a90:	74 4d                	je     c0009adf <sendKeyboardToken(KeyboardToken)+0x430>
c0009a92:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009a97:	83 f0 01             	xor    eax,0x1
c0009a9a:	0f b6 c0             	movzx  eax,al
c0009a9d:	85 c0                	test   eax,eax
c0009a9f:	74 3e                	je     c0009adf <sendKeyboardToken(KeyboardToken)+0x430>
c0009aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aa4:	0f b7 c0             	movzx  eax,ax
c0009aa7:	83 f8 1f             	cmp    eax,0x1f
c0009aaa:	76 0b                	jbe    c0009ab7 <sendKeyboardToken(KeyboardToken)+0x408>
c0009aac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aaf:	0f b7 c0             	movzx  eax,ax
c0009ab2:	83 f8 7e             	cmp    eax,0x7e
c0009ab5:	76 16                	jbe    c0009acd <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aba:	0f b7 c0             	movzx  eax,ax
c0009abd:	83 f8 0a             	cmp    eax,0xa
c0009ac0:	74 0b                	je     c0009acd <sendKeyboardToken(KeyboardToken)+0x41e>
c0009ac2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ac5:	0f b7 c0             	movzx  eax,ax
c0009ac8:	83 f8 08             	cmp    eax,0x8
c0009acb:	75 12                	jne    c0009adf <sendKeyboardToken(KeyboardToken)+0x430>
c0009acd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ad0:	0f b6 c0             	movzx  eax,al
c0009ad3:	83 ec 0c             	sub    esp,0xc
c0009ad6:	50                   	push   eax
c0009ad7:	e8 f8 fa ff ff       	call   c00095d4 <sendKeyToTerminal(unsigned char)>
c0009adc:	83 c4 10             	add    esp,0x10
c0009adf:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009ae2:	83 f0 01             	xor    eax,0x1
c0009ae5:	0f b6 c0             	movzx  eax,al
c0009ae8:	85 c0                	test   eax,eax
c0009aea:	74 5d                	je     c0009b49 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009aec:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009aef:	83 f0 01             	xor    eax,0x1
c0009af2:	0f b6 c0             	movzx  eax,al
c0009af5:	85 c0                	test   eax,eax
c0009af7:	74 50                	je     c0009b49 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009af9:	a0 40 94 02 c0       	mov    al,ds:0xc0029440
c0009afe:	0f b6 c0             	movzx  eax,al
c0009b01:	85 c0                	test   eax,eax
c0009b03:	74 44                	je     c0009b49 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b08:	0f b7 c0             	movzx  eax,ax
c0009b0b:	83 f8 3f             	cmp    eax,0x3f
c0009b0e:	76 39                	jbe    c0009b49 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b13:	0f b7 c0             	movzx  eax,ax
c0009b16:	83 f8 7f             	cmp    eax,0x7f
c0009b19:	77 2e                	ja     c0009b49 <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b1e:	88 c2                	mov    dl,al
c0009b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b23:	0f b7 c0             	movzx  eax,ax
c0009b26:	83 f8 5f             	cmp    eax,0x5f
c0009b29:	76 04                	jbe    c0009b2f <sendKeyboardToken(KeyboardToken)+0x480>
c0009b2b:	b0 20                	mov    al,0x20
c0009b2d:	eb 02                	jmp    c0009b31 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b2f:	b0 00                	mov    al,0x0
c0009b31:	89 d1                	mov    ecx,edx
c0009b33:	29 c1                	sub    ecx,eax
c0009b35:	89 c8                	mov    eax,ecx
c0009b37:	83 e8 40             	sub    eax,0x40
c0009b3a:	0f b6 c0             	movzx  eax,al
c0009b3d:	83 ec 0c             	sub    esp,0xc
c0009b40:	50                   	push   eax
c0009b41:	e8 8e fa ff ff       	call   c00095d4 <sendKeyToTerminal(unsigned char)>
c0009b46:	83 c4 10             	add    esp,0x10
c0009b49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b4c:	0f b7 c0             	movzx  eax,ax
c0009b4f:	3d 00 03 00 00       	cmp    eax,0x300
c0009b54:	75 12                	jne    c0009b68 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b56:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b59:	83 f0 01             	xor    eax,0x1
c0009b5c:	0f b6 c0             	movzx  eax,al
c0009b5f:	85 c0                	test   eax,eax
c0009b61:	74 05                	je     c0009b68 <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b63:	e8 57 73 00 00       	call   c0010ebf <doTerminalCycle()>
c0009b68:	90                   	nop
c0009b69:	c9                   	leave  
c0009b6a:	c3                   	ret    

c0009b6b <clearInternalKeybuffer(VgaText*)>:
c0009b6b:	55                   	push   ebp
c0009b6c:	89 e5                	mov    ebp,esp
c0009b6e:	83 ec 08             	sub    esp,0x8
c0009b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b74:	05 02 01 00 00       	add    eax,0x102
c0009b79:	83 ec 0c             	sub    esp,0xc
c0009b7c:	50                   	push   eax
c0009b7d:	e8 ee 69 ff ff       	call   c0000570 <strlen>
c0009b82:	83 c4 10             	add    esp,0x10
c0009b85:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009b88:	81 c2 02 01 00 00    	add    edx,0x102
c0009b8e:	83 ec 04             	sub    esp,0x4
c0009b91:	50                   	push   eax
c0009b92:	6a 00                	push   0x0
c0009b94:	52                   	push   edx
c0009b95:	e8 56 69 ff ff       	call   c00004f0 <memset>
c0009b9a:	83 c4 10             	add    esp,0x10
c0009b9d:	90                   	nop
c0009b9e:	c9                   	leave  
c0009b9f:	c3                   	ret    

c0009ba0 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009ba0:	55                   	push   ebp
c0009ba1:	89 e5                	mov    ebp,esp
c0009ba3:	83 ec 18             	sub    esp,0x18
c0009ba6:	a1 28 93 02 c0       	mov    eax,ds:0xc0029328
c0009bab:	85 c0                	test   eax,eax
c0009bad:	74 2a                	je     c0009bd9 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009baf:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bb5:	8b 0d 28 93 02 c0    	mov    ecx,DWORD PTR ds:0xc0029328
c0009bbb:	83 ec 04             	sub    esp,0x4
c0009bbe:	68 40 93 02 c0       	push   0xc0029340
c0009bc3:	83 ec 08             	sub    esp,0x8
c0009bc6:	89 e2                	mov    edx,esp
c0009bc8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009bcb:	89 02                	mov    DWORD PTR [edx],eax
c0009bcd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009bd0:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009bd4:	ff d1                	call   ecx
c0009bd6:	83 c4 10             	add    esp,0x10
c0009bd9:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009bde:	0f b6 c0             	movzx  eax,al
c0009be1:	85 c0                	test   eax,eax
c0009be3:	74 07                	je     c0009bec <readKeyboard(VgaText*, char*, unsigned long)+0x4c>
c0009be5:	c6 05 2c 93 02 c0 01 	mov    BYTE PTR ds:0xc002932c,0x1
c0009bec:	fb                   	sti    
c0009bed:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009bf4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009bf8:	0f 84 2f 01 00 00    	je     c0009d2d <readKeyboard(VgaText*, char*, unsigned long)+0x18d>
c0009bfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c01:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c07:	0f be c0             	movsx  eax,al
c0009c0a:	85 c0                	test   eax,eax
c0009c0c:	75 2c                	jne    c0009c3a <readKeyboard(VgaText*, char*, unsigned long)+0x9a>
c0009c0e:	fa                   	cli    
c0009c0f:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c14:	83 c0 01             	add    eax,0x1
c0009c17:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c1c:	e8 67 b8 00 00       	call   c0015488 <schedule()>
c0009c21:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c26:	83 e8 01             	sub    eax,0x1
c0009c29:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0009c2e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0009c33:	85 c0                	test   eax,eax
c0009c35:	75 c7                	jne    c0009bfe <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c37:	fb                   	sti    
c0009c38:	eb c4                	jmp    c0009bfe <readKeyboard(VgaText*, char*, unsigned long)+0x5e>
c0009c3a:	a0 2c 93 02 c0       	mov    al,ds:0xc002932c
c0009c3f:	0f b6 c0             	movzx  eax,al
c0009c42:	85 c0                	test   eax,eax
c0009c44:	74 0a                	je     c0009c50 <readKeyboard(VgaText*, char*, unsigned long)+0xb0>
c0009c46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c49:	c6 80 02 01 00 00 0a 	mov    BYTE PTR [eax+0x102],0xa
c0009c50:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c53:	8d 50 01             	lea    edx,[eax+0x1]
c0009c56:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c59:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c5c:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c62:	88 10                	mov    BYTE PTR [eax],dl
c0009c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c67:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c6d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c70:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c74:	83 f8 03             	cmp    eax,0x3
c0009c77:	75 1e                	jne    c0009c97 <readKeyboard(VgaText*, char*, unsigned long)+0xf7>
c0009c79:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c80:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c83:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009c89:	83 ec 08             	sub    esp,0x8
c0009c8c:	6a 02                	push   0x2
c0009c8e:	50                   	push   eax
c0009c8f:	e8 73 61 00 00       	call   c000fe07 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009c94:	83 c4 10             	add    esp,0x10
c0009c97:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c9b:	83 f8 1c             	cmp    eax,0x1c
c0009c9e:	75 1e                	jne    c0009cbe <readKeyboard(VgaText*, char*, unsigned long)+0x11e>
c0009ca0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009ca5:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ca7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009caa:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009cb0:	83 ec 08             	sub    esp,0x8
c0009cb3:	6a 09                	push   0x9
c0009cb5:	50                   	push   eax
c0009cb6:	e8 4c 61 00 00       	call   c000fe07 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cbb:	83 c4 10             	add    esp,0x10
c0009cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cc1:	05 02 01 00 00       	add    eax,0x102
c0009cc6:	83 ec 0c             	sub    esp,0xc
c0009cc9:	50                   	push   eax
c0009cca:	e8 a1 68 ff ff       	call   c0000570 <strlen>
c0009ccf:	83 c4 10             	add    esp,0x10
c0009cd2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cd5:	81 c2 02 01 00 00    	add    edx,0x102
c0009cdb:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cde:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009ce1:	81 c2 02 01 00 00    	add    edx,0x102
c0009ce7:	83 ec 04             	sub    esp,0x4
c0009cea:	50                   	push   eax
c0009ceb:	51                   	push   ecx
c0009cec:	52                   	push   edx
c0009ced:	e8 de 66 ff ff       	call   c00003d0 <memmove>
c0009cf2:	83 c4 10             	add    esp,0x10
c0009cf5:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009cf9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009cfd:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d01:	83 f8 0a             	cmp    eax,0xa
c0009d04:	74 22                	je     c0009d28 <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d06:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d0a:	83 f8 03             	cmp    eax,0x3
c0009d0d:	74 19                	je     c0009d28 <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d0f:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d13:	83 f8 1c             	cmp    eax,0x1c
c0009d16:	74 10                	je     c0009d28 <readKeyboard(VgaText*, char*, unsigned long)+0x188>
c0009d18:	a0 2d 93 02 c0       	mov    al,ds:0xc002932d
c0009d1d:	0f b6 c0             	movzx  eax,al
c0009d20:	85 c0                	test   eax,eax
c0009d22:	0f 84 cc fe ff ff    	je     c0009bf4 <readKeyboard(VgaText*, char*, unsigned long)+0x54>
c0009d28:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d2b:	eb 03                	jmp    c0009d30 <readKeyboard(VgaText*, char*, unsigned long)+0x190>
c0009d2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d30:	c9                   	leave  
c0009d31:	c3                   	ret    

c0009d32 <Keyboard::Keyboard(char const*)>:
c0009d32:	83 ec 0c             	sub    esp,0xc
c0009d35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d39:	83 ec 08             	sub    esp,0x8
c0009d3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d40:	50                   	push   eax
c0009d41:	e8 5a f4 ff ff       	call   c00091a0 <Device::Device(char const*)>
c0009d46:	83 c4 10             	add    esp,0x10
c0009d49:	ba 44 17 02 c0       	mov    edx,0xc0021744
c0009d4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d52:	89 10                	mov    DWORD PTR [eax],edx
c0009d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d58:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d62:	c6 05 24 93 02 c0 01 	mov    BYTE PTR ds:0xc0029324,0x1
c0009d69:	90                   	nop
c0009d6a:	83 c4 0c             	add    esp,0xc
c0009d6d:	c3                   	ret    

c0009d6e <Keyboard::~Keyboard()>:
c0009d6e:	83 ec 0c             	sub    esp,0xc
c0009d71:	ba 44 17 02 c0       	mov    edx,0xc0021744
c0009d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d7a:	89 10                	mov    DWORD PTR [eax],edx
c0009d7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d80:	83 ec 0c             	sub    esp,0xc
c0009d83:	50                   	push   eax
c0009d84:	e8 b7 f1 ff ff       	call   c0008f40 <Device::~Device()>
c0009d89:	83 c4 10             	add    esp,0x10
c0009d8c:	90                   	nop
c0009d8d:	83 c4 0c             	add    esp,0xc
c0009d90:	c3                   	ret    
c0009d91:	90                   	nop

c0009d92 <Keyboard::~Keyboard()>:
c0009d92:	83 ec 0c             	sub    esp,0xc
c0009d95:	83 ec 0c             	sub    esp,0xc
c0009d98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d9c:	e8 cd ff ff ff       	call   c0009d6e <Keyboard::~Keyboard()>
c0009da1:	83 c4 10             	add    esp,0x10
c0009da4:	83 ec 08             	sub    esp,0x8
c0009da7:	68 5c 01 00 00       	push   0x15c
c0009dac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009db0:	e8 53 29 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0009db5:	83 c4 10             	add    esp,0x10
c0009db8:	83 c4 0c             	add    esp,0xc
c0009dbb:	c3                   	ret    

c0009dbc <LogicalDisk::close(int, int, void*)>:
c0009dbc:	83 c8 ff             	or     eax,0xffffffff
c0009dbf:	c3                   	ret    

c0009dc0 <LogicalDisk::~LogicalDisk()>:
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	ba bc 17 02 c0       	mov    edx,0xc00217bc
c0009dc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dcc:	89 10                	mov    DWORD PTR [eax],edx
c0009dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd2:	83 ec 0c             	sub    esp,0xc
c0009dd5:	50                   	push   eax
c0009dd6:	e8 65 f1 ff ff       	call   c0008f40 <Device::~Device()>
c0009ddb:	83 c4 10             	add    esp,0x10
c0009dde:	90                   	nop
c0009ddf:	83 c4 0c             	add    esp,0xc
c0009de2:	c3                   	ret    
c0009de3:	90                   	nop

c0009de4 <LogicalDisk::~LogicalDisk()>:
c0009de4:	83 ec 0c             	sub    esp,0xc
c0009de7:	83 ec 0c             	sub    esp,0xc
c0009dea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dee:	e8 cd ff ff ff       	call   c0009dc0 <LogicalDisk::~LogicalDisk()>
c0009df3:	83 c4 10             	add    esp,0x10
c0009df6:	83 ec 08             	sub    esp,0x8
c0009df9:	68 78 01 00 00       	push   0x178
c0009dfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e02:	e8 01 29 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c0009e07:	83 c4 10             	add    esp,0x10
c0009e0a:	83 c4 0c             	add    esp,0xc
c0009e0d:	c3                   	ret    

c0009e0e <LogicalDisk::open(int, int, void*)>:
c0009e0e:	83 ec 18             	sub    esp,0x18
c0009e11:	68 70 17 02 c0       	push   0xc0021770
c0009e16:	e8 b7 4e 00 00       	call   c000ecd2 <KePanic(char const*)>
c0009e1b:	83 c8 ff             	or     eax,0xffffffff
c0009e1e:	83 c4 1c             	add    esp,0x1c
c0009e21:	c3                   	ret    

c0009e22 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e22:	53                   	push   ebx
c0009e23:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e2f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e35:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e3b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e41:	77 10                	ja     c0009e53 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e43:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e49:	89 d3                	mov    ebx,edx
c0009e4b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e51:	72 05                	jb     c0009e58 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e53:	83 c8 ff             	or     eax,0xffffffff
c0009e56:	89 c2                	mov    edx,eax
c0009e58:	5b                   	pop    ebx
c0009e59:	c3                   	ret    

c0009e5a <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e5a:	56                   	push   esi
c0009e5b:	83 c8 ff             	or     eax,0xffffffff
c0009e5e:	53                   	push   ebx
c0009e5f:	89 c2                	mov    edx,eax
c0009e61:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e65:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e69:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e6d:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e73:	77 27                	ja     c0009e9c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e75:	89 d8                	mov    eax,ebx
c0009e77:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e7d:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e88:	89 c2                	mov    edx,eax
c0009e8a:	73 10                	jae    c0009e9c <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e8c:	89 c8                	mov    eax,ecx
c0009e8e:	89 da                	mov    edx,ebx
c0009e90:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009e96:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009e9c:	5b                   	pop    ebx
c0009e9d:	5e                   	pop    esi
c0009e9e:	c3                   	ret    
c0009e9f:	90                   	nop

c0009ea0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009ea0:	83 ec 1c             	sub    esp,0x1c
c0009ea3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009ea7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009eaf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009eb3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009eb7:	89 04 24             	mov    DWORD PTR [esp],eax
c0009eba:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009ebe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ec2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ec6:	83 ec 08             	sub    esp,0x8
c0009ec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ecd:	50                   	push   eax
c0009ece:	e8 cd f2 ff ff       	call   c00091a0 <Device::Device(char const*)>
c0009ed3:	83 c4 10             	add    esp,0x10
c0009ed6:	ba bc 17 02 c0       	mov    edx,0xc00217bc
c0009edb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009edf:	89 10                	mov    DWORD PTR [eax],edx
c0009ee1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ee5:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009eec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ef0:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009ef7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009efb:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f06:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f10:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f18:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f1c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f22:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f28:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f2f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f33:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f39:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f43:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f47:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f51:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f5b:	90                   	nop
c0009f5c:	83 c4 1c             	add    esp,0x1c
c0009f5f:	c3                   	ret    

c0009f60 <LogicalDisk::assignDriveLetter()>:
c0009f60:	55                   	push   ebp
c0009f61:	57                   	push   edi
c0009f62:	56                   	push   esi
c0009f63:	53                   	push   ebx
c0009f64:	83 ec 14             	sub    esp,0x14
c0009f67:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f71:	b0 41                	mov    al,0x41
c0009f73:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f79:	84 d2                	test   dl,dl
c0009f7b:	75 02                	jne    c0009f7f <LogicalDisk::assignDriveLetter()+0x1f>
c0009f7d:	b0 43                	mov    al,0x43
c0009f7f:	8b 3d 60 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029760
c0009f85:	0f b6 ca             	movzx  ecx,dl
c0009f88:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f8c:	0f be e8             	movsx  ebp,al
c0009f8f:	8b 3d 64 97 02 c0    	mov    edi,DWORD PTR ds:0xc0029764
c0009f95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009f99:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009f9d:	3c 43                	cmp    al,0x43
c0009f9f:	75 10                	jne    c0009fb1 <LogicalDisk::assignDriveLetter()+0x51>
c0009fa1:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009fa8:	75 5a                	jne    c000a004 <LogicalDisk::assignDriveLetter()+0xa4>
c0009faa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009faf:	75 53                	jne    c000a004 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb1:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fb4:	ba 01 00 00 00       	mov    edx,0x1
c0009fb9:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fbc:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009fbf:	d3 e2                	shl    edx,cl
c0009fc1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fc5:	89 d7                	mov    edi,edx
c0009fc7:	89 d6                	mov    esi,edx
c0009fc9:	c1 ff 1f             	sar    edi,0x1f
c0009fcc:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fd0:	21 f9                	and    ecx,edi
c0009fd2:	09 d1                	or     ecx,edx
c0009fd4:	75 2e                	jne    c000a004 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fd6:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fda:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fde:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009fe4:	09 f2                	or     edx,esi
c0009fe6:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009fe9:	89 15 60 97 02 c0    	mov    DWORD PTR ds:0xc0029760,edx
c0009fef:	89 1c b5 80 97 02 c0 	mov    DWORD PTR [esi*4-0x3ffd6880],ebx
c0009ff6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ffa:	09 fa                	or     edx,edi
c0009ffc:	89 15 64 97 02 c0    	mov    DWORD PTR ds:0xc0029764,edx
c000a002:	eb 0d                	jmp    c000a011 <LogicalDisk::assignDriveLetter()+0xb1>
c000a004:	8d 50 01             	lea    edx,[eax+0x1]
c000a007:	45                   	inc    ebp
c000a008:	88 d0                	mov    al,dl
c000a00a:	80 fa 5b             	cmp    dl,0x5b
c000a00d:	75 8e                	jne    c0009f9d <LogicalDisk::assignDriveLetter()+0x3d>
c000a00f:	31 c0                	xor    eax,eax
c000a011:	83 c4 14             	add    esp,0x14
c000a014:	5b                   	pop    ebx
c000a015:	5e                   	pop    esi
c000a016:	5f                   	pop    edi
c000a017:	5d                   	pop    ebp
c000a018:	c3                   	ret    
c000a019:	90                   	nop

c000a01a <LogicalDisk::mount()>:
c000a01a:	56                   	push   esi
c000a01b:	53                   	push   ebx
c000a01c:	53                   	push   ebx
c000a01d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a021:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c000a027:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a031:	85 db                	test   ebx,ebx
c000a033:	74 27                	je     c000a05c <LogicalDisk::mount()+0x42>
c000a035:	51                   	push   ecx
c000a036:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a03d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a03f:	83 e8 41             	sub    eax,0x41
c000a042:	50                   	push   eax
c000a043:	56                   	push   esi
c000a044:	53                   	push   ebx
c000a045:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a048:	83 c4 10             	add    esp,0x10
c000a04b:	84 c0                	test   al,al
c000a04d:	74 08                	je     c000a057 <LogicalDisk::mount()+0x3d>
c000a04f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a055:	eb 07                	jmp    c000a05e <LogicalDisk::mount()+0x44>
c000a057:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a05a:	eb d5                	jmp    c000a031 <LogicalDisk::mount()+0x17>
c000a05c:	31 c0                	xor    eax,eax
c000a05e:	5a                   	pop    edx
c000a05f:	5b                   	pop    ebx
c000a060:	5e                   	pop    esi
c000a061:	c3                   	ret    

c000a062 <LogicalDisk::unmount()>:
c000a062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a066:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a070:	c3                   	ret    
c000a071:	90                   	nop

c000a072 <LogicalDisk::eject()>:
c000a072:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a076:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a07c:	8b 10                	mov    edx,DWORD PTR [eax]
c000a07e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a082:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a085:	90                   	nop

c000a086 <LogicalDisk::unassignDriveLetter()>:
c000a086:	57                   	push   edi
c000a087:	56                   	push   esi
c000a088:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a08c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a093:	85 c9                	test   ecx,ecx
c000a095:	75 0f                	jne    c000a0a6 <LogicalDisk::unassignDriveLetter()+0x20>
c000a097:	c7 44 24 0c 94 17 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021794
c000a09f:	5e                   	pop    esi
c000a0a0:	5f                   	pop    edi
c000a0a1:	e9 2c 4c 00 00       	jmp    c000ecd2 <KePanic(char const*)>
c000a0a6:	83 e9 41             	sub    ecx,0x41
c000a0a9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0b0:	b8 01 00 00 00       	mov    eax,0x1
c000a0b5:	c7 04 8d 80 97 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd6880],0x0
c000a0c0:	d3 e0                	shl    eax,cl
c000a0c2:	89 c7                	mov    edi,eax
c000a0c4:	f7 d0                	not    eax
c000a0c6:	c1 ff 1f             	sar    edi,0x1f
c000a0c9:	21 05 60 97 02 c0    	and    DWORD PTR ds:0xc0029760,eax
c000a0cf:	89 fe                	mov    esi,edi
c000a0d1:	f7 d6                	not    esi
c000a0d3:	21 35 64 97 02 c0    	and    DWORD PTR ds:0xc0029764,esi
c000a0d9:	5e                   	pop    esi
c000a0da:	5f                   	pop    edi
c000a0db:	c3                   	ret    

c000a0dc <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0dc:	57                   	push   edi
c000a0dd:	56                   	push   esi
c000a0de:	53                   	push   ebx
c000a0df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0e3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0ef:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a0f5:	77 41                	ja     c000a138 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a0f7:	99                   	cdq    
c000a0f8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a0fe:	01 c8                	add    eax,ecx
c000a100:	11 da                	adc    edx,ebx
c000a102:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a108:	19 d7                	sbb    edi,edx
c000a10a:	72 33                	jb     c000a13f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a10c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a112:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a118:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a11c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a120:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a126:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a12c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a130:	5b                   	pop    ebx
c000a131:	5e                   	pop    esi
c000a132:	5f                   	pop    edi
c000a133:	e9 c8 0a 00 00       	jmp    c000ac00 <VCache::read(unsigned long long, int, void*)>
c000a138:	b8 05 00 00 00       	mov    eax,0x5
c000a13d:	eb 05                	jmp    c000a144 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a13f:	b8 07 00 00 00       	mov    eax,0x7
c000a144:	5b                   	pop    ebx
c000a145:	5e                   	pop    esi
c000a146:	5f                   	pop    edi
c000a147:	c3                   	ret    

c000a148 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a148:	57                   	push   edi
c000a149:	56                   	push   esi
c000a14a:	53                   	push   ebx
c000a14b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a14f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a153:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a157:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a15b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a161:	77 41                	ja     c000a1a4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a163:	99                   	cdq    
c000a164:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a16a:	01 c8                	add    eax,ecx
c000a16c:	11 da                	adc    edx,ebx
c000a16e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a174:	19 d7                	sbb    edi,edx
c000a176:	72 33                	jb     c000a1ab <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a178:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a17e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a184:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a188:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a18c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a192:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a198:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a19c:	5b                   	pop    ebx
c000a19d:	5e                   	pop    esi
c000a19e:	5f                   	pop    edi
c000a19f:	e9 68 09 00 00       	jmp    c000ab0c <VCache::write(unsigned long long, int, void*)>
c000a1a4:	b8 05 00 00 00       	mov    eax,0x5
c000a1a9:	eb 05                	jmp    c000a1b0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a1ab:	b8 07 00 00 00       	mov    eax,0x7
c000a1b0:	5b                   	pop    ebx
c000a1b1:	5e                   	pop    esi
c000a1b2:	5f                   	pop    edi
c000a1b3:	c3                   	ret    

c000a1b4 <Mouse::Mouse(char const*)>:
c000a1b4:	83 ec 0c             	sub    esp,0xc
c000a1b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1bb:	83 ec 08             	sub    esp,0x8
c000a1be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1c2:	50                   	push   eax
c000a1c3:	e8 d8 ef ff ff       	call   c00091a0 <Device::Device(char const*)>
c000a1c8:	83 c4 10             	add    esp,0x10
c000a1cb:	ba e8 17 02 c0       	mov    edx,0xc00217e8
c000a1d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1d4:	89 10                	mov    DWORD PTR [eax],edx
c000a1d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1da:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1e4:	90                   	nop
c000a1e5:	83 c4 0c             	add    esp,0xc
c000a1e8:	c3                   	ret    
c000a1e9:	90                   	nop
c000a1ea:	66 90                	xchg   ax,ax

c000a1ec <Mouse::~Mouse()>:
c000a1ec:	83 ec 0c             	sub    esp,0xc
c000a1ef:	ba e8 17 02 c0       	mov    edx,0xc00217e8
c000a1f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1f8:	89 10                	mov    DWORD PTR [eax],edx
c000a1fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1fe:	83 ec 0c             	sub    esp,0xc
c000a201:	50                   	push   eax
c000a202:	e8 39 ed ff ff       	call   c0008f40 <Device::~Device()>
c000a207:	83 c4 10             	add    esp,0x10
c000a20a:	90                   	nop
c000a20b:	83 c4 0c             	add    esp,0xc
c000a20e:	c3                   	ret    
c000a20f:	90                   	nop

c000a210 <Mouse::~Mouse()>:
c000a210:	83 ec 0c             	sub    esp,0xc
c000a213:	83 ec 0c             	sub    esp,0xc
c000a216:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a21a:	e8 cd ff ff ff       	call   c000a1ec <Mouse::~Mouse()>
c000a21f:	83 c4 10             	add    esp,0x10
c000a222:	83 ec 08             	sub    esp,0x8
c000a225:	68 58 01 00 00       	push   0x158
c000a22a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a22e:	e8 d5 24 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000a233:	83 c4 10             	add    esp,0x10
c000a236:	83 c4 0c             	add    esp,0xc
c000a239:	c3                   	ret    

c000a23a <NIC::getMAC()>:
c000a23a:	31 c0                	xor    eax,eax
c000a23c:	31 d2                	xor    edx,edx
c000a23e:	c3                   	ret    
c000a23f:	90                   	nop

c000a240 <NIC::write(int, unsigned char*, int*)>:
c000a240:	b8 01 00 00 00       	mov    eax,0x1
c000a245:	c3                   	ret    

c000a246 <NIC::NIC(char const*)>:
c000a246:	83 ec 0c             	sub    esp,0xc
c000a249:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a24d:	83 ec 08             	sub    esp,0x8
c000a250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a254:	50                   	push   eax
c000a255:	e8 46 ef ff ff       	call   c00091a0 <Device::Device(char const*)>
c000a25a:	83 c4 10             	add    esp,0x10
c000a25d:	ba 14 18 02 c0       	mov    edx,0xc0021814
c000a262:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a266:	89 10                	mov    DWORD PTR [eax],edx
c000a268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a26c:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a276:	90                   	nop
c000a277:	83 c4 0c             	add    esp,0xc
c000a27a:	c3                   	ret    
c000a27b:	90                   	nop

c000a27c <NIC::~NIC()>:
c000a27c:	83 ec 0c             	sub    esp,0xc
c000a27f:	ba 14 18 02 c0       	mov    edx,0xc0021814
c000a284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a288:	89 10                	mov    DWORD PTR [eax],edx
c000a28a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a28e:	83 ec 0c             	sub    esp,0xc
c000a291:	50                   	push   eax
c000a292:	e8 a9 ec ff ff       	call   c0008f40 <Device::~Device()>
c000a297:	83 c4 10             	add    esp,0x10
c000a29a:	90                   	nop
c000a29b:	83 c4 0c             	add    esp,0xc
c000a29e:	c3                   	ret    
c000a29f:	90                   	nop

c000a2a0 <NIC::~NIC()>:
c000a2a0:	83 ec 0c             	sub    esp,0xc
c000a2a3:	83 ec 0c             	sub    esp,0xc
c000a2a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2aa:	e8 cd ff ff ff       	call   c000a27c <NIC::~NIC()>
c000a2af:	83 c4 10             	add    esp,0x10
c000a2b2:	83 ec 08             	sub    esp,0x8
c000a2b5:	68 58 01 00 00       	push   0x158
c000a2ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2be:	e8 45 24 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000a2c3:	83 c4 10             	add    esp,0x10
c000a2c6:	83 c4 0c             	add    esp,0xc
c000a2c9:	c3                   	ret    

c000a2ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2ca:	55                   	push   ebp
c000a2cb:	57                   	push   edi
c000a2cc:	56                   	push   esi
c000a2cd:	53                   	push   ebx
c000a2ce:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2d4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000a2db:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000a2e2:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000a2e9:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000a2f0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2f4:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a2f8:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a2ff:	e8 98 ef ff ff       	call   c000929c <Device::getName()>
c000a304:	5a                   	pop    edx
c000a305:	59                   	pop    ecx
c000a306:	50                   	push   eax
c000a307:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a30b:	55                   	push   ebp
c000a30c:	e8 2f 63 ff ff       	call   c0000640 <strcpy>
c000a311:	5b                   	pop    ebx
c000a312:	58                   	pop    eax
c000a313:	68 40 18 02 c0       	push   0xc0021840
c000a318:	55                   	push   ebp
c000a319:	e8 22 65 ff ff       	call   c0000840 <strcat>
c000a31e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a325:	e8 51 46 00 00       	call   c000e97b <malloc>
c000a32a:	83 c4 0c             	add    esp,0xc
c000a32d:	89 c3                	mov    ebx,eax
c000a32f:	57                   	push   edi
c000a330:	56                   	push   esi
c000a331:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a335:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a339:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a340:	55                   	push   ebp
c000a341:	50                   	push   eax
c000a342:	e8 59 fb ff ff       	call   c0009ea0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a347:	83 c4 14             	add    esp,0x14
c000a34a:	53                   	push   ebx
c000a34b:	e8 10 fc ff ff       	call   c0009f60 <LogicalDisk::assignDriveLetter()>
c000a350:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a353:	e8 c2 fc ff ff       	call   c000a01a <LogicalDisk::mount()>
c000a358:	58                   	pop    eax
c000a359:	5a                   	pop    edx
c000a35a:	53                   	push   ebx
c000a35b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a362:	e8 d7 ec ff ff       	call   c000903e <Device::addChild(Device*)>
c000a367:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a36d:	5b                   	pop    ebx
c000a36e:	5e                   	pop    esi
c000a36f:	5f                   	pop    edi
c000a370:	5d                   	pop    ebp
c000a371:	c3                   	ret    

c000a372 <createPartitionsForDisk(PhysicalDisk*)>:
c000a372:	55                   	push   ebp
c000a373:	57                   	push   edi
c000a374:	56                   	push   esi
c000a375:	53                   	push   ebx
c000a376:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a37c:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a383:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a389:	3d 00 02 00 00       	cmp    eax,0x200
c000a38e:	74 27                	je     c000a3b7 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a390:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a396:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a39c:	83 ec 10             	sub    esp,0x10
c000a39f:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a3a3:	99                   	cdq    
c000a3a4:	c1 e6 0a             	shl    esi,0xa
c000a3a7:	52                   	push   edx
c000a3a8:	89 fd                	mov    ebp,edi
c000a3aa:	50                   	push   eax
c000a3ab:	55                   	push   ebp
c000a3ac:	56                   	push   esi
c000a3ad:	e8 e2 56 01 00       	call   c001fa94 <__udivdi3>
c000a3b2:	e9 b9 00 00 00       	jmp    c000a470 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3b7:	83 ec 0c             	sub    esp,0xc
c000a3ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3bc:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3c0:	56                   	push   esi
c000a3c1:	6a 01                	push   0x1
c000a3c3:	6a 00                	push   0x0
c000a3c5:	6a 00                	push   0x0
c000a3c7:	53                   	push   ebx
c000a3c8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3cb:	83 c4 20             	add    esp,0x20
c000a3ce:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3d6:	75 0a                	jne    c000a3e2 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3d8:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3e0:	74 2c                	je     c000a40e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3e2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3e8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a3f4:	83 ec 10             	sub    esp,0x10
c000a3f7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a3fb:	89 f7                	mov    edi,esi
c000a3fd:	c1 e0 0a             	shl    eax,0xa
c000a400:	c1 ff 1f             	sar    edi,0x1f
c000a403:	57                   	push   edi
c000a404:	56                   	push   esi
c000a405:	52                   	push   edx
c000a406:	50                   	push   eax
c000a407:	e8 88 56 01 00       	call   c001fa94 <__udivdi3>
c000a40c:	eb 62                	jmp    c000a470 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a40e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a415:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a41c:	89 cf                	mov    edi,ecx
c000a41e:	83 e2 7f             	and    edx,0x7f
c000a421:	83 e7 7f             	and    edi,0x7f
c000a424:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a42b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a42e:	83 e0 7f             	and    eax,0x7f
c000a431:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a434:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a43b:	83 e0 7f             	and    eax,0x7f
c000a43e:	01 d0                	add    eax,edx
c000a440:	89 c5                	mov    ebp,eax
c000a442:	84 c0                	test   al,al
c000a444:	74 41                	je     c000a487 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a446:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a44c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a452:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a458:	83 ec 10             	sub    esp,0x10
c000a45b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a45f:	89 f7                	mov    edi,esi
c000a461:	c1 e0 0a             	shl    eax,0xa
c000a464:	c1 ff 1f             	sar    edi,0x1f
c000a467:	57                   	push   edi
c000a468:	56                   	push   esi
c000a469:	52                   	push   edx
c000a46a:	50                   	push   eax
c000a46b:	e8 24 56 01 00       	call   c001fa94 <__udivdi3>
c000a470:	83 c4 14             	add    esp,0x14
c000a473:	52                   	push   edx
c000a474:	50                   	push   eax
c000a475:	6a 00                	push   0x0
c000a477:	6a 00                	push   0x0
c000a479:	53                   	push   ebx
c000a47a:	e8 4b fe ff ff       	call   c000a2ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a47f:	83 c4 20             	add    esp,0x20
c000a482:	e9 73 01 00 00       	jmp    c000a5fa <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a487:	89 f0                	mov    eax,esi
c000a489:	31 c9                	xor    ecx,ecx
c000a48b:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a492:	75 02                	jne    c000a496 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a494:	89 cd                	mov    ebp,ecx
c000a496:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a49d:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000a4a4:	c1 e2 08             	shl    edx,0x8
c000a4a7:	c1 e6 10             	shl    esi,0x10
c000a4aa:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a4b2:	09 f2                	or     edx,esi
c000a4b4:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4bc:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000a4c3:	83 c0 10             	add    eax,0x10
c000a4c6:	09 f2                	or     edx,esi
c000a4c8:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4cf:	c1 e6 18             	shl    esi,0x18
c000a4d2:	09 f2                	or     edx,esi
c000a4d4:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4db:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4df:	c1 e6 10             	shl    esi,0x10
c000a4e2:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4e9:	c1 e2 08             	shl    edx,0x8
c000a4ec:	09 f2                	or     edx,esi
c000a4ee:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a4f5:	09 f2                	or     edx,esi
c000a4f7:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a4fe:	c1 e6 18             	shl    esi,0x18
c000a501:	09 f2                	or     edx,esi
c000a503:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a507:	41                   	inc    ecx
c000a508:	83 f9 04             	cmp    ecx,0x4
c000a50b:	0f 85 7a ff ff ff    	jne    c000a48b <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a515:	83 f0 01             	xor    eax,0x1
c000a518:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a51c:	75 4f                	jne    c000a56d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a51e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a522:	83 f0 01             	xor    eax,0x1
c000a525:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a529:	75 42                	jne    c000a56d <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a52b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a533:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a53b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a541:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a547:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a54d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a551:	89 f7                	mov    edi,esi
c000a553:	c1 e0 0a             	shl    eax,0xa
c000a556:	c1 ff 1f             	sar    edi,0x1f
c000a559:	57                   	push   edi
c000a55a:	56                   	push   esi
c000a55b:	52                   	push   edx
c000a55c:	50                   	push   eax
c000a55d:	e8 32 55 01 00       	call   c001fa94 <__udivdi3>
c000a562:	83 c4 10             	add    esp,0x10
c000a565:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a569:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a56d:	89 e8                	mov    eax,ebp
c000a56f:	0f b6 e8             	movzx  ebp,al
c000a572:	85 ed                	test   ebp,ebp
c000a574:	74 50                	je     c000a5c6 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a576:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a57a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a57e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a582:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a586:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a58a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a58e:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a592:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a596:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a59a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a59e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a5a2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a5a6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a5aa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5ae:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a5b6:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5ba:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5be:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5c2:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5c6:	31 ed                	xor    ebp,ebp
c000a5c8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5cc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5d0:	89 f8                	mov    eax,edi
c000a5d2:	09 f0                	or     eax,esi
c000a5d4:	74 1e                	je     c000a5f4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5d6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5da:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5de:	89 d1                	mov    ecx,edx
c000a5e0:	09 c1                	or     ecx,eax
c000a5e2:	74 10                	je     c000a5f4 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5e4:	83 ec 0c             	sub    esp,0xc
c000a5e7:	57                   	push   edi
c000a5e8:	56                   	push   esi
c000a5e9:	52                   	push   edx
c000a5ea:	50                   	push   eax
c000a5eb:	53                   	push   ebx
c000a5ec:	e8 d9 fc ff ff       	call   c000a2ca <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5f1:	83 c4 20             	add    esp,0x20
c000a5f4:	45                   	inc    ebp
c000a5f5:	83 fd 04             	cmp    ebp,0x4
c000a5f8:	75 ce                	jne    c000a5c8 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a5fa:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a600:	5b                   	pop    ebx
c000a601:	5e                   	pop    esi
c000a602:	5f                   	pop    edi
c000a603:	5d                   	pop    ebp
c000a604:	c3                   	ret    
c000a605:	66 90                	xchg   ax,ax
c000a607:	90                   	nop

c000a608 <Serial::Serial(char const*)>:
c000a608:	83 ec 0c             	sub    esp,0xc
c000a60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a60f:	83 ec 08             	sub    esp,0x8
c000a612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a616:	50                   	push   eax
c000a617:	e8 84 eb ff ff       	call   c00091a0 <Device::Device(char const*)>
c000a61c:	83 c4 10             	add    esp,0x10
c000a61f:	ba 54 18 02 c0       	mov    edx,0xc0021854
c000a624:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a628:	89 10                	mov    DWORD PTR [eax],edx
c000a62a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a62e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a638:	90                   	nop
c000a639:	83 c4 0c             	add    esp,0xc
c000a63c:	c3                   	ret    
c000a63d:	90                   	nop
c000a63e:	66 90                	xchg   ax,ax

c000a640 <Serial::~Serial()>:
c000a640:	83 ec 0c             	sub    esp,0xc
c000a643:	ba 54 18 02 c0       	mov    edx,0xc0021854
c000a648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a64c:	89 10                	mov    DWORD PTR [eax],edx
c000a64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a652:	83 ec 0c             	sub    esp,0xc
c000a655:	50                   	push   eax
c000a656:	e8 e5 e8 ff ff       	call   c0008f40 <Device::~Device()>
c000a65b:	83 c4 10             	add    esp,0x10
c000a65e:	90                   	nop
c000a65f:	83 c4 0c             	add    esp,0xc
c000a662:	c3                   	ret    
c000a663:	90                   	nop

c000a664 <Serial::~Serial()>:
c000a664:	83 ec 0c             	sub    esp,0xc
c000a667:	83 ec 0c             	sub    esp,0xc
c000a66a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a66e:	e8 cd ff ff ff       	call   c000a640 <Serial::~Serial()>
c000a673:	83 c4 10             	add    esp,0x10
c000a676:	83 ec 08             	sub    esp,0x8
c000a679:	68 58 01 00 00       	push   0x158
c000a67e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a682:	e8 81 20 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000a687:	83 c4 10             	add    esp,0x10
c000a68a:	83 c4 0c             	add    esp,0xc
c000a68d:	c3                   	ret    
c000a68e:	66 90                	xchg   ax,ax

c000a690 <Timer::Timer(char const*)>:
c000a690:	83 ec 0c             	sub    esp,0xc
c000a693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a697:	83 ec 08             	sub    esp,0x8
c000a69a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a69e:	50                   	push   eax
c000a69f:	e8 fc ea ff ff       	call   c00091a0 <Device::Device(char const*)>
c000a6a4:	83 c4 10             	add    esp,0x10
c000a6a7:	ba ec 18 02 c0       	mov    edx,0xc00218ec
c000a6ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b0:	89 10                	mov    DWORD PTR [eax],edx
c000a6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6b6:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6c0:	90                   	nop
c000a6c1:	83 c4 0c             	add    esp,0xc
c000a6c4:	c3                   	ret    
c000a6c5:	90                   	nop
c000a6c6:	66 90                	xchg   ax,ax

c000a6c8 <Timer::~Timer()>:
c000a6c8:	83 ec 0c             	sub    esp,0xc
c000a6cb:	ba ec 18 02 c0       	mov    edx,0xc00218ec
c000a6d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6d4:	89 10                	mov    DWORD PTR [eax],edx
c000a6d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6da:	83 ec 0c             	sub    esp,0xc
c000a6dd:	50                   	push   eax
c000a6de:	e8 5d e8 ff ff       	call   c0008f40 <Device::~Device()>
c000a6e3:	83 c4 10             	add    esp,0x10
c000a6e6:	90                   	nop
c000a6e7:	83 c4 0c             	add    esp,0xc
c000a6ea:	c3                   	ret    
c000a6eb:	90                   	nop

c000a6ec <Timer::~Timer()>:
c000a6ec:	83 ec 0c             	sub    esp,0xc
c000a6ef:	83 ec 0c             	sub    esp,0xc
c000a6f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6f6:	e8 cd ff ff ff       	call   c000a6c8 <Timer::~Timer()>
c000a6fb:	83 c4 10             	add    esp,0x10
c000a6fe:	83 ec 08             	sub    esp,0x8
c000a701:	68 5c 01 00 00       	push   0x15c
c000a706:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a70a:	e8 f9 1f 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000a70f:	83 c4 10             	add    esp,0x10
c000a712:	83 c4 0c             	add    esp,0xc
c000a715:	c3                   	ret    

c000a716 <Timer::read()>:
c000a716:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a71a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a720:	c3                   	ret    

c000a721 <setupTimer(int)>:
c000a721:	53                   	push   ebx
c000a722:	83 ec 14             	sub    esp,0x14
c000a725:	68 5c 01 00 00       	push   0x15c
c000a72a:	e8 4c 42 00 00       	call   c000e97b <malloc>
c000a72f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a732:	89 c3                	mov    ebx,eax
c000a734:	e8 db 4b 01 00       	call   c001f314 <PIT::PIT()>
c000a739:	58                   	pop    eax
c000a73a:	5a                   	pop    edx
c000a73b:	53                   	push   ebx
c000a73c:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c000a742:	e8 f7 e8 ff ff       	call   c000903e <Device::addChild(Device*)>
c000a747:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a749:	6a 00                	push   0x0
c000a74b:	6a 00                	push   0x0
c000a74d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a751:	53                   	push   ebx
c000a752:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a755:	89 d8                	mov    eax,ebx
c000a757:	83 c4 28             	add    esp,0x28
c000a75a:	5b                   	pop    ebx
c000a75b:	c3                   	ret    

c000a75c <timerHandler(unsigned int)>:
c000a75c:	57                   	push   edi
c000a75d:	56                   	push   esi
c000a75e:	53                   	push   ebx
c000a75f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000a763:	01 3d ec 97 02 c0    	add    DWORD PTR ds:0xc00297ec,edi
c000a769:	80 3d 75 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d75,0x0
c000a770:	0f 84 46 01 00 00    	je     c000a8bc <timerHandler(unsigned int)+0x160>
c000a776:	fa                   	cli    
c000a777:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a77d:	83 ec 0c             	sub    esp,0xc
c000a780:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000a786:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a78b:	e8 9c 56 01 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a790:	83 c4 10             	add    esp,0x10
c000a793:	84 c0                	test   al,al
c000a795:	0f 85 a1 00 00 00    	jne    c000a83c <timerHandler(unsigned int)+0xe0>
c000a79b:	83 ec 0c             	sub    esp,0xc
c000a79e:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7a3:	e8 a0 56 01 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7a8:	83 c4 10             	add    esp,0x10
c000a7ab:	89 c6                	mov    esi,eax
c000a7ad:	8d 76 00             	lea    esi,[esi+0x0]
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7b8:	e8 8b 56 01 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7bd:	c7 04 24 c0 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6c0
c000a7c4:	89 c3                	mov    ebx,eax
c000a7c6:	e8 85 56 01 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7cb:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7ce:	83 c4 10             	add    esp,0x10
c000a7d1:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c000a7d7:	77 23                	ja     c000a7fc <timerHandler(unsigned int)+0xa0>
c000a7d9:	83 ec 0c             	sub    esp,0xc
c000a7dc:	53                   	push   ebx
c000a7dd:	e8 9e af 00 00       	call   c0015780 <unblockTask(ThreadControlBlock*)>
c000a7e2:	83 c4 10             	add    esp,0x10
c000a7e5:	39 de                	cmp    esi,ebx
c000a7e7:	75 27                	jne    c000a810 <timerHandler(unsigned int)+0xb4>
c000a7e9:	83 ec 0c             	sub    esp,0xc
c000a7ec:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a7f1:	e8 52 56 01 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7f6:	89 c6                	mov    esi,eax
c000a7f8:	eb 12                	jmp    c000a80c <timerHandler(unsigned int)+0xb0>
c000a7fa:	66 90                	xchg   ax,ax
c000a7fc:	50                   	push   eax
c000a7fd:	50                   	push   eax
c000a7fe:	53                   	push   ebx
c000a7ff:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a804:	e8 03 57 01 00       	call   c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a809:	8d 76 00             	lea    esi,[esi+0x0]
c000a80c:	83 c4 10             	add    esp,0x10
c000a80f:	90                   	nop
c000a810:	83 ec 0c             	sub    esp,0xc
c000a813:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a818:	e8 0f 56 01 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a81d:	83 c4 10             	add    esp,0x10
c000a820:	84 c0                	test   al,al
c000a822:	75 18                	jne    c000a83c <timerHandler(unsigned int)+0xe0>
c000a824:	83 ec 0c             	sub    esp,0xc
c000a827:	68 c0 c6 02 c0       	push   0xc002c6c0
c000a82c:	e8 17 56 01 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a831:	83 c4 10             	add    esp,0x10
c000a834:	39 f0                	cmp    eax,esi
c000a836:	0f 85 74 ff ff ff    	jne    c000a7b0 <timerHandler(unsigned int)+0x54>
c000a83c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a841:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000a845:	74 3d                	je     c000a884 <timerHandler(unsigned int)+0x128>
c000a847:	80 3d 74 9d 02 c0 00 	cmp    BYTE PTR ds:0xc0029d74,0x0
c000a84e:	74 34                	je     c000a884 <timerHandler(unsigned int)+0x128>
c000a850:	fa                   	cli    
c000a851:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000a857:	8b 15 ec 97 02 c0    	mov    edx,DWORD PTR ds:0xc00297ec
c000a85d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a862:	29 78 34             	sub    DWORD PTR [eax+0x34],edi
c000a865:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a86a:	39 50 34             	cmp    DWORD PTR [eax+0x34],edx
c000a86d:	77 05                	ja     c000a874 <timerHandler(unsigned int)+0x118>
c000a86f:	e8 14 ac 00 00       	call   c0015488 <schedule()>
c000a874:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000a879:	48                   	dec    eax
c000a87a:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000a87f:	75 03                	jne    c000a884 <timerHandler(unsigned int)+0x128>
c000a881:	fb                   	sti    
c000a882:	66 90                	xchg   ax,ax
c000a884:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000a889:	48                   	dec    eax
c000a88a:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000a88f:	75 1b                	jne    c000a8ac <timerHandler(unsigned int)+0x150>
c000a891:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000a898:	74 12                	je     c000a8ac <timerHandler(unsigned int)+0x150>
c000a89a:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000a8a4:	e8 df ab 00 00       	call   c0015488 <schedule()>
c000a8a9:	8d 76 00             	lea    esi,[esi+0x0]
c000a8ac:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000a8b1:	48                   	dec    eax
c000a8b2:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000a8b7:	75 03                	jne    c000a8bc <timerHandler(unsigned int)+0x160>
c000a8b9:	fb                   	sti    
c000a8ba:	66 90                	xchg   ax,ax
c000a8bc:	5b                   	pop    ebx
c000a8bd:	5e                   	pop    esi
c000a8be:	5f                   	pop    edi
c000a8bf:	c3                   	ret    

c000a8c0 <VCache::VCache(PhysicalDisk*)>:
c000a8c0:	53                   	push   ebx
c000a8c1:	83 ec 18             	sub    esp,0x18
c000a8c4:	ba 1c 19 02 c0       	mov    edx,0xc002191c
c000a8c9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8cd:	89 10                	mov    DWORD PTR [eax],edx
c000a8cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8d3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8de:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8e9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8f0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8fb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a902:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a909:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a90d:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a914:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a918:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a91c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a920:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a927:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a92e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a932:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a936:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a93a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a93e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a942:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a946:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a94a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a951:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a959:	83 ec 0c             	sub    esp,0xc
c000a95c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a960:	e8 16 40 00 00       	call   c000e97b <malloc>
c000a965:	83 c4 10             	add    esp,0x10
c000a968:	89 c3                	mov    ebx,eax
c000a96a:	83 ec 0c             	sub    esp,0xc
c000a96d:	53                   	push   ebx
c000a96e:	e8 45 43 00 00       	call   c000ecb8 <Mutex::Mutex()>
c000a973:	83 c4 10             	add    esp,0x10
c000a976:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a97a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a981:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a985:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a988:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a98c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a993:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a997:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a99d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a1:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a9a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9a8:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a9ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a9b4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a9b8:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a9bb:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a9be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9c2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9c6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9ca:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9d0:	05 00 02 00 00       	add    eax,0x200
c000a9d5:	c1 e0 03             	shl    eax,0x3
c000a9d8:	83 ec 0c             	sub    esp,0xc
c000a9db:	50                   	push   eax
c000a9dc:	e8 9a 3f 00 00       	call   c000e97b <malloc>
c000a9e1:	83 c4 10             	add    esp,0x10
c000a9e4:	89 c2                	mov    edx,eax
c000a9e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ea:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9f1:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a9f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9fc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000aa00:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa04:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000aa0a:	89 d0                	mov    eax,edx
c000aa0c:	c1 e0 02             	shl    eax,0x2
c000aa0f:	01 d0                	add    eax,edx
c000aa11:	c1 e0 04             	shl    eax,0x4
c000aa14:	83 ec 0c             	sub    esp,0xc
c000aa17:	50                   	push   eax
c000aa18:	e8 5e 3f 00 00       	call   c000e97b <malloc>
c000aa1d:	83 c4 10             	add    esp,0x10
c000aa20:	89 c2                	mov    edx,eax
c000aa22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa26:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa29:	90                   	nop
c000aa2a:	83 c4 18             	add    esp,0x18
c000aa2d:	5b                   	pop    ebx
c000aa2e:	c3                   	ret    
c000aa2f:	90                   	nop

c000aa30 <VCache::invalidateReadBuffer()>:
c000aa30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa34:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa3a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa3e:	c3                   	ret    
c000aa3f:	90                   	nop

c000aa40 <VCache::writeWriteBuffer()>:
c000aa40:	53                   	push   ebx
c000aa41:	83 ec 08             	sub    esp,0x8
c000aa44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa48:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa4c:	74 1e                	je     c000aa6c <VCache::writeWriteBuffer()+0x2c>
c000aa4e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa51:	83 ec 0c             	sub    esp,0xc
c000aa54:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa56:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa59:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa5c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa5f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa62:	50                   	push   eax
c000aa63:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa66:	83 c4 20             	add    esp,0x20
c000aa69:	8d 76 00             	lea    esi,[esi+0x0]
c000aa6c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa73:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa7a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa7e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa85:	83 c4 08             	add    esp,0x8
c000aa88:	5b                   	pop    ebx
c000aa89:	c3                   	ret    
c000aa8a:	66 90                	xchg   ax,ax

c000aa8c <VCache::~VCache()>:
c000aa8c:	83 ec 0c             	sub    esp,0xc
c000aa8f:	ba 1c 19 02 c0       	mov    edx,0xc002191c
c000aa94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa98:	89 10                	mov    DWORD PTR [eax],edx
c000aa9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aaa1:	0f b6 c0             	movzx  eax,al
c000aaa4:	85 c0                	test   eax,eax
c000aaa6:	74 10                	je     c000aab8 <VCache::~VCache()+0x2c>
c000aaa8:	83 ec 0c             	sub    esp,0xc
c000aaab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaaf:	e8 8c ff ff ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c000aab4:	83 c4 10             	add    esp,0x10
c000aab7:	90                   	nop
c000aab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aabc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aabf:	83 ec 0c             	sub    esp,0xc
c000aac2:	50                   	push   eax
c000aac3:	e8 c3 3e 00 00       	call   c000e98b <free>
c000aac8:	83 c4 10             	add    esp,0x10
c000aacb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aacf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aad2:	83 ec 0c             	sub    esp,0xc
c000aad5:	50                   	push   eax
c000aad6:	e8 b0 3e 00 00       	call   c000e98b <free>
c000aadb:	83 c4 10             	add    esp,0x10
c000aade:	90                   	nop
c000aadf:	83 c4 0c             	add    esp,0xc
c000aae2:	c3                   	ret    
c000aae3:	90                   	nop

c000aae4 <VCache::~VCache()>:
c000aae4:	83 ec 0c             	sub    esp,0xc
c000aae7:	83 ec 0c             	sub    esp,0xc
c000aaea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaee:	e8 99 ff ff ff       	call   c000aa8c <VCache::~VCache()>
c000aaf3:	83 c4 10             	add    esp,0x10
c000aaf6:	83 ec 08             	sub    esp,0x8
c000aaf9:	6a 44                	push   0x44
c000aafb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aaff:	e8 04 1c 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000ab04:	83 c4 10             	add    esp,0x10
c000ab07:	83 c4 0c             	add    esp,0xc
c000ab0a:	c3                   	ret    
c000ab0b:	90                   	nop

c000ab0c <VCache::write(unsigned long long, int, void*)>:
c000ab0c:	55                   	push   ebp
c000ab0d:	57                   	push   edi
c000ab0e:	56                   	push   esi
c000ab0f:	53                   	push   ebx
c000ab10:	83 ec 1c             	sub    esp,0x1c
c000ab13:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ab17:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ab1b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab1f:	e8 cc a6 00 00       	call   c00151f0 <KeDisablePreemption()>
c000ab24:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ab28:	74 0e                	je     c000ab38 <VCache::write(unsigned long long, int, void*)+0x2c>
c000ab2a:	83 ec 0c             	sub    esp,0xc
c000ab2d:	53                   	push   ebx
c000ab2e:	e8 fd fe ff ff       	call   c000aa30 <VCache::invalidateReadBuffer()>
c000ab33:	83 c4 10             	add    esp,0x10
c000ab36:	66 90                	xchg   ax,ax
c000ab38:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ab3c:	74 5e                	je     c000ab9c <VCache::write(unsigned long long, int, void*)+0x90>
c000ab3e:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000ab41:	89 e8                	mov    eax,ebp
c000ab43:	99                   	cdq    
c000ab44:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000ab47:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000ab4a:	89 c1                	mov    ecx,eax
c000ab4c:	89 d0                	mov    eax,edx
c000ab4e:	31 f1                	xor    ecx,esi
c000ab50:	31 f8                	xor    eax,edi
c000ab52:	09 c1                	or     ecx,eax
c000ab54:	75 3a                	jne    c000ab90 <VCache::write(unsigned long long, int, void*)+0x84>
c000ab56:	83 7c 24 3c 01       	cmp    DWORD PTR [esp+0x3c],0x1
c000ab5b:	75 33                	jne    c000ab90 <VCache::write(unsigned long long, int, void*)+0x84>
c000ab5d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab60:	89 ef                	mov    edi,ebp
c000ab62:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ab68:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ab6c:	0f af f9             	imul   edi,ecx
c000ab6f:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000ab72:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ab74:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000ab77:	40                   	inc    eax
c000ab78:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000ab7b:	83 f8 50             	cmp    eax,0x50
c000ab7e:	75 70                	jne    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000ab80:	83 ec 0c             	sub    esp,0xc
c000ab83:	53                   	push   ebx
c000ab84:	e8 b7 fe ff ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c000ab89:	83 c4 10             	add    esp,0x10
c000ab8c:	eb 62                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000ab8e:	66 90                	xchg   ax,ax
c000ab90:	83 ec 0c             	sub    esp,0xc
c000ab93:	53                   	push   ebx
c000ab94:	e8 a7 fe ff ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c000ab99:	83 c4 10             	add    esp,0x10
c000ab9c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ab9f:	83 7c 24 3c 4f       	cmp    DWORD PTR [esp+0x3c],0x4f
c000aba4:	7f 22                	jg     c000abc8 <VCache::write(unsigned long long, int, void*)+0xbc>
c000aba6:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000aba9:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000abac:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000abb0:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000abb4:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000abb7:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000abba:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000abc0:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abc4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abc6:	eb 28                	jmp    c000abf0 <VCache::write(unsigned long long, int, void*)+0xe4>
c000abc8:	83 ec 0c             	sub    esp,0xc
c000abcb:	8b 10                	mov    edx,DWORD PTR [eax]
c000abcd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000abd5:	57                   	push   edi
c000abd6:	56                   	push   esi
c000abd7:	50                   	push   eax
c000abd8:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000abdb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000abdf:	83 c4 20             	add    esp,0x20
c000abe2:	e8 31 a6 00 00       	call   c0015218 <KeRestorePreemption()>
c000abe7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000abeb:	eb 0b                	jmp    c000abf8 <VCache::write(unsigned long long, int, void*)+0xec>
c000abed:	8d 76 00             	lea    esi,[esi+0x0]
c000abf0:	e8 23 a6 00 00       	call   c0015218 <KeRestorePreemption()>
c000abf5:	31 c0                	xor    eax,eax
c000abf7:	90                   	nop
c000abf8:	83 c4 1c             	add    esp,0x1c
c000abfb:	5b                   	pop    ebx
c000abfc:	5e                   	pop    esi
c000abfd:	5f                   	pop    edi
c000abfe:	5d                   	pop    ebp
c000abff:	c3                   	ret    

c000ac00 <VCache::read(unsigned long long, int, void*)>:
c000ac00:	55                   	push   ebp
c000ac01:	57                   	push   edi
c000ac02:	56                   	push   esi
c000ac03:	53                   	push   ebx
c000ac04:	83 ec 1c             	sub    esp,0x1c
c000ac07:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000ac0b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000ac0f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ac13:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000ac17:	e8 d4 a5 00 00       	call   c00151f0 <KeDisablePreemption()>
c000ac1c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ac20:	74 0e                	je     c000ac30 <VCache::read(unsigned long long, int, void*)+0x30>
c000ac22:	83 ec 0c             	sub    esp,0xc
c000ac25:	53                   	push   ebx
c000ac26:	e8 15 fe ff ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c000ac2b:	83 c4 10             	add    esp,0x10
c000ac2e:	66 90                	xchg   ax,ax
c000ac30:	83 fd 01             	cmp    ebp,0x1
c000ac33:	0f 85 97 00 00 00    	jne    c000acd0 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac39:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac3c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ac40:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000ac47:	0f 85 83 00 00 00    	jne    c000acd0 <VCache::read(unsigned long long, int, void*)+0xd0>
c000ac4d:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000ac50:	89 e9                	mov    ecx,ebp
c000ac52:	f7 d9                	neg    ecx
c000ac54:	89 c8                	mov    eax,ecx
c000ac56:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000ac5a:	c1 f8 1f             	sar    eax,0x1f
c000ac5d:	21 f1                	and    ecx,esi
c000ac5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ac63:	89 c8                	mov    eax,ecx
c000ac65:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ac69:	21 f9                	and    ecx,edi
c000ac6b:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ac6f:	89 ca                	mov    edx,ecx
c000ac71:	74 31                	je     c000aca4 <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac73:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000ac76:	75 2c                	jne    c000aca4 <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac78:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000ac7b:	75 27                	jne    c000aca4 <VCache::read(unsigned long long, int, void*)+0xa4>
c000ac7d:	8d 76 00             	lea    esi,[esi+0x0]
c000ac80:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ac83:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ac87:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac8d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ac90:	48                   	dec    eax
c000ac91:	21 c6                	and    esi,eax
c000ac93:	0f af f1             	imul   esi,ecx
c000ac96:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ac99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac9b:	e8 78 a5 00 00       	call   c0015218 <KeRestorePreemption()>
c000aca0:	31 c0                	xor    eax,eax
c000aca2:	eb 58                	jmp    c000acfc <VCache::read(unsigned long long, int, void*)+0xfc>
c000aca4:	83 ec 0c             	sub    esp,0xc
c000aca7:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000acab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000acaf:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000acb2:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000acb5:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000acb7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000acba:	55                   	push   ebp
c000acbb:	52                   	push   edx
c000acbc:	50                   	push   eax
c000acbd:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000acc1:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000acc4:	83 c4 20             	add    esp,0x20
c000acc7:	85 c0                	test   eax,eax
c000acc9:	75 31                	jne    c000acfc <VCache::read(unsigned long long, int, void*)+0xfc>
c000accb:	eb b3                	jmp    c000ac80 <VCache::read(unsigned long long, int, void*)+0x80>
c000accd:	8d 76 00             	lea    esi,[esi+0x0]
c000acd0:	83 ec 0c             	sub    esp,0xc
c000acd3:	53                   	push   ebx
c000acd4:	e8 57 fd ff ff       	call   c000aa30 <VCache::invalidateReadBuffer()>
c000acd9:	5a                   	pop    edx
c000acda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000acdd:	8b 10                	mov    edx,DWORD PTR [eax]
c000acdf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ace3:	55                   	push   ebp
c000ace4:	57                   	push   edi
c000ace5:	56                   	push   esi
c000ace6:	50                   	push   eax
c000ace7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000acea:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000acee:	83 c4 20             	add    esp,0x20
c000acf1:	e8 22 a5 00 00       	call   c0015218 <KeRestorePreemption()>
c000acf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000acfa:	66 90                	xchg   ax,ax
c000acfc:	83 c4 1c             	add    esp,0x1c
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	5f                   	pop    edi
c000ad02:	5d                   	pop    ebp
c000ad03:	c3                   	ret    

c000ad04 <Video::putrect(int, int, int, int, unsigned int)>:
c000ad04:	55                   	push   ebp
c000ad05:	57                   	push   edi
c000ad06:	56                   	push   esi
c000ad07:	53                   	push   ebx
c000ad08:	83 ec 1c             	sub    esp,0x1c
c000ad0b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000ad0f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ad13:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000ad17:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000ad1b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000ad1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ad23:	01 df                	add    edi,ebx
c000ad25:	39 fb                	cmp    ebx,edi
c000ad27:	7d 1f                	jge    c000ad48 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000ad29:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000ad2d:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000ad31:	7d 12                	jge    c000ad45 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000ad33:	8b 16                	mov    edx,DWORD PTR [esi]
c000ad35:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ad39:	53                   	push   ebx
c000ad3a:	55                   	push   ebp
c000ad3b:	45                   	inc    ebp
c000ad3c:	56                   	push   esi
c000ad3d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000ad40:	83 c4 10             	add    esp,0x10
c000ad43:	eb e8                	jmp    c000ad2d <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000ad45:	43                   	inc    ebx
c000ad46:	eb dd                	jmp    c000ad25 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000ad48:	83 c4 1c             	add    esp,0x1c
c000ad4b:	5b                   	pop    ebx
c000ad4c:	5e                   	pop    esi
c000ad4d:	5f                   	pop    edi
c000ad4e:	5d                   	pop    ebp
c000ad4f:	c3                   	ret    

c000ad50 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	31 ff                	xor    edi,edi
c000ad54:	56                   	push   esi
c000ad55:	53                   	push   ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000ad5d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000ad61:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000ad68:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000ad6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ad71:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000ad75:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ad79:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000ad7c:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ad80:	01 f9                	add    ecx,edi
c000ad82:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000ad86:	7d 2f                	jge    c000adb7 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000ad88:	31 f6                	xor    esi,esi
c000ad8a:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000ad8e:	01 f2                	add    edx,esi
c000ad90:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ad94:	7d 1a                	jge    c000adb0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000ad96:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ad99:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000ad9c:	46                   	inc    esi
c000ad9d:	51                   	push   ecx
c000ad9e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ada2:	52                   	push   edx
c000ada3:	55                   	push   ebp
c000ada4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ada7:	83 c4 10             	add    esp,0x10
c000adaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000adae:	eb da                	jmp    c000ad8a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000adb0:	47                   	inc    edi
c000adb1:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000adb5:	eb c5                	jmp    c000ad7c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000adb7:	83 c4 1c             	add    esp,0x1c
c000adba:	5b                   	pop    ebx
c000adbb:	5e                   	pop    esi
c000adbc:	5f                   	pop    edi
c000adbd:	5d                   	pop    ebp
c000adbe:	c3                   	ret    
c000adbf:	90                   	nop

c000adc0 <Video::blit(unsigned int*, int, int, int, int)>:
c000adc0:	55                   	push   ebp
c000adc1:	57                   	push   edi
c000adc2:	56                   	push   esi
c000adc3:	53                   	push   ebx
c000adc4:	83 ec 1c             	sub    esp,0x1c
c000adc7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000adcb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000adcf:	85 c0                	test   eax,eax
c000add1:	79 02                	jns    c000add5 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000add3:	31 c0                	xor    eax,eax
c000add5:	c1 e0 02             	shl    eax,0x2
c000add8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000addc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ade0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ade4:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000ade8:	39 d8                	cmp    eax,ebx
c000adea:	7e 49                	jle    c000ae35 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000adec:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000adf2:	7c 41                	jl     c000ae35 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000adf4:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000adf8:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000adfc:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000ae00:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000ae04:	39 f9                	cmp    ecx,edi
c000ae06:	7e 22                	jle    c000ae2a <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000ae08:	83 c5 04             	add    ebp,0x4
c000ae0b:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae11:	7c 14                	jl     c000ae27 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000ae13:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000ae15:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000ae18:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae1c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000ae20:	56                   	push   esi
c000ae21:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000ae24:	83 c4 10             	add    esp,0x10
c000ae27:	47                   	inc    edi
c000ae28:	eb d2                	jmp    c000adfc <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000ae2a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ae2e:	43                   	inc    ebx
c000ae2f:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ae33:	eb ab                	jmp    c000ade0 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000ae35:	83 c4 1c             	add    esp,0x1c
c000ae38:	5b                   	pop    ebx
c000ae39:	5e                   	pop    esi
c000ae3a:	5f                   	pop    edi
c000ae3b:	5d                   	pop    ebp
c000ae3c:	c3                   	ret    
c000ae3d:	90                   	nop

c000ae3e <Video::clearScreen(unsigned int)>:
c000ae3e:	57                   	push   edi
c000ae3f:	56                   	push   esi
c000ae40:	53                   	push   ebx
c000ae41:	31 db                	xor    ebx,ebx
c000ae43:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae47:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000ae4d:	7e 1f                	jle    c000ae6e <Video::clearScreen(unsigned int)+0x30>
c000ae4f:	31 ff                	xor    edi,edi
c000ae51:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000ae57:	7e 12                	jle    c000ae6b <Video::clearScreen(unsigned int)+0x2d>
c000ae59:	8b 06                	mov    eax,DWORD PTR [esi]
c000ae5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5f:	53                   	push   ebx
c000ae60:	57                   	push   edi
c000ae61:	47                   	inc    edi
c000ae62:	56                   	push   esi
c000ae63:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae66:	83 c4 10             	add    esp,0x10
c000ae69:	eb e6                	jmp    c000ae51 <Video::clearScreen(unsigned int)+0x13>
c000ae6b:	43                   	inc    ebx
c000ae6c:	eb d9                	jmp    c000ae47 <Video::clearScreen(unsigned int)+0x9>
c000ae6e:	5b                   	pop    ebx
c000ae6f:	5e                   	pop    esi
c000ae70:	5f                   	pop    edi
c000ae71:	c3                   	ret    

c000ae72 <Video::putpixel(int, int, unsigned int)>:
c000ae72:	c7 44 24 04 24 19 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021924
c000ae7a:	e9 53 3e 00 00       	jmp    c000ecd2 <KePanic(char const*)>
c000ae7f:	90                   	nop

c000ae80 <Video::readPixelApprox(int, int)>:
c000ae80:	83 ec 18             	sub    esp,0x18
c000ae83:	68 45 19 02 c0       	push   0xc0021945
c000ae88:	e8 45 3e 00 00       	call   c000ecd2 <KePanic(char const*)>
c000ae8d:	31 c0                	xor    eax,eax
c000ae8f:	83 c4 1c             	add    esp,0x1c
c000ae92:	c3                   	ret    
c000ae93:	90                   	nop

c000ae94 <Video::Video(char const*)>:
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae9b:	83 ec 08             	sub    esp,0x8
c000ae9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aea2:	50                   	push   eax
c000aea3:	e8 f8 e2 ff ff       	call   c00091a0 <Device::Device(char const*)>
c000aea8:	83 c4 10             	add    esp,0x10
c000aeab:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000aeb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeb4:	89 10                	mov    DWORD PTR [eax],edx
c000aeb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aeba:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000aec4:	90                   	nop
c000aec5:	83 c4 0c             	add    esp,0xc
c000aec8:	c3                   	ret    
c000aec9:	90                   	nop

c000aeca <Video::~Video()>:
c000aeca:	83 ec 0c             	sub    esp,0xc
c000aecd:	ba e8 19 02 c0       	mov    edx,0xc00219e8
c000aed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aed6:	89 10                	mov    DWORD PTR [eax],edx
c000aed8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aedc:	83 ec 0c             	sub    esp,0xc
c000aedf:	50                   	push   eax
c000aee0:	e8 5b e0 ff ff       	call   c0008f40 <Device::~Device()>
c000aee5:	83 c4 10             	add    esp,0x10
c000aee8:	90                   	nop
c000aee9:	83 c4 0c             	add    esp,0xc
c000aeec:	c3                   	ret    
c000aeed:	90                   	nop

c000aeee <Video::~Video()>:
c000aeee:	83 ec 0c             	sub    esp,0xc
c000aef1:	83 ec 0c             	sub    esp,0xc
c000aef4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aef8:	e8 cd ff ff ff       	call   c000aeca <Video::~Video()>
c000aefd:	83 c4 10             	add    esp,0x10
c000af00:	83 ec 08             	sub    esp,0x8
c000af03:	68 64 01 00 00       	push   0x164
c000af08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af0c:	e8 f7 17 00 00       	call   c000c708 <operator delete(void*, unsigned long)>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	83 c4 0c             	add    esp,0xc
c000af17:	c3                   	ret    

c000af18 <Video::isMonochrome()>:
c000af18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af1c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000af22:	c3                   	ret    
c000af23:	90                   	nop

c000af24 <Video::getWidth()>:
c000af24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af28:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000af2e:	c3                   	ret    
c000af2f:	90                   	nop

c000af30 <Video::getHeight()>:
c000af30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000af34:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000af3a:	c3                   	ret    
c000af3b:	90                   	nop

c000af3c <Video::drawCursor(int, int, unsigned int*, int)>:
c000af3c:	55                   	push   ebp
c000af3d:	57                   	push   edi
c000af3e:	56                   	push   esi
c000af3f:	53                   	push   ebx
c000af40:	83 ec 2c             	sub    esp,0x2c
c000af43:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af47:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000af4b:	83 f8 01             	cmp    eax,0x1
c000af4e:	19 c9                	sbb    ecx,ecx
c000af50:	31 db                	xor    ebx,ebx
c000af52:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000af56:	89 cd                	mov    ebp,ecx
c000af58:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000af60:	f7 d5                	not    ebp
c000af62:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000af68:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000af6c:	01 d8                	add    eax,ebx
c000af6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af72:	56                   	push   esi
c000af73:	e8 b8 ff ff ff       	call   c000af30 <Video::getHeight()>
c000af78:	59                   	pop    ecx
c000af79:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000af7d:	7e 70                	jle    c000afef <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000af7f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af83:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000af87:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000af8a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000af8e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000af92:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000af99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af9d:	89 f8                	mov    eax,edi
c000af9f:	83 c0 20             	add    eax,0x20
c000afa2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000afa6:	56                   	push   esi
c000afa7:	e8 78 ff ff ff       	call   c000af24 <Video::getWidth()>
c000afac:	5a                   	pop    edx
c000afad:	39 c7                	cmp    edi,eax
c000afaf:	7d 34                	jge    c000afe5 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000afb1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000afb6:	74 05                	je     c000afbd <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000afb8:	8b 06                	mov    eax,DWORD PTR [esi]
c000afba:	55                   	push   ebp
c000afbb:	eb 0d                	jmp    c000afca <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000afbd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000afc2:	74 12                	je     c000afd6 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000afc4:	8b 06                	mov    eax,DWORD PTR [esi]
c000afc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000afca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000afce:	57                   	push   edi
c000afcf:	56                   	push   esi
c000afd0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000afd3:	83 c4 10             	add    esp,0x10
c000afd6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000afda:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000afde:	47                   	inc    edi
c000afdf:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000afe3:	75 c1                	jne    c000afa6 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000afe5:	43                   	inc    ebx
c000afe6:	83 fb 20             	cmp    ebx,0x20
c000afe9:	0f 85 79 ff ff ff    	jne    c000af68 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000afef:	83 c4 2c             	add    esp,0x2c
c000aff2:	5b                   	pop    ebx
c000aff3:	5e                   	pop    esi
c000aff4:	5f                   	pop    edi
c000aff5:	5d                   	pop    ebp
c000aff6:	c3                   	ret    
c000aff7:	90                   	nop

c000aff8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000aff8:	55                   	push   ebp
c000aff9:	57                   	push   edi
c000affa:	56                   	push   esi
c000affb:	53                   	push   ebx
c000affc:	83 ec 48             	sub    esp,0x48
c000afff:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b003:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b007:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b00b:	c1 e0 08             	shl    eax,0x8
c000b00e:	01 d0                	add    eax,edx
c000b010:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b014:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b018:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b01c:	c1 e0 08             	shl    eax,0x8
c000b01f:	01 d0                	add    eax,edx
c000b021:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b025:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b029:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000b02e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b032:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b036:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b03d:	50                   	push   eax
c000b03e:	e8 38 39 00 00       	call   c000e97b <malloc>
c000b043:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b047:	83 c4 10             	add    esp,0x10
c000b04a:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b04f:	75 10                	jne    c000b061 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000b051:	83 ec 0c             	sub    esp,0xc
c000b054:	68 70 19 02 c0       	push   0xc0021970
c000b059:	e8 74 3c 00 00       	call   c000ecd2 <KePanic(char const*)>
c000b05e:	83 c4 10             	add    esp,0x10
c000b061:	51                   	push   ecx
c000b062:	51                   	push   ecx
c000b063:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b067:	50                   	push   eax
c000b068:	68 80 19 02 c0       	push   0xc0021980
c000b06d:	e8 f2 be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b072:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b075:	83 e0 20             	and    eax,0x20
c000b078:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000b07c:	85 c0                	test   eax,eax
c000b07e:	5e                   	pop    esi
c000b07f:	0f 94 c0             	sete   al
c000b082:	5f                   	pop    edi
c000b083:	0f b6 c0             	movzx  eax,al
c000b086:	be 12 00 00 00       	mov    esi,0x12
c000b08b:	50                   	push   eax
c000b08c:	68 8a 19 02 c0       	push   0xc002198a
c000b091:	e8 ce be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b096:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000b09a:	83 c4 10             	add    esp,0x10
c000b09d:	89 d0                	mov    eax,edx
c000b09f:	85 d2                	test   edx,edx
c000b0a1:	74 11                	je     c000b0b4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000b0a3:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000b0a7:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b0ab:	c1 fe 03             	sar    esi,0x3
c000b0ae:	0f af f1             	imul   esi,ecx
c000b0b1:	83 c6 12             	add    esi,0x12
c000b0b4:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b0b9:	74 07                	je     c000b0c2 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000b0bb:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b0c0:	75 12                	jne    c000b0d4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000b0c2:	83 ec 0c             	sub    esp,0xc
c000b0c5:	68 98 19 02 c0       	push   0xc0021998
c000b0ca:	e8 95 be ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b0cf:	e9 a0 02 00 00       	jmp    c000b374 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000b0d4:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b0d8:	83 f9 02             	cmp    ecx,0x2
c000b0db:	74 0e                	je     c000b0eb <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000b0dd:	83 f9 0a             	cmp    ecx,0xa
c000b0e0:	0f 84 c8 00 00 00    	je     c000b1ae <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000b0e6:	e9 72 02 00 00       	jmp    c000b35d <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000b0eb:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b0f0:	75 0e                	jne    c000b100 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b0f2:	84 c0                	test   al,al
c000b0f4:	75 0a                	jne    c000b100 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b0f6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b0f9:	83 e8 18             	sub    eax,0x18
c000b0fc:	a8 f7                	test   al,0xf7
c000b0fe:	74 0d                	je     c000b10d <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000b100:	83 ec 0c             	sub    esp,0xc
c000b103:	68 ad 19 02 c0       	push   0xc00219ad
c000b108:	e9 58 02 00 00       	jmp    c000b365 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b10d:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000b112:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b11a:	31 c0                	xor    eax,eax
c000b11c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b120:	89 c7                	mov    edi,eax
c000b122:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b12a:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b12f:	75 15                	jne    c000b146 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b131:	99                   	cdq    
c000b132:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b136:	85 d2                	test   edx,edx
c000b138:	75 0c                	jne    c000b146 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b13a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000b13e:	29 c7                	sub    edi,eax
c000b140:	4f                   	dec    edi
c000b141:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000b146:	31 d2                	xor    edx,edx
c000b148:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b14c:	75 08                	jne    c000b156 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000b14e:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000b153:	c1 e2 18             	shl    edx,0x18
c000b156:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000b15b:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b15f:	c1 e1 10             	shl    ecx,0x10
c000b162:	8d 47 01             	lea    eax,[edi+0x1]
c000b165:	89 cd                	mov    ebp,ecx
c000b167:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000b16c:	c1 e1 08             	shl    ecx,0x8
c000b16f:	09 e9                	or     ecx,ebp
c000b171:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b175:	09 e9                	or     ecx,ebp
c000b177:	09 d1                	or     ecx,edx
c000b179:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b17d:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000b180:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b184:	c1 fa 03             	sar    edx,0x3
c000b187:	01 d6                	add    esi,edx
c000b189:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b18d:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b191:	7e 04                	jle    c000b197 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000b193:	89 c7                	mov    edi,eax
c000b195:	eb 93                	jmp    c000b12a <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000b197:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b19b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b19f:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000b1a3:	0f 8f 77 ff ff ff    	jg     c000b120 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000b1a9:	e9 d3 01 00 00       	jmp    c000b381 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1ae:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b1b3:	75 0e                	jne    c000b1c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b1b5:	85 d2                	test   edx,edx
c000b1b7:	75 0a                	jne    c000b1c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b1b9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b1bc:	83 e8 18             	sub    eax,0x18
c000b1bf:	a8 f7                	test   al,0xf7
c000b1c1:	74 0d                	je     c000b1d0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000b1c3:	83 ec 0c             	sub    esp,0xc
c000b1c6:	68 bb 19 02 c0       	push   0xc00219bb
c000b1cb:	e9 95 01 00 00       	jmp    c000b365 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b1d0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b1d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b1e0:	31 c9                	xor    ecx,ecx
c000b1e2:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b1e6:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000b1ea:	0f 8e 91 01 00 00    	jle    c000b381 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1f0:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000b1f4:	0f 8d 87 01 00 00    	jge    c000b381 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b1fa:	8d 46 01             	lea    eax,[esi+0x1]
c000b1fd:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b201:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b205:	83 fd 7f             	cmp    ebp,0x7f
c000b208:	89 e8                	mov    eax,ebp
c000b20a:	0f 8e 9d 00 00 00    	jle    c000b2ad <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000b210:	83 e0 7f             	and    eax,0x7f
c000b213:	31 d2                	xor    edx,edx
c000b215:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b219:	40                   	inc    eax
c000b21a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b21e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b222:	75 0a                	jne    c000b22e <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000b224:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000b229:	89 ea                	mov    edx,ebp
c000b22b:	c1 e2 18             	shl    edx,0x18
c000b22e:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000b233:	c1 e0 10             	shl    eax,0x10
c000b236:	89 c7                	mov    edi,eax
c000b238:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b23d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b241:	c1 e0 08             	shl    eax,0x8
c000b244:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b248:	09 f8                	or     eax,edi
c000b24a:	31 f6                	xor    esi,esi
c000b24c:	09 c5                	or     ebp,eax
c000b24e:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000b253:	09 d5                	or     ebp,edx
c000b255:	85 ff                	test   edi,edi
c000b257:	75 1d                	jne    c000b276 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b259:	89 c8                	mov    eax,ecx
c000b25b:	99                   	cdq    
c000b25c:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b260:	85 d2                	test   edx,edx
c000b262:	75 12                	jne    c000b276 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b264:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b268:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b26c:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b270:	49                   	dec    ecx
c000b271:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b27a:	8d 51 01             	lea    edx,[ecx+0x1]
c000b27d:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000b280:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000b284:	8d 46 01             	lea    eax,[esi+0x1]
c000b287:	7e 06                	jle    c000b28f <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000b289:	89 c6                	mov    esi,eax
c000b28b:	89 d1                	mov    ecx,edx
c000b28d:	eb c6                	jmp    c000b255 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000b28f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b293:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b297:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b29b:	c1 f8 03             	sar    eax,0x3
c000b29e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b2a2:	89 d1                	mov    ecx,edx
c000b2a4:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b2a8:	e9 35 ff ff ff       	jmp    c000b1e2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000b2ad:	8d 45 01             	lea    eax,[ebp+0x1]
c000b2b0:	31 f6                	xor    esi,esi
c000b2b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2b6:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000b2bb:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b2bf:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b2c4:	75 1d                	jne    c000b2e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b2c6:	89 c8                	mov    eax,ecx
c000b2c8:	99                   	cdq    
c000b2c9:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b2cd:	85 d2                	test   edx,edx
c000b2cf:	75 12                	jne    c000b2e3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b2d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2d5:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b2d9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b2dd:	49                   	dec    ecx
c000b2de:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b2e3:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b2eb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b2ef:	75 10                	jne    c000b301 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000b2f1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b2f5:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000b2fa:	c1 e7 18             	shl    edi,0x18
c000b2fd:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b301:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b305:	8d 51 01             	lea    edx,[ecx+0x1]
c000b308:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000b30d:	c1 e0 10             	shl    eax,0x10
c000b310:	89 c7                	mov    edi,eax
c000b312:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b316:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000b31b:	c1 e0 08             	shl    eax,0x8
c000b31e:	09 f8                	or     eax,edi
c000b320:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b324:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000b328:	09 f8                	or     eax,edi
c000b32a:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000b32e:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b332:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000b335:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b339:	c1 f8 03             	sar    eax,0x3
c000b33c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b340:	8d 46 01             	lea    eax,[esi+0x1]
c000b343:	39 f5                	cmp    ebp,esi
c000b345:	7e 09                	jle    c000b350 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000b347:	89 c6                	mov    esi,eax
c000b349:	89 d1                	mov    ecx,edx
c000b34b:	e9 6f ff ff ff       	jmp    c000b2bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000b350:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b354:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b358:	e9 45 ff ff ff       	jmp    c000b2a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000b35d:	52                   	push   edx
c000b35e:	52                   	push   edx
c000b35f:	51                   	push   ecx
c000b360:	68 ca 19 02 c0       	push   0xc00219ca
c000b365:	e8 fa bb ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b36a:	58                   	pop    eax
c000b36b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b36f:	e8 17 36 00 00       	call   c000e98b <free>
c000b374:	83 c4 10             	add    esp,0x10
c000b377:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b37f:	eb 14                	jmp    c000b395 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000b381:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b385:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b389:	89 18                	mov    DWORD PTR [eax],ebx
c000b38b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b38f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b393:	89 18                	mov    DWORD PTR [eax],ebx
c000b395:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b399:	83 c4 3c             	add    esp,0x3c
c000b39c:	5b                   	pop    ebx
c000b39d:	5e                   	pop    esi
c000b39e:	5f                   	pop    edi
c000b39f:	5d                   	pop    ebp
c000b3a0:	c3                   	ret    
c000b3a1:	90                   	nop

c000b3a2 <Video::putTGA(int, int, unsigned char*, int)>:
c000b3a2:	55                   	push   ebp
c000b3a3:	57                   	push   edi
c000b3a4:	56                   	push   esi
c000b3a5:	53                   	push   ebx
c000b3a6:	83 ec 28             	sub    esp,0x28
c000b3a9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b3ad:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3b1:	50                   	push   eax
c000b3b2:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b3b6:	50                   	push   eax
c000b3b7:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3bb:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b3bf:	57                   	push   edi
c000b3c0:	e8 33 fc ff ff       	call   c000aff8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b3c5:	83 c4 20             	add    esp,0x20
c000b3c8:	85 c0                	test   eax,eax
c000b3ca:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b3ce:	74 3a                	je     c000b40a <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b3d0:	89 c6                	mov    esi,eax
c000b3d2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b3d6:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b3da:	39 d8                	cmp    eax,ebx
c000b3dc:	7e 2c                	jle    c000b40a <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b3de:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b3e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b3e6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b3ea:	39 e8                	cmp    eax,ebp
c000b3ec:	7e 19                	jle    c000b407 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000b3ee:	83 c6 04             	add    esi,0x4
c000b3f1:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b3f4:	85 c0                	test   eax,eax
c000b3f6:	79 0c                	jns    c000b404 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000b3f8:	8b 17                	mov    edx,DWORD PTR [edi]
c000b3fa:	50                   	push   eax
c000b3fb:	53                   	push   ebx
c000b3fc:	55                   	push   ebp
c000b3fd:	57                   	push   edi
c000b3fe:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b401:	83 c4 10             	add    esp,0x10
c000b404:	45                   	inc    ebp
c000b405:	eb db                	jmp    c000b3e2 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b407:	43                   	inc    ebx
c000b408:	eb c8                	jmp    c000b3d2 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b40a:	83 c4 1c             	add    esp,0x1c
c000b40d:	5b                   	pop    ebx
c000b40e:	5e                   	pop    esi
c000b40f:	5f                   	pop    edi
c000b410:	5d                   	pop    ebp
c000b411:	c3                   	ret    
c000b412:	66 90                	xchg   ax,ax

c000b414 <ACPI::close(int, int, void*)>:
c000b414:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b419:	c3                   	ret    
c000b41a:	66 90                	xchg   ax,ax

c000b41c <loadACPITables(unsigned char*)>:
c000b41c:	57                   	push   edi
c000b41d:	56                   	push   esi
c000b41e:	53                   	push   ebx
c000b41f:	83 ec 60             	sub    esp,0x60
c000b422:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b427:	0f 84 43 02 00 00    	je     c000b670 <loadACPITables(unsigned char*)+0x254>
c000b42d:	a0 20 9a 02 c0       	mov    al,ds:0xc0029a20
c000b432:	0f b6 c0             	movzx  eax,al
c000b435:	85 c0                	test   eax,eax
c000b437:	74 7b                	je     c000b4b4 <loadACPITables(unsigned char*)+0x98>
c000b439:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b43d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b441:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b445:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b448:	83 e8 24             	sub    eax,0x24
c000b44b:	c1 e8 03             	shr    eax,0x3
c000b44e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b452:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b45a:	66 90                	xchg   ax,ax
c000b45c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b460:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b464:	0f 8d ba 00 00 00    	jge    c000b524 <loadACPITables(unsigned char*)+0x108>
c000b46a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b46e:	83 c0 24             	add    eax,0x24
c000b471:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b475:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b479:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b47d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b481:	c1 e0 03             	shl    eax,0x3
c000b484:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b488:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b48c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b48f:	8b 00                	mov    eax,DWORD PTR [eax]
c000b491:	89 c1                	mov    ecx,eax
c000b493:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b498:	8d 50 01             	lea    edx,[eax+0x1]
c000b49b:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b4a1:	89 ca                	mov    edx,ecx
c000b4a3:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b4aa:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b4af:	eb ab                	jmp    c000b45c <loadACPITables(unsigned char*)+0x40>
c000b4b1:	8d 76 00             	lea    esi,[esi+0x0]
c000b4b4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4b8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b4bc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b4c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b4c3:	83 e8 24             	sub    eax,0x24
c000b4c6:	c1 e8 02             	shr    eax,0x2
c000b4c9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b4cd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b4d5:	8d 76 00             	lea    esi,[esi+0x0]
c000b4d8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4dc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b4e0:	7d 42                	jge    c000b524 <loadACPITables(unsigned char*)+0x108>
c000b4e2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b4e6:	83 c0 24             	add    eax,0x24
c000b4e9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b4ed:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b4f1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b4f5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b4f9:	c1 e0 02             	shl    eax,0x2
c000b4fc:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b500:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b504:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b506:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b50b:	8d 50 01             	lea    edx,[eax+0x1]
c000b50e:	89 15 00 98 02 c0    	mov    DWORD PTR ds:0xc0029800,edx
c000b514:	89 ca                	mov    edx,ecx
c000b516:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b51d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b522:	eb b4                	jmp    c000b4d8 <loadACPITables(unsigned char*)+0xbc>
c000b524:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b52c:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b531:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b535:	0f 8d 39 01 00 00    	jge    c000b674 <loadACPITables(unsigned char*)+0x258>
c000b53b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b53f:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b546:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b54a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b54e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b552:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b556:	25 ff 0f 00 00       	and    eax,0xfff
c000b55b:	89 c6                	mov    esi,eax
c000b55d:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b563:	83 ec 0c             	sub    esp,0xc
c000b566:	6a 01                	push   0x1
c000b568:	e8 de 6a 00 00       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c000b56d:	83 c4 10             	add    esp,0x10
c000b570:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b574:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b57a:	83 ec 0c             	sub    esp,0xc
c000b57d:	6a 01                	push   0x1
c000b57f:	6a 01                	push   0x1
c000b581:	50                   	push   eax
c000b582:	52                   	push   edx
c000b583:	53                   	push   ebx
c000b584:	e8 95 73 00 00       	call   c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b589:	83 c4 20             	add    esp,0x20
c000b58c:	09 f0                	or     eax,esi
c000b58e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b592:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b596:	c1 e0 03             	shl    eax,0x3
c000b599:	05 20 98 02 c0       	add    eax,0xc0029820
c000b59e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b5a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b5aa:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b5b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b5b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5ba:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b5be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b5c2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b5c6:	89 c6                	mov    esi,eax
c000b5c8:	89 d7                	mov    edi,edx
c000b5ca:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b5cc:	89 c8                	mov    eax,ecx
c000b5ce:	89 fa                	mov    edx,edi
c000b5d0:	89 f3                	mov    ebx,esi
c000b5d2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b5d6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b5da:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b5de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5e5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b5e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b5ed:	05 00 10 00 00       	add    eax,0x1000
c000b5f2:	c1 e8 0c             	shr    eax,0xc
c000b5f5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b5f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b5fd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b605:	25 ff 0f 00 00       	and    eax,0xfff
c000b60a:	89 c6                	mov    esi,eax
c000b60c:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b612:	83 ec 0c             	sub    esp,0xc
c000b615:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b619:	e8 2d 6a 00 00       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c000b61e:	83 c4 10             	add    esp,0x10
c000b621:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b625:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b62b:	83 ec 0c             	sub    esp,0xc
c000b62e:	6a 01                	push   0x1
c000b630:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b634:	50                   	push   eax
c000b635:	52                   	push   edx
c000b636:	53                   	push   ebx
c000b637:	e8 e2 72 00 00       	call   c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b63c:	83 c4 20             	add    esp,0x20
c000b63f:	09 f0                	or     eax,esi
c000b641:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b649:	83 ec 0c             	sub    esp,0xc
c000b64c:	50                   	push   eax
c000b64d:	e8 01 6d 00 00       	call   c0012353 <Virt::freeKernelVirtualPages(unsigned long)>
c000b652:	83 c4 10             	add    esp,0x10
c000b655:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b659:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b65d:	89 14 c5 24 98 02 c0 	mov    DWORD PTR [eax*8-0x3ffd67dc],edx
c000b664:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b669:	e9 be fe ff ff       	jmp    c000b52c <loadACPITables(unsigned char*)+0x110>
c000b66e:	66 90                	xchg   ax,ax
c000b670:	90                   	nop
c000b671:	8d 76 00             	lea    esi,[esi+0x0]
c000b674:	83 c4 60             	add    esp,0x60
c000b677:	5b                   	pop    ebx
c000b678:	5e                   	pop    esi
c000b679:	5f                   	pop    edi
c000b67a:	c3                   	ret    
c000b67b:	90                   	nop

c000b67c <findRSDT(unsigned char*)>:
c000b67c:	57                   	push   edi
c000b67d:	56                   	push   esi
c000b67e:	53                   	push   ebx
c000b67f:	83 ec 50             	sub    esp,0x50
c000b682:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b687:	85 c0                	test   eax,eax
c000b689:	75 0d                	jne    c000b698 <findRSDT(unsigned char*)+0x1c>
c000b68b:	b8 00 00 00 00       	mov    eax,0x0
c000b690:	e9 2b 01 00 00       	jmp    c000b7c0 <findRSDT(unsigned char*)+0x144>
c000b695:	8d 76 00             	lea    esi,[esi+0x0]
c000b698:	89 e0                	mov    eax,esp
c000b69a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b69e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b6a2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b6a6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b6ae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b6b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b6ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b6be:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b6c2:	89 c6                	mov    esi,eax
c000b6c4:	89 d7                	mov    edi,edx
c000b6c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b6c8:	89 c8                	mov    eax,ecx
c000b6ca:	89 fa                	mov    edx,edi
c000b6cc:	89 f3                	mov    ebx,esi
c000b6ce:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b6d2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b6d6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b6da:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b6de:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b6e2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b6ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b6ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b6f2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b6f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b6fa:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b6fe:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b702:	25 ff 0f 00 00       	and    eax,0xfff
c000b707:	89 c6                	mov    esi,eax
c000b709:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b70f:	83 ec 0c             	sub    esp,0xc
c000b712:	6a 02                	push   0x2
c000b714:	e8 32 69 00 00       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c000b719:	83 c4 10             	add    esp,0x10
c000b71c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b720:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b726:	83 ec 0c             	sub    esp,0xc
c000b729:	6a 01                	push   0x1
c000b72b:	6a 02                	push   0x2
c000b72d:	50                   	push   eax
c000b72e:	52                   	push   edx
c000b72f:	53                   	push   ebx
c000b730:	e8 e9 71 00 00       	call   c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b735:	83 c4 20             	add    esp,0x20
c000b738:	09 f0                	or     eax,esi
c000b73a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b73e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b742:	25 ff 0f 00 00       	and    eax,0xfff
c000b747:	89 c6                	mov    esi,eax
c000b749:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c000b74f:	83 ec 0c             	sub    esp,0xc
c000b752:	6a 02                	push   0x2
c000b754:	e8 f2 68 00 00       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c000b759:	83 c4 10             	add    esp,0x10
c000b75c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b760:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b766:	83 ec 0c             	sub    esp,0xc
c000b769:	6a 01                	push   0x1
c000b76b:	6a 02                	push   0x2
c000b76d:	50                   	push   eax
c000b76e:	52                   	push   edx
c000b76f:	53                   	push   ebx
c000b770:	e8 a9 71 00 00       	call   c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b775:	83 c4 20             	add    esp,0x20
c000b778:	09 f0                	or     eax,esi
c000b77a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b77e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b783:	85 c0                	test   eax,eax
c000b785:	75 11                	jne    c000b798 <findRSDT(unsigned char*)+0x11c>
c000b787:	c6 05 20 9a 02 c0 00 	mov    BYTE PTR ds:0xc0029a20,0x0
c000b78e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b792:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b796:	eb 24                	jmp    c000b7bc <findRSDT(unsigned char*)+0x140>
c000b798:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b79d:	83 f8 02             	cmp    eax,0x2
c000b7a0:	75 12                	jne    c000b7b4 <findRSDT(unsigned char*)+0x138>
c000b7a2:	c6 05 20 9a 02 c0 01 	mov    BYTE PTR ds:0xc0029a20,0x1
c000b7a9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b7ad:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b7b1:	eb 09                	jmp    c000b7bc <findRSDT(unsigned char*)+0x140>
c000b7b3:	90                   	nop
c000b7b4:	b8 00 00 00 00       	mov    eax,0x0
c000b7b9:	eb 05                	jmp    c000b7c0 <findRSDT(unsigned char*)+0x144>
c000b7bb:	90                   	nop
c000b7bc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b7c0:	83 c4 50             	add    esp,0x50
c000b7c3:	5b                   	pop    ebx
c000b7c4:	5e                   	pop    esi
c000b7c5:	5f                   	pop    edi
c000b7c6:	c3                   	ret    
c000b7c7:	90                   	nop

c000b7c8 <findDataTable(unsigned char*, char*)>:
c000b7c8:	83 ec 1c             	sub    esp,0x1c
c000b7cb:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b7d0:	75 0a                	jne    c000b7dc <findDataTable(unsigned char*, char*)+0x14>
c000b7d2:	b8 00 00 00 00       	mov    eax,0x0
c000b7d7:	eb 5f                	jmp    c000b838 <findDataTable(unsigned char*, char*)+0x70>
c000b7d9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7dc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b7e4:	a1 00 98 02 c0       	mov    eax,ds:0xc0029800
c000b7e9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b7ed:	7d 41                	jge    c000b830 <findDataTable(unsigned char*, char*)+0x68>
c000b7ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b7f3:	c1 e0 03             	shl    eax,0x3
c000b7f6:	05 20 98 02 c0       	add    eax,0xc0029820
c000b7fb:	83 ec 04             	sub    esp,0x4
c000b7fe:	6a 04                	push   0x4
c000b800:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b804:	50                   	push   eax
c000b805:	e8 76 4b ff ff       	call   c0000380 <memcmp>
c000b80a:	83 c4 10             	add    esp,0x10
c000b80d:	85 c0                	test   eax,eax
c000b80f:	0f 94 c0             	sete   al
c000b812:	0f b6 c0             	movzx  eax,al
c000b815:	85 c0                	test   eax,eax
c000b817:	74 0f                	je     c000b828 <findDataTable(unsigned char*, char*)+0x60>
c000b819:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b81d:	8b 04 c5 24 98 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd67dc]
c000b824:	eb 12                	jmp    c000b838 <findDataTable(unsigned char*, char*)+0x70>
c000b826:	66 90                	xchg   ax,ax
c000b828:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b82d:	eb b5                	jmp    c000b7e4 <findDataTable(unsigned char*, char*)+0x1c>
c000b82f:	90                   	nop
c000b830:	b8 00 00 00 00       	mov    eax,0x0
c000b835:	8d 76 00             	lea    esi,[esi+0x0]
c000b838:	83 c4 1c             	add    esp,0x1c
c000b83b:	c3                   	ret    

c000b83c <scanMADT()>:
c000b83c:	53                   	push   ebx
c000b83d:	83 ec 38             	sub    esp,0x38
c000b840:	c7 05 28 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a28,0x0
c000b84a:	c7 05 24 9a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029a24,0x0
c000b854:	e8 20 c4 00 00       	call   c0017c79 <HalFindRSDP()>
c000b859:	a3 28 9a 02 c0       	mov    ds:0xc0029a28,eax
c000b85e:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b863:	85 c0                	test   eax,eax
c000b865:	0f 84 11 04 00 00    	je     c000bc7c <scanMADT()+0x440>
c000b86b:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000b870:	83 ec 0c             	sub    esp,0xc
c000b873:	50                   	push   eax
c000b874:	e8 03 fe ff ff       	call   c000b67c <findRSDT(unsigned char*)>
c000b879:	83 c4 10             	add    esp,0x10
c000b87c:	a3 24 9a 02 c0       	mov    ds:0xc0029a24,eax
c000b881:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b886:	85 c0                	test   eax,eax
c000b888:	0f 84 f2 03 00 00    	je     c000bc80 <scanMADT()+0x444>
c000b88e:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b893:	83 ec 0c             	sub    esp,0xc
c000b896:	50                   	push   eax
c000b897:	e8 80 fb ff ff       	call   c000b41c <loadACPITables(unsigned char*)>
c000b89c:	83 c4 10             	add    esp,0x10
c000b89f:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000b8a4:	83 ec 08             	sub    esp,0x8
c000b8a7:	68 2c 1a 02 c0       	push   0xc0021a2c
c000b8ac:	50                   	push   eax
c000b8ad:	e8 16 ff ff ff       	call   c000b7c8 <findDataTable(unsigned char*, char*)>
c000b8b2:	83 c4 10             	add    esp,0x10
c000b8b5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b8b9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000b8be:	0f 84 c0 03 00 00    	je     c000bc84 <scanMADT()+0x448>
c000b8c4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b8cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b8d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b8d3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000b8d7:	0f 87 af 03 00 00    	ja     c000bc8c <scanMADT()+0x450>
c000b8dd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000b8e5:	0f 87 a1 03 00 00    	ja     c000bc8c <scanMADT()+0x450>
c000b8eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8ef:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b8f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b8f7:	8d 50 01             	lea    edx,[eax+0x1]
c000b8fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b8fe:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b902:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b906:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000b90a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b90e:	8d 50 01             	lea    edx,[eax+0x1]
c000b911:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b915:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b919:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000b91d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000b921:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000b926:	83 f8 02             	cmp    eax,0x2
c000b929:	0f 86 59 03 00 00    	jbe    c000bc88 <scanMADT()+0x44c>
c000b92f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b934:	85 c0                	test   eax,eax
c000b936:	75 58                	jne    c000b990 <scanMADT()+0x154>
c000b938:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b93c:	8d 50 01             	lea    edx,[eax+0x1]
c000b93f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b943:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b949:	0f b6 d2             	movzx  edx,dl
c000b94c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b950:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b954:	88 82 60 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63a0],al
c000b95a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b95e:	8d 50 01             	lea    edx,[eax+0x1]
c000b961:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b965:	8a 15 20 9c 02 c0    	mov    dl,BYTE PTR ds:0xc0029c20
c000b96b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000b96e:	88 0d 20 9c 02 c0    	mov    BYTE PTR ds:0xc0029c20,cl
c000b974:	0f b6 d2             	movzx  edx,dl
c000b977:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b97b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b97f:	88 82 40 9c 02 c0    	mov    BYTE PTR [edx-0x3ffd63c0],al
c000b985:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000b98a:	e9 d9 02 00 00       	jmp    c000bc68 <scanMADT()+0x42c>
c000b98f:	90                   	nop
c000b990:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000b995:	83 f8 01             	cmp    eax,0x1
c000b998:	0f 85 1a 01 00 00    	jne    c000bab8 <scanMADT()+0x27c>
c000b99e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9a2:	8d 50 01             	lea    edx,[eax+0x1]
c000b9a5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b9a9:	8a 15 e0 9a 02 c0    	mov    dl,BYTE PTR ds:0xc0029ae0
c000b9af:	0f b6 d2             	movzx  edx,dl
c000b9b2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000b9b6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000b9ba:	88 82 00 9b 02 c0    	mov    BYTE PTR [edx-0x3ffd6500],al
c000b9c0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000b9c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b9c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9cd:	01 d0                	add    eax,edx
c000b9cf:	83 c0 2c             	add    eax,0x2c
c000b9d2:	8a 00                	mov    al,BYTE PTR [eax]
c000b9d4:	0f b6 d0             	movzx  edx,al
c000b9d7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9db:	8d 48 01             	lea    ecx,[eax+0x1]
c000b9de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9e2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000b9e6:	0f b6 c0             	movzx  eax,al
c000b9e9:	c1 e0 08             	shl    eax,0x8
c000b9ec:	89 d1                	mov    ecx,edx
c000b9ee:	09 c1                	or     ecx,eax
c000b9f0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b9f4:	8d 50 02             	lea    edx,[eax+0x2]
c000b9f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b9fb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000b9ff:	0f b6 c0             	movzx  eax,al
c000ba02:	c1 e0 10             	shl    eax,0x10
c000ba05:	09 c1                	or     ecx,eax
c000ba07:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba0b:	8d 50 03             	lea    edx,[eax+0x3]
c000ba0e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba12:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba16:	0f b6 c0             	movzx  eax,al
c000ba19:	c1 e0 18             	shl    eax,0x18
c000ba1c:	09 c1                	or     ecx,eax
c000ba1e:	89 ca                	mov    edx,ecx
c000ba20:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba25:	0f b6 c0             	movzx  eax,al
c000ba28:	89 14 85 20 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd64e0],edx
c000ba2f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000ba34:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba38:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba3c:	01 d0                	add    eax,edx
c000ba3e:	83 c0 2c             	add    eax,0x2c
c000ba41:	8a 00                	mov    al,BYTE PTR [eax]
c000ba43:	0f b6 d0             	movzx  edx,al
c000ba46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba4a:	8d 48 01             	lea    ecx,[eax+0x1]
c000ba4d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba51:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000ba55:	0f b6 c0             	movzx  eax,al
c000ba58:	c1 e0 08             	shl    eax,0x8
c000ba5b:	89 d1                	mov    ecx,edx
c000ba5d:	09 c1                	or     ecx,eax
c000ba5f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba63:	8d 50 02             	lea    edx,[eax+0x2]
c000ba66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba6a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba6e:	0f b6 c0             	movzx  eax,al
c000ba71:	c1 e0 10             	shl    eax,0x10
c000ba74:	09 c1                	or     ecx,eax
c000ba76:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba7a:	8d 50 03             	lea    edx,[eax+0x3]
c000ba7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba81:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000ba85:	0f b6 c0             	movzx  eax,al
c000ba88:	c1 e0 18             	shl    eax,0x18
c000ba8b:	09 c1                	or     ecx,eax
c000ba8d:	89 ca                	mov    edx,ecx
c000ba8f:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000ba94:	0f b6 c0             	movzx  eax,al
c000ba97:	89 14 85 a0 9b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6460],edx
c000ba9e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000baa3:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c000baa8:	83 c0 01             	add    eax,0x1
c000baab:	a2 e0 9a 02 c0       	mov    ds:0xc0029ae0,al
c000bab0:	e9 b3 01 00 00       	jmp    c000bc68 <scanMADT()+0x42c>
c000bab5:	8d 76 00             	lea    esi,[esi+0x0]
c000bab8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000babd:	83 f8 02             	cmp    eax,0x2
c000bac0:	0f 85 ea 00 00 00    	jne    c000bbb0 <scanMADT()+0x374>
c000bac6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baca:	8d 50 01             	lea    edx,[eax+0x1]
c000bacd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bad1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bad5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bad9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000badd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bae1:	8d 50 01             	lea    edx,[eax+0x1]
c000bae4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bae8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baec:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000baf0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000baf4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000baf8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bafc:	01 d0                	add    eax,edx
c000bafe:	83 c0 2c             	add    eax,0x2c
c000bb01:	8a 00                	mov    al,BYTE PTR [eax]
c000bb03:	0f b6 d0             	movzx  edx,al
c000bb06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb0a:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb0d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb11:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb15:	0f b6 c0             	movzx  eax,al
c000bb18:	c1 e0 08             	shl    eax,0x8
c000bb1b:	89 d1                	mov    ecx,edx
c000bb1d:	09 c1                	or     ecx,eax
c000bb1f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb23:	8d 50 02             	lea    edx,[eax+0x2]
c000bb26:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb2a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb2e:	0f b6 c0             	movzx  eax,al
c000bb31:	c1 e0 10             	shl    eax,0x10
c000bb34:	09 c1                	or     ecx,eax
c000bb36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb3a:	8d 50 03             	lea    edx,[eax+0x3]
c000bb3d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb41:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb45:	0f b6 c0             	movzx  eax,al
c000bb48:	c1 e0 18             	shl    eax,0x18
c000bb4b:	09 c8                	or     eax,ecx
c000bb4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb51:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb56:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb5a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb5e:	01 d0                	add    eax,edx
c000bb60:	83 c0 2c             	add    eax,0x2c
c000bb63:	8a 00                	mov    al,BYTE PTR [eax]
c000bb65:	0f b6 c0             	movzx  eax,al
c000bb68:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000bb6c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bb6f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb73:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000bb77:	0f b6 d2             	movzx  edx,dl
c000bb7a:	c1 e2 08             	shl    edx,0x8
c000bb7d:	09 d0                	or     eax,edx
c000bb7f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bb84:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bb89:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bb8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bb92:	88 90 a8 3a 02 c0    	mov    BYTE PTR [eax-0x3ffdc558],dl
c000bb98:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000bb9d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000bba2:	66 89 84 12 c0 9a 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd6540],ax
c000bbaa:	e9 b9 00 00 00       	jmp    c000bc68 <scanMADT()+0x42c>
c000bbaf:	90                   	nop
c000bbb0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bbb5:	83 f8 04             	cmp    eax,0x4
c000bbb8:	0f 85 9a 00 00 00    	jne    c000bc58 <scanMADT()+0x41c>
c000bbbe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbc2:	8d 50 01             	lea    edx,[eax+0x1]
c000bbc5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbc9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbcd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bbd1:	0f b6 c0             	movzx  eax,al
c000bbd4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bbd8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbdc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbe0:	01 d0                	add    eax,edx
c000bbe2:	83 c0 2c             	add    eax,0x2c
c000bbe5:	8a 00                	mov    al,BYTE PTR [eax]
c000bbe7:	0f b6 d0             	movzx  edx,al
c000bbea:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbee:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbf1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbf5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bbf9:	0f b6 c0             	movzx  eax,al
c000bbfc:	c1 e0 08             	shl    eax,0x8
c000bbff:	09 d0                	or     eax,edx
c000bc01:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bc05:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bc0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc0e:	8d 50 01             	lea    edx,[eax+0x1]
c000bc11:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc19:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc1d:	0f b6 c0             	movzx  eax,al
c000bc20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bc24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc28:	c1 e0 08             	shl    eax,0x8
c000bc2b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bc2f:	89 c1                	mov    ecx,eax
c000bc31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bc35:	c1 e0 18             	shl    eax,0x18
c000bc38:	89 c3                	mov    ebx,eax
c000bc3a:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c000bc3f:	8d 50 01             	lea    edx,[eax+0x1]
c000bc42:	89 15 2c 9a 02 c0    	mov    DWORD PTR ds:0xc0029a2c,edx
c000bc48:	09 d9                	or     ecx,ebx
c000bc4a:	89 ca                	mov    edx,ecx
c000bc4c:	89 14 85 40 9a 02 c0 	mov    DWORD PTR [eax*4-0x3ffd65c0],edx
c000bc53:	eb 13                	jmp    c000bc68 <scanMADT()+0x42c>
c000bc55:	8d 76 00             	lea    esi,[esi+0x0]
c000bc58:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc5d:	83 f8 05             	cmp    eax,0x5
c000bc60:	75 06                	jne    c000bc68 <scanMADT()+0x42c>
c000bc62:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bc67:	90                   	nop
c000bc68:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000bc6d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000bc71:	01 d0                	add    eax,edx
c000bc73:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bc77:	e9 50 fc ff ff       	jmp    c000b8cc <scanMADT()+0x90>
c000bc7c:	90                   	nop
c000bc7d:	eb 0d                	jmp    c000bc8c <scanMADT()+0x450>
c000bc7f:	90                   	nop
c000bc80:	90                   	nop
c000bc81:	eb 09                	jmp    c000bc8c <scanMADT()+0x450>
c000bc83:	90                   	nop
c000bc84:	90                   	nop
c000bc85:	eb 05                	jmp    c000bc8c <scanMADT()+0x450>
c000bc87:	90                   	nop
c000bc88:	90                   	nop
c000bc89:	8d 76 00             	lea    esi,[esi+0x0]
c000bc8c:	83 c4 38             	add    esp,0x38
c000bc8f:	5b                   	pop    ebx
c000bc90:	c3                   	ret    
c000bc91:	90                   	nop
c000bc92:	66 90                	xchg   ax,ax

c000bc94 <ACPI::ACPI()>:
c000bc94:	83 ec 0c             	sub    esp,0xc
c000bc97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc9b:	83 ec 08             	sub    esp,0x8
c000bc9e:	68 31 1a 02 c0       	push   0xc0021a31
c000bca3:	50                   	push   eax
c000bca4:	e8 f7 d4 ff ff       	call   c00091a0 <Device::Device(char const*)>
c000bca9:	83 c4 10             	add    esp,0x10
c000bcac:	ba 2c 1c 02 c0       	mov    edx,0xc0021c2c
c000bcb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcb5:	89 10                	mov    DWORD PTR [eax],edx
c000bcb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcbb:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000bcc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000bcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcd4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000bcde:	e8 59 fb ff ff       	call   c000b83c <scanMADT()>
c000bce3:	90                   	nop
c000bce4:	83 c4 0c             	add    esp,0xc
c000bce7:	c3                   	ret    

c000bce8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000bce8:	83 ec 2c             	sub    esp,0x2c
c000bceb:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000bcef:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000bcf3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000bcf7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000bcfb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000bd00:	88 d0                	mov    al,dl
c000bd02:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bd06:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bd0b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd13:	90                   	nop
c000bd14:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd18:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bd1e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000bd22:	0f 8d b0 00 00 00    	jge    c000bdd8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bd28:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd2c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd30:	83 c2 2a             	add    edx,0x2a
c000bd33:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000bd37:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bd3c:	0f b7 c0             	movzx  eax,ax
c000bd3f:	39 c2                	cmp    edx,eax
c000bd41:	0f 85 85 00 00 00    	jne    c000bdcc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd47:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd4b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd4f:	83 c2 2a             	add    edx,0x2a
c000bd52:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000bd56:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bd5b:	0f b6 c0             	movzx  eax,al
c000bd5e:	39 c2                	cmp    edx,eax
c000bd60:	75 6a                	jne    c000bdcc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bd62:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bd67:	85 c0                	test   eax,eax
c000bd69:	74 3d                	je     c000bda8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bd6b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bd6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd73:	83 c2 2a             	add    edx,0x2a
c000bd76:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bd7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bd7e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bd81:	39 c2                	cmp    edx,eax
c000bd83:	74 13                	je     c000bd98 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bd85:	83 ec 0c             	sub    esp,0xc
c000bd88:	68 ac 1b 02 c0       	push   0xc0021bac
c000bd8d:	e8 40 2f 00 00       	call   c000ecd2 <KePanic(char const*)>
c000bd92:	83 c4 10             	add    esp,0x10
c000bd95:	8d 76 00             	lea    esi,[esi+0x0]
c000bd98:	83 ec 0c             	sub    esp,0xc
c000bd9b:	68 36 1a 02 c0       	push   0xc0021a36
c000bda0:	e8 2d 2f 00 00       	call   c000ecd2 <KePanic(char const*)>
c000bda5:	83 c4 10             	add    esp,0x10
c000bda8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bdac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bdb0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bdb4:	83 c2 2a             	add    edx,0x2a
c000bdb7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bdbb:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdbd:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bdc0:	89 01                	mov    DWORD PTR [ecx],eax
c000bdc2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bdc5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bdca:	66 90                	xchg   ax,ax
c000bdcc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bdd1:	e9 3e ff ff ff       	jmp    c000bd14 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bdd6:	66 90                	xchg   ax,ax
c000bdd8:	90                   	nop
c000bdd9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bddd:	83 c4 2c             	add    esp,0x2c
c000bde0:	c2 04 00             	ret    0x4
c000bde3:	90                   	nop

c000bde4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bde4:	83 ec 1c             	sub    esp,0x1c
c000bde7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bdeb:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bdef:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bdf3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000bdf8:	88 c8                	mov    al,cl
c000bdfa:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000bdfe:	88 d0                	mov    al,dl
c000be00:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000be04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be08:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be12:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be15:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000be19:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000be1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be21:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be27:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000be2b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000be2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be32:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000be37:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be3b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be41:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000be45:	83 c0 01             	add    eax,0x1
c000be48:	88 c1                	mov    cl,al
c000be4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be4e:	83 c2 2a             	add    edx,0x2a
c000be51:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000be55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be59:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000be5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be63:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000be66:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000be6a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000be6e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be72:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be78:	8d 50 01             	lea    edx,[eax+0x1]
c000be7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be7f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000be85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000be89:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000be8f:	3d 00 02 00 00       	cmp    eax,0x200
c000be94:	75 12                	jne    c000bea8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000be96:	83 ec 0c             	sub    esp,0xc
c000be99:	68 45 1a 02 c0       	push   0xc0021a45
c000be9e:	e8 2f 2e 00 00       	call   c000ecd2 <KePanic(char const*)>
c000bea3:	83 c4 10             	add    esp,0x10
c000bea6:	66 90                	xchg   ax,ax
c000bea8:	90                   	nop
c000bea9:	83 c4 1c             	add    esp,0x1c
c000beac:	c3                   	ret    
c000bead:	90                   	nop
c000beae:	66 90                	xchg   ax,ax

c000beb0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000beb0:	b8 00 00 00 00       	mov    eax,0x0
c000beb5:	c3                   	ret    
c000beb6:	66 90                	xchg   ax,ax

c000beb8 <ACPI::detectPCI()>:
c000beb8:	53                   	push   ebx
c000beb9:	83 ec 28             	sub    esp,0x28
c000bebc:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bec1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000bec6:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000becb:	83 ec 08             	sub    esp,0x8
c000bece:	68 62 1a 02 c0       	push   0xc0021a62
c000bed3:	50                   	push   eax
c000bed4:	e8 ef f8 ff ff       	call   c000b7c8 <findDataTable(unsigned char*, char*)>
c000bed9:	83 c4 10             	add    esp,0x10
c000bedc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bee0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bee5:	74 0d                	je     c000bef4 <ACPI::detectPCI()+0x3c>
c000bee7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000beec:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bef1:	8d 76 00             	lea    esi,[esi+0x0]
c000bef4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000befc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf00:	8a 00                	mov    al,BYTE PTR [eax]
c000bf02:	0f b6 c0             	movzx  eax,al
c000bf05:	83 f8 01             	cmp    eax,0x1
c000bf08:	75 0e                	jne    c000bf18 <ACPI::detectPCI()+0x60>
c000bf0a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf0f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf14:	eb 2e                	jmp    c000bf44 <ACPI::detectPCI()+0x8c>
c000bf16:	66 90                	xchg   ax,ax
c000bf18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bf1c:	8a 00                	mov    al,BYTE PTR [eax]
c000bf1e:	0f b6 c0             	movzx  eax,al
c000bf21:	83 f8 02             	cmp    eax,0x2
c000bf24:	75 1e                	jne    c000bf44 <ACPI::detectPCI()+0x8c>
c000bf26:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf2b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf30:	85 c0                	test   eax,eax
c000bf32:	74 10                	je     c000bf44 <ACPI::detectPCI()+0x8c>
c000bf34:	83 ec 0c             	sub    esp,0xc
c000bf37:	68 dc 1b 02 c0       	push   0xc0021bdc
c000bf3c:	e8 91 2d 00 00       	call   c000ecd2 <KePanic(char const*)>
c000bf41:	83 c4 10             	add    esp,0x10
c000bf44:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000bf48:	83 f0 01             	xor    eax,0x1
c000bf4b:	0f b6 c0             	movzx  eax,al
c000bf4e:	85 c0                	test   eax,eax
c000bf50:	74 46                	je     c000bf98 <ACPI::detectPCI()+0xe0>
c000bf52:	e8 d9 41 ff ff       	call   c0000130 <manualPCIProbe>
c000bf57:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf5b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000bf60:	75 0e                	jne    c000bf70 <ACPI::detectPCI()+0xb8>
c000bf62:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf67:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000bf6c:	eb 2a                	jmp    c000bf98 <ACPI::detectPCI()+0xe0>
c000bf6e:	66 90                	xchg   ax,ax
c000bf70:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000bf75:	75 21                	jne    c000bf98 <ACPI::detectPCI()+0xe0>
c000bf77:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf7c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000bf81:	85 c0                	test   eax,eax
c000bf83:	74 13                	je     c000bf98 <ACPI::detectPCI()+0xe0>
c000bf85:	83 ec 0c             	sub    esp,0xc
c000bf88:	68 dc 1b 02 c0       	push   0xc0021bdc
c000bf8d:	e8 40 2d 00 00       	call   c000ecd2 <KePanic(char const*)>
c000bf92:	83 c4 10             	add    esp,0x10
c000bf95:	8d 76 00             	lea    esi,[esi+0x0]
c000bf98:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bf9d:	85 c0                	test   eax,eax
c000bf9f:	0f 84 87 00 00 00    	je     c000c02c <ACPI::detectPCI()+0x174>
c000bfa5:	83 ec 0c             	sub    esp,0xc
c000bfa8:	68 67 1a 02 c0       	push   0xc0021a67
c000bfad:	e8 96 06 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000bfb2:	83 c4 10             	add    esp,0x10
c000bfb5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000bfbd:	83 ec 0c             	sub    esp,0xc
c000bfc0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bfc4:	e8 b2 29 00 00       	call   c000e97b <malloc>
c000bfc9:	83 c4 10             	add    esp,0x10
c000bfcc:	89 c3                	mov    ebx,eax
c000bfce:	83 ec 0c             	sub    esp,0xc
c000bfd1:	53                   	push   ebx
c000bfd2:	e8 35 f9 00 00       	call   c001b90c <PCI::PCI()>
c000bfd7:	83 c4 10             	add    esp,0x10
c000bfda:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000bfde:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bfe2:	83 ec 08             	sub    esp,0x8
c000bfe5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bfe9:	50                   	push   eax
c000bfea:	e8 4f d0 ff ff       	call   c000903e <Device::addChild(Device*)>
c000bfef:	83 c4 10             	add    esp,0x10
c000bff2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bff6:	8b 00                	mov    eax,DWORD PTR [eax]
c000bff8:	83 c0 08             	add    eax,0x8
c000bffb:	8b 00                	mov    eax,DWORD PTR [eax]
c000bffd:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c002:	85 d2                	test   edx,edx
c000c004:	74 0a                	je     c000c010 <ACPI::detectPCI()+0x158>
c000c006:	ba 01 00 00 00       	mov    edx,0x1
c000c00b:	eb 0b                	jmp    c000c018 <ACPI::detectPCI()+0x160>
c000c00d:	8d 76 00             	lea    esi,[esi+0x0]
c000c010:	ba 02 00 00 00       	mov    edx,0x2
c000c015:	8d 76 00             	lea    esi,[esi+0x0]
c000c018:	6a 00                	push   0x0
c000c01a:	6a 00                	push   0x0
c000c01c:	52                   	push   edx
c000c01d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c021:	ff d0                	call   eax
c000c023:	83 c4 10             	add    esp,0x10
c000c026:	e9 91 00 00 00       	jmp    c000c0bc <ACPI::detectPCI()+0x204>
c000c02b:	90                   	nop
c000c02c:	83 ec 0c             	sub    esp,0xc
c000c02f:	68 7f 1a 02 c0       	push   0xc0021a7f
c000c034:	e8 0f 06 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000c039:	83 c4 10             	add    esp,0x10
c000c03c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c043:	83 ec 0c             	sub    esp,0xc
c000c046:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c04a:	e8 2c 29 00 00       	call   c000e97b <malloc>
c000c04f:	83 c4 10             	add    esp,0x10
c000c052:	89 c3                	mov    ebx,eax
c000c054:	83 ec 0c             	sub    esp,0xc
c000c057:	53                   	push   ebx
c000c058:	e8 b5 04 01 00       	call   c001c512 <IDE::IDE()>
c000c05d:	83 c4 10             	add    esp,0x10
c000c060:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c064:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c068:	83 ec 08             	sub    esp,0x8
c000c06b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c06f:	50                   	push   eax
c000c070:	e8 c9 cf ff ff       	call   c000903e <Device::addChild(Device*)>
c000c075:	83 c4 10             	add    esp,0x10
c000c078:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c07c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c086:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c08a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c093:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c097:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c0a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c0a4:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0a6:	83 c0 08             	add    eax,0x8
c000c0a9:	8b 00                	mov    eax,DWORD PTR [eax]
c000c0ab:	6a 00                	push   0x0
c000c0ad:	6a 00                	push   0x0
c000c0af:	6a 00                	push   0x0
c000c0b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b5:	ff d0                	call   eax
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	66 90                	xchg   ax,ax
c000c0bc:	90                   	nop
c000c0bd:	83 c4 28             	add    esp,0x28
c000c0c0:	5b                   	pop    ebx
c000c0c1:	c3                   	ret    
c000c0c2:	66 90                	xchg   ax,ax

c000c0c4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c0c4:	83 ec 0c             	sub    esp,0xc
c000c0c7:	83 ec 0c             	sub    esp,0xc
c000c0ca:	68 94 1a 02 c0       	push   0xc0021a94
c000c0cf:	e8 fe 2b 00 00       	call   c000ecd2 <KePanic(char const*)>
c000c0d4:	83 c4 10             	add    esp,0x10
c000c0d7:	90                   	nop
c000c0d8:	83 c4 0c             	add    esp,0xc
c000c0db:	c3                   	ret    

c000c0dc <ACPI::open(int, int, void*)>:
c000c0dc:	57                   	push   edi
c000c0dd:	56                   	push   esi
c000c0de:	53                   	push   ebx
c000c0df:	81 ec 70 01 00 00    	sub    esp,0x170
c000c0e5:	83 ec 0c             	sub    esp,0xc
c000c0e8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c0ef:	e8 c4 fd ff ff       	call   c000beb8 <ACPI::detectPCI()>
c000c0f4:	83 c4 10             	add    esp,0x10
c000c0f7:	83 ec 0c             	sub    esp,0xc
c000c0fa:	68 04 1c 02 c0       	push   0xc0021c04
c000c0ff:	e8 44 05 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000c104:	83 c4 10             	add    esp,0x10
c000c107:	b8 4c 05 00 00       	mov    eax,0x54c
c000c10c:	8a 00                	mov    al,BYTE PTR [eax]
c000c10e:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000c115:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c11d:	83 f8 01             	cmp    eax,0x1
c000c120:	75 12                	jne    c000c134 <ACPI::open(int, int, void*)+0x58>
c000c122:	83 ec 0c             	sub    esp,0xc
c000c125:	68 a5 1a 02 c0       	push   0xc0021aa5
c000c12a:	e8 00 7e 00 00       	call   c0013f2f <Thr::loadKernelSymbolTable(char const*)>
c000c12f:	83 c4 10             	add    esp,0x10
c000c132:	eb 34                	jmp    c000c168 <ACPI::open(int, int, void*)+0x8c>
c000c134:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c13c:	3d bb 00 00 00       	cmp    eax,0xbb
c000c141:	75 15                	jne    c000c158 <ACPI::open(int, int, void*)+0x7c>
c000c143:	83 ec 0c             	sub    esp,0xc
c000c146:	68 c3 1a 02 c0       	push   0xc0021ac3
c000c14b:	e8 df 7d 00 00       	call   c0013f2f <Thr::loadKernelSymbolTable(char const*)>
c000c150:	83 c4 10             	add    esp,0x10
c000c153:	eb 13                	jmp    c000c168 <ACPI::open(int, int, void*)+0x8c>
c000c155:	8d 76 00             	lea    esi,[esi+0x0]
c000c158:	83 ec 0c             	sub    esp,0xc
c000c15b:	68 e1 1a 02 c0       	push   0xc0021ae1
c000c160:	e8 6d 2b 00 00       	call   c000ecd2 <KePanic(char const*)>
c000c165:	83 c4 10             	add    esp,0x10
c000c168:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000c170:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000c17b:	83 ec 0c             	sub    esp,0xc
c000c17e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c185:	e8 f1 27 00 00       	call   c000e97b <malloc>
c000c18a:	83 c4 10             	add    esp,0x10
c000c18d:	89 c3                	mov    ebx,eax
c000c18f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c194:	83 ec 04             	sub    esp,0x4
c000c197:	50                   	push   eax
c000c198:	68 fb 1a 02 c0       	push   0xc0021afb
c000c19d:	53                   	push   ebx
c000c19e:	e8 6f bf ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c1a3:	83 c4 10             	add    esp,0x10
c000c1a6:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000c1ad:	83 ec 08             	sub    esp,0x8
c000c1b0:	6a 01                	push   0x1
c000c1b2:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c1b9:	e8 72 bf ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c1be:	83 c4 10             	add    esp,0x10
c000c1c1:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000c1c8:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000c1d0:	75 16                	jne    c000c1e8 <ACPI::open(int, int, void*)+0x10c>
c000c1d2:	83 ec 0c             	sub    esp,0xc
c000c1d5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c1dc:	e8 ad bf ff ff       	call   c000818e <File::close()>
c000c1e1:	83 c4 10             	add    esp,0x10
c000c1e4:	eb 0a                	jmp    c000c1f0 <ACPI::open(int, int, void*)+0x114>
c000c1e6:	66 90                	xchg   ax,ax
c000c1e8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000c1f0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000c1f8:	74 1e                	je     c000c218 <ACPI::open(int, int, void*)+0x13c>
c000c1fa:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000c201:	8b 00                	mov    eax,DWORD PTR [eax]
c000c203:	83 c0 08             	add    eax,0x8
c000c206:	8b 00                	mov    eax,DWORD PTR [eax]
c000c208:	83 ec 0c             	sub    esp,0xc
c000c20b:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c212:	ff d0                	call   eax
c000c214:	83 c4 10             	add    esp,0x10
c000c217:	90                   	nop
c000c218:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000c21f:	83 f0 01             	xor    eax,0x1
c000c222:	0f b6 c0             	movzx  eax,al
c000c225:	85 c0                	test   eax,eax
c000c227:	74 2f                	je     c000c258 <ACPI::open(int, int, void*)+0x17c>
c000c229:	83 ec 0c             	sub    esp,0xc
c000c22c:	68 19 1b 02 c0       	push   0xc0021b19
c000c231:	e8 12 04 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000c236:	83 c4 10             	add    esp,0x10
c000c239:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000c244:	83 ec 0c             	sub    esp,0xc
c000c247:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000c24e:	e8 27 60 00 00       	call   c001227a <Virt::setupPageSwapping(int)>
c000c253:	83 c4 10             	add    esp,0x10
c000c256:	66 90                	xchg   ax,ax
c000c258:	83 ec 0c             	sub    esp,0xc
c000c25b:	68 34 1b 02 c0       	push   0xc0021b34
c000c260:	e8 e3 03 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000c265:	83 c4 10             	add    esp,0x10
c000c268:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000c26f:	83 ec 08             	sub    esp,0x8
c000c272:	6a 13                	push   0x13
c000c274:	50                   	push   eax
c000c275:	e8 f2 d0 ff ff       	call   c000936c <getDevicesOfType(DeviceType)>
c000c27a:	83 c4 0c             	add    esp,0xc
c000c27d:	8d 76 00             	lea    esi,[esi+0x0]
c000c280:	83 ec 0c             	sub    esp,0xc
c000c283:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c28a:	50                   	push   eax
c000c28b:	e8 ac 3d 01 00       	call   c002003c <LinkedList<Device>::isEmpty()>
c000c290:	83 c4 10             	add    esp,0x10
c000c293:	83 f0 01             	xor    eax,0x1
c000c296:	0f b6 c0             	movzx  eax,al
c000c299:	85 c0                	test   eax,eax
c000c29b:	0f 84 47 01 00 00    	je     c000c3e8 <ACPI::open(int, int, void*)+0x30c>
c000c2a1:	83 ec 0c             	sub    esp,0xc
c000c2a4:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c2ab:	50                   	push   eax
c000c2ac:	e8 a7 3d 01 00       	call   c0020058 <LinkedList<Device>::getFirstElement()>
c000c2b1:	83 c4 10             	add    esp,0x10
c000c2b4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000c2bb:	83 ec 0c             	sub    esp,0xc
c000c2be:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c2c5:	50                   	push   eax
c000c2c6:	e8 95 3d 01 00       	call   c0020060 <LinkedList<Device>::removeFirst()>
c000c2cb:	83 c4 10             	add    esp,0x10
c000c2ce:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000c2d5:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000c2dc:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000c2e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000c2e7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000c2ed:	ba 09 00 00 00       	mov    edx,0x9
c000c2f2:	fc                   	cld    
c000c2f3:	89 c7                	mov    edi,eax
c000c2f5:	89 de                	mov    esi,ebx
c000c2f7:	89 d1                	mov    ecx,edx
c000c2f9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c2fb:	83 ec 08             	sub    esp,0x8
c000c2fe:	8d 44 24 38          	lea    eax,[esp+0x38]
c000c302:	50                   	push   eax
c000c303:	83 ec 24             	sub    esp,0x24
c000c306:	89 e0                	mov    eax,esp
c000c308:	89 c3                	mov    ebx,eax
c000c30a:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000c30e:	ba 09 00 00 00       	mov    edx,0x9
c000c313:	89 df                	mov    edi,ebx
c000c315:	89 c6                	mov    esi,eax
c000c317:	89 d1                	mov    ecx,edx
c000c319:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c31b:	e8 d6 fa 00 00       	call   c001bdf6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c320:	83 c4 30             	add    esp,0x30
c000c323:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000c32a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000c332:	0f 84 48 ff ff ff    	je     c000c280 <ACPI::open(int, int, void*)+0x1a4>
c000c338:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000c343:	83 ec 0c             	sub    esp,0xc
c000c346:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000c34d:	e8 29 26 00 00       	call   c000e97b <malloc>
c000c352:	83 c4 10             	add    esp,0x10
c000c355:	89 c3                	mov    ebx,eax
c000c357:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c35c:	83 ec 04             	sub    esp,0x4
c000c35f:	50                   	push   eax
c000c360:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c367:	53                   	push   ebx
c000c368:	e8 a5 bd ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c36d:	83 c4 10             	add    esp,0x10
c000c370:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000c377:	83 ec 0c             	sub    esp,0xc
c000c37a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c381:	e8 6e c0 ff ff       	call   c00083f4 <File::exists()>
c000c386:	83 c4 10             	add    esp,0x10
c000c389:	0f b6 c0             	movzx  eax,al
c000c38c:	85 c0                	test   eax,eax
c000c38e:	74 28                	je     c000c3b8 <ACPI::open(int, int, void*)+0x2dc>
c000c390:	83 ec 08             	sub    esp,0x8
c000c393:	6a 01                	push   0x1
c000c395:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c39c:	e8 08 86 00 00       	call   c00149a9 <Thr::loadDLL(char const*, bool)>
c000c3a1:	83 c4 10             	add    esp,0x10
c000c3a4:	83 ec 08             	sub    esp,0x8
c000c3a7:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c3ae:	50                   	push   eax
c000c3af:	e8 47 88 00 00       	call   c0014bfb <Thr::executeDLL(unsigned long, void*)>
c000c3b4:	83 c4 10             	add    esp,0x10
c000c3b7:	90                   	nop
c000c3b8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000c3c0:	0f 84 ba fe ff ff    	je     c000c280 <ACPI::open(int, int, void*)+0x1a4>
c000c3c6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000c3cd:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3cf:	83 c0 08             	add    eax,0x8
c000c3d2:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3d4:	83 ec 0c             	sub    esp,0xc
c000c3d7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c3de:	ff d0                	call   eax
c000c3e0:	83 c4 10             	add    esp,0x10
c000c3e3:	e9 98 fe ff ff       	jmp    c000c280 <ACPI::open(int, int, void*)+0x1a4>
c000c3e8:	83 ec 0c             	sub    esp,0xc
c000c3eb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c3f2:	50                   	push   eax
c000c3f3:	e8 40 3c 01 00       	call   c0020038 <LinkedList<Device>::~LinkedList()>
c000c3f8:	83 c4 10             	add    esp,0x10
c000c3fb:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000c401:	83 ec 08             	sub    esp,0x8
c000c404:	6a 01                	push   0x1
c000c406:	68 4e 1b 02 c0       	push   0xc0021b4e
c000c40b:	e8 99 85 00 00       	call   c00149a9 <Thr::loadDLL(char const*, bool)>
c000c410:	83 c4 10             	add    esp,0x10
c000c413:	83 ec 08             	sub    esp,0x8
c000c416:	53                   	push   ebx
c000c417:	50                   	push   eax
c000c418:	e8 de 87 00 00       	call   c0014bfb <Thr::executeDLL(unsigned long, void*)>
c000c41d:	83 c4 10             	add    esp,0x10
c000c420:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c425:	85 c0                	test   eax,eax
c000c427:	0f 84 27 01 00 00    	je     c000c554 <ACPI::open(int, int, void*)+0x478>
c000c42d:	a1 28 9a 02 c0       	mov    eax,ds:0xc0029a28
c000c432:	85 c0                	test   eax,eax
c000c434:	0f 84 1a 01 00 00    	je     c000c554 <ACPI::open(int, int, void*)+0x478>
c000c43a:	83 ec 0c             	sub    esp,0xc
c000c43d:	68 6b 1b 02 c0       	push   0xc0021b6b
c000c442:	e8 01 02 00 00       	call   c000c648 <KeSetBootMessage(char const*)>
c000c447:	83 c4 10             	add    esp,0x10
c000c44a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000c455:	83 ec 0c             	sub    esp,0xc
c000c458:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000c45f:	e8 17 25 00 00       	call   c000e97b <malloc>
c000c464:	83 c4 10             	add    esp,0x10
c000c467:	89 c3                	mov    ebx,eax
c000c469:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000c46e:	83 ec 04             	sub    esp,0x4
c000c471:	50                   	push   eax
c000c472:	68 88 1b 02 c0       	push   0xc0021b88
c000c477:	53                   	push   ebx
c000c478:	e8 95 bc ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c47d:	83 c4 10             	add    esp,0x10
c000c480:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000c487:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c48f:	74 1f                	je     c000c4b0 <ACPI::open(int, int, void*)+0x3d4>
c000c491:	83 ec 0c             	sub    esp,0xc
c000c494:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c49b:	e8 54 bf ff ff       	call   c00083f4 <File::exists()>
c000c4a0:	83 c4 10             	add    esp,0x10
c000c4a3:	0f b6 c0             	movzx  eax,al
c000c4a6:	85 c0                	test   eax,eax
c000c4a8:	74 06                	je     c000c4b0 <ACPI::open(int, int, void*)+0x3d4>
c000c4aa:	b0 01                	mov    al,0x1
c000c4ac:	eb 06                	jmp    c000c4b4 <ACPI::open(int, int, void*)+0x3d8>
c000c4ae:	66 90                	xchg   ax,ax
c000c4b0:	b0 00                	mov    al,0x0
c000c4b2:	66 90                	xchg   ax,ax
c000c4b4:	0f b6 c0             	movzx  eax,al
c000c4b7:	85 c0                	test   eax,eax
c000c4b9:	74 25                	je     c000c4e0 <ACPI::open(int, int, void*)+0x404>
c000c4bb:	83 ec 08             	sub    esp,0x8
c000c4be:	6a 01                	push   0x1
c000c4c0:	68 88 1b 02 c0       	push   0xc0021b88
c000c4c5:	e8 df 84 00 00       	call   c00149a9 <Thr::loadDLL(char const*, bool)>
c000c4ca:	83 c4 10             	add    esp,0x10
c000c4cd:	83 ec 08             	sub    esp,0x8
c000c4d0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000c4d7:	50                   	push   eax
c000c4d8:	e8 1e 87 00 00       	call   c0014bfb <Thr::executeDLL(unsigned long, void*)>
c000c4dd:	83 c4 10             	add    esp,0x10
c000c4e0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c4e8:	74 2a                	je     c000c514 <ACPI::open(int, int, void*)+0x438>
c000c4ea:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c4f2:	74 20                	je     c000c514 <ACPI::open(int, int, void*)+0x438>
c000c4f4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000c4fb:	8b 00                	mov    eax,DWORD PTR [eax]
c000c4fd:	83 c0 08             	add    eax,0x8
c000c500:	8b 00                	mov    eax,DWORD PTR [eax]
c000c502:	83 ec 0c             	sub    esp,0xc
c000c505:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c50c:	ff d0                	call   eax
c000c50e:	83 c4 10             	add    esp,0x10
c000c511:	8d 76 00             	lea    esi,[esi+0x0]
c000c514:	a1 24 9a 02 c0       	mov    eax,ds:0xc0029a24
c000c519:	83 ec 08             	sub    esp,0x8
c000c51c:	68 a5 1b 02 c0       	push   0xc0021ba5
c000c521:	50                   	push   eax
c000c522:	e8 a1 f2 ff ff       	call   c000b7c8 <findDataTable(unsigned char*, char*)>
c000c527:	83 c4 10             	add    esp,0x10
c000c52a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000c531:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000c539:	74 19                	je     c000c554 <ACPI::open(int, int, void*)+0x478>
c000c53b:	83 ec 08             	sub    esp,0x8
c000c53e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c545:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c54c:	e8 73 fb ff ff       	call   c000c0c4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c551:	83 c4 10             	add    esp,0x10
c000c554:	b8 00 00 00 00       	mov    eax,0x0
c000c559:	81 c4 70 01 00 00    	add    esp,0x170
c000c55f:	5b                   	pop    ebx
c000c560:	5e                   	pop    esi
c000c561:	5f                   	pop    edi
c000c562:	c3                   	ret    

c000c563 <KeInitialiseAtexit()>:
c000c563:	83 ec 10             	sub    esp,0x10
c000c566:	c7 05 80 9c 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029c80,0x0
c000c570:	6a 60                	push   0x60
c000c572:	6a 00                	push   0x0
c000c574:	68 00 9d 02 c0       	push   0xc0029d00
c000c579:	e8 72 3f ff ff       	call   c00004f0 <memset>
c000c57e:	83 c4 1c             	add    esp,0x1c
c000c581:	c3                   	ret    

c000c582 <KeRegisterAtexit(void (*)(void*), void*)>:
c000c582:	a1 80 9c 02 c0       	mov    eax,ds:0xc0029c80
c000c587:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c58b:	89 14 85 00 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6300],edx
c000c592:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c596:	89 14 85 a0 9c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6360],edx
c000c59d:	40                   	inc    eax
c000c59e:	a3 80 9c 02 c0       	mov    ds:0xc0029c80,eax
c000c5a3:	83 f8 17             	cmp    eax,0x17
c000c5a6:	7e 0d                	jle    c000c5b5 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c5a8:	c7 44 24 04 50 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c50
c000c5b0:	e9 1d 27 00 00       	jmp    c000ecd2 <KePanic(char const*)>
c000c5b5:	c3                   	ret    

c000c5b6 <KeExecuteAtexit()>:
c000c5b6:	53                   	push   ebx
c000c5b7:	31 db                	xor    ebx,ebx
c000c5b9:	83 ec 08             	sub    esp,0x8
c000c5bc:	39 1d 80 9c 02 c0    	cmp    DWORD PTR ds:0xc0029c80,ebx
c000c5c2:	7e 50                	jle    c000c614 <KeExecuteAtexit()+0x5e>
c000c5c4:	8b 04 9d 00 9d 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd6300]
c000c5cb:	85 c0                	test   eax,eax
c000c5cd:	74 42                	je     c000c611 <KeExecuteAtexit()+0x5b>
c000c5cf:	51                   	push   ecx
c000c5d0:	50                   	push   eax
c000c5d1:	53                   	push   ebx
c000c5d2:	68 69 1c 02 c0       	push   0xc0021c69
c000c5d7:	e8 88 a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c5dc:	58                   	pop    eax
c000c5dd:	ff 34 9d a0 9c 02 c0 	push   DWORD PTR [ebx*4-0x3ffd6360]
c000c5e4:	ff 14 9d 00 9d 02 c0 	call   DWORD PTR [ebx*4-0x3ffd6300]
c000c5eb:	c7 04 24 8b 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c8b
c000c5f2:	e8 6d a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c5f7:	c7 04 24 0b 20 02 c0 	mov    DWORD PTR [esp],0xc002200b
c000c5fe:	c7 04 9d 00 9d 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd6300],0x0
c000c609:	e8 56 a9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c60e:	83 c4 10             	add    esp,0x10
c000c611:	43                   	inc    ebx
c000c612:	eb a8                	jmp    c000c5bc <KeExecuteAtexit()+0x6>
c000c614:	83 c4 08             	add    esp,0x8
c000c617:	5b                   	pop    ebx
c000c618:	c3                   	ret    

c000c619 <KeDisplaySplashScreen()>:
c000c619:	53                   	push   ebx
c000c61a:	bb 01 00 00 00       	mov    ebx,0x1
c000c61f:	83 ec 08             	sub    esp,0x8
c000c622:	43                   	inc    ebx
c000c623:	0f be 83 8e 1c 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffde372]
c000c62a:	85 c0                	test   eax,eax
c000c62c:	74 15                	je     c000c643 <KeDisplaySplashScreen()+0x2a>
c000c62e:	83 ec 0c             	sub    esp,0xc
c000c631:	6a 01                	push   0x1
c000c633:	53                   	push   ebx
c000c634:	6a 00                	push   0x0
c000c636:	6a 0f                	push   0xf
c000c638:	50                   	push   eax
c000c639:	e8 4a cf 00 00       	call   c0019588 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c63e:	83 c4 20             	add    esp,0x20
c000c641:	eb df                	jmp    c000c622 <KeDisplaySplashScreen()+0x9>
c000c643:	83 c4 08             	add    esp,0x8
c000c646:	5b                   	pop    ebx
c000c647:	c3                   	ret    

c000c648 <KeSetBootMessage(char const*)>:
c000c648:	57                   	push   edi
c000c649:	56                   	push   esi
c000c64a:	53                   	push   ebx
c000c64b:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c651:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c658:	68 9e 00 00 00       	push   0x9e
c000c65d:	6a 00                	push   0x0
c000c65f:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c663:	56                   	push   esi
c000c664:	e8 87 3e ff ff       	call   c00004f0 <memset>
c000c669:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c66c:	e8 ff 3e ff ff       	call   c0000570 <strlen>
c000c671:	ba 50 00 00 00       	mov    edx,0x50
c000c676:	83 c4 10             	add    esp,0x10
c000c679:	29 c2                	sub    edx,eax
c000c67b:	31 c9                	xor    ecx,ecx
c000c67d:	83 e2 fe             	and    edx,0xfffffffe
c000c680:	01 f2                	add    edx,esi
c000c682:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c687:	84 c0                	test   al,al
c000c689:	74 0a                	je     c000c695 <KeSetBootMessage(char const*)+0x4d>
c000c68b:	80 cc 07             	or     ah,0x7
c000c68e:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c692:	41                   	inc    ecx
c000c693:	eb ed                	jmp    c000c682 <KeSetBootMessage(char const*)+0x3a>
c000c695:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c69a:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c69f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c6a1:	50                   	push   eax
c000c6a2:	50                   	push   eax
c000c6a3:	53                   	push   ebx
c000c6a4:	68 a3 1c 02 c0       	push   0xc0021ca3
c000c6a9:	e8 b6 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6ae:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c6b4:	5b                   	pop    ebx
c000c6b5:	5e                   	pop    esi
c000c6b6:	5f                   	pop    edi
c000c6b7:	c3                   	ret    

c000c6b8 <__cxa_atexit>:
c000c6b8:	31 c0                	xor    eax,eax
c000c6ba:	c3                   	ret    

c000c6bb <__cxa_finalize>:
c000c6bb:	c3                   	ret    

c000c6bc <__stack_chk_fail>:
c000c6bc:	55                   	push   ebp
c000c6bd:	89 e5                	mov    ebp,esp
c000c6bf:	83 ec 10             	sub    esp,0x10
c000c6c2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c6c5:	68 b1 1c 02 c0       	push   0xc0021cb1
c000c6ca:	e8 95 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6cf:	58                   	pop    eax
c000c6d0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c6d3:	5a                   	pop    edx
c000c6d4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c6d7:	68 b1 1c 02 c0       	push   0xc0021cb1
c000c6dc:	e8 83 a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c6e1:	c7 04 24 b9 1c 02 c0 	mov    DWORD PTR [esp],0xc0021cb9
c000c6e8:	e8 e5 25 00 00       	call   c000ecd2 <KePanic(char const*)>
c000c6ed:	83 c4 10             	add    esp,0x10
c000c6f0:	c9                   	leave  
c000c6f1:	c3                   	ret    

c000c6f2 <__cxa_pure_virtual>:
c000c6f2:	83 ec 18             	sub    esp,0x18
c000c6f5:	68 d1 1c 02 c0       	push   0xc0021cd1
c000c6fa:	e8 d3 25 00 00       	call   c000ecd2 <KePanic(char const*)>
c000c6ff:	83 c4 1c             	add    esp,0x1c
c000c702:	c3                   	ret    

c000c703 <operator new[](unsigned long)>:
c000c703:	e9 73 22 00 00       	jmp    c000e97b <malloc>

c000c708 <operator delete(void*, unsigned long)>:
c000c708:	e9 8e 22 00 00       	jmp    c000e99b <rfree>

c000c70d <operator delete[](void*)>:
c000c70d:	e9 89 22 00 00       	jmp    c000e99b <rfree>

c000c712 <operator delete[](void*, unsigned long)>:
c000c712:	e9 84 22 00 00       	jmp    c000e99b <rfree>
c000c717:	90                   	nop

c000c718 <CUnlockScheduler>:
c000c718:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c71d:	83 e8 01             	sub    eax,0x1
c000c720:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c725:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c72a:	85 c0                	test   eax,eax
c000c72c:	75 02                	jne    c000c730 <CUnlockScheduler+0x18>
c000c72e:	fb                   	sti    
c000c72f:	90                   	nop
c000c730:	90                   	nop
c000c731:	c3                   	ret    
c000c732:	66 90                	xchg   ax,ax

c000c734 <CLockScheduler>:
c000c734:	fa                   	cli    
c000c735:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000c73a:	83 c0 01             	add    eax,0x1
c000c73d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000c742:	90                   	nop
c000c743:	c3                   	ret    

c000c744 <CPrintf>:
c000c744:	83 ec 0c             	sub    esp,0xc
c000c747:	83 ec 08             	sub    esp,0x8
c000c74a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c74e:	68 e4 1c 02 c0       	push   0xc0021ce4
c000c753:	e8 0c a8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c758:	83 c4 10             	add    esp,0x10
c000c75b:	90                   	nop
c000c75c:	83 c4 0c             	add    esp,0xc
c000c75f:	c3                   	ret    

c000c760 <CmOpen(char const*)>:
c000c760:	57                   	push   edi
c000c761:	56                   	push   esi
c000c762:	53                   	push   ebx
c000c763:	83 ec 1c             	sub    esp,0x1c
c000c766:	6a 30                	push   0x30
c000c768:	e8 0e 22 00 00       	call   c000e97b <malloc>
c000c76d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c774:	89 c3                	mov    ebx,eax
c000c776:	e8 00 22 00 00       	call   c000e97b <malloc>
c000c77b:	83 c4 0c             	add    esp,0xc
c000c77e:	89 c6                	mov    esi,eax
c000c780:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000c786:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000c78a:	50                   	push   eax
c000c78b:	e8 82 b9 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000c790:	83 c4 0c             	add    esp,0xc
c000c793:	89 33                	mov    DWORD PTR [ebx],esi
c000c795:	8d 44 24 07          	lea    eax,[esp+0x7]
c000c799:	50                   	push   eax
c000c79a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000c79e:	50                   	push   eax
c000c79f:	56                   	push   esi
c000c7a0:	e8 8d bc ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c000c7a5:	5a                   	pop    edx
c000c7a6:	59                   	pop    ecx
c000c7a7:	6a 01                	push   0x1
c000c7a9:	ff 33                	push   DWORD PTR [ebx]
c000c7ab:	e8 80 b9 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c7b0:	5e                   	pop    esi
c000c7b1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c7b5:	e8 c1 21 00 00       	call   c000e97b <malloc>
c000c7ba:	5a                   	pop    edx
c000c7bb:	89 c7                	mov    edi,eax
c000c7bd:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c7c1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7c3:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7c5:	56                   	push   esi
c000c7c6:	57                   	push   edi
c000c7c7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7cb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7cf:	50                   	push   eax
c000c7d0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c7d3:	83 c4 14             	add    esp,0x14
c000c7d6:	ff 33                	push   DWORD PTR [ebx]
c000c7d8:	e8 b1 b9 ff ff       	call   c000818e <File::close()>
c000c7dd:	59                   	pop    ecx
c000c7de:	58                   	pop    eax
c000c7df:	6a 13                	push   0x13
c000c7e1:	ff 33                	push   DWORD PTR [ebx]
c000c7e3:	e8 48 b9 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000c7e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7ea:	8b 10                	mov    edx,DWORD PTR [eax]
c000c7ec:	89 34 24             	mov    DWORD PTR [esp],esi
c000c7ef:	57                   	push   edi
c000c7f0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c7f8:	50                   	push   eax
c000c7f9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c7fc:	83 c4 14             	add    esp,0x14
c000c7ff:	57                   	push   edi
c000c800:	e8 86 21 00 00       	call   c000e98b <free>
c000c805:	83 c4 10             	add    esp,0x10
c000c808:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c80b:	75 10                	jne    c000c81d <CmOpen(char const*)+0xbd>
c000c80d:	83 ec 0c             	sub    esp,0xc
c000c810:	68 e7 1c 02 c0       	push   0xc0021ce7
c000c815:	e8 b8 24 00 00       	call   c000ecd2 <KePanic(char const*)>
c000c81a:	83 c4 10             	add    esp,0x10
c000c81d:	8d 7b 05             	lea    edi,[ebx+0x5]
c000c820:	50                   	push   eax
c000c821:	6a 00                	push   0x0
c000c823:	6a 00                	push   0x0
c000c825:	ff 33                	push   DWORD PTR [ebx]
c000c827:	e8 c2 b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c82c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c82e:	8b 10                	mov    edx,DWORD PTR [eax]
c000c830:	89 34 24             	mov    DWORD PTR [esp],esi
c000c833:	57                   	push   edi
c000c834:	6a 00                	push   0x0
c000c836:	6a 2b                	push   0x2b
c000c838:	50                   	push   eax
c000c839:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c83c:	83 c4 1c             	add    esp,0x1c
c000c83f:	6a 00                	push   0x0
c000c841:	6a 00                	push   0x0
c000c843:	ff 33                	push   DWORD PTR [ebx]
c000c845:	e8 a4 b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c84a:	83 c4 0c             	add    esp,0xc
c000c84d:	6a 08                	push   0x8
c000c84f:	68 f8 1c 02 c0       	push   0xc0021cf8
c000c854:	57                   	push   edi
c000c855:	e8 26 3b ff ff       	call   c0000380 <memcmp>
c000c85a:	83 c4 10             	add    esp,0x10
c000c85d:	85 c0                	test   eax,eax
c000c85f:	74 10                	je     c000c871 <CmOpen(char const*)+0x111>
c000c861:	83 ec 0c             	sub    esp,0xc
c000c864:	68 01 1d 02 c0       	push   0xc0021d01
c000c869:	e8 64 24 00 00       	call   c000ecd2 <KePanic(char const*)>
c000c86e:	83 c4 10             	add    esp,0x10
c000c871:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000c875:	89 d8                	mov    eax,ebx
c000c877:	83 c4 10             	add    esp,0x10
c000c87a:	5b                   	pop    ebx
c000c87b:	5e                   	pop    esi
c000c87c:	5f                   	pop    edi
c000c87d:	c3                   	ret    

c000c87e <CmClose(Reghive_Tag*)>:
c000c87e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c882:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000c886:	74 0b                	je     c000c893 <CmClose(Reghive_Tag*)+0x15>
c000c888:	8b 00                	mov    eax,DWORD PTR [eax]
c000c88a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c88e:	e9 fb b8 ff ff       	jmp    c000818e <File::close()>
c000c893:	c3                   	ret    

c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000c894:	53                   	push   ebx
c000c895:	83 ec 18             	sub    esp,0x18
c000c898:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c89c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c8a0:	74 29                	je     c000c8cb <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c8a2:	50                   	push   eax
c000c8a3:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c8a8:	99                   	cdq    
c000c8a9:	52                   	push   edx
c000c8aa:	50                   	push   eax
c000c8ab:	ff 33                	push   DWORD PTR [ebx]
c000c8ad:	e8 3c b9 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c8b2:	5a                   	pop    edx
c000c8b3:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c8b5:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c8b9:	8b 10                	mov    edx,DWORD PTR [eax]
c000c8bb:	51                   	push   ecx
c000c8bc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c8c0:	6a 00                	push   0x0
c000c8c2:	6a 2b                	push   0x2b
c000c8c4:	50                   	push   eax
c000c8c5:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000c8c8:	83 c4 20             	add    esp,0x20
c000c8cb:	83 c4 18             	add    esp,0x18
c000c8ce:	5b                   	pop    ebx
c000c8cf:	c3                   	ret    

c000c8d0 <CmGetString(Reghive_Tag*, int, char*)>:
c000c8d0:	55                   	push   ebp
c000c8d1:	57                   	push   edi
c000c8d2:	56                   	push   esi
c000c8d3:	53                   	push   ebx
c000c8d4:	31 db                	xor    ebx,ebx
c000c8d6:	83 ec 70             	sub    esp,0x70
c000c8d9:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000c8e0:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000c8e4:	50                   	push   eax
c000c8e5:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000c8ec:	55                   	push   ebp
c000c8ed:	e8 a2 ff ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c8f2:	83 c4 10             	add    esp,0x10
c000c8f5:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000c8fa:	c1 e0 08             	shl    eax,0x8
c000c8fd:	89 c2                	mov    edx,eax
c000c8ff:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000c904:	09 d0                	or     eax,edx
c000c906:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000c90b:	c1 e0 08             	shl    eax,0x8
c000c90e:	09 d0                	or     eax,edx
c000c910:	74 25                	je     c000c937 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000c912:	6b fb 0d             	imul   edi,ebx,0xd
c000c915:	52                   	push   edx
c000c916:	8d 54 24 39          	lea    edx,[esp+0x39]
c000c91a:	52                   	push   edx
c000c91b:	50                   	push   eax
c000c91c:	55                   	push   ebp
c000c91d:	e8 72 ff ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c922:	8d 74 24 49          	lea    esi,[esp+0x49]
c000c926:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000c92d:	b9 27 00 00 00       	mov    ecx,0x27
c000c932:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c934:	83 c4 10             	add    esp,0x10
c000c937:	83 c3 03             	add    ebx,0x3
c000c93a:	83 fb 15             	cmp    ebx,0x15
c000c93d:	75 b6                	jne    c000c8f5 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000c93f:	83 c4 6c             	add    esp,0x6c
c000c942:	5b                   	pop    ebx
c000c943:	5e                   	pop    esi
c000c944:	5f                   	pop    edi
c000c945:	5d                   	pop    ebp
c000c946:	c3                   	ret    

c000c947 <CmEnterDirectory(Reghive_Tag*, int)>:
c000c947:	83 ec 40             	sub    esp,0x40
c000c94a:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c94e:	50                   	push   eax
c000c94f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c953:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c957:	e8 38 ff ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	83 c8 ff             	or     eax,0xffffffff
c000c962:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000c967:	75 19                	jne    c000c982 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000c969:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000c96e:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000c973:	c1 e0 08             	shl    eax,0x8
c000c976:	09 c2                	or     edx,eax
c000c978:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000c97d:	c1 e0 10             	shl    eax,0x10
c000c980:	09 d0                	or     eax,edx
c000c982:	83 c4 3c             	add    esp,0x3c
c000c985:	c3                   	ret    

c000c986 <CmGetNext(Reghive_Tag*, int)>:
c000c986:	83 ec 40             	sub    esp,0x40
c000c989:	8d 44 24 09          	lea    eax,[esp+0x9]
c000c98d:	50                   	push   eax
c000c98e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c992:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c996:	e8 f9 fe ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000c99b:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000c9a0:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000c9a5:	c1 e0 08             	shl    eax,0x8
c000c9a8:	09 c2                	or     edx,eax
c000c9aa:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000c9af:	83 c4 4c             	add    esp,0x4c
c000c9b2:	c1 e0 10             	shl    eax,0x10
c000c9b5:	09 d0                	or     eax,edx
c000c9b7:	c3                   	ret    

c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000c9b8:	53                   	push   ebx
c000c9b9:	83 ec 18             	sub    esp,0x18
c000c9bc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c9c0:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000c9c4:	74 29                	je     c000c9ef <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000c9c6:	50                   	push   eax
c000c9c7:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000c9cc:	99                   	cdq    
c000c9cd:	52                   	push   edx
c000c9ce:	50                   	push   eax
c000c9cf:	ff 33                	push   DWORD PTR [ebx]
c000c9d1:	e8 18 b8 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000c9d6:	5a                   	pop    edx
c000c9d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c9d9:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000c9dd:	8b 10                	mov    edx,DWORD PTR [eax]
c000c9df:	51                   	push   ecx
c000c9e0:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000c9e4:	6a 00                	push   0x0
c000c9e6:	6a 2b                	push   0x2b
c000c9e8:	50                   	push   eax
c000c9e9:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000c9ec:	83 c4 20             	add    esp,0x20
c000c9ef:	83 c4 18             	add    esp,0x18
c000c9f2:	5b                   	pop    ebx
c000c9f3:	c3                   	ret    

c000c9f4 <CmFreeExtent(Reghive_Tag*, int)>:
c000c9f4:	53                   	push   ebx
c000c9f5:	83 ec 3c             	sub    esp,0x3c
c000c9f8:	6a 2b                	push   0x2b
c000c9fa:	6a 00                	push   0x0
c000c9fc:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ca00:	53                   	push   ebx
c000ca01:	e8 ea 3a ff ff       	call   c00004f0 <memset>
c000ca06:	83 c4 0c             	add    esp,0xc
c000ca09:	53                   	push   ebx
c000ca0a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca0e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ca12:	e8 a1 ff ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ca17:	83 c4 48             	add    esp,0x48
c000ca1a:	5b                   	pop    ebx
c000ca1b:	c3                   	ret    

c000ca1c <CmUpdateHeader(Reghive_Tag*)>:
c000ca1c:	83 ec 0c             	sub    esp,0xc
c000ca1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca23:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000ca27:	74 10                	je     c000ca39 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000ca29:	52                   	push   edx
c000ca2a:	8d 50 05             	lea    edx,[eax+0x5]
c000ca2d:	52                   	push   edx
c000ca2e:	6a 00                	push   0x0
c000ca30:	50                   	push   eax
c000ca31:	e8 82 ff ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ca36:	83 c4 10             	add    esp,0x10
c000ca39:	83 c4 0c             	add    esp,0xc
c000ca3c:	c3                   	ret    

c000ca3d <CmExpand(Reghive_Tag*, int)>:
c000ca3d:	57                   	push   edi
c000ca3e:	56                   	push   esi
c000ca3f:	83 ce ff             	or     esi,0xffffffff
c000ca42:	53                   	push   ebx
c000ca43:	83 ec 30             	sub    esp,0x30
c000ca46:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ca4a:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ca4e:	74 5f                	je     c000caaf <CmExpand(Reghive_Tag*, int)+0x72>
c000ca50:	31 d2                	xor    edx,edx
c000ca52:	31 f6                	xor    esi,esi
c000ca54:	50                   	push   eax
c000ca55:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000ca59:	52                   	push   edx
c000ca5a:	50                   	push   eax
c000ca5b:	ff 33                	push   DWORD PTR [ebx]
c000ca5d:	e8 8c b7 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000ca62:	83 c4 0c             	add    esp,0xc
c000ca65:	6a 2b                	push   0x2b
c000ca67:	6a 00                	push   0x0
c000ca69:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000ca6d:	57                   	push   edi
c000ca6e:	e8 7d 3a ff ff       	call   c00004f0 <memset>
c000ca73:	83 c4 10             	add    esp,0x10
c000ca76:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ca7a:	7d 1b                	jge    c000ca97 <CmExpand(Reghive_Tag*, int)+0x5a>
c000ca7c:	83 ec 0c             	sub    esp,0xc
c000ca7f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca81:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000ca85:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca87:	46                   	inc    esi
c000ca88:	51                   	push   ecx
c000ca89:	57                   	push   edi
c000ca8a:	6a 00                	push   0x0
c000ca8c:	6a 2b                	push   0x2b
c000ca8e:	50                   	push   eax
c000ca8f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ca92:	83 c4 20             	add    esp,0x20
c000ca95:	eb df                	jmp    c000ca76 <CmExpand(Reghive_Tag*, int)+0x39>
c000ca97:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ca9b:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000ca9e:	83 ec 0c             	sub    esp,0xc
c000caa1:	01 f2                	add    edx,esi
c000caa3:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000caa6:	53                   	push   ebx
c000caa7:	e8 70 ff ff ff       	call   c000ca1c <CmUpdateHeader(Reghive_Tag*)>
c000caac:	83 c4 10             	add    esp,0x10
c000caaf:	83 c4 30             	add    esp,0x30
c000cab2:	89 f0                	mov    eax,esi
c000cab4:	5b                   	pop    ebx
c000cab5:	5e                   	pop    esi
c000cab6:	5f                   	pop    edi
c000cab7:	c3                   	ret    

c000cab8 <CmFindUnusedExtent(Reghive_Tag*)>:
c000cab8:	55                   	push   ebp
c000cab9:	57                   	push   edi
c000caba:	56                   	push   esi
c000cabb:	53                   	push   ebx
c000cabc:	83 cb ff             	or     ebx,0xffffffff
c000cabf:	83 ec 1c             	sub    esp,0x1c
c000cac2:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cac6:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000caca:	74 68                	je     c000cb34 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cacc:	be 2b 00 00 00       	mov    esi,0x2b
c000cad1:	51                   	push   ecx
c000cad2:	31 ff                	xor    edi,edi
c000cad4:	6a 00                	push   0x0
c000cad6:	31 db                	xor    ebx,ebx
c000cad8:	6a 00                	push   0x0
c000cada:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cadd:	e8 0c b7 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000cae2:	83 c4 10             	add    esp,0x10
c000cae5:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000cae8:	76 3b                	jbe    c000cb25 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000caea:	83 ec 0c             	sub    esp,0xc
c000caed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000caf0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000caf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000caf6:	51                   	push   ecx
c000caf7:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000cafb:	51                   	push   ecx
c000cafc:	6a 00                	push   0x0
c000cafe:	6a 01                	push   0x1
c000cb00:	50                   	push   eax
c000cb01:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb04:	83 c4 20             	add    esp,0x20
c000cb07:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000cb0c:	74 26                	je     c000cb34 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cb0e:	43                   	inc    ebx
c000cb0f:	52                   	push   edx
c000cb10:	57                   	push   edi
c000cb11:	56                   	push   esi
c000cb12:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cb15:	e8 d4 b6 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c000cb1a:	83 c6 2b             	add    esi,0x2b
c000cb1d:	83 d7 00             	adc    edi,0x0
c000cb20:	83 c4 10             	add    esp,0x10
c000cb23:	eb c0                	jmp    c000cae5 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cb25:	50                   	push   eax
c000cb26:	50                   	push   eax
c000cb27:	6a 40                	push   0x40
c000cb29:	55                   	push   ebp
c000cb2a:	e8 0e ff ff ff       	call   c000ca3d <CmExpand(Reghive_Tag*, int)>
c000cb2f:	83 c4 10             	add    esp,0x10
c000cb32:	89 c3                	mov    ebx,eax
c000cb34:	83 c4 1c             	add    esp,0x1c
c000cb37:	89 d8                	mov    eax,ebx
c000cb39:	5b                   	pop    ebx
c000cb3a:	5e                   	pop    esi
c000cb3b:	5f                   	pop    edi
c000cb3c:	5d                   	pop    ebp
c000cb3d:	c3                   	ret    

c000cb3e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000cb3e:	55                   	push   ebp
c000cb3f:	57                   	push   edi
c000cb40:	56                   	push   esi
c000cb41:	53                   	push   ebx
c000cb42:	81 ec 88 00 00 00    	sub    esp,0x88
c000cb48:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cb4f:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb56:	e8 5d ff ff ff       	call   c000cab8 <CmFindUnusedExtent(Reghive_Tag*)>
c000cb5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cb5f:	83 c4 0c             	add    esp,0xc
c000cb62:	6a 2b                	push   0x2b
c000cb64:	6a 00                	push   0x0
c000cb66:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cb6a:	55                   	push   ebp
c000cb6b:	e8 80 39 ff ff       	call   c00004f0 <memset>
c000cb70:	83 c4 10             	add    esp,0x10
c000cb73:	85 db                	test   ebx,ebx
c000cb75:	74 12                	je     c000cb89 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cb77:	51                   	push   ecx
c000cb78:	55                   	push   ebp
c000cb79:	53                   	push   ebx
c000cb7a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cb81:	e8 0e fd ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cb86:	83 c4 10             	add    esp,0x10
c000cb89:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000cb8d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cb94:	b9 2b 00 00 00       	mov    ecx,0x2b
c000cb99:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cb9b:	85 db                	test   ebx,ebx
c000cb9d:	74 49                	je     c000cbe8 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000cb9f:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000cba4:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000cba9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cbad:	c1 e0 08             	shl    eax,0x8
c000cbb0:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000cbb6:	09 c8                	or     eax,ecx
c000cbb8:	74 11                	je     c000cbcb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000cbba:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000cbbe:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000cbc2:	c1 e8 10             	shr    eax,0x10
c000cbc5:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000cbc9:	eb 0f                	jmp    c000cbda <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000cbcb:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cbd0:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cbd5:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cbda:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000cbde:	c1 ea 08             	shr    edx,0x8
c000cbe1:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000cbe6:	eb 0f                	jmp    c000cbf7 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000cbe8:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000cbed:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000cbf2:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000cbf7:	52                   	push   edx
c000cbf8:	8d 44 24 49          	lea    eax,[esp+0x49]
c000cbfc:	50                   	push   eax
c000cbfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc01:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc08:	e8 ab fd ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc0d:	83 c4 10             	add    esp,0x10
c000cc10:	85 db                	test   ebx,ebx
c000cc12:	74 12                	je     c000cc26 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000cc14:	50                   	push   eax
c000cc15:	55                   	push   ebp
c000cc16:	53                   	push   ebx
c000cc17:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc1e:	e8 95 fd ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc23:	83 c4 10             	add    esp,0x10
c000cc26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cc2a:	83 c4 7c             	add    esp,0x7c
c000cc2d:	5b                   	pop    ebx
c000cc2e:	5e                   	pop    esi
c000cc2f:	5f                   	pop    edi
c000cc30:	5d                   	pop    ebp
c000cc31:	c3                   	ret    

c000cc32 <CmSetString(Reghive_Tag*, int, char const*)>:
c000cc32:	55                   	push   ebp
c000cc33:	57                   	push   edi
c000cc34:	56                   	push   esi
c000cc35:	53                   	push   ebx
c000cc36:	bb 27 00 00 00       	mov    ebx,0x27
c000cc3b:	81 ec 88 00 00 00    	sub    esp,0x88
c000cc41:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cc48:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cc4f:	e8 1c 39 ff ff       	call   c0000570 <strlen>
c000cc54:	8d 48 26             	lea    ecx,[eax+0x26]
c000cc57:	89 c8                	mov    eax,ecx
c000cc59:	99                   	cdq    
c000cc5a:	f7 fb                	idiv   ebx
c000cc5c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cc60:	83 c4 10             	add    esp,0x10
c000cc63:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cc69:	7e 10                	jle    c000cc7b <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000cc6b:	83 ec 0c             	sub    esp,0xc
c000cc6e:	68 12 1d 02 c0       	push   0xc0021d12
c000cc73:	e8 5a 20 00 00       	call   c000ecd2 <KePanic(char const*)>
c000cc78:	83 c4 10             	add    esp,0x10
c000cc7b:	31 ff                	xor    edi,edi
c000cc7d:	50                   	push   eax
c000cc7e:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cc82:	53                   	push   ebx
c000cc83:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cc8a:	56                   	push   esi
c000cc8b:	e8 04 fc ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc90:	83 c4 10             	add    esp,0x10
c000cc93:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000cc97:	89 d0                	mov    eax,edx
c000cc99:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000cc9d:	c1 e0 08             	shl    eax,0x8
c000cca0:	09 c2                	or     edx,eax
c000cca2:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cca6:	c1 e2 08             	shl    edx,0x8
c000cca9:	09 c2                	or     edx,eax
c000ccab:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000ccaf:	7e 76                	jle    c000cd27 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000ccb1:	85 d2                	test   edx,edx
c000ccb3:	75 25                	jne    c000ccda <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000ccb5:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000ccba:	8d 44 24 45          	lea    eax,[esp+0x45]
c000ccbe:	50                   	push   eax
c000ccbf:	6a 00                	push   0x0
c000ccc1:	6a 00                	push   0x0
c000ccc3:	56                   	push   esi
c000ccc4:	e8 75 fe ff ff       	call   c000cb3e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ccc9:	83 c4 10             	add    esp,0x10
c000cccc:	89 c2                	mov    edx,eax
c000ccce:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000ccd1:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000ccd4:	c1 f8 10             	sar    eax,0x10
c000ccd7:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000ccda:	55                   	push   ebp
c000ccdb:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000ccdf:	55                   	push   ebp
c000cce0:	52                   	push   edx
c000cce1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cce5:	56                   	push   esi
c000cce6:	e8 a9 fb ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cceb:	83 c4 0c             	add    esp,0xc
c000ccee:	6a 27                	push   0x27
c000ccf0:	6a 00                	push   0x0
c000ccf2:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000ccf6:	51                   	push   ecx
c000ccf7:	e8 f4 37 ff ff       	call   c00004f0 <memset>
c000ccfc:	83 c4 0c             	add    esp,0xc
c000ccff:	6b c7 27             	imul   eax,edi,0x27
c000cd02:	6a 27                	push   0x27
c000cd04:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000cd0b:	50                   	push   eax
c000cd0c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cd10:	51                   	push   ecx
c000cd11:	e8 6a 39 ff ff       	call   c0000680 <strncpy>
c000cd16:	83 c4 0c             	add    esp,0xc
c000cd19:	55                   	push   ebp
c000cd1a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cd1e:	52                   	push   edx
c000cd1f:	56                   	push   esi
c000cd20:	e8 93 fc ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd25:	eb 19                	jmp    c000cd40 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000cd27:	85 d2                	test   edx,edx
c000cd29:	74 18                	je     c000cd43 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000cd2b:	51                   	push   ecx
c000cd2c:	51                   	push   ecx
c000cd2d:	52                   	push   edx
c000cd2e:	56                   	push   esi
c000cd2f:	e8 c0 fc ff ff       	call   c000c9f4 <CmFreeExtent(Reghive_Tag*, int)>
c000cd34:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cd38:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cd3c:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cd40:	83 c4 10             	add    esp,0x10
c000cd43:	47                   	inc    edi
c000cd44:	83 c3 03             	add    ebx,0x3
c000cd47:	83 ff 07             	cmp    edi,0x7
c000cd4a:	0f 85 43 ff ff ff    	jne    c000cc93 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cd50:	50                   	push   eax
c000cd51:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cd55:	50                   	push   eax
c000cd56:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cd5d:	56                   	push   esi
c000cd5e:	e8 55 fc ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cd63:	81 c4 8c 00 00 00    	add    esp,0x8c
c000cd69:	5b                   	pop    ebx
c000cd6a:	5e                   	pop    esi
c000cd6b:	5f                   	pop    edi
c000cd6c:	5d                   	pop    ebp
c000cd6d:	c3                   	ret    

c000cd6e <CmGetMatch(char*, char*, bool, bool*)>:
c000cd6e:	56                   	push   esi
c000cd6f:	53                   	push   ebx
c000cd70:	50                   	push   eax
c000cd71:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cd75:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd7a:	74 25                	je     c000cda1 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000cd7c:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cd7f:	31 db                	xor    ebx,ebx
c000cd81:	50                   	push   eax
c000cd82:	50                   	push   eax
c000cd83:	8d 04 9d c0 3a 02 c0 	lea    eax,[ebx*4-0x3ffdc540]
c000cd8a:	50                   	push   eax
c000cd8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd8f:	e8 bc 39 ff ff       	call   c0000750 <strcmp>
c000cd94:	83 c4 10             	add    esp,0x10
c000cd97:	85 c0                	test   eax,eax
c000cd99:	74 2e                	je     c000cdc9 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cd9b:	43                   	inc    ebx
c000cd9c:	83 fb 3f             	cmp    ebx,0x3f
c000cd9f:	75 e0                	jne    c000cd81 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000cda1:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000cda4:	31 db                	xor    ebx,ebx
c000cda6:	8d 04 9d c0 3a 02 c0 	lea    eax,[ebx*4-0x3ffdc540]
c000cdad:	51                   	push   ecx
c000cdae:	51                   	push   ecx
c000cdaf:	50                   	push   eax
c000cdb0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000cdb4:	e8 97 39 ff ff       	call   c0000750 <strcmp>
c000cdb9:	83 c4 10             	add    esp,0x10
c000cdbc:	85 c0                	test   eax,eax
c000cdbe:	74 09                	je     c000cdc9 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000cdc0:	43                   	inc    ebx
c000cdc1:	83 fb 3f             	cmp    ebx,0x3f
c000cdc4:	75 e0                	jne    c000cda6 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000cdc6:	83 cb ff             	or     ebx,0xffffffff
c000cdc9:	89 d8                	mov    eax,ebx
c000cdcb:	5a                   	pop    edx
c000cdcc:	5b                   	pop    ebx
c000cdcd:	5e                   	pop    esi
c000cdce:	c3                   	ret    

c000cdcf <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000cdcf:	55                   	push   ebp
c000cdd0:	31 c0                	xor    eax,eax
c000cdd2:	57                   	push   edi
c000cdd3:	56                   	push   esi
c000cdd4:	53                   	push   ebx
c000cdd5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cdd9:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000cddd:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000cddf:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000cde3:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000cde6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cdea:	83 fd 1f             	cmp    ebp,0x1f
c000cded:	7f 0b                	jg     c000cdfa <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000cdef:	0f b6 c2             	movzx  eax,dl
c000cdf2:	d3 e0                	shl    eax,cl
c000cdf4:	09 07                	or     DWORD PTR [edi],eax
c000cdf6:	b0 01                	mov    al,0x1
c000cdf8:	01 33                	add    DWORD PTR [ebx],esi
c000cdfa:	5b                   	pop    ebx
c000cdfb:	5e                   	pop    esi
c000cdfc:	5f                   	pop    edi
c000cdfd:	5d                   	pop    ebp
c000cdfe:	c3                   	ret    

c000cdff <CmGetShift(unsigned int*, int*, int, bool*)>:
c000cdff:	57                   	push   edi
c000ce00:	56                   	push   esi
c000ce01:	53                   	push   ebx
c000ce02:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ce06:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ce0a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000ce0e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ce12:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000ce14:	7c 17                	jl     c000ce2d <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000ce16:	8b 17                	mov    edx,DWORD PTR [edi]
c000ce18:	b8 01 00 00 00       	mov    eax,0x1
c000ce1d:	d3 e0                	shl    eax,cl
c000ce1f:	48                   	dec    eax
c000ce20:	21 d0                	and    eax,edx
c000ce22:	d3 ea                	shr    edx,cl
c000ce24:	89 17                	mov    DWORD PTR [edi],edx
c000ce26:	29 0b                	sub    DWORD PTR [ebx],ecx
c000ce28:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000ce2b:	eb 05                	jmp    c000ce32 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000ce2d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000ce30:	31 c0                	xor    eax,eax
c000ce32:	5b                   	pop    ebx
c000ce33:	5e                   	pop    esi
c000ce34:	5f                   	pop    edi
c000ce35:	c3                   	ret    

c000ce36 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000ce36:	83 ec 40             	sub    esp,0x40
c000ce39:	8d 44 24 09          	lea    eax,[esp+0x9]
c000ce3d:	50                   	push   eax
c000ce3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ce46:	e8 49 fa ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce4b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ce4f:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000ce53:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000ce57:	89 10                	mov    DWORD PTR [eax],edx
c000ce59:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000ce5c:	83 c4 4c             	add    esp,0x4c
c000ce5f:	c3                   	ret    

c000ce60 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000ce60:	55                   	push   ebp
c000ce61:	57                   	push   edi
c000ce62:	56                   	push   esi
c000ce63:	53                   	push   ebx
c000ce64:	83 ec 40             	sub    esp,0x40
c000ce67:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000ce6b:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000ce6f:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ce73:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000ce77:	53                   	push   ebx
c000ce78:	56                   	push   esi
c000ce79:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce7d:	e8 12 fa ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce82:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000ce86:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000ce8a:	83 c4 0c             	add    esp,0xc
c000ce8d:	53                   	push   ebx
c000ce8e:	56                   	push   esi
c000ce8f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ce93:	e8 20 fb ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce98:	83 c4 4c             	add    esp,0x4c
c000ce9b:	5b                   	pop    ebx
c000ce9c:	5e                   	pop    esi
c000ce9d:	5f                   	pop    edi
c000ce9e:	5d                   	pop    ebp
c000ce9f:	c3                   	ret    

c000cea0 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000cea0:	55                   	push   ebp
c000cea1:	57                   	push   edi
c000cea2:	56                   	push   esi
c000cea3:	31 f6                	xor    esi,esi
c000cea5:	53                   	push   ebx
c000cea6:	31 db                	xor    ebx,ebx
c000cea8:	83 ec 40             	sub    esp,0x40
c000ceab:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000ceb3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000cebb:	6a 12                	push   0x12
c000cebd:	68 ee 00 00 00       	push   0xee
c000cec2:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cec6:	e8 25 36 ff ff       	call   c00004f0 <memset>
c000cecb:	83 c4 10             	add    esp,0x10
c000cece:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000ced2:	6a 08                	push   0x8
c000ced4:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ced8:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000cedc:	50                   	push   eax
c000cedd:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cee1:	55                   	push   ebp
c000cee2:	57                   	push   edi
c000cee3:	e8 e7 fe ff ff       	call   c000cdcf <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000ceef:	50                   	push   eax
c000cef0:	6a 06                	push   0x6
c000cef2:	55                   	push   ebp
c000cef3:	57                   	push   edi
c000cef4:	e8 06 ff ff ff       	call   c000cdff <CmGetShift(unsigned int*, int*, int, bool*)>
c000cef9:	83 c4 10             	add    esp,0x10
c000cefc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000cf01:	74 07                	je     c000cf0a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000cf03:	46                   	inc    esi
c000cf04:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000cf08:	eb e1                	jmp    c000ceeb <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000cf0a:	43                   	inc    ebx
c000cf0b:	83 fb 12             	cmp    ebx,0x12
c000cf0e:	75 c2                	jne    c000ced2 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000cf10:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000cf14:	31 db                	xor    ebx,ebx
c000cf16:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000cf19:	50                   	push   eax
c000cf1a:	50                   	push   eax
c000cf1b:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000cf20:	43                   	inc    ebx
c000cf21:	8d 04 85 c0 3a 02 c0 	lea    eax,[eax*4-0x3ffdc540]
c000cf28:	50                   	push   eax
c000cf29:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000cf2d:	e8 0e 39 ff ff       	call   c0000840 <strcat>
c000cf32:	83 c4 10             	add    esp,0x10
c000cf35:	83 fb 18             	cmp    ebx,0x18
c000cf38:	75 df                	jne    c000cf19 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000cf3a:	83 c4 3c             	add    esp,0x3c
c000cf3d:	31 c0                	xor    eax,eax
c000cf3f:	5b                   	pop    ebx
c000cf40:	5e                   	pop    esi
c000cf41:	5f                   	pop    edi
c000cf42:	5d                   	pop    ebp
c000cf43:	c3                   	ret    

c000cf44 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000cf44:	83 ec 40             	sub    esp,0x40
c000cf47:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cf4b:	50                   	push   eax
c000cf4c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cf54:	e8 3b f9 ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cf59:	58                   	pop    eax
c000cf5a:	5a                   	pop    edx
c000cf5b:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000cf5f:	8d 44 24 15          	lea    eax,[esp+0x15]
c000cf63:	50                   	push   eax
c000cf64:	e8 37 ff ff ff       	call   c000cea0 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000cf69:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000cf6e:	83 c4 4c             	add    esp,0x4c
c000cf71:	c3                   	ret    

c000cf72 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000cf72:	55                   	push   ebp
c000cf73:	57                   	push   edi
c000cf74:	56                   	push   esi
c000cf75:	53                   	push   ebx
c000cf76:	31 db                	xor    ebx,ebx
c000cf78:	83 ec 70             	sub    esp,0x70
c000cf7b:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000cf82:	6a 30                	push   0x30
c000cf84:	6a 00                	push   0x0
c000cf86:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000cf8a:	56                   	push   esi
c000cf8b:	e8 60 35 ff ff       	call   c00004f0 <memset>
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	83 ec 0c             	sub    esp,0xc
c000cf96:	57                   	push   edi
c000cf97:	e8 d4 35 ff ff       	call   c0000570 <strlen>
c000cf9c:	83 c4 10             	add    esp,0x10
c000cf9f:	39 d8                	cmp    eax,ebx
c000cfa1:	76 16                	jbe    c000cfb9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000cfa3:	83 ec 0c             	sub    esp,0xc
c000cfa6:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000cfaa:	50                   	push   eax
c000cfab:	e8 80 39 ff ff       	call   c0000930 <toupper>
c000cfb0:	83 c4 10             	add    esp,0x10
c000cfb3:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000cfb6:	43                   	inc    ebx
c000cfb7:	eb da                	jmp    c000cf93 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000cfb9:	31 f6                	xor    esi,esi
c000cfbb:	52                   	push   edx
c000cfbc:	31 ff                	xor    edi,edi
c000cfbe:	6a 18                	push   0x18
c000cfc0:	6a 3f                	push   0x3f
c000cfc2:	8d 44 24 24          	lea    eax,[esp+0x24]
c000cfc6:	50                   	push   eax
c000cfc7:	e8 24 35 ff ff       	call   c00004f0 <memset>
c000cfcc:	83 c4 10             	add    esp,0x10
c000cfcf:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000cfd3:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000cfd7:	84 c0                	test   al,al
c000cfd9:	0f 84 b0 00 00 00    	je     c000d08f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000cfdf:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000cfe3:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000cfe8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000cfec:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000cff1:	8d 6e 01             	lea    ebp,[esi+0x1]
c000cff4:	83 ec 0c             	sub    esp,0xc
c000cff7:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000cffb:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000cfff:	53                   	push   ebx
c000d000:	e8 6b 35 ff ff       	call   c0000570 <strlen>
c000d005:	83 c4 10             	add    esp,0x10
c000d008:	85 c0                	test   eax,eax
c000d00a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d00e:	74 0b                	je     c000d01b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000d010:	50                   	push   eax
c000d011:	6a 01                	push   0x1
c000d013:	53                   	push   ebx
c000d014:	8d 44 24 20          	lea    eax,[esp+0x20]
c000d018:	50                   	push   eax
c000d019:	eb 0a                	jmp    c000d025 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000d01b:	50                   	push   eax
c000d01c:	6a 00                	push   0x0
c000d01e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000d022:	50                   	push   eax
c000d023:	6a 00                	push   0x0
c000d025:	e8 44 fd ff ff       	call   c000cd6e <CmGetMatch(char*, char*, bool, bool*)>
c000d02a:	83 c4 10             	add    esp,0x10
c000d02d:	83 f8 ff             	cmp    eax,0xffffffff
c000d030:	75 1a                	jne    c000d04c <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000d032:	83 ec 0c             	sub    esp,0xc
c000d035:	68 27 1d 02 c0       	push   0xc0021d27
c000d03a:	e8 93 1c 00 00       	call   c000ecd2 <KePanic(char const*)>
c000d03f:	83 c4 10             	add    esp,0x10
c000d042:	b8 02 00 00 00       	mov    eax,0x2
c000d047:	e9 bc 00 00 00       	jmp    c000d108 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d04c:	83 ff 18             	cmp    edi,0x18
c000d04f:	75 1a                	jne    c000d06b <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d051:	83 ec 0c             	sub    esp,0xc
c000d054:	68 3c 1d 02 c0       	push   0xc0021d3c
c000d059:	e8 74 1c 00 00       	call   c000ecd2 <KePanic(char const*)>
c000d05e:	83 c4 10             	add    esp,0x10
c000d061:	b8 01 00 00 00       	mov    eax,0x1
c000d066:	e9 9d 00 00 00       	jmp    c000d108 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d06b:	47                   	inc    edi
c000d06c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d071:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d075:	74 02                	je     c000d079 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000d077:	89 ee                	mov    esi,ebp
c000d079:	83 ec 0c             	sub    esp,0xc
c000d07c:	53                   	push   ebx
c000d07d:	e8 ee 34 ff ff       	call   c0000570 <strlen>
c000d082:	83 c4 10             	add    esp,0x10
c000d085:	85 c0                	test   eax,eax
c000d087:	74 06                	je     c000d08f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d089:	46                   	inc    esi
c000d08a:	e9 40 ff ff ff       	jmp    c000cfcf <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d08f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d097:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d09f:	31 f6                	xor    esi,esi
c000d0a1:	50                   	push   eax
c000d0a2:	31 ff                	xor    edi,edi
c000d0a4:	6a 12                	push   0x12
c000d0a6:	68 ee 00 00 00       	push   0xee
c000d0ab:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d0b2:	e8 39 34 ff ff       	call   c00004f0 <memset>
c000d0b7:	83 c4 10             	add    esp,0x10
c000d0ba:	83 fe 17             	cmp    esi,0x17
c000d0bd:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d0c1:	7e 26                	jle    c000d0e9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000d0c3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d0c7:	50                   	push   eax
c000d0c8:	6a 08                	push   0x8
c000d0ca:	55                   	push   ebp
c000d0cb:	53                   	push   ebx
c000d0cc:	e8 2e fd ff ff       	call   c000cdff <CmGetShift(unsigned int*, int*, int, bool*)>
c000d0d1:	83 c4 10             	add    esp,0x10
c000d0d4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d0d9:	74 26                	je     c000d101 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000d0db:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d0e2:	4e                   	dec    esi
c000d0e3:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d0e6:	47                   	inc    edi
c000d0e7:	eb 1c                	jmp    c000d105 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d0e9:	6a 06                	push   0x6
c000d0eb:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000d0f0:	50                   	push   eax
c000d0f1:	55                   	push   ebp
c000d0f2:	53                   	push   ebx
c000d0f3:	e8 d7 fc ff ff       	call   c000cdcf <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d0f8:	83 c4 10             	add    esp,0x10
c000d0fb:	84 c0                	test   al,al
c000d0fd:	75 06                	jne    c000d105 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d0ff:	eb c2                	jmp    c000d0c3 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000d101:	31 c0                	xor    eax,eax
c000d103:	eb 03                	jmp    c000d108 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d105:	46                   	inc    esi
c000d106:	eb b2                	jmp    c000d0ba <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000d108:	83 c4 6c             	add    esp,0x6c
c000d10b:	5b                   	pop    ebx
c000d10c:	5e                   	pop    esi
c000d10d:	5f                   	pop    edi
c000d10e:	5d                   	pop    ebp
c000d10f:	c3                   	ret    

c000d110 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d110:	53                   	push   ebx
c000d111:	83 ec 3c             	sub    esp,0x3c
c000d114:	6a 2b                	push   0x2b
c000d116:	6a 00                	push   0x0
c000d118:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d11c:	53                   	push   ebx
c000d11d:	e8 ce 33 ff ff       	call   c00004f0 <memset>
c000d122:	58                   	pop    eax
c000d123:	5a                   	pop    edx
c000d124:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d128:	50                   	push   eax
c000d129:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d12d:	e8 40 fe ff ff       	call   c000cf72 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d132:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d137:	83 c4 0c             	add    esp,0xc
c000d13a:	6a 15                	push   0x15
c000d13c:	6a 00                	push   0x0
c000d13e:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d142:	50                   	push   eax
c000d143:	e8 a8 33 ff ff       	call   c00004f0 <memset>
c000d148:	53                   	push   ebx
c000d149:	6a 00                	push   0x0
c000d14b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d14f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d153:	e8 e6 f9 ff ff       	call   c000cb3e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d158:	83 c4 58             	add    esp,0x58
c000d15b:	5b                   	pop    ebx
c000d15c:	c3                   	ret    

c000d15d <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d15d:	56                   	push   esi
c000d15e:	53                   	push   ebx
c000d15f:	83 ec 48             	sub    esp,0x48
c000d162:	6a 12                	push   0x12
c000d164:	68 ff 00 00 00       	push   0xff
c000d169:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d16d:	56                   	push   esi
c000d16e:	e8 7d 33 ff ff       	call   c00004f0 <memset>
c000d173:	5a                   	pop    edx
c000d174:	59                   	pop    ecx
c000d175:	56                   	push   esi
c000d176:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d17a:	e8 f3 fd ff ff       	call   c000cf72 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d17f:	83 c4 10             	add    esp,0x10
c000d182:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d186:	85 db                	test   ebx,ebx
c000d188:	74 42                	je     c000d1cc <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d18a:	50                   	push   eax
c000d18b:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d18f:	50                   	push   eax
c000d190:	53                   	push   ebx
c000d191:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d195:	e8 fa f6 ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d19a:	83 c4 0c             	add    esp,0xc
c000d19d:	6a 12                	push   0x12
c000d19f:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d1a3:	50                   	push   eax
c000d1a4:	56                   	push   esi
c000d1a5:	e8 d6 31 ff ff       	call   c0000380 <memcmp>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	85 c0                	test   eax,eax
c000d1af:	74 1e                	je     c000d1cf <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d1b1:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d1b6:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d1bb:	c1 e3 08             	shl    ebx,0x8
c000d1be:	09 d8                	or     eax,ebx
c000d1c0:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d1c5:	c1 e3 10             	shl    ebx,0x10
c000d1c8:	09 c3                	or     ebx,eax
c000d1ca:	eb ba                	jmp    c000d186 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d1cc:	83 cb ff             	or     ebx,0xffffffff
c000d1cf:	89 d8                	mov    eax,ebx
c000d1d1:	83 c4 44             	add    esp,0x44
c000d1d4:	5b                   	pop    ebx
c000d1d5:	5e                   	pop    esi
c000d1d6:	c3                   	ret    

c000d1d7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d1d7:	57                   	push   edi
c000d1d8:	56                   	push   esi
c000d1d9:	53                   	push   ebx
c000d1da:	83 ec 34             	sub    esp,0x34
c000d1dd:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d1e1:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d1e5:	6a 2b                	push   0x2b
c000d1e7:	6a 00                	push   0x0
c000d1e9:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d1ed:	53                   	push   ebx
c000d1ee:	e8 fd 32 ff ff       	call   c00004f0 <memset>
c000d1f3:	58                   	pop    eax
c000d1f4:	5a                   	pop    edx
c000d1f5:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d1f9:	50                   	push   eax
c000d1fa:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d1fe:	e8 6f fd ff ff       	call   c000cf72 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d203:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000d207:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d20b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d20f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d213:	53                   	push   ebx
c000d214:	6a 00                	push   0x0
c000d216:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d21a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d21e:	e8 1b f9 ff ff       	call   c000cb3e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d223:	83 c4 50             	add    esp,0x50
c000d226:	5b                   	pop    ebx
c000d227:	5e                   	pop    esi
c000d228:	5f                   	pop    edi
c000d229:	c3                   	ret    

c000d22a <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d22a:	55                   	push   ebp
c000d22b:	57                   	push   edi
c000d22c:	56                   	push   esi
c000d22d:	53                   	push   ebx
c000d22e:	83 ec 40             	sub    esp,0x40
c000d231:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d235:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d239:	6a 2b                	push   0x2b
c000d23b:	6a 00                	push   0x0
c000d23d:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d241:	56                   	push   esi
c000d242:	e8 a9 32 ff ff       	call   c00004f0 <memset>
c000d247:	5f                   	pop    edi
c000d248:	89 ef                	mov    edi,ebp
c000d24a:	58                   	pop    eax
c000d24b:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d24f:	50                   	push   eax
c000d250:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d254:	e8 19 fd ff ff       	call   c000cf72 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d259:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d25e:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d263:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d268:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d26d:	83 c4 10             	add    esp,0x10
c000d270:	85 ed                	test   ebp,ebp
c000d272:	74 14                	je     c000d288 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d274:	51                   	push   ecx
c000d275:	51                   	push   ecx
c000d276:	57                   	push   edi
c000d277:	53                   	push   ebx
c000d278:	e8 09 f7 ff ff       	call   c000c986 <CmGetNext(Reghive_Tag*, int)>
c000d27d:	83 c4 10             	add    esp,0x10
c000d280:	85 c0                	test   eax,eax
c000d282:	74 04                	je     c000d288 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d284:	89 c7                	mov    edi,eax
c000d286:	eb e8                	jmp    c000d270 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d288:	56                   	push   esi
c000d289:	6a 00                	push   0x0
c000d28b:	57                   	push   edi
c000d28c:	53                   	push   ebx
c000d28d:	e8 ac f8 ff ff       	call   c000cb3e <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d292:	83 c4 0c             	add    esp,0xc
c000d295:	89 c7                	mov    edi,eax
c000d297:	56                   	push   esi
c000d298:	50                   	push   eax
c000d299:	53                   	push   ebx
c000d29a:	e8 f5 f5 ff ff       	call   c000c894 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d29f:	58                   	pop    eax
c000d2a0:	5a                   	pop    edx
c000d2a1:	6a 6c                	push   0x6c
c000d2a3:	6a 00                	push   0x0
c000d2a5:	6a 00                	push   0x0
c000d2a7:	68 4d 1d 02 c0       	push   0xc0021d4d
c000d2ac:	57                   	push   edi
c000d2ad:	53                   	push   ebx
c000d2ae:	e8 24 ff ff ff       	call   c000d1d7 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d2b3:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d2b7:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d2bb:	c1 e8 10             	shr    eax,0x10
c000d2be:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d2c2:	83 c4 1c             	add    esp,0x1c
c000d2c5:	56                   	push   esi
c000d2c6:	57                   	push   edi
c000d2c7:	53                   	push   ebx
c000d2c8:	e8 eb f6 ff ff       	call   c000c9b8 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d2cd:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d2d2:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d2d7:	c1 e0 08             	shl    eax,0x8
c000d2da:	09 c2                	or     edx,eax
c000d2dc:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d2e1:	83 c4 4c             	add    esp,0x4c
c000d2e4:	c1 e0 10             	shl    eax,0x10
c000d2e7:	5b                   	pop    ebx
c000d2e8:	09 d0                	or     eax,edx
c000d2ea:	5e                   	pop    esi
c000d2eb:	5f                   	pop    edi
c000d2ec:	5d                   	pop    ebp
c000d2ed:	c3                   	ret    

c000d2ee <zStrtok(char*, char const*)>:
c000d2ee:	55                   	push   ebp
c000d2ef:	57                   	push   edi
c000d2f0:	56                   	push   esi
c000d2f1:	53                   	push   ebx
c000d2f2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d2f6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d2fa:	85 db                	test   ebx,ebx
c000d2fc:	74 2f                	je     c000d32d <zStrtok(char*, char const*)+0x3f>
c000d2fe:	85 c0                	test   eax,eax
c000d300:	75 09                	jne    c000d30b <zStrtok(char*, char const*)+0x1d>
c000d302:	a1 60 9d 02 c0       	mov    eax,ds:0xc0029d60
c000d307:	85 c0                	test   eax,eax
c000d309:	74 50                	je     c000d35b <zStrtok(char*, char const*)+0x6d>
c000d30b:	31 c9                	xor    ecx,ecx
c000d30d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d311:	74 03                	je     c000d316 <zStrtok(char*, char const*)+0x28>
c000d313:	41                   	inc    ecx
c000d314:	eb f7                	jmp    c000d30d <zStrtok(char*, char const*)+0x1f>
c000d316:	31 d2                	xor    edx,edx
c000d318:	39 ca                	cmp    edx,ecx
c000d31a:	74 15                	je     c000d331 <zStrtok(char*, char const*)+0x43>
c000d31c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d320:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d323:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d326:	39 ee                	cmp    esi,ebp
c000d328:	74 13                	je     c000d33d <zStrtok(char*, char const*)+0x4f>
c000d32a:	42                   	inc    edx
c000d32b:	eb eb                	jmp    c000d318 <zStrtok(char*, char const*)+0x2a>
c000d32d:	31 c0                	xor    eax,eax
c000d32f:	eb 2a                	jmp    c000d35b <zStrtok(char*, char const*)+0x6d>
c000d331:	c7 05 60 9d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029d60,0x0
c000d33b:	eb 1e                	jmp    c000d35b <zStrtok(char*, char const*)+0x6d>
c000d33d:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d340:	39 ce                	cmp    esi,ecx
c000d342:	75 0a                	jne    c000d34e <zStrtok(char*, char const*)+0x60>
c000d344:	40                   	inc    eax
c000d345:	a3 60 9d 02 c0       	mov    ds:0xc0029d60,eax
c000d34a:	89 d8                	mov    eax,ebx
c000d34c:	eb 0d                	jmp    c000d35b <zStrtok(char*, char const*)+0x6d>
c000d34e:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d352:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d355:	89 15 60 9d 02 c0    	mov    DWORD PTR ds:0xc0029d60,edx
c000d35b:	5b                   	pop    ebx
c000d35c:	5e                   	pop    esi
c000d35d:	5f                   	pop    edi
c000d35e:	5d                   	pop    ebp
c000d35f:	c3                   	ret    

c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d360:	57                   	push   edi
c000d361:	56                   	push   esi
c000d362:	53                   	push   ebx
c000d363:	81 ec 08 01 00 00    	sub    esp,0x108
c000d369:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d370:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d377:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d37b:	53                   	push   ebx
c000d37c:	e8 bf 32 ff ff       	call   c0000640 <strcpy>
c000d381:	59                   	pop    ecx
c000d382:	5e                   	pop    esi
c000d383:	68 65 2a 02 c0       	push   0xc0022a65
c000d388:	53                   	push   ebx
c000d389:	bb 01 00 00 00       	mov    ebx,0x1
c000d38e:	e8 5b ff ff ff       	call   c000d2ee <zStrtok(char*, char const*)>
c000d393:	83 c4 10             	add    esp,0x10
c000d396:	85 c0                	test   eax,eax
c000d398:	74 3b                	je     c000d3d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d39a:	52                   	push   edx
c000d39b:	50                   	push   eax
c000d39c:	6a 01                	push   0x1
c000d39e:	57                   	push   edi
c000d39f:	e8 b9 fd ff ff       	call   c000d15d <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d3a4:	59                   	pop    ecx
c000d3a5:	89 c3                	mov    ebx,eax
c000d3a7:	5e                   	pop    esi
c000d3a8:	68 65 2a 02 c0       	push   0xc0022a65
c000d3ad:	6a 00                	push   0x0
c000d3af:	e8 3a ff ff ff       	call   c000d2ee <zStrtok(char*, char const*)>
c000d3b4:	83 c4 10             	add    esp,0x10
c000d3b7:	89 c6                	mov    esi,eax
c000d3b9:	85 c0                	test   eax,eax
c000d3bb:	74 18                	je     c000d3d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d3bd:	52                   	push   edx
c000d3be:	52                   	push   edx
c000d3bf:	53                   	push   ebx
c000d3c0:	57                   	push   edi
c000d3c1:	e8 81 f5 ff ff       	call   c000c947 <CmEnterDirectory(Reghive_Tag*, int)>
c000d3c6:	83 c4 10             	add    esp,0x10
c000d3c9:	89 c3                	mov    ebx,eax
c000d3cb:	83 f8 ff             	cmp    eax,0xffffffff
c000d3ce:	74 05                	je     c000d3d5 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d3d0:	50                   	push   eax
c000d3d1:	56                   	push   esi
c000d3d2:	53                   	push   ebx
c000d3d3:	eb c9                	jmp    c000d39e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d3d5:	81 c4 00 01 00 00    	add    esp,0x100
c000d3db:	89 d8                	mov    eax,ebx
c000d3dd:	5b                   	pop    ebx
c000d3de:	5e                   	pop    esi
c000d3df:	5f                   	pop    edi
c000d3e0:	c3                   	ret    

c000d3e1 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d3e1:	55                   	push   ebp
c000d3e2:	57                   	push   edi
c000d3e3:	56                   	push   esi
c000d3e4:	53                   	push   ebx
c000d3e5:	83 ec 5c             	sub    esp,0x5c
c000d3e8:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d3ec:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d3f0:	85 db                	test   ebx,ebx
c000d3f2:	0f 8e 84 00 00 00    	jle    c000d47c <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d3f8:	31 ed                	xor    ebp,ebp
c000d3fa:	57                   	push   edi
c000d3fb:	6a 32                	push   0x32
c000d3fd:	6a 00                	push   0x0
c000d3ff:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d403:	57                   	push   edi
c000d404:	e8 e7 30 ff ff       	call   c00004f0 <memset>
c000d409:	83 c4 0c             	add    esp,0xc
c000d40c:	57                   	push   edi
c000d40d:	53                   	push   ebx
c000d40e:	56                   	push   esi
c000d40f:	e8 30 fb ff ff       	call   c000cf44 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d414:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d418:	83 c4 10             	add    esp,0x10
c000d41b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d41f:	7d 13                	jge    c000d434 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d421:	83 ec 0c             	sub    esp,0xc
c000d424:	45                   	inc    ebp
c000d425:	68 12 2f 02 c0       	push   0xc0022f12
c000d42a:	e8 35 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d42f:	83 c4 10             	add    esp,0x10
c000d432:	eb e7                	jmp    c000d41b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d434:	51                   	push   ecx
c000d435:	57                   	push   edi
c000d436:	53                   	push   ebx
c000d437:	68 53 1d 02 c0       	push   0xc0021d53
c000d43c:	e8 23 9b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d441:	83 c4 10             	add    esp,0x10
c000d444:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d449:	75 1e                	jne    c000d469 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d44b:	52                   	push   edx
c000d44c:	52                   	push   edx
c000d44d:	53                   	push   ebx
c000d44e:	56                   	push   esi
c000d44f:	e8 f3 f4 ff ff       	call   c000c947 <CmEnterDirectory(Reghive_Tag*, int)>
c000d454:	83 c4 0c             	add    esp,0xc
c000d457:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d45b:	8d 51 04             	lea    edx,[ecx+0x4]
c000d45e:	52                   	push   edx
c000d45f:	50                   	push   eax
c000d460:	56                   	push   esi
c000d461:	e8 7b ff ff ff       	call   c000d3e1 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d466:	83 c4 10             	add    esp,0x10
c000d469:	50                   	push   eax
c000d46a:	50                   	push   eax
c000d46b:	53                   	push   ebx
c000d46c:	56                   	push   esi
c000d46d:	e8 14 f5 ff ff       	call   c000c986 <CmGetNext(Reghive_Tag*, int)>
c000d472:	83 c4 10             	add    esp,0x10
c000d475:	89 c3                	mov    ebx,eax
c000d477:	e9 74 ff ff ff       	jmp    c000d3f0 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d47c:	83 c4 5c             	add    esp,0x5c
c000d47f:	5b                   	pop    ebx
c000d480:	5e                   	pop    esi
c000d481:	5f                   	pop    edi
c000d482:	5d                   	pop    ebp
c000d483:	c3                   	ret    

c000d484 <CmSplitFinalSlashInPlace(char*)>:
c000d484:	53                   	push   ebx
c000d485:	83 ec 14             	sub    esp,0x14
c000d488:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d48c:	53                   	push   ebx
c000d48d:	e8 de 30 ff ff       	call   c0000570 <strlen>
c000d492:	83 c4 10             	add    esp,0x10
c000d495:	48                   	dec    eax
c000d496:	85 c0                	test   eax,eax
c000d498:	74 15                	je     c000d4af <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d49a:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d49d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d4a1:	75 09                	jne    c000d4ac <CmSplitFinalSlashInPlace(char*)+0x28>
c000d4a3:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d4a6:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d4aa:	eb 05                	jmp    c000d4b1 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d4ac:	48                   	dec    eax
c000d4ad:	eb e7                	jmp    c000d496 <CmSplitFinalSlashInPlace(char*)+0x12>
c000d4af:	31 c0                	xor    eax,eax
c000d4b1:	83 c4 08             	add    esp,0x8
c000d4b4:	5b                   	pop    ebx
c000d4b5:	c3                   	ret    
c000d4b6:	66 90                	xchg   ax,ax

c000d4b8 <Krnl::handlePowerButton()>:
c000d4b8:	83 ec 0c             	sub    esp,0xc
c000d4bb:	e8 24 21 00 00       	call   c000f5e4 <KeHandlePowerButton()>
c000d4c0:	90                   	nop
c000d4c1:	83 c4 0c             	add    esp,0xc
c000d4c4:	c3                   	ret    
c000d4c5:	8d 76 00             	lea    esi,[esi+0x0]

c000d4c8 <Krnl::handleSleepButton()>:
c000d4c8:	83 ec 0c             	sub    esp,0xc
c000d4cb:	e8 2c 21 00 00       	call   c000f5fc <KeHandleSleepButton()>
c000d4d0:	90                   	nop
c000d4d1:	83 c4 0c             	add    esp,0xc
c000d4d4:	c3                   	ret    
c000d4d5:	90                   	nop

c000d4d6 <Computer::close(int, int, void*)>:
c000d4d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d4db:	c3                   	ret    

c000d4dc <Computer::open(int, int, void*)>:
c000d4dc:	56                   	push   esi
c000d4dd:	53                   	push   ebx
c000d4de:	83 ec 04             	sub    esp,0x4
c000d4e1:	f6 05 90 bd 02 c0 04 	test   BYTE PTR ds:0xc002bd90,0x4
c000d4e8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4ec:	0f 94 05 a0 41 02 c0 	sete   BYTE PTR ds:0xc00241a0
c000d4f3:	39 1d 70 9d 02 c0    	cmp    DWORD PTR ds:0xc0029d70,ebx
c000d4f9:	74 10                	je     c000d50b <Computer::open(int, int, void*)+0x2f>
c000d4fb:	83 ec 0c             	sub    esp,0xc
c000d4fe:	68 60 1d 02 c0       	push   0xc0021d60
c000d503:	e8 ca 17 00 00       	call   c000ecd2 <KePanic(char const*)>
c000d508:	83 c4 10             	add    esp,0x10
c000d50b:	83 ec 0c             	sub    esp,0xc
c000d50e:	68 18 1e 02 c0       	push   0xc0021e18
c000d513:	e8 30 f1 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d518:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d51f:	e8 57 14 00 00       	call   c000e97b <malloc>
c000d524:	89 04 24             	mov    DWORD PTR [esp],eax
c000d527:	89 c6                	mov    esi,eax
c000d529:	e8 66 e7 ff ff       	call   c000bc94 <ACPI::ACPI()>
c000d52e:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d534:	58                   	pop    eax
c000d535:	5a                   	pop    edx
c000d536:	56                   	push   esi
c000d537:	53                   	push   ebx
c000d538:	e8 01 bb ff ff       	call   c000903e <Device::addChild(Device*)>
c000d53d:	c7 04 24 30 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e30
c000d544:	e8 ff f0 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d549:	e8 66 a6 00 00       	call   c0017bb4 <HalEnableNMI()>
c000d54e:	e8 79 98 00 00       	call   c0016dcc <HalDetectFeatures()>
c000d553:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d55a:	e8 1c 14 00 00       	call   c000e97b <malloc>
c000d55f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d562:	89 c6                	mov    esi,eax
c000d564:	e8 09 b1 00 00       	call   c0018672 <CPU::CPU()>
c000d569:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d56f:	59                   	pop    ecx
c000d570:	58                   	pop    eax
c000d571:	56                   	push   esi
c000d572:	53                   	push   ebx
c000d573:	e8 c6 ba ff ff       	call   c000903e <Device::addChild(Device*)>
c000d578:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d57c:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d582:	8b 10                	mov    edx,DWORD PTR [eax]
c000d584:	51                   	push   ecx
c000d585:	6a 00                	push   0x0
c000d587:	6a 00                	push   0x0
c000d589:	50                   	push   eax
c000d58a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d58d:	83 c4 14             	add    esp,0x14
c000d590:	68 8c 1d 02 c0       	push   0xc0021d8c
c000d595:	e8 ae f0 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d59a:	e8 2d ad 00 00       	call   c00182cc <HalInitialiseCoprocessor()>
c000d59f:	c7 04 24 4a 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e4a
c000d5a6:	e8 9d f0 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d5ab:	c7 04 24 c2 d5 00 c0 	mov    DWORD PTR [esp],0xc000d5c2
c000d5b2:	e8 ad 7d 00 00       	call   c0015364 <setupMultitasking(void (*)())>
c000d5b7:	83 c4 14             	add    esp,0x14
c000d5ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d5bf:	5b                   	pop    ebx
c000d5c0:	5e                   	pop    esi
c000d5c1:	c3                   	ret    

c000d5c2 <KeFirstTask()>:
c000d5c2:	53                   	push   ebx
c000d5c3:	83 ec 14             	sub    esp,0x14
c000d5c6:	fb                   	sti    
c000d5c7:	68 65 1e 02 c0       	push   0xc0021e65
c000d5cc:	e8 77 f0 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d5d1:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d5d8:	e8 9e 13 00 00       	call   c000e97b <malloc>
c000d5dd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d5e4:	89 c3                	mov    ebx,eax
c000d5e6:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c000d5eb:	50                   	push   eax
c000d5ec:	68 7e 1e 02 c0       	push   0xc0021e7e
c000d5f1:	6a 01                	push   0x1
c000d5f3:	53                   	push   ebx
c000d5f4:	e8 17 7a 00 00       	call   c0015010 <Process::Process(bool, char const*, Process*, char**)>
c000d5f9:	83 c4 20             	add    esp,0x20
c000d5fc:	68 ff 00 00 00       	push   0xff
c000d601:	6a 00                	push   0x0
c000d603:	68 b1 e2 00 c0       	push   0xc000e2b1
c000d608:	53                   	push   ebx
c000d609:	e8 2a 7c 00 00       	call   c0015238 <Process::createThread(void (*)(void*), void*, int)>
c000d60e:	8b 15 d8 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6d8
c000d614:	6a 7a                	push   0x7a
c000d616:	6a 00                	push   0x0
c000d618:	68 00 5b 01 c0       	push   0xc0015b00
c000d61d:	52                   	push   edx
c000d61e:	e8 15 7c 00 00       	call   c0015238 <Process::createThread(void (*)(void*), void*, int)>
c000d623:	83 c4 14             	add    esp,0x14
c000d626:	a3 90 c6 02 c0       	mov    ds:0xc002c690,eax
c000d62b:	68 b0 1d 02 c0       	push   0xc0021db0
c000d630:	e8 13 f0 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d635:	c6 05 75 9d 02 c0 01 	mov    BYTE PTR ds:0xc0029d75,0x1
c000d63c:	e8 c7 20 00 00       	call   c000f708 <KeInitRand()>
c000d641:	e8 51 88 00 00       	call   c0015e97 <Vm::initialise8086()>
c000d646:	e8 a5 a7 ff ff       	call   c0007df0 <Fs::initVFS()>
c000d64b:	c7 04 24 34 1b 02 c0 	mov    DWORD PTR [esp],0xc0021b34
c000d652:	e8 f1 ef ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d657:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d65c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d662:	8b 10                	mov    edx,DWORD PTR [eax]
c000d664:	6a 00                	push   0x0
c000d666:	6a 00                	push   0x0
c000d668:	6a 00                	push   0x0
c000d66a:	50                   	push   eax
c000d66b:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d66e:	83 c4 14             	add    esp,0x14
c000d671:	68 b0 1d 02 c0       	push   0xc0021db0
c000d676:	e8 cd ef ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d67b:	e8 55 9f ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000d680:	e8 f5 05 00 00       	call   c000dc7a <KeLoadSystemEnv()>
c000d685:	e8 8a 1f 00 00       	call   c000f614 <KeSetupPowerManager()>
c000d68a:	c7 04 24 d4 1d 02 c0 	mov    DWORD PTR [esp],0xc0021dd4
c000d691:	e8 b2 ef ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d696:	59                   	pop    ecx
c000d697:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d69c:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d6a2:	53                   	push   ebx
c000d6a3:	e8 b2 ba ff ff       	call   c000915a <Device::loadDriversForAll()>
c000d6a8:	c7 04 24 8b 1e 02 c0 	mov    DWORD PTR [esp],0xc0021e8b
c000d6af:	e8 94 ef ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c000d6b4:	58                   	pop    eax
c000d6b5:	8b 1d 70 9d 02 c0    	mov    ebx,DWORD PTR ds:0xc0029d70
c000d6bb:	5a                   	pop    edx
c000d6bc:	6a 01                	push   0x1
c000d6be:	68 9c 1e 02 c0       	push   0xc0021e9c
c000d6c3:	e8 e1 72 00 00       	call   c00149a9 <Thr::loadDLL(char const*, bool)>
c000d6c8:	59                   	pop    ecx
c000d6c9:	5a                   	pop    edx
c000d6ca:	53                   	push   ebx
c000d6cb:	50                   	push   eax
c000d6cc:	e8 2a 75 00 00       	call   c0014bfb <Thr::executeDLL(unsigned long, void*)>
c000d6d1:	83 c4 10             	add    esp,0x10
c000d6d4:	83 ec 0c             	sub    esp,0xc
c000d6d7:	6a 02                	push   0x2
c000d6d9:	e8 66 7e 00 00       	call   c0015544 <blockTask(TaskState)>
c000d6de:	83 c4 10             	add    esp,0x10
c000d6e1:	eb f1                	jmp    c000d6d4 <KeFirstTask()+0x112>
c000d6e3:	90                   	nop

c000d6e4 <Computer::Computer()>:
c000d6e4:	83 ec 0c             	sub    esp,0xc
c000d6e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6eb:	83 ec 08             	sub    esp,0x8
c000d6ee:	68 b8 1e 02 c0       	push   0xc0021eb8
c000d6f3:	50                   	push   eax
c000d6f4:	e8 a7 ba ff ff       	call   c00091a0 <Device::Device(char const*)>
c000d6f9:	83 c4 10             	add    esp,0x10
c000d6fc:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c000d701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d705:	89 10                	mov    DWORD PTR [eax],edx
c000d707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d70b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d719:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d723:	90                   	nop
c000d724:	83 c4 0c             	add    esp,0xc
c000d727:	c3                   	ret    

c000d728 <KePrepareShutdown()>:
c000d728:	83 ec 0c             	sub    esp,0xc
c000d72b:	e8 86 ee ff ff       	call   c000c5b6 <KeExecuteAtexit()>
c000d730:	83 ec 0c             	sub    esp,0xc
c000d733:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000d738:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d73e:	50                   	push   eax
c000d73f:	e8 62 bb ff ff       	call   c00092a6 <Device::closeAll()>
c000d744:	83 c4 1c             	add    esp,0x1c
c000d747:	c3                   	ret    

c000d748 <KeShutdown()>:
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	e8 d8 ff ff ff       	call   c000d728 <KePrepareShutdown()>
c000d750:	a1 6c 9d 02 c0       	mov    eax,ds:0xc0029d6c
c000d755:	85 c0                	test   eax,eax
c000d757:	74 02                	je     c000d75b <KeShutdown()+0x13>
c000d759:	ff d0                	call   eax
c000d75b:	83 ec 0c             	sub    esp,0xc
c000d75e:	68 f4 1d 02 c0       	push   0xc0021df4
c000d763:	e8 6a 15 00 00       	call   c000ecd2 <KePanic(char const*)>
c000d768:	83 c4 1c             	add    esp,0x1c
c000d76b:	c3                   	ret    

c000d76c <KeSleep()>:
c000d76c:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c000d771:	85 c0                	test   eax,eax
c000d773:	74 02                	je     c000d777 <KeSleep()+0xb>
c000d775:	ff e0                	jmp    eax
c000d777:	c3                   	ret    

c000d778 <KeRestart()>:
c000d778:	83 ec 0c             	sub    esp,0xc
c000d77b:	e8 a8 ff ff ff       	call   c000d728 <KePrepareShutdown()>
c000d780:	a1 68 9d 02 c0       	mov    eax,ds:0xc0029d68
c000d785:	85 c0                	test   eax,eax
c000d787:	74 02                	je     c000d78b <KeRestart()+0x13>
c000d789:	ff d0                	call   eax
c000d78b:	e4 64                	in     al,0x64
c000d78d:	a8 02                	test   al,0x2
c000d78f:	75 fa                	jne    c000d78b <KeRestart()+0x13>
c000d791:	b0 fe                	mov    al,0xfe
c000d793:	e6 64                	out    0x64,al
c000d795:	83 c4 0c             	add    esp,0xc
c000d798:	c3                   	ret    

c000d799 <KeCalculateCRC32(unsigned char*, int)>:
c000d799:	53                   	push   ebx
c000d79a:	83 c8 ff             	or     eax,0xffffffff
c000d79d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d7a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000d7a5:	01 cb                	add    ebx,ecx
c000d7a7:	39 d9                	cmp    ecx,ebx
c000d7a9:	74 15                	je     c000d7c0 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000d7ab:	41                   	inc    ecx
c000d7ac:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000d7af:	31 c2                	xor    edx,eax
c000d7b1:	c1 e8 08             	shr    eax,0x8
c000d7b4:	0f b6 d2             	movzx  edx,dl
c000d7b7:	33 04 95 c0 3b 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdc440]
c000d7be:	eb e7                	jmp    c000d7a7 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000d7c0:	f7 d0                	not    eax
c000d7c2:	5b                   	pop    ebx
c000d7c3:	c3                   	ret    

c000d7c4 <EnvVarContainer::getEnv(char const*)>:
c000d7c4:	57                   	push   edi
c000d7c5:	56                   	push   esi
c000d7c6:	53                   	push   ebx
c000d7c7:	31 db                	xor    ebx,ebx
c000d7c9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d7cd:	39 1e                	cmp    DWORD PTR [esi],ebx
c000d7cf:	7e 2b                	jle    c000d7fc <EnvVarContainer::getEnv(char const*)+0x38>
c000d7d1:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000d7d8:	50                   	push   eax
c000d7d9:	50                   	push   eax
c000d7da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d7dd:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000d7e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d7e4:	e8 67 2f ff ff       	call   c0000750 <strcmp>
c000d7e9:	83 c4 10             	add    esp,0x10
c000d7ec:	85 c0                	test   eax,eax
c000d7ee:	75 09                	jne    c000d7f9 <EnvVarContainer::getEnv(char const*)+0x35>
c000d7f0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d7f3:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000d7f7:	eb 05                	jmp    c000d7fe <EnvVarContainer::getEnv(char const*)+0x3a>
c000d7f9:	43                   	inc    ebx
c000d7fa:	eb d1                	jmp    c000d7cd <EnvVarContainer::getEnv(char const*)+0x9>
c000d7fc:	31 c0                	xor    eax,eax
c000d7fe:	5b                   	pop    ebx
c000d7ff:	5e                   	pop    esi
c000d800:	5f                   	pop    edi
c000d801:	c3                   	ret    

c000d802 <EnvVarContainer::setEnv(char const*, char const*)>:
c000d802:	55                   	push   ebp
c000d803:	57                   	push   edi
c000d804:	56                   	push   esi
c000d805:	53                   	push   ebx
c000d806:	83 ec 28             	sub    esp,0x28
c000d809:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d80d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000d811:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d815:	56                   	push   esi
c000d816:	e8 55 2d ff ff       	call   c0000570 <strlen>
c000d81b:	40                   	inc    eax
c000d81c:	89 04 24             	mov    DWORD PTR [esp],eax
c000d81f:	e8 57 11 00 00       	call   c000e97b <malloc>
c000d824:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d827:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d82b:	e8 40 2d ff ff       	call   c0000570 <strlen>
c000d830:	40                   	inc    eax
c000d831:	89 04 24             	mov    DWORD PTR [esp],eax
c000d834:	e8 42 11 00 00       	call   c000e97b <malloc>
c000d839:	89 34 24             	mov    DWORD PTR [esp],esi
c000d83c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d840:	e8 2b 2d ff ff       	call   c0000570 <strlen>
c000d845:	83 c4 0c             	add    esp,0xc
c000d848:	40                   	inc    eax
c000d849:	50                   	push   eax
c000d84a:	6a 00                	push   0x0
c000d84c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d850:	e8 9b 2c ff ff       	call   c00004f0 <memset>
c000d855:	89 34 24             	mov    DWORD PTR [esp],esi
c000d858:	e8 13 2d ff ff       	call   c0000570 <strlen>
c000d85d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000d861:	8d 48 01             	lea    ecx,[eax+0x1]
c000d864:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d866:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d869:	89 de                	mov    esi,ebx
c000d86b:	e8 00 2d ff ff       	call   c0000570 <strlen>
c000d870:	83 c4 0c             	add    esp,0xc
c000d873:	40                   	inc    eax
c000d874:	50                   	push   eax
c000d875:	6a 00                	push   0x0
c000d877:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d87b:	e8 70 2c ff ff       	call   c00004f0 <memset>
c000d880:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d883:	e8 e8 2c ff ff       	call   c0000570 <strlen>
c000d888:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000d88c:	8d 48 01             	lea    ecx,[eax+0x1]
c000d88f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d891:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d894:	40                   	inc    eax
c000d895:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d898:	c1 e0 03             	shl    eax,0x3
c000d89b:	5a                   	pop    edx
c000d89c:	59                   	pop    ecx
c000d89d:	50                   	push   eax
c000d89e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d8a1:	e8 c1 10 00 00       	call   c000e967 <realloc>
c000d8a6:	8d 74 24 18          	lea    esi,[esp+0x18]
c000d8aa:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000d8ad:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000d8b0:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000d8b4:	b9 08 00 00 00       	mov    ecx,0x8
c000d8b9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d8bb:	83 c4 2c             	add    esp,0x2c
c000d8be:	5b                   	pop    ebx
c000d8bf:	5e                   	pop    esi
c000d8c0:	5f                   	pop    edi
c000d8c1:	5d                   	pop    ebp
c000d8c2:	c3                   	ret    
c000d8c3:	90                   	nop

c000d8c4 <EnvVarContainer::deleteEnv(char const*)>:
c000d8c4:	c3                   	ret    
c000d8c5:	90                   	nop

c000d8c6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000d8c6:	55                   	push   ebp
c000d8c7:	57                   	push   edi
c000d8c8:	56                   	push   esi
c000d8c9:	53                   	push   ebx
c000d8ca:	81 ec 38 01 00 00    	sub    esp,0x138
c000d8d0:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000d8d7:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000d8de:	68 14 01 00 00       	push   0x114
c000d8e3:	e8 93 10 00 00       	call   c000e97b <malloc>
c000d8e8:	83 c4 0c             	add    esp,0xc
c000d8eb:	89 c3                	mov    ebx,eax
c000d8ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000d8f0:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000d8f7:	50                   	push   eax
c000d8f8:	e8 15 a8 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c000d8fd:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d900:	e8 ef aa ff ff       	call   c00083f4 <File::exists()>
c000d905:	83 c4 10             	add    esp,0x10
c000d908:	84 c0                	test   al,al
c000d90a:	75 31                	jne    c000d93d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000d90c:	50                   	push   eax
c000d90d:	50                   	push   eax
c000d90e:	6a 12                	push   0x12
c000d910:	53                   	push   ebx
c000d911:	e8 1a a8 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000d916:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d918:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000d91b:	89 34 24             	mov    DWORD PTR [esp],esi
c000d91e:	e8 4d 2c ff ff       	call   c0000570 <strlen>
c000d923:	5a                   	pop    edx
c000d924:	31 d2                	xor    edx,edx
c000d926:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d92a:	51                   	push   ecx
c000d92b:	56                   	push   esi
c000d92c:	52                   	push   edx
c000d92d:	50                   	push   eax
c000d92e:	53                   	push   ebx
c000d92f:	ff d7                	call   edi
c000d931:	83 c4 14             	add    esp,0x14
c000d934:	53                   	push   ebx
c000d935:	e8 54 a8 ff ff       	call   c000818e <File::close()>
c000d93a:	83 c4 10             	add    esp,0x10
c000d93d:	56                   	push   esi
c000d93e:	31 f6                	xor    esi,esi
c000d940:	68 00 01 00 00       	push   0x100
c000d945:	6a 00                	push   0x0
c000d947:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d94b:	50                   	push   eax
c000d94c:	e8 9f 2b ff ff       	call   c00004f0 <memset>
c000d951:	5f                   	pop    edi
c000d952:	58                   	pop    eax
c000d953:	6a 01                	push   0x1
c000d955:	53                   	push   ebx
c000d956:	e8 d5 a7 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c000d95b:	83 c4 10             	add    esp,0x10
c000d95e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000d966:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d96e:	83 ec 0c             	sub    esp,0xc
c000d971:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d973:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000d977:	51                   	push   ecx
c000d978:	8d 54 24 23          	lea    edx,[esp+0x23]
c000d97c:	52                   	push   edx
c000d97d:	6a 00                	push   0x0
c000d97f:	6a 01                	push   0x1
c000d981:	53                   	push   ebx
c000d982:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000d985:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000d98a:	83 c4 20             	add    esp,0x20
c000d98d:	89 c2                	mov    edx,eax
c000d98f:	85 c0                	test   eax,eax
c000d991:	0f 84 36 01 00 00    	je     c000dacd <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000d997:	83 f8 0d             	cmp    eax,0xd
c000d99a:	0f 84 22 01 00 00    	je     c000dac2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000d9a0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000d9a5:	0f 84 f0 00 00 00    	je     c000da9b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000d9ab:	83 f8 0a             	cmp    eax,0xa
c000d9ae:	74 13                	je     c000d9c3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d9b0:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000d9b5:	74 0c                	je     c000d9c3 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000d9b7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000d9bd:	0f 8e f6 00 00 00    	jle    c000dab9 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000d9c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d9c7:	83 ec 0c             	sub    esp,0xc
c000d9ca:	8d 78 01             	lea    edi,[eax+0x1]
c000d9cd:	57                   	push   edi
c000d9ce:	e8 a8 0f 00 00       	call   c000e97b <malloc>
c000d9d3:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000d9d7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d9db:	8d 56 04             	lea    edx,[esi+0x4]
c000d9de:	89 14 24             	mov    DWORD PTR [esp],edx
c000d9e1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d9e5:	e8 91 0f 00 00       	call   c000e97b <malloc>
c000d9ea:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d9ee:	83 c4 0c             	add    esp,0xc
c000d9f1:	57                   	push   edi
c000d9f2:	6a 00                	push   0x0
c000d9f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d9f8:	e8 f3 2a ff ff       	call   c00004f0 <memset>
c000d9fd:	8d 74 24 30          	lea    esi,[esp+0x30]
c000da01:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000da05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000da09:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da0b:	83 c4 0c             	add    esp,0xc
c000da0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000da12:	52                   	push   edx
c000da13:	6a 00                	push   0x0
c000da15:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000da19:	e8 d2 2a ff ff       	call   c00004f0 <memset>
c000da1e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000da22:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000da26:	89 34 24             	mov    DWORD PTR [esp],esi
c000da29:	e8 42 2b ff ff       	call   c0000570 <strlen>
c000da2e:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000da32:	89 c1                	mov    ecx,eax
c000da34:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da36:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da39:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000da3c:	40                   	inc    eax
c000da3d:	83 c4 10             	add    esp,0x10
c000da40:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000da43:	85 d2                	test   edx,edx
c000da45:	75 0c                	jne    c000da53 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000da47:	83 ec 0c             	sub    esp,0xc
c000da4a:	6a 08                	push   0x8
c000da4c:	e8 2a 0f 00 00       	call   c000e97b <malloc>
c000da51:	eb 0c                	jmp    c000da5f <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000da53:	c1 e0 03             	shl    eax,0x3
c000da56:	51                   	push   ecx
c000da57:	51                   	push   ecx
c000da58:	50                   	push   eax
c000da59:	52                   	push   edx
c000da5a:	e8 08 0f 00 00       	call   c000e967 <realloc>
c000da5f:	83 c4 10             	add    esp,0x10
c000da62:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000da65:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000da68:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000da6b:	8d 74 24 18          	lea    esi,[esp+0x18]
c000da6f:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000da73:	b9 08 00 00 00       	mov    ecx,0x8
c000da78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000da7a:	31 f6                	xor    esi,esi
c000da7c:	50                   	push   eax
c000da7d:	68 00 01 00 00       	push   0x100
c000da82:	6a 00                	push   0x0
c000da84:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000da88:	50                   	push   eax
c000da89:	e8 62 2a ff ff       	call   c00004f0 <memset>
c000da8e:	83 c4 10             	add    esp,0x10
c000da91:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000da99:	eb 27                	jmp    c000dac2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000da9b:	83 f8 3d             	cmp    eax,0x3d
c000da9e:	74 1e                	je     c000dabe <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000daa0:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000daa6:	7f 07                	jg     c000daaf <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000daa8:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000daac:	46                   	inc    esi
c000daad:	eb 13                	jmp    c000dac2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000daaf:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000dab7:	eb 09                	jmp    c000dac2 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dab9:	83 f8 3d             	cmp    eax,0x3d
c000dabc:	75 ea                	jne    c000daa8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000dabe:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000dac2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000dac7:	0f 85 99 fe ff ff    	jne    c000d966 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000dacd:	83 ec 0c             	sub    esp,0xc
c000dad0:	53                   	push   ebx
c000dad1:	e8 b8 a6 ff ff       	call   c000818e <File::close()>
c000dad6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dad8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dadb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dade:	81 c4 3c 01 00 00    	add    esp,0x13c
c000dae4:	5b                   	pop    ebx
c000dae5:	5e                   	pop    esi
c000dae6:	5f                   	pop    edi
c000dae7:	5d                   	pop    ebp
c000dae8:	c3                   	ret    
c000dae9:	90                   	nop

c000daea <EnvVarContainer::__loadSystem()>:
c000daea:	83 ec 10             	sub    esp,0x10
c000daed:	68 c0 3f 02 c0       	push   0xc0023fc0
c000daf2:	68 f0 1e 02 c0       	push   0xc0021ef0
c000daf7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dafb:	e8 c6 fd ff ff       	call   c000d8c6 <EnvVarContainer::loadFrom(char const*, char const*)>
c000db00:	83 c4 1c             	add    esp,0x1c
c000db03:	c3                   	ret    

c000db04 <EnvVarContainer::__loadUser()>:
c000db04:	c3                   	ret    
c000db05:	90                   	nop

c000db06 <EnvVarContainer::EnvVarContainer(Process*)>:
c000db06:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db0a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000db10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db14:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000db18:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000db1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000db1f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000db26:	90                   	nop
c000db27:	c3                   	ret    

c000db28 <EnvVarContainer::~EnvVarContainer()>:
c000db28:	83 ec 0c             	sub    esp,0xc
c000db2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db32:	85 c0                	test   eax,eax
c000db34:	74 1d                	je     c000db53 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000db36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000db3c:	85 c0                	test   eax,eax
c000db3e:	74 13                	je     c000db53 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000db40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db44:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000db47:	83 ec 0c             	sub    esp,0xc
c000db4a:	50                   	push   eax
c000db4b:	e8 3b 0e 00 00       	call   c000e98b <free>
c000db50:	83 c4 10             	add    esp,0x10
c000db53:	90                   	nop
c000db54:	83 c4 0c             	add    esp,0xc
c000db57:	c3                   	ret    

c000db58 <KeGetEnv(Process*, char const*)>:
c000db58:	53                   	push   ebx
c000db59:	83 ec 08             	sub    esp,0x8
c000db5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db60:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000db64:	39 05 d8 c6 02 c0    	cmp    DWORD PTR ds:0xc002c6d8,eax
c000db6a:	74 04                	je     c000db70 <KeGetEnv(Process*, char const*)+0x18>
c000db6c:	85 c0                	test   eax,eax
c000db6e:	75 0b                	jne    c000db7b <KeGetEnv(Process*, char const*)+0x23>
c000db70:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000db75:	85 c0                	test   eax,eax
c000db77:	75 19                	jne    c000db92 <KeGetEnv(Process*, char const*)+0x3a>
c000db79:	eb 27                	jmp    c000dba2 <KeGetEnv(Process*, char const*)+0x4a>
c000db7b:	52                   	push   edx
c000db7c:	52                   	push   edx
c000db7d:	53                   	push   ebx
c000db7e:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000db84:	e8 3b fc ff ff       	call   c000d7c4 <EnvVarContainer::getEnv(char const*)>
c000db89:	83 c4 10             	add    esp,0x10
c000db8c:	85 c0                	test   eax,eax
c000db8e:	75 28                	jne    c000dbb8 <KeGetEnv(Process*, char const*)+0x60>
c000db90:	eb de                	jmp    c000db70 <KeGetEnv(Process*, char const*)+0x18>
c000db92:	52                   	push   edx
c000db93:	52                   	push   edx
c000db94:	53                   	push   ebx
c000db95:	50                   	push   eax
c000db96:	e8 29 fc ff ff       	call   c000d7c4 <EnvVarContainer::getEnv(char const*)>
c000db9b:	83 c4 10             	add    esp,0x10
c000db9e:	85 c0                	test   eax,eax
c000dba0:	75 16                	jne    c000dbb8 <KeGetEnv(Process*, char const*)+0x60>
c000dba2:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000dba6:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000dbab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dbaf:	83 c4 08             	add    esp,0x8
c000dbb2:	5b                   	pop    ebx
c000dbb3:	e9 0c fc ff ff       	jmp    c000d7c4 <EnvVarContainer::getEnv(char const*)>
c000dbb8:	83 c4 08             	add    esp,0x8
c000dbbb:	5b                   	pop    ebx
c000dbbc:	c3                   	ret    

c000dbbd <KeSetEnvSystem(char const*, char const*)>:
c000dbbd:	83 ec 10             	sub    esp,0x10
c000dbc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbc4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbc8:	ff 35 7c 9d 02 c0    	push   DWORD PTR ds:0xc0029d7c
c000dbce:	e8 2f fc ff ff       	call   c000d802 <EnvVarContainer::setEnv(char const*, char const*)>
c000dbd3:	83 c4 1c             	add    esp,0x1c
c000dbd6:	c3                   	ret    

c000dbd7 <KeSetEnvUser(char const*, char const*)>:
c000dbd7:	a1 78 9d 02 c0       	mov    eax,ds:0xc0029d78
c000dbdc:	85 c0                	test   eax,eax
c000dbde:	74 15                	je     c000dbf5 <KeSetEnvUser(char const*, char const*)+0x1e>
c000dbe0:	83 ec 10             	sub    esp,0x10
c000dbe3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbe7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dbeb:	50                   	push   eax
c000dbec:	e8 11 fc ff ff       	call   c000d802 <EnvVarContainer::setEnv(char const*, char const*)>
c000dbf1:	83 c4 1c             	add    esp,0x1c
c000dbf4:	c3                   	ret    
c000dbf5:	c3                   	ret    

c000dbf6 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000dbf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbfa:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000dc00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dc04:	e9 f9 fb ff ff       	jmp    c000d802 <EnvVarContainer::setEnv(char const*, char const*)>

c000dc09 <KeDeleteEnvSystem(char const*)>:
c000dc09:	c3                   	ret    

c000dc0a <KeDeleteEnvUser(char const*)>:
c000dc0a:	c3                   	ret    

c000dc0b <KeDeleteEnvProcess(Process*, char const*)>:
c000dc0b:	c3                   	ret    

c000dc0c <KeNewProcessEnv(Process*)>:
c000dc0c:	83 ec 28             	sub    esp,0x28
c000dc0f:	6a 0c                	push   0xc
c000dc11:	e8 65 0d 00 00       	call   c000e97b <malloc>
c000dc16:	5a                   	pop    edx
c000dc17:	59                   	pop    ecx
c000dc18:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dc1c:	50                   	push   eax
c000dc1d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc21:	e8 e0 fe ff ff       	call   c000db06 <EnvVarContainer::EnvVarContainer(Process*)>
c000dc26:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dc2a:	83 c4 2c             	add    esp,0x2c
c000dc2d:	c3                   	ret    

c000dc2e <KeCopyProcessEnv(Process*, Process*)>:
c000dc2e:	57                   	push   edi
c000dc2f:	56                   	push   esi
c000dc30:	53                   	push   ebx
c000dc31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dc35:	83 ec 0c             	sub    esp,0xc
c000dc38:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000dc3e:	6a 0c                	push   0xc
c000dc40:	e8 36 0d 00 00       	call   c000e97b <malloc>
c000dc45:	89 c3                	mov    ebx,eax
c000dc47:	58                   	pop    eax
c000dc48:	5a                   	pop    edx
c000dc49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc4d:	53                   	push   ebx
c000dc4e:	e8 b3 fe ff ff       	call   c000db06 <EnvVarContainer::EnvVarContainer(Process*)>
c000dc53:	8b 07                	mov    eax,DWORD PTR [edi]
c000dc55:	89 03                	mov    DWORD PTR [ebx],eax
c000dc57:	c1 e0 03             	shl    eax,0x3
c000dc5a:	89 04 24             	mov    DWORD PTR [esp],eax
c000dc5d:	e8 19 0d 00 00       	call   c000e97b <malloc>
c000dc62:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dc65:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dc67:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000dc6a:	c1 e1 03             	shl    ecx,0x3
c000dc6d:	89 c7                	mov    edi,eax
c000dc6f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc71:	83 c4 10             	add    esp,0x10
c000dc74:	89 d8                	mov    eax,ebx
c000dc76:	5b                   	pop    ebx
c000dc77:	5e                   	pop    esi
c000dc78:	5f                   	pop    edi
c000dc79:	c3                   	ret    

c000dc7a <KeLoadSystemEnv()>:
c000dc7a:	53                   	push   ebx
c000dc7b:	83 ec 14             	sub    esp,0x14
c000dc7e:	6a 0c                	push   0xc
c000dc80:	e8 f6 0c 00 00       	call   c000e97b <malloc>
c000dc85:	89 c3                	mov    ebx,eax
c000dc87:	58                   	pop    eax
c000dc88:	5a                   	pop    edx
c000dc89:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dc8f:	53                   	push   ebx
c000dc90:	e8 71 fe ff ff       	call   c000db06 <EnvVarContainer::EnvVarContainer(Process*)>
c000dc95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dc98:	89 1d 7c 9d 02 c0    	mov    DWORD PTR ds:0xc0029d7c,ebx
c000dc9e:	e8 47 fe ff ff       	call   c000daea <EnvVarContainer::__loadSystem()>
c000dca3:	83 c4 18             	add    esp,0x18
c000dca6:	5b                   	pop    ebx
c000dca7:	c3                   	ret    

c000dca8 <KeLoadUserEnv()>:
c000dca8:	53                   	push   ebx
c000dca9:	83 ec 14             	sub    esp,0x14
c000dcac:	6a 0c                	push   0xc
c000dcae:	e8 c8 0c 00 00       	call   c000e97b <malloc>
c000dcb3:	89 c3                	mov    ebx,eax
c000dcb5:	58                   	pop    eax
c000dcb6:	5a                   	pop    edx
c000dcb7:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000dcbd:	53                   	push   ebx
c000dcbe:	e8 43 fe ff ff       	call   c000db06 <EnvVarContainer::EnvVarContainer(Process*)>
c000dcc3:	89 1d 78 9d 02 c0    	mov    DWORD PTR ds:0xc0029d78,ebx
c000dcc9:	83 c4 18             	add    esp,0x18
c000dccc:	5b                   	pop    ebx
c000dccd:	c3                   	ret    

c000dcce <KeFlushEnv()>:
c000dcce:	c3                   	ret    

c000dccf <KeGetProcessTotalEnvCount(Process*)>:
c000dccf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dcd3:	8b 15 78 9d 02 c0    	mov    edx,DWORD PTR ds:0xc0029d78
c000dcd9:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dcdf:	a1 7c 9d 02 c0       	mov    eax,ds:0xc0029d7c
c000dce4:	8b 00                	mov    eax,DWORD PTR [eax]
c000dce6:	03 01                	add    eax,DWORD PTR [ecx]
c000dce8:	85 d2                	test   edx,edx
c000dcea:	74 02                	je     c000dcee <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000dcec:	03 02                	add    eax,DWORD PTR [edx]
c000dcee:	c3                   	ret    

c000dcef <KeGetProcessEnvPair(Process*, int)>:
c000dcef:	57                   	push   edi
c000dcf0:	56                   	push   esi
c000dcf1:	8b 35 78 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d78
c000dcf7:	53                   	push   ebx
c000dcf8:	85 f6                	test   esi,esi
c000dcfa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dcfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000dd02:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000dd08:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000dd0c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000dd0e:	75 16                	jne    c000dd26 <KeGetProcessEnvPair(Process*, int)+0x37>
c000dd10:	39 c2                	cmp    edx,eax
c000dd12:	7c 16                	jl     c000dd2a <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dd14:	8b 0d 7c 9d 02 c0    	mov    ecx,DWORD PTR ds:0xc0029d7c
c000dd1a:	8b 31                	mov    esi,DWORD PTR [ecx]
c000dd1c:	01 c6                	add    esi,eax
c000dd1e:	39 d6                	cmp    esi,edx
c000dd20:	7e 3c                	jle    c000dd5e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dd22:	29 c2                	sub    edx,eax
c000dd24:	eb 04                	jmp    c000dd2a <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dd26:	39 c2                	cmp    edx,eax
c000dd28:	7d 05                	jge    c000dd2f <KeGetProcessEnvPair(Process*, int)+0x40>
c000dd2a:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dd2d:	eb 20                	jmp    c000dd4f <KeGetProcessEnvPair(Process*, int)+0x60>
c000dd2f:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dd31:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dd34:	39 d1                	cmp    ecx,edx
c000dd36:	7e 04                	jle    c000dd3c <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dd38:	29 c2                	sub    edx,eax
c000dd3a:	eb 10                	jmp    c000dd4c <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dd3c:	8b 35 7c 9d 02 c0    	mov    esi,DWORD PTR ds:0xc0029d7c
c000dd42:	03 0e                	add    ecx,DWORD PTR [esi]
c000dd44:	39 d1                	cmp    ecx,edx
c000dd46:	7e 16                	jle    c000dd5e <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dd48:	29 c2                	sub    edx,eax
c000dd4a:	29 fa                	sub    edx,edi
c000dd4c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dd4f:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dd52:	8b 02                	mov    eax,DWORD PTR [edx]
c000dd54:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dd57:	89 03                	mov    DWORD PTR [ebx],eax
c000dd59:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dd5c:	eb 1d                	jmp    c000dd7b <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dd5e:	83 ec 0c             	sub    esp,0xc
c000dd61:	68 12 1f 02 c0       	push   0xc0021f12
c000dd66:	e8 67 0f 00 00       	call   c000ecd2 <KePanic(char const*)>
c000dd6b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dd71:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dd78:	83 c4 10             	add    esp,0x10
c000dd7b:	89 d8                	mov    eax,ebx
c000dd7d:	5b                   	pop    ebx
c000dd7e:	5e                   	pop    esi
c000dd7f:	5f                   	pop    edi
c000dd80:	c2 04 00             	ret    0x4
c000dd83:	90                   	nop

c000dd84 <KeSetupInterrupts()>:
c000dd84:	83 ec 10             	sub    esp,0x10
c000dd87:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd8f:	90                   	nop
c000dd90:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000dd98:	7f 5a                	jg     c000ddf4 <KeSetupInterrupts()+0x70>
c000dd9a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dda2:	66 90                	xchg   ax,ax
c000dda4:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000dda9:	7f 41                	jg     c000ddec <KeSetupInterrupts()+0x68>
c000ddab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddaf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddb6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddba:	01 d0                	add    eax,edx
c000ddbc:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000ddc7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ddcb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ddd2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ddd6:	01 d0                	add    eax,edx
c000ddd8:	c7 04 85 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd6280],0x0
c000dde3:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000dde8:	eb ba                	jmp    c000dda4 <KeSetupInterrupts()+0x20>
c000ddea:	66 90                	xchg   ax,ax
c000ddec:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000ddf1:	eb 9d                	jmp    c000dd90 <KeSetupInterrupts()+0xc>
c000ddf3:	90                   	nop
c000ddf4:	90                   	nop
c000ddf5:	83 c4 10             	add    esp,0x10
c000ddf8:	c3                   	ret    
c000ddf9:	8d 76 00             	lea    esi,[esi+0x0]

c000ddfc <int_handler>:
c000ddfc:	83 ec 2c             	sub    esp,0x2c
c000ddff:	90                   	nop
c000de00:	a0 94 bd 02 c0       	mov    al,ds:0xc002bd94
c000de05:	0f b6 c0             	movzx  eax,al
c000de08:	85 c0                	test   eax,eax
c000de0a:	74 04                	je     c000de10 <int_handler+0x14>
c000de0c:	fa                   	cli    
c000de0d:	f4                   	hlt    
c000de0e:	eb f0                	jmp    c000de00 <int_handler+0x4>
c000de10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de14:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de17:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de1b:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000de20:	7e 1a                	jle    c000de3c <int_handler+0x40>
c000de22:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000de27:	7f 13                	jg     c000de3c <int_handler+0x40>
c000de29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de2d:	83 e8 20             	sub    eax,0x20
c000de30:	83 ec 0c             	sub    esp,0xc
c000de33:	50                   	push   eax
c000de34:	e8 0a a8 00 00       	call   c0018643 <HalEndOfInterrupt(int)>
c000de39:	83 c4 10             	add    esp,0x10
c000de3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de40:	c1 e0 04             	shl    eax,0x4
c000de43:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000de48:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000de4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000de50:	c1 e0 04             	shl    eax,0x4
c000de53:	05 80 9d 02 c0       	add    eax,0xc0029d80
c000de58:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de5c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000de64:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000de69:	0f 8f ad 00 00 00    	jg     c000df1c <int_handler+0x120>
c000de6f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de73:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000de7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000de7e:	01 d0                	add    eax,edx
c000de80:	8b 00                	mov    eax,DWORD PTR [eax]
c000de82:	85 c0                	test   eax,eax
c000de84:	0f 84 86 00 00 00    	je     c000df10 <int_handler+0x114>
c000de8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de8e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000de91:	83 f8 60             	cmp    eax,0x60
c000de94:	75 46                	jne    c000dedc <int_handler+0xe0>
c000de96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000de9a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dea1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000dea5:	01 d0                	add    eax,edx
c000dea7:	8b 00                	mov    eax,DWORD PTR [eax]
c000dea9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000dead:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000deb4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000deb8:	01 ca                	add    edx,ecx
c000deba:	8b 12                	mov    edx,DWORD PTR [edx]
c000debc:	83 ec 08             	sub    esp,0x8
c000debf:	52                   	push   edx
c000dec0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dec4:	ff d0                	call   eax
c000dec6:	83 c4 10             	add    esp,0x10
c000dec9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000decd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ded1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ded5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ded9:	eb 4d                	jmp    c000df28 <int_handler+0x12c>
c000dedb:	90                   	nop
c000dedc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000dee0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000dee7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000deeb:	01 d0                	add    eax,edx
c000deed:	8b 00                	mov    eax,DWORD PTR [eax]
c000deef:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000def3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000defa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000defe:	01 ca                	add    edx,ecx
c000df00:	8b 12                	mov    edx,DWORD PTR [edx]
c000df02:	83 ec 08             	sub    esp,0x8
c000df05:	52                   	push   edx
c000df06:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000df0a:	ff d0                	call   eax
c000df0c:	83 c4 10             	add    esp,0x10
c000df0f:	90                   	nop
c000df10:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000df15:	e9 4a ff ff ff       	jmp    c000de64 <int_handler+0x68>
c000df1a:	66 90                	xchg   ax,ax
c000df1c:	b8 00 00 00 00       	mov    eax,0x0
c000df21:	ba 00 00 00 00       	mov    edx,0x0
c000df26:	66 90                	xchg   ax,ax
c000df28:	83 c4 2c             	add    esp,0x2c
c000df2b:	c3                   	ret    

c000df2c <KeDisplayProgramFault(char const*)>:
c000df2c:	83 ec 0c             	sub    esp,0xc
c000df2f:	83 ec 0c             	sub    esp,0xc
c000df32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df36:	e8 29 90 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000df3b:	83 c4 10             	add    esp,0x10
c000df3e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df43:	8b 00                	mov    eax,DWORD PTR [eax]
c000df45:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df48:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df4e:	85 c0                	test   eax,eax
c000df50:	74 22                	je     c000df74 <KeDisplayProgramFault(char const*)+0x48>
c000df52:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000df57:	8b 00                	mov    eax,DWORD PTR [eax]
c000df59:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000df5c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000df62:	6a 04                	push   0x4
c000df64:	6a 0f                	push   0xf
c000df66:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df6a:	50                   	push   eax
c000df6b:	e8 64 35 00 00       	call   c00114d4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000df70:	83 c4 10             	add    esp,0x10
c000df73:	90                   	nop
c000df74:	90                   	nop
c000df75:	83 c4 0c             	add    esp,0xc
c000df78:	c3                   	ret    
c000df79:	8d 76 00             	lea    esi,[esi+0x0]

c000df7c <KeGeneralProtectionFault(void*, void*)>:
c000df7c:	83 ec 0c             	sub    esp,0xc
c000df7f:	83 ec 08             	sub    esp,0x8
c000df82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df8a:	e8 d4 9c 00 00       	call   c0017c63 <HalHandleGeneralProtectionFault(void*, void*)>
c000df8f:	83 c4 10             	add    esp,0x10
c000df92:	0f b6 c0             	movzx  eax,al
c000df95:	85 c0                	test   eax,eax
c000df97:	75 2f                	jne    c000dfc8 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000df99:	83 ec 0c             	sub    esp,0xc
c000df9c:	68 2c 1f 02 c0       	push   0xc0021f2c
c000dfa1:	e8 86 ff ff ff       	call   c000df2c <KeDisplayProgramFault(char const*)>
c000dfa6:	83 c4 10             	add    esp,0x10
c000dfa9:	83 ec 0c             	sub    esp,0xc
c000dfac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfb0:	e8 ca 9d 00 00       	call   c0017d7f <HalDisplayDebugInfo(void*)>
c000dfb5:	83 c4 10             	add    esp,0x10
c000dfb8:	83 ec 0c             	sub    esp,0xc
c000dfbb:	6a 00                	push   0x0
c000dfbd:	e8 32 7d 00 00       	call   c0015cf4 <Thr::terminateFromIRQ(int)>
c000dfc2:	83 c4 10             	add    esp,0x10
c000dfc5:	eb 05                	jmp    c000dfcc <KeGeneralProtectionFault(void*, void*)+0x50>
c000dfc7:	90                   	nop
c000dfc8:	90                   	nop
c000dfc9:	8d 76 00             	lea    esi,[esi+0x0]
c000dfcc:	83 c4 0c             	add    esp,0xc
c000dfcf:	c3                   	ret    

c000dfd0 <KePageFault(void*, void*)>:
c000dfd0:	83 ec 0c             	sub    esp,0xc
c000dfd3:	83 ec 08             	sub    esp,0x8
c000dfd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfde:	e8 2b 9d 00 00       	call   c0017d0e <HalHandlePageFault(void*, void*)>
c000dfe3:	83 c4 10             	add    esp,0x10
c000dfe6:	0f b6 c0             	movzx  eax,al
c000dfe9:	85 c0                	test   eax,eax
c000dfeb:	75 2f                	jne    c000e01c <KePageFault(void*, void*)+0x4c>
c000dfed:	83 ec 0c             	sub    esp,0xc
c000dff0:	68 45 1f 02 c0       	push   0xc0021f45
c000dff5:	e8 32 ff ff ff       	call   c000df2c <KeDisplayProgramFault(char const*)>
c000dffa:	83 c4 10             	add    esp,0x10
c000dffd:	83 ec 0c             	sub    esp,0xc
c000e000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e004:	e8 76 9d 00 00       	call   c0017d7f <HalDisplayDebugInfo(void*)>
c000e009:	83 c4 10             	add    esp,0x10
c000e00c:	83 ec 0c             	sub    esp,0xc
c000e00f:	6a 00                	push   0x0
c000e011:	e8 de 7c 00 00       	call   c0015cf4 <Thr::terminateFromIRQ(int)>
c000e016:	83 c4 10             	add    esp,0x10
c000e019:	eb 05                	jmp    c000e020 <KePageFault(void*, void*)+0x50>
c000e01b:	90                   	nop
c000e01c:	90                   	nop
c000e01d:	8d 76 00             	lea    esi,[esi+0x0]
c000e020:	83 c4 0c             	add    esp,0xc
c000e023:	c3                   	ret    

c000e024 <KeNonMaskableInterrupt(void*, void*)>:
c000e024:	83 ec 0c             	sub    esp,0xc
c000e027:	e8 e1 a0 00 00       	call   c001810d <HalReceivedNMI()>
c000e02c:	90                   	nop
c000e02d:	83 c4 0c             	add    esp,0xc
c000e030:	c3                   	ret    
c000e031:	8d 76 00             	lea    esi,[esi+0x0]

c000e034 <KeOtherFault(void*, void*)>:
c000e034:	83 ec 0c             	sub    esp,0xc
c000e037:	83 ec 0c             	sub    esp,0xc
c000e03a:	68 50 1f 02 c0       	push   0xc0021f50
c000e03f:	e8 e8 fe ff ff       	call   c000df2c <KeDisplayProgramFault(char const*)>
c000e044:	83 c4 10             	add    esp,0x10
c000e047:	83 ec 0c             	sub    esp,0xc
c000e04a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e04e:	e8 2c 9d 00 00       	call   c0017d7f <HalDisplayDebugInfo(void*)>
c000e053:	83 c4 10             	add    esp,0x10
c000e056:	83 ec 0c             	sub    esp,0xc
c000e059:	6a 00                	push   0x0
c000e05b:	e8 94 7c 00 00       	call   c0015cf4 <Thr::terminateFromIRQ(int)>
c000e060:	83 c4 10             	add    esp,0x10
c000e063:	90                   	nop
c000e064:	83 c4 0c             	add    esp,0xc
c000e067:	c3                   	ret    

c000e068 <KeOpcodeFault(void*, void*)>:
c000e068:	55                   	push   ebp
c000e069:	89 e5                	mov    ebp,esp
c000e06b:	83 ec 08             	sub    esp,0x8
c000e06e:	83 ec 08             	sub    esp,0x8
c000e071:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e074:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e077:	e8 c1 9c 00 00       	call   c0017d3d <HalHandleOpcodeFault(void*, void*)>
c000e07c:	83 c4 10             	add    esp,0x10
c000e07f:	0f b6 c0             	movzx  eax,al
c000e082:	85 c0                	test   eax,eax
c000e084:	75 2e                	jne    c000e0b4 <KeOpcodeFault(void*, void*)+0x4c>
c000e086:	83 ec 0c             	sub    esp,0xc
c000e089:	68 78 1f 02 c0       	push   0xc0021f78
c000e08e:	e8 99 fe ff ff       	call   c000df2c <KeDisplayProgramFault(char const*)>
c000e093:	83 c4 10             	add    esp,0x10
c000e096:	83 ec 0c             	sub    esp,0xc
c000e099:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e09c:	e8 de 9c 00 00       	call   c0017d7f <HalDisplayDebugInfo(void*)>
c000e0a1:	83 c4 10             	add    esp,0x10
c000e0a4:	83 ec 0c             	sub    esp,0xc
c000e0a7:	6a 00                	push   0x0
c000e0a9:	e8 46 7c 00 00       	call   c0015cf4 <Thr::terminateFromIRQ(int)>
c000e0ae:	83 c4 10             	add    esp,0x10
c000e0b1:	eb 05                	jmp    c000e0b8 <KeOpcodeFault(void*, void*)+0x50>
c000e0b3:	90                   	nop
c000e0b4:	90                   	nop
c000e0b5:	8d 76 00             	lea    esi,[esi+0x0]
c000e0b8:	c9                   	leave  
c000e0b9:	c3                   	ret    
c000e0ba:	66 90                	xchg   ax,ax

c000e0bc <KeDoubleFault(void*, void*)>:
c000e0bc:	55                   	push   ebp
c000e0bd:	89 e5                	mov    ebp,esp
c000e0bf:	83 ec 08             	sub    esp,0x8
c000e0c2:	83 ec 0c             	sub    esp,0xc
c000e0c5:	68 85 1f 02 c0       	push   0xc0021f85
c000e0ca:	e8 03 0c 00 00       	call   c000ecd2 <KePanic(char const*)>
c000e0cf:	83 c4 10             	add    esp,0x10
c000e0d2:	90                   	nop
c000e0d3:	c9                   	leave  
c000e0d4:	c3                   	ret    
c000e0d5:	90                   	nop

c000e0d6 <GDTEntry::setBase(unsigned int)>:
c000e0d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0da:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e0de:	89 c1                	mov    ecx,eax
c000e0e0:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e0e4:	c1 e9 10             	shr    ecx,0x10
c000e0e7:	c1 e8 18             	shr    eax,0x18
c000e0ea:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e0ed:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e0f0:	c3                   	ret    
c000e0f1:	90                   	nop

c000e0f2 <GDTEntry::setLimit(unsigned int)>:
c000e0f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e0f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e0fa:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e0fd:	66 89 01             	mov    WORD PTR [ecx],ax
c000e100:	83 e2 f0             	and    edx,0xfffffff0
c000e103:	c1 e8 10             	shr    eax,0x10
c000e106:	83 e0 0f             	and    eax,0xf
c000e109:	09 d0                	or     eax,edx
c000e10b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e10e:	c3                   	ret    
c000e10f:	90                   	nop

c000e110 <GDT::GDT()>:
c000e110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e114:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e11a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e11e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e124:	90                   	nop
c000e125:	c3                   	ret    

c000e126 <GDT::addEntry(GDTEntry)>:
c000e126:	53                   	push   ebx
c000e127:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e12b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e12f:	8b 02                	mov    eax,DWORD PTR [edx]
c000e131:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e135:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e139:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e13d:	8d 48 01             	lea    ecx,[eax+0x1]
c000e140:	c1 e0 03             	shl    eax,0x3
c000e143:	89 0a                	mov    DWORD PTR [edx],ecx
c000e145:	5b                   	pop    ebx
c000e146:	c3                   	ret    
c000e147:	90                   	nop

c000e148 <GDT::getNumberOfEntries()>:
c000e148:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e14c:	8b 00                	mov    eax,DWORD PTR [eax]
c000e14e:	c3                   	ret    
c000e14f:	90                   	nop

c000e150 <GDT::flush()>:
c000e150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e154:	8b 10                	mov    edx,DWORD PTR [eax]
c000e156:	83 c0 04             	add    eax,0x4
c000e159:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e160:	a3 82 bd 02 c0       	mov    ds:0xc002bd82,eax
c000e165:	66 89 15 80 bd 02 c0 	mov    WORD PTR ds:0xc002bd80,dx
c000e16c:	e9 e9 21 ff ff       	jmp    c000035a <loadGDT>
c000e171:	90                   	nop

c000e172 <GDT::setup()>:
c000e172:	57                   	push   edi
c000e173:	56                   	push   esi
c000e174:	53                   	push   ebx
c000e175:	83 ec 30             	sub    esp,0x30
c000e178:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e17c:	6a 00                	push   0x0
c000e17e:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e182:	56                   	push   esi
c000e183:	e8 4e ff ff ff       	call   c000e0d6 <GDTEntry::setBase(unsigned int)>
c000e188:	6a 00                	push   0x0
c000e18a:	56                   	push   esi
c000e18b:	e8 62 ff ff ff       	call   c000e0f2 <GDTEntry::setLimit(unsigned int)>
c000e190:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e198:	6a 00                	push   0x0
c000e19a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e19e:	56                   	push   esi
c000e19f:	e8 32 ff ff ff       	call   c000e0d6 <GDTEntry::setBase(unsigned int)>
c000e1a4:	68 ff ff ff 00       	push   0xffffff
c000e1a9:	56                   	push   esi
c000e1aa:	e8 43 ff ff ff       	call   c000e0f2 <GDTEntry::setLimit(unsigned int)>
c000e1af:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e1b3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e1b7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e1bb:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e1bf:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e1c4:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e1c9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e1cd:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e1d1:	89 f8                	mov    eax,edi
c000e1d3:	89 fa                	mov    edx,edi
c000e1d5:	80 e4 f7             	and    ah,0xf7
c000e1d8:	80 ce 60             	or     dh,0x60
c000e1db:	89 c7                	mov    edi,eax
c000e1dd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1e1:	80 cc 60             	or     ah,0x60
c000e1e4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e1e8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e1ec:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e1f0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e1f4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e1f8:	83 c4 20             	add    esp,0x20
c000e1fb:	6a 00                	push   0x0
c000e1fd:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e201:	50                   	push   eax
c000e202:	e8 cf fe ff ff       	call   c000e0d6 <GDTEntry::setBase(unsigned int)>
c000e207:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e20b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e20f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e213:	83 e0 3f             	and    eax,0x3f
c000e216:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e21a:	6a 00                	push   0x0
c000e21c:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e220:	50                   	push   eax
c000e221:	e8 b0 fe ff ff       	call   c000e0d6 <GDTEntry::setBase(unsigned int)>
c000e226:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e22a:	83 e0 3f             	and    eax,0x3f
c000e22d:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e231:	83 c4 0c             	add    esp,0xc
c000e234:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e238:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e23c:	53                   	push   ebx
c000e23d:	e8 e4 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e242:	83 c4 0c             	add    esp,0xc
c000e245:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e249:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e24d:	53                   	push   ebx
c000e24e:	e8 d3 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e253:	83 c4 0c             	add    esp,0xc
c000e256:	57                   	push   edi
c000e257:	56                   	push   esi
c000e258:	53                   	push   ebx
c000e259:	e8 c8 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e25e:	83 c4 0c             	add    esp,0xc
c000e261:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e265:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e269:	53                   	push   ebx
c000e26a:	e8 b7 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e26f:	83 c4 0c             	add    esp,0xc
c000e272:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e276:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e27a:	53                   	push   ebx
c000e27b:	e8 a6 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e280:	83 c4 0c             	add    esp,0xc
c000e283:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e287:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e28b:	53                   	push   ebx
c000e28c:	e8 95 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e291:	83 c4 0c             	add    esp,0xc
c000e294:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e298:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e29c:	53                   	push   ebx
c000e29d:	e8 84 fe ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c000e2a2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e2a5:	e8 a6 fe ff ff       	call   c000e150 <GDT::flush()>
c000e2aa:	83 c4 40             	add    esp,0x40
c000e2ad:	5b                   	pop    ebx
c000e2ae:	5e                   	pop    esi
c000e2af:	5f                   	pop    edi
c000e2b0:	c3                   	ret    

c000e2b1 <idleFunction(void*)>:
c000e2b1:	83 ec 0c             	sub    esp,0xc
c000e2b4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e2b9:	48                   	dec    eax
c000e2ba:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e2bf:	75 01                	jne    c000e2c2 <idleFunction(void*)+0x11>
c000e2c1:	fb                   	sti    
c000e2c2:	e8 e1 9e 00 00       	call   c00181a8 <HalSystemIdle()>
c000e2c7:	e8 9a 1e 01 00       	call   c0020166 <idleCommon()>
c000e2cc:	eb f4                	jmp    c000e2c2 <idleFunction(void*)+0x11>
c000e2ce:	66 90                	xchg   ax,ax

c000e2d0 <IDTEntry::IDTEntry(bool)>:
c000e2d0:	53                   	push   ebx
c000e2d1:	83 ec 04             	sub    esp,0x4
c000e2d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2d8:	88 04 24             	mov    BYTE PTR [esp],al
c000e2db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2df:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e2e5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2e9:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e2ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e2f1:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e2f4:	83 e2 f0             	and    edx,0xfffffff0
c000e2f7:	83 ca 0e             	or     edx,0xe
c000e2fa:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e2fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e301:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e304:	83 e2 ef             	and    edx,0xffffffef
c000e307:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e30a:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e30e:	85 c0                	test   eax,eax
c000e310:	74 06                	je     c000e318 <IDTEntry::IDTEntry(bool)+0x48>
c000e312:	b2 03                	mov    dl,0x3
c000e314:	eb 06                	jmp    c000e31c <IDTEntry::IDTEntry(bool)+0x4c>
c000e316:	66 90                	xchg   ax,ax
c000e318:	b2 00                	mov    dl,0x0
c000e31a:	66 90                	xchg   ax,ax
c000e31c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e320:	83 e2 03             	and    edx,0x3
c000e323:	89 d3                	mov    ebx,edx
c000e325:	c1 e3 05             	shl    ebx,0x5
c000e328:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e32b:	83 e2 9f             	and    edx,0xffffff9f
c000e32e:	88 d1                	mov    cl,dl
c000e330:	88 da                	mov    dl,bl
c000e332:	09 ca                	or     edx,ecx
c000e334:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e337:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e33b:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e33e:	83 ca 80             	or     edx,0xffffff80
c000e341:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e344:	90                   	nop
c000e345:	83 c4 04             	add    esp,0x4
c000e348:	5b                   	pop    ebx
c000e349:	c3                   	ret    

c000e34a <IDTEntry::setOffset(unsigned int)>:
c000e34a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e34e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e352:	66 89 02             	mov    WORD PTR [edx],ax
c000e355:	c1 e8 10             	shr    eax,0x10
c000e358:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e35c:	c3                   	ret    
c000e35d:	90                   	nop
c000e35e:	66 90                	xchg   ax,ax

c000e360 <IDT::IDT()>:
c000e360:	90                   	nop
c000e361:	c3                   	ret    

c000e362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e366:	83 c0 30             	add    eax,0x30
c000e369:	c3                   	ret    

c000e36a <IDT::addEntry(IDTEntry, int)>:
c000e36a:	53                   	push   ebx
c000e36b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e36f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e373:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e377:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e37b:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e37e:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e382:	5b                   	pop    ebx
c000e383:	c3                   	ret    

c000e384 <IDT::addEntry(int, void (*)(), bool)>:
c000e384:	53                   	push   ebx
c000e385:	83 ec 10             	sub    esp,0x10
c000e388:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e38d:	50                   	push   eax
c000e38e:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e392:	53                   	push   ebx
c000e393:	e8 38 ff ff ff       	call   c000e2d0 <IDTEntry::IDTEntry(bool)>
c000e398:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e39c:	53                   	push   ebx
c000e39d:	e8 a8 ff ff ff       	call   c000e34a <IDTEntry::setOffset(unsigned int)>
c000e3a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e3a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e3b2:	e8 b3 ff ff ff       	call   c000e36a <IDT::addEntry(IDTEntry, int)>
c000e3b7:	83 c4 30             	add    esp,0x30
c000e3ba:	5b                   	pop    ebx
c000e3bb:	c3                   	ret    

c000e3bc <IDT::flush()>:
c000e3bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3c0:	66 c7 05 88 bd 02 c0 ff 07 	mov    WORD PTR ds:0xc002bd88,0x7ff
c000e3c9:	a3 8a bd 02 c0       	mov    ds:0xc002bd8a,eax
c000e3ce:	0f 01 1d 88 bd 02 c0 	lidtd  ds:0xc002bd88
c000e3d5:	c3                   	ret    

c000e3d6 <IDT::setup()>:
c000e3d6:	57                   	push   edi
c000e3d7:	56                   	push   esi
c000e3d8:	53                   	push   ebx
c000e3d9:	83 ec 10             	sub    esp,0x10
c000e3dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e3e0:	6a 00                	push   0x0
c000e3e2:	68 10 f4 01 c0       	push   0xc001f410
c000e3e7:	6a 00                	push   0x0
c000e3e9:	53                   	push   ebx
c000e3ea:	e8 95 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e3ef:	6a 00                	push   0x0
c000e3f1:	68 20 f4 01 c0       	push   0xc001f420
c000e3f6:	6a 01                	push   0x1
c000e3f8:	53                   	push   ebx
c000e3f9:	e8 86 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e3fe:	83 c4 20             	add    esp,0x20
c000e401:	6a 00                	push   0x0
c000e403:	68 2a f4 01 c0       	push   0xc001f42a
c000e408:	6a 02                	push   0x2
c000e40a:	53                   	push   ebx
c000e40b:	e8 74 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e410:	6a 00                	push   0x0
c000e412:	68 34 f4 01 c0       	push   0xc001f434
c000e417:	6a 03                	push   0x3
c000e419:	53                   	push   ebx
c000e41a:	e8 65 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e41f:	83 c4 20             	add    esp,0x20
c000e422:	6a 00                	push   0x0
c000e424:	68 3e f4 01 c0       	push   0xc001f43e
c000e429:	6a 04                	push   0x4
c000e42b:	53                   	push   ebx
c000e42c:	e8 53 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e431:	6a 00                	push   0x0
c000e433:	68 48 f4 01 c0       	push   0xc001f448
c000e438:	6a 05                	push   0x5
c000e43a:	53                   	push   ebx
c000e43b:	e8 44 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e440:	83 c4 20             	add    esp,0x20
c000e443:	6a 00                	push   0x0
c000e445:	68 52 f4 01 c0       	push   0xc001f452
c000e44a:	6a 06                	push   0x6
c000e44c:	53                   	push   ebx
c000e44d:	e8 32 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e452:	6a 00                	push   0x0
c000e454:	68 5c f4 01 c0       	push   0xc001f45c
c000e459:	6a 07                	push   0x7
c000e45b:	53                   	push   ebx
c000e45c:	e8 23 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e461:	83 c4 20             	add    esp,0x20
c000e464:	6a 00                	push   0x0
c000e466:	68 66 f4 01 c0       	push   0xc001f466
c000e46b:	6a 08                	push   0x8
c000e46d:	53                   	push   ebx
c000e46e:	e8 11 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e473:	6a 00                	push   0x0
c000e475:	68 6e f4 01 c0       	push   0xc001f46e
c000e47a:	6a 09                	push   0x9
c000e47c:	53                   	push   ebx
c000e47d:	e8 02 ff ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e482:	83 c4 20             	add    esp,0x20
c000e485:	6a 00                	push   0x0
c000e487:	68 78 f4 01 c0       	push   0xc001f478
c000e48c:	6a 0a                	push   0xa
c000e48e:	53                   	push   ebx
c000e48f:	e8 f0 fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e494:	6a 00                	push   0x0
c000e496:	68 80 f4 01 c0       	push   0xc001f480
c000e49b:	6a 0b                	push   0xb
c000e49d:	53                   	push   ebx
c000e49e:	e8 e1 fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4a3:	83 c4 20             	add    esp,0x20
c000e4a6:	6a 00                	push   0x0
c000e4a8:	68 88 f4 01 c0       	push   0xc001f488
c000e4ad:	6a 0c                	push   0xc
c000e4af:	53                   	push   ebx
c000e4b0:	e8 cf fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4b5:	6a 00                	push   0x0
c000e4b7:	68 90 f4 01 c0       	push   0xc001f490
c000e4bc:	6a 0d                	push   0xd
c000e4be:	53                   	push   ebx
c000e4bf:	e8 c0 fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4c4:	83 c4 20             	add    esp,0x20
c000e4c7:	6a 00                	push   0x0
c000e4c9:	68 aa f4 01 c0       	push   0xc001f4aa
c000e4ce:	6a 0e                	push   0xe
c000e4d0:	53                   	push   ebx
c000e4d1:	e8 ae fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4d6:	6a 00                	push   0x0
c000e4d8:	68 b2 f4 01 c0       	push   0xc001f4b2
c000e4dd:	6a 0f                	push   0xf
c000e4df:	53                   	push   ebx
c000e4e0:	e8 9f fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4e5:	83 c4 20             	add    esp,0x20
c000e4e8:	6a 00                	push   0x0
c000e4ea:	68 bc f4 01 c0       	push   0xc001f4bc
c000e4ef:	6a 10                	push   0x10
c000e4f1:	53                   	push   ebx
c000e4f2:	e8 8d fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e4f7:	6a 00                	push   0x0
c000e4f9:	68 c6 f4 01 c0       	push   0xc001f4c6
c000e4fe:	6a 11                	push   0x11
c000e500:	53                   	push   ebx
c000e501:	e8 7e fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e506:	83 c4 20             	add    esp,0x20
c000e509:	6a 00                	push   0x0
c000e50b:	68 d0 f4 01 c0       	push   0xc001f4d0
c000e510:	6a 12                	push   0x12
c000e512:	53                   	push   ebx
c000e513:	e8 6c fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e518:	6a 01                	push   0x1
c000e51a:	68 6a f5 01 c0       	push   0xc001f56a
c000e51f:	6a 60                	push   0x60
c000e521:	53                   	push   ebx
c000e522:	e8 5d fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e527:	83 c4 20             	add    esp,0x20
c000e52a:	6a 00                	push   0x0
c000e52c:	68 71 f5 01 c0       	push   0xc001f571
c000e531:	6a 20                	push   0x20
c000e533:	53                   	push   ebx
c000e534:	e8 4b fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e539:	6a 00                	push   0x0
c000e53b:	68 5c f5 01 c0       	push   0xc001f55c
c000e540:	6a 21                	push   0x21
c000e542:	53                   	push   ebx
c000e543:	e8 3c fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e548:	83 c4 20             	add    esp,0x20
c000e54b:	6a 00                	push   0x0
c000e54d:	68 63 f5 01 c0       	push   0xc001f563
c000e552:	6a 22                	push   0x22
c000e554:	53                   	push   ebx
c000e555:	e8 2a fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e55a:	6a 00                	push   0x0
c000e55c:	68 da f4 01 c0       	push   0xc001f4da
c000e561:	6a 23                	push   0x23
c000e563:	53                   	push   ebx
c000e564:	e8 1b fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e569:	83 c4 20             	add    esp,0x20
c000e56c:	6a 00                	push   0x0
c000e56e:	68 e4 f4 01 c0       	push   0xc001f4e4
c000e573:	6a 24                	push   0x24
c000e575:	53                   	push   ebx
c000e576:	e8 09 fe ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e57b:	6a 00                	push   0x0
c000e57d:	68 ee f4 01 c0       	push   0xc001f4ee
c000e582:	6a 25                	push   0x25
c000e584:	53                   	push   ebx
c000e585:	e8 fa fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e58a:	83 c4 20             	add    esp,0x20
c000e58d:	6a 00                	push   0x0
c000e58f:	68 f8 f4 01 c0       	push   0xc001f4f8
c000e594:	6a 26                	push   0x26
c000e596:	53                   	push   ebx
c000e597:	e8 e8 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e59c:	6a 00                	push   0x0
c000e59e:	68 02 f5 01 c0       	push   0xc001f502
c000e5a3:	6a 27                	push   0x27
c000e5a5:	53                   	push   ebx
c000e5a6:	e8 d9 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5ab:	83 c4 20             	add    esp,0x20
c000e5ae:	6a 00                	push   0x0
c000e5b0:	68 0c f5 01 c0       	push   0xc001f50c
c000e5b5:	6a 28                	push   0x28
c000e5b7:	53                   	push   ebx
c000e5b8:	e8 c7 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5bd:	6a 00                	push   0x0
c000e5bf:	68 16 f5 01 c0       	push   0xc001f516
c000e5c4:	6a 29                	push   0x29
c000e5c6:	53                   	push   ebx
c000e5c7:	e8 b8 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5cc:	83 c4 20             	add    esp,0x20
c000e5cf:	6a 00                	push   0x0
c000e5d1:	68 20 f5 01 c0       	push   0xc001f520
c000e5d6:	6a 2a                	push   0x2a
c000e5d8:	53                   	push   ebx
c000e5d9:	e8 a6 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5de:	6a 00                	push   0x0
c000e5e0:	68 2a f5 01 c0       	push   0xc001f52a
c000e5e5:	6a 2b                	push   0x2b
c000e5e7:	53                   	push   ebx
c000e5e8:	e8 97 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5ed:	83 c4 20             	add    esp,0x20
c000e5f0:	6a 00                	push   0x0
c000e5f2:	68 34 f5 01 c0       	push   0xc001f534
c000e5f7:	6a 2c                	push   0x2c
c000e5f9:	53                   	push   ebx
c000e5fa:	e8 85 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e5ff:	6a 00                	push   0x0
c000e601:	68 3e f5 01 c0       	push   0xc001f53e
c000e606:	6a 2d                	push   0x2d
c000e608:	53                   	push   ebx
c000e609:	e8 76 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e60e:	83 c4 20             	add    esp,0x20
c000e611:	6a 00                	push   0x0
c000e613:	68 48 f5 01 c0       	push   0xc001f548
c000e618:	6a 2e                	push   0x2e
c000e61a:	53                   	push   ebx
c000e61b:	e8 64 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e620:	6a 00                	push   0x0
c000e622:	68 52 f5 01 c0       	push   0xc001f552
c000e627:	6a 2f                	push   0x2f
c000e629:	53                   	push   ebx
c000e62a:	e8 55 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e62f:	83 c4 20             	add    esp,0x20
c000e632:	6a 00                	push   0x0
c000e634:	68 ac f6 01 c0       	push   0xc001f6ac
c000e639:	6a 30                	push   0x30
c000e63b:	53                   	push   ebx
c000e63c:	e8 43 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e641:	6a 00                	push   0x0
c000e643:	68 b6 f6 01 c0       	push   0xc001f6b6
c000e648:	6a 31                	push   0x31
c000e64a:	53                   	push   ebx
c000e64b:	e8 34 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e650:	83 c4 20             	add    esp,0x20
c000e653:	6a 00                	push   0x0
c000e655:	68 c0 f6 01 c0       	push   0xc001f6c0
c000e65a:	6a 32                	push   0x32
c000e65c:	53                   	push   ebx
c000e65d:	e8 22 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e662:	6a 00                	push   0x0
c000e664:	68 ca f6 01 c0       	push   0xc001f6ca
c000e669:	6a 33                	push   0x33
c000e66b:	53                   	push   ebx
c000e66c:	e8 13 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e671:	83 c4 20             	add    esp,0x20
c000e674:	6a 00                	push   0x0
c000e676:	68 d4 f6 01 c0       	push   0xc001f6d4
c000e67b:	6a 34                	push   0x34
c000e67d:	53                   	push   ebx
c000e67e:	e8 01 fd ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e683:	6a 00                	push   0x0
c000e685:	68 de f6 01 c0       	push   0xc001f6de
c000e68a:	6a 35                	push   0x35
c000e68c:	53                   	push   ebx
c000e68d:	e8 f2 fc ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e692:	83 c4 20             	add    esp,0x20
c000e695:	6a 00                	push   0x0
c000e697:	68 e8 f6 01 c0       	push   0xc001f6e8
c000e69c:	6a 36                	push   0x36
c000e69e:	53                   	push   ebx
c000e69f:	e8 e0 fc ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e6a4:	6a 00                	push   0x0
c000e6a6:	68 f2 f6 01 c0       	push   0xc001f6f2
c000e6ab:	6a 37                	push   0x37
c000e6ad:	53                   	push   ebx
c000e6ae:	e8 d1 fc ff ff       	call   c000e384 <IDT::addEntry(int, void (*)(), bool)>
c000e6b3:	83 c4 1c             	add    esp,0x1c
c000e6b6:	6a 03                	push   0x3
c000e6b8:	6a 02                	push   0x2
c000e6ba:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e6c0:	e8 73 41 00 00       	call   c0012838 <VAS::allocatePages(int, int)>
c000e6c5:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e6cc:	89 c6                	mov    esi,eax
c000e6ce:	e8 a8 02 00 00       	call   c000e97b <malloc>
c000e6d3:	81 c6 00 20 00 00    	add    esi,0x2000
c000e6d9:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6dc:	89 c7                	mov    edi,eax
c000e6de:	e8 1d 32 00 00       	call   c0011900 <TSS::TSS()>
c000e6e3:	83 c4 0c             	add    esp,0xc
c000e6e6:	68 66 f4 01 c0       	push   0xc001f466
c000e6eb:	56                   	push   esi
c000e6ec:	57                   	push   edi
c000e6ed:	e8 52 32 00 00       	call   c0011944 <TSS::setup(unsigned long, unsigned long)>
c000e6f2:	89 c6                	mov    esi,eax
c000e6f4:	58                   	pop    eax
c000e6f5:	5a                   	pop    edx
c000e6f6:	6a 00                	push   0x0
c000e6f8:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e6fc:	50                   	push   eax
c000e6fd:	e8 ce fb ff ff       	call   c000e2d0 <IDTEntry::IDTEntry(bool)>
c000e702:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e706:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e70b:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e712:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e71c:	80 ce 05             	or     dh,0x5
c000e71f:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e722:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e72a:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e72d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e730:	e8 87 fc ff ff       	call   c000e3bc <IDT::flush()>
c000e735:	83 c4 20             	add    esp,0x20
c000e738:	5b                   	pop    ebx
c000e739:	5e                   	pop    esi
c000e73a:	5f                   	pop    edi
c000e73b:	c3                   	ret    

c000e73c <CPU::current()>:
c000e73c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000e741:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e747:	c3                   	ret    

c000e748 <operator new(unsigned long)>:
c000e748:	e9 2e 02 00 00       	jmp    c000e97b <malloc>

c000e74d <operator delete(void*)>:
c000e74d:	e9 49 02 00 00       	jmp    c000e99b <rfree>

c000e752 <disableIRQs()>:
c000e752:	fa                   	cli    
c000e753:	c3                   	ret    

c000e754 <enableIRQs()>:
c000e754:	fb                   	sti    
c000e755:	c3                   	ret    

c000e756 <lockScheduler()>:
c000e756:	fa                   	cli    
c000e757:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e75d:	c3                   	ret    

c000e75e <unlockScheduler()>:
c000e75e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e763:	48                   	dec    eax
c000e764:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e769:	75 01                	jne    c000e76c <unlockScheduler()+0xe>
c000e76b:	fb                   	sti    
c000e76c:	c3                   	ret    

c000e76d <lockStuff()>:
c000e76d:	fa                   	cli    
c000e76e:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000e774:	ff 05 ac c6 02 c0    	inc    DWORD PTR ds:0xc002c6ac
c000e77a:	c3                   	ret    

c000e77b <unlockStuff()>:
c000e77b:	83 ec 0c             	sub    esp,0xc
c000e77e:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000e783:	48                   	dec    eax
c000e784:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000e789:	75 18                	jne    c000e7a3 <unlockStuff()+0x28>
c000e78b:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c000e792:	74 0f                	je     c000e7a3 <unlockStuff()+0x28>
c000e794:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000e79e:	e8 e5 6c 00 00       	call   c0015488 <schedule()>
c000e7a3:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e7a8:	48                   	dec    eax
c000e7a9:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e7ae:	75 01                	jne    c000e7b1 <unlockStuff()+0x36>
c000e7b0:	fb                   	sti    
c000e7b1:	83 c4 0c             	add    esp,0xc
c000e7b4:	c3                   	ret    

c000e7b5 <Virt::getAKernelVAS()>:
c000e7b5:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c000e7ba:	c3                   	ret    

c000e7bb <__not_memcpy>:
c000e7bb:	57                   	push   edi
c000e7bc:	56                   	push   esi
c000e7bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e7c5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e7c9:	89 c7                	mov    edi,eax
c000e7cb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e7cd:	5e                   	pop    esi
c000e7ce:	5f                   	pop    edi
c000e7cf:	c3                   	ret    

c000e7d0 <sbrk>:
c000e7d0:	55                   	push   ebp
c000e7d1:	57                   	push   edi
c000e7d2:	56                   	push   esi
c000e7d3:	53                   	push   ebx
c000e7d4:	83 ec 1c             	sub    esp,0x1c
c000e7d7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e7db:	85 c0                	test   eax,eax
c000e7dd:	74 61                	je     c000e840 <sbrk+0x70>
c000e7df:	78 66                	js     c000e847 <sbrk+0x77>
c000e7e1:	8b 15 10 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024010
c000e7e7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e7eb:	05 ff 0f 00 00       	add    eax,0xfff
c000e7f0:	89 c5                	mov    ebp,eax
c000e7f2:	78 6b                	js     c000e85f <sbrk+0x8f>
c000e7f4:	c1 fd 0c             	sar    ebp,0xc
c000e7f7:	bb 00 00 00 00       	mov    ebx,0x0
c000e7fc:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e802:	8b 3d 10 40 02 c0    	mov    edi,DWORD PTR ds:0xc0024010
c000e808:	e8 b9 06 00 00       	call   c000eec6 <Phys::allocatePage()>
c000e80d:	68 01 04 00 00       	push   0x401
c000e812:	57                   	push   edi
c000e813:	50                   	push   eax
c000e814:	56                   	push   esi
c000e815:	e8 1a 3f 00 00       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e81a:	81 05 10 40 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0024010,0x1000
c000e824:	83 c3 01             	add    ebx,0x1
c000e827:	83 c4 10             	add    esp,0x10
c000e82a:	39 dd                	cmp    ebp,ebx
c000e82c:	75 ce                	jne    c000e7fc <sbrk+0x2c>
c000e82e:	0f 20 d8             	mov    eax,cr3
c000e831:	0f 22 d8             	mov    cr3,eax
c000e834:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e838:	83 c4 1c             	add    esp,0x1c
c000e83b:	5b                   	pop    ebx
c000e83c:	5e                   	pop    esi
c000e83d:	5f                   	pop    edi
c000e83e:	5d                   	pop    ebp
c000e83f:	c3                   	ret    
c000e840:	a1 10 40 02 c0       	mov    eax,ds:0xc0024010
c000e845:	eb f1                	jmp    c000e838 <sbrk+0x68>
c000e847:	83 ec 08             	sub    esp,0x8
c000e84a:	50                   	push   eax
c000e84b:	68 94 1f 02 c0       	push   0xc0021f94
c000e850:	e8 0f 87 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e855:	83 c4 10             	add    esp,0x10
c000e858:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e85d:	eb d9                	jmp    c000e838 <sbrk+0x68>
c000e85f:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000e865:	eb 8d                	jmp    c000e7f4 <sbrk+0x24>

c000e867 <sbrk_thunk>:
c000e867:	83 ec 0c             	sub    esp,0xc
c000e86a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86e:	3d ff bf 00 00       	cmp    eax,0xbfff
c000e873:	7f 10                	jg     c000e885 <sbrk_thunk+0x1e>
c000e875:	83 ec 0c             	sub    esp,0xc
c000e878:	50                   	push   eax
c000e879:	e8 52 ff ff ff       	call   c000e7d0 <sbrk>
c000e87e:	83 c4 10             	add    esp,0x10
c000e881:	83 c4 0c             	add    esp,0xc
c000e884:	c3                   	ret    
c000e885:	83 ec 08             	sub    esp,0x8
c000e888:	50                   	push   eax
c000e889:	68 c4 1f 02 c0       	push   0xc0021fc4
c000e88e:	e8 d1 86 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e893:	83 c4 10             	add    esp,0x10
c000e896:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e89b:	eb e4                	jmp    c000e881 <sbrk_thunk+0x1a>

c000e89d <mmap>:
c000e89d:	55                   	push   ebp
c000e89e:	57                   	push   edi
c000e89f:	56                   	push   esi
c000e8a0:	53                   	push   ebx
c000e8a1:	83 ec 18             	sub    esp,0x18
c000e8a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e8a8:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000e8ae:	89 fb                	mov    ebx,edi
c000e8b0:	c1 eb 0c             	shr    ebx,0xc
c000e8b3:	53                   	push   ebx
c000e8b4:	e8 92 37 00 00       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c000e8b9:	89 c5                	mov    ebp,eax
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	85 db                	test   ebx,ebx
c000e8c0:	7e 2f                	jle    c000e8f1 <mmap+0x54>
c000e8c2:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000e8c8:	01 c7                	add    edi,eax
c000e8ca:	89 c3                	mov    ebx,eax
c000e8cc:	8b 35 d0 be 02 c0    	mov    esi,DWORD PTR ds:0xc002bed0
c000e8d2:	e8 ef 05 00 00       	call   c000eec6 <Phys::allocatePage()>
c000e8d7:	68 01 04 00 00       	push   0x401
c000e8dc:	53                   	push   ebx
c000e8dd:	50                   	push   eax
c000e8de:	56                   	push   esi
c000e8df:	e8 50 3e 00 00       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c000e8e4:	81 c3 00 10 00 00    	add    ebx,0x1000
c000e8ea:	83 c4 10             	add    esp,0x10
c000e8ed:	39 fb                	cmp    ebx,edi
c000e8ef:	75 db                	jne    c000e8cc <mmap+0x2f>
c000e8f1:	89 e8                	mov    eax,ebp
c000e8f3:	83 c4 0c             	add    esp,0xc
c000e8f6:	5b                   	pop    ebx
c000e8f7:	5e                   	pop    esi
c000e8f8:	5f                   	pop    edi
c000e8f9:	5d                   	pop    ebp
c000e8fa:	c3                   	ret    

c000e8fb <munmap>:
c000e8fb:	83 ec 18             	sub    esp,0x18
c000e8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e902:	e8 4c 3a 00 00       	call   c0012353 <Virt::freeKernelVirtualPages(unsigned long)>
c000e907:	b8 00 00 00 00       	mov    eax,0x0
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	c3                   	ret    

c000e910 <liballoc_lock()>:
c000e910:	fa                   	cli    
c000e911:	83 05 b0 c6 02 c0 01 	add    DWORD PTR ds:0xc002c6b0,0x1
c000e918:	b8 00 00 00 00       	mov    eax,0x0
c000e91d:	c3                   	ret    

c000e91e <liballoc_unlock()>:
c000e91e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e923:	83 e8 01             	sub    eax,0x1
c000e926:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e92b:	75 01                	jne    c000e92e <liballoc_unlock()+0x10>
c000e92d:	fb                   	sti    
c000e92e:	b8 00 00 00 00       	mov    eax,0x0
c000e933:	c3                   	ret    

c000e934 <liballoc_alloc(int)>:
c000e934:	83 ec 10             	sub    esp,0x10
c000e937:	6a 01                	push   0x1
c000e939:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e93d:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e943:	e8 f0 3e 00 00       	call   c0012838 <VAS::allocatePages(int, int)>
c000e948:	83 c4 1c             	add    esp,0x1c
c000e94b:	c3                   	ret    

c000e94c <liballoc_free(void*, int)>:
c000e94c:	83 ec 14             	sub    esp,0x14
c000e94f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e953:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c000e959:	e8 32 3b 00 00       	call   c0012490 <VAS::freeAllocatedPages(unsigned long)>
c000e95e:	b8 00 00 00 00       	mov    eax,0x0
c000e963:	83 c4 1c             	add    esp,0x1c
c000e966:	c3                   	ret    

c000e967 <realloc>:
c000e967:	83 ec 14             	sub    esp,0x14
c000e96a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e96e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e972:	e8 e0 2d ff ff       	call   c0001757 <dlrealloc>
c000e977:	83 c4 1c             	add    esp,0x1c
c000e97a:	c3                   	ret    

c000e97b <malloc>:
c000e97b:	83 ec 18             	sub    esp,0x18
c000e97e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e982:	e8 93 28 ff ff       	call   c000121a <dlmalloc>
c000e987:	83 c4 1c             	add    esp,0x1c
c000e98a:	c3                   	ret    

c000e98b <free>:
c000e98b:	83 ec 18             	sub    esp,0x18
c000e98e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e992:	e8 bc 23 ff ff       	call   c0000d53 <dlfree>
c000e997:	83 c4 1c             	add    esp,0x1c
c000e99a:	c3                   	ret    

c000e99b <rfree>:
c000e99b:	83 ec 18             	sub    esp,0x18
c000e99e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e9a2:	e8 ac 23 ff ff       	call   c0000d53 <dlfree>
c000e9a7:	83 c4 1c             	add    esp,0x1c
c000e9aa:	c3                   	ret    

c000e9ab <calloc>:
c000e9ab:	56                   	push   esi
c000e9ac:	53                   	push   ebx
c000e9ad:	83 ec 10             	sub    esp,0x10
c000e9b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e9b4:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000e9b9:	53                   	push   ebx
c000e9ba:	e8 bc ff ff ff       	call   c000e97b <malloc>
c000e9bf:	89 c6                	mov    esi,eax
c000e9c1:	83 c4 0c             	add    esp,0xc
c000e9c4:	53                   	push   ebx
c000e9c5:	6a 00                	push   0x0
c000e9c7:	50                   	push   eax
c000e9c8:	e8 23 1b ff ff       	call   c00004f0 <memset>
c000e9cd:	89 f0                	mov    eax,esi
c000e9cf:	83 c4 14             	add    esp,0x14
c000e9d2:	5b                   	pop    ebx
c000e9d3:	5e                   	pop    esi
c000e9d4:	c3                   	ret    
c000e9d5:	66 90                	xchg   ax,ax
c000e9d7:	90                   	nop

c000e9d8 <KeMailboxTryPost(Mailbox*, void*)>:
c000e9d8:	83 ec 10             	sub    esp,0x10
c000e9db:	fa                   	cli    
c000e9dc:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000e9e1:	83 c0 01             	add    eax,0x1
c000e9e4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000e9e9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000e9ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e9f5:	85 c0                	test   eax,eax
c000e9f7:	75 23                	jne    c000ea1c <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000e9f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e9fd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ea01:	89 10                	mov    DWORD PTR [eax],edx
c000ea03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea0a:	8d 50 01             	lea    edx,[eax+0x1]
c000ea0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea11:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea14:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ea19:	8d 76 00             	lea    esi,[esi+0x0]
c000ea1c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea21:	83 e8 01             	sub    eax,0x1
c000ea24:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea29:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea2e:	85 c0                	test   eax,eax
c000ea30:	75 02                	jne    c000ea34 <KeMailboxTryPost(Mailbox*, void*)+0x5c>
c000ea32:	fb                   	sti    
c000ea33:	90                   	nop
c000ea34:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea38:	83 c4 10             	add    esp,0x10
c000ea3b:	c3                   	ret    

c000ea3c <KeMailboxTryGet(Mailbox*, void**)>:
c000ea3c:	83 ec 10             	sub    esp,0x10
c000ea3f:	fa                   	cli    
c000ea40:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea45:	83 c0 01             	add    eax,0x1
c000ea48:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea4d:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000ea52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea59:	83 f8 01             	cmp    eax,0x1
c000ea5c:	75 22                	jne    c000ea80 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000ea5e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea62:	8b 10                	mov    edx,DWORD PTR [eax]
c000ea64:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea68:	89 10                	mov    DWORD PTR [eax],edx
c000ea6a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea6e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ea71:	8d 50 ff             	lea    edx,[eax-0x1]
c000ea74:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea78:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000ea7b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000ea80:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea85:	83 e8 01             	sub    eax,0x1
c000ea88:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000ea8d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000ea92:	85 c0                	test   eax,eax
c000ea94:	75 02                	jne    c000ea98 <KeMailboxTryGet(Mailbox*, void**)+0x5c>
c000ea96:	fb                   	sti    
c000ea97:	90                   	nop
c000ea98:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea9c:	83 c4 10             	add    esp,0x10
c000ea9f:	c3                   	ret    

c000eaa0 <KeMailboxCreate()>:
c000eaa0:	83 ec 1c             	sub    esp,0x1c
c000eaa3:	83 ec 0c             	sub    esp,0xc
c000eaa6:	6a 08                	push   0x8
c000eaa8:	e8 ce fe ff ff       	call   c000e97b <malloc>
c000eaad:	83 c4 10             	add    esp,0x10
c000eab0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000eab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eab8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000eabe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eac2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000eac9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eacd:	83 c4 1c             	add    esp,0x1c
c000ead0:	c3                   	ret    
c000ead1:	8d 76 00             	lea    esi,[esi+0x0]

c000ead4 <KeMailboxPost(Mailbox*, void*)>:
c000ead4:	83 ec 1c             	sub    esp,0x1c
c000ead7:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eadc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eae0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eae4:	e8 ef fe ff ff       	call   c000e9d8 <KeMailboxTryPost(Mailbox*, void*)>
c000eae9:	83 c4 08             	add    esp,0x8
c000eaec:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eaf0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eaf4:	83 f0 01             	xor    eax,0x1
c000eaf7:	0f b6 c0             	movzx  eax,al
c000eafa:	85 c0                	test   eax,eax
c000eafc:	74 2a                	je     c000eb28 <KeMailboxPost(Mailbox*, void*)+0x54>
c000eafe:	fa                   	cli    
c000eaff:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb04:	83 c0 01             	add    eax,0x1
c000eb07:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb0c:	e8 77 69 00 00       	call   c0015488 <schedule()>
c000eb11:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb16:	83 e8 01             	sub    eax,0x1
c000eb19:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb1e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb23:	85 c0                	test   eax,eax
c000eb25:	75 01                	jne    c000eb28 <KeMailboxPost(Mailbox*, void*)+0x54>
c000eb27:	fb                   	sti    
c000eb28:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb2d:	85 c0                	test   eax,eax
c000eb2f:	75 03                	jne    c000eb34 <KeMailboxPost(Mailbox*, void*)+0x60>
c000eb31:	eb a9                	jmp    c000eadc <KeMailboxPost(Mailbox*, void*)+0x8>
c000eb33:	90                   	nop
c000eb34:	90                   	nop
c000eb35:	83 c4 1c             	add    esp,0x1c
c000eb38:	c3                   	ret    
c000eb39:	8d 76 00             	lea    esi,[esi+0x0]

c000eb3c <KeMailboxGet(Mailbox*, void**)>:
c000eb3c:	83 ec 1c             	sub    esp,0x1c
c000eb3f:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000eb44:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000eb4c:	e8 eb fe ff ff       	call   c000ea3c <KeMailboxTryGet(Mailbox*, void**)>
c000eb51:	83 c4 08             	add    esp,0x8
c000eb54:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000eb58:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eb5c:	83 f0 01             	xor    eax,0x1
c000eb5f:	0f b6 c0             	movzx  eax,al
c000eb62:	85 c0                	test   eax,eax
c000eb64:	74 2a                	je     c000eb90 <KeMailboxGet(Mailbox*, void**)+0x54>
c000eb66:	fa                   	cli    
c000eb67:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb6c:	83 c0 01             	add    eax,0x1
c000eb6f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb74:	e8 0f 69 00 00       	call   c0015488 <schedule()>
c000eb79:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb7e:	83 e8 01             	sub    eax,0x1
c000eb81:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000eb86:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000eb8b:	85 c0                	test   eax,eax
c000eb8d:	75 01                	jne    c000eb90 <KeMailboxGet(Mailbox*, void**)+0x54>
c000eb8f:	fb                   	sti    
c000eb90:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb95:	85 c0                	test   eax,eax
c000eb97:	75 03                	jne    c000eb9c <KeMailboxGet(Mailbox*, void**)+0x60>
c000eb99:	eb a9                	jmp    c000eb44 <KeMailboxGet(Mailbox*, void**)+0x8>
c000eb9b:	90                   	nop
c000eb9c:	90                   	nop
c000eb9d:	83 c4 1c             	add    esp,0x1c
c000eba0:	c3                   	ret    
c000eba1:	8d 76 00             	lea    esi,[esi+0x0]

c000eba4 <KeMailboxDestroy(Mailbox*)>:
c000eba4:	83 ec 0c             	sub    esp,0xc
c000eba7:	83 ec 0c             	sub    esp,0xc
c000ebaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebae:	e8 d8 fd ff ff       	call   c000e98b <free>
c000ebb3:	83 c4 10             	add    esp,0x10
c000ebb6:	90                   	nop
c000ebb7:	83 c4 0c             	add    esp,0xc
c000ebba:	c3                   	ret    

c000ebbb <KeEntryPoint>:
c000ebbb:	57                   	push   edi
c000ebbc:	bf f9 03 00 00       	mov    edi,0x3f9
c000ebc1:	56                   	push   esi
c000ebc2:	89 fa                	mov    edx,edi
c000ebc4:	53                   	push   ebx
c000ebc5:	31 f6                	xor    esi,esi
c000ebc7:	83 ec 2c             	sub    esp,0x2c
c000ebca:	a1 00 05 00 00       	mov    eax,ds:0x500
c000ebcf:	a3 90 bd 02 c0       	mov    ds:0xc002bd90,eax
c000ebd4:	89 f0                	mov    eax,esi
c000ebd6:	ee                   	out    dx,al
c000ebd7:	bb fb 03 00 00       	mov    ebx,0x3fb
c000ebdc:	b0 80                	mov    al,0x80
c000ebde:	89 da                	mov    edx,ebx
c000ebe0:	ee                   	out    dx,al
c000ebe1:	b1 03                	mov    cl,0x3
c000ebe3:	ba f8 03 00 00       	mov    edx,0x3f8
c000ebe8:	88 c8                	mov    al,cl
c000ebea:	ee                   	out    dx,al
c000ebeb:	89 f0                	mov    eax,esi
c000ebed:	89 fa                	mov    edx,edi
c000ebef:	ee                   	out    dx,al
c000ebf0:	88 c8                	mov    al,cl
c000ebf2:	89 da                	mov    edx,ebx
c000ebf4:	ee                   	out    dx,al
c000ebf5:	b0 c7                	mov    al,0xc7
c000ebf7:	ba fa 03 00 00       	mov    edx,0x3fa
c000ebfc:	ee                   	out    dx,al
c000ebfd:	b0 0b                	mov    al,0xb
c000ebff:	ba fc 03 00 00       	mov    edx,0x3fc
c000ec04:	ee                   	out    dx,al
c000ec05:	68 d3 1f 02 c0       	push   0xc0021fd3
c000ec0a:	e8 55 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec0f:	e8 05 da ff ff       	call   c000c619 <KeDisplaySplashScreen()>
c000ec14:	a1 24 05 00 00       	mov    eax,ds:0x524
c000ec19:	05 ff 0f 00 00       	add    eax,0xfff
c000ec1e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000ec23:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec26:	e8 09 04 00 00       	call   c000f034 <Phys::physicalMemorySetup(unsigned int)>
c000ec2b:	e8 f9 35 00 00       	call   c0012229 <Virt::virtualMemorySetup()>
c000ec30:	e8 2e d9 ff ff       	call   c000c563 <KeInitialiseAtexit()>
c000ec35:	c7 04 24 ea 1f 02 c0 	mov    DWORD PTR [esp],0xc0021fea
c000ec3c:	e8 23 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec41:	58                   	pop    eax
c000ec42:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ec46:	53                   	push   ebx
c000ec47:	e8 c4 38 00 00       	call   c0012510 <VAS::VAS()>
c000ec4c:	c7 04 24 fa 1f 02 c0 	mov    DWORD PTR [esp],0xc0021ffa
c000ec53:	89 1d d0 be 02 c0    	mov    DWORD PTR ds:0xc002bed0,ebx
c000ec59:	e8 06 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec5e:	e8 4b 10 01 00       	call   c001fcae <_init>
c000ec63:	c7 04 24 0e 20 02 c0 	mov    DWORD PTR [esp],0xc002200e
c000ec6a:	e8 f5 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec6f:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ec76:	e8 00 fd ff ff       	call   c000e97b <malloc>
c000ec7b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ec7e:	89 c6                	mov    esi,eax
c000ec80:	e8 5f ea ff ff       	call   c000d6e4 <Computer::Computer()>
c000ec85:	5a                   	pop    edx
c000ec86:	89 35 70 9d 02 c0    	mov    DWORD PTR ds:0xc0029d70,esi
c000ec8c:	59                   	pop    ecx
c000ec8d:	56                   	push   esi
c000ec8e:	68 1d 20 02 c0       	push   0xc002201d
c000ec93:	e8 cc 82 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ec98:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c000ec9d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ec9f:	53                   	push   ebx
c000eca0:	6a 00                	push   0x0
c000eca2:	6a 00                	push   0x0
c000eca4:	50                   	push   eax
c000eca5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000eca8:	83 c4 14             	add    esp,0x14
c000ecab:	53                   	push   ebx
c000ecac:	e8 15 39 00 00       	call   c00125c6 <VAS::~VAS()>
c000ecb1:	83 c4 30             	add    esp,0x30
c000ecb4:	5b                   	pop    ebx
c000ecb5:	5e                   	pop    esi
c000ecb6:	5f                   	pop    edi
c000ecb7:	c3                   	ret    

c000ecb8 <Mutex::Mutex()>:
c000ecb8:	83 ec 0c             	sub    esp,0xc
c000ecbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ecbf:	83 ec 08             	sub    esp,0x8
c000ecc2:	6a 01                	push   0x1
c000ecc4:	50                   	push   eax
c000ecc5:	e8 2e 0c 00 00       	call   c000f8f8 <Semaphore::Semaphore(int)>
c000ecca:	83 c4 10             	add    esp,0x10
c000eccd:	90                   	nop
c000ecce:	83 c4 0c             	add    esp,0xc
c000ecd1:	c3                   	ret    

c000ecd2 <KePanic(char const*)>:
c000ecd2:	c6 05 94 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd94,0x1
c000ecd9:	e9 72 96 00 00       	jmp    c0018350 <HalPanic(char const*)>

c000ecde <Phys::allocateDMA(unsigned long)>:
c000ecde:	55                   	push   ebp
c000ecdf:	31 ed                	xor    ebp,ebp
c000ece1:	57                   	push   edi
c000ece2:	56                   	push   esi
c000ece3:	53                   	push   ebx
c000ece4:	31 db                	xor    ebx,ebx
c000ece6:	83 ec 1c             	sub    esp,0x1c
c000ece9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000eced:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ecf5:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000ecfb:	31 c0                	xor    eax,eax
c000ecfd:	c1 ef 0c             	shr    edi,0xc
c000ed00:	eb 1b                	jmp    c000ed1d <Phys::allocateDMA(unsigned long)+0x3f>
c000ed02:	85 c0                	test   eax,eax
c000ed04:	75 06                	jne    c000ed0c <Phys::allocateDMA(unsigned long)+0x2e>
c000ed06:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ed0a:	89 dd                	mov    ebp,ebx
c000ed0c:	8d 70 01             	lea    esi,[eax+0x1]
c000ed0f:	39 f7                	cmp    edi,esi
c000ed11:	74 37                	je     c000ed4a <Phys::allocateDMA(unsigned long)+0x6c>
c000ed13:	89 f0                	mov    eax,esi
c000ed15:	83 c3 01             	add    ebx,0x1
c000ed18:	83 fb 0f             	cmp    ebx,0xf
c000ed1b:	7f 13                	jg     c000ed30 <Phys::allocateDMA(unsigned long)+0x52>
c000ed1d:	80 bb b0 bd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd4250],0x0
c000ed24:	74 dc                	je     c000ed02 <Phys::allocateDMA(unsigned long)+0x24>
c000ed26:	31 c0                	xor    eax,eax
c000ed28:	83 c3 01             	add    ebx,0x1
c000ed2b:	83 fb 0f             	cmp    ebx,0xf
c000ed2e:	7e ed                	jle    c000ed1d <Phys::allocateDMA(unsigned long)+0x3f>
c000ed30:	83 ec 0c             	sub    esp,0xc
c000ed33:	68 34 20 02 c0       	push   0xc0022034
c000ed38:	e8 95 ff ff ff       	call   c000ecd2 <KePanic(char const*)>
c000ed3d:	83 c4 10             	add    esp,0x10
c000ed40:	31 c0                	xor    eax,eax
c000ed42:	83 c4 1c             	add    esp,0x1c
c000ed45:	5b                   	pop    ebx
c000ed46:	5e                   	pop    esi
c000ed47:	5f                   	pop    edi
c000ed48:	5d                   	pop    ebp
c000ed49:	c3                   	ret    
c000ed4a:	89 e9                	mov    ecx,ebp
c000ed4c:	c1 f9 04             	sar    ecx,0x4
c000ed4f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ed53:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000ed57:	89 ca                	mov    edx,ecx
c000ed59:	83 ea 01             	sub    edx,0x1
c000ed5c:	79 03                	jns    c000ed61 <Phys::allocateDMA(unsigned long)+0x83>
c000ed5e:	8d 51 0e             	lea    edx,[ecx+0xe]
c000ed61:	c1 fa 04             	sar    edx,0x4
c000ed64:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000ed68:	74 08                	je     c000ed72 <Phys::allocateDMA(unsigned long)+0x94>
c000ed6a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000ed6e:	31 c0                	xor    eax,eax
c000ed70:	eb b6                	jmp    c000ed28 <Phys::allocateDMA(unsigned long)+0x4a>
c000ed72:	85 f6                	test   esi,esi
c000ed74:	74 17                	je     c000ed8d <Phys::allocateDMA(unsigned long)+0xaf>
c000ed76:	8d 95 b0 bd 02 c0    	lea    edx,[ebp-0x3ffd4250]
c000ed7c:	8d 84 05 b1 bd 02 c0 	lea    eax,[ebp+eax*1-0x3ffd424f]
c000ed83:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000ed86:	83 c2 01             	add    edx,0x1
c000ed89:	39 d0                	cmp    eax,edx
c000ed8b:	75 f6                	jne    c000ed83 <Phys::allocateDMA(unsigned long)+0xa5>
c000ed8d:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ed92:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ed96:	01 f8                	add    eax,edi
c000ed98:	85 d2                	test   edx,edx
c000ed9a:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ed9f:	74 17                	je     c000edb8 <Phys::allocateDMA(unsigned long)+0xda>
c000eda1:	83 ec 0c             	sub    esp,0xc
c000eda4:	68 34 20 02 c0       	push   0xc0022034
c000eda9:	e8 24 ff ff ff       	call   c000ecd2 <KePanic(char const*)>
c000edae:	83 c4 10             	add    esp,0x10
c000edb1:	89 f0                	mov    eax,esi
c000edb3:	e9 5d ff ff ff       	jmp    c000ed15 <Phys::allocateDMA(unsigned long)+0x37>
c000edb8:	c1 e5 0c             	shl    ebp,0xc
c000edbb:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000edc1:	e9 7c ff ff ff       	jmp    c000ed42 <Phys::allocateDMA(unsigned long)+0x64>

c000edc6 <Phys::freeDMA(unsigned long, unsigned long)>:
c000edc6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000edca:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000edd0:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000edd5:	c1 ea 0c             	shr    edx,0xc
c000edd8:	29 d0                	sub    eax,edx
c000edda:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000eddf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ede3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000ede8:	c1 e8 0c             	shr    eax,0xc
c000edeb:	85 d2                	test   edx,edx
c000eded:	74 11                	je     c000ee00 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000edef:	05 b0 bd 02 c0       	add    eax,0xc002bdb0
c000edf4:	01 c2                	add    edx,eax
c000edf6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000edf9:	83 c0 01             	add    eax,0x1
c000edfc:	39 d0                	cmp    eax,edx
c000edfe:	75 f6                	jne    c000edf6 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000ee00:	c3                   	ret    

c000ee01 <Phys::setPageState(unsigned long, bool)>:
c000ee01:	57                   	push   edi
c000ee02:	56                   	push   esi
c000ee03:	8b 35 14 40 02 c0    	mov    esi,DWORD PTR ds:0xc0024014
c000ee09:	53                   	push   ebx
c000ee0a:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000ee0f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ee13:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ee17:	0f b6 c0             	movzx  eax,al
c000ee1a:	89 ca                	mov    edx,ecx
c000ee1c:	83 e1 07             	and    ecx,0x7
c000ee1f:	c1 ea 03             	shr    edx,0x3
c000ee22:	d3 c3                	rol    ebx,cl
c000ee24:	01 d6                	add    esi,edx
c000ee26:	d3 e0                	shl    eax,cl
c000ee28:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000ee2b:	21 fb                	and    ebx,edi
c000ee2d:	88 1e                	mov    BYTE PTR [esi],bl
c000ee2f:	8b 1d 14 40 02 c0    	mov    ebx,DWORD PTR ds:0xc0024014
c000ee35:	01 da                	add    edx,ebx
c000ee37:	8a 0a                	mov    cl,BYTE PTR [edx]
c000ee39:	09 c8                	or     eax,ecx
c000ee3b:	88 02                	mov    BYTE PTR [edx],al
c000ee3d:	5b                   	pop    ebx
c000ee3e:	5e                   	pop    esi
c000ee3f:	5f                   	pop    edi
c000ee40:	c3                   	ret    

c000ee41 <Phys::getPageState(unsigned long)>:
c000ee41:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ee45:	8b 15 14 40 02 c0    	mov    edx,DWORD PTR ds:0xc0024014
c000ee4b:	89 c8                	mov    eax,ecx
c000ee4d:	83 e1 07             	and    ecx,0x7
c000ee50:	c1 e8 03             	shr    eax,0x3
c000ee53:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000ee57:	d3 f8                	sar    eax,cl
c000ee59:	83 e0 01             	and    eax,0x1
c000ee5c:	c3                   	ret    

c000ee5d <Phys::freePage(unsigned long)>:
c000ee5d:	53                   	push   ebx
c000ee5e:	83 ec 08             	sub    esp,0x8
c000ee61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee65:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000ee6b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000ee71:	76 41                	jbe    c000eeb4 <Phys::freePage(unsigned long)+0x57>
c000ee73:	c1 e8 0c             	shr    eax,0xc
c000ee76:	50                   	push   eax
c000ee77:	89 c3                	mov    ebx,eax
c000ee79:	e8 c3 ff ff ff       	call   c000ee41 <Phys::getPageState(unsigned long)>
c000ee7e:	5a                   	pop    edx
c000ee7f:	84 c0                	test   al,al
c000ee81:	74 20                	je     c000eea3 <Phys::freePage(unsigned long)+0x46>
c000ee83:	83 ec 08             	sub    esp,0x8
c000ee86:	a1 a8 bd 02 c0       	mov    eax,ds:0xc002bda8
c000ee8b:	6a 00                	push   0x0
c000ee8d:	83 e8 01             	sub    eax,0x1
c000ee90:	53                   	push   ebx
c000ee91:	a3 a8 bd 02 c0       	mov    ds:0xc002bda8,eax
c000ee96:	e8 66 ff ff ff       	call   c000ee01 <Phys::setPageState(unsigned long, bool)>
c000ee9b:	83 c4 10             	add    esp,0x10
c000ee9e:	83 c4 08             	add    esp,0x8
c000eea1:	5b                   	pop    ebx
c000eea2:	c3                   	ret    
c000eea3:	c7 44 24 10 d9 20 02 c0 	mov    DWORD PTR [esp+0x10],0xc00220d9
c000eeab:	83 c4 08             	add    esp,0x8
c000eeae:	5b                   	pop    ebx
c000eeaf:	e9 1e fe ff ff       	jmp    c000ecd2 <KePanic(char const*)>
c000eeb4:	68 00 10 00 00       	push   0x1000
c000eeb9:	50                   	push   eax
c000eeba:	e8 07 ff ff ff       	call   c000edc6 <Phys::freeDMA(unsigned long, unsigned long)>
c000eebf:	59                   	pop    ecx
c000eec0:	5b                   	pop    ebx
c000eec1:	83 c4 08             	add    esp,0x8
c000eec4:	5b                   	pop    ebx
c000eec5:	c3                   	ret    

c000eec6 <Phys::allocatePage()>:
c000eec6:	56                   	push   esi
c000eec7:	53                   	push   ebx
c000eec8:	83 ec 14             	sub    esp,0x14
c000eecb:	8b 35 9c bd 02 c0    	mov    esi,DWORD PTR ds:0xc002bd9c
c000eed1:	89 f3                	mov    ebx,esi
c000eed3:	eb 0a                	jmp    c000eedf <Phys::allocatePage()+0x19>
c000eed5:	89 1d 9c bd 02 c0    	mov    DWORD PTR ds:0xc002bd9c,ebx
c000eedb:	39 de                	cmp    esi,ebx
c000eedd:	74 26                	je     c000ef05 <Phys::allocatePage()+0x3f>
c000eedf:	53                   	push   ebx
c000eee0:	e8 5c ff ff ff       	call   c000ee41 <Phys::getPageState(unsigned long)>
c000eee5:	5a                   	pop    edx
c000eee6:	84 c0                	test   al,al
c000eee8:	74 67                	je     c000ef51 <Phys::allocatePage()+0x8b>
c000eeea:	83 c3 01             	add    ebx,0x1
c000eeed:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000eef3:	75 e0                	jne    c000eed5 <Phys::allocatePage()+0xf>
c000eef5:	31 db                	xor    ebx,ebx
c000eef7:	c7 05 9c bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd9c,0x0
c000ef01:	39 de                	cmp    esi,ebx
c000ef03:	75 da                	jne    c000eedf <Phys::allocatePage()+0x19>
c000ef05:	83 ec 0c             	sub    esp,0xc
c000ef08:	a0 c0 bd 02 c0       	mov    al,ds:0xc002bdc0
c000ef0d:	83 f0 01             	xor    eax,0x1
c000ef10:	a2 c0 bd 02 c0       	mov    ds:0xc002bdc0,al
c000ef15:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ef1a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ef1d:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c000ef23:	50                   	push   eax
c000ef24:	e8 51 40 00 00       	call   c0012f7a <VAS::scanForEviction()>
c000ef29:	83 c4 10             	add    esp,0x10
c000ef2c:	85 c0                	test   eax,eax
c000ef2e:	75 48                	jne    c000ef78 <Phys::allocatePage()+0xb2>
c000ef30:	83 ec 0c             	sub    esp,0xc
c000ef33:	68 5c 20 02 c0       	push   0xc002205c
c000ef38:	e8 95 fd ff ff       	call   c000ecd2 <KePanic(char const*)>
c000ef3d:	83 c4 10             	add    esp,0x10
c000ef40:	8b 1d 9c bd 02 c0    	mov    ebx,DWORD PTR ds:0xc002bd9c
c000ef46:	53                   	push   ebx
c000ef47:	e8 f5 fe ff ff       	call   c000ee41 <Phys::getPageState(unsigned long)>
c000ef4c:	5a                   	pop    edx
c000ef4d:	84 c0                	test   al,al
c000ef4f:	75 99                	jne    c000eeea <Phys::allocatePage()+0x24>
c000ef51:	6a 01                	push   0x1
c000ef53:	53                   	push   ebx
c000ef54:	e8 a8 fe ff ff       	call   c000ee01 <Phys::setPageState(unsigned long, bool)>
c000ef59:	8b 15 a8 bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bda8
c000ef5f:	a1 9c bd 02 c0       	mov    eax,ds:0xc002bd9c
c000ef64:	83 c2 01             	add    edx,0x1
c000ef67:	59                   	pop    ecx
c000ef68:	89 15 a8 bd 02 c0    	mov    DWORD PTR ds:0xc002bda8,edx
c000ef6e:	c1 e0 0c             	shl    eax,0xc
c000ef71:	5b                   	pop    ebx
c000ef72:	83 c4 14             	add    esp,0x14
c000ef75:	5b                   	pop    ebx
c000ef76:	5e                   	pop    esi
c000ef77:	c3                   	ret    
c000ef78:	83 ec 08             	sub    esp,0x8
c000ef7b:	89 c2                	mov    edx,eax
c000ef7d:	6a 01                	push   0x1
c000ef7f:	c1 ea 0c             	shr    edx,0xc
c000ef82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ef86:	52                   	push   edx
c000ef87:	e8 75 fe ff ff       	call   c000ee01 <Phys::setPageState(unsigned long, bool)>
c000ef8c:	83 c4 10             	add    esp,0x10
c000ef8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef93:	eb dd                	jmp    c000ef72 <Phys::allocatePage()+0xac>

c000ef95 <Phys::allocateContiguousPages(int)>:
c000ef95:	57                   	push   edi
c000ef96:	56                   	push   esi
c000ef97:	53                   	push   ebx
c000ef98:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ef9c:	fa                   	cli    
c000ef9d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000efa2:	31 db                	xor    ebx,ebx
c000efa4:	83 c0 01             	add    eax,0x1
c000efa7:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000efac:	85 db                	test   ebx,ebx
c000efae:	75 11                	jne    c000efc1 <Phys::allocateContiguousPages(int)+0x2c>
c000efb0:	e8 11 ff ff ff       	call   c000eec6 <Phys::allocatePage()>
c000efb5:	83 fe 01             	cmp    esi,0x1
c000efb8:	89 c7                	mov    edi,eax
c000efba:	74 21                	je     c000efdd <Phys::allocateContiguousPages(int)+0x48>
c000efbc:	bb 01 00 00 00       	mov    ebx,0x1
c000efc1:	e8 00 ff ff ff       	call   c000eec6 <Phys::allocatePage()>
c000efc6:	89 da                	mov    edx,ebx
c000efc8:	c1 e2 0c             	shl    edx,0xc
c000efcb:	01 fa                	add    edx,edi
c000efcd:	39 c2                	cmp    edx,eax
c000efcf:	74 22                	je     c000eff3 <Phys::allocateContiguousPages(int)+0x5e>
c000efd1:	bb 01 00 00 00       	mov    ebx,0x1
c000efd6:	89 c7                	mov    edi,eax
c000efd8:	83 fe 01             	cmp    esi,0x1
c000efdb:	75 e4                	jne    c000efc1 <Phys::allocateContiguousPages(int)+0x2c>
c000efdd:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000efe2:	83 e8 01             	sub    eax,0x1
c000efe5:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000efea:	75 01                	jne    c000efed <Phys::allocateContiguousPages(int)+0x58>
c000efec:	fb                   	sti    
c000efed:	89 f8                	mov    eax,edi
c000efef:	5b                   	pop    ebx
c000eff0:	5e                   	pop    esi
c000eff1:	5f                   	pop    edi
c000eff2:	c3                   	ret    
c000eff3:	83 c3 01             	add    ebx,0x1
c000eff6:	39 f3                	cmp    ebx,esi
c000eff8:	75 b2                	jne    c000efac <Phys::allocateContiguousPages(int)+0x17>
c000effa:	eb e1                	jmp    c000efdd <Phys::allocateContiguousPages(int)+0x48>

c000effc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000effc:	56                   	push   esi
c000effd:	53                   	push   ebx
c000effe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f002:	39 1d a0 bd 02 c0    	cmp    DWORD PTR ds:0xc002bda0,ebx
c000f008:	73 06                	jae    c000f010 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f00a:	89 1d a0 bd 02 c0    	mov    DWORD PTR ds:0xc002bda0,ebx
c000f010:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f014:	c1 eb 0c             	shr    ebx,0xc
c000f017:	c1 e8 0c             	shr    eax,0xc
c000f01a:	39 d8                	cmp    eax,ebx
c000f01c:	73 13                	jae    c000f031 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f01e:	6a 00                	push   0x0
c000f020:	8d 70 01             	lea    esi,[eax+0x1]
c000f023:	50                   	push   eax
c000f024:	e8 d8 fd ff ff       	call   c000ee01 <Phys::setPageState(unsigned long, bool)>
c000f029:	5a                   	pop    edx
c000f02a:	89 f0                	mov    eax,esi
c000f02c:	59                   	pop    ecx
c000f02d:	39 f3                	cmp    ebx,esi
c000f02f:	75 ed                	jne    c000f01e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f031:	5b                   	pop    ebx
c000f032:	5e                   	pop    esi
c000f033:	c3                   	ret    

c000f034 <Phys::physicalMemorySetup(unsigned int)>:
c000f034:	55                   	push   ebp
c000f035:	57                   	push   edi
c000f036:	56                   	push   esi
c000f037:	53                   	push   ebx
c000f038:	83 ec 40             	sub    esp,0x40
c000f03b:	6a 10                	push   0x10
c000f03d:	6a 00                	push   0x0
c000f03f:	68 b0 bd 02 c0       	push   0xc002bdb0
c000f044:	e8 a7 14 ff ff       	call   c00004f0 <memset>
c000f049:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f04d:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f052:	05 00 10 00 00       	add    eax,0x1000
c000f057:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f05b:	5b                   	pop    ebx
c000f05c:	31 db                	xor    ebx,ebx
c000f05e:	5e                   	pop    esi
c000f05f:	50                   	push   eax
c000f060:	68 ef 20 02 c0       	push   0xc00220ef
c000f065:	e8 fa 7e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f06a:	83 c4 10             	add    esp,0x10
c000f06d:	83 ec 08             	sub    esp,0x8
c000f070:	6a 01                	push   0x1
c000f072:	53                   	push   ebx
c000f073:	83 c3 01             	add    ebx,0x1
c000f076:	e8 86 fd ff ff       	call   c000ee01 <Phys::setPageState(unsigned long, bool)>
c000f07b:	83 c4 10             	add    esp,0x10
c000f07e:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f084:	75 e7                	jne    c000f06d <Phys::physicalMemorySetup(unsigned int)+0x39>
c000f086:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000f08d:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000f094:	c1 e0 08             	shl    eax,0x8
c000f097:	09 c2                	or     edx,eax
c000f099:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000f09d:	0f 84 98 01 00 00    	je     c000f23b <Phys::physicalMemorySetup(unsigned int)+0x207>
c000f0a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f0a7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000f0af:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000f0b4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f0b8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f0c0:	eb 1c                	jmp    c000f0de <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000f0c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f0c6:	83 c3 18             	add    ebx,0x18
c000f0c9:	83 c6 01             	add    esi,0x1
c000f0cc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000f0d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f0d4:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000f0d8:	0f 84 6d 01 00 00    	je     c000f24b <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f0de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000f0e1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000f0e4:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000f0e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f0eb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f0ef:	8b 33                	mov    esi,DWORD PTR [ebx]
c000f0f1:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000f0f4:	01 f0                	add    eax,esi
c000f0f6:	55                   	push   ebp
c000f0f7:	11 fa                	adc    edx,edi
c000f0f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f0fd:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000f101:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f105:	51                   	push   ecx
c000f106:	56                   	push   esi
c000f107:	68 8c 20 02 c0       	push   0xc002208c
c000f10c:	e8 53 7e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f111:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f115:	83 c4 10             	add    esp,0x10
c000f118:	09 f8                	or     eax,edi
c000f11a:	0f 85 2b 01 00 00    	jne    c000f24b <Phys::physicalMemorySetup(unsigned int)+0x217>
c000f120:	83 fd 01             	cmp    ebp,0x1
c000f123:	75 9d                	jne    c000f0c2 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f125:	ba 00 00 08 00       	mov    edx,0x80000
c000f12a:	89 c1                	mov    ecx,eax
c000f12c:	39 f2                	cmp    edx,esi
c000f12e:	19 f9                	sbb    ecx,edi
c000f130:	0f 82 ab 00 00 00    	jb     c000f1e1 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f136:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000f13a:	89 c1                	mov    ecx,eax
c000f13c:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000f140:	0f 83 9b 00 00 00    	jae    c000f1e1 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000f146:	ba 00 00 0a 00       	mov    edx,0xa0000
c000f14b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f14f:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f153:	39 fa                	cmp    edx,edi
c000f155:	19 e8                	sbb    eax,ebp
c000f157:	0f 82 b0 01 00 00    	jb     c000f30d <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c000f15d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000f161:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000f165:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000f16b:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f170:	83 d5 ff             	adc    ebp,0xffffffff
c000f173:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000f177:	31 c0                	xor    eax,eax
c000f179:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000f17d:	39 fa                	cmp    edx,edi
c000f17f:	89 c1                	mov    ecx,eax
c000f181:	19 e9                	sbb    ecx,ebp
c000f183:	0f 83 39 ff ff ff    	jae    c000f0c2 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f189:	be 00 00 08 00       	mov    esi,0x80000
c000f18e:	83 ec 04             	sub    esp,0x4
c000f191:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f195:	57                   	push   edi
c000f196:	56                   	push   esi
c000f197:	68 b0 20 02 c0       	push   0xc00220b0
c000f19c:	e8 c3 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f1a1:	5d                   	pop    ebp
c000f1a2:	58                   	pop    eax
c000f1a3:	57                   	push   edi
c000f1a4:	56                   	push   esi
c000f1a5:	e8 52 fe ff ff       	call   c000effc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000f1aa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f1ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1b2:	83 c4 0c             	add    esp,0xc
c000f1b5:	0f ac d0 0c          	shrd   eax,edx,0xc
c000f1b9:	8b 15 ac bd 02 c0    	mov    edx,DWORD PTR ds:0xc002bdac
c000f1bf:	01 d0                	add    eax,edx
c000f1c1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1c8:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f1cd:	52                   	push   edx
c000f1ce:	50                   	push   eax
c000f1cf:	68 15 21 02 c0       	push   0xc0022115
c000f1d4:	e8 8b 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f1d9:	83 c4 10             	add    esp,0x10
c000f1dc:	e9 e1 fe ff ff       	jmp    c000f0c2 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f1e1:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000f1e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f1e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ed:	39 ea                	cmp    edx,ebp
c000f1ef:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000f1f3:	0f 82 c9 fe ff ff    	jb     c000f0c2 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f1f9:	ba ff 1f 00 00       	mov    edx,0x1fff
c000f1fe:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000f202:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000f206:	0f 83 b6 fe ff ff    	jae    c000f0c2 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000f20c:	39 ee                	cmp    esi,ebp
c000f20e:	89 f8                	mov    eax,edi
c000f210:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000f214:	0f 83 74 ff ff ff    	jae    c000f18e <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f21a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f21e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f222:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000f226:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000f22a:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000f22e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f232:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f236:	e9 53 ff ff ff       	jmp    c000f18e <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000f23b:	83 ec 0c             	sub    esp,0xc
c000f23e:	68 07 21 02 c0       	push   0xc0022107
c000f243:	e8 8a fa ff ff       	call   c000ecd2 <KePanic(char const*)>
c000f248:	83 c4 10             	add    esp,0x10
c000f24b:	83 ec 08             	sub    esp,0x8
c000f24e:	bb 60 00 00 00       	mov    ebx,0x60
c000f253:	6a 00                	push   0x0
c000f255:	6a 06                	push   0x6
c000f257:	e8 a5 fb ff ff       	call   c000ee01 <Phys::setPageState(unsigned long, bool)>
c000f25c:	58                   	pop    eax
c000f25d:	5a                   	pop    edx
c000f25e:	6a 00                	push   0x0
c000f260:	6a 07                	push   0x7
c000f262:	e8 9a fb ff ff       	call   c000ee01 <Phys::setPageState(unsigned long, bool)>
c000f267:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c000f26d:	83 c4 10             	add    esp,0x10
c000f270:	83 c1 02             	add    ecx,0x2
c000f273:	89 0d ac bd 02 c0    	mov    DWORD PTR ds:0xc002bdac,ecx
c000f279:	83 ec 08             	sub    esp,0x8
c000f27c:	6a 00                	push   0x0
c000f27e:	53                   	push   ebx
c000f27f:	83 c3 01             	add    ebx,0x1
c000f282:	e8 7a fb ff ff       	call   c000ee01 <Phys::setPageState(unsigned long, bool)>
c000f287:	83 c4 10             	add    esp,0x10
c000f28a:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000f290:	75 e7                	jne    c000f279 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000f292:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f297:	bb 40 01 00 00       	mov    ebx,0x140
c000f29c:	83 c0 20             	add    eax,0x20
c000f29f:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f2a4:	eb 26                	jmp    c000f2cc <Phys::physicalMemorySetup(unsigned int)+0x298>
c000f2a6:	83 ec 08             	sub    esp,0x8
c000f2a9:	6a 00                	push   0x0
c000f2ab:	53                   	push   ebx
c000f2ac:	83 c3 01             	add    ebx,0x1
c000f2af:	e8 4d fb ff ff       	call   c000ee01 <Phys::setPageState(unsigned long, bool)>
c000f2b4:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f2b9:	83 c4 10             	add    esp,0x10
c000f2bc:	83 c0 01             	add    eax,0x1
c000f2bf:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000f2c5:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f2ca:	74 07                	je     c000f2d3 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c000f2cc:	3d ff 03 00 00       	cmp    eax,0x3ff
c000f2d1:	7e d3                	jle    c000f2a6 <Phys::physicalMemorySetup(unsigned int)+0x272>
c000f2d3:	bb d0 01 00 00       	mov    ebx,0x1d0
c000f2d8:	3d ff 07 00 00       	cmp    eax,0x7ff
c000f2dd:	7f 26                	jg     c000f305 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c000f2df:	83 ec 08             	sub    esp,0x8
c000f2e2:	6a 00                	push   0x0
c000f2e4:	53                   	push   ebx
c000f2e5:	83 c3 01             	add    ebx,0x1
c000f2e8:	e8 14 fb ff ff       	call   c000ee01 <Phys::setPageState(unsigned long, bool)>
c000f2ed:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c000f2f2:	83 c4 10             	add    esp,0x10
c000f2f5:	83 c0 01             	add    eax,0x1
c000f2f8:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000f2fe:	a3 ac bd 02 c0       	mov    ds:0xc002bdac,eax
c000f303:	75 d3                	jne    c000f2d8 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000f305:	83 c4 3c             	add    esp,0x3c
c000f308:	5b                   	pop    ebx
c000f309:	5e                   	pop    esi
c000f30a:	5f                   	pop    edi
c000f30b:	5d                   	pop    ebp
c000f30c:	c3                   	ret    
c000f30d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000f315:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f31d:	e9 3b fe ff ff       	jmp    c000f15d <Phys::physicalMemorySetup(unsigned int)+0x129>

c000f322 <Pipe::isAtty()>:
c000f322:	31 c0                	xor    eax,eax
c000f324:	c3                   	ret    
c000f325:	90                   	nop

c000f326 <Pipe::~Pipe()>:
c000f326:	83 ec 0c             	sub    esp,0xc
c000f329:	ba 74 21 02 c0       	mov    edx,0xc0022174
c000f32e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f332:	89 10                	mov    DWORD PTR [eax],edx
c000f334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f338:	83 ec 0c             	sub    esp,0xc
c000f33b:	50                   	push   eax
c000f33c:	e8 a1 2a 00 00       	call   c0011de2 <UnixFile::~UnixFile()>
c000f341:	83 c4 10             	add    esp,0x10
c000f344:	90                   	nop
c000f345:	83 c4 0c             	add    esp,0xc
c000f348:	c3                   	ret    
c000f349:	90                   	nop

c000f34a <Pipe::~Pipe()>:
c000f34a:	83 ec 0c             	sub    esp,0xc
c000f34d:	83 ec 0c             	sub    esp,0xc
c000f350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f354:	e8 cd ff ff ff       	call   c000f326 <Pipe::~Pipe()>
c000f359:	83 c4 10             	add    esp,0x10
c000f35c:	83 ec 08             	sub    esp,0x8
c000f35f:	6a 20                	push   0x20
c000f361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f365:	e8 9e d3 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c000f36a:	83 c4 10             	add    esp,0x10
c000f36d:	83 c4 0c             	add    esp,0xc
c000f370:	c3                   	ret    
c000f371:	90                   	nop

c000f372 <Pipe::write(unsigned long long, void*, int*)>:
c000f372:	55                   	push   ebp
c000f373:	57                   	push   edi
c000f374:	56                   	push   esi
c000f375:	53                   	push   ebx
c000f376:	83 ec 1c             	sub    esp,0x1c
c000f379:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000f37d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f381:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000f384:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000f388:	89 04 24             	mov    DWORD PTR [esp],eax
c000f38b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f38f:	89 d8                	mov    eax,ebx
c000f391:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000f394:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f398:	89 d6                	mov    esi,edx
c000f39a:	89 d7                	mov    edi,edx
c000f39c:	c1 ff 1f             	sar    edi,0x1f
c000f39f:	03 34 24             	add    esi,DWORD PTR [esp]
c000f3a2:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000f3a6:	c1 f8 1f             	sar    eax,0x1f
c000f3a9:	39 f3                	cmp    ebx,esi
c000f3ab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f3af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3b3:	19 f8                	sbb    eax,edi
c000f3b5:	b8 01 00 00 00       	mov    eax,0x1
c000f3ba:	72 6e                	jb     c000f42a <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000f3bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000f3bf:	01 d0                	add    eax,edx
c000f3c1:	99                   	cdq    
c000f3c2:	f7 fb                	idiv   ebx
c000f3c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f3c8:	29 d3                	sub    ebx,edx
c000f3ca:	89 d7                	mov    edi,edx
c000f3cc:	89 de                	mov    esi,ebx
c000f3ce:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f3d1:	c1 fb 1f             	sar    ebx,0x1f
c000f3d4:	39 f2                	cmp    edx,esi
c000f3d6:	19 d8                	sbb    eax,ebx
c000f3d8:	b8 00 00 00 00       	mov    eax,0x0
c000f3dd:	72 04                	jb     c000f3e3 <Pipe::write(unsigned long long, void*, int*)+0x71>
c000f3df:	89 d0                	mov    eax,edx
c000f3e1:	29 f0                	sub    eax,esi
c000f3e3:	89 d3                	mov    ebx,edx
c000f3e5:	29 c3                	sub    ebx,eax
c000f3e7:	74 0b                	je     c000f3f4 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000f3e9:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000f3ec:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000f3f0:	89 d9                	mov    ecx,ebx
c000f3f2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3f4:	85 c0                	test   eax,eax
c000f3f6:	74 0d                	je     c000f405 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000f3f8:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000f3fc:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000f3ff:	89 de                	mov    esi,ebx
c000f401:	89 c1                	mov    ecx,eax
c000f403:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f405:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000f408:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f40d:	75 10                	jne    c000f41f <Pipe::write(unsigned long long, void*, int*)+0xad>
c000f40f:	83 ec 0c             	sub    esp,0xc
c000f412:	68 31 21 02 c0       	push   0xc0022131
c000f417:	e8 b6 f8 ff ff       	call   c000ecd2 <KePanic(char const*)>
c000f41c:	83 c4 10             	add    esp,0x10
c000f41f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f423:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000f426:	89 08                	mov    DWORD PTR [eax],ecx
c000f428:	31 c0                	xor    eax,eax
c000f42a:	83 c4 1c             	add    esp,0x1c
c000f42d:	5b                   	pop    ebx
c000f42e:	5e                   	pop    esi
c000f42f:	5f                   	pop    edi
c000f430:	5d                   	pop    ebp
c000f431:	c3                   	ret    

c000f432 <Pipe::read(unsigned long long, void*, int*)>:
c000f432:	55                   	push   ebp
c000f433:	57                   	push   edi
c000f434:	56                   	push   esi
c000f435:	53                   	push   ebx
c000f436:	83 ec 1c             	sub    esp,0x1c
c000f439:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000f43d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000f441:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f445:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000f448:	89 c8                	mov    eax,ecx
c000f44a:	99                   	cdq    
c000f44b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000f44f:	74 24                	je     c000f475 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000f451:	39 f9                	cmp    ecx,edi
c000f453:	89 d1                	mov    ecx,edx
c000f455:	19 f1                	sbb    ecx,esi
c000f457:	73 1c                	jae    c000f475 <Pipe::read(unsigned long long, void*, int*)+0x43>
c000f459:	fa                   	cli    
c000f45a:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c000f460:	e8 23 60 00 00       	call   c0015488 <schedule()>
c000f465:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f46a:	48                   	dec    eax
c000f46b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f470:	75 d3                	jne    c000f445 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f472:	fb                   	sti    
c000f473:	eb d0                	jmp    c000f445 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000f475:	39 f8                	cmp    eax,edi
c000f477:	89 d1                	mov    ecx,edx
c000f479:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f47c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000f480:	19 f1                	sbb    ecx,esi
c000f482:	73 07                	jae    c000f48b <Pipe::read(unsigned long long, void*, int*)+0x59>
c000f484:	89 04 24             	mov    DWORD PTR [esp],eax
c000f487:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000f48b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000f48e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000f491:	29 f7                	sub    edi,esi
c000f493:	89 f8                	mov    eax,edi
c000f495:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000f499:	99                   	cdq    
c000f49a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000f49d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f4a1:	19 d0                	sbb    eax,edx
c000f4a3:	73 07                	jae    c000f4ac <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000f4a5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000f4a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f4ac:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000f4af:	89 ea                	mov    edx,ebp
c000f4b1:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000f4b5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000f4ba:	74 0d                	je     c000f4c9 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000f4bc:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000f4bf:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f4c3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f4c7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4c9:	85 d2                	test   edx,edx
c000f4cb:	74 11                	je     c000f4de <Pipe::read(unsigned long long, void*, int*)+0xac>
c000f4cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f4d1:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000f4d4:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000f4d8:	89 d1                	mov    ecx,edx
c000f4da:	89 c7                	mov    edi,eax
c000f4dc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f4de:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000f4e1:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000f4e4:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000f4e7:	99                   	cdq    
c000f4e8:	89 f7                	mov    edi,esi
c000f4ea:	03 04 24             	add    eax,DWORD PTR [esp]
c000f4ed:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000f4f1:	c1 ff 1f             	sar    edi,0x1f
c000f4f4:	57                   	push   edi
c000f4f5:	56                   	push   esi
c000f4f6:	52                   	push   edx
c000f4f7:	50                   	push   eax
c000f4f8:	e8 97 06 01 00       	call   c001fb94 <__umoddi3>
c000f4fd:	83 c4 10             	add    esp,0x10
c000f500:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000f503:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000f508:	75 10                	jne    c000f51a <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000f50a:	83 ec 0c             	sub    esp,0xc
c000f50d:	68 4e 21 02 c0       	push   0xc002214e
c000f512:	e8 bb f7 ff ff       	call   c000ecd2 <KePanic(char const*)>
c000f517:	83 c4 10             	add    esp,0x10
c000f51a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f51e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000f521:	89 10                	mov    DWORD PTR [eax],edx
c000f523:	83 c4 1c             	add    esp,0x1c
c000f526:	31 c0                	xor    eax,eax
c000f528:	5b                   	pop    ebx
c000f529:	5e                   	pop    esi
c000f52a:	5f                   	pop    edi
c000f52b:	5d                   	pop    ebp
c000f52c:	c3                   	ret    
c000f52d:	90                   	nop

c000f52e <Pipe::Pipe(int)>:
c000f52e:	83 ec 0c             	sub    esp,0xc
c000f531:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f535:	83 ec 08             	sub    esp,0x8
c000f538:	6a 00                	push   0x0
c000f53a:	50                   	push   eax
c000f53b:	e8 bc 26 00 00       	call   c0011bfc <UnixFile::UnixFile(int)>
c000f540:	83 c4 10             	add    esp,0x10
c000f543:	ba 74 21 02 c0       	mov    edx,0xc0022174
c000f548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f54c:	89 10                	mov    DWORD PTR [eax],edx
c000f54e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f552:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f556:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000f559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f55d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000f564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f568:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000f56f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f573:	83 ec 0c             	sub    esp,0xc
c000f576:	50                   	push   eax
c000f577:	e8 ff f3 ff ff       	call   c000e97b <malloc>
c000f57c:	83 c4 10             	add    esp,0x10
c000f57f:	89 c2                	mov    edx,eax
c000f581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f585:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f58c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000f590:	90                   	nop
c000f591:	83 c4 0c             	add    esp,0xc
c000f594:	c3                   	ret    

c000f595 <KePowerThread(void*)>:
c000f595:	83 ec 0c             	sub    esp,0xc
c000f598:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f59d:	48                   	dec    eax
c000f59e:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f5a3:	75 01                	jne    c000f5a6 <KePowerThread(void*)+0x11>
c000f5a5:	fb                   	sti    
c000f5a6:	83 ec 0c             	sub    esp,0xc
c000f5a9:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f5b0:	6a 0a                	push   0xa
c000f5b2:	e8 bd 60 00 00       	call   c0015674 <sleep(unsigned int)>
c000f5b7:	83 05 24 be 02 c0 0a 	add    DWORD PTR ds:0xc002be24,0xa
c000f5be:	83 c4 10             	add    esp,0x10
c000f5c1:	eb e3                	jmp    c000f5a6 <KePowerThread(void*)+0x11>

c000f5c3 <KeChangePowerSettings(PowerSettings)>:
c000f5c3:	57                   	push   edi
c000f5c4:	b9 09 00 00 00       	mov    ecx,0x9
c000f5c9:	56                   	push   esi
c000f5ca:	bf 00 be 02 c0       	mov    edi,0xc002be00
c000f5cf:	fc                   	cld    
c000f5d0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f5d4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f5d6:	5e                   	pop    esi
c000f5d7:	5f                   	pop    edi
c000f5d8:	c3                   	ret    

c000f5d9 <KeUserIOReceived()>:
c000f5d9:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f5e3:	c3                   	ret    

c000f5e4 <KeHandlePowerButton()>:
c000f5e4:	a1 00 be 02 c0       	mov    eax,ds:0xc002be00
c000f5e9:	83 f8 02             	cmp    eax,0x2
c000f5ec:	75 05                	jne    c000f5f3 <KeHandlePowerButton()+0xf>
c000f5ee:	e9 55 e1 ff ff       	jmp    c000d748 <KeShutdown()>
c000f5f3:	48                   	dec    eax
c000f5f4:	75 05                	jne    c000f5fb <KeHandlePowerButton()+0x17>
c000f5f6:	e9 71 e1 ff ff       	jmp    c000d76c <KeSleep()>
c000f5fb:	c3                   	ret    

c000f5fc <KeHandleSleepButton()>:
c000f5fc:	a1 04 be 02 c0       	mov    eax,ds:0xc002be04
c000f601:	83 f8 02             	cmp    eax,0x2
c000f604:	75 05                	jne    c000f60b <KeHandleSleepButton()+0xf>
c000f606:	e9 3d e1 ff ff       	jmp    c000d748 <KeShutdown()>
c000f60b:	48                   	dec    eax
c000f60c:	75 05                	jne    c000f613 <KeHandleSleepButton()+0x17>
c000f60e:	e9 59 e1 ff ff       	jmp    c000d76c <KeSleep()>
c000f613:	c3                   	ret    

c000f614 <KeSetupPowerManager()>:
c000f614:	83 ec 0c             	sub    esp,0xc
c000f617:	c7 05 24 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be24,0x0
c000f621:	68 f0 00 00 00       	push   0xf0
c000f626:	c6 05 e0 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bde0,0x0
c000f62d:	6a 00                	push   0x0
c000f62f:	68 95 f5 00 c0       	push   0xc000f595
c000f634:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c000f63a:	e8 f9 5b 00 00       	call   c0015238 <Process::createThread(void (*)(void*), void*, int)>
c000f63f:	c7 05 00 be 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002be00,0x2
c000f649:	c7 05 04 be 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002be04,0x1
c000f653:	c7 05 08 be 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002be08,0x3
c000f65d:	c7 05 0c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be0c,0x0
c000f667:	c7 05 18 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be18,0x0
c000f671:	c7 05 10 be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be10,0x0
c000f67b:	c7 05 1c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be1c,0x0
c000f685:	c7 05 14 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be14,0x3c
c000f68f:	c7 05 20 be 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002be20,0x3c
c000f699:	83 c4 1c             	add    esp,0x1c
c000f69c:	c3                   	ret    

c000f69d <KeRand()>:
c000f69d:	69 05 28 be 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002be28,0x2875
c000f6a7:	69 0d 2c be 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002be2c,0xa2e7b175
c000f6b1:	53                   	push   ebx
c000f6b2:	01 c1                	add    ecx,eax
c000f6b4:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c000f6b9:	f7 25 28 be 02 c0    	mul    DWORD PTR ds:0xc002be28
c000f6bf:	01 ca                	add    edx,ecx
c000f6c1:	05 ef 04 b5 00       	add    eax,0xb504ef
c000f6c6:	83 d2 00             	adc    edx,0x0
c000f6c9:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f6ce:	0f b7 da             	movzx  ebx,dx
c000f6d1:	89 da                	mov    edx,ebx
c000f6d3:	89 1d 2c be 02 c0    	mov    DWORD PTR ds:0xc002be2c,ebx
c000f6d9:	0f ac d0 0e          	shrd   eax,edx,0xe
c000f6dd:	5b                   	pop    ebx
c000f6de:	c3                   	ret    

c000f6df <KeSeedRand(unsigned int)>:
c000f6df:	53                   	push   ebx
c000f6e0:	83 ec 08             	sub    esp,0x8
c000f6e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f6e7:	e8 54 8f 00 00       	call   c0018640 <HalGetRand()>
c000f6ec:	c7 05 2c be 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002be2c,0x0
c000f6f6:	31 d8                	xor    eax,ebx
c000f6f8:	a3 28 be 02 c0       	mov    ds:0xc002be28,eax
c000f6fd:	e8 9b ff ff ff       	call   c000f69d <KeRand()>
c000f702:	83 c4 08             	add    esp,0x8
c000f705:	5b                   	pop    ebx
c000f706:	eb 95                	jmp    c000f69d <KeRand()>

c000f708 <KeInitRand()>:
c000f708:	83 ec 0c             	sub    esp,0xc
c000f70b:	e8 54 8d 00 00       	call   c0018464 <HalQueryPerformanceCounter()>
c000f710:	0f 20 da             	mov    edx,cr3
c000f713:	0f 22 da             	mov    cr3,edx
c000f716:	0f 20 da             	mov    edx,cr3
c000f719:	0f 22 da             	mov    cr3,edx
c000f71c:	0f 20 da             	mov    edx,cr3
c000f71f:	0f 22 da             	mov    cr3,edx
c000f722:	0f 20 da             	mov    edx,cr3
c000f725:	0f 22 da             	mov    cr3,edx
c000f728:	83 ec 0c             	sub    esp,0xc
c000f72b:	35 03 8a 95 38       	xor    eax,0x38958a03
c000f730:	50                   	push   eax
c000f731:	e8 a9 ff ff ff       	call   c000f6df <KeSeedRand(unsigned int)>
c000f736:	83 c4 1c             	add    esp,0x1c
c000f739:	c3                   	ret    
c000f73a:	66 90                	xchg   ax,ax

c000f73c <KeResolveCompatibilitySymbol(char*)>:
c000f73c:	83 ec 0c             	sub    esp,0xc
c000f73f:	83 ec 08             	sub    esp,0x8
c000f742:	68 88 21 02 c0       	push   0xc0022188
c000f747:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f74b:	e8 00 10 ff ff       	call   c0000750 <strcmp>
c000f750:	83 c4 10             	add    esp,0x10
c000f753:	85 c0                	test   eax,eax
c000f755:	0f 94 c0             	sete   al
c000f758:	0f b6 c0             	movzx  eax,al
c000f75b:	85 c0                	test   eax,eax
c000f75d:	74 0d                	je     c000f76c <KeResolveCompatibilitySymbol(char*)+0x30>
c000f75f:	b8 70 9d 02 c0       	mov    eax,0xc0029d70
c000f764:	e9 8b 01 00 00       	jmp    c000f8f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f769:	8d 76 00             	lea    esi,[esi+0x0]
c000f76c:	83 ec 08             	sub    esp,0x8
c000f76f:	68 91 21 02 c0       	push   0xc0022191
c000f774:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f778:	e8 d3 0f ff ff       	call   c0000750 <strcmp>
c000f77d:	83 c4 10             	add    esp,0x10
c000f780:	85 c0                	test   eax,eax
c000f782:	0f 94 c0             	sete   al
c000f785:	0f b6 c0             	movzx  eax,al
c000f788:	85 c0                	test   eax,eax
c000f78a:	74 0c                	je     c000f798 <KeResolveCompatibilitySymbol(char*)+0x5c>
c000f78c:	b8 94 fa 01 c0       	mov    eax,0xc001fa94
c000f791:	e9 5e 01 00 00       	jmp    c000f8f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f796:	66 90                	xchg   ax,ax
c000f798:	83 ec 08             	sub    esp,0x8
c000f79b:	68 9b 21 02 c0       	push   0xc002219b
c000f7a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7a4:	e8 a7 0f ff ff       	call   c0000750 <strcmp>
c000f7a9:	83 c4 10             	add    esp,0x10
c000f7ac:	85 c0                	test   eax,eax
c000f7ae:	0f 94 c0             	sete   al
c000f7b1:	0f b6 c0             	movzx  eax,al
c000f7b4:	85 c0                	test   eax,eax
c000f7b6:	74 0c                	je     c000f7c4 <KeResolveCompatibilitySymbol(char*)+0x88>
c000f7b8:	b8 c8 f7 01 c0       	mov    eax,0xc001f7c8
c000f7bd:	e9 32 01 00 00       	jmp    c000f8f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7c2:	66 90                	xchg   ax,ax
c000f7c4:	83 ec 08             	sub    esp,0x8
c000f7c7:	68 a4 21 02 c0       	push   0xc00221a4
c000f7cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7d0:	e8 7b 0f ff ff       	call   c0000750 <strcmp>
c000f7d5:	83 c4 10             	add    esp,0x10
c000f7d8:	85 c0                	test   eax,eax
c000f7da:	0f 94 c0             	sete   al
c000f7dd:	0f b6 c0             	movzx  eax,al
c000f7e0:	85 c0                	test   eax,eax
c000f7e2:	74 0c                	je     c000f7f0 <KeResolveCompatibilitySymbol(char*)+0xb4>
c000f7e4:	b8 d2 ec 00 c0       	mov    eax,0xc000ecd2
c000f7e9:	e9 06 01 00 00       	jmp    c000f8f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f7ee:	66 90                	xchg   ax,ax
c000f7f0:	83 ec 08             	sub    esp,0x8
c000f7f3:	68 b7 21 02 c0       	push   0xc00221b7
c000f7f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f7fc:	e8 4f 0f ff ff       	call   c0000750 <strcmp>
c000f801:	83 c4 10             	add    esp,0x10
c000f804:	85 c0                	test   eax,eax
c000f806:	0f 94 c0             	sete   al
c000f809:	0f b6 c0             	movzx  eax,al
c000f80c:	85 c0                	test   eax,eax
c000f80e:	74 0c                	je     c000f81c <KeResolveCompatibilitySymbol(char*)+0xe0>
c000f810:	b8 48 c6 00 c0       	mov    eax,0xc000c648
c000f815:	e9 da 00 00 00       	jmp    c000f8f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f81a:	66 90                	xchg   ax,ax
c000f81c:	83 ec 08             	sub    esp,0x8
c000f81f:	68 d4 21 02 c0       	push   0xc00221d4
c000f824:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f828:	e8 23 0f ff ff       	call   c0000750 <strcmp>
c000f82d:	83 c4 10             	add    esp,0x10
c000f830:	85 c0                	test   eax,eax
c000f832:	0f 94 c0             	sete   al
c000f835:	0f b6 c0             	movzx  eax,al
c000f838:	85 c0                	test   eax,eax
c000f83a:	74 0c                	je     c000f848 <KeResolveCompatibilitySymbol(char*)+0x10c>
c000f83c:	b8 94 fb 01 c0       	mov    eax,0xc001fb94
c000f841:	e9 ae 00 00 00       	jmp    c000f8f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f846:	66 90                	xchg   ax,ax
c000f848:	83 ec 08             	sub    esp,0x8
c000f84b:	68 de 21 02 c0       	push   0xc00221de
c000f850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f854:	e8 f7 0e ff ff       	call   c0000750 <strcmp>
c000f859:	83 c4 10             	add    esp,0x10
c000f85c:	85 c0                	test   eax,eax
c000f85e:	0f 94 c0             	sete   al
c000f861:	0f b6 c0             	movzx  eax,al
c000f864:	85 c0                	test   eax,eax
c000f866:	74 0c                	je     c000f874 <KeResolveCompatibilitySymbol(char*)+0x138>
c000f868:	b8 14 f9 01 c0       	mov    eax,0xc001f914
c000f86d:	e9 82 00 00 00       	jmp    c000f8f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f872:	66 90                	xchg   ax,ax
c000f874:	83 ec 08             	sub    esp,0x8
c000f877:	68 e7 21 02 c0       	push   0xc00221e7
c000f87c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f880:	e8 cb 0e ff ff       	call   c0000750 <strcmp>
c000f885:	83 c4 10             	add    esp,0x10
c000f888:	85 c0                	test   eax,eax
c000f88a:	0f 94 c0             	sete   al
c000f88d:	0f b6 c0             	movzx  eax,al
c000f890:	85 c0                	test   eax,eax
c000f892:	74 08                	je     c000f89c <KeResolveCompatibilitySymbol(char*)+0x160>
c000f894:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f899:	eb 59                	jmp    c000f8f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f89b:	90                   	nop
c000f89c:	83 ec 08             	sub    esp,0x8
c000f89f:	68 ff 21 02 c0       	push   0xc00221ff
c000f8a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8a8:	e8 a3 0e ff ff       	call   c0000750 <strcmp>
c000f8ad:	83 c4 10             	add    esp,0x10
c000f8b0:	85 c0                	test   eax,eax
c000f8b2:	0f 94 c0             	sete   al
c000f8b5:	0f b6 c0             	movzx  eax,al
c000f8b8:	85 c0                	test   eax,eax
c000f8ba:	74 08                	je     c000f8c4 <KeResolveCompatibilitySymbol(char*)+0x188>
c000f8bc:	b8 74 9d 02 c0       	mov    eax,0xc0029d74
c000f8c1:	eb 31                	jmp    c000f8f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8c3:	90                   	nop
c000f8c4:	83 ec 08             	sub    esp,0x8
c000f8c7:	68 0c 22 02 c0       	push   0xc002220c
c000f8cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8d0:	e8 7b 0e ff ff       	call   c0000750 <strcmp>
c000f8d5:	83 c4 10             	add    esp,0x10
c000f8d8:	85 c0                	test   eax,eax
c000f8da:	0f 94 c0             	sete   al
c000f8dd:	0f b6 c0             	movzx  eax,al
c000f8e0:	85 c0                	test   eax,eax
c000f8e2:	74 08                	je     c000f8ec <KeResolveCompatibilitySymbol(char*)+0x1b0>
c000f8e4:	b8 75 9d 02 c0       	mov    eax,0xc0029d75
c000f8e9:	eb 09                	jmp    c000f8f4 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c000f8eb:	90                   	nop
c000f8ec:	b8 00 00 00 00       	mov    eax,0x0
c000f8f1:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f4:	83 c4 0c             	add    esp,0xc
c000f8f7:	c3                   	ret    

c000f8f8 <Semaphore::Semaphore(int)>:
c000f8f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f900:	89 10                	mov    DWORD PTR [eax],edx
c000f902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f906:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c000f90d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f911:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f91c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000f923:	90                   	nop
c000f924:	c3                   	ret    
c000f925:	90                   	nop
c000f926:	66 90                	xchg   ax,ax

c000f928 <Semaphore::tryAcquire()>:
c000f928:	83 ec 0c             	sub    esp,0xc
c000f92b:	fa                   	cli    
c000f92c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f931:	83 c0 01             	add    eax,0x1
c000f934:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f939:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f93e:	83 c0 01             	add    eax,0x1
c000f941:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f94a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000f94d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f951:	8b 00                	mov    eax,DWORD PTR [eax]
c000f953:	39 c2                	cmp    edx,eax
c000f955:	7d 5d                	jge    c000f9b4 <Semaphore::tryAcquire()+0x8c>
c000f957:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f95b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000f95e:	8d 50 01             	lea    edx,[eax+0x1]
c000f961:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f965:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000f968:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f96d:	83 e8 01             	sub    eax,0x1
c000f970:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f975:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f97a:	85 c0                	test   eax,eax
c000f97c:	75 1a                	jne    c000f998 <Semaphore::tryAcquire()+0x70>
c000f97e:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f983:	85 c0                	test   eax,eax
c000f985:	74 11                	je     c000f998 <Semaphore::tryAcquire()+0x70>
c000f987:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f991:	e8 f2 5a 00 00       	call   c0015488 <schedule()>
c000f996:	66 90                	xchg   ax,ax
c000f998:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f99d:	83 e8 01             	sub    eax,0x1
c000f9a0:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f9a5:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9aa:	85 c0                	test   eax,eax
c000f9ac:	75 02                	jne    c000f9b0 <Semaphore::tryAcquire()+0x88>
c000f9ae:	fb                   	sti    
c000f9af:	90                   	nop
c000f9b0:	b0 01                	mov    al,0x1
c000f9b2:	eb 4c                	jmp    c000fa00 <Semaphore::tryAcquire()+0xd8>
c000f9b4:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9b9:	83 e8 01             	sub    eax,0x1
c000f9bc:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000f9c1:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000f9c6:	85 c0                	test   eax,eax
c000f9c8:	75 1a                	jne    c000f9e4 <Semaphore::tryAcquire()+0xbc>
c000f9ca:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000f9cf:	85 c0                	test   eax,eax
c000f9d1:	74 11                	je     c000f9e4 <Semaphore::tryAcquire()+0xbc>
c000f9d3:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000f9dd:	e8 a6 5a 00 00       	call   c0015488 <schedule()>
c000f9e2:	66 90                	xchg   ax,ax
c000f9e4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9e9:	83 e8 01             	sub    eax,0x1
c000f9ec:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000f9f1:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000f9f6:	85 c0                	test   eax,eax
c000f9f8:	75 02                	jne    c000f9fc <Semaphore::tryAcquire()+0xd4>
c000f9fa:	fb                   	sti    
c000f9fb:	90                   	nop
c000f9fc:	b0 00                	mov    al,0x0
c000f9fe:	66 90                	xchg   ax,ax
c000fa00:	83 c4 0c             	add    esp,0xc
c000fa03:	c3                   	ret    

c000fa04 <Semaphore::assertLocked(char const*)>:
c000fa04:	83 ec 0c             	sub    esp,0xc
c000fa07:	fa                   	cli    
c000fa08:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa0d:	83 c0 01             	add    eax,0x1
c000fa10:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fa15:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa1a:	83 c0 01             	add    eax,0x1
c000fa1d:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fa22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa26:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fa29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fa2d:	8b 00                	mov    eax,DWORD PTR [eax]
c000fa2f:	39 c2                	cmp    edx,eax
c000fa31:	7d 11                	jge    c000fa44 <Semaphore::assertLocked(char const*)+0x40>
c000fa33:	83 ec 0c             	sub    esp,0xc
c000fa36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fa3a:	e8 93 f2 ff ff       	call   c000ecd2 <KePanic(char const*)>
c000fa3f:	83 c4 10             	add    esp,0x10
c000fa42:	66 90                	xchg   ax,ax
c000fa44:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa49:	83 e8 01             	sub    eax,0x1
c000fa4c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fa51:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fa56:	85 c0                	test   eax,eax
c000fa58:	75 1a                	jne    c000fa74 <Semaphore::assertLocked(char const*)+0x70>
c000fa5a:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fa5f:	85 c0                	test   eax,eax
c000fa61:	74 11                	je     c000fa74 <Semaphore::assertLocked(char const*)+0x70>
c000fa63:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fa6d:	e8 16 5a 00 00       	call   c0015488 <schedule()>
c000fa72:	66 90                	xchg   ax,ax
c000fa74:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa79:	83 e8 01             	sub    eax,0x1
c000fa7c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fa81:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fa86:	85 c0                	test   eax,eax
c000fa88:	75 02                	jne    c000fa8c <Semaphore::assertLocked(char const*)+0x88>
c000fa8a:	fb                   	sti    
c000fa8b:	90                   	nop
c000fa8c:	90                   	nop
c000fa8d:	83 c4 0c             	add    esp,0xc
c000fa90:	c3                   	ret    
c000fa91:	90                   	nop
c000fa92:	66 90                	xchg   ax,ax

c000fa94 <Semaphore::acquire(int)>:
c000fa94:	83 ec 1c             	sub    esp,0x1c
c000fa97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000fa9c:	0f 84 9a 00 00 00    	je     c000fb3c <Semaphore::acquire(int)+0xa8>
c000faa2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000faaa:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000faaf:	90                   	nop
c000fab0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000fab5:	85 c0                	test   eax,eax
c000fab7:	74 77                	je     c000fb30 <Semaphore::acquire(int)+0x9c>
c000fab9:	83 ec 0c             	sub    esp,0xc
c000fabc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fac0:	e8 63 fe ff ff       	call   c000f928 <Semaphore::tryAcquire()>
c000fac5:	83 c4 10             	add    esp,0x10
c000fac8:	83 f0 01             	xor    eax,0x1
c000facb:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000facf:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000fad3:	83 f0 01             	xor    eax,0x1
c000fad6:	0f b6 c0             	movzx  eax,al
c000fad9:	85 c0                	test   eax,eax
c000fadb:	75 4f                	jne    c000fb2c <Semaphore::acquire(int)+0x98>
c000fadd:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c000fae2:	7f 2c                	jg     c000fb10 <Semaphore::acquire(int)+0x7c>
c000fae4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000fae8:	89 d0                	mov    eax,edx
c000faea:	c1 e0 02             	shl    eax,0x2
c000faed:	01 d0                	add    eax,edx
c000faef:	01 c0                	add    eax,eax
c000faf1:	83 ec 0c             	sub    esp,0xc
c000faf4:	50                   	push   eax
c000faf5:	e8 66 5b 00 00       	call   c0015660 <milliTenthSleep(unsigned int)>
c000fafa:	83 c4 10             	add    esp,0x10
c000fafd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fb01:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000fb05:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000fb0d:	eb a1                	jmp    c000fab0 <Semaphore::acquire(int)+0x1c>
c000fb0f:	90                   	nop
c000fb10:	83 ec 0c             	sub    esp,0xc
c000fb13:	68 90 01 00 00       	push   0x190
c000fb18:	e8 43 5b 00 00       	call   c0015660 <milliTenthSleep(unsigned int)>
c000fb1d:	83 c4 10             	add    esp,0x10
c000fb20:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c000fb25:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c000fb2a:	eb 84                	jmp    c000fab0 <Semaphore::acquire(int)+0x1c>
c000fb2c:	90                   	nop
c000fb2d:	8d 76 00             	lea    esi,[esi+0x0]
c000fb30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb34:	e9 ff 00 00 00       	jmp    c000fc38 <Semaphore::acquire(int)+0x1a4>
c000fb39:	8d 76 00             	lea    esi,[esi+0x0]
c000fb3c:	fa                   	cli    
c000fb3d:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fb42:	83 c0 01             	add    eax,0x1
c000fb45:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fb4a:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fb4f:	83 c0 01             	add    eax,0x1
c000fb52:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fb57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb5b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000fb5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb62:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb64:	39 c2                	cmp    edx,eax
c000fb66:	7d 14                	jge    c000fb7c <Semaphore::acquire(int)+0xe8>
c000fb68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb6c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fb6f:	8d 50 01             	lea    edx,[eax+0x1]
c000fb72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb76:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fb79:	eb 6d                	jmp    c000fbe8 <Semaphore::acquire(int)+0x154>
c000fb7b:	90                   	nop
c000fb7c:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb81:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb83:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000fb8a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fb8e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fb91:	85 c0                	test   eax,eax
c000fb93:	75 13                	jne    c000fba8 <Semaphore::acquire(int)+0x114>
c000fb95:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fb9a:	8b 10                	mov    edx,DWORD PTR [eax]
c000fb9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fba0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fba3:	eb 17                	jmp    c000fbbc <Semaphore::acquire(int)+0x128>
c000fba5:	8d 76 00             	lea    esi,[esi+0x0]
c000fba8:	ba 00 20 00 c2       	mov    edx,0xc2002000
c000fbad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbb1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000fbb4:	8b 12                	mov    edx,DWORD PTR [edx]
c000fbb6:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000fbb9:	8d 76 00             	lea    esi,[esi+0x0]
c000fbbc:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000fbc1:	8b 10                	mov    edx,DWORD PTR [eax]
c000fbc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fbc7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fbca:	83 ec 0c             	sub    esp,0xc
c000fbcd:	68 1c 22 02 c0       	push   0xc002221c
c000fbd2:	e8 8d 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fbd7:	83 c4 10             	add    esp,0x10
c000fbda:	83 ec 0c             	sub    esp,0xc
c000fbdd:	6a 05                	push   0x5
c000fbdf:	e8 60 59 00 00       	call   c0015544 <blockTask(TaskState)>
c000fbe4:	83 c4 10             	add    esp,0x10
c000fbe7:	90                   	nop
c000fbe8:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fbed:	83 e8 01             	sub    eax,0x1
c000fbf0:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fbf5:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fbfa:	85 c0                	test   eax,eax
c000fbfc:	75 1a                	jne    c000fc18 <Semaphore::acquire(int)+0x184>
c000fbfe:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fc03:	85 c0                	test   eax,eax
c000fc05:	74 11                	je     c000fc18 <Semaphore::acquire(int)+0x184>
c000fc07:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fc11:	e8 72 58 00 00       	call   c0015488 <schedule()>
c000fc16:	66 90                	xchg   ax,ax
c000fc18:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc1d:	83 e8 01             	sub    eax,0x1
c000fc20:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fc25:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc2a:	85 c0                	test   eax,eax
c000fc2c:	75 02                	jne    c000fc30 <Semaphore::acquire(int)+0x19c>
c000fc2e:	fb                   	sti    
c000fc2f:	90                   	nop
c000fc30:	b8 00 00 00 00       	mov    eax,0x0
c000fc35:	8d 76 00             	lea    esi,[esi+0x0]
c000fc38:	83 c4 1c             	add    esp,0x1c
c000fc3b:	c3                   	ret    

c000fc3c <Semaphore::acquire()>:
c000fc3c:	83 ec 0c             	sub    esp,0xc
c000fc3f:	83 ec 08             	sub    esp,0x8
c000fc42:	6a 00                	push   0x0
c000fc44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc48:	e8 47 fe ff ff       	call   c000fa94 <Semaphore::acquire(int)>
c000fc4d:	83 c4 10             	add    esp,0x10
c000fc50:	90                   	nop
c000fc51:	83 c4 0c             	add    esp,0xc
c000fc54:	c3                   	ret    
c000fc55:	90                   	nop
c000fc56:	66 90                	xchg   ax,ax

c000fc58 <Semaphore::release()>:
c000fc58:	83 ec 1c             	sub    esp,0x1c
c000fc5b:	fa                   	cli    
c000fc5c:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fc61:	83 c0 01             	add    eax,0x1
c000fc64:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fc69:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fc6e:	83 c0 01             	add    eax,0x1
c000fc71:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fc76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc7d:	85 c0                	test   eax,eax
c000fc7f:	74 2b                	je     c000fcac <Semaphore::release()+0x54>
c000fc81:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc85:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fc88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fc8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fc90:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c000fc93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fc97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fc9a:	83 ec 0c             	sub    esp,0xc
c000fc9d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fca1:	e8 da 5a 00 00       	call   c0015780 <unblockTask(ThreadControlBlock*)>
c000fca6:	83 c4 10             	add    esp,0x10
c000fca9:	eb 15                	jmp    c000fcc0 <Semaphore::release()+0x68>
c000fcab:	90                   	nop
c000fcac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcb0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000fcb3:	8d 50 ff             	lea    edx,[eax-0x1]
c000fcb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fcba:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000fcbd:	8d 76 00             	lea    esi,[esi+0x0]
c000fcc0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fcc5:	83 e8 01             	sub    eax,0x1
c000fcc8:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c000fccd:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c000fcd2:	85 c0                	test   eax,eax
c000fcd4:	75 1a                	jne    c000fcf0 <Semaphore::release()+0x98>
c000fcd6:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c000fcdb:	85 c0                	test   eax,eax
c000fcdd:	74 11                	je     c000fcf0 <Semaphore::release()+0x98>
c000fcdf:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c000fce9:	e8 9a 57 00 00       	call   c0015488 <schedule()>
c000fcee:	66 90                	xchg   ax,ax
c000fcf0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fcf5:	83 e8 01             	sub    eax,0x1
c000fcf8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c000fcfd:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c000fd02:	85 c0                	test   eax,eax
c000fd04:	75 02                	jne    c000fd08 <Semaphore::release()+0xb0>
c000fd06:	fb                   	sti    
c000fd07:	90                   	nop
c000fd08:	90                   	nop
c000fd09:	83 c4 1c             	add    esp,0x1c
c000fd0c:	c3                   	ret    

c000fd0d <KiSigKill(int)>:
c000fd0d:	83 ec 0c             	sub    esp,0xc
c000fd10:	6a 00                	push   0x0
c000fd12:	6a 00                	push   0x0
c000fd14:	6a ff                	push   0xffffffff
c000fd16:	6a 01                	push   0x1
c000fd18:	e8 35 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd1d:	83 c4 1c             	add    esp,0x1c
c000fd20:	c3                   	ret    

c000fd21 <KiDefaultSignalHandlerIgnore(int)>:
c000fd21:	c3                   	ret    

c000fd22 <KiDefaultSignalHandlerPause(int)>:
c000fd22:	57                   	push   edi
c000fd23:	b9 07 00 00 00       	mov    ecx,0x7
c000fd28:	56                   	push   esi
c000fd29:	be 77 22 02 c0       	mov    esi,0xc0022277
c000fd2e:	83 ec 24             	sub    esp,0x24
c000fd31:	8d 7c 24 04          	lea    edi,[esp+0x4]
c000fd35:	fc                   	cld    
c000fd36:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fd38:	8d 44 24 04          	lea    eax,[esp+0x4]
c000fd3c:	50                   	push   eax
c000fd3d:	6a 00                	push   0x0
c000fd3f:	6a 00                	push   0x0
c000fd41:	6a 27                	push   0x27
c000fd43:	e8 0a 53 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd48:	83 c4 34             	add    esp,0x34
c000fd4b:	5e                   	pop    esi
c000fd4c:	5f                   	pop    edi
c000fd4d:	c3                   	ret    

c000fd4e <KiDefaultSignalHandlerResume(int)>:
c000fd4e:	57                   	push   edi
c000fd4f:	b9 1d 00 00 00       	mov    ecx,0x1d
c000fd54:	56                   	push   esi
c000fd55:	be 93 22 02 c0       	mov    esi,0xc0022293
c000fd5a:	83 ec 24             	sub    esp,0x24
c000fd5d:	8d 7c 24 03          	lea    edi,[esp+0x3]
c000fd61:	fc                   	cld    
c000fd62:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd64:	8d 44 24 03          	lea    eax,[esp+0x3]
c000fd68:	50                   	push   eax
c000fd69:	6a 00                	push   0x0
c000fd6b:	6a 00                	push   0x0
c000fd6d:	6a 27                	push   0x27
c000fd6f:	e8 de 52 01 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c000fd74:	83 c4 34             	add    esp,0x34
c000fd77:	5e                   	pop    esi
c000fd78:	5f                   	pop    edi
c000fd79:	c3                   	ret    

c000fd7a <KeDeinitSignals(SigHandlerBlock*)>:
c000fd7a:	e9 0c ec ff ff       	jmp    c000e98b <free>

c000fd7f <KeInitSignals()>:
c000fd7f:	53                   	push   ebx
c000fd80:	83 ec 14             	sub    esp,0x14
c000fd83:	68 c8 00 00 00       	push   0xc8
c000fd88:	e8 ee eb ff ff       	call   c000e97b <malloc>
c000fd8d:	83 c4 0c             	add    esp,0xc
c000fd90:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c000fd9a:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c000fda4:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000fdab:	89 c3                	mov    ebx,eax
c000fdad:	6a 20                	push   0x20
c000fdaf:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c000fdb5:	6a 00                	push   0x0
c000fdb7:	50                   	push   eax
c000fdb8:	e8 33 07 ff ff       	call   c00004f0 <memset>
c000fdbd:	83 c4 0c             	add    esp,0xc
c000fdc0:	6a 44                	push   0x44
c000fdc2:	6a 00                	push   0x0
c000fdc4:	53                   	push   ebx
c000fdc5:	e8 26 07 ff ff       	call   c00004f0 <memset>
c000fdca:	89 d8                	mov    eax,ebx
c000fdcc:	83 c4 18             	add    esp,0x18
c000fdcf:	5b                   	pop    ebx
c000fdd0:	c3                   	ret    

c000fdd1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c000fdd1:	53                   	push   ebx
c000fdd2:	b8 01 00 00 00       	mov    eax,0x1
c000fdd7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fddb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fddf:	83 f9 10             	cmp    ecx,0x10
c000fde2:	7f 21                	jg     c000fe05 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c000fde4:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c000fde7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fdeb:	89 03                	mov    DWORD PTR [ebx],eax
c000fded:	b8 01 00 00 00       	mov    eax,0x1
c000fdf2:	d3 e0                	shl    eax,cl
c000fdf4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000fdf8:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c000fdfb:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c000fe03:	31 c0                	xor    eax,eax
c000fe05:	5b                   	pop    ebx
c000fe06:	c3                   	ret    

c000fe07 <KeRaiseSignal(SigHandlerBlock*, int)>:
c000fe07:	55                   	push   ebp
c000fe08:	57                   	push   edi
c000fe09:	bf 08 00 00 00       	mov    edi,0x8
c000fe0e:	56                   	push   esi
c000fe0f:	53                   	push   ebx
c000fe10:	83 ec 18             	sub    esp,0x18
c000fe13:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000fe17:	68 b0 22 02 c0       	push   0xc00222b0
c000fe1c:	e8 43 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe21:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000fe28:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c000fe2e:	83 c4 10             	add    esp,0x10
c000fe31:	31 c9                	xor    ecx,ecx
c000fe33:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c000fe37:	99                   	cdq    
c000fe38:	f7 ff                	idiv   edi
c000fe3a:	8d 42 24             	lea    eax,[edx+0x24]
c000fe3d:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c000fe41:	85 f6                	test   esi,esi
c000fe43:	75 1a                	jne    c000fe5f <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c000fe45:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000fe49:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c000fe4d:	50                   	push   eax
c000fe4e:	50                   	push   eax
c000fe4f:	52                   	push   edx
c000fe50:	68 c1 22 02 c0       	push   0xc00222c1
c000fe55:	e8 0a 71 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe5a:	83 c4 10             	add    esp,0x10
c000fe5d:	eb 1b                	jmp    c000fe7a <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c000fe5f:	41                   	inc    ecx
c000fe60:	83 f9 08             	cmp    ecx,0x8
c000fe63:	75 ce                	jne    c000fe33 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c000fe65:	83 ec 0c             	sub    esp,0xc
c000fe68:	be 01 00 00 00       	mov    esi,0x1
c000fe6d:	68 e2 22 02 c0       	push   0xc00222e2
c000fe72:	e8 ed 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fe77:	83 c4 10             	add    esp,0x10
c000fe7a:	83 c4 0c             	add    esp,0xc
c000fe7d:	89 f0                	mov    eax,esi
c000fe7f:	5b                   	pop    ebx
c000fe80:	5e                   	pop    esi
c000fe81:	5f                   	pop    edi
c000fe82:	5d                   	pop    ebp
c000fe83:	c3                   	ret    

c000fe84 <KeCheckSignal(SigHandlerBlock*, int*)>:
c000fe84:	55                   	push   ebp
c000fe85:	57                   	push   edi
c000fe86:	56                   	push   esi
c000fe87:	53                   	push   ebx
c000fe88:	51                   	push   ecx
c000fe89:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000fe8d:	85 db                	test   ebx,ebx
c000fe8f:	0f 84 bc 00 00 00    	je     c000ff51 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fe95:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c000fe9c:	0f 84 af 00 00 00    	je     c000ff51 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000fea2:	31 c9                	xor    ecx,ecx
c000fea4:	bf 08 00 00 00       	mov    edi,0x8
c000fea9:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c000feaf:	8d 04 0e             	lea    eax,[esi+ecx*1]
c000feb2:	99                   	cdq    
c000feb3:	f7 ff                	idiv   edi
c000feb5:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c000febc:	85 ed                	test   ebp,ebp
c000febe:	0f 84 9e 00 00 00    	je     c000ff62 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c000fec4:	89 e9                	mov    ecx,ebp
c000fec6:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c000fecc:	bf 01 00 00 00       	mov    edi,0x1
c000fed1:	89 04 24             	mov    DWORD PTR [esp],eax
c000fed4:	d3 e7                	shl    edi,cl
c000fed6:	31 c9                	xor    ecx,ecx
c000fed8:	b8 01 00 00 00       	mov    eax,0x1
c000fedd:	d3 e0                	shl    eax,cl
c000fedf:	85 04 24             	test   DWORD PTR [esp],eax
c000fee2:	74 06                	je     c000feea <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c000fee4:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c000fee8:	75 67                	jne    c000ff51 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000feea:	41                   	inc    ecx
c000feeb:	83 f9 11             	cmp    ecx,0x11
c000feee:	75 e8                	jne    c000fed8 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c000fef0:	46                   	inc    esi
c000fef1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fef4:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000fefa:	09 f8                	or     eax,edi
c000fefc:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c000ff07:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c000ff0d:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c000ff14:	31 c0                	xor    eax,eax
c000ff16:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c000ff1e:	74 09                	je     c000ff29 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c000ff20:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c000ff27:	eb 06                	jmp    c000ff2f <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c000ff29:	40                   	inc    eax
c000ff2a:	83 f8 08             	cmp    eax,0x8
c000ff2d:	75 e7                	jne    c000ff16 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c000ff2f:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c000ff32:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ff36:	83 fd 09             	cmp    ebp,0x9
c000ff39:	89 2a                	mov    DWORD PTR [edx],ebp
c000ff3b:	75 07                	jne    c000ff44 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c000ff3d:	b8 0d fd 00 c0       	mov    eax,0xc000fd0d
c000ff42:	eb 31                	jmp    c000ff75 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff44:	83 f8 01             	cmp    eax,0x1
c000ff47:	75 0c                	jne    c000ff55 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c000ff49:	f7 d7                	not    edi
c000ff4b:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c000ff51:	31 c0                	xor    eax,eax
c000ff53:	eb 20                	jmp    c000ff75 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff55:	85 c0                	test   eax,eax
c000ff57:	75 1c                	jne    c000ff75 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff59:	8b 04 ad 20 40 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdbfe0]
c000ff60:	eb 13                	jmp    c000ff75 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c000ff62:	46                   	inc    esi
c000ff63:	41                   	inc    ecx
c000ff64:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c000ff6a:	83 f9 08             	cmp    ecx,0x8
c000ff6d:	0f 85 36 ff ff ff    	jne    c000fea9 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c000ff73:	eb dc                	jmp    c000ff51 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c000ff75:	5a                   	pop    edx
c000ff76:	5b                   	pop    ebx
c000ff77:	5e                   	pop    esi
c000ff78:	5f                   	pop    edi
c000ff79:	5d                   	pop    ebp
c000ff7a:	c3                   	ret    

c000ff7b <KiCheckSignalZ>:
c000ff7b:	83 ec 10             	sub    esp,0x10
c000ff7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ff82:	50                   	push   eax
c000ff83:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff88:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000ff8b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c000ff91:	e8 ee fe ff ff       	call   c000fe84 <KeCheckSignal(SigHandlerBlock*, int*)>
c000ff96:	5a                   	pop    edx
c000ff97:	31 d2                	xor    edx,edx
c000ff99:	59                   	pop    ecx
c000ff9a:	85 c0                	test   eax,eax
c000ff9c:	74 19                	je     c000ffb7 <KiCheckSignalZ+0x3c>
c000ff9e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000ffa4:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000ffa7:	89 02                	mov    DWORD PTR [edx],eax
c000ffa9:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c000ffb0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ffb4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000ffb7:	89 d0                	mov    eax,edx
c000ffb9:	83 c4 10             	add    esp,0x10
c000ffbc:	c3                   	ret    

c000ffbd <KeCompleteSignal(SigHandlerBlock*, int)>:
c000ffbd:	56                   	push   esi
c000ffbe:	53                   	push   ebx
c000ffbf:	bb 01 00 00 00       	mov    ebx,0x1
c000ffc4:	52                   	push   edx
c000ffc5:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ffc9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ffcd:	d3 e3                	shl    ebx,cl
c000ffcf:	83 f9 10             	cmp    ecx,0x10
c000ffd2:	7f 08                	jg     c000ffdc <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c000ffd4:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c000ffda:	75 10                	jne    c000ffec <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c000ffdc:	83 ec 0c             	sub    esp,0xc
c000ffdf:	68 f3 22 02 c0       	push   0xc00222f3
c000ffe4:	e8 e9 ec ff ff       	call   c000ecd2 <KePanic(char const*)>
c000ffe9:	83 c4 10             	add    esp,0x10
c000ffec:	f7 d3                	not    ebx
c000ffee:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c000fff4:	58                   	pop    eax
c000fff5:	5b                   	pop    ebx
c000fff6:	5e                   	pop    esi
c000fff7:	c3                   	ret    

c000fff8 <KiFinishSignalZ>:
c000fff8:	53                   	push   ebx
c000fff9:	83 ec 10             	sub    esp,0x10
c000fffc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010000:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0010003:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010008:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001000b:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0010011:	e8 a7 ff ff ff       	call   c000ffbd <KeCompleteSignal(SigHandlerBlock*, int)>
c0010016:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001001c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0010023:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001002a:	83 c4 18             	add    esp,0x18
c001002d:	5b                   	pop    ebx
c001002e:	c3                   	ret    

c001002f <SysSeekDir(regs*)>:
c001002f:	31 c0                	xor    eax,eax
c0010031:	31 d2                	xor    edx,edx
c0010033:	c3                   	ret    

c0010034 <SysTellDir(regs*)>:
c0010034:	31 c0                	xor    eax,eax
c0010036:	31 d2                	xor    edx,edx
c0010038:	c3                   	ret    

c0010039 <SysVerify(regs*)>:
c0010039:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001003d:	31 d2                	xor    edx,edx
c001003f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010042:	c3                   	ret    

c0010043 <SysGetArgc(regs*)>:
c0010043:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010048:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001004b:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010051:	89 c2                	mov    edx,eax
c0010053:	c1 fa 1f             	sar    edx,0x1f
c0010056:	c3                   	ret    

c0010057 <SysTTYName(regs*)>:
c0010057:	b8 01 00 00 00       	mov    eax,0x1
c001005c:	31 d2                	xor    edx,edx
c001005e:	c3                   	ret    

c001005f <SysFormatDisk(regs*)>:
c001005f:	56                   	push   esi
c0010060:	53                   	push   ebx
c0010061:	83 ec 04             	sub    esp,0x4
c0010064:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010068:	8b 1d 04 93 02 c0    	mov    ebx,DWORD PTR ds:0xc0029304
c001006e:	eb 28                	jmp    c0010098 <SysFormatDisk(regs*)+0x39>
c0010070:	83 ec 0c             	sub    esp,0xc
c0010073:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010076:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010079:	8b 13                	mov    edx,DWORD PTR [ebx]
c001007b:	51                   	push   ecx
c001007c:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c001007f:	51                   	push   ecx
c0010080:	50                   	push   eax
c0010081:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c0010088:	50                   	push   eax
c0010089:	53                   	push   ebx
c001008a:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c001008d:	83 c4 20             	add    esp,0x20
c0010090:	83 f8 08             	cmp    eax,0x8
c0010093:	75 14                	jne    c00100a9 <SysFormatDisk(regs*)+0x4a>
c0010095:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010098:	85 db                	test   ebx,ebx
c001009a:	75 d4                	jne    c0010070 <SysFormatDisk(regs*)+0x11>
c001009c:	83 c4 04             	add    esp,0x4
c001009f:	b8 03 00 00 00       	mov    eax,0x3
c00100a4:	31 d2                	xor    edx,edx
c00100a6:	5b                   	pop    ebx
c00100a7:	5e                   	pop    esi
c00100a8:	c3                   	ret    
c00100a9:	85 c0                	test   eax,eax
c00100ab:	74 1f                	je     c00100cc <SysFormatDisk(regs*)+0x6d>
c00100ad:	83 f8 09             	cmp    eax,0x9
c00100b0:	74 0d                	je     c00100bf <SysFormatDisk(regs*)+0x60>
c00100b2:	83 c4 04             	add    esp,0x4
c00100b5:	b8 02 00 00 00       	mov    eax,0x2
c00100ba:	31 d2                	xor    edx,edx
c00100bc:	5b                   	pop    ebx
c00100bd:	5e                   	pop    esi
c00100be:	c3                   	ret    
c00100bf:	83 c4 04             	add    esp,0x4
c00100c2:	b8 01 00 00 00       	mov    eax,0x1
c00100c7:	31 d2                	xor    edx,edx
c00100c9:	5b                   	pop    ebx
c00100ca:	5e                   	pop    esi
c00100cb:	c3                   	ret    
c00100cc:	83 c4 04             	add    esp,0x4
c00100cf:	31 c0                	xor    eax,eax
c00100d1:	31 d2                	xor    edx,edx
c00100d3:	5b                   	pop    ebx
c00100d4:	5e                   	pop    esi
c00100d5:	c3                   	ret    

c00100d6 <SysSetDiskVolumeLabel(regs*)>:
c00100d6:	56                   	push   esi
c00100d7:	53                   	push   ebx
c00100d8:	83 ec 04             	sub    esp,0x4
c00100db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00100df:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00100e2:	83 f8 19             	cmp    eax,0x19
c00100e5:	77 33                	ja     c001011a <SysSetDiskVolumeLabel(regs*)+0x44>
c00100e7:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c00100ee:	85 c9                	test   ecx,ecx
c00100f0:	74 28                	je     c001011a <SysSetDiskVolumeLabel(regs*)+0x44>
c00100f2:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00100f5:	85 db                	test   ebx,ebx
c00100f7:	74 21                	je     c001011a <SysSetDiskVolumeLabel(regs*)+0x44>
c00100f9:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00100ff:	85 d2                	test   edx,edx
c0010101:	74 17                	je     c001011a <SysSetDiskVolumeLabel(regs*)+0x44>
c0010103:	8b 32                	mov    esi,DWORD PTR [edx]
c0010105:	53                   	push   ebx
c0010106:	50                   	push   eax
c0010107:	51                   	push   ecx
c0010108:	52                   	push   edx
c0010109:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c001010c:	83 c4 10             	add    esp,0x10
c001010f:	89 c2                	mov    edx,eax
c0010111:	83 c4 04             	add    esp,0x4
c0010114:	c1 fa 1f             	sar    edx,0x1f
c0010117:	5b                   	pop    ebx
c0010118:	5e                   	pop    esi
c0010119:	c3                   	ret    
c001011a:	83 c4 04             	add    esp,0x4
c001011d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010122:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010127:	5b                   	pop    ebx
c0010128:	5e                   	pop    esi
c0010129:	c3                   	ret    

c001012a <SysGetDiskVolumeLabel(regs*)>:
c001012a:	57                   	push   edi
c001012b:	56                   	push   esi
c001012c:	53                   	push   ebx
c001012d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010131:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010134:	83 fa 19             	cmp    edx,0x19
c0010137:	77 3c                	ja     c0010175 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010139:	8b 0c 95 80 97 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd6880]
c0010140:	85 c9                	test   ecx,ecx
c0010142:	74 31                	je     c0010175 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010144:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010147:	85 db                	test   ebx,ebx
c0010149:	74 2a                	je     c0010175 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001014b:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001014e:	85 f6                	test   esi,esi
c0010150:	74 23                	je     c0010175 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010152:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010158:	85 c0                	test   eax,eax
c001015a:	74 19                	je     c0010175 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001015c:	83 ec 0c             	sub    esp,0xc
c001015f:	8b 38                	mov    edi,DWORD PTR [eax]
c0010161:	56                   	push   esi
c0010162:	53                   	push   ebx
c0010163:	52                   	push   edx
c0010164:	51                   	push   ecx
c0010165:	50                   	push   eax
c0010166:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0010169:	83 c4 20             	add    esp,0x20
c001016c:	89 c2                	mov    edx,eax
c001016e:	5b                   	pop    ebx
c001016f:	c1 fa 1f             	sar    edx,0x1f
c0010172:	5e                   	pop    esi
c0010173:	5f                   	pop    edi
c0010174:	c3                   	ret    
c0010175:	5b                   	pop    ebx
c0010176:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001017b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010180:	5e                   	pop    esi
c0010181:	5f                   	pop    edi
c0010182:	c3                   	ret    

c0010183 <SysShutdown(regs*)>:
c0010183:	83 ec 0c             	sub    esp,0xc
c0010186:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001018a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001018d:	85 c0                	test   eax,eax
c001018f:	74 18                	je     c00101a9 <SysShutdown(regs*)+0x26>
c0010191:	83 f8 01             	cmp    eax,0x1
c0010194:	74 38                	je     c00101ce <SysShutdown(regs*)+0x4b>
c0010196:	83 f8 02             	cmp    eax,0x2
c0010199:	74 24                	je     c00101bf <SysShutdown(regs*)+0x3c>
c001019b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00101a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00101a5:	83 c4 0c             	add    esp,0xc
c00101a8:	c3                   	ret    
c00101a9:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00101ae:	8b 10                	mov    edx,DWORD PTR [eax]
c00101b0:	6a 00                	push   0x0
c00101b2:	6a 00                	push   0x0
c00101b4:	6a 00                	push   0x0
c00101b6:	50                   	push   eax
c00101b7:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00101ba:	83 c4 10             	add    esp,0x10
c00101bd:	eb dc                	jmp    c001019b <SysShutdown(regs*)+0x18>
c00101bf:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00101c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00101c6:	6a 00                	push   0x0
c00101c8:	6a 00                	push   0x0
c00101ca:	6a 01                	push   0x1
c00101cc:	eb e8                	jmp    c00101b6 <SysShutdown(regs*)+0x33>
c00101ce:	a1 64 9d 02 c0       	mov    eax,ds:0xc0029d64
c00101d3:	85 c0                	test   eax,eax
c00101d5:	74 02                	je     c00101d9 <SysShutdown(regs*)+0x56>
c00101d7:	ff d0                	call   eax
c00101d9:	31 c0                	xor    eax,eax
c00101db:	31 d2                	xor    edx,edx
c00101dd:	83 c4 0c             	add    esp,0xc
c00101e0:	c3                   	ret    

c00101e1 <SysRealpath(regs*)>:
c00101e1:	83 ec 0c             	sub    esp,0xc
c00101e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00101e8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00101eb:	85 d2                	test   edx,edx
c00101ed:	74 07                	je     c00101f6 <SysRealpath(regs*)+0x15>
c00101ef:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00101f2:	85 c0                	test   eax,eax
c00101f4:	75 0b                	jne    c0010201 <SysRealpath(regs*)+0x20>
c00101f6:	b8 01 00 00 00       	mov    eax,0x1
c00101fb:	31 d2                	xor    edx,edx
c00101fd:	83 c4 0c             	add    esp,0xc
c0010200:	c3                   	ret    
c0010201:	6a 00                	push   0x0
c0010203:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010209:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001020c:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010212:	51                   	push   ecx
c0010213:	52                   	push   edx
c0010214:	50                   	push   eax
c0010215:	e8 00 7c ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c001021a:	83 c4 10             	add    esp,0x10
c001021d:	31 c0                	xor    eax,eax
c001021f:	31 d2                	xor    edx,edx
c0010221:	83 c4 0c             	add    esp,0xc
c0010224:	c3                   	ret    

c0010225 <SysReadDir(regs*)>:
c0010225:	53                   	push   ebx
c0010226:	83 ec 18             	sub    esp,0x18
c0010229:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001022d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010230:	83 f8 02             	cmp    eax,0x2
c0010233:	76 61                	jbe    c0010296 <SysReadDir(regs*)+0x71>
c0010235:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001023c:	77 49                	ja     c0010287 <SysReadDir(regs*)+0x62>
c001023e:	83 ec 0c             	sub    esp,0xc
c0010241:	50                   	push   eax
c0010242:	e8 aa 1c 00 00       	call   c0011ef1 <KeGetFileFromDescriptor(int)>
c0010247:	83 c4 10             	add    esp,0x10
c001024a:	85 c0                	test   eax,eax
c001024c:	74 39                	je     c0010287 <SysReadDir(regs*)+0x62>
c001024e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010256:	83 ec 0c             	sub    esp,0xc
c0010259:	8b 10                	mov    edx,DWORD PTR [eax]
c001025b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001025f:	51                   	push   ecx
c0010260:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010263:	51                   	push   ecx
c0010264:	6a 00                	push   0x0
c0010266:	68 10 01 00 00       	push   0x110
c001026b:	50                   	push   eax
c001026c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001026f:	83 c4 20             	add    esp,0x20
c0010272:	85 c0                	test   eax,eax
c0010274:	74 29                	je     c001029f <SysReadDir(regs*)+0x7a>
c0010276:	83 f8 07             	cmp    eax,0x7
c0010279:	74 1b                	je     c0010296 <SysReadDir(regs*)+0x71>
c001027b:	b8 02 00 00 00       	mov    eax,0x2
c0010280:	31 d2                	xor    edx,edx
c0010282:	83 c4 18             	add    esp,0x18
c0010285:	5b                   	pop    ebx
c0010286:	c3                   	ret    
c0010287:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001028c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010291:	83 c4 18             	add    esp,0x18
c0010294:	5b                   	pop    ebx
c0010295:	c3                   	ret    
c0010296:	b8 01 00 00 00       	mov    eax,0x1
c001029b:	31 d2                	xor    edx,edx
c001029d:	eb e3                	jmp    c0010282 <SysReadDir(regs*)+0x5d>
c001029f:	31 c0                	xor    eax,eax
c00102a1:	31 d2                	xor    edx,edx
c00102a3:	eb dd                	jmp    c0010282 <SysReadDir(regs*)+0x5d>

c00102a5 <SysIsATTY(regs*)>:
c00102a5:	83 ec 0c             	sub    esp,0xc
c00102a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ac:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00102af:	83 f8 02             	cmp    eax,0x2
c00102b2:	76 07                	jbe    c00102bb <SysIsATTY(regs*)+0x16>
c00102b4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00102b9:	75 26                	jne    c00102e1 <SysIsATTY(regs*)+0x3c>
c00102bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00102c0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00102c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00102c9:	85 c0                	test   eax,eax
c00102cb:	74 24                	je     c00102f1 <SysIsATTY(regs*)+0x4c>
c00102cd:	83 ec 0c             	sub    esp,0xc
c00102d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00102d2:	50                   	push   eax
c00102d3:	ff 12                	call   DWORD PTR [edx]
c00102d5:	31 d2                	xor    edx,edx
c00102d7:	0f b6 c0             	movzx  eax,al
c00102da:	83 c4 10             	add    esp,0x10
c00102dd:	83 c4 0c             	add    esp,0xc
c00102e0:	c3                   	ret    
c00102e1:	83 ec 0c             	sub    esp,0xc
c00102e4:	50                   	push   eax
c00102e5:	e8 07 1c 00 00       	call   c0011ef1 <KeGetFileFromDescriptor(int)>
c00102ea:	83 c4 10             	add    esp,0x10
c00102ed:	85 c0                	test   eax,eax
c00102ef:	75 dc                	jne    c00102cd <SysIsATTY(regs*)+0x28>
c00102f1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00102f6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00102fb:	83 c4 0c             	add    esp,0xc
c00102fe:	c3                   	ret    

c00102ff <SysSeek(regs*)>:
c00102ff:	53                   	push   ebx
c0010300:	83 ec 08             	sub    esp,0x8
c0010303:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010307:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001030a:	8d 50 fd             	lea    edx,[eax-0x3]
c001030d:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010313:	77 32                	ja     c0010347 <SysSeek(regs*)+0x48>
c0010315:	83 ec 0c             	sub    esp,0xc
c0010318:	50                   	push   eax
c0010319:	e8 d3 1b 00 00       	call   c0011ef1 <KeGetFileFromDescriptor(int)>
c001031e:	83 c4 0c             	add    esp,0xc
c0010321:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010324:	31 db                	xor    ebx,ebx
c0010326:	53                   	push   ebx
c0010327:	51                   	push   ecx
c0010328:	50                   	push   eax
c0010329:	e8 c0 7e ff ff       	call   c00081ee <File::seek(unsigned long long)>
c001032e:	83 c4 10             	add    esp,0x10
c0010331:	85 c0                	test   eax,eax
c0010333:	0f 95 c0             	setne  al
c0010336:	31 d2                	xor    edx,edx
c0010338:	0f b6 c0             	movzx  eax,al
c001033b:	f7 d8                	neg    eax
c001033d:	83 d2 00             	adc    edx,0x0
c0010340:	83 c4 08             	add    esp,0x8
c0010343:	f7 da                	neg    edx
c0010345:	5b                   	pop    ebx
c0010346:	c3                   	ret    
c0010347:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001034c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010351:	83 c4 08             	add    esp,0x8
c0010354:	5b                   	pop    ebx
c0010355:	c3                   	ret    

c0010356 <SysTell(regs*)>:
c0010356:	53                   	push   ebx
c0010357:	83 ec 08             	sub    esp,0x8
c001035a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001035e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010361:	83 f8 02             	cmp    eax,0x2
c0010364:	76 4e                	jbe    c00103b4 <SysTell(regs*)+0x5e>
c0010366:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001036b:	76 19                	jbe    c0010386 <SysTell(regs*)+0x30>
c001036d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010370:	31 d2                	xor    edx,edx
c0010372:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010378:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001037f:	31 c0                	xor    eax,eax
c0010381:	83 c4 08             	add    esp,0x8
c0010384:	5b                   	pop    ebx
c0010385:	c3                   	ret    
c0010386:	83 ec 0c             	sub    esp,0xc
c0010389:	50                   	push   eax
c001038a:	e8 62 1b 00 00       	call   c0011ef1 <KeGetFileFromDescriptor(int)>
c001038f:	5a                   	pop    edx
c0010390:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010393:	59                   	pop    ecx
c0010394:	53                   	push   ebx
c0010395:	50                   	push   eax
c0010396:	e8 ff 7e ff ff       	call   c000829a <File::tell(unsigned long long*)>
c001039b:	83 c4 10             	add    esp,0x10
c001039e:	85 c0                	test   eax,eax
c00103a0:	0f 95 c0             	setne  al
c00103a3:	31 d2                	xor    edx,edx
c00103a5:	0f b6 c0             	movzx  eax,al
c00103a8:	f7 d8                	neg    eax
c00103aa:	83 d2 00             	adc    edx,0x0
c00103ad:	83 c4 08             	add    esp,0x8
c00103b0:	f7 da                	neg    edx
c00103b2:	5b                   	pop    ebx
c00103b3:	c3                   	ret    
c00103b4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00103b9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00103be:	83 c4 08             	add    esp,0x8
c00103c1:	5b                   	pop    ebx
c00103c2:	c3                   	ret    

c00103c3 <SysSize(regs*)>:
c00103c3:	53                   	push   ebx
c00103c4:	83 ec 18             	sub    esp,0x18
c00103c7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00103cb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00103ce:	83 f8 02             	cmp    eax,0x2
c00103d1:	76 54                	jbe    c0010427 <SysSize(regs*)+0x64>
c00103d3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00103d8:	76 19                	jbe    c00103f3 <SysSize(regs*)+0x30>
c00103da:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00103dd:	31 d2                	xor    edx,edx
c00103df:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00103e5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00103ec:	31 c0                	xor    eax,eax
c00103ee:	83 c4 18             	add    esp,0x18
c00103f1:	5b                   	pop    ebx
c00103f2:	c3                   	ret    
c00103f3:	83 ec 0c             	sub    esp,0xc
c00103f6:	50                   	push   eax
c00103f7:	e8 f5 1a 00 00       	call   c0011ef1 <KeGetFileFromDescriptor(int)>
c00103fc:	83 c4 0c             	add    esp,0xc
c00103ff:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010403:	52                   	push   edx
c0010404:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010407:	52                   	push   edx
c0010408:	50                   	push   eax
c0010409:	e8 24 80 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c001040e:	83 c4 10             	add    esp,0x10
c0010411:	85 c0                	test   eax,eax
c0010413:	0f 95 c0             	setne  al
c0010416:	31 d2                	xor    edx,edx
c0010418:	0f b6 c0             	movzx  eax,al
c001041b:	f7 d8                	neg    eax
c001041d:	83 d2 00             	adc    edx,0x0
c0010420:	83 c4 18             	add    esp,0x18
c0010423:	f7 da                	neg    edx
c0010425:	5b                   	pop    ebx
c0010426:	c3                   	ret    
c0010427:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001042c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010431:	83 c4 18             	add    esp,0x18
c0010434:	5b                   	pop    ebx
c0010435:	c3                   	ret    

c0010436 <SysSizeFromFilename(regs*)>:
c0010436:	55                   	push   ebp
c0010437:	57                   	push   edi
c0010438:	56                   	push   esi
c0010439:	53                   	push   ebx
c001043a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010440:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010447:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001044a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001044d:	85 f6                	test   esi,esi
c001044f:	74 34                	je     c0010485 <SysSizeFromFilename(regs*)+0x4f>
c0010451:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010457:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001045a:	83 f8 02             	cmp    eax,0x2
c001045d:	76 2d                	jbe    c001048c <SysSizeFromFilename(regs*)+0x56>
c001045f:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010464:	76 3b                	jbe    c00104a1 <SysSizeFromFilename(regs*)+0x6b>
c0010466:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010469:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001046f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010476:	81 c4 5c 02 00 00    	add    esp,0x25c
c001047c:	31 c0                	xor    eax,eax
c001047e:	5b                   	pop    ebx
c001047f:	31 d2                	xor    edx,edx
c0010481:	5e                   	pop    esi
c0010482:	5f                   	pop    edi
c0010483:	5d                   	pop    ebp
c0010484:	c3                   	ret    
c0010485:	89 f8                	mov    eax,edi
c0010487:	83 f8 02             	cmp    eax,0x2
c001048a:	77 d3                	ja     c001045f <SysSizeFromFilename(regs*)+0x29>
c001048c:	81 c4 5c 02 00 00    	add    esp,0x25c
c0010492:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010497:	5b                   	pop    ebx
c0010498:	ba ff ff ff ff       	mov    edx,0xffffffff
c001049d:	5e                   	pop    esi
c001049e:	5f                   	pop    edi
c001049f:	5d                   	pop    ebp
c00104a0:	c3                   	ret    
c00104a1:	83 ec 0c             	sub    esp,0xc
c00104a4:	68 14 01 00 00       	push   0x114
c00104a9:	e8 cd e4 ff ff       	call   c000e97b <malloc>
c00104ae:	6a 01                	push   0x1
c00104b0:	89 c5                	mov    ebp,eax
c00104b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104b7:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00104ba:	51                   	push   ecx
c00104bb:	57                   	push   edi
c00104bc:	55                   	push   ebp
c00104bd:	e8 72 7b ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00104c2:	83 c4 1c             	add    esp,0x1c
c00104c5:	8d 44 24 23          	lea    eax,[esp+0x23]
c00104c9:	50                   	push   eax
c00104ca:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00104cd:	53                   	push   ebx
c00104ce:	55                   	push   ebp
c00104cf:	e8 5e 7f ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c00104d4:	83 c4 10             	add    esp,0x10
c00104d7:	85 ed                	test   ebp,ebp
c00104d9:	74 15                	je     c00104f0 <SysSizeFromFilename(regs*)+0xba>
c00104db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00104df:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00104e2:	83 ec 0c             	sub    esp,0xc
c00104e5:	55                   	push   ebp
c00104e6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00104e9:	83 c4 10             	add    esp,0x10
c00104ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104f0:	85 c0                	test   eax,eax
c00104f2:	75 98                	jne    c001048c <SysSizeFromFilename(regs*)+0x56>
c00104f4:	6a 00                	push   0x0
c00104f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00104fb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00104fe:	05 0c 01 00 00       	add    eax,0x10c
c0010503:	50                   	push   eax
c0010504:	57                   	push   edi
c0010505:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c001050c:	53                   	push   ebx
c001050d:	e8 08 79 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010512:	58                   	pop    eax
c0010513:	5a                   	pop    edx
c0010514:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010518:	50                   	push   eax
c0010519:	53                   	push   ebx
c001051a:	e8 82 73 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c001051f:	83 c4 10             	add    esp,0x10
c0010522:	83 f8 01             	cmp    eax,0x1
c0010525:	74 1a                	je     c0010541 <SysSizeFromFilename(regs*)+0x10b>
c0010527:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001052c:	74 26                	je     c0010554 <SysSizeFromFilename(regs*)+0x11e>
c001052e:	85 f6                	test   esi,esi
c0010530:	0f 84 40 ff ff ff    	je     c0010476 <SysSizeFromFilename(regs*)+0x40>
c0010536:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001053c:	e9 35 ff ff ff       	jmp    c0010476 <SysSizeFromFilename(regs*)+0x40>
c0010541:	85 f6                	test   esi,esi
c0010543:	0f 84 2d ff ff ff    	je     c0010476 <SysSizeFromFilename(regs*)+0x40>
c0010549:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001054f:	e9 22 ff ff ff       	jmp    c0010476 <SysSizeFromFilename(regs*)+0x40>
c0010554:	85 f6                	test   esi,esi
c0010556:	0f 84 1a ff ff ff    	je     c0010476 <SysSizeFromFilename(regs*)+0x40>
c001055c:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010562:	e9 0f ff ff ff       	jmp    c0010476 <SysSizeFromFilename(regs*)+0x40>

c0010567 <SysSizeFromFilenameNoSymlink(regs*)>:
c0010567:	55                   	push   ebp
c0010568:	57                   	push   edi
c0010569:	56                   	push   esi
c001056a:	53                   	push   ebx
c001056b:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0010571:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0010578:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001057b:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001057e:	85 f6                	test   esi,esi
c0010580:	74 34                	je     c00105b6 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0010582:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010588:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001058b:	83 f8 02             	cmp    eax,0x2
c001058e:	76 2d                	jbe    c00105bd <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0010590:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010595:	76 3b                	jbe    c00105d2 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0010597:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001059a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00105a0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00105a7:	81 c4 5c 02 00 00    	add    esp,0x25c
c00105ad:	31 c0                	xor    eax,eax
c00105af:	5b                   	pop    ebx
c00105b0:	31 d2                	xor    edx,edx
c00105b2:	5e                   	pop    esi
c00105b3:	5f                   	pop    edi
c00105b4:	5d                   	pop    ebp
c00105b5:	c3                   	ret    
c00105b6:	89 f8                	mov    eax,edi
c00105b8:	83 f8 02             	cmp    eax,0x2
c00105bb:	77 d3                	ja     c0010590 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c00105bd:	81 c4 5c 02 00 00    	add    esp,0x25c
c00105c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00105c8:	5b                   	pop    ebx
c00105c9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00105ce:	5e                   	pop    esi
c00105cf:	5f                   	pop    edi
c00105d0:	5d                   	pop    ebp
c00105d1:	c3                   	ret    
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	68 14 01 00 00       	push   0x114
c00105da:	e8 9c e3 ff ff       	call   c000e97b <malloc>
c00105df:	6a 00                	push   0x0
c00105e1:	89 c5                	mov    ebp,eax
c00105e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00105e8:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00105eb:	51                   	push   ecx
c00105ec:	57                   	push   edi
c00105ed:	55                   	push   ebp
c00105ee:	e8 41 7a ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00105f3:	83 c4 1c             	add    esp,0x1c
c00105f6:	8d 44 24 23          	lea    eax,[esp+0x23]
c00105fa:	50                   	push   eax
c00105fb:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00105fe:	53                   	push   ebx
c00105ff:	55                   	push   ebp
c0010600:	e8 2d 7e ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0010605:	83 c4 10             	add    esp,0x10
c0010608:	85 ed                	test   ebp,ebp
c001060a:	74 15                	je     c0010621 <SysSizeFromFilenameNoSymlink(regs*)+0xba>
c001060c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010610:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010613:	83 ec 0c             	sub    esp,0xc
c0010616:	55                   	push   ebp
c0010617:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001061a:	83 c4 10             	add    esp,0x10
c001061d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010621:	85 c0                	test   eax,eax
c0010623:	75 98                	jne    c00105bd <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0010625:	6a 00                	push   0x0
c0010627:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001062c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001062f:	05 0c 01 00 00       	add    eax,0x10c
c0010634:	50                   	push   eax
c0010635:	57                   	push   edi
c0010636:	8d 9c 24 44 01 00 00 	lea    ebx,[esp+0x144]
c001063d:	53                   	push   ebx
c001063e:	e8 d7 77 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010643:	58                   	pop    eax
c0010644:	5a                   	pop    edx
c0010645:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010649:	50                   	push   eax
c001064a:	53                   	push   ebx
c001064b:	e8 51 72 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0010650:	83 c4 10             	add    esp,0x10
c0010653:	83 f8 01             	cmp    eax,0x1
c0010656:	74 1a                	je     c0010672 <SysSizeFromFilenameNoSymlink(regs*)+0x10b>
c0010658:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001065d:	74 26                	je     c0010685 <SysSizeFromFilenameNoSymlink(regs*)+0x11e>
c001065f:	85 f6                	test   esi,esi
c0010661:	0f 84 40 ff ff ff    	je     c00105a7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010667:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c001066d:	e9 35 ff ff ff       	jmp    c00105a7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010672:	85 f6                	test   esi,esi
c0010674:	0f 84 2d ff ff ff    	je     c00105a7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001067a:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010680:	e9 22 ff ff ff       	jmp    c00105a7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010685:	85 f6                	test   esi,esi
c0010687:	0f 84 1a ff ff ff    	je     c00105a7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001068d:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010693:	e9 0f ff ff ff       	jmp    c00105a7 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0010698 <SysClose(regs*)>:
c0010698:	53                   	push   ebx
c0010699:	83 ec 08             	sub    esp,0x8
c001069c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00106a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00106a3:	83 f8 02             	cmp    eax,0x2
c00106a6:	76 41                	jbe    c00106e9 <SysClose(regs*)+0x51>
c00106a8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00106ae:	83 fa 01             	cmp    edx,0x1
c00106b1:	76 2d                	jbe    c00106e0 <SysClose(regs*)+0x48>
c00106b3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00106b8:	77 2f                	ja     c00106e9 <SysClose(regs*)+0x51>
c00106ba:	83 ec 0c             	sub    esp,0xc
c00106bd:	50                   	push   eax
c00106be:	e8 2e 18 00 00       	call   c0011ef1 <KeGetFileFromDescriptor(int)>
c00106c3:	89 c3                	mov    ebx,eax
c00106c5:	89 04 24             	mov    DWORD PTR [esp],eax
c00106c8:	e8 c1 7a ff ff       	call   c000818e <File::close()>
c00106cd:	83 c4 10             	add    esp,0x10
c00106d0:	85 db                	test   ebx,ebx
c00106d2:	74 0c                	je     c00106e0 <SysClose(regs*)+0x48>
c00106d4:	83 ec 0c             	sub    esp,0xc
c00106d7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106d9:	53                   	push   ebx
c00106da:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00106dd:	83 c4 10             	add    esp,0x10
c00106e0:	31 c0                	xor    eax,eax
c00106e2:	31 d2                	xor    edx,edx
c00106e4:	83 c4 08             	add    esp,0x8
c00106e7:	5b                   	pop    ebx
c00106e8:	c3                   	ret    
c00106e9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106ee:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106f3:	83 c4 08             	add    esp,0x8
c00106f6:	5b                   	pop    ebx
c00106f7:	c3                   	ret    

c00106f8 <SysOpenDir(regs*)>:
c00106f8:	56                   	push   esi
c00106f9:	53                   	push   ebx
c00106fa:	83 ec 04             	sub    esp,0x4
c00106fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010701:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010704:	85 c9                	test   ecx,ecx
c0010706:	74 5d                	je     c0010765 <SysOpenDir(regs*)+0x6d>
c0010708:	83 ec 0c             	sub    esp,0xc
c001070b:	68 14 01 00 00       	push   0x114
c0010710:	e8 66 e2 ff ff       	call   c000e97b <malloc>
c0010715:	83 c4 0c             	add    esp,0xc
c0010718:	89 c6                	mov    esi,eax
c001071a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001071f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010722:	50                   	push   eax
c0010723:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010726:	52                   	push   edx
c0010727:	56                   	push   esi
c0010728:	e8 c5 7e ff ff       	call   c00085f2 <Directory::Directory(char const*, Process*)>
c001072d:	83 c4 10             	add    esp,0x10
c0010730:	85 f6                	test   esi,esi
c0010732:	74 31                	je     c0010765 <SysOpenDir(regs*)+0x6d>
c0010734:	83 ec 0c             	sub    esp,0xc
c0010737:	56                   	push   esi
c0010738:	e8 7d 7f ff ff       	call   c00086ba <Directory::open()>
c001073d:	83 c4 10             	add    esp,0x10
c0010740:	85 c0                	test   eax,eax
c0010742:	75 21                	jne    c0010765 <SysOpenDir(regs*)+0x6d>
c0010744:	83 ec 0c             	sub    esp,0xc
c0010747:	56                   	push   esi
c0010748:	e8 a7 14 00 00       	call   c0011bf4 <UnixFile::getFileDescriptor()>
c001074d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010750:	83 c4 10             	add    esp,0x10
c0010753:	89 02                	mov    DWORD PTR [edx],eax
c0010755:	c1 f8 1f             	sar    eax,0x1f
c0010758:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001075b:	83 c4 04             	add    esp,0x4
c001075e:	31 c0                	xor    eax,eax
c0010760:	31 d2                	xor    edx,edx
c0010762:	5b                   	pop    ebx
c0010763:	5e                   	pop    esi
c0010764:	c3                   	ret    
c0010765:	83 c4 04             	add    esp,0x4
c0010768:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001076d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010772:	5b                   	pop    ebx
c0010773:	5e                   	pop    esi
c0010774:	c3                   	ret    

c0010775 <SysMakeDir(regs*)>:
c0010775:	56                   	push   esi
c0010776:	53                   	push   ebx
c0010777:	83 ec 10             	sub    esp,0x10
c001077a:	68 14 01 00 00       	push   0x114
c001077f:	e8 f7 e1 ff ff       	call   c000e97b <malloc>
c0010784:	83 c4 0c             	add    esp,0xc
c0010787:	89 c3                	mov    ebx,eax
c0010789:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001078e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010791:	50                   	push   eax
c0010792:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010796:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0010799:	52                   	push   edx
c001079a:	53                   	push   ebx
c001079b:	e8 52 7e ff ff       	call   c00085f2 <Directory::Directory(char const*, Process*)>
c00107a0:	83 c4 10             	add    esp,0x10
c00107a3:	85 db                	test   ebx,ebx
c00107a5:	74 2c                	je     c00107d3 <SysMakeDir(regs*)+0x5e>
c00107a7:	83 ec 0c             	sub    esp,0xc
c00107aa:	53                   	push   ebx
c00107ab:	e8 ea 80 ff ff       	call   c000889a <Directory::create()>
c00107b0:	89 c6                	mov    esi,eax
c00107b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00107b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00107b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00107ba:	83 c4 10             	add    esp,0x10
c00107bd:	31 c0                	xor    eax,eax
c00107bf:	85 f6                	test   esi,esi
c00107c1:	0f 95 c0             	setne  al
c00107c4:	31 d2                	xor    edx,edx
c00107c6:	f7 d8                	neg    eax
c00107c8:	83 d2 00             	adc    edx,0x0
c00107cb:	83 c4 04             	add    esp,0x4
c00107ce:	f7 da                	neg    edx
c00107d0:	5b                   	pop    ebx
c00107d1:	5e                   	pop    esi
c00107d2:	c3                   	ret    
c00107d3:	83 c4 04             	add    esp,0x4
c00107d6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107db:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107e0:	5b                   	pop    ebx
c00107e1:	5e                   	pop    esi
c00107e2:	c3                   	ret    

c00107e3 <SysCloseDir(regs*)>:
c00107e3:	53                   	push   ebx
c00107e4:	83 ec 08             	sub    esp,0x8
c00107e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00107eb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00107ee:	8d 50 fd             	lea    edx,[eax-0x3]
c00107f1:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00107f7:	77 2f                	ja     c0010828 <SysCloseDir(regs*)+0x45>
c00107f9:	83 ec 0c             	sub    esp,0xc
c00107fc:	50                   	push   eax
c00107fd:	e8 ef 16 00 00       	call   c0011ef1 <KeGetFileFromDescriptor(int)>
c0010802:	89 c3                	mov    ebx,eax
c0010804:	89 04 24             	mov    DWORD PTR [esp],eax
c0010807:	e8 0a 7f ff ff       	call   c0008716 <Directory::close()>
c001080c:	83 c4 10             	add    esp,0x10
c001080f:	85 db                	test   ebx,ebx
c0010811:	74 0c                	je     c001081f <SysCloseDir(regs*)+0x3c>
c0010813:	83 ec 0c             	sub    esp,0xc
c0010816:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010818:	53                   	push   ebx
c0010819:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001081c:	83 c4 10             	add    esp,0x10
c001081f:	31 c0                	xor    eax,eax
c0010821:	31 d2                	xor    edx,edx
c0010823:	83 c4 08             	add    esp,0x8
c0010826:	5b                   	pop    ebx
c0010827:	c3                   	ret    
c0010828:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001082d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010832:	83 c4 08             	add    esp,0x8
c0010835:	5b                   	pop    ebx
c0010836:	c3                   	ret    

c0010837 <SysWait(regs*)>:
c0010837:	83 ec 10             	sub    esp,0x10
c001083a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001083e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010841:	52                   	push   edx
c0010842:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010845:	51                   	push   ecx
c0010846:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010849:	50                   	push   eax
c001084a:	e8 2d 4d 00 00       	call   c001557c <waitTask(int, int*, int)>
c001084f:	83 c4 1c             	add    esp,0x1c
c0010852:	89 c2                	mov    edx,eax
c0010854:	c1 fa 1f             	sar    edx,0x1f
c0010857:	c3                   	ret    

c0010858 <SysNotImpl(regs*)>:
c0010858:	83 ec 18             	sub    esp,0x18
c001085b:	68 04 23 02 c0       	push   0xc0022304
c0010860:	e8 6d e4 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0010865:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001086a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001086f:	83 c4 1c             	add    esp,0x1c
c0010872:	c3                   	ret    

c0010873 <SysPanic(regs*)>:
c0010873:	83 ec 18             	sub    esp,0x18
c0010876:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001087a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001087d:	50                   	push   eax
c001087e:	e8 4f e4 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0010883:	b8 01 00 00 00       	mov    eax,0x1
c0010888:	31 d2                	xor    edx,edx
c001088a:	83 c4 1c             	add    esp,0x1c
c001088d:	c3                   	ret    

c001088e <SysRmdir(regs*)>:
c001088e:	56                   	push   esi
c001088f:	53                   	push   ebx
c0010890:	83 ec 20             	sub    esp,0x20
c0010893:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010897:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001089a:	68 14 01 00 00       	push   0x114
c001089f:	e8 d7 e0 ff ff       	call   c000e97b <malloc>
c00108a4:	6a 00                	push   0x0
c00108a6:	89 c3                	mov    ebx,eax
c00108a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00108ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00108b0:	50                   	push   eax
c00108b1:	56                   	push   esi
c00108b2:	53                   	push   ebx
c00108b3:	e8 7c 77 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00108b8:	83 c4 14             	add    esp,0x14
c00108bb:	53                   	push   ebx
c00108bc:	e8 3d 7a ff ff       	call   c00082fe <File::unlink()>
c00108c1:	83 c4 10             	add    esp,0x10
c00108c4:	85 db                	test   ebx,ebx
c00108c6:	74 14                	je     c00108dc <SysRmdir(regs*)+0x4e>
c00108c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108cc:	8b 13                	mov    edx,DWORD PTR [ebx]
c00108ce:	83 ec 0c             	sub    esp,0xc
c00108d1:	53                   	push   ebx
c00108d2:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108d5:	83 c4 10             	add    esp,0x10
c00108d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108dc:	85 c0                	test   eax,eax
c00108de:	0f 95 c0             	setne  al
c00108e1:	31 d2                	xor    edx,edx
c00108e3:	0f b6 c0             	movzx  eax,al
c00108e6:	f7 d8                	neg    eax
c00108e8:	83 d2 00             	adc    edx,0x0
c00108eb:	83 c4 14             	add    esp,0x14
c00108ee:	f7 da                	neg    edx
c00108f0:	5b                   	pop    ebx
c00108f1:	5e                   	pop    esi
c00108f2:	c3                   	ret    

c00108f3 <SysUnlink(regs*)>:
c00108f3:	56                   	push   esi
c00108f4:	53                   	push   ebx
c00108f5:	83 ec 20             	sub    esp,0x20
c00108f8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00108fc:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00108ff:	68 14 01 00 00       	push   0x114
c0010904:	e8 72 e0 ff ff       	call   c000e97b <malloc>
c0010909:	6a 00                	push   0x0
c001090b:	89 c3                	mov    ebx,eax
c001090d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010912:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010915:	50                   	push   eax
c0010916:	56                   	push   esi
c0010917:	53                   	push   ebx
c0010918:	e8 17 77 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c001091d:	83 c4 14             	add    esp,0x14
c0010920:	53                   	push   ebx
c0010921:	e8 d8 79 ff ff       	call   c00082fe <File::unlink()>
c0010926:	83 c4 10             	add    esp,0x10
c0010929:	85 db                	test   ebx,ebx
c001092b:	74 14                	je     c0010941 <SysUnlink(regs*)+0x4e>
c001092d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010931:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010933:	83 ec 0c             	sub    esp,0xc
c0010936:	53                   	push   ebx
c0010937:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001093a:	83 c4 10             	add    esp,0x10
c001093d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010941:	85 c0                	test   eax,eax
c0010943:	0f 95 c0             	setne  al
c0010946:	31 d2                	xor    edx,edx
c0010948:	0f b6 c0             	movzx  eax,al
c001094b:	f7 d8                	neg    eax
c001094d:	83 d2 00             	adc    edx,0x0
c0010950:	83 c4 14             	add    esp,0x14
c0010953:	f7 da                	neg    edx
c0010955:	5b                   	pop    ebx
c0010956:	5e                   	pop    esi
c0010957:	c3                   	ret    

c0010958 <SysGetArgv(regs*)>:
c0010958:	83 ec 0c             	sub    esp,0xc
c001095b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001095f:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010962:	85 c0                	test   eax,eax
c0010964:	78 2c                	js     c0010992 <SysGetArgv(regs*)+0x3a>
c0010966:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001096c:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c001096f:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010975:	7d 1b                	jge    c0010992 <SysGetArgv(regs*)+0x3a>
c0010977:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c001097e:	85 c0                	test   eax,eax
c0010980:	74 18                	je     c001099a <SysGetArgv(regs*)+0x42>
c0010982:	83 ec 08             	sub    esp,0x8
c0010985:	50                   	push   eax
c0010986:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010989:	50                   	push   eax
c001098a:	e8 b1 fc fe ff       	call   c0000640 <strcpy>
c001098f:	83 c4 10             	add    esp,0x10
c0010992:	31 c0                	xor    eax,eax
c0010994:	31 d2                	xor    edx,edx
c0010996:	83 c4 0c             	add    esp,0xc
c0010999:	c3                   	ret    
c001099a:	b8 01 00 00 00       	mov    eax,0x1
c001099f:	31 d2                	xor    edx,edx
c00109a1:	83 c4 0c             	add    esp,0xc
c00109a4:	c3                   	ret    

c00109a5 <SysUSleep(regs*)>:
c00109a5:	83 ec 1c             	sub    esp,0x1c
c00109a8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00109ac:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00109af:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00109b2:	6a 00                	push   0x0
c00109b4:	6a 64                	push   0x64
c00109b6:	52                   	push   edx
c00109b7:	50                   	push   eax
c00109b8:	e8 d7 f0 00 00       	call   c001fa94 <__udivdi3>
c00109bd:	83 c4 14             	add    esp,0x14
c00109c0:	50                   	push   eax
c00109c1:	e8 9a 4c 00 00       	call   c0015660 <milliTenthSleep(unsigned int)>
c00109c6:	31 c0                	xor    eax,eax
c00109c8:	31 d2                	xor    edx,edx
c00109ca:	83 c4 1c             	add    esp,0x1c
c00109cd:	c3                   	ret    

c00109ce <SysSpawn(regs*)>:
c00109ce:	56                   	push   esi
c00109cf:	53                   	push   ebx
c00109d0:	83 ec 04             	sub    esp,0x4
c00109d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109d7:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00109da:	85 f6                	test   esi,esi
c00109dc:	75 0a                	jne    c00109e8 <SysSpawn(regs*)+0x1a>
c00109de:	83 c4 04             	add    esp,0x4
c00109e1:	31 c0                	xor    eax,eax
c00109e3:	31 d2                	xor    edx,edx
c00109e5:	5b                   	pop    ebx
c00109e6:	5e                   	pop    esi
c00109e7:	c3                   	ret    
c00109e8:	83 ec 0c             	sub    esp,0xc
c00109eb:	68 24 07 00 00       	push   0x724
c00109f0:	e8 86 df ff ff       	call   c000e97b <malloc>
c00109f5:	83 c4 10             	add    esp,0x10
c00109f8:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c00109fb:	89 c6                	mov    esi,eax
c00109fd:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010a00:	85 c9                	test   ecx,ecx
c0010a02:	75 39                	jne    c0010a3d <SysSpawn(regs*)+0x6f>
c0010a04:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a09:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a0c:	52                   	push   edx
c0010a0d:	50                   	push   eax
c0010a0e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010a11:	50                   	push   eax
c0010a12:	56                   	push   esi
c0010a13:	e8 ec 43 00 00       	call   c0014e04 <Process::Process(char const*, Process*, char**)>
c0010a18:	83 c4 10             	add    esp,0x10
c0010a1b:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010a22:	75 ba                	jne    c00109de <SysSpawn(regs*)+0x10>
c0010a24:	83 ec 0c             	sub    esp,0xc
c0010a27:	56                   	push   esi
c0010a28:	e8 17 49 00 00       	call   c0015344 <Process::createUserThread()>
c0010a2d:	8b 06                	mov    eax,DWORD PTR [esi]
c0010a2f:	83 c4 10             	add    esp,0x10
c0010a32:	89 c2                	mov    edx,eax
c0010a34:	83 c4 04             	add    esp,0x4
c0010a37:	c1 fa 1f             	sar    edx,0x1f
c0010a3a:	5b                   	pop    ebx
c0010a3b:	5e                   	pop    esi
c0010a3c:	c3                   	ret    
c0010a3d:	31 c0                	xor    eax,eax
c0010a3f:	eb cb                	jmp    c0010a0c <SysSpawn(regs*)+0x3e>

c0010a41 <SysGetEnv(regs*)>:
c0010a41:	57                   	push   edi
c0010a42:	56                   	push   esi
c0010a43:	53                   	push   ebx
c0010a44:	83 ec 1c             	sub    esp,0x1c
c0010a47:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a4b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a50:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010a53:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010a56:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0010a59:	51                   	push   ecx
c0010a5a:	e8 70 d2 ff ff       	call   c000dccf <KeGetProcessTotalEnvCount(Process*)>
c0010a5f:	83 c4 10             	add    esp,0x10
c0010a62:	39 c7                	cmp    edi,eax
c0010a64:	7c 14                	jl     c0010a7a <SysGetEnv(regs*)+0x39>
c0010a66:	85 f6                	test   esi,esi
c0010a68:	75 0b                	jne    c0010a75 <SysGetEnv(regs*)+0x34>
c0010a6a:	83 c4 10             	add    esp,0x10
c0010a6d:	31 c0                	xor    eax,eax
c0010a6f:	5b                   	pop    ebx
c0010a70:	31 d2                	xor    edx,edx
c0010a72:	5e                   	pop    esi
c0010a73:	5f                   	pop    edi
c0010a74:	c3                   	ret    
c0010a75:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010a78:	eb f0                	jmp    c0010a6a <SysGetEnv(regs*)+0x29>
c0010a7a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010a7e:	83 ec 04             	sub    esp,0x4
c0010a81:	57                   	push   edi
c0010a82:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010a88:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0010a8b:	57                   	push   edi
c0010a8c:	50                   	push   eax
c0010a8d:	e8 5d d2 ff ff       	call   c000dcef <KeGetProcessEnvPair(Process*, int)>
c0010a92:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010a95:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a99:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010a9d:	83 c4 0c             	add    esp,0xc
c0010aa0:	85 d2                	test   edx,edx
c0010aa2:	75 23                	jne    c0010ac7 <SysGetEnv(regs*)+0x86>
c0010aa4:	83 ec 0c             	sub    esp,0xc
c0010aa7:	50                   	push   eax
c0010aa8:	e8 c3 fa fe ff       	call   c0000570 <strlen>
c0010aad:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ab0:	89 c3                	mov    ebx,eax
c0010ab2:	e8 b9 fa fe ff       	call   c0000570 <strlen>
c0010ab7:	83 c4 10             	add    esp,0x10
c0010aba:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010abe:	83 c4 10             	add    esp,0x10
c0010ac1:	31 d2                	xor    edx,edx
c0010ac3:	5b                   	pop    ebx
c0010ac4:	5e                   	pop    esi
c0010ac5:	5f                   	pop    edi
c0010ac6:	c3                   	ret    
c0010ac7:	83 ec 08             	sub    esp,0x8
c0010aca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010acd:	50                   	push   eax
c0010ace:	56                   	push   esi
c0010acf:	e8 6c fb fe ff       	call   c0000640 <strcpy>
c0010ad4:	58                   	pop    eax
c0010ad5:	5a                   	pop    edx
c0010ad6:	68 1e 23 02 c0       	push   0xc002231e
c0010adb:	56                   	push   esi
c0010adc:	e8 5f fd fe ff       	call   c0000840 <strcat>
c0010ae1:	59                   	pop    ecx
c0010ae2:	5b                   	pop    ebx
c0010ae3:	57                   	push   edi
c0010ae4:	56                   	push   esi
c0010ae5:	e8 56 fd fe ff       	call   c0000840 <strcat>
c0010aea:	83 c4 10             	add    esp,0x10
c0010aed:	e9 78 ff ff ff       	jmp    c0010a6a <SysGetEnv(regs*)+0x29>

c0010af2 <SysSetFatAttrib(regs*)>:
c0010af2:	57                   	push   edi
c0010af3:	56                   	push   esi
c0010af4:	53                   	push   ebx
c0010af5:	83 ec 1c             	sub    esp,0x1c
c0010af8:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010afc:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010aff:	68 14 01 00 00       	push   0x114
c0010b04:	e8 72 de ff ff       	call   c000e97b <malloc>
c0010b09:	83 c4 0c             	add    esp,0xc
c0010b0c:	89 c3                	mov    ebx,eax
c0010b0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b16:	50                   	push   eax
c0010b17:	57                   	push   edi
c0010b18:	53                   	push   ebx
c0010b19:	e8 f4 75 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0010b1e:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010b21:	83 c4 0c             	add    esp,0xc
c0010b24:	0f b6 d4             	movzx  edx,ah
c0010b27:	0f b6 c0             	movzx  eax,al
c0010b2a:	52                   	push   edx
c0010b2b:	50                   	push   eax
c0010b2c:	53                   	push   ebx
c0010b2d:	e8 66 78 ff ff       	call   c0008398 <File::chfatattr(unsigned char, unsigned char)>
c0010b32:	83 c4 10             	add    esp,0x10
c0010b35:	85 db                	test   ebx,ebx
c0010b37:	74 14                	je     c0010b4d <SysSetFatAttrib(regs*)+0x5b>
c0010b39:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b3d:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b3f:	83 ec 0c             	sub    esp,0xc
c0010b42:	53                   	push   ebx
c0010b43:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b46:	83 c4 10             	add    esp,0x10
c0010b49:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b4d:	85 c0                	test   eax,eax
c0010b4f:	0f 95 c0             	setne  al
c0010b52:	31 d2                	xor    edx,edx
c0010b54:	0f b6 c0             	movzx  eax,al
c0010b57:	f7 d8                	neg    eax
c0010b59:	83 d2 00             	adc    edx,0x0
c0010b5c:	83 c4 10             	add    esp,0x10
c0010b5f:	f7 da                	neg    edx
c0010b61:	5b                   	pop    ebx
c0010b62:	5e                   	pop    esi
c0010b63:	5f                   	pop    edi
c0010b64:	c3                   	ret    

c0010b65 <SysPipe(regs*)>:
c0010b65:	57                   	push   edi
c0010b66:	56                   	push   esi
c0010b67:	53                   	push   ebx
c0010b68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b6c:	83 ec 0c             	sub    esp,0xc
c0010b6f:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010b72:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010b75:	6a 20                	push   0x20
c0010b77:	e8 ff dd ff ff       	call   c000e97b <malloc>
c0010b7c:	89 c3                	mov    ebx,eax
c0010b7e:	58                   	pop    eax
c0010b7f:	5a                   	pop    edx
c0010b80:	68 00 50 00 00       	push   0x5000
c0010b85:	53                   	push   ebx
c0010b86:	e8 a3 e9 ff ff       	call   c000f52e <Pipe::Pipe(int)>
c0010b8b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b8e:	e8 61 10 00 00       	call   c0011bf4 <UnixFile::getFileDescriptor()>
c0010b93:	89 07                	mov    DWORD PTR [edi],eax
c0010b95:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b98:	e8 57 10 00 00       	call   c0011bf4 <UnixFile::getFileDescriptor()>
c0010b9d:	83 c4 10             	add    esp,0x10
c0010ba0:	89 06                	mov    DWORD PTR [esi],eax
c0010ba2:	31 d2                	xor    edx,edx
c0010ba4:	5b                   	pop    ebx
c0010ba5:	31 c0                	xor    eax,eax
c0010ba7:	5e                   	pop    esi
c0010ba8:	5f                   	pop    edi
c0010ba9:	c3                   	ret    

c0010baa <SysGetUnixTime(regs*)>:
c0010baa:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0010baf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010bb5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010bb9:	e9 d4 7f ff ff       	jmp    c0008b92 <Clock::timeInSecondsLocal()>

c0010bbe <string_ends_with(char const*, char const*)>:
c0010bbe:	57                   	push   edi
c0010bbf:	56                   	push   esi
c0010bc0:	53                   	push   ebx
c0010bc1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bc5:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010bc9:	83 ec 0c             	sub    esp,0xc
c0010bcc:	53                   	push   ebx
c0010bcd:	e8 9e f9 fe ff       	call   c0000570 <strlen>
c0010bd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010bd5:	89 c6                	mov    esi,eax
c0010bd7:	e8 94 f9 fe ff       	call   c0000570 <strlen>
c0010bdc:	83 c4 10             	add    esp,0x10
c0010bdf:	39 c6                	cmp    esi,eax
c0010be1:	7d 06                	jge    c0010be9 <string_ends_with(char const*, char const*)+0x2b>
c0010be3:	5b                   	pop    ebx
c0010be4:	31 c0                	xor    eax,eax
c0010be6:	5e                   	pop    esi
c0010be7:	5f                   	pop    edi
c0010be8:	c3                   	ret    
c0010be9:	83 ec 08             	sub    esp,0x8
c0010bec:	29 c6                	sub    esi,eax
c0010bee:	57                   	push   edi
c0010bef:	01 f3                	add    ebx,esi
c0010bf1:	53                   	push   ebx
c0010bf2:	e8 59 fb fe ff       	call   c0000750 <strcmp>
c0010bf7:	83 c4 10             	add    esp,0x10
c0010bfa:	85 c0                	test   eax,eax
c0010bfc:	5b                   	pop    ebx
c0010bfd:	0f 94 c0             	sete   al
c0010c00:	5e                   	pop    esi
c0010c01:	0f b6 c0             	movzx  eax,al
c0010c04:	5f                   	pop    edi
c0010c05:	c3                   	ret    

c0010c06 <SysOpen(regs*)>:
c0010c06:	56                   	push   esi
c0010c07:	53                   	push   ebx
c0010c08:	81 ec 04 01 00 00    	sub    esp,0x104
c0010c0e:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010c15:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c18:	85 c0                	test   eax,eax
c0010c1a:	0f 84 bc 01 00 00    	je     c0010ddc <SysOpen(regs*)+0x1d6>
c0010c20:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c23:	85 c0                	test   eax,eax
c0010c25:	0f 84 b1 01 00 00    	je     c0010ddc <SysOpen(regs*)+0x1d6>
c0010c2b:	6a 00                	push   0x0
c0010c2d:	68 20 23 02 c0       	push   0xc0022320
c0010c32:	50                   	push   eax
c0010c33:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010c37:	56                   	push   esi
c0010c38:	e8 dd 71 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010c3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c40:	e8 2b f9 fe ff       	call   c0000570 <strlen>
c0010c45:	83 c4 10             	add    esp,0x10
c0010c48:	83 e8 01             	sub    eax,0x1
c0010c4b:	74 21                	je     c0010c6e <SysOpen(regs*)+0x68>
c0010c4d:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0010c51:	eb 12                	jmp    c0010c65 <SysOpen(regs*)+0x5f>
c0010c53:	83 fa 3a             	cmp    edx,0x3a
c0010c56:	74 12                	je     c0010c6a <SysOpen(regs*)+0x64>
c0010c58:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010c5c:	83 e8 01             	sub    eax,0x1
c0010c5f:	74 0d                	je     c0010c6e <SysOpen(regs*)+0x68>
c0010c61:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0010c65:	83 fa 2e             	cmp    edx,0x2e
c0010c68:	75 e9                	jne    c0010c53 <SysOpen(regs*)+0x4d>
c0010c6a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010c6e:	83 ec 08             	sub    esp,0x8
c0010c71:	68 24 23 02 c0       	push   0xc0022324
c0010c76:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c79:	50                   	push   eax
c0010c7a:	e8 3f ff ff ff       	call   c0010bbe <string_ends_with(char const*, char const*)>
c0010c7f:	83 c4 10             	add    esp,0x10
c0010c82:	85 c0                	test   eax,eax
c0010c84:	74 1d                	je     c0010ca3 <SysOpen(regs*)+0x9d>
c0010c86:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c89:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010c8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c96:	81 c4 04 01 00 00    	add    esp,0x104
c0010c9c:	31 c0                	xor    eax,eax
c0010c9e:	31 d2                	xor    edx,edx
c0010ca0:	5b                   	pop    ebx
c0010ca1:	5e                   	pop    esi
c0010ca2:	c3                   	ret    
c0010ca3:	83 ec 08             	sub    esp,0x8
c0010ca6:	68 29 23 02 c0       	push   0xc0022329
c0010cab:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cae:	50                   	push   eax
c0010caf:	e8 0a ff ff ff       	call   c0010bbe <string_ends_with(char const*, char const*)>
c0010cb4:	83 c4 10             	add    esp,0x10
c0010cb7:	85 c0                	test   eax,eax
c0010cb9:	75 cb                	jne    c0010c86 <SysOpen(regs*)+0x80>
c0010cbb:	83 ec 08             	sub    esp,0x8
c0010cbe:	68 25 23 02 c0       	push   0xc0022325
c0010cc3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cc6:	50                   	push   eax
c0010cc7:	e8 84 fa fe ff       	call   c0000750 <strcmp>
c0010ccc:	83 c4 10             	add    esp,0x10
c0010ccf:	85 c0                	test   eax,eax
c0010cd1:	74 b3                	je     c0010c86 <SysOpen(regs*)+0x80>
c0010cd3:	83 ec 08             	sub    esp,0x8
c0010cd6:	68 24 23 02 c0       	push   0xc0022324
c0010cdb:	56                   	push   esi
c0010cdc:	e8 dd fe ff ff       	call   c0010bbe <string_ends_with(char const*, char const*)>
c0010ce1:	83 c4 10             	add    esp,0x10
c0010ce4:	85 c0                	test   eax,eax
c0010ce6:	75 9e                	jne    c0010c86 <SysOpen(regs*)+0x80>
c0010ce8:	83 ec 08             	sub    esp,0x8
c0010ceb:	68 2e 23 02 c0       	push   0xc002232e
c0010cf0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010cf3:	50                   	push   eax
c0010cf4:	e8 c5 fe ff ff       	call   c0010bbe <string_ends_with(char const*, char const*)>
c0010cf9:	83 c4 10             	add    esp,0x10
c0010cfc:	85 c0                	test   eax,eax
c0010cfe:	0f 85 eb 00 00 00    	jne    c0010def <SysOpen(regs*)+0x1e9>
c0010d04:	83 ec 08             	sub    esp,0x8
c0010d07:	68 33 23 02 c0       	push   0xc0022333
c0010d0c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010d0f:	50                   	push   eax
c0010d10:	e8 a9 fe ff ff       	call   c0010bbe <string_ends_with(char const*, char const*)>
c0010d15:	83 c4 10             	add    esp,0x10
c0010d18:	85 c0                	test   eax,eax
c0010d1a:	0f 85 cf 00 00 00    	jne    c0010def <SysOpen(regs*)+0x1e9>
c0010d20:	83 ec 08             	sub    esp,0x8
c0010d23:	68 2f 23 02 c0       	push   0xc002232f
c0010d28:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010d2b:	51                   	push   ecx
c0010d2c:	e8 1f fa fe ff       	call   c0000750 <strcmp>
c0010d31:	83 c4 10             	add    esp,0x10
c0010d34:	85 c0                	test   eax,eax
c0010d36:	0f 84 b3 00 00 00    	je     c0010def <SysOpen(regs*)+0x1e9>
c0010d3c:	83 ec 08             	sub    esp,0x8
c0010d3f:	68 2e 23 02 c0       	push   0xc002232e
c0010d44:	56                   	push   esi
c0010d45:	e8 74 fe ff ff       	call   c0010bbe <string_ends_with(char const*, char const*)>
c0010d4a:	83 c4 10             	add    esp,0x10
c0010d4d:	85 c0                	test   eax,eax
c0010d4f:	0f 85 9a 00 00 00    	jne    c0010def <SysOpen(regs*)+0x1e9>
c0010d55:	83 ec 0c             	sub    esp,0xc
c0010d58:	68 14 01 00 00       	push   0x114
c0010d5d:	e8 19 dc ff ff       	call   c000e97b <malloc>
c0010d62:	83 c4 0c             	add    esp,0xc
c0010d65:	89 c6                	mov    esi,eax
c0010d67:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d6c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d6f:	50                   	push   eax
c0010d70:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010d73:	52                   	push   edx
c0010d74:	56                   	push   esi
c0010d75:	e8 98 73 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0010d7a:	83 c4 10             	add    esp,0x10
c0010d7d:	85 f6                	test   esi,esi
c0010d7f:	74 5b                	je     c0010ddc <SysOpen(regs*)+0x1d6>
c0010d81:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d84:	0f b6 c2             	movzx  eax,dl
c0010d87:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010d8a:	89 d0                	mov    eax,edx
c0010d8c:	83 e0 01             	and    eax,0x1
c0010d8f:	f6 c2 02             	test   dl,0x2
c0010d92:	74 03                	je     c0010d97 <SysOpen(regs*)+0x191>
c0010d94:	83 c8 02             	or     eax,0x2
c0010d97:	f6 c2 04             	test   dl,0x4
c0010d9a:	74 03                	je     c0010d9f <SysOpen(regs*)+0x199>
c0010d9c:	83 c8 04             	or     eax,0x4
c0010d9f:	f6 c2 08             	test   dl,0x8
c0010da2:	74 03                	je     c0010da7 <SysOpen(regs*)+0x1a1>
c0010da4:	83 c8 0a             	or     eax,0xa
c0010da7:	80 e2 10             	and    dl,0x10
c0010daa:	74 03                	je     c0010daf <SysOpen(regs*)+0x1a9>
c0010dac:	83 c8 12             	or     eax,0x12
c0010daf:	83 ec 08             	sub    esp,0x8
c0010db2:	50                   	push   eax
c0010db3:	56                   	push   esi
c0010db4:	e8 77 73 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0010db9:	83 c4 10             	add    esp,0x10
c0010dbc:	85 c0                	test   eax,eax
c0010dbe:	75 1c                	jne    c0010ddc <SysOpen(regs*)+0x1d6>
c0010dc0:	83 ec 0c             	sub    esp,0xc
c0010dc3:	56                   	push   esi
c0010dc4:	e8 2b 0e 00 00       	call   c0011bf4 <UnixFile::getFileDescriptor()>
c0010dc9:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010dcc:	83 c4 10             	add    esp,0x10
c0010dcf:	89 02                	mov    DWORD PTR [edx],eax
c0010dd1:	c1 f8 1f             	sar    eax,0x1f
c0010dd4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0010dd7:	e9 ba fe ff ff       	jmp    c0010c96 <SysOpen(regs*)+0x90>
c0010ddc:	81 c4 04 01 00 00    	add    esp,0x104
c0010de2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010de7:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010dec:	5b                   	pop    ebx
c0010ded:	5e                   	pop    esi
c0010dee:	c3                   	ret    
c0010def:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010df2:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0010df8:	e9 92 fe ff ff       	jmp    c0010c8f <SysOpen(regs*)+0x89>

c0010dfd <KeSystemCall(regs*, void*)>:
c0010dfd:	56                   	push   esi
c0010dfe:	53                   	push   ebx
c0010dff:	50                   	push   eax
c0010e00:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e04:	8b 5e 2c             	mov    ebx,DWORD PTR [esi+0x2c]
c0010e07:	83 fb 40             	cmp    ebx,0x40
c0010e0a:	77 25                	ja     c0010e31 <KeSystemCall(regs*, void*)+0x34>
c0010e0c:	8b 04 9d 80 40 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbf80]
c0010e13:	85 c0                	test   eax,eax
c0010e15:	74 1a                	je     c0010e31 <KeSystemCall(regs*, void*)+0x34>
c0010e17:	83 ec 0c             	sub    esp,0xc
c0010e1a:	56                   	push   esi
c0010e1b:	ff d0                	call   eax
c0010e1d:	83 c4 10             	add    esp,0x10
c0010e20:	89 46 2c             	mov    DWORD PTR [esi+0x2c],eax
c0010e23:	83 fb 2f             	cmp    ebx,0x2f
c0010e26:	75 19                	jne    c0010e41 <KeSystemCall(regs*, void*)+0x44>
c0010e28:	c6 05 2d 93 02 c0 01 	mov    BYTE PTR ds:0xc002932d,0x1
c0010e2f:	eb 10                	jmp    c0010e41 <KeSystemCall(regs*, void*)+0x44>
c0010e31:	56                   	push   esi
c0010e32:	56                   	push   esi
c0010e33:	53                   	push   ebx
c0010e34:	68 38 23 02 c0       	push   0xc0022338
c0010e39:	e8 26 61 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010e3e:	83 c4 10             	add    esp,0x10
c0010e41:	59                   	pop    ecx
c0010e42:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010e47:	31 d2                	xor    edx,edx
c0010e49:	5b                   	pop    ebx
c0010e4a:	5e                   	pop    esi
c0010e4b:	c3                   	ret    

c0010e4c <VgaText::isAtty()>:
c0010e4c:	b0 01                	mov    al,0x1
c0010e4e:	c3                   	ret    
c0010e4f:	90                   	nop

c0010e50 <VgaText::~VgaText()>:
c0010e50:	83 ec 0c             	sub    esp,0xc
c0010e53:	ba 70 23 02 c0       	mov    edx,0xc0022370
c0010e58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e5c:	89 10                	mov    DWORD PTR [eax],edx
c0010e5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010e62:	83 ec 0c             	sub    esp,0xc
c0010e65:	50                   	push   eax
c0010e66:	e8 77 0f 00 00       	call   c0011de2 <UnixFile::~UnixFile()>
c0010e6b:	83 c4 10             	add    esp,0x10
c0010e6e:	90                   	nop
c0010e6f:	83 c4 0c             	add    esp,0xc
c0010e72:	c3                   	ret    
c0010e73:	90                   	nop

c0010e74 <VgaText::~VgaText()>:
c0010e74:	83 ec 0c             	sub    esp,0xc
c0010e77:	83 ec 0c             	sub    esp,0xc
c0010e7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e7e:	e8 cd ff ff ff       	call   c0010e50 <VgaText::~VgaText()>
c0010e83:	83 c4 10             	add    esp,0x10
c0010e86:	83 ec 08             	sub    esp,0x8
c0010e89:	68 84 01 00 00       	push   0x184
c0010e8e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010e92:	e8 71 b8 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0010e97:	83 c4 10             	add    esp,0x10
c0010e9a:	83 c4 0c             	add    esp,0xc
c0010e9d:	c3                   	ret    

c0010e9e <VgaText::read(unsigned long long, void*, int*)>:
c0010e9e:	83 ec 10             	sub    esp,0x10
c0010ea1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010ea5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010ea9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ead:	e8 ee 8c ff ff       	call   c0009ba0 <readKeyboard(VgaText*, char*, unsigned long)>
c0010eb2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010eb6:	89 02                	mov    DWORD PTR [edx],eax
c0010eb8:	31 c0                	xor    eax,eax
c0010eba:	83 c4 1c             	add    esp,0x1c
c0010ebd:	c3                   	ret    

c0010ebe <setTerminalScrollLock(bool)>:
c0010ebe:	c3                   	ret    

c0010ebf <doTerminalCycle()>:
c0010ebf:	c3                   	ret    

c0010ec0 <addToTerminalCycle(VgaText*)>:
c0010ec0:	c3                   	ret    

c0010ec1 <scrollTerminalScrollLock(int)>:
c0010ec1:	c3                   	ret    

c0010ec2 <VgaText::updateTitle()>:
c0010ec2:	c3                   	ret    
c0010ec3:	90                   	nop

c0010ec4 <VgaText::load()>:
c0010ec4:	c3                   	ret    
c0010ec5:	90                   	nop

c0010ec6 <VgaText::updateCursor()>:
c0010ec6:	83 ec 14             	sub    esp,0x14
c0010ec9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010ecd:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0010ed0:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0010ed3:	e8 14 87 00 00       	call   c00195ec <HalConsoleCursorUpdate(int, int)>
c0010ed8:	83 c4 1c             	add    esp,0x1c
c0010edb:	c3                   	ret    

c0010edc <VgaText::doANSI_SGR(int)>:
c0010edc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010ee0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010ee4:	85 d2                	test   edx,edx
c0010ee6:	75 0b                	jne    c0010ef3 <VgaText::doANSI_SGR(int)+0x17>
c0010ee8:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010eeb:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010eee:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010ef1:	eb 59                	jmp    c0010f4c <VgaText::doANSI_SGR(int)+0x70>
c0010ef3:	83 fa 07             	cmp    edx,0x7
c0010ef6:	75 0b                	jne    c0010f03 <VgaText::doANSI_SGR(int)+0x27>
c0010ef8:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010efb:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010efe:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010f01:	eb 49                	jmp    c0010f4c <VgaText::doANSI_SGR(int)+0x70>
c0010f03:	83 fa 1b             	cmp    edx,0x1b
c0010f06:	74 e0                	je     c0010ee8 <VgaText::doANSI_SGR(int)+0xc>
c0010f08:	8d 4a e2             	lea    ecx,[edx-0x1e]
c0010f0b:	83 f9 07             	cmp    ecx,0x7
c0010f0e:	77 09                	ja     c0010f19 <VgaText::doANSI_SGR(int)+0x3d>
c0010f10:	8b 14 8d c0 41 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbe40]
c0010f17:	eb 20                	jmp    c0010f39 <VgaText::doANSI_SGR(int)+0x5d>
c0010f19:	8d 4a d8             	lea    ecx,[edx-0x28]
c0010f1c:	83 f9 07             	cmp    ecx,0x7
c0010f1f:	77 09                	ja     c0010f2a <VgaText::doANSI_SGR(int)+0x4e>
c0010f21:	8b 14 8d c0 41 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdbe40]
c0010f28:	eb 22                	jmp    c0010f4c <VgaText::doANSI_SGR(int)+0x70>
c0010f2a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0010f2d:	83 f9 07             	cmp    ecx,0x7
c0010f30:	77 0b                	ja     c0010f3d <VgaText::doANSI_SGR(int)+0x61>
c0010f32:	8b 14 95 78 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbf88]
c0010f39:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f3c:	c3                   	ret    
c0010f3d:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010f40:	83 f9 07             	cmp    ecx,0x7
c0010f43:	77 0a                	ja     c0010f4f <VgaText::doANSI_SGR(int)+0x73>
c0010f45:	8b 14 95 50 40 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdbfb0]
c0010f4c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010f4f:	c3                   	ret    

c0010f50 <VgaText::setDefaultBgColour(VgaColour)>:
c0010f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f58:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0010f5b:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0010f5e:	c3                   	ret    
c0010f5f:	90                   	nop

c0010f60 <VgaText::setDefaultFgColour(VgaColour)>:
c0010f60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f64:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f68:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010f6b:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010f6e:	c3                   	ret    
c0010f6f:	90                   	nop

c0010f70 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010f70:	53                   	push   ebx
c0010f71:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010f75:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010f79:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f7d:	51                   	push   ecx
c0010f7e:	e8 cd ff ff ff       	call   c0010f50 <VgaText::setDefaultBgColour(VgaColour)>
c0010f83:	58                   	pop    eax
c0010f84:	5a                   	pop    edx
c0010f85:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010f89:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010f8d:	5b                   	pop    ebx
c0010f8e:	eb d0                	jmp    c0010f60 <VgaText::setDefaultFgColour(VgaColour)>

c0010f90 <VgaText::setTitleTextColour(VgaColour)>:
c0010f90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f98:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010f9b:	c3                   	ret    

c0010f9c <VgaText::setTitleColour(VgaColour)>:
c0010f9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fa0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010fa4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010fa7:	c3                   	ret    

c0010fa8 <VgaText::setTitle(char*)>:
c0010fa8:	c3                   	ret    
c0010fa9:	90                   	nop

c0010faa <VgaText::combineColours(unsigned char, unsigned char)>:
c0010faa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010fae:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010fb3:	83 e0 0f             	and    eax,0xf
c0010fb6:	c1 e2 04             	shl    edx,0x4
c0010fb9:	09 d0                	or     eax,edx
c0010fbb:	c3                   	ret    

c0010fbc <VgaText::scrollScreen()>:
c0010fbc:	55                   	push   ebp
c0010fbd:	57                   	push   edi
c0010fbe:	56                   	push   esi
c0010fbf:	be 01 00 00 00       	mov    esi,0x1
c0010fc4:	53                   	push   ebx
c0010fc5:	83 ec 0c             	sub    esp,0xc
c0010fc8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010fcc:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010fcf:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0010fd5:	31 ff                	xor    edi,edi
c0010fd7:	01 e9                	add    ecx,ebp
c0010fd9:	8a 01                	mov    al,BYTE PTR [ecx]
c0010fdb:	83 fe 18             	cmp    esi,0x18
c0010fde:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0010fe4:	75 20                	jne    c0011006 <VgaText::scrollScreen()+0x4a>
c0010fe6:	f7 c7 01 00 00 00    	test   edi,0x1
c0010fec:	74 15                	je     c0011003 <VgaText::scrollScreen()+0x47>
c0010fee:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010ff2:	50                   	push   eax
c0010ff3:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0010ff7:	50                   	push   eax
c0010ff8:	e8 ad ff ff ff       	call   c0010faa <VgaText::combineColours(unsigned char, unsigned char)>
c0010ffd:	5a                   	pop    edx
c0010ffe:	5a                   	pop    edx
c0010fff:	88 01                	mov    BYTE PTR [ecx],al
c0011001:	eb 03                	jmp    c0011006 <VgaText::scrollScreen()+0x4a>
c0011003:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c0011006:	47                   	inc    edi
c0011007:	41                   	inc    ecx
c0011008:	81 ff a0 00 00 00    	cmp    edi,0xa0
c001100e:	75 c9                	jne    c0010fd9 <VgaText::scrollScreen()+0x1d>
c0011010:	46                   	inc    esi
c0011011:	83 fe 19             	cmp    esi,0x19
c0011014:	75 b9                	jne    c0010fcf <VgaText::scrollScreen()+0x13>
c0011016:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c001101c:	75 1f                	jne    c001103d <VgaText::scrollScreen()+0x81>
c001101e:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0011022:	74 05                	je     c0011029 <VgaText::scrollScreen()+0x6d>
c0011024:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0011027:	eb 14                	jmp    c001103d <VgaText::scrollScreen()+0x81>
c0011029:	50                   	push   eax
c001102a:	50                   	push   eax
c001102b:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001102f:	50                   	push   eax
c0011030:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011034:	50                   	push   eax
c0011035:	e8 46 84 00 00       	call   c0019480 <HalConsoleScroll(int, int)>
c001103a:	83 c4 10             	add    esp,0x10
c001103d:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0011041:	83 c4 0c             	add    esp,0xc
c0011044:	5b                   	pop    ebx
c0011045:	5e                   	pop    esi
c0011046:	5f                   	pop    edi
c0011047:	5d                   	pop    ebp
c0011048:	e9 79 fe ff ff       	jmp    c0010ec6 <VgaText::updateCursor()>
c001104d:	90                   	nop

c001104e <VgaText::combineCharAndColour(char, unsigned char)>:
c001104e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0011053:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0011058:	c1 e0 08             	shl    eax,0x8
c001105b:	09 d0                	or     eax,edx
c001105d:	c3                   	ret    

c001105e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001105e:	55                   	push   ebp
c001105f:	57                   	push   edi
c0011060:	56                   	push   esi
c0011061:	53                   	push   ebx
c0011062:	83 ec 1c             	sub    esp,0x1c
c0011065:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0011069:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001106d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0011071:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011075:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0011079:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001107d:	0f b6 c3             	movzx  eax,bl
c0011080:	50                   	push   eax
c0011081:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0011086:	50                   	push   eax
c0011087:	e8 1e ff ff ff       	call   c0010faa <VgaText::combineColours(unsigned char, unsigned char)>
c001108c:	5a                   	pop    edx
c001108d:	0f b6 c0             	movzx  eax,al
c0011090:	59                   	pop    ecx
c0011091:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0011096:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001109a:	50                   	push   eax
c001109b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001109f:	e8 aa ff ff ff       	call   c001104e <VgaText::combineCharAndColour(char, unsigned char)>
c00110a4:	5a                   	pop    edx
c00110a5:	6b d7 50             	imul   edx,edi,0x50
c00110a8:	59                   	pop    ecx
c00110a9:	01 f2                	add    edx,esi
c00110ab:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00110ae:	0f b7 d2             	movzx  edx,dx
c00110b1:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00110b5:	39 2d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebp
c00110bb:	75 28                	jne    c00110e5 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c00110bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00110c1:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00110c5:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00110c9:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00110cd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00110d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00110d5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00110d9:	83 c4 1c             	add    esp,0x1c
c00110dc:	5b                   	pop    ebx
c00110dd:	5e                   	pop    esi
c00110de:	5f                   	pop    edi
c00110df:	5d                   	pop    ebp
c00110e0:	e9 a3 84 00 00       	jmp    c0019588 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00110e5:	83 c4 1c             	add    esp,0x1c
c00110e8:	5b                   	pop    ebx
c00110e9:	5e                   	pop    esi
c00110ea:	5f                   	pop    edi
c00110eb:	5d                   	pop    ebp
c00110ec:	c3                   	ret    
c00110ed:	90                   	nop

c00110ee <VgaText::getCursorX()>:
c00110ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110f2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00110f5:	c3                   	ret    

c00110f6 <VgaText::getCursorY()>:
c00110f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00110fa:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00110fd:	c3                   	ret    

c00110fe <VgaText::setCursor(int, int)>:
c00110fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011102:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011106:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011109:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001110d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011110:	e9 b1 fd ff ff       	jmp    c0010ec6 <VgaText::updateCursor()>

c0011115 <setActiveTerminal(VgaText*)>:
c0011115:	53                   	push   ebx
c0011116:	83 ec 08             	sub    esp,0x8
c0011119:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001111d:	85 db                	test   ebx,ebx
c001111f:	75 11                	jne    c0011132 <setActiveTerminal(VgaText*)+0x1d>
c0011121:	c7 44 24 10 4c 23 02 c0 	mov    DWORD PTR [esp+0x10],0xc002234c
c0011129:	83 c4 08             	add    esp,0x8
c001112c:	5b                   	pop    ebx
c001112d:	e9 a0 db ff ff       	jmp    c000ecd2 <KePanic(char const*)>
c0011132:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c0011137:	85 c0                	test   eax,eax
c0011139:	74 0c                	je     c0011147 <setActiveTerminal(VgaText*)+0x32>
c001113b:	83 ec 0c             	sub    esp,0xc
c001113e:	50                   	push   eax
c001113f:	e8 82 fd ff ff       	call   c0010ec6 <VgaText::updateCursor()>
c0011144:	83 c4 10             	add    esp,0x10
c0011147:	89 1d 34 be 02 c0    	mov    DWORD PTR ds:0xc002be34,ebx
c001114d:	50                   	push   eax
c001114e:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011151:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011154:	53                   	push   ebx
c0011155:	e8 a4 ff ff ff       	call   c00110fe <VgaText::setCursor(int, int)>
c001115a:	83 c4 18             	add    esp,0x18
c001115d:	5b                   	pop    ebx
c001115e:	c3                   	ret    
c001115f:	90                   	nop

c0011160 <VgaText::clearScreen()>:
c0011160:	57                   	push   edi
c0011161:	56                   	push   esi
c0011162:	31 f6                	xor    esi,esi
c0011164:	53                   	push   ebx
c0011165:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011169:	52                   	push   edx
c001116a:	6a 00                	push   0x0
c001116c:	6a 00                	push   0x0
c001116e:	53                   	push   ebx
c001116f:	e8 8a ff ff ff       	call   c00110fe <VgaText::setCursor(int, int)>
c0011174:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c001117b:	83 c4 10             	add    esp,0x10
c001117e:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0011181:	7e 20                	jle    c00111a3 <VgaText::clearScreen()+0x43>
c0011183:	31 ff                	xor    edi,edi
c0011185:	50                   	push   eax
c0011186:	50                   	push   eax
c0011187:	56                   	push   esi
c0011188:	57                   	push   edi
c0011189:	47                   	inc    edi
c001118a:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001118d:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011190:	6a 20                	push   0x20
c0011192:	53                   	push   ebx
c0011193:	e8 c6 fe ff ff       	call   c001105e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011198:	83 c4 20             	add    esp,0x20
c001119b:	83 ff 50             	cmp    edi,0x50
c001119e:	75 e5                	jne    c0011185 <VgaText::clearScreen()+0x25>
c00111a0:	46                   	inc    esi
c00111a1:	eb db                	jmp    c001117e <VgaText::clearScreen()+0x1e>
c00111a3:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00111aa:	5b                   	pop    ebx
c00111ab:	5e                   	pop    esi
c00111ac:	5f                   	pop    edi
c00111ad:	c3                   	ret    

c00111ae <VgaText::setCursorX(int)>:
c00111ae:	83 ec 10             	sub    esp,0x10
c00111b1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111b5:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00111b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111bc:	50                   	push   eax
c00111bd:	e8 3c ff ff ff       	call   c00110fe <VgaText::setCursor(int, int)>
c00111c2:	83 c4 1c             	add    esp,0x1c
c00111c5:	c3                   	ret    

c00111c6 <VgaText::setCursorY(int)>:
c00111c6:	83 ec 10             	sub    esp,0x10
c00111c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00111cd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00111d1:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00111d4:	50                   	push   eax
c00111d5:	e8 24 ff ff ff       	call   c00110fe <VgaText::setCursor(int, int)>
c00111da:	83 c4 1c             	add    esp,0x1c
c00111dd:	c3                   	ret    

c00111de <VgaText::incrementCursor(bool)>:
c00111de:	56                   	push   esi
c00111df:	53                   	push   ebx
c00111e0:	51                   	push   ecx
c00111e1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00111e5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00111e9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00111ec:	40                   	inc    eax
c00111ed:	83 f8 50             	cmp    eax,0x50
c00111f0:	74 05                	je     c00111f7 <VgaText::incrementCursor(bool)+0x19>
c00111f2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00111f5:	eb 24                	jmp    c001121b <VgaText::incrementCursor(bool)+0x3d>
c00111f7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00111fa:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011201:	8d 50 01             	lea    edx,[eax+0x1]
c0011204:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011207:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c001120a:	75 0f                	jne    c001121b <VgaText::incrementCursor(bool)+0x3d>
c001120c:	83 ec 0c             	sub    esp,0xc
c001120f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011212:	53                   	push   ebx
c0011213:	e8 a4 fd ff ff       	call   c0010fbc <VgaText::scrollScreen()>
c0011218:	83 c4 10             	add    esp,0x10
c001121b:	89 f0                	mov    eax,esi
c001121d:	84 c0                	test   al,al
c001121f:	74 0c                	je     c001122d <VgaText::incrementCursor(bool)+0x4f>
c0011221:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011225:	5a                   	pop    edx
c0011226:	5b                   	pop    ebx
c0011227:	5e                   	pop    esi
c0011228:	e9 99 fc ff ff       	jmp    c0010ec6 <VgaText::updateCursor()>
c001122d:	58                   	pop    eax
c001122e:	5b                   	pop    ebx
c001122f:	5e                   	pop    esi
c0011230:	c3                   	ret    
c0011231:	90                   	nop

c0011232 <VgaText::decrementCursor(bool)>:
c0011232:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011236:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001123a:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001123d:	85 c0                	test   eax,eax
c001123f:	74 04                	je     c0011245 <VgaText::decrementCursor(bool)+0x13>
c0011241:	48                   	dec    eax
c0011242:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011245:	84 c9                	test   cl,cl
c0011247:	74 09                	je     c0011252 <VgaText::decrementCursor(bool)+0x20>
c0011249:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001124d:	e9 74 fc ff ff       	jmp    c0010ec6 <VgaText::updateCursor()>
c0011252:	c3                   	ret    
c0011253:	90                   	nop

c0011254 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011254:	53                   	push   ebx
c0011255:	83 ec 08             	sub    esp,0x8
c0011258:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c001125d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011261:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011265:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011269:	83 f8 07             	cmp    eax,0x7
c001126c:	75 21                	jne    c001128f <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c001126e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011276:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c001127e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0011286:	83 c4 08             	add    esp,0x8
c0011289:	5b                   	pop    ebx
c001128a:	e9 20 77 ff ff       	jmp    c00089af <KeBeep(int, int, bool)>
c001128f:	83 f8 0d             	cmp    eax,0xd
c0011292:	75 09                	jne    c001129d <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0011294:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001129b:	eb 2d                	jmp    c00112ca <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c001129d:	83 f8 0a             	cmp    eax,0xa
c00112a0:	75 31                	jne    c00112d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00112a2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00112a5:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00112ac:	8d 50 01             	lea    edx,[eax+0x1]
c00112af:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00112b2:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00112b5:	75 0f                	jne    c00112c6 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00112b7:	83 ec 0c             	sub    esp,0xc
c00112ba:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00112bd:	53                   	push   ebx
c00112be:	e8 f9 fc ff ff       	call   c0010fbc <VgaText::scrollScreen()>
c00112c3:	83 c4 10             	add    esp,0x10
c00112c6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00112ca:	83 c4 08             	add    esp,0x8
c00112cd:	5b                   	pop    ebx
c00112ce:	e9 f3 fb ff ff       	jmp    c0010ec6 <VgaText::updateCursor()>
c00112d3:	83 f8 08             	cmp    eax,0x8
c00112d6:	75 25                	jne    c00112fd <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00112d8:	50                   	push   eax
c00112d9:	50                   	push   eax
c00112da:	6a 01                	push   0x1
c00112dc:	53                   	push   ebx
c00112dd:	e8 50 ff ff ff       	call   c0011232 <VgaText::decrementCursor(bool)>
c00112e2:	5a                   	pop    edx
c00112e3:	59                   	pop    ecx
c00112e4:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00112e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00112ea:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00112ed:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00112f0:	6a 20                	push   0x20
c00112f2:	53                   	push   ebx
c00112f3:	e8 66 fd ff ff       	call   c001105e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00112f8:	83 c4 28             	add    esp,0x28
c00112fb:	5b                   	pop    ebx
c00112fc:	c3                   	ret    
c00112fd:	83 ec 08             	sub    esp,0x8
c0011300:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011303:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011306:	51                   	push   ecx
c0011307:	52                   	push   edx
c0011308:	50                   	push   eax
c0011309:	53                   	push   ebx
c001130a:	e8 4f fd ff ff       	call   c001105e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c001130f:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011313:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c001131b:	83 c4 28             	add    esp,0x28
c001131e:	5b                   	pop    ebx
c001131f:	e9 ba fe ff ff       	jmp    c00111de <VgaText::incrementCursor(bool)>

c0011324 <VgaText::putchar(char)>:
c0011324:	57                   	push   edi
c0011325:	56                   	push   esi
c0011326:	53                   	push   ebx
c0011327:	83 ec 10             	sub    esp,0x10
c001132a:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001132e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011332:	89 f8                	mov    eax,edi
c0011334:	0f be c0             	movsx  eax,al
c0011337:	83 f8 5b             	cmp    eax,0x5b
c001133a:	75 18                	jne    c0011354 <VgaText::putchar(char)+0x30>
c001133c:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0011340:	74 20                	je     c0011362 <VgaText::putchar(char)+0x3e>
c0011342:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0011348:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c001134f:	e9 c1 00 00 00       	jmp    c0011415 <VgaText::putchar(char)+0xf1>
c0011354:	83 f8 1b             	cmp    eax,0x1b
c0011357:	75 09                	jne    c0011362 <VgaText::putchar(char)+0x3e>
c0011359:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c001135d:	e9 b3 00 00 00       	jmp    c0011415 <VgaText::putchar(char)+0xf1>
c0011362:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0011365:	84 c9                	test   cl,cl
c0011367:	0f 84 98 00 00 00    	je     c0011405 <VgaText::putchar(char)+0xe1>
c001136d:	8d 77 c0             	lea    esi,[edi-0x40]
c0011370:	89 f2                	mov    edx,esi
c0011372:	80 fa 3e             	cmp    dl,0x3e
c0011375:	77 78                	ja     c00113ef <VgaText::putchar(char)+0xcb>
c0011377:	83 f8 6d             	cmp    eax,0x6d
c001137a:	75 47                	jne    c00113c3 <VgaText::putchar(char)+0x9f>
c001137c:	31 f6                	xor    esi,esi
c001137e:	31 d2                	xor    edx,edx
c0011380:	31 c0                	xor    eax,eax
c0011382:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0011385:	7e 2d                	jle    c00113b4 <VgaText::putchar(char)+0x90>
c0011387:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c001138c:	83 fa 3b             	cmp    edx,0x3b
c001138f:	75 17                	jne    c00113a8 <VgaText::putchar(char)+0x84>
c0011391:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011395:	50                   	push   eax
c0011396:	53                   	push   ebx
c0011397:	e8 40 fb ff ff       	call   c0010edc <VgaText::doANSI_SGR(int)>
c001139c:	59                   	pop    ecx
c001139d:	31 d2                	xor    edx,edx
c001139f:	5f                   	pop    edi
c00113a0:	31 c0                	xor    eax,eax
c00113a2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00113a6:	eb 09                	jmp    c00113b1 <VgaText::putchar(char)+0x8d>
c00113a8:	6b c0 0a             	imul   eax,eax,0xa
c00113ab:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00113af:	88 ca                	mov    dl,cl
c00113b1:	46                   	inc    esi
c00113b2:	eb ce                	jmp    c0011382 <VgaText::putchar(char)+0x5e>
c00113b4:	84 d2                	test   dl,dl
c00113b6:	74 2f                	je     c00113e7 <VgaText::putchar(char)+0xc3>
c00113b8:	50                   	push   eax
c00113b9:	53                   	push   ebx
c00113ba:	e8 1d fb ff ff       	call   c0010edc <VgaText::doANSI_SGR(int)>
c00113bf:	58                   	pop    eax
c00113c0:	5a                   	pop    edx
c00113c1:	eb 24                	jmp    c00113e7 <VgaText::putchar(char)+0xc3>
c00113c3:	83 f8 4a             	cmp    eax,0x4a
c00113c6:	75 1f                	jne    c00113e7 <VgaText::putchar(char)+0xc3>
c00113c8:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00113cc:	75 19                	jne    c00113e7 <VgaText::putchar(char)+0xc3>
c00113ce:	83 ec 0c             	sub    esp,0xc
c00113d1:	53                   	push   ebx
c00113d2:	e8 89 fd ff ff       	call   c0011160 <VgaText::clearScreen()>
c00113d7:	83 c4 0c             	add    esp,0xc
c00113da:	6a 00                	push   0x0
c00113dc:	6a 00                	push   0x0
c00113de:	53                   	push   ebx
c00113df:	e8 1a fd ff ff       	call   c00110fe <VgaText::setCursor(int, int)>
c00113e4:	83 c4 10             	add    esp,0x10
c00113e7:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00113ed:	eb 26                	jmp    c0011415 <VgaText::putchar(char)+0xf1>
c00113ef:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00113f2:	83 f8 0e             	cmp    eax,0xe
c00113f5:	7f 1e                	jg     c0011415 <VgaText::putchar(char)+0xf1>
c00113f7:	8d 48 01             	lea    ecx,[eax+0x1]
c00113fa:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00113fd:	89 f9                	mov    ecx,edi
c00113ff:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0011403:	eb 10                	jmp    c0011415 <VgaText::putchar(char)+0xf1>
c0011405:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011408:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001140b:	50                   	push   eax
c001140c:	53                   	push   ebx
c001140d:	e8 42 fe ff ff       	call   c0011254 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011412:	83 c4 10             	add    esp,0x10
c0011415:	83 c4 10             	add    esp,0x10
c0011418:	5b                   	pop    ebx
c0011419:	5e                   	pop    esi
c001141a:	5f                   	pop    edi
c001141b:	c3                   	ret    

c001141c <VgaText::putx(unsigned int)>:
c001141c:	57                   	push   edi
c001141d:	b9 11 00 00 00       	mov    ecx,0x11
c0011422:	56                   	push   esi
c0011423:	be 6f 0e 02 c0       	mov    esi,0xc0020e6f
c0011428:	53                   	push   ebx
c0011429:	83 ec 20             	sub    esp,0x20
c001142c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011430:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011434:	fc                   	cld    
c0011435:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011437:	be 08 00 00 00       	mov    esi,0x8
c001143c:	50                   	push   eax
c001143d:	50                   	push   eax
c001143e:	89 d8                	mov    eax,ebx
c0011440:	c1 e3 04             	shl    ebx,0x4
c0011443:	c1 e8 1c             	shr    eax,0x1c
c0011446:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001144b:	50                   	push   eax
c001144c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011450:	e8 cf fe ff ff       	call   c0011324 <VgaText::putchar(char)>
c0011455:	83 c4 10             	add    esp,0x10
c0011458:	4e                   	dec    esi
c0011459:	75 e1                	jne    c001143c <VgaText::putx(unsigned int)+0x20>
c001145b:	83 c4 20             	add    esp,0x20
c001145e:	5b                   	pop    ebx
c001145f:	5e                   	pop    esi
c0011460:	5f                   	pop    edi
c0011461:	c3                   	ret    

c0011462 <VgaText::puts(char const*)>:
c0011462:	53                   	push   ebx
c0011463:	83 ec 08             	sub    esp,0x8
c0011466:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001146a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001146d:	85 c0                	test   eax,eax
c001146f:	74 12                	je     c0011483 <VgaText::puts(char const*)+0x21>
c0011471:	43                   	inc    ebx
c0011472:	51                   	push   ecx
c0011473:	51                   	push   ecx
c0011474:	50                   	push   eax
c0011475:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011479:	e8 a6 fe ff ff       	call   c0011324 <VgaText::putchar(char)>
c001147e:	83 c4 10             	add    esp,0x10
c0011481:	eb e7                	jmp    c001146a <VgaText::puts(char const*)+0x8>
c0011483:	83 c4 08             	add    esp,0x8
c0011486:	5b                   	pop    ebx
c0011487:	c3                   	ret    

c0011488 <VgaText::write(unsigned long long, void*, int*)>:
c0011488:	55                   	push   ebp
c0011489:	57                   	push   edi
c001148a:	56                   	push   esi
c001148b:	53                   	push   ebx
c001148c:	83 ec 0c             	sub    esp,0xc
c001148f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011493:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011497:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001149b:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c00114a2:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c00114a5:	39 eb                	cmp    ebx,ebp
c00114a7:	74 13                	je     c00114bc <VgaText::write(unsigned long long, void*, int*)+0x34>
c00114a9:	43                   	inc    ebx
c00114aa:	50                   	push   eax
c00114ab:	50                   	push   eax
c00114ac:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00114b0:	50                   	push   eax
c00114b1:	56                   	push   esi
c00114b2:	e8 6d fe ff ff       	call   c0011324 <VgaText::putchar(char)>
c00114b7:	83 c4 10             	add    esp,0x10
c00114ba:	eb e9                	jmp    c00114a5 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00114bc:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00114c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00114c7:	89 38                	mov    DWORD PTR [eax],edi
c00114c9:	83 c4 0c             	add    esp,0xc
c00114cc:	31 c0                	xor    eax,eax
c00114ce:	5b                   	pop    ebx
c00114cf:	5e                   	pop    esi
c00114d0:	5f                   	pop    edi
c00114d1:	5d                   	pop    ebp
c00114d2:	c3                   	ret    
c00114d3:	90                   	nop

c00114d4 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00114d4:	55                   	push   ebp
c00114d5:	57                   	push   edi
c00114d6:	56                   	push   esi
c00114d7:	53                   	push   ebx
c00114d8:	83 ec 0c             	sub    esp,0xc
c00114db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00114e4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00114eb:	50                   	push   eax
c00114ec:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00114f1:	50                   	push   eax
c00114f2:	e8 b3 fa ff ff       	call   c0010faa <VgaText::combineColours(unsigned char, unsigned char)>
c00114f7:	5a                   	pop    edx
c00114f8:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00114fc:	59                   	pop    ecx
c00114fd:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0011500:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011504:	0f b7 f6             	movzx  esi,si
c0011507:	0f b6 e8             	movzx  ebp,al
c001150a:	01 f6                	add    esi,esi
c001150c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001150f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0011512:	85 c0                	test   eax,eax
c0011514:	0f 84 ef 00 00 00    	je     c0011609 <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c001151a:	83 f8 0d             	cmp    eax,0xd
c001151d:	75 0c                	jne    c001152b <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c001151f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011526:	e9 d8 00 00 00       	jmp    c0011603 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c001152b:	83 f8 0a             	cmp    eax,0xa
c001152e:	75 44                	jne    c0011574 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0011530:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011533:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c001153a:	8d 48 01             	lea    ecx,[eax+0x1]
c001153d:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0011540:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0011543:	75 0f                	jne    c0011554 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0011545:	83 ec 0c             	sub    esp,0xc
c0011548:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001154b:	53                   	push   ebx
c001154c:	e8 6b fa ff ff       	call   c0010fbc <VgaText::scrollScreen()>
c0011551:	83 c4 10             	add    esp,0x10
c0011554:	83 ec 0c             	sub    esp,0xc
c0011557:	53                   	push   ebx
c0011558:	e8 69 f9 ff ff       	call   c0010ec6 <VgaText::updateCursor()>
c001155d:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0011561:	83 c4 10             	add    esp,0x10
c0011564:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0011567:	0f b7 f6             	movzx  esi,si
c001156a:	01 f6                	add    esi,esi
c001156c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001156f:	e9 8f 00 00 00       	jmp    c0011603 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0011574:	83 f8 08             	cmp    eax,0x8
c0011577:	75 34                	jne    c00115ad <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0011579:	51                   	push   ecx
c001157a:	51                   	push   ecx
c001157b:	6a 01                	push   0x1
c001157d:	53                   	push   ebx
c001157e:	e8 af fc ff ff       	call   c0011232 <VgaText::decrementCursor(bool)>
c0011583:	5e                   	pop    esi
c0011584:	58                   	pop    eax
c0011585:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011588:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001158b:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001158e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011591:	6a 20                	push   0x20
c0011593:	53                   	push   ebx
c0011594:	e8 c5 fa ff ff       	call   c001105e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011599:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c001159d:	83 c4 20             	add    esp,0x20
c00115a0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00115a3:	0f b7 f6             	movzx  esi,si
c00115a6:	01 f6                	add    esi,esi
c00115a8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00115ab:	eb 56                	jmp    c0011603 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00115ad:	52                   	push   edx
c00115ae:	52                   	push   edx
c00115af:	55                   	push   ebp
c00115b0:	50                   	push   eax
c00115b1:	e8 98 fa ff ff       	call   c001104e <VgaText::combineCharAndColour(char, unsigned char)>
c00115b6:	83 c4 10             	add    esp,0x10
c00115b9:	66 89 06             	mov    WORD PTR [esi],ax
c00115bc:	39 1d 34 be 02 c0    	cmp    DWORD PTR ds:0xc002be34,ebx
c00115c2:	75 1d                	jne    c00115e1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c00115c4:	83 ec 0c             	sub    esp,0xc
c00115c7:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00115ca:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00115cd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00115d1:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00115d5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00115d8:	50                   	push   eax
c00115d9:	e8 aa 7f 00 00       	call   c0019588 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00115de:	83 c4 20             	add    esp,0x20
c00115e1:	83 c6 02             	add    esi,0x2
c00115e4:	50                   	push   eax
c00115e5:	50                   	push   eax
c00115e6:	6a 00                	push   0x0
c00115e8:	53                   	push   ebx
c00115e9:	e8 f0 fb ff ff       	call   c00111de <VgaText::incrementCursor(bool)>
c00115ee:	83 c4 10             	add    esp,0x10
c00115f1:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00115f5:	75 0c                	jne    c0011603 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c00115f7:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c00115fb:	0f b7 f6             	movzx  esi,si
c00115fe:	01 f6                	add    esi,esi
c0011600:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0011603:	47                   	inc    edi
c0011604:	e9 06 ff ff ff       	jmp    c001150f <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0011609:	83 ec 0c             	sub    esp,0xc
c001160c:	53                   	push   ebx
c001160d:	e8 b4 f8 ff ff       	call   c0010ec6 <VgaText::updateCursor()>
c0011612:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0011619:	83 c4 1c             	add    esp,0x1c
c001161c:	5b                   	pop    ebx
c001161d:	5e                   	pop    esi
c001161e:	5f                   	pop    edi
c001161f:	5d                   	pop    ebp
c0011620:	c3                   	ret    
c0011621:	90                   	nop

c0011622 <VgaText::VgaText(char const*)>:
c0011622:	56                   	push   esi
c0011623:	53                   	push   ebx
c0011624:	83 ec 04             	sub    esp,0x4
c0011627:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001162b:	83 ec 08             	sub    esp,0x8
c001162e:	6a 00                	push   0x0
c0011630:	50                   	push   eax
c0011631:	e8 c6 05 00 00       	call   c0011bfc <UnixFile::UnixFile(int)>
c0011636:	83 c4 10             	add    esp,0x10
c0011639:	ba 70 23 02 c0       	mov    edx,0xc0022370
c001163e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011642:	89 10                	mov    DWORD PTR [eax],edx
c0011644:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011648:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001164f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011653:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c001165a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001165e:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0011662:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011666:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c001166a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001166e:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0011675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011679:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0011680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011684:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c001168b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001168f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0011696:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001169a:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00116a1:	83 ec 0c             	sub    esp,0xc
c00116a4:	6a 01                	push   0x1
c00116a6:	e8 a0 09 00 00       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c00116ab:	83 c4 10             	add    esp,0x10
c00116ae:	89 c2                	mov    edx,eax
c00116b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116b4:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00116b7:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c00116bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116c1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116c4:	89 c6                	mov    esi,eax
c00116c6:	e8 fb d7 ff ff       	call   c000eec6 <Phys::allocatePage()>
c00116cb:	68 05 0c 00 00       	push   0xc05
c00116d0:	56                   	push   esi
c00116d1:	50                   	push   eax
c00116d2:	53                   	push   ebx
c00116d3:	e8 5c 10 00 00       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c00116d8:	83 c4 10             	add    esp,0x10
c00116db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116df:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00116e2:	83 ec 04             	sub    esp,0x4
c00116e5:	68 a0 0f 00 00       	push   0xfa0
c00116ea:	6a 00                	push   0x0
c00116ec:	50                   	push   eax
c00116ed:	e8 fe ed fe ff       	call   c00004f0 <memset>
c00116f2:	83 c4 10             	add    esp,0x10
c00116f5:	83 ec 04             	sub    esp,0x4
c00116f8:	6a 00                	push   0x0
c00116fa:	6a 07                	push   0x7
c00116fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011700:	e8 6b f8 ff ff       	call   c0010f70 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011705:	83 c4 10             	add    esp,0x10
c0011708:	83 ec 04             	sub    esp,0x4
c001170b:	6a 00                	push   0x0
c001170d:	6a 00                	push   0x0
c001170f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011713:	e8 e6 f9 ff ff       	call   c00110fe <VgaText::setCursor(int, int)>
c0011718:	83 c4 10             	add    esp,0x10
c001171b:	83 ec 0c             	sub    esp,0xc
c001171e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011722:	e8 39 fa ff ff       	call   c0011160 <VgaText::clearScreen()>
c0011727:	83 c4 10             	add    esp,0x10
c001172a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001172e:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0011732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011736:	05 82 00 00 00       	add    eax,0x82
c001173b:	83 ec 04             	sub    esp,0x4
c001173e:	68 80 00 00 00       	push   0x80
c0011743:	6a 00                	push   0x0
c0011745:	50                   	push   eax
c0011746:	e8 a5 ed fe ff       	call   c00004f0 <memset>
c001174b:	83 c4 10             	add    esp,0x10
c001174e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011752:	05 02 01 00 00       	add    eax,0x102
c0011757:	83 ec 04             	sub    esp,0x4
c001175a:	68 80 00 00 00       	push   0x80
c001175f:	6a 00                	push   0x0
c0011761:	50                   	push   eax
c0011762:	e8 89 ed fe ff       	call   c00004f0 <memset>
c0011767:	83 c4 10             	add    esp,0x10
c001176a:	90                   	nop
c001176b:	83 c4 04             	add    esp,0x4
c001176e:	5b                   	pop    ebx
c001176f:	5e                   	pop    esi
c0011770:	c3                   	ret    
c0011771:	90                   	nop

c0011772 <VgaText::receiveKey(unsigned char)>:
c0011772:	55                   	push   ebp
c0011773:	57                   	push   edi
c0011774:	56                   	push   esi
c0011775:	53                   	push   ebx
c0011776:	83 ec 2c             	sub    esp,0x2c
c0011779:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001177d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011781:	89 ef                	mov    edi,ebp
c0011783:	81 e7 ff 00 00 00    	and    edi,0xff
c0011789:	0f 84 66 01 00 00    	je     c00118f5 <VgaText::receiveKey(unsigned char)+0x183>
c001178f:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0011795:	83 ff 08             	cmp    edi,0x8
c0011798:	75 73                	jne    c001180d <VgaText::receiveKey(unsigned char)+0x9b>
c001179a:	83 ec 0c             	sub    esp,0xc
c001179d:	56                   	push   esi
c001179e:	e8 cd ed fe ff       	call   c0000570 <strlen>
c00117a3:	83 c4 10             	add    esp,0x10
c00117a6:	85 c0                	test   eax,eax
c00117a8:	0f 84 02 01 00 00    	je     c00118b0 <VgaText::receiveKey(unsigned char)+0x13e>
c00117ae:	50                   	push   eax
c00117af:	50                   	push   eax
c00117b0:	6a 08                	push   0x8
c00117b2:	53                   	push   ebx
c00117b3:	e8 6c fb ff ff       	call   c0011324 <VgaText::putchar(char)>
c00117b8:	89 34 24             	mov    DWORD PTR [esp],esi
c00117bb:	e8 b0 ed fe ff       	call   c0000570 <strlen>
c00117c0:	83 c4 10             	add    esp,0x10
c00117c3:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00117cb:	83 fa 0d             	cmp    edx,0xd
c00117ce:	89 d0                	mov    eax,edx
c00117d0:	0f 95 c1             	setne  cl
c00117d3:	83 fa 1f             	cmp    edx,0x1f
c00117d6:	0f 9e c2             	setle  dl
c00117d9:	0f b6 d2             	movzx  edx,dl
c00117dc:	85 ca                	test   edx,ecx
c00117de:	74 17                	je     c00117f7 <VgaText::receiveKey(unsigned char)+0x85>
c00117e0:	83 e8 08             	sub    eax,0x8
c00117e3:	3c 02                	cmp    al,0x2
c00117e5:	76 10                	jbe    c00117f7 <VgaText::receiveKey(unsigned char)+0x85>
c00117e7:	55                   	push   ebp
c00117e8:	55                   	push   ebp
c00117e9:	68 5a 23 02 c0       	push   0xc002235a
c00117ee:	53                   	push   ebx
c00117ef:	e8 6e fc ff ff       	call   c0011462 <VgaText::puts(char const*)>
c00117f4:	83 c4 10             	add    esp,0x10
c00117f7:	83 ec 0c             	sub    esp,0xc
c00117fa:	56                   	push   esi
c00117fb:	e8 70 ed fe ff       	call   c0000570 <strlen>
c0011800:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0011808:	e9 a0 00 00 00       	jmp    c00118ad <VgaText::receiveKey(unsigned char)+0x13b>
c001180d:	83 ec 0c             	sub    esp,0xc
c0011810:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0011816:	50                   	push   eax
c0011817:	e8 54 ed fe ff       	call   c0000570 <strlen>
c001181c:	89 34 24             	mov    DWORD PTR [esp],esi
c001181f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011823:	e8 48 ed fe ff       	call   c0000570 <strlen>
c0011828:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001182c:	83 c4 10             	add    esp,0x10
c001182f:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0011833:	3d 80 00 00 00       	cmp    eax,0x80
c0011838:	0f 87 b7 00 00 00    	ja     c00118f5 <VgaText::receiveKey(unsigned char)+0x183>
c001183e:	8d 45 ff             	lea    eax,[ebp-0x1]
c0011841:	8d 55 f7             	lea    edx,[ebp-0x9]
c0011844:	3c 1e                	cmp    al,0x1e
c0011846:	0f 96 c0             	setbe  al
c0011849:	80 fa 01             	cmp    dl,0x1
c001184c:	0f 97 c2             	seta   dl
c001184f:	0f b6 d2             	movzx  edx,dl
c0011852:	85 c2                	test   edx,eax
c0011854:	74 2e                	je     c0011884 <VgaText::receiveKey(unsigned char)+0x112>
c0011856:	83 ff 0d             	cmp    edi,0xd
c0011859:	74 29                	je     c0011884 <VgaText::receiveKey(unsigned char)+0x112>
c001185b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001185e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011861:	68 60 23 02 c0       	push   0xc0022360
c0011866:	53                   	push   ebx
c0011867:	e8 68 fc ff ff       	call   c00114d4 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001186c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001186f:	8d 45 40             	lea    eax,[ebp+0x40]
c0011872:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011875:	0f b6 c0             	movzx  eax,al
c0011878:	50                   	push   eax
c0011879:	53                   	push   ebx
c001187a:	e8 d5 f9 ff ff       	call   c0011254 <VgaText::putchar(char, VgaColour, VgaColour)>
c001187f:	83 c4 20             	add    esp,0x20
c0011882:	eb 11                	jmp    c0011895 <VgaText::receiveKey(unsigned char)+0x123>
c0011884:	89 e8                	mov    eax,ebp
c0011886:	51                   	push   ecx
c0011887:	0f be c0             	movsx  eax,al
c001188a:	51                   	push   ecx
c001188b:	50                   	push   eax
c001188c:	53                   	push   ebx
c001188d:	e8 92 fa ff ff       	call   c0011324 <VgaText::putchar(char)>
c0011892:	83 c4 10             	add    esp,0x10
c0011895:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001189a:	89 e8                	mov    eax,ebp
c001189c:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c00118a0:	52                   	push   edx
c00118a1:	52                   	push   edx
c00118a2:	8d 44 24 26          	lea    eax,[esp+0x26]
c00118a6:	50                   	push   eax
c00118a7:	56                   	push   esi
c00118a8:	e8 93 ef fe ff       	call   c0000840 <strcat>
c00118ad:	83 c4 10             	add    esp,0x10
c00118b0:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c00118b6:	b0 01                	mov    al,0x1
c00118b8:	83 ff 1c             	cmp    edi,0x1c
c00118bb:	77 0e                	ja     c00118cb <VgaText::receiveKey(unsigned char)+0x159>
c00118bd:	b8 08 04 00 10       	mov    eax,0x10000408
c00118c2:	89 f9                	mov    ecx,edi
c00118c4:	d3 e8                	shr    eax,cl
c00118c6:	f7 d0                	not    eax
c00118c8:	83 e0 01             	and    eax,0x1
c00118cb:	84 c0                	test   al,al
c00118cd:	74 04                	je     c00118d3 <VgaText::receiveKey(unsigned char)+0x161>
c00118cf:	84 d2                	test   dl,dl
c00118d1:	74 22                	je     c00118f5 <VgaText::receiveKey(unsigned char)+0x183>
c00118d3:	81 c3 02 01 00 00    	add    ebx,0x102
c00118d9:	50                   	push   eax
c00118da:	50                   	push   eax
c00118db:	56                   	push   esi
c00118dc:	53                   	push   ebx
c00118dd:	e8 5e ef fe ff       	call   c0000840 <strcat>
c00118e2:	83 c4 0c             	add    esp,0xc
c00118e5:	68 80 00 00 00       	push   0x80
c00118ea:	6a 00                	push   0x0
c00118ec:	56                   	push   esi
c00118ed:	e8 fe eb fe ff       	call   c00004f0 <memset>
c00118f2:	83 c4 10             	add    esp,0x10
c00118f5:	83 c4 2c             	add    esp,0x2c
c00118f8:	5b                   	pop    ebx
c00118f9:	5e                   	pop    esi
c00118fa:	5f                   	pop    edi
c00118fb:	5d                   	pop    ebp
c00118fc:	c3                   	ret    
c00118fd:	90                   	nop

c00118fe <VgaText::doUpdate()>:
c00118fe:	c3                   	ret    
c00118ff:	90                   	nop

c0011900 <TSS::TSS()>:
c0011900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011904:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001190b:	90                   	nop
c001190c:	c3                   	ret    
c001190d:	90                   	nop
c001190e:	66 90                	xchg   ax,ax

c0011910 <TSS::setESP(unsigned long)>:
c0011910:	55                   	push   ebp
c0011911:	89 e5                	mov    ebp,esp
c0011913:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011916:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011919:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001191c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001191f:	90                   	nop
c0011920:	5d                   	pop    ebp
c0011921:	c3                   	ret    
c0011922:	66 90                	xchg   ax,ax

c0011924 <TSS::flush()>:
c0011924:	55                   	push   ebp
c0011925:	89 e5                	mov    ebp,esp
c0011927:	83 ec 10             	sub    esp,0x10
c001192a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001192d:	8b 00                	mov    eax,DWORD PTR [eax]
c001192f:	83 c8 03             	or     eax,0x3
c0011932:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0011936:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c001193a:	66 89 d0             	mov    ax,dx
c001193d:	0f 00 d8             	ltr    ax
c0011940:	90                   	nop
c0011941:	c9                   	leave  
c0011942:	c3                   	ret    
c0011943:	90                   	nop

c0011944 <TSS::setup(unsigned long, unsigned long)>:
c0011944:	55                   	push   ebp
c0011945:	89 e5                	mov    ebp,esp
c0011947:	83 ec 18             	sub    esp,0x18
c001194a:	83 ec 0c             	sub    esp,0xc
c001194d:	6a 68                	push   0x68
c001194f:	e8 27 d0 ff ff       	call   c000e97b <malloc>
c0011954:	83 c4 10             	add    esp,0x10
c0011957:	89 c2                	mov    edx,eax
c0011959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001195c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001195f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011962:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011965:	83 ec 08             	sub    esp,0x8
c0011968:	50                   	push   eax
c0011969:	68 84 23 02 c0       	push   0xc0022384
c001196e:	e8 f1 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011973:	83 c4 10             	add    esp,0x10
c0011976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011979:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001197c:	83 ec 04             	sub    esp,0x4
c001197f:	6a 68                	push   0x68
c0011981:	6a 00                	push   0x0
c0011983:	50                   	push   eax
c0011984:	e8 67 eb fe ff       	call   c00004f0 <memset>
c0011989:	83 c4 10             	add    esp,0x10
c001198c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001198f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011992:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0011998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001199b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001199e:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00119a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119a7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119aa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00119ad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00119b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119b3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119b6:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00119bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119bf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119c2:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00119c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119ce:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00119d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119da:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00119e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119e6:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00119ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119ef:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119f2:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00119f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00119fb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00119fe:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011a01:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011a04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a07:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a0a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011a0d:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a13:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a16:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011a1d:	83 ec 0c             	sub    esp,0xc
c0011a20:	68 9b 23 02 c0       	push   0xc002239b
c0011a25:	e8 3a 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a2a:	83 c4 10             	add    esp,0x10
c0011a2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a33:	0f 20 da             	mov    edx,cr3
c0011a36:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011a39:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011a3c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011a3f:	83 ec 0c             	sub    esp,0xc
c0011a42:	68 9e 23 02 c0       	push   0xc002239e
c0011a47:	e8 18 55 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a4c:	83 c4 10             	add    esp,0x10
c0011a4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011a52:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011a55:	83 ec 08             	sub    esp,0x8
c0011a58:	50                   	push   eax
c0011a59:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011a5c:	50                   	push   eax
c0011a5d:	e8 74 c6 ff ff       	call   c000e0d6 <GDTEntry::setBase(unsigned int)>
c0011a62:	83 c4 10             	add    esp,0x10
c0011a65:	83 ec 08             	sub    esp,0x8
c0011a68:	6a 68                	push   0x68
c0011a6a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011a6d:	50                   	push   eax
c0011a6e:	e8 7f c6 ff ff       	call   c000e0f2 <GDTEntry::setLimit(unsigned int)>
c0011a73:	83 c4 10             	add    esp,0x10
c0011a76:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0011a7a:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011a7d:	83 e0 0f             	and    eax,0xf
c0011a80:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011a83:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0011a86:	83 c8 40             	or     eax,0x40
c0011a89:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011a8c:	83 ec 0c             	sub    esp,0xc
c0011a8f:	68 a1 23 02 c0       	push   0xc00223a1
c0011a94:	e8 cb 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011a99:	83 c4 10             	add    esp,0x10
c0011a9c:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011aa1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011aa7:	83 ec 08             	sub    esp,0x8
c0011aaa:	50                   	push   eax
c0011aab:	68 a4 23 02 c0       	push   0xc00223a4
c0011ab0:	e8 af 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011ab5:	83 c4 10             	add    esp,0x10
c0011ab8:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011abd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011ac3:	05 64 01 00 00       	add    eax,0x164
c0011ac8:	83 ec 04             	sub    esp,0x4
c0011acb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011ace:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0011ad1:	50                   	push   eax
c0011ad2:	e8 4f c6 ff ff       	call   c000e126 <GDT::addEntry(GDTEntry)>
c0011ad7:	83 c4 10             	add    esp,0x10
c0011ada:	89 c2                	mov    edx,eax
c0011adc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011adf:	89 10                	mov    DWORD PTR [eax],edx
c0011ae1:	83 ec 0c             	sub    esp,0xc
c0011ae4:	68 b9 23 02 c0       	push   0xc00223b9
c0011ae9:	e8 76 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011aee:	83 c4 10             	add    esp,0x10
c0011af1:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0011af6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011afc:	05 64 01 00 00       	add    eax,0x164
c0011b01:	83 ec 0c             	sub    esp,0xc
c0011b04:	50                   	push   eax
c0011b05:	e8 46 c6 ff ff       	call   c000e150 <GDT::flush()>
c0011b0a:	83 c4 10             	add    esp,0x10
c0011b0d:	83 ec 0c             	sub    esp,0xc
c0011b10:	68 bc 23 02 c0       	push   0xc00223bc
c0011b15:	e8 4a 54 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011b1a:	83 c4 10             	add    esp,0x10
c0011b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011b20:	8b 00                	mov    eax,DWORD PTR [eax]
c0011b22:	c9                   	leave  
c0011b23:	c3                   	ret    

c0011b24 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011b24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b28:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011b2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011b2f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011b34:	75 08                	jne    c0011b3e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011b36:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011b3c:	eb 38                	jmp    c0011b76 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011b3e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011b43:	75 17                	jne    c0011b5c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011b45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b4a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b4d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011b53:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011b59:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0011b5c:	89 c1                	mov    ecx,eax
c0011b5e:	83 e1 fd             	and    ecx,0xfffffffd
c0011b61:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011b67:	74 cd                	je     c0011b36 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011b69:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011b6e:	83 e0 ef             	and    eax,0xffffffef
c0011b71:	83 f8 08             	cmp    eax,0x8
c0011b74:	76 c0                	jbe    c0011b36 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011b76:	31 c0                	xor    eax,eax
c0011b78:	c3                   	ret    
c0011b79:	90                   	nop

c0011b7a <ReservedFilename::isAtty()>:
c0011b7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b7e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011b81:	31 c0                	xor    eax,eax
c0011b83:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0011b89:	74 09                	je     c0011b94 <ReservedFilename::isAtty()+0x1a>
c0011b8b:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011b91:	0f 94 c0             	sete   al
c0011b94:	c3                   	ret    
c0011b95:	90                   	nop

c0011b96 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011b96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b9e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011ba1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011ba5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011baa:	75 08                	jne    c0011bb4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0011bac:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0011bb2:	eb 3d                	jmp    c0011bf1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011bb4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011bb9:	75 17                	jne    c0011bd2 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0011bbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bc0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bc3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011bc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0011bcb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011bcf:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011bd2:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011bd7:	75 04                	jne    c0011bdd <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011bd9:	89 0a                	mov    DWORD PTR [edx],ecx
c0011bdb:	eb 14                	jmp    c0011bf1 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0011bdd:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011be2:	74 c8                	je     c0011bac <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011be4:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011be9:	83 e0 ef             	and    eax,0xffffffef
c0011bec:	83 f8 08             	cmp    eax,0x8
c0011bef:	76 bb                	jbe    c0011bac <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011bf1:	31 c0                	xor    eax,eax
c0011bf3:	c3                   	ret    

c0011bf4 <UnixFile::getFileDescriptor()>:
c0011bf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011bf8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011bfb:	c3                   	ret    

c0011bfc <UnixFile::UnixFile(int)>:
c0011bfc:	53                   	push   ebx
c0011bfd:	83 ec 28             	sub    esp,0x28
c0011c00:	ba e8 23 02 c0       	mov    edx,0xc00223e8
c0011c05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011c09:	89 10                	mov    DWORD PTR [eax],edx
c0011c0b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011c13:	0f 8f 90 01 00 00    	jg     c0011da9 <UnixFile::UnixFile(int)+0x1ad>
c0011c19:	a1 00 42 02 c0       	mov    eax,ds:0xc0024200
c0011c1e:	8d 50 01             	lea    edx,[eax+0x1]
c0011c21:	89 15 00 42 02 c0    	mov    DWORD PTR ds:0xc0024200,edx
c0011c27:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011c2b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011c2e:	83 ec 08             	sub    esp,0x8
c0011c31:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011c35:	68 b8 be 02 c0       	push   0xc002beb8
c0011c3a:	e8 8d e5 00 00       	call   c00201cc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011c3f:	83 c4 10             	add    esp,0x10
c0011c42:	a0 b4 be 02 c0       	mov    al,ds:0xc002beb4
c0011c47:	83 f0 01             	xor    eax,0x1
c0011c4a:	0f b6 c0             	movzx  eax,al
c0011c4d:	85 c0                	test   eax,eax
c0011c4f:	0f 84 55 01 00 00    	je     c0011daa <UnixFile::UnixFile(int)+0x1ae>
c0011c55:	c6 05 b4 be 02 c0 01 	mov    BYTE PTR ds:0xc002beb4,0x1
c0011c5c:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011c64:	83 ec 0c             	sub    esp,0xc
c0011c67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011c6b:	e8 0b cd ff ff       	call   c000e97b <malloc>
c0011c70:	83 c4 10             	add    esp,0x10
c0011c73:	89 c3                	mov    ebx,eax
c0011c75:	83 ec 08             	sub    esp,0x8
c0011c78:	68 03 ff ff 0f       	push   0xfffff03
c0011c7d:	53                   	push   ebx
c0011c7e:	e8 2d 01 00 00       	call   c0011db0 <ReservedFilename::ReservedFilename(int)>
c0011c83:	83 c4 10             	add    esp,0x10
c0011c86:	89 1d ac be 02 c0    	mov    DWORD PTR ds:0xc002beac,ebx
c0011c8c:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011c94:	83 ec 0c             	sub    esp,0xc
c0011c97:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011c9b:	e8 db cc ff ff       	call   c000e97b <malloc>
c0011ca0:	83 c4 10             	add    esp,0x10
c0011ca3:	89 c3                	mov    ebx,eax
c0011ca5:	83 ec 08             	sub    esp,0x8
c0011ca8:	68 01 ff ff 0f       	push   0xfffff01
c0011cad:	53                   	push   ebx
c0011cae:	e8 fd 00 00 00       	call   c0011db0 <ReservedFilename::ReservedFilename(int)>
c0011cb3:	83 c4 10             	add    esp,0x10
c0011cb6:	89 1d b0 be 02 c0    	mov    DWORD PTR ds:0xc002beb0,ebx
c0011cbc:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011cc4:	83 ec 0c             	sub    esp,0xc
c0011cc7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011ccb:	e8 ab cc ff ff       	call   c000e97b <malloc>
c0011cd0:	83 c4 10             	add    esp,0x10
c0011cd3:	89 c3                	mov    ebx,eax
c0011cd5:	83 ec 08             	sub    esp,0x8
c0011cd8:	68 00 ff ff 0f       	push   0xfffff00
c0011cdd:	53                   	push   ebx
c0011cde:	e8 cd 00 00 00       	call   c0011db0 <ReservedFilename::ReservedFilename(int)>
c0011ce3:	83 c4 10             	add    esp,0x10
c0011ce6:	89 1d a4 be 02 c0    	mov    DWORD PTR ds:0xc002bea4,ebx
c0011cec:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011cf4:	83 ec 0c             	sub    esp,0xc
c0011cf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011cfb:	e8 7b cc ff ff       	call   c000e97b <malloc>
c0011d00:	83 c4 10             	add    esp,0x10
c0011d03:	89 c3                	mov    ebx,eax
c0011d05:	83 ec 08             	sub    esp,0x8
c0011d08:	68 02 ff ff 0f       	push   0xfffff02
c0011d0d:	53                   	push   ebx
c0011d0e:	e8 9d 00 00 00       	call   c0011db0 <ReservedFilename::ReservedFilename(int)>
c0011d13:	83 c4 10             	add    esp,0x10
c0011d16:	89 1d a8 be 02 c0    	mov    DWORD PTR ds:0xc002bea8,ebx
c0011d1c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011d24:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011d29:	7f 7f                	jg     c0011daa <UnixFile::UnixFile(int)+0x1ae>
c0011d2b:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011d33:	83 ec 0c             	sub    esp,0xc
c0011d36:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011d3a:	e8 3c cc ff ff       	call   c000e97b <malloc>
c0011d3f:	83 c4 10             	add    esp,0x10
c0011d42:	89 c3                	mov    ebx,eax
c0011d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d48:	05 10 ff ff 0f       	add    eax,0xfffff10
c0011d4d:	83 ec 08             	sub    esp,0x8
c0011d50:	50                   	push   eax
c0011d51:	53                   	push   ebx
c0011d52:	e8 59 00 00 00       	call   c0011db0 <ReservedFilename::ReservedFilename(int)>
c0011d57:	83 c4 10             	add    esp,0x10
c0011d5a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d5e:	89 1c 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],ebx
c0011d65:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0011d6d:	83 ec 0c             	sub    esp,0xc
c0011d70:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011d74:	e8 02 cc ff ff       	call   c000e97b <malloc>
c0011d79:	83 c4 10             	add    esp,0x10
c0011d7c:	89 c3                	mov    ebx,eax
c0011d7e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d82:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011d87:	83 ec 08             	sub    esp,0x8
c0011d8a:	50                   	push   eax
c0011d8b:	53                   	push   ebx
c0011d8c:	e8 1f 00 00 00       	call   c0011db0 <ReservedFilename::ReservedFilename(int)>
c0011d91:	83 c4 10             	add    esp,0x10
c0011d94:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011d98:	89 1c 85 40 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd41c0],ebx
c0011d9f:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0011da4:	e9 7b ff ff ff       	jmp    c0011d24 <UnixFile::UnixFile(int)+0x128>
c0011da9:	90                   	nop
c0011daa:	83 c4 28             	add    esp,0x28
c0011dad:	5b                   	pop    ebx
c0011dae:	c3                   	ret    
c0011daf:	90                   	nop

c0011db0 <ReservedFilename::ReservedFilename(int)>:
c0011db0:	83 ec 0c             	sub    esp,0xc
c0011db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011db7:	83 ec 08             	sub    esp,0x8
c0011dba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011dbe:	50                   	push   eax
c0011dbf:	e8 38 fe ff ff       	call   c0011bfc <UnixFile::UnixFile(int)>
c0011dc4:	83 c4 10             	add    esp,0x10
c0011dc7:	ba 04 24 02 c0       	mov    edx,0xc0022404
c0011dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dd0:	89 10                	mov    DWORD PTR [eax],edx
c0011dd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011dd6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011dda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011ddd:	90                   	nop
c0011dde:	83 c4 0c             	add    esp,0xc
c0011de1:	c3                   	ret    

c0011de2 <UnixFile::~UnixFile()>:
c0011de2:	83 ec 1c             	sub    esp,0x1c
c0011de5:	ba e8 23 02 c0       	mov    edx,0xc00223e8
c0011dea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dee:	89 10                	mov    DWORD PTR [eax],edx
c0011df0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011df4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011df7:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011dfc:	7f 76                	jg     c0011e74 <UnixFile::~UnixFile()+0x92>
c0011dfe:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e06:	83 ec 0c             	sub    esp,0xc
c0011e09:	68 b8 be 02 c0       	push   0xc002beb8
c0011e0e:	e8 8d e4 00 00       	call   c00202a0 <LinkedList<UnixFile>::getFirstElement()>
c0011e13:	83 c4 10             	add    esp,0x10
c0011e16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e1a:	83 ec 0c             	sub    esp,0xc
c0011e1d:	68 b8 be 02 c0       	push   0xc002beb8
c0011e22:	e8 81 e4 00 00       	call   c00202a8 <LinkedList<UnixFile>::removeFirst()>
c0011e27:	83 c4 10             	add    esp,0x10
c0011e2a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e2e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011e32:	74 43                	je     c0011e77 <UnixFile::~UnixFile()+0x95>
c0011e34:	83 ec 08             	sub    esp,0x8
c0011e37:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011e3b:	68 b8 be 02 c0       	push   0xc002beb8
c0011e40:	e8 87 e3 00 00       	call   c00201cc <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011e45:	83 c4 10             	add    esp,0x10
c0011e48:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e4c:	8d 50 01             	lea    edx,[eax+0x1]
c0011e4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e53:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0011e58:	0f 94 c0             	sete   al
c0011e5b:	0f b6 c0             	movzx  eax,al
c0011e5e:	85 c0                	test   eax,eax
c0011e60:	74 a4                	je     c0011e06 <UnixFile::~UnixFile()+0x24>
c0011e62:	83 ec 0c             	sub    esp,0xc
c0011e65:	68 c0 23 02 c0       	push   0xc00223c0
c0011e6a:	e8 63 ce ff ff       	call   c000ecd2 <KePanic(char const*)>
c0011e6f:	83 c4 10             	add    esp,0x10
c0011e72:	eb 92                	jmp    c0011e06 <UnixFile::~UnixFile()+0x24>
c0011e74:	90                   	nop
c0011e75:	eb 01                	jmp    c0011e78 <UnixFile::~UnixFile()+0x96>
c0011e77:	90                   	nop
c0011e78:	90                   	nop
c0011e79:	83 c4 1c             	add    esp,0x1c
c0011e7c:	c3                   	ret    
c0011e7d:	90                   	nop

c0011e7e <UnixFile::~UnixFile()>:
c0011e7e:	83 ec 0c             	sub    esp,0xc
c0011e81:	83 ec 0c             	sub    esp,0xc
c0011e84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e88:	e8 55 ff ff ff       	call   c0011de2 <UnixFile::~UnixFile()>
c0011e8d:	83 c4 10             	add    esp,0x10
c0011e90:	83 ec 08             	sub    esp,0x8
c0011e93:	6a 0c                	push   0xc
c0011e95:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e99:	e8 6a a8 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0011e9e:	83 c4 10             	add    esp,0x10
c0011ea1:	83 c4 0c             	add    esp,0xc
c0011ea4:	c3                   	ret    
c0011ea5:	90                   	nop

c0011ea6 <ReservedFilename::~ReservedFilename()>:
c0011ea6:	83 ec 0c             	sub    esp,0xc
c0011ea9:	ba 04 24 02 c0       	mov    edx,0xc0022404
c0011eae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb2:	89 10                	mov    DWORD PTR [eax],edx
c0011eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011eb8:	83 ec 0c             	sub    esp,0xc
c0011ebb:	50                   	push   eax
c0011ebc:	e8 21 ff ff ff       	call   c0011de2 <UnixFile::~UnixFile()>
c0011ec1:	83 c4 10             	add    esp,0x10
c0011ec4:	90                   	nop
c0011ec5:	83 c4 0c             	add    esp,0xc
c0011ec8:	c3                   	ret    
c0011ec9:	90                   	nop

c0011eca <ReservedFilename::~ReservedFilename()>:
c0011eca:	83 ec 0c             	sub    esp,0xc
c0011ecd:	83 ec 0c             	sub    esp,0xc
c0011ed0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ed4:	e8 cd ff ff ff       	call   c0011ea6 <ReservedFilename::~ReservedFilename()>
c0011ed9:	83 c4 10             	add    esp,0x10
c0011edc:	83 ec 08             	sub    esp,0x8
c0011edf:	6a 0c                	push   0xc
c0011ee1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011ee5:	e8 1e a8 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	83 c4 0c             	add    esp,0xc
c0011ef0:	c3                   	ret    

c0011ef1 <KeGetFileFromDescriptor(int)>:
c0011ef1:	53                   	push   ebx
c0011ef2:	83 ec 08             	sub    esp,0x8
c0011ef5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ef9:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011eff:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011f05:	7f 2c                	jg     c0011f33 <KeGetFileFromDescriptor(int)+0x42>
c0011f07:	83 ec 0c             	sub    esp,0xc
c0011f0a:	68 b8 be 02 c0       	push   0xc002beb8
c0011f0f:	e8 8c e3 00 00       	call   c00202a0 <LinkedList<UnixFile>::getFirstElement()>
c0011f14:	83 c4 10             	add    esp,0x10
c0011f17:	85 c0                	test   eax,eax
c0011f19:	75 04                	jne    c0011f1f <KeGetFileFromDescriptor(int)+0x2e>
c0011f1b:	31 c0                	xor    eax,eax
c0011f1d:	eb 6e                	jmp    c0011f8d <KeGetFileFromDescriptor(int)+0x9c>
c0011f1f:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011f22:	74 69                	je     c0011f8d <KeGetFileFromDescriptor(int)+0x9c>
c0011f24:	52                   	push   edx
c0011f25:	52                   	push   edx
c0011f26:	50                   	push   eax
c0011f27:	68 b8 be 02 c0       	push   0xc002beb8
c0011f2c:	e8 19 e4 00 00       	call   c002034a <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011f31:	eb e1                	jmp    c0011f14 <KeGetFileFromDescriptor(int)+0x23>
c0011f33:	a1 ac be 02 c0       	mov    eax,ds:0xc002beac
c0011f38:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011f3e:	74 4d                	je     c0011f8d <KeGetFileFromDescriptor(int)+0x9c>
c0011f40:	a1 b0 be 02 c0       	mov    eax,ds:0xc002beb0
c0011f45:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011f4b:	74 40                	je     c0011f8d <KeGetFileFromDescriptor(int)+0x9c>
c0011f4d:	a1 a8 be 02 c0       	mov    eax,ds:0xc002bea8
c0011f52:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011f58:	74 33                	je     c0011f8d <KeGetFileFromDescriptor(int)+0x9c>
c0011f5a:	a1 a4 be 02 c0       	mov    eax,ds:0xc002bea4
c0011f5f:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011f65:	74 26                	je     c0011f8d <KeGetFileFromDescriptor(int)+0x9c>
c0011f67:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011f6d:	83 f8 08             	cmp    eax,0x8
c0011f70:	77 09                	ja     c0011f7b <KeGetFileFromDescriptor(int)+0x8a>
c0011f72:	8b 04 85 80 be 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4180]
c0011f79:	eb 12                	jmp    c0011f8d <KeGetFileFromDescriptor(int)+0x9c>
c0011f7b:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011f81:	83 fb 08             	cmp    ebx,0x8
c0011f84:	77 95                	ja     c0011f1b <KeGetFileFromDescriptor(int)+0x2a>
c0011f86:	8b 04 9d 40 be 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd41c0]
c0011f8d:	83 c4 08             	add    esp,0x8
c0011f90:	5b                   	pop    ebx
c0011f91:	c3                   	ret    

c0011f92 <__static_initialization_and_destruction_0(int, int)>:
c0011f92:	83 ec 0c             	sub    esp,0xc
c0011f95:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011f9a:	75 34                	jne    c0011fd0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011f9c:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011fa4:	75 2a                	jne    c0011fd0 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011fa6:	83 ec 0c             	sub    esp,0xc
c0011fa9:	68 b8 be 02 c0       	push   0xc002beb8
c0011fae:	e8 d7 e1 00 00       	call   c002018a <LinkedList<UnixFile>::LinkedList()>
c0011fb3:	83 c4 10             	add    esp,0x10
c0011fb6:	83 ec 04             	sub    esp,0x4
c0011fb9:	68 70 3a 02 c0       	push   0xc0023a70
c0011fbe:	68 b8 be 02 c0       	push   0xc002beb8
c0011fc3:	68 88 01 02 c0       	push   0xc0020188
c0011fc8:	e8 eb a6 ff ff       	call   c000c6b8 <__cxa_atexit>
c0011fcd:	83 c4 10             	add    esp,0x10
c0011fd0:	90                   	nop
c0011fd1:	83 c4 0c             	add    esp,0xc
c0011fd4:	c3                   	ret    

c0011fd5 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011fd5:	83 ec 0c             	sub    esp,0xc
c0011fd8:	83 ec 08             	sub    esp,0x8
c0011fdb:	68 ff ff 00 00       	push   0xffff
c0011fe0:	6a 01                	push   0x1
c0011fe2:	e8 ab ff ff ff       	call   c0011f92 <__static_initialization_and_destruction_0(int, int)>
c0011fe7:	83 c4 10             	add    esp,0x10
c0011fea:	83 c4 0c             	add    esp,0xc
c0011fed:	c3                   	ret    

c0011fee <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011fee:	53                   	push   ebx
c0011fef:	8b 15 08 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024208
c0011ff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011ff9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0011ffd:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012003:	89 d8                	mov    eax,ebx
c0012005:	d1 e8                	shr    eax,1
c0012007:	01 d0                	add    eax,edx
c0012009:	80 e3 01             	and    bl,0x1
c001200c:	8a 10                	mov    dl,BYTE PTR [eax]
c001200e:	75 09                	jne    c0012019 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0012010:	83 e2 f0             	and    edx,0xfffffff0
c0012013:	09 ca                	or     edx,ecx
c0012015:	88 10                	mov    BYTE PTR [eax],dl
c0012017:	5b                   	pop    ebx
c0012018:	c3                   	ret    
c0012019:	83 e2 0f             	and    edx,0xf
c001201c:	0f b6 c9             	movzx  ecx,cl
c001201f:	c1 e1 04             	shl    ecx,0x4
c0012022:	09 ca                	or     edx,ecx
c0012024:	88 10                	mov    BYTE PTR [eax],dl
c0012026:	5b                   	pop    ebx
c0012027:	c3                   	ret    

c0012028 <Virt::getPageState(unsigned long)>:
c0012028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001202c:	8b 0d 08 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024208
c0012032:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0012038:	89 d0                	mov    eax,edx
c001203a:	d1 e8                	shr    eax,1
c001203c:	80 e2 01             	and    dl,0x1
c001203f:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0012042:	74 03                	je     c0012047 <Virt::getPageState(unsigned long)+0x1f>
c0012044:	c1 e8 04             	shr    eax,0x4
c0012047:	83 e0 0f             	and    eax,0xf
c001204a:	c3                   	ret    

c001204b <Virt::allocateKernelVirtualPages(int)>:
c001204b:	55                   	push   ebp
c001204c:	31 ed                	xor    ebp,ebp
c001204e:	57                   	push   edi
c001204f:	31 ff                	xor    edi,edi
c0012051:	56                   	push   esi
c0012052:	53                   	push   ebx
c0012053:	31 db                	xor    ebx,ebx
c0012055:	83 ec 0c             	sub    esp,0xc
c0012058:	8b 35 04 42 02 c0    	mov    esi,DWORD PTR ds:0xc0024204
c001205e:	56                   	push   esi
c001205f:	e8 c4 ff ff ff       	call   c0012028 <Virt::getPageState(unsigned long)>
c0012064:	5a                   	pop    edx
c0012065:	84 c0                	test   al,al
c0012067:	75 41                	jne    c00120aa <Virt::allocateKernelVirtualPages(int)+0x5f>
c0012069:	85 db                	test   ebx,ebx
c001206b:	75 02                	jne    c001206f <Virt::allocateKernelVirtualPages(int)+0x24>
c001206d:	89 f5                	mov    ebp,esi
c001206f:	83 c3 01             	add    ebx,0x1
c0012072:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012076:	74 5f                	je     c00120d7 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0012078:	83 c6 01             	add    esi,0x1
c001207b:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0012081:	76 34                	jbe    c00120b7 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0012083:	c7 05 04 42 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0024204,0xc8000
c001208d:	f7 c7 01 00 00 00    	test   edi,0x1
c0012093:	75 2a                	jne    c00120bf <Virt::allocateKernelVirtualPages(int)+0x74>
c0012095:	be 00 80 0c 00       	mov    esi,0xc8000
c001209a:	bf 01 00 00 00       	mov    edi,0x1
c001209f:	56                   	push   esi
c00120a0:	e8 83 ff ff ff       	call   c0012028 <Virt::getPageState(unsigned long)>
c00120a5:	5a                   	pop    edx
c00120a6:	84 c0                	test   al,al
c00120a8:	74 bf                	je     c0012069 <Virt::allocateKernelVirtualPages(int)+0x1e>
c00120aa:	31 db                	xor    ebx,ebx
c00120ac:	83 c6 01             	add    esi,0x1
c00120af:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00120b5:	77 cc                	ja     c0012083 <Virt::allocateKernelVirtualPages(int)+0x38>
c00120b7:	89 35 04 42 02 c0    	mov    DWORD PTR ds:0xc0024204,esi
c00120bd:	eb 9f                	jmp    c001205e <Virt::allocateKernelVirtualPages(int)+0x13>
c00120bf:	83 ec 0c             	sub    esp,0xc
c00120c2:	68 18 24 02 c0       	push   0xc0022418
c00120c7:	e8 06 cc ff ff       	call   c000ecd2 <KePanic(char const*)>
c00120cc:	8b 35 04 42 02 c0    	mov    esi,DWORD PTR ds:0xc0024204
c00120d2:	83 c4 10             	add    esp,0x10
c00120d5:	eb 87                	jmp    c001205e <Virt::allocateKernelVirtualPages(int)+0x13>
c00120d7:	89 2d 04 42 02 c0    	mov    DWORD PTR ds:0xc0024204,ebp
c00120dd:	83 fb 01             	cmp    ebx,0x1
c00120e0:	74 6f                	je     c0012151 <Virt::allocateKernelVirtualPages(int)+0x106>
c00120e2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00120e6:	85 c9                	test   ecx,ecx
c00120e8:	74 49                	je     c0012133 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00120ea:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00120ee:	89 e8                	mov    eax,ebp
c00120f0:	31 db                	xor    ebx,ebx
c00120f2:	8d 79 ff             	lea    edi,[ecx-0x1]
c00120f5:	eb 18                	jmp    c001210f <Virt::allocateKernelVirtualPages(int)+0xc4>
c00120f7:	6a 01                	push   0x1
c00120f9:	83 c3 01             	add    ebx,0x1
c00120fc:	50                   	push   eax
c00120fd:	e8 ec fe ff ff       	call   c0011fee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012102:	58                   	pop    eax
c0012103:	5a                   	pop    edx
c0012104:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012108:	74 29                	je     c0012133 <Virt::allocateKernelVirtualPages(int)+0xe8>
c001210a:	a1 04 42 02 c0       	mov    eax,ds:0xc0024204
c001210f:	8d 50 01             	lea    edx,[eax+0x1]
c0012112:	85 db                	test   ebx,ebx
c0012114:	89 15 04 42 02 c0    	mov    DWORD PTR ds:0xc0024204,edx
c001211a:	74 24                	je     c0012140 <Virt::allocateKernelVirtualPages(int)+0xf5>
c001211c:	39 df                	cmp    edi,ebx
c001211e:	75 d7                	jne    c00120f7 <Virt::allocateKernelVirtualPages(int)+0xac>
c0012120:	6a 03                	push   0x3
c0012122:	83 c3 01             	add    ebx,0x1
c0012125:	50                   	push   eax
c0012126:	e8 c3 fe ff ff       	call   c0011fee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001212b:	59                   	pop    ecx
c001212c:	5e                   	pop    esi
c001212d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012131:	75 d7                	jne    c001210a <Virt::allocateKernelVirtualPages(int)+0xbf>
c0012133:	83 c4 0c             	add    esp,0xc
c0012136:	89 e8                	mov    eax,ebp
c0012138:	5b                   	pop    ebx
c0012139:	c1 e0 0c             	shl    eax,0xc
c001213c:	5e                   	pop    esi
c001213d:	5f                   	pop    edi
c001213e:	5d                   	pop    ebp
c001213f:	c3                   	ret    
c0012140:	6a 02                	push   0x2
c0012142:	bb 01 00 00 00       	mov    ebx,0x1
c0012147:	50                   	push   eax
c0012148:	e8 a1 fe ff ff       	call   c0011fee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001214d:	58                   	pop    eax
c001214e:	5a                   	pop    edx
c001214f:	eb b9                	jmp    c001210a <Virt::allocateKernelVirtualPages(int)+0xbf>
c0012151:	6a 04                	push   0x4
c0012153:	8d 45 01             	lea    eax,[ebp+0x1]
c0012156:	55                   	push   ebp
c0012157:	a3 04 42 02 c0       	mov    ds:0xc0024204,eax
c001215c:	e8 8d fe ff ff       	call   c0011fee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012161:	5b                   	pop    ebx
c0012162:	89 e8                	mov    eax,ebp
c0012164:	5e                   	pop    esi
c0012165:	c1 e0 0c             	shl    eax,0xc
c0012168:	83 c4 0c             	add    esp,0xc
c001216b:	5b                   	pop    ebx
c001216c:	5e                   	pop    esi
c001216d:	5f                   	pop    edi
c001216e:	5d                   	pop    ebp
c001216f:	c3                   	ret    

c0012170 <Virt::freeSwapfilePage(unsigned long)>:
c0012170:	53                   	push   ebx
c0012171:	8b 15 cc be 02 c0    	mov    edx,DWORD PTR ds:0xc002becc
c0012177:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001217b:	b8 01 00 00 00       	mov    eax,0x1
c0012180:	89 cb                	mov    ebx,ecx
c0012182:	d3 e0                	shl    eax,cl
c0012184:	c1 eb 05             	shr    ebx,0x5
c0012187:	f7 d0                	not    eax
c0012189:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c001218c:	21 c1                	and    ecx,eax
c001218e:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012191:	5b                   	pop    ebx
c0012192:	c3                   	ret    

c0012193 <Virt::swapIDToSector(unsigned long)>:
c0012193:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012197:	8b 15 0c 42 02 c0    	mov    edx,DWORD PTR ds:0xc002420c
c001219d:	8b 0d 14 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024214
c00121a3:	0f af c2             	imul   eax,edx
c00121a6:	01 c8                	add    eax,ecx
c00121a8:	c3                   	ret    

c00121a9 <Virt::allocateSwapfilePage()>:
c00121a9:	55                   	push   ebp
c00121aa:	31 d2                	xor    edx,edx
c00121ac:	57                   	push   edi
c00121ad:	56                   	push   esi
c00121ae:	53                   	push   ebx
c00121af:	83 ec 0c             	sub    esp,0xc
c00121b2:	8b 0d 0c 42 02 c0    	mov    ecx,DWORD PTR ds:0xc002420c
c00121b8:	a1 10 42 02 c0       	mov    eax,ds:0xc0024210
c00121bd:	f7 f1                	div    ecx
c00121bf:	39 0d 10 42 02 c0    	cmp    DWORD PTR ds:0xc0024210,ecx
c00121c5:	72 2f                	jb     c00121f6 <Virt::allocateSwapfilePage()+0x4d>
c00121c7:	8b 35 cc be 02 c0    	mov    esi,DWORD PTR ds:0xc002becc
c00121cd:	8b 16                	mov    edx,DWORD PTR [esi]
c00121cf:	f6 c2 01             	test   dl,0x1
c00121d2:	74 3e                	je     c0012212 <Virt::allocateSwapfilePage()+0x69>
c00121d4:	31 c9                	xor    ecx,ecx
c00121d6:	bf 01 00 00 00       	mov    edi,0x1
c00121db:	eb 12                	jmp    c00121ef <Virt::allocateSwapfilePage()+0x46>
c00121dd:	89 fd                	mov    ebp,edi
c00121df:	89 ca                	mov    edx,ecx
c00121e1:	d3 e5                	shl    ebp,cl
c00121e3:	c1 ea 05             	shr    edx,0x5
c00121e6:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00121e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00121eb:	85 ea                	test   edx,ebp
c00121ed:	74 2c                	je     c001221b <Virt::allocateSwapfilePage()+0x72>
c00121ef:	83 c1 01             	add    ecx,0x1
c00121f2:	39 c8                	cmp    eax,ecx
c00121f4:	77 e7                	ja     c00121dd <Virt::allocateSwapfilePage()+0x34>
c00121f6:	83 ec 0c             	sub    esp,0xc
c00121f9:	68 88 26 02 c0       	push   0xc0022688
c00121fe:	e8 cf ca ff ff       	call   c000ecd2 <KePanic(char const*)>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	31 c9                	xor    ecx,ecx
c0012208:	83 c4 0c             	add    esp,0xc
c001220b:	89 c8                	mov    eax,ecx
c001220d:	5b                   	pop    ebx
c001220e:	5e                   	pop    esi
c001220f:	5f                   	pop    edi
c0012210:	5d                   	pop    ebp
c0012211:	c3                   	ret    
c0012212:	89 f3                	mov    ebx,esi
c0012214:	bd 01 00 00 00       	mov    ebp,0x1
c0012219:	31 c9                	xor    ecx,ecx
c001221b:	09 ea                	or     edx,ebp
c001221d:	89 c8                	mov    eax,ecx
c001221f:	89 13                	mov    DWORD PTR [ebx],edx
c0012221:	83 c4 0c             	add    esp,0xc
c0012224:	5b                   	pop    ebx
c0012225:	5e                   	pop    esi
c0012226:	5f                   	pop    edi
c0012227:	5d                   	pop    ebp
c0012228:	c3                   	ret    

c0012229 <Virt::virtualMemorySetup()>:
c0012229:	53                   	push   ebx
c001222a:	bb 00 80 0c 00       	mov    ebx,0xc8000
c001222f:	6a 0f                	push   0xf
c0012231:	53                   	push   ebx
c0012232:	83 c3 01             	add    ebx,0x1
c0012235:	e8 b4 fd ff ff       	call   c0011fee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001223a:	58                   	pop    eax
c001223b:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012241:	5a                   	pop    edx
c0012242:	75 eb                	jne    c001222f <Virt::virtualMemorySetup()+0x6>
c0012244:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012249:	6a 00                	push   0x0
c001224b:	53                   	push   ebx
c001224c:	83 c3 01             	add    ebx,0x1
c001224f:	e8 9a fd ff ff       	call   c0011fee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012254:	59                   	pop    ecx
c0012255:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001225b:	58                   	pop    eax
c001225c:	75 eb                	jne    c0012249 <Virt::virtualMemorySetup()+0x20>
c001225e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012263:	6a 0f                	push   0xf
c0012265:	53                   	push   ebx
c0012266:	83 c3 01             	add    ebx,0x1
c0012269:	e8 80 fd ff ff       	call   c0011fee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001226e:	58                   	pop    eax
c001226f:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012275:	5a                   	pop    edx
c0012276:	75 eb                	jne    c0012263 <Virt::virtualMemorySetup()+0x3a>
c0012278:	5b                   	pop    ebx
c0012279:	c3                   	ret    

c001227a <Virt::setupPageSwapping(int)>:
c001227a:	53                   	push   ebx
c001227b:	83 ec 0c             	sub    esp,0xc
c001227e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012282:	a1 88 97 02 c0       	mov    eax,ds:0xc0029788
c0012287:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c001228d:	8b 10                	mov    edx,DWORD PTR [eax]
c001228f:	53                   	push   ebx
c0012290:	c1 e3 0b             	shl    ebx,0xb
c0012293:	68 9f 26 02 c0       	push   0xc002269f
c0012298:	50                   	push   eax
c0012299:	ff 52 60             	call   DWORD PTR [edx+0x60]
c001229c:	89 1d 10 42 02 c0    	mov    DWORD PTR ds:0xc0024210,ebx
c00122a2:	c6 05 18 42 02 c0 43 	mov    BYTE PTR ds:0xc0024218,0x43
c00122a9:	c1 eb 08             	shr    ebx,0x8
c00122ac:	a3 14 42 02 c0       	mov    ds:0xc0024214,eax
c00122b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122b4:	c7 05 0c 42 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002420c,0x8
c00122be:	e8 b8 c6 ff ff       	call   c000e97b <malloc>
c00122c3:	83 c4 0c             	add    esp,0xc
c00122c6:	89 c1                	mov    ecx,eax
c00122c8:	a3 cc be 02 c0       	mov    ds:0xc002becc,eax
c00122cd:	31 d2                	xor    edx,edx
c00122cf:	a1 10 42 02 c0       	mov    eax,ds:0xc0024210
c00122d4:	f7 35 0c 42 02 c0    	div    DWORD PTR ds:0xc002420c
c00122da:	c1 e8 05             	shr    eax,0x5
c00122dd:	50                   	push   eax
c00122de:	6a 00                	push   0x0
c00122e0:	51                   	push   ecx
c00122e1:	e8 0a e2 fe ff       	call   c00004f0 <memset>
c00122e6:	83 c4 18             	add    esp,0x18
c00122e9:	5b                   	pop    ebx
c00122ea:	c3                   	ret    
c00122eb:	90                   	nop

c00122ec <VAS::setCPUSpecific(unsigned long)>:
c00122ec:	c3                   	ret    
c00122ed:	90                   	nop

c00122ee <VAS::VAS(VAS*)>:
c00122ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122f2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00122f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122fd:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012304:	90                   	nop
c0012305:	c3                   	ret    

c0012306 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012306:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001230a:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c001230f:	89 c2                	mov    edx,eax
c0012311:	c1 e8 0a             	shr    eax,0xa
c0012314:	c1 ea 16             	shr    edx,0x16
c0012317:	83 f9 01             	cmp    ecx,0x1
c001231a:	19 c9                	sbb    ecx,ecx
c001231c:	c1 e2 0c             	shl    edx,0xc
c001231f:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012325:	25 fc 0f 00 00       	and    eax,0xffc
c001232a:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012331:	01 d0                	add    eax,edx
c0012333:	c3                   	ret    

c0012334 <VAS::getPageTableEntry(unsigned long)>:
c0012334:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012338:	89 ca                	mov    edx,ecx
c001233a:	c1 e9 0a             	shr    ecx,0xa
c001233d:	c1 ea 16             	shr    edx,0x16
c0012340:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012346:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c001234c:	c1 e0 0c             	shl    eax,0xc
c001234f:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012352:	c3                   	ret    

c0012353 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012353:	55                   	push   ebp
c0012354:	57                   	push   edi
c0012355:	bf 01 00 00 00       	mov    edi,0x1
c001235a:	56                   	push   esi
c001235b:	53                   	push   ebx
c001235c:	83 ec 1c             	sub    esp,0x1c
c001235f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012363:	c1 ee 0c             	shr    esi,0xc
c0012366:	eb 48                	jmp    c00123b0 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0012368:	83 ec 08             	sub    esp,0x8
c001236b:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c0012370:	55                   	push   ebp
c0012371:	50                   	push   eax
c0012372:	e8 bd ff ff ff       	call   c0012334 <VAS::getPageTableEntry(unsigned long)>
c0012377:	83 c4 10             	add    esp,0x10
c001237a:	8b 10                	mov    edx,DWORD PTR [eax]
c001237c:	f6 c6 04             	test   dh,0x4
c001237f:	75 70                	jne    c00123f1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012381:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012387:	83 fb 04             	cmp    ebx,0x4
c001238a:	0f 84 8a 00 00 00    	je     c001241a <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012390:	83 fb 02             	cmp    ebx,0x2
c0012393:	0f 84 9a 00 00 00    	je     c0012433 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0012399:	83 fb 03             	cmp    ebx,0x3
c001239c:	0f 84 be 00 00 00    	je     c0012460 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00123a2:	83 fb 01             	cmp    ebx,0x1
c00123a5:	0f 84 a2 00 00 00    	je     c001244d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00123ab:	83 c6 01             	add    esi,0x1
c00123ae:	31 ff                	xor    edi,edi
c00123b0:	56                   	push   esi
c00123b1:	89 f5                	mov    ebp,esi
c00123b3:	e8 70 fc ff ff       	call   c0012028 <Virt::getPageState(unsigned long)>
c00123b8:	c1 e5 0c             	shl    ebp,0xc
c00123bb:	0f b6 d8             	movzx  ebx,al
c00123be:	5a                   	pop    edx
c00123bf:	85 db                	test   ebx,ebx
c00123c1:	75 a5                	jne    c0012368 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c00123c3:	83 ec 0c             	sub    esp,0xc
c00123c6:	68 b6 26 02 c0       	push   0xc00226b6
c00123cb:	e8 02 c9 ff ff       	call   c000ecd2 <KePanic(char const*)>
c00123d0:	5a                   	pop    edx
c00123d1:	59                   	pop    ecx
c00123d2:	55                   	push   ebp
c00123d3:	8b 2d d0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bed0
c00123d9:	55                   	push   ebp
c00123da:	e8 55 ff ff ff       	call   c0012334 <VAS::getPageTableEntry(unsigned long)>
c00123df:	83 c4 10             	add    esp,0x10
c00123e2:	8b 10                	mov    edx,DWORD PTR [eax]
c00123e4:	f6 c6 04             	test   dh,0x4
c00123e7:	75 08                	jne    c00123f1 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00123e9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00123ef:	eb ba                	jmp    c00123ab <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00123f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123f5:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00123fb:	83 ec 0c             	sub    esp,0xc
c00123fe:	52                   	push   edx
c00123ff:	e8 59 ca ff ff       	call   c000ee5d <Phys::freePage(unsigned long)>
c0012404:	83 c4 10             	add    esp,0x10
c0012407:	83 fb 04             	cmp    ebx,0x4
c001240a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001240e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012414:	0f 85 76 ff ff ff    	jne    c0012390 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c001241a:	83 e7 01             	and    edi,0x1
c001241d:	75 46                	jne    c0012465 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c001241f:	c7 44 24 30 38 24 02 c0 	mov    DWORD PTR [esp+0x30],0xc0022438
c0012427:	83 c4 1c             	add    esp,0x1c
c001242a:	5b                   	pop    ebx
c001242b:	5e                   	pop    esi
c001242c:	5f                   	pop    edi
c001242d:	5d                   	pop    ebp
c001242e:	e9 9f c8 ff ff       	jmp    c000ecd2 <KePanic(char const*)>
c0012433:	83 e7 01             	and    edi,0x1
c0012436:	75 15                	jne    c001244d <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012438:	83 ec 0c             	sub    esp,0xc
c001243b:	68 d2 26 02 c0       	push   0xc00226d2
c0012440:	e8 8d c8 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0012445:	83 c4 10             	add    esp,0x10
c0012448:	e9 5e ff ff ff       	jmp    c00123ab <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001244d:	83 ec 08             	sub    esp,0x8
c0012450:	6a 00                	push   0x0
c0012452:	56                   	push   esi
c0012453:	e8 96 fb ff ff       	call   c0011fee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012458:	83 c4 10             	add    esp,0x10
c001245b:	e9 4b ff ff ff       	jmp    c00123ab <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012460:	83 e7 01             	and    edi,0x1
c0012463:	75 16                	jne    c001247b <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0012465:	83 ec 08             	sub    esp,0x8
c0012468:	6a 00                	push   0x0
c001246a:	56                   	push   esi
c001246b:	e8 7e fb ff ff       	call   c0011fee <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012470:	83 c4 10             	add    esp,0x10
c0012473:	83 c4 1c             	add    esp,0x1c
c0012476:	5b                   	pop    ebx
c0012477:	5e                   	pop    esi
c0012478:	5f                   	pop    edi
c0012479:	5d                   	pop    ebp
c001247a:	c3                   	ret    
c001247b:	c7 44 24 30 ee 26 02 c0 	mov    DWORD PTR [esp+0x30],0xc00226ee
c0012483:	83 c4 1c             	add    esp,0x1c
c0012486:	5b                   	pop    ebx
c0012487:	5e                   	pop    esi
c0012488:	5f                   	pop    edi
c0012489:	5d                   	pop    ebp
c001248a:	e9 43 c8 ff ff       	jmp    c000ecd2 <KePanic(char const*)>
c001248f:	90                   	nop

c0012490 <VAS::freeAllocatedPages(unsigned long)>:
c0012490:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012494:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012498:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c001249c:	74 09                	je     c00124a7 <VAS::freeAllocatedPages(unsigned long)+0x17>
c001249e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00124a2:	e9 ac fe ff ff       	jmp    c0012353 <Virt::freeKernelVirtualPages(unsigned long)>
c00124a7:	c7 44 24 04 5c 24 02 c0 	mov    DWORD PTR [esp+0x4],0xc002245c
c00124af:	e9 b0 4a ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c00124b4 <VAS::virtualToPhysical(unsigned long)>:
c00124b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00124b8:	50                   	push   eax
c00124b9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00124bd:	52                   	push   edx
c00124be:	e8 71 fe ff ff       	call   c0012334 <VAS::getPageTableEntry(unsigned long)>
c00124c3:	59                   	pop    ecx
c00124c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00124c6:	5a                   	pop    edx
c00124c7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124cc:	c3                   	ret    
c00124cd:	90                   	nop

c00124ce <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c00124ce:	55                   	push   ebp
c00124cf:	57                   	push   edi
c00124d0:	56                   	push   esi
c00124d1:	53                   	push   ebx
c00124d2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00124d6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00124da:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00124de:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00124e2:	85 db                	test   ebx,ebx
c00124e4:	7e 24                	jle    c001250a <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c00124e6:	c1 e3 0c             	shl    ebx,0xc
c00124e9:	01 f3                	add    ebx,esi
c00124eb:	56                   	push   esi
c00124ec:	81 c6 00 10 00 00    	add    esi,0x1000
c00124f2:	55                   	push   ebp
c00124f3:	e8 3c fe ff ff       	call   c0012334 <VAS::getPageTableEntry(unsigned long)>
c00124f8:	5a                   	pop    edx
c00124f9:	59                   	pop    ecx
c00124fa:	8b 08                	mov    ecx,DWORD PTR [eax]
c00124fc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012500:	21 f9                	and    ecx,edi
c0012502:	09 d1                	or     ecx,edx
c0012504:	39 f3                	cmp    ebx,esi
c0012506:	89 08                	mov    DWORD PTR [eax],ecx
c0012508:	75 e1                	jne    c00124eb <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c001250a:	5b                   	pop    ebx
c001250b:	5e                   	pop    esi
c001250c:	5f                   	pop    edi
c001250d:	5d                   	pop    ebp
c001250e:	c3                   	ret    
c001250f:	90                   	nop

c0012510 <VAS::VAS()>:
c0012510:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012514:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001251b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001251f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001252a:	a3 d0 be 02 c0       	mov    ds:0xc002bed0,eax
c001252f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012533:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012537:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001253b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c001253e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012542:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0012549:	ba 7d 50 02 c0       	mov    edx,0xc002507d
c001254e:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0012553:	29 c2                	sub    edx,eax
c0012555:	89 d0                	mov    eax,edx
c0012557:	05 ff 0f 00 00       	add    eax,0xfff
c001255c:	c1 e8 0c             	shr    eax,0xc
c001255f:	89 c2                	mov    edx,eax
c0012561:	b8 00 50 02 c0       	mov    eax,0xc0025000
c0012566:	6a 04                	push   0x4
c0012568:	6a ff                	push   0xffffffff
c001256a:	52                   	push   edx
c001256b:	50                   	push   eax
c001256c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012570:	e8 59 ff ff ff       	call   c00124ce <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012575:	83 c4 14             	add    esp,0x14
c0012578:	90                   	nop
c0012579:	c3                   	ret    

c001257a <VAS::setToWriteCombining(unsigned long, int)>:
c001257a:	a1 64 c7 02 c0       	mov    eax,ds:0xc002c764
c001257f:	50                   	push   eax
c0012580:	6a ff                	push   0xffffffff
c0012582:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012586:	52                   	push   edx
c0012587:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001258b:	51                   	push   ecx
c001258c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012590:	50                   	push   eax
c0012591:	e8 38 ff ff ff       	call   c00124ce <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012596:	83 c4 14             	add    esp,0x14
c0012599:	c3                   	ret    

c001259a <VAS::mapOtherVASIn(bool, VAS*)>:
c001259a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001259e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00125a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125a5:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00125a8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00125ad:	83 f8 01             	cmp    eax,0x1
c00125b0:	19 c0                	sbb    eax,eax
c00125b2:	83 ca 03             	or     edx,0x3
c00125b5:	83 e0 fc             	and    eax,0xfffffffc
c00125b8:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00125bf:	0f 20 d8             	mov    eax,cr3
c00125c2:	0f 22 d8             	mov    cr3,eax
c00125c5:	c3                   	ret    

c00125c6 <VAS::~VAS()>:
c00125c6:	83 ec 2c             	sub    esp,0x2c
c00125c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00125d1:	fa                   	cli    
c00125d2:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00125d7:	83 c0 01             	add    eax,0x1
c00125da:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00125df:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00125e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00125e6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125e9:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00125ef:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00125f3:	6a 01                	push   0x1
c00125f5:	50                   	push   eax
c00125f6:	e8 9f ff ff ff       	call   c001259a <VAS::mapOtherVASIn(bool, VAS*)>
c00125fb:	83 c4 0c             	add    esp,0xc
c00125fe:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012606:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001260e:	0f 8f d8 00 00 00    	jg     c00126ec <VAS::~VAS()+0x126>
c0012614:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012618:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001261b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001261f:	c1 e2 02             	shl    edx,0x2
c0012622:	01 d0                	add    eax,edx
c0012624:	8b 00                	mov    eax,DWORD PTR [eax]
c0012626:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001262a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001262e:	83 e0 01             	and    eax,0x1
c0012631:	0f 84 ab 00 00 00    	je     c00126e2 <VAS::~VAS()+0x11c>
c0012637:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001263f:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0012647:	7f 74                	jg     c00126bd <VAS::~VAS()+0xf7>
c0012649:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001264d:	c1 e0 0a             	shl    eax,0xa
c0012650:	89 c2                	mov    edx,eax
c0012652:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012656:	01 d0                	add    eax,edx
c0012658:	c1 e0 0c             	shl    eax,0xc
c001265b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001265f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012664:	8b 00                	mov    eax,DWORD PTR [eax]
c0012666:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012669:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001266f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0012673:	6a 01                	push   0x1
c0012675:	50                   	push   eax
c0012676:	e8 8b fc ff ff       	call   c0012306 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c001267b:	83 c4 0c             	add    esp,0xc
c001267e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012686:	8b 00                	mov    eax,DWORD PTR [eax]
c0012688:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001268c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012690:	25 01 04 00 00       	and    eax,0x401
c0012695:	3d 01 04 00 00       	cmp    eax,0x401
c001269a:	75 1a                	jne    c00126b6 <VAS::~VAS()+0xf0>
c001269c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126a0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126a5:	83 ec 0c             	sub    esp,0xc
c00126a8:	50                   	push   eax
c00126a9:	e8 af c7 ff ff       	call   c000ee5d <Phys::freePage(unsigned long)>
c00126ae:	83 c4 10             	add    esp,0x10
c00126b1:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00126b6:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00126bb:	eb 82                	jmp    c001263f <VAS::~VAS()+0x79>
c00126bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126c1:	25 00 04 00 00       	and    eax,0x400
c00126c6:	74 1a                	je     c00126e2 <VAS::~VAS()+0x11c>
c00126c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00126cc:	25 00 f0 ff ff       	and    eax,0xfffff000
c00126d1:	83 ec 0c             	sub    esp,0xc
c00126d4:	50                   	push   eax
c00126d5:	e8 83 c7 ff ff       	call   c000ee5d <Phys::freePage(unsigned long)>
c00126da:	83 c4 10             	add    esp,0x10
c00126dd:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00126e2:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00126e7:	e9 1a ff ff ff       	jmp    c0012606 <VAS::~VAS()+0x40>
c00126ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126f3:	83 ec 0c             	sub    esp,0xc
c00126f6:	50                   	push   eax
c00126f7:	e8 57 fc ff ff       	call   c0012353 <Virt::freeKernelVirtualPages(unsigned long)>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012703:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012706:	83 ec 0c             	sub    esp,0xc
c0012709:	50                   	push   eax
c001270a:	e8 4e c7 ff ff       	call   c000ee5d <Phys::freePage(unsigned long)>
c001270f:	83 c4 10             	add    esp,0x10
c0012712:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012717:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001271c:	83 e8 01             	sub    eax,0x1
c001271f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0012724:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012729:	85 c0                	test   eax,eax
c001272b:	75 01                	jne    c001272e <VAS::~VAS()+0x168>
c001272d:	fb                   	sti    
c001272e:	90                   	nop
c001272f:	83 c4 2c             	add    esp,0x2c
c0012732:	c3                   	ret    
c0012733:	90                   	nop

c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012734:	55                   	push   ebp
c0012735:	57                   	push   edi
c0012736:	56                   	push   esi
c0012737:	53                   	push   ebx
c0012738:	83 ec 1c             	sub    esp,0x1c
c001273b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001273f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012743:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012749:	77 08                	ja     c0012753 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001274b:	0f 20 d8             	mov    eax,cr3
c001274e:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012751:	75 49                	jne    c001279c <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0012753:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012757:	09 d8                	or     eax,ebx
c0012759:	a9 ff 0f 00 00       	test   eax,0xfff
c001275e:	75 59                	jne    c00127b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0012760:	89 de                	mov    esi,ebx
c0012762:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012765:	c1 ee 16             	shr    esi,0x16
c0012768:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c001276f:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0012773:	74 56                	je     c00127cb <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0012775:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012779:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001277d:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012783:	c1 eb 0a             	shr    ebx,0xa
c0012786:	c1 e6 0c             	shl    esi,0xc
c0012789:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c001278f:	09 d0                	or     eax,edx
c0012791:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0012794:	83 c4 1c             	add    esp,0x1c
c0012797:	5b                   	pop    ebx
c0012798:	5e                   	pop    esi
c0012799:	5f                   	pop    edi
c001279a:	5d                   	pop    ebp
c001279b:	c3                   	ret    
c001279c:	83 ec 0c             	sub    esp,0xc
c001279f:	68 80 24 02 c0       	push   0xc0022480
c00127a4:	e8 bb 47 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00127a9:	83 c4 10             	add    esp,0x10
c00127ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127b0:	09 d8                	or     eax,ebx
c00127b2:	a9 ff 0f 00 00       	test   eax,0xfff
c00127b7:	74 a7                	je     c0012760 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00127b9:	83 ec 0c             	sub    esp,0xc
c00127bc:	68 e8 24 02 c0       	push   0xc00224e8
c00127c1:	e8 0c c5 ff ff       	call   c000ecd2 <KePanic(char const*)>
c00127c6:	83 c4 10             	add    esp,0x10
c00127c9:	eb 95                	jmp    c0012760 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00127cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127cf:	e8 f2 c6 ff ff       	call   c000eec6 <Phys::allocatePage()>
c00127d4:	83 ec 0c             	sub    esp,0xc
c00127d7:	89 c5                	mov    ebp,eax
c00127d9:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c00127df:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00127e3:	6a 01                	push   0x1
c00127e5:	e8 61 f8 ff ff       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c00127ea:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127f1:	6a 01                	push   0x1
c00127f3:	50                   	push   eax
c00127f4:	55                   	push   ebp
c00127f5:	81 cd 07 04 00 00    	or     ebp,0x407
c00127fb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127ff:	51                   	push   ecx
c0012800:	e8 19 01 00 00       	call   c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012805:	83 c4 1c             	add    esp,0x1c
c0012808:	68 00 10 00 00       	push   0x1000
c001280d:	6a 00                	push   0x0
c001280f:	50                   	push   eax
c0012810:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012814:	e8 d7 dc fe ff       	call   c00004f0 <memset>
c0012819:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001281d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012820:	e8 2e fb ff ff       	call   c0012353 <Virt::freeKernelVirtualPages(unsigned long)>
c0012825:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012829:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001282c:	83 c4 10             	add    esp,0x10
c001282f:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012832:	e9 3e ff ff ff       	jmp    c0012775 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012837:	90                   	nop

c0012838 <VAS::allocatePages(int, int)>:
c0012838:	55                   	push   ebp
c0012839:	57                   	push   edi
c001283a:	56                   	push   esi
c001283b:	53                   	push   ebx
c001283c:	83 ec 1c             	sub    esp,0x1c
c001283f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012843:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0012847:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c001284b:	75 71                	jne    c00128be <VAS::allocatePages(int, int)+0x86>
c001284d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012850:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012854:	85 c0                	test   eax,eax
c0012856:	74 4d                	je     c00128a5 <VAS::allocatePages(int, int)+0x6d>
c0012858:	89 dd                	mov    ebp,ebx
c001285a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001285e:	c1 e5 0c             	shl    ebp,0xc
c0012861:	01 c5                	add    ebp,eax
c0012863:	85 db                	test   ebx,ebx
c0012865:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0012868:	7e 29                	jle    c0012893 <VAS::allocatePages(int, int)+0x5b>
c001286a:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001286e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012872:	81 cf 00 04 00 00    	or     edi,0x400
c0012878:	e8 49 c6 ff ff       	call   c000eec6 <Phys::allocatePage()>
c001287d:	57                   	push   edi
c001287e:	53                   	push   ebx
c001287f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012885:	50                   	push   eax
c0012886:	56                   	push   esi
c0012887:	e8 a8 fe ff ff       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c001288c:	83 c4 10             	add    esp,0x10
c001288f:	39 dd                	cmp    ebp,ebx
c0012891:	75 e5                	jne    c0012878 <VAS::allocatePages(int, int)+0x40>
c0012893:	0f 20 d8             	mov    eax,cr3
c0012896:	0f 22 d8             	mov    cr3,eax
c0012899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001289d:	83 c4 1c             	add    esp,0x1c
c00128a0:	5b                   	pop    ebx
c00128a1:	5e                   	pop    esi
c00128a2:	5f                   	pop    edi
c00128a3:	5d                   	pop    ebp
c00128a4:	c3                   	ret    
c00128a5:	83 ec 0c             	sub    esp,0xc
c00128a8:	68 0c 25 02 c0       	push   0xc002250c
c00128ad:	e8 20 c4 ff ff       	call   c000ecd2 <KePanic(char const*)>
c00128b2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00128b5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00128b9:	83 c4 10             	add    esp,0x10
c00128bc:	eb 9a                	jmp    c0012858 <VAS::allocatePages(int, int)+0x20>
c00128be:	83 ec 0c             	sub    esp,0xc
c00128c1:	53                   	push   ebx
c00128c2:	e8 84 f7 ff ff       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c00128c7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00128cb:	83 c4 10             	add    esp,0x10
c00128ce:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00128d3:	77 37                	ja     c001290c <VAS::allocatePages(int, int)+0xd4>
c00128d5:	85 db                	test   ebx,ebx
c00128d7:	7e ba                	jle    c0012893 <VAS::allocatePages(int, int)+0x5b>
c00128d9:	c1 e3 0c             	shl    ebx,0xc
c00128dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00128e0:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00128e4:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00128e7:	81 cf 00 04 00 00    	or     edi,0x400
c00128ed:	89 c3                	mov    ebx,eax
c00128ef:	e8 d2 c5 ff ff       	call   c000eec6 <Phys::allocatePage()>
c00128f4:	57                   	push   edi
c00128f5:	53                   	push   ebx
c00128f6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00128fc:	50                   	push   eax
c00128fd:	56                   	push   esi
c00128fe:	e8 31 fe ff ff       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012903:	83 c4 10             	add    esp,0x10
c0012906:	39 dd                	cmp    ebp,ebx
c0012908:	75 e5                	jne    c00128ef <VAS::allocatePages(int, int)+0xb7>
c001290a:	eb 87                	jmp    c0012893 <VAS::allocatePages(int, int)+0x5b>
c001290c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0012910:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012915:	09 c2                	or     edx,eax
c0012917:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001291b:	eb b8                	jmp    c00128d5 <VAS::allocatePages(int, int)+0x9d>
c001291d:	90                   	nop

c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001291e:	55                   	push   ebp
c001291f:	57                   	push   edi
c0012920:	56                   	push   esi
c0012921:	53                   	push   ebx
c0012922:	83 ec 0c             	sub    esp,0xc
c0012925:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012929:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001292d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012931:	85 db                	test   ebx,ebx
c0012933:	7e 2f                	jle    c0012964 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0012935:	c1 e3 0c             	shl    ebx,0xc
c0012938:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001293c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012940:	01 d3                	add    ebx,edx
c0012942:	55                   	push   ebp
c0012943:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0012947:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001294b:	29 c2                	sub    edx,eax
c001294d:	01 f2                	add    edx,esi
c001294f:	52                   	push   edx
c0012950:	56                   	push   esi
c0012951:	81 c6 00 10 00 00    	add    esi,0x1000
c0012957:	57                   	push   edi
c0012958:	e8 d7 fd ff ff       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c001295d:	83 c4 10             	add    esp,0x10
c0012960:	39 de                	cmp    esi,ebx
c0012962:	75 de                	jne    c0012942 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0012964:	0f 20 d8             	mov    eax,cr3
c0012967:	0f 22 d8             	mov    cr3,eax
c001296a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001296e:	83 c4 0c             	add    esp,0xc
c0012971:	5b                   	pop    ebx
c0012972:	5e                   	pop    esi
c0012973:	5f                   	pop    edi
c0012974:	5d                   	pop    ebp
c0012975:	c3                   	ret    

c0012976 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012976:	55                   	push   ebp
c0012977:	57                   	push   edi
c0012978:	56                   	push   esi
c0012979:	53                   	push   ebx
c001297a:	83 ec 1c             	sub    esp,0x1c
c001297d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012981:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0012985:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012989:	09 f8                	or     eax,edi
c001298b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001298f:	a9 ff 0f 00 00       	test   eax,0xfff
c0012994:	75 4f                	jne    c00129e5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0012996:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001299a:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c001299d:	c1 eb 16             	shr    ebx,0x16
c00129a0:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c00129a7:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c00129ab:	74 52                	je     c00129ff <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c00129ad:	0f b6 f2             	movzx  esi,dl
c00129b0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00129b4:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00129b8:	c1 e8 0a             	shr    eax,0xa
c00129bb:	83 fe 01             	cmp    esi,0x1
c00129be:	19 d2                	sbb    edx,edx
c00129c0:	c1 e3 0c             	shl    ebx,0xc
c00129c3:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00129c9:	25 fc 0f 00 00       	and    eax,0xffc
c00129ce:	01 d8                	add    eax,ebx
c00129d0:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00129d4:	09 d9                	or     ecx,ebx
c00129d6:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00129dd:	83 c4 1c             	add    esp,0x1c
c00129e0:	5b                   	pop    ebx
c00129e1:	5e                   	pop    esi
c00129e2:	5f                   	pop    edi
c00129e3:	5d                   	pop    ebp
c00129e4:	c3                   	ret    
c00129e5:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00129e9:	83 ec 0c             	sub    esp,0xc
c00129ec:	68 38 25 02 c0       	push   0xc0022538
c00129f1:	e8 dc c2 ff ff       	call   c000ecd2 <KePanic(char const*)>
c00129f6:	83 c4 10             	add    esp,0x10
c00129f9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00129fd:	eb 97                	jmp    c0012996 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c00129ff:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012a03:	e8 be c4 ff ff       	call   c000eec6 <Phys::allocatePage()>
c0012a08:	83 ec 0c             	sub    esp,0xc
c0012a0b:	89 c5                	mov    ebp,eax
c0012a0d:	8b 0d d0 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bed0
c0012a13:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012a17:	6a 01                	push   0x1
c0012a19:	e8 2d f6 ff ff       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c0012a1e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012a25:	6a 01                	push   0x1
c0012a27:	50                   	push   eax
c0012a28:	55                   	push   ebp
c0012a29:	81 cd 07 04 00 00    	or     ebp,0x407
c0012a2f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012a33:	51                   	push   ecx
c0012a34:	e8 e5 fe ff ff       	call   c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012a39:	83 c4 1c             	add    esp,0x1c
c0012a3c:	68 00 10 00 00       	push   0x1000
c0012a41:	6a 00                	push   0x0
c0012a43:	50                   	push   eax
c0012a44:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012a48:	e8 a3 da fe ff       	call   c00004f0 <memset>
c0012a4d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012a51:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012a54:	e8 fa f8 ff ff       	call   c0012353 <Virt::freeKernelVirtualPages(unsigned long)>
c0012a59:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012a5c:	83 c4 10             	add    esp,0x10
c0012a5f:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0012a62:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012a66:	e9 42 ff ff ff       	jmp    c00129ad <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0012a6b:	90                   	nop

c0012a6c <VAS::VAS(bool)>:
c0012a6c:	53                   	push   ebx
c0012a6d:	83 ec 28             	sub    esp,0x28
c0012a70:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012a74:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012a78:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a7c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012a83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012a8e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012a92:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012a96:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012a99:	e8 28 c4 ff ff       	call   c000eec6 <Phys::allocatePage()>
c0012a9e:	89 c2                	mov    edx,eax
c0012aa0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012aa4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0012aa7:	8b 1d d0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bed0
c0012aad:	83 ec 0c             	sub    esp,0xc
c0012ab0:	6a 01                	push   0x1
c0012ab2:	e8 94 f5 ff ff       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c0012ab7:	83 c4 10             	add    esp,0x10
c0012aba:	89 c2                	mov    edx,eax
c0012abc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ac0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012ac3:	83 ec 0c             	sub    esp,0xc
c0012ac6:	6a 03                	push   0x3
c0012ac8:	6a 01                	push   0x1
c0012aca:	52                   	push   edx
c0012acb:	50                   	push   eax
c0012acc:	53                   	push   ebx
c0012acd:	e8 4c fe ff ff       	call   c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012ad2:	83 c4 20             	add    esp,0x20
c0012ad5:	89 c2                	mov    edx,eax
c0012ad7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012adb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012ade:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012ae6:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012aee:	7f 1d                	jg     c0012b0d <VAS::VAS(bool)+0xa1>
c0012af0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012af4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012af7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012afb:	c1 e2 02             	shl    edx,0x2
c0012afe:	01 d0                	add    eax,edx
c0012b00:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012b06:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0012b0b:	eb d9                	jmp    c0012ae6 <VAS::VAS(bool)+0x7a>
c0012b0d:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012b15:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0012b1d:	7f 59                	jg     c0012b78 <VAS::VAS(bool)+0x10c>
c0012b1f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b23:	2d 00 02 00 00       	sub    eax,0x200
c0012b28:	c1 e0 0c             	shl    eax,0xc
c0012b2b:	89 c2                	mov    edx,eax
c0012b2d:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012b32:	89 d1                	mov    ecx,edx
c0012b34:	09 c1                	or     ecx,eax
c0012b36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b3d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b41:	c1 e2 02             	shl    edx,0x2
c0012b44:	01 d0                	add    eax,edx
c0012b46:	83 c9 05             	or     ecx,0x5
c0012b49:	89 ca                	mov    edx,ecx
c0012b4b:	89 10                	mov    DWORD PTR [eax],edx
c0012b4d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b51:	2d 40 03 00 00       	sub    eax,0x340
c0012b56:	83 f8 7f             	cmp    eax,0x7f
c0012b59:	77 16                	ja     c0012b71 <VAS::VAS(bool)+0x105>
c0012b5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b5f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b62:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012b66:	c1 e2 02             	shl    edx,0x2
c0012b69:	01 d0                	add    eax,edx
c0012b6b:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012b71:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0012b76:	eb 9d                	jmp    c0012b15 <VAS::VAS(bool)+0xa9>
c0012b78:	8b 15 68 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c768
c0012b7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b82:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012b85:	05 20 0c 00 00       	add    eax,0xc20
c0012b8a:	81 ca 03 40 00 00    	or     edx,0x4003
c0012b90:	89 10                	mov    DWORD PTR [eax],edx
c0012b92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012b96:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012b99:	a1 68 c7 02 c0       	mov    eax,ds:0xc002c768
c0012b9e:	09 c2                	or     edx,eax
c0012ba0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012ba4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012ba7:	05 fc 0f 00 00       	add    eax,0xffc
c0012bac:	83 ca 03             	or     edx,0x3
c0012baf:	89 10                	mov    DWORD PTR [eax],edx
c0012bb1:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012bb6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bbc:	83 ec 0c             	sub    esp,0xc
c0012bbf:	50                   	push   eax
c0012bc0:	e8 d7 66 ff ff       	call   c000929c <Device::getName()>
c0012bc5:	83 c4 10             	add    esp,0x10
c0012bc8:	83 ec 08             	sub    esp,0x8
c0012bcb:	68 08 27 02 c0       	push   0xc0022708
c0012bd0:	50                   	push   eax
c0012bd1:	e8 7a db fe ff       	call   c0000750 <strcmp>
c0012bd6:	83 c4 10             	add    esp,0x10
c0012bd9:	85 c0                	test   eax,eax
c0012bdb:	0f 94 c0             	sete   al
c0012bde:	0f b6 c0             	movzx  eax,al
c0012be1:	85 c0                	test   eax,eax
c0012be3:	74 68                	je     c0012c4d <VAS::VAS(bool)+0x1e1>
c0012be5:	fa                   	cli    
c0012be6:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012beb:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012bf1:	05 68 09 00 00       	add    eax,0x968
c0012bf6:	83 ec 0c             	sub    esp,0xc
c0012bf9:	50                   	push   eax
c0012bfa:	e8 63 b7 ff ff       	call   c000e362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012bff:	83 c4 10             	add    esp,0x10
c0012c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c07:	89 c3                	mov    ebx,eax
c0012c09:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0012c0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c14:	05 68 09 00 00       	add    eax,0x968
c0012c19:	83 ec 0c             	sub    esp,0xc
c0012c1c:	50                   	push   eax
c0012c1d:	e8 40 b7 ff ff       	call   c000e362 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012c22:	83 c4 10             	add    esp,0x10
c0012c25:	83 ec 08             	sub    esp,0x8
c0012c28:	50                   	push   eax
c0012c29:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c2d:	e8 02 f7 ff ff       	call   c0012334 <VAS::getPageTableEntry(unsigned long)>
c0012c32:	83 c4 10             	add    esp,0x10
c0012c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c37:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c3c:	6a 11                	push   0x11
c0012c3e:	53                   	push   ebx
c0012c3f:	50                   	push   eax
c0012c40:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012c44:	e8 eb fa ff ff       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012c49:	83 c4 10             	add    esp,0x10
c0012c4c:	fb                   	sti    
c0012c4d:	90                   	nop
c0012c4e:	83 c4 28             	add    esp,0x28
c0012c51:	5b                   	pop    ebx
c0012c52:	c3                   	ret    
c0012c53:	90                   	nop

c0012c54 <VAS::evict(unsigned long)>:
c0012c54:	55                   	push   ebp
c0012c55:	57                   	push   edi
c0012c56:	56                   	push   esi
c0012c57:	53                   	push   ebx
c0012c58:	83 ec 1c             	sub    esp,0x1c
c0012c5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012c5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012c63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012c67:	e8 3d f5 ff ff       	call   c00121a9 <Virt::allocateSwapfilePage()>
c0012c6c:	89 c7                	mov    edi,eax
c0012c6e:	a1 0c 42 02 c0       	mov    eax,ds:0xc002420c
c0012c73:	85 c0                	test   eax,eax
c0012c75:	7e 40                	jle    c0012cb7 <VAS::evict(unsigned long)+0x63>
c0012c77:	89 ee                	mov    esi,ebp
c0012c79:	31 db                	xor    ebx,ebx
c0012c7b:	83 ec 0c             	sub    esp,0xc
c0012c7e:	57                   	push   edi
c0012c7f:	e8 0f f5 ff ff       	call   c0012193 <Virt::swapIDToSector(unsigned long)>
c0012c84:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c87:	01 d8                	add    eax,ebx
c0012c89:	6a 01                	push   0x1
c0012c8b:	31 d2                	xor    edx,edx
c0012c8d:	83 c3 01             	add    ebx,0x1
c0012c90:	52                   	push   edx
c0012c91:	81 c6 00 02 00 00    	add    esi,0x200
c0012c97:	50                   	push   eax
c0012c98:	0f be 05 18 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024218
c0012c9f:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012ca6:	50                   	push   eax
c0012ca7:	e8 9c 74 ff ff       	call   c000a148 <LogicalDisk::write(unsigned long long, int, void*)>
c0012cac:	83 c4 20             	add    esp,0x20
c0012caf:	39 1d 0c 42 02 c0    	cmp    DWORD PTR ds:0xc002420c,ebx
c0012cb5:	7f c4                	jg     c0012c7b <VAS::evict(unsigned long)+0x27>
c0012cb7:	83 ec 08             	sub    esp,0x8
c0012cba:	c1 e7 0c             	shl    edi,0xc
c0012cbd:	55                   	push   ebp
c0012cbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012cc2:	50                   	push   eax
c0012cc3:	e8 6c f6 ff ff       	call   c0012334 <VAS::getPageTableEntry(unsigned long)>
c0012cc8:	8b 10                	mov    edx,DWORD PTR [eax]
c0012cca:	89 d3                	mov    ebx,edx
c0012ccc:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012cd2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012cd8:	09 d7                	or     edi,edx
c0012cda:	89 38                	mov    DWORD PTR [eax],edi
c0012cdc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cdf:	8b 15 c8 be 02 c0    	mov    edx,DWORD PTR ds:0xc002bec8
c0012ce5:	83 c2 01             	add    edx,0x1
c0012ce8:	89 15 c8 be 02 c0    	mov    DWORD PTR ds:0xc002bec8,edx
c0012cee:	e8 6a c1 ff ff       	call   c000ee5d <Phys::freePage(unsigned long)>
c0012cf3:	0f 20 d8             	mov    eax,cr3
c0012cf6:	0f 22 d8             	mov    cr3,eax
c0012cf9:	8b 0d c8 be 02 c0    	mov    ecx,DWORD PTR ds:0xc002bec8
c0012cff:	51                   	push   ecx
c0012d00:	55                   	push   ebp
c0012d01:	53                   	push   ebx
c0012d02:	68 5c 25 02 c0       	push   0xc002255c
c0012d07:	e8 58 42 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012d0c:	a1 c4 be 02 c0       	mov    eax,ds:0xc002bec4
c0012d11:	c7 44 24 50 16 27 02 c0 	mov    DWORD PTR [esp+0x50],0xc0022716
c0012d19:	8d 50 01             	lea    edx,[eax+0x1]
c0012d1c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0012d20:	89 15 c4 be 02 c0    	mov    DWORD PTR ds:0xc002bec4,edx
c0012d26:	83 c4 3c             	add    esp,0x3c
c0012d29:	5b                   	pop    ebx
c0012d2a:	5e                   	pop    esi
c0012d2b:	5f                   	pop    edi
c0012d2c:	5d                   	pop    ebp
c0012d2d:	e9 32 42 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0012d32 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012d32:	55                   	push   ebp
c0012d33:	57                   	push   edi
c0012d34:	56                   	push   esi
c0012d35:	53                   	push   ebx
c0012d36:	81 ec 1c 10 00 00    	sub    esp,0x101c
c0012d3c:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c0012d43:	89 f3                	mov    ebx,esi
c0012d45:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012d4b:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0012d51:	77 22                	ja     c0012d75 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c0012d53:	83 ec 08             	sub    esp,0x8
c0012d56:	56                   	push   esi
c0012d57:	68 39 27 02 c0       	push   0xc0022739
c0012d5c:	e8 03 42 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012d61:	83 c4 10             	add    esp,0x10
c0012d64:	85 db                	test   ebx,ebx
c0012d66:	75 2a                	jne    c0012d92 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c0012d68:	31 c0                	xor    eax,eax
c0012d6a:	81 c4 1c 10 00 00    	add    esp,0x101c
c0012d70:	5b                   	pop    ebx
c0012d71:	5e                   	pop    esi
c0012d72:	5f                   	pop    edi
c0012d73:	5d                   	pop    ebp
c0012d74:	c3                   	ret    
c0012d75:	83 ec 0c             	sub    esp,0xc
c0012d78:	68 27 27 02 c0       	push   0xc0022727
c0012d7d:	e8 50 bf ff ff       	call   c000ecd2 <KePanic(char const*)>
c0012d82:	5f                   	pop    edi
c0012d83:	5d                   	pop    ebp
c0012d84:	56                   	push   esi
c0012d85:	68 39 27 02 c0       	push   0xc0022739
c0012d8a:	e8 d5 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012d8f:	83 c4 10             	add    esp,0x10
c0012d92:	83 ec 08             	sub    esp,0x8
c0012d95:	53                   	push   ebx
c0012d96:	8b b4 24 3c 10 00 00 	mov    esi,DWORD PTR [esp+0x103c]
c0012d9d:	56                   	push   esi
c0012d9e:	e8 91 f5 ff ff       	call   c0012334 <VAS::getPageTableEntry(unsigned long)>
c0012da3:	83 c4 10             	add    esp,0x10
c0012da6:	89 c2                	mov    edx,eax
c0012da8:	85 c0                	test   eax,eax
c0012daa:	74 bc                	je     c0012d68 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0012dac:	8b 28                	mov    ebp,DWORD PTR [eax]
c0012dae:	f7 c5 00 02 00 00    	test   ebp,0x200
c0012db4:	0f 85 c0 00 00 00    	jne    c0012e7a <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c0012dba:	89 e8                	mov    eax,ebp
c0012dbc:	25 01 04 00 00       	and    eax,0x401
c0012dc1:	3d 00 04 00 00       	cmp    eax,0x400
c0012dc6:	75 a0                	jne    c0012d68 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c0012dc8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012dcc:	c1 ed 0c             	shr    ebp,0xc
c0012dcf:	e8 f2 c0 ff ff       	call   c000eec6 <Phys::allocatePage()>
c0012dd4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012dd8:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012dda:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0012de0:	09 c1                	or     ecx,eax
c0012de2:	81 c9 01 08 00 00    	or     ecx,0x801
c0012de8:	89 0a                	mov    DWORD PTR [edx],ecx
c0012dea:	8b 15 0c 42 02 c0    	mov    edx,DWORD PTR ds:0xc002420c
c0012df0:	85 d2                	test   edx,edx
c0012df2:	7e 40                	jle    c0012e34 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0012df4:	89 df                	mov    edi,ebx
c0012df6:	31 f6                	xor    esi,esi
c0012df8:	83 ec 0c             	sub    esp,0xc
c0012dfb:	55                   	push   ebp
c0012dfc:	e8 92 f3 ff ff       	call   c0012193 <Virt::swapIDToSector(unsigned long)>
c0012e01:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012e04:	01 f0                	add    eax,esi
c0012e06:	6a 01                	push   0x1
c0012e08:	31 d2                	xor    edx,edx
c0012e0a:	83 c6 01             	add    esi,0x1
c0012e0d:	52                   	push   edx
c0012e0e:	81 c7 00 02 00 00    	add    edi,0x200
c0012e14:	50                   	push   eax
c0012e15:	0f be 05 18 42 02 c0 	movsx  eax,BYTE PTR ds:0xc0024218
c0012e1c:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c0012e23:	50                   	push   eax
c0012e24:	e8 b3 72 ff ff       	call   c000a0dc <LogicalDisk::read(unsigned long long, int, void*)>
c0012e29:	83 c4 20             	add    esp,0x20
c0012e2c:	39 35 0c 42 02 c0    	cmp    DWORD PTR ds:0xc002420c,esi
c0012e32:	7f c4                	jg     c0012df8 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c0012e34:	83 ec 04             	sub    esp,0x4
c0012e37:	a1 c8 be 02 c0       	mov    eax,ds:0xc002bec8
c0012e3c:	83 e8 01             	sub    eax,0x1
c0012e3f:	50                   	push   eax
c0012e40:	a3 c8 be 02 c0       	mov    ds:0xc002bec8,eax
c0012e45:	53                   	push   ebx
c0012e46:	68 4c 27 02 c0       	push   0xc002274c
c0012e4b:	e8 14 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e50:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012e53:	e8 18 f3 ff ff       	call   c0012170 <Virt::freeSwapfilePage(unsigned long)>
c0012e58:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0012e5d:	83 c4 10             	add    esp,0x10
c0012e60:	83 e8 01             	sub    eax,0x1
c0012e63:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0012e68:	85 c0                	test   eax,eax
c0012e6a:	75 01                	jne    c0012e6d <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c0012e6c:	fb                   	sti    
c0012e6d:	0f 20 d8             	mov    eax,cr3
c0012e70:	0f 22 d8             	mov    cr3,eax
c0012e73:	b0 01                	mov    al,0x1
c0012e75:	e9 f0 fe ff ff       	jmp    c0012d6a <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0012e7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e7e:	83 ec 0c             	sub    esp,0xc
c0012e81:	68 8c 25 02 c0       	push   0xc002258c
c0012e86:	e8 d9 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e8b:	e8 36 c0 ff ff       	call   c000eec6 <Phys::allocatePage()>
c0012e90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012e94:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012e96:	83 c9 01             	or     ecx,0x1
c0012e99:	89 0a                	mov    DWORD PTR [edx],ecx
c0012e9b:	0f 20 d9             	mov    ecx,cr3
c0012e9e:	0f 22 d9             	mov    cr3,ecx
c0012ea1:	bd 00 10 00 00       	mov    ebp,0x1000
c0012ea6:	89 de                	mov    esi,ebx
c0012ea8:	8d 7c 24 20          	lea    edi,[esp+0x20]
c0012eac:	89 e9                	mov    ecx,ebp
c0012eae:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012eb0:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0012eb2:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c0012eb8:	09 c8                	or     eax,ecx
c0012eba:	83 c8 02             	or     eax,0x2
c0012ebd:	89 02                	mov    DWORD PTR [edx],eax
c0012ebf:	0f 20 d8             	mov    eax,cr3
c0012ec2:	0f 22 d8             	mov    cr3,eax
c0012ec5:	8d 74 24 20          	lea    esi,[esp+0x20]
c0012ec9:	89 df                	mov    edi,ebx
c0012ecb:	89 e9                	mov    ecx,ebp
c0012ecd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012ecf:	b0 01                	mov    al,0x1
c0012ed1:	83 c4 10             	add    esp,0x10
c0012ed4:	e9 91 fe ff ff       	jmp    c0012d6a <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c0012ed9:	90                   	nop

c0012eda <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0012eda:	55                   	push   ebp
c0012edb:	57                   	push   edi
c0012edc:	56                   	push   esi
c0012edd:	53                   	push   ebx
c0012ede:	83 ec 28             	sub    esp,0x28
c0012ee1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0012ee5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012ee9:	50                   	push   eax
c0012eea:	e8 5c f1 ff ff       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c0012eef:	83 c4 0c             	add    esp,0xc
c0012ef2:	89 c5                	mov    ebp,eax
c0012ef4:	6a 07                	push   0x7
c0012ef6:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012efa:	52                   	push   edx
c0012efb:	56                   	push   esi
c0012efc:	e8 37 f9 ff ff       	call   c0012838 <VAS::allocatePages(int, int)>
c0012f01:	83 c4 10             	add    esp,0x10
c0012f04:	89 c7                	mov    edi,eax
c0012f06:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0012f0a:	85 c9                	test   ecx,ecx
c0012f0c:	74 2f                	je     c0012f3d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0012f0e:	31 db                	xor    ebx,ebx
c0012f10:	e8 b1 bf ff ff       	call   c000eec6 <Phys::allocatePage()>
c0012f15:	83 c3 01             	add    ebx,0x1
c0012f18:	6a 03                	push   0x3
c0012f1a:	55                   	push   ebp
c0012f1b:	50                   	push   eax
c0012f1c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012f20:	56                   	push   esi
c0012f21:	e8 0e f8 ff ff       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f26:	6a 07                	push   0x7
c0012f28:	57                   	push   edi
c0012f29:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012f2d:	50                   	push   eax
c0012f2e:	56                   	push   esi
c0012f2f:	e8 00 f8 ff ff       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012f34:	83 c4 20             	add    esp,0x20
c0012f37:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0012f3b:	75 d3                	jne    c0012f10 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0012f3d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012f41:	89 28                	mov    DWORD PTR [eax],ebp
c0012f43:	83 c4 1c             	add    esp,0x1c
c0012f46:	89 f8                	mov    eax,edi
c0012f48:	5b                   	pop    ebx
c0012f49:	5e                   	pop    esi
c0012f4a:	5f                   	pop    edi
c0012f4b:	5d                   	pop    ebp
c0012f4c:	c3                   	ret    
c0012f4d:	90                   	nop

c0012f4e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0012f4e:	53                   	push   ebx
c0012f4f:	83 ec 14             	sub    esp,0x14
c0012f52:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0012f56:	68 ac 25 02 c0       	push   0xc00225ac
c0012f5b:	e8 04 40 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f60:	c7 04 24 0c 26 02 c0 	mov    DWORD PTR [esp],0xc002260c
c0012f67:	e8 f8 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012f6c:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0012f70:	83 c4 18             	add    esp,0x18
c0012f73:	5b                   	pop    ebx
c0012f74:	e9 da f3 ff ff       	jmp    c0012353 <Virt::freeKernelVirtualPages(unsigned long)>
c0012f79:	90                   	nop

c0012f7a <VAS::scanForEviction()>:
c0012f7a:	57                   	push   edi
c0012f7b:	56                   	push   esi
c0012f7c:	31 f6                	xor    esi,esi
c0012f7e:	53                   	push   ebx
c0012f7f:	83 ec 10             	sub    esp,0x10
c0012f82:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012f86:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0012f89:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012f8f:	75 0e                	jne    c0012f9f <VAS::scanForEviction()+0x25>
c0012f91:	89 da                	mov    edx,ebx
c0012f93:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012f96:	c1 ea 16             	shr    edx,0x16
c0012f99:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012f9d:	74 57                	je     c0012ff6 <VAS::scanForEviction()+0x7c>
c0012f9f:	53                   	push   ebx
c0012fa0:	57                   	push   edi
c0012fa1:	e8 8e f3 ff ff       	call   c0012334 <VAS::getPageTableEntry(unsigned long)>
c0012fa6:	5a                   	pop    edx
c0012fa7:	8b 10                	mov    edx,DWORD PTR [eax]
c0012fa9:	59                   	pop    ecx
c0012faa:	89 d1                	mov    ecx,edx
c0012fac:	c1 e9 0c             	shr    ecx,0xc
c0012faf:	74 10                	je     c0012fc1 <VAS::scanForEviction()+0x47>
c0012fb1:	89 d1                	mov    ecx,edx
c0012fb3:	81 e1 01 08 00 00    	and    ecx,0x801
c0012fb9:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0012fbf:	74 40                	je     c0013001 <VAS::scanForEviction()+0x87>
c0012fc1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012fc7:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0012fcd:	76 2d                	jbe    c0012ffc <VAS::scanForEviction()+0x82>
c0012fcf:	83 c6 01             	add    esi,0x1
c0012fd2:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0012fd9:	83 fe 03             	cmp    esi,0x3
c0012fdc:	74 32                	je     c0013010 <VAS::scanForEviction()+0x96>
c0012fde:	31 db                	xor    ebx,ebx
c0012fe0:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012fe6:	75 b7                	jne    c0012f9f <VAS::scanForEviction()+0x25>
c0012fe8:	89 da                	mov    edx,ebx
c0012fea:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012fed:	c1 ea 16             	shr    edx,0x16
c0012ff0:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012ff4:	75 a9                	jne    c0012f9f <VAS::scanForEviction()+0x25>
c0012ff6:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012ffc:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0012fff:	eb 88                	jmp    c0012f89 <VAS::scanForEviction()+0xf>
c0013001:	f6 c2 20             	test   dl,0x20
c0013004:	74 13                	je     c0013019 <VAS::scanForEviction()+0x9f>
c0013006:	83 e2 df             	and    edx,0xffffffdf
c0013009:	89 10                	mov    DWORD PTR [eax],edx
c001300b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001300e:	eb b1                	jmp    c0012fc1 <VAS::scanForEviction()+0x47>
c0013010:	83 c4 10             	add    esp,0x10
c0013013:	31 c0                	xor    eax,eax
c0013015:	5b                   	pop    ebx
c0013016:	5e                   	pop    esi
c0013017:	5f                   	pop    edi
c0013018:	c3                   	ret    
c0013019:	83 ec 08             	sub    esp,0x8
c001301c:	89 d0                	mov    eax,edx
c001301e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013023:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013027:	53                   	push   ebx
c0013028:	68 61 27 02 c0       	push   0xc0022761
c001302d:	e8 32 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013032:	58                   	pop    eax
c0013033:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013036:	5a                   	pop    edx
c0013037:	51                   	push   ecx
c0013038:	57                   	push   edi
c0013039:	e8 16 fc ff ff       	call   c0012c54 <VAS::evict(unsigned long)>
c001303e:	5b                   	pop    ebx
c001303f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013042:	5e                   	pop    esi
c0013043:	50                   	push   eax
c0013044:	68 75 27 02 c0       	push   0xc0022775
c0013049:	e8 16 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001304e:	58                   	pop    eax
c001304f:	5a                   	pop    edx
c0013050:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013054:	50                   	push   eax
c0013055:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013059:	68 88 27 02 c0       	push   0xc0022788
c001305e:	e8 01 3f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013063:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013066:	83 c4 10             	add    esp,0x10
c0013069:	81 c1 00 10 00 00    	add    ecx,0x1000
c001306f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013073:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	5b                   	pop    ebx
c001307a:	5e                   	pop    esi
c001307b:	5f                   	pop    edi
c001307c:	c3                   	ret    

c001307d <mapVASFirstTime>:
c001307d:	55                   	push   ebp
c001307e:	57                   	push   edi
c001307f:	56                   	push   esi
c0013080:	53                   	push   ebx
c0013081:	83 ec 0c             	sub    esp,0xc
c0013084:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013089:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001308c:	83 fa 01             	cmp    edx,0x1
c001308f:	0f 84 cb 00 00 00    	je     c0013160 <mapVASFirstTime+0xe3>
c0013095:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013098:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c001309b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c00130a0:	c1 e5 15             	shl    ebp,0x15
c00130a3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c00130a8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c00130ae:	29 eb                	sub    ebx,ebp
c00130b0:	29 ef                	sub    edi,ebp
c00130b2:	e8 0f be ff ff       	call   c000eec6 <Phys::allocatePage()>
c00130b7:	83 ec 0c             	sub    esp,0xc
c00130ba:	68 03 04 00 00       	push   0x403
c00130bf:	6a 01                	push   0x1
c00130c1:	53                   	push   ebx
c00130c2:	81 eb 00 10 00 00    	sub    ebx,0x1000
c00130c8:	50                   	push   eax
c00130c9:	56                   	push   esi
c00130ca:	e8 4f f8 ff ff       	call   c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00130cf:	83 c4 20             	add    esp,0x20
c00130d2:	39 fb                	cmp    ebx,edi
c00130d4:	75 dc                	jne    c00130b2 <mapVASFirstTime+0x35>
c00130d6:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c00130db:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c00130e0:	29 eb                	sub    ebx,ebp
c00130e2:	29 ef                	sub    edi,ebp
c00130e4:	e8 dd bd ff ff       	call   c000eec6 <Phys::allocatePage()>
c00130e9:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c00130ed:	83 fa 01             	cmp    edx,0x1
c00130f0:	19 d2                	sbb    edx,edx
c00130f2:	83 ec 0c             	sub    esp,0xc
c00130f5:	83 e2 04             	and    edx,0x4
c00130f8:	81 c2 03 04 00 00    	add    edx,0x403
c00130fe:	52                   	push   edx
c00130ff:	6a 01                	push   0x1
c0013101:	53                   	push   ebx
c0013102:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013108:	50                   	push   eax
c0013109:	56                   	push   esi
c001310a:	e8 0f f8 ff ff       	call   c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001310f:	83 c4 20             	add    esp,0x20
c0013112:	39 df                	cmp    edi,ebx
c0013114:	75 ce                	jne    c00130e4 <mapVASFirstTime+0x67>
c0013116:	83 ec 0c             	sub    esp,0xc
c0013119:	bb 7c 60 02 c0       	mov    ebx,0xc002607c
c001311e:	6a 04                	push   0x4
c0013120:	81 eb 00 50 02 c0    	sub    ebx,0xc0025000
c0013126:	6a ff                	push   0xffffffff
c0013128:	c1 eb 0c             	shr    ebx,0xc
c001312b:	53                   	push   ebx
c001312c:	68 00 50 02 c0       	push   0xc0025000
c0013131:	56                   	push   esi
c0013132:	e8 97 f3 ff ff       	call   c00124ce <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013137:	83 c4 14             	add    esp,0x14
c001313a:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001313f:	6a 04                	push   0x4
c0013141:	6a ff                	push   0xffffffff
c0013143:	53                   	push   ebx
c0013144:	68 00 50 02 c0       	push   0xc0025000
c0013149:	50                   	push   eax
c001314a:	e8 7f f3 ff ff       	call   c00124ce <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c001314f:	0f 20 d8             	mov    eax,cr3
c0013152:	0f 22 d8             	mov    cr3,eax
c0013155:	83 c4 20             	add    esp,0x20
c0013158:	83 c4 0c             	add    esp,0xc
c001315b:	5b                   	pop    ebx
c001315c:	5e                   	pop    esi
c001315d:	5f                   	pop    edi
c001315e:	5d                   	pop    ebp
c001315f:	c3                   	ret    
c0013160:	83 ec 0c             	sub    esp,0xc
c0013163:	68 95 27 02 c0       	push   0xc0022795
c0013168:	e8 f7 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001316d:	83 c4 10             	add    esp,0x10
c0013170:	83 c4 0c             	add    esp,0xc
c0013173:	5b                   	pop    ebx
c0013174:	5e                   	pop    esi
c0013175:	5f                   	pop    edi
c0013176:	5d                   	pop    ebp
c0013177:	c3                   	ret    

c0013178 <SysEject(regs*)>:
c0013178:	83 ec 0c             	sub    esp,0xc
c001317b:	83 ca ff             	or     edx,0xffffffff
c001317e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013182:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013185:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001318a:	83 e9 41             	sub    ecx,0x41
c001318d:	83 f9 19             	cmp    ecx,0x19
c0013190:	77 18                	ja     c00131aa <SysEject(regs*)+0x32>
c0013192:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c0013199:	85 c9                	test   ecx,ecx
c001319b:	74 0d                	je     c00131aa <SysEject(regs*)+0x32>
c001319d:	83 ec 0c             	sub    esp,0xc
c00131a0:	51                   	push   ecx
c00131a1:	e8 cc 6e ff ff       	call   c000a072 <LogicalDisk::eject()>
c00131a6:	83 c4 10             	add    esp,0x10
c00131a9:	99                   	cdq    
c00131aa:	83 c4 0c             	add    esp,0xc
c00131ad:	c3                   	ret    

c00131ae <SysExit(regs*)>:
c00131ae:	83 ec 18             	sub    esp,0x18
c00131b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00131b5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00131b8:	e8 4b 2a 00 00       	call   c0015c08 <terminateTask(int)>
c00131bd:	83 c8 ff             	or     eax,0xffffffff
c00131c0:	83 c4 1c             	add    esp,0x1c
c00131c3:	89 c2                	mov    edx,eax
c00131c5:	c3                   	ret    

c00131c6 <SysGetCwd(regs*)>:
c00131c6:	83 ec 10             	sub    esp,0x10
c00131c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00131cd:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00131d0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00131d3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131d8:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00131db:	e8 e6 4b ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c00131e0:	83 c4 1c             	add    esp,0x1c
c00131e3:	99                   	cdq    
c00131e4:	c3                   	ret    

c00131e5 <SysGetPID(regs*)>:
c00131e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00131ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00131ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00131ef:	99                   	cdq    
c00131f0:	c3                   	ret    

c00131f1 <SysGetRAMData(regs*)>:
c00131f1:	8b 0d ac bd 02 c0    	mov    ecx,DWORD PTR ds:0xc002bdac
c00131f7:	69 05 a8 bd 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc002bda8,0xc8
c0013201:	99                   	cdq    
c0013202:	f7 f9                	idiv   ecx
c0013204:	c1 e0 18             	shl    eax,0x18
c0013207:	09 c8                	or     eax,ecx
c0013209:	99                   	cdq    
c001320a:	c3                   	ret    

c001320b <SysGetVGAPtr(regs*)>:
c001320b:	55                   	push   ebp
c001320c:	57                   	push   edi
c001320d:	56                   	push   esi
c001320e:	53                   	push   ebx
c001320f:	83 ec 18             	sub    esp,0x18
c0013212:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013216:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013219:	e8 b6 24 00 00       	call   c00156d4 <Thr::processFromPID(int)>
c001321e:	83 c4 10             	add    esp,0x10
c0013221:	89 c1                	mov    ecx,eax
c0013223:	b8 01 00 00 00       	mov    eax,0x1
c0013228:	85 c9                	test   ecx,ecx
c001322a:	74 57                	je     c0013283 <SysGetVGAPtr(regs*)+0x78>
c001322c:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013232:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013236:	74 0c                	je     c0013244 <SysGetVGAPtr(regs*)+0x39>
c0013238:	83 ec 0c             	sub    esp,0xc
c001323b:	55                   	push   ebp
c001323c:	e8 d4 de ff ff       	call   c0011115 <setActiveTerminal(VgaText*)>
c0013241:	83 c4 10             	add    esp,0x10
c0013244:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013247:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001324a:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001324f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013251:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013254:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013257:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001325d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013260:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013263:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013269:	50                   	push   eax
c001326a:	50                   	push   eax
c001326b:	68 ae 27 02 c0       	push   0xc00227ae
c0013270:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013273:	05 a8 0f 00 00       	add    eax,0xfa8
c0013278:	50                   	push   eax
c0013279:	e8 c2 d3 fe ff       	call   c0000640 <strcpy>
c001327e:	83 c4 10             	add    esp,0x10
c0013281:	31 c0                	xor    eax,eax
c0013283:	83 c4 0c             	add    esp,0xc
c0013286:	31 d2                	xor    edx,edx
c0013288:	5b                   	pop    ebx
c0013289:	5e                   	pop    esi
c001328a:	5f                   	pop    edi
c001328b:	5d                   	pop    ebp
c001328c:	c3                   	ret    
c001328d:	66 90                	xchg   ax,ax
c001328f:	90                   	nop

c0013290 <SysKill(regs*)>:
c0013290:	53                   	push   ebx
c0013291:	83 ec 08             	sub    esp,0x8
c0013294:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013298:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001329c:	75 16                	jne    c00132b4 <SysKill(regs*)+0x24>
c001329e:	83 ec 0c             	sub    esp,0xc
c00132a1:	68 b8 27 02 c0       	push   0xc00227b8
c00132a6:	e8 27 ba ff ff       	call   c000ecd2 <KePanic(char const*)>
c00132ab:	83 c4 10             	add    esp,0x10
c00132ae:	e9 89 00 00 00       	jmp    c001333c <SysKill(regs*)+0xac>
c00132b3:	90                   	nop
c00132b4:	83 ec 0c             	sub    esp,0xc
c00132b7:	68 cc c6 02 c0       	push   0xc002c6cc
c00132bc:	e8 87 cb 00 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00132c1:	8d 76 00             	lea    esi,[esi+0x0]
c00132c4:	83 c4 10             	add    esp,0x10
c00132c7:	85 c0                	test   eax,eax
c00132c9:	74 19                	je     c00132e4 <SysKill(regs*)+0x54>
c00132cb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00132ce:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00132d1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00132d3:	74 33                	je     c0013308 <SysKill(regs*)+0x78>
c00132d5:	52                   	push   edx
c00132d6:	52                   	push   edx
c00132d7:	50                   	push   eax
c00132d8:	68 cc c6 02 c0       	push   0xc002c6cc
c00132dd:	e8 72 d0 00 00       	call   c0020354 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00132e2:	eb e0                	jmp    c00132c4 <SysKill(regs*)+0x34>
c00132e4:	83 ec 0c             	sub    esp,0xc
c00132e7:	68 c0 c6 02 c0       	push   0xc002c6c0
c00132ec:	e8 57 cb 00 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00132f1:	8d 76 00             	lea    esi,[esi+0x0]
c00132f4:	83 c4 10             	add    esp,0x10
c00132f7:	85 c0                	test   eax,eax
c00132f9:	74 41                	je     c001333c <SysKill(regs*)+0xac>
c00132fb:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00132fe:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013301:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013303:	75 27                	jne    c001332c <SysKill(regs*)+0x9c>
c0013305:	8d 76 00             	lea    esi,[esi+0x0]
c0013308:	51                   	push   ecx
c0013309:	51                   	push   ecx
c001330a:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001330d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013312:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013315:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001331b:	e8 e7 ca ff ff       	call   c000fe07 <KeRaiseSignal(SigHandlerBlock*, int)>
c0013320:	83 c4 10             	add    esp,0x10
c0013323:	31 c0                	xor    eax,eax
c0013325:	31 d2                	xor    edx,edx
c0013327:	eb 1b                	jmp    c0013344 <SysKill(regs*)+0xb4>
c0013329:	8d 76 00             	lea    esi,[esi+0x0]
c001332c:	52                   	push   edx
c001332d:	52                   	push   edx
c001332e:	50                   	push   eax
c001332f:	68 c0 c6 02 c0       	push   0xc002c6c0
c0013334:	e8 1b d0 00 00       	call   c0020354 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013339:	eb b9                	jmp    c00132f4 <SysKill(regs*)+0x64>
c001333b:	90                   	nop
c001333c:	83 c8 ff             	or     eax,0xffffffff
c001333f:	89 c2                	mov    edx,eax
c0013341:	8d 76 00             	lea    esi,[esi+0x0]
c0013344:	83 c4 08             	add    esp,0x8
c0013347:	5b                   	pop    ebx
c0013348:	c3                   	ret    

c0013349 <SysLoadDLL(regs*)>:
c0013349:	56                   	push   esi
c001334a:	53                   	push   ebx
c001334b:	31 d2                	xor    edx,edx
c001334d:	51                   	push   ecx
c001334e:	b8 01 00 00 00       	mov    eax,0x1
c0013353:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013357:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001335b:	0f 84 8c 00 00 00    	je     c00133ed <SysLoadDLL(regs*)+0xa4>
c0013361:	83 ec 0c             	sub    esp,0xc
c0013364:	68 14 01 00 00       	push   0x114
c0013369:	e8 0d b6 ff ff       	call   c000e97b <malloc>
c001336e:	83 c4 0c             	add    esp,0xc
c0013371:	89 c3                	mov    ebx,eax
c0013373:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013378:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c001337b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001337e:	53                   	push   ebx
c001337f:	e8 8e 4d ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013384:	83 c4 10             	add    esp,0x10
c0013387:	31 d2                	xor    edx,edx
c0013389:	b8 02 00 00 00       	mov    eax,0x2
c001338e:	85 db                	test   ebx,ebx
c0013390:	74 5b                	je     c00133ed <SysLoadDLL(regs*)+0xa4>
c0013392:	83 ec 0c             	sub    esp,0xc
c0013395:	53                   	push   ebx
c0013396:	e8 59 50 ff ff       	call   c00083f4 <File::exists()>
c001339b:	83 c4 10             	add    esp,0x10
c001339e:	84 c0                	test   al,al
c00133a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00133a2:	75 11                	jne    c00133b5 <SysLoadDLL(regs*)+0x6c>
c00133a4:	83 ec 0c             	sub    esp,0xc
c00133a7:	53                   	push   ebx
c00133a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133ab:	83 c4 10             	add    esp,0x10
c00133ae:	b8 03 00 00 00       	mov    eax,0x3
c00133b3:	eb 36                	jmp    c00133eb <SysLoadDLL(regs*)+0xa2>
c00133b5:	83 ec 0c             	sub    esp,0xc
c00133b8:	53                   	push   ebx
c00133b9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00133bc:	58                   	pop    eax
c00133bd:	5a                   	pop    edx
c00133be:	6a 00                	push   0x0
c00133c0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00133c3:	e8 e1 15 00 00       	call   c00149a9 <Thr::loadDLL(char const*, bool)>
c00133c8:	83 c4 10             	add    esp,0x10
c00133cb:	89 c1                	mov    ecx,eax
c00133cd:	31 d2                	xor    edx,edx
c00133cf:	b8 04 00 00 00       	mov    eax,0x4
c00133d4:	85 c9                	test   ecx,ecx
c00133d6:	74 15                	je     c00133ed <SysLoadDLL(regs*)+0xa4>
c00133d8:	53                   	push   ebx
c00133d9:	53                   	push   ebx
c00133da:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c00133e0:	51                   	push   ecx
c00133e1:	e8 15 18 00 00       	call   c0014bfb <Thr::executeDLL(unsigned long, void*)>
c00133e6:	83 c4 10             	add    esp,0x10
c00133e9:	31 c0                	xor    eax,eax
c00133eb:	31 d2                	xor    edx,edx
c00133ed:	59                   	pop    ecx
c00133ee:	5b                   	pop    ebx
c00133ef:	5e                   	pop    esi
c00133f0:	c3                   	ret    

c00133f1 <SysRead(regs*)>:
c00133f1:	57                   	push   edi
c00133f2:	56                   	push   esi
c00133f3:	53                   	push   ebx
c00133f4:	83 ec 10             	sub    esp,0x10
c00133f7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00133fb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00133fe:	83 f8 02             	cmp    eax,0x2
c0013401:	77 10                	ja     c0013413 <SysRead(regs*)+0x22>
c0013403:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013408:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001340b:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013411:	eb 0e                	jmp    c0013421 <SysRead(regs*)+0x30>
c0013413:	83 ec 0c             	sub    esp,0xc
c0013416:	50                   	push   eax
c0013417:	e8 d5 ea ff ff       	call   c0011ef1 <KeGetFileFromDescriptor(int)>
c001341c:	83 c4 10             	add    esp,0x10
c001341f:	89 c1                	mov    ecx,eax
c0013421:	83 c8 ff             	or     eax,0xffffffff
c0013424:	85 c9                	test   ecx,ecx
c0013426:	89 c2                	mov    edx,eax
c0013428:	74 28                	je     c0013452 <SysRead(regs*)+0x61>
c001342a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013432:	31 ff                	xor    edi,edi
c0013434:	83 ec 0c             	sub    esp,0xc
c0013437:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013439:	8d 54 24 18          	lea    edx,[esp+0x18]
c001343d:	52                   	push   edx
c001343e:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013441:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013444:	57                   	push   edi
c0013445:	56                   	push   esi
c0013446:	51                   	push   ecx
c0013447:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001344a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001344e:	83 c4 20             	add    esp,0x20
c0013451:	99                   	cdq    
c0013452:	83 c4 10             	add    esp,0x10
c0013455:	5b                   	pop    ebx
c0013456:	5e                   	pop    esi
c0013457:	5f                   	pop    edi
c0013458:	c3                   	ret    

c0013459 <SysRegisterSignal(regs*)>:
c0013459:	83 ec 18             	sub    esp,0x18
c001345c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013460:	6a 00                	push   0x0
c0013462:	6a 00                	push   0x0
c0013464:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013467:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001346a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001346f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013472:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013478:	e8 54 c9 ff ff       	call   c000fdd1 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c001347d:	83 c4 2c             	add    esp,0x2c
c0013480:	99                   	cdq    
c0013481:	c3                   	ret    

c0013482 <SysRegistryGetTypeFromPath(regs*)>:
c0013482:	53                   	push   ebx
c0013483:	81 ec 40 01 00 00    	sub    esp,0x140
c0013489:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013490:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013493:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013496:	e8 c5 9e ff ff       	call   c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001349b:	83 c4 10             	add    esp,0x10
c001349e:	89 c1                	mov    ecx,eax
c00134a0:	85 c0                	test   eax,eax
c00134a2:	74 15                	je     c00134b9 <SysRegistryGetTypeFromPath(regs*)+0x37>
c00134a4:	50                   	push   eax
c00134a5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00134a9:	50                   	push   eax
c00134aa:	51                   	push   ecx
c00134ab:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00134ae:	e8 91 9a ff ff       	call   c000cf44 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00134b3:	83 c4 10             	add    esp,0x10
c00134b6:	99                   	cdq    
c00134b7:	eb 05                	jmp    c00134be <SysRegistryGetTypeFromPath(regs*)+0x3c>
c00134b9:	83 c8 ff             	or     eax,0xffffffff
c00134bc:	89 c2                	mov    edx,eax
c00134be:	81 c4 38 01 00 00    	add    esp,0x138
c00134c4:	5b                   	pop    ebx
c00134c5:	c3                   	ret    

c00134c6 <SysRegistryReadExtent(regs*)>:
c00134c6:	83 ec 1c             	sub    esp,0x1c
c00134c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00134cd:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00134d0:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c00134d3:	85 c0                	test   eax,eax
c00134d5:	79 1f                	jns    c00134f6 <SysRegistryReadExtent(regs*)+0x30>
c00134d7:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00134dc:	52                   	push   edx
c00134dd:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00134e1:	52                   	push   edx
c00134e2:	50                   	push   eax
c00134e3:	51                   	push   ecx
c00134e4:	e8 4d 99 ff ff       	call   c000ce36 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00134e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00134ed:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00134f1:	83 c4 10             	add    esp,0x10
c00134f4:	eb 14                	jmp    c001350a <SysRegistryReadExtent(regs*)+0x44>
c00134f6:	83 ec 04             	sub    esp,0x4
c00134f9:	ff 72 24             	push   DWORD PTR [edx+0x24]
c00134fc:	50                   	push   eax
c00134fd:	51                   	push   ecx
c00134fe:	e8 cd 93 ff ff       	call   c000c8d0 <CmGetString(Reghive_Tag*, int, char*)>
c0013503:	83 c4 10             	add    esp,0x10
c0013506:	31 c0                	xor    eax,eax
c0013508:	31 d2                	xor    edx,edx
c001350a:	83 c4 1c             	add    esp,0x1c
c001350d:	c3                   	ret    

c001350e <SysRegistryPathToExtentLookup(regs*)>:
c001350e:	83 ec 14             	sub    esp,0x14
c0013511:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013515:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013518:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001351b:	e8 40 9e ff ff       	call   c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013520:	83 c4 1c             	add    esp,0x1c
c0013523:	99                   	cdq    
c0013524:	c3                   	ret    

c0013525 <SysRegistryEnterDirectory(regs*)>:
c0013525:	83 ec 14             	sub    esp,0x14
c0013528:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001352c:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001352f:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013532:	e8 10 94 ff ff       	call   c000c947 <CmEnterDirectory(Reghive_Tag*, int)>
c0013537:	83 c4 1c             	add    esp,0x1c
c001353a:	99                   	cdq    
c001353b:	c3                   	ret    

c001353c <SysRegistryGetNext(regs*)>:
c001353c:	83 ec 14             	sub    esp,0x14
c001353f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013543:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013546:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013549:	e8 38 94 ff ff       	call   c000c986 <CmGetNext(Reghive_Tag*, int)>
c001354e:	83 c4 1c             	add    esp,0x1c
c0013551:	99                   	cdq    
c0013552:	c3                   	ret    

c0013553 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013553:	57                   	push   edi
c0013554:	56                   	push   esi
c0013555:	53                   	push   ebx
c0013556:	81 ec 34 01 00 00    	sub    esp,0x134
c001355c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013563:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013567:	57                   	push   edi
c0013568:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001356b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001356e:	e8 d1 99 ff ff       	call   c000cf44 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013573:	89 c3                	mov    ebx,eax
c0013575:	58                   	pop    eax
c0013576:	5a                   	pop    edx
c0013577:	57                   	push   edi
c0013578:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001357b:	e8 c0 d0 fe ff       	call   c0000640 <strcpy>
c0013580:	89 d8                	mov    eax,ebx
c0013582:	81 c4 40 01 00 00    	add    esp,0x140
c0013588:	99                   	cdq    
c0013589:	5b                   	pop    ebx
c001358a:	5e                   	pop    esi
c001358b:	5f                   	pop    edi
c001358c:	c3                   	ret    

c001358d <SysRegistryOpen(regs*)>:
c001358d:	83 ec 18             	sub    esp,0x18
c0013590:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013594:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013597:	e8 c4 91 ff ff       	call   c000c760 <CmOpen(char const*)>
c001359c:	83 c4 1c             	add    esp,0x1c
c001359f:	99                   	cdq    
c00135a0:	c3                   	ret    

c00135a1 <SysRegistryClose(regs*)>:
c00135a1:	83 ec 18             	sub    esp,0x18
c00135a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00135a8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00135ab:	e8 ce 92 ff ff       	call   c000c87e <CmClose(Reghive_Tag*)>
c00135b0:	31 c0                	xor    eax,eax
c00135b2:	31 d2                	xor    edx,edx
c00135b4:	83 c4 1c             	add    esp,0x1c
c00135b7:	c3                   	ret    

c00135b8 <SysRegistryEasyReadString(regs*)>:
c00135b8:	57                   	push   edi
c00135b9:	56                   	push   esi
c00135ba:	53                   	push   ebx
c00135bb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00135bf:	83 ec 0c             	sub    esp,0xc
c00135c2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00135c5:	e8 96 91 ff ff       	call   c000c760 <CmOpen(char const*)>
c00135ca:	5a                   	pop    edx
c00135cb:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00135ce:	59                   	pop    ecx
c00135cf:	89 c3                	mov    ebx,eax
c00135d1:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00135d4:	50                   	push   eax
c00135d5:	e8 86 9d ff ff       	call   c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c00135da:	83 c4 10             	add    esp,0x10
c00135dd:	89 c1                	mov    ecx,eax
c00135df:	b8 01 00 00 00       	mov    eax,0x1
c00135e4:	85 c9                	test   ecx,ecx
c00135e6:	7e 16                	jle    c00135fe <SysRegistryEasyReadString(regs*)+0x46>
c00135e8:	50                   	push   eax
c00135e9:	57                   	push   edi
c00135ea:	51                   	push   ecx
c00135eb:	53                   	push   ebx
c00135ec:	e8 df 92 ff ff       	call   c000c8d0 <CmGetString(Reghive_Tag*, int, char*)>
c00135f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135f4:	e8 85 92 ff ff       	call   c000c87e <CmClose(Reghive_Tag*)>
c00135f9:	83 c4 10             	add    esp,0x10
c00135fc:	31 c0                	xor    eax,eax
c00135fe:	5b                   	pop    ebx
c00135ff:	31 d2                	xor    edx,edx
c0013601:	5e                   	pop    esi
c0013602:	5f                   	pop    edi
c0013603:	c3                   	ret    

c0013604 <SysRegistryEasyReadInteger(regs*)>:
c0013604:	56                   	push   esi
c0013605:	53                   	push   ebx
c0013606:	83 ec 10             	sub    esp,0x10
c0013609:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001360d:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013610:	e8 4b 91 ff ff       	call   c000c760 <CmOpen(char const*)>
c0013615:	5a                   	pop    edx
c0013616:	89 c3                	mov    ebx,eax
c0013618:	59                   	pop    ecx
c0013619:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001361c:	50                   	push   eax
c001361d:	e8 3e 9d ff ff       	call   c000d360 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013622:	83 c4 10             	add    esp,0x10
c0013625:	89 c1                	mov    ecx,eax
c0013627:	b8 01 00 00 00       	mov    eax,0x1
c001362c:	85 c9                	test   ecx,ecx
c001362e:	7e 18                	jle    c0013648 <SysRegistryEasyReadInteger(regs*)+0x44>
c0013630:	50                   	push   eax
c0013631:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013634:	51                   	push   ecx
c0013635:	53                   	push   ebx
c0013636:	e8 fb 97 ff ff       	call   c000ce36 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001363b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001363e:	e8 3b 92 ff ff       	call   c000c87e <CmClose(Reghive_Tag*)>
c0013643:	83 c4 10             	add    esp,0x10
c0013646:	31 c0                	xor    eax,eax
c0013648:	59                   	pop    ecx
c0013649:	31 d2                	xor    edx,edx
c001364b:	5b                   	pop    ebx
c001364c:	5e                   	pop    esi
c001364d:	c3                   	ret    

c001364e <SysSbrk(regs*)>:
c001364e:	56                   	push   esi
c001364f:	53                   	push   ebx
c0013650:	50                   	push   eax
c0013651:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013656:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001365a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001365d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013660:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013666:	85 db                	test   ebx,ebx
c0013668:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001366b:	74 02                	je     c001366f <SysSbrk(regs*)+0x21>
c001366d:	79 06                	jns    c0013675 <SysSbrk(regs*)+0x27>
c001366f:	89 f0                	mov    eax,esi
c0013671:	31 d2                	xor    edx,edx
c0013673:	eb 2a                	jmp    c001369f <SysSbrk(regs*)+0x51>
c0013675:	83 c8 ff             	or     eax,0xffffffff
c0013678:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001367e:	89 c2                	mov    edx,eax
c0013680:	77 1d                	ja     c001369f <SysSbrk(regs*)+0x51>
c0013682:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013688:	50                   	push   eax
c0013689:	c1 ea 0c             	shr    edx,0xc
c001368c:	68 07 0c 00 00       	push   0xc07
c0013691:	52                   	push   edx
c0013692:	51                   	push   ecx
c0013693:	e8 a0 f1 ff ff       	call   c0012838 <VAS::allocatePages(int, int)>
c0013698:	89 f0                	mov    eax,esi
c001369a:	31 d2                	xor    edx,edx
c001369c:	83 c4 10             	add    esp,0x10
c001369f:	59                   	pop    ecx
c00136a0:	5b                   	pop    ebx
c00136a1:	5e                   	pop    esi
c00136a2:	c3                   	ret    

c00136a3 <SysSetCwd(regs*)>:
c00136a3:	83 ec 14             	sub    esp,0x14
c00136a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136aa:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00136ad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00136b2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00136b5:	e8 d9 4d ff ff       	call   c0008493 <Fs::setcwd(Process*, char*)>
c00136ba:	83 c4 1c             	add    esp,0x1c
c00136bd:	99                   	cdq    
c00136be:	c3                   	ret    

c00136bf <SysSetTime(regs*)>:
c00136bf:	55                   	push   ebp
c00136c0:	31 c9                	xor    ecx,ecx
c00136c2:	57                   	push   edi
c00136c3:	bd 0c 00 00 00       	mov    ebp,0xc
c00136c8:	56                   	push   esi
c00136c9:	53                   	push   ebx
c00136ca:	31 db                	xor    ebx,ebx
c00136cc:	83 ec 10             	sub    esp,0x10
c00136cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00136d3:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c00136d6:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c00136d9:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c00136dc:	89 c2                	mov    edx,eax
c00136de:	81 ef 6c 07 00 00    	sub    edi,0x76c
c00136e4:	83 e2 1f             	and    edx,0x1f
c00136e7:	c1 e7 10             	shl    edi,0x10
c00136ea:	42                   	inc    edx
c00136eb:	c1 e8 05             	shr    eax,0x5
c00136ee:	88 d1                	mov    cl,dl
c00136f0:	31 d2                	xor    edx,edx
c00136f2:	f7 f5                	div    ebp
c00136f4:	89 dd                	mov    ebp,ebx
c00136f6:	88 d5                	mov    ch,dl
c00136f8:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c00136fe:	0f b7 c1             	movzx  eax,cx
c0013701:	31 d2                	xor    edx,edx
c0013703:	09 f8                	or     eax,edi
c0013705:	bf 3c 00 00 00       	mov    edi,0x3c
c001370a:	89 c1                	mov    ecx,eax
c001370c:	89 f0                	mov    eax,esi
c001370e:	f7 f7                	div    edi
c0013710:	c1 e2 10             	shl    edx,0x10
c0013713:	09 d5                	or     ebp,edx
c0013715:	31 d2                	xor    edx,edx
c0013717:	89 eb                	mov    ebx,ebp
c0013719:	f7 f7                	div    edi
c001371b:	bf 10 0e 00 00       	mov    edi,0xe10
c0013720:	88 d7                	mov    bh,dl
c0013722:	89 f0                	mov    eax,esi
c0013724:	31 d2                	xor    edx,edx
c0013726:	f7 f7                	div    edi
c0013728:	bf 18 00 00 00       	mov    edi,0x18
c001372d:	31 d2                	xor    edx,edx
c001372f:	f7 f7                	div    edi
c0013731:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0013736:	88 d3                	mov    bl,dl
c0013738:	53                   	push   ebx
c0013739:	51                   	push   ecx
c001373a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013740:	e8 0d 56 ff ff       	call   c0008d52 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013745:	83 c4 1c             	add    esp,0x1c
c0013748:	83 f0 01             	xor    eax,0x1
c001374b:	5b                   	pop    ebx
c001374c:	0f b6 c0             	movzx  eax,al
c001374f:	5e                   	pop    esi
c0013750:	31 d2                	xor    edx,edx
c0013752:	5f                   	pop    edi
c0013753:	5d                   	pop    ebp
c0013754:	c3                   	ret    

c0013755 <SysSymlink(regs*)>:
c0013755:	56                   	push   esi
c0013756:	83 c8 ff             	or     eax,0xffffffff
c0013759:	53                   	push   ebx
c001375a:	89 c2                	mov    edx,eax
c001375c:	81 ec 34 02 00 00    	sub    esp,0x234
c0013762:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0013769:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001376d:	74 50                	je     c00137bf <SysSymlink(regs*)+0x6a>
c001376f:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0013772:	85 c9                	test   ecx,ecx
c0013774:	74 49                	je     c00137bf <SysSymlink(regs*)+0x6a>
c0013776:	6a 01                	push   0x1
c0013778:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001377d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013780:	05 0c 01 00 00       	add    eax,0x10c
c0013785:	50                   	push   eax
c0013786:	51                   	push   ecx
c0013787:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001378b:	56                   	push   esi
c001378c:	e8 89 46 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0013791:	6a 01                	push   0x1
c0013793:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013798:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001379b:	05 0c 01 00 00       	add    eax,0x10c
c00137a0:	50                   	push   eax
c00137a1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00137a4:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00137ab:	53                   	push   ebx
c00137ac:	e8 69 46 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00137b1:	83 c4 18             	add    esp,0x18
c00137b4:	56                   	push   esi
c00137b5:	53                   	push   ebx
c00137b6:	e8 8d 42 ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c00137bb:	83 c4 10             	add    esp,0x10
c00137be:	99                   	cdq    
c00137bf:	81 c4 34 02 00 00    	add    esp,0x234
c00137c5:	5b                   	pop    ebx
c00137c6:	5e                   	pop    esi
c00137c7:	c3                   	ret    

c00137c8 <SysTimezone(regs*)>:
c00137c8:	83 ec 0c             	sub    esp,0xc
c00137cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00137cf:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00137d3:	75 17                	jne    c00137ec <SysTimezone(regs*)+0x24>
c00137d5:	83 ec 0c             	sub    esp,0xc
c00137d8:	68 d9 27 02 c0       	push   0xc00227d9
c00137dd:	e8 82 37 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00137e2:	83 c8 ff             	or     eax,0xffffffff
c00137e5:	83 c4 10             	add    esp,0x10
c00137e8:	89 c2                	mov    edx,eax
c00137ea:	eb 17                	jmp    c0013803 <SysTimezone(regs*)+0x3b>
c00137ec:	83 ec 0c             	sub    esp,0xc
c00137ef:	68 ee 27 02 c0       	push   0xc00227ee
c00137f4:	e8 6b 37 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00137f9:	83 c4 10             	add    esp,0x10
c00137fc:	b8 01 00 00 00       	mov    eax,0x1
c0013801:	31 d2                	xor    edx,edx
c0013803:	83 c4 0c             	add    esp,0xc
c0013806:	c3                   	ret    

c0013807 <SysTruncate(regs*)>:
c0013807:	55                   	push   ebp
c0013808:	57                   	push   edi
c0013809:	31 ff                	xor    edi,edi
c001380b:	56                   	push   esi
c001380c:	53                   	push   ebx
c001380d:	83 ec 0c             	sub    esp,0xc
c0013810:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013814:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013817:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c001381a:	89 ce                	mov    esi,ecx
c001381c:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013820:	0f 84 9a 00 00 00    	je     c00138c0 <SysTruncate(regs*)+0xb9>
c0013826:	83 ec 0c             	sub    esp,0xc
c0013829:	68 14 01 00 00       	push   0x114
c001382e:	e8 48 b1 ff ff       	call   c000e97b <malloc>
c0013833:	83 c4 0c             	add    esp,0xc
c0013836:	89 c3                	mov    ebx,eax
c0013838:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001383d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013840:	55                   	push   ebp
c0013841:	53                   	push   ebx
c0013842:	e8 cb 48 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013847:	83 c4 10             	add    esp,0x10
c001384a:	31 d2                	xor    edx,edx
c001384c:	b8 03 00 00 00       	mov    eax,0x3
c0013851:	85 db                	test   ebx,ebx
c0013853:	0f 84 a2 00 00 00    	je     c00138fb <SysTruncate(regs*)+0xf4>
c0013859:	51                   	push   ecx
c001385a:	51                   	push   ecx
c001385b:	6a 02                	push   0x2
c001385d:	53                   	push   ebx
c001385e:	e8 cd 48 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0013863:	83 c4 10             	add    esp,0x10
c0013866:	85 c0                	test   eax,eax
c0013868:	74 13                	je     c001387d <SysTruncate(regs*)+0x76>
c001386a:	83 ec 0c             	sub    esp,0xc
c001386d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001386f:	53                   	push   ebx
c0013870:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013873:	83 c4 10             	add    esp,0x10
c0013876:	b8 04 00 00 00       	mov    eax,0x4
c001387b:	eb 7c                	jmp    c00138f9 <SysTruncate(regs*)+0xf2>
c001387d:	52                   	push   edx
c001387e:	57                   	push   edi
c001387f:	56                   	push   esi
c0013880:	53                   	push   ebx
c0013881:	e8 be 49 ff ff       	call   c0008244 <File::truncate(unsigned long long)>
c0013886:	83 c4 10             	add    esp,0x10
c0013889:	85 c0                	test   eax,eax
c001388b:	74 1b                	je     c00138a8 <SysTruncate(regs*)+0xa1>
c001388d:	83 ec 0c             	sub    esp,0xc
c0013890:	53                   	push   ebx
c0013891:	e8 f8 48 ff ff       	call   c000818e <File::close()>
c0013896:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013898:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001389b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001389e:	83 c4 10             	add    esp,0x10
c00138a1:	b8 05 00 00 00       	mov    eax,0x5
c00138a6:	eb 51                	jmp    c00138f9 <SysTruncate(regs*)+0xf2>
c00138a8:	83 ec 0c             	sub    esp,0xc
c00138ab:	53                   	push   ebx
c00138ac:	e8 dd 48 ff ff       	call   c000818e <File::close()>
c00138b1:	8b 03                	mov    eax,DWORD PTR [ebx]
c00138b3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00138b6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00138b9:	83 c4 10             	add    esp,0x10
c00138bc:	31 c0                	xor    eax,eax
c00138be:	eb 39                	jmp    c00138f9 <SysTruncate(regs*)+0xf2>
c00138c0:	31 d2                	xor    edx,edx
c00138c2:	b8 01 00 00 00       	mov    eax,0x1
c00138c7:	83 fd 02             	cmp    ebp,0x2
c00138ca:	7e 2f                	jle    c00138fb <SysTruncate(regs*)+0xf4>
c00138cc:	83 ec 0c             	sub    esp,0xc
c00138cf:	51                   	push   ecx
c00138d0:	e8 1c e6 ff ff       	call   c0011ef1 <KeGetFileFromDescriptor(int)>
c00138d5:	83 c4 10             	add    esp,0x10
c00138d8:	89 c1                	mov    ecx,eax
c00138da:	31 d2                	xor    edx,edx
c00138dc:	b8 02 00 00 00       	mov    eax,0x2
c00138e1:	85 c9                	test   ecx,ecx
c00138e3:	74 16                	je     c00138fb <SysTruncate(regs*)+0xf4>
c00138e5:	50                   	push   eax
c00138e6:	57                   	push   edi
c00138e7:	56                   	push   esi
c00138e8:	51                   	push   ecx
c00138e9:	e8 56 49 ff ff       	call   c0008244 <File::truncate(unsigned long long)>
c00138ee:	83 c4 10             	add    esp,0x10
c00138f1:	85 c0                	test   eax,eax
c00138f3:	0f 95 c0             	setne  al
c00138f6:	0f b6 c0             	movzx  eax,al
c00138f9:	31 d2                	xor    edx,edx
c00138fb:	83 c4 0c             	add    esp,0xc
c00138fe:	5b                   	pop    ebx
c00138ff:	5e                   	pop    esi
c0013900:	5f                   	pop    edi
c0013901:	5d                   	pop    ebp
c0013902:	c3                   	ret    

c0013903 <SysWrite(regs*)>:
c0013903:	57                   	push   edi
c0013904:	56                   	push   esi
c0013905:	53                   	push   ebx
c0013906:	83 ec 10             	sub    esp,0x10
c0013909:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001390d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013910:	83 f8 02             	cmp    eax,0x2
c0013913:	77 10                	ja     c0013925 <SysWrite(regs*)+0x22>
c0013915:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001391a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001391d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013923:	eb 0e                	jmp    c0013933 <SysWrite(regs*)+0x30>
c0013925:	83 ec 0c             	sub    esp,0xc
c0013928:	50                   	push   eax
c0013929:	e8 c3 e5 ff ff       	call   c0011ef1 <KeGetFileFromDescriptor(int)>
c001392e:	83 c4 10             	add    esp,0x10
c0013931:	89 c1                	mov    ecx,eax
c0013933:	83 c8 ff             	or     eax,0xffffffff
c0013936:	85 c9                	test   ecx,ecx
c0013938:	89 c2                	mov    edx,eax
c001393a:	74 28                	je     c0013964 <SysWrite(regs*)+0x61>
c001393c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013944:	31 ff                	xor    edi,edi
c0013946:	83 ec 0c             	sub    esp,0xc
c0013949:	8b 01                	mov    eax,DWORD PTR [ecx]
c001394b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001394f:	52                   	push   edx
c0013950:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013953:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013956:	57                   	push   edi
c0013957:	56                   	push   esi
c0013958:	51                   	push   ecx
c0013959:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001395c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013960:	83 c4 20             	add    esp,0x20
c0013963:	99                   	cdq    
c0013964:	83 c4 10             	add    esp,0x10
c0013967:	5b                   	pop    ebx
c0013968:	5e                   	pop    esi
c0013969:	5f                   	pop    edi
c001396a:	c3                   	ret    

c001396b <SysWsbe(regs*)>:
c001396b:	55                   	push   ebp
c001396c:	57                   	push   edi
c001396d:	56                   	push   esi
c001396e:	53                   	push   ebx
c001396f:	83 ec 3c             	sub    esp,0x3c
c0013972:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0013976:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c001397d:	75 2d                	jne    c00139ac <SysWsbe(regs*)+0x41>
c001397f:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0013986:	75 24                	jne    c00139ac <SysWsbe(regs*)+0x41>
c0013988:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c001398f:	75 1b                	jne    c00139ac <SysWsbe(regs*)+0x41>
c0013991:	6a 01                	push   0x1
c0013993:	6a 00                	push   0x0
c0013995:	68 6a 95 00 c0       	push   0xc000956a
c001399a:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00139a0:	e8 93 18 00 00       	call   c0015238 <Process::createThread(void (*)(void*), void*, int)>
c00139a5:	83 c4 10             	add    esp,0x10
c00139a8:	31 c0                	xor    eax,eax
c00139aa:	eb 52                	jmp    c00139fe <SysWsbe(regs*)+0x93>
c00139ac:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00139b0:	be 2d 28 02 c0       	mov    esi,0xc002282d
c00139b5:	b9 0b 00 00 00       	mov    ecx,0xb
c00139ba:	fc                   	cld    
c00139bb:	83 ec 0c             	sub    esp,0xc
c00139be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00139c0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00139c4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139c9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139cc:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00139d2:	8b 06                	mov    eax,DWORD PTR [esi]
c00139d4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00139d7:	57                   	push   edi
c00139d8:	e8 93 cb fe ff       	call   c0000570 <strlen>
c00139dd:	5a                   	pop    edx
c00139de:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00139e2:	52                   	push   edx
c00139e3:	31 d2                	xor    edx,edx
c00139e5:	57                   	push   edi
c00139e6:	52                   	push   edx
c00139e7:	50                   	push   eax
c00139e8:	56                   	push   esi
c00139e9:	ff d5                	call   ebp
c00139eb:	83 c4 14             	add    esp,0x14
c00139ee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00139f1:	e8 12 22 00 00       	call   c0015c08 <terminateTask(int)>
c00139f6:	83 c4 10             	add    esp,0x10
c00139f9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00139fe:	83 c4 3c             	add    esp,0x3c
c0013a01:	31 d2                	xor    edx,edx
c0013a03:	5b                   	pop    ebx
c0013a04:	5e                   	pop    esi
c0013a05:	5f                   	pop    edi
c0013a06:	5d                   	pop    ebp
c0013a07:	c3                   	ret    

c0013a08 <SysYield(regs*)>:
c0013a08:	83 ec 0c             	sub    esp,0xc
c0013a0b:	fa                   	cli    
c0013a0c:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013a12:	e8 71 1a 00 00       	call   c0015488 <schedule()>
c0013a17:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0013a1c:	48                   	dec    eax
c0013a1d:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013a22:	75 01                	jne    c0013a25 <SysYield(regs*)+0x1d>
c0013a24:	fb                   	sti    
c0013a25:	31 c0                	xor    eax,eax
c0013a27:	31 d2                	xor    edx,edx
c0013a29:	83 c4 0c             	add    esp,0xc
c0013a2c:	c3                   	ret    

c0013a2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0013a2d:	55                   	push   ebp
c0013a2e:	57                   	push   edi
c0013a2f:	56                   	push   esi
c0013a30:	53                   	push   ebx
c0013a31:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0013a37:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0013a3f:	0f 95 c0             	setne  al
c0013a42:	31 d2                	xor    edx,edx
c0013a44:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0013a4c:	0f 94 c2             	sete   dl
c0013a4f:	85 c2                	test   edx,eax
c0013a51:	74 34                	je     c0013a87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013a53:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0013a5e:	74 27                	je     c0013a87 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0013a60:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0013a67:	05 00 10 00 00       	add    eax,0x1000
c0013a6c:	89 c1                	mov    ecx,eax
c0013a6e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a73:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0013a79:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0013a80:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0013a87:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0013a8e:	83 ec 0c             	sub    esp,0xc
c0013a91:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013a97:	6a 01                	push   0x1
c0013a99:	e8 ad e5 ff ff       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c0013a9e:	83 c4 10             	add    esp,0x10
c0013aa1:	89 c3                	mov    ebx,eax
c0013aa3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013aa9:	0f 86 25 01 00 00    	jbe    c0013bd4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c0013aaf:	c1 ee 0c             	shr    esi,0xc
c0013ab2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013ab9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0013abd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013ac5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0013acc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013ad0:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0013ad7:	29 ef                	sub    edi,ebp
c0013ad9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0013add:	0f 83 f8 00 00 00    	jae    c0013bdb <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0013ae3:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0013ae9:	76 05                	jbe    c0013af0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c0013aeb:	bf 00 10 00 00       	mov    edi,0x1000
c0013af0:	83 ec 0c             	sub    esp,0xc
c0013af3:	31 d2                	xor    edx,edx
c0013af5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013afc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013afe:	8d 44 24 28          	lea    eax,[esp+0x28]
c0013b02:	50                   	push   eax
c0013b03:	8d 74 24 30          	lea    esi,[esp+0x30]
c0013b07:	56                   	push   esi
c0013b08:	52                   	push   edx
c0013b09:	57                   	push   edi
c0013b0a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0013b11:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013b14:	83 c4 20             	add    esp,0x20
c0013b17:	85 c0                	test   eax,eax
c0013b19:	75 06                	jne    c0013b21 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c0013b1b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0013b1f:	74 13                	je     c0013b34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0013b21:	83 ec 0c             	sub    esp,0xc
c0013b24:	53                   	push   ebx
c0013b25:	e8 29 e8 ff ff       	call   c0012353 <Virt::freeKernelVirtualPages(unsigned long)>
c0013b2a:	83 c4 10             	add    esp,0x10
c0013b2d:	31 c0                	xor    eax,eax
c0013b2f:	e9 7c 01 00 00       	jmp    c0013cb0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0013b34:	fa                   	cli    
c0013b35:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013b3b:	e8 86 b3 ff ff       	call   c000eec6 <Phys::allocatePage()>
c0013b40:	6a 07                	push   0x7
c0013b42:	89 c7                	mov    edi,eax
c0013b44:	53                   	push   ebx
c0013b45:	50                   	push   eax
c0013b46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b4b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b4e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b54:	e8 db eb ff ff       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013b59:	83 c4 0c             	add    esp,0xc
c0013b5c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013b63:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b69:	6a 00                	push   0x0
c0013b6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b70:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b73:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b79:	e8 1c ea ff ff       	call   c001259a <VAS::mapOtherVASIn(bool, VAS*)>
c0013b7e:	58                   	pop    eax
c0013b7f:	5a                   	pop    edx
c0013b80:	68 07 0c 00 00       	push   0xc07
c0013b85:	55                   	push   ebp
c0013b86:	57                   	push   edi
c0013b87:	89 df                	mov    edi,ebx
c0013b89:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013b90:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013b96:	6a 00                	push   0x0
c0013b98:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b9d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013ba0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013ba6:	e8 cb ed ff ff       	call   c0012976 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013bab:	b9 00 10 00 00       	mov    ecx,0x1000
c0013bb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013bb2:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0013bb7:	83 c4 20             	add    esp,0x20
c0013bba:	48                   	dec    eax
c0013bbb:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013bc0:	85 c0                	test   eax,eax
c0013bc2:	75 01                	jne    c0013bc5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c0013bc4:	fb                   	sti    
c0013bc5:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013bcb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0013bcf:	e9 f1 fe ff ff       	jmp    c0013ac5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0013bd4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0013bdb:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0013be2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0013be8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0013bee:	0f 86 ae 00 00 00    	jbe    c0013ca2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013bf4:	fa                   	cli    
c0013bf5:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0013bfb:	c1 ee 0c             	shr    esi,0xc
c0013bfe:	51                   	push   ecx
c0013bff:	31 ff                	xor    edi,edi
c0013c01:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0013c08:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c0e:	6a 00                	push   0x0
c0013c10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c15:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c18:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c1e:	e8 77 e9 ff ff       	call   c001259a <VAS::mapOtherVASIn(bool, VAS*)>
c0013c23:	83 c4 10             	add    esp,0x10
c0013c26:	e8 9b b2 ff ff       	call   c000eec6 <Phys::allocatePage()>
c0013c2b:	47                   	inc    edi
c0013c2c:	6a 07                	push   0x7
c0013c2e:	53                   	push   ebx
c0013c2f:	50                   	push   eax
c0013c30:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013c34:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013c3a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0013c3d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0013c43:	e8 ec ea ff ff       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c48:	58                   	pop    eax
c0013c49:	5a                   	pop    edx
c0013c4a:	68 07 0c 00 00       	push   0xc07
c0013c4f:	55                   	push   ebp
c0013c50:	81 c5 00 10 00 00    	add    ebp,0x1000
c0013c56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c5a:	50                   	push   eax
c0013c5b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0013c62:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c68:	6a 00                	push   0x0
c0013c6a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c6f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c72:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013c78:	e8 f9 ec ff ff       	call   c0012976 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0013c7d:	83 c4 1c             	add    esp,0x1c
c0013c80:	68 00 10 00 00       	push   0x1000
c0013c85:	6a 00                	push   0x0
c0013c87:	53                   	push   ebx
c0013c88:	e8 63 c8 fe ff       	call   c00004f0 <memset>
c0013c8d:	83 c4 10             	add    esp,0x10
c0013c90:	39 fe                	cmp    esi,edi
c0013c92:	77 92                	ja     c0013c26 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c0013c94:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0013c99:	48                   	dec    eax
c0013c9a:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0013c9f:	75 01                	jne    c0013ca2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0013ca1:	fb                   	sti    
c0013ca2:	83 ec 0c             	sub    esp,0xc
c0013ca5:	53                   	push   ebx
c0013ca6:	e8 a8 e6 ff ff       	call   c0012353 <Virt::freeKernelVirtualPages(unsigned long)>
c0013cab:	83 c4 10             	add    esp,0x10
c0013cae:	b0 01                	mov    al,0x1
c0013cb0:	81 c4 2c 10 00 00    	add    esp,0x102c
c0013cb6:	5b                   	pop    ebx
c0013cb7:	5e                   	pop    esi
c0013cb8:	5f                   	pop    edi
c0013cb9:	5d                   	pop    ebp
c0013cba:	c3                   	ret    

c0013cbb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0013cbb:	55                   	push   ebp
c0013cbc:	57                   	push   edi
c0013cbd:	56                   	push   esi
c0013cbe:	53                   	push   ebx
c0013cbf:	83 ec 48             	sub    esp,0x48
c0013cc2:	68 14 01 00 00       	push   0x114
c0013cc7:	e8 af ac ff ff       	call   c000e97b <malloc>
c0013ccc:	83 c4 0c             	add    esp,0xc
c0013ccf:	89 c6                	mov    esi,eax
c0013cd1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0013cd5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013cd9:	50                   	push   eax
c0013cda:	e8 33 44 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013cdf:	58                   	pop    eax
c0013ce0:	5a                   	pop    edx
c0013ce1:	6a 01                	push   0x1
c0013ce3:	56                   	push   esi
c0013ce4:	e8 47 44 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0013ce9:	83 c4 10             	add    esp,0x10
c0013cec:	85 c0                	test   eax,eax
c0013cee:	0f 85 43 01 00 00    	jne    c0013e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013cf4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0013cfc:	83 ec 0c             	sub    esp,0xc
c0013cff:	6a 34                	push   0x34
c0013d01:	e8 75 ac ff ff       	call   c000e97b <malloc>
c0013d06:	89 c3                	mov    ebx,eax
c0013d08:	58                   	pop    eax
c0013d09:	8b 06                	mov    eax,DWORD PTR [esi]
c0013d0b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0013d0f:	57                   	push   edi
c0013d10:	53                   	push   ebx
c0013d11:	6a 00                	push   0x0
c0013d13:	6a 34                	push   0x34
c0013d15:	56                   	push   esi
c0013d16:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013d19:	83 c4 20             	add    esp,0x20
c0013d1c:	85 c0                	test   eax,eax
c0013d1e:	0f 85 13 01 00 00    	jne    c0013e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d24:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0013d2a:	0f 85 07 01 00 00    	jne    c0013e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d30:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013d33:	85 c0                	test   eax,eax
c0013d35:	0f 84 fc 00 00 00    	je     c0013e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d3b:	31 d2                	xor    edx,edx
c0013d3d:	55                   	push   ebp
c0013d3e:	52                   	push   edx
c0013d3f:	50                   	push   eax
c0013d40:	56                   	push   esi
c0013d41:	e8 a8 44 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013d46:	83 c4 10             	add    esp,0x10
c0013d49:	85 c0                	test   eax,eax
c0013d4b:	0f 85 e6 00 00 00    	jne    c0013e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d51:	83 ec 0c             	sub    esp,0xc
c0013d54:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013d57:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013d5b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0013d5f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013d63:	0f af c2             	imul   eax,edx
c0013d66:	50                   	push   eax
c0013d67:	e8 0f ac ff ff       	call   c000e97b <malloc>
c0013d6c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013d6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0013d72:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013d75:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013d79:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0013d7d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0013d81:	0f af c2             	imul   eax,edx
c0013d84:	99                   	cdq    
c0013d85:	52                   	push   edx
c0013d86:	50                   	push   eax
c0013d87:	56                   	push   esi
c0013d88:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013d8b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0013d8e:	83 c4 20             	add    esp,0x20
c0013d91:	85 c0                	test   eax,eax
c0013d93:	0f 84 9e 00 00 00    	je     c0013e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013d99:	31 d2                	xor    edx,edx
c0013d9b:	51                   	push   ecx
c0013d9c:	52                   	push   edx
c0013d9d:	50                   	push   eax
c0013d9e:	56                   	push   esi
c0013d9f:	e8 4a 44 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013da4:	83 c4 10             	add    esp,0x10
c0013da7:	85 c0                	test   eax,eax
c0013da9:	0f 85 88 00 00 00    	jne    c0013e37 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0013daf:	83 ec 0c             	sub    esp,0xc
c0013db2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013db6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013dba:	31 ed                	xor    ebp,ebp
c0013dbc:	0f af c2             	imul   eax,edx
c0013dbf:	50                   	push   eax
c0013dc0:	e8 b6 ab ff ff       	call   c000e97b <malloc>
c0013dc5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0013dc7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013dcb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0013dce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013dd2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0013dd6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0013dda:	0f af c2             	imul   eax,edx
c0013ddd:	99                   	cdq    
c0013dde:	52                   	push   edx
c0013ddf:	50                   	push   eax
c0013de0:	56                   	push   esi
c0013de1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0013de4:	83 c4 20             	add    esp,0x20
c0013de7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0013def:	0f b7 fd             	movzx  edi,bp
c0013df2:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0013df6:	73 7d                	jae    c0013e75 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0013df8:	c1 e7 05             	shl    edi,0x5
c0013dfb:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0013dff:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0013e02:	75 6b                	jne    c0013e6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013e04:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013e07:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e0b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0013e0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013e12:	52                   	push   edx
c0013e13:	31 d2                	xor    edx,edx
c0013e15:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0013e18:	52                   	push   edx
c0013e19:	50                   	push   eax
c0013e1a:	56                   	push   esi
c0013e1b:	e8 ce 43 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013e20:	83 c4 10             	add    esp,0x10
c0013e23:	85 c0                	test   eax,eax
c0013e25:	74 17                	je     c0013e3e <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0013e27:	83 ec 0c             	sub    esp,0xc
c0013e2a:	68 59 28 02 c0       	push   0xc0022859
c0013e2f:	e8 30 31 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013e34:	83 c4 10             	add    esp,0x10
c0013e37:	31 c0                	xor    eax,eax
c0013e39:	e9 87 00 00 00       	jmp    c0013ec5 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0013e3e:	83 ec 0c             	sub    esp,0xc
c0013e41:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0013e44:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0013e47:	50                   	push   eax
c0013e48:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013e4c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013e50:	56                   	push   esi
c0013e51:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0013e55:	e8 d3 fb ff ff       	call   c0013a2d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0013e5a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013e5e:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0013e62:	83 c4 20             	add    esp,0x20
c0013e65:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0013e69:	73 04                	jae    c0013e6f <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0013e6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013e6f:	45                   	inc    ebp
c0013e70:	e9 7a ff ff ff       	jmp    c0013def <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0013e75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0013e79:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013e7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013e81:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0013e87:	83 ec 0c             	sub    esp,0xc
c0013e8a:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0013e90:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013e95:	05 00 10 00 00       	add    eax,0x1000
c0013e9a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013e9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ea1:	e8 e5 aa ff ff       	call   c000e98b <free>
c0013ea6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013ea9:	e8 dd aa ff ff       	call   c000e98b <free>
c0013eae:	58                   	pop    eax
c0013eaf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013eb3:	e8 d3 aa ff ff       	call   c000e98b <free>
c0013eb8:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ebb:	e8 ce 42 ff ff       	call   c000818e <File::close()>
c0013ec0:	83 c4 10             	add    esp,0x10
c0013ec3:	b0 01                	mov    al,0x1
c0013ec5:	83 c4 3c             	add    esp,0x3c
c0013ec8:	5b                   	pop    ebx
c0013ec9:	5e                   	pop    esi
c0013eca:	5f                   	pop    edi
c0013ecb:	5d                   	pop    ebp
c0013ecc:	c3                   	ret    

c0013ecd <Thr::runtimeReferenceHelper()>:
c0013ecd:	83 ec 18             	sub    esp,0x18
c0013ed0:	68 61 28 02 c0       	push   0xc0022861
c0013ed5:	e8 8a 30 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013eda:	fa                   	cli    
c0013edb:	83 c4 10             	add    esp,0x10
c0013ede:	eb fe                	jmp    c0013ede <Thr::runtimeReferenceHelper()+0x11>

c0013ee0 <Thr::getAddressOfKernelSymbol(char const*)>:
c0013ee0:	57                   	push   edi
c0013ee1:	56                   	push   esi
c0013ee2:	53                   	push   ebx
c0013ee3:	31 db                	xor    ebx,ebx
c0013ee5:	39 1d 80 c6 02 c0    	cmp    DWORD PTR ds:0xc002c680,ebx
c0013eeb:	7e 3c                	jle    c0013f29 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0013eed:	8b 34 9d 00 c6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd3a00]
c0013ef4:	31 ff                	xor    edi,edi
c0013ef6:	39 3c 9d 00 c5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd3b00],edi
c0013efd:	7e 27                	jle    c0013f26 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0013eff:	50                   	push   eax
c0013f00:	50                   	push   eax
c0013f01:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f05:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f07:	03 04 9d 80 c5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd3a80]
c0013f0e:	50                   	push   eax
c0013f0f:	e8 3c c8 fe ff       	call   c0000750 <strcmp>
c0013f14:	83 c4 10             	add    esp,0x10
c0013f17:	85 c0                	test   eax,eax
c0013f19:	75 05                	jne    c0013f20 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0013f1b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013f1e:	eb 0b                	jmp    c0013f2b <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0013f20:	83 c6 10             	add    esi,0x10
c0013f23:	47                   	inc    edi
c0013f24:	eb d0                	jmp    c0013ef6 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0013f26:	43                   	inc    ebx
c0013f27:	eb bc                	jmp    c0013ee5 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0013f29:	31 c0                	xor    eax,eax
c0013f2b:	5b                   	pop    ebx
c0013f2c:	5e                   	pop    esi
c0013f2d:	5f                   	pop    edi
c0013f2e:	c3                   	ret    

c0013f2f <Thr::loadKernelSymbolTable(char const*)>:
c0013f2f:	55                   	push   ebp
c0013f30:	57                   	push   edi
c0013f31:	56                   	push   esi
c0013f32:	53                   	push   ebx
c0013f33:	83 ec 68             	sub    esp,0x68
c0013f36:	8b 35 d8 c6 02 c0    	mov    esi,DWORD PTR ds:0xc002c6d8
c0013f3c:	68 14 01 00 00       	push   0x114
c0013f41:	e8 35 aa ff ff       	call   c000e97b <malloc>
c0013f46:	83 c4 0c             	add    esp,0xc
c0013f49:	89 c3                	mov    ebx,eax
c0013f4b:	56                   	push   esi
c0013f4c:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0013f50:	50                   	push   eax
c0013f51:	e8 bc 41 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0013f56:	5e                   	pop    esi
c0013f57:	5f                   	pop    edi
c0013f58:	6a 01                	push   0x1
c0013f5a:	53                   	push   ebx
c0013f5b:	e8 d0 41 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0013f60:	83 c4 10             	add    esp,0x10
c0013f63:	85 c0                	test   eax,eax
c0013f65:	74 0a                	je     c0013f71 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0013f67:	83 ec 0c             	sub    esp,0xc
c0013f6a:	68 83 28 02 c0       	push   0xc0022883
c0013f6f:	eb 34                	jmp    c0013fa5 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0013f71:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0013f79:	83 ec 0c             	sub    esp,0xc
c0013f7c:	6a 34                	push   0x34
c0013f7e:	e8 f8 a9 ff ff       	call   c000e97b <malloc>
c0013f83:	59                   	pop    ecx
c0013f84:	89 c7                	mov    edi,eax
c0013f86:	8d 74 24 34          	lea    esi,[esp+0x34]
c0013f8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013f8c:	56                   	push   esi
c0013f8d:	57                   	push   edi
c0013f8e:	6a 00                	push   0x0
c0013f90:	6a 34                	push   0x34
c0013f92:	53                   	push   ebx
c0013f93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013f96:	83 c4 20             	add    esp,0x20
c0013f99:	85 c0                	test   eax,eax
c0013f9b:	74 17                	je     c0013fb4 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0013f9d:	83 ec 0c             	sub    esp,0xc
c0013fa0:	68 9a 28 02 c0       	push   0xc002289a
c0013fa5:	e8 28 ad ff ff       	call   c000ecd2 <KePanic(char const*)>
c0013faa:	83 c4 10             	add    esp,0x10
c0013fad:	31 c0                	xor    eax,eax
c0013faf:	e9 31 02 00 00       	jmp    c00141e5 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0013fb4:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0013fba:	75 e1                	jne    c0013f9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013fbc:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0013fbf:	85 c0                	test   eax,eax
c0013fc1:	74 da                	je     c0013f9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013fc3:	52                   	push   edx
c0013fc4:	31 d2                	xor    edx,edx
c0013fc6:	52                   	push   edx
c0013fc7:	50                   	push   eax
c0013fc8:	53                   	push   ebx
c0013fc9:	e8 20 42 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0013fce:	83 c4 10             	add    esp,0x10
c0013fd1:	85 c0                	test   eax,eax
c0013fd3:	75 c8                	jne    c0013f9d <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0013fd5:	83 ec 0c             	sub    esp,0xc
c0013fd8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013fdc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0013fe0:	31 ed                	xor    ebp,ebp
c0013fe2:	0f af c2             	imul   eax,edx
c0013fe5:	50                   	push   eax
c0013fe6:	e8 90 a9 ff ff       	call   c000e97b <malloc>
c0013feb:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0013fed:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013ff1:	89 34 24             	mov    DWORD PTR [esp],esi
c0013ff4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ff8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0013ffc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014000:	0f af c2             	imul   eax,edx
c0014003:	99                   	cdq    
c0014004:	52                   	push   edx
c0014005:	50                   	push   eax
c0014006:	53                   	push   ebx
c0014007:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001400a:	83 c4 20             	add    esp,0x20
c001400d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014015:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001401d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014025:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001402d:	0f b7 f5             	movzx  esi,bp
c0014030:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014034:	0f 83 a7 00 00 00    	jae    c00140e1 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001403a:	6b f6 28             	imul   esi,esi,0x28
c001403d:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014041:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014044:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014048:	50                   	push   eax
c0014049:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001404d:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014051:	8b 16                	mov    edx,DWORD PTR [esi]
c0014053:	6b c0 28             	imul   eax,eax,0x28
c0014056:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001405a:	89 d0                	mov    eax,edx
c001405c:	31 d2                	xor    edx,edx
c001405e:	52                   	push   edx
c001405f:	50                   	push   eax
c0014060:	53                   	push   ebx
c0014061:	e8 88 41 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014066:	83 c4 0c             	add    esp,0xc
c0014069:	6a 20                	push   0x20
c001406b:	6a 00                	push   0x0
c001406d:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014071:	52                   	push   edx
c0014072:	e8 79 c4 fe ff       	call   c00004f0 <memset>
c0014077:	58                   	pop    eax
c0014078:	8b 03                	mov    eax,DWORD PTR [ebx]
c001407a:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001407e:	51                   	push   ecx
c001407f:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014083:	52                   	push   edx
c0014084:	6a 00                	push   0x0
c0014086:	6a 1f                	push   0x1f
c0014088:	53                   	push   ebx
c0014089:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001408c:	83 c4 18             	add    esp,0x18
c001408f:	68 b1 28 02 c0       	push   0xc00228b1
c0014094:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014098:	52                   	push   edx
c0014099:	e8 b2 c6 fe ff       	call   c0000750 <strcmp>
c001409e:	83 c4 10             	add    esp,0x10
c00140a1:	85 c0                	test   eax,eax
c00140a3:	75 0f                	jne    c00140b4 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00140a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00140ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00140b4:	50                   	push   eax
c00140b5:	50                   	push   eax
c00140b6:	68 b9 28 02 c0       	push   0xc00228b9
c00140bb:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00140bf:	50                   	push   eax
c00140c0:	e8 8b c6 fe ff       	call   c0000750 <strcmp>
c00140c5:	83 c4 10             	add    esp,0x10
c00140c8:	85 c0                	test   eax,eax
c00140ca:	75 0f                	jne    c00140db <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00140cc:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00140cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00140d3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00140d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00140db:	45                   	inc    ebp
c00140dc:	e9 4c ff ff ff       	jmp    c001402d <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00140e1:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00140e6:	75 10                	jne    c00140f8 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00140e8:	83 ec 0c             	sub    esp,0xc
c00140eb:	68 c1 28 02 c0       	push   0xc00228c1
c00140f0:	e8 dd ab ff ff       	call   c000ecd2 <KePanic(char const*)>
c00140f5:	83 c4 10             	add    esp,0x10
c00140f8:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00140fd:	75 10                	jne    c001410f <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00140ff:	83 ec 0c             	sub    esp,0xc
c0014102:	68 c1 28 02 c0       	push   0xc00228c1
c0014107:	e8 c6 ab ff ff       	call   c000ecd2 <KePanic(char const*)>
c001410c:	83 c4 10             	add    esp,0x10
c001410f:	31 d2                	xor    edx,edx
c0014111:	50                   	push   eax
c0014112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014116:	52                   	push   edx
c0014117:	50                   	push   eax
c0014118:	53                   	push   ebx
c0014119:	e8 d0 40 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c001411e:	5a                   	pop    edx
c001411f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014123:	e8 53 a8 ff ff       	call   c000e97b <malloc>
c0014128:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001412c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014130:	31 c9                	xor    ecx,ecx
c0014132:	5e                   	pop    esi
c0014133:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014135:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014139:	55                   	push   ebp
c001413a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001413e:	51                   	push   ecx
c001413f:	52                   	push   edx
c0014140:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014144:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014148:	53                   	push   ebx
c0014149:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001414c:	83 c4 14             	add    esp,0x14
c001414f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014153:	e8 23 a8 ff ff       	call   c000e97b <malloc>
c0014158:	89 c6                	mov    esi,eax
c001415a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001415c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001415f:	56                   	push   esi
c0014160:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014164:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014168:	51                   	push   ecx
c0014169:	52                   	push   edx
c001416a:	53                   	push   ebx
c001416b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001416e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014172:	8b 15 80 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c680
c0014178:	83 c4 1c             	add    esp,0x1c
c001417b:	c1 e8 04             	shr    eax,0x4
c001417e:	89 04 95 00 c5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd3b00],eax
c0014185:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014189:	31 d2                	xor    edx,edx
c001418b:	52                   	push   edx
c001418c:	50                   	push   eax
c001418d:	53                   	push   ebx
c001418e:	e8 5b 40 ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014193:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014195:	31 d2                	xor    edx,edx
c0014197:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001419a:	56                   	push   esi
c001419b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001419f:	52                   	push   edx
c00141a0:	50                   	push   eax
c00141a1:	53                   	push   ebx
c00141a2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00141a5:	83 c4 14             	add    esp,0x14
c00141a8:	53                   	push   ebx
c00141a9:	e8 e0 3f ff ff       	call   c000818e <File::close()>
c00141ae:	5d                   	pop    ebp
c00141af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00141b3:	e8 d3 a7 ff ff       	call   c000e98b <free>
c00141b8:	89 3c 24             	mov    DWORD PTR [esp],edi
c00141bb:	e8 cb a7 ff ff       	call   c000e98b <free>
c00141c0:	a1 80 c6 02 c0       	mov    eax,ds:0xc002c680
c00141c5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00141c9:	8d 50 01             	lea    edx,[eax+0x1]
c00141cc:	89 0c 85 00 c6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a00],ecx
c00141d3:	89 34 85 80 c5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3a80],esi
c00141da:	89 15 80 c6 02 c0    	mov    DWORD PTR ds:0xc002c680,edx
c00141e0:	83 c4 10             	add    esp,0x10
c00141e3:	b0 01                	mov    al,0x1
c00141e5:	83 c4 5c             	add    esp,0x5c
c00141e8:	5b                   	pop    ebx
c00141e9:	5e                   	pop    esi
c00141ea:	5f                   	pop    edi
c00141eb:	5d                   	pop    ebp
c00141ec:	c3                   	ret    

c00141ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00141ed:	55                   	push   ebp
c00141ee:	57                   	push   edi
c00141ef:	56                   	push   esi
c00141f0:	53                   	push   ebx
c00141f1:	81 ec 68 03 00 00    	sub    esp,0x368
c00141f7:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00141fe:	8b 1d d8 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6d8
c0014204:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014208:	68 14 01 00 00       	push   0x114
c001420d:	e8 69 a7 ff ff       	call   c000e97b <malloc>
c0014212:	83 c4 0c             	add    esp,0xc
c0014215:	89 c5                	mov    ebp,eax
c0014217:	53                   	push   ebx
c0014218:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001421f:	50                   	push   eax
c0014220:	e8 ed 3e ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0014225:	5e                   	pop    esi
c0014226:	5f                   	pop    edi
c0014227:	6a 01                	push   0x1
c0014229:	55                   	push   ebp
c001422a:	e8 01 3f ff ff       	call   c0008130 <File::open(FileOpenMode)>
c001422f:	83 c4 10             	add    esp,0x10
c0014232:	85 c0                	test   eax,eax
c0014234:	0f 85 aa 06 00 00    	jne    c00148e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001423a:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014242:	83 ec 0c             	sub    esp,0xc
c0014245:	6a 34                	push   0x34
c0014247:	e8 2f a7 ff ff       	call   c000e97b <malloc>
c001424c:	5b                   	pop    ebx
c001424d:	89 c7                	mov    edi,eax
c001424f:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014253:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014256:	53                   	push   ebx
c0014257:	57                   	push   edi
c0014258:	6a 00                	push   0x0
c001425a:	6a 34                	push   0x34
c001425c:	55                   	push   ebp
c001425d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014260:	83 c4 20             	add    esp,0x20
c0014263:	85 c0                	test   eax,eax
c0014265:	0f 85 79 06 00 00    	jne    c00148e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001426b:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014271:	0f 85 6d 06 00 00    	jne    c00148e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014277:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001427a:	85 c0                	test   eax,eax
c001427c:	0f 84 62 06 00 00    	je     c00148e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014282:	31 d2                	xor    edx,edx
c0014284:	51                   	push   ecx
c0014285:	52                   	push   edx
c0014286:	50                   	push   eax
c0014287:	55                   	push   ebp
c0014288:	e8 61 3f ff ff       	call   c00081ee <File::seek(unsigned long long)>
c001428d:	83 c4 10             	add    esp,0x10
c0014290:	85 c0                	test   eax,eax
c0014292:	0f 85 4c 06 00 00    	jne    c00148e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014298:	83 ec 0c             	sub    esp,0xc
c001429b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001429e:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00142a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00142a6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00142aa:	0f af c2             	imul   eax,edx
c00142ad:	50                   	push   eax
c00142ae:	e8 c8 a6 ff ff       	call   c000e97b <malloc>
c00142b3:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00142b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00142ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00142bd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00142c1:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00142c5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00142c9:	0f af c2             	imul   eax,edx
c00142cc:	99                   	cdq    
c00142cd:	52                   	push   edx
c00142ce:	50                   	push   eax
c00142cf:	55                   	push   ebp
c00142d0:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00142d3:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00142d6:	83 c4 20             	add    esp,0x20
c00142d9:	85 c0                	test   eax,eax
c00142db:	0f 84 03 06 00 00    	je     c00148e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00142e1:	52                   	push   edx
c00142e2:	31 d2                	xor    edx,edx
c00142e4:	52                   	push   edx
c00142e5:	50                   	push   eax
c00142e6:	55                   	push   ebp
c00142e7:	e8 02 3f ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00142ec:	83 c4 10             	add    esp,0x10
c00142ef:	85 c0                	test   eax,eax
c00142f1:	0f 85 ed 05 00 00    	jne    c00148e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00142f7:	83 ec 0c             	sub    esp,0xc
c00142fa:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00142fe:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014302:	31 f6                	xor    esi,esi
c0014304:	0f af c2             	imul   eax,edx
c0014307:	50                   	push   eax
c0014308:	e8 6e a6 ff ff       	call   c000e97b <malloc>
c001430d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014310:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014314:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014317:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001431b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001431f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014323:	0f af c2             	imul   eax,edx
c0014326:	99                   	cdq    
c0014327:	52                   	push   edx
c0014328:	50                   	push   eax
c0014329:	55                   	push   ebp
c001432a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001432d:	83 c4 20             	add    esp,0x20
c0014330:	0f b7 de             	movzx  ebx,si
c0014333:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014337:	0f 83 87 00 00 00    	jae    c00143c4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001433d:	c1 e3 05             	shl    ebx,0x5
c0014340:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014344:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014347:	75 75                	jne    c00143be <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014349:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001434c:	31 d2                	xor    edx,edx
c001434e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014352:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014355:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014359:	50                   	push   eax
c001435a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001435d:	52                   	push   edx
c001435e:	50                   	push   eax
c001435f:	55                   	push   ebp
c0014360:	e8 89 3e ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014365:	83 c4 10             	add    esp,0x10
c0014368:	85 c0                	test   eax,eax
c001436a:	0f 85 74 05 00 00    	jne    c00148e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014370:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014377:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001437a:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001437e:	31 d2                	xor    edx,edx
c0014380:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014384:	83 ec 0c             	sub    esp,0xc
c0014387:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001438b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014392:	50                   	push   eax
c0014393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014397:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001439b:	52                   	push   edx
c001439c:	50                   	push   eax
c001439d:	55                   	push   ebp
c001439e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00143a1:	83 c4 1c             	add    esp,0x1c
c00143a4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00143a7:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00143aa:	50                   	push   eax
c00143ab:	6a 00                	push   0x0
c00143ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143b1:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00143b5:	50                   	push   eax
c00143b6:	e8 35 c1 fe ff       	call   c00004f0 <memset>
c00143bb:	83 c4 10             	add    esp,0x10
c00143be:	46                   	inc    esi
c00143bf:	e9 6c ff ff ff       	jmp    c0014330 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00143c4:	53                   	push   ebx
c00143c5:	31 db                	xor    ebx,ebx
c00143c7:	68 00 01 00 00       	push   0x100
c00143cc:	6a 00                	push   0x0
c00143ce:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00143d2:	50                   	push   eax
c00143d3:	e8 18 c1 fe ff       	call   c00004f0 <memset>
c00143d8:	83 c4 0c             	add    esp,0xc
c00143db:	68 00 01 00 00       	push   0x100
c00143e0:	6a 00                	push   0x0
c00143e2:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00143e9:	50                   	push   eax
c00143ea:	e8 01 c1 fe ff       	call   c00004f0 <memset>
c00143ef:	83 c4 10             	add    esp,0x10
c00143f2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00143fa:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014402:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001440a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014412:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001441a:	0f b7 f3             	movzx  esi,bx
c001441d:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014421:	0f 83 2d 01 00 00    	jae    c0014554 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014427:	6b f6 28             	imul   esi,esi,0x28
c001442a:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001442e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014431:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014435:	52                   	push   edx
c0014436:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001443a:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001443e:	8b 06                	mov    eax,DWORD PTR [esi]
c0014440:	6b d2 28             	imul   edx,edx,0x28
c0014443:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014447:	31 d2                	xor    edx,edx
c0014449:	52                   	push   edx
c001444a:	50                   	push   eax
c001444b:	55                   	push   ebp
c001444c:	e8 9d 3d ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014451:	83 c4 0c             	add    esp,0xc
c0014454:	6a 20                	push   0x20
c0014456:	6a 00                	push   0x0
c0014458:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001445f:	51                   	push   ecx
c0014460:	e8 8b c0 fe ff       	call   c00004f0 <memset>
c0014465:	59                   	pop    ecx
c0014466:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014469:	8d 54 24 58          	lea    edx,[esp+0x58]
c001446d:	52                   	push   edx
c001446e:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014475:	51                   	push   ecx
c0014476:	6a 00                	push   0x0
c0014478:	6a 1f                	push   0x1f
c001447a:	55                   	push   ebp
c001447b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001447e:	83 c4 1c             	add    esp,0x1c
c0014481:	6a 09                	push   0x9
c0014483:	68 db 28 02 c0       	push   0xc00228db
c0014488:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001448f:	51                   	push   ecx
c0014490:	e8 eb be fe ff       	call   c0000380 <memcmp>
c0014495:	83 c4 10             	add    esp,0x10
c0014498:	85 c0                	test   eax,eax
c001449a:	75 21                	jne    c00144bd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001449c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144a0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00144a4:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00144a8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00144ac:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00144af:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00144b6:	89 d0                	mov    eax,edx
c00144b8:	40                   	inc    eax
c00144b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00144bd:	50                   	push   eax
c00144be:	6a 09                	push   0x9
c00144c0:	68 e5 28 02 c0       	push   0xc00228e5
c00144c5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00144cc:	50                   	push   eax
c00144cd:	e8 ae be fe ff       	call   c0000380 <memcmp>
c00144d2:	83 c4 10             	add    esp,0x10
c00144d5:	85 c0                	test   eax,eax
c00144d7:	75 21                	jne    c00144fa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00144d9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00144dd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00144e1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00144e5:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00144e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00144ec:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00144f3:	89 d0                	mov    eax,edx
c00144f5:	40                   	inc    eax
c00144f6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00144fa:	50                   	push   eax
c00144fb:	50                   	push   eax
c00144fc:	68 b1 28 02 c0       	push   0xc00228b1
c0014501:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014508:	50                   	push   eax
c0014509:	e8 42 c2 fe ff       	call   c0000750 <strcmp>
c001450e:	83 c4 10             	add    esp,0x10
c0014511:	85 c0                	test   eax,eax
c0014513:	75 0f                	jne    c0014524 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014515:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014518:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001451c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014520:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014524:	50                   	push   eax
c0014525:	50                   	push   eax
c0014526:	68 b9 28 02 c0       	push   0xc00228b9
c001452b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014532:	50                   	push   eax
c0014533:	e8 18 c2 fe ff       	call   c0000750 <strcmp>
c0014538:	83 c4 10             	add    esp,0x10
c001453b:	85 c0                	test   eax,eax
c001453d:	75 0f                	jne    c001454e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001453f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014542:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014546:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001454a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001454e:	43                   	inc    ebx
c001454f:	e9 c6 fe ff ff       	jmp    c001441a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014554:	31 d2                	xor    edx,edx
c0014556:	50                   	push   eax
c0014557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001455b:	52                   	push   edx
c001455c:	50                   	push   eax
c001455d:	55                   	push   ebp
c001455e:	e8 8b 3c ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014563:	58                   	pop    eax
c0014564:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014568:	e8 0e a4 ff ff       	call   c000e97b <malloc>
c001456d:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014570:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014574:	31 d2                	xor    edx,edx
c0014576:	58                   	pop    eax
c0014577:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001457b:	53                   	push   ebx
c001457c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014580:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014584:	52                   	push   edx
c0014585:	50                   	push   eax
c0014586:	55                   	push   ebp
c0014587:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001458a:	83 c4 14             	add    esp,0x14
c001458d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014591:	e8 e5 a3 ff ff       	call   c000e97b <malloc>
c0014596:	31 d2                	xor    edx,edx
c0014598:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001459c:	83 c4 0c             	add    esp,0xc
c001459f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00145a3:	52                   	push   edx
c00145a4:	50                   	push   eax
c00145a5:	55                   	push   ebp
c00145a6:	e8 43 3c ff ff       	call   c00081ee <File::seek(unsigned long long)>
c00145ab:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00145ae:	31 d2                	xor    edx,edx
c00145b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145b3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00145b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00145bb:	52                   	push   edx
c00145bc:	50                   	push   eax
c00145bd:	55                   	push   ebp
c00145be:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00145c1:	83 c4 20             	add    esp,0x20
c00145c4:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c00145c9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00145d1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00145d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00145d9:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00145dd:	0f 84 05 03 00 00    	je     c00148e8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c00145e3:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00145ea:	31 d2                	xor    edx,edx
c00145ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00145f0:	c1 e8 03             	shr    eax,0x3
c00145f3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00145f7:	51                   	push   ecx
c00145f8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00145fc:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014600:	52                   	push   edx
c0014601:	50                   	push   eax
c0014602:	55                   	push   ebp
c0014603:	e8 e6 3b ff ff       	call   c00081ee <File::seek(unsigned long long)>
c0014608:	5b                   	pop    ebx
c0014609:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001460d:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014614:	e8 62 a3 ff ff       	call   c000e97b <malloc>
c0014619:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001461c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014620:	31 d2                	xor    edx,edx
c0014622:	5e                   	pop    esi
c0014623:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014627:	50                   	push   eax
c0014628:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001462c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014630:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014637:	52                   	push   edx
c0014638:	50                   	push   eax
c0014639:	55                   	push   ebp
c001463a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001463d:	83 c4 20             	add    esp,0x20
c0014640:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014648:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001464c:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014650:	0f 8d 76 02 00 00    	jge    c00148cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014656:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001465a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001465e:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014663:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014666:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001466a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001466e:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014672:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014676:	c1 e8 08             	shr    eax,0x8
c0014679:	89 c6                	mov    esi,eax
c001467b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001467f:	c1 e6 04             	shl    esi,0x4
c0014682:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014686:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014689:	85 db                	test   ebx,ebx
c001468b:	0f 85 b3 00 00 00    	jne    c0014744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014691:	83 ec 0c             	sub    esp,0xc
c0014694:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014698:	03 06                	add    eax,DWORD PTR [esi]
c001469a:	50                   	push   eax
c001469b:	e8 40 f8 ff ff       	call   c0013ee0 <Thr::getAddressOfKernelSymbol(char const*)>
c00146a0:	83 c4 10             	add    esp,0x10
c00146a3:	89 c3                	mov    ebx,eax
c00146a5:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c00146aa:	85 c0                	test   eax,eax
c00146ac:	0f 85 92 00 00 00    	jne    c0014744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00146b2:	83 ec 0c             	sub    esp,0xc
c00146b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00146b9:	03 06                	add    eax,DWORD PTR [esi]
c00146bb:	50                   	push   eax
c00146bc:	e8 7b b0 ff ff       	call   c000f73c <KeResolveCompatibilitySymbol(char*)>
c00146c1:	83 c4 10             	add    esp,0x10
c00146c4:	89 c3                	mov    ebx,eax
c00146c6:	85 c0                	test   eax,eax
c00146c8:	75 7a                	jne    c0014744 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c00146ca:	51                   	push   ecx
c00146cb:	51                   	push   ecx
c00146cc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146d0:	03 06                	add    eax,DWORD PTR [esi]
c00146d2:	50                   	push   eax
c00146d3:	68 ef 28 02 c0       	push   0xc00228ef
c00146d8:	e8 87 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146dd:	58                   	pop    eax
c00146de:	5a                   	pop    edx
c00146df:	68 09 29 02 c0       	push   0xc0022909
c00146e4:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00146eb:	50                   	push   eax
c00146ec:	e8 4f bf fe ff       	call   c0000640 <strcpy>
c00146f1:	59                   	pop    ecx
c00146f2:	58                   	pop    eax
c00146f3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00146f7:	03 06                	add    eax,DWORD PTR [esi]
c00146f9:	50                   	push   eax
c00146fa:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014701:	50                   	push   eax
c0014702:	e8 39 c1 fe ff       	call   c0000840 <strcat>
c0014707:	58                   	pop    eax
c0014708:	5a                   	pop    edx
c0014709:	68 a3 29 02 c0       	push   0xc00229a3
c001470e:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014715:	50                   	push   eax
c0014716:	e8 25 c1 fe ff       	call   c0000840 <strcat>
c001471b:	83 c4 10             	add    esp,0x10
c001471e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014723:	0f 84 5d 01 00 00    	je     c0014886 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014729:	83 ec 0c             	sub    esp,0xc
c001472c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014733:	50                   	push   eax
c0014734:	e8 99 a5 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0014739:	83 c4 10             	add    esp,0x10
c001473c:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014740:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014744:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014749:	83 f8 01             	cmp    eax,0x1
c001474c:	0f 85 8f 00 00 00    	jne    c00147e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014752:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014759:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001475d:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014761:	01 ce                	add    esi,ecx
c0014763:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c001476b:	0f 94 c0             	sete   al
c001476e:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014776:	0f 94 c2             	sete   dl
c0014779:	09 c2                	or     edx,eax
c001477b:	8b 06                	mov    eax,DWORD PTR [esi]
c001477d:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014782:	0f b6 d2             	movzx  edx,dl
c0014785:	74 41                	je     c00147c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014787:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c001478a:	85 d2                	test   edx,edx
c001478c:	75 15                	jne    c00147a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001478e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014792:	66 83 f8 0c          	cmp    ax,0xc
c0014796:	76 05                	jbe    c001479d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014798:	b8 0c 00 00 00       	mov    eax,0xc
c001479d:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00147a1:	76 37                	jbe    c00147da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147a3:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00147a7:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00147ac:	0f 84 d4 00 00 00    	je     c0014886 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00147b2:	83 ec 0c             	sub    esp,0xc
c00147b5:	68 20 29 02 c0       	push   0xc0022920
c00147ba:	e8 13 a5 ff ff       	call   c000ecd2 <KePanic(char const*)>
c00147bf:	83 c4 10             	add    esp,0x10
c00147c2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00147c6:	eb 12                	jmp    c00147da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147c8:	01 c1                	add    ecx,eax
c00147ca:	85 d2                	test   edx,edx
c00147cc:	75 0c                	jne    c00147da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147ce:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00147d2:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00147d6:	77 02                	ja     c00147da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c00147d8:	01 d9                	add    ecx,ebx
c00147da:	89 0e                	mov    DWORD PTR [esi],ecx
c00147dc:	e9 e2 00 00 00       	jmp    c00148c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c00147e1:	83 f8 02             	cmp    eax,0x2
c00147e4:	75 77                	jne    c001485d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00147e6:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00147ed:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00147f1:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00147f5:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00147fd:	74 21                	je     c0014820 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00147ff:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014807:	74 17                	je     c0014820 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014809:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c001480d:	b8 0a 00 00 00       	mov    eax,0xa
c0014812:	83 fa 0e             	cmp    edx,0xe
c0014815:	77 03                	ja     c001481a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014817:	8d 42 fc             	lea    eax,[edx-0x4]
c001481a:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001481e:	76 17                	jbe    c0014837 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014820:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014825:	74 5f                	je     c0014886 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014827:	83 ec 0c             	sub    esp,0xc
c001482a:	68 3c 29 02 c0       	push   0xc002293c
c001482f:	e8 9e a4 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0014834:	83 c4 10             	add    esp,0x10
c0014837:	8b 06                	mov    eax,DWORD PTR [esi]
c0014839:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001483e:	74 13                	je     c0014853 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014840:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014844:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c001484b:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c001484f:	01 d0                	add    eax,edx
c0014851:	eb 04                	jmp    c0014857 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014853:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014857:	01 c3                	add    ebx,eax
c0014859:	89 1e                	mov    DWORD PTR [esi],ebx
c001485b:	eb 66                	jmp    c00148c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001485d:	52                   	push   edx
c001485e:	52                   	push   edx
c001485f:	50                   	push   eax
c0014860:	68 58 29 02 c0       	push   0xc0022958
c0014865:	e8 fa 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001486a:	83 c4 10             	add    esp,0x10
c001486d:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014872:	74 12                	je     c0014886 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014874:	83 ec 0c             	sub    esp,0xc
c0014877:	68 63 29 02 c0       	push   0xc0022963
c001487c:	e8 51 a4 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0014881:	83 c4 10             	add    esp,0x10
c0014884:	eb 3d                	jmp    c00148c3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014886:	83 ec 0c             	sub    esp,0xc
c0014889:	55                   	push   ebp
c001488a:	e8 ff 38 ff ff       	call   c000818e <File::close()>
c001488f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014892:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014895:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014898:	59                   	pop    ecx
c0014899:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001489d:	e8 e9 a0 ff ff       	call   c000e98b <free>
c00148a2:	5b                   	pop    ebx
c00148a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00148a7:	e8 df a0 ff ff       	call   c000e98b <free>
c00148ac:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148af:	e8 d7 a0 ff ff       	call   c000e98b <free>
c00148b4:	5e                   	pop    esi
c00148b5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148b9:	e8 cd a0 ff ff       	call   c000e98b <free>
c00148be:	83 c4 10             	add    esp,0x10
c00148c1:	eb 21                	jmp    c00148e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00148c3:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00148c7:	e9 7c fd ff ff       	jmp    c0014648 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c00148cc:	83 ec 0c             	sub    esp,0xc
c00148cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00148d3:	e8 b3 a0 ff ff       	call   c000e98b <free>
c00148d8:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00148dc:	83 c4 10             	add    esp,0x10
c00148df:	e9 f1 fc ff ff       	jmp    c00145d5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00148e4:	31 c0                	xor    eax,eax
c00148e6:	eb 33                	jmp    c001491b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00148e8:	83 ec 0c             	sub    esp,0xc
c00148eb:	55                   	push   ebp
c00148ec:	e8 9d 38 ff ff       	call   c000818e <File::close()>
c00148f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00148f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00148f7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00148fa:	58                   	pop    eax
c00148fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00148ff:	e8 87 a0 ff ff       	call   c000e98b <free>
c0014904:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014907:	e8 7f a0 ff ff       	call   c000e98b <free>
c001490c:	5a                   	pop    edx
c001490d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014911:	e8 75 a0 ff ff       	call   c000e98b <free>
c0014916:	83 c4 10             	add    esp,0x10
c0014919:	b0 01                	mov    al,0x1
c001491b:	81 c4 5c 03 00 00    	add    esp,0x35c
c0014921:	5b                   	pop    ebx
c0014922:	5e                   	pop    esi
c0014923:	5f                   	pop    edi
c0014924:	5d                   	pop    ebp
c0014925:	c3                   	ret    

c0014926 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0014926:	56                   	push   esi
c0014927:	31 d2                	xor    edx,edx
c0014929:	53                   	push   ebx
c001492a:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014930:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014934:	39 d3                	cmp    ebx,edx
c0014936:	7e 1b                	jle    c0014953 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0014938:	8b 04 95 00 c1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd3f00]
c001493f:	39 c8                	cmp    eax,ecx
c0014941:	77 0d                	ja     c0014950 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0014943:	8b 34 95 00 bf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd4100]
c001494a:	01 c6                	add    esi,eax
c001494c:	39 ce                	cmp    esi,ecx
c001494e:	77 05                	ja     c0014955 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0014950:	42                   	inc    edx
c0014951:	eb e1                	jmp    c0014934 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0014953:	31 c0                	xor    eax,eax
c0014955:	5b                   	pop    ebx
c0014956:	5e                   	pop    esi
c0014957:	c3                   	ret    

c0014958 <Thr::getDriverNameFromAddress(unsigned long)>:
c0014958:	53                   	push   ebx
c0014959:	31 c0                	xor    eax,eax
c001495b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001495f:	8b 1d e0 be 02 c0    	mov    ebx,DWORD PTR ds:0xc002bee0
c0014965:	39 c3                	cmp    ebx,eax
c0014967:	7e 22                	jle    c001498b <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0014969:	8b 14 85 00 c1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd3f00]
c0014970:	39 ca                	cmp    edx,ecx
c0014972:	77 14                	ja     c0014988 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0014974:	03 14 85 00 bf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd4100]
c001497b:	39 ca                	cmp    edx,ecx
c001497d:	76 09                	jbe    c0014988 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001497f:	8b 04 85 00 c3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3d00]
c0014986:	eb 05                	jmp    c001498d <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0014988:	40                   	inc    eax
c0014989:	eb da                	jmp    c0014965 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001498b:	31 c0                	xor    eax,eax
c001498d:	5b                   	pop    ebx
c001498e:	c3                   	ret    

c001498f <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001498f:	53                   	push   ebx
c0014990:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0014994:	53                   	push   ebx
c0014995:	e8 8c ff ff ff       	call   c0014926 <Thr::getDriverBaseFromAddress(unsigned long)>
c001499a:	5a                   	pop    edx
c001499b:	31 d2                	xor    edx,edx
c001499d:	85 c0                	test   eax,eax
c001499f:	74 04                	je     c00149a5 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00149a1:	89 da                	mov    edx,ebx
c00149a3:	29 c2                	sub    edx,eax
c00149a5:	89 d0                	mov    eax,edx
c00149a7:	5b                   	pop    ebx
c00149a8:	c3                   	ret    

c00149a9 <Thr::loadDLL(char const*, bool)>:
c00149a9:	55                   	push   ebp
c00149aa:	57                   	push   edi
c00149ab:	56                   	push   esi
c00149ac:	53                   	push   ebx
c00149ad:	81 ec 34 01 00 00    	sub    esp,0x134
c00149b3:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00149ba:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00149c1:	56                   	push   esi
c00149c2:	68 7b 29 02 c0       	push   0xc002297b
c00149c7:	e8 98 25 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00149cc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00149d3:	e8 a3 9f ff ff       	call   c000e97b <malloc>
c00149d8:	83 c4 0c             	add    esp,0xc
c00149db:	89 c3                	mov    ebx,eax
c00149dd:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00149e3:	56                   	push   esi
c00149e4:	50                   	push   eax
c00149e5:	e8 28 37 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c00149ea:	83 c4 10             	add    esp,0x10
c00149ed:	85 db                	test   ebx,ebx
c00149ef:	75 3c                	jne    c0014a2d <Thr::loadDLL(char const*, bool)+0x84>
c00149f1:	89 f8                	mov    eax,edi
c00149f3:	84 c0                	test   al,al
c00149f5:	0f 84 f3 01 00 00    	je     c0014bee <Thr::loadDLL(char const*, bool)+0x245>
c00149fb:	55                   	push   ebp
c00149fc:	55                   	push   ebp
c00149fd:	68 8c 29 02 c0       	push   0xc002298c
c0014a02:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0014a06:	55                   	push   ebp
c0014a07:	e8 34 bc fe ff       	call   c0000640 <strcpy>
c0014a0c:	58                   	pop    eax
c0014a0d:	5a                   	pop    edx
c0014a0e:	56                   	push   esi
c0014a0f:	55                   	push   ebp
c0014a10:	e8 2b be fe ff       	call   c0000840 <strcat>
c0014a15:	59                   	pop    ecx
c0014a16:	58                   	pop    eax
c0014a17:	68 a3 29 02 c0       	push   0xc00229a3
c0014a1c:	55                   	push   ebp
c0014a1d:	e8 1e be fe ff       	call   c0000840 <strcat>
c0014a22:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014a25:	e8 a8 a2 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0014a2a:	83 c4 10             	add    esp,0x10
c0014a2d:	51                   	push   ecx
c0014a2e:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0014a32:	50                   	push   eax
c0014a33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014a37:	50                   	push   eax
c0014a38:	53                   	push   ebx
c0014a39:	e8 f4 39 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0014a3e:	83 c4 10             	add    esp,0x10
c0014a41:	89 c5                	mov    ebp,eax
c0014a43:	85 db                	test   ebx,ebx
c0014a45:	74 0c                	je     c0014a53 <Thr::loadDLL(char const*, bool)+0xaa>
c0014a47:	83 ec 0c             	sub    esp,0xc
c0014a4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a4c:	53                   	push   ebx
c0014a4d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a50:	83 c4 10             	add    esp,0x10
c0014a53:	83 ec 0c             	sub    esp,0xc
c0014a56:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0014a5b:	50                   	push   eax
c0014a5c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a60:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014a64:	55                   	push   ebp
c0014a65:	68 a5 29 02 c0       	push   0xc00229a5
c0014a6a:	e8 f5 24 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014a6f:	83 c4 20             	add    esp,0x20
c0014a72:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0014a77:	75 0a                	jne    c0014a83 <Thr::loadDLL(char const*, bool)+0xda>
c0014a79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014a7d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0014a81:	75 3c                	jne    c0014abf <Thr::loadDLL(char const*, bool)+0x116>
c0014a83:	89 f8                	mov    eax,edi
c0014a85:	84 c0                	test   al,al
c0014a87:	0f 84 49 01 00 00    	je     c0014bd6 <Thr::loadDLL(char const*, bool)+0x22d>
c0014a8d:	51                   	push   ecx
c0014a8e:	51                   	push   ecx
c0014a8f:	68 c6 29 02 c0       	push   0xc00229c6
c0014a94:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0014a98:	53                   	push   ebx
c0014a99:	e8 a2 bb fe ff       	call   c0000640 <strcpy>
c0014a9e:	5d                   	pop    ebp
c0014a9f:	58                   	pop    eax
c0014aa0:	56                   	push   esi
c0014aa1:	53                   	push   ebx
c0014aa2:	e8 99 bd fe ff       	call   c0000840 <strcat>
c0014aa7:	58                   	pop    eax
c0014aa8:	5a                   	pop    edx
c0014aa9:	68 a3 29 02 c0       	push   0xc00229a3
c0014aae:	53                   	push   ebx
c0014aaf:	e8 8c bd fe ff       	call   c0000840 <strcat>
c0014ab4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ab7:	e8 16 a2 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0014abc:	83 c4 10             	add    esp,0x10
c0014abf:	52                   	push   edx
c0014ac0:	6a 03                	push   0x3
c0014ac2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ac6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014aca:	05 ff 0f 00 00       	add    eax,0xfff
c0014acf:	83 d2 00             	adc    edx,0x0
c0014ad2:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014ad6:	50                   	push   eax
c0014ad7:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014add:	e8 56 dd ff ff       	call   c0012838 <VAS::allocatePages(int, int)>
c0014ae2:	59                   	pop    ecx
c0014ae3:	89 c3                	mov    ebx,eax
c0014ae5:	5d                   	pop    ebp
c0014ae6:	50                   	push   eax
c0014ae7:	68 fa 20 02 c0       	push   0xc00220fa
c0014aec:	e8 73 24 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014af1:	89 34 24             	mov    DWORD PTR [esp],esi
c0014af4:	e8 77 ba fe ff       	call   c0000570 <strlen>
c0014af9:	8b 2d e0 be 02 c0    	mov    ebp,DWORD PTR ds:0xc002bee0
c0014aff:	40                   	inc    eax
c0014b00:	89 04 24             	mov    DWORD PTR [esp],eax
c0014b03:	e8 73 9e ff ff       	call   c000e97b <malloc>
c0014b08:	89 04 ad 00 c3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd3d00],eax
c0014b0f:	58                   	pop    eax
c0014b10:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014b15:	5a                   	pop    edx
c0014b16:	56                   	push   esi
c0014b17:	ff 34 85 00 c3 02 c0 	push   DWORD PTR [eax*4-0x3ffd3d00]
c0014b1e:	e8 1d bb fe ff       	call   c0000640 <strcpy>
c0014b23:	a1 e0 be 02 c0       	mov    eax,ds:0xc002bee0
c0014b28:	8d 50 01             	lea    edx,[eax+0x1]
c0014b2b:	89 1c 85 00 c1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f00],ebx
c0014b32:	89 15 e0 be 02 c0    	mov    DWORD PTR ds:0xc002bee0,edx
c0014b38:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014b3c:	83 c4 0c             	add    esp,0xc
c0014b3f:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c0014b46:	6a 01                	push   0x1
c0014b48:	53                   	push   ebx
c0014b49:	56                   	push   esi
c0014b4a:	e8 9e f6 ff ff       	call   c00141ed <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0014b4f:	83 c4 10             	add    esp,0x10
c0014b52:	0f b6 c0             	movzx  eax,al
c0014b55:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b59:	85 c0                	test   eax,eax
c0014b5b:	0f 85 89 00 00 00    	jne    c0014bea <Thr::loadDLL(char const*, bool)+0x241>
c0014b61:	89 f8                	mov    eax,edi
c0014b63:	84 c0                	test   al,al
c0014b65:	74 73                	je     c0014bda <Thr::loadDLL(char const*, bool)+0x231>
c0014b67:	83 ec 0c             	sub    esp,0xc
c0014b6a:	68 df 29 02 c0       	push   0xc00229df
c0014b6f:	e8 5e a1 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0014b74:	83 c4 10             	add    esp,0x10
c0014b77:	eb 61                	jmp    c0014bda <Thr::loadDLL(char const*, bool)+0x231>
c0014b79:	50                   	push   eax
c0014b7a:	50                   	push   eax
c0014b7b:	89 e8                	mov    eax,ebp
c0014b7d:	c1 e0 0c             	shl    eax,0xc
c0014b80:	01 d8                	add    eax,ebx
c0014b82:	50                   	push   eax
c0014b83:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c0014b89:	e8 a6 d7 ff ff       	call   c0012334 <VAS::getPageTableEntry(unsigned long)>
c0014b8e:	83 c4 10             	add    esp,0x10
c0014b91:	8b 00                	mov    eax,DWORD PTR [eax]
c0014b93:	a8 60                	test   al,0x60
c0014b95:	75 11                	jne    c0014ba8 <Thr::loadDLL(char const*, bool)+0x1ff>
c0014b97:	83 ec 0c             	sub    esp,0xc
c0014b9a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014b9f:	50                   	push   eax
c0014ba0:	e8 b8 a2 ff ff       	call   c000ee5d <Phys::freePage(unsigned long)>
c0014ba5:	83 c4 10             	add    esp,0x10
c0014ba8:	45                   	inc    ebp
c0014ba9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014bb1:	05 ff 0f 00 00       	add    eax,0xfff
c0014bb6:	bf 00 00 00 00       	mov    edi,0x0
c0014bbb:	83 d2 00             	adc    edx,0x0
c0014bbe:	0f ac d0 0c          	shrd   eax,edx,0xc
c0014bc2:	c1 ea 0c             	shr    edx,0xc
c0014bc5:	39 c5                	cmp    ebp,eax
c0014bc7:	89 d1                	mov    ecx,edx
c0014bc9:	89 f8                	mov    eax,edi
c0014bcb:	19 c8                	sbb    eax,ecx
c0014bcd:	72 aa                	jb     c0014b79 <Thr::loadDLL(char const*, bool)+0x1d0>
c0014bcf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014bd4:	75 18                	jne    c0014bee <Thr::loadDLL(char const*, bool)+0x245>
c0014bd6:	31 db                	xor    ebx,ebx
c0014bd8:	eb 14                	jmp    c0014bee <Thr::loadDLL(char const*, bool)+0x245>
c0014bda:	83 ec 0c             	sub    esp,0xc
c0014bdd:	68 fe 29 02 c0       	push   0xc00229fe
c0014be2:	e8 eb a0 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0014be7:	83 c4 10             	add    esp,0x10
c0014bea:	31 ed                	xor    ebp,ebp
c0014bec:	eb bb                	jmp    c0014ba9 <Thr::loadDLL(char const*, bool)+0x200>
c0014bee:	81 c4 2c 01 00 00    	add    esp,0x12c
c0014bf4:	89 d8                	mov    eax,ebx
c0014bf6:	5b                   	pop    ebx
c0014bf7:	5e                   	pop    esi
c0014bf8:	5f                   	pop    edi
c0014bf9:	5d                   	pop    ebp
c0014bfa:	c3                   	ret    

c0014bfb <Thr::executeDLL(unsigned long, void*)>:
c0014bfb:	56                   	push   esi
c0014bfc:	53                   	push   ebx
c0014bfd:	52                   	push   edx
c0014bfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c02:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014c06:	85 db                	test   ebx,ebx
c0014c08:	75 10                	jne    c0014c1a <Thr::executeDLL(unsigned long, void*)+0x1f>
c0014c0a:	83 ec 0c             	sub    esp,0xc
c0014c0d:	68 1a 2a 02 c0       	push   0xc0022a1a
c0014c12:	e8 bb a0 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0014c17:	83 c4 10             	add    esp,0x10
c0014c1a:	50                   	push   eax
c0014c1b:	50                   	push   eax
c0014c1c:	53                   	push   ebx
c0014c1d:	68 44 2a 02 c0       	push   0xc0022a44
c0014c22:	e8 3d 23 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014c27:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0014c2b:	89 d8                	mov    eax,ebx
c0014c2d:	83 c4 14             	add    esp,0x14
c0014c30:	5b                   	pop    ebx
c0014c31:	5e                   	pop    esi
c0014c32:	ff e0                	jmp    eax

c0014c34 <KeProcessExec(Process*, char const*)>:
c0014c34:	56                   	push   esi
c0014c35:	53                   	push   ebx
c0014c36:	83 ec 04             	sub    esp,0x4
c0014c39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014c3d:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c0014c43:	85 f6                	test   esi,esi
c0014c45:	74 16                	je     c0014c5d <KeProcessExec(Process*, char const*)+0x29>
c0014c47:	83 ec 0c             	sub    esp,0xc
c0014c4a:	56                   	push   esi
c0014c4b:	e8 76 d9 ff ff       	call   c00125c6 <VAS::~VAS()>
c0014c50:	58                   	pop    eax
c0014c51:	5a                   	pop    edx
c0014c52:	6a 14                	push   0x14
c0014c54:	56                   	push   esi
c0014c55:	e8 ae 7a ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0014c5a:	83 c4 10             	add    esp,0x10
c0014c5d:	83 ec 0c             	sub    esp,0xc
c0014c60:	6a 14                	push   0x14
c0014c62:	e8 14 9d ff ff       	call   c000e97b <malloc>
c0014c67:	89 c6                	mov    esi,eax
c0014c69:	58                   	pop    eax
c0014c6a:	5a                   	pop    edx
c0014c6b:	6a 00                	push   0x0
c0014c6d:	56                   	push   esi
c0014c6e:	e8 f9 dd ff ff       	call   c0012a6c <VAS::VAS(bool)>
c0014c73:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0014c79:	59                   	pop    ecx
c0014c7a:	5e                   	pop    esi
c0014c7b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c7f:	50                   	push   eax
c0014c80:	53                   	push   ebx
c0014c81:	e8 35 f0 ff ff       	call   c0013cbb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014c86:	83 c4 14             	add    esp,0x14
c0014c89:	31 c0                	xor    eax,eax
c0014c8b:	5b                   	pop    ebx
c0014c8c:	5e                   	pop    esi
c0014c8d:	c3                   	ret    
c0014c8e:	66 90                	xchg   ax,ax

c0014c90 <userModeEntryPoint(void*)>:
c0014c90:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0014c95:	83 e8 01             	sub    eax,0x1
c0014c98:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0014c9d:	75 01                	jne    c0014ca0 <userModeEntryPoint(void*)+0x10>
c0014c9f:	fb                   	sti    
c0014ca0:	fb                   	sti    
c0014ca1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ca6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014ca9:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0014caf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014cb3:	e9 87 b5 fe ff       	jmp    c000023f <goToUsermode>

c0014cb8 <changeTSS>:
c0014cb8:	83 ec 14             	sub    esp,0x14
c0014cbb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014cc0:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014cc3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0014cc8:	c1 e2 15             	shl    edx,0x15
c0014ccb:	29 d0                	sub    eax,edx
c0014ccd:	50                   	push   eax
c0014cce:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c0014cd3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cd9:	05 68 11 00 00       	add    eax,0x1168
c0014cde:	50                   	push   eax
c0014cdf:	e8 2c cc ff ff       	call   c0011910 <TSS::setESP(unsigned long)>
c0014ce4:	83 c4 1c             	add    esp,0x1c
c0014ce7:	c3                   	ret    

c0014ce8 <switchToThread(ThreadControlBlock*)>:
c0014ce8:	57                   	push   edi
c0014ce9:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0014cef:	56                   	push   esi
c0014cf0:	85 c9                	test   ecx,ecx
c0014cf2:	53                   	push   ebx
c0014cf3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014cf7:	0f 85 8b 00 00 00    	jne    c0014d88 <switchToThread(ThreadControlBlock*)+0xa0>
c0014cfd:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0014d01:	81 fa ff 00 00 00    	cmp    edx,0xff
c0014d07:	74 7b                	je     c0014d84 <switchToThread(ThreadControlBlock*)+0x9c>
c0014d09:	b8 00 04 00 00       	mov    eax,0x400
c0014d0e:	29 d0                	sub    eax,edx
c0014d10:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0014d13:	d1 f8                	sar    eax,1
c0014d15:	01 d0                	add    eax,edx
c0014d17:	90                   	nop
c0014d18:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0014d1b:	e8 44 37 00 00       	call   c0018464 <HalQueryPerformanceCounter()>
c0014d20:	a3 f0 c6 02 c0       	mov    ds:0xc002c6f0,eax
c0014d25:	89 15 f4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6f4,edx
c0014d2b:	89 c6                	mov    esi,eax
c0014d2d:	89 d7                	mov    edi,edx
c0014d2f:	2b 35 e0 c6 02 c0    	sub    esi,DWORD PTR ds:0xc002c6e0
c0014d35:	a3 e0 c6 02 c0       	mov    ds:0xc002c6e0,eax
c0014d3a:	1b 3d e4 c6 02 c0    	sbb    edi,DWORD PTR ds:0xc002c6e4
c0014d40:	89 35 e8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e8,esi
c0014d46:	89 3d ec c6 02 c0    	mov    DWORD PTR ds:0xc002c6ec,edi
c0014d4c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014d52:	89 15 e4 c6 02 c0    	mov    DWORD PTR ds:0xc002c6e4,edx
c0014d58:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0014d5b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0014d5e:	01 c6                	add    esi,eax
c0014d60:	11 d7                	adc    edi,edx
c0014d62:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0014d65:	83 ec 0c             	sub    esp,0xc
c0014d68:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0014d6b:	53                   	push   ebx
c0014d6c:	e8 06 b5 fe ff       	call   c0000277 <switchToThreadASM>
c0014d71:	0f 20 c0             	mov    eax,cr0
c0014d74:	83 c8 08             	or     eax,0x8
c0014d77:	0f 22 c0             	mov    cr0,eax
c0014d7a:	83 c4 10             	add    esp,0x10
c0014d7d:	5b                   	pop    ebx
c0014d7e:	5e                   	pop    esi
c0014d7f:	5f                   	pop    edi
c0014d80:	c3                   	ret    
c0014d81:	8d 76 00             	lea    esi,[esi+0x0]
c0014d84:	31 c0                	xor    eax,eax
c0014d86:	eb 90                	jmp    c0014d18 <switchToThread(ThreadControlBlock*)+0x30>
c0014d88:	5b                   	pop    ebx
c0014d89:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c0014d93:	5e                   	pop    esi
c0014d94:	5f                   	pop    edi
c0014d95:	c3                   	ret    
c0014d96:	66 90                	xchg   ax,ax

c0014d98 <Process::addArgs(char**)>:
c0014d98:	57                   	push   edi
c0014d99:	56                   	push   esi
c0014d9a:	53                   	push   ebx
c0014d9b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014d9f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0014da3:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0014dad:	85 ff                	test   edi,edi
c0014daf:	74 4f                	je     c0014e00 <Process::addArgs(char**)+0x68>
c0014db1:	8b 07                	mov    eax,DWORD PTR [edi]
c0014db3:	85 c0                	test   eax,eax
c0014db5:	74 49                	je     c0014e00 <Process::addArgs(char**)+0x68>
c0014db7:	31 db                	xor    ebx,ebx
c0014db9:	8d 76 00             	lea    esi,[esi+0x0]
c0014dbc:	83 ec 0c             	sub    esp,0xc
c0014dbf:	50                   	push   eax
c0014dc0:	e8 ab b7 fe ff       	call   c0000570 <strlen>
c0014dc5:	83 c0 01             	add    eax,0x1
c0014dc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0014dcb:	e8 ab 9b ff ff       	call   c000e97b <malloc>
c0014dd0:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0014dd7:	5a                   	pop    edx
c0014dd8:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014ddb:	59                   	pop    ecx
c0014ddc:	83 c3 01             	add    ebx,0x1
c0014ddf:	52                   	push   edx
c0014de0:	50                   	push   eax
c0014de1:	e8 5a b8 fe ff       	call   c0000640 <strcpy>
c0014de6:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0014dec:	83 c4 10             	add    esp,0x10
c0014def:	83 c1 01             	add    ecx,0x1
c0014df2:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0014df8:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0014dfb:	85 c0                	test   eax,eax
c0014dfd:	75 bd                	jne    c0014dbc <Process::addArgs(char**)+0x24>
c0014dff:	90                   	nop
c0014e00:	5b                   	pop    ebx
c0014e01:	5e                   	pop    esi
c0014e02:	5f                   	pop    edi
c0014e03:	c3                   	ret    

c0014e04 <Process::Process(char const*, Process*, char**)>:
c0014e04:	56                   	push   esi
c0014e05:	53                   	push   ebx
c0014e06:	83 ec 14             	sub    esp,0x14
c0014e09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e0d:	05 0c 02 00 00       	add    eax,0x20c
c0014e12:	bb 07 00 00 00       	mov    ebx,0x7
c0014e17:	89 c6                	mov    esi,eax
c0014e19:	8d 76 00             	lea    esi,[esi+0x0]
c0014e1c:	85 db                	test   ebx,ebx
c0014e1e:	78 14                	js     c0014e34 <Process::Process(char const*, Process*, char**)+0x30>
c0014e20:	83 ec 0c             	sub    esp,0xc
c0014e23:	56                   	push   esi
c0014e24:	e8 37 b5 00 00       	call   c0020360 <ThreadControlBlock::ThreadControlBlock()>
c0014e29:	83 c4 10             	add    esp,0x10
c0014e2c:	83 c6 5f             	add    esi,0x5f
c0014e2f:	83 eb 01             	sub    ebx,0x1
c0014e32:	eb e8                	jmp    c0014e1c <Process::Process(char const*, Process*, char**)+0x18>
c0014e34:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e38:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0014e3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e43:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0014e4a:	83 ec 0c             	sub    esp,0xc
c0014e4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e51:	e8 b6 8d ff ff       	call   c000dc0c <KeNewProcessEnv(Process*)>
c0014e56:	83 c4 10             	add    esp,0x10
c0014e59:	89 c2                	mov    edx,eax
c0014e5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e5f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0014e65:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014e69:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0014e72:	a1 1c 42 02 c0       	mov    eax,ds:0xc002421c
c0014e77:	8d 50 01             	lea    edx,[eax+0x1]
c0014e7a:	89 15 1c 42 02 c0    	mov    DWORD PTR ds:0xc002421c,edx
c0014e80:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e84:	89 02                	mov    DWORD PTR [edx],eax
c0014e86:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0014e8e:	83 ec 0c             	sub    esp,0xc
c0014e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014e95:	e8 e1 9a ff ff       	call   c000e97b <malloc>
c0014e9a:	83 c4 10             	add    esp,0x10
c0014e9d:	89 c3                	mov    ebx,eax
c0014e9f:	83 ec 08             	sub    esp,0x8
c0014ea2:	6a 00                	push   0x0
c0014ea4:	53                   	push   ebx
c0014ea5:	e8 c2 db ff ff       	call   c0012a6c <VAS::VAS(bool)>
c0014eaa:	83 c4 10             	add    esp,0x10
c0014ead:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014eb1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0014eb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ebb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0014ec5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ec9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0014ecd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0014ed3:	e8 a7 ae ff ff       	call   c000fd7f <KeInitSignals()>
c0014ed8:	89 c2                	mov    edx,eax
c0014eda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ede:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0014ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ee8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014eee:	85 c0                	test   eax,eax
c0014ef0:	74 42                	je     c0014f34 <Process::Process(char const*, Process*, char**)+0x130>
c0014ef2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ef6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014efc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0014f02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f06:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0014f0c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f10:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0014f16:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0014f1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f20:	05 0c 01 00 00       	add    eax,0x10c
c0014f25:	83 ec 08             	sub    esp,0x8
c0014f28:	52                   	push   edx
c0014f29:	50                   	push   eax
c0014f2a:	e8 11 b7 fe ff       	call   c0000640 <strcpy>
c0014f2f:	83 c4 10             	add    esp,0x10
c0014f32:	eb 64                	jmp    c0014f98 <Process::Process(char const*, Process*, char**)+0x194>
c0014f34:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0014f3c:	83 ec 0c             	sub    esp,0xc
c0014f3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014f43:	e8 33 9a ff ff       	call   c000e97b <malloc>
c0014f48:	83 c4 10             	add    esp,0x10
c0014f4b:	89 c3                	mov    ebx,eax
c0014f4d:	83 ec 08             	sub    esp,0x8
c0014f50:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f54:	53                   	push   ebx
c0014f55:	e8 c8 c6 ff ff       	call   c0011622 <VgaText::VgaText(char const*)>
c0014f5a:	83 c4 10             	add    esp,0x10
c0014f5d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f61:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0014f67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f6b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f71:	83 ec 0c             	sub    esp,0xc
c0014f74:	50                   	push   eax
c0014f75:	e8 46 bf ff ff       	call   c0010ec0 <addToTerminalCycle(VgaText*)>
c0014f7a:	83 c4 10             	add    esp,0x10
c0014f7d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f81:	05 0c 01 00 00       	add    eax,0x10c
c0014f86:	83 ec 08             	sub    esp,0x8
c0014f89:	68 63 2a 02 c0       	push   0xc0022a63
c0014f8e:	50                   	push   eax
c0014f8f:	e8 ac b6 fe ff       	call   c0000640 <strcpy>
c0014f94:	83 c4 10             	add    esp,0x10
c0014f97:	90                   	nop
c0014f98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f9c:	83 c0 0c             	add    eax,0xc
c0014f9f:	83 ec 08             	sub    esp,0x8
c0014fa2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fa6:	50                   	push   eax
c0014fa7:	e8 94 b6 fe ff       	call   c0000640 <strcpy>
c0014fac:	83 c4 10             	add    esp,0x10
c0014faf:	83 ec 08             	sub    esp,0x8
c0014fb2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0014fb6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fba:	e8 d9 fd ff ff       	call   c0014d98 <Process::addArgs(char**)>
c0014fbf:	83 c4 10             	add    esp,0x10
c0014fc2:	83 ec 08             	sub    esp,0x8
c0014fc5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fc9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014fcd:	e8 e9 ec ff ff       	call   c0013cbb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0014fd2:	83 c4 10             	add    esp,0x10
c0014fd5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014fd9:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0014fdd:	83 f0 01             	xor    eax,0x1
c0014fe0:	88 c2                	mov    dl,al
c0014fe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014fe6:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0014fec:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0014ff1:	83 ec 04             	sub    esp,0x4
c0014ff4:	50                   	push   eax
c0014ff5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ff9:	68 bc 2a 02 c0       	push   0xc0022abc
c0014ffe:	e8 61 1f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015003:	83 c4 10             	add    esp,0x10
c0015006:	90                   	nop
c0015007:	83 c4 14             	add    esp,0x14
c001500a:	5b                   	pop    ebx
c001500b:	5e                   	pop    esi
c001500c:	c3                   	ret    
c001500d:	90                   	nop
c001500e:	66 90                	xchg   ax,ax

c0015010 <Process::Process(bool, char const*, Process*, char**)>:
c0015010:	56                   	push   esi
c0015011:	53                   	push   ebx
c0015012:	83 ec 24             	sub    esp,0x24
c0015015:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015019:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001501d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015021:	05 0c 02 00 00       	add    eax,0x20c
c0015026:	bb 07 00 00 00       	mov    ebx,0x7
c001502b:	89 c6                	mov    esi,eax
c001502d:	8d 76 00             	lea    esi,[esi+0x0]
c0015030:	85 db                	test   ebx,ebx
c0015032:	78 14                	js     c0015048 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015034:	83 ec 0c             	sub    esp,0xc
c0015037:	56                   	push   esi
c0015038:	e8 23 b3 00 00       	call   c0020360 <ThreadControlBlock::ThreadControlBlock()>
c001503d:	83 c4 10             	add    esp,0x10
c0015040:	83 c6 5f             	add    esi,0x5f
c0015043:	83 eb 01             	sub    ebx,0x1
c0015046:	eb e8                	jmp    c0015030 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015048:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001504c:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015053:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015057:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c001505e:	83 ec 0c             	sub    esp,0xc
c0015061:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015065:	e8 a2 8b ff ff       	call   c000dc0c <KeNewProcessEnv(Process*)>
c001506a:	83 c4 10             	add    esp,0x10
c001506d:	89 c2                	mov    edx,eax
c001506f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015073:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015079:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001507d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015086:	a1 1c 42 02 c0       	mov    eax,ds:0xc002421c
c001508b:	8d 50 01             	lea    edx,[eax+0x1]
c001508e:	89 15 1c 42 02 c0    	mov    DWORD PTR ds:0xc002421c,edx
c0015094:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015098:	89 02                	mov    DWORD PTR [edx],eax
c001509a:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00150a2:	83 ec 0c             	sub    esp,0xc
c00150a5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00150a9:	e8 cd 98 ff ff       	call   c000e97b <malloc>
c00150ae:	83 c4 10             	add    esp,0x10
c00150b1:	89 c3                	mov    ebx,eax
c00150b3:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00150b8:	83 ec 08             	sub    esp,0x8
c00150bb:	50                   	push   eax
c00150bc:	53                   	push   ebx
c00150bd:	e8 aa d9 ff ff       	call   c0012a6c <VAS::VAS(bool)>
c00150c2:	83 c4 10             	add    esp,0x10
c00150c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150c9:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00150cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150d3:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00150dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150e1:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00150e5:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00150eb:	e8 8f ac ff ff       	call   c000fd7f <KeInitSignals()>
c00150f0:	89 c2                	mov    edx,eax
c00150f2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00150f6:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00150fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015100:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015106:	85 c0                	test   eax,eax
c0015108:	74 42                	je     c001514c <Process::Process(bool, char const*, Process*, char**)+0x13c>
c001510a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001510e:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015114:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001511a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001511e:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015124:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015128:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001512e:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015134:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015138:	05 0c 01 00 00       	add    eax,0x10c
c001513d:	83 ec 08             	sub    esp,0x8
c0015140:	52                   	push   edx
c0015141:	50                   	push   eax
c0015142:	e8 f9 b4 fe ff       	call   c0000640 <strcpy>
c0015147:	83 c4 10             	add    esp,0x10
c001514a:	eb 64                	jmp    c00151b0 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c001514c:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015154:	83 ec 0c             	sub    esp,0xc
c0015157:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001515b:	e8 1b 98 ff ff       	call   c000e97b <malloc>
c0015160:	83 c4 10             	add    esp,0x10
c0015163:	89 c3                	mov    ebx,eax
c0015165:	83 ec 08             	sub    esp,0x8
c0015168:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001516c:	53                   	push   ebx
c001516d:	e8 b0 c4 ff ff       	call   c0011622 <VgaText::VgaText(char const*)>
c0015172:	83 c4 10             	add    esp,0x10
c0015175:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015179:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001517f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015183:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015189:	83 ec 0c             	sub    esp,0xc
c001518c:	50                   	push   eax
c001518d:	e8 2e bd ff ff       	call   c0010ec0 <addToTerminalCycle(VgaText*)>
c0015192:	83 c4 10             	add    esp,0x10
c0015195:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015199:	05 0c 01 00 00       	add    eax,0x10c
c001519e:	83 ec 08             	sub    esp,0x8
c00151a1:	68 63 2a 02 c0       	push   0xc0022a63
c00151a6:	50                   	push   eax
c00151a7:	e8 94 b4 fe ff       	call   c0000640 <strcpy>
c00151ac:	83 c4 10             	add    esp,0x10
c00151af:	90                   	nop
c00151b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00151b4:	83 c0 0c             	add    eax,0xc
c00151b7:	83 ec 08             	sub    esp,0x8
c00151ba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00151be:	50                   	push   eax
c00151bf:	e8 7c b4 fe ff       	call   c0000640 <strcpy>
c00151c4:	83 c4 10             	add    esp,0x10
c00151c7:	83 ec 08             	sub    esp,0x8
c00151ca:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00151ce:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00151d2:	e8 c1 fb ff ff       	call   c0014d98 <Process::addArgs(char**)>
c00151d7:	83 c4 10             	add    esp,0x10
c00151da:	90                   	nop
c00151db:	83 c4 24             	add    esp,0x24
c00151de:	5b                   	pop    ebx
c00151df:	5e                   	pop    esi
c00151e0:	c3                   	ret    
c00151e1:	8d 76 00             	lea    esi,[esi+0x0]

c00151e4 <taskStartupFunction>:
c00151e4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151e9:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00151ec:	c3                   	ret    
c00151ed:	8d 76 00             	lea    esi,[esi+0x0]

c00151f0 <KeDisablePreemption()>:
c00151f0:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c00151f5:	85 c0                	test   eax,eax
c00151f7:	75 13                	jne    c001520c <KeDisablePreemption()+0x1c>
c00151f9:	8a 15 74 9d 02 c0    	mov    dl,BYTE PTR ds:0xc0029d74
c00151ff:	c6 05 74 9d 02 c0 00 	mov    BYTE PTR ds:0xc0029d74,0x0
c0015206:	88 15 88 c6 02 c0    	mov    BYTE PTR ds:0xc002c688,dl
c001520c:	83 c0 01             	add    eax,0x1
c001520f:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c0015214:	c3                   	ret    
c0015215:	8d 76 00             	lea    esi,[esi+0x0]

c0015218 <KeRestorePreemption()>:
c0015218:	a1 8c c6 02 c0       	mov    eax,ds:0xc002c68c
c001521d:	83 e8 01             	sub    eax,0x1
c0015220:	a3 8c c6 02 c0       	mov    ds:0xc002c68c,eax
c0015225:	75 0d                	jne    c0015234 <KeRestorePreemption()+0x1c>
c0015227:	a0 88 c6 02 c0       	mov    al,ds:0xc002c688
c001522c:	a2 74 9d 02 c0       	mov    ds:0xc0029d74,al
c0015231:	8d 76 00             	lea    esi,[esi+0x0]
c0015234:	c3                   	ret    
c0015235:	90                   	nop
c0015236:	66 90                	xchg   ax,ax

c0015238 <Process::createThread(void (*)(void*), void*, int)>:
c0015238:	57                   	push   edi
c0015239:	31 c9                	xor    ecx,ecx
c001523b:	56                   	push   esi
c001523c:	53                   	push   ebx
c001523d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015241:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0015248:	89 f2                	mov    edx,esi
c001524a:	66 90                	xchg   ax,ax
c001524c:	0f b7 c2             	movzx  eax,dx
c001524f:	80 e2 01             	and    dl,0x1
c0015252:	74 14                	je     c0015268 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015254:	d1 f8                	sar    eax,1
c0015256:	83 c1 01             	add    ecx,0x1
c0015259:	89 c2                	mov    edx,eax
c001525b:	83 f9 10             	cmp    ecx,0x10
c001525e:	75 ec                	jne    c001524c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015260:	31 db                	xor    ebx,ebx
c0015262:	89 d8                	mov    eax,ebx
c0015264:	5b                   	pop    ebx
c0015265:	5e                   	pop    esi
c0015266:	5f                   	pop    edi
c0015267:	c3                   	ret    
c0015268:	b8 01 00 00 00       	mov    eax,0x1
c001526d:	d3 e0                	shl    eax,cl
c001526f:	09 c6                	or     esi,eax
c0015271:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015274:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001527b:	01 c0                	add    eax,eax
c001527d:	01 c8                	add    eax,ecx
c001527f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015282:	01 d8                	add    eax,ebx
c0015284:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001528b:	75 0b                	jne    c0015298 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001528d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015297:	90                   	nop
c0015298:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001529e:	83 ec 0c             	sub    esp,0xc
c00152a1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00152a4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00152a7:	01 c0                	add    eax,eax
c00152a9:	01 c8                	add    eax,ecx
c00152ab:	8d 3c 80             	lea    edi,[eax+eax*4]
c00152ae:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00152b1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00152b7:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00152bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00152c1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00152c7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00152cd:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00152d3:	89 ca                	mov    edx,ecx
c00152d5:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00152dc:	f7 da                	neg    edx
c00152de:	c1 e2 15             	shl    edx,0x15
c00152e1:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00152e7:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00152ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00152f1:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00152fb:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0015301:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015305:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001530b:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0015315:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001531f:	68 00 01 00 00       	push   0x100
c0015324:	e8 52 96 ff ff       	call   c000e97b <malloc>
c0015329:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001532c:	58                   	pop    eax
c001532d:	5a                   	pop    edx
c001532e:	53                   	push   ebx
c001532f:	68 cc c6 02 c0       	push   0xc002c6cc
c0015334:	e8 d3 ab 00 00       	call   c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015339:	83 c4 10             	add    esp,0x10
c001533c:	89 d8                	mov    eax,ebx
c001533e:	5b                   	pop    ebx
c001533f:	5e                   	pop    esi
c0015340:	5f                   	pop    edi
c0015341:	c3                   	ret    
c0015342:	66 90                	xchg   ax,ax

c0015344 <Process::createUserThread()>:
c0015344:	83 ec 0c             	sub    esp,0xc
c0015347:	68 80 00 00 00       	push   0x80
c001534c:	6a 00                	push   0x0
c001534e:	68 90 4c 01 c0       	push   0xc0014c90
c0015353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015357:	50                   	push   eax
c0015358:	e8 db fe ff ff       	call   c0015238 <Process::createThread(void (*)(void*), void*, int)>
c001535d:	83 c4 1c             	add    esp,0x1c
c0015360:	c3                   	ret    
c0015361:	8d 76 00             	lea    esi,[esi+0x0]

c0015364 <setupMultitasking(void (*)())>:
c0015364:	56                   	push   esi
c0015365:	53                   	push   ebx
c0015366:	83 ec 04             	sub    esp,0x4
c0015369:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001536d:	eb 11                	jmp    c0015380 <setupMultitasking(void (*)())+0x1c>
c001536f:	90                   	nop
c0015370:	83 ec 0c             	sub    esp,0xc
c0015373:	68 cc c6 02 c0       	push   0xc002c6cc
c0015378:	e8 d3 aa 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001537d:	83 c4 10             	add    esp,0x10
c0015380:	83 ec 0c             	sub    esp,0xc
c0015383:	68 cc c6 02 c0       	push   0xc002c6cc
c0015388:	e8 9f aa 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001538d:	83 c4 10             	add    esp,0x10
c0015390:	84 c0                	test   al,al
c0015392:	74 dc                	je     c0015370 <setupMultitasking(void (*)())+0xc>
c0015394:	83 ec 0c             	sub    esp,0xc
c0015397:	68 24 07 00 00       	push   0x724
c001539c:	e8 da 95 ff ff       	call   c000e97b <malloc>
c00153a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00153a8:	89 c3                	mov    ebx,eax
c00153aa:	6a 00                	push   0x0
c00153ac:	68 67 2a 02 c0       	push   0xc0022a67
c00153b1:	6a 01                	push   0x1
c00153b3:	50                   	push   eax
c00153b4:	e8 57 fc ff ff       	call   c0015010 <Process::Process(bool, char const*, Process*, char**)>
c00153b9:	83 c4 14             	add    esp,0x14
c00153bc:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00153c2:	89 1d d8 c6 02 c0    	mov    DWORD PTR ds:0xc002c6d8,ebx
c00153c8:	50                   	push   eax
c00153c9:	e8 47 bd ff ff       	call   c0011115 <setActiveTerminal(VgaText*)>
c00153ce:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00153d5:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00153df:	83 c8 01             	or     eax,0x1
c00153e2:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00153e9:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00153ef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00153f2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00153fc:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015402:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015408:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015412:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001541c:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015426:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001542c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015436:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001543c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015446:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c001544d:	e8 29 95 ff ff       	call   c000e97b <malloc>
c0015452:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015458:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001545e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015464:	5a                   	pop    edx
c0015465:	59                   	pop    ecx
c0015466:	68 63 2a 02 c0       	push   0xc0022a63
c001546b:	50                   	push   eax
c001546c:	e8 cf b1 fe ff       	call   c0000640 <strcpy>
c0015471:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015478:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001547c:	83 c4 14             	add    esp,0x14
c001547f:	5b                   	pop    ebx
c0015480:	5e                   	pop    esi
c0015481:	e9 e3 ad fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015486:	66 90                	xchg   ax,ax

c0015488 <schedule()>:
c0015488:	8b 15 ac c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6ac
c001548e:	85 d2                	test   edx,edx
c0015490:	74 0e                	je     c00154a0 <schedule()+0x18>
c0015492:	c7 05 a8 c6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x1
c001549c:	c3                   	ret    
c001549d:	8d 76 00             	lea    esi,[esi+0x0]
c00154a0:	53                   	push   ebx
c00154a1:	83 ec 14             	sub    esp,0x14
c00154a4:	68 cc c6 02 c0       	push   0xc002c6cc
c00154a9:	e8 7e a9 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00154ae:	83 c4 10             	add    esp,0x10
c00154b1:	84 c0                	test   al,al
c00154b3:	75 3f                	jne    c00154f4 <schedule()+0x6c>
c00154b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00154ba:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00154bd:	83 fa 01             	cmp    edx,0x1
c00154c0:	74 3a                	je     c00154fc <schedule()+0x74>
c00154c2:	66 90                	xchg   ax,ax
c00154c4:	83 ec 0c             	sub    esp,0xc
c00154c7:	68 cc c6 02 c0       	push   0xc002c6cc
c00154cc:	e8 77 a9 00 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00154d1:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00154d8:	89 c3                	mov    ebx,eax
c00154da:	e8 71 a9 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00154df:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00154e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00154e9:	e8 fa f7 ff ff       	call   c0014ce8 <switchToThread(ThreadControlBlock*)>
c00154ee:	83 c4 10             	add    esp,0x10
c00154f1:	8d 76 00             	lea    esi,[esi+0x0]
c00154f4:	83 c4 08             	add    esp,0x8
c00154f7:	5b                   	pop    ebx
c00154f8:	c3                   	ret    
c00154f9:	8d 76 00             	lea    esi,[esi+0x0]
c00154fc:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015503:	83 ec 08             	sub    esp,0x8
c0015506:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001550b:	50                   	push   eax
c001550c:	68 cc c6 02 c0       	push   0xc002c6cc
c0015511:	e8 f6 a9 00 00       	call   c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015516:	83 c4 10             	add    esp,0x10
c0015519:	eb a9                	jmp    c00154c4 <schedule()+0x3c>
c001551b:	90                   	nop

c001551c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001551c:	83 ec 0c             	sub    esp,0xc
c001551f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015524:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015528:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001552b:	e8 58 ff ff ff       	call   c0015488 <schedule()>
c0015530:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015535:	83 e8 01             	sub    eax,0x1
c0015538:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001553d:	75 01                	jne    c0015540 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c001553f:	fb                   	sti    
c0015540:	83 c4 0c             	add    esp,0xc
c0015543:	c3                   	ret    

c0015544 <blockTask(TaskState)>:
c0015544:	83 ec 0c             	sub    esp,0xc
c0015547:	fa                   	cli    
c0015548:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001554d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015551:	83 c0 01             	add    eax,0x1
c0015554:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015559:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001555e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015561:	e8 22 ff ff ff       	call   c0015488 <schedule()>
c0015566:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001556b:	83 e8 01             	sub    eax,0x1
c001556e:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015573:	75 03                	jne    c0015578 <blockTask(TaskState)+0x34>
c0015575:	fb                   	sti    
c0015576:	66 90                	xchg   ax,ax
c0015578:	83 c4 0c             	add    esp,0xc
c001557b:	c3                   	ret    

c001557c <waitTask(int, int*, int)>:
c001557c:	83 ec 18             	sub    esp,0x18
c001557f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015584:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015588:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001558b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001558f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015594:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015597:	6a 07                	push   0x7
c0015599:	e8 a6 ff ff ff       	call   c0015544 <blockTask(TaskState)>
c001559e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155a3:	83 c4 10             	add    esp,0x10
c00155a6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00155a9:	85 d2                	test   edx,edx
c00155ab:	74 0b                	je     c00155b8 <waitTask(int, int*, int)+0x3c>
c00155ad:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00155b0:	89 02                	mov    DWORD PTR [edx],eax
c00155b2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00155b7:	90                   	nop
c00155b8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00155bb:	83 c4 0c             	add    esp,0xc
c00155be:	c3                   	ret    
c00155bf:	90                   	nop

c00155c0 <milliTenthSleepUntil(unsigned int)>:
c00155c0:	83 ec 0c             	sub    esp,0xc
c00155c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00155c7:	39 05 ec 97 02 c0    	cmp    DWORD PTR ds:0xc00297ec,eax
c00155cd:	76 05                	jbe    c00155d4 <milliTenthSleepUntil(unsigned int)+0x14>
c00155cf:	90                   	nop
c00155d0:	83 c4 0c             	add    esp,0xc
c00155d3:	c3                   	ret    
c00155d4:	fa                   	cli    
c00155d5:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c00155db:	83 ec 08             	sub    esp,0x8
c00155de:	83 c2 01             	add    edx,0x1
c00155e1:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c00155e7:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c00155ed:	83 c1 01             	add    ecx,0x1
c00155f0:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c00155f6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00155fc:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c00155ff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015604:	50                   	push   eax
c0015605:	68 c0 c6 02 c0       	push   0xc002c6c0
c001560a:	e8 fd a8 00 00       	call   c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001560f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015616:	e8 29 ff ff ff       	call   c0015544 <blockTask(TaskState)>
c001561b:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015620:	83 c4 10             	add    esp,0x10
c0015623:	83 e8 01             	sub    eax,0x1
c0015626:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c001562b:	85 c0                	test   eax,eax
c001562d:	75 09                	jne    c0015638 <milliTenthSleepUntil(unsigned int)+0x78>
c001562f:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0015634:	85 c0                	test   eax,eax
c0015636:	75 14                	jne    c001564c <milliTenthSleepUntil(unsigned int)+0x8c>
c0015638:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001563d:	83 e8 01             	sub    eax,0x1
c0015640:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015645:	75 89                	jne    c00155d0 <milliTenthSleepUntil(unsigned int)+0x10>
c0015647:	fb                   	sti    
c0015648:	83 c4 0c             	add    esp,0xc
c001564b:	c3                   	ret    
c001564c:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015656:	e8 2d fe ff ff       	call   c0015488 <schedule()>
c001565b:	eb db                	jmp    c0015638 <milliTenthSleepUntil(unsigned int)+0x78>
c001565d:	8d 76 00             	lea    esi,[esi+0x0]

c0015660 <milliTenthSleep(unsigned int)>:
c0015660:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015664:	a1 ec 97 02 c0       	mov    eax,ds:0xc00297ec
c0015669:	01 c2                	add    edx,eax
c001566b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001566f:	e9 4c ff ff ff       	jmp    c00155c0 <milliTenthSleepUntil(unsigned int)>

c0015674 <sleep(unsigned int)>:
c0015674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015678:	8d 04 80             	lea    eax,[eax+eax*4]
c001567b:	8d 04 80             	lea    eax,[eax+eax*4]
c001567e:	8d 04 80             	lea    eax,[eax+eax*4]
c0015681:	8d 04 80             	lea    eax,[eax+eax*4]
c0015684:	c1 e0 04             	shl    eax,0x4
c0015687:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001568b:	eb d3                	jmp    c0015660 <milliTenthSleep(unsigned int)>
c001568d:	8d 76 00             	lea    esi,[esi+0x0]

c0015690 <taskReturned>:
c0015690:	83 ec 18             	sub    esp,0x18
c0015693:	68 e8 2a 02 c0       	push   0xc0022ae8
c0015698:	e8 35 96 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001569d:	83 c4 10             	add    esp,0x10
c00156a0:	83 ec 0c             	sub    esp,0xc
c00156a3:	6a 02                	push   0x2
c00156a5:	e8 9a fe ff ff       	call   c0015544 <blockTask(TaskState)>
c00156aa:	fa                   	cli    
c00156ab:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00156b0:	83 c0 01             	add    eax,0x1
c00156b3:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00156b8:	e8 cb fd ff ff       	call   c0015488 <schedule()>
c00156bd:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00156c2:	83 c4 10             	add    esp,0x10
c00156c5:	83 e8 01             	sub    eax,0x1
c00156c8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00156cd:	85 c0                	test   eax,eax
c00156cf:	75 cf                	jne    c00156a0 <taskReturned+0x10>
c00156d1:	fb                   	sti    
c00156d2:	eb cc                	jmp    c00156a0 <taskReturned+0x10>

c00156d4 <Thr::processFromPID(int)>:
c00156d4:	57                   	push   edi
c00156d5:	56                   	push   esi
c00156d6:	53                   	push   ebx
c00156d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00156db:	fa                   	cli    
c00156dc:	8b 0d b0 c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6b0
c00156e2:	83 ec 0c             	sub    esp,0xc
c00156e5:	83 c1 01             	add    ecx,0x1
c00156e8:	68 cc c6 02 c0       	push   0xc002c6cc
c00156ed:	89 0d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ecx
c00156f3:	e8 50 a7 00 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00156f8:	83 c4 10             	add    esp,0x10
c00156fb:	89 c7                	mov    edi,eax
c00156fd:	eb 15                	jmp    c0015714 <Thr::processFromPID(int)+0x40>
c00156ff:	90                   	nop
c0015700:	83 ec 0c             	sub    esp,0xc
c0015703:	68 cc c6 02 c0       	push   0xc002c6cc
c0015708:	e8 3b a7 00 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001570d:	83 c4 10             	add    esp,0x10
c0015710:	39 f8                	cmp    eax,edi
c0015712:	74 50                	je     c0015764 <Thr::processFromPID(int)+0x90>
c0015714:	83 ec 0c             	sub    esp,0xc
c0015717:	68 cc c6 02 c0       	push   0xc002c6cc
c001571c:	e8 27 a7 00 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015721:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015728:	89 c3                	mov    ebx,eax
c001572a:	e8 21 a7 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001572f:	58                   	pop    eax
c0015730:	5a                   	pop    edx
c0015731:	53                   	push   ebx
c0015732:	68 cc c6 02 c0       	push   0xc002c6cc
c0015737:	e8 d0 a7 00 00       	call   c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001573c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001573f:	83 c4 10             	add    esp,0x10
c0015742:	39 30                	cmp    DWORD PTR [eax],esi
c0015744:	75 ba                	jne    c0015700 <Thr::processFromPID(int)+0x2c>
c0015746:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001574b:	83 e8 01             	sub    eax,0x1
c001574e:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015753:	74 0b                	je     c0015760 <Thr::processFromPID(int)+0x8c>
c0015755:	8d 76 00             	lea    esi,[esi+0x0]
c0015758:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001575b:	5b                   	pop    ebx
c001575c:	5e                   	pop    esi
c001575d:	5f                   	pop    edi
c001575e:	c3                   	ret    
c001575f:	90                   	nop
c0015760:	fb                   	sti    
c0015761:	eb f5                	jmp    c0015758 <Thr::processFromPID(int)+0x84>
c0015763:	90                   	nop
c0015764:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015769:	83 e8 01             	sub    eax,0x1
c001576c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015771:	75 05                	jne    c0015778 <Thr::processFromPID(int)+0xa4>
c0015773:	fb                   	sti    
c0015774:	5b                   	pop    ebx
c0015775:	5e                   	pop    esi
c0015776:	5f                   	pop    edi
c0015777:	c3                   	ret    
c0015778:	5b                   	pop    ebx
c0015779:	31 c0                	xor    eax,eax
c001577b:	5e                   	pop    esi
c001577c:	5f                   	pop    edi
c001577d:	c3                   	ret    
c001577e:	66 90                	xchg   ax,ax

c0015780 <unblockTask(ThreadControlBlock*)>:
c0015780:	53                   	push   ebx
c0015781:	83 ec 08             	sub    esp,0x8
c0015784:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015788:	fa                   	cli    
c0015789:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001578e:	83 c0 01             	add    eax,0x1
c0015791:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015796:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0015799:	85 c0                	test   eax,eax
c001579b:	74 67                	je     c0015804 <unblockTask(ThreadControlBlock*)+0x84>
c001579d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00157a0:	83 f8 01             	cmp    eax,0x1
c00157a3:	74 37                	je     c00157dc <unblockTask(ThreadControlBlock*)+0x5c>
c00157a5:	83 ec 0c             	sub    esp,0xc
c00157a8:	68 cc c6 02 c0       	push   0xc002c6cc
c00157ad:	e8 96 a6 00 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00157b2:	83 c4 10             	add    esp,0x10
c00157b5:	85 c0                	test   eax,eax
c00157b7:	75 1b                	jne    c00157d4 <unblockTask(ThreadControlBlock*)+0x54>
c00157b9:	eb 5d                	jmp    c0015818 <unblockTask(ThreadControlBlock*)+0x98>
c00157bb:	90                   	nop
c00157bc:	83 ec 08             	sub    esp,0x8
c00157bf:	50                   	push   eax
c00157c0:	68 cc c6 02 c0       	push   0xc002c6cc
c00157c5:	e8 8a ab 00 00       	call   c0020354 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00157ca:	83 c4 10             	add    esp,0x10
c00157cd:	85 c0                	test   eax,eax
c00157cf:	74 47                	je     c0015818 <unblockTask(ThreadControlBlock*)+0x98>
c00157d1:	8d 76 00             	lea    esi,[esi+0x0]
c00157d4:	39 c3                	cmp    ebx,eax
c00157d6:	75 e4                	jne    c00157bc <unblockTask(ThreadControlBlock*)+0x3c>
c00157d8:	eb 12                	jmp    c00157ec <unblockTask(ThreadControlBlock*)+0x6c>
c00157da:	66 90                	xchg   ax,ax
c00157dc:	83 ec 0c             	sub    esp,0xc
c00157df:	68 85 2a 02 c0       	push   0xc0022a85
c00157e4:	e8 7b 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00157e9:	83 c4 10             	add    esp,0x10
c00157ec:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00157f1:	83 e8 01             	sub    eax,0x1
c00157f4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00157f9:	75 01                	jne    c00157fc <unblockTask(ThreadControlBlock*)+0x7c>
c00157fb:	fb                   	sti    
c00157fc:	83 c4 08             	add    esp,0x8
c00157ff:	5b                   	pop    ebx
c0015800:	c3                   	ret    
c0015801:	8d 76 00             	lea    esi,[esi+0x0]
c0015804:	83 ec 0c             	sub    esp,0xc
c0015807:	68 6e 2a 02 c0       	push   0xc0022a6e
c001580c:	e8 53 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015811:	83 c4 10             	add    esp,0x10
c0015814:	eb d6                	jmp    c00157ec <unblockTask(ThreadControlBlock*)+0x6c>
c0015816:	66 90                	xchg   ax,ax
c0015818:	83 ec 08             	sub    esp,0x8
c001581b:	53                   	push   ebx
c001581c:	68 cc c6 02 c0       	push   0xc002c6cc
c0015821:	e8 e6 a6 00 00       	call   c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015826:	83 c4 10             	add    esp,0x10
c0015829:	eb c1                	jmp    c00157ec <unblockTask(ThreadControlBlock*)+0x6c>
c001582b:	90                   	nop

c001582c <cleanupTerminatedTask(ThreadControlBlock*)>:
c001582c:	55                   	push   ebp
c001582d:	57                   	push   edi
c001582e:	56                   	push   esi
c001582f:	53                   	push   ebx
c0015830:	83 ec 1c             	sub    esp,0x1c
c0015833:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0015837:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001583a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0015840:	85 ed                	test   ebp,ebp
c0015842:	7e 28                	jle    c001586c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0015844:	31 f6                	xor    esi,esi
c0015846:	66 90                	xchg   ax,ax
c0015848:	83 ec 0c             	sub    esp,0xc
c001584b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0015852:	83 c6 01             	add    esi,0x1
c0015855:	57                   	push   edi
c0015856:	e8 30 91 ff ff       	call   c000e98b <free>
c001585b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001585e:	83 c4 10             	add    esp,0x10
c0015861:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0015867:	7f df                	jg     c0015848 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0015869:	8d 76 00             	lea    esi,[esi+0x0]
c001586c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015876:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001587b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001587e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0015881:	d3 c0                	rol    eax,cl
c0015883:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001588a:	21 c8                	and    eax,ecx
c001588c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0015893:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015896:	89 f7                	mov    edi,esi
c0015898:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00158a0:	0f 85 72 01 00 00    	jne    c0015a18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00158a6:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00158ac:	85 ed                	test   ebp,ebp
c00158ae:	74 1c                	je     c00158cc <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00158b0:	83 ec 0c             	sub    esp,0xc
c00158b3:	55                   	push   ebp
c00158b4:	e8 6f 82 ff ff       	call   c000db28 <EnvVarContainer::~EnvVarContainer()>
c00158b9:	59                   	pop    ecx
c00158ba:	5e                   	pop    esi
c00158bb:	6a 0c                	push   0xc
c00158bd:	55                   	push   ebp
c00158be:	e8 45 6e ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00158c3:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00158c6:	83 c4 10             	add    esp,0x10
c00158c9:	89 f7                	mov    edi,esi
c00158cb:	90                   	nop
c00158cc:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00158d2:	85 c0                	test   eax,eax
c00158d4:	0f 84 b2 00 00 00    	je     c001598c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00158da:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00158dd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00158e1:	31 c9                	xor    ecx,ecx
c00158e3:	eb 17                	jmp    c00158fc <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00158e5:	8d 76 00             	lea    esi,[esi+0x0]
c00158e8:	83 c1 01             	add    ecx,0x1
c00158eb:	83 f9 10             	cmp    ecx,0x10
c00158ee:	0f 84 98 00 00 00    	je     c001598c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00158f4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00158fa:	66 90                	xchg   ax,ax
c00158fc:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c0015903:	d3 fa                	sar    edx,cl
c0015905:	80 e2 01             	and    dl,0x1
c0015908:	74 de                	je     c00158e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001590a:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c001590d:	01 d2                	add    edx,edx
c001590f:	01 ca                	add    edx,ecx
c0015911:	8d 14 92             	lea    edx,[edx+edx*4]
c0015914:	01 d0                	add    eax,edx
c0015916:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001591c:	83 fd 07             	cmp    ebp,0x7
c001591f:	75 c7                	jne    c00158e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015921:	05 40 02 00 00       	add    eax,0x240
c0015926:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0015929:	83 fd ff             	cmp    ebp,0xffffffff
c001592c:	0f 8c ee 00 00 00    	jl     c0015a20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0015932:	0f 84 ac 01 00 00    	je     c0015ae4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0015938:	85 ed                	test   ebp,ebp
c001593a:	0f 84 90 01 00 00    	je     c0015ad0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0015940:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0015942:	75 a4                	jne    c00158e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015944:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001594a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001594e:	01 d0                	add    eax,edx
c0015950:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0015954:	83 ec 0c             	sub    esp,0xc
c0015957:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001595d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015960:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015966:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001596d:	50                   	push   eax
c001596e:	e8 0d fe ff ff       	call   c0015780 <unblockTask(ThreadControlBlock*)>
c0015973:	83 c4 10             	add    esp,0x10
c0015976:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001597d:	89 f7                	mov    edi,esi
c001597f:	83 c1 01             	add    ecx,0x1
c0015982:	83 f9 10             	cmp    ecx,0x10
c0015985:	0f 85 69 ff ff ff    	jne    c00158f4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001598b:	90                   	nop
c001598c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0015992:	85 c0                	test   eax,eax
c0015994:	74 62                	je     c00159f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0015996:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001599c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00159a2:	74 54                	je     c00159f8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00159a4:	83 ec 0c             	sub    esp,0xc
c00159a7:	68 cc c6 02 c0       	push   0xc002c6cc
c00159ac:	e8 97 a4 00 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00159b1:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c00159b8:	89 c7                	mov    edi,eax
c00159ba:	e8 6d a4 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00159bf:	83 c4 10             	add    esp,0x10
c00159c2:	84 c0                	test   al,al
c00159c4:	0f 84 ce 00 00 00    	je     c0015a98 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00159ca:	66 90                	xchg   ax,ax
c00159cc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159cf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00159d5:	85 d2                	test   edx,edx
c00159d7:	74 0f                	je     c00159e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00159d9:	83 ec 0c             	sub    esp,0xc
c00159dc:	8b 02                	mov    eax,DWORD PTR [edx]
c00159de:	52                   	push   edx
c00159df:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00159e2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00159e5:	83 c4 10             	add    esp,0x10
c00159e8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00159f2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00159f5:	8d 76 00             	lea    esi,[esi+0x0]
c00159f8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00159fe:	85 db                	test   ebx,ebx
c0015a00:	74 16                	je     c0015a18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0015a02:	83 ec 0c             	sub    esp,0xc
c0015a05:	53                   	push   ebx
c0015a06:	e8 bb cb ff ff       	call   c00125c6 <VAS::~VAS()>
c0015a0b:	58                   	pop    eax
c0015a0c:	5a                   	pop    edx
c0015a0d:	6a 14                	push   0x14
c0015a0f:	53                   	push   ebx
c0015a10:	e8 f3 6c ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0015a15:	83 c4 10             	add    esp,0x10
c0015a18:	83 c4 1c             	add    esp,0x1c
c0015a1b:	5b                   	pop    ebx
c0015a1c:	5e                   	pop    esi
c0015a1d:	5f                   	pop    edi
c0015a1e:	5d                   	pop    ebp
c0015a1f:	c3                   	ret    
c0015a20:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015a24:	83 ec 0c             	sub    esp,0xc
c0015a27:	68 1c 2b 02 c0       	push   0xc0022b1c
c0015a2c:	e8 a1 92 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0015a31:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0015a34:	83 c4 10             	add    esp,0x10
c0015a37:	89 f7                	mov    edi,esi
c0015a39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015a3d:	e9 a6 fe ff ff       	jmp    c00158e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0015a42:	66 90                	xchg   ax,ax
c0015a44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015a4a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0015a50:	75 1e                	jne    c0015a70 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015a52:	83 ec 0c             	sub    esp,0xc
c0015a55:	68 84 2b 02 c0       	push   0xc0022b84
c0015a5a:	e8 05 15 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015a5f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0015a66:	e8 d9 fa ff ff       	call   c0015544 <blockTask(TaskState)>
c0015a6b:	83 c4 10             	add    esp,0x10
c0015a6e:	66 90                	xchg   ax,ax
c0015a70:	83 ec 08             	sub    esp,0x8
c0015a73:	56                   	push   esi
c0015a74:	68 cc c6 02 c0       	push   0xc002c6cc
c0015a79:	e8 8e a4 00 00       	call   c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015a7e:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015a85:	e8 be a3 00 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015a8a:	83 c4 10             	add    esp,0x10
c0015a8d:	39 f8                	cmp    eax,edi
c0015a8f:	0f 84 37 ff ff ff    	je     c00159cc <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0015a95:	8d 76 00             	lea    esi,[esi+0x0]
c0015a98:	83 ec 0c             	sub    esp,0xc
c0015a9b:	68 cc c6 02 c0       	push   0xc002c6cc
c0015aa0:	e8 a3 a3 00 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015aa5:	c7 04 24 cc c6 02 c0 	mov    DWORD PTR [esp],0xc002c6cc
c0015aac:	89 c6                	mov    esi,eax
c0015aae:	e8 9d a3 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015ab3:	83 c4 10             	add    esp,0x10
c0015ab6:	39 f3                	cmp    ebx,esi
c0015ab8:	74 b6                	je     c0015a70 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015aba:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0015abd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015ac0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0015ac6:	75 a8                	jne    c0015a70 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0015ac8:	e9 77 ff ff ff       	jmp    c0015a44 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0015acd:	8d 76 00             	lea    esi,[esi+0x0]
c0015ad0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015ad4:	83 ec 0c             	sub    esp,0xc
c0015ad7:	68 50 2b 02 c0       	push   0xc0022b50
c0015adc:	e9 4b ff ff ff       	jmp    c0015a2c <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0015ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ae4:	8b 36                	mov    esi,DWORD PTR [esi]
c0015ae6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0015aea:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0015aed:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0015af0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0015af6:	01 d7                	add    edi,edx
c0015af8:	89 f8                	mov    eax,edi
c0015afa:	e9 51 fe ff ff       	jmp    c0015950 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0015aff:	90                   	nop

c0015b00 <cleanerTaskFunction(void*)>:
c0015b00:	53                   	push   ebx
c0015b01:	83 ec 08             	sub    esp,0x8
c0015b04:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b09:	83 e8 01             	sub    eax,0x1
c0015b0c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b11:	75 01                	jne    c0015b14 <cleanerTaskFunction(void*)+0x14>
c0015b13:	fb                   	sti    
c0015b14:	fa                   	cli    
c0015b15:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015b1a:	80 3d 94 c6 02 c0 00 	cmp    BYTE PTR ds:0xc002c694,0x0
c0015b21:	8d 50 01             	lea    edx,[eax+0x1]
c0015b24:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015b2a:	0f 84 c4 00 00 00    	je     c0015bf4 <cleanerTaskFunction(void*)+0xf4>
c0015b30:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015b35:	85 c0                	test   eax,eax
c0015b37:	75 03                	jne    c0015b3c <cleanerTaskFunction(void*)+0x3c>
c0015b39:	fb                   	sti    
c0015b3a:	66 90                	xchg   ax,ax
c0015b3c:	c6 05 94 c6 02 c0 00 	mov    BYTE PTR ds:0xc002c694,0x0
c0015b43:	fa                   	cli    
c0015b44:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015b4a:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0015b50:	83 c2 01             	add    edx,0x1
c0015b53:	83 c1 01             	add    ecx,0x1
c0015b56:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015b5c:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c0015b62:	fa                   	cli    
c0015b63:	8b 1d b0 c6 02 c0    	mov    ebx,DWORD PTR ds:0xc002c6b0
c0015b69:	83 c3 01             	add    ebx,0x1
c0015b6c:	89 1d b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,ebx
c0015b72:	eb 28                	jmp    c0015b9c <cleanerTaskFunction(void*)+0x9c>
c0015b74:	83 ec 0c             	sub    esp,0xc
c0015b77:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015b7c:	e8 c7 a2 00 00       	call   c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b81:	c7 04 24 b4 c6 02 c0 	mov    DWORD PTR [esp],0xc002c6b4
c0015b88:	89 c3                	mov    ebx,eax
c0015b8a:	e8 c1 a2 00 00       	call   c001fe50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b8f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b92:	e8 95 fc ff ff       	call   c001582c <cleanupTerminatedTask(ThreadControlBlock*)>
c0015b97:	83 c4 10             	add    esp,0x10
c0015b9a:	66 90                	xchg   ax,ax
c0015b9c:	83 ec 0c             	sub    esp,0xc
c0015b9f:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015ba4:	e8 83 a2 00 00       	call   c001fe2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015ba9:	83 c4 10             	add    esp,0x10
c0015bac:	84 c0                	test   al,al
c0015bae:	74 c4                	je     c0015b74 <cleanerTaskFunction(void*)+0x74>
c0015bb0:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015bb5:	83 e8 01             	sub    eax,0x1
c0015bb8:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015bbd:	75 01                	jne    c0015bc0 <cleanerTaskFunction(void*)+0xc0>
c0015bbf:	fb                   	sti    
c0015bc0:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015bc5:	83 e8 01             	sub    eax,0x1
c0015bc8:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015bcd:	0f 85 31 ff ff ff    	jne    c0015b04 <cleanerTaskFunction(void*)+0x4>
c0015bd3:	a1 a8 c6 02 c0       	mov    eax,ds:0xc002c6a8
c0015bd8:	85 c0                	test   eax,eax
c0015bda:	0f 84 24 ff ff ff    	je     c0015b04 <cleanerTaskFunction(void*)+0x4>
c0015be0:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015bea:	e8 99 f8 ff ff       	call   c0015488 <schedule()>
c0015bef:	e9 10 ff ff ff       	jmp    c0015b04 <cleanerTaskFunction(void*)+0x4>
c0015bf4:	83 ec 0c             	sub    esp,0xc
c0015bf7:	6a 02                	push   0x2
c0015bf9:	e8 1e f9 ff ff       	call   c001551c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015bfe:	83 c4 10             	add    esp,0x10
c0015c01:	e9 36 ff ff ff       	jmp    c0015b3c <cleanerTaskFunction(void*)+0x3c>
c0015c06:	66 90                	xchg   ax,ax

c0015c08 <terminateTask(int)>:
c0015c08:	83 ec 14             	sub    esp,0x14
c0015c0b:	fa                   	cli    
c0015c0c:	8b 15 b0 c6 02 c0    	mov    edx,DWORD PTR ds:0xc002c6b0
c0015c12:	8b 0d ac c6 02 c0    	mov    ecx,DWORD PTR ds:0xc002c6ac
c0015c18:	83 c2 01             	add    edx,0x1
c0015c1b:	83 c1 01             	add    ecx,0x1
c0015c1e:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015c24:	89 0d ac c6 02 c0    	mov    DWORD PTR ds:0xc002c6ac,ecx
c0015c2a:	fa                   	cli    
c0015c2b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c30:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015c34:	83 c0 01             	add    eax,0x1
c0015c37:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c41:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0015c44:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c49:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0015c4c:	50                   	push   eax
c0015c4d:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015c52:	e8 b5 a2 00 00       	call   c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015c57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015c5c:	83 c4 10             	add    esp,0x10
c0015c5f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0015c66:	a1 90 c6 02 c0       	mov    eax,ds:0xc002c690
c0015c6b:	85 c0                	test   eax,eax
c0015c6d:	74 65                	je     c0015cd4 <terminateTask(int)+0xcc>
c0015c6f:	83 ec 0c             	sub    esp,0xc
c0015c72:	c6 05 94 c6 02 c0 01 	mov    BYTE PTR ds:0xc002c694,0x1
c0015c79:	50                   	push   eax
c0015c7a:	e8 01 fb ff ff       	call   c0015780 <unblockTask(ThreadControlBlock*)>
c0015c7f:	83 c4 10             	add    esp,0x10
c0015c82:	66 90                	xchg   ax,ax
c0015c84:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015c89:	83 e8 01             	sub    eax,0x1
c0015c8c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015c91:	75 01                	jne    c0015c94 <terminateTask(int)+0x8c>
c0015c93:	fb                   	sti    
c0015c94:	a1 ac c6 02 c0       	mov    eax,ds:0xc002c6ac
c0015c99:	83 e8 01             	sub    eax,0x1
c0015c9c:	a3 ac c6 02 c0       	mov    ds:0xc002c6ac,eax
c0015ca1:	75 09                	jne    c0015cac <terminateTask(int)+0xa4>
c0015ca3:	83 3d a8 c6 02 c0 00 	cmp    DWORD PTR ds:0xc002c6a8,0x0
c0015caa:	75 3c                	jne    c0015ce8 <terminateTask(int)+0xe0>
c0015cac:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015cb1:	83 e8 01             	sub    eax,0x1
c0015cb4:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015cb9:	75 01                	jne    c0015cbc <terminateTask(int)+0xb4>
c0015cbb:	fb                   	sti    
c0015cbc:	fa                   	cli    
c0015cbd:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015cc2:	83 c0 01             	add    eax,0x1
c0015cc5:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015cca:	66 90                	xchg   ax,ax
c0015ccc:	e8 b7 f7 ff ff       	call   c0015488 <schedule()>
c0015cd1:	eb d9                	jmp    c0015cac <terminateTask(int)+0xa4>
c0015cd3:	90                   	nop
c0015cd4:	83 ec 0c             	sub    esp,0xc
c0015cd7:	68 9c 2a 02 c0       	push   0xc0022a9c
c0015cdc:	e8 83 12 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015ce1:	83 c4 10             	add    esp,0x10
c0015ce4:	eb 9e                	jmp    c0015c84 <terminateTask(int)+0x7c>
c0015ce6:	66 90                	xchg   ax,ax
c0015ce8:	c7 05 a8 c6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c6a8,0x0
c0015cf2:	eb d8                	jmp    c0015ccc <terminateTask(int)+0xc4>

c0015cf4 <Thr::terminateFromIRQ(int)>:
c0015cf4:	83 ec 18             	sub    esp,0x18
c0015cf7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015cfb:	50                   	push   eax
c0015cfc:	e8 07 ff ff ff       	call   c0015c08 <terminateTask(int)>
c0015d01:	8d 76 00             	lea    esi,[esi+0x0]

c0015d04 <__static_initialization_and_destruction_0(int, int)>:
c0015d04:	83 ec 0c             	sub    esp,0xc
c0015d07:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0015d0c:	0f 85 8e 00 00 00    	jne    c0015da0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015d12:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0015d1a:	0f 85 80 00 00 00    	jne    c0015da0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0015d20:	83 ec 0c             	sub    esp,0xc
c0015d23:	68 cc c6 02 c0       	push   0xc002c6cc
c0015d28:	e8 7f a6 00 00       	call   c00203ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015d2d:	83 c4 10             	add    esp,0x10
c0015d30:	83 ec 04             	sub    esp,0x4
c0015d33:	68 70 3a 02 c0       	push   0xc0023a70
c0015d38:	68 cc c6 02 c0       	push   0xc002c6cc
c0015d3d:	68 5c 03 02 c0       	push   0xc002035c
c0015d42:	e8 71 69 ff ff       	call   c000c6b8 <__cxa_atexit>
c0015d47:	83 c4 10             	add    esp,0x10
c0015d4a:	83 ec 0c             	sub    esp,0xc
c0015d4d:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015d52:	e8 55 a6 00 00       	call   c00203ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015d57:	83 c4 10             	add    esp,0x10
c0015d5a:	83 ec 04             	sub    esp,0x4
c0015d5d:	68 70 3a 02 c0       	push   0xc0023a70
c0015d62:	68 c0 c6 02 c0       	push   0xc002c6c0
c0015d67:	68 5c 03 02 c0       	push   0xc002035c
c0015d6c:	e8 47 69 ff ff       	call   c000c6b8 <__cxa_atexit>
c0015d71:	83 c4 10             	add    esp,0x10
c0015d74:	83 ec 0c             	sub    esp,0xc
c0015d77:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015d7c:	e8 2b a6 00 00       	call   c00203ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0015d81:	83 c4 10             	add    esp,0x10
c0015d84:	83 ec 04             	sub    esp,0x4
c0015d87:	68 70 3a 02 c0       	push   0xc0023a70
c0015d8c:	68 b4 c6 02 c0       	push   0xc002c6b4
c0015d91:	68 5c 03 02 c0       	push   0xc002035c
c0015d96:	e8 1d 69 ff ff       	call   c000c6b8 <__cxa_atexit>
c0015d9b:	83 c4 10             	add    esp,0x10
c0015d9e:	66 90                	xchg   ax,ax
c0015da0:	90                   	nop
c0015da1:	83 c4 0c             	add    esp,0xc
c0015da4:	c3                   	ret    
c0015da5:	8d 76 00             	lea    esi,[esi+0x0]

c0015da8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0015da8:	83 ec 0c             	sub    esp,0xc
c0015dab:	83 ec 08             	sub    esp,0x8
c0015dae:	68 ff ff 00 00       	push   0xffff
c0015db3:	6a 01                	push   0x1
c0015db5:	e8 4a ff ff ff       	call   c0015d04 <__static_initialization_and_destruction_0(int, int)>
c0015dba:	83 c4 10             	add    esp,0x10
c0015dbd:	83 c4 0c             	add    esp,0xc
c0015dc0:	c3                   	ret    

c0015dc1 <Vm::inbv(unsigned short)>:
c0015dc1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dc5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015dca:	75 06                	jne    c0015dd2 <Vm::inbv(unsigned short)+0x11>
c0015dcc:	a0 10 c7 02 c0       	mov    al,ds:0xc002c710
c0015dd1:	c3                   	ret    
c0015dd2:	ec                   	in     al,dx
c0015dd3:	c3                   	ret    

c0015dd4 <Vm::outbv(unsigned short, unsigned char)>:
c0015dd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015dd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ddc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0015de1:	75 25                	jne    c0015e08 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0015de3:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015de9:	8d 51 01             	lea    edx,[ecx+0x1]
c0015dec:	88 81 20 c7 02 c0    	mov    BYTE PTR [ecx-0x3ffd38e0],al
c0015df2:	89 15 10 c7 02 c0    	mov    DWORD PTR ds:0xc002c710,edx
c0015df8:	83 fa 20             	cmp    edx,0x20
c0015dfb:	75 0c                	jne    c0015e09 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0015dfd:	c7 05 10 c7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x1f
c0015e07:	c3                   	ret    
c0015e08:	ee                   	out    dx,al
c0015e09:	c3                   	ret    

c0015e0a <Vm::realToLinear(unsigned short, unsigned short)>:
c0015e0a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0015e0f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0015e14:	c1 e0 04             	shl    eax,0x4
c0015e17:	01 d0                	add    eax,edx
c0015e19:	c3                   	ret    

c0015e1a <Vm::getSegment(unsigned int)>:
c0015e1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e1e:	c1 e8 10             	shr    eax,0x10
c0015e21:	c3                   	ret    

c0015e22 <Vm::getOffset(unsigned int)>:
c0015e22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e26:	c3                   	ret    

c0015e27 <Vm::mainloop2()>:
c0015e27:	83 ec 18             	sub    esp,0x18
c0015e2a:	fa                   	cli    
c0015e2b:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015e31:	6a 02                	push   0x2
c0015e33:	c6 05 09 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c709,0x1
c0015e3a:	e8 dd f6 ff ff       	call   c001551c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015e3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e44:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0015e48:	52                   	push   edx
c0015e49:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0015e4d:	52                   	push   edx
c0015e4e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0015e52:	52                   	push   edx
c0015e53:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0015e57:	50                   	push   eax
c0015e58:	e8 b2 a3 fe ff       	call   c000020f <goToVM86>
c0015e5d:	83 c4 2c             	add    esp,0x2c
c0015e60:	c3                   	ret    

c0015e61 <Vm::mainVm8086Loop(void*)>:
c0015e61:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015e66:	48                   	dec    eax
c0015e67:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015e6c:	75 01                	jne    c0015e6f <Vm::mainVm8086Loop(void*)+0xe>
c0015e6e:	fb                   	sti    
c0015e6f:	eb b6                	jmp    c0015e27 <Vm::mainloop2()>

c0015e71 <Vm::mainloop3(unsigned long)>:
c0015e71:	83 ec 18             	sub    esp,0x18
c0015e74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015e78:	fa                   	cli    
c0015e79:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015e7f:	6a 02                	push   0x2
c0015e81:	c6 05 08 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c708,0x1
c0015e88:	a3 04 c7 02 c0       	mov    ds:0xc002c704,eax
c0015e8d:	e8 8a f6 ff ff       	call   c001551c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0015e92:	83 c4 1c             	add    esp,0x1c
c0015e95:	eb 90                	jmp    c0015e27 <Vm::mainloop2()>

c0015e97 <Vm::initialise8086()>:
c0015e97:	83 ec 0c             	sub    esp,0xc
c0015e9a:	68 80 00 00 00       	push   0x80
c0015e9f:	6a 00                	push   0x0
c0015ea1:	68 61 5e 01 c0       	push   0xc0015e61
c0015ea6:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015eac:	e8 87 f3 ff ff       	call   c0015238 <Process::createThread(void (*)(void*), void*, int)>
c0015eb1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0015eb8:	a3 0c c7 02 c0       	mov    ds:0xc002c70c,eax
c0015ebd:	68 10 01 00 00       	push   0x110
c0015ec2:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0015ec7:	6a 00                	push   0x0
c0015ec9:	6a 00                	push   0x0
c0015ecb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015ed1:	e8 48 ca ff ff       	call   c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0015ed6:	83 c4 2c             	add    esp,0x2c
c0015ed9:	c3                   	ret    

c0015eda <Vm::resetConventionalMemory8086()>:
c0015eda:	c3                   	ret    

c0015edb <Vm::finish8086()>:
c0015edb:	53                   	push   ebx
c0015edc:	83 ec 08             	sub    esp,0x8
c0015edf:	fa                   	cli    
c0015ee0:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015ee6:	80 3d 08 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c708,0x0
c0015eed:	75 15                	jne    c0015f04 <Vm::finish8086()+0x29>
c0015eef:	e8 94 f5 ff ff       	call   c0015488 <schedule()>
c0015ef4:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015ef9:	48                   	dec    eax
c0015efa:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0015eff:	75 de                	jne    c0015edf <Vm::finish8086()+0x4>
c0015f01:	fb                   	sti    
c0015f02:	eb db                	jmp    c0015edf <Vm::finish8086()+0x4>
c0015f04:	83 ec 0c             	sub    esp,0xc
c0015f07:	8b 1d 04 c7 02 c0    	mov    ebx,DWORD PTR ds:0xc002c704
c0015f0d:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0015f13:	c6 05 08 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c708,0x0
c0015f1a:	e8 61 f8 ff ff       	call   c0015780 <unblockTask(ThreadControlBlock*)>
c0015f1f:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015f24:	83 c4 10             	add    esp,0x10
c0015f27:	8d 50 ff             	lea    edx,[eax-0x1]
c0015f2a:	89 15 b0 c6 02 c0    	mov    DWORD PTR ds:0xc002c6b0,edx
c0015f30:	85 d2                	test   edx,edx
c0015f32:	75 01                	jne    c0015f35 <Vm::finish8086()+0x5a>
c0015f34:	fb                   	sti    
c0015f35:	89 d8                	mov    eax,ebx
c0015f37:	83 c4 08             	add    esp,0x8
c0015f3a:	5b                   	pop    ebx
c0015f3b:	c3                   	ret    

c0015f3c <Vm::getOutput8086(unsigned char*)>:
c0015f3c:	57                   	push   edi
c0015f3d:	8b 0d 10 c7 02 c0    	mov    ecx,DWORD PTR ds:0xc002c710
c0015f43:	56                   	push   esi
c0015f44:	be 20 c7 02 c0       	mov    esi,0xc002c720
c0015f49:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0015f4d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0015f4f:	a1 10 c7 02 c0       	mov    eax,ds:0xc002c710
c0015f54:	5e                   	pop    esi
c0015f55:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0015f5f:	5f                   	pop    edi
c0015f60:	c3                   	ret    

c0015f61 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0015f61:	55                   	push   ebp
c0015f62:	57                   	push   edi
c0015f63:	56                   	push   esi
c0015f64:	53                   	push   ebx
c0015f65:	83 ec 2c             	sub    esp,0x2c
c0015f68:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0015f6c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015f70:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0015f74:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0015f78:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015f7c:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c0015f83:	75 5d                	jne    c0015fe2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0015f85:	83 ec 0c             	sub    esp,0xc
c0015f88:	68 14 01 00 00       	push   0x114
c0015f8d:	e8 e9 89 ff ff       	call   c000e97b <malloc>
c0015f92:	83 c4 0c             	add    esp,0xc
c0015f95:	89 c7                	mov    edi,eax
c0015f97:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0015f9d:	68 ac 2b 02 c0       	push   0xc0022bac
c0015fa2:	50                   	push   eax
c0015fa3:	e8 6a 21 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c0015fa8:	58                   	pop    eax
c0015fa9:	5a                   	pop    edx
c0015faa:	6a 12                	push   0x12
c0015fac:	57                   	push   edi
c0015fad:	e8 7e 21 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0015fb2:	59                   	pop    ecx
c0015fb3:	8b 07                	mov    eax,DWORD PTR [edi]
c0015fb5:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0015fb9:	51                   	push   ecx
c0015fba:	6a 00                	push   0x0
c0015fbc:	6a 00                	push   0x0
c0015fbe:	68 00 00 11 00       	push   0x110000
c0015fc3:	57                   	push   edi
c0015fc4:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0015fc7:	83 c4 14             	add    esp,0x14
c0015fca:	57                   	push   edi
c0015fcb:	e8 be 21 ff ff       	call   c000818e <File::close()>
c0015fd0:	8b 07                	mov    eax,DWORD PTR [edi]
c0015fd2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015fd5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015fd8:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c0015fdf:	83 c4 10             	add    esp,0x10
c0015fe2:	fa                   	cli    
c0015fe3:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0015fe9:	80 3d 09 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c709,0x0
c0015ff0:	75 15                	jne    c0016007 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa6>
c0015ff2:	e8 91 f4 ff ff       	call   c0015488 <schedule()>
c0015ff7:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0015ffc:	48                   	dec    eax
c0015ffd:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0016002:	75 de                	jne    c0015fe2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016004:	fb                   	sti    
c0016005:	eb db                	jmp    c0015fe2 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016007:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001600b:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c0016010:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c001601a:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c001601e:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0016022:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016026:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c001602a:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001602e:	0f b7 f6             	movzx  esi,si
c0016031:	0f b7 db             	movzx  ebx,bx
c0016034:	50                   	push   eax
c0016035:	6a 20                	push   0x20
c0016037:	6a 00                	push   0x0
c0016039:	68 20 c7 02 c0       	push   0xc002c720
c001603e:	e8 ad a4 fe ff       	call   c00004f0 <memset>
c0016043:	5a                   	pop    edx
c0016044:	59                   	pop    ecx
c0016045:	56                   	push   esi
c0016046:	53                   	push   ebx
c0016047:	e8 be fd ff ff       	call   c0015e0a <Vm::realToLinear(unsigned short, unsigned short)>
c001604c:	83 c4 10             	add    esp,0x10
c001604f:	89 c7                	mov    edi,eax
c0016051:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016055:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0016059:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001605b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0016060:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c0016067:	48                   	dec    eax
c0016068:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001606d:	75 01                	jne    c0016070 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x10f>
c001606f:	fb                   	sti    
c0016070:	83 ec 0c             	sub    esp,0xc
c0016073:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c0016079:	e8 02 f7 ff ff       	call   c0015780 <unblockTask(ThreadControlBlock*)>
c001607e:	83 c4 3c             	add    esp,0x3c
c0016081:	b0 01                	mov    al,0x1
c0016083:	5b                   	pop    ebx
c0016084:	5e                   	pop    esi
c0016085:	5f                   	pop    edi
c0016086:	5d                   	pop    ebp
c0016087:	c3                   	ret    

c0016088 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016088:	55                   	push   ebp
c0016089:	57                   	push   edi
c001608a:	56                   	push   esi
c001608b:	53                   	push   ebx
c001608c:	83 ec 2c             	sub    esp,0x2c
c001608f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016093:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016097:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001609b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001609f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00160a3:	80 3d 00 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c700,0x0
c00160aa:	75 5d                	jne    c0016109 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c00160ac:	83 ec 0c             	sub    esp,0xc
c00160af:	68 14 01 00 00       	push   0x114
c00160b4:	e8 c2 88 ff ff       	call   c000e97b <malloc>
c00160b9:	83 c4 0c             	add    esp,0xc
c00160bc:	89 c6                	mov    esi,eax
c00160be:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c00160c4:	68 ac 2b 02 c0       	push   0xc0022bac
c00160c9:	50                   	push   eax
c00160ca:	e8 43 20 ff ff       	call   c0008112 <File::File(char const*, Process*)>
c00160cf:	58                   	pop    eax
c00160d0:	5a                   	pop    edx
c00160d1:	6a 12                	push   0x12
c00160d3:	56                   	push   esi
c00160d4:	e8 57 20 ff ff       	call   c0008130 <File::open(FileOpenMode)>
c00160d9:	59                   	pop    ecx
c00160da:	8b 06                	mov    eax,DWORD PTR [esi]
c00160dc:	8d 54 24 24          	lea    edx,[esp+0x24]
c00160e0:	52                   	push   edx
c00160e1:	6a 00                	push   0x0
c00160e3:	6a 00                	push   0x0
c00160e5:	68 00 00 11 00       	push   0x110000
c00160ea:	56                   	push   esi
c00160eb:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00160ee:	83 c4 14             	add    esp,0x14
c00160f1:	56                   	push   esi
c00160f2:	e8 97 20 ff ff       	call   c000818e <File::close()>
c00160f7:	8b 06                	mov    eax,DWORD PTR [esi]
c00160f9:	89 34 24             	mov    DWORD PTR [esp],esi
c00160fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00160ff:	c6 05 00 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c700,0x1
c0016106:	83 c4 10             	add    esp,0x10
c0016109:	50                   	push   eax
c001610a:	50                   	push   eax
c001610b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001610f:	68 c7 2b 02 c0       	push   0xc0022bc7
c0016114:	e8 4b 0e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016119:	83 c4 10             	add    esp,0x10
c001611c:	fa                   	cli    
c001611d:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0016123:	0f b6 35 09 c7 02 c0 	movzx  esi,BYTE PTR ds:0xc002c709
c001612a:	89 f0                	mov    eax,esi
c001612c:	84 c0                	test   al,al
c001612e:	75 15                	jne    c0016145 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xbd>
c0016130:	e8 53 f3 ff ff       	call   c0015488 <schedule()>
c0016135:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001613a:	48                   	dec    eax
c001613b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0016140:	75 da                	jne    c001611c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016142:	fb                   	sti    
c0016143:	eb d7                	jmp    c001611c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016145:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016149:	a1 0c c7 02 c0       	mov    eax,ds:0xc002c70c
c001614e:	c7 05 10 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c710,0x0
c0016158:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c001615c:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c0016160:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016164:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c0016168:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001616c:	50                   	push   eax
c001616d:	6a 20                	push   0x20
c001616f:	6a 00                	push   0x0
c0016171:	68 20 c7 02 c0       	push   0xc002c720
c0016176:	e8 75 a3 fe ff       	call   c00004f0 <memset>
c001617b:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016182:	e8 f4 87 ff ff       	call   c000e97b <malloc>
c0016187:	83 c4 0c             	add    esp,0xc
c001618a:	89 c3                	mov    ebx,eax
c001618c:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c0016192:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016196:	50                   	push   eax
c0016197:	e8 76 1f ff ff       	call   c0008112 <File::File(char const*, Process*)>
c001619c:	83 c4 10             	add    esp,0x10
c001619f:	85 db                	test   ebx,ebx
c00161a1:	75 0a                	jne    c00161ad <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x125>
c00161a3:	83 ec 0c             	sub    esp,0xc
c00161a6:	68 e9 2b 02 c0       	push   0xc0022be9
c00161ab:	eb 2b                	jmp    c00161d8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x150>
c00161ad:	50                   	push   eax
c00161ae:	8d 44 24 17          	lea    eax,[esp+0x17]
c00161b2:	50                   	push   eax
c00161b3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00161b7:	50                   	push   eax
c00161b8:	53                   	push   ebx
c00161b9:	e8 74 22 ff ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c00161be:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00161c2:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00161c6:	83 c4 10             	add    esp,0x10
c00161c9:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00161ce:	74 27                	je     c00161f7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16f>
c00161d0:	83 ec 0c             	sub    esp,0xc
c00161d3:	68 fd 2b 02 c0       	push   0xc0022bfd
c00161d8:	e8 f5 8a ff ff       	call   c000ecd2 <KePanic(char const*)>
c00161dd:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c00161e2:	83 c4 10             	add    esp,0x10
c00161e5:	48                   	dec    eax
c00161e6:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c00161eb:	85 c0                	test   eax,eax
c00161ed:	75 01                	jne    c00161f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x168>
c00161ef:	fb                   	sti    
c00161f0:	31 f6                	xor    esi,esi
c00161f2:	e9 8f 00 00 00       	jmp    c0016286 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fe>
c00161f7:	51                   	push   ecx
c00161f8:	51                   	push   ecx
c00161f9:	6a 01                	push   0x1
c00161fb:	53                   	push   ebx
c00161fc:	e8 2f 1f ff ff       	call   c0008130 <File::open(FileOpenMode)>
c0016201:	83 c4 10             	add    esp,0x10
c0016204:	85 c0                	test   eax,eax
c0016206:	74 26                	je     c001622e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1a6>
c0016208:	83 ec 0c             	sub    esp,0xc
c001620b:	68 16 2c 02 c0       	push   0xc0022c16
c0016210:	e8 bd 8a ff ff       	call   c000ecd2 <KePanic(char const*)>
c0016215:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001621a:	83 c4 10             	add    esp,0x10
c001621d:	48                   	dec    eax
c001621e:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0016223:	85 c0                	test   eax,eax
c0016225:	75 c9                	jne    c00161f0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x168>
c0016227:	fb                   	sti    
c0016228:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001622c:	eb 58                	jmp    c0016286 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1fe>
c001622e:	0f b7 ff             	movzx  edi,di
c0016231:	50                   	push   eax
c0016232:	50                   	push   eax
c0016233:	0f b7 c5             	movzx  eax,bp
c0016236:	57                   	push   edi
c0016237:	50                   	push   eax
c0016238:	e8 cd fb ff ff       	call   c0015e0a <Vm::realToLinear(unsigned short, unsigned short)>
c001623d:	5a                   	pop    edx
c001623e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016240:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016244:	51                   	push   ecx
c0016245:	50                   	push   eax
c0016246:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001624a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001624e:	53                   	push   ebx
c001624f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016252:	83 c4 14             	add    esp,0x14
c0016255:	53                   	push   ebx
c0016256:	e8 33 1f ff ff       	call   c000818e <File::close()>
c001625b:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0016260:	83 c4 10             	add    esp,0x10
c0016263:	48                   	dec    eax
c0016264:	c6 05 09 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c709,0x0
c001626b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0016270:	85 c0                	test   eax,eax
c0016272:	75 01                	jne    c0016275 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ed>
c0016274:	fb                   	sti    
c0016275:	83 ec 0c             	sub    esp,0xc
c0016278:	ff 35 0c c7 02 c0    	push   DWORD PTR ds:0xc002c70c
c001627e:	e8 fd f4 ff ff       	call   c0015780 <unblockTask(ThreadControlBlock*)>
c0016283:	83 c4 10             	add    esp,0x10
c0016286:	83 c4 2c             	add    esp,0x2c
c0016289:	89 f0                	mov    eax,esi
c001628b:	5b                   	pop    ebx
c001628c:	5e                   	pop    esi
c001628d:	5f                   	pop    edi
c001628e:	5d                   	pop    ebp
c001628f:	c3                   	ret    

c0016290 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016290:	57                   	push   edi
c0016291:	56                   	push   esi
c0016292:	53                   	push   ebx
c0016293:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016297:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001629b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001629f:	83 e8 06             	sub    eax,0x6
c00162a2:	0f b7 c0             	movzx  eax,ax
c00162a5:	50                   	push   eax
c00162a6:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00162ab:	50                   	push   eax
c00162ac:	e8 59 fb ff ff       	call   c0015e0a <Vm::realToLinear(unsigned short, unsigned short)>
c00162b1:	5a                   	pop    edx
c00162b2:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c00162b5:	59                   	pop    ecx
c00162b6:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c00162b9:	8d 51 fa             	lea    edx,[ecx-0x6]
c00162bc:	81 e2 ff ff 00 00    	and    edx,0xffff
c00162c2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c00162c5:	8d 56 02             	lea    edx,[esi+0x2]
c00162c8:	66 89 10             	mov    WORD PTR [eax],dx
c00162cb:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c00162cf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00162d3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00162d6:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c00162da:	0f b6 f1             	movzx  esi,cl
c00162dd:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00162e1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00162e7:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c00162eb:	0f b6 d5             	movzx  edx,ch
c00162ee:	74 0a                	je     c00162fa <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c00162f0:	c1 e2 08             	shl    edx,0x8
c00162f3:	09 f2                	or     edx,esi
c00162f5:	80 ce 02             	or     dh,0x2
c00162f8:	eb 08                	jmp    c0016302 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c00162fa:	c1 e2 08             	shl    edx,0x8
c00162fd:	09 f2                	or     edx,esi
c00162ff:	80 e6 fd             	and    dh,0xfd
c0016302:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016306:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001630b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001630f:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016317:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001631a:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016322:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016325:	5b                   	pop    ebx
c0016326:	5e                   	pop    esi
c0016327:	5f                   	pop    edi
c0016328:	c3                   	ret    

c0016329 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016329:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001632e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016333:	c1 e0 04             	shl    eax,0x4
c0016336:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016339:	c3                   	ret    

c001633a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001633a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001633f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016344:	c1 e0 04             	shl    eax,0x4
c0016347:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001634b:	c3                   	ret    

c001634c <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001634c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016351:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016356:	c1 e0 04             	shl    eax,0x4
c0016359:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001635c:	c3                   	ret    

c001635d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001635d:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016362:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016367:	c1 e0 04             	shl    eax,0x4
c001636a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001636e:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016371:	c3                   	ret    

c0016372 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016372:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016377:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001637c:	c1 e0 04             	shl    eax,0x4
c001637f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016383:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016387:	c3                   	ret    

c0016388 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016388:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001638d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016392:	c1 e0 04             	shl    eax,0x4
c0016395:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016399:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001639c:	c3                   	ret    

c001639d <Vm::faultHandler(regs*)>:
c001639d:	55                   	push   ebp
c001639e:	57                   	push   edi
c001639f:	56                   	push   esi
c00163a0:	53                   	push   ebx
c00163a1:	83 ec 2c             	sub    esp,0x2c
c00163a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00163a8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163ab:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00163af:	0f b7 f8             	movzx  edi,ax
c00163b2:	52                   	push   edx
c00163b3:	0f b7 c0             	movzx  eax,ax
c00163b6:	50                   	push   eax
c00163b7:	e8 4e fa ff ff       	call   c0015e0a <Vm::realToLinear(unsigned short, unsigned short)>
c00163bc:	5a                   	pop    edx
c00163bd:	59                   	pop    ecx
c00163be:	89 c1                	mov    ecx,eax
c00163c0:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00163c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163c7:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c00163cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00163d0:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c00163d3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00163d7:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c00163dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00163e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00163e4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00163e8:	e8 1d fa ff ff       	call   c0015e0a <Vm::realToLinear(unsigned short, unsigned short)>
c00163ed:	5e                   	pop    esi
c00163ee:	be 06 00 00 00       	mov    esi,0x6
c00163f3:	5d                   	pop    ebp
c00163f4:	31 ed                	xor    ebp,ebp
c00163f6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00163fb:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00163fe:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016404:	0f 84 74 02 00 00    	je     c001667e <Vm::faultHandler(regs*)+0x2e1>
c001640a:	0f 87 94 00 00 00    	ja     c00164a4 <Vm::faultHandler(regs*)+0x107>
c0016410:	83 fa 66             	cmp    edx,0x66
c0016413:	0f 84 e2 01 00 00    	je     c00165fb <Vm::faultHandler(regs*)+0x25e>
c0016419:	77 47                	ja     c0016462 <Vm::faultHandler(regs*)+0xc5>
c001641b:	83 fa 36             	cmp    edx,0x36
c001641e:	0f 84 ca 01 00 00    	je     c00165ee <Vm::faultHandler(regs*)+0x251>
c0016424:	77 1a                	ja     c0016440 <Vm::faultHandler(regs*)+0xa3>
c0016426:	83 fa 26             	cmp    edx,0x26
c0016429:	0f 84 98 01 00 00    	je     c00165c7 <Vm::faultHandler(regs*)+0x22a>
c001642f:	83 fa 2e             	cmp    edx,0x2e
c0016432:	0f 85 21 06 00 00    	jne    c0016a59 <Vm::faultHandler(regs*)+0x6bc>
c0016438:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001643b:	31 f6                	xor    esi,esi
c001643d:	41                   	inc    ecx
c001643e:	eb bb                	jmp    c00163fb <Vm::faultHandler(regs*)+0x5e>
c0016440:	83 fa 64             	cmp    edx,0x64
c0016443:	0f 84 8b 01 00 00    	je     c00165d4 <Vm::faultHandler(regs*)+0x237>
c0016449:	0f 87 92 01 00 00    	ja     c00165e1 <Vm::faultHandler(regs*)+0x244>
c001644f:	83 fa 3e             	cmp    edx,0x3e
c0016452:	0f 85 01 06 00 00    	jne    c0016a59 <Vm::faultHandler(regs*)+0x6bc>
c0016458:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001645b:	be 01 00 00 00       	mov    esi,0x1
c0016460:	eb db                	jmp    c001643d <Vm::faultHandler(regs*)+0xa0>
c0016462:	83 fa 6d             	cmp    edx,0x6d
c0016465:	0f 84 34 03 00 00    	je     c001679f <Vm::faultHandler(regs*)+0x402>
c001646b:	77 17                	ja     c0016484 <Vm::faultHandler(regs*)+0xe7>
c001646d:	83 fa 67             	cmp    edx,0x67
c0016470:	0f 84 92 01 00 00    	je     c0016608 <Vm::faultHandler(regs*)+0x26b>
c0016476:	83 fa 6c             	cmp    edx,0x6c
c0016479:	0f 84 b1 02 00 00    	je     c0016730 <Vm::faultHandler(regs*)+0x393>
c001647f:	e9 d5 05 00 00       	jmp    c0016a59 <Vm::faultHandler(regs*)+0x6bc>
c0016484:	83 fa 6f             	cmp    edx,0x6f
c0016487:	0f 84 3d 04 00 00    	je     c00168ca <Vm::faultHandler(regs*)+0x52d>
c001648d:	0f 82 9f 03 00 00    	jb     c0016832 <Vm::faultHandler(regs*)+0x495>
c0016493:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016499:	0f 84 76 01 00 00    	je     c0016615 <Vm::faultHandler(regs*)+0x278>
c001649f:	e9 b5 05 00 00       	jmp    c0016a59 <Vm::faultHandler(regs*)+0x6bc>
c00164a4:	81 fa ec 00 00 00    	cmp    edx,0xec
c00164aa:	0f 84 51 05 00 00    	je     c0016a01 <Vm::faultHandler(regs*)+0x664>
c00164b0:	0f 87 a9 00 00 00    	ja     c001655f <Vm::faultHandler(regs*)+0x1c2>
c00164b6:	81 fa e4 00 00 00    	cmp    edx,0xe4
c00164bc:	0f 84 d0 04 00 00    	je     c0016992 <Vm::faultHandler(regs*)+0x5f5>
c00164c2:	77 78                	ja     c001653c <Vm::faultHandler(regs*)+0x19f>
c00164c4:	81 fa cd 00 00 00    	cmp    edx,0xcd
c00164ca:	0f 84 0e 02 00 00    	je     c00166de <Vm::faultHandler(regs*)+0x341>
c00164d0:	81 fa cf 00 00 00    	cmp    edx,0xcf
c00164d6:	0f 85 7d 05 00 00    	jne    c0016a59 <Vm::faultHandler(regs*)+0x6bc>
c00164dc:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c00164e0:	89 d1                	mov    ecx,edx
c00164e2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c00164e5:	c1 e1 08             	shl    ecx,0x8
c00164e8:	09 ca                	or     edx,ecx
c00164ea:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00164ed:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c00164f1:	89 d1                	mov    ecx,edx
c00164f3:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c00164f7:	c1 e1 08             	shl    ecx,0x8
c00164fa:	09 ca                	or     edx,ecx
c00164fc:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00164ff:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016503:	89 d1                	mov    ecx,edx
c0016505:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016509:	c1 e1 08             	shl    ecx,0x8
c001650c:	09 ca                	or     edx,ecx
c001650e:	81 ca 00 02 02 00    	or     edx,0x20200
c0016514:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016517:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001651b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016521:	d1 e8                	shr    eax,1
c0016523:	83 e0 01             	and    eax,0x1
c0016526:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016529:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001652c:	83 c0 06             	add    eax,0x6
c001652f:	25 ff ff 00 00       	and    eax,0xffff
c0016534:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016537:	e9 19 05 00 00       	jmp    c0016a55 <Vm::faultHandler(regs*)+0x6b8>
c001653c:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016542:	0f 84 8f 04 00 00    	je     c00169d7 <Vm::faultHandler(regs*)+0x63a>
c0016548:	0f 82 60 04 00 00    	jb     c00169ae <Vm::faultHandler(regs*)+0x611>
c001654e:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016554:	0f 84 94 04 00 00    	je     c00169ee <Vm::faultHandler(regs*)+0x651>
c001655a:	e9 fa 04 00 00       	jmp    c0016a59 <Vm::faultHandler(regs*)+0x6bc>
c001655f:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016565:	0f 84 d7 04 00 00    	je     c0016a42 <Vm::faultHandler(regs*)+0x6a5>
c001656b:	77 2e                	ja     c001659b <Vm::faultHandler(regs*)+0x1fe>
c001656d:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016573:	0f 84 a4 04 00 00    	je     c0016a1d <Vm::faultHandler(regs*)+0x680>
c0016579:	81 fa ee 00 00 00    	cmp    edx,0xee
c001657f:	0f 85 d4 04 00 00    	jne    c0016a59 <Vm::faultHandler(regs*)+0x6bc>
c0016585:	50                   	push   eax
c0016586:	50                   	push   eax
c0016587:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001658b:	50                   	push   eax
c001658c:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016590:	50                   	push   eax
c0016591:	e8 3e f8 ff ff       	call   c0015dd4 <Vm::outbv(unsigned short, unsigned char)>
c0016596:	e9 9f 04 00 00       	jmp    c0016a3a <Vm::faultHandler(regs*)+0x69d>
c001659b:	81 fa fa 00 00 00    	cmp    edx,0xfa
c00165a1:	0f 84 6d 01 00 00    	je     c0016714 <Vm::faultHandler(regs*)+0x377>
c00165a7:	81 fa fb 00 00 00    	cmp    edx,0xfb
c00165ad:	0f 84 6f 01 00 00    	je     c0016722 <Vm::faultHandler(regs*)+0x385>
c00165b3:	81 fa f3 00 00 00    	cmp    edx,0xf3
c00165b9:	0f 85 9a 04 00 00    	jne    c0016a59 <Vm::faultHandler(regs*)+0x6bc>
c00165bf:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165c2:	e9 76 fe ff ff       	jmp    c001643d <Vm::faultHandler(regs*)+0xa0>
c00165c7:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165ca:	be 02 00 00 00       	mov    esi,0x2
c00165cf:	e9 69 fe ff ff       	jmp    c001643d <Vm::faultHandler(regs*)+0xa0>
c00165d4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165d7:	be 03 00 00 00       	mov    esi,0x3
c00165dc:	e9 5c fe ff ff       	jmp    c001643d <Vm::faultHandler(regs*)+0xa0>
c00165e1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165e4:	be 04 00 00 00       	mov    esi,0x4
c00165e9:	e9 4f fe ff ff       	jmp    c001643d <Vm::faultHandler(regs*)+0xa0>
c00165ee:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165f1:	be 05 00 00 00       	mov    esi,0x5
c00165f6:	e9 42 fe ff ff       	jmp    c001643d <Vm::faultHandler(regs*)+0xa0>
c00165fb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00165fe:	bd 01 00 00 00       	mov    ebp,0x1
c0016603:	e9 35 fe ff ff       	jmp    c001643d <Vm::faultHandler(regs*)+0xa0>
c0016608:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001660b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016610:	e9 28 fe ff ff       	jmp    c001643d <Vm::faultHandler(regs*)+0xa0>
c0016615:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016618:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001661c:	83 e5 01             	and    ebp,0x1
c001661f:	74 30                	je     c0016651 <Vm::faultHandler(regs*)+0x2b4>
c0016621:	83 e9 04             	sub    ecx,0x4
c0016624:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001662a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016630:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016633:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016636:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001663c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016640:	0f 84 0c 04 00 00    	je     c0016a52 <Vm::faultHandler(regs*)+0x6b5>
c0016646:	80 ce 02             	or     dh,0x2
c0016649:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c001664c:	e9 01 04 00 00       	jmp    c0016a52 <Vm::faultHandler(regs*)+0x6b5>
c0016651:	83 e9 02             	sub    ecx,0x2
c0016654:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001665a:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001665d:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016661:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016667:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001666b:	74 05                	je     c0016672 <Vm::faultHandler(regs*)+0x2d5>
c001666d:	80 ce 02             	or     dh,0x2
c0016670:	eb 03                	jmp    c0016675 <Vm::faultHandler(regs*)+0x2d8>
c0016672:	80 e6 fd             	and    dh,0xfd
c0016675:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016679:	e9 d4 03 00 00       	jmp    c0016a52 <Vm::faultHandler(regs*)+0x6b5>
c001667e:	83 e5 01             	and    ebp,0x1
c0016681:	74 2a                	je     c00166ad <Vm::faultHandler(regs*)+0x310>
c0016683:	8b 10                	mov    edx,DWORD PTR [eax]
c0016685:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001668b:	81 ca 00 02 02 00    	or     edx,0x20200
c0016691:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016694:	8b 00                	mov    eax,DWORD PTR [eax]
c0016696:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001669c:	c1 e8 09             	shr    eax,0x9
c001669f:	83 e0 01             	and    eax,0x1
c00166a2:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00166a5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00166a8:	83 c0 04             	add    eax,0x4
c00166ab:	eb 24                	jmp    c00166d1 <Vm::faultHandler(regs*)+0x334>
c00166ad:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00166b0:	81 ca 00 02 02 00    	or     edx,0x20200
c00166b6:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00166b9:	0f b7 00             	movzx  eax,WORD PTR [eax]
c00166bc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00166c2:	c1 e8 09             	shr    eax,0x9
c00166c5:	83 e0 01             	and    eax,0x1
c00166c8:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00166cb:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00166ce:	83 c0 02             	add    eax,0x2
c00166d1:	25 ff ff 00 00       	and    eax,0xffff
c00166d6:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00166d9:	e9 74 03 00 00       	jmp    c0016a52 <Vm::faultHandler(regs*)+0x6b5>
c00166de:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00166e2:	3d ee 00 00 00       	cmp    eax,0xee
c00166e7:	75 10                	jne    c00166f9 <Vm::faultHandler(regs*)+0x35c>
c00166e9:	83 ec 0c             	sub    esp,0xc
c00166ec:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00166ef:	e8 7d f7 ff ff       	call   c0015e71 <Vm::mainloop3(unsigned long)>
c00166f4:	e9 44 03 00 00       	jmp    c0016a3d <Vm::faultHandler(regs*)+0x6a0>
c00166f9:	83 ec 0c             	sub    esp,0xc
c00166fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016700:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016704:	51                   	push   ecx
c0016705:	50                   	push   eax
c0016706:	53                   	push   ebx
c0016707:	e8 84 fb ff ff       	call   c0016290 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001670c:	83 c4 20             	add    esp,0x20
c001670f:	e9 41 03 00 00       	jmp    c0016a55 <Vm::faultHandler(regs*)+0x6b8>
c0016714:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016719:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001671d:	e9 30 03 00 00       	jmp    c0016a52 <Vm::faultHandler(regs*)+0x6b5>
c0016722:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016727:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001672b:	e9 22 03 00 00       	jmp    c0016a52 <Vm::faultHandler(regs*)+0x6b5>
c0016730:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016733:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016738:	74 2b                	je     c0016765 <Vm::faultHandler(regs*)+0x3c8>
c001673a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016741:	76 22                	jbe    c0016765 <Vm::faultHandler(regs*)+0x3c8>
c0016743:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016747:	50                   	push   eax
c0016748:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001674c:	50                   	push   eax
c001674d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016751:	50                   	push   eax
c0016752:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016756:	50                   	push   eax
c0016757:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001675b:	50                   	push   eax
c001675c:	6a 6c                	push   0x6c
c001675e:	6a 6c                	push   0x6c
c0016760:	e9 bd 01 00 00       	jmp    c0016922 <Vm::faultHandler(regs*)+0x585>
c0016765:	83 ec 0c             	sub    esp,0xc
c0016768:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001676c:	0f b7 f6             	movzx  esi,si
c001676f:	50                   	push   eax
c0016770:	e8 4c f6 ff ff       	call   c0015dc1 <Vm::inbv(unsigned short)>
c0016775:	83 c4 0c             	add    esp,0xc
c0016778:	0f b6 c0             	movzx  eax,al
c001677b:	50                   	push   eax
c001677c:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0016780:	50                   	push   eax
c0016781:	56                   	push   esi
c0016782:	e8 d6 fb ff ff       	call   c001635d <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0016787:	83 c4 10             	add    esp,0x10
c001678a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001678d:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0016791:	74 03                	je     c0016796 <Vm::faultHandler(regs*)+0x3f9>
c0016793:	48                   	dec    eax
c0016794:	eb 01                	jmp    c0016797 <Vm::faultHandler(regs*)+0x3fa>
c0016796:	40                   	inc    eax
c0016797:	0f b7 c0             	movzx  eax,ax
c001679a:	e9 8b 00 00 00       	jmp    c001682a <Vm::faultHandler(regs*)+0x48d>
c001679f:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00167a2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00167a5:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00167aa:	74 29                	je     c00167d5 <Vm::faultHandler(regs*)+0x438>
c00167ac:	3d ff ff 00 00       	cmp    eax,0xffff
c00167b1:	76 22                	jbe    c00167d5 <Vm::faultHandler(regs*)+0x438>
c00167b3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00167b7:	50                   	push   eax
c00167b8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00167bc:	50                   	push   eax
c00167bd:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00167c1:	50                   	push   eax
c00167c2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00167c6:	50                   	push   eax
c00167c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00167cb:	50                   	push   eax
c00167cc:	6a 6d                	push   0x6d
c00167ce:	6a 6d                	push   0x6d
c00167d0:	e9 4d 01 00 00       	jmp    c0016922 <Vm::faultHandler(regs*)+0x585>
c00167d5:	0f b7 c8             	movzx  ecx,ax
c00167d8:	0f b7 f6             	movzx  esi,si
c00167db:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00167de:	83 e5 01             	and    ebp,0x1
c00167e1:	74 20                	je     c0016803 <Vm::faultHandler(regs*)+0x466>
c00167e3:	ed                   	in     eax,dx
c00167e4:	55                   	push   ebp
c00167e5:	50                   	push   eax
c00167e6:	51                   	push   ecx
c00167e7:	56                   	push   esi
c00167e8:	e8 9b fb ff ff       	call   c0016388 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00167ed:	83 c4 10             	add    esp,0x10
c00167f0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00167f3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00167f7:	74 05                	je     c00167fe <Vm::faultHandler(regs*)+0x461>
c00167f9:	83 e8 04             	sub    eax,0x4
c00167fc:	eb 27                	jmp    c0016825 <Vm::faultHandler(regs*)+0x488>
c00167fe:	83 c0 04             	add    eax,0x4
c0016801:	eb 22                	jmp    c0016825 <Vm::faultHandler(regs*)+0x488>
c0016803:	66 ed                	in     ax,dx
c0016805:	0f b7 c0             	movzx  eax,ax
c0016808:	57                   	push   edi
c0016809:	50                   	push   eax
c001680a:	51                   	push   ecx
c001680b:	56                   	push   esi
c001680c:	e8 61 fb ff ff       	call   c0016372 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0016811:	83 c4 10             	add    esp,0x10
c0016814:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0016817:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001681b:	74 05                	je     c0016822 <Vm::faultHandler(regs*)+0x485>
c001681d:	83 e8 02             	sub    eax,0x2
c0016820:	eb 03                	jmp    c0016825 <Vm::faultHandler(regs*)+0x488>
c0016822:	83 c0 02             	add    eax,0x2
c0016825:	25 ff ff 00 00       	and    eax,0xffff
c001682a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001682d:	e9 20 02 00 00       	jmp    c0016a52 <Vm::faultHandler(regs*)+0x6b5>
c0016832:	8d 46 ff             	lea    eax,[esi-0x1]
c0016835:	0f b6 f0             	movzx  esi,al
c0016838:	83 fe 05             	cmp    esi,0x5
c001683b:	77 23                	ja     c0016860 <Vm::faultHandler(regs*)+0x4c3>
c001683d:	ff 24 b5 8c 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd374]
c0016844:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0016849:	eb 15                	jmp    c0016860 <Vm::faultHandler(regs*)+0x4c3>
c001684b:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c001684f:	eb 0f                	jmp    c0016860 <Vm::faultHandler(regs*)+0x4c3>
c0016851:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0016855:	eb 09                	jmp    c0016860 <Vm::faultHandler(regs*)+0x4c3>
c0016857:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c001685b:	eb 03                	jmp    c0016860 <Vm::faultHandler(regs*)+0x4c3>
c001685d:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0016860:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0016863:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016868:	74 29                	je     c0016893 <Vm::faultHandler(regs*)+0x4f6>
c001686a:	3d ff ff 00 00       	cmp    eax,0xffff
c001686f:	76 22                	jbe    c0016893 <Vm::faultHandler(regs*)+0x4f6>
c0016871:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016875:	50                   	push   eax
c0016876:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001687a:	50                   	push   eax
c001687b:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001687f:	50                   	push   eax
c0016880:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016884:	50                   	push   eax
c0016885:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016889:	50                   	push   eax
c001688a:	6a 6e                	push   0x6e
c001688c:	6a 6e                	push   0x6e
c001688e:	e9 8f 00 00 00       	jmp    c0016922 <Vm::faultHandler(regs*)+0x585>
c0016893:	0f b7 c0             	movzx  eax,ax
c0016896:	52                   	push   edx
c0016897:	52                   	push   edx
c0016898:	50                   	push   eax
c0016899:	57                   	push   edi
c001689a:	e8 8a fa ff ff       	call   c0016329 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001689f:	59                   	pop    ecx
c00168a0:	0f b6 c0             	movzx  eax,al
c00168a3:	5e                   	pop    esi
c00168a4:	50                   	push   eax
c00168a5:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00168a9:	50                   	push   eax
c00168aa:	e8 25 f5 ff ff       	call   c0015dd4 <Vm::outbv(unsigned short, unsigned char)>
c00168af:	83 c4 10             	add    esp,0x10
c00168b2:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00168b5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00168b9:	74 03                	je     c00168be <Vm::faultHandler(regs*)+0x521>
c00168bb:	48                   	dec    eax
c00168bc:	eb 01                	jmp    c00168bf <Vm::faultHandler(regs*)+0x522>
c00168be:	40                   	inc    eax
c00168bf:	0f b7 c0             	movzx  eax,ax
c00168c2:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00168c5:	e9 88 01 00 00       	jmp    c0016a52 <Vm::faultHandler(regs*)+0x6b5>
c00168ca:	8d 46 ff             	lea    eax,[esi-0x1]
c00168cd:	0f b6 f0             	movzx  esi,al
c00168d0:	83 fe 05             	cmp    esi,0x5
c00168d3:	77 1e                	ja     c00168f3 <Vm::faultHandler(regs*)+0x556>
c00168d5:	ff 24 b5 a4 2c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdd35c]
c00168dc:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00168e0:	eb 11                	jmp    c00168f3 <Vm::faultHandler(regs*)+0x556>
c00168e2:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00168e5:	eb 0c                	jmp    c00168f3 <Vm::faultHandler(regs*)+0x556>
c00168e7:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c00168ea:	eb 07                	jmp    c00168f3 <Vm::faultHandler(regs*)+0x556>
c00168ec:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00168ef:	eb 02                	jmp    c00168f3 <Vm::faultHandler(regs*)+0x556>
c00168f1:	8b 3b                	mov    edi,DWORD PTR [ebx]
c00168f3:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c00168f6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00168fb:	74 37                	je     c0016934 <Vm::faultHandler(regs*)+0x597>
c00168fd:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0016903:	76 2f                	jbe    c0016934 <Vm::faultHandler(regs*)+0x597>
c0016905:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016909:	50                   	push   eax
c001690a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001690e:	50                   	push   eax
c001690f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016913:	50                   	push   eax
c0016914:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016918:	50                   	push   eax
c0016919:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001691d:	50                   	push   eax
c001691e:	6a 6f                	push   0x6f
c0016920:	6a 6f                	push   0x6f
c0016922:	68 2f 2c 02 c0       	push   0xc0022c2f
c0016927:	e8 38 06 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001692c:	83 c4 20             	add    esp,0x20
c001692f:	e9 83 01 00 00       	jmp    c0016ab7 <Vm::faultHandler(regs*)+0x71a>
c0016934:	0f b7 d7             	movzx  edx,di
c0016937:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001693a:	0f b7 c6             	movzx  eax,si
c001693d:	81 e1 00 04 00 00    	and    ecx,0x400
c0016943:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0016946:	83 e5 01             	and    ebp,0x1
c0016949:	74 1d                	je     c0016968 <Vm::faultHandler(regs*)+0x5cb>
c001694b:	55                   	push   ebp
c001694c:	55                   	push   ebp
c001694d:	50                   	push   eax
c001694e:	52                   	push   edx
c001694f:	e8 f8 f9 ff ff       	call   c001634c <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0016954:	83 c4 10             	add    esp,0x10
c0016957:	89 fa                	mov    edx,edi
c0016959:	ef                   	out    dx,eax
c001695a:	85 c9                	test   ecx,ecx
c001695c:	74 05                	je     c0016963 <Vm::faultHandler(regs*)+0x5c6>
c001695e:	83 ee 04             	sub    esi,0x4
c0016961:	eb 21                	jmp    c0016984 <Vm::faultHandler(regs*)+0x5e7>
c0016963:	83 c6 04             	add    esi,0x4
c0016966:	eb 1c                	jmp    c0016984 <Vm::faultHandler(regs*)+0x5e7>
c0016968:	55                   	push   ebp
c0016969:	55                   	push   ebp
c001696a:	50                   	push   eax
c001696b:	52                   	push   edx
c001696c:	e8 c9 f9 ff ff       	call   c001633a <Vm::readWordFromReal(unsigned short, unsigned short)>
c0016971:	83 c4 10             	add    esp,0x10
c0016974:	89 fa                	mov    edx,edi
c0016976:	66 ef                	out    dx,ax
c0016978:	85 c9                	test   ecx,ecx
c001697a:	74 05                	je     c0016981 <Vm::faultHandler(regs*)+0x5e4>
c001697c:	83 ee 02             	sub    esi,0x2
c001697f:	eb 03                	jmp    c0016984 <Vm::faultHandler(regs*)+0x5e7>
c0016981:	83 c6 02             	add    esi,0x2
c0016984:	81 e6 ff ff 00 00    	and    esi,0xffff
c001698a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001698d:	e9 c0 00 00 00       	jmp    c0016a52 <Vm::faultHandler(regs*)+0x6b5>
c0016992:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016999:	83 ec 0c             	sub    esp,0xc
c001699c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169a0:	50                   	push   eax
c00169a1:	e8 1b f4 ff ff       	call   c0015dc1 <Vm::inbv(unsigned short)>
c00169a6:	0f b6 c0             	movzx  eax,al
c00169a9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00169ac:	eb 3a                	jmp    c00169e8 <Vm::faultHandler(regs*)+0x64b>
c00169ae:	83 e5 01             	and    ebp,0x1
c00169b1:	74 07                	je     c00169ba <Vm::faultHandler(regs*)+0x61d>
c00169b3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00169b7:	ed                   	in     eax,dx
c00169b8:	eb 14                	jmp    c00169ce <Vm::faultHandler(regs*)+0x631>
c00169ba:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c00169bd:	66 31 f6             	xor    si,si
c00169c0:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00169c3:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00169c7:	66 ed                	in     ax,dx
c00169c9:	0f b7 c0             	movzx  eax,ax
c00169cc:	09 f0                	or     eax,esi
c00169ce:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00169d1:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00169d5:	eb 7e                	jmp    c0016a55 <Vm::faultHandler(regs*)+0x6b8>
c00169d7:	52                   	push   edx
c00169d8:	52                   	push   edx
c00169d9:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00169dd:	50                   	push   eax
c00169de:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00169e2:	50                   	push   eax
c00169e3:	e8 ec f3 ff ff       	call   c0015dd4 <Vm::outbv(unsigned short, unsigned char)>
c00169e8:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00169ec:	eb 4f                	jmp    c0016a3d <Vm::faultHandler(regs*)+0x6a0>
c00169ee:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00169f1:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c00169f5:	83 e5 01             	and    ebp,0x1
c00169f8:	74 03                	je     c00169fd <Vm::faultHandler(regs*)+0x660>
c00169fa:	ef                   	out    dx,eax
c00169fb:	eb d4                	jmp    c00169d1 <Vm::faultHandler(regs*)+0x634>
c00169fd:	66 ef                	out    dx,ax
c00169ff:	eb d0                	jmp    c00169d1 <Vm::faultHandler(regs*)+0x634>
c0016a01:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0016a08:	83 ec 0c             	sub    esp,0xc
c0016a0b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016a0f:	50                   	push   eax
c0016a10:	e8 ac f3 ff ff       	call   c0015dc1 <Vm::inbv(unsigned short)>
c0016a15:	0f b6 c0             	movzx  eax,al
c0016a18:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0016a1b:	eb 1d                	jmp    c0016a3a <Vm::faultHandler(regs*)+0x69d>
c0016a1d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016a20:	83 e5 01             	and    ebp,0x1
c0016a23:	74 03                	je     c0016a28 <Vm::faultHandler(regs*)+0x68b>
c0016a25:	ed                   	in     eax,dx
c0016a26:	eb 0d                	jmp    c0016a35 <Vm::faultHandler(regs*)+0x698>
c0016a28:	66 ed                	in     ax,dx
c0016a2a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0016a2d:	0f b7 c0             	movzx  eax,ax
c0016a30:	66 31 d2             	xor    dx,dx
c0016a33:	09 d0                	or     eax,edx
c0016a35:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0016a38:	eb 18                	jmp    c0016a52 <Vm::faultHandler(regs*)+0x6b5>
c0016a3a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016a3d:	83 c4 10             	add    esp,0x10
c0016a40:	eb 13                	jmp    c0016a55 <Vm::faultHandler(regs*)+0x6b8>
c0016a42:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0016a45:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0016a48:	83 e5 01             	and    ebp,0x1
c0016a4b:	74 03                	je     c0016a50 <Vm::faultHandler(regs*)+0x6b3>
c0016a4d:	ef                   	out    dx,eax
c0016a4e:	eb 02                	jmp    c0016a52 <Vm::faultHandler(regs*)+0x6b5>
c0016a50:	66 ef                	out    dx,ax
c0016a52:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016a55:	b0 01                	mov    al,0x1
c0016a57:	eb 60                	jmp    c0016ab9 <Vm::faultHandler(regs*)+0x71c>
c0016a59:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016a5d:	50                   	push   eax
c0016a5e:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016a62:	50                   	push   eax
c0016a63:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016a67:	50                   	push   eax
c0016a68:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016a6c:	50                   	push   eax
c0016a6d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016a71:	50                   	push   eax
c0016a72:	52                   	push   edx
c0016a73:	52                   	push   edx
c0016a74:	68 5c 2c 02 c0       	push   0xc0022c5c
c0016a79:	e8 e6 04 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016a7e:	83 c4 20             	add    esp,0x20
c0016a81:	83 ec 0c             	sub    esp,0xc
c0016a84:	6a 60                	push   0x60
c0016a86:	e8 36 f3 ff ff       	call   c0015dc1 <Vm::inbv(unsigned short)>
c0016a8b:	83 c4 10             	add    esp,0x10
c0016a8e:	0f b6 d0             	movzx  edx,al
c0016a91:	83 fa 1c             	cmp    edx,0x1c
c0016a94:	74 05                	je     c0016a9b <Vm::faultHandler(regs*)+0x6fe>
c0016a96:	83 fa 5a             	cmp    edx,0x5a
c0016a99:	75 e6                	jne    c0016a81 <Vm::faultHandler(regs*)+0x6e4>
c0016a9b:	0f b6 c0             	movzx  eax,al
c0016a9e:	83 f8 1c             	cmp    eax,0x1c
c0016aa1:	74 05                	je     c0016aa8 <Vm::faultHandler(regs*)+0x70b>
c0016aa3:	83 f8 5a             	cmp    eax,0x5a
c0016aa6:	75 0f                	jne    c0016ab7 <Vm::faultHandler(regs*)+0x71a>
c0016aa8:	83 ec 0c             	sub    esp,0xc
c0016aab:	6a 60                	push   0x60
c0016aad:	e8 0f f3 ff ff       	call   c0015dc1 <Vm::inbv(unsigned short)>
c0016ab2:	83 c4 10             	add    esp,0x10
c0016ab5:	eb e4                	jmp    c0016a9b <Vm::faultHandler(regs*)+0x6fe>
c0016ab7:	31 c0                	xor    eax,eax
c0016ab9:	83 c4 2c             	add    esp,0x2c
c0016abc:	5b                   	pop    ebx
c0016abd:	5e                   	pop    esi
c0016abe:	5f                   	pop    edi
c0016abf:	5d                   	pop    ebp
c0016ac0:	c3                   	ret    
c0016ac1:	90                   	nop

c0016ac2 <noCopro(unsigned long)>:
c0016ac2:	c3                   	ret    
c0016ac3:	90                   	nop

c0016ac4 <CPU::close(int, int, void*)>:
c0016ac4:	31 c0                	xor    eax,eax
c0016ac6:	c3                   	ret    

c0016ac7 <x86ReadCMOS(unsigned char)>:
c0016ac7:	83 ec 14             	sub    esp,0x14
c0016aca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ace:	88 04 24             	mov    BYTE PTR [esp],al
c0016ad1:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016ad6:	0f b6 c0             	movzx  eax,al
c0016ad9:	85 c0                	test   eax,eax
c0016adb:	74 04                	je     c0016ae1 <x86ReadCMOS(unsigned char)+0x1a>
c0016add:	b2 00                	mov    dl,0x0
c0016adf:	eb 02                	jmp    c0016ae3 <x86ReadCMOS(unsigned char)+0x1c>
c0016ae1:	b2 80                	mov    dl,0x80
c0016ae3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0016ae6:	09 d0                	or     eax,edx
c0016ae8:	0f b6 c0             	movzx  eax,al
c0016aeb:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0016af2:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0016af6:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0016afa:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0016aff:	ee                   	out    dx,al
c0016b00:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0016b07:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016b0c:	89 c2                	mov    edx,eax
c0016b0e:	ec                   	in     al,dx
c0016b0f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016b13:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016b17:	83 c4 14             	add    esp,0x14
c0016b1a:	c3                   	ret    

c0016b1b <x86WriteCMOS(unsigned char, unsigned char)>:
c0016b1b:	83 ec 18             	sub    esp,0x18
c0016b1e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016b22:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b26:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c0016b2a:	88 04 24             	mov    BYTE PTR [esp],al
c0016b2d:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0016b32:	0f b6 c0             	movzx  eax,al
c0016b35:	85 c0                	test   eax,eax
c0016b37:	74 04                	je     c0016b3d <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0016b39:	b2 00                	mov    dl,0x0
c0016b3b:	eb 02                	jmp    c0016b3f <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c0016b3d:	b2 80                	mov    dl,0x80
c0016b3f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0016b43:	09 d0                	or     eax,edx
c0016b45:	0f b6 c0             	movzx  eax,al
c0016b48:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c0016b4f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016b53:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016b57:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c0016b5c:	ee                   	out    dx,al
c0016b5d:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c0016b61:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0016b68:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0016b6c:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c0016b70:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0016b75:	ee                   	out    dx,al
c0016b76:	90                   	nop
c0016b77:	83 c4 18             	add    esp,0x18
c0016b7a:	c3                   	ret    

c0016b7b <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0016b7b:	60                   	pusha  
c0016b7c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016b80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016b84:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0016b88:	9c                   	pushf  
c0016b89:	fa                   	cli    
c0016b8a:	0f 09                	wbinvd 
c0016b8c:	0f 30                	wrmsr  
c0016b8e:	9d                   	popf   
c0016b8f:	89 c2                	mov    edx,eax
c0016b91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b95:	89 10                	mov    DWORD PTR [eax],edx
c0016b97:	61                   	popa   
c0016b98:	90                   	nop
c0016b99:	c3                   	ret    

c0016b9a <AMD_K6_read_msr(unsigned int, REGS*)>:
c0016b9a:	60                   	pusha  
c0016b9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016b9f:	89 c1                	mov    ecx,eax
c0016ba1:	9c                   	pushf  
c0016ba2:	fa                   	cli    
c0016ba3:	0f 09                	wbinvd 
c0016ba5:	31 c0                	xor    eax,eax
c0016ba7:	31 d2                	xor    edx,edx
c0016ba9:	0f 32                	rdmsr  
c0016bab:	9d                   	popf   
c0016bac:	89 c2                	mov    edx,eax
c0016bae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bb2:	89 10                	mov    DWORD PTR [eax],edx
c0016bb4:	61                   	popa   
c0016bb5:	90                   	nop
c0016bb6:	c3                   	ret    

c0016bb7 <AMD_K6_writeback(int, int, int)>:
c0016bb7:	83 ec 20             	sub    esp,0x20
c0016bba:	a1 a0 bd 02 c0       	mov    eax,ds:0xc002bda0
c0016bbf:	c1 e8 14             	shr    eax,0x14
c0016bc2:	c1 e8 02             	shr    eax,0x2
c0016bc5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016bc9:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0016bce:	0f 85 9e 00 00 00    	jne    c0016c72 <AMD_K6_writeback(int, int, int)+0xbb>
c0016bd4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016bd8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016bdc:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0016be1:	75 19                	jne    c0016bfc <AMD_K6_writeback(int, int, int)+0x45>
c0016be3:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0016be8:	7f 0a                	jg     c0016bf4 <AMD_K6_writeback(int, int, int)+0x3d>
c0016bea:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0016bf2:	eb 08                	jmp    c0016bfc <AMD_K6_writeback(int, int, int)+0x45>
c0016bf4:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0016bfc:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0016c01:	7c 6e                	jl     c0016c71 <AMD_K6_writeback(int, int, int)+0xba>
c0016c03:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0016c08:	7e 09                	jle    c0016c13 <AMD_K6_writeback(int, int, int)+0x5c>
c0016c0a:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0016c0f:	74 36                	je     c0016c47 <AMD_K6_writeback(int, int, int)+0x90>
c0016c11:	eb 5e                	jmp    c0016c71 <AMD_K6_writeback(int, int, int)+0xba>
c0016c13:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c17:	50                   	push   eax
c0016c18:	68 82 00 00 c0       	push   0xc0000082
c0016c1d:	e8 78 ff ff ff       	call   c0016b9a <AMD_K6_read_msr(unsigned int, REGS*)>
c0016c22:	83 c4 08             	add    esp,0x8
c0016c25:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c29:	01 c0                	add    eax,eax
c0016c2b:	83 e0 7f             	and    eax,0x7f
c0016c2e:	89 c2                	mov    edx,eax
c0016c30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c34:	50                   	push   eax
c0016c35:	6a 00                	push   0x0
c0016c37:	52                   	push   edx
c0016c38:	68 82 00 00 c0       	push   0xc0000082
c0016c3d:	e8 39 ff ff ff       	call   c0016b7b <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016c42:	83 c4 10             	add    esp,0x10
c0016c45:	eb 2b                	jmp    c0016c72 <AMD_K6_writeback(int, int, int)+0xbb>
c0016c47:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c4b:	50                   	push   eax
c0016c4c:	68 82 00 00 c0       	push   0xc0000082
c0016c51:	e8 44 ff ff ff       	call   c0016b9a <AMD_K6_read_msr(unsigned int, REGS*)>
c0016c56:	83 c4 08             	add    esp,0x8
c0016c59:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016c5d:	50                   	push   eax
c0016c5e:	6a 00                	push   0x0
c0016c60:	6a 00                	push   0x0
c0016c62:	68 82 00 00 c0       	push   0xc0000082
c0016c67:	e8 0f ff ff ff       	call   c0016b7b <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0016c6c:	83 c4 10             	add    esp,0x10
c0016c6f:	eb 01                	jmp    c0016c72 <AMD_K6_writeback(int, int, int)+0xbb>
c0016c71:	90                   	nop
c0016c72:	90                   	nop
c0016c73:	83 c4 20             	add    esp,0x20
c0016c76:	c3                   	ret    

c0016c77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0016c77:	56                   	push   esi
c0016c78:	53                   	push   ebx
c0016c79:	a1 c0 44 02 c0       	mov    eax,ds:0xc00244c0
c0016c7e:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0016c82:	75 32                	jne    c0016cb6 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0016c84:	8b 15 60 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c760
c0016c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c8e:	89 10                	mov    DWORD PTR [eax],edx
c0016c90:	8b 15 5c c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c75c
c0016c96:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c9a:	89 10                	mov    DWORD PTR [eax],edx
c0016c9c:	8b 15 58 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c758
c0016ca2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016ca6:	89 10                	mov    DWORD PTR [eax],edx
c0016ca8:	8b 15 54 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c754
c0016cae:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cb2:	89 10                	mov    DWORD PTR [eax],edx
c0016cb4:	eb 5c                	jmp    c0016d12 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0016cb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016cba:	ba 00 00 00 00       	mov    edx,0x0
c0016cbf:	89 d1                	mov    ecx,edx
c0016cc1:	0f a2                	cpuid  
c0016cc3:	89 c6                	mov    esi,eax
c0016cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cc9:	89 30                	mov    DWORD PTR [eax],esi
c0016ccb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016ccf:	89 18                	mov    DWORD PTR [eax],ebx
c0016cd1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016cd5:	89 08                	mov    DWORD PTR [eax],ecx
c0016cd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016cdb:	89 10                	mov    DWORD PTR [eax],edx
c0016cdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ce1:	a3 c0 44 02 c0       	mov    ds:0xc00244c0,eax
c0016ce6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cea:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cec:	a3 60 c7 02 c0       	mov    ds:0xc002c760,eax
c0016cf1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016cf5:	8b 00                	mov    eax,DWORD PTR [eax]
c0016cf7:	a3 5c c7 02 c0       	mov    ds:0xc002c75c,eax
c0016cfc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d02:	a3 58 c7 02 c0       	mov    ds:0xc002c758,eax
c0016d07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016d0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0016d0d:	a3 54 c7 02 c0       	mov    ds:0xc002c754,eax
c0016d12:	5b                   	pop    ebx
c0016d13:	5e                   	pop    esi
c0016d14:	c3                   	ret    

c0016d15 <cpuidCheckEDX(unsigned int)>:
c0016d15:	83 ec 10             	sub    esp,0x10
c0016d18:	89 e0                	mov    eax,esp
c0016d1a:	50                   	push   eax
c0016d1b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d1f:	50                   	push   eax
c0016d20:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d24:	50                   	push   eax
c0016d25:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d29:	50                   	push   eax
c0016d2a:	6a 01                	push   0x1
c0016d2c:	e8 46 ff ff ff       	call   c0016c77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d31:	83 c4 14             	add    esp,0x14
c0016d34:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016d37:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d3b:	0f 95 c0             	setne  al
c0016d3e:	83 c4 10             	add    esp,0x10
c0016d41:	c3                   	ret    

c0016d42 <cpuidCheckECX(unsigned int)>:
c0016d42:	83 ec 10             	sub    esp,0x10
c0016d45:	89 e0                	mov    eax,esp
c0016d47:	50                   	push   eax
c0016d48:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d4c:	50                   	push   eax
c0016d4d:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d51:	50                   	push   eax
c0016d52:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d56:	50                   	push   eax
c0016d57:	6a 01                	push   0x1
c0016d59:	e8 19 ff ff ff       	call   c0016c77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d5e:	83 c4 14             	add    esp,0x14
c0016d61:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d65:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d69:	0f 95 c0             	setne  al
c0016d6c:	83 c4 10             	add    esp,0x10
c0016d6f:	c3                   	ret    

c0016d70 <cpuidCheckExtendedEBX(unsigned int)>:
c0016d70:	83 ec 10             	sub    esp,0x10
c0016d73:	89 e0                	mov    eax,esp
c0016d75:	50                   	push   eax
c0016d76:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016d7a:	50                   	push   eax
c0016d7b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d7f:	50                   	push   eax
c0016d80:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016d84:	50                   	push   eax
c0016d85:	6a 07                	push   0x7
c0016d87:	e8 eb fe ff ff       	call   c0016c77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016d8c:	83 c4 14             	add    esp,0x14
c0016d8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d93:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016d97:	0f 95 c0             	setne  al
c0016d9a:	83 c4 10             	add    esp,0x10
c0016d9d:	c3                   	ret    

c0016d9e <cpuidCheckExtendedECX(unsigned int)>:
c0016d9e:	83 ec 10             	sub    esp,0x10
c0016da1:	89 e0                	mov    eax,esp
c0016da3:	50                   	push   eax
c0016da4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016da8:	50                   	push   eax
c0016da9:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016dad:	50                   	push   eax
c0016dae:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016db2:	50                   	push   eax
c0016db3:	6a 07                	push   0x7
c0016db5:	e8 bd fe ff ff       	call   c0016c77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0016dba:	83 c4 14             	add    esp,0x14
c0016dbd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dc1:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0016dc5:	0f 95 c0             	setne  al
c0016dc8:	83 c4 10             	add    esp,0x10
c0016dcb:	c3                   	ret    

c0016dcc <HalDetectFeatures()>:
c0016dcc:	57                   	push   edi
c0016dcd:	56                   	push   esi
c0016dce:	53                   	push   ebx
c0016dcf:	81 ec 90 00 00 00    	sub    esp,0x90
c0016dd5:	83 ec 04             	sub    esp,0x4
c0016dd8:	6a 08                	push   0x8
c0016dda:	6a 00                	push   0x0
c0016ddc:	68 8c c7 02 c0       	push   0xc002c78c
c0016de1:	e8 0a 97 fe ff       	call   c00004f0 <memset>
c0016de6:	83 c4 10             	add    esp,0x10
c0016de9:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016dee:	83 c8 04             	or     eax,0x4
c0016df1:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016df6:	e8 fe 93 fe ff       	call   c00001f9 <detectCPUID>
c0016dfb:	85 c0                	test   eax,eax
c0016dfd:	0f 95 c0             	setne  al
c0016e00:	83 e0 01             	and    eax,0x1
c0016e03:	83 e0 01             	and    eax,0x1
c0016e06:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016e09:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e0e:	83 e0 fd             	and    eax,0xfffffffd
c0016e11:	88 c2                	mov    dl,al
c0016e13:	88 c8                	mov    al,cl
c0016e15:	09 d0                	or     eax,edx
c0016e17:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e1c:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e21:	83 e0 fb             	and    eax,0xfffffffb
c0016e24:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e29:	83 ec 0c             	sub    esp,0xc
c0016e2c:	68 bc 2c 02 c0       	push   0xc0022cbc
c0016e31:	e8 2e 01 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016e36:	83 c4 10             	add    esp,0x10
c0016e39:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e3e:	83 e0 02             	and    eax,0x2
c0016e41:	0f b6 c0             	movzx  eax,al
c0016e44:	85 c0                	test   eax,eax
c0016e46:	0f 84 7f 02 00 00    	je     c00170cb <HalDetectFeatures()+0x2ff>
c0016e4c:	83 ec 0c             	sub    esp,0xc
c0016e4f:	6a 20                	push   0x20
c0016e51:	e8 bf fe ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c0016e56:	83 c4 10             	add    esp,0x10
c0016e59:	83 e0 01             	and    eax,0x1
c0016e5c:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0016e63:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016e68:	83 e0 f7             	and    eax,0xfffffff7
c0016e6b:	88 c2                	mov    dl,al
c0016e6d:	88 c8                	mov    al,cl
c0016e6f:	09 d0                	or     eax,edx
c0016e71:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016e76:	83 ec 0c             	sub    esp,0xc
c0016e79:	68 00 00 00 04       	push   0x4000000
c0016e7e:	e8 92 fe ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c0016e83:	83 c4 10             	add    esp,0x10
c0016e86:	89 c1                	mov    ecx,eax
c0016e88:	83 e1 01             	and    ecx,0x1
c0016e8b:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016e90:	83 e0 fe             	and    eax,0xfffffffe
c0016e93:	88 c2                	mov    dl,al
c0016e95:	88 c8                	mov    al,cl
c0016e97:	09 d0                	or     eax,edx
c0016e99:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016e9e:	83 ec 0c             	sub    esp,0xc
c0016ea1:	68 80 00 00 00       	push   0x80
c0016ea6:	e8 6a fe ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c0016eab:	83 c4 10             	add    esp,0x10
c0016eae:	89 c1                	mov    ecx,eax
c0016eb0:	c1 e1 07             	shl    ecx,0x7
c0016eb3:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016eb8:	83 e0 7f             	and    eax,0x7f
c0016ebb:	88 c2                	mov    dl,al
c0016ebd:	88 c8                	mov    al,cl
c0016ebf:	09 d0                	or     eax,edx
c0016ec1:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016ec6:	83 ec 0c             	sub    esp,0xc
c0016ec9:	68 00 00 80 00       	push   0x800000
c0016ece:	e8 42 fe ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c0016ed3:	83 c4 10             	add    esp,0x10
c0016ed6:	83 e0 01             	and    eax,0x1
c0016ed9:	89 c1                	mov    ecx,eax
c0016edb:	c1 e1 05             	shl    ecx,0x5
c0016ede:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016ee3:	83 e0 df             	and    eax,0xffffffdf
c0016ee6:	88 c2                	mov    dl,al
c0016ee8:	88 c8                	mov    al,cl
c0016eea:	09 d0                	or     eax,edx
c0016eec:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016ef1:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016ef6:	83 e0 01             	and    eax,0x1
c0016ef9:	75 0c                	jne    c0016f07 <HalDetectFeatures()+0x13b>
c0016efb:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0016f00:	25 00 04 00 00       	and    eax,0x400
c0016f05:	74 0f                	je     c0016f16 <HalDetectFeatures()+0x14a>
c0016f07:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f0c:	83 e0 fe             	and    eax,0xfffffffe
c0016f0f:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f14:	eb 28                	jmp    c0016f3e <HalDetectFeatures()+0x172>
c0016f16:	83 ec 0c             	sub    esp,0xc
c0016f19:	68 00 02 00 00       	push   0x200
c0016f1e:	e8 f2 fd ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c0016f23:	83 c4 10             	add    esp,0x10
c0016f26:	89 c1                	mov    ecx,eax
c0016f28:	83 e1 01             	and    ecx,0x1
c0016f2b:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f30:	83 e0 fe             	and    eax,0xfffffffe
c0016f33:	88 c2                	mov    dl,al
c0016f35:	88 c8                	mov    al,cl
c0016f37:	09 d0                	or     eax,edx
c0016f39:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f3e:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f43:	83 e0 01             	and    eax,0x1
c0016f46:	0f b6 c0             	movzx  eax,al
c0016f49:	85 c0                	test   eax,eax
c0016f4b:	74 1c                	je     c0016f69 <HalDetectFeatures()+0x19d>
c0016f4d:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f52:	83 e0 08             	and    eax,0x8
c0016f55:	0f b6 c0             	movzx  eax,al
c0016f58:	85 c0                	test   eax,eax
c0016f5a:	75 0d                	jne    c0016f69 <HalDetectFeatures()+0x19d>
c0016f5c:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f61:	83 e0 fe             	and    eax,0xfffffffe
c0016f64:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f69:	83 ec 0c             	sub    esp,0xc
c0016f6c:	68 ce 2c 02 c0       	push   0xc0022cce
c0016f71:	e8 ee ff fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016f76:	83 c4 10             	add    esp,0x10
c0016f79:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0016f7e:	83 e0 fe             	and    eax,0xfffffffe
c0016f81:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0016f86:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0016f8e:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0016f96:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0016f9e:	85 c0                	test   eax,eax
c0016fa0:	0f 84 ab 00 00 00    	je     c0017051 <HalDetectFeatures()+0x285>
c0016fa6:	83 ec 0c             	sub    esp,0xc
c0016fa9:	6a 01                	push   0x1
c0016fab:	e8 92 fd ff ff       	call   c0016d42 <cpuidCheckECX(unsigned int)>
c0016fb0:	83 c4 10             	add    esp,0x10
c0016fb3:	83 e0 01             	and    eax,0x1
c0016fb6:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0016fb9:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016fbe:	83 e0 fd             	and    eax,0xfffffffd
c0016fc1:	88 c2                	mov    dl,al
c0016fc3:	88 c8                	mov    al,cl
c0016fc5:	09 d0                	or     eax,edx
c0016fc7:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016fcc:	83 ec 0c             	sub    esp,0xc
c0016fcf:	68 00 02 00 00       	push   0x200
c0016fd4:	e8 69 fd ff ff       	call   c0016d42 <cpuidCheckECX(unsigned int)>
c0016fd9:	83 c4 10             	add    esp,0x10
c0016fdc:	83 e0 01             	and    eax,0x1
c0016fdf:	89 c1                	mov    ecx,eax
c0016fe1:	c1 e1 04             	shl    ecx,0x4
c0016fe4:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0016fe9:	83 e0 ef             	and    eax,0xffffffef
c0016fec:	88 c2                	mov    dl,al
c0016fee:	88 c8                	mov    al,cl
c0016ff0:	09 d0                	or     eax,edx
c0016ff2:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0016ff7:	83 ec 0c             	sub    esp,0xc
c0016ffa:	68 00 00 08 00       	push   0x80000
c0016fff:	e8 3e fd ff ff       	call   c0016d42 <cpuidCheckECX(unsigned int)>
c0017004:	83 c4 10             	add    esp,0x10
c0017007:	83 e0 01             	and    eax,0x1
c001700a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017011:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017016:	83 e0 fb             	and    eax,0xfffffffb
c0017019:	88 c2                	mov    dl,al
c001701b:	88 c8                	mov    al,cl
c001701d:	09 d0                	or     eax,edx
c001701f:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017024:	83 ec 0c             	sub    esp,0xc
c0017027:	68 00 00 10 00       	push   0x100000
c001702c:	e8 11 fd ff ff       	call   c0016d42 <cpuidCheckECX(unsigned int)>
c0017031:	83 c4 10             	add    esp,0x10
c0017034:	83 e0 01             	and    eax,0x1
c0017037:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001703e:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017043:	83 e0 f7             	and    eax,0xfffffff7
c0017046:	88 c2                	mov    dl,al
c0017048:	88 c8                	mov    al,cl
c001704a:	09 d0                	or     eax,edx
c001704c:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017051:	83 ec 0c             	sub    esp,0xc
c0017054:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017058:	50                   	push   eax
c0017059:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001705d:	50                   	push   eax
c001705e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017062:	50                   	push   eax
c0017063:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017067:	50                   	push   eax
c0017068:	68 00 00 00 80       	push   0x80000000
c001706d:	e8 05 fc ff ff       	call   c0016c77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017072:	83 c4 20             	add    esp,0x20
c0017075:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017079:	3d 00 00 00 80       	cmp    eax,0x80000000
c001707e:	76 4b                	jbe    c00170cb <HalDetectFeatures()+0x2ff>
c0017080:	83 ec 0c             	sub    esp,0xc
c0017083:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017087:	50                   	push   eax
c0017088:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001708c:	50                   	push   eax
c001708d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017091:	50                   	push   eax
c0017092:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017096:	50                   	push   eax
c0017097:	68 01 00 00 80       	push   0x80000001
c001709c:	e8 d6 fb ff ff       	call   c0016c77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00170a1:	83 c4 20             	add    esp,0x20
c00170a4:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00170a9:	83 e0 bf             	and    eax,0xffffffbf
c00170ac:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c00170b1:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00170b6:	83 e0 fd             	and    eax,0xfffffffd
c00170b9:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00170be:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00170c3:	83 e0 fe             	and    eax,0xfffffffe
c00170c6:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00170cb:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c00170d0:	25 00 04 00 00       	and    eax,0x400
c00170d5:	74 0d                	je     c00170e4 <HalDetectFeatures()+0x318>
c00170d7:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00170dc:	83 e0 fb             	and    eax,0xfffffffb
c00170df:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c00170e4:	c6 05 88 c7 02 c0 01 	mov    BYTE PTR ds:0xc002c788,0x1
c00170eb:	83 ec 04             	sub    esp,0x4
c00170ee:	6a 0d                	push   0xd
c00170f0:	6a 00                	push   0x0
c00170f2:	68 70 c7 02 c0       	push   0xc002c770
c00170f7:	e8 f4 93 fe ff       	call   c00004f0 <memset>
c00170fc:	83 c4 10             	add    esp,0x10
c00170ff:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017104:	83 e0 02             	and    eax,0x2
c0017107:	0f b6 c0             	movzx  eax,al
c001710a:	85 c0                	test   eax,eax
c001710c:	0f 84 16 08 00 00    	je     c0017928 <HalDetectFeatures()+0xb5c>
c0017112:	83 ec 0c             	sub    esp,0xc
c0017115:	6a 10                	push   0x10
c0017117:	e8 f9 fb ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c001711c:	83 c4 10             	add    esp,0x10
c001711f:	83 e0 01             	and    eax,0x1
c0017122:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017129:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001712e:	83 e0 f7             	and    eax,0xfffffff7
c0017131:	88 c2                	mov    dl,al
c0017133:	88 c8                	mov    al,cl
c0017135:	09 d0                	or     eax,edx
c0017137:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001713c:	83 ec 0c             	sub    esp,0xc
c001713f:	6a 40                	push   0x40
c0017141:	e8 cf fb ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c0017146:	83 c4 10             	add    esp,0x10
c0017149:	83 e0 01             	and    eax,0x1
c001714c:	89 c1                	mov    ecx,eax
c001714e:	c1 e1 04             	shl    ecx,0x4
c0017151:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017156:	83 e0 ef             	and    eax,0xffffffef
c0017159:	88 c2                	mov    dl,al
c001715b:	88 c8                	mov    al,cl
c001715d:	09 d0                	or     eax,edx
c001715f:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c0017164:	83 ec 0c             	sub    esp,0xc
c0017167:	6a 08                	push   0x8
c0017169:	e8 a7 fb ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c001716e:	83 c4 10             	add    esp,0x10
c0017171:	83 e0 01             	and    eax,0x1
c0017174:	89 c1                	mov    ecx,eax
c0017176:	c1 e1 05             	shl    ecx,0x5
c0017179:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001717e:	83 e0 df             	and    eax,0xffffffdf
c0017181:	88 c2                	mov    dl,al
c0017183:	88 c8                	mov    al,cl
c0017185:	09 d0                	or     eax,edx
c0017187:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001718c:	83 ec 0c             	sub    esp,0xc
c001718f:	68 00 20 00 00       	push   0x2000
c0017194:	e8 7c fb ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c0017199:	83 c4 10             	add    esp,0x10
c001719c:	83 e0 01             	and    eax,0x1
c001719f:	89 c1                	mov    ecx,eax
c00171a1:	c1 e1 06             	shl    ecx,0x6
c00171a4:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171a9:	83 e0 bf             	and    eax,0xffffffbf
c00171ac:	88 c2                	mov    dl,al
c00171ae:	88 c8                	mov    al,cl
c00171b0:	09 d0                	or     eax,edx
c00171b2:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00171b7:	83 ec 0c             	sub    esp,0xc
c00171ba:	68 00 00 01 00       	push   0x10000
c00171bf:	e8 51 fb ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c00171c4:	83 c4 10             	add    esp,0x10
c00171c7:	89 c1                	mov    ecx,eax
c00171c9:	c1 e1 07             	shl    ecx,0x7
c00171cc:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c00171d1:	83 e0 7f             	and    eax,0x7f
c00171d4:	88 c2                	mov    dl,al
c00171d6:	88 c8                	mov    al,cl
c00171d8:	09 d0                	or     eax,edx
c00171da:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c00171df:	83 ec 0c             	sub    esp,0xc
c00171e2:	6a 01                	push   0x1
c00171e4:	e8 2c fb ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c00171e9:	83 c4 10             	add    esp,0x10
c00171ec:	83 e0 01             	and    eax,0x1
c00171ef:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00171f6:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00171fb:	83 e0 f7             	and    eax,0xfffffff7
c00171fe:	88 c2                	mov    dl,al
c0017200:	88 c8                	mov    al,cl
c0017202:	09 d0                	or     eax,edx
c0017204:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017209:	83 ec 0c             	sub    esp,0xc
c001720c:	68 00 08 00 00       	push   0x800
c0017211:	e8 ff fa ff ff       	call   c0016d15 <cpuidCheckEDX(unsigned int)>
c0017216:	83 c4 10             	add    esp,0x10
c0017219:	89 c1                	mov    ecx,eax
c001721b:	83 e1 01             	and    ecx,0x1
c001721e:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017223:	83 e0 fe             	and    eax,0xfffffffe
c0017226:	88 c2                	mov    dl,al
c0017228:	88 c8                	mov    al,cl
c001722a:	09 d0                	or     eax,edx
c001722c:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017231:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017236:	83 e0 40             	and    eax,0x40
c0017239:	0f b6 c0             	movzx  eax,al
c001723c:	85 c0                	test   eax,eax
c001723e:	74 0a                	je     c001724a <HalDetectFeatures()+0x47e>
c0017240:	c7 05 68 c7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002c768,0x100
c001724a:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c001724f:	83 e0 80             	and    eax,0xffffff80
c0017252:	0f b6 c0             	movzx  eax,al
c0017255:	85 c0                	test   eax,eax
c0017257:	74 0a                	je     c0017263 <HalDetectFeatures()+0x497>
c0017259:	c7 05 64 c7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002c764,0x80
c0017263:	83 ec 0c             	sub    esp,0xc
c0017266:	8d 44 24 14          	lea    eax,[esp+0x14]
c001726a:	50                   	push   eax
c001726b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001726f:	50                   	push   eax
c0017270:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017274:	50                   	push   eax
c0017275:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017279:	50                   	push   eax
c001727a:	6a 00                	push   0x0
c001727c:	e8 f6 f9 ff ff       	call   c0016c77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017281:	83 c4 20             	add    esp,0x20
c0017284:	c7 44 24 48 70 c7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002c770
c001728c:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017290:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017294:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c001729c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00172a0:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00172a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00172a8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00172ac:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00172b0:	89 c6                	mov    esi,eax
c00172b2:	89 d7                	mov    edi,edx
c00172b4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172b6:	89 c8                	mov    eax,ecx
c00172b8:	89 fa                	mov    edx,edi
c00172ba:	89 f3                	mov    ebx,esi
c00172bc:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00172c0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00172c4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00172c8:	b8 74 c7 02 c0       	mov    eax,0xc002c774
c00172cd:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00172d1:	8d 44 24 08          	lea    eax,[esp+0x8]
c00172d5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00172d9:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c00172e1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00172e5:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c00172e9:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00172ed:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c00172f1:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c00172f5:	89 c6                	mov    esi,eax
c00172f7:	89 d7                	mov    edi,edx
c00172f9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172fb:	89 c8                	mov    eax,ecx
c00172fd:	89 fa                	mov    edx,edi
c00172ff:	89 f3                	mov    ebx,esi
c0017301:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0017305:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0017309:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001730d:	b8 78 c7 02 c0       	mov    eax,0xc002c778
c0017312:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0017319:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001731d:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0017321:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0017329:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0017330:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0017334:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0017338:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c001733f:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0017343:	89 c6                	mov    esi,eax
c0017345:	89 d7                	mov    edi,edx
c0017347:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017349:	89 c8                	mov    eax,ecx
c001734b:	89 fa                	mov    edx,edi
c001734d:	89 f3                	mov    ebx,esi
c001734f:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0017353:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0017357:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001735b:	83 ec 08             	sub    esp,0x8
c001735e:	68 e0 2c 02 c0       	push   0xc0022ce0
c0017363:	68 70 c7 02 c0       	push   0xc002c770
c0017368:	e8 e3 93 fe ff       	call   c0000750 <strcmp>
c001736d:	83 c4 10             	add    esp,0x10
c0017370:	85 c0                	test   eax,eax
c0017372:	74 19                	je     c001738d <HalDetectFeatures()+0x5c1>
c0017374:	83 ec 08             	sub    esp,0x8
c0017377:	68 ed 2c 02 c0       	push   0xc0022ced
c001737c:	68 70 c7 02 c0       	push   0xc002c770
c0017381:	e8 ca 93 fe ff       	call   c0000750 <strcmp>
c0017386:	83 c4 10             	add    esp,0x10
c0017389:	85 c0                	test   eax,eax
c001738b:	75 04                	jne    c0017391 <HalDetectFeatures()+0x5c5>
c001738d:	b0 01                	mov    al,0x1
c001738f:	eb 02                	jmp    c0017393 <HalDetectFeatures()+0x5c7>
c0017391:	b0 00                	mov    al,0x0
c0017393:	0f b6 c0             	movzx  eax,al
c0017396:	85 c0                	test   eax,eax
c0017398:	74 0f                	je     c00173a9 <HalDetectFeatures()+0x5dd>
c001739a:	c7 05 84 c7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x2
c00173a4:	e9 0d 03 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c00173a9:	83 ec 08             	sub    esp,0x8
c00173ac:	68 fa 2c 02 c0       	push   0xc0022cfa
c00173b1:	68 70 c7 02 c0       	push   0xc002c770
c00173b6:	e8 95 93 fe ff       	call   c0000750 <strcmp>
c00173bb:	83 c4 10             	add    esp,0x10
c00173be:	85 c0                	test   eax,eax
c00173c0:	74 19                	je     c00173db <HalDetectFeatures()+0x60f>
c00173c2:	83 ec 08             	sub    esp,0x8
c00173c5:	68 07 2d 02 c0       	push   0xc0022d07
c00173ca:	68 70 c7 02 c0       	push   0xc002c770
c00173cf:	e8 7c 93 fe ff       	call   c0000750 <strcmp>
c00173d4:	83 c4 10             	add    esp,0x10
c00173d7:	85 c0                	test   eax,eax
c00173d9:	75 04                	jne    c00173df <HalDetectFeatures()+0x613>
c00173db:	b0 01                	mov    al,0x1
c00173dd:	eb 02                	jmp    c00173e1 <HalDetectFeatures()+0x615>
c00173df:	b0 00                	mov    al,0x0
c00173e1:	0f b6 c0             	movzx  eax,al
c00173e4:	85 c0                	test   eax,eax
c00173e6:	74 0f                	je     c00173f7 <HalDetectFeatures()+0x62b>
c00173e8:	c7 05 84 c7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x4
c00173f2:	e9 bf 02 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c00173f7:	83 ec 08             	sub    esp,0x8
c00173fa:	68 14 2d 02 c0       	push   0xc0022d14
c00173ff:	68 70 c7 02 c0       	push   0xc002c770
c0017404:	e8 47 93 fe ff       	call   c0000750 <strcmp>
c0017409:	83 c4 10             	add    esp,0x10
c001740c:	85 c0                	test   eax,eax
c001740e:	74 19                	je     c0017429 <HalDetectFeatures()+0x65d>
c0017410:	83 ec 08             	sub    esp,0x8
c0017413:	68 21 2d 02 c0       	push   0xc0022d21
c0017418:	68 70 c7 02 c0       	push   0xc002c770
c001741d:	e8 2e 93 fe ff       	call   c0000750 <strcmp>
c0017422:	83 c4 10             	add    esp,0x10
c0017425:	85 c0                	test   eax,eax
c0017427:	75 04                	jne    c001742d <HalDetectFeatures()+0x661>
c0017429:	b0 01                	mov    al,0x1
c001742b:	eb 02                	jmp    c001742f <HalDetectFeatures()+0x663>
c001742d:	b0 00                	mov    al,0x0
c001742f:	0f b6 c0             	movzx  eax,al
c0017432:	85 c0                	test   eax,eax
c0017434:	74 0f                	je     c0017445 <HalDetectFeatures()+0x679>
c0017436:	c7 05 84 c7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x5
c0017440:	e9 71 02 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c0017445:	83 ec 08             	sub    esp,0x8
c0017448:	68 2e 2d 02 c0       	push   0xc0022d2e
c001744d:	68 70 c7 02 c0       	push   0xc002c770
c0017452:	e8 f9 92 fe ff       	call   c0000750 <strcmp>
c0017457:	83 c4 10             	add    esp,0x10
c001745a:	85 c0                	test   eax,eax
c001745c:	0f 94 c0             	sete   al
c001745f:	0f b6 c0             	movzx  eax,al
c0017462:	85 c0                	test   eax,eax
c0017464:	74 0f                	je     c0017475 <HalDetectFeatures()+0x6a9>
c0017466:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c0017470:	e9 41 02 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c0017475:	83 ec 08             	sub    esp,0x8
c0017478:	68 3b 2d 02 c0       	push   0xc0022d3b
c001747d:	68 70 c7 02 c0       	push   0xc002c770
c0017482:	e8 c9 92 fe ff       	call   c0000750 <strcmp>
c0017487:	83 c4 10             	add    esp,0x10
c001748a:	85 c0                	test   eax,eax
c001748c:	0f 94 c0             	sete   al
c001748f:	0f b6 c0             	movzx  eax,al
c0017492:	85 c0                	test   eax,eax
c0017494:	74 0f                	je     c00174a5 <HalDetectFeatures()+0x6d9>
c0017496:	c7 05 84 c7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x3
c00174a0:	e9 11 02 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c00174a5:	83 ec 08             	sub    esp,0x8
c00174a8:	68 fa 2c 02 c0       	push   0xc0022cfa
c00174ad:	68 70 c7 02 c0       	push   0xc002c770
c00174b2:	e8 99 92 fe ff       	call   c0000750 <strcmp>
c00174b7:	83 c4 10             	add    esp,0x10
c00174ba:	85 c0                	test   eax,eax
c00174bc:	0f 94 c0             	sete   al
c00174bf:	0f b6 c0             	movzx  eax,al
c00174c2:	85 c0                	test   eax,eax
c00174c4:	74 0f                	je     c00174d5 <HalDetectFeatures()+0x709>
c00174c6:	c7 05 84 c7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x6
c00174d0:	e9 e1 01 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c00174d5:	83 ec 08             	sub    esp,0x8
c00174d8:	68 48 2d 02 c0       	push   0xc0022d48
c00174dd:	68 70 c7 02 c0       	push   0xc002c770
c00174e2:	e8 69 92 fe ff       	call   c0000750 <strcmp>
c00174e7:	83 c4 10             	add    esp,0x10
c00174ea:	85 c0                	test   eax,eax
c00174ec:	0f 94 c0             	sete   al
c00174ef:	0f b6 c0             	movzx  eax,al
c00174f2:	85 c0                	test   eax,eax
c00174f4:	74 0f                	je     c0017505 <HalDetectFeatures()+0x739>
c00174f6:	c7 05 84 c7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x7
c0017500:	e9 b1 01 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c0017505:	83 ec 08             	sub    esp,0x8
c0017508:	68 55 2d 02 c0       	push   0xc0022d55
c001750d:	68 70 c7 02 c0       	push   0xc002c770
c0017512:	e8 39 92 fe ff       	call   c0000750 <strcmp>
c0017517:	83 c4 10             	add    esp,0x10
c001751a:	85 c0                	test   eax,eax
c001751c:	0f 94 c0             	sete   al
c001751f:	0f b6 c0             	movzx  eax,al
c0017522:	85 c0                	test   eax,eax
c0017524:	74 0f                	je     c0017535 <HalDetectFeatures()+0x769>
c0017526:	c7 05 84 c7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x8
c0017530:	e9 81 01 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c0017535:	83 ec 08             	sub    esp,0x8
c0017538:	68 62 2d 02 c0       	push   0xc0022d62
c001753d:	68 70 c7 02 c0       	push   0xc002c770
c0017542:	e8 09 92 fe ff       	call   c0000750 <strcmp>
c0017547:	83 c4 10             	add    esp,0x10
c001754a:	85 c0                	test   eax,eax
c001754c:	0f 94 c0             	sete   al
c001754f:	0f b6 c0             	movzx  eax,al
c0017552:	85 c0                	test   eax,eax
c0017554:	74 0f                	je     c0017565 <HalDetectFeatures()+0x799>
c0017556:	c7 05 84 c7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x9
c0017560:	e9 51 01 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c0017565:	83 ec 08             	sub    esp,0x8
c0017568:	68 6f 2d 02 c0       	push   0xc0022d6f
c001756d:	68 70 c7 02 c0       	push   0xc002c770
c0017572:	e8 d9 91 fe ff       	call   c0000750 <strcmp>
c0017577:	83 c4 10             	add    esp,0x10
c001757a:	85 c0                	test   eax,eax
c001757c:	0f 94 c0             	sete   al
c001757f:	0f b6 c0             	movzx  eax,al
c0017582:	85 c0                	test   eax,eax
c0017584:	74 0f                	je     c0017595 <HalDetectFeatures()+0x7c9>
c0017586:	c7 05 84 c7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xa
c0017590:	e9 21 01 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c0017595:	83 ec 08             	sub    esp,0x8
c0017598:	68 7c 2d 02 c0       	push   0xc0022d7c
c001759d:	68 70 c7 02 c0       	push   0xc002c770
c00175a2:	e8 a9 91 fe ff       	call   c0000750 <strcmp>
c00175a7:	83 c4 10             	add    esp,0x10
c00175aa:	85 c0                	test   eax,eax
c00175ac:	0f 94 c0             	sete   al
c00175af:	0f b6 c0             	movzx  eax,al
c00175b2:	85 c0                	test   eax,eax
c00175b4:	74 0f                	je     c00175c5 <HalDetectFeatures()+0x7f9>
c00175b6:	c7 05 84 c7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xb
c00175c0:	e9 f1 00 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c00175c5:	83 ec 08             	sub    esp,0x8
c00175c8:	68 89 2d 02 c0       	push   0xc0022d89
c00175cd:	68 70 c7 02 c0       	push   0xc002c770
c00175d2:	e8 79 91 fe ff       	call   c0000750 <strcmp>
c00175d7:	83 c4 10             	add    esp,0x10
c00175da:	85 c0                	test   eax,eax
c00175dc:	0f 94 c0             	sete   al
c00175df:	0f b6 c0             	movzx  eax,al
c00175e2:	85 c0                	test   eax,eax
c00175e4:	74 0f                	je     c00175f5 <HalDetectFeatures()+0x829>
c00175e6:	c7 05 84 c7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xc
c00175f0:	e9 c1 00 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c00175f5:	83 ec 08             	sub    esp,0x8
c00175f8:	68 96 2d 02 c0       	push   0xc0022d96
c00175fd:	68 70 c7 02 c0       	push   0xc002c770
c0017602:	e8 49 91 fe ff       	call   c0000750 <strcmp>
c0017607:	83 c4 10             	add    esp,0x10
c001760a:	85 c0                	test   eax,eax
c001760c:	0f 94 c0             	sete   al
c001760f:	0f b6 c0             	movzx  eax,al
c0017612:	85 c0                	test   eax,eax
c0017614:	74 0f                	je     c0017625 <HalDetectFeatures()+0x859>
c0017616:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017620:	e9 91 00 00 00       	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c0017625:	83 ec 08             	sub    esp,0x8
c0017628:	68 a3 2d 02 c0       	push   0xc0022da3
c001762d:	68 70 c7 02 c0       	push   0xc002c770
c0017632:	e8 19 91 fe ff       	call   c0000750 <strcmp>
c0017637:	83 c4 10             	add    esp,0x10
c001763a:	85 c0                	test   eax,eax
c001763c:	0f 94 c0             	sete   al
c001763f:	0f b6 c0             	movzx  eax,al
c0017642:	85 c0                	test   eax,eax
c0017644:	74 0c                	je     c0017652 <HalDetectFeatures()+0x886>
c0017646:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c0017650:	eb 64                	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c0017652:	83 ec 08             	sub    esp,0x8
c0017655:	68 b0 2d 02 c0       	push   0xc0022db0
c001765a:	68 70 c7 02 c0       	push   0xc002c770
c001765f:	e8 ec 90 fe ff       	call   c0000750 <strcmp>
c0017664:	83 c4 10             	add    esp,0x10
c0017667:	85 c0                	test   eax,eax
c0017669:	0f 94 c0             	sete   al
c001766c:	0f b6 c0             	movzx  eax,al
c001766f:	85 c0                	test   eax,eax
c0017671:	74 0c                	je     c001767f <HalDetectFeatures()+0x8b3>
c0017673:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c001767d:	eb 37                	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c001767f:	83 ec 08             	sub    esp,0x8
c0017682:	68 bd 2d 02 c0       	push   0xc0022dbd
c0017687:	68 70 c7 02 c0       	push   0xc002c770
c001768c:	e8 bf 90 fe ff       	call   c0000750 <strcmp>
c0017691:	83 c4 10             	add    esp,0x10
c0017694:	85 c0                	test   eax,eax
c0017696:	0f 94 c0             	sete   al
c0017699:	0f b6 c0             	movzx  eax,al
c001769c:	85 c0                	test   eax,eax
c001769e:	74 0c                	je     c00176ac <HalDetectFeatures()+0x8e0>
c00176a0:	c7 05 84 c7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002c784,0xd
c00176aa:	eb 0a                	jmp    c00176b6 <HalDetectFeatures()+0x8ea>
c00176ac:	c7 05 84 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x0
c00176b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176ba:	83 f8 06             	cmp    eax,0x6
c00176bd:	0f 86 cc 00 00 00    	jbe    c001778f <HalDetectFeatures()+0x9c3>
c00176c3:	83 ec 0c             	sub    esp,0xc
c00176c6:	68 80 00 00 00       	push   0x80
c00176cb:	e8 a0 f6 ff ff       	call   c0016d70 <cpuidCheckExtendedEBX(unsigned int)>
c00176d0:	83 c4 10             	add    esp,0x10
c00176d3:	89 c1                	mov    ecx,eax
c00176d5:	83 e1 01             	and    ecx,0x1
c00176d8:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00176dd:	83 e0 fe             	and    eax,0xfffffffe
c00176e0:	88 c2                	mov    dl,al
c00176e2:	88 c8                	mov    al,cl
c00176e4:	09 d0                	or     eax,edx
c00176e6:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00176eb:	83 ec 0c             	sub    esp,0xc
c00176ee:	68 00 00 10 00       	push   0x100000
c00176f3:	e8 78 f6 ff ff       	call   c0016d70 <cpuidCheckExtendedEBX(unsigned int)>
c00176f8:	83 c4 10             	add    esp,0x10
c00176fb:	83 e0 01             	and    eax,0x1
c00176fe:	89 c1                	mov    ecx,eax
c0017700:	c1 e1 06             	shl    ecx,0x6
c0017703:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017708:	83 e0 bf             	and    eax,0xffffffbf
c001770b:	88 c2                	mov    dl,al
c001770d:	88 c8                	mov    al,cl
c001770f:	09 d0                	or     eax,edx
c0017711:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017716:	83 ec 0c             	sub    esp,0xc
c0017719:	68 00 00 04 00       	push   0x40000
c001771e:	e8 4d f6 ff ff       	call   c0016d70 <cpuidCheckExtendedEBX(unsigned int)>
c0017723:	83 c4 10             	add    esp,0x10
c0017726:	83 e0 01             	and    eax,0x1
c0017729:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001772c:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017731:	83 e0 fd             	and    eax,0xfffffffd
c0017734:	88 c2                	mov    dl,al
c0017736:	88 c8                	mov    al,cl
c0017738:	09 d0                	or     eax,edx
c001773a:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001773f:	83 ec 0c             	sub    esp,0xc
c0017742:	6a 04                	push   0x4
c0017744:	e8 55 f6 ff ff       	call   c0016d9e <cpuidCheckExtendedECX(unsigned int)>
c0017749:	83 c4 10             	add    esp,0x10
c001774c:	83 e0 01             	and    eax,0x1
c001774f:	89 c1                	mov    ecx,eax
c0017751:	c1 e1 05             	shl    ecx,0x5
c0017754:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017759:	83 e0 df             	and    eax,0xffffffdf
c001775c:	88 c2                	mov    dl,al
c001775e:	88 c8                	mov    al,cl
c0017760:	09 d0                	or     eax,edx
c0017762:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017767:	83 ec 0c             	sub    esp,0xc
c001776a:	6a 20                	push   0x20
c001776c:	e8 2d f6 ff ff       	call   c0016d9e <cpuidCheckExtendedECX(unsigned int)>
c0017771:	83 c4 10             	add    esp,0x10
c0017774:	83 e0 01             	and    eax,0x1
c0017777:	89 c1                	mov    ecx,eax
c0017779:	c1 e1 04             	shl    ecx,0x4
c001777c:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017781:	83 e0 ef             	and    eax,0xffffffef
c0017784:	88 c2                	mov    dl,al
c0017786:	88 c8                	mov    al,cl
c0017788:	09 d0                	or     eax,edx
c001778a:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c001778f:	83 ec 0c             	sub    esp,0xc
c0017792:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017796:	50                   	push   eax
c0017797:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001779b:	50                   	push   eax
c001779c:	8d 44 24 24          	lea    eax,[esp+0x24]
c00177a0:	50                   	push   eax
c00177a1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00177a5:	50                   	push   eax
c00177a6:	6a 01                	push   0x1
c00177a8:	e8 ca f4 ff ff       	call   c0016c77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00177ad:	83 c4 20             	add    esp,0x20
c00177b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177b4:	83 e0 0f             	and    eax,0xf
c00177b7:	a2 80 c7 02 c0       	mov    ds:0xc002c780,al
c00177bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177c0:	c1 e8 04             	shr    eax,0x4
c00177c3:	83 e0 0f             	and    eax,0xf
c00177c6:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c00177cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177cf:	c1 e8 08             	shr    eax,0x8
c00177d2:	83 e0 0f             	and    eax,0xf
c00177d5:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c00177da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177de:	c1 e8 0c             	shr    eax,0xc
c00177e1:	83 e0 03             	and    eax,0x3
c00177e4:	a2 7f c7 02 c0       	mov    ds:0xc002c77f,al
c00177e9:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177ee:	0f b6 c0             	movzx  eax,al
c00177f1:	83 f8 06             	cmp    eax,0x6
c00177f4:	74 0d                	je     c0017803 <HalDetectFeatures()+0xa37>
c00177f6:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c00177fb:	0f b6 c0             	movzx  eax,al
c00177fe:	83 f8 0f             	cmp    eax,0xf
c0017801:	75 18                	jne    c001781b <HalDetectFeatures()+0xa4f>
c0017803:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017807:	c1 e8 10             	shr    eax,0x10
c001780a:	c1 e0 04             	shl    eax,0x4
c001780d:	88 c2                	mov    dl,al
c001780f:	a0 7e c7 02 c0       	mov    al,ds:0xc002c77e
c0017814:	09 d0                	or     eax,edx
c0017816:	a2 7e c7 02 c0       	mov    ds:0xc002c77e,al
c001781b:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017820:	0f b6 c0             	movzx  eax,al
c0017823:	83 f8 0f             	cmp    eax,0xf
c0017826:	75 15                	jne    c001783d <HalDetectFeatures()+0xa71>
c0017828:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001782c:	c1 e8 14             	shr    eax,0x14
c001782f:	88 c2                	mov    dl,al
c0017831:	a0 7d c7 02 c0       	mov    al,ds:0xc002c77d
c0017836:	01 d0                	add    eax,edx
c0017838:	a2 7d c7 02 c0       	mov    ds:0xc002c77d,al
c001783d:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0017845:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c001784d:	85 c0                	test   eax,eax
c001784f:	74 2d                	je     c001787e <HalDetectFeatures()+0xab2>
c0017851:	83 ec 0c             	sub    esp,0xc
c0017854:	68 00 00 00 40       	push   0x40000000
c0017859:	e8 e4 f4 ff ff       	call   c0016d42 <cpuidCheckECX(unsigned int)>
c001785e:	83 c4 10             	add    esp,0x10
c0017861:	83 e0 01             	and    eax,0x1
c0017864:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c001786b:	a0 8e c7 02 c0       	mov    al,ds:0xc002c78e
c0017870:	83 e0 fb             	and    eax,0xfffffffb
c0017873:	88 c2                	mov    dl,al
c0017875:	88 c8                	mov    al,cl
c0017877:	09 d0                	or     eax,edx
c0017879:	a2 8e c7 02 c0       	mov    ds:0xc002c78e,al
c001787e:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017883:	83 c8 04             	or     eax,0x4
c0017886:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c001788b:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017890:	83 c8 08             	or     eax,0x8
c0017893:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017898:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001789d:	83 c8 10             	or     eax,0x10
c00178a0:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00178a5:	83 ec 0c             	sub    esp,0xc
c00178a8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178ac:	50                   	push   eax
c00178ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00178b1:	50                   	push   eax
c00178b2:	8d 44 24 24          	lea    eax,[esp+0x24]
c00178b6:	50                   	push   eax
c00178b7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00178bb:	50                   	push   eax
c00178bc:	68 00 00 00 80       	push   0x80000000
c00178c1:	e8 b1 f3 ff ff       	call   c0016c77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178c6:	83 c4 20             	add    esp,0x20
c00178c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00178cd:	3d 00 00 00 80       	cmp    eax,0x80000000
c00178d2:	0f 86 96 01 00 00    	jbe    c0017a6e <HalDetectFeatures()+0xca2>
c00178d8:	83 ec 0c             	sub    esp,0xc
c00178db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00178df:	50                   	push   eax
c00178e0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00178e4:	50                   	push   eax
c00178e5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00178e9:	50                   	push   eax
c00178ea:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00178ee:	50                   	push   eax
c00178ef:	68 01 00 00 80       	push   0x80000001
c00178f4:	e8 7e f3 ff ff       	call   c0016c77 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00178f9:	83 c4 20             	add    esp,0x20
c00178fc:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017901:	83 e0 7f             	and    eax,0x7f
c0017904:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017909:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001790e:	83 e0 fb             	and    eax,0xfffffffb
c0017911:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017916:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c001791b:	83 e0 fd             	and    eax,0xfffffffd
c001791e:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017923:	e9 46 01 00 00       	jmp    c0017a6e <HalDetectFeatures()+0xca2>
c0017928:	83 ec 08             	sub    esp,0x8
c001792b:	68 2e 2d 02 c0       	push   0xc0022d2e
c0017930:	68 70 c7 02 c0       	push   0xc002c770
c0017935:	e8 06 8d fe ff       	call   c0000640 <strcpy>
c001793a:	83 c4 10             	add    esp,0x10
c001793d:	c7 05 84 c7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002c784,0x1
c0017947:	e8 77 88 fe ff       	call   c00001c3 <is486>
c001794c:	85 c0                	test   eax,eax
c001794e:	0f 95 c0             	setne  al
c0017951:	0f b6 c0             	movzx  eax,al
c0017954:	85 c0                	test   eax,eax
c0017956:	0f 84 8d 00 00 00    	je     c00179e9 <HalDetectFeatures()+0xc1d>
c001795c:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017961:	83 c8 04             	or     eax,0x4
c0017964:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017969:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001796e:	83 c8 08             	or     eax,0x8
c0017971:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017976:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c001797b:	83 c8 10             	or     eax,0x10
c001797e:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017983:	0f 20 c0             	mov    eax,cr0
c0017986:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001798a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001798e:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0017995:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001799c:	83 e0 04             	and    eax,0x4
c001799f:	74 1e                	je     c00179bf <HalDetectFeatures()+0xbf3>
c00179a1:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00179a8:	83 e0 10             	and    eax,0x10
c00179ab:	75 12                	jne    c00179bf <HalDetectFeatures()+0xbf3>
c00179ad:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179b2:	83 e0 f7             	and    eax,0xfffffff7
c00179b5:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179ba:	e9 af 00 00 00       	jmp    c0017a6e <HalDetectFeatures()+0xca2>
c00179bf:	e8 da 87 fe ff       	call   c000019e <hasLegacyFPU>
c00179c4:	83 e0 01             	and    eax,0x1
c00179c7:	83 e0 01             	and    eax,0x1
c00179ca:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00179d1:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00179d6:	83 e0 f7             	and    eax,0xfffffff7
c00179d9:	88 c2                	mov    dl,al
c00179db:	88 c8                	mov    al,cl
c00179dd:	09 d0                	or     eax,edx
c00179df:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c00179e4:	e9 85 00 00 00       	jmp    c0017a6e <HalDetectFeatures()+0xca2>
c00179e9:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179ee:	83 e0 fb             	and    eax,0xfffffffb
c00179f1:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c00179f6:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c00179fb:	83 e0 f7             	and    eax,0xfffffff7
c00179fe:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a03:	a0 8f c7 02 c0       	mov    al,ds:0xc002c78f
c0017a08:	83 e0 ef             	and    eax,0xffffffef
c0017a0b:	a2 8f c7 02 c0       	mov    ds:0xc002c78f,al
c0017a10:	0f 20 c0             	mov    eax,cr0
c0017a13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a17:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a1b:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0017a22:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017a29:	83 e0 04             	and    eax,0x4
c0017a2c:	74 1b                	je     c0017a49 <HalDetectFeatures()+0xc7d>
c0017a2e:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0017a35:	83 e0 10             	and    eax,0x10
c0017a38:	75 0f                	jne    c0017a49 <HalDetectFeatures()+0xc7d>
c0017a3a:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a3f:	83 e0 f7             	and    eax,0xfffffff7
c0017a42:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a47:	eb 25                	jmp    c0017a6e <HalDetectFeatures()+0xca2>
c0017a49:	e8 50 87 fe ff       	call   c000019e <hasLegacyFPU>
c0017a4e:	83 e0 01             	and    eax,0x1
c0017a51:	83 e0 01             	and    eax,0x1
c0017a54:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a5b:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a60:	83 e0 f7             	and    eax,0xfffffff7
c0017a63:	88 c2                	mov    dl,al
c0017a65:	88 c8                	mov    al,cl
c0017a67:	09 d0                	or     eax,edx
c0017a69:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017a6e:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a73:	83 e0 08             	and    eax,0x8
c0017a76:	0f b6 c0             	movzx  eax,al
c0017a79:	85 c0                	test   eax,eax
c0017a7b:	75 25                	jne    c0017aa2 <HalDetectFeatures()+0xcd6>
c0017a7d:	e8 1c 87 fe ff       	call   c000019e <hasLegacyFPU>
c0017a82:	83 e0 01             	and    eax,0x1
c0017a85:	83 e0 01             	and    eax,0x1
c0017a88:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017a8f:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017a94:	83 e0 f7             	and    eax,0xfffffff7
c0017a97:	88 c2                	mov    dl,al
c0017a99:	88 c8                	mov    al,cl
c0017a9b:	09 d0                	or     eax,edx
c0017a9d:	a2 90 c7 02 c0       	mov    ds:0xc002c790,al
c0017aa2:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c0017aa7:	83 e0 08             	and    eax,0x8
c0017aaa:	0f b6 c0             	movzx  eax,al
c0017aad:	85 c0                	test   eax,eax
c0017aaf:	74 0d                	je     c0017abe <HalDetectFeatures()+0xcf2>
c0017ab1:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ab6:	83 c8 10             	or     eax,0x10
c0017ab9:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017abe:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ac3:	83 e0 10             	and    eax,0x10
c0017ac6:	0f b6 c0             	movzx  eax,al
c0017ac9:	85 c0                	test   eax,eax
c0017acb:	75 23                	jne    c0017af0 <HalDetectFeatures()+0xd24>
c0017acd:	e8 84 7c 00 00       	call   c001f756 <x87Detect>
c0017ad2:	83 e0 01             	and    eax,0x1
c0017ad5:	83 e0 01             	and    eax,0x1
c0017ad8:	89 c1                	mov    ecx,eax
c0017ada:	c1 e1 04             	shl    ecx,0x4
c0017add:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ae2:	83 e0 ef             	and    eax,0xffffffef
c0017ae5:	88 c2                	mov    dl,al
c0017ae7:	88 c8                	mov    al,cl
c0017ae9:	09 d0                	or     eax,edx
c0017aeb:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017af0:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017af5:	83 e0 01             	and    eax,0x1
c0017af8:	0f b6 c0             	movzx  eax,al
c0017afb:	85 c0                	test   eax,eax
c0017afd:	75 2d                	jne    c0017b2c <HalDetectFeatures()+0xd60>
c0017aff:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b04:	83 e0 02             	and    eax,0x2
c0017b07:	0f b6 c0             	movzx  eax,al
c0017b0a:	85 c0                	test   eax,eax
c0017b0c:	75 1e                	jne    c0017b2c <HalDetectFeatures()+0xd60>
c0017b0e:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b13:	83 e0 04             	and    eax,0x4
c0017b16:	0f b6 c0             	movzx  eax,al
c0017b19:	85 c0                	test   eax,eax
c0017b1b:	75 0f                	jne    c0017b2c <HalDetectFeatures()+0xd60>
c0017b1d:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b22:	83 e0 08             	and    eax,0x8
c0017b25:	0f b6 c0             	movzx  eax,al
c0017b28:	85 c0                	test   eax,eax
c0017b2a:	74 0d                	je     c0017b39 <HalDetectFeatures()+0xd6d>
c0017b2c:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b31:	83 c8 80             	or     eax,0xffffff80
c0017b34:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b39:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b3e:	83 e0 10             	and    eax,0x10
c0017b41:	0f b6 c0             	movzx  eax,al
c0017b44:	85 c0                	test   eax,eax
c0017b46:	74 2f                	je     c0017b77 <HalDetectFeatures()+0xdab>
c0017b48:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b4d:	83 e0 80             	and    eax,0xffffff80
c0017b50:	0f b6 c0             	movzx  eax,al
c0017b53:	85 c0                	test   eax,eax
c0017b55:	75 20                	jne    c0017b77 <HalDetectFeatures()+0xdab>
c0017b57:	e8 b4 7b 00 00       	call   c001f710 <sseDetect>
c0017b5c:	83 e0 01             	and    eax,0x1
c0017b5f:	89 c1                	mov    ecx,eax
c0017b61:	c1 e1 07             	shl    ecx,0x7
c0017b64:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b69:	83 e0 7f             	and    eax,0x7f
c0017b6c:	88 c2                	mov    dl,al
c0017b6e:	88 c8                	mov    al,cl
c0017b70:	09 d0                	or     eax,edx
c0017b72:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017b77:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017b7c:	83 e0 80             	and    eax,0xffffff80
c0017b7f:	0f b6 c0             	movzx  eax,al
c0017b82:	85 c0                	test   eax,eax
c0017b84:	74 1c                	je     c0017ba2 <HalDetectFeatures()+0xdd6>
c0017b86:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b8b:	83 e0 20             	and    eax,0x20
c0017b8e:	0f b6 c0             	movzx  eax,al
c0017b91:	85 c0                	test   eax,eax
c0017b93:	75 0d                	jne    c0017ba2 <HalDetectFeatures()+0xdd6>
c0017b95:	a0 8d c7 02 c0       	mov    al,ds:0xc002c78d
c0017b9a:	83 e0 df             	and    eax,0xffffffdf
c0017b9d:	a2 8d c7 02 c0       	mov    ds:0xc002c78d,al
c0017ba2:	c6 05 88 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c788,0x0
c0017ba9:	90                   	nop
c0017baa:	81 c4 90 00 00 00    	add    esp,0x90
c0017bb0:	5b                   	pop    ebx
c0017bb1:	5e                   	pop    esi
c0017bb2:	5f                   	pop    edi
c0017bb3:	c3                   	ret    

c0017bb4 <HalEnableNMI()>:
c0017bb4:	c6 05 6c c7 02 c0 01 	mov    BYTE PTR ds:0xc002c76c,0x1
c0017bbb:	6a 10                	push   0x10
c0017bbd:	e8 05 ef ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0017bc2:	83 c4 04             	add    esp,0x4
c0017bc5:	90                   	nop
c0017bc6:	c3                   	ret    

c0017bc7 <HalDisableNMI()>:
c0017bc7:	c6 05 6c c7 02 c0 00 	mov    BYTE PTR ds:0xc002c76c,0x0
c0017bce:	6a 10                	push   0x10
c0017bd0:	e8 f2 ee ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0017bd5:	83 c4 04             	add    esp,0x4
c0017bd8:	90                   	nop
c0017bd9:	c3                   	ret    

c0017bda <HalGetNMIState()>:
c0017bda:	a0 6c c7 02 c0       	mov    al,ds:0xc002c76c
c0017bdf:	c3                   	ret    

c0017be0 <x86rdmsr(unsigned int)>:
c0017be0:	83 ec 1c             	sub    esp,0x1c
c0017be3:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017be8:	83 e0 08             	and    eax,0x8
c0017beb:	0f b6 c0             	movzx  eax,al
c0017bee:	85 c0                	test   eax,eax
c0017bf0:	75 10                	jne    c0017c02 <x86rdmsr(unsigned int)+0x22>
c0017bf2:	83 ec 0c             	sub    esp,0xc
c0017bf5:	68 c9 2d 02 c0       	push   0xc0022dc9
c0017bfa:	e8 d3 70 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0017bff:	83 c4 10             	add    esp,0x10
c0017c02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017c06:	89 c1                	mov    ecx,eax
c0017c08:	0f 32                	rdmsr  
c0017c0a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017c12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c16:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c1a:	83 c4 1c             	add    esp,0x1c
c0017c1d:	c3                   	ret    

c0017c1e <x86wrmsr(unsigned int, unsigned long long)>:
c0017c1e:	83 ec 1c             	sub    esp,0x1c
c0017c21:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017c29:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c2d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017c31:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c36:	83 e0 08             	and    eax,0x8
c0017c39:	0f b6 c0             	movzx  eax,al
c0017c3c:	85 c0                	test   eax,eax
c0017c3e:	75 10                	jne    c0017c50 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0017c40:	83 ec 0c             	sub    esp,0xc
c0017c43:	68 cf 2d 02 c0       	push   0xc0022dcf
c0017c48:	e8 85 70 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0017c4d:	83 c4 10             	add    esp,0x10
c0017c50:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0017c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017c58:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017c5c:	0f 30                	wrmsr  
c0017c5e:	90                   	nop
c0017c5f:	83 c4 1c             	add    esp,0x1c
c0017c62:	c3                   	ret    

c0017c63 <HalHandleGeneralProtectionFault(void*, void*)>:
c0017c63:	83 ec 0c             	sub    esp,0xc
c0017c66:	83 ec 0c             	sub    esp,0xc
c0017c69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017c6d:	e8 2b e7 ff ff       	call   c001639d <Vm::faultHandler(regs*)>
c0017c72:	83 c4 10             	add    esp,0x10
c0017c75:	83 c4 0c             	add    esp,0xc
c0017c78:	c3                   	ret    

c0017c79 <HalFindRSDP()>:
c0017c79:	83 ec 1c             	sub    esp,0x1c
c0017c7c:	a1 ac bd 02 c0       	mov    eax,ds:0xc002bdac
c0017c81:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017c86:	7e 0c                	jle    c0017c94 <HalFindRSDP()+0x1b>
c0017c88:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c0017c8d:	25 00 04 00 00       	and    eax,0x400
c0017c92:	74 0d                	je     c0017ca1 <HalFindRSDP()+0x28>
c0017c94:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017c99:	83 e0 fb             	and    eax,0xfffffffb
c0017c9c:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017ca1:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017ca6:	83 e0 04             	and    eax,0x4
c0017ca9:	0f b6 c0             	movzx  eax,al
c0017cac:	85 c0                	test   eax,eax
c0017cae:	75 07                	jne    c0017cb7 <HalFindRSDP()+0x3e>
c0017cb0:	b8 00 00 00 00       	mov    eax,0x0
c0017cb5:	eb 53                	jmp    c0017d0a <HalFindRSDP()+0x91>
c0017cb7:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017cbf:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0017cc7:	77 2f                	ja     c0017cf8 <HalFindRSDP()+0x7f>
c0017cc9:	83 ec 04             	sub    esp,0x4
c0017ccc:	6a 08                	push   0x8
c0017cce:	68 d5 2d 02 c0       	push   0xc0022dd5
c0017cd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017cd7:	e8 a4 86 fe ff       	call   c0000380 <memcmp>
c0017cdc:	83 c4 10             	add    esp,0x10
c0017cdf:	85 c0                	test   eax,eax
c0017ce1:	0f 94 c0             	sete   al
c0017ce4:	0f b6 c0             	movzx  eax,al
c0017ce7:	85 c0                	test   eax,eax
c0017ce9:	74 06                	je     c0017cf1 <HalFindRSDP()+0x78>
c0017ceb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017cef:	eb 19                	jmp    c0017d0a <HalFindRSDP()+0x91>
c0017cf1:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017cf6:	eb c7                	jmp    c0017cbf <HalFindRSDP()+0x46>
c0017cf8:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0017cfd:	83 e0 fb             	and    eax,0xfffffffb
c0017d00:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c0017d05:	b8 00 00 00 00       	mov    eax,0x0
c0017d0a:	83 c4 1c             	add    esp,0x1c
c0017d0d:	c3                   	ret    

c0017d0e <HalHandlePageFault(void*, void*)>:
c0017d0e:	83 ec 1c             	sub    esp,0x1c
c0017d11:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017d16:	8b 00                	mov    eax,DWORD PTR [eax]
c0017d18:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017d1b:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017d21:	0f 20 d2             	mov    edx,cr2
c0017d24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017d28:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017d2c:	83 ec 08             	sub    esp,0x8
c0017d2f:	52                   	push   edx
c0017d30:	50                   	push   eax
c0017d31:	e8 fc af ff ff       	call   c0012d32 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017d36:	83 c4 10             	add    esp,0x10
c0017d39:	83 c4 1c             	add    esp,0x1c
c0017d3c:	c3                   	ret    

c0017d3d <HalHandleOpcodeFault(void*, void*)>:
c0017d3d:	83 ec 1c             	sub    esp,0x1c
c0017d40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d48:	a0 88 c7 02 c0       	mov    al,ds:0xc002c788
c0017d4d:	0f b6 c0             	movzx  eax,al
c0017d50:	85 c0                	test   eax,eax
c0017d52:	74 25                	je     c0017d79 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0017d54:	83 ec 0c             	sub    esp,0xc
c0017d57:	68 cc 2f 02 c0       	push   0xc0022fcc
c0017d5c:	e8 03 f2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017d61:	83 c4 10             	add    esp,0x10
c0017d64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d68:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017d6b:	8d 50 19             	lea    edx,[eax+0x19]
c0017d6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d72:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0017d75:	b0 01                	mov    al,0x1
c0017d77:	eb 02                	jmp    c0017d7b <HalHandleOpcodeFault(void*, void*)+0x3e>
c0017d79:	b0 00                	mov    al,0x0
c0017d7b:	83 c4 1c             	add    esp,0x1c
c0017d7e:	c3                   	ret    

c0017d7f <HalDisplayDebugInfo(void*)>:
c0017d7f:	83 ec 2c             	sub    esp,0x2c
c0017d82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d86:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017d8a:	0f 20 c0             	mov    eax,cr0
c0017d8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017d91:	0f 20 d0             	mov    eax,cr2
c0017d94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d98:	0f 20 d8             	mov    eax,cr3
c0017d9b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d9f:	0f 20 e0             	mov    eax,cr4
c0017da2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017da6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017daa:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0017dad:	83 ec 08             	sub    esp,0x8
c0017db0:	50                   	push   eax
c0017db1:	68 ed 2d 02 c0       	push   0xc0022ded
c0017db6:	e8 a9 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017dbb:	83 c4 10             	add    esp,0x10
c0017dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dc2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0017dc5:	83 ec 08             	sub    esp,0x8
c0017dc8:	50                   	push   eax
c0017dc9:	68 de 2d 02 c0       	push   0xc0022dde
c0017dce:	e8 91 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017dd3:	83 c4 10             	add    esp,0x10
c0017dd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017dda:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0017ddd:	83 ec 08             	sub    esp,0x8
c0017de0:	50                   	push   eax
c0017de1:	68 e9 2d 02 c0       	push   0xc0022de9
c0017de6:	e8 79 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017deb:	83 c4 10             	add    esp,0x10
c0017dee:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017df2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017df5:	83 ec 08             	sub    esp,0x8
c0017df8:	50                   	push   eax
c0017df9:	68 f8 2d 02 c0       	push   0xc0022df8
c0017dfe:	e8 61 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e03:	83 c4 10             	add    esp,0x10
c0017e06:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e0a:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0017e0d:	83 ec 08             	sub    esp,0x8
c0017e10:	50                   	push   eax
c0017e11:	68 03 2e 02 c0       	push   0xc0022e03
c0017e16:	e8 49 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e1b:	83 c4 10             	add    esp,0x10
c0017e1e:	83 ec 08             	sub    esp,0x8
c0017e21:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017e25:	68 0e 2e 02 c0       	push   0xc0022e0e
c0017e2a:	e8 35 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e2f:	83 c4 10             	add    esp,0x10
c0017e32:	83 ec 08             	sub    esp,0x8
c0017e35:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017e39:	68 19 2e 02 c0       	push   0xc0022e19
c0017e3e:	e8 21 f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e43:	83 c4 10             	add    esp,0x10
c0017e46:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e4a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017e4d:	c1 e0 05             	shl    eax,0x5
c0017e50:	8d 90 20 42 02 c0    	lea    edx,[eax-0x3ffdbde0]
c0017e56:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017e5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0017e5d:	83 ec 04             	sub    esp,0x4
c0017e60:	52                   	push   edx
c0017e61:	50                   	push   eax
c0017e62:	68 24 2e 02 c0       	push   0xc0022e24
c0017e67:	e8 f8 f0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017e6c:	83 c4 10             	add    esp,0x10
c0017e6f:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e74:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e7a:	83 ec 0c             	sub    esp,0xc
c0017e7d:	50                   	push   eax
c0017e7e:	e8 92 92 ff ff       	call   c0011115 <setActiveTerminal(VgaText*)>
c0017e83:	83 c4 10             	add    esp,0x10
c0017e86:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017e8b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017e91:	83 ec 08             	sub    esp,0x8
c0017e94:	68 33 2e 02 c0       	push   0xc0022e33
c0017e99:	50                   	push   eax
c0017e9a:	e8 c3 95 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c0017e9f:	83 c4 10             	add    esp,0x10
c0017ea2:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ea7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ead:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017eb1:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0017eb4:	83 ec 08             	sub    esp,0x8
c0017eb7:	52                   	push   edx
c0017eb8:	50                   	push   eax
c0017eb9:	e8 5e 95 ff ff       	call   c001141c <VgaText::putx(unsigned int)>
c0017ebe:	83 c4 10             	add    esp,0x10
c0017ec1:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ec6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ecc:	83 ec 08             	sub    esp,0x8
c0017ecf:	68 41 2e 02 c0       	push   0xc0022e41
c0017ed4:	50                   	push   eax
c0017ed5:	e8 88 95 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c0017eda:	83 c4 10             	add    esp,0x10
c0017edd:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ee2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ee8:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0017eed:	8b 12                	mov    edx,DWORD PTR [edx]
c0017eef:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017ef2:	83 c2 0c             	add    edx,0xc
c0017ef5:	83 ec 08             	sub    esp,0x8
c0017ef8:	52                   	push   edx
c0017ef9:	50                   	push   eax
c0017efa:	e8 63 95 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c0017eff:	83 c4 10             	add    esp,0x10
c0017f02:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f07:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f0d:	83 ec 08             	sub    esp,0x8
c0017f10:	68 4a 2e 02 c0       	push   0xc0022e4a
c0017f15:	50                   	push   eax
c0017f16:	e8 47 95 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c0017f1b:	83 c4 10             	add    esp,0x10
c0017f1e:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f23:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f29:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f2d:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0017f30:	83 ec 08             	sub    esp,0x8
c0017f33:	52                   	push   edx
c0017f34:	50                   	push   eax
c0017f35:	e8 e2 94 ff ff       	call   c001141c <VgaText::putx(unsigned int)>
c0017f3a:	83 c4 10             	add    esp,0x10
c0017f3d:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f42:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f48:	83 ec 08             	sub    esp,0x8
c0017f4b:	68 52 2e 02 c0       	push   0xc0022e52
c0017f50:	50                   	push   eax
c0017f51:	e8 0c 95 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c0017f56:	83 c4 10             	add    esp,0x10
c0017f59:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f5e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f64:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017f68:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0017f6b:	83 ec 08             	sub    esp,0x8
c0017f6e:	52                   	push   edx
c0017f6f:	50                   	push   eax
c0017f70:	e8 a7 94 ff ff       	call   c001141c <VgaText::putx(unsigned int)>
c0017f75:	83 c4 10             	add    esp,0x10
c0017f78:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f83:	83 ec 08             	sub    esp,0x8
c0017f86:	68 5a 2e 02 c0       	push   0xc0022e5a
c0017f8b:	50                   	push   eax
c0017f8c:	e8 d1 94 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c0017f91:	83 c4 10             	add    esp,0x10
c0017f94:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017f99:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017f9f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fa3:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017fa6:	83 ec 08             	sub    esp,0x8
c0017fa9:	52                   	push   edx
c0017faa:	50                   	push   eax
c0017fab:	e8 6c 94 ff ff       	call   c001141c <VgaText::putx(unsigned int)>
c0017fb0:	83 c4 10             	add    esp,0x10
c0017fb3:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fb8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fbe:	83 ec 08             	sub    esp,0x8
c0017fc1:	68 62 2e 02 c0       	push   0xc0022e62
c0017fc6:	50                   	push   eax
c0017fc7:	e8 96 94 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c0017fcc:	83 c4 10             	add    esp,0x10
c0017fcf:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017fd4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017fda:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017fde:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0017fe1:	83 ec 08             	sub    esp,0x8
c0017fe4:	52                   	push   edx
c0017fe5:	50                   	push   eax
c0017fe6:	e8 31 94 ff ff       	call   c001141c <VgaText::putx(unsigned int)>
c0017feb:	83 c4 10             	add    esp,0x10
c0017fee:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0017ff3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017ff9:	83 ec 08             	sub    esp,0x8
c0017ffc:	68 6a 2e 02 c0       	push   0xc0022e6a
c0018001:	50                   	push   eax
c0018002:	e8 5b 94 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c0018007:	83 c4 10             	add    esp,0x10
c001800a:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001800f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018015:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018019:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001801c:	83 ec 08             	sub    esp,0x8
c001801f:	52                   	push   edx
c0018020:	50                   	push   eax
c0018021:	e8 f6 93 ff ff       	call   c001141c <VgaText::putx(unsigned int)>
c0018026:	83 c4 10             	add    esp,0x10
c0018029:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001802e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018034:	83 ec 08             	sub    esp,0x8
c0018037:	68 72 2e 02 c0       	push   0xc0022e72
c001803c:	50                   	push   eax
c001803d:	e8 20 94 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c0018042:	83 c4 10             	add    esp,0x10
c0018045:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001804a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018050:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018054:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0018057:	83 ec 08             	sub    esp,0x8
c001805a:	52                   	push   edx
c001805b:	50                   	push   eax
c001805c:	e8 bb 93 ff ff       	call   c001141c <VgaText::putx(unsigned int)>
c0018061:	83 c4 10             	add    esp,0x10
c0018064:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018069:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001806f:	83 ec 08             	sub    esp,0x8
c0018072:	68 7a 2e 02 c0       	push   0xc0022e7a
c0018077:	50                   	push   eax
c0018078:	e8 e5 93 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c001807d:	83 c4 10             	add    esp,0x10
c0018080:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0018085:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001808b:	83 ec 08             	sub    esp,0x8
c001808e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018092:	50                   	push   eax
c0018093:	e8 84 93 ff ff       	call   c001141c <VgaText::putx(unsigned int)>
c0018098:	83 c4 10             	add    esp,0x10
c001809b:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180a0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180a6:	83 ec 08             	sub    esp,0x8
c00180a9:	68 83 2e 02 c0       	push   0xc0022e83
c00180ae:	50                   	push   eax
c00180af:	e8 ae 93 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c00180b4:	83 c4 10             	add    esp,0x10
c00180b7:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180bc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180c2:	83 ec 08             	sub    esp,0x8
c00180c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00180c9:	50                   	push   eax
c00180ca:	e8 4d 93 ff ff       	call   c001141c <VgaText::putx(unsigned int)>
c00180cf:	83 c4 10             	add    esp,0x10
c00180d2:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180d7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180dd:	83 ec 08             	sub    esp,0x8
c00180e0:	68 8b 2e 02 c0       	push   0xc0022e8b
c00180e5:	50                   	push   eax
c00180e6:	e8 77 93 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c00180eb:	83 c4 10             	add    esp,0x10
c00180ee:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c00180f3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00180f9:	83 ec 08             	sub    esp,0x8
c00180fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018100:	50                   	push   eax
c0018101:	e8 16 93 ff ff       	call   c001141c <VgaText::putx(unsigned int)>
c0018106:	83 c4 10             	add    esp,0x10
c0018109:	fa                   	cli    
c001810a:	f4                   	hlt    
c001810b:	eb fe                	jmp    c001810b <HalDisplayDebugInfo(void*)+0x38c>

c001810d <HalReceivedNMI()>:
c001810d:	83 ec 1c             	sub    esp,0x1c
c0018110:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0018117:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001811b:	89 c2                	mov    edx,eax
c001811d:	ec                   	in     al,dx
c001811e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0018122:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0018126:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001812a:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0018131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018135:	89 c2                	mov    edx,eax
c0018137:	ec                   	in     al,dx
c0018138:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001813c:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0018140:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018144:	83 ec 0c             	sub    esp,0xc
c0018147:	68 93 2e 02 c0       	push   0xc0022e93
c001814c:	e8 13 ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018151:	83 c4 10             	add    esp,0x10
c0018154:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018159:	83 e0 10             	and    eax,0x10
c001815c:	74 10                	je     c001816e <HalReceivedNMI()+0x61>
c001815e:	83 ec 0c             	sub    esp,0xc
c0018161:	68 a4 2e 02 c0       	push   0xc0022ea4
c0018166:	e8 67 6b ff ff       	call   c000ecd2 <KePanic(char const*)>
c001816b:	83 c4 10             	add    esp,0x10
c001816e:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0018173:	83 e0 40             	and    eax,0x40
c0018176:	74 10                	je     c0018188 <HalReceivedNMI()+0x7b>
c0018178:	83 ec 0c             	sub    esp,0xc
c001817b:	68 b1 2e 02 c0       	push   0xc0022eb1
c0018180:	e8 4d 6b ff ff       	call   c000ecd2 <KePanic(char const*)>
c0018185:	83 c4 10             	add    esp,0x10
c0018188:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001818c:	0f be c0             	movsx  eax,al
c001818f:	85 c0                	test   eax,eax
c0018191:	79 10                	jns    c00181a3 <HalReceivedNMI()+0x96>
c0018193:	83 ec 0c             	sub    esp,0xc
c0018196:	68 bb 2e 02 c0       	push   0xc0022ebb
c001819b:	e8 32 6b ff ff       	call   c000ecd2 <KePanic(char const*)>
c00181a0:	83 c4 10             	add    esp,0x10
c00181a3:	90                   	nop
c00181a4:	83 c4 1c             	add    esp,0x1c
c00181a7:	c3                   	ret    

c00181a8 <HalSystemIdle()>:
c00181a8:	56                   	push   esi
c00181a9:	53                   	push   ebx
c00181aa:	83 ec 14             	sub    esp,0x14
c00181ad:	a0 90 c7 02 c0       	mov    al,ds:0xc002c790
c00181b2:	83 e0 10             	and    eax,0x10
c00181b5:	0f b6 c0             	movzx  eax,al
c00181b8:	85 c0                	test   eax,eax
c00181ba:	74 43                	je     c00181ff <HalSystemIdle()+0x57>
c00181bc:	83 ec 0c             	sub    esp,0xc
c00181bf:	68 e1 00 00 00       	push   0xe1
c00181c4:	e8 17 fa ff ff       	call   c0017be0 <x86rdmsr(unsigned int)>
c00181c9:	83 c4 10             	add    esp,0x10
c00181cc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00181d0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00181d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00181d8:	83 e0 02             	and    eax,0x2
c00181db:	89 c3                	mov    ebx,eax
c00181dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00181e1:	83 e0 00             	and    eax,0x0
c00181e4:	89 c6                	mov    esi,eax
c00181e6:	83 ec 04             	sub    esp,0x4
c00181e9:	56                   	push   esi
c00181ea:	53                   	push   ebx
c00181eb:	68 e1 00 00 00       	push   0xe1
c00181f0:	e8 29 fa ff ff       	call   c0017c1e <x86wrmsr(unsigned int, unsigned long long)>
c00181f5:	83 c4 10             	add    esp,0x10
c00181f8:	e8 97 7f fe ff       	call   c0000194 <doTPAUSE>
c00181fd:	eb 01                	jmp    c0018200 <HalSystemIdle()+0x58>
c00181ff:	f4                   	hlt    
c0018200:	90                   	nop
c0018201:	83 c4 14             	add    esp,0x14
c0018204:	5b                   	pop    ebx
c0018205:	5e                   	pop    esi
c0018206:	c3                   	ret    

c0018207 <i386SaveCoprocessor(void*)>:
c0018207:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001820b:	83 c0 3f             	add    eax,0x3f
c001820e:	83 e0 c0             	and    eax,0xffffffc0
c0018211:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018215:	ff 25 50 c7 02 c0    	jmp    DWORD PTR ds:0xc002c750

c001821b <i386LoadCoprocessor(void*)>:
c001821b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001821f:	83 c0 3f             	add    eax,0x3f
c0018222:	83 e0 c0             	and    eax,0xffffffc0
c0018225:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018229:	ff 25 4c c7 02 c0    	jmp    DWORD PTR ds:0xc002c74c

c001822f <x87EmulHandler(regs*, void*)>:
c001822f:	53                   	push   ebx
c0018230:	83 ec 08             	sub    esp,0x8
c0018233:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0018238:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001823c:	74 10                	je     c001824e <x87EmulHandler(regs*, void*)+0x1f>
c001823e:	83 ec 0c             	sub    esp,0xc
c0018241:	68 c8 2e 02 c0       	push   0xc0022ec8
c0018246:	e8 87 6a ff ff       	call   c000ecd2 <KePanic(char const*)>
c001824b:	83 c4 10             	add    esp,0x10
c001824e:	0f 20 c0             	mov    eax,cr0
c0018251:	a8 08                	test   al,0x8
c0018253:	74 59                	je     c00182ae <x87EmulHandler(regs*, void*)+0x7f>
c0018255:	0f 06                	clts   
c0018257:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c001825c:	85 c0                	test   eax,eax
c001825e:	74 0e                	je     c001826e <x87EmulHandler(regs*, void*)+0x3f>
c0018260:	83 ec 0c             	sub    esp,0xc
c0018263:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018266:	e8 9c ff ff ff       	call   c0018207 <i386SaveCoprocessor(void*)>
c001826b:	83 c4 10             	add    esp,0x10
c001826e:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0018274:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0018278:	75 12                	jne    c001828c <x87EmulHandler(regs*, void*)+0x5d>
c001827a:	83 ec 0c             	sub    esp,0xc
c001827d:	68 40 02 00 00       	push   0x240
c0018282:	e8 f4 66 ff ff       	call   c000e97b <malloc>
c0018287:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001828a:	eb 10                	jmp    c001829c <x87EmulHandler(regs*, void*)+0x6d>
c001828c:	83 ec 0c             	sub    esp,0xc
c001828f:	a1 48 c7 02 c0       	mov    eax,ds:0xc002c748
c0018294:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0018297:	e8 7f ff ff ff       	call   c001821b <i386LoadCoprocessor(void*)>
c001829c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00182a1:	83 c4 10             	add    esp,0x10
c00182a4:	a3 48 c7 02 c0       	mov    ds:0xc002c748,eax
c00182a9:	83 c4 08             	add    esp,0x8
c00182ac:	5b                   	pop    ebx
c00182ad:	c3                   	ret    
c00182ae:	83 ec 0c             	sub    esp,0xc
c00182b1:	68 dc 2e 02 c0       	push   0xc0022edc
c00182b6:	e8 a9 ec fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00182bb:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00182c3:	83 c4 18             	add    esp,0x18
c00182c6:	5b                   	pop    ebx
c00182c7:	e9 28 da ff ff       	jmp    c0015cf4 <Thr::terminateFromIRQ(int)>

c00182cc <HalInitialiseCoprocessor()>:
c00182cc:	83 ec 10             	sub    esp,0x10
c00182cf:	c7 05 48 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c748,0x0
c00182d9:	6a 00                	push   0x0
c00182db:	68 2f 82 01 c0       	push   0xc001822f
c00182e0:	6a 07                	push   0x7
c00182e2:	e8 9e 06 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00182e7:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c00182ec:	83 c4 10             	add    esp,0x10
c00182ef:	a8 80                	test   al,0x80
c00182f1:	74 1c                	je     c001830f <HalInitialiseCoprocessor()+0x43>
c00182f3:	c7 05 50 c7 02 c0 28 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f728
c00182fd:	c7 05 4c c7 02 c0 30 f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f730
c0018307:	83 c4 0c             	add    esp,0xc
c001830a:	e9 29 74 00 00       	jmp    c001f738 <sseInit>
c001830f:	a8 10                	test   al,0x10
c0018311:	74 1c                	je     c001832f <HalInitialiseCoprocessor()+0x63>
c0018313:	c7 05 50 c7 02 c0 77 f7 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc001f777
c001831d:	c7 05 4c c7 02 c0 7e f7 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc001f77e
c0018327:	83 c4 0c             	add    esp,0xc
c001832a:	e9 56 74 00 00       	jmp    c001f785 <x87Init>
c001832f:	c7 05 50 c7 02 c0 c2 6a 01 c0 	mov    DWORD PTR ds:0xc002c750,0xc0016ac2
c0018339:	c7 05 4c c7 02 c0 c2 6a 01 c0 	mov    DWORD PTR ds:0xc002c74c,0xc0016ac2
c0018343:	0f 20 c0             	mov    eax,cr0
c0018346:	83 c8 04             	or     eax,0x4
c0018349:	0f 22 c0             	mov    cr0,eax
c001834c:	83 c4 0c             	add    esp,0xc
c001834f:	c3                   	ret    

c0018350 <HalPanic(char const*)>:
c0018350:	53                   	push   ebx
c0018351:	83 ec 10             	sub    esp,0x10
c0018354:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018358:	fa                   	cli    
c0018359:	53                   	push   ebx
c001835a:	68 f2 2e 02 c0       	push   0xc0022ef2
c001835f:	e8 00 ec fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018364:	a1 44 c7 02 c0       	mov    eax,ds:0xc002c744
c0018369:	83 c4 10             	add    esp,0x10
c001836c:	85 c0                	test   eax,eax
c001836e:	74 09                	je     c0018379 <HalPanic(char const*)+0x29>
c0018370:	83 ec 0c             	sub    esp,0xc
c0018373:	53                   	push   ebx
c0018374:	ff d0                	call   eax
c0018376:	83 c4 10             	add    esp,0x10
c0018379:	a1 34 be 02 c0       	mov    eax,ds:0xc002be34
c001837e:	85 c0                	test   eax,eax
c0018380:	0f 84 dc 00 00 00    	je     c0018462 <HalPanic(char const*)+0x112>
c0018386:	52                   	push   edx
c0018387:	6a 01                	push   0x1
c0018389:	6a 0f                	push   0xf
c001838b:	50                   	push   eax
c001838c:	e8 df 8b ff ff       	call   c0010f70 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018391:	59                   	pop    ecx
c0018392:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018398:	e8 c3 8d ff ff       	call   c0011160 <VgaText::clearScreen()>
c001839d:	58                   	pop    eax
c001839e:	5a                   	pop    edx
c001839f:	68 5f 23 02 c0       	push   0xc002235f
c00183a4:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183aa:	e8 f9 8b ff ff       	call   c0010fa8 <VgaText::setTitle(char*)>
c00183af:	83 c4 0c             	add    esp,0xc
c00183b2:	6a 01                	push   0x1
c00183b4:	6a 0f                	push   0xf
c00183b6:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183bc:	e8 af 8b ff ff       	call   c0010f70 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00183c1:	59                   	pop    ecx
c00183c2:	58                   	pop    eax
c00183c3:	68 0b 2f 02 c0       	push   0xc0022f0b
c00183c8:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183ce:	e8 8f 90 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c00183d3:	83 c4 0c             	add    esp,0xc
c00183d6:	6a 0f                	push   0xf
c00183d8:	6a 01                	push   0x1
c00183da:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183e0:	e8 8b 8b ff ff       	call   c0010f70 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00183e5:	58                   	pop    eax
c00183e6:	5a                   	pop    edx
c00183e7:	68 14 2f 02 c0       	push   0xc0022f14
c00183ec:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c00183f2:	e8 6b 90 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c00183f7:	83 c4 0c             	add    esp,0xc
c00183fa:	6a 01                	push   0x1
c00183fc:	6a 0f                	push   0xf
c00183fe:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018404:	e8 67 8b ff ff       	call   c0010f70 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0018409:	59                   	pop    ecx
c001840a:	58                   	pop    eax
c001840b:	68 58 2f 02 c0       	push   0xc0022f58
c0018410:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018416:	e8 47 90 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c001841b:	58                   	pop    eax
c001841c:	5a                   	pop    edx
c001841d:	68 21 2f 02 c0       	push   0xc0022f21
c0018422:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018428:	e8 35 90 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c001842d:	59                   	pop    ecx
c001842e:	58                   	pop    eax
c001842f:	68 5b 2f 02 c0       	push   0xc0022f5b
c0018434:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001843a:	e8 23 90 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c001843f:	58                   	pop    eax
c0018440:	5a                   	pop    edx
c0018441:	53                   	push   ebx
c0018442:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c0018448:	e8 15 90 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c001844d:	59                   	pop    ecx
c001844e:	5b                   	pop    ebx
c001844f:	68 58 2f 02 c0       	push   0xc0022f58
c0018454:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001845a:	e8 03 90 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c001845f:	83 c4 10             	add    esp,0x10
c0018462:	eb fe                	jmp    c0018462 <HalPanic(char const*)+0x112>

c0018464 <HalQueryPerformanceCounter()>:
c0018464:	31 c0                	xor    eax,eax
c0018466:	31 d2                	xor    edx,edx
c0018468:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c001846f:	75 02                	jne    c0018473 <HalQueryPerformanceCounter()+0xf>
c0018471:	0f 31                	rdtsc  
c0018473:	c3                   	ret    

c0018474 <HalInitialise()>:
c0018474:	53                   	push   ebx
c0018475:	83 ec 08             	sub    esp,0x8
c0018478:	c6 05 40 c7 02 c0 00 	mov    BYTE PTR ds:0xc002c740,0x0
c001847f:	a0 8c c7 02 c0       	mov    al,ds:0xc002c78c
c0018484:	83 e0 fe             	and    eax,0xfffffffe
c0018487:	a2 8c c7 02 c0       	mov    ds:0xc002c78c,al
c001848c:	e8 d3 07 00 00       	call   c0018c64 <picOpen()>
c0018491:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c0018498:	74 0a                	je     c00184a4 <HalInitialise()+0x30>
c001849a:	e8 15 07 00 00       	call   c0018bb4 <picDisable()>
c001849f:	e8 5c 68 00 00       	call   c001ed00 <apicOpen()>
c00184a4:	bb 0f 00 00 00       	mov    ebx,0xf
c00184a9:	50                   	push   eax
c00184aa:	6a 00                	push   0x0
c00184ac:	68 34 e0 00 c0       	push   0xc000e034
c00184b1:	6a 00                	push   0x0
c00184b3:	e8 cd 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184b8:	83 c4 0c             	add    esp,0xc
c00184bb:	6a 00                	push   0x0
c00184bd:	68 34 e0 00 c0       	push   0xc000e034
c00184c2:	6a 01                	push   0x1
c00184c4:	e8 bc 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184c9:	83 c4 0c             	add    esp,0xc
c00184cc:	6a 00                	push   0x0
c00184ce:	68 24 e0 00 c0       	push   0xc000e024
c00184d3:	6a 02                	push   0x2
c00184d5:	e8 ab 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184da:	83 c4 0c             	add    esp,0xc
c00184dd:	6a 00                	push   0x0
c00184df:	68 34 e0 00 c0       	push   0xc000e034
c00184e4:	6a 03                	push   0x3
c00184e6:	e8 9a 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184eb:	83 c4 0c             	add    esp,0xc
c00184ee:	6a 00                	push   0x0
c00184f0:	68 34 e0 00 c0       	push   0xc000e034
c00184f5:	6a 04                	push   0x4
c00184f7:	e8 89 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00184fc:	83 c4 0c             	add    esp,0xc
c00184ff:	6a 00                	push   0x0
c0018501:	68 34 e0 00 c0       	push   0xc000e034
c0018506:	6a 05                	push   0x5
c0018508:	e8 78 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001850d:	83 c4 0c             	add    esp,0xc
c0018510:	6a 00                	push   0x0
c0018512:	68 68 e0 00 c0       	push   0xc000e068
c0018517:	6a 06                	push   0x6
c0018519:	e8 67 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001851e:	83 c4 0c             	add    esp,0xc
c0018521:	6a 00                	push   0x0
c0018523:	68 bc e0 00 c0       	push   0xc000e0bc
c0018528:	6a 08                	push   0x8
c001852a:	e8 56 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001852f:	83 c4 0c             	add    esp,0xc
c0018532:	6a 00                	push   0x0
c0018534:	68 34 e0 00 c0       	push   0xc000e034
c0018539:	6a 09                	push   0x9
c001853b:	e8 45 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018540:	83 c4 0c             	add    esp,0xc
c0018543:	6a 00                	push   0x0
c0018545:	68 34 e0 00 c0       	push   0xc000e034
c001854a:	6a 0a                	push   0xa
c001854c:	e8 34 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018551:	83 c4 0c             	add    esp,0xc
c0018554:	6a 00                	push   0x0
c0018556:	68 34 e0 00 c0       	push   0xc000e034
c001855b:	6a 0b                	push   0xb
c001855d:	e8 23 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018562:	83 c4 0c             	add    esp,0xc
c0018565:	6a 00                	push   0x0
c0018567:	68 7c df 00 c0       	push   0xc000df7c
c001856c:	6a 0d                	push   0xd
c001856e:	e8 12 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018573:	83 c4 0c             	add    esp,0xc
c0018576:	6a 00                	push   0x0
c0018578:	68 d0 df 00 c0       	push   0xc000dfd0
c001857d:	6a 0e                	push   0xe
c001857f:	e8 01 04 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018584:	83 c4 10             	add    esp,0x10
c0018587:	50                   	push   eax
c0018588:	6a 00                	push   0x0
c001858a:	68 34 e0 00 c0       	push   0xc000e034
c001858f:	53                   	push   ebx
c0018590:	43                   	inc    ebx
c0018591:	e8 ef 03 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0018596:	83 c4 10             	add    esp,0x10
c0018599:	83 fb 1e             	cmp    ebx,0x1e
c001859c:	75 e9                	jne    c0018587 <HalInitialise()+0x113>
c001859e:	50                   	push   eax
c001859f:	6a 00                	push   0x0
c00185a1:	68 fd 0d 01 c0       	push   0xc0010dfd
c00185a6:	6a 60                	push   0x60
c00185a8:	e8 d8 03 00 00       	call   c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00185ad:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00185b2:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00185bc:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00185c3:	e8 b3 63 ff ff       	call   c000e97b <malloc>
c00185c8:	89 04 24             	mov    DWORD PTR [esp],eax
c00185cb:	89 c3                	mov    ebx,eax
c00185cd:	e8 00 0e 00 00       	call   c00193d2 <RTC::RTC()>
c00185d2:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00185dc:	5a                   	pop    edx
c00185dd:	59                   	pop    ecx
c00185de:	53                   	push   ebx
c00185df:	ff 35 70 9d 02 c0    	push   DWORD PTR ds:0xc0029d70
c00185e5:	e8 54 0a ff ff       	call   c000903e <Device::addChild(Device*)>
c00185ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00185ec:	6a 00                	push   0x0
c00185ee:	6a 00                	push   0x0
c00185f0:	6a 00                	push   0x0
c00185f2:	53                   	push   ebx
c00185f3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00185f6:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c00185fb:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0018601:	83 c4 28             	add    esp,0x28
c0018604:	5b                   	pop    ebx
c0018605:	c3                   	ret    

c0018606 <HalMakeBeep(int)>:
c0018606:	53                   	push   ebx
c0018607:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001860b:	85 db                	test   ebx,ebx
c001860d:	75 07                	jne    c0018616 <HalMakeBeep(int)+0x10>
c001860f:	e4 61                	in     al,0x61
c0018611:	83 e0 fc             	and    eax,0xfffffffc
c0018614:	eb 26                	jmp    c001863c <HalMakeBeep(int)+0x36>
c0018616:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001861b:	99                   	cdq    
c001861c:	f7 fb                	idiv   ebx
c001861e:	89 c1                	mov    ecx,eax
c0018620:	b0 b6                	mov    al,0xb6
c0018622:	e6 43                	out    0x43,al
c0018624:	88 c8                	mov    al,cl
c0018626:	e6 42                	out    0x42,al
c0018628:	89 c8                	mov    eax,ecx
c001862a:	c1 e8 08             	shr    eax,0x8
c001862d:	e6 42                	out    0x42,al
c001862f:	e4 61                	in     al,0x61
c0018631:	89 c2                	mov    edx,eax
c0018633:	83 ca 03             	or     edx,0x3
c0018636:	38 d0                	cmp    al,dl
c0018638:	74 04                	je     c001863e <HalMakeBeep(int)+0x38>
c001863a:	88 d0                	mov    al,dl
c001863c:	e6 61                	out    0x61,al
c001863e:	5b                   	pop    ebx
c001863f:	c3                   	ret    

c0018640 <HalGetRand()>:
c0018640:	31 c0                	xor    eax,eax
c0018642:	c3                   	ret    

c0018643 <HalEndOfInterrupt(int)>:
c0018643:	80 3d 40 c7 02 c0 00 	cmp    BYTE PTR ds:0xc002c740,0x0
c001864a:	74 1d                	je     c0018669 <HalEndOfInterrupt(int)+0x26>
c001864c:	83 ec 18             	sub    esp,0x18
c001864f:	6a 1b                	push   0x1b
c0018651:	e8 8a f5 ff ff       	call   c0017be0 <x86rdmsr(unsigned int)>
c0018656:	25 00 f0 ff ff       	and    eax,0xfffff000
c001865b:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0018665:	83 c4 1c             	add    esp,0x1c
c0018668:	c3                   	ret    
c0018669:	e9 7a 07 00 00       	jmp    c0018de8 <picEOI(int)>

c001866e <HalRestart()>:
c001866e:	c3                   	ret    

c001866f <HalShutdown()>:
c001866f:	c3                   	ret    

c0018670 <HalSleep()>:
c0018670:	c3                   	ret    
c0018671:	90                   	nop

c0018672 <CPU::CPU()>:
c0018672:	83 ec 0c             	sub    esp,0xc
c0018675:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018679:	83 ec 08             	sub    esp,0x8
c001867c:	68 1d 2d 02 c0       	push   0xc0022d1d
c0018681:	50                   	push   eax
c0018682:	e8 19 0b ff ff       	call   c00091a0 <Device::Device(char const*)>
c0018687:	83 c4 10             	add    esp,0x10
c001868a:	ba f8 2f 02 c0       	mov    edx,0xc0022ff8
c001868f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018693:	89 10                	mov    DWORD PTR [eax],edx
c0018695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018699:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00186a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186a7:	05 64 01 00 00       	add    eax,0x164
c00186ac:	83 ec 0c             	sub    esp,0xc
c00186af:	50                   	push   eax
c00186b0:	e8 5b 5a ff ff       	call   c000e110 <GDT::GDT()>
c00186b5:	83 c4 10             	add    esp,0x10
c00186b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186bc:	05 68 09 00 00       	add    eax,0x968
c00186c1:	83 ec 0c             	sub    esp,0xc
c00186c4:	50                   	push   eax
c00186c5:	e8 96 5c ff ff       	call   c000e360 <IDT::IDT()>
c00186ca:	83 c4 10             	add    esp,0x10
c00186cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186d1:	05 68 11 00 00       	add    eax,0x1168
c00186d6:	83 ec 0c             	sub    esp,0xc
c00186d9:	50                   	push   eax
c00186da:	e8 21 92 ff ff       	call   c0011900 <TSS::TSS()>
c00186df:	83 c4 10             	add    esp,0x10
c00186e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186e6:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00186f0:	90                   	nop
c00186f1:	83 c4 0c             	add    esp,0xc
c00186f4:	c3                   	ret    
c00186f5:	90                   	nop

c00186f6 <CPU::setupSMEP()>:
c00186f6:	0f 20 e0             	mov    eax,cr4
c00186f9:	0d 00 00 10 00       	or     eax,0x100000
c00186fe:	0f 22 e0             	mov    cr4,eax
c0018701:	c3                   	ret    

c0018702 <CPU::setupUMIP()>:
c0018702:	0f 20 e0             	mov    eax,cr4
c0018705:	80 cc 08             	or     ah,0x8
c0018708:	0f 22 e0             	mov    cr4,eax
c001870b:	c3                   	ret    

c001870c <CPU::setupTSC()>:
c001870c:	0f 20 e0             	mov    eax,cr4
c001870f:	83 c8 04             	or     eax,0x4
c0018712:	0f 22 e0             	mov    cr4,eax
c0018715:	c3                   	ret    

c0018716 <CPU::setupLargePages()>:
c0018716:	0f 20 e0             	mov    eax,cr4
c0018719:	83 c8 10             	or     eax,0x10
c001871c:	0f 22 e0             	mov    cr4,eax
c001871f:	c3                   	ret    

c0018720 <CPU::setupPAT()>:
c0018720:	f6 05 8c c7 02 c0 08 	test   BYTE PTR ds:0xc002c78c,0x8
c0018727:	74 28                	je     c0018751 <CPU::setupPAT()+0x31>
c0018729:	53                   	push   ebx
c001872a:	83 ec 14             	sub    esp,0x14
c001872d:	68 77 02 00 00       	push   0x277
c0018732:	e8 a9 f4 ff ff       	call   c0017be0 <x86rdmsr(unsigned int)>
c0018737:	83 c4 0c             	add    esp,0xc
c001873a:	83 e2 f8             	and    edx,0xfffffff8
c001873d:	83 ca 01             	or     edx,0x1
c0018740:	52                   	push   edx
c0018741:	50                   	push   eax
c0018742:	68 77 02 00 00       	push   0x277
c0018747:	e8 d2 f4 ff ff       	call   c0017c1e <x86wrmsr(unsigned int, unsigned long long)>
c001874c:	83 c4 18             	add    esp,0x18
c001874f:	5b                   	pop    ebx
c0018750:	c3                   	ret    
c0018751:	c3                   	ret    

c0018752 <CPU::setupMTRR()>:
c0018752:	c3                   	ret    
c0018753:	90                   	nop

c0018754 <CPU::setupGlobalPages()>:
c0018754:	0f 20 e0             	mov    eax,cr4
c0018757:	0c 80                	or     al,0x80
c0018759:	0f 22 e0             	mov    cr4,eax
c001875c:	c3                   	ret    
c001875d:	90                   	nop

c001875e <CPU::allowUsermodeDataAccess()>:
c001875e:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c0018765:	74 03                	je     c001876a <CPU::allowUsermodeDataAccess()+0xc>
c0018767:	0f 01 cb             	stac   
c001876a:	c3                   	ret    
c001876b:	90                   	nop

c001876c <CPU::prohibitUsermodeDataAccess()>:
c001876c:	f6 05 8f c7 02 c0 40 	test   BYTE PTR ds:0xc002c78f,0x40
c0018773:	74 03                	je     c0018778 <CPU::prohibitUsermodeDataAccess()+0xc>
c0018775:	0f 01 ca             	clac   
c0018778:	c3                   	ret    
c0018779:	90                   	nop

c001877a <CPU::setupSMAP()>:
c001877a:	0f 20 e0             	mov    eax,cr4
c001877d:	0d 00 00 20 00       	or     eax,0x200000
c0018782:	0f 22 e0             	mov    cr4,eax
c0018785:	eb e5                	jmp    c001876c <CPU::prohibitUsermodeDataAccess()>
c0018787:	90                   	nop

c0018788 <CPU::setupFeatures()>:
c0018788:	53                   	push   ebx
c0018789:	83 ec 08             	sub    esp,0x8
c001878c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018790:	f6 05 8f c7 02 c0 20 	test   BYTE PTR ds:0xc002c78f,0x20
c0018797:	74 18                	je     c00187b1 <CPU::setupFeatures()+0x29>
c0018799:	83 ec 0c             	sub    esp,0xc
c001879c:	68 66 2f 02 c0       	push   0xc0022f66
c00187a1:	e8 be e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00187a6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187a9:	e8 54 ff ff ff       	call   c0018702 <CPU::setupUMIP()>
c00187ae:	83 c4 10             	add    esp,0x10
c00187b1:	f6 05 8e c7 02 c0 08 	test   BYTE PTR ds:0xc002c78e,0x8
c00187b8:	74 18                	je     c00187d2 <CPU::setupFeatures()+0x4a>
c00187ba:	83 ec 0c             	sub    esp,0xc
c00187bd:	68 70 2f 02 c0       	push   0xc0022f70
c00187c2:	e8 9d e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00187c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187ca:	e8 3d ff ff ff       	call   c001870c <CPU::setupTSC()>
c00187cf:	83 c4 10             	add    esp,0x10
c00187d2:	f6 05 8e c7 02 c0 20 	test   BYTE PTR ds:0xc002c78e,0x20
c00187d9:	74 18                	je     c00187f3 <CPU::setupFeatures()+0x6b>
c00187db:	83 ec 0c             	sub    esp,0xc
c00187de:	68 79 2f 02 c0       	push   0xc0022f79
c00187e3:	e8 7c e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00187e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00187eb:	e8 26 ff ff ff       	call   c0018716 <CPU::setupLargePages()>
c00187f0:	83 c4 10             	add    esp,0x10
c00187f3:	f6 05 8e c7 02 c0 40 	test   BYTE PTR ds:0xc002c78e,0x40
c00187fa:	74 18                	je     c0018814 <CPU::setupFeatures()+0x8c>
c00187fc:	83 ec 0c             	sub    esp,0xc
c00187ff:	68 82 2f 02 c0       	push   0xc0022f82
c0018804:	e8 5b e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018809:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001880c:	e8 43 ff ff ff       	call   c0018754 <CPU::setupGlobalPages()>
c0018811:	83 c4 10             	add    esp,0x10
c0018814:	f6 05 8e c7 02 c0 80 	test   BYTE PTR ds:0xc002c78e,0x80
c001881b:	74 18                	je     c0018835 <CPU::setupFeatures()+0xad>
c001881d:	83 ec 0c             	sub    esp,0xc
c0018820:	68 94 2f 02 c0       	push   0xc0022f94
c0018825:	e8 3a e7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001882a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001882d:	e8 ee fe ff ff       	call   c0018720 <CPU::setupPAT()>
c0018832:	83 c4 10             	add    esp,0x10
c0018835:	f6 05 90 c7 02 c0 04 	test   BYTE PTR ds:0xc002c790,0x4
c001883c:	74 11                	je     c001884f <CPU::setupFeatures()+0xc7>
c001883e:	c7 44 24 10 9d 2f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022f9d
c0018846:	83 c4 08             	add    esp,0x8
c0018849:	5b                   	pop    ebx
c001884a:	e9 15 e7 fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c001884f:	83 c4 08             	add    esp,0x8
c0018852:	5b                   	pop    ebx
c0018853:	c3                   	ret    

c0018854 <CPU::open(int, int, void*)>:
c0018854:	55                   	push   ebp
c0018855:	57                   	push   edi
c0018856:	56                   	push   esi
c0018857:	53                   	push   ebx
c0018858:	83 ec 18             	sub    esp,0x18
c001885b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001885f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018863:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0018867:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001886d:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0018873:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c0018879:	50                   	push   eax
c001887a:	e8 f3 58 ff ff       	call   c000e172 <GDT::setup()>
c001887f:	83 c4 0c             	add    esp,0xc
c0018882:	6a 00                	push   0x0
c0018884:	68 ef be ad de       	push   0xdeadbeef
c0018889:	55                   	push   ebp
c001888a:	e8 b5 90 ff ff       	call   c0011944 <TSS::setup(unsigned long, unsigned long)>
c001888f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0018892:	e8 8d 90 ff ff       	call   c0011924 <TSS::flush()>
c0018897:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001889d:	89 04 24             	mov    DWORD PTR [esp],eax
c00188a0:	e8 31 5b ff ff       	call   c000e3d6 <IDT::setup()>
c00188a5:	b8 00 04 00 00       	mov    eax,0x400
c00188aa:	0f 23 f8             	mov    dr7,eax
c00188ad:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c00188b7:	e8 0a 66 ff ff       	call   c000eec6 <Phys::allocatePage()>
c00188bc:	83 c4 10             	add    esp,0x10
c00188bf:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c00188c5:	85 f6                	test   esi,esi
c00188c7:	89 38                	mov    DWORD PTR [eax],edi
c00188c9:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00188cf:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00188d2:	74 10                	je     c00188e4 <CPU::open(int, int, void*)+0x90>
c00188d4:	50                   	push   eax
c00188d5:	50                   	push   eax
c00188d6:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00188dc:	56                   	push   esi
c00188dd:	e8 0a 9a ff ff       	call   c00122ec <VAS::setCPUSpecific(unsigned long)>
c00188e2:	eb 0d                	jmp    c00188f1 <CPU::open(int, int, void*)+0x9d>
c00188e4:	83 ec 0c             	sub    esp,0xc
c00188e7:	68 a7 2f 02 c0       	push   0xc0022fa7
c00188ec:	e8 e1 63 ff ff       	call   c000ecd2 <KePanic(char const*)>
c00188f1:	83 c4 10             	add    esp,0x10
c00188f4:	83 ec 0c             	sub    esp,0xc
c00188f7:	68 b5 2f 02 c0       	push   0xc0022fb5
c00188fc:	e8 47 3d ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c0018901:	e8 6e fb ff ff       	call   c0018474 <HalInitialise()>
c0018906:	a1 90 bd 02 c0       	mov    eax,ds:0xc002bd90
c001890b:	83 e0 10             	and    eax,0x10
c001890e:	83 f8 01             	cmp    eax,0x1
c0018911:	19 c0                	sbb    eax,eax
c0018913:	83 e0 46             	and    eax,0x46
c0018916:	83 c0 1e             	add    eax,0x1e
c0018919:	89 04 24             	mov    DWORD PTR [esp],eax
c001891c:	e8 00 1e ff ff       	call   c000a721 <setupTimer(int)>
c0018921:	83 c4 10             	add    esp,0x10
c0018924:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001892a:	f6 05 90 bd 02 c0 20 	test   BYTE PTR ds:0xc002bd90,0x20
c0018931:	74 0c                	je     c001893f <CPU::open(int, int, void*)+0xeb>
c0018933:	83 ec 0c             	sub    esp,0xc
c0018936:	53                   	push   ebx
c0018937:	e8 4c fe ff ff       	call   c0018788 <CPU::setupFeatures()>
c001893c:	83 c4 10             	add    esp,0x10
c001893f:	83 c4 0c             	add    esp,0xc
c0018942:	31 c0                	xor    eax,eax
c0018944:	5b                   	pop    ebx
c0018945:	5e                   	pop    esi
c0018946:	5f                   	pop    edi
c0018947:	5d                   	pop    ebp
c0018948:	c3                   	ret    

c0018949 <convertLegacyIRQNumber(int)>:
c0018949:	83 ec 0c             	sub    esp,0xc
c001894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018950:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018957:	74 0c                	je     c0018965 <convertLegacyIRQNumber(int)+0x1c>
c0018959:	83 f8 0f             	cmp    eax,0xf
c001895c:	7f 0b                	jg     c0018969 <convertLegacyIRQNumber(int)+0x20>
c001895e:	0f b6 80 a8 3a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc558]
c0018965:	83 c4 0c             	add    esp,0xc
c0018968:	c3                   	ret    
c0018969:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001896d:	83 ec 0c             	sub    esp,0xc
c0018970:	68 1c 30 02 c0       	push   0xc002301c
c0018975:	e8 58 63 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001897a:	83 c4 10             	add    esp,0x10
c001897d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018981:	83 c4 0c             	add    esp,0xc
c0018984:	c3                   	ret    

c0018985 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0018985:	56                   	push   esi
c0018986:	31 c0                	xor    eax,eax
c0018988:	53                   	push   ebx
c0018989:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001898d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018991:	89 ca                	mov    edx,ecx
c0018993:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0018997:	c1 e2 04             	shl    edx,0x4
c001899a:	83 bc 82 80 ad 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd5280],0x0
c00189a2:	74 17                	je     c00189bb <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c00189a4:	83 c0 01             	add    eax,0x1
c00189a7:	83 f8 04             	cmp    eax,0x4
c00189aa:	75 ee                	jne    c001899a <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c00189ac:	c7 44 24 0c 7d 30 02 c0 	mov    DWORD PTR [esp+0xc],0xc002307d
c00189b4:	5b                   	pop    ebx
c00189b5:	5e                   	pop    esi
c00189b6:	e9 17 63 ff ff       	jmp    c000ecd2 <KePanic(char const*)>
c00189bb:	8d 04 88             	lea    eax,[eax+ecx*4]
c00189be:	89 1c 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],ebx
c00189c5:	89 34 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],esi
c00189cc:	5b                   	pop    ebx
c00189cd:	5e                   	pop    esi
c00189ce:	c3                   	ret    

c00189cf <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00189cf:	57                   	push   edi
c00189d0:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c00189d7:	56                   	push   esi
c00189d8:	53                   	push   ebx
c00189d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00189dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00189e1:	74 54                	je     c0018a37 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c00189e3:	89 c7                	mov    edi,eax
c00189e5:	84 c0                	test   al,al
c00189e7:	74 1d                	je     c0018a06 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c00189e9:	83 fe 0f             	cmp    esi,0xf
c00189ec:	0f 8f d5 00 00 00    	jg     c0018ac7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c00189f2:	0f b6 b6 a8 3a 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdc558]
c00189f9:	0f b7 bc 36 c0 9a 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd6540]
c0018a01:	d1 ef                	shr    edi,1
c0018a03:	83 e7 01             	and    edi,0x1
c0018a06:	83 ec 08             	sub    esp,0x8
c0018a09:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018a0e:	31 db                	xor    ebx,ebx
c0018a10:	50                   	push   eax
c0018a11:	68 8a 30 02 c0       	push   0xc002308a
c0018a16:	e8 49 e5 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018a1b:	83 c4 10             	add    esp,0x10
c0018a1e:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c0018a23:	85 c0                	test   eax,eax
c0018a25:	7f 55                	jg     c0018a7c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c0018a27:	83 ec 0c             	sub    esp,0xc
c0018a2a:	68 a1 30 02 c0       	push   0xc00230a1
c0018a2f:	e8 9e 62 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0018a34:	83 c4 10             	add    esp,0x10
c0018a37:	8d 7e 20             	lea    edi,[esi+0x20]
c0018a3a:	89 f8                	mov    eax,edi
c0018a3c:	31 d2                	xor    edx,edx
c0018a3e:	c1 e0 04             	shl    eax,0x4
c0018a41:	8b 8c 90 80 ad 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd5280]
c0018a48:	85 c9                	test   ecx,ecx
c0018a4a:	0f 84 8e 00 00 00    	je     c0018ade <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c0018a50:	83 c2 01             	add    edx,0x1
c0018a53:	83 fa 04             	cmp    edx,0x4
c0018a56:	75 e9                	jne    c0018a41 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0018a58:	83 ec 0c             	sub    esp,0xc
c0018a5b:	68 58 30 02 c0       	push   0xc0023058
c0018a60:	e8 6d 62 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0018a65:	83 c4 10             	add    esp,0x10
c0018a68:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0018a6d:	5b                   	pop    ebx
c0018a6e:	5e                   	pop    esi
c0018a6f:	5f                   	pop    edi
c0018a70:	c3                   	ret    
c0018a71:	83 c3 01             	add    ebx,0x1
c0018a74:	39 1d e0 d0 02 c0    	cmp    DWORD PTR ds:0xc002d0e0,ebx
c0018a7a:	7e ab                	jle    c0018a27 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c0018a7c:	83 ec 08             	sub    esp,0x8
c0018a7f:	8b 04 9d 00 d1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd2f00]
c0018a86:	56                   	push   esi
c0018a87:	50                   	push   eax
c0018a88:	e8 ff 63 00 00       	call   c001ee8c <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0018a8d:	83 c4 10             	add    esp,0x10
c0018a90:	84 c0                	test   al,al
c0018a92:	74 dd                	je     c0018a71 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c0018a94:	83 ec 04             	sub    esp,0x4
c0018a97:	89 f8                	mov    eax,edi
c0018a99:	8b 1c 9d 00 d1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd2f00]
c0018aa0:	0f b6 f8             	movzx  edi,al
c0018aa3:	57                   	push   edi
c0018aa4:	8d 7e 20             	lea    edi,[esi+0x20]
c0018aa7:	6a 00                	push   0x0
c0018aa9:	89 f8                	mov    eax,edi
c0018aab:	0f b6 c0             	movzx  eax,al
c0018aae:	50                   	push   eax
c0018aaf:	89 f0                	mov    eax,esi
c0018ab1:	6a 00                	push   0x0
c0018ab3:	0f b6 c0             	movzx  eax,al
c0018ab6:	6a 00                	push   0x0
c0018ab8:	50                   	push   eax
c0018ab9:	53                   	push   ebx
c0018aba:	e8 39 65 00 00       	call   c001eff8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0018abf:	83 c4 20             	add    esp,0x20
c0018ac2:	e9 73 ff ff ff       	jmp    c0018a3a <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c0018ac7:	83 ec 0c             	sub    esp,0xc
c0018aca:	31 ff                	xor    edi,edi
c0018acc:	68 1c 30 02 c0       	push   0xc002301c
c0018ad1:	e8 fc 61 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0018ad6:	83 c4 10             	add    esp,0x10
c0018ad9:	e9 28 ff ff ff       	jmp    c0018a06 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c0018ade:	8d 04 ba             	lea    eax,[edx+edi*4]
c0018ae1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018ae5:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c0018aec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018af0:	5b                   	pop    ebx
c0018af1:	89 14 85 80 9d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6280],edx
c0018af8:	89 f0                	mov    eax,esi
c0018afa:	5e                   	pop    esi
c0018afb:	5f                   	pop    edi
c0018afc:	c3                   	ret    

c0018afd <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c0018afd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018b01:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0018b05:	c1 e0 04             	shl    eax,0x4
c0018b08:	8d 50 10             	lea    edx,[eax+0x10]
c0018b0b:	39 88 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ecx
c0018b11:	74 08                	je     c0018b1b <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c0018b13:	83 c0 04             	add    eax,0x4
c0018b16:	39 d0                	cmp    eax,edx
c0018b18:	75 f1                	jne    c0018b0b <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c0018b1a:	c3                   	ret    
c0018b1b:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018b25:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018b2f:	eb e2                	jmp    c0018b13 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c0018b31 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0018b31:	53                   	push   ebx
c0018b32:	83 ec 08             	sub    esp,0x8
c0018b35:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0018b39:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018b3e:	74 09                	je     c0018b49 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018b40:	f6 05 8c c7 02 c0 01 	test   BYTE PTR ds:0xc002c78c,0x1
c0018b47:	75 37                	jne    c0018b80 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c0018b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b4d:	83 c0 20             	add    eax,0x20
c0018b50:	c1 e0 04             	shl    eax,0x4
c0018b53:	8d 50 10             	lea    edx,[eax+0x10]
c0018b56:	39 98 80 ad 02 c0    	cmp    DWORD PTR [eax-0x3ffd5280],ebx
c0018b5c:	74 0c                	je     c0018b6a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c0018b5e:	83 c0 04             	add    eax,0x4
c0018b61:	39 d0                	cmp    eax,edx
c0018b63:	75 f1                	jne    c0018b56 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c0018b65:	83 c4 08             	add    esp,0x8
c0018b68:	5b                   	pop    ebx
c0018b69:	c3                   	ret    
c0018b6a:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0018b74:	c7 80 80 9d 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd6280],0x0
c0018b7e:	eb de                	jmp    c0018b5e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c0018b80:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c0018b85:	7f 11                	jg     c0018b98 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c0018b87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b8b:	0f b6 80 a8 3a 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdc558]
c0018b92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018b96:	eb b1                	jmp    c0018b49 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018b98:	83 ec 0c             	sub    esp,0xc
c0018b9b:	68 ae 30 02 c0       	push   0xc00230ae
c0018ba0:	e8 2d 61 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0018ba5:	83 c4 10             	add    esp,0x10
c0018ba8:	eb 9f                	jmp    c0018b49 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0018baa:	66 90                	xchg   ax,ax

c0018bac <picIoWait()>:
c0018bac:	eb 00                	jmp    c0018bae <picIoWait()+0x2>
c0018bae:	eb 00                	jmp    c0018bb0 <picIoWait()+0x4>
c0018bb0:	90                   	nop
c0018bb1:	c3                   	ret    
c0018bb2:	66 90                	xchg   ax,ax

c0018bb4 <picDisable()>:
c0018bb4:	83 ec 10             	sub    esp,0x10
c0018bb7:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0018bbe:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0018bc3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018bc7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018bcc:	ee                   	out    dx,al
c0018bcd:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0018bd4:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0018bd9:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018bdd:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0018be2:	ee                   	out    dx,al
c0018be3:	90                   	nop
c0018be4:	83 c4 10             	add    esp,0x10
c0018be7:	c3                   	ret    

c0018be8 <picGetIRQReg(int)>:
c0018be8:	83 ec 10             	sub    esp,0x10
c0018beb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018bef:	0f b6 c0             	movzx  eax,al
c0018bf2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018bf9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0018bfd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018c01:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018c06:	ee                   	out    dx,al
c0018c07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018c0b:	0f b6 c0             	movzx  eax,al
c0018c0e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018c15:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018c19:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018c1d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018c22:	ee                   	out    dx,al
c0018c23:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0018c2a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0018c2f:	89 c2                	mov    edx,eax
c0018c31:	ec                   	in     al,dx
c0018c32:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018c36:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018c3a:	0f b6 c0             	movzx  eax,al
c0018c3d:	c1 e0 08             	shl    eax,0x8
c0018c40:	89 c1                	mov    ecx,eax
c0018c42:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0018c49:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0018c4e:	89 c2                	mov    edx,eax
c0018c50:	ec                   	in     al,dx
c0018c51:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018c55:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018c59:	0f b6 c0             	movzx  eax,al
c0018c5c:	09 c8                	or     eax,ecx
c0018c5e:	83 c4 10             	add    esp,0x10
c0018c61:	c3                   	ret    
c0018c62:	66 90                	xchg   ax,ax

c0018c64 <picOpen()>:
c0018c64:	83 ec 50             	sub    esp,0x50
c0018c67:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0018c6e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0018c73:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018c77:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018c7b:	ee                   	out    dx,al
c0018c7c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0018c83:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018c88:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0018c8c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0018c90:	ee                   	out    dx,al
c0018c91:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0018c99:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0018ca1:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0018ca8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cac:	89 c2                	mov    edx,eax
c0018cae:	ec                   	in     al,dx
c0018caf:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0018cb3:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0018cb7:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0018cbb:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0018cc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018cc6:	89 c2                	mov    edx,eax
c0018cc8:	ec                   	in     al,dx
c0018cc9:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0018ccd:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0018cd1:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0018cd5:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0018cdc:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0018ce1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0018ce5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018ce9:	ee                   	out    dx,al
c0018cea:	e8 bd fe ff ff       	call   c0018bac <picIoWait()>
c0018cef:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0018cf6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0018cfb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0018cff:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d03:	ee                   	out    dx,al
c0018d04:	e8 a3 fe ff ff       	call   c0018bac <picIoWait()>
c0018d09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0018d0d:	0f b6 c0             	movzx  eax,al
c0018d10:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0018d17:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0018d1b:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0018d1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018d23:	ee                   	out    dx,al
c0018d24:	e8 83 fe ff ff       	call   c0018bac <picIoWait()>
c0018d29:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018d2d:	0f b6 c0             	movzx  eax,al
c0018d30:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0018d37:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0018d3b:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0018d3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018d43:	ee                   	out    dx,al
c0018d44:	e8 63 fe ff ff       	call   c0018bac <picIoWait()>
c0018d49:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0018d50:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0018d55:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0018d59:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018d5d:	ee                   	out    dx,al
c0018d5e:	e8 49 fe ff ff       	call   c0018bac <picIoWait()>
c0018d63:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0018d6a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0018d6f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0018d73:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018d77:	ee                   	out    dx,al
c0018d78:	e8 2f fe ff ff       	call   c0018bac <picIoWait()>
c0018d7d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0018d84:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018d89:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018d8d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018d91:	ee                   	out    dx,al
c0018d92:	e8 15 fe ff ff       	call   c0018bac <picIoWait()>
c0018d97:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018d9e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0018da3:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0018da7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018dab:	ee                   	out    dx,al
c0018dac:	e8 fb fd ff ff       	call   c0018bac <picIoWait()>
c0018db1:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0018db6:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018dbd:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018dc1:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0018dc5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018dc9:	ee                   	out    dx,al
c0018dca:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018dcf:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0018dd6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018dda:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018dde:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0018de2:	ee                   	out    dx,al
c0018de3:	90                   	nop
c0018de4:	83 c4 50             	add    esp,0x50
c0018de7:	c3                   	ret    

c0018de8 <picEOI(int)>:
c0018de8:	83 ec 10             	sub    esp,0x10
c0018deb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018df0:	75 1e                	jne    c0018e10 <picEOI(int)+0x28>
c0018df2:	6a 0b                	push   0xb
c0018df4:	e8 ef fd ff ff       	call   c0018be8 <picGetIRQReg(int)>
c0018df9:	83 c4 04             	add    esp,0x4
c0018dfc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018e01:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0018e06:	25 80 00 00 00       	and    eax,0x80
c0018e0b:	74 73                	je     c0018e80 <picEOI(int)+0x98>
c0018e0d:	8d 76 00             	lea    esi,[esi+0x0]
c0018e10:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0018e15:	75 31                	jne    c0018e48 <picEOI(int)+0x60>
c0018e17:	6a 0b                	push   0xb
c0018e19:	e8 ca fd ff ff       	call   c0018be8 <picGetIRQReg(int)>
c0018e1e:	83 c4 04             	add    esp,0x4
c0018e21:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0018e26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018e2a:	98                   	cwde   
c0018e2b:	85 c0                	test   eax,eax
c0018e2d:	78 19                	js     c0018e48 <picEOI(int)+0x60>
c0018e2f:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0018e36:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0018e3b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018e3f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0018e44:	ee                   	out    dx,al
c0018e45:	eb 3d                	jmp    c0018e84 <picEOI(int)+0x9c>
c0018e47:	90                   	nop
c0018e48:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018e4d:	7e 19                	jle    c0018e68 <picEOI(int)+0x80>
c0018e4f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0018e56:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0018e5b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0018e5f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0018e64:	ee                   	out    dx,al
c0018e65:	8d 76 00             	lea    esi,[esi+0x0]
c0018e68:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0018e6f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0018e74:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018e78:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018e7d:	ee                   	out    dx,al
c0018e7e:	eb 04                	jmp    c0018e84 <picEOI(int)+0x9c>
c0018e80:	90                   	nop
c0018e81:	8d 76 00             	lea    esi,[esi+0x0]
c0018e84:	83 c4 10             	add    esp,0x10
c0018e87:	c3                   	ret    

c0018e88 <RTC::open(int, int, void*)>:
c0018e88:	31 c0                	xor    eax,eax
c0018e8a:	c3                   	ret    
c0018e8b:	90                   	nop

c0018e8c <RTC::close(int, int, void*)>:
c0018e8c:	31 c0                	xor    eax,eax
c0018e8e:	c3                   	ret    
c0018e8f:	90                   	nop

c0018e90 <RTC::timeInSecondsUTC()>:
c0018e90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018e94:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018e9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018ea0:	c3                   	ret    
c0018ea1:	90                   	nop

c0018ea2 <RTC::timeInDatetimeUTC()>:
c0018ea2:	53                   	push   ebx
c0018ea3:	83 ec 14             	sub    esp,0x14
c0018ea6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018eaa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018eae:	8b 10                	mov    edx,DWORD PTR [eax]
c0018eb0:	50                   	push   eax
c0018eb1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0018eb4:	83 c4 0c             	add    esp,0xc
c0018eb7:	52                   	push   edx
c0018eb8:	50                   	push   eax
c0018eb9:	53                   	push   ebx
c0018eba:	e8 f3 fe fe ff       	call   c0008db2 <KeSecondsToDatetime(unsigned long long)>
c0018ebf:	89 d8                	mov    eax,ebx
c0018ec1:	83 c4 14             	add    esp,0x14
c0018ec4:	5b                   	pop    ebx
c0018ec5:	c2 04 00             	ret    0x4

c0018ec8 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018ec8:	56                   	push   esi
c0018ec9:	53                   	push   ebx
c0018eca:	83 ec 14             	sub    esp,0x14
c0018ecd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018ed1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0018ed3:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0018ed6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018eda:	52                   	push   edx
c0018edb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018edf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018ee3:	50                   	push   eax
c0018ee4:	e8 c9 fe fe ff       	call   c0008db2 <KeSecondsToDatetime(unsigned long long)>
c0018ee9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018eed:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018ef1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018ef5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018ef9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018efd:	89 f0                	mov    eax,esi
c0018eff:	83 c4 20             	add    esp,0x20
c0018f02:	5b                   	pop    ebx
c0018f03:	5e                   	pop    esi
c0018f04:	ff e0                	jmp    eax

c0018f06 <RTC::~RTC()>:
c0018f06:	83 ec 0c             	sub    esp,0xc
c0018f09:	ba d8 30 02 c0       	mov    edx,0xc00230d8
c0018f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f12:	89 10                	mov    DWORD PTR [eax],edx
c0018f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018f18:	83 ec 0c             	sub    esp,0xc
c0018f1b:	50                   	push   eax
c0018f1c:	e8 23 fc fe ff       	call   c0008b44 <Clock::~Clock()>
c0018f21:	83 c4 10             	add    esp,0x10
c0018f24:	90                   	nop
c0018f25:	83 c4 0c             	add    esp,0xc
c0018f28:	c3                   	ret    
c0018f29:	90                   	nop

c0018f2a <RTC::~RTC()>:
c0018f2a:	83 ec 0c             	sub    esp,0xc
c0018f2d:	83 ec 0c             	sub    esp,0xc
c0018f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f34:	e8 cd ff ff ff       	call   c0018f06 <RTC::~RTC()>
c0018f39:	83 c4 10             	add    esp,0x10
c0018f3c:	83 ec 08             	sub    esp,0x8
c0018f3f:	68 60 01 00 00       	push   0x160
c0018f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f48:	e8 bb 37 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0018f4d:	83 c4 10             	add    esp,0x10
c0018f50:	83 c4 0c             	add    esp,0xc
c0018f53:	c3                   	ret    

c0018f54 <RTC::get_update_in_progress_flag()>:
c0018f54:	83 ec 18             	sub    esp,0x18
c0018f57:	6a 0a                	push   0xa
c0018f59:	e8 69 db ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0018f5e:	83 c4 1c             	add    esp,0x1c
c0018f61:	0f b6 c0             	movzx  eax,al
c0018f64:	c1 e8 07             	shr    eax,0x7
c0018f67:	c3                   	ret    

c0018f68 <RTC::completeRTCRefresh()>:
c0018f68:	55                   	push   ebp
c0018f69:	57                   	push   edi
c0018f6a:	56                   	push   esi
c0018f6b:	53                   	push   ebx
c0018f6c:	83 ec 3c             	sub    esp,0x3c
c0018f6f:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018f75:	83 ec 0c             	sub    esp,0xc
c0018f78:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018f7c:	e8 d3 ff ff ff       	call   c0018f54 <RTC::get_update_in_progress_flag()>
c0018f81:	83 c4 10             	add    esp,0x10
c0018f84:	84 c0                	test   al,al
c0018f86:	74 0e                	je     c0018f96 <RTC::completeRTCRefresh()+0x2e>
c0018f88:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0018f8e:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c0018f94:	73 df                	jae    c0018f75 <RTC::completeRTCRefresh()+0xd>
c0018f96:	83 ec 0c             	sub    esp,0xc
c0018f99:	6a 00                	push   0x0
c0018f9b:	e8 27 db ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0018fa0:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0018fa7:	89 c5                	mov    ebp,eax
c0018fa9:	e8 19 db ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0018fae:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0018fb5:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018fb9:	e8 09 db ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0018fbe:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0018fc5:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0018fc9:	e8 f9 da ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0018fce:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018fd5:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0018fd9:	e8 e9 da ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0018fde:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0018fe5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018fe9:	e8 d9 da ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0018fee:	0f b6 c0             	movzx  eax,al
c0018ff1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018ff5:	83 c4 10             	add    esp,0x10
c0018ff8:	8b 1d ec 97 02 c0    	mov    ebx,DWORD PTR ds:0xc00297ec
c0018ffe:	83 ec 0c             	sub    esp,0xc
c0019001:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019005:	e8 4a ff ff ff       	call   c0018f54 <RTC::get_update_in_progress_flag()>
c001900a:	83 c4 10             	add    esp,0x10
c001900d:	84 c0                	test   al,al
c001900f:	74 0e                	je     c001901f <RTC::completeRTCRefresh()+0xb7>
c0019011:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019017:	3b 05 ec 97 02 c0    	cmp    eax,DWORD PTR ds:0xc00297ec
c001901d:	73 df                	jae    c0018ffe <RTC::completeRTCRefresh()+0x96>
c001901f:	83 ec 0c             	sub    esp,0xc
c0019022:	6a 00                	push   0x0
c0019024:	e8 9e da ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0019029:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019030:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019034:	e8 8e da ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0019039:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019040:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019044:	e8 7e da ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0019049:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019050:	88 c3                	mov    bl,al
c0019052:	e8 70 da ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0019057:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001905e:	89 c6                	mov    esi,eax
c0019060:	e8 62 da ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0019065:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001906c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019070:	e8 52 da ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0019075:	89 e9                	mov    ecx,ebp
c0019077:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001907b:	0f b6 f8             	movzx  edi,al
c001907e:	83 c4 10             	add    esp,0x10
c0019081:	0f b6 eb             	movzx  ebp,bl
c0019084:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0019088:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001908d:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019092:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019096:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001909a:	0f 94 c0             	sete   al
c001909d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00190a1:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c00190a5:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00190aa:	0f 94 c2             	sete   dl
c00190ad:	21 d0                	and    eax,edx
c00190af:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c00190b3:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c00190b7:	0f 94 c2             	sete   dl
c00190ba:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00190be:	21 c2                	and    edx,eax
c00190c0:	89 f0                	mov    eax,esi
c00190c2:	0f b6 c0             	movzx  eax,al
c00190c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00190c9:	89 f0                	mov    eax,esi
c00190cb:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c00190cf:	0f 94 c0             	sete   al
c00190d2:	21 d0                	and    eax,edx
c00190d4:	31 d2                	xor    edx,edx
c00190d6:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c00190da:	0f 94 c2             	sete   dl
c00190dd:	85 c2                	test   edx,eax
c00190df:	75 27                	jne    c0019108 <RTC::completeRTCRefresh()+0x1a0>
c00190e1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00190e5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c00190e9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00190ed:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00190f1:	89 f0                	mov    eax,esi
c00190f3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c00190f7:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00190fb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00190ff:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019103:	e9 f0 fe ff ff       	jmp    c0018ff8 <RTC::completeRTCRefresh()+0x90>
c0019108:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001910c:	75 d3                	jne    c00190e1 <RTC::completeRTCRefresh()+0x179>
c001910e:	83 ec 0c             	sub    esp,0xc
c0019111:	6a 0b                	push   0xb
c0019113:	e8 af d9 ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0019118:	83 c4 10             	add    esp,0x10
c001911b:	a8 04                	test   al,0x4
c001911d:	75 7a                	jne    c0019199 <RTC::completeRTCRefresh()+0x231>
c001911f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019123:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019127:	83 e1 0f             	and    ecx,0xf
c001912a:	c1 ea 04             	shr    edx,0x4
c001912d:	83 e6 0f             	and    esi,0xf
c0019130:	6b d2 0a             	imul   edx,edx,0xa
c0019133:	c1 ef 04             	shr    edi,0x4
c0019136:	01 d1                	add    ecx,edx
c0019138:	6b ff 0a             	imul   edi,edi,0xa
c001913b:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001913f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019143:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019147:	c1 ea 04             	shr    edx,0x4
c001914a:	83 e1 0f             	and    ecx,0xf
c001914d:	6b d2 0a             	imul   edx,edx,0xa
c0019150:	01 d1                	add    ecx,edx
c0019152:	89 ea                	mov    edx,ebp
c0019154:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0019158:	c1 ea 04             	shr    edx,0x4
c001915b:	89 d9                	mov    ecx,ebx
c001915d:	83 e2 07             	and    edx,0x7
c0019160:	83 e1 0f             	and    ecx,0xf
c0019163:	6b d2 0a             	imul   edx,edx,0xa
c0019166:	83 e3 80             	and    ebx,0xffffff80
c0019169:	01 d1                	add    ecx,edx
c001916b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001916f:	09 cb                	or     ebx,ecx
c0019171:	c1 ea 04             	shr    edx,0x4
c0019174:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0019178:	6b d2 0a             	imul   edx,edx,0xa
c001917b:	83 e1 0f             	and    ecx,0xf
c001917e:	01 d6                	add    esi,edx
c0019180:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019184:	c1 ea 04             	shr    edx,0x4
c0019187:	6b d2 0a             	imul   edx,edx,0xa
c001918a:	01 d1                	add    ecx,edx
c001918c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019190:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0019194:	83 e2 0f             	and    edx,0xf
c0019197:	01 d7                	add    edi,edx
c0019199:	a8 02                	test   al,0x2
c001919b:	75 15                	jne    c00191b2 <RTC::completeRTCRefresh()+0x24a>
c001919d:	f6 c3 80             	test   bl,0x80
c00191a0:	74 10                	je     c00191b2 <RTC::completeRTCRefresh()+0x24a>
c00191a2:	83 e3 7f             	and    ebx,0x7f
c00191a5:	b9 18 00 00 00       	mov    ecx,0x18
c00191aa:	8d 43 0c             	lea    eax,[ebx+0xc]
c00191ad:	99                   	cdq    
c00191ae:	f7 f9                	idiv   ecx
c00191b0:	88 d3                	mov    bl,dl
c00191b2:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c00191b8:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c00191be:	77 06                	ja     c00191c6 <RTC::completeRTCRefresh()+0x25e>
c00191c0:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c00191c6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00191cb:	31 c9                	xor    ecx,ecx
c00191cd:	c1 e0 10             	shl    eax,0x10
c00191d0:	89 cf                	mov    edi,ecx
c00191d2:	c1 e5 10             	shl    ebp,0x10
c00191d5:	31 d2                	xor    edx,edx
c00191d7:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c00191dd:	09 c7                	or     edi,eax
c00191df:	89 f0                	mov    eax,esi
c00191e1:	89 f9                	mov    ecx,edi
c00191e3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00191e7:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00191eb:	88 c2                	mov    dl,al
c00191ed:	88 d9                	mov    cl,bl
c00191ef:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00191f3:	0f b7 c2             	movzx  eax,dx
c00191f6:	09 e8                	or     eax,ebp
c00191f8:	89 c2                	mov    edx,eax
c00191fa:	50                   	push   eax
c00191fb:	50                   	push   eax
c00191fc:	51                   	push   ecx
c00191fd:	52                   	push   edx
c00191fe:	e8 30 fa fe ff       	call   c0008c33 <KeDatetimeToSeconds(datetime_t)>
c0019203:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c0019207:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001920d:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0019213:	83 c4 4c             	add    esp,0x4c
c0019216:	5b                   	pop    ebx
c0019217:	5e                   	pop    esi
c0019218:	5f                   	pop    edi
c0019219:	5d                   	pop    ebp
c001921a:	c3                   	ret    
c001921b:	90                   	nop

c001921c <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001921c:	55                   	push   ebp
c001921d:	57                   	push   edi
c001921e:	56                   	push   esi
c001921f:	53                   	push   ebx
c0019220:	83 ec 34             	sub    esp,0x34
c0019223:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c0019227:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001922b:	6a 00                	push   0x0
c001922d:	89 fb                	mov    ebx,edi
c001922f:	6a 00                	push   0x0
c0019231:	e8 e5 d8 ff ff       	call   c0016b1b <x86WriteCMOS(unsigned char, unsigned char)>
c0019236:	5d                   	pop    ebp
c0019237:	58                   	pop    eax
c0019238:	6a 00                	push   0x0
c001923a:	6a 02                	push   0x2
c001923c:	e8 da d8 ff ff       	call   c0016b1b <x86WriteCMOS(unsigned char, unsigned char)>
c0019241:	31 d2                	xor    edx,edx
c0019243:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001924a:	89 f9                	mov    ecx,edi
c001924c:	89 f8                	mov    eax,edi
c001924e:	c1 e9 10             	shr    ecx,0x10
c0019251:	0f b6 c4             	movzx  eax,ah
c0019254:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0019258:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001925c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019260:	b9 64 00 00 00       	mov    ecx,0x64
c0019265:	89 f0                	mov    eax,esi
c0019267:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001926b:	89 f0                	mov    eax,esi
c001926d:	0f b6 c4             	movzx  eax,ah
c0019270:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019274:	89 f0                	mov    eax,esi
c0019276:	c1 e8 10             	shr    eax,0x10
c0019279:	f7 f1                	div    ecx
c001927b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001927f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0019283:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019287:	e8 3b d8 ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c001928c:	83 c4 10             	add    esp,0x10
c001928f:	89 c5                	mov    ebp,eax
c0019291:	a8 04                	test   al,0x4
c0019293:	75 6e                	jne    c0019303 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c0019295:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019299:	31 d2                	xor    edx,edx
c001929b:	0f b6 c1             	movzx  eax,cl
c001929e:	b9 0a 00 00 00       	mov    ecx,0xa
c00192a3:	f7 f1                	div    ecx
c00192a5:	c1 e0 04             	shl    eax,0x4
c00192a8:	09 d0                	or     eax,edx
c00192aa:	31 d2                	xor    edx,edx
c00192ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00192b0:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00192b5:	f7 f1                	div    ecx
c00192b7:	c1 e0 04             	shl    eax,0x4
c00192ba:	09 d0                	or     eax,edx
c00192bc:	31 d2                	xor    edx,edx
c00192be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00192c2:	0f b6 c3             	movzx  eax,bl
c00192c5:	f7 f1                	div    ecx
c00192c7:	c1 e0 04             	shl    eax,0x4
c00192ca:	09 d0                	or     eax,edx
c00192cc:	31 d2                	xor    edx,edx
c00192ce:	89 c3                	mov    ebx,eax
c00192d0:	89 f0                	mov    eax,esi
c00192d2:	0f b6 c0             	movzx  eax,al
c00192d5:	f7 f1                	div    ecx
c00192d7:	c1 e0 04             	shl    eax,0x4
c00192da:	09 d0                	or     eax,edx
c00192dc:	31 d2                	xor    edx,edx
c00192de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00192e2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00192e7:	f7 f1                	div    ecx
c00192e9:	c1 e0 04             	shl    eax,0x4
c00192ec:	09 d0                	or     eax,edx
c00192ee:	31 d2                	xor    edx,edx
c00192f0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00192f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00192f8:	f7 f1                	div    ecx
c00192fa:	c1 e0 04             	shl    eax,0x4
c00192fd:	09 d0                	or     eax,edx
c00192ff:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019303:	83 e5 02             	and    ebp,0x2
c0019306:	75 1e                	jne    c0019326 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019308:	0f b6 c3             	movzx  eax,bl
c001930b:	83 f8 0b             	cmp    eax,0xb
c001930e:	76 10                	jbe    c0019320 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c0019310:	8d 53 f4             	lea    edx,[ebx-0xc]
c0019313:	88 d3                	mov    bl,dl
c0019315:	84 d2                	test   dl,dl
c0019317:	75 02                	jne    c001931b <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c0019319:	b3 0c                	mov    bl,0xc
c001931b:	83 cb 80             	or     ebx,0xffffff80
c001931e:	eb 06                	jmp    c0019326 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019320:	85 c0                	test   eax,eax
c0019322:	75 02                	jne    c0019326 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c0019324:	b3 0c                	mov    bl,0xc
c0019326:	0f b6 db             	movzx  ebx,bl
c0019329:	50                   	push   eax
c001932a:	50                   	push   eax
c001932b:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0019330:	52                   	push   edx
c0019331:	6a 00                	push   0x0
c0019333:	e8 e3 d7 ff ff       	call   c0016b1b <x86WriteCMOS(unsigned char, unsigned char)>
c0019338:	5a                   	pop    edx
c0019339:	59                   	pop    ecx
c001933a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001933f:	50                   	push   eax
c0019340:	6a 02                	push   0x2
c0019342:	e8 d4 d7 ff ff       	call   c0016b1b <x86WriteCMOS(unsigned char, unsigned char)>
c0019347:	5e                   	pop    esi
c0019348:	5f                   	pop    edi
c0019349:	53                   	push   ebx
c001934a:	6a 04                	push   0x4
c001934c:	e8 ca d7 ff ff       	call   c0016b1b <x86WriteCMOS(unsigned char, unsigned char)>
c0019351:	5d                   	pop    ebp
c0019352:	58                   	pop    eax
c0019353:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0019358:	52                   	push   edx
c0019359:	6a 07                	push   0x7
c001935b:	e8 bb d7 ff ff       	call   c0016b1b <x86WriteCMOS(unsigned char, unsigned char)>
c0019360:	58                   	pop    eax
c0019361:	5a                   	pop    edx
c0019362:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0019367:	50                   	push   eax
c0019368:	6a 08                	push   0x8
c001936a:	e8 ac d7 ff ff       	call   c0016b1b <x86WriteCMOS(unsigned char, unsigned char)>
c001936f:	59                   	pop    ecx
c0019370:	5b                   	pop    ebx
c0019371:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0019376:	55                   	push   ebp
c0019377:	6a 09                	push   0x9
c0019379:	e8 9d d7 ff ff       	call   c0016b1b <x86WriteCMOS(unsigned char, unsigned char)>
c001937e:	5e                   	pop    esi
c001937f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0019383:	e8 e0 fb ff ff       	call   c0018f68 <RTC::completeRTCRefresh()>
c0019388:	83 c4 3c             	add    esp,0x3c
c001938b:	b0 01                	mov    al,0x1
c001938d:	5b                   	pop    ebx
c001938e:	5e                   	pop    esi
c001938f:	5f                   	pop    edi
c0019390:	5d                   	pop    ebp
c0019391:	c3                   	ret    

c0019392 <rtcIRQHandler(regs*, void*)>:
c0019392:	53                   	push   ebx
c0019393:	83 ec 14             	sub    esp,0x14
c0019396:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001939a:	6a 0c                	push   0xc
c001939c:	e8 26 d7 ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c00193a1:	83 c4 10             	add    esp,0x10
c00193a4:	a8 80                	test   al,0x80
c00193a6:	74 24                	je     c00193cc <rtcIRQHandler(regs*, void*)+0x3a>
c00193a8:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00193af:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00193b6:	66 ff 05 94 c7 02 c0 	inc    WORD PTR ds:0xc002c794
c00193bd:	75 0d                	jne    c00193cc <rtcIRQHandler(regs*, void*)+0x3a>
c00193bf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00193c3:	83 c4 08             	add    esp,0x8
c00193c6:	5b                   	pop    ebx
c00193c7:	e9 9c fb ff ff       	jmp    c0018f68 <RTC::completeRTCRefresh()>
c00193cc:	83 c4 08             	add    esp,0x8
c00193cf:	5b                   	pop    ebx
c00193d0:	c3                   	ret    
c00193d1:	90                   	nop

c00193d2 <RTC::RTC()>:
c00193d2:	83 ec 1c             	sub    esp,0x1c
c00193d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193d9:	83 ec 08             	sub    esp,0x8
c00193dc:	68 bb 30 02 c0       	push   0xc00230bb
c00193e1:	50                   	push   eax
c00193e2:	e8 27 f7 fe ff       	call   c0008b0e <Clock::Clock(char const*)>
c00193e7:	83 c4 10             	add    esp,0x10
c00193ea:	ba d8 30 02 c0       	mov    edx,0xc00230d8
c00193ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193f3:	89 10                	mov    DWORD PTR [eax],edx
c00193f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00193f9:	83 ec 0c             	sub    esp,0xc
c00193fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019400:	6a 01                	push   0x1
c0019402:	68 92 93 01 c0       	push   0xc0019392
c0019407:	6a 08                	push   0x8
c0019409:	50                   	push   eax
c001940a:	e8 db fb fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001940f:	83 c4 20             	add    esp,0x20
c0019412:	89 c2                	mov    edx,eax
c0019414:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019418:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001941e:	fa                   	cli    
c001941f:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0019424:	83 c0 01             	add    eax,0x1
c0019427:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001942c:	83 ec 0c             	sub    esp,0xc
c001942f:	6a 0b                	push   0xb
c0019431:	e8 91 d6 ff ff       	call   c0016ac7 <x86ReadCMOS(unsigned char)>
c0019436:	83 c4 10             	add    esp,0x10
c0019439:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001943d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019441:	83 c8 10             	or     eax,0x10
c0019444:	0f b6 c0             	movzx  eax,al
c0019447:	83 ec 08             	sub    esp,0x8
c001944a:	50                   	push   eax
c001944b:	6a 0b                	push   0xb
c001944d:	e8 c9 d6 ff ff       	call   c0016b1b <x86WriteCMOS(unsigned char, unsigned char)>
c0019452:	83 c4 10             	add    esp,0x10
c0019455:	83 ec 0c             	sub    esp,0xc
c0019458:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001945c:	e8 07 fb ff ff       	call   c0018f68 <RTC::completeRTCRefresh()>
c0019461:	83 c4 10             	add    esp,0x10
c0019464:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0019469:	83 e8 01             	sub    eax,0x1
c001946c:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0019471:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c0019476:	85 c0                	test   eax,eax
c0019478:	75 01                	jne    c001947b <RTC::RTC()+0xa9>
c001947a:	fb                   	sti    
c001947b:	90                   	nop
c001947c:	83 c4 1c             	add    esp,0x1c
c001947f:	c3                   	ret    

c0019480 <HalConsoleScroll(int, int)>:
c0019480:	83 ec 10             	sub    esp,0x10
c0019483:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001948b:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0019493:	90                   	nop
c0019494:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019499:	0f 8f e1 00 00 00    	jg     c0019580 <HalConsoleScroll(int, int)+0x100>
c001949f:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00194a7:	90                   	nop
c00194a8:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00194b0:	0f 8f be 00 00 00    	jg     c0019574 <HalConsoleScroll(int, int)+0xf4>
c00194b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194ba:	89 d0                	mov    eax,edx
c00194bc:	c1 e0 02             	shl    eax,0x2
c00194bf:	01 d0                	add    eax,edx
c00194c1:	c1 e0 05             	shl    eax,0x5
c00194c4:	89 c2                	mov    edx,eax
c00194c6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194ca:	01 d0                	add    eax,edx
c00194cc:	89 c2                	mov    edx,eax
c00194ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194d2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00194d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00194d9:	89 d0                	mov    eax,edx
c00194db:	c1 e0 02             	shl    eax,0x2
c00194de:	01 d0                	add    eax,edx
c00194e0:	c1 e0 05             	shl    eax,0x5
c00194e3:	89 c2                	mov    edx,eax
c00194e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194e9:	01 d0                	add    eax,edx
c00194eb:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00194f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00194f5:	01 c2                	add    edx,eax
c00194f7:	8a 01                	mov    al,BYTE PTR [ecx]
c00194f9:	88 02                	mov    BYTE PTR [edx],al
c00194fb:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0019500:	75 66                	jne    c0019568 <HalConsoleScroll(int, int)+0xe8>
c0019502:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019506:	83 e0 01             	and    eax,0x1
c0019509:	74 39                	je     c0019544 <HalConsoleScroll(int, int)+0xc4>
c001950b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001950f:	83 e0 0f             	and    eax,0xf
c0019512:	88 c2                	mov    dl,al
c0019514:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019518:	c1 e0 04             	shl    eax,0x4
c001951b:	09 d0                	or     eax,edx
c001951d:	88 c1                	mov    cl,al
c001951f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019523:	89 d0                	mov    eax,edx
c0019525:	c1 e0 02             	shl    eax,0x2
c0019528:	01 d0                	add    eax,edx
c001952a:	c1 e0 05             	shl    eax,0x5
c001952d:	89 c2                	mov    edx,eax
c001952f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019533:	01 d0                	add    eax,edx
c0019535:	89 c2                	mov    edx,eax
c0019537:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001953b:	01 d0                	add    eax,edx
c001953d:	88 ca                	mov    dl,cl
c001953f:	88 10                	mov    BYTE PTR [eax],dl
c0019541:	eb 25                	jmp    c0019568 <HalConsoleScroll(int, int)+0xe8>
c0019543:	90                   	nop
c0019544:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019548:	89 d0                	mov    eax,edx
c001954a:	c1 e0 02             	shl    eax,0x2
c001954d:	01 d0                	add    eax,edx
c001954f:	c1 e0 05             	shl    eax,0x5
c0019552:	89 c2                	mov    edx,eax
c0019554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019558:	01 d0                	add    eax,edx
c001955a:	89 c2                	mov    edx,eax
c001955c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019560:	01 d0                	add    eax,edx
c0019562:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0019565:	8d 76 00             	lea    esi,[esi+0x0]
c0019568:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001956d:	e9 36 ff ff ff       	jmp    c00194a8 <HalConsoleScroll(int, int)+0x28>
c0019572:	66 90                	xchg   ax,ax
c0019574:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0019579:	e9 16 ff ff ff       	jmp    c0019494 <HalConsoleScroll(int, int)+0x14>
c001957e:	66 90                	xchg   ax,ax
c0019580:	90                   	nop
c0019581:	83 c4 10             	add    esp,0x10
c0019584:	c3                   	ret    
c0019585:	8d 76 00             	lea    esi,[esi+0x0]

c0019588 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0019588:	83 ec 14             	sub    esp,0x14
c001958b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001958f:	88 04 24             	mov    BYTE PTR [esp],al
c0019592:	8a 04 24             	mov    al,BYTE PTR [esp]
c0019595:	0f b6 c0             	movzx  eax,al
c0019598:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001959c:	89 d1                	mov    ecx,edx
c001959e:	83 e1 0f             	and    ecx,0xf
c00195a1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00195a5:	c1 e2 04             	shl    edx,0x4
c00195a8:	0f b6 d2             	movzx  edx,dl
c00195ab:	09 ca                	or     edx,ecx
c00195ad:	c1 e2 08             	shl    edx,0x8
c00195b0:	09 d0                	or     eax,edx
c00195b2:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00195b7:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00195bf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00195c3:	89 d0                	mov    eax,edx
c00195c5:	c1 e0 02             	shl    eax,0x2
c00195c8:	01 d0                	add    eax,edx
c00195ca:	c1 e0 04             	shl    eax,0x4
c00195cd:	89 c2                	mov    edx,eax
c00195cf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00195d3:	01 d0                	add    eax,edx
c00195d5:	01 c0                	add    eax,eax
c00195d7:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00195db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00195df:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00195e4:	66 89 02             	mov    WORD PTR [edx],ax
c00195e7:	90                   	nop
c00195e8:	83 c4 14             	add    esp,0x14
c00195eb:	c3                   	ret    

c00195ec <HalConsoleCursorUpdate(int, int)>:
c00195ec:	83 ec 20             	sub    esp,0x20
c00195ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00195f3:	89 c2                	mov    edx,eax
c00195f5:	c1 e2 02             	shl    edx,0x2
c00195f8:	01 d0                	add    eax,edx
c00195fa:	c1 e0 04             	shl    eax,0x4
c00195fd:	89 c2                	mov    edx,eax
c00195ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019603:	01 d0                	add    eax,edx
c0019605:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001960a:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0019611:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0019616:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001961a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001961e:	ee                   	out    dx,al
c001961f:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0019624:	0f b6 c0             	movzx  eax,al
c0019627:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001962e:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0019632:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019636:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001963a:	ee                   	out    dx,al
c001963b:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0019642:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0019647:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001964b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001964f:	ee                   	out    dx,al
c0019650:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0019655:	c1 e8 08             	shr    eax,0x8
c0019658:	0f b6 c0             	movzx  eax,al
c001965b:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0019662:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019666:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001966a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001966e:	ee                   	out    dx,al
c001966f:	90                   	nop
c0019670:	83 c4 20             	add    esp,0x20
c0019673:	c3                   	ret    

c0019674 <FAT::getName()>:
c0019674:	b8 0c 31 02 c0       	mov    eax,0xc002310c
c0019679:	c3                   	ret    
c001967a:	66 90                	xchg   ax,ax

c001967c <FAT::tell(void*, unsigned long long*)>:
c001967c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0019681:	75 09                	jne    c001968c <FAT::tell(void*, unsigned long long*)+0x10>
c0019683:	b8 04 00 00 00       	mov    eax,0x4
c0019688:	c3                   	ret    
c0019689:	8d 76 00             	lea    esi,[esi+0x0]
c001968c:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0019691:	75 09                	jne    c001969c <FAT::tell(void*, unsigned long long*)+0x20>
c0019693:	b8 04 00 00 00       	mov    eax,0x4
c0019698:	c3                   	ret    
c0019699:	8d 76 00             	lea    esi,[esi+0x0]
c001969c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196a0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00196a3:	ba 00 00 00 00       	mov    edx,0x0
c00196a8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196ac:	89 01                	mov    DWORD PTR [ecx],eax
c00196ae:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00196b1:	b8 00 00 00 00       	mov    eax,0x0
c00196b6:	c3                   	ret    
c00196b7:	90                   	nop

c00196b8 <FAT::stat(void*, unsigned long long*)>:
c00196b8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00196bd:	75 09                	jne    c00196c8 <FAT::stat(void*, unsigned long long*)+0x10>
c00196bf:	b8 04 00 00 00       	mov    eax,0x4
c00196c4:	c3                   	ret    
c00196c5:	8d 76 00             	lea    esi,[esi+0x0]
c00196c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00196cd:	75 09                	jne    c00196d8 <FAT::stat(void*, unsigned long long*)+0x20>
c00196cf:	b8 04 00 00 00       	mov    eax,0x4
c00196d4:	c3                   	ret    
c00196d5:	8d 76 00             	lea    esi,[esi+0x0]
c00196d8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196dc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00196df:	ba 00 00 00 00       	mov    edx,0x0
c00196e4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00196e8:	89 01                	mov    DWORD PTR [ecx],eax
c00196ea:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00196ed:	b8 00 00 00 00       	mov    eax,0x0
c00196f2:	c3                   	ret    
c00196f3:	90                   	nop

c00196f4 <FAT::~FAT()>:
c00196f4:	83 ec 0c             	sub    esp,0xc
c00196f7:	ba 58 31 02 c0       	mov    edx,0xc0023158
c00196fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019700:	89 10                	mov    DWORD PTR [eax],edx
c0019702:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019706:	83 ec 0c             	sub    esp,0xc
c0019709:	50                   	push   eax
c001970a:	e8 85 e6 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001970f:	83 c4 10             	add    esp,0x10
c0019712:	90                   	nop
c0019713:	83 c4 0c             	add    esp,0xc
c0019716:	c3                   	ret    
c0019717:	90                   	nop

c0019718 <FAT::~FAT()>:
c0019718:	83 ec 0c             	sub    esp,0xc
c001971b:	83 ec 0c             	sub    esp,0xc
c001971e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019722:	e8 cd ff ff ff       	call   c00196f4 <FAT::~FAT()>
c0019727:	83 c4 10             	add    esp,0x10
c001972a:	83 ec 08             	sub    esp,0x8
c001972d:	6a 08                	push   0x8
c001972f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019733:	e8 d0 2f ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0019738:	83 c4 10             	add    esp,0x10
c001973b:	83 c4 0c             	add    esp,0xc
c001973e:	c3                   	ret    
c001973f:	90                   	nop

c0019740 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0019740:	83 ec 1c             	sub    esp,0x1c
c0019743:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001974a:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001974f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019753:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001975a:	83 f8 ff             	cmp    eax,0xffffffff
c001975d:	75 35                	jne    c0019794 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001975f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019763:	88 c2                	mov    dl,al
c0019765:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c001976a:	01 d0                	add    eax,edx
c001976c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019770:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019776:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001977a:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019781:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019786:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001978a:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019791:	eb 19                	jmp    c00197ac <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0019793:	90                   	nop
c0019794:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019798:	88 c2                	mov    dl,al
c001979a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001979e:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00197a5:	01 d0                	add    eax,edx
c00197a7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00197ab:	90                   	nop
c00197ac:	83 ec 04             	sub    esp,0x4
c00197af:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00197b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00197b7:	8d 44 24 15          	lea    eax,[esp+0x15]
c00197bb:	50                   	push   eax
c00197bc:	e8 f7 b9 fe ff       	call   c00051b8 <f_getlabel>
c00197c1:	83 c4 10             	add    esp,0x10
c00197c4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00197c8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00197cd:	75 09                	jne    c00197d8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c00197cf:	b8 00 00 00 00       	mov    eax,0x0
c00197d4:	eb 0a                	jmp    c00197e0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c00197d6:	66 90                	xchg   ax,ax
c00197d8:	b8 01 00 00 00       	mov    eax,0x1
c00197dd:	8d 76 00             	lea    esi,[esi+0x0]
c00197e0:	83 c4 1c             	add    esp,0x1c
c00197e3:	c3                   	ret    

c00197e4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c00197e4:	57                   	push   edi
c00197e5:	83 ec 58             	sub    esp,0x58
c00197e8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00197f0:	8d 54 24 10          	lea    edx,[esp+0x10]
c00197f4:	b8 00 00 00 00       	mov    eax,0x0
c00197f9:	b9 0f 00 00 00       	mov    ecx,0xf
c00197fe:	fc                   	cld    
c00197ff:	89 d7                	mov    edi,edx
c0019801:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0019803:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019807:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001980e:	83 f8 ff             	cmp    eax,0xffffffff
c0019811:	75 35                	jne    c0019848 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0019813:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019817:	88 c2                	mov    dl,al
c0019819:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c001981e:	01 d0                	add    eax,edx
c0019820:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019824:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c001982a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001982e:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019835:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c001983a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001983e:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019845:	eb 19                	jmp    c0019860 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0019847:	90                   	nop
c0019848:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001984c:	88 c2                	mov    dl,al
c001984e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0019852:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019859:	01 d0                	add    eax,edx
c001985b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001985f:	90                   	nop
c0019860:	83 ec 08             	sub    esp,0x8
c0019863:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0019867:	8d 44 24 18          	lea    eax,[esp+0x18]
c001986b:	50                   	push   eax
c001986c:	e8 cf 6f fe ff       	call   c0000840 <strcat>
c0019871:	83 c4 10             	add    esp,0x10
c0019874:	83 ec 0c             	sub    esp,0xc
c0019877:	8d 44 24 18          	lea    eax,[esp+0x18]
c001987b:	50                   	push   eax
c001987c:	e8 88 ba fe ff       	call   c0005309 <f_setlabel>
c0019881:	83 c4 10             	add    esp,0x10
c0019884:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0019888:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001988d:	75 09                	jne    c0019898 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001988f:	b8 00 00 00 00       	mov    eax,0x0
c0019894:	eb 0a                	jmp    c00198a0 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0019896:	66 90                	xchg   ax,ax
c0019898:	b8 01 00 00 00       	mov    eax,0x1
c001989d:	8d 76 00             	lea    esi,[esi+0x0]
c00198a0:	83 c4 58             	add    esp,0x58
c00198a3:	5f                   	pop    edi
c00198a4:	c3                   	ret    
c00198a5:	90                   	nop
c00198a6:	66 90                	xchg   ax,ax

c00198a8 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00198a8:	83 ec 2c             	sub    esp,0x2c
c00198ab:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00198b3:	83 ec 08             	sub    esp,0x8
c00198b6:	68 30 31 02 c0       	push   0xc0023130
c00198bb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198bf:	e8 8c 6e fe ff       	call   c0000750 <strcmp>
c00198c4:	83 c4 10             	add    esp,0x10
c00198c7:	85 c0                	test   eax,eax
c00198c9:	0f 94 c0             	sete   al
c00198cc:	0f b6 c0             	movzx  eax,al
c00198cf:	85 c0                	test   eax,eax
c00198d1:	74 0d                	je     c00198e0 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c00198d3:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00198db:	e9 c0 00 00 00       	jmp    c00199a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c00198e0:	83 ec 08             	sub    esp,0x8
c00198e3:	68 22 31 02 c0       	push   0xc0023122
c00198e8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00198ec:	e8 5f 6e fe ff       	call   c0000750 <strcmp>
c00198f1:	83 c4 10             	add    esp,0x10
c00198f4:	85 c0                	test   eax,eax
c00198f6:	0f 94 c0             	sete   al
c00198f9:	0f b6 c0             	movzx  eax,al
c00198fc:	85 c0                	test   eax,eax
c00198fe:	74 10                	je     c0019910 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0019900:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019908:	e9 93 00 00 00       	jmp    c00199a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001990d:	8d 76 00             	lea    esi,[esi+0x0]
c0019910:	83 ec 08             	sub    esp,0x8
c0019913:	68 28 31 02 c0       	push   0xc0023128
c0019918:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001991c:	e8 2f 6e fe ff       	call   c0000750 <strcmp>
c0019921:	83 c4 10             	add    esp,0x10
c0019924:	85 c0                	test   eax,eax
c0019926:	0f 94 c0             	sete   al
c0019929:	0f b6 c0             	movzx  eax,al
c001992c:	85 c0                	test   eax,eax
c001992e:	74 0c                	je     c001993c <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0019930:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0019938:	eb 66                	jmp    c00199a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001993a:	66 90                	xchg   ax,ax
c001993c:	83 ec 08             	sub    esp,0x8
c001993f:	68 9c 08 02 c0       	push   0xc002089c
c0019944:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019948:	e8 03 6e fe ff       	call   c0000750 <strcmp>
c001994d:	83 c4 10             	add    esp,0x10
c0019950:	85 c0                	test   eax,eax
c0019952:	0f 94 c0             	sete   al
c0019955:	0f b6 c0             	movzx  eax,al
c0019958:	85 c0                	test   eax,eax
c001995a:	74 0c                	je     c0019968 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001995c:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0019964:	eb 3a                	jmp    c00199a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019966:	66 90                	xchg   ax,ax
c0019968:	83 ec 08             	sub    esp,0x8
c001996b:	68 2e 31 02 c0       	push   0xc002312e
c0019970:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019974:	e8 d7 6d fe ff       	call   c0000750 <strcmp>
c0019979:	83 c4 10             	add    esp,0x10
c001997c:	85 c0                	test   eax,eax
c001997e:	0f 94 c0             	sete   al
c0019981:	0f b6 c0             	movzx  eax,al
c0019984:	85 c0                	test   eax,eax
c0019986:	74 0c                	je     c0019994 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0019988:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0019990:	eb 0e                	jmp    c00199a0 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0019992:	66 90                	xchg   ax,ax
c0019994:	b8 08 00 00 00       	mov    eax,0x8
c0019999:	e9 ea 00 00 00       	jmp    c0019a88 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001999e:	66 90                	xchg   ax,ax
c00199a0:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00199a7:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00199ac:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199b0:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c00199b7:	83 f8 ff             	cmp    eax,0xffffffff
c00199ba:	75 34                	jne    c00199f0 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c00199bc:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00199c0:	88 c2                	mov    dl,al
c00199c2:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00199c7:	01 d0                	add    eax,edx
c00199c9:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00199cd:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c00199d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199d7:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c00199de:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c00199e3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00199e7:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c00199ee:	eb 18                	jmp    c0019a08 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c00199f0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00199f4:	88 c2                	mov    dl,al
c00199f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00199fa:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019a01:	01 d0                	add    eax,edx
c0019a03:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0019a07:	90                   	nop
c0019a08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019a0c:	88 04 24             	mov    BYTE PTR [esp],al
c0019a0f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0019a13:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019a17:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0019a1f:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0019a24:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0019a2c:	83 ec 0c             	sub    esp,0xc
c0019a2f:	68 00 20 00 00       	push   0x2000
c0019a34:	e8 42 4f ff ff       	call   c000e97b <malloc>
c0019a39:	83 c4 10             	add    esp,0x10
c0019a3c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019a40:	68 00 20 00 00       	push   0x2000
c0019a45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019a49:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019a4d:	50                   	push   eax
c0019a4e:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0019a52:	50                   	push   eax
c0019a53:	e8 ae bb fe ff       	call   c0005606 <f_mkfs>
c0019a58:	83 c4 10             	add    esp,0x10
c0019a5b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019a5f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019a64:	75 0a                	jne    c0019a70 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0019a66:	b8 00 00 00 00       	mov    eax,0x0
c0019a6b:	eb 1b                	jmp    c0019a88 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a70:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0019a75:	75 09                	jne    c0019a80 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0019a77:	b8 09 00 00 00       	mov    eax,0x9
c0019a7c:	eb 0a                	jmp    c0019a88 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0019a7e:	66 90                	xchg   ax,ax
c0019a80:	b8 01 00 00 00       	mov    eax,0x1
c0019a85:	8d 76 00             	lea    esi,[esi+0x0]
c0019a88:	83 c4 2c             	add    esp,0x2c
c0019a8b:	c3                   	ret    

c0019a8c <FAT::tryMount(LogicalDisk*, int)>:
c0019a8c:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0019a92:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019a97:	83 f8 14             	cmp    eax,0x14
c0019a9a:	75 18                	jne    c0019ab4 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0019a9c:	83 ec 0c             	sub    esp,0xc
c0019a9f:	68 34 31 02 c0       	push   0xc0023134
c0019aa4:	e8 29 52 ff ff       	call   c000ecd2 <KePanic(char const*)>
c0019aa9:	83 c4 10             	add    esp,0x10
c0019aac:	b0 00                	mov    al,0x0
c0019aae:	e9 ed 01 00 00       	jmp    c0019ca0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019ab3:	90                   	nop
c0019ab4:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0019abb:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0019ac1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0019ac7:	3d 00 02 00 00       	cmp    eax,0x200
c0019acc:	74 0a                	je     c0019ad8 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0019ace:	b0 00                	mov    al,0x0
c0019ad0:	e9 cb 01 00 00       	jmp    c0019ca0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad8:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0019ae0:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019ae7:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c0019aee:	83 f8 ff             	cmp    eax,0xffffffff
c0019af1:	74 09                	je     c0019afc <FAT::tryMount(LogicalDisk*, int)+0x70>
c0019af3:	b0 01                	mov    al,0x1
c0019af5:	e9 a6 01 00 00       	jmp    c0019ca0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019afa:	66 90                	xchg   ax,ax
c0019afc:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0019b06:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0019b0e:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0019b15:	88 c2                	mov    dl,al
c0019b17:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019b1c:	01 d0                	add    eax,edx
c0019b1e:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0019b25:	8b 15 a0 c7 02 c0    	mov    edx,DWORD PTR ds:0xc002c7a0
c0019b2b:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0019b32:	89 14 85 c0 c7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3840],edx
c0019b39:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019b3e:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0019b45:	89 14 85 40 c8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd37c0],edx
c0019b4c:	83 ec 0c             	sub    esp,0xc
c0019b4f:	68 34 02 00 00       	push   0x234
c0019b54:	e8 22 4e ff ff       	call   c000e97b <malloc>
c0019b59:	83 c4 10             	add    esp,0x10
c0019b5c:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0019b63:	83 ec 04             	sub    esp,0x4
c0019b66:	6a 00                	push   0x0
c0019b68:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019b6f:	50                   	push   eax
c0019b70:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019b77:	e8 65 a2 fe ff       	call   c0003de1 <f_mount>
c0019b7c:	83 c4 10             	add    esp,0x10
c0019b7f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019b86:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0019b8e:	74 1c                	je     c0019bac <FAT::tryMount(LogicalDisk*, int)+0x120>
c0019b90:	83 ec 0c             	sub    esp,0xc
c0019b93:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019b9a:	e8 fc 4d ff ff       	call   c000e99b <rfree>
c0019b9f:	83 c4 10             	add    esp,0x10
c0019ba2:	b0 00                	mov    al,0x0
c0019ba4:	e9 f7 00 00 00       	jmp    c0019ca0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0019bac:	83 ec 04             	sub    esp,0x4
c0019baf:	68 00 01 00 00       	push   0x100
c0019bb4:	6a 00                	push   0x0
c0019bb6:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019bbd:	50                   	push   eax
c0019bbe:	e8 2d 69 fe ff       	call   c00004f0 <memset>
c0019bc3:	83 c4 10             	add    esp,0x10
c0019bc6:	83 ec 08             	sub    esp,0x8
c0019bc9:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019bd0:	50                   	push   eax
c0019bd1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019bd8:	50                   	push   eax
c0019bd9:	e8 62 6c fe ff       	call   c0000840 <strcat>
c0019bde:	83 c4 10             	add    esp,0x10
c0019be1:	83 ec 08             	sub    esp,0x8
c0019be4:	68 42 31 02 c0       	push   0xc0023142
c0019be9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0019bf0:	50                   	push   eax
c0019bf1:	e8 4a 6c fe ff       	call   c0000840 <strcat>
c0019bf6:	83 c4 10             	add    esp,0x10
c0019bf9:	83 ec 04             	sub    esp,0x4
c0019bfc:	6a 01                	push   0x1
c0019bfe:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0019c05:	50                   	push   eax
c0019c06:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c0a:	50                   	push   eax
c0019c0b:	e8 33 a2 fe ff       	call   c0003e43 <f_open>
c0019c10:	83 c4 10             	add    esp,0x10
c0019c13:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0019c1a:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0019c21:	85 c0                	test   eax,eax
c0019c23:	74 0b                	je     c0019c30 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0019c25:	78 31                	js     c0019c58 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019c27:	83 e8 04             	sub    eax,0x4
c0019c2a:	83 f8 01             	cmp    eax,0x1
c0019c2d:	77 29                	ja     c0019c58 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0019c2f:	90                   	nop
c0019c30:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0019c38:	83 ec 0c             	sub    esp,0xc
c0019c3b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019c3f:	50                   	push   eax
c0019c40:	e8 cd a9 fe ff       	call   c0004612 <f_close>
c0019c45:	83 c4 10             	add    esp,0x10
c0019c48:	90                   	nop
c0019c49:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0019c51:	85 c0                	test   eax,eax
c0019c53:	74 43                	je     c0019c98 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0019c55:	eb 31                	jmp    c0019c88 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0019c57:	90                   	nop
c0019c58:	83 ec 0c             	sub    esp,0xc
c0019c5b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0019c62:	e8 34 4d ff ff       	call   c000e99b <rfree>
c0019c67:	83 c4 10             	add    esp,0x10
c0019c6a:	83 ec 04             	sub    esp,0x4
c0019c6d:	6a 00                	push   0x0
c0019c6f:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0019c76:	50                   	push   eax
c0019c77:	6a 00                	push   0x0
c0019c79:	e8 63 a1 fe ff       	call   c0003de1 <f_mount>
c0019c7e:	83 c4 10             	add    esp,0x10
c0019c81:	b0 00                	mov    al,0x0
c0019c83:	eb 1b                	jmp    c0019ca0 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0019c85:	8d 76 00             	lea    esi,[esi+0x0]
c0019c88:	a1 a0 c7 02 c0       	mov    eax,ds:0xc002c7a0
c0019c8d:	83 c0 01             	add    eax,0x1
c0019c90:	a3 a0 c7 02 c0       	mov    ds:0xc002c7a0,eax
c0019c95:	8d 76 00             	lea    esi,[esi+0x0]
c0019c98:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0019c9f:	90                   	nop
c0019ca0:	81 c4 4c 03 00 00    	add    esp,0x34c
c0019ca6:	c3                   	ret    
c0019ca7:	90                   	nop

c0019ca8 <FAT::allocateSwapfile(char const*, int)>:
c0019ca8:	55                   	push   ebp
c0019ca9:	57                   	push   edi
c0019caa:	56                   	push   esi
c0019cab:	53                   	push   ebx
c0019cac:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0019cb2:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0019cbd:	83 ec 0c             	sub    esp,0xc
c0019cc0:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0019cc7:	e8 af 4c ff ff       	call   c000e97b <malloc>
c0019ccc:	83 c4 10             	add    esp,0x10
c0019ccf:	89 c7                	mov    edi,eax
c0019cd1:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c0019cd6:	83 ec 04             	sub    esp,0x4
c0019cd9:	50                   	push   eax
c0019cda:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0019ce1:	57                   	push   edi
c0019ce2:	e8 2b e4 fe ff       	call   c0008112 <File::File(char const*, Process*)>
c0019ce7:	83 c4 10             	add    esp,0x10
c0019cea:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0019cf1:	83 ec 04             	sub    esp,0x4
c0019cf4:	8d 44 24 13          	lea    eax,[esp+0x13]
c0019cf8:	50                   	push   eax
c0019cf9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cfd:	50                   	push   eax
c0019cfe:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d05:	e8 28 e7 fe ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c0019d0a:	83 c4 10             	add    esp,0x10
c0019d0d:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019d14:	c1 e0 14             	shl    eax,0x14
c0019d17:	89 c7                	mov    edi,eax
c0019d19:	89 c5                	mov    ebp,eax
c0019d1b:	c1 fd 1f             	sar    ebp,0x1f
c0019d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019d22:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019d26:	89 f9                	mov    ecx,edi
c0019d28:	31 c1                	xor    ecx,eax
c0019d2a:	89 cb                	mov    ebx,ecx
c0019d2c:	89 e9                	mov    ecx,ebp
c0019d2e:	31 d1                	xor    ecx,edx
c0019d30:	89 ce                	mov    esi,ecx
c0019d32:	89 f0                	mov    eax,esi
c0019d34:	09 d8                	or     eax,ebx
c0019d36:	0f 84 9c 00 00 00    	je     c0019dd8 <FAT::allocateSwapfile(char const*, int)+0x130>
c0019d3c:	83 ec 0c             	sub    esp,0xc
c0019d3f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d46:	e8 b3 e5 fe ff       	call   c00082fe <File::unlink()>
c0019d4b:	83 c4 10             	add    esp,0x10
c0019d4e:	83 ec 08             	sub    esp,0x8
c0019d51:	6a 12                	push   0x12
c0019d53:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019d5a:	e8 d1 e3 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c0019d5f:	83 c4 10             	add    esp,0x10
c0019d62:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019d69:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019d6f:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019d76:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019d7d:	c1 e0 14             	shl    eax,0x14
c0019d80:	83 ec 04             	sub    esp,0x4
c0019d83:	6a 01                	push   0x1
c0019d85:	50                   	push   eax
c0019d86:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019d8d:	e8 07 b7 fe ff       	call   c0005499 <f_expand>
c0019d92:	83 c4 10             	add    esp,0x10
c0019d95:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019d9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019d9e:	83 c0 10             	add    eax,0x10
c0019da1:	8b 00                	mov    eax,DWORD PTR [eax]
c0019da3:	83 ec 0c             	sub    esp,0xc
c0019da6:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019daa:	52                   	push   edx
c0019dab:	8d 54 24 30          	lea    edx,[esp+0x30]
c0019daf:	52                   	push   edx
c0019db0:	6a 00                	push   0x0
c0019db2:	68 00 04 00 00       	push   0x400
c0019db7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019dbe:	ff d0                	call   eax
c0019dc0:	83 c4 20             	add    esp,0x20
c0019dc3:	83 ec 0c             	sub    esp,0xc
c0019dc6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019dcd:	e8 bc e3 fe ff       	call   c000818e <File::close()>
c0019dd2:	83 c4 10             	add    esp,0x10
c0019dd5:	8d 76 00             	lea    esi,[esi+0x0]
c0019dd8:	83 ec 08             	sub    esp,0x8
c0019ddb:	6a 01                	push   0x1
c0019ddd:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019de4:	e8 47 e3 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c0019de9:	83 c4 10             	add    esp,0x10
c0019dec:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019df3:	8b 00                	mov    eax,DWORD PTR [eax]
c0019df5:	83 c0 0c             	add    eax,0xc
c0019df8:	8b 00                	mov    eax,DWORD PTR [eax]
c0019dfa:	83 ec 0c             	sub    esp,0xc
c0019dfd:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019e01:	52                   	push   edx
c0019e02:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0019e06:	52                   	push   edx
c0019e07:	6a 00                	push   0x0
c0019e09:	6a 04                	push   0x4
c0019e0b:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019e12:	ff d0                	call   eax
c0019e14:	83 c4 20             	add    esp,0x20
c0019e17:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019e1e:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019e24:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0019e2b:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019e32:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019e35:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019e3c:	83 ec 0c             	sub    esp,0xc
c0019e3f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019e46:	e8 43 e3 fe ff       	call   c000818e <File::close()>
c0019e4b:	83 c4 10             	add    esp,0x10
c0019e4e:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019e55:	ba 00 00 00 00       	mov    edx,0x0
c0019e5a:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019e60:	5b                   	pop    ebx
c0019e61:	5e                   	pop    esi
c0019e62:	5f                   	pop    edi
c0019e63:	5d                   	pop    ebp
c0019e64:	c3                   	ret    
c0019e65:	90                   	nop
c0019e66:	66 90                	xchg   ax,ax

c0019e68 <FAT::readDir(void*, unsigned long, void*, int*)>:
c0019e68:	57                   	push   edi
c0019e69:	56                   	push   esi
c0019e6a:	53                   	push   ebx
c0019e6b:	81 ec 50 02 00 00    	sub    esp,0x250
c0019e71:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c0019e79:	74 0d                	je     c0019e88 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c0019e7b:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019e83:	75 0f                	jne    c0019e94 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019e85:	8d 76 00             	lea    esi,[esi+0x0]
c0019e88:	b8 04 00 00 00       	mov    eax,0x4
c0019e8d:	e9 3a 01 00 00       	jmp    c0019fcc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019e92:	66 90                	xchg   ax,ax
c0019e94:	83 ec 08             	sub    esp,0x8
c0019e97:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019e9e:	50                   	push   eax
c0019e9f:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c0019ea6:	e8 34 aa fe ff       	call   c00048df <f_readdir>
c0019eab:	83 c4 10             	add    esp,0x10
c0019eae:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c0019eb5:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0019ebc:	83 ec 0c             	sub    esp,0xc
c0019ebf:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0019ec6:	83 c0 16             	add    eax,0x16
c0019ec9:	50                   	push   eax
c0019eca:	e8 a1 66 fe ff       	call   c0000570 <strlen>
c0019ecf:	83 c4 10             	add    esp,0x10
c0019ed2:	ba 00 00 00 00       	mov    edx,0x0
c0019ed7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019edb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019edf:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c0019ee6:	0f b6 c0             	movzx  eax,al
c0019ee9:	83 e0 10             	and    eax,0x10
c0019eec:	74 0a                	je     c0019ef8 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0019eee:	b8 02 00 00 00       	mov    eax,0x2
c0019ef3:	eb 0b                	jmp    c0019f00 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c0019ef5:	8d 76 00             	lea    esi,[esi+0x0]
c0019ef8:	b8 01 00 00 00       	mov    eax,0x1
c0019efd:	8d 76 00             	lea    esi,[esi+0x0]
c0019f00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019f04:	83 ec 08             	sub    esp,0x8
c0019f07:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019f0e:	83 c0 16             	add    eax,0x16
c0019f11:	50                   	push   eax
c0019f12:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019f16:	83 c0 10             	add    eax,0x10
c0019f19:	50                   	push   eax
c0019f1a:	e8 21 67 fe ff       	call   c0000640 <strcpy>
c0019f1f:	83 c4 10             	add    esp,0x10
c0019f22:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0019f29:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019f30:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019f34:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0019f3b:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019f42:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0019f49:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019f50:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0019f57:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019f5e:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019f65:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019f6c:	89 c6                	mov    esi,eax
c0019f6e:	89 d7                	mov    edi,edx
c0019f70:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019f72:	89 c8                	mov    eax,ecx
c0019f74:	89 fa                	mov    edx,edi
c0019f76:	89 f3                	mov    ebx,esi
c0019f78:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019f7f:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c0019f86:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019f8d:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019f94:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0019f9a:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0019fa1:	0f be c0             	movsx  eax,al
c0019fa4:	85 c0                	test   eax,eax
c0019fa6:	75 08                	jne    c0019fb0 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c0019fa8:	b8 07 00 00 00       	mov    eax,0x7
c0019fad:	eb 1d                	jmp    c0019fcc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019faf:	90                   	nop
c0019fb0:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c0019fb7:	85 c0                	test   eax,eax
c0019fb9:	75 09                	jne    c0019fc4 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c0019fbb:	b8 00 00 00 00       	mov    eax,0x0
c0019fc0:	eb 0a                	jmp    c0019fcc <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019fc2:	66 90                	xchg   ax,ax
c0019fc4:	b8 01 00 00 00       	mov    eax,0x1
c0019fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fcc:	81 c4 50 02 00 00    	add    esp,0x250
c0019fd2:	5b                   	pop    ebx
c0019fd3:	5e                   	pop    esi
c0019fd4:	5f                   	pop    edi
c0019fd5:	c3                   	ret    
c0019fd6:	66 90                	xchg   ax,ax

c0019fd8 <FAT::read(void*, unsigned long, void*, int*)>:
c0019fd8:	83 ec 1c             	sub    esp,0x1c
c0019fdb:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019fe0:	74 0a                	je     c0019fec <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0019fe2:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0019fe7:	75 0b                	jne    c0019ff4 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0019fe9:	8d 76 00             	lea    esi,[esi+0x0]
c0019fec:	b8 04 00 00 00       	mov    eax,0x4
c0019ff1:	eb 41                	jmp    c001a034 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019ff3:	90                   	nop
c0019ff4:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019ff8:	50                   	push   eax
c0019ff9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ffd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a001:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a005:	e8 fc a0 fe ff       	call   c0004106 <f_read>
c001a00a:	83 c4 10             	add    esp,0x10
c001a00d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a011:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a015:	89 c2                	mov    edx,eax
c001a017:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a01b:	89 10                	mov    DWORD PTR [eax],edx
c001a01d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a021:	85 c0                	test   eax,eax
c001a023:	75 07                	jne    c001a02c <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001a025:	b8 00 00 00 00       	mov    eax,0x0
c001a02a:	eb 08                	jmp    c001a034 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001a02c:	b8 01 00 00 00       	mov    eax,0x1
c001a031:	8d 76 00             	lea    esi,[esi+0x0]
c001a034:	83 c4 1c             	add    esp,0x1c
c001a037:	c3                   	ret    

c001a038 <FAT::write(void*, unsigned long, void*, int*)>:
c001a038:	83 ec 1c             	sub    esp,0x1c
c001a03b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a040:	74 0a                	je     c001a04c <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001a042:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001a047:	75 0b                	jne    c001a054 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001a049:	8d 76 00             	lea    esi,[esi+0x0]
c001a04c:	b8 04 00 00 00       	mov    eax,0x4
c001a051:	eb 41                	jmp    c001a094 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a053:	90                   	nop
c001a054:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a058:	50                   	push   eax
c001a059:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a05d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a061:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a065:	e8 9b a2 fe ff       	call   c0004305 <f_write>
c001a06a:	83 c4 10             	add    esp,0x10
c001a06d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a071:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a075:	89 c2                	mov    edx,eax
c001a077:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a07b:	89 10                	mov    DWORD PTR [eax],edx
c001a07d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a081:	85 c0                	test   eax,eax
c001a083:	75 07                	jne    c001a08c <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001a085:	b8 00 00 00 00       	mov    eax,0x0
c001a08a:	eb 08                	jmp    c001a094 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001a08c:	b8 01 00 00 00       	mov    eax,0x1
c001a091:	8d 76 00             	lea    esi,[esi+0x0]
c001a094:	83 c4 1c             	add    esp,0x1c
c001a097:	c3                   	ret    

c001a098 <FAT::close(void*)>:
c001a098:	83 ec 1c             	sub    esp,0x1c
c001a09b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a0a0:	75 0a                	jne    c001a0ac <FAT::close(void*)+0x14>
c001a0a2:	b8 04 00 00 00       	mov    eax,0x4
c001a0a7:	eb 3f                	jmp    c001a0e8 <FAT::close(void*)+0x50>
c001a0a9:	8d 76 00             	lea    esi,[esi+0x0]
c001a0ac:	83 ec 0c             	sub    esp,0xc
c001a0af:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0b3:	e8 5a a5 fe ff       	call   c0004612 <f_close>
c001a0b8:	83 c4 10             	add    esp,0x10
c001a0bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a0bf:	83 ec 0c             	sub    esp,0xc
c001a0c2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a0c6:	e8 c0 48 ff ff       	call   c000e98b <free>
c001a0cb:	83 c4 10             	add    esp,0x10
c001a0ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a0d2:	85 c0                	test   eax,eax
c001a0d4:	75 0a                	jne    c001a0e0 <FAT::close(void*)+0x48>
c001a0d6:	b8 00 00 00 00       	mov    eax,0x0
c001a0db:	eb 0b                	jmp    c001a0e8 <FAT::close(void*)+0x50>
c001a0dd:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e0:	b8 01 00 00 00       	mov    eax,0x1
c001a0e5:	8d 76 00             	lea    esi,[esi+0x0]
c001a0e8:	83 c4 1c             	add    esp,0x1c
c001a0eb:	c3                   	ret    

c001a0ec <FAT::closeDir(void*)>:
c001a0ec:	83 ec 1c             	sub    esp,0x1c
c001a0ef:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001a0f4:	75 0a                	jne    c001a100 <FAT::closeDir(void*)+0x14>
c001a0f6:	b8 04 00 00 00       	mov    eax,0x4
c001a0fb:	eb 3f                	jmp    c001a13c <FAT::closeDir(void*)+0x50>
c001a0fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a100:	83 ec 0c             	sub    esp,0xc
c001a103:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a107:	e8 b1 a7 fe ff       	call   c00048bd <f_closedir>
c001a10c:	83 c4 10             	add    esp,0x10
c001a10f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a113:	83 ec 0c             	sub    esp,0xc
c001a116:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a11a:	e8 6c 48 ff ff       	call   c000e98b <free>
c001a11f:	83 c4 10             	add    esp,0x10
c001a122:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a126:	85 c0                	test   eax,eax
c001a128:	75 0a                	jne    c001a134 <FAT::closeDir(void*)+0x48>
c001a12a:	b8 00 00 00 00       	mov    eax,0x0
c001a12f:	eb 0b                	jmp    c001a13c <FAT::closeDir(void*)+0x50>
c001a131:	8d 76 00             	lea    esi,[esi+0x0]
c001a134:	b8 01 00 00 00       	mov    eax,0x1
c001a139:	8d 76 00             	lea    esi,[esi+0x0]
c001a13c:	83 c4 1c             	add    esp,0x1c
c001a13f:	c3                   	ret    

c001a140 <FAT::truncate(void*, unsigned long long)>:
c001a140:	83 ec 2c             	sub    esp,0x2c
c001a143:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a147:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a14b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a14f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a153:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a158:	75 0a                	jne    c001a164 <FAT::truncate(void*, unsigned long long)+0x24>
c001a15a:	b8 04 00 00 00       	mov    eax,0x4
c001a15f:	eb 47                	jmp    c001a1a8 <FAT::truncate(void*, unsigned long long)+0x68>
c001a161:	8d 76 00             	lea    esi,[esi+0x0]
c001a164:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a168:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a16b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a16f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a177:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a17b:	83 ec 08             	sub    esp,0x8
c001a17e:	50                   	push   eax
c001a17f:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a183:	e8 b9 a4 fe ff       	call   c0004641 <f_lseek>
c001a188:	83 c4 10             	add    esp,0x10
c001a18b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a18f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a193:	85 c0                	test   eax,eax
c001a195:	75 09                	jne    c001a1a0 <FAT::truncate(void*, unsigned long long)+0x60>
c001a197:	b8 00 00 00 00       	mov    eax,0x0
c001a19c:	eb 0a                	jmp    c001a1a8 <FAT::truncate(void*, unsigned long long)+0x68>
c001a19e:	66 90                	xchg   ax,ax
c001a1a0:	b8 01 00 00 00       	mov    eax,0x1
c001a1a5:	8d 76 00             	lea    esi,[esi+0x0]
c001a1a8:	83 c4 2c             	add    esp,0x2c
c001a1ab:	c3                   	ret    

c001a1ac <FAT::seek(void*, unsigned long long)>:
c001a1ac:	83 ec 2c             	sub    esp,0x2c
c001a1af:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a1b3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1b7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a1bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a1bf:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001a1c4:	75 0a                	jne    c001a1d0 <FAT::seek(void*, unsigned long long)+0x24>
c001a1c6:	b8 04 00 00 00       	mov    eax,0x4
c001a1cb:	eb 33                	jmp    c001a200 <FAT::seek(void*, unsigned long long)+0x54>
c001a1cd:	8d 76 00             	lea    esi,[esi+0x0]
c001a1d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a1d4:	83 ec 08             	sub    esp,0x8
c001a1d7:	50                   	push   eax
c001a1d8:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001a1dc:	e8 60 a4 fe ff       	call   c0004641 <f_lseek>
c001a1e1:	83 c4 10             	add    esp,0x10
c001a1e4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a1e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a1ec:	85 c0                	test   eax,eax
c001a1ee:	75 08                	jne    c001a1f8 <FAT::seek(void*, unsigned long long)+0x4c>
c001a1f0:	b8 00 00 00 00       	mov    eax,0x0
c001a1f5:	eb 09                	jmp    c001a200 <FAT::seek(void*, unsigned long long)+0x54>
c001a1f7:	90                   	nop
c001a1f8:	b8 01 00 00 00       	mov    eax,0x1
c001a1fd:	8d 76 00             	lea    esi,[esi+0x0]
c001a200:	83 c4 2c             	add    esp,0x2c
c001a203:	c3                   	ret    

c001a204 <fatWrapperReadDisk>:
c001a204:	53                   	push   ebx
c001a205:	83 ec 18             	sub    esp,0x18
c001a208:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a20c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a210:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a215:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a21c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a220:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a224:	ba 00 00 00 00       	mov    edx,0x0
c001a229:	83 ec 0c             	sub    esp,0xc
c001a22c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a230:	53                   	push   ebx
c001a231:	52                   	push   edx
c001a232:	50                   	push   eax
c001a233:	51                   	push   ecx
c001a234:	e8 a3 fe fe ff       	call   c000a0dc <LogicalDisk::read(unsigned long long, int, void*)>
c001a239:	83 c4 20             	add    esp,0x20
c001a23c:	83 c4 18             	add    esp,0x18
c001a23f:	5b                   	pop    ebx
c001a240:	c3                   	ret    
c001a241:	8d 76 00             	lea    esi,[esi+0x0]

c001a244 <fatWrapperWriteDisk>:
c001a244:	53                   	push   ebx
c001a245:	83 ec 18             	sub    esp,0x18
c001a248:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a24c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a250:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a255:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001a25c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a260:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a264:	ba 00 00 00 00       	mov    edx,0x0
c001a269:	83 ec 0c             	sub    esp,0xc
c001a26c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001a270:	53                   	push   ebx
c001a271:	52                   	push   edx
c001a272:	50                   	push   eax
c001a273:	51                   	push   ecx
c001a274:	e8 cf fe fe ff       	call   c000a148 <LogicalDisk::write(unsigned long long, int, void*)>
c001a279:	83 c4 20             	add    esp,0x20
c001a27c:	83 c4 18             	add    esp,0x18
c001a27f:	5b                   	pop    ebx
c001a280:	c3                   	ret    
c001a281:	8d 76 00             	lea    esi,[esi+0x0]

c001a284 <fatWrapperIoctl>:
c001a284:	53                   	push   ebx
c001a285:	83 ec 28             	sub    esp,0x28
c001a288:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a28c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a290:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a294:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a298:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a29d:	83 f8 02             	cmp    eax,0x2
c001a2a0:	75 32                	jne    c001a2d4 <fatWrapperIoctl+0x50>
c001a2a2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2aa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2af:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a2b6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a2bc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a2c2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2c6:	66 89 02             	mov    WORD PTR [edx],ax
c001a2c9:	b8 00 00 00 00       	mov    eax,0x0
c001a2ce:	e9 c5 00 00 00       	jmp    c001a398 <fatWrapperIoctl+0x114>
c001a2d3:	90                   	nop
c001a2d4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a2d9:	83 f8 01             	cmp    eax,0x1
c001a2dc:	75 6a                	jne    c001a348 <fatWrapperIoctl+0xc4>
c001a2de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a2e2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a2e6:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a2eb:	8b 04 85 80 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6880]
c001a2f2:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a2f8:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001a2fe:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001a304:	89 c8                	mov    eax,ecx
c001a306:	89 da                	mov    edx,ebx
c001a308:	0f a4 c2 0a          	shld   edx,eax,0xa
c001a30c:	c1 e0 0a             	shl    eax,0xa
c001a30f:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a314:	8b 0c 8d 80 97 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd6880]
c001a31b:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001a321:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001a327:	89 cb                	mov    ebx,ecx
c001a329:	c1 fb 1f             	sar    ebx,0x1f
c001a32c:	53                   	push   ebx
c001a32d:	51                   	push   ecx
c001a32e:	52                   	push   edx
c001a32f:	50                   	push   eax
c001a330:	e8 5f 57 00 00       	call   c001fa94 <__udivdi3>
c001a335:	83 c4 10             	add    esp,0x10
c001a338:	89 c2                	mov    edx,eax
c001a33a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a33e:	89 10                	mov    DWORD PTR [eax],edx
c001a340:	b8 00 00 00 00       	mov    eax,0x0
c001a345:	eb 51                	jmp    c001a398 <fatWrapperIoctl+0x114>
c001a347:	90                   	nop
c001a348:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a34d:	85 c0                	test   eax,eax
c001a34f:	75 07                	jne    c001a358 <fatWrapperIoctl+0xd4>
c001a351:	b8 00 00 00 00       	mov    eax,0x0
c001a356:	eb 40                	jmp    c001a398 <fatWrapperIoctl+0x114>
c001a358:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a35d:	83 f8 03             	cmp    eax,0x3
c001a360:	75 1a                	jne    c001a37c <fatWrapperIoctl+0xf8>
c001a362:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a366:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a36a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a36e:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001a374:	b8 00 00 00 00       	mov    eax,0x0
c001a379:	eb 1d                	jmp    c001a398 <fatWrapperIoctl+0x114>
c001a37b:	90                   	nop
c001a37c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a381:	83 f8 04             	cmp    eax,0x4
c001a384:	75 0a                	jne    c001a390 <fatWrapperIoctl+0x10c>
c001a386:	b8 00 00 00 00       	mov    eax,0x0
c001a38b:	eb 0b                	jmp    c001a398 <fatWrapperIoctl+0x114>
c001a38d:	8d 76 00             	lea    esi,[esi+0x0]
c001a390:	b8 04 00 00 00       	mov    eax,0x4
c001a395:	8d 76 00             	lea    esi,[esi+0x0]
c001a398:	83 c4 28             	add    esp,0x28
c001a39b:	5b                   	pop    ebx
c001a39c:	c3                   	ret    
c001a39d:	90                   	nop
c001a39e:	66 90                	xchg   ax,ax

c001a3a0 <FAT::FAT()>:
c001a3a0:	83 ec 1c             	sub    esp,0x1c
c001a3a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3a7:	83 ec 0c             	sub    esp,0xc
c001a3aa:	50                   	push   eax
c001a3ab:	e8 c0 d9 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001a3b0:	83 c4 10             	add    esp,0x10
c001a3b3:	ba 58 31 02 c0       	mov    edx,0xc0023158
c001a3b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a3bc:	89 10                	mov    DWORD PTR [eax],edx
c001a3be:	c7 05 a0 c7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c7a0,0x0
c001a3c8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a3d0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001a3d5:	7f 19                	jg     c001a3f0 <FAT::FAT()+0x50>
c001a3d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a3db:	c7 04 85 c0 c7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd3840],0xffffffff
c001a3e6:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a3eb:	eb e3                	jmp    c001a3d0 <FAT::FAT()+0x30>
c001a3ed:	8d 76 00             	lea    esi,[esi+0x0]
c001a3f0:	90                   	nop
c001a3f1:	83 c4 1c             	add    esp,0x1c
c001a3f4:	c3                   	ret    
c001a3f5:	90                   	nop
c001a3f6:	66 90                	xchg   ax,ax

c001a3f8 <FAT::fixFilepath(char*)>:
c001a3f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3fc:	8a 00                	mov    al,BYTE PTR [eax]
c001a3fe:	0f be c0             	movsx  eax,al
c001a401:	83 f8 40             	cmp    eax,0x40
c001a404:	7e 2e                	jle    c001a434 <FAT::fixFilepath(char*)+0x3c>
c001a406:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a40a:	8a 00                	mov    al,BYTE PTR [eax]
c001a40c:	83 e8 41             	sub    eax,0x41
c001a40f:	88 c2                	mov    dl,al
c001a411:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a415:	88 10                	mov    BYTE PTR [eax],dl
c001a417:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a41b:	8a 00                	mov    al,BYTE PTR [eax]
c001a41d:	0f be c0             	movsx  eax,al
c001a420:	8b 04 85 c0 c7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3840]
c001a427:	83 c0 30             	add    eax,0x30
c001a42a:	88 c2                	mov    dl,al
c001a42c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a430:	88 10                	mov    BYTE PTR [eax],dl
c001a432:	66 90                	xchg   ax,ax
c001a434:	90                   	nop
c001a435:	c3                   	ret    
c001a436:	66 90                	xchg   ax,ax

c001a438 <FAT::open(char const*, void**, FileOpenMode)>:
c001a438:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a43e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a446:	74 0c                	je     c001a454 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001a448:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a450:	75 0e                	jne    c001a460 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001a452:	66 90                	xchg   ax,ax
c001a454:	b8 04 00 00 00       	mov    eax,0x4
c001a459:	e9 46 01 00 00       	jmp    c001a5a4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a45e:	66 90                	xchg   ax,ax
c001a460:	83 ec 08             	sub    esp,0x8
c001a463:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a46a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a46e:	50                   	push   eax
c001a46f:	e8 cc 61 fe ff       	call   c0000640 <strcpy>
c001a474:	83 c4 10             	add    esp,0x10
c001a477:	83 ec 08             	sub    esp,0x8
c001a47a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001a47e:	50                   	push   eax
c001a47f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a486:	e8 6d ff ff ff       	call   c001a3f8 <FAT::fixFilepath(char*)>
c001a48b:	83 c4 10             	add    esp,0x10
c001a48e:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001a496:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a49d:	83 e0 01             	and    eax,0x1
c001a4a0:	74 12                	je     c001a4b4 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001a4a2:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4a9:	83 c8 01             	or     eax,0x1
c001a4ac:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4b3:	90                   	nop
c001a4b4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4bb:	83 e0 04             	and    eax,0x4
c001a4be:	74 24                	je     c001a4e4 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001a4c0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4c7:	83 c8 30             	or     eax,0x30
c001a4ca:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4d1:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4d8:	83 c8 02             	or     eax,0x2
c001a4db:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a4e2:	66 90                	xchg   ax,ax
c001a4e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a4eb:	83 e0 02             	and    eax,0x2
c001a4ee:	74 14                	je     c001a504 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001a4f0:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a4f7:	83 c8 02             	or     eax,0x2
c001a4fa:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a501:	8d 76 00             	lea    esi,[esi+0x0]
c001a504:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a50b:	83 e0 08             	and    eax,0x8
c001a50e:	74 14                	je     c001a524 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001a510:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a517:	83 c8 04             	or     eax,0x4
c001a51a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a521:	8d 76 00             	lea    esi,[esi+0x0]
c001a524:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001a52b:	83 e0 10             	and    eax,0x10
c001a52e:	74 14                	je     c001a544 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001a530:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001a537:	83 c8 08             	or     eax,0x8
c001a53a:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001a541:	8d 76 00             	lea    esi,[esi+0x0]
c001a544:	83 ec 0c             	sub    esp,0xc
c001a547:	68 28 02 00 00       	push   0x228
c001a54c:	e8 2a 44 ff ff       	call   c000e97b <malloc>
c001a551:	83 c4 10             	add    esp,0x10
c001a554:	89 c2                	mov    edx,eax
c001a556:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a55d:	89 10                	mov    DWORD PTR [eax],edx
c001a55f:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001a567:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a56e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a570:	83 ec 04             	sub    esp,0x4
c001a573:	52                   	push   edx
c001a574:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a578:	52                   	push   edx
c001a579:	50                   	push   eax
c001a57a:	e8 c4 98 fe ff       	call   c0003e43 <f_open>
c001a57f:	83 c4 10             	add    esp,0x10
c001a582:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001a589:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001a591:	74 09                	je     c001a59c <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001a593:	b8 01 00 00 00       	mov    eax,0x1
c001a598:	eb 0a                	jmp    c001a5a4 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001a59a:	66 90                	xchg   ax,ax
c001a59c:	b8 00 00 00 00       	mov    eax,0x0
c001a5a1:	8d 76 00             	lea    esi,[esi+0x0]
c001a5a4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a5aa:	c3                   	ret    
c001a5ab:	90                   	nop

c001a5ac <FAT::openDir(char const*, void**)>:
c001a5ac:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a5b2:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a5ba:	74 0c                	je     c001a5c8 <FAT::openDir(char const*, void**)+0x1c>
c001a5bc:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001a5c4:	75 0e                	jne    c001a5d4 <FAT::openDir(char const*, void**)+0x28>
c001a5c6:	66 90                	xchg   ax,ax
c001a5c8:	b8 04 00 00 00       	mov    eax,0x4
c001a5cd:	e9 82 00 00 00       	jmp    c001a654 <FAT::openDir(char const*, void**)+0xa8>
c001a5d2:	66 90                	xchg   ax,ax
c001a5d4:	83 ec 08             	sub    esp,0x8
c001a5d7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a5de:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a5e2:	50                   	push   eax
c001a5e3:	e8 58 60 fe ff       	call   c0000640 <strcpy>
c001a5e8:	83 c4 10             	add    esp,0x10
c001a5eb:	83 ec 08             	sub    esp,0x8
c001a5ee:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a5f2:	50                   	push   eax
c001a5f3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a5fa:	e8 f9 fd ff ff       	call   c001a3f8 <FAT::fixFilepath(char*)>
c001a5ff:	83 c4 10             	add    esp,0x10
c001a602:	83 ec 0c             	sub    esp,0xc
c001a605:	6a 30                	push   0x30
c001a607:	e8 6f 43 ff ff       	call   c000e97b <malloc>
c001a60c:	83 c4 10             	add    esp,0x10
c001a60f:	89 c2                	mov    edx,eax
c001a611:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a618:	89 10                	mov    DWORD PTR [eax],edx
c001a61a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001a621:	8b 00                	mov    eax,DWORD PTR [eax]
c001a623:	83 ec 08             	sub    esp,0x8
c001a626:	8d 54 24 14          	lea    edx,[esp+0x14]
c001a62a:	52                   	push   edx
c001a62b:	50                   	push   eax
c001a62c:	e8 c1 a1 fe ff       	call   c00047f2 <f_opendir>
c001a631:	83 c4 10             	add    esp,0x10
c001a634:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a63b:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001a643:	74 07                	je     c001a64c <FAT::openDir(char const*, void**)+0xa0>
c001a645:	b8 01 00 00 00       	mov    eax,0x1
c001a64a:	eb 08                	jmp    c001a654 <FAT::openDir(char const*, void**)+0xa8>
c001a64c:	b8 00 00 00 00       	mov    eax,0x0
c001a651:	8d 76 00             	lea    esi,[esi+0x0]
c001a654:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a65a:	c3                   	ret    
c001a65b:	90                   	nop

c001a65c <FAT::stat(char const*, unsigned long long*, bool*)>:
c001a65c:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001a662:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001a66a:	75 0c                	jne    c001a678 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001a66c:	b8 04 00 00 00       	mov    eax,0x4
c001a671:	e9 d6 00 00 00       	jmp    c001a74c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a676:	66 90                	xchg   ax,ax
c001a678:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001a680:	75 0a                	jne    c001a68c <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001a682:	b8 04 00 00 00       	mov    eax,0x4
c001a687:	e9 c0 00 00 00       	jmp    c001a74c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a68c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001a694:	75 0a                	jne    c001a6a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001a696:	b8 04 00 00 00       	mov    eax,0x4
c001a69b:	e9 ac 00 00 00       	jmp    c001a74c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a6a0:	83 ec 08             	sub    esp,0x8
c001a6a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a6aa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a6b1:	50                   	push   eax
c001a6b2:	e8 89 5f fe ff       	call   c0000640 <strcpy>
c001a6b7:	83 c4 10             	add    esp,0x10
c001a6ba:	83 ec 08             	sub    esp,0x8
c001a6bd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001a6c4:	50                   	push   eax
c001a6c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001a6cc:	e8 27 fd ff ff       	call   c001a3f8 <FAT::fixFilepath(char*)>
c001a6d1:	83 c4 10             	add    esp,0x10
c001a6d4:	83 ec 08             	sub    esp,0x8
c001a6d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001a6db:	50                   	push   eax
c001a6dc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001a6e3:	50                   	push   eax
c001a6e4:	e8 88 a2 fe ff       	call   c0004971 <f_stat>
c001a6e9:	83 c4 10             	add    esp,0x10
c001a6ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001a6f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001a6fa:	85 c0                	test   eax,eax
c001a6fc:	74 0a                	je     c001a708 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001a6fe:	83 f8 04             	cmp    eax,0x4
c001a701:	74 39                	je     c001a73c <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a703:	eb 3f                	jmp    c001a744 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001a705:	8d 76 00             	lea    esi,[esi+0x0]
c001a708:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a70c:	0f b6 c0             	movzx  eax,al
c001a70f:	83 e0 10             	and    eax,0x10
c001a712:	0f 95 c2             	setne  dl
c001a715:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001a71c:	88 10                	mov    BYTE PTR [eax],dl
c001a71e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a722:	ba 00 00 00 00       	mov    edx,0x0
c001a727:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001a72e:	89 01                	mov    DWORD PTR [ecx],eax
c001a730:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a733:	b8 00 00 00 00       	mov    eax,0x0
c001a738:	eb 12                	jmp    c001a74c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a73a:	66 90                	xchg   ax,ax
c001a73c:	b8 02 00 00 00       	mov    eax,0x2
c001a741:	eb 09                	jmp    c001a74c <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001a743:	90                   	nop
c001a744:	b8 01 00 00 00       	mov    eax,0x1
c001a749:	8d 76 00             	lea    esi,[esi+0x0]
c001a74c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001a752:	c3                   	ret    
c001a753:	90                   	nop

c001a754 <FAT::unlink(char const*)>:
c001a754:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a75a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001a762:	75 08                	jne    c001a76c <FAT::unlink(char const*)+0x18>
c001a764:	b8 04 00 00 00       	mov    eax,0x4
c001a769:	eb 61                	jmp    c001a7cc <FAT::unlink(char const*)+0x78>
c001a76b:	90                   	nop
c001a76c:	83 ec 08             	sub    esp,0x8
c001a76f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a776:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a77a:	50                   	push   eax
c001a77b:	e8 c0 5e fe ff       	call   c0000640 <strcpy>
c001a780:	83 c4 10             	add    esp,0x10
c001a783:	83 ec 08             	sub    esp,0x8
c001a786:	8d 44 24 14          	lea    eax,[esp+0x14]
c001a78a:	50                   	push   eax
c001a78b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001a792:	e8 61 fc ff ff       	call   c001a3f8 <FAT::fixFilepath(char*)>
c001a797:	83 c4 10             	add    esp,0x10
c001a79a:	83 ec 0c             	sub    esp,0xc
c001a79d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a7a1:	50                   	push   eax
c001a7a2:	e8 3c a4 fe ff       	call   c0004be3 <f_unlink>
c001a7a7:	83 c4 10             	add    esp,0x10
c001a7aa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001a7b1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001a7b8:	85 c0                	test   eax,eax
c001a7ba:	75 08                	jne    c001a7c4 <FAT::unlink(char const*)+0x70>
c001a7bc:	b8 00 00 00 00       	mov    eax,0x0
c001a7c1:	eb 09                	jmp    c001a7cc <FAT::unlink(char const*)+0x78>
c001a7c3:	90                   	nop
c001a7c4:	b8 01 00 00 00       	mov    eax,0x1
c001a7c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7cc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a7d2:	c3                   	ret    
c001a7d3:	90                   	nop

c001a7d4 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001a7d4:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a7da:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001a7e1:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001a7e8:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001a7ec:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a7f0:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a7f8:	75 0a                	jne    c001a804 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001a7fa:	b8 04 00 00 00       	mov    eax,0x4
c001a7ff:	e9 7c 01 00 00       	jmp    c001a980 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a804:	83 ec 08             	sub    esp,0x8
c001a807:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a80e:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a812:	50                   	push   eax
c001a813:	e8 28 5e fe ff       	call   c0000640 <strcpy>
c001a818:	83 c4 10             	add    esp,0x10
c001a81b:	83 ec 08             	sub    esp,0x8
c001a81e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a822:	50                   	push   eax
c001a823:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001a82a:	e8 c9 fb ff ff       	call   c001a3f8 <FAT::fixFilepath(char*)>
c001a82f:	83 c4 10             	add    esp,0x10
c001a832:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001a83a:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001a842:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a847:	83 e0 01             	and    eax,0x1
c001a84a:	74 14                	je     c001a860 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001a84c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a853:	83 c8 01             	or     eax,0x1
c001a856:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a85d:	8d 76 00             	lea    esi,[esi+0x0]
c001a860:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a865:	83 e0 02             	and    eax,0x2
c001a868:	74 12                	je     c001a87c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001a86a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a871:	83 c8 20             	or     eax,0x20
c001a874:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a87b:	90                   	nop
c001a87c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a881:	83 e0 04             	and    eax,0x4
c001a884:	74 12                	je     c001a898 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001a886:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a88d:	83 c8 04             	or     eax,0x4
c001a890:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a897:	90                   	nop
c001a898:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a89d:	83 e0 08             	and    eax,0x8
c001a8a0:	74 12                	je     c001a8b4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001a8a2:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a8a9:	83 c8 02             	or     eax,0x2
c001a8ac:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001a8b3:	90                   	nop
c001a8b4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a8b9:	83 e0 01             	and    eax,0x1
c001a8bc:	74 12                	je     c001a8d0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001a8be:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8c5:	83 c8 01             	or     eax,0x1
c001a8c8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8cf:	90                   	nop
c001a8d0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a8d5:	83 e0 02             	and    eax,0x2
c001a8d8:	74 12                	je     c001a8ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001a8da:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8e1:	83 c8 20             	or     eax,0x20
c001a8e4:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a8eb:	90                   	nop
c001a8ec:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a8f1:	83 e0 04             	and    eax,0x4
c001a8f4:	74 12                	je     c001a908 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001a8f6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a8fd:	83 c8 04             	or     eax,0x4
c001a900:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a907:	90                   	nop
c001a908:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a90d:	83 e0 08             	and    eax,0x8
c001a910:	74 12                	je     c001a924 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001a912:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001a919:	83 c8 02             	or     eax,0x2
c001a91c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a923:	90                   	nop
c001a924:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001a92b:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001a932:	09 d0                	or     eax,edx
c001a934:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001a93b:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001a943:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001a94b:	83 ec 04             	sub    esp,0x4
c001a94e:	52                   	push   edx
c001a94f:	50                   	push   eax
c001a950:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a954:	50                   	push   eax
c001a955:	e8 fe a6 fe ff       	call   c0005058 <f_chmod>
c001a95a:	83 c4 10             	add    esp,0x10
c001a95d:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001a964:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001a96b:	85 c0                	test   eax,eax
c001a96d:	75 09                	jne    c001a978 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001a96f:	b8 00 00 00 00       	mov    eax,0x0
c001a974:	eb 0a                	jmp    c001a980 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001a976:	66 90                	xchg   ax,ax
c001a978:	b8 01 00 00 00       	mov    eax,0x1
c001a97d:	8d 76 00             	lea    esi,[esi+0x0]
c001a980:	81 c4 2c 01 00 00    	add    esp,0x12c
c001a986:	c3                   	ret    
c001a987:	90                   	nop

c001a988 <FAT::rename(char const*, char const*)>:
c001a988:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001a98e:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001a996:	74 0c                	je     c001a9a4 <FAT::rename(char const*, char const*)+0x1c>
c001a998:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001a9a0:	75 0e                	jne    c001a9b0 <FAT::rename(char const*, char const*)+0x28>
c001a9a2:	66 90                	xchg   ax,ax
c001a9a4:	b8 04 00 00 00       	mov    eax,0x4
c001a9a9:	e9 9e 00 00 00       	jmp    c001aa4c <FAT::rename(char const*, char const*)+0xc4>
c001a9ae:	66 90                	xchg   ax,ax
c001a9b0:	83 ec 08             	sub    esp,0x8
c001a9b3:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a9ba:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001a9c1:	50                   	push   eax
c001a9c2:	e8 79 5c fe ff       	call   c0000640 <strcpy>
c001a9c7:	83 c4 10             	add    esp,0x10
c001a9ca:	83 ec 08             	sub    esp,0x8
c001a9cd:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001a9d4:	50                   	push   eax
c001a9d5:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001a9dc:	e8 17 fa ff ff       	call   c001a3f8 <FAT::fixFilepath(char*)>
c001a9e1:	83 c4 10             	add    esp,0x10
c001a9e4:	83 ec 08             	sub    esp,0x8
c001a9e7:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001a9ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a9f2:	50                   	push   eax
c001a9f3:	e8 48 5c fe ff       	call   c0000640 <strcpy>
c001a9f8:	83 c4 10             	add    esp,0x10
c001a9fb:	83 ec 08             	sub    esp,0x8
c001a9fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa02:	50                   	push   eax
c001aa03:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001aa0a:	e8 e9 f9 ff ff       	call   c001a3f8 <FAT::fixFilepath(char*)>
c001aa0f:	83 c4 10             	add    esp,0x10
c001aa12:	83 ec 08             	sub    esp,0x8
c001aa15:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa19:	50                   	push   eax
c001aa1a:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001aa21:	50                   	push   eax
c001aa22:	e8 79 a4 fe ff       	call   c0004ea0 <f_rename>
c001aa27:	83 c4 10             	add    esp,0x10
c001aa2a:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001aa31:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001aa38:	85 c0                	test   eax,eax
c001aa3a:	75 08                	jne    c001aa44 <FAT::rename(char const*, char const*)+0xbc>
c001aa3c:	b8 00 00 00 00       	mov    eax,0x0
c001aa41:	eb 09                	jmp    c001aa4c <FAT::rename(char const*, char const*)+0xc4>
c001aa43:	90                   	nop
c001aa44:	b8 01 00 00 00       	mov    eax,0x1
c001aa49:	8d 76 00             	lea    esi,[esi+0x0]
c001aa4c:	81 c4 1c 02 00 00    	add    esp,0x21c
c001aa52:	c3                   	ret    
c001aa53:	90                   	nop

c001aa54 <FAT::mkdir(char const*)>:
c001aa54:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001aa5a:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001aa62:	75 08                	jne    c001aa6c <FAT::mkdir(char const*)+0x18>
c001aa64:	b8 04 00 00 00       	mov    eax,0x4
c001aa69:	eb 61                	jmp    c001aacc <FAT::mkdir(char const*)+0x78>
c001aa6b:	90                   	nop
c001aa6c:	83 ec 08             	sub    esp,0x8
c001aa6f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa76:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aa7a:	50                   	push   eax
c001aa7b:	e8 c0 5b fe ff       	call   c0000640 <strcpy>
c001aa80:	83 c4 10             	add    esp,0x10
c001aa83:	83 ec 08             	sub    esp,0x8
c001aa86:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aa8a:	50                   	push   eax
c001aa8b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001aa92:	e8 61 f9 ff ff       	call   c001a3f8 <FAT::fixFilepath(char*)>
c001aa97:	83 c4 10             	add    esp,0x10
c001aa9a:	83 ec 0c             	sub    esp,0xc
c001aa9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c001aaa1:	50                   	push   eax
c001aaa2:	e8 5e a2 fe ff       	call   c0004d05 <f_mkdir>
c001aaa7:	83 c4 10             	add    esp,0x10
c001aaaa:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001aab1:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001aab8:	85 c0                	test   eax,eax
c001aaba:	75 08                	jne    c001aac4 <FAT::mkdir(char const*)+0x70>
c001aabc:	b8 00 00 00 00       	mov    eax,0x0
c001aac1:	eb 09                	jmp    c001aacc <FAT::mkdir(char const*)+0x78>
c001aac3:	90                   	nop
c001aac4:	b8 01 00 00 00       	mov    eax,0x1
c001aac9:	8d 76 00             	lea    esi,[esi+0x0]
c001aacc:	81 c4 1c 01 00 00    	add    esp,0x11c
c001aad2:	c3                   	ret    
c001aad3:	90                   	nop

c001aad4 <FAT::exists(char const*)>:
c001aad4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001aada:	83 ec 08             	sub    esp,0x8
c001aadd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001aae4:	8d 44 24 10          	lea    eax,[esp+0x10]
c001aae8:	50                   	push   eax
c001aae9:	e8 52 5b fe ff       	call   c0000640 <strcpy>
c001aaee:	83 c4 10             	add    esp,0x10
c001aaf1:	83 ec 08             	sub    esp,0x8
c001aaf4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001aaf8:	50                   	push   eax
c001aaf9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001ab00:	e8 f3 f8 ff ff       	call   c001a3f8 <FAT::fixFilepath(char*)>
c001ab05:	83 c4 10             	add    esp,0x10
c001ab08:	83 ec 08             	sub    esp,0x8
c001ab0b:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001ab12:	50                   	push   eax
c001ab13:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ab17:	50                   	push   eax
c001ab18:	e8 54 9e fe ff       	call   c0004971 <f_stat>
c001ab1d:	83 c4 10             	add    esp,0x10
c001ab20:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001ab27:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001ab2e:	85 c0                	test   eax,eax
c001ab30:	75 06                	jne    c001ab38 <FAT::exists(char const*)+0x64>
c001ab32:	b0 01                	mov    al,0x1
c001ab34:	eb 06                	jmp    c001ab3c <FAT::exists(char const*)+0x68>
c001ab36:	66 90                	xchg   ax,ax
c001ab38:	b0 00                	mov    al,0x0
c001ab3a:	66 90                	xchg   ax,ax
c001ab3c:	81 c4 2c 02 00 00    	add    esp,0x22c
c001ab42:	c3                   	ret    
c001ab43:	90                   	nop

c001ab44 <isoReadDiscSectorHelper>:
c001ab44:	83 ec 2c             	sub    esp,0x2c
c001ab47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ab4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ab4f:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ab54:	83 e8 41             	sub    eax,0x41
c001ab57:	8b 0c 85 80 97 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd6880]
c001ab5e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab62:	ba 00 00 00 00       	mov    edx,0x0
c001ab67:	83 ec 0c             	sub    esp,0xc
c001ab6a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ab6e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ab72:	52                   	push   edx
c001ab73:	50                   	push   eax
c001ab74:	51                   	push   ecx
c001ab75:	e8 62 f5 fe ff       	call   c000a0dc <LogicalDisk::read(unsigned long long, int, void*)>
c001ab7a:	83 c4 20             	add    esp,0x20
c001ab7d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ab81:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ab86:	74 0c                	je     c001ab94 <isoReadDiscSectorHelper+0x50>
c001ab88:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab8c:	c1 e0 0b             	shl    eax,0xb
c001ab8f:	eb 0b                	jmp    c001ab9c <isoReadDiscSectorHelper+0x58>
c001ab91:	8d 76 00             	lea    esi,[esi+0x0]
c001ab94:	b8 00 00 00 00       	mov    eax,0x0
c001ab99:	8d 76 00             	lea    esi,[esi+0x0]
c001ab9c:	83 c4 2c             	add    esp,0x2c
c001ab9f:	c3                   	ret    

c001aba0 <iso_kprintf>:
c001aba0:	83 ec 0c             	sub    esp,0xc
c001aba3:	83 ec 08             	sub    esp,0x8
c001aba6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001abaa:	68 2f 2e 02 c0       	push   0xc0022e2f
c001abaf:	e8 b0 c3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001abb4:	83 c4 10             	add    esp,0x10
c001abb7:	90                   	nop
c001abb8:	83 c4 0c             	add    esp,0xc
c001abbb:	c3                   	ret    

c001abbc <iso_kprintfd>:
c001abbc:	83 ec 0c             	sub    esp,0xc
c001abbf:	83 ec 08             	sub    esp,0x8
c001abc2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001abc6:	68 01 15 02 c0       	push   0xc0021501
c001abcb:	e8 94 c3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001abd0:	83 c4 10             	add    esp,0x10
c001abd3:	90                   	nop
c001abd4:	83 c4 0c             	add    esp,0xc
c001abd7:	c3                   	ret    

c001abd8 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001abd8:	b8 08 00 00 00       	mov    eax,0x8
c001abdd:	c3                   	ret    

c001abde <ISO9660::truncate(void*, unsigned long long)>:
c001abde:	b8 01 00 00 00       	mov    eax,0x1
c001abe3:	c3                   	ret    

c001abe4 <ISO9660::getName()>:
c001abe4:	b8 bc 31 02 c0       	mov    eax,0xc00231bc
c001abe9:	c3                   	ret    

c001abea <ISO9660::closeDir(void*)>:
c001abea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abee:	8b 00                	mov    eax,DWORD PTR [eax]
c001abf0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001abf3:	90                   	nop

c001abf4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001abf4:	b8 01 00 00 00       	mov    eax,0x1
c001abf9:	c3                   	ret    

c001abfa <ISO9660::unlink(char const*)>:
c001abfa:	b8 01 00 00 00       	mov    eax,0x1
c001abff:	c3                   	ret    

c001ac00 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001ac00:	b8 03 00 00 00       	mov    eax,0x3
c001ac05:	c3                   	ret    

c001ac06 <ISO9660::rename(char const*, char const*)>:
c001ac06:	b8 01 00 00 00       	mov    eax,0x1
c001ac0b:	c3                   	ret    

c001ac0c <ISO9660::mkdir(char const*)>:
c001ac0c:	b8 01 00 00 00       	mov    eax,0x1
c001ac11:	c3                   	ret    

c001ac12 <ISO9660::~ISO9660()>:
c001ac12:	83 ec 0c             	sub    esp,0xc
c001ac15:	ba fc 32 02 c0       	mov    edx,0xc00232fc
c001ac1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac1e:	89 10                	mov    DWORD PTR [eax],edx
c001ac20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac24:	83 ec 0c             	sub    esp,0xc
c001ac27:	50                   	push   eax
c001ac28:	e8 67 d1 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001ac2d:	83 c4 10             	add    esp,0x10
c001ac30:	90                   	nop
c001ac31:	83 c4 0c             	add    esp,0xc
c001ac34:	c3                   	ret    
c001ac35:	90                   	nop

c001ac36 <ISO9660::~ISO9660()>:
c001ac36:	83 ec 0c             	sub    esp,0xc
c001ac39:	83 ec 0c             	sub    esp,0xc
c001ac3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac40:	e8 cd ff ff ff       	call   c001ac12 <ISO9660::~ISO9660()>
c001ac45:	83 c4 10             	add    esp,0x10
c001ac48:	83 ec 08             	sub    esp,0x8
c001ac4b:	6a 08                	push   0x8
c001ac4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ac51:	e8 b2 1a ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c001ac56:	83 c4 10             	add    esp,0x10
c001ac59:	83 c4 0c             	add    esp,0xc
c001ac5c:	c3                   	ret    
c001ac5d:	90                   	nop

c001ac5e <ISO9660::exists(char const*)>:
c001ac5e:	83 ec 18             	sub    esp,0x18
c001ac61:	68 d7 31 02 c0       	push   0xc00231d7
c001ac66:	e8 67 40 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001ac6b:	31 c0                	xor    eax,eax
c001ac6d:	83 c4 1c             	add    esp,0x1c
c001ac70:	c3                   	ret    
c001ac71:	90                   	nop

c001ac72 <ISO9660::open(char const*, void**, FileOpenMode)>:
c001ac72:	56                   	push   esi
c001ac73:	53                   	push   ebx
c001ac74:	53                   	push   ebx
c001ac75:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ac79:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001ac7d:	85 db                	test   ebx,ebx
c001ac7f:	0f 84 ca 00 00 00    	je     c001ad4f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ac85:	85 f6                	test   esi,esi
c001ac87:	0f 84 c2 00 00 00    	je     c001ad4f <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001ac8d:	b8 03 00 00 00       	mov    eax,0x3
c001ac92:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001ac97:	0f 85 b7 00 00 00    	jne    c001ad54 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ac9d:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001ac9f:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001aca6:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001acac:	74 1b                	je     c001acc9 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001acae:	85 c0                	test   eax,eax
c001acb0:	74 10                	je     c001acc2 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001acb2:	83 ec 0c             	sub    esp,0xc
c001acb5:	68 f5 31 02 c0       	push   0xc00231f5
c001acba:	e8 13 40 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001acbf:	83 c4 10             	add    esp,0x10
c001acc2:	8a 03                	mov    al,BYTE PTR [ebx]
c001acc4:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001acc9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001accc:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001acd3:	85 c0                	test   eax,eax
c001acd5:	74 09                	je     c001ace0 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001acd7:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001acde:	74 48                	je     c001ad28 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001ace0:	83 ec 0c             	sub    esp,0xc
c001ace3:	68 05 32 02 c0       	push   0xc0023205
c001ace8:	e8 77 c2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001aced:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001acf0:	83 c4 10             	add    esp,0x10
c001acf3:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001acfa:	85 c0                	test   eax,eax
c001acfc:	74 17                	je     c001ad15 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001acfe:	83 ec 0c             	sub    esp,0xc
c001ad01:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001ad08:	68 25 32 02 c0       	push   0xc0023225
c001ad0d:	e8 52 c2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ad12:	83 c4 10             	add    esp,0x10
c001ad15:	83 ec 0c             	sub    esp,0xc
c001ad18:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001ad1f:	50                   	push   eax
c001ad20:	e8 09 bf fe ff       	call   c0006c2e <init_percd>
c001ad25:	83 c4 10             	add    esp,0x10
c001ad28:	83 c3 03             	add    ebx,0x3
c001ad2b:	51                   	push   ecx
c001ad2c:	51                   	push   ecx
c001ad2d:	6a 00                	push   0x0
c001ad2f:	53                   	push   ebx
c001ad30:	e8 c0 b9 fe ff       	call   c00066f5 <iso_open>
c001ad35:	83 c4 10             	add    esp,0x10
c001ad38:	89 c2                	mov    edx,eax
c001ad3a:	b8 01 00 00 00       	mov    eax,0x1
c001ad3f:	83 fa ff             	cmp    edx,0xffffffff
c001ad42:	74 10                	je     c001ad54 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ad44:	83 c2 32             	add    edx,0x32
c001ad47:	31 c0                	xor    eax,eax
c001ad49:	01 d2                	add    edx,edx
c001ad4b:	89 16                	mov    DWORD PTR [esi],edx
c001ad4d:	eb 05                	jmp    c001ad54 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001ad4f:	b8 04 00 00 00       	mov    eax,0x4
c001ad54:	5a                   	pop    edx
c001ad55:	5b                   	pop    ebx
c001ad56:	5e                   	pop    esi
c001ad57:	c3                   	ret    

c001ad58 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001ad58:	53                   	push   ebx
c001ad59:	83 ec 08             	sub    esp,0x8
c001ad5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad60:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ad64:	85 c0                	test   eax,eax
c001ad66:	74 2d                	je     c001ad95 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ad68:	85 db                	test   ebx,ebx
c001ad6a:	74 29                	je     c001ad95 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001ad6c:	b9 02 00 00 00       	mov    ecx,0x2
c001ad71:	52                   	push   edx
c001ad72:	99                   	cdq    
c001ad73:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ad77:	f7 f9                	idiv   ecx
c001ad79:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ad7d:	83 e8 32             	sub    eax,0x32
c001ad80:	50                   	push   eax
c001ad81:	e8 17 ba fe ff       	call   c000679d <iso_read>
c001ad86:	83 c4 10             	add    esp,0x10
c001ad89:	89 03                	mov    DWORD PTR [ebx],eax
c001ad8b:	09 d0                	or     eax,edx
c001ad8d:	0f 94 c0             	sete   al
c001ad90:	0f b6 c0             	movzx  eax,al
c001ad93:	eb 05                	jmp    c001ad9a <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001ad95:	b8 04 00 00 00       	mov    eax,0x4
c001ad9a:	83 c4 08             	add    esp,0x8
c001ad9d:	5b                   	pop    ebx
c001ad9e:	c3                   	ret    
c001ad9f:	90                   	nop

c001ada0 <ISO9660::seek(void*, unsigned long long)>:
c001ada0:	57                   	push   edi
c001ada1:	56                   	push   esi
c001ada2:	b8 04 00 00 00       	mov    eax,0x4
c001ada7:	51                   	push   ecx
c001ada8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001adac:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001adb0:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001adb4:	85 d2                	test   edx,edx
c001adb6:	74 26                	je     c001adde <ISO9660::seek(void*, unsigned long long)+0x3e>
c001adb8:	6a 00                	push   0x0
c001adba:	b9 02 00 00 00       	mov    ecx,0x2
c001adbf:	57                   	push   edi
c001adc0:	89 d0                	mov    eax,edx
c001adc2:	56                   	push   esi
c001adc3:	99                   	cdq    
c001adc4:	f7 f9                	idiv   ecx
c001adc6:	83 e8 32             	sub    eax,0x32
c001adc9:	50                   	push   eax
c001adca:	e8 e4 ba fe ff       	call   c00068b3 <iso_seek>
c001adcf:	83 c4 10             	add    esp,0x10
c001add2:	31 f0                	xor    eax,esi
c001add4:	31 fa                	xor    edx,edi
c001add6:	09 d0                	or     eax,edx
c001add8:	0f 95 c0             	setne  al
c001addb:	0f b6 c0             	movzx  eax,al
c001adde:	5a                   	pop    edx
c001addf:	5e                   	pop    esi
c001ade0:	5f                   	pop    edi
c001ade1:	c3                   	ret    

c001ade2 <ISO9660::tell(void*, unsigned long long*)>:
c001ade2:	53                   	push   ebx
c001ade3:	83 ec 08             	sub    esp,0x8
c001ade6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adea:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001adee:	85 c0                	test   eax,eax
c001adf0:	74 24                	je     c001ae16 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001adf2:	85 db                	test   ebx,ebx
c001adf4:	74 20                	je     c001ae16 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001adf6:	83 ec 0c             	sub    esp,0xc
c001adf9:	b9 02 00 00 00       	mov    ecx,0x2
c001adfe:	99                   	cdq    
c001adff:	f7 f9                	idiv   ecx
c001ae01:	83 e8 32             	sub    eax,0x32
c001ae04:	50                   	push   eax
c001ae05:	e8 2d bb fe ff       	call   c0006937 <iso_tell>
c001ae0a:	83 c4 10             	add    esp,0x10
c001ae0d:	89 03                	mov    DWORD PTR [ebx],eax
c001ae0f:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001ae12:	31 c0                	xor    eax,eax
c001ae14:	eb 05                	jmp    c001ae1b <ISO9660::tell(void*, unsigned long long*)+0x39>
c001ae16:	b8 04 00 00 00       	mov    eax,0x4
c001ae1b:	83 c4 08             	add    esp,0x8
c001ae1e:	5b                   	pop    ebx
c001ae1f:	c3                   	ret    

c001ae20 <ISO9660::stat(void*, unsigned long long*)>:
c001ae20:	53                   	push   ebx
c001ae21:	83 ec 14             	sub    esp,0x14
c001ae24:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001ae28:	68 49 32 02 c0       	push   0xc0023249
c001ae2d:	e8 32 c1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ae32:	83 c4 10             	add    esp,0x10
c001ae35:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ae3a:	74 2c                	je     c001ae68 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ae3c:	85 db                	test   ebx,ebx
c001ae3e:	74 28                	je     c001ae68 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001ae40:	83 ec 0c             	sub    esp,0xc
c001ae43:	b9 02 00 00 00       	mov    ecx,0x2
c001ae48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae4c:	99                   	cdq    
c001ae4d:	f7 f9                	idiv   ecx
c001ae4f:	83 e8 32             	sub    eax,0x32
c001ae52:	50                   	push   eax
c001ae53:	e8 10 bb fe ff       	call   c0006968 <iso_total>
c001ae58:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ae5f:	89 03                	mov    DWORD PTR [ebx],eax
c001ae61:	83 c4 10             	add    esp,0x10
c001ae64:	31 c0                	xor    eax,eax
c001ae66:	eb 05                	jmp    c001ae6d <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001ae68:	b8 04 00 00 00       	mov    eax,0x4
c001ae6d:	83 c4 08             	add    esp,0x8
c001ae70:	5b                   	pop    ebx
c001ae71:	c3                   	ret    

c001ae72 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001ae72:	55                   	push   ebp
c001ae73:	57                   	push   edi
c001ae74:	56                   	push   esi
c001ae75:	53                   	push   ebx
c001ae76:	83 ec 18             	sub    esp,0x18
c001ae79:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ae7d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001ae81:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ae85:	68 51 32 02 c0       	push   0xc0023251
c001ae8a:	e8 d5 c0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ae8f:	83 c4 10             	add    esp,0x10
c001ae92:	85 ff                	test   edi,edi
c001ae94:	0f 94 c0             	sete   al
c001ae97:	85 f6                	test   esi,esi
c001ae99:	0f 94 c2             	sete   dl
c001ae9c:	09 d0                	or     eax,edx
c001ae9e:	a8 01                	test   al,0x1
c001aea0:	0f 85 dd 00 00 00    	jne    c001af83 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001aea6:	85 db                	test   ebx,ebx
c001aea8:	0f 84 d5 00 00 00    	je     c001af83 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001aeae:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001aeb1:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001aeb7:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001aebe:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001aec5:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001aec7:	38 0d a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,cl
c001aecd:	74 1b                	je     c001aeea <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001aecf:	85 c0                	test   eax,eax
c001aed1:	74 10                	je     c001aee3 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001aed3:	83 ec 0c             	sub    esp,0xc
c001aed6:	68 f5 31 02 c0       	push   0xc00231f5
c001aedb:	e8 f2 3d ff ff       	call   c000ecd2 <KePanic(char const*)>
c001aee0:	83 c4 10             	add    esp,0x10
c001aee3:	8a 03                	mov    al,BYTE PTR [ebx]
c001aee5:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001aeea:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001aeed:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001aef4:	85 c0                	test   eax,eax
c001aef6:	74 09                	je     c001af01 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001aef8:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001aeff:	74 51                	je     c001af52 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001af01:	83 ec 0c             	sub    esp,0xc
c001af04:	68 59 32 02 c0       	push   0xc0023259
c001af09:	e8 56 c0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001af0e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af11:	83 c4 10             	add    esp,0x10
c001af14:	83 3c 85 7c 96 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd6984],0x0
c001af1c:	74 21                	je     c001af3f <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001af1e:	83 ec 0c             	sub    esp,0xc
c001af21:	68 79 32 02 c0       	push   0xc0023279
c001af26:	e8 39 c0 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001af2b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001af2e:	83 c4 10             	add    esp,0x10
c001af31:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001af38:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001af3f:	83 ec 0c             	sub    esp,0xc
c001af42:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001af49:	50                   	push   eax
c001af4a:	e8 df bc fe ff       	call   c0006c2e <init_percd>
c001af4f:	83 c4 10             	add    esp,0x10
c001af52:	83 c3 03             	add    ebx,0x3
c001af55:	52                   	push   edx
c001af56:	52                   	push   edx
c001af57:	6a 00                	push   0x0
c001af59:	53                   	push   ebx
c001af5a:	e8 96 b7 fe ff       	call   c00066f5 <iso_open>
c001af5f:	83 c4 10             	add    esp,0x10
c001af62:	89 c5                	mov    ebp,eax
c001af64:	83 f8 ff             	cmp    eax,0xffffffff
c001af67:	75 21                	jne    c001af8a <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001af69:	50                   	push   eax
c001af6a:	50                   	push   eax
c001af6b:	6a 01                	push   0x1
c001af6d:	53                   	push   ebx
c001af6e:	e8 82 b7 fe ff       	call   c00066f5 <iso_open>
c001af73:	83 c4 10             	add    esp,0x10
c001af76:	ba 02 00 00 00       	mov    edx,0x2
c001af7b:	40                   	inc    eax
c001af7c:	74 2b                	je     c001afa9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001af7e:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001af81:	eb 24                	jmp    c001afa7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001af83:	ba 04 00 00 00       	mov    edx,0x4
c001af88:	eb 1f                	jmp    c001afa9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001af8a:	83 ec 0c             	sub    esp,0xc
c001af8d:	50                   	push   eax
c001af8e:	e8 d5 b9 fe ff       	call   c0006968 <iso_total>
c001af93:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001af9a:	89 07                	mov    DWORD PTR [edi],eax
c001af9c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001af9f:	e8 db b7 fe ff       	call   c000677f <iso_close>
c001afa4:	83 c4 10             	add    esp,0x10
c001afa7:	31 d2                	xor    edx,edx
c001afa9:	83 c4 0c             	add    esp,0xc
c001afac:	89 d0                	mov    eax,edx
c001afae:	5b                   	pop    ebx
c001afaf:	5e                   	pop    esi
c001afb0:	5f                   	pop    edi
c001afb1:	5d                   	pop    ebp
c001afb2:	c3                   	ret    
c001afb3:	90                   	nop

c001afb4 <ISO9660::close(void*)>:
c001afb4:	83 ec 0c             	sub    esp,0xc
c001afb7:	b8 04 00 00 00       	mov    eax,0x4
c001afbc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001afc0:	85 d2                	test   edx,edx
c001afc2:	74 1b                	je     c001afdf <ISO9660::close(void*)+0x2b>
c001afc4:	83 ec 0c             	sub    esp,0xc
c001afc7:	b9 02 00 00 00       	mov    ecx,0x2
c001afcc:	89 d0                	mov    eax,edx
c001afce:	99                   	cdq    
c001afcf:	f7 f9                	idiv   ecx
c001afd1:	83 e8 32             	sub    eax,0x32
c001afd4:	50                   	push   eax
c001afd5:	e8 a5 b7 fe ff       	call   c000677f <iso_close>
c001afda:	83 c4 10             	add    esp,0x10
c001afdd:	31 c0                	xor    eax,eax
c001afdf:	83 c4 0c             	add    esp,0xc
c001afe2:	c3                   	ret    
c001afe3:	90                   	nop

c001afe4 <ISO9660::openDir(char const*, void**)>:
c001afe4:	56                   	push   esi
c001afe5:	53                   	push   ebx
c001afe6:	50                   	push   eax
c001afe7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001afeb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001afef:	85 db                	test   ebx,ebx
c001aff1:	0f 84 bd 00 00 00    	je     c001b0b4 <ISO9660::openDir(char const*, void**)+0xd0>
c001aff7:	85 f6                	test   esi,esi
c001aff9:	0f 84 b5 00 00 00    	je     c001b0b4 <ISO9660::openDir(char const*, void**)+0xd0>
c001afff:	8a 13                	mov    dl,BYTE PTR [ebx]
c001b001:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b008:	38 15 a0 c8 02 c0    	cmp    BYTE PTR ds:0xc002c8a0,dl
c001b00e:	74 1b                	je     c001b02b <ISO9660::openDir(char const*, void**)+0x47>
c001b010:	85 c0                	test   eax,eax
c001b012:	74 10                	je     c001b024 <ISO9660::openDir(char const*, void**)+0x40>
c001b014:	83 ec 0c             	sub    esp,0xc
c001b017:	68 f5 31 02 c0       	push   0xc00231f5
c001b01c:	e8 b1 3c ff ff       	call   c000ecd2 <KePanic(char const*)>
c001b021:	83 c4 10             	add    esp,0x10
c001b024:	8a 03                	mov    al,BYTE PTR [ebx]
c001b026:	a2 a0 c8 02 c0       	mov    ds:0xc002c8a0,al
c001b02b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001b02e:	8b 04 85 7c 96 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6984]
c001b035:	85 c0                	test   eax,eax
c001b037:	74 10                	je     c001b049 <ISO9660::openDir(char const*, void**)+0x65>
c001b039:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001b040:	74 1a                	je     c001b05c <ISO9660::openDir(char const*, void**)+0x78>
c001b042:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001b049:	83 ec 0c             	sub    esp,0xc
c001b04c:	0f be 05 a0 c8 02 c0 	movsx  eax,BYTE PTR ds:0xc002c8a0
c001b053:	50                   	push   eax
c001b054:	e8 d5 bb fe ff       	call   c0006c2e <init_percd>
c001b059:	83 c4 10             	add    esp,0x10
c001b05c:	83 c3 03             	add    ebx,0x3
c001b05f:	50                   	push   eax
c001b060:	50                   	push   eax
c001b061:	6a 01                	push   0x1
c001b063:	53                   	push   ebx
c001b064:	e8 8c b6 fe ff       	call   c00066f5 <iso_open>
c001b069:	83 c4 10             	add    esp,0x10
c001b06c:	89 c3                	mov    ebx,eax
c001b06e:	83 f8 ff             	cmp    eax,0xffffffff
c001b071:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b076:	75 1c                	jne    c001b094 <ISO9660::openDir(char const*, void**)+0xb0>
c001b078:	53                   	push   ebx
c001b079:	53                   	push   ebx
c001b07a:	68 9d 32 02 c0       	push   0xc002329d
c001b07f:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b085:	e8 d8 63 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c001b08a:	83 c4 10             	add    esp,0x10
c001b08d:	b8 01 00 00 00       	mov    eax,0x1
c001b092:	eb 25                	jmp    c001b0b9 <ISO9660::openDir(char const*, void**)+0xd5>
c001b094:	01 db                	add    ebx,ebx
c001b096:	51                   	push   ecx
c001b097:	83 c3 65             	add    ebx,0x65
c001b09a:	51                   	push   ecx
c001b09b:	68 b0 32 02 c0       	push   0xc00232b0
c001b0a0:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b0a6:	e8 b7 63 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c001b0ab:	89 1e                	mov    DWORD PTR [esi],ebx
c001b0ad:	83 c4 10             	add    esp,0x10
c001b0b0:	31 c0                	xor    eax,eax
c001b0b2:	eb 05                	jmp    c001b0b9 <ISO9660::openDir(char const*, void**)+0xd5>
c001b0b4:	b8 04 00 00 00       	mov    eax,0x4
c001b0b9:	5a                   	pop    edx
c001b0ba:	5b                   	pop    ebx
c001b0bb:	5e                   	pop    esi
c001b0bc:	c3                   	ret    
c001b0bd:	90                   	nop

c001b0be <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001b0be:	55                   	push   ebp
c001b0bf:	57                   	push   edi
c001b0c0:	56                   	push   esi
c001b0c1:	53                   	push   ebx
c001b0c2:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b0c8:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001b0cf:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b0d6:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b0de:	0f 84 e7 00 00 00    	je     c001b1cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b0e4:	85 db                	test   ebx,ebx
c001b0e6:	0f 84 df 00 00 00    	je     c001b1cb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001b0ec:	83 ec 0c             	sub    esp,0xc
c001b0ef:	68 c3 32 02 c0       	push   0xc00232c3
c001b0f4:	e8 6b be fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001b0f9:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001b100:	b9 02 00 00 00       	mov    ecx,0x2
c001b105:	99                   	cdq    
c001b106:	f7 f9                	idiv   ecx
c001b108:	83 e8 32             	sub    eax,0x32
c001b10b:	89 04 24             	mov    DWORD PTR [esp],eax
c001b10e:	e8 a7 b8 fe ff       	call   c00069ba <iso_readdir>
c001b113:	83 c4 10             	add    esp,0x10
c001b116:	89 c6                	mov    esi,eax
c001b118:	85 c0                	test   eax,eax
c001b11a:	75 37                	jne    c001b153 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001b11c:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b121:	56                   	push   esi
c001b122:	56                   	push   esi
c001b123:	68 ce 32 02 c0       	push   0xc00232ce
c001b128:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b12e:	e8 2f 63 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c001b133:	83 c4 0c             	add    esp,0xc
c001b136:	68 10 01 00 00       	push   0x110
c001b13b:	6a 00                	push   0x0
c001b13d:	57                   	push   edi
c001b13e:	e8 ad 53 fe ff       	call   c00004f0 <memset>
c001b143:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001b149:	83 c4 10             	add    esp,0x10
c001b14c:	b8 01 00 00 00       	mov    eax,0x1
c001b151:	eb 7d                	jmp    c001b1d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b153:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001b159:	8d 68 08             	lea    ebp,[eax+0x8]
c001b15c:	83 ec 0c             	sub    esp,0xc
c001b15f:	55                   	push   ebp
c001b160:	e8 0b 54 fe ff       	call   c0000570 <strlen>
c001b165:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001b16d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b171:	83 c4 10             	add    esp,0x10
c001b174:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001b178:	75 0a                	jne    c001b184 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001b17a:	b8 02 00 00 00       	mov    eax,0x2
c001b17f:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001b182:	74 05                	je     c001b189 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001b184:	b8 01 00 00 00       	mov    eax,0x1
c001b189:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b18d:	50                   	push   eax
c001b18e:	50                   	push   eax
c001b18f:	55                   	push   ebp
c001b190:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001b194:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001b198:	50                   	push   eax
c001b199:	e8 a2 54 fe ff       	call   c0000640 <strcpy>
c001b19e:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001b1a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b1a7:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001b1ad:	5a                   	pop    edx
c001b1ae:	a1 d8 c6 02 c0       	mov    eax,ds:0xc002c6d8
c001b1b3:	59                   	pop    ecx
c001b1b4:	68 e1 32 02 c0       	push   0xc00232e1
c001b1b9:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001b1bf:	e8 9e 62 ff ff       	call   c0011462 <VgaText::puts(char const*)>
c001b1c4:	83 c4 10             	add    esp,0x10
c001b1c7:	31 c0                	xor    eax,eax
c001b1c9:	eb 05                	jmp    c001b1d0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001b1cb:	b8 04 00 00 00       	mov    eax,0x4
c001b1d0:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b1d6:	5b                   	pop    ebx
c001b1d7:	5e                   	pop    esi
c001b1d8:	5f                   	pop    edi
c001b1d9:	5d                   	pop    ebp
c001b1da:	c3                   	ret    

c001b1db <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001b1db:	57                   	push   edi
c001b1dc:	56                   	push   esi
c001b1dd:	53                   	push   ebx
c001b1de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b1e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b1e6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b1ea:	39 35 a4 c8 02 c0    	cmp    DWORD PTR ds:0xc002c8a4,esi
c001b1f0:	0f be cb             	movsx  ecx,bl
c001b1f3:	75 0b                	jne    c001b200 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001b1f5:	0f be 05 c4 44 02 c0 	movsx  eax,BYTE PTR ds:0xc00244c4
c001b1fc:	39 c8                	cmp    eax,ecx
c001b1fe:	74 47                	je     c001b247 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b200:	83 ec 0c             	sub    esp,0xc
c001b203:	31 d2                	xor    edx,edx
c001b205:	68 c0 c8 02 c0       	push   0xc002c8c0
c001b20a:	6a 01                	push   0x1
c001b20c:	52                   	push   edx
c001b20d:	56                   	push   esi
c001b20e:	ff 34 8d 7c 96 02 c0 	push   DWORD PTR [ecx*4-0x3ffd6984]
c001b215:	e8 c2 ee fe ff       	call   c000a0dc <LogicalDisk::read(unsigned long long, int, void*)>
c001b21a:	83 c4 20             	add    esp,0x20
c001b21d:	85 c0                	test   eax,eax
c001b21f:	75 0e                	jne    c001b22f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001b221:	89 35 a4 c8 02 c0    	mov    DWORD PTR ds:0xc002c8a4,esi
c001b227:	88 1d c4 44 02 c0    	mov    BYTE PTR ds:0xc00244c4,bl
c001b22d:	eb 18                	jmp    c001b247 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001b22f:	50                   	push   eax
c001b230:	68 00 08 00 00       	push   0x800
c001b235:	6a 00                	push   0x0
c001b237:	57                   	push   edi
c001b238:	e8 b3 52 fe ff       	call   c00004f0 <memset>
c001b23d:	83 c4 10             	add    esp,0x10
c001b240:	b8 01 00 00 00       	mov    eax,0x1
c001b245:	eb 0e                	jmp    c001b255 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001b247:	be c0 c8 02 c0       	mov    esi,0xc002c8c0
c001b24c:	b9 00 08 00 00       	mov    ecx,0x800
c001b251:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b253:	31 c0                	xor    eax,eax
c001b255:	5b                   	pop    ebx
c001b256:	5e                   	pop    esi
c001b257:	5f                   	pop    edi
c001b258:	c3                   	ret    
c001b259:	90                   	nop

c001b25a <ISO9660::tryMount(LogicalDisk*, int)>:
c001b25a:	53                   	push   ebx
c001b25b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001b261:	c7 05 a4 c8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002c8a4,0xdeadbeef
c001b26b:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001b272:	8d 58 41             	lea    ebx,[eax+0x41]
c001b275:	0f be db             	movsx  ebx,bl
c001b278:	53                   	push   ebx
c001b279:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b27d:	50                   	push   eax
c001b27e:	6a 10                	push   0x10
c001b280:	e8 56 ff ff ff       	call   c001b1db <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001b285:	83 c4 10             	add    esp,0x10
c001b288:	31 d2                	xor    edx,edx
c001b28a:	85 c0                	test   eax,eax
c001b28c:	75 33                	jne    c001b2c1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b28e:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001b293:	75 2c                	jne    c001b2c1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b295:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001b29a:	75 25                	jne    c001b2c1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b29c:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001b2a1:	75 1e                	jne    c001b2c1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b2a3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001b2a8:	75 17                	jne    c001b2c1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b2aa:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001b2af:	75 10                	jne    c001b2c1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001b2b1:	83 ec 0c             	sub    esp,0xc
c001b2b4:	53                   	push   ebx
c001b2b5:	e8 74 b9 fe ff       	call   c0006c2e <init_percd>
c001b2ba:	83 c4 10             	add    esp,0x10
c001b2bd:	40                   	inc    eax
c001b2be:	0f 95 c2             	setne  dl
c001b2c1:	88 d0                	mov    al,dl
c001b2c3:	81 c4 08 08 00 00    	add    esp,0x808
c001b2c9:	5b                   	pop    ebx
c001b2ca:	c3                   	ret    
c001b2cb:	90                   	nop

c001b2cc <ISO9660::ISO9660()>:
c001b2cc:	83 ec 0c             	sub    esp,0xc
c001b2cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2d3:	83 ec 0c             	sub    esp,0xc
c001b2d6:	50                   	push   eax
c001b2d7:	e8 94 ca fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001b2dc:	83 c4 10             	add    esp,0x10
c001b2df:	ba fc 32 02 c0       	mov    edx,0xc00232fc
c001b2e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b2e8:	89 10                	mov    DWORD PTR [eax],edx
c001b2ea:	e8 51 ba fe ff       	call   c0006d40 <fs_iso9660_init>
c001b2ef:	90                   	nop
c001b2f0:	83 c4 0c             	add    esp,0xc
c001b2f3:	c3                   	ret    

c001b2f4 <SoundCard::beginPlayback()>:
c001b2f4:	c7 44 24 04 60 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023360
c001b2fc:	e9 d1 39 ff ff       	jmp    c000ecd2 <KePanic(char const*)>
c001b301:	90                   	nop

c001b302 <SoundCard::stopPlayback()>:
c001b302:	c7 44 24 04 60 33 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023360
c001b30a:	e9 c3 39 ff ff       	jmp    c000ecd2 <KePanic(char const*)>
c001b30f:	90                   	nop

c001b310 <SoundCard::SoundCard(char const*)>:
c001b310:	83 ec 1c             	sub    esp,0x1c
c001b313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b317:	83 ec 08             	sub    esp,0x8
c001b31a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b31e:	50                   	push   eax
c001b31f:	e8 7c de fe ff       	call   c00091a0 <Device::Device(char const*)>
c001b324:	83 c4 10             	add    esp,0x10
c001b327:	ba ac 33 02 c0       	mov    edx,0xc00233ac
c001b32c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b330:	89 10                	mov    DWORD PTR [eax],edx
c001b332:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b336:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b33d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b341:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001b34b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b34f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001b359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b35d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001b367:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b36b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001b375:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b37d:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001b382:	7f 1a                	jg     c001b39e <SoundCard::SoundCard(char const*)+0x8e>
c001b384:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b388:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b38c:	83 c2 54             	add    edx,0x54
c001b38f:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001b397:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b39c:	eb df                	jmp    c001b37d <SoundCard::SoundCard(char const*)+0x6d>
c001b39e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b3a2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001b3a9:	90                   	nop
c001b3aa:	83 c4 1c             	add    esp,0x1c
c001b3ad:	c3                   	ret    

c001b3ae <SoundCard::~SoundCard()>:
c001b3ae:	83 ec 0c             	sub    esp,0xc
c001b3b1:	ba ac 33 02 c0       	mov    edx,0xc00233ac
c001b3b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3ba:	89 10                	mov    DWORD PTR [eax],edx
c001b3bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3c0:	83 ec 0c             	sub    esp,0xc
c001b3c3:	50                   	push   eax
c001b3c4:	e8 77 db fe ff       	call   c0008f40 <Device::~Device()>
c001b3c9:	83 c4 10             	add    esp,0x10
c001b3cc:	90                   	nop
c001b3cd:	83 c4 0c             	add    esp,0xc
c001b3d0:	c3                   	ret    
c001b3d1:	90                   	nop

c001b3d2 <SoundCard::~SoundCard()>:
c001b3d2:	83 ec 0c             	sub    esp,0xc
c001b3d5:	83 ec 0c             	sub    esp,0xc
c001b3d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3dc:	e8 cd ff ff ff       	call   c001b3ae <SoundCard::~SoundCard()>
c001b3e1:	83 c4 10             	add    esp,0x10
c001b3e4:	83 ec 08             	sub    esp,0x8
c001b3e7:	68 e8 01 00 00       	push   0x1e8
c001b3ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3f0:	e8 13 13 ff ff       	call   c000c708 <operator delete(void*, unsigned long)>
c001b3f5:	83 c4 10             	add    esp,0x10
c001b3f8:	83 c4 0c             	add    esp,0xc
c001b3fb:	c3                   	ret    

c001b3fc <SoundCard::configureRates(int, int, int)>:
c001b3fc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b400:	31 c0                	xor    eax,eax
c001b402:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001b409:	75 20                	jne    c001b42b <SoundCard::configureRates(int, int, int)+0x2f>
c001b40b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b40f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001b415:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b419:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001b41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b423:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001b429:	b0 01                	mov    al,0x1
c001b42b:	c3                   	ret    

c001b42c <SoundCard::getSamples16(int, short*)>:
c001b42c:	55                   	push   ebp
c001b42d:	57                   	push   edi
c001b42e:	31 ff                	xor    edi,edi
c001b430:	56                   	push   esi
c001b431:	53                   	push   ebx
c001b432:	31 db                	xor    ebx,ebx
c001b434:	83 ec 10             	sub    esp,0x10
c001b437:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001b43b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b43f:	8d 04 36             	lea    eax,[esi+esi*1]
c001b442:	50                   	push   eax
c001b443:	6a 00                	push   0x0
c001b445:	55                   	push   ebp
c001b446:	e8 a5 50 fe ff       	call   c00004f0 <memset>
c001b44b:	83 c4 10             	add    esp,0x10
c001b44e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b452:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001b459:	85 c0                	test   eax,eax
c001b45b:	74 1b                	je     c001b478 <SoundCard::getSamples16(int, short*)+0x4c>
c001b45d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b461:	75 15                	jne    c001b478 <SoundCard::getSamples16(int, short*)+0x4c>
c001b463:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001b467:	55                   	push   ebp
c001b468:	56                   	push   esi
c001b469:	50                   	push   eax
c001b46a:	e8 f1 02 00 00       	call   c001b760 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001b46f:	83 c4 10             	add    esp,0x10
c001b472:	39 c7                	cmp    edi,eax
c001b474:	7d 02                	jge    c001b478 <SoundCard::getSamples16(int, short*)+0x4c>
c001b476:	89 c7                	mov    edi,eax
c001b478:	43                   	inc    ebx
c001b479:	83 fb 20             	cmp    ebx,0x20
c001b47c:	75 d0                	jne    c001b44e <SoundCard::getSamples16(int, short*)+0x22>
c001b47e:	83 c4 0c             	add    esp,0xc
c001b481:	89 f8                	mov    eax,edi
c001b483:	5b                   	pop    ebx
c001b484:	5e                   	pop    esi
c001b485:	5f                   	pop    edi
c001b486:	5d                   	pop    ebp
c001b487:	c3                   	ret    

c001b488 <SoundCard::getSamples32(int, int*)>:
c001b488:	55                   	push   ebp
c001b489:	57                   	push   edi
c001b48a:	31 ff                	xor    edi,edi
c001b48c:	56                   	push   esi
c001b48d:	31 f6                	xor    esi,esi
c001b48f:	53                   	push   ebx
c001b490:	83 ec 10             	sub    esp,0x10
c001b493:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b497:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001b49b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b49f:	c1 e0 02             	shl    eax,0x2
c001b4a2:	50                   	push   eax
c001b4a3:	6a 00                	push   0x0
c001b4a5:	55                   	push   ebp
c001b4a6:	e8 45 50 fe ff       	call   c00004f0 <memset>
c001b4ab:	83 c4 10             	add    esp,0x10
c001b4ae:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001b4b5:	85 c0                	test   eax,eax
c001b4b7:	74 1b                	je     c001b4d4 <SoundCard::getSamples32(int, int*)+0x4c>
c001b4b9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001b4bd:	75 15                	jne    c001b4d4 <SoundCard::getSamples32(int, int*)+0x4c>
c001b4bf:	53                   	push   ebx
c001b4c0:	55                   	push   ebp
c001b4c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4c5:	50                   	push   eax
c001b4c6:	e8 61 03 00 00       	call   c001b82c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001b4cb:	83 c4 10             	add    esp,0x10
c001b4ce:	39 c6                	cmp    esi,eax
c001b4d0:	7d 02                	jge    c001b4d4 <SoundCard::getSamples32(int, int*)+0x4c>
c001b4d2:	89 c6                	mov    esi,eax
c001b4d4:	47                   	inc    edi
c001b4d5:	83 ff 20             	cmp    edi,0x20
c001b4d8:	75 d4                	jne    c001b4ae <SoundCard::getSamples32(int, int*)+0x26>
c001b4da:	85 f6                	test   esi,esi
c001b4dc:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001b4e3:	75 0f                	jne    c001b4f4 <SoundCard::getSamples32(int, int*)+0x6c>
c001b4e5:	85 c0                	test   eax,eax
c001b4e7:	74 1b                	je     c001b504 <SoundCard::getSamples32(int, int*)+0x7c>
c001b4e9:	83 ec 0c             	sub    esp,0xc
c001b4ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4ee:	53                   	push   ebx
c001b4ef:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001b4f2:	eb 0d                	jmp    c001b501 <SoundCard::getSamples32(int, int*)+0x79>
c001b4f4:	85 c0                	test   eax,eax
c001b4f6:	75 0c                	jne    c001b504 <SoundCard::getSamples32(int, int*)+0x7c>
c001b4f8:	83 ec 0c             	sub    esp,0xc
c001b4fb:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b4fd:	53                   	push   ebx
c001b4fe:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001b501:	83 c4 10             	add    esp,0x10
c001b504:	83 c4 0c             	add    esp,0xc
c001b507:	89 f0                	mov    eax,esi
c001b509:	5b                   	pop    ebx
c001b50a:	5e                   	pop    esi
c001b50b:	5f                   	pop    edi
c001b50c:	5d                   	pop    ebp
c001b50d:	c3                   	ret    

c001b50e <SoundCard::addChannel(SoundPort*)>:
c001b50e:	83 ec 0c             	sub    esp,0xc
c001b511:	31 c0                	xor    eax,eax
c001b513:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b517:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001b51f:	74 1b                	je     c001b53c <SoundCard::addChannel(SoundPort*)+0x2e>
c001b521:	40                   	inc    eax
c001b522:	83 f8 20             	cmp    eax,0x20
c001b525:	75 f0                	jne    c001b517 <SoundCard::addChannel(SoundPort*)+0x9>
c001b527:	83 ec 0c             	sub    esp,0xc
c001b52a:	68 85 33 02 c0       	push   0xc0023385
c001b52f:	e8 9e 37 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001b534:	83 c4 10             	add    esp,0x10
c001b537:	83 c8 ff             	or     eax,0xffffffff
c001b53a:	eb 0b                	jmp    c001b547 <SoundCard::addChannel(SoundPort*)+0x39>
c001b53c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001b540:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001b547:	83 c4 0c             	add    esp,0xc
c001b54a:	c3                   	ret    
c001b54b:	90                   	nop

c001b54c <SoundCard::removeChannel(int)>:
c001b54c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b550:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b554:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001b55f:	c3                   	ret    

c001b560 <SoundPort::SoundPort(int, int, int, int)>:
c001b560:	83 ec 0c             	sub    esp,0xc
c001b563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b567:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b56e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b572:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b576:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b57e:	89 10                	mov    DWORD PTR [eax],edx
c001b580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b584:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b588:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001b58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b58f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b593:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001b596:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001b59b:	75 13                	jne    c001b5b0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001b59d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5a1:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5a3:	05 a0 0f 00 00       	add    eax,0xfa0
c001b5a8:	01 c0                	add    eax,eax
c001b5aa:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b5ae:	66 90                	xchg   ax,ax
c001b5b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5b4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b5b8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001b5bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5bf:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001b5c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b5cd:	c1 e0 02             	shl    eax,0x2
c001b5d0:	83 ec 0c             	sub    esp,0xc
c001b5d3:	50                   	push   eax
c001b5d4:	e8 a2 33 ff ff       	call   c000e97b <malloc>
c001b5d9:	83 c4 10             	add    esp,0x10
c001b5dc:	89 c2                	mov    edx,eax
c001b5de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5e2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001b5e5:	90                   	nop
c001b5e6:	83 c4 0c             	add    esp,0xc
c001b5e9:	c3                   	ret    
c001b5ea:	66 90                	xchg   ax,ax

c001b5ec <SoundPort::~SoundPort()>:
c001b5ec:	83 ec 0c             	sub    esp,0xc
c001b5ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5f3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b5f6:	85 c0                	test   eax,eax
c001b5f8:	74 1e                	je     c001b618 <SoundPort::~SoundPort()+0x2c>
c001b5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5fe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001b601:	83 ec 0c             	sub    esp,0xc
c001b604:	50                   	push   eax
c001b605:	e8 81 33 ff ff       	call   c000e98b <free>
c001b60a:	83 c4 10             	add    esp,0x10
c001b60d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b611:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001b618:	90                   	nop
c001b619:	83 c4 0c             	add    esp,0xc
c001b61c:	c3                   	ret    
c001b61d:	90                   	nop
c001b61e:	66 90                	xchg   ax,ax

c001b620 <SoundPort::unpause()>:
c001b620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b624:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001b628:	c3                   	ret    
c001b629:	90                   	nop
c001b62a:	66 90                	xchg   ax,ax

c001b62c <SoundPort::pause()>:
c001b62c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b630:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001b634:	c3                   	ret    
c001b635:	90                   	nop
c001b636:	66 90                	xchg   ax,ax

c001b638 <SoundPort::getBufferUsed()>:
c001b638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b63c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b63f:	c3                   	ret    

c001b640 <SoundPort::getBufferSize()>:
c001b640:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b644:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001b647:	c3                   	ret    

c001b648 <SoundPort::buffer16(short*, int)>:
c001b648:	55                   	push   ebp
c001b649:	57                   	push   edi
c001b64a:	56                   	push   esi
c001b64b:	53                   	push   ebx
c001b64c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b650:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001b654:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001b657:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001b65a:	74 68                	je     c001b6c4 <SoundPort::buffer16(short*, int)+0x7c>
c001b65c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001b660:	85 c9                	test   ecx,ecx
c001b662:	7e 60                	jle    c001b6c4 <SoundPort::buffer16(short*, int)+0x7c>
c001b664:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001b668:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b66b:	c1 e1 0f             	shl    ecx,0xf
c001b66e:	8d 70 01             	lea    esi,[eax+0x1]
c001b671:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b674:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001b677:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b67a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b67d:	74 4d                	je     c001b6cc <SoundPort::buffer16(short*, int)+0x84>
c001b67f:	31 f6                	xor    esi,esi
c001b681:	eb 21                	jmp    c001b6a4 <SoundPort::buffer16(short*, int)+0x5c>
c001b683:	90                   	nop
c001b684:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001b689:	8d 79 01             	lea    edi,[ecx+0x1]
c001b68c:	c1 e3 0f             	shl    ebx,0xf
c001b68f:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001b692:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001b695:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001b698:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b69b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b69e:	74 1c                	je     c001b6bc <SoundPort::buffer16(short*, int)+0x74>
c001b6a0:	89 c6                	mov    esi,eax
c001b6a2:	66 90                	xchg   ax,ax
c001b6a4:	8d 46 01             	lea    eax,[esi+0x1]
c001b6a7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001b6ab:	75 d7                	jne    c001b684 <SoundPort::buffer16(short*, int)+0x3c>
c001b6ad:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b6b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b6b4:	5b                   	pop    ebx
c001b6b5:	5e                   	pop    esi
c001b6b6:	5f                   	pop    edi
c001b6b7:	5d                   	pop    ebp
c001b6b8:	c3                   	ret    
c001b6b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b6bc:	5b                   	pop    ebx
c001b6bd:	8d 46 02             	lea    eax,[esi+0x2]
c001b6c0:	5e                   	pop    esi
c001b6c1:	5f                   	pop    edi
c001b6c2:	5d                   	pop    ebp
c001b6c3:	c3                   	ret    
c001b6c4:	5b                   	pop    ebx
c001b6c5:	31 c0                	xor    eax,eax
c001b6c7:	5e                   	pop    esi
c001b6c8:	5f                   	pop    edi
c001b6c9:	5d                   	pop    ebp
c001b6ca:	c3                   	ret    
c001b6cb:	90                   	nop
c001b6cc:	b8 01 00 00 00       	mov    eax,0x1
c001b6d1:	eb e1                	jmp    c001b6b4 <SoundPort::buffer16(short*, int)+0x6c>
c001b6d3:	90                   	nop

c001b6d4 <SoundPort::buffer32(int*, int)>:
c001b6d4:	55                   	push   ebp
c001b6d5:	57                   	push   edi
c001b6d6:	56                   	push   esi
c001b6d7:	53                   	push   ebx
c001b6d8:	83 ec 04             	sub    esp,0x4
c001b6db:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b6df:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b6e3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b6e6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b6ea:	89 04 24             	mov    DWORD PTR [esp],eax
c001b6ed:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b6f0:	74 5a                	je     c001b74c <SoundPort::buffer32(int*, int)+0x78>
c001b6f2:	85 c0                	test   eax,eax
c001b6f4:	7e 56                	jle    c001b74c <SoundPort::buffer32(int*, int)+0x78>
c001b6f6:	8d 71 01             	lea    esi,[ecx+0x1]
c001b6f9:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001b6fc:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001b6ff:	8b 37                	mov    esi,DWORD PTR [edi]
c001b701:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001b704:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b707:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b70a:	74 4c                	je     c001b758 <SoundPort::buffer32(int*, int)+0x84>
c001b70c:	31 f6                	xor    esi,esi
c001b70e:	eb 1c                	jmp    c001b72c <SoundPort::buffer32(int*, int)+0x58>
c001b710:	8d 69 01             	lea    ebp,[ecx+0x1]
c001b713:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001b716:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001b719:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001b71c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001b720:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001b723:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001b726:	74 18                	je     c001b740 <SoundPort::buffer32(int*, int)+0x6c>
c001b728:	89 de                	mov    esi,ebx
c001b72a:	66 90                	xchg   ax,ax
c001b72c:	8d 5e 01             	lea    ebx,[esi+0x1]
c001b72f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001b732:	75 dc                	jne    c001b710 <SoundPort::buffer32(int*, int)+0x3c>
c001b734:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b737:	90                   	nop
c001b738:	83 c4 04             	add    esp,0x4
c001b73b:	5b                   	pop    ebx
c001b73c:	5e                   	pop    esi
c001b73d:	5f                   	pop    edi
c001b73e:	5d                   	pop    ebp
c001b73f:	c3                   	ret    
c001b740:	83 c4 04             	add    esp,0x4
c001b743:	8d 46 02             	lea    eax,[esi+0x2]
c001b746:	5b                   	pop    ebx
c001b747:	5e                   	pop    esi
c001b748:	5f                   	pop    edi
c001b749:	5d                   	pop    ebp
c001b74a:	c3                   	ret    
c001b74b:	90                   	nop
c001b74c:	83 c4 04             	add    esp,0x4
c001b74f:	31 c0                	xor    eax,eax
c001b751:	5b                   	pop    ebx
c001b752:	5e                   	pop    esi
c001b753:	5f                   	pop    edi
c001b754:	5d                   	pop    ebp
c001b755:	c3                   	ret    
c001b756:	66 90                	xchg   ax,ax
c001b758:	b8 01 00 00 00       	mov    eax,0x1
c001b75d:	eb d9                	jmp    c001b738 <SoundPort::buffer32(int*, int)+0x64>
c001b75f:	90                   	nop

c001b760 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001b760:	57                   	push   edi
c001b761:	56                   	push   esi
c001b762:	53                   	push   ebx
c001b763:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b767:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b76b:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001b771:	39 03                	cmp    DWORD PTR [ebx],eax
c001b773:	74 13                	je     c001b788 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001b775:	83 ec 0c             	sub    esp,0xc
c001b778:	68 d8 33 02 c0       	push   0xc00233d8
c001b77d:	e8 50 35 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001b782:	83 c4 10             	add    esp,0x10
c001b785:	8d 76 00             	lea    esi,[esi+0x0]
c001b788:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001b78e:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001b791:	74 11                	je     c001b7a4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001b793:	83 ec 0c             	sub    esp,0xc
c001b796:	68 17 34 02 c0       	push   0xc0023417
c001b79b:	e8 32 35 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001b7a0:	83 c4 10             	add    esp,0x10
c001b7a3:	90                   	nop
c001b7a4:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001b7aa:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001b7ad:	74 11                	je     c001b7c0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001b7af:	83 ec 0c             	sub    esp,0xc
c001b7b2:	68 17 34 02 c0       	push   0xc0023417
c001b7b7:	e8 16 35 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001b7bc:	83 c4 10             	add    esp,0x10
c001b7bf:	90                   	nop
c001b7c0:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001b7c3:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001b7c7:	7e 07                	jle    c001b7d0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001b7c9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b7cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b7d0:	85 f6                	test   esi,esi
c001b7d2:	7e 2c                	jle    c001b800 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001b7d4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b7d8:	8d 3c 36             	lea    edi,[esi+esi*1]
c001b7db:	31 c9                	xor    ecx,ecx
c001b7dd:	01 d7                	add    edi,edx
c001b7df:	90                   	nop
c001b7e0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001b7e3:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001b7e6:	85 c0                	test   eax,eax
c001b7e8:	79 06                	jns    c001b7f0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001b7ea:	05 ff 7f 00 00       	add    eax,0x7fff
c001b7ef:	90                   	nop
c001b7f0:	c1 f8 0f             	sar    eax,0xf
c001b7f3:	83 c1 04             	add    ecx,0x4
c001b7f6:	66 01 02             	add    WORD PTR [edx],ax
c001b7f9:	83 c2 02             	add    edx,0x2
c001b7fc:	39 d7                	cmp    edi,edx
c001b7fe:	75 e0                	jne    c001b7e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001b800:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001b803:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001b806:	83 ec 04             	sub    esp,0x4
c001b809:	29 f0                	sub    eax,esi
c001b80b:	c1 e0 02             	shl    eax,0x2
c001b80e:	50                   	push   eax
c001b80f:	8d 04 b2             	lea    eax,[edx+esi*4]
c001b812:	50                   	push   eax
c001b813:	52                   	push   edx
c001b814:	e8 b7 4b fe ff       	call   c00003d0 <memmove>
c001b819:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001b81c:	83 c4 10             	add    esp,0x10
c001b81f:	29 f0                	sub    eax,esi
c001b821:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001b824:	89 f0                	mov    eax,esi
c001b826:	5b                   	pop    ebx
c001b827:	5e                   	pop    esi
c001b828:	5f                   	pop    edi
c001b829:	c3                   	ret    
c001b82a:	66 90                	xchg   ax,ax

c001b82c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001b82c:	57                   	push   edi
c001b82d:	56                   	push   esi
c001b82e:	53                   	push   ebx
c001b82f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b833:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b837:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b83b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001b841:	39 06                	cmp    DWORD PTR [esi],eax
c001b843:	74 13                	je     c001b858 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001b845:	83 ec 0c             	sub    esp,0xc
c001b848:	68 f8 33 02 c0       	push   0xc00233f8
c001b84d:	e8 80 34 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001b852:	83 c4 10             	add    esp,0x10
c001b855:	8d 76 00             	lea    esi,[esi+0x0]
c001b858:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001b85e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001b861:	74 11                	je     c001b874 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001b863:	83 ec 0c             	sub    esp,0xc
c001b866:	68 33 34 02 c0       	push   0xc0023433
c001b86b:	e8 62 34 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001b870:	83 c4 10             	add    esp,0x10
c001b873:	90                   	nop
c001b874:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001b87a:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001b87d:	74 11                	je     c001b890 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001b87f:	83 ec 0c             	sub    esp,0xc
c001b882:	68 33 34 02 c0       	push   0xc0023433
c001b887:	e8 46 34 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001b88c:	83 c4 10             	add    esp,0x10
c001b88f:	90                   	nop
c001b890:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001b893:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001b897:	7e 07                	jle    c001b8a0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001b899:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001b89d:	8d 76 00             	lea    esi,[esi+0x0]
c001b8a0:	85 ff                	test   edi,edi
c001b8a2:	7e 1c                	jle    c001b8c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001b8a4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001b8ab:	31 c0                	xor    eax,eax
c001b8ad:	8d 76 00             	lea    esi,[esi+0x0]
c001b8b0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b8b3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001b8b6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001b8b9:	83 c0 04             	add    eax,0x4
c001b8bc:	39 c1                	cmp    ecx,eax
c001b8be:	75 f0                	jne    c001b8b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001b8c0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001b8c3:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001b8c6:	83 ec 04             	sub    esp,0x4
c001b8c9:	29 f8                	sub    eax,edi
c001b8cb:	c1 e0 02             	shl    eax,0x2
c001b8ce:	50                   	push   eax
c001b8cf:	8d 04 ba             	lea    eax,[edx+edi*4]
c001b8d2:	50                   	push   eax
c001b8d3:	52                   	push   edx
c001b8d4:	e8 f7 4a fe ff       	call   c00003d0 <memmove>
c001b8d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001b8dc:	83 c4 10             	add    esp,0x10
c001b8df:	29 f8                	sub    eax,edi
c001b8e1:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001b8e4:	89 f8                	mov    eax,edi
c001b8e6:	5b                   	pop    ebx
c001b8e7:	5e                   	pop    esi
c001b8e8:	5f                   	pop    edi
c001b8e9:	c3                   	ret    

c001b8ea <PCI::open(int, int, void*)>:
c001b8ea:	83 ec 18             	sub    esp,0x18
c001b8ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b8f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001b8f5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b8fb:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8fd:	50                   	push   eax
c001b8fe:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001b901:	31 c0                	xor    eax,eax
c001b903:	83 c4 1c             	add    esp,0x1c
c001b906:	c3                   	ret    
c001b907:	90                   	nop

c001b908 <PCI::close(int, int, void*)>:
c001b908:	31 c0                	xor    eax,eax
c001b90a:	c3                   	ret    
c001b90b:	90                   	nop

c001b90c <PCI::PCI()>:
c001b90c:	83 ec 0c             	sub    esp,0xc
c001b90f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b913:	83 ec 08             	sub    esp,0x8
c001b916:	68 4f 34 02 c0       	push   0xc002344f
c001b91b:	50                   	push   eax
c001b91c:	e8 cb cf fe ff       	call   c00088ec <Bus::Bus(char const*)>
c001b921:	83 c4 10             	add    esp,0x10
c001b924:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c001b929:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b92d:	89 10                	mov    DWORD PTR [eax],edx
c001b92f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b933:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001b93d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b941:	a3 c0 d0 02 c0       	mov    ds:0xc002d0c0,eax
c001b946:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b94a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b950:	0f b6 d0             	movzx  edx,al
c001b953:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b957:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001b95e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b962:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b968:	0f b6 d0             	movzx  edx,al
c001b96b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b96f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001b974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b978:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b97e:	8d 50 01             	lea    edx,[eax+0x1]
c001b981:	88 d1                	mov    cl,dl
c001b983:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b987:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001b98d:	0f b6 d0             	movzx  edx,al
c001b990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b994:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b998:	83 c9 c0             	or     ecx,0xffffffc0
c001b99b:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b99f:	90                   	nop
c001b9a0:	83 c4 0c             	add    esp,0xc
c001b9a3:	c3                   	ret    

c001b9a4 <PCI::readBAR8(unsigned int, int)>:
c001b9a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9a8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9ac:	f6 c2 01             	test   dl,0x1
c001b9af:	74 07                	je     c001b9b8 <PCI::readBAR8(unsigned int, int)+0x14>
c001b9b1:	83 e2 fc             	and    edx,0xfffffffc
c001b9b4:	01 c2                	add    edx,eax
c001b9b6:	ec                   	in     al,dx
c001b9b7:	c3                   	ret    
c001b9b8:	83 e2 f0             	and    edx,0xfffffff0
c001b9bb:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001b9be:	c3                   	ret    
c001b9bf:	90                   	nop

c001b9c0 <PCI::readBAR16(unsigned int, int)>:
c001b9c0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9c8:	f6 c2 01             	test   dl,0x1
c001b9cb:	74 08                	je     c001b9d5 <PCI::readBAR16(unsigned int, int)+0x15>
c001b9cd:	83 e2 fc             	and    edx,0xfffffffc
c001b9d0:	01 c2                	add    edx,eax
c001b9d2:	66 ed                	in     ax,dx
c001b9d4:	c3                   	ret    
c001b9d5:	83 e2 f0             	and    edx,0xfffffff0
c001b9d8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001b9dc:	c3                   	ret    
c001b9dd:	90                   	nop

c001b9de <PCI::readBAR32(unsigned int, int)>:
c001b9de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b9e6:	f6 c2 01             	test   dl,0x1
c001b9e9:	74 07                	je     c001b9f2 <PCI::readBAR32(unsigned int, int)+0x14>
c001b9eb:	83 e2 fc             	and    edx,0xfffffffc
c001b9ee:	01 c2                	add    edx,eax
c001b9f0:	ed                   	in     eax,dx
c001b9f1:	c3                   	ret    
c001b9f2:	83 e2 f0             	and    edx,0xfffffff0
c001b9f5:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001b9f8:	c3                   	ret    
c001b9f9:	90                   	nop

c001b9fa <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001b9fa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001b9fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba02:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba06:	f6 c2 01             	test   dl,0x1
c001ba09:	74 07                	je     c001ba12 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ba0b:	83 e2 fc             	and    edx,0xfffffffc
c001ba0e:	01 ca                	add    edx,ecx
c001ba10:	ee                   	out    dx,al
c001ba11:	c3                   	ret    
c001ba12:	83 e2 f0             	and    edx,0xfffffff0
c001ba15:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ba18:	c3                   	ret    
c001ba19:	90                   	nop

c001ba1a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ba1a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba22:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba26:	f6 c2 01             	test   dl,0x1
c001ba29:	74 08                	je     c001ba33 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ba2b:	83 e2 fc             	and    edx,0xfffffffc
c001ba2e:	01 ca                	add    edx,ecx
c001ba30:	66 ef                	out    dx,ax
c001ba32:	c3                   	ret    
c001ba33:	83 e2 f0             	and    edx,0xfffffff0
c001ba36:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ba3a:	c3                   	ret    
c001ba3b:	90                   	nop

c001ba3c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ba3c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ba40:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba44:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba48:	f6 c2 01             	test   dl,0x1
c001ba4b:	74 07                	je     c001ba54 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ba4d:	83 e2 fc             	and    edx,0xfffffffc
c001ba50:	01 ca                	add    edx,ecx
c001ba52:	ef                   	out    dx,eax
c001ba53:	c3                   	ret    
c001ba54:	83 e2 f0             	and    edx,0xfffffff0
c001ba57:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ba5a:	c3                   	ret    
c001ba5b:	90                   	nop

c001ba5c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ba5c:	55                   	push   ebp
c001ba5d:	57                   	push   edi
c001ba5e:	56                   	push   esi
c001ba5f:	53                   	push   ebx
c001ba60:	83 ec 0c             	sub    esp,0xc
c001ba63:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ba68:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ba6c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ba70:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ba74:	83 fe 07             	cmp    esi,0x7
c001ba77:	76 10                	jbe    c001ba89 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ba79:	83 ec 0c             	sub    esp,0xc
c001ba7c:	68 57 34 02 c0       	push   0xc0023457
c001ba81:	e8 4c 32 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001ba86:	83 c4 10             	add    esp,0x10
c001ba89:	0f b6 db             	movzx  ebx,bl
c001ba8c:	83 fb 0f             	cmp    ebx,0xf
c001ba8f:	76 10                	jbe    c001baa1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ba91:	83 ec 0c             	sub    esp,0xc
c001ba94:	68 87 34 02 c0       	push   0xc0023487
c001ba99:	e8 34 32 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001ba9e:	83 c4 10             	add    esp,0x10
c001baa1:	8d 04 36             	lea    eax,[esi+esi*1]
c001baa4:	ba f8 0c 00 00       	mov    edx,0xcf8
c001baa9:	83 c8 f0             	or     eax,0xfffffff0
c001baac:	ee                   	out    dx,al
c001baad:	ba fa 0c 00 00       	mov    edx,0xcfa
c001bab2:	89 e8                	mov    eax,ebp
c001bab4:	ee                   	out    dx,al
c001bab5:	83 c4 0c             	add    esp,0xc
c001bab8:	89 d8                	mov    eax,ebx
c001baba:	89 f9                	mov    ecx,edi
c001babc:	c1 e0 08             	shl    eax,0x8
c001babf:	0f b6 d9             	movzx  ebx,cl
c001bac2:	83 e3 fc             	and    ebx,0xfffffffc
c001bac5:	09 d8                	or     eax,ebx
c001bac7:	5b                   	pop    ebx
c001bac8:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001bacd:	5e                   	pop    esi
c001bace:	5f                   	pop    edi
c001bacf:	5d                   	pop    ebp
c001bad0:	c3                   	ret    
c001bad1:	90                   	nop

c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bad2:	57                   	push   edi
c001bad3:	56                   	push   esi
c001bad4:	53                   	push   ebx
c001bad5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bad9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001badd:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001bae3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bae7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001baeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001baef:	83 ff 01             	cmp    edi,0x1
c001baf2:	75 3f                	jne    c001bb33 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001baf4:	89 de                	mov    esi,ebx
c001baf6:	0f b6 c0             	movzx  eax,al
c001baf9:	81 e6 fc 00 00 00    	and    esi,0xfc
c001baff:	c1 e0 10             	shl    eax,0x10
c001bb02:	0f b6 c9             	movzx  ecx,cl
c001bb05:	09 f0                	or     eax,esi
c001bb07:	c1 e1 08             	shl    ecx,0x8
c001bb0a:	0f b6 d2             	movzx  edx,dl
c001bb0d:	09 c8                	or     eax,ecx
c001bb0f:	c1 e2 0b             	shl    edx,0xb
c001bb12:	09 d0                	or     eax,edx
c001bb14:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bb19:	0d 00 00 00 80       	or     eax,0x80000000
c001bb1e:	ef                   	out    dx,eax
c001bb1f:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bb24:	ed                   	in     eax,dx
c001bb25:	83 e3 02             	and    ebx,0x2
c001bb28:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bb2f:	d3 e8                	shr    eax,cl
c001bb31:	eb 44                	jmp    c001bb77 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bb33:	83 ff 02             	cmp    edi,0x2
c001bb36:	75 2d                	jne    c001bb65 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001bb38:	83 ec 0c             	sub    esp,0xc
c001bb3b:	0f b6 c9             	movzx  ecx,cl
c001bb3e:	0f b6 d2             	movzx  edx,dl
c001bb41:	0f b6 fb             	movzx  edi,bl
c001bb44:	0f b6 c0             	movzx  eax,al
c001bb47:	57                   	push   edi
c001bb48:	51                   	push   ecx
c001bb49:	52                   	push   edx
c001bb4a:	50                   	push   eax
c001bb4b:	56                   	push   esi
c001bb4c:	e8 0b ff ff ff       	call   c001ba5c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb51:	89 c2                	mov    edx,eax
c001bb53:	ed                   	in     eax,dx
c001bb54:	83 e3 02             	and    ebx,0x2
c001bb57:	83 c4 20             	add    esp,0x20
c001bb5a:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001bb61:	d3 e8                	shr    eax,cl
c001bb63:	eb 12                	jmp    c001bb77 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001bb65:	83 ec 0c             	sub    esp,0xc
c001bb68:	68 b7 34 02 c0       	push   0xc00234b7
c001bb6d:	e8 60 31 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001bb72:	83 c4 10             	add    esp,0x10
c001bb75:	31 c0                	xor    eax,eax
c001bb77:	5b                   	pop    ebx
c001bb78:	5e                   	pop    esi
c001bb79:	5f                   	pop    edi
c001bb7a:	c3                   	ret    
c001bb7b:	90                   	nop

c001bb7c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001bb7c:	83 ec 18             	sub    esp,0x18
c001bb7f:	6a 00                	push   0x0
c001bb81:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb86:	50                   	push   eax
c001bb87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb8c:	50                   	push   eax
c001bb8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bb92:	50                   	push   eax
c001bb93:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bb97:	e8 36 ff ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bb9c:	83 c4 2c             	add    esp,0x2c
c001bb9f:	c3                   	ret    

c001bba0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001bba0:	83 ec 18             	sub    esp,0x18
c001bba3:	6a 0e                	push   0xe
c001bba5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbaa:	50                   	push   eax
c001bbab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbb0:	50                   	push   eax
c001bbb1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bbb6:	50                   	push   eax
c001bbb7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bbbb:	e8 12 ff ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbc0:	83 c4 2c             	add    esp,0x2c
c001bbc3:	0f b6 c0             	movzx  eax,al
c001bbc6:	c3                   	ret    
c001bbc7:	90                   	nop

c001bbc8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001bbc8:	55                   	push   ebp
c001bbc9:	57                   	push   edi
c001bbca:	56                   	push   esi
c001bbcb:	53                   	push   ebx
c001bbcc:	83 ec 18             	sub    esp,0x18
c001bbcf:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001bbd4:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001bbd9:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001bbde:	6a 0a                	push   0xa
c001bbe0:	56                   	push   esi
c001bbe1:	55                   	push   ebp
c001bbe2:	57                   	push   edi
c001bbe3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bbe7:	e8 e6 fe ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bbec:	83 c4 14             	add    esp,0x14
c001bbef:	89 c3                	mov    ebx,eax
c001bbf1:	6a 0a                	push   0xa
c001bbf3:	0f b6 db             	movzx  ebx,bl
c001bbf6:	56                   	push   esi
c001bbf7:	55                   	push   ebp
c001bbf8:	57                   	push   edi
c001bbf9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001bbfd:	e8 d0 fe ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc02:	83 c4 2c             	add    esp,0x2c
c001bc05:	25 00 ff 00 00       	and    eax,0xff00
c001bc0a:	09 d8                	or     eax,ebx
c001bc0c:	5b                   	pop    ebx
c001bc0d:	5e                   	pop    esi
c001bc0e:	5f                   	pop    edi
c001bc0f:	5d                   	pop    ebp
c001bc10:	c3                   	ret    
c001bc11:	90                   	nop

c001bc12 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001bc12:	83 ec 18             	sub    esp,0x18
c001bc15:	6a 08                	push   0x8
c001bc17:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc1c:	50                   	push   eax
c001bc1d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc22:	50                   	push   eax
c001bc23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc28:	50                   	push   eax
c001bc29:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc2d:	e8 a0 fe ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc32:	83 c4 2c             	add    esp,0x2c
c001bc35:	0f b6 c4             	movzx  eax,ah
c001bc38:	c3                   	ret    
c001bc39:	90                   	nop

c001bc3a <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001bc3a:	83 ec 18             	sub    esp,0x18
c001bc3d:	6a 08                	push   0x8
c001bc3f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc44:	50                   	push   eax
c001bc45:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc4a:	50                   	push   eax
c001bc4b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc50:	50                   	push   eax
c001bc51:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc55:	e8 78 fe ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc5a:	83 c4 2c             	add    esp,0x2c
c001bc5d:	c3                   	ret    

c001bc5e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001bc5e:	83 ec 18             	sub    esp,0x18
c001bc61:	6a 3c                	push   0x3c
c001bc63:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc68:	50                   	push   eax
c001bc69:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc6e:	50                   	push   eax
c001bc6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc74:	50                   	push   eax
c001bc75:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc79:	e8 54 fe ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bc7e:	83 c4 2c             	add    esp,0x2c
c001bc81:	c3                   	ret    

c001bc82 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001bc82:	83 ec 18             	sub    esp,0x18
c001bc85:	6a 18                	push   0x18
c001bc87:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc8c:	50                   	push   eax
c001bc8d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc92:	50                   	push   eax
c001bc93:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001bc98:	50                   	push   eax
c001bc99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001bc9d:	e8 30 fe ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bca2:	83 c4 2c             	add    esp,0x2c
c001bca5:	0f b6 c4             	movzx  eax,ah
c001bca8:	c3                   	ret    
c001bca9:	90                   	nop

c001bcaa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001bcaa:	55                   	push   ebp
c001bcab:	57                   	push   edi
c001bcac:	56                   	push   esi
c001bcad:	53                   	push   ebx
c001bcae:	83 ec 28             	sub    esp,0x28
c001bcb1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001bcb5:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001bcba:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001bcbf:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001bcc4:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001bccb:	8d 43 12             	lea    eax,[ebx+0x12]
c001bcce:	83 c3 10             	add    ebx,0x10
c001bcd1:	0f b6 c0             	movzx  eax,al
c001bcd4:	0f b6 db             	movzx  ebx,bl
c001bcd7:	50                   	push   eax
c001bcd8:	51                   	push   ecx
c001bcd9:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001bcdd:	57                   	push   edi
c001bcde:	55                   	push   ebp
c001bcdf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bce3:	e8 ea fd ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bce8:	83 c4 14             	add    esp,0x14
c001bceb:	89 c6                	mov    esi,eax
c001bced:	53                   	push   ebx
c001bcee:	c1 e6 10             	shl    esi,0x10
c001bcf1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bcf5:	51                   	push   ecx
c001bcf6:	57                   	push   edi
c001bcf7:	55                   	push   ebp
c001bcf8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001bcfc:	e8 d1 fd ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bd01:	83 c4 3c             	add    esp,0x3c
c001bd04:	0f b7 c0             	movzx  eax,ax
c001bd07:	5b                   	pop    ebx
c001bd08:	09 f0                	or     eax,esi
c001bd0a:	5e                   	pop    esi
c001bd0b:	5f                   	pop    edi
c001bd0c:	5d                   	pop    ebp
c001bd0d:	c3                   	ret    

c001bd0e <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001bd0e:	55                   	push   ebp
c001bd0f:	57                   	push   edi
c001bd10:	56                   	push   esi
c001bd11:	53                   	push   ebx
c001bd12:	83 ec 0c             	sub    esp,0xc
c001bd15:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001bd19:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001bd1d:	89 f5                	mov    ebp,esi
c001bd1f:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001bd25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001bd29:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001bd2d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd31:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bd35:	83 f9 01             	cmp    ecx,0x1
c001bd38:	75 5d                	jne    c001bd97 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001bd3a:	0f b6 c8             	movzx  ecx,al
c001bd3d:	0f b6 d2             	movzx  edx,dl
c001bd40:	c1 e1 10             	shl    ecx,0x10
c001bd43:	c1 e2 0b             	shl    edx,0xb
c001bd46:	89 f0                	mov    eax,esi
c001bd48:	25 fc 00 00 00       	and    eax,0xfc
c001bd4d:	09 c1                	or     ecx,eax
c001bd4f:	89 e8                	mov    eax,ebp
c001bd51:	0f b6 c0             	movzx  eax,al
c001bd54:	c1 e0 08             	shl    eax,0x8
c001bd57:	09 c1                	or     ecx,eax
c001bd59:	09 d1                	or     ecx,edx
c001bd5b:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bd60:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001bd66:	89 c8                	mov    eax,ecx
c001bd68:	ef                   	out    dx,eax
c001bd69:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bd6e:	ed                   	in     eax,dx
c001bd6f:	0f b7 db             	movzx  ebx,bx
c001bd72:	83 e6 02             	and    esi,0x2
c001bd75:	74 0a                	je     c001bd81 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001bd77:	0f b7 d0             	movzx  edx,ax
c001bd7a:	c1 e3 10             	shl    ebx,0x10
c001bd7d:	09 d3                	or     ebx,edx
c001bd7f:	eb 05                	jmp    c001bd86 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001bd81:	66 31 c0             	xor    ax,ax
c001bd84:	09 c3                	or     ebx,eax
c001bd86:	ba f8 0c 00 00       	mov    edx,0xcf8
c001bd8b:	89 c8                	mov    eax,ecx
c001bd8d:	ef                   	out    dx,eax
c001bd8e:	ba fc 0c 00 00       	mov    edx,0xcfc
c001bd93:	89 d8                	mov    eax,ebx
c001bd95:	eb 41                	jmp    c001bdd8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001bd97:	83 f9 02             	cmp    ecx,0x2
c001bd9a:	75 45                	jne    c001bde1 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001bd9c:	83 ec 0c             	sub    esp,0xc
c001bd9f:	0f b6 d2             	movzx  edx,dl
c001bda2:	89 f1                	mov    ecx,esi
c001bda4:	0f b6 c0             	movzx  eax,al
c001bda7:	0f b6 f1             	movzx  esi,cl
c001bdaa:	89 e9                	mov    ecx,ebp
c001bdac:	56                   	push   esi
c001bdad:	0f b6 c9             	movzx  ecx,cl
c001bdb0:	51                   	push   ecx
c001bdb1:	52                   	push   edx
c001bdb2:	50                   	push   eax
c001bdb3:	57                   	push   edi
c001bdb4:	e8 a3 fc ff ff       	call   c001ba5c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001bdb9:	89 c2                	mov    edx,eax
c001bdbb:	ed                   	in     eax,dx
c001bdbc:	83 c4 20             	add    esp,0x20
c001bdbf:	0f b7 db             	movzx  ebx,bx
c001bdc2:	f6 c2 02             	test   dl,0x2
c001bdc5:	74 0c                	je     c001bdd3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001bdc7:	0f b7 c8             	movzx  ecx,ax
c001bdca:	89 d8                	mov    eax,ebx
c001bdcc:	c1 e0 10             	shl    eax,0x10
c001bdcf:	09 c8                	or     eax,ecx
c001bdd1:	eb 05                	jmp    c001bdd8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001bdd3:	66 31 c0             	xor    ax,ax
c001bdd6:	09 d8                	or     eax,ebx
c001bdd8:	ef                   	out    dx,eax
c001bdd9:	83 c4 0c             	add    esp,0xc
c001bddc:	5b                   	pop    ebx
c001bddd:	5e                   	pop    esi
c001bdde:	5f                   	pop    edi
c001bddf:	5d                   	pop    ebp
c001bde0:	c3                   	ret    
c001bde1:	c7 44 24 20 b7 34 02 c0 	mov    DWORD PTR [esp+0x20],0xc00234b7
c001bde9:	83 c4 0c             	add    esp,0xc
c001bdec:	5b                   	pop    ebx
c001bded:	5e                   	pop    esi
c001bdee:	5f                   	pop    edi
c001bdef:	5d                   	pop    ebp
c001bdf0:	e9 dd 2e ff ff       	jmp    c000ecd2 <KePanic(char const*)>
c001bdf5:	90                   	nop

c001bdf6 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001bdf6:	55                   	push   ebp
c001bdf7:	57                   	push   edi
c001bdf8:	56                   	push   esi
c001bdf9:	53                   	push   ebx
c001bdfa:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001be00:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001be07:	80 3d cc d0 02 c0 00 	cmp    BYTE PTR ds:0xc002d0cc,0x0
c001be0e:	0f 85 bd 00 00 00    	jne    c001bed1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001be14:	83 ec 0c             	sub    esp,0xc
c001be17:	68 14 01 00 00       	push   0x114
c001be1c:	e8 5a 2b ff ff       	call   c000e97b <malloc>
c001be21:	83 c4 0c             	add    esp,0xc
c001be24:	89 c3                	mov    ebx,eax
c001be26:	ff 35 d8 c6 02 c0    	push   DWORD PTR ds:0xc002c6d8
c001be2c:	68 bd 34 02 c0       	push   0xc00234bd
c001be31:	50                   	push   eax
c001be32:	e8 db c2 fe ff       	call   c0008112 <File::File(char const*, Process*)>
c001be37:	83 c4 10             	add    esp,0x10
c001be3a:	85 db                	test   ebx,ebx
c001be3c:	0f 84 67 02 00 00    	je     c001c0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001be42:	56                   	push   esi
c001be43:	56                   	push   esi
c001be44:	6a 01                	push   0x1
c001be46:	53                   	push   ebx
c001be47:	e8 e4 c2 fe ff       	call   c0008130 <File::open(FileOpenMode)>
c001be4c:	83 c4 10             	add    esp,0x10
c001be4f:	85 c0                	test   eax,eax
c001be51:	0f 85 52 02 00 00    	jne    c001c0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001be57:	52                   	push   edx
c001be58:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001be5c:	50                   	push   eax
c001be5d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001be61:	50                   	push   eax
c001be62:	53                   	push   ebx
c001be63:	e8 ca c5 fe ff       	call   c0008432 <File::stat(unsigned long long*, bool*)>
c001be68:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001be6c:	40                   	inc    eax
c001be6d:	89 04 24             	mov    DWORD PTR [esp],eax
c001be70:	e8 06 2b ff ff       	call   c000e97b <malloc>
c001be75:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001be79:	a3 c8 d0 02 c0       	mov    ds:0xc002d0c8,eax
c001be7e:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001be82:	59                   	pop    ecx
c001be83:	8b 13                	mov    edx,DWORD PTR [ebx]
c001be85:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001be89:	51                   	push   ecx
c001be8a:	50                   	push   eax
c001be8b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001be8f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001be93:	53                   	push   ebx
c001be94:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001be97:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001be9b:	83 c4 20             	add    esp,0x20
c001be9e:	89 c8                	mov    eax,ecx
c001bea0:	99                   	cdq    
c001bea1:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001bea5:	0f 85 fe 01 00 00    	jne    c001c0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001beab:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001beaf:	0f 85 f4 01 00 00    	jne    c001c0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001beb5:	83 ec 0c             	sub    esp,0xc
c001beb8:	53                   	push   ebx
c001beb9:	e8 d0 c2 fe ff       	call   c000818e <File::close()>
c001bebe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001bec2:	c6 05 cc d0 02 c0 01 	mov    BYTE PTR ds:0xc002d0cc,0x1
c001bec9:	a3 c4 d0 02 c0       	mov    ds:0xc002d0c4,eax
c001bece:	83 c4 10             	add    esp,0x10
c001bed1:	a1 c4 d0 02 c0       	mov    eax,ds:0xc002d0c4
c001bed6:	8b 1d c8 d0 02 c0    	mov    ebx,DWORD PTR ds:0xc002d0c8
c001bedc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bee0:	31 f6                	xor    esi,esi
c001bee2:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001beea:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001bef1:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001bef6:	31 c9                	xor    ecx,ecx
c001bef8:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001bf00:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001bf05:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001bf0d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001bf11:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001bf19:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001bf1d:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001bf21:	0f 8e 82 01 00 00    	jle    c001c0a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001bf27:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001bf2a:	d4 40                	aam    0x40
c001bf2c:	d5 39                	aad    0x39
c001bf2e:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001bf32:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001bf36:	d4 40                	aam    0x40
c001bf38:	d5 39                	aad    0x39
c001bf3a:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001bf3e:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001bf42:	d4 40                	aam    0x40
c001bf44:	d5 39                	aad    0x39
c001bf46:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001bf4a:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001bf4e:	d4 40                	aam    0x40
c001bf50:	d5 39                	aad    0x39
c001bf52:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001bf56:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001bf5a:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001bf5e:	3c 56                	cmp    al,0x56
c001bf60:	74 43                	je     c001bfa5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001bf62:	d4 40                	aam    0x40
c001bf64:	d5 39                	aad    0x39
c001bf66:	8d 48 d0             	lea    ecx,[eax-0x30]
c001bf69:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001bf6d:	0f b6 c9             	movzx  ecx,cl
c001bf70:	c1 e1 04             	shl    ecx,0x4
c001bf73:	d4 40                	aam    0x40
c001bf75:	d5 39                	aad    0x39
c001bf77:	83 e8 30             	sub    eax,0x30
c001bf7a:	0f b6 c0             	movzx  eax,al
c001bf7d:	09 c1                	or     ecx,eax
c001bf7f:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001bf83:	c1 e1 04             	shl    ecx,0x4
c001bf86:	d4 40                	aam    0x40
c001bf88:	d5 39                	aad    0x39
c001bf8a:	83 e8 30             	sub    eax,0x30
c001bf8d:	0f b6 c0             	movzx  eax,al
c001bf90:	09 c1                	or     ecx,eax
c001bf92:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001bf96:	c1 e1 04             	shl    ecx,0x4
c001bf99:	d4 40                	aam    0x40
c001bf9b:	d5 39                	aad    0x39
c001bf9d:	83 e8 30             	sub    eax,0x30
c001bfa0:	0f b6 c0             	movzx  eax,al
c001bfa3:	09 c1                	or     ecx,eax
c001bfa5:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001bfa9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001bfad:	3c 58                	cmp    al,0x58
c001bfaf:	74 47                	je     c001bff8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001bfb1:	d4 40                	aam    0x40
c001bfb3:	d5 39                	aad    0x39
c001bfb5:	8d 50 d0             	lea    edx,[eax-0x30]
c001bfb8:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001bfbc:	0f b6 d2             	movzx  edx,dl
c001bfbf:	c1 e2 04             	shl    edx,0x4
c001bfc2:	d4 40                	aam    0x40
c001bfc4:	d5 39                	aad    0x39
c001bfc6:	83 e8 30             	sub    eax,0x30
c001bfc9:	0f b6 c0             	movzx  eax,al
c001bfcc:	09 c2                	or     edx,eax
c001bfce:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001bfd2:	c1 e2 04             	shl    edx,0x4
c001bfd5:	d4 40                	aam    0x40
c001bfd7:	d5 39                	aad    0x39
c001bfd9:	83 e8 30             	sub    eax,0x30
c001bfdc:	0f b6 c0             	movzx  eax,al
c001bfdf:	09 c2                	or     edx,eax
c001bfe1:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001bfe5:	c1 e2 04             	shl    edx,0x4
c001bfe8:	d4 40                	aam    0x40
c001bfea:	d5 39                	aad    0x39
c001bfec:	83 e8 30             	sub    eax,0x30
c001bfef:	0f b6 c0             	movzx  eax,al
c001bff2:	09 c2                	or     edx,eax
c001bff4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001bff8:	83 c6 10             	add    esi,0x10
c001bffb:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001bfff:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001c003:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001c007:	83 fa 0a             	cmp    edx,0xa
c001c00a:	74 0b                	je     c001c017 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001c00c:	47                   	inc    edi
c001c00d:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001c011:	75 19                	jne    c001c02c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001c013:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001c017:	31 c0                	xor    eax,eax
c001c019:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001c01e:	0f 94 c0             	sete   al
c001c021:	01 c6                	add    esi,eax
c001c023:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001c028:	75 0b                	jne    c001c035 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001c02a:	eb 14                	jmp    c001c040 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001c02c:	46                   	inc    esi
c001c02d:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001c030:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001c033:	eb ca                	jmp    c001bfff <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001c035:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001c03a:	0f 85 dd fe ff ff    	jne    c001bf1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c040:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001c045:	74 10                	je     c001c057 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001c047:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001c04c:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001c051:	0f 85 c6 fe ff ff    	jne    c001bf1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c057:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c05b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c05f:	83 e8 30             	sub    eax,0x30
c001c062:	83 ef 30             	sub    edi,0x30
c001c065:	c1 e0 04             	shl    eax,0x4
c001c068:	09 f8                	or     eax,edi
c001c06a:	0f b6 c0             	movzx  eax,al
c001c06d:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001c071:	0f 85 a6 fe ff ff    	jne    c001bf1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c077:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c07b:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001c07f:	83 e8 30             	sub    eax,0x30
c001c082:	83 ef 30             	sub    edi,0x30
c001c085:	c1 e0 04             	shl    eax,0x4
c001c088:	09 f8                	or     eax,edi
c001c08a:	0f b6 c0             	movzx  eax,al
c001c08d:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001c091:	0f 85 86 fe ff ff    	jne    c001bf1d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001c097:	50                   	push   eax
c001c098:	50                   	push   eax
c001c099:	8d 44 24 48          	lea    eax,[esp+0x48]
c001c09d:	50                   	push   eax
c001c09e:	55                   	push   ebp
c001c09f:	e8 9c 45 fe ff       	call   c0000640 <strcpy>
c001c0a4:	83 c4 10             	add    esp,0x10
c001c0a7:	eb 06                	jmp    c001c0af <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001c0a9:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001c0ad:	31 ed                	xor    ebp,ebp
c001c0af:	81 c4 4c 01 00 00    	add    esp,0x14c
c001c0b5:	89 e8                	mov    eax,ebp
c001c0b7:	5b                   	pop    ebx
c001c0b8:	5e                   	pop    esi
c001c0b9:	5f                   	pop    edi
c001c0ba:	5d                   	pop    ebp
c001c0bb:	c3                   	ret    

c001c0bc <PCI::checkBus(unsigned char)>:
c001c0bc:	56                   	push   esi
c001c0bd:	53                   	push   ebx
c001c0be:	31 db                	xor    ebx,ebx
c001c0c0:	51                   	push   ecx
c001c0c1:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c0c6:	52                   	push   edx
c001c0c7:	53                   	push   ebx
c001c0c8:	43                   	inc    ebx
c001c0c9:	56                   	push   esi
c001c0ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c0ce:	e8 6f 03 00 00       	call   c001c442 <PCI::checkDevice(unsigned char, unsigned char)>
c001c0d3:	83 c4 10             	add    esp,0x10
c001c0d6:	83 fb 20             	cmp    ebx,0x20
c001c0d9:	75 eb                	jne    c001c0c6 <PCI::checkBus(unsigned char)+0xa>
c001c0db:	58                   	pop    eax
c001c0dc:	5b                   	pop    ebx
c001c0dd:	5e                   	pop    esi
c001c0de:	c3                   	ret    
c001c0df:	90                   	nop

c001c0e0 <PCI::foundDevice(PCIDeviceInfo)>:
c001c0e0:	55                   	push   ebp
c001c0e1:	57                   	push   edi
c001c0e2:	56                   	push   esi
c001c0e3:	53                   	push   ebx
c001c0e4:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001c0ea:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001c0f2:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001c0f9:	3d ff ff 00 00       	cmp    eax,0xffff
c001c0fe:	0f 84 b7 01 00 00    	je     c001c2bb <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c104:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001c10c:	66 81 fb 06 04       	cmp    bx,0x406
c001c111:	75 32                	jne    c001c145 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001c113:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001c11b:	50                   	push   eax
c001c11c:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001c124:	50                   	push   eax
c001c125:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c12d:	50                   	push   eax
c001c12e:	55                   	push   ebp
c001c12f:	e8 4e fb ff ff       	call   c001bc82 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001c134:	59                   	pop    ecx
c001c135:	0f b6 c0             	movzx  eax,al
c001c138:	5b                   	pop    ebx
c001c139:	50                   	push   eax
c001c13a:	55                   	push   ebp
c001c13b:	e8 7c ff ff ff       	call   c001c0bc <PCI::checkBus(unsigned char)>
c001c140:	e9 16 01 00 00       	jmp    c001c25b <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001c145:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001c14c:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001c152:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001c156:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001c15d:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001c165:	85 c0                	test   eax,eax
c001c167:	74 36                	je     c001c19f <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001c169:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001c16c:	85 d2                	test   edx,edx
c001c16e:	74 2b                	je     c001c19b <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c170:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001c176:	31 f9                	xor    ecx,edi
c001c178:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001c17e:	75 1b                	jne    c001c19b <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c180:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001c184:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001c18a:	75 0f                	jne    c001c19b <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001c18c:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001c193:	39 f2                	cmp    edx,esi
c001c195:	0f 84 20 01 00 00    	je     c001c2bb <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c19b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c19d:	eb c6                	jmp    c001c165 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001c19f:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001c1a3:	be f0 34 02 c0       	mov    esi,0xc00234f0
c001c1a8:	b9 07 00 00 00       	mov    ecx,0x7
c001c1ad:	fc                   	cld    
c001c1ae:	31 d2                	xor    edx,edx
c001c1b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c1b2:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001c1b9:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c1bd:	b9 12 00 00 00       	mov    ecx,0x12
c001c1c2:	83 ec 0c             	sub    esp,0xc
c001c1c5:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001c1c7:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001c1cf:	b9 0a 00 00 00       	mov    ecx,0xa
c001c1d4:	f7 f1                	div    ecx
c001c1d6:	83 c0 30             	add    eax,0x30
c001c1d9:	83 c2 30             	add    edx,0x30
c001c1dc:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001c1e0:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001c1e4:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001c1ec:	31 d2                	xor    edx,edx
c001c1ee:	f7 f1                	div    ecx
c001c1f0:	83 c0 30             	add    eax,0x30
c001c1f3:	83 c2 30             	add    edx,0x30
c001c1f6:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001c1fa:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001c1fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c202:	50                   	push   eax
c001c203:	e8 40 04 ff ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001c208:	83 c4 10             	add    esp,0x10
c001c20b:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001c211:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001c218:	75 46                	jne    c001c260 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001c21a:	83 ec 0c             	sub    esp,0xc
c001c21d:	68 64 01 00 00       	push   0x164
c001c222:	e8 54 27 ff ff       	call   c000e97b <malloc>
c001c227:	89 c3                	mov    ebx,eax
c001c229:	89 04 24             	mov    DWORD PTR [esp],eax
c001c22c:	e8 9f 10 00 00       	call   c001d2d0 <SATABus::SATABus()>
c001c231:	58                   	pop    eax
c001c232:	5a                   	pop    edx
c001c233:	53                   	push   ebx
c001c234:	55                   	push   ebp
c001c235:	e8 04 ce fe ff       	call   c000903e <Device::addChild(Device*)>
c001c23a:	83 ec 1c             	sub    esp,0x1c
c001c23d:	b9 09 00 00 00       	mov    ecx,0x9
c001c242:	89 e7                	mov    edi,esp
c001c244:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c246:	53                   	push   ebx
c001c247:	e8 38 cd fe ff       	call   c0008f84 <Device::preOpenPCI(PCIDeviceInfo)>
c001c24c:	83 c4 30             	add    esp,0x30
c001c24f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c251:	6a 00                	push   0x0
c001c253:	6a 00                	push   0x0
c001c255:	6a 00                	push   0x0
c001c257:	53                   	push   ebx
c001c258:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c25b:	83 c4 10             	add    esp,0x10
c001c25e:	eb 5b                	jmp    c001c2bb <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001c260:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001c266:	75 19                	jne    c001c281 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001c268:	83 ec 0c             	sub    esp,0xc
c001c26b:	68 70 02 00 00       	push   0x270
c001c270:	e8 06 27 ff ff       	call   c000e97b <malloc>
c001c275:	89 c3                	mov    ebx,eax
c001c277:	89 04 24             	mov    DWORD PTR [esp],eax
c001c27a:	e8 93 02 00 00       	call   c001c512 <IDE::IDE()>
c001c27f:	eb b0                	jmp    c001c231 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001c281:	83 ec 0c             	sub    esp,0xc
c001c284:	68 58 01 00 00       	push   0x158
c001c289:	e8 ed 26 ff ff       	call   c000e97b <malloc>
c001c28e:	89 c3                	mov    ebx,eax
c001c290:	58                   	pop    eax
c001c291:	5a                   	pop    edx
c001c292:	68 d6 34 02 c0       	push   0xc00234d6
c001c297:	53                   	push   ebx
c001c298:	e8 55 d0 fe ff       	call   c00092f2 <DriverlessDevice::DriverlessDevice(char const*)>
c001c29d:	59                   	pop    ecx
c001c29e:	5f                   	pop    edi
c001c29f:	53                   	push   ebx
c001c2a0:	55                   	push   ebp
c001c2a1:	e8 98 cd fe ff       	call   c000903e <Device::addChild(Device*)>
c001c2a6:	83 ec 1c             	sub    esp,0x1c
c001c2a9:	b9 09 00 00 00       	mov    ecx,0x9
c001c2ae:	89 e7                	mov    edi,esp
c001c2b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c2b2:	53                   	push   ebx
c001c2b3:	e8 cc cc fe ff       	call   c0008f84 <Device::preOpenPCI(PCIDeviceInfo)>
c001c2b8:	83 c4 30             	add    esp,0x30
c001c2bb:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c2c1:	5b                   	pop    ebx
c001c2c2:	5e                   	pop    esi
c001c2c3:	5f                   	pop    edi
c001c2c4:	5d                   	pop    ebp
c001c2c5:	c3                   	ret    

c001c2c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001c2c6:	55                   	push   ebp
c001c2c7:	57                   	push   edi
c001c2c8:	56                   	push   esi
c001c2c9:	53                   	push   ebx
c001c2ca:	83 ec 68             	sub    esp,0x68
c001c2cd:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001c2d1:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001c2d8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c2dc:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001c2e3:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001c2e8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c2ec:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001c2f3:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001c2f8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c2fc:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001c301:	6a 0c                	push   0xc
c001c303:	57                   	push   edi
c001c304:	53                   	push   ebx
c001c305:	56                   	push   esi
c001c306:	55                   	push   ebp
c001c307:	e8 c6 f7 ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c30c:	83 c4 20             	add    esp,0x20
c001c30f:	57                   	push   edi
c001c310:	53                   	push   ebx
c001c311:	56                   	push   esi
c001c312:	55                   	push   ebp
c001c313:	e8 b0 f8 ff ff       	call   c001bbc8 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001c318:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001c31d:	57                   	push   edi
c001c31e:	53                   	push   ebx
c001c31f:	56                   	push   esi
c001c320:	55                   	push   ebp
c001c321:	e8 38 f9 ff ff       	call   c001bc5e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001c326:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001c32a:	83 c4 14             	add    esp,0x14
c001c32d:	6a 3c                	push   0x3c
c001c32f:	57                   	push   edi
c001c330:	53                   	push   ebx
c001c331:	56                   	push   esi
c001c332:	55                   	push   ebp
c001c333:	e8 9a f7 ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c338:	0f b6 c4             	movzx  eax,ah
c001c33b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001c33f:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001c343:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001c347:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001c34c:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001c352:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001c358:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001c35c:	83 c4 20             	add    esp,0x20
c001c35f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001c364:	74 30                	je     c001c396 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c366:	31 c0                	xor    eax,eax
c001c368:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001c36c:	7e 28                	jle    c001c396 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001c36e:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001c376:	39 cb                	cmp    ebx,ecx
c001c378:	75 19                	jne    c001c393 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c37a:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001c382:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001c386:	75 0b                	jne    c001c393 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001c388:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001c38f:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001c393:	40                   	inc    eax
c001c394:	eb d2                	jmp    c001c368 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001c396:	31 d2                	xor    edx,edx
c001c398:	83 ec 0c             	sub    esp,0xc
c001c39b:	57                   	push   edi
c001c39c:	53                   	push   ebx
c001c39d:	56                   	push   esi
c001c39e:	52                   	push   edx
c001c39f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001c3a3:	55                   	push   ebp
c001c3a4:	e8 01 f9 ff ff       	call   c001bcaa <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001c3ad:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001c3b1:	42                   	inc    edx
c001c3b2:	83 c4 20             	add    esp,0x20
c001c3b5:	83 fa 06             	cmp    edx,0x6
c001c3b8:	75 de                	jne    c001c398 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001c3ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c3be:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c3c2:	c1 e2 08             	shl    edx,0x8
c001c3c5:	83 ec 0c             	sub    esp,0xc
c001c3c8:	0f b6 c4             	movzx  eax,ah
c001c3cb:	09 d0                	or     eax,edx
c001c3cd:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001c3d2:	6a 02                	push   0x2
c001c3d4:	57                   	push   edi
c001c3d5:	53                   	push   ebx
c001c3d6:	56                   	push   esi
c001c3d7:	55                   	push   ebp
c001c3d8:	e8 f5 f6 ff ff       	call   c001bad2 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001c3dd:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001c3e2:	83 c4 20             	add    esp,0x20
c001c3e5:	57                   	push   edi
c001c3e6:	53                   	push   ebx
c001c3e7:	56                   	push   esi
c001c3e8:	55                   	push   ebp
c001c3e9:	e8 24 f8 ff ff       	call   c001bc12 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001c3ee:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001c3f2:	57                   	push   edi
c001c3f3:	53                   	push   ebx
c001c3f4:	56                   	push   esi
c001c3f5:	55                   	push   ebp
c001c3f6:	e8 81 f7 ff ff       	call   c001bb7c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c3fb:	b9 09 00 00 00       	mov    ecx,0x9
c001c400:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001c405:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001c409:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001c40d:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001c411:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001c415:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001c419:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001c41d:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001c421:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001c425:	83 ec 0c             	sub    esp,0xc
c001c428:	fc                   	cld    
c001c429:	89 e7                	mov    edi,esp
c001c42b:	8d 74 24 58          	lea    esi,[esp+0x58]
c001c42f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001c431:	55                   	push   ebp
c001c432:	e8 a9 fc ff ff       	call   c001c0e0 <PCI::foundDevice(PCIDeviceInfo)>
c001c437:	81 c4 8c 00 00 00    	add    esp,0x8c
c001c43d:	5b                   	pop    ebx
c001c43e:	5e                   	pop    esi
c001c43f:	5f                   	pop    edi
c001c440:	5d                   	pop    ebp
c001c441:	c3                   	ret    

c001c442 <PCI::checkDevice(unsigned char, unsigned char)>:
c001c442:	55                   	push   ebp
c001c443:	57                   	push   edi
c001c444:	56                   	push   esi
c001c445:	53                   	push   ebx
c001c446:	83 ec 0c             	sub    esp,0xc
c001c449:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001c44d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001c452:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001c457:	6a 00                	push   0x0
c001c459:	56                   	push   esi
c001c45a:	57                   	push   edi
c001c45b:	55                   	push   ebp
c001c45c:	e8 1b f7 ff ff       	call   c001bb7c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c461:	6a 00                	push   0x0
c001c463:	56                   	push   esi
c001c464:	57                   	push   edi
c001c465:	55                   	push   ebp
c001c466:	e8 5b fe ff ff       	call   c001c2c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c46b:	83 c4 20             	add    esp,0x20
c001c46e:	6a 00                	push   0x0
c001c470:	56                   	push   esi
c001c471:	57                   	push   edi
c001c472:	55                   	push   ebp
c001c473:	e8 28 f7 ff ff       	call   c001bba0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c478:	83 c4 10             	add    esp,0x10
c001c47b:	a8 80                	test   al,0x80
c001c47d:	74 2d                	je     c001c4ac <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001c47f:	bb 01 00 00 00       	mov    ebx,0x1
c001c484:	53                   	push   ebx
c001c485:	56                   	push   esi
c001c486:	57                   	push   edi
c001c487:	55                   	push   ebp
c001c488:	e8 ef f6 ff ff       	call   c001bb7c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c48d:	83 c4 10             	add    esp,0x10
c001c490:	0f b7 c0             	movzx  eax,ax
c001c493:	3d ff ff 00 00       	cmp    eax,0xffff
c001c498:	74 0c                	je     c001c4a6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001c49a:	53                   	push   ebx
c001c49b:	56                   	push   esi
c001c49c:	57                   	push   edi
c001c49d:	55                   	push   ebp
c001c49e:	e8 23 fe ff ff       	call   c001c2c6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001c4a3:	83 c4 10             	add    esp,0x10
c001c4a6:	43                   	inc    ebx
c001c4a7:	83 fb 08             	cmp    ebx,0x8
c001c4aa:	75 d8                	jne    c001c484 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001c4ac:	83 c4 0c             	add    esp,0xc
c001c4af:	5b                   	pop    ebx
c001c4b0:	5e                   	pop    esi
c001c4b1:	5f                   	pop    edi
c001c4b2:	5d                   	pop    ebp
c001c4b3:	c3                   	ret    

c001c4b4 <PCI::detect()>:
c001c4b4:	56                   	push   esi
c001c4b5:	53                   	push   ebx
c001c4b6:	53                   	push   ebx
c001c4b7:	31 db                	xor    ebx,ebx
c001c4b9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c4bd:	6a 00                	push   0x0
c001c4bf:	6a 00                	push   0x0
c001c4c1:	6a 00                	push   0x0
c001c4c3:	56                   	push   esi
c001c4c4:	e8 d7 f6 ff ff       	call   c001bba0 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001c4c9:	83 c4 10             	add    esp,0x10
c001c4cc:	a8 80                	test   al,0x80
c001c4ce:	75 21                	jne    c001c4f1 <PCI::detect()+0x3d>
c001c4d0:	51                   	push   ecx
c001c4d1:	51                   	push   ecx
c001c4d2:	6a 00                	push   0x0
c001c4d4:	56                   	push   esi
c001c4d5:	e8 e2 fb ff ff       	call   c001c0bc <PCI::checkBus(unsigned char)>
c001c4da:	83 c4 10             	add    esp,0x10
c001c4dd:	eb 2a                	jmp    c001c509 <PCI::detect()+0x55>
c001c4df:	52                   	push   edx
c001c4e0:	52                   	push   edx
c001c4e1:	53                   	push   ebx
c001c4e2:	43                   	inc    ebx
c001c4e3:	56                   	push   esi
c001c4e4:	e8 d3 fb ff ff       	call   c001c0bc <PCI::checkBus(unsigned char)>
c001c4e9:	83 c4 10             	add    esp,0x10
c001c4ec:	83 fb 08             	cmp    ebx,0x8
c001c4ef:	74 18                	je     c001c509 <PCI::detect()+0x55>
c001c4f1:	53                   	push   ebx
c001c4f2:	6a 00                	push   0x0
c001c4f4:	6a 00                	push   0x0
c001c4f6:	56                   	push   esi
c001c4f7:	e8 80 f6 ff ff       	call   c001bb7c <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001c4fc:	83 c4 10             	add    esp,0x10
c001c4ff:	0f b7 c0             	movzx  eax,ax
c001c502:	3d ff ff 00 00       	cmp    eax,0xffff
c001c507:	74 d6                	je     c001c4df <PCI::detect()+0x2b>
c001c509:	58                   	pop    eax
c001c50a:	5b                   	pop    ebx
c001c50b:	5e                   	pop    esi
c001c50c:	c3                   	ret    
c001c50d:	90                   	nop

c001c50e <IDE::close(int, int, void*)>:
c001c50e:	83 c8 ff             	or     eax,0xffffffff
c001c511:	c3                   	ret    

c001c512 <IDE::IDE()>:
c001c512:	83 ec 0c             	sub    esp,0xc
c001c515:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c519:	83 ec 08             	sub    esp,0x8
c001c51c:	68 80 35 02 c0       	push   0xc0023580
c001c521:	50                   	push   eax
c001c522:	e8 71 ce fe ff       	call   c0009398 <HardDiskController::HardDiskController(char const*)>
c001c527:	83 c4 10             	add    esp,0x10
c001c52a:	ba 94 36 02 c0       	mov    edx,0xc0023694
c001c52f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c533:	89 10                	mov    DWORD PTR [eax],edx
c001c535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c539:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001c540:	90                   	nop
c001c541:	83 c4 0c             	add    esp,0xc
c001c544:	c3                   	ret    
c001c545:	90                   	nop

c001c546 <IDE::prepareInterrupt(unsigned char)>:
c001c546:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c54b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c54f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001c557:	c3                   	ret    

c001c558 <selectDrive(unsigned char, unsigned char)>:
c001c558:	c3                   	ret    
c001c559:	90                   	nop

c001c55a <IDE::getBase(unsigned char)>:
c001c55a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001c55f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c563:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001c56b:	c3                   	ret    

c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001c56c:	55                   	push   ebp
c001c56d:	57                   	push   edi
c001c56e:	56                   	push   esi
c001c56f:	53                   	push   ebx
c001c570:	83 ec 1c             	sub    esp,0x1c
c001c573:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c577:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c57b:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001c57e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001c582:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c586:	80 f9 03             	cmp    cl,0x3
c001c589:	77 4f                	ja     c001c5da <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001c58b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c58f:	0f b6 fa             	movzx  edi,dl
c001c592:	0f b6 db             	movzx  ebx,bl
c001c595:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001c598:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001c59d:	80 ca 80             	or     dl,0x80
c001c5a0:	52                   	push   edx
c001c5a1:	6a 0c                	push   0xc
c001c5a3:	57                   	push   edi
c001c5a4:	56                   	push   esi
c001c5a5:	e8 c2 ff ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5aa:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001c5af:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c5b3:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001c5b7:	ee                   	out    dx,al
c001c5b8:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c5bd:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001c5c1:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001c5c5:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001c5c9:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001c5d1:	83 c4 2c             	add    esp,0x2c
c001c5d4:	5b                   	pop    ebx
c001c5d5:	5e                   	pop    esi
c001c5d6:	5f                   	pop    edi
c001c5d7:	5d                   	pop    ebp
c001c5d8:	eb 92                	jmp    c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c5da:	0f b6 cb             	movzx  ecx,bl
c001c5dd:	83 f9 07             	cmp    ecx,0x7
c001c5e0:	77 12                	ja     c001c5f4 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001c5e2:	0f b6 d2             	movzx  edx,dl
c001c5e5:	0f b6 db             	movzx  ebx,bl
c001c5e8:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001c5f0:	01 da                	add    edx,ebx
c001c5f2:	eb 2f                	jmp    c001c623 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c5f4:	83 f9 0d             	cmp    ecx,0xd
c001c5f7:	77 13                	ja     c001c60c <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001c5f9:	0f b6 d2             	movzx  edx,dl
c001c5fc:	0f b6 db             	movzx  ebx,bl
c001c5ff:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001c606:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001c60a:	eb 17                	jmp    c001c623 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001c60c:	83 f9 15             	cmp    ecx,0x15
c001c60f:	77 13                	ja     c001c624 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001c611:	0f b6 d2             	movzx  edx,dl
c001c614:	0f b6 db             	movzx  ebx,bl
c001c617:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001c61f:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001c623:	ee                   	out    dx,al
c001c624:	83 c4 1c             	add    esp,0x1c
c001c627:	5b                   	pop    ebx
c001c628:	5e                   	pop    esi
c001c629:	5f                   	pop    edi
c001c62a:	5d                   	pop    ebp
c001c62b:	c3                   	ret    

c001c62c <IDE::read(unsigned char, unsigned char)>:
c001c62c:	55                   	push   ebp
c001c62d:	57                   	push   edi
c001c62e:	56                   	push   esi
c001c62f:	53                   	push   ebx
c001c630:	83 ec 1c             	sub    esp,0x1c
c001c633:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001c637:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c63b:	8d 43 f8             	lea    eax,[ebx-0x8]
c001c63e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001c642:	3c 03                	cmp    al,0x3
c001c644:	77 40                	ja     c001c686 <IDE::read(unsigned char, unsigned char)+0x5a>
c001c646:	0f b6 f9             	movzx  edi,cl
c001c649:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001c64c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001c651:	0c 80                	or     al,0x80
c001c653:	50                   	push   eax
c001c654:	6a 0c                	push   0xc
c001c656:	57                   	push   edi
c001c657:	56                   	push   esi
c001c658:	e8 0f ff ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c65d:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001c662:	0f b6 d3             	movzx  edx,bl
c001c665:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001c669:	ec                   	in     al,dx
c001c66a:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001c66e:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001c673:	52                   	push   edx
c001c674:	6a 0c                	push   0xc
c001c676:	57                   	push   edi
c001c677:	56                   	push   esi
c001c678:	e8 ef fe ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c67d:	83 c4 20             	add    esp,0x20
c001c680:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001c684:	eb 4c                	jmp    c001c6d2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c686:	0f b6 d3             	movzx  edx,bl
c001c689:	83 fa 07             	cmp    edx,0x7
c001c68c:	77 12                	ja     c001c6a0 <IDE::read(unsigned char, unsigned char)+0x74>
c001c68e:	0f b6 c9             	movzx  ecx,cl
c001c691:	0f b6 d3             	movzx  edx,bl
c001c694:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001c69c:	01 c2                	add    edx,eax
c001c69e:	eb 31                	jmp    c001c6d1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c6a0:	83 fa 0d             	cmp    edx,0xd
c001c6a3:	77 13                	ja     c001c6b8 <IDE::read(unsigned char, unsigned char)+0x8c>
c001c6a5:	0f b6 c9             	movzx  ecx,cl
c001c6a8:	0f b6 d3             	movzx  edx,bl
c001c6ab:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001c6b2:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001c6b6:	eb 19                	jmp    c001c6d1 <IDE::read(unsigned char, unsigned char)+0xa5>
c001c6b8:	31 c0                	xor    eax,eax
c001c6ba:	83 fa 15             	cmp    edx,0x15
c001c6bd:	77 13                	ja     c001c6d2 <IDE::read(unsigned char, unsigned char)+0xa6>
c001c6bf:	0f b6 c9             	movzx  ecx,cl
c001c6c2:	0f b6 d3             	movzx  edx,bl
c001c6c5:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001c6cd:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001c6d1:	ec                   	in     al,dx
c001c6d2:	83 c4 1c             	add    esp,0x1c
c001c6d5:	5b                   	pop    ebx
c001c6d6:	5e                   	pop    esi
c001c6d7:	5f                   	pop    edi
c001c6d8:	5d                   	pop    ebp
c001c6d9:	c3                   	ret    

c001c6da <IDE::waitInterrupt(unsigned char)>:
c001c6da:	55                   	push   ebp
c001c6db:	57                   	push   edi
c001c6dc:	56                   	push   esi
c001c6dd:	53                   	push   ebx
c001c6de:	31 db                	xor    ebx,ebx
c001c6e0:	83 ec 0c             	sub    esp,0xc
c001c6e3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001c6e7:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001c6ec:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001c6f4:	89 e8                	mov    eax,ebp
c001c6f6:	84 c0                	test   al,al
c001c6f8:	75 30                	jne    c001c72a <IDE::waitInterrupt(unsigned char)+0x50>
c001c6fa:	50                   	push   eax
c001c6fb:	6a 0c                	push   0xc
c001c6fd:	56                   	push   esi
c001c6fe:	57                   	push   edi
c001c6ff:	e8 28 ff ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001c704:	83 c4 10             	add    esp,0x10
c001c707:	a8 01                	test   al,0x1
c001c709:	75 27                	jne    c001c732 <IDE::waitInterrupt(unsigned char)+0x58>
c001c70b:	f6 c3 04             	test   bl,0x4
c001c70e:	75 12                	jne    c001c722 <IDE::waitInterrupt(unsigned char)+0x48>
c001c710:	83 fb 32             	cmp    ebx,0x32
c001c713:	7e 0d                	jle    c001c722 <IDE::waitInterrupt(unsigned char)+0x48>
c001c715:	83 ec 0c             	sub    esp,0xc
c001c718:	6a 64                	push   0x64
c001c71a:	e8 41 8f ff ff       	call   c0015660 <milliTenthSleep(unsigned int)>
c001c71f:	83 c4 10             	add    esp,0x10
c001c722:	83 fb 3c             	cmp    ebx,0x3c
c001c725:	74 0b                	je     c001c732 <IDE::waitInterrupt(unsigned char)+0x58>
c001c727:	43                   	inc    ebx
c001c728:	eb c2                	jmp    c001c6ec <IDE::waitInterrupt(unsigned char)+0x12>
c001c72a:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001c732:	83 c4 0c             	add    esp,0xc
c001c735:	89 e8                	mov    eax,ebp
c001c737:	5b                   	pop    ebx
c001c738:	5e                   	pop    esi
c001c739:	5f                   	pop    edi
c001c73a:	5d                   	pop    ebp
c001c73b:	c3                   	ret    

c001c73c <ideChannel0IRQHandler(regs*, void*)>:
c001c73c:	83 ec 10             	sub    esp,0x10
c001c73f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c743:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001c74a:	6a 07                	push   0x7
c001c74c:	6a 00                	push   0x0
c001c74e:	50                   	push   eax
c001c74f:	e8 d8 fe ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001c754:	83 c4 1c             	add    esp,0x1c
c001c757:	c3                   	ret    

c001c758 <ideChannel1IRQHandler(regs*, void*)>:
c001c758:	83 ec 10             	sub    esp,0x10
c001c75b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c75f:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001c766:	6a 07                	push   0x7
c001c768:	6a 01                	push   0x1
c001c76a:	50                   	push   eax
c001c76b:	e8 bc fe ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001c770:	83 c4 1c             	add    esp,0x1c
c001c773:	c3                   	ret    

c001c774 <IDE::enableIRQs(unsigned char, bool)>:
c001c774:	57                   	push   edi
c001c775:	b8 02 00 00 00       	mov    eax,0x2
c001c77a:	56                   	push   esi
c001c77b:	53                   	push   ebx
c001c77c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c780:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c784:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001c789:	74 02                	je     c001c78d <IDE::enableIRQs(unsigned char, bool)+0x19>
c001c78b:	31 c0                	xor    eax,eax
c001c78d:	0f b6 db             	movzx  ebx,bl
c001c790:	bf 04 00 00 00       	mov    edi,0x4
c001c795:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001c79c:	50                   	push   eax
c001c79d:	6a 0c                	push   0xc
c001c79f:	53                   	push   ebx
c001c7a0:	56                   	push   esi
c001c7a1:	e8 c6 fd ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c7a6:	83 c4 10             	add    esp,0x10
c001c7a9:	50                   	push   eax
c001c7aa:	6a 0c                	push   0xc
c001c7ac:	53                   	push   ebx
c001c7ad:	56                   	push   esi
c001c7ae:	e8 79 fe ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001c7b3:	83 c4 10             	add    esp,0x10
c001c7b6:	4f                   	dec    edi
c001c7b7:	75 f0                	jne    c001c7a9 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001c7b9:	5b                   	pop    ebx
c001c7ba:	5e                   	pop    esi
c001c7bb:	5f                   	pop    edi
c001c7bc:	c3                   	ret    
c001c7bd:	90                   	nop

c001c7be <IDE::open(int, int, void*)>:
c001c7be:	57                   	push   edi
c001c7bf:	56                   	push   esi
c001c7c0:	53                   	push   ebx
c001c7c1:	83 ec 10             	sub    esp,0x10
c001c7c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c7c8:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001c7d1:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001c7da:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001c7e1:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001c7e8:	0f 85 17 02 00 00    	jne    c001ca05 <IDE::open(int, int, void*)+0x247>
c001c7ee:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001c7f4:	a8 70                	test   al,0x70
c001c7f6:	75 44                	jne    c001c83c <IDE::open(int, int, void*)+0x7e>
c001c7f8:	ba 20 84 00 00       	mov    edx,0x8420
c001c7fd:	0f a3 c2             	bt     edx,eax
c001c800:	73 3a                	jae    c001c83c <IDE::open(int, int, void*)+0x7e>
c001c802:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001c808:	83 ec 0c             	sub    esp,0xc
c001c80b:	83 e0 fc             	and    eax,0xfffffffc
c001c80e:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001c815:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001c81b:	83 e0 fc             	and    eax,0xfffffffc
c001c81e:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001c825:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001c82b:	83 e0 fc             	and    eax,0xfffffffc
c001c82e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001c835:	68 55 13 02 c0       	push   0xc0021355
c001c83a:	eb 60                	jmp    c001c89c <IDE::open(int, int, void*)+0xde>
c001c83c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001c846:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001c850:	be 64 00 00 00       	mov    esi,0x64
c001c855:	57                   	push   edi
c001c856:	57                   	push   edi
c001c857:	68 98 35 02 c0       	push   0xc0023598
c001c85c:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001c860:	57                   	push   edi
c001c861:	e8 da 3d fe ff       	call   c0000640 <strcpy>
c001c866:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001c86d:	31 d2                	xor    edx,edx
c001c86f:	89 c8                	mov    eax,ecx
c001c871:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c874:	f7 f6                	div    esi
c001c876:	be 0a 00 00 00       	mov    esi,0xa
c001c87b:	83 c0 30             	add    eax,0x30
c001c87e:	31 d2                	xor    edx,edx
c001c880:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001c884:	89 c8                	mov    eax,ecx
c001c886:	f7 f6                	div    esi
c001c888:	89 d1                	mov    ecx,edx
c001c88a:	31 d2                	xor    edx,edx
c001c88c:	83 c1 30             	add    ecx,0x30
c001c88f:	f7 f6                	div    esi
c001c891:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001c895:	83 c2 30             	add    edx,0x30
c001c898:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001c89c:	e8 a7 fd fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001c8a1:	bf f8 0c 00 00       	mov    edi,0xcf8
c001c8a6:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c8ad:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c8b4:	c1 e1 10             	shl    ecx,0x10
c001c8b7:	c1 e0 0b             	shl    eax,0xb
c001c8ba:	83 c4 10             	add    esp,0x10
c001c8bd:	09 c1                	or     ecx,eax
c001c8bf:	89 fa                	mov    edx,edi
c001c8c1:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c8c8:	c1 e0 08             	shl    eax,0x8
c001c8cb:	09 c1                	or     ecx,eax
c001c8cd:	89 c8                	mov    eax,ecx
c001c8cf:	0d 08 00 00 80       	or     eax,0x80000008
c001c8d4:	ef                   	out    dx,eax
c001c8d5:	be fc 0c 00 00       	mov    esi,0xcfc
c001c8da:	89 f2                	mov    edx,esi
c001c8dc:	ed                   	in     eax,dx
c001c8dd:	c1 e8 10             	shr    eax,0x10
c001c8e0:	3d ff ff 00 00       	cmp    eax,0xffff
c001c8e5:	0f 84 e5 00 00 00    	je     c001c9d0 <IDE::open(int, int, void*)+0x212>
c001c8eb:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c8f1:	89 fa                	mov    edx,edi
c001c8f3:	89 c8                	mov    eax,ecx
c001c8f5:	ef                   	out    dx,eax
c001c8f6:	b0 fe                	mov    al,0xfe
c001c8f8:	89 f2                	mov    edx,esi
c001c8fa:	ee                   	out    dx,al
c001c8fb:	89 c8                	mov    eax,ecx
c001c8fd:	89 fa                	mov    edx,edi
c001c8ff:	ef                   	out    dx,eax
c001c900:	89 f2                	mov    edx,esi
c001c902:	ed                   	in     eax,dx
c001c903:	3c fe                	cmp    al,0xfe
c001c905:	0f 85 85 00 00 00    	jne    c001c990 <IDE::open(int, int, void*)+0x1d2>
c001c90b:	83 ec 0c             	sub    esp,0xc
c001c90e:	68 8b 13 02 c0       	push   0xc002138b
c001c913:	e8 30 fd fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001c918:	c7 04 24 9e 35 02 c0 	mov    DWORD PTR [esp],0xc002359e
c001c91f:	e8 40 a6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c924:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001c92e:	c7 04 24 ac 15 02 c0 	mov    DWORD PTR [esp],0xc00215ac
c001c935:	e8 0e fd fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001c93a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001c941:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001c948:	c1 e1 10             	shl    ecx,0x10
c001c94b:	c1 e0 08             	shl    eax,0x8
c001c94e:	89 fa                	mov    edx,edi
c001c950:	09 c1                	or     ecx,eax
c001c952:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001c959:	c1 e0 0b             	shl    eax,0xb
c001c95c:	09 c1                	or     ecx,eax
c001c95e:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001c964:	89 c8                	mov    eax,ecx
c001c966:	ef                   	out    dx,eax
c001c967:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001c96d:	89 f2                	mov    edx,esi
c001c96f:	ee                   	out    dx,al
c001c970:	89 c8                	mov    eax,ecx
c001c972:	89 fa                	mov    edx,edi
c001c974:	ef                   	out    dx,eax
c001c975:	89 f2                	mov    edx,esi
c001c977:	ed                   	in     eax,dx
c001c978:	0f b6 c0             	movzx  eax,al
c001c97b:	83 c4 10             	add    esp,0x10
c001c97e:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001c984:	74 5a                	je     c001c9e0 <IDE::open(int, int, void*)+0x222>
c001c986:	83 ec 0c             	sub    esp,0xc
c001c989:	68 b3 35 02 c0       	push   0xc00235b3
c001c98e:	eb 48                	jmp    c001c9d8 <IDE::open(int, int, void*)+0x21a>
c001c990:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001c999:	75 2b                	jne    c001c9c6 <IDE::open(int, int, void*)+0x208>
c001c99b:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001c9a2:	3d 80 00 00 00       	cmp    eax,0x80
c001c9a7:	74 07                	je     c001c9b0 <IDE::open(int, int, void*)+0x1f2>
c001c9a9:	3d 8a 00 00 00       	cmp    eax,0x8a
c001c9ae:	75 16                	jne    c001c9c6 <IDE::open(int, int, void*)+0x208>
c001c9b0:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001c9b7:	83 ec 0c             	sub    esp,0xc
c001c9ba:	68 7e 0e 02 c0       	push   0xc0020e7e
c001c9bf:	e8 84 fc fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001c9c4:	eb 17                	jmp    c001c9dd <IDE::open(int, int, void*)+0x21f>
c001c9c6:	83 ec 0c             	sub    esp,0xc
c001c9c9:	68 bb 35 02 c0       	push   0xc00235bb
c001c9ce:	eb 08                	jmp    c001c9d8 <IDE::open(int, int, void*)+0x21a>
c001c9d0:	83 ec 0c             	sub    esp,0xc
c001c9d3:	68 ec 35 02 c0       	push   0xc00235ec
c001c9d8:	e8 f5 22 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001c9dd:	83 c4 10             	add    esp,0x10
c001c9e0:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001c9e7:	74 56                	je     c001ca3f <IDE::open(int, int, void*)+0x281>
c001c9e9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001c9ef:	83 e0 fc             	and    eax,0xfffffffc
c001c9f2:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001c9f9:	83 c0 08             	add    eax,0x8
c001c9fc:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001ca03:	eb 3a                	jmp    c001ca3f <IDE::open(int, int, void*)+0x281>
c001ca05:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001ca0b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001ca12:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001ca19:	05 06 02 00 00       	add    eax,0x206
c001ca1e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca25:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001ca2c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001ca33:	05 06 02 00 00       	add    eax,0x206
c001ca38:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ca3f:	83 ec 0c             	sub    esp,0xc
c001ca42:	68 a3 1a 02 c0       	push   0xc0021aa3
c001ca47:	e8 fc fb fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001ca4c:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001ca52:	83 c4 10             	add    esp,0x10
c001ca55:	89 c2                	mov    edx,eax
c001ca57:	83 e2 0f             	and    edx,0xf
c001ca5a:	83 fa 08             	cmp    edx,0x8
c001ca5d:	75 0a                	jne    c001ca69 <IDE::open(int, int, void*)+0x2ab>
c001ca5f:	83 e8 02             	sub    eax,0x2
c001ca62:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001ca69:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001ca6f:	89 c2                	mov    edx,eax
c001ca71:	83 e2 0f             	and    edx,0xf
c001ca74:	83 fa 08             	cmp    edx,0x8
c001ca77:	75 0a                	jne    c001ca83 <IDE::open(int, int, void*)+0x2c5>
c001ca79:	83 e8 02             	sub    eax,0x2
c001ca7c:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001ca83:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001ca8a:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001ca91:	89 d0                	mov    eax,edx
c001ca93:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001ca96:	8d 7a 01             	lea    edi,[edx+0x1]
c001ca99:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001ca9d:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001caa1:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001caa5:	83 e1 3f             	and    ecx,0x3f
c001caa8:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001caac:	89 f9                	mov    ecx,edi
c001caae:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001cab5:	0f b6 c9             	movzx  ecx,cl
c001cab8:	8d 78 02             	lea    edi,[eax+0x2]
c001cabb:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cabe:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cac2:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001cac6:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001caca:	83 e2 3f             	and    edx,0x3f
c001cacd:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cad1:	89 f9                	mov    ecx,edi
c001cad3:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001cad9:	0f b6 d1             	movzx  edx,cl
c001cadc:	8d 78 03             	lea    edi,[eax+0x3]
c001cadf:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cae2:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cae6:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001caea:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001caee:	83 e1 3f             	and    ecx,0x3f
c001caf1:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001caf5:	89 fa                	mov    edx,edi
c001caf7:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001cafd:	0f b6 ca             	movzx  ecx,dl
c001cb00:	8d 78 04             	lea    edi,[eax+0x4]
c001cb03:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001cb06:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001cb0a:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001cb0e:	89 fa                	mov    edx,edi
c001cb10:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001cb16:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001cb1a:	83 e2 3f             	and    edx,0x3f
c001cb1d:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001cb21:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001cb28:	66 85 f6             	test   si,si
c001cb2b:	74 24                	je     c001cb51 <IDE::open(int, int, void*)+0x393>
c001cb2d:	89 f9                	mov    ecx,edi
c001cb2f:	83 c0 05             	add    eax,0x5
c001cb32:	0f b6 d1             	movzx  edx,cl
c001cb35:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001cb38:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001cb3c:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001cb40:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001cb46:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001cb4a:	83 e0 3f             	and    eax,0x3f
c001cb4d:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001cb51:	83 ec 0c             	sub    esp,0xc
c001cb54:	68 16 36 02 c0       	push   0xc0023616
c001cb59:	e8 ea fa fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cb5e:	58                   	pop    eax
c001cb5f:	5a                   	pop    edx
c001cb60:	6a 00                	push   0x0
c001cb62:	53                   	push   ebx
c001cb63:	e8 de f9 ff ff       	call   c001c546 <IDE::prepareInterrupt(unsigned char)>
c001cb68:	59                   	pop    ecx
c001cb69:	5e                   	pop    esi
c001cb6a:	6a 01                	push   0x1
c001cb6c:	53                   	push   ebx
c001cb6d:	e8 d4 f9 ff ff       	call   c001c546 <IDE::prepareInterrupt(unsigned char)>
c001cb72:	c7 04 24 af 2e 02 c0 	mov    DWORD PTR [esp],0xc0022eaf
c001cb79:	e8 ca fa fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cb7e:	83 c4 0c             	add    esp,0xc
c001cb81:	6a 00                	push   0x0
c001cb83:	6a 00                	push   0x0
c001cb85:	53                   	push   ebx
c001cb86:	e8 e9 fb ff ff       	call   c001c774 <IDE::enableIRQs(unsigned char, bool)>
c001cb8b:	83 c4 0c             	add    esp,0xc
c001cb8e:	6a 00                	push   0x0
c001cb90:	6a 01                	push   0x1
c001cb92:	53                   	push   ebx
c001cb93:	e8 dc fb ff ff       	call   c001c774 <IDE::enableIRQs(unsigned char, bool)>
c001cb98:	c7 04 24 18 36 02 c0 	mov    DWORD PTR [esp],0xc0023618
c001cb9f:	e8 a4 fa fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cba4:	83 c4 10             	add    esp,0x10
c001cba7:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001cbae:	74 3c                	je     c001cbec <IDE::open(int, int, void*)+0x42e>
c001cbb0:	83 ec 0c             	sub    esp,0xc
c001cbb3:	53                   	push   ebx
c001cbb4:	6a 01                	push   0x1
c001cbb6:	68 3c c7 01 c0       	push   0xc001c73c
c001cbbb:	6a 0e                	push   0xe
c001cbbd:	53                   	push   ebx
c001cbbe:	e8 27 c4 fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbc3:	83 c4 14             	add    esp,0x14
c001cbc6:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001cbcc:	53                   	push   ebx
c001cbcd:	6a 01                	push   0x1
c001cbcf:	68 58 c7 01 c0       	push   0xc001c758
c001cbd4:	6a 0f                	push   0xf
c001cbd6:	53                   	push   ebx
c001cbd7:	e8 0e c4 fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cbdc:	83 c4 14             	add    esp,0x14
c001cbdf:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001cbe5:	68 b2 17 02 c0       	push   0xc00217b2
c001cbea:	eb 40                	jmp    c001cc2c <IDE::open(int, int, void*)+0x46e>
c001cbec:	83 ec 0c             	sub    esp,0xc
c001cbef:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001cbf9:	53                   	push   ebx
c001cbfa:	6a 00                	push   0x0
c001cbfc:	68 3c c7 01 c0       	push   0xc001c73c
c001cc01:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001cc07:	53                   	push   ebx
c001cc08:	e8 dd c3 fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc0d:	83 c4 14             	add    esp,0x14
c001cc10:	53                   	push   ebx
c001cc11:	6a 00                	push   0x0
c001cc13:	68 58 c7 01 c0       	push   0xc001c758
c001cc18:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001cc1e:	53                   	push   ebx
c001cc1f:	e8 c6 c3 fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001cc24:	83 c4 14             	add    esp,0x14
c001cc27:	68 58 23 02 c0       	push   0xc0022358
c001cc2c:	e8 17 fa fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cc31:	83 c4 10             	add    esp,0x10
c001cc34:	83 ec 0c             	sub    esp,0xc
c001cc37:	68 1a 36 02 c0       	push   0xc002361a
c001cc3c:	e8 07 fa fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cc41:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cc43:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc46:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001cc49:	c7 04 24 06 27 02 c0 	mov    DWORD PTR [esp],0xc0022706
c001cc50:	e8 f3 f9 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cc55:	83 c4 0c             	add    esp,0xc
c001cc58:	6a 07                	push   0x7
c001cc5a:	6a 00                	push   0x0
c001cc5c:	53                   	push   ebx
c001cc5d:	e8 ca f9 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001cc62:	83 c4 0c             	add    esp,0xc
c001cc65:	6a 07                	push   0x7
c001cc67:	6a 01                	push   0x1
c001cc69:	53                   	push   ebx
c001cc6a:	e8 bd f9 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001cc6f:	c7 04 24 68 21 02 c0 	mov    DWORD PTR [esp],0xc0022168
c001cc76:	e8 cd f9 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cc7b:	83 c4 0c             	add    esp,0xc
c001cc7e:	6a 01                	push   0x1
c001cc80:	6a 00                	push   0x0
c001cc82:	53                   	push   ebx
c001cc83:	e8 ec fa ff ff       	call   c001c774 <IDE::enableIRQs(unsigned char, bool)>
c001cc88:	83 c4 0c             	add    esp,0xc
c001cc8b:	6a 01                	push   0x1
c001cc8d:	6a 01                	push   0x1
c001cc8f:	53                   	push   ebx
c001cc90:	e8 df fa ff ff       	call   c001c774 <IDE::enableIRQs(unsigned char, bool)>
c001cc95:	c7 04 24 1d 36 02 c0 	mov    DWORD PTR [esp],0xc002361d
c001cc9c:	e8 a7 f9 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cca1:	83 c4 20             	add    esp,0x20
c001cca4:	31 c0                	xor    eax,eax
c001cca6:	5b                   	pop    ebx
c001cca7:	5e                   	pop    esi
c001cca8:	5f                   	pop    edi
c001cca9:	c3                   	ret    

c001ccaa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001ccaa:	55                   	push   ebp
c001ccab:	57                   	push   edi
c001ccac:	56                   	push   esi
c001ccad:	53                   	push   ebx
c001ccae:	83 ec 1c             	sub    esp,0x1c
c001ccb1:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ccb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ccb9:	8d 42 f8             	lea    eax,[edx-0x8]
c001ccbc:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ccc0:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001ccc4:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ccc8:	3c 03                	cmp    al,0x3
c001ccca:	77 5a                	ja     c001cd26 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001cccc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ccd0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001ccd4:	0f b6 db             	movzx  ebx,bl
c001ccd7:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001ccda:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001ccdf:	0c 80                	or     al,0x80
c001cce1:	50                   	push   eax
c001cce2:	6a 0c                	push   0xc
c001cce4:	53                   	push   ebx
c001cce5:	56                   	push   esi
c001cce6:	e8 81 f8 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cceb:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001ccf0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ccf4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ccf8:	0f b6 d2             	movzx  edx,dl
c001ccfb:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001ccff:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cd01:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001cd06:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001cd0a:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001cd0e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001cd12:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001cd1a:	83 c4 2c             	add    esp,0x2c
c001cd1d:	5b                   	pop    ebx
c001cd1e:	5e                   	pop    esi
c001cd1f:	5f                   	pop    edi
c001cd20:	5d                   	pop    ebp
c001cd21:	e9 46 f8 ff ff       	jmp    c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cd26:	0f b6 c2             	movzx  eax,dl
c001cd29:	83 f8 07             	cmp    eax,0x7
c001cd2c:	77 12                	ja     c001cd40 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001cd2e:	0f b6 c2             	movzx  eax,dl
c001cd31:	0f b6 db             	movzx  ebx,bl
c001cd34:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001cd3c:	01 c2                	add    edx,eax
c001cd3e:	eb 2f                	jmp    c001cd6f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001cd40:	83 f8 0d             	cmp    eax,0xd
c001cd43:	77 13                	ja     c001cd58 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001cd45:	0f b6 db             	movzx  ebx,bl
c001cd48:	0f b6 d2             	movzx  edx,dl
c001cd4b:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001cd52:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001cd56:	eb 17                	jmp    c001cd6f <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001cd58:	83 f8 15             	cmp    eax,0x15
c001cd5b:	77 14                	ja     c001cd71 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001cd5d:	0f b6 db             	movzx  ebx,bl
c001cd60:	0f b6 d2             	movzx  edx,dl
c001cd63:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001cd6b:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001cd6f:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001cd71:	83 c4 1c             	add    esp,0x1c
c001cd74:	5b                   	pop    ebx
c001cd75:	5e                   	pop    esi
c001cd76:	5f                   	pop    edi
c001cd77:	5d                   	pop    ebp
c001cd78:	c3                   	ret    
c001cd79:	90                   	nop

c001cd7a <IDE::detect()>:
c001cd7a:	55                   	push   ebp
c001cd7b:	57                   	push   edi
c001cd7c:	56                   	push   esi
c001cd7d:	53                   	push   ebx
c001cd7e:	81 ec 28 02 00 00    	sub    esp,0x228
c001cd84:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001cd8b:	68 1f 36 02 c0       	push   0xc002361f
c001cd90:	e8 b3 f8 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cd95:	83 c4 10             	add    esp,0x10
c001cd98:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001cd9f:	0f 85 0c 04 00 00    	jne    c001d1b1 <IDE::detect()+0x437>
c001cda5:	83 ec 0c             	sub    esp,0xc
c001cda8:	31 f6                	xor    esi,esi
c001cdaa:	68 22 36 02 c0       	push   0xc0023622
c001cdaf:	31 ff                	xor    edi,edi
c001cdb1:	e8 92 f8 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cdb6:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001cdbd:	83 c4 10             	add    esp,0x10
c001cdc0:	83 ec 0c             	sub    esp,0xc
c001cdc3:	68 25 36 02 c0       	push   0xc0023625
c001cdc8:	e8 7b f8 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cdcd:	83 c4 10             	add    esp,0x10
c001cdd0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdd8:	83 ec 0c             	sub    esp,0xc
c001cddb:	31 ed                	xor    ebp,ebp
c001cddd:	68 28 36 02 c0       	push   0xc0023628
c001cde2:	e8 61 f8 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cde7:	89 f8                	mov    eax,edi
c001cde9:	c1 e0 06             	shl    eax,0x6
c001cdec:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001cdf4:	c7 04 24 2b 36 02 c0 	mov    DWORD PTR [esp],0xc002362b
c001cdfb:	e8 48 f8 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001ce00:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c001ce04:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ce08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ce0c:	c1 e0 04             	shl    eax,0x4
c001ce0f:	83 c8 a0             	or     eax,0xffffffa0
c001ce12:	0f b6 c0             	movzx  eax,al
c001ce15:	50                   	push   eax
c001ce16:	6a 06                	push   0x6
c001ce18:	56                   	push   esi
c001ce19:	53                   	push   ebx
c001ce1a:	e8 4d f7 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce1f:	83 c4 1c             	add    esp,0x1c
c001ce22:	6a 0c                	push   0xc
c001ce24:	56                   	push   esi
c001ce25:	53                   	push   ebx
c001ce26:	e8 01 f8 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001ce2b:	83 c4 0c             	add    esp,0xc
c001ce2e:	6a 0c                	push   0xc
c001ce30:	56                   	push   esi
c001ce31:	53                   	push   ebx
c001ce32:	e8 f5 f7 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001ce37:	83 c4 0c             	add    esp,0xc
c001ce3a:	6a 0c                	push   0xc
c001ce3c:	56                   	push   esi
c001ce3d:	53                   	push   ebx
c001ce3e:	e8 e9 f7 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001ce43:	83 c4 0c             	add    esp,0xc
c001ce46:	6a 0c                	push   0xc
c001ce48:	56                   	push   esi
c001ce49:	53                   	push   ebx
c001ce4a:	e8 dd f7 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001ce4f:	c7 04 24 2e 36 02 c0 	mov    DWORD PTR [esp],0xc002362e
c001ce56:	e8 ed f7 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001ce5b:	68 ec 00 00 00       	push   0xec
c001ce60:	6a 07                	push   0x7
c001ce62:	56                   	push   esi
c001ce63:	53                   	push   ebx
c001ce64:	e8 03 f7 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ce69:	83 c4 1c             	add    esp,0x1c
c001ce6c:	6a 0c                	push   0xc
c001ce6e:	56                   	push   esi
c001ce6f:	53                   	push   ebx
c001ce70:	e8 b7 f7 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001ce75:	83 c4 0c             	add    esp,0xc
c001ce78:	6a 0c                	push   0xc
c001ce7a:	56                   	push   esi
c001ce7b:	53                   	push   ebx
c001ce7c:	e8 ab f7 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001ce81:	83 c4 0c             	add    esp,0xc
c001ce84:	6a 0c                	push   0xc
c001ce86:	56                   	push   esi
c001ce87:	53                   	push   ebx
c001ce88:	e8 9f f7 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001ce8d:	83 c4 0c             	add    esp,0xc
c001ce90:	6a 0c                	push   0xc
c001ce92:	56                   	push   esi
c001ce93:	53                   	push   ebx
c001ce94:	e8 93 f7 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001ce99:	c7 04 24 31 36 02 c0 	mov    DWORD PTR [esp],0xc0023631
c001cea0:	e8 a3 f7 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cea5:	83 c4 0c             	add    esp,0xc
c001cea8:	6a 0c                	push   0xc
c001ceaa:	56                   	push   esi
c001ceab:	53                   	push   ebx
c001ceac:	e8 7b f7 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001ceb1:	83 c4 10             	add    esp,0x10
c001ceb4:	84 c0                	test   al,al
c001ceb6:	75 1f                	jne    c001ced7 <IDE::detect()+0x15d>
c001ceb8:	83 ec 0c             	sub    esp,0xc
c001cebb:	68 34 36 02 c0       	push   0xc0023634
c001cec0:	e8 83 f7 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cec5:	e9 c3 02 00 00       	jmp    c001d18d <IDE::detect()+0x413>
c001ceca:	a8 80                	test   al,0x80
c001cecc:	74 21                	je     c001ceef <IDE::detect()+0x175>
c001cece:	45                   	inc    ebp
c001cecf:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001ced5:	7f 1e                	jg     c001cef5 <IDE::detect()+0x17b>
c001ced7:	50                   	push   eax
c001ced8:	6a 0c                	push   0xc
c001ceda:	56                   	push   esi
c001cedb:	53                   	push   ebx
c001cedc:	e8 4b f7 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001cee1:	83 c4 10             	add    esp,0x10
c001cee4:	a8 01                	test   al,0x1
c001cee6:	74 e2                	je     c001ceca <IDE::detect()+0x150>
c001cee8:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c001ceed:	eb 22                	jmp    c001cf11 <IDE::detect()+0x197>
c001ceef:	a8 08                	test   al,0x8
c001cef1:	74 db                	je     c001cece <IDE::detect()+0x154>
c001cef3:	eb 17                	jmp    c001cf0c <IDE::detect()+0x192>
c001cef5:	83 ec 0c             	sub    esp,0xc
c001cef8:	6a 32                	push   0x32
c001cefa:	e8 61 87 ff ff       	call   c0015660 <milliTenthSleep(unsigned int)>
c001ceff:	83 c4 10             	add    esp,0x10
c001cf02:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001cf08:	75 cd                	jne    c001ced7 <IDE::detect()+0x15d>
c001cf0a:	eb dc                	jmp    c001cee8 <IDE::detect()+0x16e>
c001cf0c:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001cf11:	83 ec 0c             	sub    esp,0xc
c001cf14:	68 37 36 02 c0       	push   0xc0023637
c001cf19:	e8 2a f7 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cf1e:	83 c4 10             	add    esp,0x10
c001cf21:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001cf26:	74 60                	je     c001cf88 <IDE::detect()+0x20e>
c001cf28:	50                   	push   eax
c001cf29:	6a 04                	push   0x4
c001cf2b:	56                   	push   esi
c001cf2c:	53                   	push   ebx
c001cf2d:	e8 fa f6 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001cf32:	83 c4 0c             	add    esp,0xc
c001cf35:	89 c5                	mov    ebp,eax
c001cf37:	6a 05                	push   0x5
c001cf39:	56                   	push   esi
c001cf3a:	53                   	push   ebx
c001cf3b:	e8 ec f6 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001cf40:	83 c4 10             	add    esp,0x10
c001cf43:	89 e9                	mov    ecx,ebp
c001cf45:	0f b6 c0             	movzx  eax,al
c001cf48:	0f b6 e9             	movzx  ebp,cl
c001cf4b:	83 fd 14             	cmp    ebp,0x14
c001cf4e:	75 07                	jne    c001cf57 <IDE::detect()+0x1dd>
c001cf50:	3d eb 00 00 00       	cmp    eax,0xeb
c001cf55:	eb 0e                	jmp    c001cf65 <IDE::detect()+0x1eb>
c001cf57:	3d 96 00 00 00       	cmp    eax,0x96
c001cf5c:	0f 85 2e 02 00 00    	jne    c001d190 <IDE::detect()+0x416>
c001cf62:	83 fd 69             	cmp    ebp,0x69
c001cf65:	0f 85 25 02 00 00    	jne    c001d190 <IDE::detect()+0x416>
c001cf6b:	68 a1 00 00 00       	push   0xa1
c001cf70:	6a 07                	push   0x7
c001cf72:	56                   	push   esi
c001cf73:	53                   	push   ebx
c001cf74:	e8 f3 f5 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cf79:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001cf80:	e8 db 86 ff ff       	call   c0015660 <milliTenthSleep(unsigned int)>
c001cf85:	83 c4 10             	add    esp,0x10
c001cf88:	83 ec 0c             	sub    esp,0xc
c001cf8b:	89 fd                	mov    ebp,edi
c001cf8d:	68 3a 36 02 c0       	push   0xc002363a
c001cf92:	c1 e5 06             	shl    ebp,0x6
c001cf95:	e8 ae f6 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cf9a:	01 dd                	add    ebp,ebx
c001cf9c:	8d 54 24 20          	lea    edx,[esp+0x20]
c001cfa0:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001cfa7:	52                   	push   edx
c001cfa8:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001cfac:	6a 00                	push   0x0
c001cfae:	56                   	push   esi
c001cfaf:	53                   	push   ebx
c001cfb0:	e8 f5 fc ff ff       	call   c001ccaa <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001cfb5:	83 c4 14             	add    esp,0x14
c001cfb8:	68 3e 36 02 c0       	push   0xc002363e
c001cfbd:	e8 86 f6 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001cfc2:	0f b6 44 24 13       	movzx  eax,BYTE PTR [esp+0x13]
c001cfc7:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001cfce:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001cfd5:	89 f0                	mov    eax,esi
c001cfd7:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001cfdd:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001cfe1:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001cfe7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfeb:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001cff2:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001cffa:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001d001:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001d009:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001d00f:	c7 04 24 42 36 02 c0 	mov    DWORD PTR [esp],0xc0023642
c001d016:	e8 2d f6 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d01b:	83 c4 10             	add    esp,0x10
c001d01e:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001d025:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d029:	74 09                	je     c001d034 <IDE::detect()+0x2ba>
c001d02b:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001d032:	eb 07                	jmp    c001d03b <IDE::detect()+0x2c1>
c001d034:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001d03b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001d03f:	89 f8                	mov    eax,edi
c001d041:	83 ec 0c             	sub    esp,0xc
c001d044:	c1 e0 06             	shl    eax,0x6
c001d047:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001d04a:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001d050:	68 46 36 02 c0       	push   0xc0023646
c001d055:	e8 ee f5 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d05a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d05e:	89 e8                	mov    eax,ebp
c001d060:	83 c4 10             	add    esp,0x10
c001d063:	8d 6a 28             	lea    ebp,[edx+0x28]
c001d066:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001d069:	83 c0 02             	add    eax,0x2
c001d06c:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001d072:	83 c2 02             	add    edx,0x2
c001d075:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001d078:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001d07e:	39 d5                	cmp    ebp,edx
c001d080:	75 e4                	jne    c001d066 <IDE::detect()+0x2ec>
c001d082:	83 ec 0c             	sub    esp,0xc
c001d085:	89 fd                	mov    ebp,edi
c001d087:	c1 e5 06             	shl    ebp,0x6
c001d08a:	01 dd                	add    ebp,ebx
c001d08c:	0f b7 85 74 01 00 00 	movzx  eax,WORD PTR [ebp+0x174]
c001d093:	c6 85 a8 01 00 00 00 	mov    BYTE PTR [ebp+0x1a8],0x0
c001d09a:	c1 e8 09             	shr    eax,0x9
c001d09d:	83 e0 01             	and    eax,0x1
c001d0a0:	88 85 a9 01 00 00    	mov    BYTE PTR [ebp+0x1a9],al
c001d0a6:	68 4a 36 02 c0       	push   0xc002364a
c001d0ab:	e8 98 f5 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d0b0:	83 c4 10             	add    esp,0x10
c001d0b3:	f6 44 24 03 01       	test   BYTE PTR [esp+0x3],0x1
c001d0b8:	75 66                	jne    c001d120 <IDE::detect()+0x3a6>
c001d0ba:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001d0c1:	0f 84 b8 00 00 00    	je     c001d17f <IDE::detect()+0x405>
c001d0c7:	83 ec 0c             	sub    esp,0xc
c001d0ca:	68 4e 36 02 c0       	push   0xc002364e
c001d0cf:	e8 74 f5 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d0d4:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d0db:	e8 9b 18 ff ff       	call   c000e97b <malloc>
c001d0e0:	89 04 24             	mov    DWORD PTR [esp],eax
c001d0e3:	89 c5                	mov    ebp,eax
c001d0e5:	e8 44 05 00 00       	call   c001d62e <ATA::ATA()>
c001d0ea:	c7 04 24 52 36 02 c0 	mov    DWORD PTR [esp],0xc0023652
c001d0f1:	e8 52 f5 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d0f6:	59                   	pop    ecx
c001d0f7:	58                   	pop    eax
c001d0f8:	55                   	push   ebp
c001d0f9:	53                   	push   ebx
c001d0fa:	e8 3f bf fe ff       	call   c000903e <Device::addChild(Device*)>
c001d0ff:	c7 04 24 57 36 02 c0 	mov    DWORD PTR [esp],0xc0023657
c001d106:	e8 3d f5 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d10b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d10e:	53                   	push   ebx
c001d10f:	57                   	push   edi
c001d110:	6a 00                	push   0x0
c001d112:	55                   	push   ebp
c001d113:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d116:	83 c4 14             	add    esp,0x14
c001d119:	68 5c 36 02 c0       	push   0xc002365c
c001d11e:	eb 57                	jmp    c001d177 <IDE::detect()+0x3fd>
c001d120:	83 ec 0c             	sub    esp,0xc
c001d123:	68 61 36 02 c0       	push   0xc0023661
c001d128:	e8 1b f5 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d12d:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d134:	e8 42 18 ff ff       	call   c000e97b <malloc>
c001d139:	89 04 24             	mov    DWORD PTR [esp],eax
c001d13c:	89 c5                	mov    ebp,eax
c001d13e:	e8 67 0b 00 00       	call   c001dcaa <ATAPI::ATAPI()>
c001d143:	c7 04 24 67 36 02 c0 	mov    DWORD PTR [esp],0xc0023667
c001d14a:	e8 f9 f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d14f:	58                   	pop    eax
c001d150:	5a                   	pop    edx
c001d151:	55                   	push   ebp
c001d152:	53                   	push   ebx
c001d153:	e8 e6 be fe ff       	call   c000903e <Device::addChild(Device*)>
c001d158:	c7 04 24 6e 36 02 c0 	mov    DWORD PTR [esp],0xc002366e
c001d15f:	e8 e4 f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d164:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d167:	53                   	push   ebx
c001d168:	57                   	push   edi
c001d169:	6a 00                	push   0x0
c001d16b:	55                   	push   ebp
c001d16c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d16f:	83 c4 14             	add    esp,0x14
c001d172:	68 75 36 02 c0       	push   0xc0023675
c001d177:	e8 cc f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d17c:	83 c4 10             	add    esp,0x10
c001d17f:	83 ec 0c             	sub    esp,0xc
c001d182:	47                   	inc    edi
c001d183:	68 7c 36 02 c0       	push   0xc002367c
c001d188:	e8 bb f4 fe ff       	call   c000c648 <KeSetBootMessage(char const*)>
c001d18d:	83 c4 10             	add    esp,0x10
c001d190:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001d195:	74 0d                	je     c001d1a4 <IDE::detect()+0x42a>
c001d197:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001d19f:	e9 34 fc ff ff       	jmp    c001cdd8 <IDE::detect()+0x5e>
c001d1a4:	4e                   	dec    esi
c001d1a5:	74 0a                	je     c001d1b1 <IDE::detect()+0x437>
c001d1a7:	be 01 00 00 00       	mov    esi,0x1
c001d1ac:	e9 0f fc ff ff       	jmp    c001cdc0 <IDE::detect()+0x46>
c001d1b1:	81 c4 1c 02 00 00    	add    esp,0x21c
c001d1b7:	5b                   	pop    ebx
c001d1b8:	5e                   	pop    esi
c001d1b9:	5f                   	pop    edi
c001d1ba:	5d                   	pop    ebp
c001d1bb:	c3                   	ret    

c001d1bc <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001d1bc:	55                   	push   ebp
c001d1bd:	57                   	push   edi
c001d1be:	56                   	push   esi
c001d1bf:	53                   	push   ebx
c001d1c0:	83 ec 1c             	sub    esp,0x1c
c001d1c3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d1c7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001d1cb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1cf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d1d3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d1d7:	88 c3                	mov    bl,al
c001d1d9:	25 ff 00 00 00       	and    eax,0xff
c001d1de:	0f 84 88 00 00 00    	je     c001d26c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d1e4:	83 ec 0c             	sub    esp,0xc
c001d1e7:	89 c7                	mov    edi,eax
c001d1e9:	68 80 36 02 c0       	push   0xc0023680
c001d1ee:	e8 71 9d fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d1f3:	83 c4 10             	add    esp,0x10
c001d1f6:	83 ff 01             	cmp    edi,0x1
c001d1f9:	74 6b                	je     c001d266 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001d1fb:	83 ff 02             	cmp    edi,0x2
c001d1fe:	75 58                	jne    c001d258 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001d200:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001d205:	01 ff                	add    edi,edi
c001d207:	50                   	push   eax
c001d208:	09 fe                	or     esi,edi
c001d20a:	6a 01                	push   0x1
c001d20c:	89 f0                	mov    eax,esi
c001d20e:	0f b6 f0             	movzx  esi,al
c001d211:	c1 e6 06             	shl    esi,0x6
c001d214:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001d21c:	50                   	push   eax
c001d21d:	55                   	push   ebp
c001d21e:	e8 09 f4 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001d223:	83 c4 10             	add    esp,0x10
c001d226:	a8 01                	test   al,0x1
c001d228:	74 02                	je     c001d22c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001d22a:	b3 07                	mov    bl,0x7
c001d22c:	a8 02                	test   al,0x2
c001d22e:	74 02                	je     c001d232 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001d230:	b3 03                	mov    bl,0x3
c001d232:	a8 04                	test   al,0x4
c001d234:	74 02                	je     c001d238 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001d236:	b3 14                	mov    bl,0x14
c001d238:	a8 08                	test   al,0x8
c001d23a:	74 02                	je     c001d23e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001d23c:	b3 03                	mov    bl,0x3
c001d23e:	a8 10                	test   al,0x10
c001d240:	74 02                	je     c001d244 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001d242:	b3 15                	mov    bl,0x15
c001d244:	a8 20                	test   al,0x20
c001d246:	74 02                	je     c001d24a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001d248:	b3 03                	mov    bl,0x3
c001d24a:	a8 40                	test   al,0x40
c001d24c:	74 02                	je     c001d250 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001d24e:	b3 16                	mov    bl,0x16
c001d250:	a8 80                	test   al,0x80
c001d252:	74 18                	je     c001d26c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d254:	b3 0d                	mov    bl,0xd
c001d256:	eb 14                	jmp    c001d26c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d258:	83 ff 03             	cmp    edi,0x3
c001d25b:	74 0d                	je     c001d26a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001d25d:	83 ff 04             	cmp    edi,0x4
c001d260:	75 0a                	jne    c001d26c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d262:	b3 08                	mov    bl,0x8
c001d264:	eb 06                	jmp    c001d26c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d266:	b3 13                	mov    bl,0x13
c001d268:	eb 02                	jmp    c001d26c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001d26a:	b3 17                	mov    bl,0x17
c001d26c:	83 c4 1c             	add    esp,0x1c
c001d26f:	88 d8                	mov    al,bl
c001d271:	5b                   	pop    ebx
c001d272:	5e                   	pop    esi
c001d273:	5f                   	pop    edi
c001d274:	5d                   	pop    ebp
c001d275:	c3                   	ret    

c001d276 <IDE::polling(unsigned char, unsigned int)>:
c001d276:	57                   	push   edi
c001d277:	56                   	push   esi
c001d278:	53                   	push   ebx
c001d279:	bb 04 00 00 00       	mov    ebx,0x4
c001d27e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001d282:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d287:	52                   	push   edx
c001d288:	6a 0c                	push   0xc
c001d28a:	56                   	push   esi
c001d28b:	57                   	push   edi
c001d28c:	e8 9b f3 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001d291:	83 c4 10             	add    esp,0x10
c001d294:	4b                   	dec    ebx
c001d295:	75 f0                	jne    c001d287 <IDE::polling(unsigned char, unsigned int)+0x11>
c001d297:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d29c:	50                   	push   eax
c001d29d:	6a 0c                	push   0xc
c001d29f:	56                   	push   esi
c001d2a0:	57                   	push   edi
c001d2a1:	e8 86 f3 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001d2a6:	83 c4 10             	add    esp,0x10
c001d2a9:	a8 01                	test   al,0x1
c001d2ab:	75 17                	jne    c001d2c4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d2ad:	a8 20                	test   al,0x20
c001d2af:	75 0f                	jne    c001d2c0 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001d2b1:	4b                   	dec    ebx
c001d2b2:	74 10                	je     c001d2c4 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001d2b4:	a8 80                	test   al,0x80
c001d2b6:	75 e4                	jne    c001d29c <IDE::polling(unsigned char, unsigned int)+0x26>
c001d2b8:	a8 08                	test   al,0x8
c001d2ba:	74 e0                	je     c001d29c <IDE::polling(unsigned char, unsigned int)+0x26>
c001d2bc:	31 c0                	xor    eax,eax
c001d2be:	eb 06                	jmp    c001d2c6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d2c0:	b0 01                	mov    al,0x1
c001d2c2:	eb 02                	jmp    c001d2c6 <IDE::polling(unsigned char, unsigned int)+0x50>
c001d2c4:	b0 02                	mov    al,0x2
c001d2c6:	5b                   	pop    ebx
c001d2c7:	5e                   	pop    esi
c001d2c8:	5f                   	pop    edi
c001d2c9:	c3                   	ret    

c001d2ca <SATABus::close(int, int, void*)>:
c001d2ca:	31 c0                	xor    eax,eax
c001d2cc:	c3                   	ret    
c001d2cd:	90                   	nop

c001d2ce <SATABus::detect()>:
c001d2ce:	c3                   	ret    
c001d2cf:	90                   	nop

c001d2d0 <SATABus::SATABus()>:
c001d2d0:	83 ec 0c             	sub    esp,0xc
c001d2d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2d7:	83 ec 08             	sub    esp,0x8
c001d2da:	68 b8 36 02 c0       	push   0xc00236b8
c001d2df:	50                   	push   eax
c001d2e0:	e8 b3 c0 fe ff       	call   c0009398 <HardDiskController::HardDiskController(char const*)>
c001d2e5:	83 c4 10             	add    esp,0x10
c001d2e8:	ba e4 36 02 c0       	mov    edx,0xc00236e4
c001d2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d2f1:	89 10                	mov    DWORD PTR [eax],edx
c001d2f3:	83 ec 0c             	sub    esp,0xc
c001d2f6:	6a 50                	push   0x50
c001d2f8:	e8 98 1c ff ff       	call   c000ef95 <Phys::allocateContiguousPages(int)>
c001d2fd:	83 c4 10             	add    esp,0x10
c001d300:	89 c2                	mov    edx,eax
c001d302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d306:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001d30c:	83 ec 0c             	sub    esp,0xc
c001d30f:	6a 50                	push   0x50
c001d311:	e8 35 4d ff ff       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c001d316:	83 c4 10             	add    esp,0x10
c001d319:	89 c2                	mov    edx,eax
c001d31b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d31f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d325:	a1 d0 be 02 c0       	mov    eax,ds:0xc002bed0
c001d32a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d32e:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001d334:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d338:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001d33e:	83 ec 0c             	sub    esp,0xc
c001d341:	6a 03                	push   0x3
c001d343:	6a 50                	push   0x50
c001d345:	51                   	push   ecx
c001d346:	52                   	push   edx
c001d347:	50                   	push   eax
c001d348:	e8 d1 55 ff ff       	call   c001291e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001d34d:	83 c4 20             	add    esp,0x20
c001d350:	90                   	nop
c001d351:	83 c4 0c             	add    esp,0xc
c001d354:	c3                   	ret    
c001d355:	90                   	nop

c001d356 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001d356:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d35a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001d35d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001d360:	09 c2                	or     edx,eax
c001d362:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d366:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d36c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d36e:	31 c0                	xor    eax,eax
c001d370:	c1 e9 08             	shr    ecx,0x8
c001d373:	83 e1 0f             	and    ecx,0xf
c001d376:	39 c8                	cmp    eax,ecx
c001d378:	74 0a                	je     c001d384 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001d37a:	f6 c2 01             	test   dl,0x1
c001d37d:	74 08                	je     c001d387 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001d37f:	d1 ea                	shr    edx,1
c001d381:	40                   	inc    eax
c001d382:	eb f2                	jmp    c001d376 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001d384:	83 c8 ff             	or     eax,0xffffffff
c001d387:	c3                   	ret    

c001d388 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001d388:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d38c:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001d38f:	89 c2                	mov    edx,eax
c001d391:	c1 ea 08             	shr    edx,0x8
c001d394:	83 e2 0f             	and    edx,0xf
c001d397:	4a                   	dec    edx
c001d398:	75 32                	jne    c001d3cc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d39a:	83 e0 0f             	and    eax,0xf
c001d39d:	83 f8 03             	cmp    eax,0x3
c001d3a0:	75 2a                	jne    c001d3cc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001d3a2:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001d3a5:	b8 02 00 00 00       	mov    eax,0x2
c001d3aa:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001d3b0:	74 1c                	je     c001d3ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d3b2:	b8 04 00 00 00       	mov    eax,0x4
c001d3b7:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001d3bd:	74 0f                	je     c001d3ce <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001d3bf:	31 c0                	xor    eax,eax
c001d3c1:	83 fa 03             	cmp    edx,0x3
c001d3c4:	0f 94 c0             	sete   al
c001d3c7:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001d3cb:	c3                   	ret    
c001d3cc:	31 c0                	xor    eax,eax
c001d3ce:	c3                   	ret    
c001d3cf:	90                   	nop

c001d3d0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001d3d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3d7:	0f ba e2 0f          	bt     edx,0xf
c001d3db:	72 f7                	jb     c001d3d4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001d3dd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3e0:	83 ca 10             	or     edx,0x10
c001d3e3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d3e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3e9:	83 ca 01             	or     edx,0x1
c001d3ec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d3ef:	c3                   	ret    

c001d3f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001d3f0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001d3f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d3f7:	83 e2 fe             	and    edx,0xfffffffe
c001d3fa:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d3fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d400:	83 e2 ef             	and    edx,0xffffffef
c001d403:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001d406:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d409:	0f ba e2 0e          	bt     edx,0xe
c001d40d:	72 f7                	jb     c001d406 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d40f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001d412:	0f ba e2 0f          	bt     edx,0xf
c001d416:	72 ee                	jb     c001d406 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001d418:	c3                   	ret    
c001d419:	90                   	nop

c001d41a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001d41a:	55                   	push   ebp
c001d41b:	57                   	push   edi
c001d41c:	56                   	push   esi
c001d41d:	53                   	push   ebx
c001d41e:	83 ec 1c             	sub    esp,0x1c
c001d421:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d425:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d429:	53                   	push   ebx
c001d42a:	56                   	push   esi
c001d42b:	e8 c0 ff ff ff       	call   c001d3f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001d430:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001d434:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d43a:	83 ec 0c             	sub    esp,0xc
c001d43d:	c1 e5 0a             	shl    ebp,0xa
c001d440:	01 e8                	add    eax,ebp
c001d442:	89 03                	mov    DWORD PTR [ebx],eax
c001d444:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d446:	68 00 04 00 00       	push   0x400
c001d44b:	6a 00                	push   0x0
c001d44d:	50                   	push   eax
c001d44e:	e8 9d 30 fe ff       	call   c00004f0 <memset>
c001d453:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001d459:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001d45d:	01 e8                	add    eax,ebp
c001d45f:	83 c4 1c             	add    esp,0x1c
c001d462:	89 03                	mov    DWORD PTR [ebx],eax
c001d464:	c1 e2 08             	shl    edx,0x8
c001d467:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001d46e:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001d474:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001d47a:	01 f8                	add    eax,edi
c001d47c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001d47f:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d482:	68 00 01 00 00       	push   0x100
c001d487:	6a 00                	push   0x0
c001d489:	50                   	push   eax
c001d48a:	e8 61 30 fe ff       	call   c00004f0 <memset>
c001d48f:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001d495:	01 fa                	add    edx,edi
c001d497:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d49b:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001d49e:	c1 e7 0d             	shl    edi,0xd
c001d4a1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001d4a8:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001d4ae:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001d4b4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d4b8:	31 ff                	xor    edi,edi
c001d4ba:	83 c4 10             	add    esp,0x10
c001d4bd:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001d4c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4c7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001d4cd:	83 c5 20             	add    ebp,0x20
c001d4d0:	01 f8                	add    eax,edi
c001d4d2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d4d5:	52                   	push   edx
c001d4d6:	68 00 01 00 00       	push   0x100
c001d4db:	6a 00                	push   0x0
c001d4dd:	50                   	push   eax
c001d4de:	e8 0d 30 fe ff       	call   c00004f0 <memset>
c001d4e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d4e7:	83 c4 10             	add    esp,0x10
c001d4ea:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001d4f0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001d4f7:	01 f8                	add    eax,edi
c001d4f9:	81 c7 00 01 00 00    	add    edi,0x100
c001d4ff:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001d502:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001d508:	75 b3                	jne    c001d4bd <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001d50a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d511:	50                   	push   eax
c001d512:	50                   	push   eax
c001d513:	53                   	push   ebx
c001d514:	56                   	push   esi
c001d515:	e8 b6 fe ff ff       	call   c001d3d0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001d51a:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001d521:	83 c4 2c             	add    esp,0x2c
c001d524:	5b                   	pop    ebx
c001d525:	5e                   	pop    esi
c001d526:	5f                   	pop    edi
c001d527:	5d                   	pop    ebp
c001d528:	c3                   	ret    
c001d529:	90                   	nop

c001d52a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001d52a:	55                   	push   ebp
c001d52b:	57                   	push   edi
c001d52c:	56                   	push   esi
c001d52d:	53                   	push   ebx
c001d52e:	31 db                	xor    ebx,ebx
c001d530:	83 ec 0c             	sub    esp,0xc
c001d533:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d537:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001d53b:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001d53e:	f7 c7 01 00 00 00    	test   edi,0x1
c001d544:	74 7a                	je     c001d5c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d546:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d54a:	89 d8                	mov    eax,ebx
c001d54c:	c1 e0 07             	shl    eax,0x7
c001d54f:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001d556:	55                   	push   ebp
c001d557:	56                   	push   esi
c001d558:	e8 2b fe ff ff       	call   c001d388 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001d55d:	5a                   	pop    edx
c001d55e:	83 f8 01             	cmp    eax,0x1
c001d561:	59                   	pop    ecx
c001d562:	75 21                	jne    c001d585 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001d564:	50                   	push   eax
c001d565:	53                   	push   ebx
c001d566:	55                   	push   ebp
c001d567:	56                   	push   esi
c001d568:	e8 ad fe ff ff       	call   c001d41a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d56d:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001d574:	e8 02 14 ff ff       	call   c000e97b <malloc>
c001d579:	89 c5                	mov    ebp,eax
c001d57b:	89 04 24             	mov    DWORD PTR [esp],eax
c001d57e:	e8 f3 0d 00 00       	call   c001e376 <SATA::SATA()>
c001d583:	eb 24                	jmp    c001d5a9 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001d585:	83 f8 04             	cmp    eax,0x4
c001d588:	75 36                	jne    c001d5c0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001d58a:	51                   	push   ecx
c001d58b:	53                   	push   ebx
c001d58c:	55                   	push   ebp
c001d58d:	56                   	push   esi
c001d58e:	e8 87 fe ff ff       	call   c001d41a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001d593:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001d59a:	e8 dc 13 ff ff       	call   c000e97b <malloc>
c001d59f:	89 c5                	mov    ebp,eax
c001d5a1:	89 04 24             	mov    DWORD PTR [esp],eax
c001d5a4:	e8 65 11 00 00       	call   c001e70e <SATAPI::SATAPI()>
c001d5a9:	58                   	pop    eax
c001d5aa:	5a                   	pop    edx
c001d5ab:	55                   	push   ebp
c001d5ac:	56                   	push   esi
c001d5ad:	e8 8c ba fe ff       	call   c000903e <Device::addChild(Device*)>
c001d5b2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001d5b5:	56                   	push   esi
c001d5b6:	6a 00                	push   0x0
c001d5b8:	53                   	push   ebx
c001d5b9:	55                   	push   ebp
c001d5ba:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001d5bd:	83 c4 20             	add    esp,0x20
c001d5c0:	d1 ef                	shr    edi,1
c001d5c2:	43                   	inc    ebx
c001d5c3:	83 fb 20             	cmp    ebx,0x20
c001d5c6:	0f 85 72 ff ff ff    	jne    c001d53e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001d5cc:	83 c4 0c             	add    esp,0xc
c001d5cf:	5b                   	pop    ebx
c001d5d0:	5e                   	pop    esi
c001d5d1:	5f                   	pop    edi
c001d5d2:	5d                   	pop    ebp
c001d5d3:	c3                   	ret    

c001d5d4 <SATABus::open(int, int, void*)>:
c001d5d4:	53                   	push   ebx
c001d5d5:	83 ec 08             	sub    esp,0x8
c001d5d8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5dc:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001d5e2:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001d5e8:	e8 03 7c ff ff       	call   c00151f0 <KeDisablePreemption()>
c001d5ed:	52                   	push   edx
c001d5ee:	52                   	push   edx
c001d5ef:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001d5f5:	53                   	push   ebx
c001d5f6:	e8 2f ff ff ff       	call   c001d52a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001d5fb:	e8 18 7c ff ff       	call   c0015218 <KeRestorePreemption()>
c001d600:	31 c0                	xor    eax,eax
c001d602:	83 c4 18             	add    esp,0x18
c001d605:	5b                   	pop    ebx
c001d606:	c3                   	ret    
c001d607:	90                   	nop

c001d608 <ATA::close(int, int, void*)>:
c001d608:	83 ec 0c             	sub    esp,0xc
c001d60b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d60f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d615:	85 c0                	test   eax,eax
c001d617:	74 0c                	je     c001d625 <ATA::close(int, int, void*)+0x1d>
c001d619:	83 ec 0c             	sub    esp,0xc
c001d61c:	8b 10                	mov    edx,DWORD PTR [eax]
c001d61e:	50                   	push   eax
c001d61f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d622:	83 c4 10             	add    esp,0x10
c001d625:	31 c0                	xor    eax,eax
c001d627:	83 c4 0c             	add    esp,0xc
c001d62a:	c3                   	ret    
c001d62b:	90                   	nop

c001d62c <ATA::powerSaving(PowerSavingLevel)>:
c001d62c:	c3                   	ret    
c001d62d:	90                   	nop

c001d62e <ATA::ATA()>:
c001d62e:	83 ec 0c             	sub    esp,0xc
c001d631:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d635:	83 ec 04             	sub    esp,0x4
c001d638:	68 00 02 00 00       	push   0x200
c001d63d:	68 bd 37 02 c0       	push   0xc00237bd
c001d642:	50                   	push   eax
c001d643:	e8 da bd fe ff       	call   c0009422 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d648:	83 c4 10             	add    esp,0x10
c001d64b:	ba 24 37 02 c0       	mov    edx,0xc0023724
c001d650:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d654:	89 10                	mov    DWORD PTR [eax],edx
c001d656:	90                   	nop
c001d657:	83 c4 0c             	add    esp,0xc
c001d65a:	c3                   	ret    
c001d65b:	90                   	nop

c001d65c <ATA::flush(bool)>:
c001d65c:	53                   	push   ebx
c001d65d:	83 ec 08             	sub    esp,0x8
c001d660:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d664:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001d669:	83 f8 01             	cmp    eax,0x1
c001d66c:	19 c0                	sbb    eax,eax
c001d66e:	83 e0 fd             	and    eax,0xfffffffd
c001d671:	05 ea 00 00 00       	add    eax,0xea
c001d676:	50                   	push   eax
c001d677:	6a 07                	push   0x7
c001d679:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d680:	50                   	push   eax
c001d681:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d687:	e8 e0 ee ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d68c:	83 c4 0c             	add    esp,0xc
c001d68f:	6a 00                	push   0x0
c001d691:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d698:	50                   	push   eax
c001d699:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d69f:	e8 d2 fb ff ff       	call   c001d276 <IDE::polling(unsigned char, unsigned int)>
c001d6a4:	83 c4 18             	add    esp,0x18
c001d6a7:	5b                   	pop    ebx
c001d6a8:	c3                   	ret    
c001d6a9:	90                   	nop

c001d6aa <ATA::readyForCommand()>:
c001d6aa:	56                   	push   esi
c001d6ab:	53                   	push   ebx
c001d6ac:	53                   	push   ebx
c001d6ad:	31 db                	xor    ebx,ebx
c001d6af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6b3:	51                   	push   ecx
c001d6b4:	6a 0c                	push   0xc
c001d6b6:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d6bd:	50                   	push   eax
c001d6be:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d6c4:	e8 63 ef ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001d6c9:	83 c4 10             	add    esp,0x10
c001d6cc:	a8 88                	test   al,0x88
c001d6ce:	74 1f                	je     c001d6ef <ATA::readyForCommand()+0x45>
c001d6d0:	43                   	inc    ebx
c001d6d1:	83 fb 63             	cmp    ebx,0x63
c001d6d4:	7e dd                	jle    c001d6b3 <ATA::readyForCommand()+0x9>
c001d6d6:	83 ec 0c             	sub    esp,0xc
c001d6d9:	6a 0a                	push   0xa
c001d6db:	e8 80 7f ff ff       	call   c0015660 <milliTenthSleep(unsigned int)>
c001d6e0:	83 c4 10             	add    esp,0x10
c001d6e3:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001d6e9:	75 c8                	jne    c001d6b3 <ATA::readyForCommand()+0x9>
c001d6eb:	31 c0                	xor    eax,eax
c001d6ed:	eb 02                	jmp    c001d6f1 <ATA::readyForCommand()+0x47>
c001d6ef:	b0 01                	mov    al,0x1
c001d6f1:	5a                   	pop    edx
c001d6f2:	5b                   	pop    ebx
c001d6f3:	5e                   	pop    esi
c001d6f4:	c3                   	ret    
c001d6f5:	90                   	nop

c001d6f6 <ATA::access(unsigned long long, int, void*, bool)>:
c001d6f6:	55                   	push   ebp
c001d6f7:	57                   	push   edi
c001d6f8:	56                   	push   esi
c001d6f9:	53                   	push   ebx
c001d6fa:	83 ec 2c             	sub    esp,0x2c
c001d6fd:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d701:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d705:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d709:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d70d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001d711:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001d715:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d719:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001d71f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d723:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001d729:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d72d:	c1 e0 06             	shl    eax,0x6
c001d730:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001d738:	74 5d                	je     c001d797 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001d73a:	89 fa                	mov    edx,edi
c001d73c:	89 f0                	mov    eax,esi
c001d73e:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001d742:	c1 ea 1c             	shr    edx,0x1c
c001d745:	89 d1                	mov    ecx,edx
c001d747:	09 c1                	or     ecx,eax
c001d749:	74 25                	je     c001d770 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001d74b:	31 ed                	xor    ebp,ebp
c001d74d:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001d754:	89 fa                	mov    edx,edi
c001d756:	89 f0                	mov    eax,esi
c001d758:	0f ad d0             	shrd   eax,edx,cl
c001d75b:	d3 ea                	shr    edx,cl
c001d75d:	f6 c1 20             	test   cl,0x20
c001d760:	74 02                	je     c001d764 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001d762:	89 d0                	mov    eax,edx
c001d764:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001d768:	45                   	inc    ebp
c001d769:	83 fd 06             	cmp    ebp,0x6
c001d76c:	75 df                	jne    c001d74d <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001d76e:	eb 76                	jmp    c001d7e6 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001d770:	89 f0                	mov    eax,esi
c001d772:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001d777:	89 fa                	mov    edx,edi
c001d779:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d780:	0f ac d0 10          	shrd   eax,edx,0x10
c001d784:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d789:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d78d:	c1 ee 18             	shr    esi,0x18
c001d790:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001d795:	eb 56                	jmp    c001d7ed <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d797:	6a 00                	push   0x0
c001d799:	6a 3f                	push   0x3f
c001d79b:	57                   	push   edi
c001d79c:	56                   	push   esi
c001d79d:	e8 f2 23 00 00       	call   c001fb94 <__umoddi3>
c001d7a2:	83 c4 10             	add    esp,0x10
c001d7a5:	40                   	inc    eax
c001d7a6:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001d7aa:	6a 00                	push   0x0
c001d7ac:	68 f0 03 00 00       	push   0x3f0
c001d7b1:	57                   	push   edi
c001d7b2:	56                   	push   esi
c001d7b3:	e8 dc 22 00 00       	call   c001fa94 <__udivdi3>
c001d7b8:	83 c4 10             	add    esp,0x10
c001d7bb:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001d7c0:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001d7c7:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001d7cc:	6a 00                	push   0x0
c001d7ce:	6a 3f                	push   0x3f
c001d7d0:	57                   	push   edi
c001d7d1:	56                   	push   esi
c001d7d2:	e8 bd 22 00 00       	call   c001fa94 <__udivdi3>
c001d7d7:	83 c4 10             	add    esp,0x10
c001d7da:	83 e0 0f             	and    eax,0xf
c001d7dd:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001d7e2:	89 c6                	mov    esi,eax
c001d7e4:	eb 07                	jmp    c001d7ed <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001d7e6:	31 f6                	xor    esi,esi
c001d7e8:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001d7ed:	bf 01 00 00 00       	mov    edi,0x1
c001d7f2:	55                   	push   ebp
c001d7f3:	6a 00                	push   0x0
c001d7f5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d7fc:	50                   	push   eax
c001d7fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d801:	e8 6e ef ff ff       	call   c001c774 <IDE::enableIRQs(unsigned char, bool)>
c001d806:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d809:	e8 9c fe ff ff       	call   c001d6aa <ATA::readyForCommand()>
c001d80e:	83 c4 10             	add    esp,0x10
c001d811:	84 c0                	test   al,al
c001d813:	0f 84 b1 02 00 00    	je     c001daca <ATA::access(unsigned long long, int, void*, bool)+0x3d4>
c001d819:	fa                   	cli    
c001d81a:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001d820:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001d826:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001d82b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d831:	75 0a                	jne    c001d83d <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001d833:	c1 e0 04             	shl    eax,0x4
c001d836:	09 c6                	or     esi,eax
c001d838:	83 ce a0             	or     esi,0xffffffa0
c001d83b:	eb 08                	jmp    c001d845 <ATA::access(unsigned long long, int, void*, bool)+0x14f>
c001d83d:	c1 e0 04             	shl    eax,0x4
c001d840:	09 c6                	or     esi,eax
c001d842:	83 ce e0             	or     esi,0xffffffe0
c001d845:	89 f0                	mov    eax,esi
c001d847:	0f b6 d2             	movzx  edx,dl
c001d84a:	0f b6 f0             	movzx  esi,al
c001d84d:	56                   	push   esi
c001d84e:	6a 06                	push   0x6
c001d850:	52                   	push   edx
c001d851:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d857:	e8 10 ed ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d85c:	83 c4 10             	add    esp,0x10
c001d85f:	6a 00                	push   0x0
c001d861:	6a 01                	push   0x1
c001d863:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d86a:	50                   	push   eax
c001d86b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d871:	e8 f6 ec ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d876:	83 c4 10             	add    esp,0x10
c001d879:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001d87e:	83 f8 02             	cmp    eax,0x2
c001d881:	75 6e                	jne    c001d8f1 <ATA::access(unsigned long long, int, void*, bool)+0x1fb>
c001d883:	6a 00                	push   0x0
c001d885:	6a 08                	push   0x8
c001d887:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d88e:	50                   	push   eax
c001d88f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d895:	e8 d2 ec ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d89a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001d89f:	50                   	push   eax
c001d8a0:	6a 09                	push   0x9
c001d8a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8a9:	50                   	push   eax
c001d8aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8b0:	e8 b7 ec ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8b5:	83 c4 20             	add    esp,0x20
c001d8b8:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001d8bd:	50                   	push   eax
c001d8be:	6a 0a                	push   0xa
c001d8c0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8c7:	50                   	push   eax
c001d8c8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8ce:	e8 99 ec ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8d3:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001d8d8:	50                   	push   eax
c001d8d9:	6a 0b                	push   0xb
c001d8db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d8e2:	50                   	push   eax
c001d8e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d8e9:	e8 7e ec ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d8ee:	83 c4 20             	add    esp,0x20
c001d8f1:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001d8f6:	50                   	push   eax
c001d8f7:	6a 02                	push   0x2
c001d8f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d900:	50                   	push   eax
c001d901:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d907:	e8 60 ec ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d90c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001d911:	50                   	push   eax
c001d912:	6a 03                	push   0x3
c001d914:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d91b:	50                   	push   eax
c001d91c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d922:	e8 45 ec ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d927:	83 c4 20             	add    esp,0x20
c001d92a:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001d92f:	50                   	push   eax
c001d930:	6a 04                	push   0x4
c001d932:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d939:	50                   	push   eax
c001d93a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d940:	e8 27 ec ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d945:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d94a:	50                   	push   eax
c001d94b:	6a 05                	push   0x5
c001d94d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d954:	50                   	push   eax
c001d955:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d95b:	e8 0c ec ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d960:	83 c4 20             	add    esp,0x20
c001d963:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001d968:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001d96d:	74 11                	je     c001d980 <ATA::access(unsigned long long, int, void*, bool)+0x28a>
c001d96f:	b8 30 00 00 00       	mov    eax,0x30
c001d974:	83 fa 02             	cmp    edx,0x2
c001d977:	75 16                	jne    c001d98f <ATA::access(unsigned long long, int, void*, bool)+0x299>
c001d979:	b8 34 00 00 00       	mov    eax,0x34
c001d97e:	eb 0f                	jmp    c001d98f <ATA::access(unsigned long long, int, void*, bool)+0x299>
c001d980:	b8 20 00 00 00       	mov    eax,0x20
c001d985:	83 fa 02             	cmp    edx,0x2
c001d988:	75 05                	jne    c001d98f <ATA::access(unsigned long long, int, void*, bool)+0x299>
c001d98a:	b8 24 00 00 00       	mov    eax,0x24
c001d98f:	50                   	push   eax
c001d990:	6a 07                	push   0x7
c001d992:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d999:	50                   	push   eax
c001d99a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9a0:	e8 c7 eb ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d9a5:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001d9aa:	83 c4 10             	add    esp,0x10
c001d9ad:	48                   	dec    eax
c001d9ae:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001d9b3:	85 c0                	test   eax,eax
c001d9b5:	75 01                	jne    c001d9b8 <ATA::access(unsigned long long, int, void*, bool)+0x2c2>
c001d9b7:	fb                   	sti    
c001d9b8:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001d9bc:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001d9c1:	85 f6                	test   esi,esi
c001d9c3:	0f 84 de 00 00 00    	je     c001daa7 <ATA::access(unsigned long long, int, void*, bool)+0x3b1>
c001d9c9:	57                   	push   edi
c001d9ca:	6a 01                	push   0x1
c001d9cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9d3:	50                   	push   eax
c001d9d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d9da:	e8 97 f8 ff ff       	call   c001d276 <IDE::polling(unsigned char, unsigned int)>
c001d9df:	83 c4 10             	add    esp,0x10
c001d9e2:	0f b6 f8             	movzx  edi,al
c001d9e5:	85 ff                	test   edi,edi
c001d9e7:	74 21                	je     c001da0a <ATA::access(unsigned long long, int, void*, bool)+0x314>
c001d9e9:	57                   	push   edi
c001d9ea:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001d9f1:	50                   	push   eax
c001d9f2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d9f9:	50                   	push   eax
c001d9fa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da00:	e8 b7 f7 ff ff       	call   c001d1bc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001da05:	e9 bd 00 00 00       	jmp    c001dac7 <ATA::access(unsigned long long, int, void*, bool)+0x3d1>
c001da0a:	85 ed                	test   ebp,ebp
c001da0c:	74 4d                	je     c001da5b <ATA::access(unsigned long long, int, void*, bool)+0x365>
c001da0e:	fa                   	cli    
c001da0f:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001da15:	31 c9                	xor    ecx,ecx
c001da17:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001da1b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001da1f:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001da23:	51                   	push   ecx
c001da24:	51                   	push   ecx
c001da25:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da2c:	50                   	push   eax
c001da2d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da33:	e8 22 eb ff ff       	call   c001c55a <IDE::getBase(unsigned char)>
c001da38:	89 c2                	mov    edx,eax
c001da3a:	89 f8                	mov    eax,edi
c001da3c:	66 ef                	out    dx,ax
c001da3e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001da42:	83 c4 10             	add    esp,0x10
c001da45:	41                   	inc    ecx
c001da46:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001da4c:	75 c9                	jne    c001da17 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c001da4e:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001da53:	48                   	dec    eax
c001da54:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001da59:	eb 3b                	jmp    c001da96 <ATA::access(unsigned long long, int, void*, bool)+0x3a0>
c001da5b:	fa                   	cli    
c001da5c:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001da62:	52                   	push   edx
c001da63:	52                   	push   edx
c001da64:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001da6b:	50                   	push   eax
c001da6c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001da72:	e8 e3 ea ff ff       	call   c001c55a <IDE::getBase(unsigned char)>
c001da77:	b9 00 01 00 00       	mov    ecx,0x100
c001da7c:	89 c2                	mov    edx,eax
c001da7e:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001da82:	fc                   	cld    
c001da83:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001da86:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001da8b:	83 c4 10             	add    esp,0x10
c001da8e:	48                   	dec    eax
c001da8f:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001da94:	85 c0                	test   eax,eax
c001da96:	75 01                	jne    c001da99 <ATA::access(unsigned long long, int, void*, bool)+0x3a3>
c001da98:	fb                   	sti    
c001da99:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001daa1:	4e                   	dec    esi
c001daa2:	e9 1a ff ff ff       	jmp    c001d9c1 <ATA::access(unsigned long long, int, void*, bool)+0x2cb>
c001daa7:	31 ff                	xor    edi,edi
c001daa9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001daae:	74 1a                	je     c001daca <ATA::access(unsigned long long, int, void*, bool)+0x3d4>
c001dab0:	50                   	push   eax
c001dab1:	50                   	push   eax
c001dab2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001dab7:	83 f8 02             	cmp    eax,0x2
c001daba:	0f 94 c0             	sete   al
c001dabd:	0f b6 c0             	movzx  eax,al
c001dac0:	50                   	push   eax
c001dac1:	53                   	push   ebx
c001dac2:	e8 95 fb ff ff       	call   c001d65c <ATA::flush(bool)>
c001dac7:	83 c4 10             	add    esp,0x10
c001daca:	83 c4 2c             	add    esp,0x2c
c001dacd:	89 f8                	mov    eax,edi
c001dacf:	5b                   	pop    ebx
c001dad0:	5e                   	pop    esi
c001dad1:	5f                   	pop    edi
c001dad2:	5d                   	pop    ebp
c001dad3:	c3                   	ret    

c001dad4 <ATA::read(unsigned long long, int, void*)>:
c001dad4:	57                   	push   edi
c001dad5:	b8 04 00 00 00       	mov    eax,0x4
c001dada:	56                   	push   esi
c001dadb:	53                   	push   ebx
c001dadc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dae0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001dae4:	8d 7a ff             	lea    edi,[edx-0x1]
c001dae7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001daeb:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001daef:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001daf5:	77 25                	ja     c001db1c <ATA::read(unsigned long long, int, void*)+0x48>
c001daf7:	b8 06 00 00 00       	mov    eax,0x6
c001dafc:	85 f6                	test   esi,esi
c001dafe:	74 1c                	je     c001db1c <ATA::read(unsigned long long, int, void*)+0x48>
c001db00:	50                   	push   eax
c001db01:	50                   	push   eax
c001db02:	6a 00                	push   0x0
c001db04:	56                   	push   esi
c001db05:	52                   	push   edx
c001db06:	53                   	push   ebx
c001db07:	51                   	push   ecx
c001db08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db0c:	e8 e5 fb ff ff       	call   c001d6f6 <ATA::access(unsigned long long, int, void*, bool)>
c001db11:	83 c4 20             	add    esp,0x20
c001db14:	85 c0                	test   eax,eax
c001db16:	0f 95 c0             	setne  al
c001db19:	0f b6 c0             	movzx  eax,al
c001db1c:	5b                   	pop    ebx
c001db1d:	5e                   	pop    esi
c001db1e:	5f                   	pop    edi
c001db1f:	c3                   	ret    

c001db20 <ATA::write(unsigned long long, int, void*)>:
c001db20:	57                   	push   edi
c001db21:	b8 04 00 00 00       	mov    eax,0x4
c001db26:	56                   	push   esi
c001db27:	53                   	push   ebx
c001db28:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001db2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001db30:	8d 7a ff             	lea    edi,[edx-0x1]
c001db33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001db37:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001db3b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001db41:	77 25                	ja     c001db68 <ATA::write(unsigned long long, int, void*)+0x48>
c001db43:	b8 06 00 00 00       	mov    eax,0x6
c001db48:	85 f6                	test   esi,esi
c001db4a:	74 1c                	je     c001db68 <ATA::write(unsigned long long, int, void*)+0x48>
c001db4c:	50                   	push   eax
c001db4d:	50                   	push   eax
c001db4e:	6a 01                	push   0x1
c001db50:	56                   	push   esi
c001db51:	52                   	push   edx
c001db52:	53                   	push   ebx
c001db53:	51                   	push   ecx
c001db54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db58:	e8 99 fb ff ff       	call   c001d6f6 <ATA::access(unsigned long long, int, void*, bool)>
c001db5d:	83 c4 20             	add    esp,0x20
c001db60:	85 c0                	test   eax,eax
c001db62:	0f 95 c0             	setne  al
c001db65:	0f b6 c0             	movzx  eax,al
c001db68:	5b                   	pop    ebx
c001db69:	5e                   	pop    esi
c001db6a:	5f                   	pop    edi
c001db6b:	c3                   	ret    

c001db6c <ATA::detectCHS()>:
c001db6c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001db70:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001db76:	c1 e0 06             	shl    eax,0x6
c001db79:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001db7f:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001db89:	c7 44 24 04 08 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023708
c001db91:	e9 3c 11 ff ff       	jmp    c000ecd2 <KePanic(char const*)>

c001db96 <ATA::open(int, int, void*)>:
c001db96:	53                   	push   ebx
c001db97:	83 ec 08             	sub    esp,0x8
c001db9a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001db9e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dba2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dba6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001dbac:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001dbb2:	c1 e0 06             	shl    eax,0x6
c001dbb5:	01 d0                	add    eax,edx
c001dbb7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001dbbe:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001dbc4:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001dbcb:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001dbd5:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001dbdb:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001dbe2:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001dbe9:	75 0c                	jne    c001dbf7 <ATA::open(int, int, void*)+0x61>
c001dbeb:	83 ec 0c             	sub    esp,0xc
c001dbee:	53                   	push   ebx
c001dbef:	e8 78 ff ff ff       	call   c001db6c <ATA::detectCHS()>
c001dbf4:	83 c4 10             	add    esp,0x10
c001dbf7:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001dbfd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001dc03:	c1 e0 06             	shl    eax,0x6
c001dc06:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001dc0d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001dc17:	d1 e8                	shr    eax,1
c001dc19:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001dc1f:	6a 04                	push   0x4
c001dc21:	6a 0c                	push   0xc
c001dc23:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc2a:	50                   	push   eax
c001dc2b:	52                   	push   edx
c001dc2c:	e8 3b e9 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc31:	90                   	nop
c001dc32:	90                   	nop
c001dc33:	6a 00                	push   0x0
c001dc35:	6a 0c                	push   0xc
c001dc37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001dc3e:	50                   	push   eax
c001dc3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001dc45:	e8 22 e9 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dc4a:	83 c4 14             	add    esp,0x14
c001dc4d:	53                   	push   ebx
c001dc4e:	e8 37 b8 fe ff       	call   c000948a <PhysicalDisk::startCache()>
c001dc53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc56:	e8 17 c7 fe ff       	call   c000a372 <createPartitionsForDisk(PhysicalDisk*)>
c001dc5b:	31 c0                	xor    eax,eax
c001dc5d:	83 c4 18             	add    esp,0x18
c001dc60:	5b                   	pop    ebx
c001dc61:	c3                   	ret    

c001dc62 <combineCharAndColour(char, unsigned char)>:
c001dc62:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc67:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001dc6d:	c1 e0 08             	shl    eax,0x8
c001dc70:	09 d0                	or     eax,edx
c001dc72:	c3                   	ret    

c001dc73 <combineColours(unsigned char, unsigned char)>:
c001dc73:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dc78:	c1 e0 04             	shl    eax,0x4
c001dc7b:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001dc7f:	c3                   	ret    

c001dc80 <ATAPI::write(unsigned long long, int, void*)>:
c001dc80:	b8 03 00 00 00       	mov    eax,0x3
c001dc85:	c3                   	ret    

c001dc86 <ATAPI::close(int, int, void*)>:
c001dc86:	83 ec 0c             	sub    esp,0xc
c001dc89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dc8d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dc93:	85 c0                	test   eax,eax
c001dc95:	74 0c                	je     c001dca3 <ATAPI::close(int, int, void*)+0x1d>
c001dc97:	83 ec 0c             	sub    esp,0xc
c001dc9a:	8b 10                	mov    edx,DWORD PTR [eax]
c001dc9c:	50                   	push   eax
c001dc9d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001dca0:	83 c4 10             	add    esp,0x10
c001dca3:	31 c0                	xor    eax,eax
c001dca5:	83 c4 0c             	add    esp,0xc
c001dca8:	c3                   	ret    
c001dca9:	90                   	nop

c001dcaa <ATAPI::ATAPI()>:
c001dcaa:	83 ec 0c             	sub    esp,0xc
c001dcad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcb1:	83 ec 04             	sub    esp,0x4
c001dcb4:	68 00 08 00 00       	push   0x800
c001dcb9:	68 5d 38 02 c0       	push   0xc002385d
c001dcbe:	50                   	push   eax
c001dcbf:	e8 5e b7 fe ff       	call   c0009422 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001dcc4:	83 c4 10             	add    esp,0x10
c001dcc7:	ba 6c 37 02 c0       	mov    edx,0xc002376c
c001dccc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001dcd0:	89 10                	mov    DWORD PTR [eax],edx
c001dcd2:	90                   	nop
c001dcd3:	83 c4 0c             	add    esp,0xc
c001dcd6:	c3                   	ret    
c001dcd7:	90                   	nop

c001dcd8 <ATAPI::readyForCommand()>:
c001dcd8:	56                   	push   esi
c001dcd9:	53                   	push   ebx
c001dcda:	53                   	push   ebx
c001dcdb:	31 db                	xor    ebx,ebx
c001dcdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dce1:	51                   	push   ecx
c001dce2:	6a 0c                	push   0xc
c001dce4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001dceb:	50                   	push   eax
c001dcec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001dcf2:	e8 35 e9 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001dcf7:	83 c4 10             	add    esp,0x10
c001dcfa:	a8 88                	test   al,0x88
c001dcfc:	74 25                	je     c001dd23 <ATAPI::readyForCommand()+0x4b>
c001dcfe:	43                   	inc    ebx
c001dcff:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001dd05:	7e da                	jle    c001dce1 <ATAPI::readyForCommand()+0x9>
c001dd07:	83 ec 0c             	sub    esp,0xc
c001dd0a:	68 5e 01 00 00       	push   0x15e
c001dd0f:	e8 4c 79 ff ff       	call   c0015660 <milliTenthSleep(unsigned int)>
c001dd14:	83 c4 10             	add    esp,0x10
c001dd17:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001dd1d:	75 c2                	jne    c001dce1 <ATAPI::readyForCommand()+0x9>
c001dd1f:	31 c0                	xor    eax,eax
c001dd21:	eb 02                	jmp    c001dd25 <ATAPI::readyForCommand()+0x4d>
c001dd23:	b0 01                	mov    al,0x1
c001dd25:	5a                   	pop    edx
c001dd26:	5b                   	pop    ebx
c001dd27:	5e                   	pop    esi
c001dd28:	c3                   	ret    
c001dd29:	90                   	nop

c001dd2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001dd2a:	55                   	push   ebp
c001dd2b:	57                   	push   edi
c001dd2c:	56                   	push   esi
c001dd2d:	53                   	push   ebx
c001dd2e:	83 ec 20             	sub    esp,0x20
c001dd31:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001dd35:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001dd39:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001dd3d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001dd41:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001dd45:	6a 01                	push   0x1
c001dd47:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd4e:	50                   	push   eax
c001dd4f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd55:	e8 1a ea ff ff       	call   c001c774 <IDE::enableIRQs(unsigned char, bool)>
c001dd5a:	5e                   	pop    esi
c001dd5b:	58                   	pop    eax
c001dd5c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd63:	50                   	push   eax
c001dd64:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dd6a:	e8 d7 e7 ff ff       	call   c001c546 <IDE::prepareInterrupt(unsigned char)>
c001dd6f:	89 3c 24             	mov    DWORD PTR [esp],edi
c001dd72:	e8 61 ff ff ff       	call   c001dcd8 <ATAPI::readyForCommand()>
c001dd77:	83 c4 10             	add    esp,0x10
c001dd7a:	84 c0                	test   al,al
c001dd7c:	75 0a                	jne    c001dd88 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001dd7e:	bb 01 00 00 00       	mov    ebx,0x1
c001dd83:	e9 60 02 00 00       	jmp    c001dfe8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001dd88:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001dd8e:	c1 e0 04             	shl    eax,0x4
c001dd91:	0f b6 c0             	movzx  eax,al
c001dd94:	50                   	push   eax
c001dd95:	6a 06                	push   0x6
c001dd97:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dd9e:	50                   	push   eax
c001dd9f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dda5:	e8 c2 e7 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddaa:	6a 00                	push   0x0
c001ddac:	6a 01                	push   0x1
c001ddae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddb5:	50                   	push   eax
c001ddb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddbc:	e8 ab e7 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddc1:	83 c4 20             	add    esp,0x20
c001ddc4:	0f b6 c3             	movzx  eax,bl
c001ddc7:	0f b6 df             	movzx  ebx,bh
c001ddca:	50                   	push   eax
c001ddcb:	6a 04                	push   0x4
c001ddcd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddd4:	50                   	push   eax
c001ddd5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dddb:	e8 8c e7 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dde0:	53                   	push   ebx
c001dde1:	6a 05                	push   0x5
c001dde3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ddea:	50                   	push   eax
c001ddeb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ddf1:	e8 76 e7 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddf6:	83 c4 20             	add    esp,0x20
c001ddf9:	68 a0 00 00 00       	push   0xa0
c001ddfe:	6a 07                	push   0x7
c001de00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de07:	50                   	push   eax
c001de08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de0e:	e8 59 e7 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de13:	83 c4 0c             	add    esp,0xc
c001de16:	6a 01                	push   0x1
c001de18:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001de1f:	50                   	push   eax
c001de20:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de26:	e8 4b f4 ff ff       	call   c001d276 <IDE::polling(unsigned char, unsigned int)>
c001de2b:	83 c4 10             	add    esp,0x10
c001de2e:	0f b6 d8             	movzx  ebx,al
c001de31:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001de37:	85 db                	test   ebx,ebx
c001de39:	74 20                	je     c001de5b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001de3b:	53                   	push   ebx
c001de3c:	0f b6 c0             	movzx  eax,al
c001de3f:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001de46:	52                   	push   edx
c001de47:	50                   	push   eax
c001de48:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de4e:	e8 69 f3 ff ff       	call   c001d1bc <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001de53:	83 c4 10             	add    esp,0x10
c001de56:	e9 8d 01 00 00       	jmp    c001dfe8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001de5b:	0f b6 c0             	movzx  eax,al
c001de5e:	53                   	push   ebx
c001de5f:	53                   	push   ebx
c001de60:	50                   	push   eax
c001de61:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001de67:	e8 ee e6 ff ff       	call   c001c55a <IDE::getBase(unsigned char)>
c001de6c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001de70:	b9 06 00 00 00       	mov    ecx,0x6
c001de75:	89 c2                	mov    edx,eax
c001de77:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001de7a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001de7e:	83 c4 10             	add    esp,0x10
c001de81:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001de86:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001de8a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001de90:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001de97:	85 db                	test   ebx,ebx
c001de99:	0f 84 ec 00 00 00    	je     c001df8b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001de9f:	51                   	push   ecx
c001dea0:	51                   	push   ecx
c001dea1:	52                   	push   edx
c001dea2:	50                   	push   eax
c001dea3:	e8 32 e8 ff ff       	call   c001c6da <IDE::waitInterrupt(unsigned char)>
c001dea8:	83 c4 10             	add    esp,0x10
c001deab:	84 c0                	test   al,al
c001dead:	0f 84 cb fe ff ff    	je     c001dd7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001deb3:	56                   	push   esi
c001deb4:	56                   	push   esi
c001deb5:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001debc:	50                   	push   eax
c001debd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dec3:	e8 7e e6 ff ff       	call   c001c546 <IDE::prepareInterrupt(unsigned char)>
c001dec8:	83 c4 0c             	add    esp,0xc
c001decb:	6a 04                	push   0x4
c001decd:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ded4:	50                   	push   eax
c001ded5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dedb:	e8 4c e7 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001dee0:	83 c4 0c             	add    esp,0xc
c001dee3:	89 c6                	mov    esi,eax
c001dee5:	6a 05                	push   0x5
c001dee7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001deee:	50                   	push   eax
c001deef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001def5:	e8 32 e7 ff ff       	call   c001c62c <IDE::read(unsigned char, unsigned char)>
c001defa:	89 f1                	mov    ecx,esi
c001defc:	0f b6 c0             	movzx  eax,al
c001deff:	0f b6 f1             	movzx  esi,cl
c001df02:	c1 e0 08             	shl    eax,0x8
c001df05:	09 c6                	or     esi,eax
c001df07:	d1 fe                	sar    esi,1
c001df09:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001df0d:	83 c4 10             	add    esp,0x10
c001df10:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001df15:	74 41                	je     c001df58 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001df17:	31 c9                	xor    ecx,ecx
c001df19:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001df1f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001df26:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001df2a:	75 0a                	jne    c001df36 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001df2c:	01 c9                	add    ecx,ecx
c001df2e:	01 cd                	add    ebp,ecx
c001df30:	4b                   	dec    ebx
c001df31:	e9 54 ff ff ff       	jmp    c001de8a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001df36:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001df3b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001df3f:	51                   	push   ecx
c001df40:	51                   	push   ecx
c001df41:	52                   	push   edx
c001df42:	50                   	push   eax
c001df43:	e8 12 e6 ff ff       	call   c001c55a <IDE::getBase(unsigned char)>
c001df48:	89 c2                	mov    edx,eax
c001df4a:	89 f0                	mov    eax,esi
c001df4c:	66 ef                	out    dx,ax
c001df4e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001df52:	83 c4 10             	add    esp,0x10
c001df55:	41                   	inc    ecx
c001df56:	eb c1                	jmp    c001df19 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001df58:	31 f6                	xor    esi,esi
c001df5a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001df60:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001df67:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001df6b:	75 06                	jne    c001df73 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001df6d:	01 f6                	add    esi,esi
c001df6f:	01 f5                	add    ebp,esi
c001df71:	eb bd                	jmp    c001df30 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001df73:	51                   	push   ecx
c001df74:	51                   	push   ecx
c001df75:	52                   	push   edx
c001df76:	50                   	push   eax
c001df77:	e8 de e5 ff ff       	call   c001c55a <IDE::getBase(unsigned char)>
c001df7c:	89 c2                	mov    edx,eax
c001df7e:	66 ed                	in     ax,dx
c001df80:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001df85:	83 c4 10             	add    esp,0x10
c001df88:	46                   	inc    esi
c001df89:	eb cf                	jmp    c001df5a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001df8b:	51                   	push   ecx
c001df8c:	51                   	push   ecx
c001df8d:	52                   	push   edx
c001df8e:	50                   	push   eax
c001df8f:	e8 46 e7 ff ff       	call   c001c6da <IDE::waitInterrupt(unsigned char)>
c001df94:	83 c4 10             	add    esp,0x10
c001df97:	84 c0                	test   al,al
c001df99:	0f 84 df fd ff ff    	je     c001dd7e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001df9f:	bb a0 86 01 00       	mov    ebx,0x186a0
c001dfa4:	52                   	push   edx
c001dfa5:	52                   	push   edx
c001dfa6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dfad:	50                   	push   eax
c001dfae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dfb4:	e8 8d e5 ff ff       	call   c001c546 <IDE::prepareInterrupt(unsigned char)>
c001dfb9:	83 c4 10             	add    esp,0x10
c001dfbc:	50                   	push   eax
c001dfbd:	50                   	push   eax
c001dfbe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001dfc5:	50                   	push   eax
c001dfc6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001dfcc:	e8 89 e5 ff ff       	call   c001c55a <IDE::getBase(unsigned char)>
c001dfd1:	8d 50 07             	lea    edx,[eax+0x7]
c001dfd4:	ec                   	in     al,dx
c001dfd5:	83 c4 10             	add    esp,0x10
c001dfd8:	a8 88                	test   al,0x88
c001dfda:	74 0a                	je     c001dfe6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001dfdc:	4b                   	dec    ebx
c001dfdd:	75 dd                	jne    c001dfbc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001dfdf:	bb 02 00 00 00       	mov    ebx,0x2
c001dfe4:	eb 02                	jmp    c001dfe8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001dfe6:	31 db                	xor    ebx,ebx
c001dfe8:	83 c4 1c             	add    esp,0x1c
c001dfeb:	89 d8                	mov    eax,ebx
c001dfed:	5b                   	pop    ebx
c001dfee:	5e                   	pop    esi
c001dfef:	5f                   	pop    edi
c001dff0:	5d                   	pop    ebp
c001dff1:	c3                   	ret    

c001dff2 <ATAPI::diskRemoved()>:
c001dff2:	53                   	push   ebx
c001dff3:	83 ec 14             	sub    esp,0x14
c001dff6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001dffa:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e001:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001e007:	e8 56 c0 fe ff       	call   c000a062 <LogicalDisk::unmount()>
c001e00c:	58                   	pop    eax
c001e00d:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e013:	e8 28 ca fe ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c001e018:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001e01e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e022:	83 c4 18             	add    esp,0x18
c001e025:	5b                   	pop    ebx
c001e026:	e9 05 ca fe ff       	jmp    c000aa30 <VCache::invalidateReadBuffer()>
c001e02b:	90                   	nop

c001e02c <ATAPI::eject()>:
c001e02c:	57                   	push   edi
c001e02d:	b9 03 00 00 00       	mov    ecx,0x3
c001e032:	53                   	push   ebx
c001e033:	83 ec 14             	sub    esp,0x14
c001e036:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e03a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e03e:	fc                   	cld    
c001e03f:	31 c0                	xor    eax,eax
c001e041:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e043:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e048:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e04d:	50                   	push   eax
c001e04e:	50                   	push   eax
c001e04f:	6a 00                	push   0x0
c001e051:	6a 00                	push   0x0
c001e053:	6a 00                	push   0x0
c001e055:	6a 02                	push   0x2
c001e057:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e05b:	50                   	push   eax
c001e05c:	53                   	push   ebx
c001e05d:	e8 c8 fc ff ff       	call   c001dd2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e062:	83 c4 14             	add    esp,0x14
c001e065:	53                   	push   ebx
c001e066:	e8 87 ff ff ff       	call   c001dff2 <ATAPI::diskRemoved()>
c001e06b:	83 c4 24             	add    esp,0x24
c001e06e:	31 c0                	xor    eax,eax
c001e070:	5b                   	pop    ebx
c001e071:	5f                   	pop    edi
c001e072:	c3                   	ret    
c001e073:	90                   	nop

c001e074 <ATAPI::diskInserted()>:
c001e074:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e078:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001e07f:	c3                   	ret    

c001e080 <ATAPI::detectMedia()>:
c001e080:	56                   	push   esi
c001e081:	53                   	push   ebx
c001e082:	83 ec 28             	sub    esp,0x28
c001e085:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e089:	6a 0c                	push   0xc
c001e08b:	6a 00                	push   0x0
c001e08d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001e091:	56                   	push   esi
c001e092:	e8 59 24 fe ff       	call   c00004f0 <memset>
c001e097:	58                   	pop    eax
c001e098:	5a                   	pop    edx
c001e099:	6a 00                	push   0x0
c001e09b:	6a 00                	push   0x0
c001e09d:	6a 00                	push   0x0
c001e09f:	6a 00                	push   0x0
c001e0a1:	56                   	push   esi
c001e0a2:	53                   	push   ebx
c001e0a3:	e8 82 fc ff ff       	call   c001dd2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0a8:	83 c4 1c             	add    esp,0x1c
c001e0ab:	6a 0c                	push   0xc
c001e0ad:	6a 00                	push   0x0
c001e0af:	56                   	push   esi
c001e0b0:	e8 3b 24 fe ff       	call   c00004f0 <memset>
c001e0b5:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001e0ba:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001e0bf:	59                   	pop    ecx
c001e0c0:	58                   	pop    eax
c001e0c1:	6a 01                	push   0x1
c001e0c3:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001e0c7:	50                   	push   eax
c001e0c8:	6a 00                	push   0x0
c001e0ca:	6a 12                	push   0x12
c001e0cc:	56                   	push   esi
c001e0cd:	53                   	push   ebx
c001e0ce:	e8 57 fc ff ff       	call   c001dd2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e0d3:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001e0d7:	83 c4 20             	add    esp,0x20
c001e0da:	83 e0 7f             	and    eax,0x7f
c001e0dd:	83 f8 70             	cmp    eax,0x70
c001e0e0:	74 15                	je     c001e0f7 <ATAPI::detectMedia()+0x77>
c001e0e2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e0e9:	75 0c                	jne    c001e0f7 <ATAPI::detectMedia()+0x77>
c001e0eb:	83 ec 0c             	sub    esp,0xc
c001e0ee:	53                   	push   ebx
c001e0ef:	e8 80 ff ff ff       	call   c001e074 <ATAPI::diskInserted()>
c001e0f4:	83 c4 10             	add    esp,0x10
c001e0f7:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e0fb:	83 e0 0f             	and    eax,0xf
c001e0fe:	83 f8 02             	cmp    eax,0x2
c001e101:	75 1b                	jne    c001e11e <ATAPI::detectMedia()+0x9e>
c001e103:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001e108:	75 2d                	jne    c001e137 <ATAPI::detectMedia()+0xb7>
c001e10a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e111:	74 24                	je     c001e137 <ATAPI::detectMedia()+0xb7>
c001e113:	83 ec 0c             	sub    esp,0xc
c001e116:	53                   	push   ebx
c001e117:	e8 d6 fe ff ff       	call   c001dff2 <ATAPI::diskRemoved()>
c001e11c:	eb 16                	jmp    c001e134 <ATAPI::detectMedia()+0xb4>
c001e11e:	85 c0                	test   eax,eax
c001e120:	75 15                	jne    c001e137 <ATAPI::detectMedia()+0xb7>
c001e122:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e129:	75 0c                	jne    c001e137 <ATAPI::detectMedia()+0xb7>
c001e12b:	83 ec 0c             	sub    esp,0xc
c001e12e:	53                   	push   ebx
c001e12f:	e8 40 ff ff ff       	call   c001e074 <ATAPI::diskInserted()>
c001e134:	83 c4 10             	add    esp,0x10
c001e137:	83 c4 24             	add    esp,0x24
c001e13a:	5b                   	pop    ebx
c001e13b:	5e                   	pop    esi
c001e13c:	c3                   	ret    
c001e13d:	90                   	nop

c001e13e <ATAPI::open(int, int, void*)>:
c001e13e:	56                   	push   esi
c001e13f:	53                   	push   ebx
c001e140:	50                   	push   eax
c001e141:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e145:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e149:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e14d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e153:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001e159:	c1 e0 06             	shl    eax,0x6
c001e15c:	01 d0                	add    eax,edx
c001e15e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001e165:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001e16b:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001e172:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e17c:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e182:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e189:	6a 04                	push   0x4
c001e18b:	6a 0c                	push   0xc
c001e18d:	51                   	push   ecx
c001e18e:	52                   	push   edx
c001e18f:	e8 d8 e3 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e194:	90                   	nop
c001e195:	90                   	nop
c001e196:	6a 00                	push   0x0
c001e198:	6a 0c                	push   0xc
c001e19a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e1a1:	50                   	push   eax
c001e1a2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e1a8:	e8 bf e3 ff ff       	call   c001c56c <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e1ad:	83 c4 14             	add    esp,0x14
c001e1b0:	68 78 01 00 00       	push   0x178
c001e1b5:	e8 c1 07 ff ff       	call   c000e97b <malloc>
c001e1ba:	83 c4 0c             	add    esp,0xc
c001e1bd:	89 c6                	mov    esi,eax
c001e1bf:	6a 00                	push   0x0
c001e1c1:	68 ff ff ff 7f       	push   0x7fffffff
c001e1c6:	6a 00                	push   0x0
c001e1c8:	6a 00                	push   0x0
c001e1ca:	53                   	push   ebx
c001e1cb:	68 0f 39 02 c0       	push   0xc002390f
c001e1d0:	50                   	push   eax
c001e1d1:	e8 ca bc fe ff       	call   c0009ea0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e1d6:	83 c4 14             	add    esp,0x14
c001e1d9:	56                   	push   esi
c001e1da:	e8 81 bd fe ff       	call   c0009f60 <LogicalDisk::assignDriveLetter()>
c001e1df:	5a                   	pop    edx
c001e1e0:	0f be c0             	movsx  eax,al
c001e1e3:	59                   	pop    ecx
c001e1e4:	50                   	push   eax
c001e1e5:	68 54 37 02 c0       	push   0xc0023754
c001e1ea:	e8 75 8d fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e1ef:	58                   	pop    eax
c001e1f0:	5a                   	pop    edx
c001e1f1:	56                   	push   esi
c001e1f2:	53                   	push   ebx
c001e1f3:	e8 46 ae fe ff       	call   c000903e <Device::addChild(Device*)>
c001e1f8:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001e1fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e201:	e8 84 b2 fe ff       	call   c000948a <PhysicalDisk::startCache()>
c001e206:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001e20d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e210:	e8 6b fe ff ff       	call   c001e080 <ATAPI::detectMedia()>
c001e215:	83 c4 14             	add    esp,0x14
c001e218:	31 c0                	xor    eax,eax
c001e21a:	5b                   	pop    ebx
c001e21b:	5e                   	pop    esi
c001e21c:	c3                   	ret    
c001e21d:	90                   	nop

c001e21e <ATAPI::read(unsigned long long, int, void*)>:
c001e21e:	55                   	push   ebp
c001e21f:	57                   	push   edi
c001e220:	56                   	push   esi
c001e221:	53                   	push   ebx
c001e222:	83 ec 1c             	sub    esp,0x1c
c001e225:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e229:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001e22d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001e231:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e238:	74 3c                	je     c001e276 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001e23a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e23e:	b9 03 00 00 00       	mov    ecx,0x3
c001e243:	fc                   	cld    
c001e244:	31 c0                	xor    eax,eax
c001e246:	0f ce                	bswap  esi
c001e248:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e24a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001e24f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001e253:	89 e8                	mov    eax,ebp
c001e255:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001e259:	50                   	push   eax
c001e25a:	50                   	push   eax
c001e25b:	55                   	push   ebp
c001e25c:	c1 e5 0b             	shl    ebp,0xb
c001e25f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001e263:	6a 00                	push   0x0
c001e265:	55                   	push   ebp
c001e266:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e26a:	50                   	push   eax
c001e26b:	53                   	push   ebx
c001e26c:	e8 b9 fa ff ff       	call   c001dd2a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001e271:	83 c4 20             	add    esp,0x20
c001e274:	eb 1a                	jmp    c001e290 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001e276:	83 ec 0c             	sub    esp,0xc
c001e279:	53                   	push   ebx
c001e27a:	e8 01 fe ff ff       	call   c001e080 <ATAPI::detectMedia()>
c001e27f:	83 c4 10             	add    esp,0x10
c001e282:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001e289:	75 af                	jne    c001e23a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001e28b:	b8 02 00 00 00       	mov    eax,0x2
c001e290:	83 c4 1c             	add    esp,0x1c
c001e293:	5b                   	pop    ebx
c001e294:	5e                   	pop    esi
c001e295:	5f                   	pop    edi
c001e296:	5d                   	pop    ebp
c001e297:	c3                   	ret    

c001e298 <SATA::close(int, int, void*)>:
c001e298:	83 ec 0c             	sub    esp,0xc
c001e29b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e29f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e2a5:	85 c0                	test   eax,eax
c001e2a7:	74 0c                	je     c001e2b5 <SATA::close(int, int, void*)+0x1d>
c001e2a9:	83 ec 0c             	sub    esp,0xc
c001e2ac:	8b 10                	mov    edx,DWORD PTR [eax]
c001e2ae:	50                   	push   eax
c001e2af:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e2b2:	83 c4 10             	add    esp,0x10
c001e2b5:	31 c0                	xor    eax,eax
c001e2b7:	83 c4 0c             	add    esp,0xc
c001e2ba:	c3                   	ret    
c001e2bb:	90                   	nop

c001e2bc <SATA::powerSaving(PowerSavingLevel)>:
c001e2bc:	c3                   	ret    
c001e2bd:	90                   	nop

c001e2be <SATA::open(int, int, void*)>:
c001e2be:	56                   	push   esi
c001e2bf:	53                   	push   ebx
c001e2c0:	83 ec 10             	sub    esp,0x10
c001e2c3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e2c7:	68 9c 37 02 c0       	push   0xc002379c
c001e2cc:	e8 93 8c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e2d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001e2d5:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001e2df:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e2e5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e2ef:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e2f3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e2fd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e303:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001e30a:	e8 b7 0b ff ff       	call   c000eec6 <Phys::allocatePage()>
c001e30f:	89 c6                	mov    esi,eax
c001e311:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001e317:	81 c6 00 10 00 00    	add    esi,0x1000
c001e31d:	e8 a4 0b ff ff       	call   c000eec6 <Phys::allocatePage()>
c001e322:	83 c4 10             	add    esp,0x10
c001e325:	39 c6                	cmp    esi,eax
c001e327:	74 10                	je     c001e339 <SATA::open(int, int, void*)+0x7b>
c001e329:	83 ec 0c             	sub    esp,0xc
c001e32c:	68 a8 37 02 c0       	push   0xc00237a8
c001e331:	e8 9c 09 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001e336:	83 c4 10             	add    esp,0x10
c001e339:	83 ec 0c             	sub    esp,0xc
c001e33c:	6a 02                	push   0x2
c001e33e:	e8 08 3d ff ff       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c001e343:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001e349:	6a 03                	push   0x3
c001e34b:	50                   	push   eax
c001e34c:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001e352:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001e358:	e8 d7 43 ff ff       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e35d:	83 c4 14             	add    esp,0x14
c001e360:	53                   	push   ebx
c001e361:	e8 24 b1 fe ff       	call   c000948a <PhysicalDisk::startCache()>
c001e366:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e369:	e8 04 c0 fe ff       	call   c000a372 <createPartitionsForDisk(PhysicalDisk*)>
c001e36e:	83 c4 14             	add    esp,0x14
c001e371:	31 c0                	xor    eax,eax
c001e373:	5b                   	pop    ebx
c001e374:	5e                   	pop    esi
c001e375:	c3                   	ret    

c001e376 <SATA::SATA()>:
c001e376:	83 ec 0c             	sub    esp,0xc
c001e379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e37d:	83 ec 04             	sub    esp,0x4
c001e380:	68 00 02 00 00       	push   0x200
c001e385:	68 bc 37 02 c0       	push   0xc00237bc
c001e38a:	50                   	push   eax
c001e38b:	e8 92 b0 fe ff       	call   c0009422 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e390:	83 c4 10             	add    esp,0x10
c001e393:	ba 2c 38 02 c0       	mov    edx,0xc002382c
c001e398:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e39c:	89 10                	mov    DWORD PTR [eax],edx
c001e39e:	90                   	nop
c001e39f:	83 c4 0c             	add    esp,0xc
c001e3a2:	c3                   	ret    
c001e3a3:	90                   	nop

c001e3a4 <SATA::access(unsigned long long, int, void*, bool)>:
c001e3a4:	55                   	push   ebp
c001e3a5:	57                   	push   edi
c001e3a6:	56                   	push   esi
c001e3a7:	53                   	push   ebx
c001e3a8:	83 ec 2c             	sub    esp,0x2c
c001e3ab:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001e3af:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e3b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e3b7:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001e3bb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e3bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e3c3:	fa                   	cli    
c001e3c4:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c001e3ca:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001e3cf:	7e 10                	jle    c001e3e1 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c001e3d1:	83 ec 0c             	sub    esp,0xc
c001e3d4:	68 cc 37 02 c0       	push   0xc00237cc
c001e3d9:	e8 f4 08 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001e3de:	83 c4 10             	add    esp,0x10
c001e3e1:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001e3e7:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001e3ed:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e3f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e3f7:	89 d0                	mov    eax,edx
c001e3f9:	c1 e0 07             	shl    eax,0x7
c001e3fc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001e400:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e40a:	51                   	push   ecx
c001e40b:	8d 42 02             	lea    eax,[edx+0x2]
c001e40e:	51                   	push   ecx
c001e40f:	c1 e0 07             	shl    eax,0x7
c001e412:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e416:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e41a:	50                   	push   eax
c001e41b:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001e421:	e8 30 ef ff ff       	call   c001d356 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e426:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e42a:	83 c4 10             	add    esp,0x10
c001e42d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e432:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e436:	0f 84 aa 01 00 00    	je     c001e5e6 <SATA::access(unsigned long long, int, void*, bool)+0x242>
c001e43c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e440:	c1 e0 09             	shl    eax,0x9
c001e443:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e448:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e44c:	74 0e                	je     c001e45c <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c001e44e:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001e454:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001e458:	89 c1                	mov    ecx,eax
c001e45a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e45c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e462:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001e466:	8d 42 02             	lea    eax,[edx+0x2]
c001e469:	c1 e0 07             	shl    eax,0x7
c001e46c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001e470:	8b 00                	mov    eax,DWORD PTR [eax]
c001e472:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e478:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e47e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e482:	c1 e1 05             	shl    ecx,0x5
c001e485:	01 c8                	add    eax,ecx
c001e487:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e48b:	83 e1 01             	and    ecx,0x1
c001e48e:	89 ce                	mov    esi,ecx
c001e490:	8a 08                	mov    cl,BYTE PTR [eax]
c001e492:	c1 e6 06             	shl    esi,0x6
c001e495:	83 e1 bf             	and    ecx,0xffffffbf
c001e498:	09 f1                	or     ecx,esi
c001e49a:	88 08                	mov    BYTE PTR [eax],cl
c001e49c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e49e:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001e4a4:	81 c9 05 00 01 00    	or     ecx,0x10005
c001e4aa:	89 08                	mov    DWORD PTR [eax],ecx
c001e4ac:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001e4b2:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001e4b8:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001e4be:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001e4c1:	50                   	push   eax
c001e4c2:	68 90 00 00 00       	push   0x90
c001e4c7:	6a 00                	push   0x0
c001e4c9:	56                   	push   esi
c001e4ca:	e8 21 20 fe ff       	call   c00004f0 <memset>
c001e4cf:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e4d5:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001e4db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e4df:	83 c4 10             	add    esp,0x10
c001e4e2:	48                   	dec    eax
c001e4e3:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e4e8:	89 c1                	mov    ecx,eax
c001e4ea:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001e4f0:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e4f5:	09 c8                	or     eax,ecx
c001e4f7:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001e4fd:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001e503:	83 c8 80             	or     eax,0xffffff80
c001e506:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001e50c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001e50f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e513:	25 00 7f 00 00       	and    eax,0x7f00
c001e518:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e51d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e522:	66 89 06             	mov    WORD PTR [esi],ax
c001e525:	b0 35                	mov    al,0x35
c001e527:	75 02                	jne    c001e52b <SATA::access(unsigned long long, int, void*, bool)+0x187>
c001e529:	b0 25                	mov    al,0x25
c001e52b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001e52e:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001e532:	89 e8                	mov    eax,ebp
c001e534:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001e538:	c1 e8 10             	shr    eax,0x10
c001e53b:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001e53e:	89 e8                	mov    eax,ebp
c001e540:	c1 e8 18             	shr    eax,0x18
c001e543:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001e546:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e54a:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001e54d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e551:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001e554:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001e558:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001e55c:	89 d6                	mov    esi,edx
c001e55e:	31 c0                	xor    eax,eax
c001e560:	c1 e6 07             	shl    esi,0x7
c001e563:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001e567:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001e56d:	80 e1 88             	and    cl,0x88
c001e570:	74 0a                	je     c001e57c <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001e572:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e577:	74 0a                	je     c001e583 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001e579:	40                   	inc    eax
c001e57a:	eb eb                	jmp    c001e567 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001e57c:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e581:	75 0a                	jne    c001e58d <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001e583:	83 ec 0c             	sub    esp,0xc
c001e586:	68 05 38 02 c0       	push   0xc0023805
c001e58b:	eb 36                	jmp    c001e5c3 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001e58d:	b8 01 00 00 00       	mov    eax,0x1
c001e592:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e596:	c1 e2 07             	shl    edx,0x7
c001e599:	d3 e0                	shl    eax,cl
c001e59b:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001e59f:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001e5a5:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001e5ab:	85 c8                	test   eax,ecx
c001e5ad:	74 2b                	je     c001e5da <SATA::access(unsigned long long, int, void*, bool)+0x236>
c001e5af:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001e5b5:	0f ba e1 1e          	bt     ecx,0x1e
c001e5b9:	73 ea                	jae    c001e5a5 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c001e5bb:	83 ec 0c             	sub    esp,0xc
c001e5be:	68 13 38 02 c0       	push   0xc0023813
c001e5c3:	e8 9c 89 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e5c8:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e5cd:	83 c4 10             	add    esp,0x10
c001e5d0:	48                   	dec    eax
c001e5d1:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e5d6:	85 c0                	test   eax,eax
c001e5d8:	eb 17                	jmp    c001e5f1 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c001e5da:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001e5e0:	0f ba e0 1e          	bt     eax,0x1e
c001e5e4:	73 15                	jae    c001e5fb <SATA::access(unsigned long long, int, void*, bool)+0x257>
c001e5e6:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e5eb:	48                   	dec    eax
c001e5ec:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e5f1:	75 01                	jne    c001e5f4 <SATA::access(unsigned long long, int, void*, bool)+0x250>
c001e5f3:	fb                   	sti    
c001e5f4:	b8 01 00 00 00       	mov    eax,0x1
c001e5f9:	eb 29                	jmp    c001e624 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001e5fb:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001e600:	75 10                	jne    c001e612 <SATA::access(unsigned long long, int, void*, bool)+0x26e>
c001e602:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001e608:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e60c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e610:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e612:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c001e617:	48                   	dec    eax
c001e618:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c001e61d:	75 03                	jne    c001e622 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001e61f:	fb                   	sti    
c001e620:	eb 02                	jmp    c001e624 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001e622:	31 c0                	xor    eax,eax
c001e624:	83 c4 2c             	add    esp,0x2c
c001e627:	5b                   	pop    ebx
c001e628:	5e                   	pop    esi
c001e629:	5f                   	pop    edi
c001e62a:	5d                   	pop    ebp
c001e62b:	c3                   	ret    

c001e62c <SATA::read(unsigned long long, int, void*)>:
c001e62c:	57                   	push   edi
c001e62d:	b8 04 00 00 00       	mov    eax,0x4
c001e632:	56                   	push   esi
c001e633:	53                   	push   ebx
c001e634:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e638:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001e63c:	8d 7a ff             	lea    edi,[edx-0x1]
c001e63f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001e643:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e647:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001e64d:	77 25                	ja     c001e674 <SATA::read(unsigned long long, int, void*)+0x48>
c001e64f:	b8 06 00 00 00       	mov    eax,0x6
c001e654:	85 f6                	test   esi,esi
c001e656:	74 1c                	je     c001e674 <SATA::read(unsigned long long, int, void*)+0x48>
c001e658:	50                   	push   eax
c001e659:	50                   	push   eax
c001e65a:	6a 00                	push   0x0
c001e65c:	56                   	push   esi
c001e65d:	52                   	push   edx
c001e65e:	53                   	push   ebx
c001e65f:	51                   	push   ecx
c001e660:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e664:	e8 3b fd ff ff       	call   c001e3a4 <SATA::access(unsigned long long, int, void*, bool)>
c001e669:	83 c4 20             	add    esp,0x20
c001e66c:	85 c0                	test   eax,eax
c001e66e:	0f 95 c0             	setne  al
c001e671:	0f b6 c0             	movzx  eax,al
c001e674:	5b                   	pop    ebx
c001e675:	5e                   	pop    esi
c001e676:	5f                   	pop    edi
c001e677:	c3                   	ret    

c001e678 <SATA::write(unsigned long long, int, void*)>:
c001e678:	55                   	push   ebp
c001e679:	b8 04 00 00 00       	mov    eax,0x4
c001e67e:	57                   	push   edi
c001e67f:	56                   	push   esi
c001e680:	53                   	push   ebx
c001e681:	83 ec 0c             	sub    esp,0xc
c001e684:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001e688:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001e68c:	8d 73 ff             	lea    esi,[ebx-0x1]
c001e68f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001e693:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e697:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001e69d:	77 3d                	ja     c001e6dc <SATA::write(unsigned long long, int, void*)+0x64>
c001e69f:	b8 06 00 00 00       	mov    eax,0x6
c001e6a4:	85 ed                	test   ebp,ebp
c001e6a6:	74 34                	je     c001e6dc <SATA::write(unsigned long long, int, void*)+0x64>
c001e6a8:	c1 e3 09             	shl    ebx,0x9
c001e6ab:	01 eb                	add    ebx,ebp
c001e6ad:	89 d6                	mov    esi,edx
c001e6af:	89 cf                	mov    edi,ecx
c001e6b1:	83 c6 01             	add    esi,0x1
c001e6b4:	83 d7 00             	adc    edi,0x0
c001e6b7:	50                   	push   eax
c001e6b8:	50                   	push   eax
c001e6b9:	6a 01                	push   0x1
c001e6bb:	55                   	push   ebp
c001e6bc:	81 c5 00 02 00 00    	add    ebp,0x200
c001e6c2:	6a 01                	push   0x1
c001e6c4:	51                   	push   ecx
c001e6c5:	52                   	push   edx
c001e6c6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e6ca:	e8 d5 fc ff ff       	call   c001e3a4 <SATA::access(unsigned long long, int, void*, bool)>
c001e6cf:	83 c4 20             	add    esp,0x20
c001e6d2:	89 f2                	mov    edx,esi
c001e6d4:	89 f9                	mov    ecx,edi
c001e6d6:	39 dd                	cmp    ebp,ebx
c001e6d8:	75 d3                	jne    c001e6ad <SATA::write(unsigned long long, int, void*)+0x35>
c001e6da:	31 c0                	xor    eax,eax
c001e6dc:	83 c4 0c             	add    esp,0xc
c001e6df:	5b                   	pop    ebx
c001e6e0:	5e                   	pop    esi
c001e6e1:	5f                   	pop    edi
c001e6e2:	5d                   	pop    ebp
c001e6e3:	c3                   	ret    

c001e6e4 <SATAPI::write(unsigned long long, int, void*)>:
c001e6e4:	b8 03 00 00 00       	mov    eax,0x3
c001e6e9:	c3                   	ret    

c001e6ea <SATAPI::close(int, int, void*)>:
c001e6ea:	83 ec 0c             	sub    esp,0xc
c001e6ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e6f1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e6f7:	85 c0                	test   eax,eax
c001e6f9:	74 0c                	je     c001e707 <SATAPI::close(int, int, void*)+0x1d>
c001e6fb:	83 ec 0c             	sub    esp,0xc
c001e6fe:	8b 10                	mov    edx,DWORD PTR [eax]
c001e700:	50                   	push   eax
c001e701:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e704:	83 c4 10             	add    esp,0x10
c001e707:	31 c0                	xor    eax,eax
c001e709:	83 c4 0c             	add    esp,0xc
c001e70c:	c3                   	ret    
c001e70d:	90                   	nop

c001e70e <SATAPI::SATAPI()>:
c001e70e:	83 ec 0c             	sub    esp,0xc
c001e711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e715:	83 ec 04             	sub    esp,0x4
c001e718:	68 00 08 00 00       	push   0x800
c001e71d:	68 5c 38 02 c0       	push   0xc002385c
c001e722:	50                   	push   eax
c001e723:	e8 fa ac fe ff       	call   c0009422 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e728:	83 c4 10             	add    esp,0x10
c001e72b:	ba 50 39 02 c0       	mov    edx,0xc0023950
c001e730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e734:	89 10                	mov    DWORD PTR [eax],edx
c001e736:	90                   	nop
c001e737:	83 c4 0c             	add    esp,0xc
c001e73a:	c3                   	ret    
c001e73b:	90                   	nop

c001e73c <SATAPI::diskRemoved()>:
c001e73c:	c3                   	ret    
c001e73d:	90                   	nop

c001e73e <SATAPI::diskInserted()>:
c001e73e:	83 ec 18             	sub    esp,0x18
c001e741:	68 68 38 02 c0       	push   0xc0023868
c001e746:	e8 19 88 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e74b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e74f:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001e756:	83 c4 1c             	add    esp,0x1c
c001e759:	c3                   	ret    

c001e75a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001e75a:	55                   	push   ebp
c001e75b:	57                   	push   edi
c001e75c:	56                   	push   esi
c001e75d:	53                   	push   ebx
c001e75e:	83 ec 34             	sub    esp,0x34
c001e761:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001e765:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e769:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001e76d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e771:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001e775:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001e77b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e781:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001e785:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001e78b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e78f:	83 c0 02             	add    eax,0x2
c001e792:	c1 e0 07             	shl    eax,0x7
c001e795:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e799:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e79d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e7a1:	c1 e0 07             	shl    eax,0x7
c001e7a4:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001e7a8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e7ac:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001e7b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e7ba:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e7c0:	e8 91 eb ff ff       	call   c001d356 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001e7c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001e7c9:	83 c4 10             	add    esp,0x10
c001e7cc:	b8 01 00 00 00       	mov    eax,0x1
c001e7d1:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001e7d6:	0f 84 53 02 00 00    	je     c001ea2f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e7dc:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e7e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e7e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001e7e8:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001e7ee:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001e7f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e7f8:	c1 e1 05             	shl    ecx,0x5
c001e7fb:	01 c8                	add    eax,ecx
c001e7fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e7ff:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001e805:	81 c9 25 00 01 00    	or     ecx,0x10025
c001e80b:	89 08                	mov    DWORD PTR [eax],ecx
c001e80d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001e813:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001e819:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001e81f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001e822:	8d 7b 40             	lea    edi,[ebx+0x40]
c001e825:	50                   	push   eax
c001e826:	68 90 00 00 00       	push   0x90
c001e82b:	6a 00                	push   0x0
c001e82d:	53                   	push   ebx
c001e82e:	e8 bd 1c fe ff       	call   c00004f0 <memset>
c001e833:	b9 0c 00 00 00       	mov    ecx,0xc
c001e838:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001e83c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e83e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001e844:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001e848:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001e84e:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001e852:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001e856:	48                   	dec    eax
c001e857:	25 ff ff 3f 00       	and    eax,0x3fffff
c001e85c:	89 c1                	mov    ecx,eax
c001e85e:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001e864:	25 00 00 c0 ff       	and    eax,0xffc00000
c001e869:	09 c8                	or     eax,ecx
c001e86b:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001e871:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001e877:	83 c8 80             	or     eax,0xffffff80
c001e87a:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001e880:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001e883:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001e887:	25 00 7f 00 00       	and    eax,0x7f00
c001e88c:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001e890:	0d 27 80 ff ff       	or     eax,0xffff8027
c001e895:	66 89 03             	mov    WORD PTR [ebx],ax
c001e898:	89 d0                	mov    eax,edx
c001e89a:	c1 ea 18             	shr    edx,0x18
c001e89d:	c1 e8 10             	shr    eax,0x10
c001e8a0:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001e8a3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001e8a6:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001e8aa:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001e8ad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001e8b1:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001e8b4:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001e8b8:	83 c4 10             	add    esp,0x10
c001e8bb:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001e8bf:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8c3:	31 c0                	xor    eax,eax
c001e8c5:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001e8cb:	80 e1 88             	and    cl,0x88
c001e8ce:	74 0a                	je     c001e8da <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001e8d0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e8d5:	74 0a                	je     c001e8e1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001e8d7:	40                   	inc    eax
c001e8d8:	eb eb                	jmp    c001e8c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001e8da:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001e8df:	75 43                	jne    c001e924 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001e8e1:	83 ec 0c             	sub    esp,0xc
c001e8e4:	68 80 38 02 c0       	push   0xc0023880
c001e8e9:	e8 76 86 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e8ee:	58                   	pop    eax
c001e8ef:	5a                   	pop    edx
c001e8f0:	68 95 38 02 c0       	push   0xc0023895
c001e8f5:	ff 35 34 be 02 c0    	push   DWORD PTR ds:0xc002be34
c001e8fb:	e8 62 2b ff ff       	call   c0011462 <VgaText::puts(char const*)>
c001e900:	59                   	pop    ecx
c001e901:	5b                   	pop    ebx
c001e902:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e906:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e90c:	e8 df ea ff ff       	call   c001d3f0 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e911:	5e                   	pop    esi
c001e912:	5f                   	pop    edi
c001e913:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001e917:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e91d:	e8 ae ea ff ff       	call   c001d3d0 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e922:	eb 48                	jmp    c001e96c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e924:	be 01 00 00 00       	mov    esi,0x1
c001e929:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e92d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e931:	d3 e6                	shl    esi,cl
c001e933:	c1 e7 07             	shl    edi,0x7
c001e936:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e93c:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e941:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e945:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e94b:	85 c6                	test   esi,eax
c001e94d:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e953:	0f 84 a3 00 00 00    	je     c001e9fc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e959:	0f ba e0 1e          	bt     eax,0x1e
c001e95d:	73 1a                	jae    c001e979 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e95f:	83 ec 0c             	sub    esp,0xc
c001e962:	68 a7 38 02 c0       	push   0xc00238a7
c001e967:	e8 f8 85 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e96c:	83 c4 10             	add    esp,0x10
c001e96f:	b8 01 00 00 00       	mov    eax,0x1
c001e974:	e9 b6 00 00 00       	jmp    c001ea2f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e979:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e97f:	83 f8 0d             	cmp    eax,0xd
c001e982:	77 0a                	ja     c001e98e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e984:	83 ec 0c             	sub    esp,0xc
c001e987:	68 c8 00 00 00       	push   0xc8
c001e98c:	eb 28                	jmp    c001e9b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e98e:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e994:	83 f8 0d             	cmp    eax,0xd
c001e997:	77 0a                	ja     c001e9a3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e999:	83 ec 0c             	sub    esp,0xc
c001e99c:	68 58 02 00 00       	push   0x258
c001e9a1:	eb 13                	jmp    c001e9b6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e9a3:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e9a9:	83 f8 06             	cmp    eax,0x6
c001e9ac:	77 10                	ja     c001e9be <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e9ae:	83 ec 0c             	sub    esp,0xc
c001e9b1:	68 dc 05 00 00       	push   0x5dc
c001e9b6:	e8 a5 6c ff ff       	call   c0015660 <milliTenthSleep(unsigned int)>
c001e9bb:	83 c4 10             	add    esp,0x10
c001e9be:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e9c2:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e9c5:	75 06                	jne    c001e9cd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e9c7:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e9cb:	74 15                	je     c001e9e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e9cd:	83 fb 06             	cmp    ebx,0x6
c001e9d0:	77 10                	ja     c001e9e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e9d2:	83 ec 0c             	sub    esp,0xc
c001e9d5:	68 c4 09 00 00       	push   0x9c4
c001e9da:	e8 81 6c ff ff       	call   c0015660 <milliTenthSleep(unsigned int)>
c001e9df:	83 c4 10             	add    esp,0x10
c001e9e2:	43                   	inc    ebx
c001e9e3:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e9e9:	0f 85 56 ff ff ff    	jne    c001e945 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e9ef:	83 ec 0c             	sub    esp,0xc
c001e9f2:	68 ba 38 02 c0       	push   0xc00238ba
c001e9f7:	e9 6b ff ff ff       	jmp    c001e967 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e9fc:	0f ba e0 1e          	bt     eax,0x1e
c001ea00:	73 0d                	jae    c001ea0f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001ea02:	83 ec 0c             	sub    esp,0xc
c001ea05:	68 ce 38 02 c0       	push   0xc00238ce
c001ea0a:	e9 58 ff ff ff       	jmp    c001e967 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001ea0f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ea14:	74 17                	je     c001ea2d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001ea16:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ea1b:	74 10                	je     c001ea2d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001ea1d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ea23:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ea27:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ea2b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ea2d:	31 c0                	xor    eax,eax
c001ea2f:	83 c4 2c             	add    esp,0x2c
c001ea32:	5b                   	pop    ebx
c001ea33:	5e                   	pop    esi
c001ea34:	5f                   	pop    edi
c001ea35:	5d                   	pop    ebp
c001ea36:	c3                   	ret    
c001ea37:	90                   	nop

c001ea38 <SATAPI::eject()>:
c001ea38:	57                   	push   edi
c001ea39:	b9 03 00 00 00       	mov    ecx,0x3
c001ea3e:	83 ec 18             	sub    esp,0x18
c001ea41:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ea45:	fc                   	cld    
c001ea46:	31 c0                	xor    eax,eax
c001ea48:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ea4a:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ea4f:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ea54:	50                   	push   eax
c001ea55:	6a 00                	push   0x0
c001ea57:	6a 00                	push   0x0
c001ea59:	6a 00                	push   0x0
c001ea5b:	6a 00                	push   0x0
c001ea5d:	6a 02                	push   0x2
c001ea5f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ea63:	50                   	push   eax
c001ea64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ea68:	e8 ed fc ff ff       	call   c001e75a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ea6d:	31 c0                	xor    eax,eax
c001ea6f:	83 c4 38             	add    esp,0x38
c001ea72:	5f                   	pop    edi
c001ea73:	c3                   	ret    

c001ea74 <SATAPI::detectMedia()>:
c001ea74:	53                   	push   ebx
c001ea75:	83 ec 14             	sub    esp,0x14
c001ea78:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ea7c:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ea82:	e8 b9 bf fe ff       	call   c000aa40 <VCache::writeWriteBuffer()>
c001ea87:	59                   	pop    ecx
c001ea88:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ea8e:	e8 9d bf fe ff       	call   c000aa30 <VCache::invalidateReadBuffer()>
c001ea93:	c7 04 24 e3 38 02 c0 	mov    DWORD PTR [esp],0xc00238e3
c001ea9a:	e8 c5 84 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ea9f:	83 c4 10             	add    esp,0x10
c001eaa2:	31 c0                	xor    eax,eax
c001eaa4:	8b 14 85 80 97 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6880]
c001eaab:	85 d2                	test   edx,edx
c001eaad:	74 0f                	je     c001eabe <SATAPI::detectMedia()+0x4a>
c001eaaf:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001eab5:	75 07                	jne    c001eabe <SATAPI::detectMedia()+0x4a>
c001eab7:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001eabe:	40                   	inc    eax
c001eabf:	83 f8 1a             	cmp    eax,0x1a
c001eac2:	75 e0                	jne    c001eaa4 <SATAPI::detectMedia()+0x30>
c001eac4:	83 c4 08             	add    esp,0x8
c001eac7:	5b                   	pop    ebx
c001eac8:	c3                   	ret    
c001eac9:	90                   	nop

c001eaca <SATAPI::open(int, int, void*)>:
c001eaca:	56                   	push   esi
c001eacb:	53                   	push   ebx
c001eacc:	51                   	push   ecx
c001eacd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ead1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ead5:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001eadf:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001eae5:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001eaef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001eaf3:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001eafd:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001eb03:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001eb0a:	e8 b7 03 ff ff       	call   c000eec6 <Phys::allocatePage()>
c001eb0f:	89 c6                	mov    esi,eax
c001eb11:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001eb17:	81 c6 00 10 00 00    	add    esi,0x1000
c001eb1d:	e8 a4 03 ff ff       	call   c000eec6 <Phys::allocatePage()>
c001eb22:	39 c6                	cmp    esi,eax
c001eb24:	74 10                	je     c001eb36 <SATAPI::open(int, int, void*)+0x6c>
c001eb26:	83 ec 0c             	sub    esp,0xc
c001eb29:	68 f8 38 02 c0       	push   0xc00238f8
c001eb2e:	e8 9f 01 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001eb33:	83 c4 10             	add    esp,0x10
c001eb36:	83 ec 0c             	sub    esp,0xc
c001eb39:	6a 02                	push   0x2
c001eb3b:	e8 0b 35 ff ff       	call   c001204b <Virt::allocateKernelVirtualPages(int)>
c001eb40:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001eb46:	6a 03                	push   0x3
c001eb48:	50                   	push   eax
c001eb49:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001eb4f:	ff 35 d0 be 02 c0    	push   DWORD PTR ds:0xc002bed0
c001eb55:	e8 da 3b ff ff       	call   c0012734 <VAS::mapPage(unsigned long, unsigned long, int)>
c001eb5a:	83 c4 14             	add    esp,0x14
c001eb5d:	68 78 01 00 00       	push   0x178
c001eb62:	e8 14 fe fe ff       	call   c000e97b <malloc>
c001eb67:	83 c4 0c             	add    esp,0xc
c001eb6a:	89 c6                	mov    esi,eax
c001eb6c:	6a 00                	push   0x0
c001eb6e:	68 ff ff ff 7f       	push   0x7fffffff
c001eb73:	6a 00                	push   0x0
c001eb75:	6a 00                	push   0x0
c001eb77:	53                   	push   ebx
c001eb78:	68 0e 39 02 c0       	push   0xc002390e
c001eb7d:	50                   	push   eax
c001eb7e:	e8 1d b3 fe ff       	call   c0009ea0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001eb83:	83 c4 14             	add    esp,0x14
c001eb86:	56                   	push   esi
c001eb87:	e8 d4 b3 fe ff       	call   c0009f60 <LogicalDisk::assignDriveLetter()>
c001eb8c:	5a                   	pop    edx
c001eb8d:	0f be c0             	movsx  eax,al
c001eb90:	59                   	pop    ecx
c001eb91:	50                   	push   eax
c001eb92:	68 54 37 02 c0       	push   0xc0023754
c001eb97:	e8 c8 83 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001eb9c:	58                   	pop    eax
c001eb9d:	5a                   	pop    edx
c001eb9e:	56                   	push   esi
c001eb9f:	53                   	push   ebx
c001eba0:	e8 99 a4 fe ff       	call   c000903e <Device::addChild(Device*)>
c001eba5:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ebab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ebae:	e8 d7 a8 fe ff       	call   c000948a <PhysicalDisk::startCache()>
c001ebb3:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ebba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ebbd:	e8 b2 fe ff ff       	call   c001ea74 <SATAPI::detectMedia()>
c001ebc2:	83 c4 14             	add    esp,0x14
c001ebc5:	31 c0                	xor    eax,eax
c001ebc7:	5b                   	pop    ebx
c001ebc8:	5e                   	pop    esi
c001ebc9:	c3                   	ret    

c001ebca <SATAPI::read(unsigned long long, int, void*)>:
c001ebca:	57                   	push   edi
c001ebcb:	56                   	push   esi
c001ebcc:	53                   	push   ebx
c001ebcd:	83 ec 30             	sub    esp,0x30
c001ebd0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ebd4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001ebd8:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001ebdc:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001ebe0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ebe4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001ebe8:	83 fe 04             	cmp    esi,0x4
c001ebeb:	7e 10                	jle    c001ebfd <SATAPI::read(unsigned long long, int, void*)+0x33>
c001ebed:	83 ec 0c             	sub    esp,0xc
c001ebf0:	68 1c 39 02 c0       	push   0xc002391c
c001ebf5:	e8 d8 00 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001ebfa:	83 c4 10             	add    esp,0x10
c001ebfd:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ec03:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001ec09:	51                   	push   ecx
c001ec0a:	50                   	push   eax
c001ec0b:	83 c0 02             	add    eax,0x2
c001ec0e:	c1 e0 07             	shl    eax,0x7
c001ec11:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001ec17:	50                   	push   eax
c001ec18:	52                   	push   edx
c001ec19:	e8 fc e7 ff ff       	call   c001d41a <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ec1e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001ec22:	b9 03 00 00 00       	mov    ecx,0x3
c001ec27:	fc                   	cld    
c001ec28:	31 c0                	xor    eax,eax
c001ec2a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ec2c:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ec31:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ec36:	83 c4 0c             	add    esp,0xc
c001ec39:	6a 00                	push   0x0
c001ec3b:	6a 00                	push   0x0
c001ec3d:	6a 00                	push   0x0
c001ec3f:	6a 00                	push   0x0
c001ec41:	6a 02                	push   0x2
c001ec43:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ec47:	50                   	push   eax
c001ec48:	53                   	push   ebx
c001ec49:	e8 0c fb ff ff       	call   c001e75a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ec4e:	83 c4 20             	add    esp,0x20
c001ec51:	85 c0                	test   eax,eax
c001ec53:	75 44                	jne    c001ec99 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001ec55:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ec59:	b9 03 00 00 00       	mov    ecx,0x3
c001ec5e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ec60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec64:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ec69:	0f c8                	bswap  eax
c001ec6b:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ec6f:	89 f0                	mov    eax,esi
c001ec71:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ec75:	50                   	push   eax
c001ec76:	56                   	push   esi
c001ec77:	c1 e6 0b             	shl    esi,0xb
c001ec7a:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ec7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ec82:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ec86:	56                   	push   esi
c001ec87:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ec8b:	50                   	push   eax
c001ec8c:	53                   	push   ebx
c001ec8d:	e8 c8 fa ff ff       	call   c001e75a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ec92:	83 c4 20             	add    esp,0x20
c001ec95:	85 c0                	test   eax,eax
c001ec97:	74 14                	je     c001ecad <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001ec99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ec9d:	83 ec 0c             	sub    esp,0xc
c001eca0:	53                   	push   ebx
c001eca1:	e8 ce fd ff ff       	call   c001ea74 <SATAPI::detectMedia()>
c001eca6:	83 c4 10             	add    esp,0x10
c001eca9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ecad:	83 c4 30             	add    esp,0x30
c001ecb0:	5b                   	pop    ebx
c001ecb1:	5e                   	pop    esi
c001ecb2:	5f                   	pop    edi
c001ecb3:	c3                   	ret    

c001ecb4 <IOAPIC::close(int, int, void*)>:
c001ecb4:	b8 00 00 00 00       	mov    eax,0x0
c001ecb9:	c3                   	ret    

c001ecba <apicGetBase()>:
c001ecba:	55                   	push   ebp
c001ecbb:	89 e5                	mov    ebp,esp
c001ecbd:	83 ec 08             	sub    esp,0x8
c001ecc0:	83 ec 0c             	sub    esp,0xc
c001ecc3:	68 80 39 02 c0       	push   0xc0023980
c001ecc8:	e8 05 00 ff ff       	call   c000ecd2 <KePanic(char const*)>
c001eccd:	83 c4 10             	add    esp,0x10
c001ecd0:	b8 00 00 00 00       	mov    eax,0x0
c001ecd5:	c9                   	leave  
c001ecd6:	c3                   	ret    
c001ecd7:	90                   	nop

c001ecd8 <IOAPIC::IOAPIC()>:
c001ecd8:	83 ec 0c             	sub    esp,0xc
c001ecdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecdf:	83 ec 08             	sub    esp,0x8
c001ece2:	68 8f 39 02 c0       	push   0xc002398f
c001ece7:	50                   	push   eax
c001ece8:	e8 b3 a4 fe ff       	call   c00091a0 <Device::Device(char const*)>
c001eced:	83 c4 10             	add    esp,0x10
c001ecf0:	ba b0 39 02 c0       	mov    edx,0xc00239b0
c001ecf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ecf9:	89 10                	mov    DWORD PTR [eax],edx
c001ecfb:	90                   	nop
c001ecfc:	83 c4 0c             	add    esp,0xc
c001ecff:	c3                   	ret    

c001ed00 <apicOpen()>:
c001ed00:	55                   	push   ebp
c001ed01:	89 e5                	mov    ebp,esp
c001ed03:	53                   	push   ebx
c001ed04:	83 ec 34             	sub    esp,0x34
c001ed07:	83 ec 0c             	sub    esp,0xc
c001ed0a:	68 97 39 02 c0       	push   0xc0023997
c001ed0f:	e8 50 82 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ed14:	83 c4 10             	add    esp,0x10
c001ed17:	a0 20 d1 02 c0       	mov    al,ds:0xc002d120
c001ed1c:	83 f0 01             	xor    eax,0x1
c001ed1f:	0f b6 c0             	movzx  eax,al
c001ed22:	85 c0                	test   eax,eax
c001ed24:	0f 84 a3 00 00 00    	je     c001edcd <apicOpen()+0xcd>
c001ed2a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001ed2e:	a0 e0 9a 02 c0       	mov    al,ds:0xc0029ae0
c001ed33:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001ed37:	0f b6 c0             	movzx  eax,al
c001ed3a:	39 c2                	cmp    edx,eax
c001ed3c:	0f 83 84 00 00 00    	jae    c001edc6 <apicOpen()+0xc6>
c001ed42:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001ed49:	83 ec 0c             	sub    esp,0xc
c001ed4c:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001ed4f:	e8 27 fc fe ff       	call   c000e97b <malloc>
c001ed54:	83 c4 10             	add    esp,0x10
c001ed57:	89 c3                	mov    ebx,eax
c001ed59:	83 ec 0c             	sub    esp,0xc
c001ed5c:	53                   	push   ebx
c001ed5d:	e8 76 ff ff ff       	call   c001ecd8 <IOAPIC::IOAPIC()>
c001ed62:	83 c4 10             	add    esp,0x10
c001ed65:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001ed68:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001ed6c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001ed6f:	89 14 85 00 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f00],edx
c001ed76:	a1 e0 d0 02 c0       	mov    eax,ds:0xc002d0e0
c001ed7b:	83 c0 01             	add    eax,0x1
c001ed7e:	a3 e0 d0 02 c0       	mov    ds:0xc002d0e0,eax
c001ed83:	a1 70 9d 02 c0       	mov    eax,ds:0xc0029d70
c001ed88:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001ed8e:	83 ec 08             	sub    esp,0x8
c001ed91:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001ed94:	50                   	push   eax
c001ed95:	e8 a4 a2 fe ff       	call   c000903e <Device::addChild(Device*)>
c001ed9a:	83 c4 10             	add    esp,0x10
c001ed9d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001eda0:	8b 00                	mov    eax,DWORD PTR [eax]
c001eda2:	83 c0 08             	add    eax,0x8
c001eda5:	8b 00                	mov    eax,DWORD PTR [eax]
c001eda7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001edab:	6a 00                	push   0x0
c001edad:	6a 00                	push   0x0
c001edaf:	52                   	push   edx
c001edb0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001edb3:	ff d0                	call   eax
c001edb5:	83 c4 10             	add    esp,0x10
c001edb8:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001edbb:	83 c0 01             	add    eax,0x1
c001edbe:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001edc1:	e9 68 ff ff ff       	jmp    c001ed2e <apicOpen()+0x2e>
c001edc6:	c6 05 20 d1 02 c0 01 	mov    BYTE PTR ds:0xc002d120,0x1
c001edcd:	e8 e8 fe ff ff       	call   c001ecba <apicGetBase()>
c001edd2:	05 f0 00 00 00       	add    eax,0xf0
c001edd7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001edda:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001eddd:	8b 00                	mov    eax,DWORD PTR [eax]
c001eddf:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ede2:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ede9:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001edf0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001edf3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001edf6:	89 10                	mov    DWORD PTR [eax],edx
c001edf8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001edff:	a1 2c 9a 02 c0       	mov    eax,ds:0xc0029a2c
c001ee04:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ee07:	7d 7c                	jge    c001ee85 <apicOpen()+0x185>
c001ee09:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee0c:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001ee13:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ee16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee19:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001ee20:	c1 e8 08             	shr    eax,0x8
c001ee23:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ee27:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ee2a:	8b 04 85 40 9a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd65c0]
c001ee31:	c1 e8 18             	shr    eax,0x18
c001ee34:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ee37:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ee3b:	3d ff 00 00 00       	cmp    eax,0xff
c001ee40:	75 3a                	jne    c001ee7c <apicOpen()+0x17c>
c001ee42:	e8 73 fe ff ff       	call   c001ecba <apicGetBase()>
c001ee47:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ee4b:	83 fa 01             	cmp    edx,0x1
c001ee4e:	75 07                	jne    c001ee57 <apicOpen()+0x157>
c001ee50:	ba 60 03 00 00       	mov    edx,0x360
c001ee55:	eb 05                	jmp    c001ee5c <apicOpen()+0x15c>
c001ee57:	ba 50 03 00 00       	mov    edx,0x350
c001ee5c:	01 d0                	add    eax,edx
c001ee5e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ee61:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ee64:	8b 00                	mov    eax,DWORD PTR [eax]
c001ee66:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ee69:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ee70:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ee74:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ee77:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ee7a:	89 10                	mov    DWORD PTR [eax],edx
c001ee7c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ee80:	e9 7a ff ff ff       	jmp    c001edff <apicOpen()+0xff>
c001ee85:	90                   	nop
c001ee86:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ee89:	c9                   	leave  
c001ee8a:	c3                   	ret    
c001ee8b:	90                   	nop

c001ee8c <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ee8c:	55                   	push   ebp
c001ee8d:	89 e5                	mov    ebp,esp
c001ee8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ee92:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ee98:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ee9b:	72 1d                	jb     c001eeba <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ee9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eea0:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001eea6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eea9:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001eeaf:	01 d0                	add    eax,edx
c001eeb1:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001eeb4:	73 04                	jae    c001eeba <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001eeb6:	b0 01                	mov    al,0x1
c001eeb8:	eb 02                	jmp    c001eebc <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001eeba:	b0 00                	mov    al,0x0
c001eebc:	5d                   	pop    ebp
c001eebd:	c3                   	ret    

c001eebe <IOAPIC::read(int)>:
c001eebe:	55                   	push   ebp
c001eebf:	89 e5                	mov    ebp,esp
c001eec1:	83 ec 10             	sub    esp,0x10
c001eec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eec7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001eecd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001eed0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001eed3:	0f b6 d0             	movzx  edx,al
c001eed6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eed9:	89 10                	mov    DWORD PTR [eax],edx
c001eedb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001eede:	83 c0 10             	add    eax,0x10
c001eee1:	8b 00                	mov    eax,DWORD PTR [eax]
c001eee3:	c9                   	leave  
c001eee4:	c3                   	ret    
c001eee5:	90                   	nop

c001eee6 <IOAPIC::open(int, int, void*)>:
c001eee6:	55                   	push   ebp
c001eee7:	89 e5                	mov    ebp,esp
c001eee9:	57                   	push   edi
c001eeea:	56                   	push   esi
c001eeeb:	53                   	push   ebx
c001eeec:	83 ec 04             	sub    esp,0x4
c001eeef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eef2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001eef5:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001eefb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001eefe:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ef04:	8b 14 85 20 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd64e0]
c001ef0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef0e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ef14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef17:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ef1d:	8b 14 85 a0 9b 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6460]
c001ef24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef27:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001ef2d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef30:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001ef36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef39:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef3f:	0f b6 f0             	movzx  esi,al
c001ef42:	89 d0                	mov    eax,edx
c001ef44:	ba 00 00 00 00       	mov    edx,0x0
c001ef49:	89 c7                	mov    edi,eax
c001ef4b:	83 e7 ff             	and    edi,0xffffffff
c001ef4e:	89 f9                	mov    ecx,edi
c001ef50:	0f b6 da             	movzx  ebx,dl
c001ef53:	89 c8                	mov    eax,ecx
c001ef55:	89 da                	mov    edx,ebx
c001ef57:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001ef5a:	8d 5e 08             	lea    ebx,[esi+0x8]
c001ef5d:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001ef61:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001ef65:	83 e0 00             	and    eax,0x0
c001ef68:	09 d0                	or     eax,edx
c001ef6a:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001ef6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef71:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001ef77:	8d 50 01             	lea    edx,[eax+0x1]
c001ef7a:	88 d1                	mov    cl,dl
c001ef7c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001ef7f:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001ef85:	0f b6 d0             	movzx  edx,al
c001ef88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ef8b:	83 c2 08             	add    edx,0x8
c001ef8e:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001ef92:	0f b6 c9             	movzx  ecx,cl
c001ef95:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001ef9b:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001ef9f:	6a 01                	push   0x1
c001efa1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001efa4:	e8 15 ff ff ff       	call   c001eebe <IOAPIC::read(int)>
c001efa9:	83 c4 08             	add    esp,0x8
c001efac:	c1 f8 10             	sar    eax,0x10
c001efaf:	0f b6 c0             	movzx  eax,al
c001efb2:	8d 50 01             	lea    edx,[eax+0x1]
c001efb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efb8:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001efbe:	b8 00 00 00 00       	mov    eax,0x0
c001efc3:	8d 65 f4             	lea    esp,[ebp-0xc]
c001efc6:	5b                   	pop    ebx
c001efc7:	5e                   	pop    esi
c001efc8:	5f                   	pop    edi
c001efc9:	5d                   	pop    ebp
c001efca:	c3                   	ret    
c001efcb:	90                   	nop

c001efcc <IOAPIC::write(int, int)>:
c001efcc:	55                   	push   ebp
c001efcd:	89 e5                	mov    ebp,esp
c001efcf:	83 ec 10             	sub    esp,0x10
c001efd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001efd5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001efdb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001efde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001efe1:	0f b6 d0             	movzx  edx,al
c001efe4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001efe7:	89 10                	mov    DWORD PTR [eax],edx
c001efe9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001efec:	8d 50 10             	lea    edx,[eax+0x10]
c001efef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001eff2:	89 02                	mov    DWORD PTR [edx],eax
c001eff4:	90                   	nop
c001eff5:	c9                   	leave  
c001eff6:	c3                   	ret    
c001eff7:	90                   	nop

c001eff8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001eff8:	55                   	push   ebp
c001eff9:	89 e5                	mov    ebp,esp
c001effb:	53                   	push   ebx
c001effc:	83 ec 2c             	sub    esp,0x2c
c001efff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f002:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001f005:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001f008:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001f00b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001f00e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001f011:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001f014:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001f017:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001f01a:	88 d8                	mov    al,bl
c001f01c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001f01f:	88 c8                	mov    al,cl
c001f021:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001f024:	88 d0                	mov    al,dl
c001f026:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001f029:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f02d:	83 c0 08             	add    eax,0x8
c001f030:	01 c0                	add    eax,eax
c001f032:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001f035:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001f039:	83 c0 08             	add    eax,0x8
c001f03c:	01 c0                	add    eax,eax
c001f03e:	83 c0 01             	add    eax,0x1
c001f041:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001f044:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f047:	50                   	push   eax
c001f048:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f04b:	e8 6e fe ff ff       	call   c001eebe <IOAPIC::read(int)>
c001f050:	83 c4 08             	add    esp,0x8
c001f053:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001f056:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001f05d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001f060:	c1 e0 18             	shl    eax,0x18
c001f063:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001f066:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001f069:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001f06c:	52                   	push   edx
c001f06d:	50                   	push   eax
c001f06e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f071:	e8 56 ff ff ff       	call   c001efcc <IOAPIC::write(int, int)>
c001f076:	83 c4 0c             	add    esp,0xc
c001f079:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f07c:	50                   	push   eax
c001f07d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f080:	e8 39 fe ff ff       	call   c001eebe <IOAPIC::read(int)>
c001f085:	83 c4 08             	add    esp,0x8
c001f088:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001f08b:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001f092:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001f099:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001f0a0:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001f0a4:	85 c0                	test   eax,eax
c001f0a6:	74 09                	je     c001f0b1 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001f0a8:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001f0af:	eb 07                	jmp    c001f0b8 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001f0b1:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001f0b8:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001f0bc:	85 c0                	test   eax,eax
c001f0be:	74 09                	je     c001f0c9 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001f0c0:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001f0c7:	eb 07                	jmp    c001f0d0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001f0c9:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001f0d0:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001f0d7:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001f0db:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001f0de:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001f0e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001f0e4:	52                   	push   edx
c001f0e5:	50                   	push   eax
c001f0e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001f0e9:	e8 de fe ff ff       	call   c001efcc <IOAPIC::write(int, int)>
c001f0ee:	83 c4 0c             	add    esp,0xc
c001f0f1:	90                   	nop
c001f0f2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001f0f5:	c9                   	leave  
c001f0f6:	c3                   	ret    
c001f0f7:	90                   	nop

c001f0f8 <APICTimer::close(int, int, void*)>:
c001f0f8:	b8 00 00 00 00       	mov    eax,0x0
c001f0fd:	c3                   	ret    
c001f0fe:	66 90                	xchg   ax,ax

c001f100 <apicTimerHandler(regs*, void*)>:
c001f100:	83 ec 0c             	sub    esp,0xc
c001f103:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f107:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f109:	b8 10 27 00 00       	mov    eax,0x2710
c001f10e:	ba 00 00 00 00       	mov    edx,0x0
c001f113:	f7 f1                	div    ecx
c001f115:	83 ec 0c             	sub    esp,0xc
c001f118:	50                   	push   eax
c001f119:	e8 3e b6 fe ff       	call   c000a75c <timerHandler(unsigned int)>
c001f11e:	83 c4 10             	add    esp,0x10
c001f121:	90                   	nop
c001f122:	83 c4 0c             	add    esp,0xc
c001f125:	c3                   	ret    
c001f126:	66 90                	xchg   ax,ax

c001f128 <APICTimer::open(int, int, void*)>:
c001f128:	83 ec 0c             	sub    esp,0xc
c001f12b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f12f:	8b 00                	mov    eax,DWORD PTR [eax]
c001f131:	83 c0 24             	add    eax,0x24
c001f134:	8b 00                	mov    eax,DWORD PTR [eax]
c001f136:	83 ec 08             	sub    esp,0x8
c001f139:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f13d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f141:	ff d0                	call   eax
c001f143:	83 c4 10             	add    esp,0x10
c001f146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f14a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f14e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001f154:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f158:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f15c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001f162:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f166:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001f16c:	83 ec 0c             	sub    esp,0xc
c001f16f:	51                   	push   ecx
c001f170:	6a 01                	push   0x1
c001f172:	68 00 f1 01 c0       	push   0xc001f100
c001f177:	52                   	push   edx
c001f178:	50                   	push   eax
c001f179:	e8 6c 9e fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f17e:	83 c4 20             	add    esp,0x20
c001f181:	89 c2                	mov    edx,eax
c001f183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f187:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f18d:	b8 00 00 00 00       	mov    eax,0x0
c001f192:	83 c4 0c             	add    esp,0xc
c001f195:	c3                   	ret    
c001f196:	66 90                	xchg   ax,ax

c001f198 <APICTimer::write(int)>:
c001f198:	83 ec 0c             	sub    esp,0xc
c001f19b:	83 ec 0c             	sub    esp,0xc
c001f19e:	68 d4 39 02 c0       	push   0xc00239d4
c001f1a3:	e8 2a fb fe ff       	call   c000ecd2 <KePanic(char const*)>
c001f1a8:	83 c4 10             	add    esp,0x10
c001f1ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f1b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f1b9:	90                   	nop
c001f1ba:	83 c4 0c             	add    esp,0xc
c001f1bd:	c3                   	ret    
c001f1be:	66 90                	xchg   ax,ax

c001f1c0 <APICTimer::APICTimer()>:
c001f1c0:	83 ec 0c             	sub    esp,0xc
c001f1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1c7:	83 ec 08             	sub    esp,0x8
c001f1ca:	68 e4 39 02 c0       	push   0xc00239e4
c001f1cf:	50                   	push   eax
c001f1d0:	e8 bb b4 fe ff       	call   c000a690 <Timer::Timer(char const*)>
c001f1d5:	83 c4 10             	add    esp,0x10
c001f1d8:	ba f8 39 02 c0       	mov    edx,0xc00239f8
c001f1dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f1e1:	89 10                	mov    DWORD PTR [eax],edx
c001f1e3:	90                   	nop
c001f1e4:	83 c4 0c             	add    esp,0xc
c001f1e7:	c3                   	ret    

c001f1e8 <PIT::write(int)>:
c001f1e8:	83 ec 10             	sub    esp,0x10
c001f1eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f1ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001f1f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001f1f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f1fd:	a3 24 d1 02 c0       	mov    ds:0xc002d124,eax
c001f202:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001f207:	89 c2                	mov    edx,eax
c001f209:	c1 fa 1f             	sar    edx,0x1f
c001f20c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001f210:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f214:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001f21b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001f220:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001f224:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001f229:	ee                   	out    dx,al
c001f22a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f22e:	0f b6 c0             	movzx  eax,al
c001f231:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001f238:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001f23c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001f240:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001f245:	ee                   	out    dx,al
c001f246:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f24a:	c1 f8 08             	sar    eax,0x8
c001f24d:	0f b6 c0             	movzx  eax,al
c001f250:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001f257:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001f25b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001f25f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001f264:	ee                   	out    dx,al
c001f265:	90                   	nop
c001f266:	83 c4 10             	add    esp,0x10
c001f269:	c3                   	ret    
c001f26a:	66 90                	xchg   ax,ax

c001f26c <pitHandler(regs*, void*)>:
c001f26c:	83 ec 0c             	sub    esp,0xc
c001f26f:	8b 0d 24 d1 02 c0    	mov    ecx,DWORD PTR ds:0xc002d124
c001f275:	b8 10 27 00 00       	mov    eax,0x2710
c001f27a:	89 c2                	mov    edx,eax
c001f27c:	c1 fa 1f             	sar    edx,0x1f
c001f27f:	f7 f9                	idiv   ecx
c001f281:	83 ec 0c             	sub    esp,0xc
c001f284:	50                   	push   eax
c001f285:	e8 d2 b4 fe ff       	call   c000a75c <timerHandler(unsigned int)>
c001f28a:	83 c4 10             	add    esp,0x10
c001f28d:	90                   	nop
c001f28e:	83 c4 0c             	add    esp,0xc
c001f291:	c3                   	ret    
c001f292:	66 90                	xchg   ax,ax

c001f294 <PIT::open(int, int, void*)>:
c001f294:	83 ec 0c             	sub    esp,0xc
c001f297:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f29b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f29d:	83 c0 24             	add    eax,0x24
c001f2a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f2a2:	83 ec 08             	sub    esp,0x8
c001f2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f2ad:	ff d0                	call   eax
c001f2af:	83 c4 10             	add    esp,0x10
c001f2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2b6:	83 ec 0c             	sub    esp,0xc
c001f2b9:	6a 00                	push   0x0
c001f2bb:	6a 01                	push   0x1
c001f2bd:	68 6c f2 01 c0       	push   0xc001f26c
c001f2c2:	6a 00                	push   0x0
c001f2c4:	50                   	push   eax
c001f2c5:	e8 20 9d fe ff       	call   c0008fea <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001f2ca:	83 c4 20             	add    esp,0x20
c001f2cd:	89 c2                	mov    edx,eax
c001f2cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2d3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001f2d9:	b8 00 00 00 00       	mov    eax,0x0
c001f2de:	83 c4 0c             	add    esp,0xc
c001f2e1:	c3                   	ret    
c001f2e2:	66 90                	xchg   ax,ax

c001f2e4 <PIT::close(int, int, void*)>:
c001f2e4:	83 ec 0c             	sub    esp,0xc
c001f2e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2eb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001f2f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f2f9:	6a 01                	push   0x1
c001f2fb:	68 6c f2 01 c0       	push   0xc001f26c
c001f300:	6a 00                	push   0x0
c001f302:	50                   	push   eax
c001f303:	e8 18 9d fe ff       	call   c0009020 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001f308:	83 c4 10             	add    esp,0x10
c001f30b:	b8 00 00 00 00       	mov    eax,0x0
c001f310:	83 c4 0c             	add    esp,0xc
c001f313:	c3                   	ret    

c001f314 <PIT::PIT()>:
c001f314:	83 ec 0c             	sub    esp,0xc
c001f317:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f31b:	83 ec 08             	sub    esp,0x8
c001f31e:	68 20 3a 02 c0       	push   0xc0023a20
c001f323:	50                   	push   eax
c001f324:	e8 67 b3 fe ff       	call   c000a690 <Timer::Timer(char const*)>
c001f329:	83 c4 10             	add    esp,0x10
c001f32c:	ba 48 3a 02 c0       	mov    edx,0xc0023a48
c001f331:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f335:	89 10                	mov    DWORD PTR [eax],edx
c001f337:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f33b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f341:	0f b6 d0             	movzx  edx,al
c001f344:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f348:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001f34f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f353:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f359:	0f b6 d0             	movzx  edx,al
c001f35c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f360:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001f365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f369:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001f36f:	8d 50 01             	lea    edx,[eax+0x1]
c001f372:	88 d1                	mov    cl,dl
c001f374:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f378:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001f37e:	0f b6 d0             	movzx  edx,al
c001f381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f385:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001f389:	83 e1 3f             	and    ecx,0x3f
c001f38c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001f390:	90                   	nop
c001f391:	83 c4 0c             	add    esp,0xc
c001f394:	c3                   	ret    
c001f395:	66 90                	xchg   ax,ax
c001f397:	66 90                	xchg   ax,ax
c001f399:	66 90                	xchg   ax,ax
c001f39b:	66 90                	xchg   ax,ax
c001f39d:	66 90                	xchg   ax,ax
c001f39f:	90                   	nop

c001f3a0 <avxDetect>:
c001f3a0:	b8 01 00 00 00       	mov    eax,0x1
c001f3a5:	0f a2                	cpuid  
c001f3a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001f3ad:	74 15                	je     c001f3c4 <avxDetect.noAVX>
c001f3af:	b8 01 00 00 00       	mov    eax,0x1
c001f3b4:	0f a2                	cpuid  
c001f3b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001f3bc:	74 06                	je     c001f3c4 <avxDetect.noAVX>
c001f3be:	b8 01 00 00 00       	mov    eax,0x1
c001f3c3:	c3                   	ret    

c001f3c4 <avxDetect.noAVX>:
c001f3c4:	b8 00 00 00 00       	mov    eax,0x0
c001f3c9:	c3                   	ret    

c001f3ca <avxSave>:
c001f3ca:	53                   	push   ebx
c001f3cb:	52                   	push   edx
c001f3cc:	31 c0                	xor    eax,eax
c001f3ce:	48                   	dec    eax
c001f3cf:	89 c2                	mov    edx,eax
c001f3d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3d5:	0f ae 23             	xsave  [ebx]
c001f3d8:	5a                   	pop    edx
c001f3d9:	5b                   	pop    ebx
c001f3da:	c3                   	ret    

c001f3db <avxLoad>:
c001f3db:	53                   	push   ebx
c001f3dc:	52                   	push   edx
c001f3dd:	31 c0                	xor    eax,eax
c001f3df:	48                   	dec    eax
c001f3e0:	89 c2                	mov    edx,eax
c001f3e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f3e6:	0f ae 2b             	xrstor [ebx]
c001f3e9:	5a                   	pop    edx
c001f3ea:	5b                   	pop    ebx
c001f3eb:	c3                   	ret    

c001f3ec <avxInit>:
c001f3ec:	e8 47 03 00 00       	call   c001f738 <sseInit>
c001f3f1:	50                   	push   eax
c001f3f2:	51                   	push   ecx
c001f3f3:	0f 20 e0             	mov    eax,cr4
c001f3f6:	0d 00 00 04 00       	or     eax,0x40000
c001f3fb:	0f 22 e0             	mov    cr4,eax
c001f3fe:	31 c9                	xor    ecx,ecx
c001f400:	0f 01 d0             	xgetbv 
c001f403:	0d 07 00 00 00       	or     eax,0x7
c001f408:	0f 01 d1             	xsetbv 
c001f40b:	59                   	pop    ecx
c001f40c:	58                   	pop    eax
c001f40d:	c3                   	ret    

c001f40e <avxClose>:
c001f40e:	c3                   	ret    
c001f40f:	90                   	nop

c001f410 <isr0>:
c001f410:	fa                   	cli    
c001f411:	68 00 00 00 00       	push   0x0
c001f416:	68 00 00 00 00       	push   0x0
c001f41b:	e9 56 01 00 00       	jmp    c001f576 <int_common_stub>

c001f420 <isr1>:
c001f420:	fa                   	cli    
c001f421:	6a 00                	push   0x0
c001f423:	6a 01                	push   0x1
c001f425:	e9 4c 01 00 00       	jmp    c001f576 <int_common_stub>

c001f42a <isr2>:
c001f42a:	fa                   	cli    
c001f42b:	6a 00                	push   0x0
c001f42d:	6a 02                	push   0x2
c001f42f:	e9 42 01 00 00       	jmp    c001f576 <int_common_stub>

c001f434 <isr3>:
c001f434:	fa                   	cli    
c001f435:	6a 00                	push   0x0
c001f437:	6a 03                	push   0x3
c001f439:	e9 38 01 00 00       	jmp    c001f576 <int_common_stub>

c001f43e <isr4>:
c001f43e:	fa                   	cli    
c001f43f:	6a 00                	push   0x0
c001f441:	6a 04                	push   0x4
c001f443:	e9 2e 01 00 00       	jmp    c001f576 <int_common_stub>

c001f448 <isr5>:
c001f448:	fa                   	cli    
c001f449:	6a 00                	push   0x0
c001f44b:	6a 05                	push   0x5
c001f44d:	e9 24 01 00 00       	jmp    c001f576 <int_common_stub>

c001f452 <isr6>:
c001f452:	fa                   	cli    
c001f453:	6a 00                	push   0x0
c001f455:	6a 06                	push   0x6
c001f457:	e9 1a 01 00 00       	jmp    c001f576 <int_common_stub>

c001f45c <isr7>:
c001f45c:	fa                   	cli    
c001f45d:	6a 00                	push   0x0
c001f45f:	6a 07                	push   0x7
c001f461:	e9 10 01 00 00       	jmp    c001f576 <int_common_stub>

c001f466 <isr8>:
c001f466:	fa                   	cli    
c001f467:	6a 08                	push   0x8
c001f469:	e9 08 01 00 00       	jmp    c001f576 <int_common_stub>

c001f46e <isr9>:
c001f46e:	fa                   	cli    
c001f46f:	6a 00                	push   0x0
c001f471:	6a 09                	push   0x9
c001f473:	e9 fe 00 00 00       	jmp    c001f576 <int_common_stub>

c001f478 <isr10>:
c001f478:	fa                   	cli    
c001f479:	6a 0a                	push   0xa
c001f47b:	e9 f6 00 00 00       	jmp    c001f576 <int_common_stub>

c001f480 <isr11>:
c001f480:	fa                   	cli    
c001f481:	6a 0b                	push   0xb
c001f483:	e9 ee 00 00 00       	jmp    c001f576 <int_common_stub>

c001f488 <isr12>:
c001f488:	fa                   	cli    
c001f489:	6a 0c                	push   0xc
c001f48b:	e9 e6 00 00 00       	jmp    c001f576 <int_common_stub>

c001f490 <isr13>:
c001f490:	fa                   	cli    
c001f491:	6a 0d                	push   0xd
c001f493:	53                   	push   ebx
c001f494:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f498:	81 fb 66 f6 01 c0    	cmp    ebx,0xc001f666
c001f49e:	5b                   	pop    ebx
c001f49f:	0f 84 c3 01 00 00    	je     c001f668 <finishSignal2>
c001f4a5:	e9 cc 00 00 00       	jmp    c001f576 <int_common_stub>

c001f4aa <isr14>:
c001f4aa:	fa                   	cli    
c001f4ab:	6a 0e                	push   0xe
c001f4ad:	e9 c4 00 00 00       	jmp    c001f576 <int_common_stub>

c001f4b2 <isr15>:
c001f4b2:	fa                   	cli    
c001f4b3:	6a 00                	push   0x0
c001f4b5:	6a 0f                	push   0xf
c001f4b7:	e9 ba 00 00 00       	jmp    c001f576 <int_common_stub>

c001f4bc <isr16>:
c001f4bc:	fa                   	cli    
c001f4bd:	6a 00                	push   0x0
c001f4bf:	6a 10                	push   0x10
c001f4c1:	e9 b0 00 00 00       	jmp    c001f576 <int_common_stub>

c001f4c6 <isr17>:
c001f4c6:	fa                   	cli    
c001f4c7:	6a 00                	push   0x0
c001f4c9:	6a 11                	push   0x11
c001f4cb:	e9 a6 00 00 00       	jmp    c001f576 <int_common_stub>

c001f4d0 <isr18>:
c001f4d0:	fa                   	cli    
c001f4d1:	6a 00                	push   0x0
c001f4d3:	6a 12                	push   0x12
c001f4d5:	e9 9c 00 00 00       	jmp    c001f576 <int_common_stub>

c001f4da <irq3>:
c001f4da:	fa                   	cli    
c001f4db:	6a 00                	push   0x0
c001f4dd:	6a 23                	push   0x23
c001f4df:	e9 92 00 00 00       	jmp    c001f576 <int_common_stub>

c001f4e4 <irq4>:
c001f4e4:	fa                   	cli    
c001f4e5:	6a 00                	push   0x0
c001f4e7:	6a 24                	push   0x24
c001f4e9:	e9 88 00 00 00       	jmp    c001f576 <int_common_stub>

c001f4ee <irq5>:
c001f4ee:	fa                   	cli    
c001f4ef:	6a 00                	push   0x0
c001f4f1:	6a 25                	push   0x25
c001f4f3:	e9 7e 00 00 00       	jmp    c001f576 <int_common_stub>

c001f4f8 <irq6>:
c001f4f8:	fa                   	cli    
c001f4f9:	6a 00                	push   0x0
c001f4fb:	6a 26                	push   0x26
c001f4fd:	e9 74 00 00 00       	jmp    c001f576 <int_common_stub>

c001f502 <irq7>:
c001f502:	fa                   	cli    
c001f503:	6a 00                	push   0x0
c001f505:	6a 27                	push   0x27
c001f507:	e9 6a 00 00 00       	jmp    c001f576 <int_common_stub>

c001f50c <irq8>:
c001f50c:	fa                   	cli    
c001f50d:	6a 00                	push   0x0
c001f50f:	6a 28                	push   0x28
c001f511:	e9 60 00 00 00       	jmp    c001f576 <int_common_stub>

c001f516 <irq9>:
c001f516:	fa                   	cli    
c001f517:	6a 00                	push   0x0
c001f519:	6a 29                	push   0x29
c001f51b:	e9 56 00 00 00       	jmp    c001f576 <int_common_stub>

c001f520 <irq10>:
c001f520:	fa                   	cli    
c001f521:	6a 00                	push   0x0
c001f523:	6a 2a                	push   0x2a
c001f525:	e9 4c 00 00 00       	jmp    c001f576 <int_common_stub>

c001f52a <irq11>:
c001f52a:	fa                   	cli    
c001f52b:	6a 00                	push   0x0
c001f52d:	6a 2b                	push   0x2b
c001f52f:	e9 42 00 00 00       	jmp    c001f576 <int_common_stub>

c001f534 <irq12>:
c001f534:	fa                   	cli    
c001f535:	6a 00                	push   0x0
c001f537:	6a 2c                	push   0x2c
c001f539:	e9 38 00 00 00       	jmp    c001f576 <int_common_stub>

c001f53e <irq13>:
c001f53e:	fa                   	cli    
c001f53f:	6a 00                	push   0x0
c001f541:	6a 2d                	push   0x2d
c001f543:	e9 2e 00 00 00       	jmp    c001f576 <int_common_stub>

c001f548 <irq14>:
c001f548:	fa                   	cli    
c001f549:	6a 00                	push   0x0
c001f54b:	6a 2e                	push   0x2e
c001f54d:	e9 24 00 00 00       	jmp    c001f576 <int_common_stub>

c001f552 <irq15>:
c001f552:	fa                   	cli    
c001f553:	6a 00                	push   0x0
c001f555:	6a 2f                	push   0x2f
c001f557:	e9 1a 00 00 00       	jmp    c001f576 <int_common_stub>

c001f55c <irq1>:
c001f55c:	fa                   	cli    
c001f55d:	6a 00                	push   0x0
c001f55f:	6a 21                	push   0x21
c001f561:	eb 13                	jmp    c001f576 <int_common_stub>

c001f563 <irq2>:
c001f563:	fa                   	cli    
c001f564:	6a 00                	push   0x0
c001f566:	6a 22                	push   0x22
c001f568:	eb 0c                	jmp    c001f576 <int_common_stub>

c001f56a <isr96>:
c001f56a:	6a 00                	push   0x0
c001f56c:	6a 60                	push   0x60
c001f56e:	fb                   	sti    
c001f56f:	eb 37                	jmp    c001f5a8 <syscall_common_stub>

c001f571 <irq0>:
c001f571:	fa                   	cli    
c001f572:	6a 00                	push   0x0
c001f574:	6a 20                	push   0x20

c001f576 <int_common_stub>:
c001f576:	60                   	pusha  
c001f577:	1e                   	push   ds
c001f578:	06                   	push   es
c001f579:	0f a0                	push   fs
c001f57b:	0f a8                	push   gs
c001f57d:	66 b8 10 00          	mov    ax,0x10
c001f581:	66 8e d8             	mov    ds,ax
c001f584:	66 8e c0             	mov    es,ax
c001f587:	66 8e e0             	mov    fs,ax
c001f58a:	66 8e e8             	mov    gs,ax
c001f58d:	54                   	push   esp
c001f58e:	fc                   	cld    
c001f58f:	e8 68 e8 fe ff       	call   c000ddfc <int_handler>
c001f594:	81 c4 04 00 00 00    	add    esp,0x4
c001f59a:	0f a9                	pop    gs
c001f59c:	0f a1                	pop    fs
c001f59e:	07                   	pop    es
c001f59f:	1f                   	pop    ds
c001f5a0:	61                   	popa   
c001f5a1:	81 c4 08 00 00 00    	add    esp,0x8
c001f5a7:	cf                   	iret   

c001f5a8 <syscall_common_stub>:
c001f5a8:	60                   	pusha  
c001f5a9:	1e                   	push   ds
c001f5aa:	06                   	push   es
c001f5ab:	0f a0                	push   fs
c001f5ad:	0f a8                	push   gs
c001f5af:	66 b8 10 00          	mov    ax,0x10
c001f5b3:	66 8e d8             	mov    ds,ax
c001f5b6:	66 8e c0             	mov    es,ax
c001f5b9:	66 8e e0             	mov    fs,ax
c001f5bc:	66 8e e8             	mov    gs,ax
c001f5bf:	54                   	push   esp
c001f5c0:	fc                   	cld    
c001f5c1:	e8 36 e8 fe ff       	call   c000ddfc <int_handler>
c001f5c6:	81 c4 04 00 00 00    	add    esp,0x4
c001f5cc:	0f a9                	pop    gs
c001f5ce:	0f a1                	pop    fs
c001f5d0:	07                   	pop    es
c001f5d1:	1f                   	pop    ds
c001f5d2:	e8 a4 09 ff ff       	call   c000ff7b <KiCheckSignalZ>
c001f5d7:	3d 00 00 00 00       	cmp    eax,0x0
c001f5dc:	0f 84 c0 00 00 00    	je     c001f6a2 <skipSignals>
c001f5e2:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001f5e7:	61                   	popa   
c001f5e8:	53                   	push   ebx
c001f5e9:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001f5ef:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001f5f2:	5b                   	pop    ebx
c001f5f3:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001f5f8:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001f5fb:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001f5fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001f601:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001f604:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001f607:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001f60a:	81 c4 08 00 00 00    	add    esp,0x8
c001f610:	5e                   	pop    esi
c001f611:	5b                   	pop    ebx
c001f612:	59                   	pop    ecx
c001f613:	5a                   	pop    edx
c001f614:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001f617:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001f61a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001f61d:	52                   	push   edx
c001f61e:	51                   	push   ecx
c001f61f:	53                   	push   ebx
c001f620:	56                   	push   esi
c001f621:	81 ec 08 00 00 00    	sub    esp,0x8
c001f627:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001f62a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001f62d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001f630:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001f633:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001f636:	60                   	pusha  
c001f637:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001f63d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001f640:	89 e3                	mov    ebx,esp
c001f642:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001f645:	52                   	push   edx
c001f646:	68 66 f6 01 c0       	push   0xc001f666
c001f64b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001f64e:	89 dc                	mov    esp,ebx
c001f650:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001f653:	68 23 00 00 00       	push   0x23
c001f658:	51                   	push   ecx
c001f659:	68 02 02 00 00       	push   0x202
c001f65e:	68 1b 00 00 00       	push   0x1b
c001f663:	ff 36                	push   DWORD PTR [esi]
c001f665:	cf                   	iret   

c001f666 <finishSignal>:
c001f666:	cd 0f                	int    0xf

c001f668 <finishSignal2>:
c001f668:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001f66e:	e8 85 09 ff ff       	call   c000fff8 <KiFinishSignalZ>
c001f673:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001f679:	68 23 00 00 00       	push   0x23
c001f67e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001f681:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001f684:	68 1b 00 00 00       	push   0x1b
c001f689:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001f68c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001f68f:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001f692:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001f695:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001f698:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001f69b:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001f69e:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001f6a1:	cf                   	iret   

c001f6a2 <skipSignals>:
c001f6a2:	61                   	popa   
c001f6a3:	81 c4 08 00 00 00    	add    esp,0x8
c001f6a9:	cf                   	iret   
c001f6aa:	90                   	nop
c001f6ab:	90                   	nop

c001f6ac <irq16>:
c001f6ac:	fa                   	cli    
c001f6ad:	6a 00                	push   0x0
c001f6af:	6a 30                	push   0x30
c001f6b1:	e9 c0 fe ff ff       	jmp    c001f576 <int_common_stub>

c001f6b6 <irq17>:
c001f6b6:	fa                   	cli    
c001f6b7:	6a 00                	push   0x0
c001f6b9:	6a 31                	push   0x31
c001f6bb:	e9 b6 fe ff ff       	jmp    c001f576 <int_common_stub>

c001f6c0 <irq18>:
c001f6c0:	fa                   	cli    
c001f6c1:	6a 00                	push   0x0
c001f6c3:	6a 32                	push   0x32
c001f6c5:	e9 ac fe ff ff       	jmp    c001f576 <int_common_stub>

c001f6ca <irq19>:
c001f6ca:	fa                   	cli    
c001f6cb:	6a 00                	push   0x0
c001f6cd:	6a 33                	push   0x33
c001f6cf:	e9 a2 fe ff ff       	jmp    c001f576 <int_common_stub>

c001f6d4 <irq20>:
c001f6d4:	fa                   	cli    
c001f6d5:	6a 00                	push   0x0
c001f6d7:	6a 34                	push   0x34
c001f6d9:	e9 98 fe ff ff       	jmp    c001f576 <int_common_stub>

c001f6de <irq21>:
c001f6de:	fa                   	cli    
c001f6df:	6a 00                	push   0x0
c001f6e1:	6a 35                	push   0x35
c001f6e3:	e9 8e fe ff ff       	jmp    c001f576 <int_common_stub>

c001f6e8 <irq22>:
c001f6e8:	fa                   	cli    
c001f6e9:	6a 00                	push   0x0
c001f6eb:	6a 36                	push   0x36
c001f6ed:	e9 84 fe ff ff       	jmp    c001f576 <int_common_stub>

c001f6f2 <irq23>:
c001f6f2:	fa                   	cli    
c001f6f3:	6a 00                	push   0x0
c001f6f5:	6a 37                	push   0x37
c001f6f7:	e9 7a fe ff ff       	jmp    c001f576 <int_common_stub>
c001f6fc:	66 90                	xchg   ax,ax
c001f6fe:	66 90                	xchg   ax,ax

c001f700 <i386GetRDRAND>:
c001f700:	b9 64 00 00 00       	mov    ecx,0x64

c001f705 <retry>:
c001f705:	0f c7 f0             	rdrand eax
c001f708:	72 05                	jb     c001f70f <retry.done>
c001f70a:	e2 f9                	loop   c001f705 <retry>

c001f70c <retry.fail>:
c001f70c:	31 c0                	xor    eax,eax
c001f70e:	c3                   	ret    

c001f70f <retry.done>:
c001f70f:	c3                   	ret    

c001f710 <sseDetect>:
c001f710:	b8 01 00 00 00       	mov    eax,0x1
c001f715:	0f a2                	cpuid  
c001f717:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001f71d:	74 06                	je     c001f725 <sseDetect.noSSE>
c001f71f:	b8 01 00 00 00       	mov    eax,0x1
c001f724:	c3                   	ret    

c001f725 <sseDetect.noSSE>:
c001f725:	31 c0                	xor    eax,eax
c001f727:	c3                   	ret    

c001f728 <sseSave>:
c001f728:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f72c:	0f ae 00             	fxsave [eax]
c001f72f:	c3                   	ret    

c001f730 <sseLoad>:
c001f730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f734:	0f ae 08             	fxrstor [eax]
c001f737:	c3                   	ret    

c001f738 <sseInit>:
c001f738:	e8 48 00 00 00       	call   c001f785 <x87Init>
c001f73d:	0f 20 e0             	mov    eax,cr4
c001f740:	66 0d 00 06          	or     ax,0x600
c001f744:	0f 22 e0             	mov    cr4,eax
c001f747:	c3                   	ret    

c001f748 <sseClose>:
c001f748:	c3                   	ret    
c001f749:	66 90                	xchg   ax,ax
c001f74b:	66 90                	xchg   ax,ax
c001f74d:	66 90                	xchg   ax,ax
c001f74f:	90                   	nop

c001f750 <value_37F>:
c001f750:	7f 03                	jg     c001f755 <value_37A+0x1>

c001f752 <value_37E>:
c001f752:	7e 03                	jle    c001f757 <x87Detect+0x1>

c001f754 <value_37A>:
c001f754:	7a 03                	jp     c001f759 <x87Detect+0x3>

c001f756 <x87Detect>:
c001f756:	53                   	push   ebx
c001f757:	51                   	push   ecx
c001f758:	52                   	push   edx
c001f759:	b8 01 00 00 00       	mov    eax,0x1
c001f75e:	0f a2                	cpuid  
c001f760:	f7 c2 01 00 00 00    	test   edx,0x1
c001f766:	74 06                	je     c001f76e <x87Detect.nox87>
c001f768:	b8 01 00 00 00       	mov    eax,0x1
c001f76d:	c3                   	ret    

c001f76e <x87Detect.nox87>:
c001f76e:	b8 00 00 00 00       	mov    eax,0x0
c001f773:	5a                   	pop    edx
c001f774:	59                   	pop    ecx
c001f775:	5b                   	pop    ebx
c001f776:	c3                   	ret    

c001f777 <x87Save>:
c001f777:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f77b:	dd 30                	fnsave [eax]
c001f77d:	c3                   	ret    

c001f77e <x87Load>:
c001f77e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f782:	dd 20                	frstor [eax]
c001f784:	c3                   	ret    

c001f785 <x87Init>:
c001f785:	0f 20 c0             	mov    eax,cr0
c001f788:	66 25 fb ff          	and    ax,0xfffb
c001f78c:	66 0d 22 00          	or     ax,0x22
c001f790:	0f 22 c0             	mov    cr0,eax
c001f793:	db e3                	fninit 
c001f795:	0f 06                	clts   
c001f797:	d9 2d 54 f7 01 c0    	fldcw  WORD PTR ds:0xc001f754
c001f79d:	c3                   	ret    

c001f79e <x87Close>:
c001f79e:	c3                   	ret    
c001f79f:	90                   	nop

c001f7a0 <__do_global_ctors_aux>:
c001f7a0:	a1 54 07 02 c0       	mov    eax,ds:0xc0020754
c001f7a5:	83 f8 ff             	cmp    eax,0xffffffff
c001f7a8:	74 1a                	je     c001f7c4 <__do_global_ctors_aux+0x24>
c001f7aa:	55                   	push   ebp
c001f7ab:	89 e5                	mov    ebp,esp
c001f7ad:	53                   	push   ebx
c001f7ae:	52                   	push   edx
c001f7af:	bb 54 07 02 c0       	mov    ebx,0xc0020754
c001f7b4:	ff d0                	call   eax
c001f7b6:	83 eb 04             	sub    ebx,0x4
c001f7b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001f7bb:	83 f8 ff             	cmp    eax,0xffffffff
c001f7be:	75 f4                	jne    c001f7b4 <__do_global_ctors_aux+0x14>
c001f7c0:	58                   	pop    eax
c001f7c1:	5b                   	pop    ebx
c001f7c2:	5d                   	pop    ebp
c001f7c3:	c3                   	ret    
c001f7c4:	c3                   	ret    
c001f7c5:	66 90                	xchg   ax,ax
c001f7c7:	90                   	nop

c001f7c8 <__divdi3>:
c001f7c8:	55                   	push   ebp
c001f7c9:	57                   	push   edi
c001f7ca:	56                   	push   esi
c001f7cb:	53                   	push   ebx
c001f7cc:	83 ec 1c             	sub    esp,0x1c
c001f7cf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001f7d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f7d7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f7da:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f7de:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001f7e2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f7e6:	85 db                	test   ebx,ebx
c001f7e8:	0f 88 8e 00 00 00    	js     c001f87c <__divdi3+0xb4>
c001f7ee:	89 dd                	mov    ebp,ebx
c001f7f0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001f7f8:	89 d3                	mov    ebx,edx
c001f7fa:	85 d2                	test   edx,edx
c001f7fc:	79 0d                	jns    c001f80b <__divdi3+0x43>
c001f7fe:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001f802:	f7 d8                	neg    eax
c001f804:	83 d2 00             	adc    edx,0x0
c001f807:	f7 da                	neg    edx
c001f809:	89 d3                	mov    ebx,edx
c001f80b:	89 c7                	mov    edi,eax
c001f80d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f810:	85 db                	test   ebx,ebx
c001f812:	75 48                	jne    c001f85c <__divdi3+0x94>
c001f814:	39 ef                	cmp    edi,ebp
c001f816:	76 24                	jbe    c001f83c <__divdi3+0x74>
c001f818:	89 ea                	mov    edx,ebp
c001f81a:	f7 f7                	div    edi
c001f81c:	89 c1                	mov    ecx,eax
c001f81e:	31 f6                	xor    esi,esi
c001f820:	89 c8                	mov    eax,ecx
c001f822:	89 f2                	mov    edx,esi
c001f824:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f828:	85 c9                	test   ecx,ecx
c001f82a:	74 07                	je     c001f833 <__divdi3+0x6b>
c001f82c:	f7 d8                	neg    eax
c001f82e:	83 d2 00             	adc    edx,0x0
c001f831:	f7 da                	neg    edx
c001f833:	83 c4 1c             	add    esp,0x1c
c001f836:	5b                   	pop    ebx
c001f837:	5e                   	pop    esi
c001f838:	5f                   	pop    edi
c001f839:	5d                   	pop    ebp
c001f83a:	c3                   	ret    
c001f83b:	90                   	nop
c001f83c:	85 ff                	test   edi,edi
c001f83e:	75 0b                	jne    c001f84b <__divdi3+0x83>
c001f840:	b8 01 00 00 00       	mov    eax,0x1
c001f845:	31 d2                	xor    edx,edx
c001f847:	f7 f3                	div    ebx
c001f849:	89 c7                	mov    edi,eax
c001f84b:	31 d2                	xor    edx,edx
c001f84d:	89 e8                	mov    eax,ebp
c001f84f:	f7 f7                	div    edi
c001f851:	89 c6                	mov    esi,eax
c001f853:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001f856:	f7 f7                	div    edi
c001f858:	89 c1                	mov    ecx,eax
c001f85a:	eb c4                	jmp    c001f820 <__divdi3+0x58>
c001f85c:	39 eb                	cmp    ebx,ebp
c001f85e:	77 3c                	ja     c001f89c <__divdi3+0xd4>
c001f860:	0f bd f3             	bsr    esi,ebx
c001f863:	83 f6 1f             	xor    esi,0x1f
c001f866:	75 40                	jne    c001f8a8 <__divdi3+0xe0>
c001f868:	39 eb                	cmp    ebx,ebp
c001f86a:	72 09                	jb     c001f875 <__divdi3+0xad>
c001f86c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001f86f:	0f 87 97 00 00 00    	ja     c001f90c <__divdi3+0x144>
c001f875:	b9 01 00 00 00       	mov    ecx,0x1
c001f87a:	eb a4                	jmp    c001f820 <__divdi3+0x58>
c001f87c:	f7 d9                	neg    ecx
c001f87e:	83 d3 00             	adc    ebx,0x0
c001f881:	f7 db                	neg    ebx
c001f883:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001f886:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001f88a:	89 dd                	mov    ebp,ebx
c001f88c:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001f894:	e9 5f ff ff ff       	jmp    c001f7f8 <__divdi3+0x30>
c001f899:	8d 76 00             	lea    esi,[esi+0x0]
c001f89c:	31 f6                	xor    esi,esi
c001f89e:	31 c9                	xor    ecx,ecx
c001f8a0:	e9 7b ff ff ff       	jmp    c001f820 <__divdi3+0x58>
c001f8a5:	8d 76 00             	lea    esi,[esi+0x0]
c001f8a8:	b8 20 00 00 00       	mov    eax,0x20
c001f8ad:	29 f0                	sub    eax,esi
c001f8af:	89 f1                	mov    ecx,esi
c001f8b1:	d3 e3                	shl    ebx,cl
c001f8b3:	89 fa                	mov    edx,edi
c001f8b5:	88 c1                	mov    cl,al
c001f8b7:	d3 ea                	shr    edx,cl
c001f8b9:	09 da                	or     edx,ebx
c001f8bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f8bf:	89 f1                	mov    ecx,esi
c001f8c1:	d3 e7                	shl    edi,cl
c001f8c3:	89 eb                	mov    ebx,ebp
c001f8c5:	88 c1                	mov    cl,al
c001f8c7:	d3 eb                	shr    ebx,cl
c001f8c9:	89 f1                	mov    ecx,esi
c001f8cb:	d3 e5                	shl    ebp,cl
c001f8cd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001f8d0:	88 c1                	mov    cl,al
c001f8d2:	d3 ea                	shr    edx,cl
c001f8d4:	09 d5                	or     ebp,edx
c001f8d6:	89 e8                	mov    eax,ebp
c001f8d8:	89 da                	mov    edx,ebx
c001f8da:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001f8de:	89 d3                	mov    ebx,edx
c001f8e0:	89 c5                	mov    ebp,eax
c001f8e2:	f7 e7                	mul    edi
c001f8e4:	39 d3                	cmp    ebx,edx
c001f8e6:	72 18                	jb     c001f900 <__divdi3+0x138>
c001f8e8:	74 0a                	je     c001f8f4 <__divdi3+0x12c>
c001f8ea:	89 e9                	mov    ecx,ebp
c001f8ec:	31 f6                	xor    esi,esi
c001f8ee:	e9 2d ff ff ff       	jmp    c001f820 <__divdi3+0x58>
c001f8f3:	90                   	nop
c001f8f4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f8f7:	89 f1                	mov    ecx,esi
c001f8f9:	d3 e7                	shl    edi,cl
c001f8fb:	39 c7                	cmp    edi,eax
c001f8fd:	73 eb                	jae    c001f8ea <__divdi3+0x122>
c001f8ff:	90                   	nop
c001f900:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f903:	31 f6                	xor    esi,esi
c001f905:	e9 16 ff ff ff       	jmp    c001f820 <__divdi3+0x58>
c001f90a:	66 90                	xchg   ax,ax
c001f90c:	31 c9                	xor    ecx,ecx
c001f90e:	e9 0d ff ff ff       	jmp    c001f820 <__divdi3+0x58>
c001f913:	90                   	nop

c001f914 <__moddi3>:
c001f914:	55                   	push   ebp
c001f915:	57                   	push   edi
c001f916:	56                   	push   esi
c001f917:	53                   	push   ebx
c001f918:	83 ec 2c             	sub    esp,0x2c
c001f91b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f91f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f923:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f927:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f92b:	85 db                	test   ebx,ebx
c001f92d:	0f 88 85 00 00 00    	js     c001f9b8 <__moddi3+0xa4>
c001f933:	89 de                	mov    esi,ebx
c001f935:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f93d:	89 d7                	mov    edi,edx
c001f93f:	85 d2                	test   edx,edx
c001f941:	79 09                	jns    c001f94c <__moddi3+0x38>
c001f943:	f7 d8                	neg    eax
c001f945:	83 d2 00             	adc    edx,0x0
c001f948:	f7 da                	neg    edx
c001f94a:	89 d7                	mov    edi,edx
c001f94c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f950:	89 cd                	mov    ebp,ecx
c001f952:	85 ff                	test   edi,edi
c001f954:	75 52                	jne    c001f9a8 <__moddi3+0x94>
c001f956:	89 c3                	mov    ebx,eax
c001f958:	39 f0                	cmp    eax,esi
c001f95a:	76 24                	jbe    c001f980 <__moddi3+0x6c>
c001f95c:	89 c8                	mov    eax,ecx
c001f95e:	89 f2                	mov    edx,esi
c001f960:	f7 f3                	div    ebx
c001f962:	89 d6                	mov    esi,edx
c001f964:	89 f0                	mov    eax,esi
c001f966:	31 d2                	xor    edx,edx
c001f968:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f96c:	85 c9                	test   ecx,ecx
c001f96e:	74 07                	je     c001f977 <__moddi3+0x63>
c001f970:	f7 d8                	neg    eax
c001f972:	83 d2 00             	adc    edx,0x0
c001f975:	f7 da                	neg    edx
c001f977:	83 c4 2c             	add    esp,0x2c
c001f97a:	5b                   	pop    ebx
c001f97b:	5e                   	pop    esi
c001f97c:	5f                   	pop    edi
c001f97d:	5d                   	pop    ebp
c001f97e:	c3                   	ret    
c001f97f:	90                   	nop
c001f980:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f984:	85 db                	test   ebx,ebx
c001f986:	75 0d                	jne    c001f995 <__moddi3+0x81>
c001f988:	b8 01 00 00 00       	mov    eax,0x1
c001f98d:	31 d2                	xor    edx,edx
c001f98f:	f7 f7                	div    edi
c001f991:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f995:	89 f0                	mov    eax,esi
c001f997:	31 d2                	xor    edx,edx
c001f999:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f99d:	f7 f7                	div    edi
c001f99f:	89 e8                	mov    eax,ebp
c001f9a1:	f7 f7                	div    edi
c001f9a3:	89 d6                	mov    esi,edx
c001f9a5:	eb bd                	jmp    c001f964 <__moddi3+0x50>
c001f9a7:	90                   	nop
c001f9a8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f9ac:	39 f7                	cmp    edi,esi
c001f9ae:	76 20                	jbe    c001f9d0 <__moddi3+0xbc>
c001f9b0:	89 c8                	mov    eax,ecx
c001f9b2:	89 f2                	mov    edx,esi
c001f9b4:	eb b2                	jmp    c001f968 <__moddi3+0x54>
c001f9b6:	66 90                	xchg   ax,ax
c001f9b8:	f7 d9                	neg    ecx
c001f9ba:	83 d3 00             	adc    ebx,0x0
c001f9bd:	f7 db                	neg    ebx
c001f9bf:	89 de                	mov    esi,ebx
c001f9c1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f9c9:	e9 6f ff ff ff       	jmp    c001f93d <__moddi3+0x29>
c001f9ce:	66 90                	xchg   ax,ax
c001f9d0:	0f bd c7             	bsr    eax,edi
c001f9d3:	83 f0 1f             	xor    eax,0x1f
c001f9d6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f9da:	75 24                	jne    c001fa00 <__moddi3+0xec>
c001f9dc:	39 f7                	cmp    edi,esi
c001f9de:	72 06                	jb     c001f9e6 <__moddi3+0xd2>
c001f9e0:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f9e4:	77 0c                	ja     c001f9f2 <__moddi3+0xde>
c001f9e6:	89 e9                	mov    ecx,ebp
c001f9e8:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f9ec:	19 fe                	sbb    esi,edi
c001f9ee:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f9f2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f9f6:	89 f2                	mov    edx,esi
c001f9f8:	e9 6b ff ff ff       	jmp    c001f968 <__moddi3+0x54>
c001f9fd:	8d 76 00             	lea    esi,[esi+0x0]
c001fa00:	b8 20 00 00 00       	mov    eax,0x20
c001fa05:	89 c2                	mov    edx,eax
c001fa07:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001fa0b:	29 da                	sub    edx,ebx
c001fa0d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fa11:	88 d9                	mov    cl,bl
c001fa13:	d3 e7                	shl    edi,cl
c001fa15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fa19:	88 d1                	mov    cl,dl
c001fa1b:	d3 e8                	shr    eax,cl
c001fa1d:	09 c7                	or     edi,eax
c001fa1f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001fa23:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fa27:	89 d8                	mov    eax,ebx
c001fa29:	88 d9                	mov    cl,bl
c001fa2b:	d3 e7                	shl    edi,cl
c001fa2d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fa31:	89 f3                	mov    ebx,esi
c001fa33:	88 d1                	mov    cl,dl
c001fa35:	d3 eb                	shr    ebx,cl
c001fa37:	89 c7                	mov    edi,eax
c001fa39:	88 c1                	mov    cl,al
c001fa3b:	d3 e6                	shl    esi,cl
c001fa3d:	89 e8                	mov    eax,ebp
c001fa3f:	88 d1                	mov    cl,dl
c001fa41:	d3 e8                	shr    eax,cl
c001fa43:	09 f0                	or     eax,esi
c001fa45:	89 f9                	mov    ecx,edi
c001fa47:	d3 e5                	shl    ebp,cl
c001fa49:	89 da                	mov    edx,ebx
c001fa4b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001fa4f:	89 d3                	mov    ebx,edx
c001fa51:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fa55:	89 c6                	mov    esi,eax
c001fa57:	89 d1                	mov    ecx,edx
c001fa59:	39 d3                	cmp    ebx,edx
c001fa5b:	72 27                	jb     c001fa84 <__moddi3+0x170>
c001fa5d:	74 21                	je     c001fa80 <__moddi3+0x16c>
c001fa5f:	29 f5                	sub    ebp,esi
c001fa61:	19 cb                	sbb    ebx,ecx
c001fa63:	89 de                	mov    esi,ebx
c001fa65:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001fa69:	d3 e6                	shl    esi,cl
c001fa6b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa6f:	89 f9                	mov    ecx,edi
c001fa71:	d3 ed                	shr    ebp,cl
c001fa73:	09 ee                	or     esi,ebp
c001fa75:	89 f0                	mov    eax,esi
c001fa77:	d3 eb                	shr    ebx,cl
c001fa79:	89 da                	mov    edx,ebx
c001fa7b:	e9 e8 fe ff ff       	jmp    c001f968 <__moddi3+0x54>
c001fa80:	39 c5                	cmp    ebp,eax
c001fa82:	73 db                	jae    c001fa5f <__moddi3+0x14b>
c001fa84:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fa88:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001fa8c:	89 d1                	mov    ecx,edx
c001fa8e:	89 c6                	mov    esi,eax
c001fa90:	eb cd                	jmp    c001fa5f <__moddi3+0x14b>
c001fa92:	66 90                	xchg   ax,ax

c001fa94 <__udivdi3>:
c001fa94:	55                   	push   ebp
c001fa95:	57                   	push   edi
c001fa96:	56                   	push   esi
c001fa97:	53                   	push   ebx
c001fa98:	83 ec 1c             	sub    esp,0x1c
c001fa9b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001fa9f:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001faa3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001faa7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001faab:	85 d2                	test   edx,edx
c001faad:	75 41                	jne    c001faf0 <__udivdi3+0x5c>
c001faaf:	39 f7                	cmp    edi,esi
c001fab1:	76 15                	jbe    c001fac8 <__udivdi3+0x34>
c001fab3:	89 e8                	mov    eax,ebp
c001fab5:	89 f2                	mov    edx,esi
c001fab7:	f7 f7                	div    edi
c001fab9:	31 db                	xor    ebx,ebx
c001fabb:	89 da                	mov    edx,ebx
c001fabd:	83 c4 1c             	add    esp,0x1c
c001fac0:	5b                   	pop    ebx
c001fac1:	5e                   	pop    esi
c001fac2:	5f                   	pop    edi
c001fac3:	5d                   	pop    ebp
c001fac4:	c3                   	ret    
c001fac5:	8d 76 00             	lea    esi,[esi+0x0]
c001fac8:	89 f9                	mov    ecx,edi
c001faca:	85 ff                	test   edi,edi
c001facc:	75 0b                	jne    c001fad9 <__udivdi3+0x45>
c001face:	b8 01 00 00 00       	mov    eax,0x1
c001fad3:	31 d2                	xor    edx,edx
c001fad5:	f7 f7                	div    edi
c001fad7:	89 c1                	mov    ecx,eax
c001fad9:	31 d2                	xor    edx,edx
c001fadb:	89 f0                	mov    eax,esi
c001fadd:	f7 f1                	div    ecx
c001fadf:	89 c3                	mov    ebx,eax
c001fae1:	89 e8                	mov    eax,ebp
c001fae3:	f7 f1                	div    ecx
c001fae5:	89 da                	mov    edx,ebx
c001fae7:	83 c4 1c             	add    esp,0x1c
c001faea:	5b                   	pop    ebx
c001faeb:	5e                   	pop    esi
c001faec:	5f                   	pop    edi
c001faed:	5d                   	pop    ebp
c001faee:	c3                   	ret    
c001faef:	90                   	nop
c001faf0:	39 f2                	cmp    edx,esi
c001faf2:	77 1c                	ja     c001fb10 <__udivdi3+0x7c>
c001faf4:	0f bd da             	bsr    ebx,edx
c001faf7:	83 f3 1f             	xor    ebx,0x1f
c001fafa:	75 24                	jne    c001fb20 <__udivdi3+0x8c>
c001fafc:	39 f2                	cmp    edx,esi
c001fafe:	72 08                	jb     c001fb08 <__udivdi3+0x74>
c001fb00:	39 ef                	cmp    edi,ebp
c001fb02:	0f 87 84 00 00 00    	ja     c001fb8c <__udivdi3+0xf8>
c001fb08:	b8 01 00 00 00       	mov    eax,0x1
c001fb0d:	eb ac                	jmp    c001fabb <__udivdi3+0x27>
c001fb0f:	90                   	nop
c001fb10:	31 db                	xor    ebx,ebx
c001fb12:	31 c0                	xor    eax,eax
c001fb14:	89 da                	mov    edx,ebx
c001fb16:	83 c4 1c             	add    esp,0x1c
c001fb19:	5b                   	pop    ebx
c001fb1a:	5e                   	pop    esi
c001fb1b:	5f                   	pop    edi
c001fb1c:	5d                   	pop    ebp
c001fb1d:	c3                   	ret    
c001fb1e:	66 90                	xchg   ax,ax
c001fb20:	b8 20 00 00 00       	mov    eax,0x20
c001fb25:	29 d8                	sub    eax,ebx
c001fb27:	88 d9                	mov    cl,bl
c001fb29:	d3 e2                	shl    edx,cl
c001fb2b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001fb2f:	89 fa                	mov    edx,edi
c001fb31:	88 c1                	mov    cl,al
c001fb33:	d3 ea                	shr    edx,cl
c001fb35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fb39:	09 d1                	or     ecx,edx
c001fb3b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fb3f:	88 d9                	mov    cl,bl
c001fb41:	d3 e7                	shl    edi,cl
c001fb43:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fb47:	89 f7                	mov    edi,esi
c001fb49:	88 c1                	mov    cl,al
c001fb4b:	d3 ef                	shr    edi,cl
c001fb4d:	88 d9                	mov    cl,bl
c001fb4f:	d3 e6                	shl    esi,cl
c001fb51:	89 ea                	mov    edx,ebp
c001fb53:	88 c1                	mov    cl,al
c001fb55:	d3 ea                	shr    edx,cl
c001fb57:	09 d6                	or     esi,edx
c001fb59:	89 f0                	mov    eax,esi
c001fb5b:	89 fa                	mov    edx,edi
c001fb5d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fb61:	89 d7                	mov    edi,edx
c001fb63:	89 c6                	mov    esi,eax
c001fb65:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fb69:	39 d7                	cmp    edi,edx
c001fb6b:	72 13                	jb     c001fb80 <__udivdi3+0xec>
c001fb6d:	74 09                	je     c001fb78 <__udivdi3+0xe4>
c001fb6f:	89 f0                	mov    eax,esi
c001fb71:	31 db                	xor    ebx,ebx
c001fb73:	e9 43 ff ff ff       	jmp    c001fabb <__udivdi3+0x27>
c001fb78:	88 d9                	mov    cl,bl
c001fb7a:	d3 e5                	shl    ebp,cl
c001fb7c:	39 c5                	cmp    ebp,eax
c001fb7e:	73 ef                	jae    c001fb6f <__udivdi3+0xdb>
c001fb80:	8d 46 ff             	lea    eax,[esi-0x1]
c001fb83:	31 db                	xor    ebx,ebx
c001fb85:	e9 31 ff ff ff       	jmp    c001fabb <__udivdi3+0x27>
c001fb8a:	66 90                	xchg   ax,ax
c001fb8c:	31 c0                	xor    eax,eax
c001fb8e:	e9 28 ff ff ff       	jmp    c001fabb <__udivdi3+0x27>
c001fb93:	90                   	nop

c001fb94 <__umoddi3>:
c001fb94:	55                   	push   ebp
c001fb95:	57                   	push   edi
c001fb96:	56                   	push   esi
c001fb97:	53                   	push   ebx
c001fb98:	83 ec 1c             	sub    esp,0x1c
c001fb9b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001fb9f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fba3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001fba7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001fbab:	89 da                	mov    edx,ebx
c001fbad:	85 c0                	test   eax,eax
c001fbaf:	75 37                	jne    c001fbe8 <__umoddi3+0x54>
c001fbb1:	39 df                	cmp    edi,ebx
c001fbb3:	76 13                	jbe    c001fbc8 <__umoddi3+0x34>
c001fbb5:	89 f0                	mov    eax,esi
c001fbb7:	f7 f7                	div    edi
c001fbb9:	89 d0                	mov    eax,edx
c001fbbb:	31 d2                	xor    edx,edx
c001fbbd:	83 c4 1c             	add    esp,0x1c
c001fbc0:	5b                   	pop    ebx
c001fbc1:	5e                   	pop    esi
c001fbc2:	5f                   	pop    edi
c001fbc3:	5d                   	pop    ebp
c001fbc4:	c3                   	ret    
c001fbc5:	8d 76 00             	lea    esi,[esi+0x0]
c001fbc8:	89 fd                	mov    ebp,edi
c001fbca:	85 ff                	test   edi,edi
c001fbcc:	75 0b                	jne    c001fbd9 <__umoddi3+0x45>
c001fbce:	b8 01 00 00 00       	mov    eax,0x1
c001fbd3:	31 d2                	xor    edx,edx
c001fbd5:	f7 f7                	div    edi
c001fbd7:	89 c5                	mov    ebp,eax
c001fbd9:	89 d8                	mov    eax,ebx
c001fbdb:	31 d2                	xor    edx,edx
c001fbdd:	f7 f5                	div    ebp
c001fbdf:	89 f0                	mov    eax,esi
c001fbe1:	f7 f5                	div    ebp
c001fbe3:	89 d0                	mov    eax,edx
c001fbe5:	eb d4                	jmp    c001fbbb <__umoddi3+0x27>
c001fbe7:	90                   	nop
c001fbe8:	89 f1                	mov    ecx,esi
c001fbea:	39 d8                	cmp    eax,ebx
c001fbec:	76 0a                	jbe    c001fbf8 <__umoddi3+0x64>
c001fbee:	89 f0                	mov    eax,esi
c001fbf0:	83 c4 1c             	add    esp,0x1c
c001fbf3:	5b                   	pop    ebx
c001fbf4:	5e                   	pop    esi
c001fbf5:	5f                   	pop    edi
c001fbf6:	5d                   	pop    ebp
c001fbf7:	c3                   	ret    
c001fbf8:	0f bd e8             	bsr    ebp,eax
c001fbfb:	83 f5 1f             	xor    ebp,0x1f
c001fbfe:	75 1c                	jne    c001fc1c <__umoddi3+0x88>
c001fc00:	39 d8                	cmp    eax,ebx
c001fc02:	72 04                	jb     c001fc08 <__umoddi3+0x74>
c001fc04:	39 f7                	cmp    edi,esi
c001fc06:	77 08                	ja     c001fc10 <__umoddi3+0x7c>
c001fc08:	89 da                	mov    edx,ebx
c001fc0a:	29 fe                	sub    esi,edi
c001fc0c:	19 c2                	sbb    edx,eax
c001fc0e:	89 f1                	mov    ecx,esi
c001fc10:	89 c8                	mov    eax,ecx
c001fc12:	83 c4 1c             	add    esp,0x1c
c001fc15:	5b                   	pop    ebx
c001fc16:	5e                   	pop    esi
c001fc17:	5f                   	pop    edi
c001fc18:	5d                   	pop    ebp
c001fc19:	c3                   	ret    
c001fc1a:	66 90                	xchg   ax,ax
c001fc1c:	ba 20 00 00 00       	mov    edx,0x20
c001fc21:	29 ea                	sub    edx,ebp
c001fc23:	89 e9                	mov    ecx,ebp
c001fc25:	d3 e0                	shl    eax,cl
c001fc27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fc2b:	89 f8                	mov    eax,edi
c001fc2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001fc31:	88 d1                	mov    cl,dl
c001fc33:	d3 e8                	shr    eax,cl
c001fc35:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001fc39:	09 c1                	or     ecx,eax
c001fc3b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001fc3f:	89 e9                	mov    ecx,ebp
c001fc41:	d3 e7                	shl    edi,cl
c001fc43:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001fc47:	89 d8                	mov    eax,ebx
c001fc49:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fc4d:	88 d1                	mov    cl,dl
c001fc4f:	d3 e8                	shr    eax,cl
c001fc51:	89 c7                	mov    edi,eax
c001fc53:	89 e9                	mov    ecx,ebp
c001fc55:	d3 e3                	shl    ebx,cl
c001fc57:	89 f0                	mov    eax,esi
c001fc59:	88 d1                	mov    cl,dl
c001fc5b:	d3 e8                	shr    eax,cl
c001fc5d:	09 d8                	or     eax,ebx
c001fc5f:	89 e9                	mov    ecx,ebp
c001fc61:	d3 e6                	shl    esi,cl
c001fc63:	89 f3                	mov    ebx,esi
c001fc65:	89 fa                	mov    edx,edi
c001fc67:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001fc6b:	89 d1                	mov    ecx,edx
c001fc6d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001fc71:	89 c6                	mov    esi,eax
c001fc73:	89 d7                	mov    edi,edx
c001fc75:	39 d1                	cmp    ecx,edx
c001fc77:	72 27                	jb     c001fca0 <__umoddi3+0x10c>
c001fc79:	74 21                	je     c001fc9c <__umoddi3+0x108>
c001fc7b:	89 ca                	mov    edx,ecx
c001fc7d:	29 f3                	sub    ebx,esi
c001fc7f:	19 fa                	sbb    edx,edi
c001fc81:	89 d0                	mov    eax,edx
c001fc83:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001fc87:	d3 e0                	shl    eax,cl
c001fc89:	89 e9                	mov    ecx,ebp
c001fc8b:	d3 eb                	shr    ebx,cl
c001fc8d:	09 d8                	or     eax,ebx
c001fc8f:	d3 ea                	shr    edx,cl
c001fc91:	83 c4 1c             	add    esp,0x1c
c001fc94:	5b                   	pop    ebx
c001fc95:	5e                   	pop    esi
c001fc96:	5f                   	pop    edi
c001fc97:	5d                   	pop    ebp
c001fc98:	c3                   	ret    
c001fc99:	8d 76 00             	lea    esi,[esi+0x0]
c001fc9c:	39 c3                	cmp    ebx,eax
c001fc9e:	73 db                	jae    c001fc7b <__umoddi3+0xe7>
c001fca0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001fca4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001fca8:	89 d7                	mov    edi,edx
c001fcaa:	89 c6                	mov    esi,eax
c001fcac:	eb cd                	jmp    c001fc7b <__umoddi3+0xe7>

Disassembly of section .init:

c001fcae <_init>:
c001fcae:	55                   	push   ebp
c001fcaf:	89 e5                	mov    ebp,esp
c001fcb1:	e8 3e 04 fe ff       	call   c00000f4 <frame_dummy>
c001fcb6:	e8 e5 fa ff ff       	call   c001f7a0 <__do_global_ctors_aux>
c001fcbb:	5d                   	pop    ebp
c001fcbc:	c3                   	ret    

Disassembly of section .fini:

c001fcbd <_fini>:
c001fcbd:	55                   	push   ebp
c001fcbe:	89 e5                	mov    ebp,esp
c001fcc0:	e8 bf 03 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001fcc5:	5d                   	pop    ebp
c001fcc6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001fcc8 <DriverlessDevice::~DriverlessDevice()>:
c001fcc8:	ba 60 16 02 c0       	mov    edx,0xc0021660
c001fccd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd1:	89 10                	mov    DWORD PTR [eax],edx
c001fcd3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcd7:	50                   	push   eax
c001fcd8:	e8 63 92 fe ff       	call   c0008f40 <Device::~Device()>
c001fcdd:	83 c4 04             	add    esp,0x4
c001fce0:	90                   	nop
c001fce1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001fce2 <DriverlessDevice::~DriverlessDevice()>:
c001fce2:	83 ec 0c             	sub    esp,0xc
c001fce5:	83 ec 0c             	sub    esp,0xc
c001fce8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcec:	e8 d7 ff ff ff       	call   c001fcc8 <DriverlessDevice::~DriverlessDevice()>
c001fcf1:	83 c4 10             	add    esp,0x10
c001fcf4:	83 ec 08             	sub    esp,0x8
c001fcf7:	68 58 01 00 00       	push   0x158
c001fcfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd00:	e8 03 ca fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c001fd05:	83 c4 10             	add    esp,0x10
c001fd08:	83 c4 0c             	add    esp,0xc
c001fd0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001fd0c <LinkedList<Device>::addElement(Device*)>:
c001fd0c:	83 ec 0c             	sub    esp,0xc
c001fd0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001fd14:	75 10                	jne    c001fd26 <LinkedList<Device>::addElement(Device*)+0x1a>
c001fd16:	83 ec 0c             	sub    esp,0xc
c001fd19:	68 f4 15 02 c0       	push   0xc00215f4
c001fd1e:	e8 af ef fe ff       	call   c000ecd2 <KePanic(char const*)>
c001fd23:	83 c4 10             	add    esp,0x10
c001fd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd2a:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd2c:	85 c0                	test   eax,eax
c001fd2e:	74 3a                	je     c001fd6a <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd37:	85 c0                	test   eax,eax
c001fd39:	74 2f                	je     c001fd6a <LinkedList<Device>::addElement(Device*)+0x5e>
c001fd3b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd42:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd46:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001fd4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd50:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd5e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fd68:	eb 68                	jmp    c001fdd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fd6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd6e:	8b 00                	mov    eax,DWORD PTR [eax]
c001fd70:	85 c0                	test   eax,eax
c001fd72:	75 4e                	jne    c001fdc2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd7b:	85 c0                	test   eax,eax
c001fd7d:	75 43                	jne    c001fdc2 <LinkedList<Device>::addElement(Device*)+0xb6>
c001fd7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd83:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd87:	89 10                	mov    DWORD PTR [eax],edx
c001fd89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fd91:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001fd94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fd9b:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001fda5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fda9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdac:	85 c0                	test   eax,eax
c001fdae:	74 22                	je     c001fdd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fdb0:	83 ec 0c             	sub    esp,0xc
c001fdb3:	68 16 16 02 c0       	push   0xc0021616
c001fdb8:	e8 15 ef fe ff       	call   c000ecd2 <KePanic(char const*)>
c001fdbd:	83 c4 10             	add    esp,0x10
c001fdc0:	eb 10                	jmp    c001fdd2 <LinkedList<Device>::addElement(Device*)+0xc6>
c001fdc2:	83 ec 0c             	sub    esp,0xc
c001fdc5:	68 20 16 02 c0       	push   0xc0021620
c001fdca:	e8 03 ef fe ff       	call   c000ecd2 <KePanic(char const*)>
c001fdcf:	83 c4 10             	add    esp,0x10
c001fdd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fdd9:	8d 50 01             	lea    edx,[eax+0x1]
c001fddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fde0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fde3:	90                   	nop
c001fde4:	83 c4 0c             	add    esp,0xc
c001fde7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001fde8 <LinkedList<Device>::LinkedList()>:
c001fde8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fdf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fdf6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fdfd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe01:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fe12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fe1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fe28:	90                   	nop
c001fe29:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001fe2c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001fe2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe30:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe32:	85 c0                	test   eax,eax
c001fe34:	75 0e                	jne    c001fe44 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe3a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe3d:	85 c0                	test   eax,eax
c001fe3f:	75 03                	jne    c001fe44 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001fe41:	b0 01                	mov    al,0x1
c001fe43:	c3                   	ret    
c001fe44:	b0 00                	mov    al,0x0
c001fe46:	90                   	nop
c001fe47:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001fe48 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001fe48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fe4c:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe4e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001fe50 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001fe50:	83 ec 0c             	sub    esp,0xc
c001fe53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe57:	8b 00                	mov    eax,DWORD PTR [eax]
c001fe59:	85 c0                	test   eax,eax
c001fe5b:	75 17                	jne    c001fe74 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001fe5d:	83 ec 0c             	sub    esp,0xc
c001fe60:	68 90 18 02 c0       	push   0xc0021890
c001fe65:	e8 68 ee fe ff       	call   c000ecd2 <KePanic(char const*)>
c001fe6a:	83 c4 10             	add    esp,0x10
c001fe6d:	e9 96 00 00 00       	jmp    c001ff08 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001fe72:	66 90                	xchg   ax,ax
c001fe74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001fe7b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fe7e:	85 c0                	test   eax,eax
c001fe80:	0f 95 c0             	setne  al
c001fe83:	0f b6 c0             	movzx  eax,al
c001fe86:	85 c0                	test   eax,eax
c001fe88:	74 12                	je     c001fe9c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001fe8a:	83 ec 0c             	sub    esp,0xc
c001fe8d:	68 db 18 02 c0       	push   0xc00218db
c001fe92:	e8 3b ee fe ff       	call   c000ecd2 <KePanic(char const*)>
c001fe97:	83 c4 10             	add    esp,0x10
c001fe9a:	66 90                	xchg   ax,ax
c001fe9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fea2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fea5:	85 c0                	test   eax,eax
c001fea7:	0f 94 c0             	sete   al
c001feaa:	0f b6 c0             	movzx  eax,al
c001fead:	85 c0                	test   eax,eax
c001feaf:	74 33                	je     c001fee4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001feb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feb5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001febb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001febf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001feca:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fecd:	83 f8 01             	cmp    eax,0x1
c001fed0:	74 22                	je     c001fef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fed2:	83 ec 0c             	sub    esp,0xc
c001fed5:	68 b4 18 02 c0       	push   0xc00218b4
c001feda:	e8 f3 ed fe ff       	call   c000ecd2 <KePanic(char const*)>
c001fedf:	83 c4 10             	add    esp,0x10
c001fee2:	eb 10                	jmp    c001fef4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001fee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fee8:	8b 00                	mov    eax,DWORD PTR [eax]
c001feea:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001feed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef1:	89 10                	mov    DWORD PTR [eax],edx
c001fef3:	90                   	nop
c001fef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fef8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fefb:	8d 50 ff             	lea    edx,[eax-0x1]
c001fefe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff02:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ff05:	8d 76 00             	lea    esi,[esi+0x0]
c001ff08:	83 c4 0c             	add    esp,0xc
c001ff0b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001ff0c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001ff0c:	83 ec 0c             	sub    esp,0xc
c001ff0f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001ff14:	75 12                	jne    c001ff28 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001ff16:	83 ec 0c             	sub    esp,0xc
c001ff19:	68 f4 15 02 c0       	push   0xc00215f4
c001ff1e:	e8 af ed fe ff       	call   c000ecd2 <KePanic(char const*)>
c001ff23:	83 c4 10             	add    esp,0x10
c001ff26:	66 90                	xchg   ax,ax
c001ff28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff2c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff2e:	85 c0                	test   eax,eax
c001ff30:	74 36                	je     c001ff68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff39:	85 c0                	test   eax,eax
c001ff3b:	74 2b                	je     c001ff68 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001ff3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff41:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff48:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001ff4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff4f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff53:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff5d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ff64:	eb 6a                	jmp    c001ffd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ff66:	66 90                	xchg   ax,ax
c001ff68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff6c:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff6e:	85 c0                	test   eax,eax
c001ff70:	75 4e                	jne    c001ffc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff79:	85 c0                	test   eax,eax
c001ff7b:	75 43                	jne    c001ffc0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001ff7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff81:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff85:	89 10                	mov    DWORD PTR [eax],edx
c001ff87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff8b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ff8f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001ff92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ff96:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001ff99:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001ffa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffa4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffa7:	85 c0                	test   eax,eax
c001ffa9:	74 25                	je     c001ffd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ffab:	83 ec 0c             	sub    esp,0xc
c001ffae:	68 16 16 02 c0       	push   0xc0021616
c001ffb3:	e8 1a ed fe ff       	call   c000ecd2 <KePanic(char const*)>
c001ffb8:	83 c4 10             	add    esp,0x10
c001ffbb:	eb 13                	jmp    c001ffd0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001ffbd:	8d 76 00             	lea    esi,[esi+0x0]
c001ffc0:	83 ec 0c             	sub    esp,0xc
c001ffc3:	68 20 16 02 c0       	push   0xc0021620
c001ffc8:	e8 05 ed fe ff       	call   c000ecd2 <KePanic(char const*)>
c001ffcd:	83 c4 10             	add    esp,0x10
c001ffd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffd4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001ffd7:	8d 50 01             	lea    edx,[eax+0x1]
c001ffda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ffde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001ffe1:	90                   	nop
c001ffe2:	83 c4 0c             	add    esp,0xc
c001ffe5:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001ffe8 <ACPI::~ACPI()>:
c001ffe8:	83 ec 0c             	sub    esp,0xc
c001ffeb:	ba 2c 1c 02 c0       	mov    edx,0xc0021c2c
c001fff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fff4:	89 10                	mov    DWORD PTR [eax],edx
c001fff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fffa:	83 ec 0c             	sub    esp,0xc
c001fffd:	50                   	push   eax
c001fffe:	e8 3d 8f fe ff       	call   c0008f40 <Device::~Device()>
c0020003:	83 c4 10             	add    esp,0x10
c0020006:	90                   	nop
c0020007:	83 c4 0c             	add    esp,0xc
c002000a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002000c <ACPI::~ACPI()>:
c002000c:	83 ec 0c             	sub    esp,0xc
c002000f:	83 ec 0c             	sub    esp,0xc
c0020012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020016:	e8 cd ff ff ff       	call   c001ffe8 <ACPI::~ACPI()>
c002001b:	83 c4 10             	add    esp,0x10
c002001e:	83 ec 08             	sub    esp,0x8
c0020021:	68 64 12 00 00       	push   0x1264
c0020026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002002a:	e8 d9 c6 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c002002f:	83 c4 10             	add    esp,0x10
c0020032:	83 c4 0c             	add    esp,0xc
c0020035:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0020038 <LinkedList<Device>::~LinkedList()>:
c0020038:	90                   	nop
c0020039:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002003c <LinkedList<Device>::isEmpty()>:
c002003c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020040:	8b 00                	mov    eax,DWORD PTR [eax]
c0020042:	85 c0                	test   eax,eax
c0020044:	75 0e                	jne    c0020054 <LinkedList<Device>::isEmpty()+0x18>
c0020046:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002004a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002004d:	85 c0                	test   eax,eax
c002004f:	75 03                	jne    c0020054 <LinkedList<Device>::isEmpty()+0x18>
c0020051:	b0 01                	mov    al,0x1
c0020053:	c3                   	ret    
c0020054:	b0 00                	mov    al,0x0
c0020056:	90                   	nop
c0020057:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0020058 <LinkedList<Device>::getFirstElement()>:
c0020058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002005c:	8b 00                	mov    eax,DWORD PTR [eax]
c002005e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0020060 <LinkedList<Device>::removeFirst()>:
c0020060:	83 ec 0c             	sub    esp,0xc
c0020063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020067:	8b 00                	mov    eax,DWORD PTR [eax]
c0020069:	85 c0                	test   eax,eax
c002006b:	75 17                	jne    c0020084 <LinkedList<Device>::removeFirst()+0x24>
c002006d:	83 ec 0c             	sub    esp,0xc
c0020070:	68 90 18 02 c0       	push   0xc0021890
c0020075:	e8 58 ec fe ff       	call   c000ecd2 <KePanic(char const*)>
c002007a:	83 c4 10             	add    esp,0x10
c002007d:	e9 92 00 00 00       	jmp    c0020114 <LinkedList<Device>::removeFirst()+0xb4>
c0020082:	66 90                	xchg   ax,ax
c0020084:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020088:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002008b:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0020091:	85 c0                	test   eax,eax
c0020093:	74 13                	je     c00200a8 <LinkedList<Device>::removeFirst()+0x48>
c0020095:	83 ec 0c             	sub    esp,0xc
c0020098:	68 db 18 02 c0       	push   0xc00218db
c002009d:	e8 30 ec fe ff       	call   c000ecd2 <KePanic(char const*)>
c00200a2:	83 c4 10             	add    esp,0x10
c00200a5:	8d 76 00             	lea    esi,[esi+0x0]
c00200a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00200ae:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00200b4:	85 c0                	test   eax,eax
c00200b6:	75 34                	jne    c00200ec <LinkedList<Device>::removeFirst()+0x8c>
c00200b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200bc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00200c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200c6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00200cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00200d4:	83 f8 01             	cmp    eax,0x1
c00200d7:	74 27                	je     c0020100 <LinkedList<Device>::removeFirst()+0xa0>
c00200d9:	83 ec 0c             	sub    esp,0xc
c00200dc:	68 b4 18 02 c0       	push   0xc00218b4
c00200e1:	e8 ec eb fe ff       	call   c000ecd2 <KePanic(char const*)>
c00200e6:	83 c4 10             	add    esp,0x10
c00200e9:	eb 15                	jmp    c0020100 <LinkedList<Device>::removeFirst()+0xa0>
c00200eb:	90                   	nop
c00200ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200f0:	8b 00                	mov    eax,DWORD PTR [eax]
c00200f2:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00200f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00200fc:	89 10                	mov    DWORD PTR [eax],edx
c00200fe:	66 90                	xchg   ax,ax
c0020100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020104:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020107:	8d 50 ff             	lea    edx,[eax-0x1]
c002010a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002010e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020111:	8d 76 00             	lea    esi,[esi+0x0]
c0020114:	83 c4 0c             	add    esp,0xc
c0020117:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0020118 <Computer::~Computer()>:
c0020118:	83 ec 0c             	sub    esp,0xc
c002011b:	ba cc 1e 02 c0       	mov    edx,0xc0021ecc
c0020120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020124:	89 10                	mov    DWORD PTR [eax],edx
c0020126:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002012a:	83 ec 0c             	sub    esp,0xc
c002012d:	50                   	push   eax
c002012e:	e8 0d 8e fe ff       	call   c0008f40 <Device::~Device()>
c0020133:	83 c4 10             	add    esp,0x10
c0020136:	90                   	nop
c0020137:	83 c4 0c             	add    esp,0xc
c002013a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002013c <Computer::~Computer()>:
c002013c:	83 ec 0c             	sub    esp,0xc
c002013f:	83 ec 0c             	sub    esp,0xc
c0020142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020146:	e8 cd ff ff ff       	call   c0020118 <Computer::~Computer()>
c002014b:	83 c4 10             	add    esp,0x10
c002014e:	83 ec 08             	sub    esp,0x8
c0020151:	68 6c 01 00 00       	push   0x16c
c0020156:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002015a:	e8 a9 c5 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c002015f:	83 c4 10             	add    esp,0x10
c0020162:	83 c4 0c             	add    esp,0xc
c0020165:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0020166 <idleCommon()>:
c0020166:	83 ec 0c             	sub    esp,0xc
c0020169:	fa                   	cli    
c002016a:	ff 05 b0 c6 02 c0    	inc    DWORD PTR ds:0xc002c6b0
c0020170:	e8 13 53 ff ff       	call   c0015488 <schedule()>
c0020175:	a1 b0 c6 02 c0       	mov    eax,ds:0xc002c6b0
c002017a:	48                   	dec    eax
c002017b:	a3 b0 c6 02 c0       	mov    ds:0xc002c6b0,eax
c0020180:	75 01                	jne    c0020183 <idleCommon()+0x1d>
c0020182:	fb                   	sti    
c0020183:	83 c4 0c             	add    esp,0xc
c0020186:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0020188 <LinkedList<UnixFile>::~LinkedList()>:
c0020188:	90                   	nop
c0020189:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c002018a <LinkedList<UnixFile>::LinkedList()>:
c002018a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002018e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020194:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020198:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002019f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201a3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00201b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201b8:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00201bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00201c3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00201ca:	90                   	nop
c00201cb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00201cc <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00201cc:	83 ec 0c             	sub    esp,0xc
c00201cf:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00201d4:	75 10                	jne    c00201e6 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00201d6:	83 ec 0c             	sub    esp,0xc
c00201d9:	68 f4 15 02 c0       	push   0xc00215f4
c00201de:	e8 ef ea fe ff       	call   c000ecd2 <KePanic(char const*)>
c00201e3:	83 c4 10             	add    esp,0x10
c00201e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00201ec:	85 c0                	test   eax,eax
c00201ee:	74 34                	je     c0020224 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00201f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00201f7:	85 c0                	test   eax,eax
c00201f9:	74 29                	je     c0020224 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c00201fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201ff:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020202:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020206:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020209:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002020d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020211:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020218:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002021b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020222:	eb 65                	jmp    c0020289 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020228:	8b 00                	mov    eax,DWORD PTR [eax]
c002022a:	85 c0                	test   eax,eax
c002022c:	75 4b                	jne    c0020279 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002022e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020232:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020235:	85 c0                	test   eax,eax
c0020237:	75 40                	jne    c0020279 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0020239:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002023d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020241:	89 10                	mov    DWORD PTR [eax],edx
c0020243:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020247:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002024b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002024e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020252:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020255:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002025c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020260:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020263:	85 c0                	test   eax,eax
c0020265:	74 22                	je     c0020289 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020267:	83 ec 0c             	sub    esp,0xc
c002026a:	68 16 16 02 c0       	push   0xc0021616
c002026f:	e8 5e ea fe ff       	call   c000ecd2 <KePanic(char const*)>
c0020274:	83 c4 10             	add    esp,0x10
c0020277:	eb 10                	jmp    c0020289 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0020279:	83 ec 0c             	sub    esp,0xc
c002027c:	68 20 16 02 c0       	push   0xc0021620
c0020281:	e8 4c ea fe ff       	call   c000ecd2 <KePanic(char const*)>
c0020286:	83 c4 10             	add    esp,0x10
c0020289:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002028d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020290:	8d 50 01             	lea    edx,[eax+0x1]
c0020293:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020297:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002029a:	90                   	nop
c002029b:	83 c4 0c             	add    esp,0xc
c002029e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00202a0 <LinkedList<UnixFile>::getFirstElement()>:
c00202a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00202a4:	8b 00                	mov    eax,DWORD PTR [eax]
c00202a6:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00202a8 <LinkedList<UnixFile>::removeFirst()>:
c00202a8:	83 ec 0c             	sub    esp,0xc
c00202ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202af:	8b 00                	mov    eax,DWORD PTR [eax]
c00202b1:	85 c0                	test   eax,eax
c00202b3:	75 12                	jne    c00202c7 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00202b5:	83 ec 0c             	sub    esp,0xc
c00202b8:	68 90 18 02 c0       	push   0xc0021890
c00202bd:	e8 10 ea fe ff       	call   c000ecd2 <KePanic(char const*)>
c00202c2:	83 c4 10             	add    esp,0x10
c00202c5:	eb 7e                	jmp    c0020345 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00202c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00202ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202d1:	85 c0                	test   eax,eax
c00202d3:	74 10                	je     c00202e5 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00202d5:	83 ec 0c             	sub    esp,0xc
c00202d8:	68 db 18 02 c0       	push   0xc00218db
c00202dd:	e8 f0 e9 fe ff       	call   c000ecd2 <KePanic(char const*)>
c00202e2:	83 c4 10             	add    esp,0x10
c00202e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00202eb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00202ee:	85 c0                	test   eax,eax
c00202f0:	75 33                	jne    c0020325 <LinkedList<UnixFile>::removeFirst()+0x7d>
c00202f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202f6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00202fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020300:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002030b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002030e:	83 f8 01             	cmp    eax,0x1
c0020311:	74 21                	je     c0020334 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020313:	83 ec 0c             	sub    esp,0xc
c0020316:	68 b4 18 02 c0       	push   0xc00218b4
c002031b:	e8 b2 e9 fe ff       	call   c000ecd2 <KePanic(char const*)>
c0020320:	83 c4 10             	add    esp,0x10
c0020323:	eb 0f                	jmp    c0020334 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0020325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020329:	8b 00                	mov    eax,DWORD PTR [eax]
c002032b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c002032e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020332:	89 10                	mov    DWORD PTR [eax],edx
c0020334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020338:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002033b:	8d 50 ff             	lea    edx,[eax-0x1]
c002033e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020342:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020345:	83 c4 0c             	add    esp,0xc
c0020348:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002034a <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002034a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002034e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020351:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0020354 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0020354:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020358:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002035b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002035c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002035c:	90                   	nop
c002035d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0020360 <ThreadControlBlock::ThreadControlBlock()>:
c0020360:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020364:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002036b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002036f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0020376:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002037a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0020381:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020385:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c002038c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020390:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0020397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002039b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c002039f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203a3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00203a7:	90                   	nop
c00203a8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00203ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00203ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00203b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00203c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00203cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00203d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00203e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00203e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00203ec:	90                   	nop
c00203ed:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c00203ee <CPU::~CPU()>:
c00203ee:	83 ec 0c             	sub    esp,0xc
c00203f1:	ba f8 2f 02 c0       	mov    edx,0xc0022ff8
c00203f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203fa:	89 10                	mov    DWORD PTR [eax],edx
c00203fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020400:	83 ec 0c             	sub    esp,0xc
c0020403:	50                   	push   eax
c0020404:	e8 37 8b fe ff       	call   c0008f40 <Device::~Device()>
c0020409:	83 c4 10             	add    esp,0x10
c002040c:	90                   	nop
c002040d:	83 c4 0c             	add    esp,0xc
c0020410:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0020412 <CPU::~CPU()>:
c0020412:	83 ec 0c             	sub    esp,0xc
c0020415:	83 ec 0c             	sub    esp,0xc
c0020418:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002041c:	e8 cd ff ff ff       	call   c00203ee <CPU::~CPU()>
c0020421:	83 c4 10             	add    esp,0x10
c0020424:	83 ec 08             	sub    esp,0x8
c0020427:	68 78 11 00 00       	push   0x1178
c002042c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020430:	e8 d3 c2 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0020435:	83 c4 10             	add    esp,0x10
c0020438:	83 c4 0c             	add    esp,0xc
c002043b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002043c <PCI::~PCI()>:
c002043c:	83 ec 0c             	sub    esp,0xc
c002043f:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c0020444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020448:	89 10                	mov    DWORD PTR [eax],edx
c002044a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002044e:	83 ec 0c             	sub    esp,0xc
c0020451:	50                   	push   eax
c0020452:	e8 cd 84 fe ff       	call   c0008924 <Bus::~Bus()>
c0020457:	83 c4 10             	add    esp,0x10
c002045a:	90                   	nop
c002045b:	83 c4 0c             	add    esp,0xc
c002045e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0020460 <PCI::~PCI()>:
c0020460:	83 ec 0c             	sub    esp,0xc
c0020463:	83 ec 0c             	sub    esp,0xc
c0020466:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002046a:	e8 cd ff ff ff       	call   c002043c <PCI::~PCI()>
c002046f:	83 c4 10             	add    esp,0x10
c0020472:	83 ec 08             	sub    esp,0x8
c0020475:	68 5c 01 00 00       	push   0x15c
c002047a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002047e:	e8 85 c2 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0020483:	83 c4 10             	add    esp,0x10
c0020486:	83 c4 0c             	add    esp,0xc
c0020489:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002048a <IDE::~IDE()>:
c002048a:	83 ec 0c             	sub    esp,0xc
c002048d:	ba 94 36 02 c0       	mov    edx,0xc0023694
c0020492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020496:	89 10                	mov    DWORD PTR [eax],edx
c0020498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002049c:	83 ec 0c             	sub    esp,0xc
c002049f:	50                   	push   eax
c00204a0:	e8 2b 8f fe ff       	call   c00093d0 <HardDiskController::~HardDiskController()>
c00204a5:	83 c4 10             	add    esp,0x10
c00204a8:	90                   	nop
c00204a9:	83 c4 0c             	add    esp,0xc
c00204ac:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00204ae <IDE::~IDE()>:
c00204ae:	83 ec 0c             	sub    esp,0xc
c00204b1:	83 ec 0c             	sub    esp,0xc
c00204b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204b8:	e8 cd ff ff ff       	call   c002048a <IDE::~IDE()>
c00204bd:	83 c4 10             	add    esp,0x10
c00204c0:	83 ec 08             	sub    esp,0x8
c00204c3:	68 70 02 00 00       	push   0x270
c00204c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204cc:	e8 37 c2 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00204d1:	83 c4 10             	add    esp,0x10
c00204d4:	83 c4 0c             	add    esp,0xc
c00204d7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00204d8 <SATABus::~SATABus()>:
c00204d8:	83 ec 0c             	sub    esp,0xc
c00204db:	ba e4 36 02 c0       	mov    edx,0xc00236e4
c00204e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204e4:	89 10                	mov    DWORD PTR [eax],edx
c00204e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204ea:	83 ec 0c             	sub    esp,0xc
c00204ed:	50                   	push   eax
c00204ee:	e8 dd 8e fe ff       	call   c00093d0 <HardDiskController::~HardDiskController()>
c00204f3:	83 c4 10             	add    esp,0x10
c00204f6:	90                   	nop
c00204f7:	83 c4 0c             	add    esp,0xc
c00204fa:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00204fc <SATABus::~SATABus()>:
c00204fc:	83 ec 0c             	sub    esp,0xc
c00204ff:	83 ec 0c             	sub    esp,0xc
c0020502:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020506:	e8 cd ff ff ff       	call   c00204d8 <SATABus::~SATABus()>
c002050b:	83 c4 10             	add    esp,0x10
c002050e:	83 ec 08             	sub    esp,0x8
c0020511:	68 64 01 00 00       	push   0x164
c0020516:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002051a:	e8 e9 c1 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c002051f:	83 c4 10             	add    esp,0x10
c0020522:	83 c4 0c             	add    esp,0xc
c0020525:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0020526 <ATA::~ATA()>:
c0020526:	83 ec 0c             	sub    esp,0xc
c0020529:	ba 24 37 02 c0       	mov    edx,0xc0023724
c002052e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020532:	89 10                	mov    DWORD PTR [eax],edx
c0020534:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020538:	83 ec 0c             	sub    esp,0xc
c002053b:	50                   	push   eax
c002053c:	e8 71 8f fe ff       	call   c00094b2 <PhysicalDisk::~PhysicalDisk()>
c0020541:	83 c4 10             	add    esp,0x10
c0020544:	90                   	nop
c0020545:	83 c4 0c             	add    esp,0xc
c0020548:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002054a <ATA::~ATA()>:
c002054a:	83 ec 0c             	sub    esp,0xc
c002054d:	83 ec 0c             	sub    esp,0xc
c0020550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020554:	e8 cd ff ff ff       	call   c0020526 <ATA::~ATA()>
c0020559:	83 c4 10             	add    esp,0x10
c002055c:	83 ec 08             	sub    esp,0x8
c002055f:	68 7c 01 00 00       	push   0x17c
c0020564:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020568:	e8 9b c1 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c002056d:	83 c4 10             	add    esp,0x10
c0020570:	83 c4 0c             	add    esp,0xc
c0020573:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0020574 <ATAPI::~ATAPI()>:
c0020574:	83 ec 0c             	sub    esp,0xc
c0020577:	ba 6c 37 02 c0       	mov    edx,0xc002376c
c002057c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020580:	89 10                	mov    DWORD PTR [eax],edx
c0020582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020586:	83 ec 0c             	sub    esp,0xc
c0020589:	50                   	push   eax
c002058a:	e8 23 8f fe ff       	call   c00094b2 <PhysicalDisk::~PhysicalDisk()>
c002058f:	83 c4 10             	add    esp,0x10
c0020592:	90                   	nop
c0020593:	83 c4 0c             	add    esp,0xc
c0020596:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0020598 <ATAPI::~ATAPI()>:
c0020598:	83 ec 0c             	sub    esp,0xc
c002059b:	83 ec 0c             	sub    esp,0xc
c002059e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205a2:	e8 cd ff ff ff       	call   c0020574 <ATAPI::~ATAPI()>
c00205a7:	83 c4 10             	add    esp,0x10
c00205aa:	83 ec 08             	sub    esp,0x8
c00205ad:	68 84 01 00 00       	push   0x184
c00205b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205b6:	e8 4d c1 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00205bb:	83 c4 10             	add    esp,0x10
c00205be:	83 c4 0c             	add    esp,0xc
c00205c1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00205c2 <SATA::~SATA()>:
c00205c2:	83 ec 0c             	sub    esp,0xc
c00205c5:	ba 2c 38 02 c0       	mov    edx,0xc002382c
c00205ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205ce:	89 10                	mov    DWORD PTR [eax],edx
c00205d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00205d4:	83 ec 0c             	sub    esp,0xc
c00205d7:	50                   	push   eax
c00205d8:	e8 d5 8e fe ff       	call   c00094b2 <PhysicalDisk::~PhysicalDisk()>
c00205dd:	83 c4 10             	add    esp,0x10
c00205e0:	90                   	nop
c00205e1:	83 c4 0c             	add    esp,0xc
c00205e4:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00205e6 <SATA::~SATA()>:
c00205e6:	83 ec 0c             	sub    esp,0xc
c00205e9:	83 ec 0c             	sub    esp,0xc
c00205ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00205f0:	e8 cd ff ff ff       	call   c00205c2 <SATA::~SATA()>
c00205f5:	83 c4 10             	add    esp,0x10
c00205f8:	83 ec 08             	sub    esp,0x8
c00205fb:	68 7c 01 00 00       	push   0x17c
c0020600:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020604:	e8 ff c0 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0020609:	83 c4 10             	add    esp,0x10
c002060c:	83 c4 0c             	add    esp,0xc
c002060f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0020610 <SATAPI::~SATAPI()>:
c0020610:	83 ec 0c             	sub    esp,0xc
c0020613:	ba 50 39 02 c0       	mov    edx,0xc0023950
c0020618:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002061c:	89 10                	mov    DWORD PTR [eax],edx
c002061e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020622:	83 ec 0c             	sub    esp,0xc
c0020625:	50                   	push   eax
c0020626:	e8 87 8e fe ff       	call   c00094b2 <PhysicalDisk::~PhysicalDisk()>
c002062b:	83 c4 10             	add    esp,0x10
c002062e:	90                   	nop
c002062f:	83 c4 0c             	add    esp,0xc
c0020632:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0020634 <SATAPI::~SATAPI()>:
c0020634:	83 ec 0c             	sub    esp,0xc
c0020637:	83 ec 0c             	sub    esp,0xc
c002063a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002063e:	e8 cd ff ff ff       	call   c0020610 <SATAPI::~SATAPI()>
c0020643:	83 c4 10             	add    esp,0x10
c0020646:	83 ec 08             	sub    esp,0x8
c0020649:	68 84 01 00 00       	push   0x184
c002064e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020652:	e8 b1 c0 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0020657:	83 c4 10             	add    esp,0x10
c002065a:	83 c4 0c             	add    esp,0xc
c002065d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002065e <IOAPIC::~IOAPIC()>:
c002065e:	83 ec 0c             	sub    esp,0xc
c0020661:	ba b0 39 02 c0       	mov    edx,0xc00239b0
c0020666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002066a:	89 10                	mov    DWORD PTR [eax],edx
c002066c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020670:	83 ec 0c             	sub    esp,0xc
c0020673:	50                   	push   eax
c0020674:	e8 c7 88 fe ff       	call   c0008f40 <Device::~Device()>
c0020679:	83 c4 10             	add    esp,0x10
c002067c:	90                   	nop
c002067d:	83 c4 0c             	add    esp,0xc
c0020680:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0020682 <IOAPIC::~IOAPIC()>:
c0020682:	83 ec 0c             	sub    esp,0xc
c0020685:	83 ec 0c             	sub    esp,0xc
c0020688:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002068c:	e8 cd ff ff ff       	call   c002065e <IOAPIC::~IOAPIC()>
c0020691:	83 c4 10             	add    esp,0x10
c0020694:	83 ec 08             	sub    esp,0x8
c0020697:	68 68 01 00 00       	push   0x168
c002069c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206a0:	e8 63 c0 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00206a5:	83 c4 10             	add    esp,0x10
c00206a8:	83 c4 0c             	add    esp,0xc
c00206ab:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00206ac <APICTimer::~APICTimer()>:
c00206ac:	83 ec 0c             	sub    esp,0xc
c00206af:	ba f8 39 02 c0       	mov    edx,0xc00239f8
c00206b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206b8:	89 10                	mov    DWORD PTR [eax],edx
c00206ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00206be:	83 ec 0c             	sub    esp,0xc
c00206c1:	50                   	push   eax
c00206c2:	e8 01 a0 fe ff       	call   c000a6c8 <Timer::~Timer()>
c00206c7:	83 c4 10             	add    esp,0x10
c00206ca:	90                   	nop
c00206cb:	83 c4 0c             	add    esp,0xc
c00206ce:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00206d0 <APICTimer::~APICTimer()>:
c00206d0:	83 ec 0c             	sub    esp,0xc
c00206d3:	83 ec 0c             	sub    esp,0xc
c00206d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206da:	e8 cd ff ff ff       	call   c00206ac <APICTimer::~APICTimer()>
c00206df:	83 c4 10             	add    esp,0x10
c00206e2:	83 ec 08             	sub    esp,0x8
c00206e5:	68 60 01 00 00       	push   0x160
c00206ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00206ee:	e8 15 c0 fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c00206f3:	83 c4 10             	add    esp,0x10
c00206f6:	83 c4 0c             	add    esp,0xc
c00206f9:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c00206fc <PIT::~PIT()>:
c00206fc:	83 ec 0c             	sub    esp,0xc
c00206ff:	ba 48 3a 02 c0       	mov    edx,0xc0023a48
c0020704:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020708:	89 10                	mov    DWORD PTR [eax],edx
c002070a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002070e:	83 ec 0c             	sub    esp,0xc
c0020711:	50                   	push   eax
c0020712:	e8 b1 9f fe ff       	call   c000a6c8 <Timer::~Timer()>
c0020717:	83 c4 10             	add    esp,0x10
c002071a:	90                   	nop
c002071b:	83 c4 0c             	add    esp,0xc
c002071e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0020720 <PIT::~PIT()>:
c0020720:	83 ec 0c             	sub    esp,0xc
c0020723:	83 ec 0c             	sub    esp,0xc
c0020726:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002072a:	e8 cd ff ff ff       	call   c00206fc <PIT::~PIT()>
c002072f:	83 c4 10             	add    esp,0x10
c0020732:	83 ec 08             	sub    esp,0x8
c0020735:	68 5c 01 00 00       	push   0x15c
c002073a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002073e:	e8 c5 bf fe ff       	call   c000c708 <operator delete(void*, unsigned long)>
c0020743:	83 c4 10             	add    esp,0x10
c0020746:	83 c4 0c             	add    esp,0xc
c0020749:	c3                   	ret    

Disassembly of section userkernel:

c0025000 <KiDefaultSignalHandlerAbort(int)>:
c0025000:	57                   	push   edi
c0025001:	b9 07 00 00 00       	mov    ecx,0x7
c0025006:	56                   	push   esi
c0025007:	be 3b 22 02 c0       	mov    esi,0xc002223b
c002500c:	83 ec 24             	sub    esp,0x24
c002500f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025013:	fc                   	cld    
c0025014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002501a:	50                   	push   eax
c002501b:	6a 00                	push   0x0
c002501d:	6a 38                	push   0x38
c002501f:	6a 01                	push   0x1
c0025021:	e8 2c 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0025026:	83 c4 34             	add    esp,0x34
c0025029:	5e                   	pop    esi
c002502a:	5f                   	pop    edi
c002502b:	c3                   	ret    

c002502c <KiDefaultSignalHandlerTerminate(int)>:
c002502c:	57                   	push   edi
c002502d:	b9 08 00 00 00       	mov    ecx,0x8
c0025032:	56                   	push   esi
c0025033:	be 57 22 02 c0       	mov    esi,0xc0022257
c0025038:	83 ec 24             	sub    esp,0x24
c002503b:	89 e7                	mov    edi,esp
c002503d:	fc                   	cld    
c002503e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0025040:	54                   	push   esp
c0025041:	6a 00                	push   0x0
c0025043:	6a 37                	push   0x37
c0025045:	6a 01                	push   0x1
c0025047:	e8 06 00 00 00       	call   c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002504c:	83 c4 34             	add    esp,0x34
c002504f:	5e                   	pop    esi
c0025050:	5f                   	pop    edi
c0025051:	c3                   	ret    

c0025052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0025052:	53                   	push   ebx
c0025053:	83 ec 10             	sub    esp,0x10
c0025056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002505a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002505e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0025062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025066:	cd 60                	int    0x60
c0025068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002506c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0025074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025078:	83 c4 10             	add    esp,0x10
c002507b:	5b                   	pop    ebx
c002507c:	c3                   	ret    

Disassembly of section align_previous:

c0026000 <DO_NOT_DELETE()>:
c0026000:	c3                   	ret    
