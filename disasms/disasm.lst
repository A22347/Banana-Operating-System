
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 6b fe 00 00       	call   c000fe8b <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 a8 65 02 c0       	mov    eax,0xc00265a8
c0000025:	3d a8 65 02 c0       	cmp    eax,0xc00265a8
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 a8 65 02 c0       	push   0xc00265a8
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 a8 65 02 c0       	mov    eax,0xc00265a8
c0000051:	2d a8 65 02 c0       	sub    eax,0xc00265a8
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 a8 65 02 c0       	push   0xc00265a8
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 80 02 c0 00 	cmp    BYTE PTR ds:0xc00280c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb c0 21 02 c0       	mov    ebx,0xc00221c0
c0000097:	81 eb bc 21 02 c0    	sub    ebx,0xc00221bc
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be bc 21 02 c0       	mov    esi,0xc00221bc
c00000a6:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 80 02 c0       	mov    ds:0xc00280c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 80 02 c0       	mov    eax,ds:0xc00280c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 a8 65 02 c0       	push   0xc00265a8
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 80 02 c0 01 	mov    BYTE PTR ds:0xc00280c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 80 02 c0       	push   0xc00280c8
c0000108:	68 a8 65 02 c0       	push   0xc00265a8
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 07 61 01 00       	call   c00163b4 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 34 44 01 00       	call   c00146f9 <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 e5 60 01 00       	call   c00163b4 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 26 66 01 00       	call   c0016914 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 e1 6a 01 00       	call   c0016dd8 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 e0 e0 02 c0 	lgdtd  ds:0xc002e0e0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 2e f0 00 00       	jmp    c000f3ad <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 80 02 c0       	mov    ds:0xc00280e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 80 02 c0    	mov    DWORD PTR ds:0xc00280e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 80 02 c0    	mov    ebx,DWORD PTR ds:0xc00280e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 e0 21 02 c0 02 	test   BYTE PTR [edx-0x3ffdde20],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 e0 21 02 c0 01 	test   BYTE PTR [edx-0x3ffdde20],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 e0 21 02 c0 08 	test   BYTE PTR [edx-0x3ffdde20],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 e0 21 02 c0 04 	test   BYTE PTR [ecx-0x3ffdde20],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 e0 21 02 c0 01 	test   BYTE PTR [edx-0x3ffdde20],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 81 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd7efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 81 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 81 02 c0    	mov    DWORD PTR ds:0xc0028100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 81 02 c0    	mov    ecx,DWORD PTR ds:0xc002813c
c0000df7:	c7 42 0c 34 81 02 c0 	mov    DWORD PTR [edx+0xc],0xc0028134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 81 02 c0 02 	test   BYTE PTR ds:0xc0028100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 84 02 c0    	dec    DWORD PTR ds:0xc0028450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 84 02 c0    	sub    DWORD PTR ds:0xc0028464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 79 ed 00 00       	call   c000fbd9 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 86 ec 00 00       	call   c000fb7b <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 65 eb 00 00       	call   c000fb45 <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 60 eb 00 00       	call   c000fb7b <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 0c ea 00 00       	call   c000fb45 <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 f2 e9 00 00       	call   c000fb45 <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 c8 e9 00 00       	call   c000fb45 <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 81 02 c0    	mov    edi,DWORD PTR ds:0xc0028100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 81 02 c0       	mov    eax,0xc0028100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 81 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 81 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 81 02 c0 	lea    edx,[eax*8-0x3ffd7ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 81 02 c0    	mov    ebx,DWORD PTR ds:0xc0028140
c00012e5:	81 fb 34 81 02 c0    	cmp    ebx,0xc0028134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 81 02 c0       	cmp    eax,0xc0028134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 81 02 c0    	cmp    DWORD PTR ds:0xc0028130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 81 02 c0       	mov    ds:0xc002813c,eax
c0001321:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001326:	a3 30 81 02 c0       	mov    ds:0xc0028130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c0001334:	c7 40 0c 34 81 02 c0 	mov    DWORD PTR [eax+0xc],0xc0028134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 81 02 c0       	mov    ds:0xc0028140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 81 02 c0 	mov    DWORD PTR [eax+0x8],0xc0028134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 80 02 c0 	lea    ebp,[edx*4-0x3ffd7f08]
c0001385:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 81 02 c0 	lea    ecx,[edx*4-0x3ffd7f00]
c00013a0:	8b 14 95 00 81 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 84 02 c0 	or     DWORD PTR [edi*4-0x3ffd7bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 81 02 c0 	lea    eax,[eax*8-0x3ffd7ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,ecx
c000145a:	89 0d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,ecx
c0001460:	c7 41 08 34 81 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0028134
c0001467:	c7 41 0c 34 81 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0028134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 81 02 c0 	lea    edx,[ecx*8-0x3ffd7ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 84 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd7bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 81 02 c0 	lea    edx,[eax*4-0x3ffd7ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 84 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 81 02 c0    	mov    DWORD PTR ds:0xc002813c,edi
c000152d:	89 3d 40 81 02 c0    	mov    DWORD PTR ds:0xc0028140,edi
c0001533:	c7 47 08 34 81 02 c0 	mov    DWORD PTR [edi+0x8],0xc0028134
c000153a:	c7 47 0c 34 81 02 c0 	mov    DWORD PTR [edi+0xc],0xc0028134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 81 02 c0    	mov    DWORD PTR ds:0xc0028130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 81 02 c0       	mov    edx,0xc0028100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 81 02 c0       	mov    eax,0xc0028100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 84 02 c0    	mov    ebx,DWORD PTR ds:0xc0028454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 81 02 c0    	cmp    DWORD PTR ds:0xc002812c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 81 02 c0    	mov    DWORD PTR ds:0xc002812c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 84 02 c0    	push   DWORD PTR ds:0xc002845c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 81 02 c0 00 	cmp    DWORD PTR ds:0xc0028100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 84 02 c0       	mov    eax,ds:0xc002845c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 81 02 c0 00 	cmp    DWORD PTR ds:0xc002812c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 81 02 c0       	mov    eax,ds:0xc002812c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 81 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 81 02 c0       	mov    eax,0xc0028134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 84 02 c0       	cmp    eax,0xc002842c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 84 02 c0       	mov    eax,ds:0xc0028468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 84 02 c0    	mov    esi,DWORD PTR ds:0xc0028474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 81 02 c0       	mov    eax,0xc0028100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 e4 22 02 c0 	jmp    DWORD PTR [eax*4-0x3ffddd1c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 81 02 c0       	mov    eax,ds:0xc0028100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 81 02 c0       	mov    ds:0xc0028100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 84 02 c0    	mov    DWORD PTR ds:0xc0028444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 84 02 c0    	mov    DWORD PTR ds:0xc0028448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 84 02 c0    	mov    DWORD PTR ds:0xc002844c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 84 02 c0    	mov    DWORD PTR ds:0xc0028454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 71 9a 01 00       	jmp    c001b9fc <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 9b 9a 01 00       	jmp    c001ba3c <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 c0 eb 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd1440]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 bc 9a 01 00       	jmp    c001ba7c <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 40 24 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffddbc0]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 40 24 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddbc0]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba 58 51 02 c0       	mov    edx,0xc0025158
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba fc 22 02 c0       	mov    edx,0xc00222fc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 84 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 84 02 c0    	mov    ax,ds:0xc0028480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 84 02 c0    	mov    ds:0xc0028480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 02 23 02 c0       	mov    eax,0xc0022302
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf c0 23 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffddc40]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 0b 23 02 c0       	mov    eax,0xc002230b
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 40 24 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffddbc0]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 84 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd7b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 84 02 c0 	mov    DWORD PTR [edx*4-0x3ffd7b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 90 23 02 c0       	mov    eax,0xc0022390
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 84 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 80 23 02 c0       	mov    ebx,0xc0022380
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 60 23 02 c0       	mov    eax,0xc0022360
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 70 23 02 c0       	mov    eax,0xc0022370
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba 12 23 02 c0       	mov    edx,0xc0022312
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba 1e 23 02 c0       	mov    edx,0xc002231e
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba 32 23 02 c0       	mov    edx,0xc0022332
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 44 9e 00 00       	call   c000fc5b <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 3c 9e 00 00       	call   c000fc6b <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 60 27 02 c0 	mov    DWORD PTR [esp+0xc],0xc0022760
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 60 27 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022760
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 60 25 02 c0       	mov    eax,0xc0022560
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 a0 24 02 c0       	mov    eax,0xc00224a0
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 60 24 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffddba0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 60 28 02 c0       	push   0xc0022860
c0006303:	e8 90 60 01 00       	call   c001c398 <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 80 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 6e 28 02 c0       	push   0xc002286e
c000633b:	e8 58 60 01 00       	call   c001c398 <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 85 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd7a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 80 02 c0 	movsx  eax,BYTE PTR ds:0xc0028060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 c1 5f 01 00       	call   c001c33c <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 80 02 c0       	mov    eax,0xc0028080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 80 02 c0       	mov    eax,0xc0028020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 8e 02 c0    	mov    ebp,DWORD PTR ds:0xc0028eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 7d 28 02 c0       	push   0xc002287d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 8e 02 c0       	mov    ecx,0xc0028e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 85 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd7ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd7ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7abc],esi
c0006746:	89 87 40 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ac0],eax
c000674c:	c7 87 48 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 85 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd7a30],0x0
c0006768:	89 87 4c 85 02 c0    	mov    DWORD PTR [edi-0x3ffd7ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 85 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd7ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 85 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd7a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c00067e1:	8b 8d 4c 85 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd7ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 85 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd7ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 80 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 85 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd7ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 85 02 c0    	add    DWORD PTR [ebp-0x3ffd7ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 85 02 c0    	lea    ecx,[ebp-0x3ffd7ac0]
c00068d9:	83 bd 40 85 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd7ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 85 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd7ab4]
c0006917:	05 40 85 02 c0       	add    eax,0xc0028540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 85 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd7a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 85 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd7ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 85 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd7a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 85 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd7ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 85 02 c0    	lea    edi,[eax-0x3ffd7ac0]
c00069d6:	83 b8 40 85 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd7ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 80 28 02 c0       	push   0xc0022880
c00069fa:	e8 99 59 01 00       	call   c001c398 <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 ad 59 01 00       	call   c001c3b4 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 85 28 02 c0 	mov    DWORD PTR [esp],0xc0022885
c0006a14:	e8 7f 59 01 00       	call   c001c398 <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7ac0]
c0006a20:	e8 8f 59 01 00       	call   c001c3b4 <iso_kprintfd>
c0006a25:	c7 04 24 8b 28 02 c0 	mov    DWORD PTR [esp],0xc002288b
c0006a2c:	e8 67 59 01 00       	call   c001c398 <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7abc]
c0006a38:	e8 77 59 01 00       	call   c001c3b4 <iso_kprintfd>
c0006a3d:	c7 04 24 91 28 02 c0 	mov    DWORD PTR [esp],0xc0022891
c0006a44:	e8 4f 59 01 00       	call   c001c398 <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 85 02 c0    	push   DWORD PTR [ebx-0x3ffd7a30]
c0006a50:	e8 5f 59 01 00       	call   c001c3b4 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 85 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd7ab8]
c0006ab6:	81 c2 40 85 02 c0    	add    edx,0xc0028540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 80 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd7f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 85 02 c0    	lea    ebp,[eax-0x3ffd7aa8]
c0006b12:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 85 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd7aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 7d 28 02 c0       	push   0xc002287d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 85 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd7aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7ab0],eax
c0006bee:	89 93 54 85 02 c0    	mov    DWORD PTR [ebx-0x3ffd7aac],edx
c0006bf4:	81 c3 40 85 02 c0    	add    ebx,0xc0028540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 85 02 c0       	add    eax,0xc0028550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 9a 28 02 c0       	push   0xc002289a
c0006c19:	e8 7a 57 01 00       	call   c001c398 <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 80 02 c0       	mov    ds:0xc0028060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb4,0x0
c0006c4e:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 80 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 a5 28 02 c0       	push   0xc00228a5
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 8e 02 c0       	mov    ds:0xc0028eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 8e 02 c0 00 	cmp    DWORD PTR ds:0xc0028eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 8e 02 c0       	mov    eax,ds:0xc0028eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 80 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd7f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 ac 28 02 c0       	push   0xc00228ac
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 80 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd7f80]
c0006cec:	bf 80 8e 02 c0       	mov    edi,0xc0028e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 8e 02 c0       	mov    eax,0xc0028e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 8e 02 c0       	mov    ds:0xc0028ea8,eax
c0006d0f:	b8 8a 8e 02 c0       	mov    eax,0xc0028e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 8e 02 c0       	mov    ds:0xc0028ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 b3 28 02 c0       	push   0xc00228b3
c0006d30:	e8 63 56 01 00       	call   c001c398 <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 be 28 02 c0       	push   0xc00228be
c0006d4b:	e8 48 56 01 00       	call   c001c398 <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 85 02 c0       	push   0xc0028540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 85 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0028540,0xffffffff
c0006d75:	e8 e1 8e 00 00       	call   c000fc5b <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 8e 02 c0       	mov    ds:0xc0028eb0,eax
c0006d86:	e8 d0 8e 00 00       	call   c000fc5b <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 85 02 c0       	mov    ds:0xc0028520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 bb 8e 00 00       	call   c000fc5b <malloc>
c0006da0:	89 04 9d 80 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 a2 8e 00 00       	call   c000fc5b <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 80 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd7fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7f80]
c0006de6:	e8 80 8e 00 00       	call   c000fc6b <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 80 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 72 8e 00 00       	call   c000fc6b <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 8e 02 c0       	mov    eax,ds:0xc0028eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 58 8e 00 00       	call   c000fc6b <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 85 02 c0       	mov    eax,ds:0xc0028520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 43 8e 00 00       	call   c000fc6b <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 85 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028520,0x0
c0006e35:	c7 05 b0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be d0 28 02 c0       	mov    esi,0xc00228d0
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 cf 28 02 c0       	mov    al,ds:0xc00228cf
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 24 e1 02 c0 10 	test   BYTE PTR ds:0xc002e124,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 e0 28 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdd720]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 30 2a 02 c0       	push   0xc0022a30
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 44 2a 02 c0       	push   0xc0022a44
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 4e 2a 02 c0       	push   0xc0022a4e
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 58 2a 02 c0       	push   0xc0022a58
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 9c 2b 02 c0       	push   0xc0022b9c
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 62 2a 02 c0       	push   0xc0022a62
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 bc 2b 02 c0       	push   0xc0022bbc
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 77 2a 02 c0       	push   0xc0022a77
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 91 2a 02 c0       	push   0xc0022a91
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 60 5b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda4a0]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 e4 2b 02 c0       	push   0xc0022be4
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 9c 2b 02 c0       	push   0xc0022b9c
c00071d4:	e8 c9 8d 00 00       	call   c000ffa2 <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 2c 2c 02 c0       	push   0xc0022c2c
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 2c 2c 02 c0       	push   0xc0022c2c
c0007203:	e8 9a 8d 00 00       	call   c000ffa2 <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 9c 2a 02 c0       	push   0xc0022a9c
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 9c 2a 02 c0       	push   0xc0022a9c
c000722f:	e8 6e 8d 00 00       	call   c000ffa2 <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 b9 2a 02 c0       	push   0xc0022ab9
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 b9 2a 02 c0       	push   0xc0022ab9
c000725b:	e8 42 8d 00 00       	call   c000ffa2 <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 4c 2c 02 c0       	push   0xc0022c4c
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 4c 2c 02 c0       	push   0xc0022c4c
c0007287:	e8 16 8d 00 00       	call   c000ffa2 <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 70 2c 02 c0       	push   0xc0022c70
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 70 2c 02 c0       	push   0xc0022c70
c00072b3:	e8 ea 8c 00 00       	call   c000ffa2 <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 d5 2a 02 c0       	push   0xc0022ad5
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 d5 2a 02 c0       	push   0xc0022ad5
c00072df:	e8 be 8c 00 00       	call   c000ffa2 <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 f1 2a 02 c0       	push   0xc0022af1
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 f1 2a 02 c0       	push   0xc0022af1
c000730b:	e8 92 8c 00 00       	call   c000ffa2 <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 90 2c 02 c0       	push   0xc0022c90
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 90 2c 02 c0       	push   0xc0022c90
c0007337:	e8 66 8c 00 00       	call   c000ffa2 <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 b4 2c 02 c0       	push   0xc0022cb4
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 b4 2c 02 c0       	push   0xc0022cb4
c0007363:	e8 3a 8c 00 00       	call   c000ffa2 <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 93 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd6d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 93 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd6d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 93 02 c0    	mov    BYTE PTR [ebx-0x3ffd6d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 91 88 00 00       	call   c000fc5b <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00073d5:	68 d3 2c 02 c0       	push   0xc0022cd3
c00073da:	50                   	push   eax
c00073db:	e8 52 0d 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 f1 2c 02 c0       	push   0xc0022cf1
c00073ef:	e8 ae 8b 00 00       	call   c000ffa2 <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 4f 0d 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 0b 2d 02 c0       	push   0xc0022d0b
c0007410:	e8 8d 8b 00 00       	call   c000ffa2 <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 25 2d 02 c0       	push   0xc0022d25
c0007457:	e8 46 8b 00 00       	call   c000ffa2 <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 8e 02 c0 	lea    edx,[esi*8-0x3ffd7120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 3f 2d 02 c0       	push   0xc0022d3f
c0007487:	e8 16 8b 00 00       	call   c000ffa2 <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 13 0d 00 00       	call   c00081ae <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 98 6e 00 00       	call   c000e371 <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 a3 94 00 00       	call   c0010996 <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 b3 02 c0    	mov    ebp,DWORD PTR ds:0xc002b300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 b3 02 c0    	mov    DWORD PTR ds:0xc002b300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 59 2d 02 c0       	push   0xc0022d59
c000752c:	e8 71 8a 00 00       	call   c000ffa2 <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd711c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 8e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd7120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 8f 02 c0       	add    eax,0xc0028f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 8e 02 c0       	mov    ds:0xc0028ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 b3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 93 02 c0       	push   0xc0029300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 4c 5b 00 00       	call   c000d15d <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 3e 86 00 00       	call   c000fc5b <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007628:	68 d3 2c 02 c0       	push   0xc0022cd3
c000762d:	50                   	push   eax
c000762e:	e8 ff 0a 00 00       	call   c0008132 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 62 2d 02 c0       	push   0xc0022d62
c0007642:	e8 5b 89 00 00       	call   c000ffa2 <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 c1 0d 00 00       	call   c0008414 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 ec 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 7f 2d 02 c0       	push   0xc0022d7f
c0007673:	e8 2a 89 00 00       	call   c000ffa2 <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 2a 0b 00 00       	call   c00081ae <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 b2 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 9c 2d 02 c0       	push   0xc0022d9c
c00076ad:	e8 f0 88 00 00       	call   c000ffa2 <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 b3 02 c0    	inc    DWORD PTR ds:0xc002b300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 90 0a 00 00       	call   c00081ae <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 8e 02 c0    	cmp    DWORD PTR ds:0xc0028ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 8f 02 c0       	add    eax,0xc0028f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 8e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd7120]
c0007790:	8b 14 dd e4 8e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd711c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 af 84 00 00       	call   c000fc5b <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00077b7:	68 d3 2c 02 c0       	push   0xc0022cd3
c00077bc:	50                   	push   eax
c00077bd:	e8 70 09 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 b7 2d 02 c0       	push   0xc0022db7
c00077d1:	e8 cc 87 00 00       	call   c000ffa2 <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 30 0c 00 00       	call   c0008414 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 5b 09 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 d2 2d 02 c0       	push   0xc0022dd2
c0007804:	e8 99 87 00 00       	call   c000ffa2 <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 45 09 00 00       	call   c00081ae <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 27 09 00 00       	call   c00081ae <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 88 83 00 00       	call   c000fc5b <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 4d 08 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 56 08 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 bd 0a 00 00       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 97 07 00 00       	call   c00081ae <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 7e 07 00 00       	call   c00081ae <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 fe 81 00 00       	call   c000fc5b <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 c5 06 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be ed 2d 02 c0       	mov    esi,0xc0022ded
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 5a 06 00 00       	call   c00081ae <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 42 06 00 00       	call   c00081ae <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba c4 2e 02 c0       	mov    edx,0xc0022ec4
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 2b b4 00 00       	call   c001311a <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 c8 55 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba e0 2e 02 c0       	mov    edx,0xc0022ee0
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 dd b3 00 00       	call   c001311a <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 7a 55 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba 58 2e 02 c0       	mov    edx,0xc0022e58
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 b3 02 c0    	mov    edx,DWORD PTR ds:0xc002b304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 b3 02 c0       	mov    ds:0xc002b304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba 58 2e 02 c0       	mov    edx,0xc0022e58
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 24 55 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 61 7e 00 00       	call   c000fc5b <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 96 3d 01 00       	call   c001bb98 <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 4d 7e 00 00       	call   c000fc5b <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 ae 4c 01 00       	call   c001cac4 <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 17 4a 02 c0       	push   0xc0024a17
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 f6 2d 02 c0       	push   0xc0022df6
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 11 2e 02 c0       	push   0xc0022e11
c000801f:	e8 7e 7f 00 00       	call   c000ffa2 <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 e6 ae 00 00       	call   c0012f34 <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba c4 2e 02 c0       	mov    edx,0xc0022ec4
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080a4:	83 c2 0d             	add    edx,0xd
c00080a7:	83 ec 04             	sub    esp,0x4
c00080aa:	50                   	push   eax
c00080ab:	52                   	push   edx
c00080ac:	68 37 2e 02 c0       	push   0xc0022e37
c00080b1:	e8 ae ee ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00080b6:	83 c4 10             	add    esp,0x10
c00080b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080c0:	83 e8 41             	sub    eax,0x41
c00080c3:	88 c2                	mov    dl,al
c00080c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080e1:	0f b6 c0             	movzx  eax,al
c00080e4:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00080eb:	85 c0                	test   eax,eax
c00080ed:	74 3e                	je     c000812d <File::File(char const*, Process*, bool)+0xf9>
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f9:	0f b6 c0             	movzx  eax,al
c00080fc:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008103:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008109:	85 c0                	test   eax,eax
c000810b:	75 20                	jne    c000812d <File::File(char const*, Process*, bool)+0xf9>
c000810d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008111:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008117:	0f b6 c0             	movzx  eax,al
c000811a:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008121:	83 ec 0c             	sub    esp,0xc
c0008124:	50                   	push   eax
c0008125:	e8 64 28 00 00       	call   c000a98e <LogicalDisk::mount()>
c000812a:	83 c4 10             	add    esp,0x10
c000812d:	90                   	nop
c000812e:	83 c4 1c             	add    esp,0x1c
c0008131:	c3                   	ret    

c0008132 <File::File(char const*, Process*)>:
c0008132:	83 ec 0c             	sub    esp,0xc
c0008135:	6a 01                	push   0x1
c0008137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008143:	e8 ec fe ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	90                   	nop
c000814c:	83 c4 0c             	add    esp,0xc
c000814f:	c3                   	ret    

c0008150 <File::open(FileOpenMode)>:
c0008150:	53                   	push   ebx
c0008151:	b8 0b 00 00 00       	mov    eax,0xb
c0008156:	83 ec 08             	sub    esp,0x8
c0008159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000815d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008164:	83 fa 19             	cmp    edx,0x19
c0008167:	77 40                	ja     c00081a9 <File::open(FileOpenMode)+0x59>
c0008169:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008170:	85 d2                	test   edx,edx
c0008172:	74 35                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c0008174:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000817a:	85 d2                	test   edx,edx
c000817c:	74 2b                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c000817e:	b8 06 00 00 00       	mov    eax,0x6
c0008183:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008187:	75 20                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c0008189:	8b 02                	mov    eax,DWORD PTR [edx]
c000818b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008195:	51                   	push   ecx
c0008196:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008199:	51                   	push   ecx
c000819a:	52                   	push   edx
c000819b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	85 c0                	test   eax,eax
c00081a3:	75 04                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c00081a5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a9:	83 c4 08             	add    esp,0x8
c00081ac:	5b                   	pop    ebx
c00081ad:	c3                   	ret    

c00081ae <File::close()>:
c00081ae:	53                   	push   ebx
c00081af:	b8 0b 00 00 00       	mov    eax,0xb
c00081b4:	83 ec 08             	sub    esp,0x8
c00081b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081c2:	83 f9 19             	cmp    ecx,0x19
c00081c5:	77 41                	ja     c0008208 <File::close()+0x5a>
c00081c7:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c00081ce:	85 db                	test   ebx,ebx
c00081d0:	74 36                	je     c0008208 <File::close()+0x5a>
c00081d2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d9:	74 2d                	je     c0008208 <File::close()+0x5a>
c00081db:	b8 05 00 00 00       	mov    eax,0x5
c00081e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081e4:	74 22                	je     c0008208 <File::close()+0x5a>
c00081e6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ea:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c00081f1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f7:	53                   	push   ebx
c00081f8:	53                   	push   ebx
c00081f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008201:	50                   	push   eax
c0008202:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	83 c4 08             	add    esp,0x8
c000820b:	5b                   	pop    ebx
c000820c:	c3                   	ret    
c000820d:	90                   	nop

c000820e <File::seek(unsigned long long)>:
c000820e:	56                   	push   esi
c000820f:	53                   	push   ebx
c0008210:	b8 0b 00 00 00       	mov    eax,0xb
c0008215:	51                   	push   ecx
c0008216:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000821a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000821e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008225:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008229:	83 fa 19             	cmp    edx,0x19
c000822c:	77 31                	ja     c000825f <File::seek(unsigned long long)+0x51>
c000822e:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c0008235:	85 d2                	test   edx,edx
c0008237:	74 26                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008239:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000823f:	85 d2                	test   edx,edx
c0008241:	74 1c                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008243:	b8 05 00 00 00       	mov    eax,0x5
c0008248:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000824c:	74 11                	je     c000825f <File::seek(unsigned long long)+0x51>
c000824e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008250:	53                   	push   ebx
c0008251:	51                   	push   ecx
c0008252:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008258:	52                   	push   edx
c0008259:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000825c:	83 c4 10             	add    esp,0x10
c000825f:	5a                   	pop    edx
c0008260:	5b                   	pop    ebx
c0008261:	5e                   	pop    esi
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::truncate(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	53                   	push   ebx
c0008266:	b8 0b 00 00 00       	mov    eax,0xb
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008299:	b8 05 00 00 00       	mov    eax,0x5
c000829e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a2:	74 11                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::tell(unsigned long long*)>:
c00082ba:	83 ec 0c             	sub    esp,0xc
c00082bd:	b8 0b 00 00 00       	mov    eax,0xb
c00082c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082cd:	83 fa 19             	cmp    edx,0x19
c00082d0:	77 34                	ja     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082d2:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00082d9:	85 d2                	test   edx,edx
c00082db:	74 29                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 1f                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082e7:	b8 05 00 00 00       	mov    eax,0x5
c00082ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082f0:	74 14                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082f2:	50                   	push   eax
c00082f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082ff:	52                   	push   edx
c0008300:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008303:	83 c4 10             	add    esp,0x10
c0008306:	83 c4 0c             	add    esp,0xc
c0008309:	c3                   	ret    

c000830a <File::rewind()>:
c000830a:	83 ec 10             	sub    esp,0x10
c000830d:	6a 00                	push   0x0
c000830f:	6a 00                	push   0x0
c0008311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008315:	e8 f4 fe ff ff       	call   c000820e <File::seek(unsigned long long)>
c000831a:	83 c4 1c             	add    esp,0x1c
c000831d:	c3                   	ret    

c000831e <File::unlink()>:
c000831e:	83 ec 0c             	sub    esp,0xc
c0008321:	b8 0b 00 00 00       	mov    eax,0xb
c0008326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000832a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008331:	83 f9 19             	cmp    ecx,0x19
c0008334:	77 2f                	ja     c0008365 <File::unlink()+0x47>
c0008336:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000833d:	85 c9                	test   ecx,ecx
c000833f:	74 24                	je     c0008365 <File::unlink()+0x47>
c0008341:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008347:	85 c9                	test   ecx,ecx
c0008349:	74 1a                	je     c0008365 <File::unlink()+0x47>
c000834b:	b8 06 00 00 00       	mov    eax,0x6
c0008350:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008354:	75 0f                	jne    c0008365 <File::unlink()+0x47>
c0008356:	83 c2 0d             	add    edx,0xd
c0008359:	50                   	push   eax
c000835a:	50                   	push   eax
c000835b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000835d:	52                   	push   edx
c000835e:	51                   	push   ecx
c000835f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008362:	83 c4 10             	add    esp,0x10
c0008365:	83 c4 0c             	add    esp,0xc
c0008368:	c3                   	ret    
c0008369:	90                   	nop

c000836a <File::rename(char const*)>:
c000836a:	83 ec 0c             	sub    esp,0xc
c000836d:	b8 0b 00 00 00       	mov    eax,0xb
c0008372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008376:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000837d:	83 f9 19             	cmp    ecx,0x19
c0008380:	77 32                	ja     c00083b4 <File::rename(char const*)+0x4a>
c0008382:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008389:	85 c9                	test   ecx,ecx
c000838b:	74 27                	je     c00083b4 <File::rename(char const*)+0x4a>
c000838d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 1d                	je     c00083b4 <File::rename(char const*)+0x4a>
c0008397:	b8 06 00 00 00       	mov    eax,0x6
c000839c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a0:	75 12                	jne    c00083b4 <File::rename(char const*)+0x4a>
c00083a2:	83 c2 0d             	add    edx,0xd
c00083a5:	50                   	push   eax
c00083a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083ac:	52                   	push   edx
c00083ad:	51                   	push   ecx
c00083ae:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083b1:	83 c4 10             	add    esp,0x10
c00083b4:	83 c4 0c             	add    esp,0xc
c00083b7:	c3                   	ret    

c00083b8 <File::chfatattr(unsigned char, unsigned char)>:
c00083b8:	57                   	push   edi
c00083b9:	b8 0b 00 00 00       	mov    eax,0xb
c00083be:	56                   	push   esi
c00083bf:	53                   	push   ebx
c00083c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 37                	ja     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 2c                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 22                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083ed:	b8 06 00 00 00       	mov    eax,0x6
c00083f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f6:	75 17                	jne    c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083fa:	89 f0                	mov    eax,esi
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	0f b6 f0             	movzx  esi,al
c0008402:	0f b6 db             	movzx  ebx,bl
c0008405:	56                   	push   esi
c0008406:	53                   	push   ebx
c0008407:	52                   	push   edx
c0008408:	51                   	push   ecx
c0008409:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000840c:	83 c4 10             	add    esp,0x10
c000840f:	5b                   	pop    ebx
c0008410:	5e                   	pop    esi
c0008411:	5f                   	pop    edi
c0008412:	c3                   	ret    
c0008413:	90                   	nop

c0008414 <File::exists()>:
c0008414:	83 ec 0c             	sub    esp,0xc
c0008417:	31 c0                	xor    eax,eax
c0008419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008424:	83 f9 19             	cmp    ecx,0x19
c0008427:	77 24                	ja     c000844d <File::exists()+0x39>
c0008429:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008430:	85 c9                	test   ecx,ecx
c0008432:	74 19                	je     c000844d <File::exists()+0x39>
c0008434:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843a:	85 c9                	test   ecx,ecx
c000843c:	74 0f                	je     c000844d <File::exists()+0x39>
c000843e:	83 c2 0d             	add    edx,0xd
c0008441:	50                   	push   eax
c0008442:	50                   	push   eax
c0008443:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008445:	52                   	push   edx
c0008446:	51                   	push   ecx
c0008447:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	83 c4 0c             	add    esp,0xc
c0008450:	c3                   	ret    
c0008451:	90                   	nop

c0008452 <File::stat(unsigned long long*, bool*)>:
c0008452:	56                   	push   esi
c0008453:	53                   	push   ebx
c0008454:	50                   	push   eax
c0008455:	b8 0b 00 00 00       	mov    eax,0xb
c000845a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000845e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008462:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008469:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000846d:	83 f9 19             	cmp    ecx,0x19
c0008470:	77 3d                	ja     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008472:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008479:	85 c9                	test   ecx,ecx
c000847b:	74 32                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c000847d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008483:	85 c9                	test   ecx,ecx
c0008485:	74 28                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008487:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008489:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000848d:	74 13                	je     c00084a2 <File::stat(unsigned long long*, bool*)+0x50>
c000848f:	83 ec 04             	sub    esp,0x4
c0008492:	56                   	push   esi
c0008493:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008499:	51                   	push   ecx
c000849a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000849d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084a0:	eb 0a                	jmp    c00084ac <File::stat(unsigned long long*, bool*)+0x5a>
c00084a2:	53                   	push   ebx
c00084a3:	83 c2 0d             	add    edx,0xd
c00084a6:	56                   	push   esi
c00084a7:	52                   	push   edx
c00084a8:	51                   	push   ecx
c00084a9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084ac:	83 c4 10             	add    esp,0x10
c00084af:	5a                   	pop    edx
c00084b0:	5b                   	pop    ebx
c00084b1:	5e                   	pop    esi
c00084b2:	c3                   	ret    

c00084b3 <Fs::setcwd(Process*, char*)>:
c00084b3:	55                   	push   ebp
c00084b4:	57                   	push   edi
c00084b5:	56                   	push   esi
c00084b6:	53                   	push   ebx
c00084b7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084bd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084c4:	6a 00                	push   0x0
c00084c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084cc:	57                   	push   edi
c00084cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d8:	56                   	push   esi
c00084d9:	e8 3c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084de:	89 34 24             	mov    DWORD PTR [esp],esi
c00084e1:	e8 8a 80 ff ff       	call   c0000570 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 02             	cmp    eax,0x2
c00084ec:	77 15                	ja     c0008503 <Fs::setcwd(Process*, char*)+0x50>
c00084ee:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084f3:	83 eb 41             	sub    ebx,0x41
c00084f6:	8b 04 9d e0 ba 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd4520]
c00084fd:	85 c0                	test   eax,eax
c00084ff:	75 1c                	jne    c000851d <Fs::setcwd(Process*, char*)+0x6a>
c0008501:	eb 2f                	jmp    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	56                   	push   esi
c0008507:	e8 64 80 ff ff       	call   c0000570 <strlen>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	83 f8 03             	cmp    eax,0x3
c0008512:	75 57                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c0008514:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008519:	75 50                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c000851b:	eb d1                	jmp    c00084ee <Fs::setcwd(Process*, char*)+0x3b>
c000851d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008524:	75 0c                	jne    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008526:	83 ec 0c             	sub    esp,0xc
c0008529:	50                   	push   eax
c000852a:	e8 5f 24 00 00       	call   c000a98e <LogicalDisk::mount()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	b8 03 00 00 00       	mov    eax,0x3
c0008537:	83 fb 19             	cmp    ebx,0x19
c000853a:	0f 87 c6 00 00 00    	ja     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008540:	8b 14 9d e0 ba 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd4520]
c0008547:	b8 05 00 00 00       	mov    eax,0x5
c000854c:	85 d2                	test   edx,edx
c000854e:	0f 84 b2 00 00 00    	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008554:	b8 06 00 00 00       	mov    eax,0x6
c0008559:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008560:	0f 85 92 00 00 00    	jne    c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c0008566:	e9 9b 00 00 00       	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c000856b:	83 ec 0c             	sub    esp,0xc
c000856e:	68 14 01 00 00       	push   0x114
c0008573:	e8 e3 76 00 00       	call   c000fc5b <malloc>
c0008578:	83 c4 0c             	add    esp,0xc
c000857b:	89 c3                	mov    ebx,eax
c000857d:	55                   	push   ebp
c000857e:	56                   	push   esi
c000857f:	50                   	push   eax
c0008580:	e8 ad fb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000858a:	83 c4 0c             	add    esp,0xc
c000858d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008591:	50                   	push   eax
c0008592:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008596:	50                   	push   eax
c0008597:	53                   	push   ebx
c0008598:	e8 b5 fe ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000859d:	83 c4 10             	add    esp,0x10
c00085a0:	83 f8 02             	cmp    eax,0x2
c00085a3:	74 27                	je     c00085cc <Fs::setcwd(Process*, char*)+0x119>
c00085a5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085aa:	75 1c                	jne    c00085c8 <Fs::setcwd(Process*, char*)+0x115>
c00085ac:	b8 02 00 00 00       	mov    eax,0x2
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 51                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 02 00 00 00       	mov    eax,0x2
c00085c6:	eb 3e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 c0                	test   eax,eax
c00085ca:	74 1c                	je     c00085e8 <Fs::setcwd(Process*, char*)+0x135>
c00085cc:	b8 01 00 00 00       	mov    eax,0x1
c00085d1:	85 db                	test   ebx,ebx
c00085d3:	74 31                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085d5:	83 ec 0c             	sub    esp,0xc
c00085d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085da:	53                   	push   ebx
c00085db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085de:	83 c4 10             	add    esp,0x10
c00085e1:	b8 01 00 00 00       	mov    eax,0x1
c00085e6:	eb 1e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085e8:	85 db                	test   ebx,ebx
c00085ea:	74 0c                	je     c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085f1:	53                   	push   ebx
c00085f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	50                   	push   eax
c00085f9:	50                   	push   eax
c00085fa:	56                   	push   esi
c00085fb:	57                   	push   edi
c00085fc:	e8 3f 80 ff ff       	call   c0000640 <strcpy>
c0008601:	83 c4 10             	add    esp,0x10
c0008604:	31 c0                	xor    eax,eax
c0008606:	81 c4 1c 02 00 00    	add    esp,0x21c
c000860c:	5b                   	pop    ebx
c000860d:	5e                   	pop    esi
c000860e:	5f                   	pop    edi
c000860f:	5d                   	pop    ebp
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <Directory::Directory(char const*, Process*)>:
c0008612:	83 ec 0c             	sub    esp,0xc
c0008615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008619:	83 ec 08             	sub    esp,0x8
c000861c:	6a 00                	push   0x0
c000861e:	50                   	push   eax
c000861f:	e8 10 a9 00 00       	call   c0012f34 <UnixFile::UnixFile(int)>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	ba e0 2e 02 c0       	mov    edx,0xc0022ee0
c000862c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008630:	89 10                	mov    DWORD PTR [eax],edx
c0008632:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008637:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000863b:	0f 95 c0             	setne  al
c000863e:	0f b6 c0             	movzx  eax,al
c0008641:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008645:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000864b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000864f:	83 c2 0d             	add    edx,0xd
c0008652:	50                   	push   eax
c0008653:	51                   	push   ecx
c0008654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008658:	52                   	push   edx
c0008659:	e8 bc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000865e:	83 c4 10             	add    esp,0x10
c0008661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008665:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008668:	83 e8 41             	sub    eax,0x41
c000866b:	88 c2                	mov    dl,al
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008683:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008689:	0f b6 c0             	movzx  eax,al
c000868c:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c0008693:	85 c0                	test   eax,eax
c0008695:	74 3e                	je     c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c0008697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000869b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086a1:	0f b6 c0             	movzx  eax,al
c00086a4:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086ab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086b1:	85 c0                	test   eax,eax
c00086b3:	75 20                	jne    c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c00086b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086bf:	0f b6 c0             	movzx  eax,al
c00086c2:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c00086c9:	83 ec 0c             	sub    esp,0xc
c00086cc:	50                   	push   eax
c00086cd:	e8 bc 22 00 00       	call   c000a98e <LogicalDisk::mount()>
c00086d2:	83 c4 10             	add    esp,0x10
c00086d5:	90                   	nop
c00086d6:	83 c4 0c             	add    esp,0xc
c00086d9:	c3                   	ret    

c00086da <Directory::open()>:
c00086da:	53                   	push   ebx
c00086db:	b8 0b 00 00 00       	mov    eax,0xb
c00086e0:	83 ec 08             	sub    esp,0x8
c00086e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ee:	83 fa 19             	cmp    edx,0x19
c00086f1:	77 3d                	ja     c0008730 <Directory::open()+0x56>
c00086f3:	8b 14 95 e0 ba 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd4520]
c00086fa:	85 d2                	test   edx,edx
c00086fc:	74 32                	je     c0008730 <Directory::open()+0x56>
c00086fe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008704:	85 d2                	test   edx,edx
c0008706:	74 28                	je     c0008730 <Directory::open()+0x56>
c0008708:	b8 06 00 00 00       	mov    eax,0x6
c000870d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008711:	75 1d                	jne    c0008730 <Directory::open()+0x56>
c0008713:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008719:	50                   	push   eax
c000871a:	8b 02                	mov    eax,DWORD PTR [edx]
c000871c:	51                   	push   ecx
c000871d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008720:	51                   	push   ecx
c0008721:	52                   	push   edx
c0008722:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008725:	83 c4 10             	add    esp,0x10
c0008728:	85 c0                	test   eax,eax
c000872a:	75 04                	jne    c0008730 <Directory::open()+0x56>
c000872c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008730:	83 c4 08             	add    esp,0x8
c0008733:	5b                   	pop    ebx
c0008734:	c3                   	ret    
c0008735:	90                   	nop

c0008736 <Directory::close()>:
c0008736:	53                   	push   ebx
c0008737:	b8 0b 00 00 00       	mov    eax,0xb
c000873c:	83 ec 08             	sub    esp,0x8
c000873f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008743:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000874a:	83 f9 19             	cmp    ecx,0x19
c000874d:	77 41                	ja     c0008790 <Directory::close()+0x5a>
c000874f:	8b 1c 8d e0 ba 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd4520]
c0008756:	85 db                	test   ebx,ebx
c0008758:	74 36                	je     c0008790 <Directory::close()+0x5a>
c000875a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008761:	74 2d                	je     c0008790 <Directory::close()+0x5a>
c0008763:	b8 05 00 00 00       	mov    eax,0x5
c0008768:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000876c:	74 22                	je     c0008790 <Directory::close()+0x5a>
c000876e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008772:	8b 04 8d e0 ba 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd4520]
c0008779:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000877f:	53                   	push   ebx
c0008780:	53                   	push   ebx
c0008781:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008783:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008789:	50                   	push   eax
c000878a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 08             	add    esp,0x8
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <Directory::unlink()>:
c0008796:	83 ec 0c             	sub    esp,0xc
c0008799:	b8 0b 00 00 00       	mov    eax,0xb
c000879e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a9:	83 f9 19             	cmp    ecx,0x19
c00087ac:	77 2f                	ja     c00087dd <Directory::unlink()+0x47>
c00087ae:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00087b5:	85 c9                	test   ecx,ecx
c00087b7:	74 24                	je     c00087dd <Directory::unlink()+0x47>
c00087b9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087bf:	85 c9                	test   ecx,ecx
c00087c1:	74 1a                	je     c00087dd <Directory::unlink()+0x47>
c00087c3:	b8 06 00 00 00       	mov    eax,0x6
c00087c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087cc:	75 0f                	jne    c00087dd <Directory::unlink()+0x47>
c00087ce:	83 c2 0d             	add    edx,0xd
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087d5:	52                   	push   edx
c00087d6:	51                   	push   ecx
c00087d7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	83 c4 0c             	add    esp,0xc
c00087e0:	c3                   	ret    
c00087e1:	90                   	nop

c00087e2 <Directory::rename(char const*)>:
c00087e2:	83 ec 0c             	sub    esp,0xc
c00087e5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087f5:	83 f9 19             	cmp    ecx,0x19
c00087f8:	77 32                	ja     c000882c <Directory::rename(char const*)+0x4a>
c00087fa:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0008801:	85 c9                	test   ecx,ecx
c0008803:	74 27                	je     c000882c <Directory::rename(char const*)+0x4a>
c0008805:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 1d                	je     c000882c <Directory::rename(char const*)+0x4a>
c000880f:	b8 06 00 00 00       	mov    eax,0x6
c0008814:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008818:	75 12                	jne    c000882c <Directory::rename(char const*)+0x4a>
c000881a:	83 c2 0d             	add    edx,0xd
c000881d:	50                   	push   eax
c000881e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008820:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008824:	52                   	push   edx
c0008825:	51                   	push   ecx
c0008826:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008829:	83 c4 10             	add    esp,0x10
c000882c:	83 c4 0c             	add    esp,0xc
c000882f:	c3                   	ret    

c0008830 <Directory::exists()>:
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	31 c0                	xor    eax,eax
c0008835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008839:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008840:	83 f9 19             	cmp    ecx,0x19
c0008843:	77 24                	ja     c0008869 <Directory::exists()+0x39>
c0008845:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000884c:	85 c9                	test   ecx,ecx
c000884e:	74 19                	je     c0008869 <Directory::exists()+0x39>
c0008850:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008856:	85 c9                	test   ecx,ecx
c0008858:	74 0f                	je     c0008869 <Directory::exists()+0x39>
c000885a:	83 c2 0d             	add    edx,0xd
c000885d:	50                   	push   eax
c000885e:	50                   	push   eax
c000885f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008861:	52                   	push   edx
c0008862:	51                   	push   ecx
c0008863:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008866:	83 c4 10             	add    esp,0x10
c0008869:	83 c4 0c             	add    esp,0xc
c000886c:	c3                   	ret    
c000886d:	90                   	nop

c000886e <Directory::read(dirent*)>:
c000886e:	83 ec 1c             	sub    esp,0x1c
c0008871:	b8 0b 00 00 00       	mov    eax,0xb
c0008876:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000887a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008881:	83 f9 19             	cmp    ecx,0x19
c0008884:	77 30                	ja     c00088b6 <Directory::read(dirent*)+0x48>
c0008886:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c000888d:	85 c9                	test   ecx,ecx
c000888f:	74 25                	je     c00088b6 <Directory::read(dirent*)+0x48>
c0008891:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008898:	74 1c                	je     c00088b6 <Directory::read(dirent*)+0x48>
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	8b 02                	mov    eax,DWORD PTR [edx]
c000889f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088a3:	51                   	push   ecx
c00088a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a8:	6a 00                	push   0x0
c00088aa:	68 10 01 00 00       	push   0x110
c00088af:	52                   	push   edx
c00088b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088b3:	83 c4 20             	add    esp,0x20
c00088b6:	83 c4 1c             	add    esp,0x1c
c00088b9:	c3                   	ret    

c00088ba <Directory::create()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	b8 0b 00 00 00       	mov    eax,0xb
c00088c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088cd:	83 f9 19             	cmp    ecx,0x19
c00088d0:	77 2f                	ja     c0008901 <Directory::create()+0x47>
c00088d2:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c00088d9:	85 c9                	test   ecx,ecx
c00088db:	74 24                	je     c0008901 <Directory::create()+0x47>
c00088dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 1a                	je     c0008901 <Directory::create()+0x47>
c00088e7:	b8 06 00 00 00       	mov    eax,0x6
c00088ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088f0:	75 0f                	jne    c0008901 <Directory::create()+0x47>
c00088f2:	83 c2 0d             	add    edx,0xd
c00088f5:	50                   	push   eax
c00088f6:	50                   	push   eax
c00088f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f9:	52                   	push   edx
c00088fa:	51                   	push   ecx
c00088fb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088fe:	83 c4 10             	add    esp,0x10
c0008901:	83 c4 0c             	add    esp,0xc
c0008904:	c3                   	ret    
c0008905:	90                   	nop

c0008906 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008906:	b8 0a 00 00 00       	mov    eax,0xa
c000890b:	c3                   	ret    

c000890c <Bus::Bus(char const*)>:
c000890c:	83 ec 0c             	sub    esp,0xc
c000890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891a:	50                   	push   eax
c000891b:	e8 3c 12 00 00       	call   c0009b5c <Device::Device(char const*)>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	ba fc 2e 02 c0       	mov    edx,0xc0022efc
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000893c:	90                   	nop
c000893d:	83 c4 0c             	add    esp,0xc
c0008940:	c3                   	ret    
c0008941:	90                   	nop
c0008942:	66 90                	xchg   ax,ax

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	ba fc 2e 02 c0       	mov    edx,0xc0022efc
c000894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008950:	89 10                	mov    DWORD PTR [eax],edx
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	50                   	push   eax
c000895a:	e8 9d 0f 00 00       	call   c00098fc <Device::~Device()>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	90                   	nop
c0008963:	83 c4 0c             	add    esp,0xc
c0008966:	c3                   	ret    
c0008967:	90                   	nop

c0008968 <Bus::~Bus()>:
c0008968:	83 ec 0c             	sub    esp,0xc
c000896b:	83 ec 0c             	sub    esp,0xc
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	e8 cd ff ff ff       	call   c0008944 <Bus::~Bus()>
c0008977:	83 c4 10             	add    esp,0x10
c000897a:	83 ec 08             	sub    esp,0x8
c000897d:	68 58 01 00 00       	push   0x158
c0008982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008986:	e8 58 49 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c000898b:	83 c4 10             	add    esp,0x10
c000898e:	83 c4 0c             	add    esp,0xc
c0008991:	c3                   	ret    

c0008992 <KeBeepThread(void*)>:
c0008992:	83 ec 0c             	sub    esp,0xc
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00089a0:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00089a7:	75 01                	jne    c00089aa <KeBeepThread(void*)+0x18>
c00089a9:	fb                   	sti    
c00089aa:	83 ec 0c             	sub    esp,0xc
c00089ad:	6b c0 0a             	imul   eax,eax,0xa
c00089b0:	50                   	push   eax
c00089b1:	e8 f2 e3 00 00       	call   c0016da8 <milliTenthSleep(unsigned int)>
c00089b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089bd:	e8 41 14 01 00       	call   c0019e03 <HalMakeBeep(int)>
c00089c2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089ca:	83 c4 1c             	add    esp,0x1c
c00089cd:	e9 ae e2 00 00       	jmp    c0016c80 <blockTask(TaskState)>

c00089d2 <KeBeep(int, int, bool)>:
c00089d2:	56                   	push   esi
c00089d3:	53                   	push   ebx
c00089d4:	83 ec 10             	sub    esp,0x10
c00089d7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e3:	e8 1b 14 01 00       	call   c0019e03 <HalMakeBeep(int)>
c00089e8:	83 c4 10             	add    esp,0x10
c00089eb:	89 f0                	mov    eax,esi
c00089ed:	84 c0                	test   al,al
c00089ef:	74 1e                	je     c0008a0f <KeBeep(int, int, bool)+0x3d>
c00089f1:	83 ec 0c             	sub    esp,0xc
c00089f4:	6b db 0a             	imul   ebx,ebx,0xa
c00089f7:	53                   	push   ebx
c00089f8:	e8 ab e3 00 00       	call   c0016da8 <milliTenthSleep(unsigned int)>
c00089fd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a05:	83 c4 14             	add    esp,0x14
c0008a08:	5b                   	pop    ebx
c0008a09:	5e                   	pop    esi
c0008a0a:	e9 f4 13 01 00       	jmp    c0019e03 <HalMakeBeep(int)>
c0008a0f:	68 e6 00 00 00       	push   0xe6
c0008a14:	53                   	push   ebx
c0008a15:	68 92 89 00 c0       	push   0xc0008992
c0008a1a:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0008a20:	e8 43 df 00 00       	call   c0016968 <Process::createThread(void (*)(void*), void*, int)>
c0008a25:	83 c4 14             	add    esp,0x14
c0008a28:	5b                   	pop    ebx
c0008a29:	5e                   	pop    esi
c0008a2a:	c3                   	ret    
c0008a2b:	90                   	nop

c0008a2c <KeLoadTimezoneStrings()>:
c0008a2c:	55                   	push   ebp
c0008a2d:	89 e5                	mov    ebp,esp
c0008a2f:	53                   	push   ebx
c0008a30:	83 ec 44             	sub    esp,0x44
c0008a33:	c6 05 20 b3 02 c0 01 	mov    BYTE PTR ds:0xc002b320,0x1
c0008a3a:	c7 45 dc 14 01 00 00 	mov    DWORD PTR [ebp-0x24],0x114
c0008a41:	83 ec 0c             	sub    esp,0xc
c0008a44:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
c0008a47:	e8 0f 72 00 00       	call   c000fc5b <malloc>
c0008a4c:	83 c4 10             	add    esp,0x10
c0008a4f:	89 c3                	mov    ebx,eax
c0008a51:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0008a56:	83 ec 04             	sub    esp,0x4
c0008a59:	50                   	push   eax
c0008a5a:	68 20 2f 02 c0       	push   0xc0022f20
c0008a5f:	53                   	push   ebx
c0008a60:	e8 cd f6 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008a65:	83 c4 10             	add    esp,0x10
c0008a68:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0008a6b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008a6f:	75 10                	jne    c0008a81 <KeLoadTimezoneStrings()+0x55>
c0008a71:	83 ec 0c             	sub    esp,0xc
c0008a74:	68 3f 2f 02 c0       	push   0xc0022f3f
c0008a79:	e8 24 75 00 00       	call   c000ffa2 <KePanic(char const*)>
c0008a7e:	83 c4 10             	add    esp,0x10
c0008a81:	83 ec 08             	sub    esp,0x8
c0008a84:	6a 01                	push   0x1
c0008a86:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008a89:	e8 c2 f6 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0008a8e:	83 c4 10             	add    esp,0x10
c0008a91:	83 ec 04             	sub    esp,0x4
c0008a94:	8d 45 cf             	lea    eax,[ebp-0x31]
c0008a97:	50                   	push   eax
c0008a98:	8d 45 d0             	lea    eax,[ebp-0x30]
c0008a9b:	50                   	push   eax
c0008a9c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008a9f:	e8 ae f9 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0008aa4:	83 c4 10             	add    esp,0x10
c0008aa7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008aaa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008aad:	83 ec 08             	sub    esp,0x8
c0008ab0:	50                   	push   eax
c0008ab1:	68 55 2f 02 c0       	push   0xc0022f55
c0008ab6:	e8 a9 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008abb:	83 c4 10             	add    esp,0x10
c0008abe:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ac1:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008ac4:	83 c0 01             	add    eax,0x1
c0008ac7:	83 ec 0c             	sub    esp,0xc
c0008aca:	50                   	push   eax
c0008acb:	e8 8b 71 00 00       	call   c000fc5b <malloc>
c0008ad0:	83 c4 10             	add    esp,0x10
c0008ad3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0008ad6:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008ad9:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008adc:	83 ec 04             	sub    esp,0x4
c0008adf:	50                   	push   eax
c0008ae0:	6a 00                	push   0x0
c0008ae2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008ae5:	e8 06 7a ff ff       	call   c00004f0 <memset>
c0008aea:	83 c4 10             	add    esp,0x10
c0008aed:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0008af2:	83 c0 0c             	add    eax,0xc
c0008af5:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008af7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0008afa:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0008afd:	83 ec 0c             	sub    esp,0xc
c0008b00:	8d 5d c8             	lea    ebx,[ebp-0x38]
c0008b03:	53                   	push   ebx
c0008b04:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0008b07:	52                   	push   edx
c0008b08:	50                   	push   eax
c0008b09:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b0c:	ff d1                	call   ecx
c0008b0e:	83 c4 20             	add    esp,0x20
c0008b11:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0008b14:	83 ec 08             	sub    esp,0x8
c0008b17:	50                   	push   eax
c0008b18:	68 65 2f 02 c0       	push   0xc0022f65
c0008b1d:	e8 42 e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b22:	83 c4 10             	add    esp,0x10
c0008b25:	83 ec 0c             	sub    esp,0xc
c0008b28:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b2b:	e8 7e f6 ff ff       	call   c00081ae <File::close()>
c0008b30:	83 c4 10             	add    esp,0x10
c0008b33:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0008b37:	74 15                	je     c0008b4e <KeLoadTimezoneStrings()+0x122>
c0008b39:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0008b3c:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b3e:	83 c0 08             	add    eax,0x8
c0008b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0008b43:	83 ec 0c             	sub    esp,0xc
c0008b46:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0008b49:	ff d0                	call   eax
c0008b4b:	83 c4 10             	add    esp,0x10
c0008b4e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0008b55:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c0008b5c:	81 7d f0 c7 00 00 00 	cmp    DWORD PTR [ebp-0x10],0xc7
c0008b63:	7f 3a                	jg     c0008b9f <KeLoadTimezoneStrings()+0x173>
c0008b65:	83 ec 0c             	sub    esp,0xc
c0008b68:	6a 78                	push   0x78
c0008b6a:	e8 ec 70 00 00       	call   c000fc5b <malloc>
c0008b6f:	83 c4 10             	add    esp,0x10
c0008b72:	89 c2                	mov    edx,eax
c0008b74:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b77:	89 14 85 40 b3 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4cc0],edx
c0008b7e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0008b81:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008b88:	83 ec 08             	sub    esp,0x8
c0008b8b:	68 6e 2f 02 c0       	push   0xc0022f6e
c0008b90:	50                   	push   eax
c0008b91:	e8 aa 7a ff ff       	call   c0000640 <strcpy>
c0008b96:	83 c4 10             	add    esp,0x10
c0008b99:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c0008b9d:	eb bd                	jmp    c0008b5c <KeLoadTimezoneStrings()+0x130>
c0008b9f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0008ba6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008ba9:	8d 50 01             	lea    edx,[eax+0x1]
c0008bac:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0008baf:	89 c2                	mov    edx,eax
c0008bb1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0008bb4:	01 d0                	add    eax,edx
c0008bb6:	8a 00                	mov    al,BYTE PTR [eax]
c0008bb8:	88 45 c6             	mov    BYTE PTR [ebp-0x3a],al
c0008bbb:	c6 45 c7 00          	mov    BYTE PTR [ebp-0x39],0x0
c0008bbf:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bc2:	0f be c0             	movsx  eax,al
c0008bc5:	83 f8 0d             	cmp    eax,0xd
c0008bc8:	0f 84 82 01 00 00    	je     c0008d50 <KeLoadTimezoneStrings()+0x324>
c0008bce:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008bd1:	0f be c0             	movsx  eax,al
c0008bd4:	83 f8 09             	cmp    eax,0x9
c0008bd7:	75 44                	jne    c0008c1d <KeLoadTimezoneStrings()+0x1f1>
c0008bd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008bdc:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008be3:	83 ec 0c             	sub    esp,0xc
c0008be6:	50                   	push   eax
c0008be7:	e8 84 79 ff ff       	call   c0000570 <strlen>
c0008bec:	83 c4 10             	add    esp,0x10
c0008bef:	83 f8 08             	cmp    eax,0x8
c0008bf2:	0f 96 c0             	setbe  al
c0008bf5:	0f b6 c0             	movzx  eax,al
c0008bf8:	85 c0                	test   eax,eax
c0008bfa:	0f 84 56 01 00 00    	je     c0008d56 <KeLoadTimezoneStrings()+0x32a>
c0008c00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c03:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c0a:	83 ec 08             	sub    esp,0x8
c0008c0d:	68 6e 2f 02 c0       	push   0xc0022f6e
c0008c12:	50                   	push   eax
c0008c13:	e8 28 7c ff ff       	call   c0000840 <strcat>
c0008c18:	83 c4 10             	add    esp,0x10
c0008c1b:	eb bc                	jmp    c0008bd9 <KeLoadTimezoneStrings()+0x1ad>
c0008c1d:	8a 45 c6             	mov    al,BYTE PTR [ebp-0x3a]
c0008c20:	0f be c0             	movsx  eax,al
c0008c23:	83 f8 0a             	cmp    eax,0xa
c0008c26:	0f 85 9b 00 00 00    	jne    c0008cc7 <KeLoadTimezoneStrings()+0x29b>
c0008c2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c2f:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c36:	83 ec 0c             	sub    esp,0xc
c0008c39:	50                   	push   eax
c0008c3a:	e8 31 79 ff ff       	call   c0000570 <strlen>
c0008c3f:	83 c4 10             	add    esp,0x10
c0008c42:	83 f8 35             	cmp    eax,0x35
c0008c45:	0f 96 c0             	setbe  al
c0008c48:	0f b6 c0             	movzx  eax,al
c0008c4b:	85 c0                	test   eax,eax
c0008c4d:	74 1d                	je     c0008c6c <KeLoadTimezoneStrings()+0x240>
c0008c4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c52:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008c59:	83 ec 08             	sub    esp,0x8
c0008c5c:	68 6e 2f 02 c0       	push   0xc0022f6e
c0008c61:	50                   	push   eax
c0008c62:	e8 d9 7b ff ff       	call   c0000840 <strcat>
c0008c67:	83 c4 10             	add    esp,0x10
c0008c6a:	eb c0                	jmp    c0008c2c <KeLoadTimezoneStrings()+0x200>
c0008c6c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0008c70:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0008c73:	89 c2                	mov    edx,eax
c0008c75:	c1 fa 1f             	sar    edx,0x1f
c0008c78:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0008c7b:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0008c7e:	39 c8                	cmp    eax,ecx
c0008c80:	89 d0                	mov    eax,edx
c0008c82:	19 d8                	sbb    eax,ebx
c0008c84:	0f 82 d2 00 00 00    	jb     c0008d5c <KeLoadTimezoneStrings()+0x330>
c0008c8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008c8d:	a3 24 b3 02 c0       	mov    ds:0xc002b324,eax
c0008c92:	83 ec 08             	sub    esp,0x8
c0008c95:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008c98:	68 70 2f 02 c0       	push   0xc0022f70
c0008c9d:	e8 c2 e2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008ca2:	83 c4 10             	add    esp,0x10
c0008ca5:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008caa:	83 ec 08             	sub    esp,0x8
c0008cad:	50                   	push   eax
c0008cae:	68 85 2f 02 c0       	push   0xc0022f85
c0008cb3:	e8 ac e2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008cb8:	83 c4 10             	add    esp,0x10
c0008cbb:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0008cc2:	e9 9b 00 00 00       	jmp    c0008d62 <KeLoadTimezoneStrings()+0x336>
c0008cc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008cca:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cd1:	83 ec 0c             	sub    esp,0xc
c0008cd4:	50                   	push   eax
c0008cd5:	e8 96 78 ff ff       	call   c0000570 <strlen>
c0008cda:	83 c4 10             	add    esp,0x10
c0008cdd:	83 f8 31             	cmp    eax,0x31
c0008ce0:	0f 96 c0             	setbe  al
c0008ce3:	0f b6 c0             	movzx  eax,al
c0008ce6:	85 c0                	test   eax,eax
c0008ce8:	74 1f                	je     c0008d09 <KeLoadTimezoneStrings()+0x2dd>
c0008cea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008ced:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008cf4:	83 ec 08             	sub    esp,0x8
c0008cf7:	8d 55 c6             	lea    edx,[ebp-0x3a]
c0008cfa:	52                   	push   edx
c0008cfb:	50                   	push   eax
c0008cfc:	e8 3f 7b ff ff       	call   c0000840 <strcat>
c0008d01:	83 c4 10             	add    esp,0x10
c0008d04:	e9 9d fe ff ff       	jmp    c0008ba6 <KeLoadTimezoneStrings()+0x17a>
c0008d09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d0c:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d13:	83 ec 0c             	sub    esp,0xc
c0008d16:	50                   	push   eax
c0008d17:	e8 54 78 ff ff       	call   c0000570 <strlen>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	83 f8 32             	cmp    eax,0x32
c0008d22:	0f 94 c0             	sete   al
c0008d25:	0f b6 c0             	movzx  eax,al
c0008d28:	85 c0                	test   eax,eax
c0008d2a:	0f 84 76 fe ff ff    	je     c0008ba6 <KeLoadTimezoneStrings()+0x17a>
c0008d30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0008d33:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d3a:	83 ec 08             	sub    esp,0x8
c0008d3d:	68 89 2f 02 c0       	push   0xc0022f89
c0008d42:	50                   	push   eax
c0008d43:	e8 f8 7a ff ff       	call   c0000840 <strcat>
c0008d48:	83 c4 10             	add    esp,0x10
c0008d4b:	e9 56 fe ff ff       	jmp    c0008ba6 <KeLoadTimezoneStrings()+0x17a>
c0008d50:	90                   	nop
c0008d51:	e9 50 fe ff ff       	jmp    c0008ba6 <KeLoadTimezoneStrings()+0x17a>
c0008d56:	90                   	nop
c0008d57:	e9 4a fe ff ff       	jmp    c0008ba6 <KeLoadTimezoneStrings()+0x17a>
c0008d5c:	90                   	nop
c0008d5d:	e9 44 fe ff ff       	jmp    c0008ba6 <KeLoadTimezoneStrings()+0x17a>
c0008d62:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d67:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d6a:	7d 49                	jge    c0008db5 <KeLoadTimezoneStrings()+0x389>
c0008d6c:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d71:	39 45 e8             	cmp    DWORD PTR [ebp-0x18],eax
c0008d74:	0f 9c c0             	setl   al
c0008d77:	0f b6 d0             	movzx  edx,al
c0008d7a:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008d7f:	52                   	push   edx
c0008d80:	50                   	push   eax
c0008d81:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008d84:	68 8e 2f 02 c0       	push   0xc0022f8e
c0008d89:	e8 d6 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008d8e:	83 c4 10             	add    esp,0x10
c0008d91:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0008d94:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	50                   	push   eax
c0008d9f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0008da2:	68 9c 2f 02 c0       	push   0xc0022f9c
c0008da7:	e8 b8 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008dac:	83 c4 10             	add    esp,0x10
c0008daf:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
c0008db3:	eb ad                	jmp    c0008d62 <KeLoadTimezoneStrings()+0x336>
c0008db5:	90                   	nop
c0008db6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0008db9:	c9                   	leave  
c0008dba:	c3                   	ret    

c0008dbb <KeGetTimezoneStringFromID(int)>:
c0008dbb:	55                   	push   ebp
c0008dbc:	89 e5                	mov    ebp,esp
c0008dbe:	83 ec 08             	sub    esp,0x8
c0008dc1:	83 ec 08             	sub    esp,0x8
c0008dc4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008dc7:	68 a5 2f 02 c0       	push   0xc0022fa5
c0008dcc:	e8 93 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008dd1:	83 c4 10             	add    esp,0x10
c0008dd4:	a0 20 b3 02 c0       	mov    al,ds:0xc002b320
c0008dd9:	83 f0 01             	xor    eax,0x1
c0008ddc:	0f b6 c0             	movzx  eax,al
c0008ddf:	85 c0                	test   eax,eax
c0008de1:	74 15                	je     c0008df8 <KeGetTimezoneStringFromID(int)+0x3d>
c0008de3:	e8 44 fc ff ff       	call   c0008a2c <KeLoadTimezoneStrings()>
c0008de8:	83 ec 0c             	sub    esp,0xc
c0008deb:	68 c3 2f 02 c0       	push   0xc0022fc3
c0008df0:	e8 6f e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008df5:	83 c4 10             	add    esp,0x10
c0008df8:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008dfd:	83 ec 04             	sub    esp,0x4
c0008e00:	50                   	push   eax
c0008e01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e04:	68 d4 2f 02 c0       	push   0xc0022fd4
c0008e09:	e8 56 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e0e:	83 c4 10             	add    esp,0x10
c0008e11:	a1 24 b3 02 c0       	mov    eax,ds:0xc002b324
c0008e16:	39 45 08             	cmp    DWORD PTR [ebp+0x8],eax
c0008e19:	7d 06                	jge    c0008e21 <KeGetTimezoneStringFromID(int)+0x66>
c0008e1b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
c0008e1f:	79 07                	jns    c0008e28 <KeGetTimezoneStringFromID(int)+0x6d>
c0008e21:	b8 00 00 00 00       	mov    eax,0x0
c0008e26:	eb 2e                	jmp    c0008e56 <KeGetTimezoneStringFromID(int)+0x9b>
c0008e28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e2b:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e32:	83 c0 01             	add    eax,0x1
c0008e35:	83 ec 04             	sub    esp,0x4
c0008e38:	50                   	push   eax
c0008e39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008e3c:	68 e7 2f 02 c0       	push   0xc0022fe7
c0008e41:	e8 1e e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008e46:	83 c4 10             	add    esp,0x10
c0008e49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e4c:	8b 04 85 40 b3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4cc0]
c0008e53:	83 c0 01             	add    eax,0x1
c0008e56:	c9                   	leave  
c0008e57:	c3                   	ret    

c0008e58 <KeUpdateTimezone(char const*)>:
c0008e58:	55                   	push   ebp
c0008e59:	89 e5                	mov    ebp,esp
c0008e5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e5e:	8a 00                	mov    al,BYTE PTR [eax]
c0008e60:	0f be c0             	movsx  eax,al
c0008e63:	83 f8 2b             	cmp    eax,0x2b
c0008e66:	74 11                	je     c0008e79 <KeUpdateTimezone(char const*)+0x21>
c0008e68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e6b:	8a 00                	mov    al,BYTE PTR [eax]
c0008e6d:	0f be c0             	movsx  eax,al
c0008e70:	83 f8 2d             	cmp    eax,0x2d
c0008e73:	0f 85 be 00 00 00    	jne    c0008f37 <KeUpdateTimezone(char const*)+0xdf>
c0008e79:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008e80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e83:	83 c0 02             	add    eax,0x2
c0008e86:	8a 00                	mov    al,BYTE PTR [eax]
c0008e88:	0f be c0             	movsx  eax,al
c0008e8b:	83 f8 2e             	cmp    eax,0x2e
c0008e8e:	75 10                	jne    c0008ea0 <KeUpdateTimezone(char const*)+0x48>
c0008e90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e93:	83 c0 03             	add    eax,0x3
c0008e96:	8a 00                	mov    al,BYTE PTR [eax]
c0008e98:	0f be c0             	movsx  eax,al
c0008e9b:	83 f8 35             	cmp    eax,0x35
c0008e9e:	74 20                	je     c0008ec0 <KeUpdateTimezone(char const*)+0x68>
c0008ea0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea3:	83 c0 03             	add    eax,0x3
c0008ea6:	8a 00                	mov    al,BYTE PTR [eax]
c0008ea8:	0f be c0             	movsx  eax,al
c0008eab:	83 f8 2e             	cmp    eax,0x2e
c0008eae:	75 14                	jne    c0008ec4 <KeUpdateTimezone(char const*)+0x6c>
c0008eb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb3:	83 c0 04             	add    eax,0x4
c0008eb6:	8a 00                	mov    al,BYTE PTR [eax]
c0008eb8:	0f be c0             	movsx  eax,al
c0008ebb:	83 f8 35             	cmp    eax,0x35
c0008ebe:	75 04                	jne    c0008ec4 <KeUpdateTimezone(char const*)+0x6c>
c0008ec0:	b0 01                	mov    al,0x1
c0008ec2:	eb 02                	jmp    c0008ec6 <KeUpdateTimezone(char const*)+0x6e>
c0008ec4:	b0 00                	mov    al,0x0
c0008ec6:	a2 61 b6 02 c0       	mov    ds:0xc002b661,al
c0008ecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ece:	83 c0 01             	add    eax,0x1
c0008ed1:	8a 00                	mov    al,BYTE PTR [eax]
c0008ed3:	0f be c0             	movsx  eax,al
c0008ed6:	83 e8 30             	sub    eax,0x30
c0008ed9:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008ede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ee1:	83 c0 03             	add    eax,0x3
c0008ee4:	8a 00                	mov    al,BYTE PTR [eax]
c0008ee6:	0f be c0             	movsx  eax,al
c0008ee9:	83 f8 2e             	cmp    eax,0x2e
c0008eec:	75 2e                	jne    c0008f1c <KeUpdateTimezone(char const*)+0xc4>
c0008eee:	8b 15 64 b6 02 c0    	mov    edx,DWORD PTR ds:0xc002b664
c0008ef4:	89 d0                	mov    eax,edx
c0008ef6:	c1 e0 02             	shl    eax,0x2
c0008ef9:	01 d0                	add    eax,edx
c0008efb:	01 c0                	add    eax,eax
c0008efd:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f05:	83 c0 02             	add    eax,0x2
c0008f08:	8a 00                	mov    al,BYTE PTR [eax]
c0008f0a:	0f be c0             	movsx  eax,al
c0008f0d:	8d 50 d0             	lea    edx,[eax-0x30]
c0008f10:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f15:	01 d0                	add    eax,edx
c0008f17:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f1f:	8a 00                	mov    al,BYTE PTR [eax]
c0008f21:	0f be c0             	movsx  eax,al
c0008f24:	83 f8 2d             	cmp    eax,0x2d
c0008f27:	75 26                	jne    c0008f4f <KeUpdateTimezone(char const*)+0xf7>
c0008f29:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0008f2e:	f7 d8                	neg    eax
c0008f30:	a3 64 b6 02 c0       	mov    ds:0xc002b664,eax
c0008f35:	eb 18                	jmp    c0008f4f <KeUpdateTimezone(char const*)+0xf7>
c0008f37:	c6 05 60 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b660,0x0
c0008f3e:	c6 05 61 b6 02 c0 00 	mov    BYTE PTR ds:0xc002b661,0x0
c0008f45:	c7 05 64 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b664,0x0
c0008f4f:	90                   	nop
c0008f50:	5d                   	pop    ebp
c0008f51:	c3                   	ret    

c0008f52 <KeSetTimezone(char const*)>:
c0008f52:	55                   	push   ebp
c0008f53:	89 e5                	mov    ebp,esp
c0008f55:	83 ec 18             	sub    esp,0x18
c0008f58:	83 ec 0c             	sub    esp,0xc
c0008f5b:	68 f4 2f 02 c0       	push   0xc0022ff4
c0008f60:	e8 d3 43 00 00       	call   c000d338 <CmOpen(char const*)>
c0008f65:	83 c4 10             	add    esp,0x10
c0008f68:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008f6b:	83 ec 08             	sub    esp,0x8
c0008f6e:	68 19 30 02 c0       	push   0xc0023019
c0008f73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f76:	e8 bd 4f 00 00       	call   c000df38 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008f7b:	83 c4 10             	add    esp,0x10
c0008f7e:	83 ec 04             	sub    esp,0x4
c0008f81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008f84:	50                   	push   eax
c0008f85:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f88:	e8 7d 48 00 00       	call   c000d80a <CmSetString(Reghive_Tag*, int, char const*)>
c0008f8d:	83 c4 10             	add    esp,0x10
c0008f90:	83 ec 0c             	sub    esp,0xc
c0008f93:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008f96:	e8 bb 44 00 00       	call   c000d456 <CmClose(Reghive_Tag*)>
c0008f9b:	83 c4 10             	add    esp,0x10
c0008f9e:	83 ec 0c             	sub    esp,0xc
c0008fa1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fa4:	e8 af fe ff ff       	call   c0008e58 <KeUpdateTimezone(char const*)>
c0008fa9:	83 c4 10             	add    esp,0x10
c0008fac:	90                   	nop
c0008fad:	c9                   	leave  
c0008fae:	c3                   	ret    

c0008faf <KeSetTimezone(int)>:
c0008faf:	55                   	push   ebp
c0008fb0:	89 e5                	mov    ebp,esp
c0008fb2:	83 ec 18             	sub    esp,0x18
c0008fb5:	83 ec 0c             	sub    esp,0xc
c0008fb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0008fbb:	e8 fb fd ff ff       	call   c0008dbb <KeGetTimezoneStringFromID(int)>
c0008fc0:	83 c4 10             	add    esp,0x10
c0008fc3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0008fc6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0008fca:	74 12                	je     c0008fde <KeSetTimezone(int)+0x2f>
c0008fcc:	83 ec 0c             	sub    esp,0xc
c0008fcf:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0008fd2:	e8 7b ff ff ff       	call   c0008f52 <KeSetTimezone(char const*)>
c0008fd7:	83 c4 10             	add    esp,0x10
c0008fda:	b0 01                	mov    al,0x1
c0008fdc:	eb 02                	jmp    c0008fe0 <KeSetTimezone(int)+0x31>
c0008fde:	b0 00                	mov    al,0x0
c0008fe0:	c9                   	leave  
c0008fe1:	c3                   	ret    

c0008fe2 <KeLoadTimezone()>:
c0008fe2:	55                   	push   ebp
c0008fe3:	89 e5                	mov    ebp,esp
c0008fe5:	81 ec 68 02 00 00    	sub    esp,0x268
c0008feb:	c6 85 98 fd ff ff 00 	mov    BYTE PTR [ebp-0x268],0x0
c0008ff2:	83 ec 0c             	sub    esp,0xc
c0008ff5:	68 f4 2f 02 c0       	push   0xc0022ff4
c0008ffa:	e8 39 43 00 00       	call   c000d338 <CmOpen(char const*)>
c0008fff:	83 c4 10             	add    esp,0x10
c0009002:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009005:	83 ec 08             	sub    esp,0x8
c0009008:	68 19 30 02 c0       	push   0xc0023019
c000900d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009010:	e8 23 4f 00 00       	call   c000df38 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0009015:	83 c4 10             	add    esp,0x10
c0009018:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000901b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000901f:	7e 18                	jle    c0009039 <KeLoadTimezone()+0x57>
c0009021:	83 ec 04             	sub    esp,0x4
c0009024:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c000902a:	50                   	push   eax
c000902b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000902e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0009031:	e8 72 44 00 00       	call   c000d4a8 <CmGetString(Reghive_Tag*, int, char*)>
c0009036:	83 c4 10             	add    esp,0x10
c0009039:	83 ec 0c             	sub    esp,0xc
c000903c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c000903f:	e8 12 44 00 00       	call   c000d456 <CmClose(Reghive_Tag*)>
c0009044:	83 c4 10             	add    esp,0x10
c0009047:	83 ec 0c             	sub    esp,0xc
c000904a:	8d 85 98 fd ff ff    	lea    eax,[ebp-0x268]
c0009050:	50                   	push   eax
c0009051:	e8 02 fe ff ff       	call   c0008e58 <KeUpdateTimezone(char const*)>
c0009056:	83 c4 10             	add    esp,0x10
c0009059:	90                   	nop
c000905a:	c9                   	leave  
c000905b:	c3                   	ret    

c000905c <Clock::Clock(char const*)>:
c000905c:	83 ec 0c             	sub    esp,0xc
c000905f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009063:	83 ec 08             	sub    esp,0x8
c0009066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000906a:	50                   	push   eax
c000906b:	e8 ec 0a 00 00       	call   c0009b5c <Device::Device(char const*)>
c0009070:	83 c4 10             	add    esp,0x10
c0009073:	ba 78 30 02 c0       	mov    edx,0xc0023078
c0009078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000907c:	89 10                	mov    DWORD PTR [eax],edx
c000907e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009082:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000908c:	90                   	nop
c000908d:	83 c4 0c             	add    esp,0xc
c0009090:	c3                   	ret    
c0009091:	90                   	nop

c0009092 <Clock::~Clock()>:
c0009092:	83 ec 0c             	sub    esp,0xc
c0009095:	ba 78 30 02 c0       	mov    edx,0xc0023078
c000909a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000909e:	89 10                	mov    DWORD PTR [eax],edx
c00090a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090a4:	83 ec 0c             	sub    esp,0xc
c00090a7:	50                   	push   eax
c00090a8:	e8 4f 08 00 00       	call   c00098fc <Device::~Device()>
c00090ad:	83 c4 10             	add    esp,0x10
c00090b0:	90                   	nop
c00090b1:	83 c4 0c             	add    esp,0xc
c00090b4:	c3                   	ret    
c00090b5:	90                   	nop

c00090b6 <Clock::~Clock()>:
c00090b6:	83 ec 0c             	sub    esp,0xc
c00090b9:	83 ec 0c             	sub    esp,0xc
c00090bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090c0:	e8 cd ff ff ff       	call   c0009092 <Clock::~Clock()>
c00090c5:	83 c4 10             	add    esp,0x10
c00090c8:	83 ec 08             	sub    esp,0x8
c00090cb:	68 58 01 00 00       	push   0x158
c00090d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090d4:	e8 0a 42 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c00090d9:	83 c4 10             	add    esp,0x10
c00090dc:	83 c4 0c             	add    esp,0xc
c00090df:	c3                   	ret    

c00090e0 <Clock::timeInSecondsLocal()>:
c00090e0:	55                   	push   ebp
c00090e1:	89 e5                	mov    ebp,esp
c00090e3:	53                   	push   ebx
c00090e4:	83 ec 04             	sub    esp,0x4
c00090e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00090ec:	83 c0 24             	add    eax,0x24
c00090ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00090f1:	83 ec 0c             	sub    esp,0xc
c00090f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00090f7:	ff d0                	call   eax
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	89 c1                	mov    ecx,eax
c00090fe:	89 d3                	mov    ebx,edx
c0009100:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009105:	0f b6 d0             	movzx  edx,al
c0009108:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c000910d:	01 c2                	add    edx,eax
c000910f:	89 d0                	mov    eax,edx
c0009111:	01 c0                	add    eax,eax
c0009113:	01 d0                	add    eax,edx
c0009115:	01 c0                	add    eax,eax
c0009117:	01 d0                	add    eax,edx
c0009119:	c1 e0 05             	shl    eax,0x5
c000911c:	01 d0                	add    eax,edx
c000911e:	c1 e0 04             	shl    eax,0x4
c0009121:	89 c2                	mov    edx,eax
c0009123:	c1 fa 1f             	sar    edx,0x1f
c0009126:	01 c1                	add    ecx,eax
c0009128:	11 d3                	adc    ebx,edx
c000912a:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000912f:	0f b6 c0             	movzx  eax,al
c0009132:	85 c0                	test   eax,eax
c0009134:	74 0c                	je     c0009142 <Clock::timeInSecondsLocal()+0x62>
c0009136:	b8 08 07 00 00       	mov    eax,0x708
c000913b:	ba 00 00 00 00       	mov    edx,0x0
c0009140:	eb 0a                	jmp    c000914c <Clock::timeInSecondsLocal()+0x6c>
c0009142:	b8 00 00 00 00       	mov    eax,0x0
c0009147:	ba 00 00 00 00       	mov    edx,0x0
c000914c:	01 c8                	add    eax,ecx
c000914e:	11 da                	adc    edx,ebx
c0009150:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0009153:	c9                   	leave  
c0009154:	c3                   	ret    
c0009155:	90                   	nop

c0009156 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0009156:	55                   	push   ebp
c0009157:	89 e5                	mov    ebp,esp
c0009159:	56                   	push   esi
c000915a:	53                   	push   ebx
c000915b:	83 ec 10             	sub    esp,0x10
c000915e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009161:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009164:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0009167:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000916a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000916d:	8b 00                	mov    eax,DWORD PTR [eax]
c000916f:	83 c0 2c             	add    eax,0x2c
c0009172:	8b 30                	mov    esi,DWORD PTR [eax]
c0009174:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009179:	0f b6 d0             	movzx  edx,al
c000917c:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009181:	01 c2                	add    edx,eax
c0009183:	89 d0                	mov    eax,edx
c0009185:	01 c0                	add    eax,eax
c0009187:	01 d0                	add    eax,edx
c0009189:	01 c0                	add    eax,eax
c000918b:	01 d0                	add    eax,edx
c000918d:	c1 e0 05             	shl    eax,0x5
c0009190:	01 d0                	add    eax,edx
c0009192:	c1 e0 04             	shl    eax,0x4
c0009195:	89 c2                	mov    edx,eax
c0009197:	c1 fa 1f             	sar    edx,0x1f
c000919a:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000919d:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
c00091a0:	29 c1                	sub    ecx,eax
c00091a2:	19 d3                	sbb    ebx,edx
c00091a4:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c00091a9:	0f b6 c0             	movzx  eax,al
c00091ac:	85 c0                	test   eax,eax
c00091ae:	74 0c                	je     c00091bc <Clock::setTimeInSecondsLocal(unsigned long long)+0x66>
c00091b0:	b8 08 07 00 00       	mov    eax,0x708
c00091b5:	ba 00 00 00 00       	mov    edx,0x0
c00091ba:	eb 0a                	jmp    c00091c6 <Clock::setTimeInSecondsLocal(unsigned long long)+0x70>
c00091bc:	b8 00 00 00 00       	mov    eax,0x0
c00091c1:	ba 00 00 00 00       	mov    edx,0x0
c00091c6:	29 c1                	sub    ecx,eax
c00091c8:	19 d3                	sbb    ebx,edx
c00091ca:	89 c8                	mov    eax,ecx
c00091cc:	89 da                	mov    edx,ebx
c00091ce:	83 ec 04             	sub    esp,0x4
c00091d1:	52                   	push   edx
c00091d2:	50                   	push   eax
c00091d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00091d6:	ff d6                	call   esi
c00091d8:	83 c4 10             	add    esp,0x10
c00091db:	8d 65 f8             	lea    esp,[ebp-0x8]
c00091de:	5b                   	pop    ebx
c00091df:	5e                   	pop    esi
c00091e0:	5d                   	pop    ebp
c00091e1:	c3                   	ret    

c00091e2 <KeDatetimeToSeconds(datetime_t)>:
c00091e2:	55                   	push   ebp
c00091e3:	89 e5                	mov    ebp,esp
c00091e5:	53                   	push   ebx
c00091e6:	83 ec 24             	sub    esp,0x24
c00091e9:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00091ed:	2d 6c 07 00 00       	sub    eax,0x76c
c00091f2:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c00091f6:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c00091f9:	83 e8 01             	sub    eax,0x1
c00091fc:	88 45 09             	mov    BYTE PTR [ebp+0x9],al
c00091ff:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
c0009206:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c000920d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009214:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c000921b:	8a 45 0e             	mov    al,BYTE PTR [ebp+0xe]
c000921e:	0f b6 c8             	movzx  ecx,al
c0009221:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0009224:	0f b6 d0             	movzx  edx,al
c0009227:	89 d0                	mov    eax,edx
c0009229:	01 c0                	add    eax,eax
c000922b:	01 d0                	add    eax,edx
c000922d:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009234:	01 d0                	add    eax,edx
c0009236:	c1 e0 02             	shl    eax,0x2
c0009239:	01 c1                	add    ecx,eax
c000923b:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000923e:	0f b6 d0             	movzx  edx,al
c0009241:	89 d0                	mov    eax,edx
c0009243:	01 c0                	add    eax,eax
c0009245:	01 d0                	add    eax,edx
c0009247:	01 c0                	add    eax,eax
c0009249:	01 d0                	add    eax,edx
c000924b:	c1 e0 05             	shl    eax,0x5
c000924e:	01 d0                	add    eax,edx
c0009250:	c1 e0 04             	shl    eax,0x4
c0009253:	01 c8                	add    eax,ecx
c0009255:	89 c2                	mov    edx,eax
c0009257:	c1 fa 1f             	sar    edx,0x1f
c000925a:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c000925d:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009260:	8a 45 08             	mov    al,BYTE PTR [ebp+0x8]
c0009263:	0f b6 c0             	movzx  eax,al
c0009266:	83 e8 01             	sub    eax,0x1
c0009269:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000926c:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000926f:	0f b6 c0             	movzx  eax,al
c0009272:	8b 04 85 40 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcfc0]
c0009279:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c000927c:	8a 45 09             	mov    al,BYTE PTR [ebp+0x9]
c000927f:	0f b6 c0             	movzx  eax,al
c0009282:	83 f8 01             	cmp    eax,0x1
c0009285:	76 7c                	jbe    c0009303 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009287:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000928b:	0f b7 c0             	movzx  eax,ax
c000928e:	83 e0 03             	and    eax,0x3
c0009291:	85 c0                	test   eax,eax
c0009293:	75 6e                	jne    c0009303 <KeDatetimeToSeconds(datetime_t)+0x121>
c0009295:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009299:	0f b7 c8             	movzx  ecx,ax
c000929c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00092a1:	89 c8                	mov    eax,ecx
c00092a3:	f7 e2                	mul    edx
c00092a5:	c1 ea 05             	shr    edx,0x5
c00092a8:	89 d0                	mov    eax,edx
c00092aa:	c1 e0 02             	shl    eax,0x2
c00092ad:	01 d0                	add    eax,edx
c00092af:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092b6:	01 d0                	add    eax,edx
c00092b8:	c1 e0 02             	shl    eax,0x2
c00092bb:	29 c1                	sub    ecx,eax
c00092bd:	89 c8                	mov    eax,ecx
c00092bf:	0f b7 c0             	movzx  eax,ax
c00092c2:	85 c0                	test   eax,eax
c00092c4:	75 39                	jne    c00092ff <KeDatetimeToSeconds(datetime_t)+0x11d>
c00092c6:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00092ca:	0f b7 c0             	movzx  eax,ax
c00092cd:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00092d3:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00092d8:	f7 e9                	imul   ecx
c00092da:	c1 fa 07             	sar    edx,0x7
c00092dd:	89 c8                	mov    eax,ecx
c00092df:	c1 f8 1f             	sar    eax,0x1f
c00092e2:	29 c2                	sub    edx,eax
c00092e4:	89 d0                	mov    eax,edx
c00092e6:	c1 e0 02             	shl    eax,0x2
c00092e9:	01 d0                	add    eax,edx
c00092eb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00092f2:	01 d0                	add    eax,edx
c00092f4:	c1 e0 04             	shl    eax,0x4
c00092f7:	29 c1                	sub    ecx,eax
c00092f9:	89 ca                	mov    edx,ecx
c00092fb:	85 d2                	test   edx,edx
c00092fd:	75 04                	jne    c0009303 <KeDatetimeToSeconds(datetime_t)+0x121>
c00092ff:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009303:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c0009307:	0f b7 c0             	movzx  eax,ax
c000930a:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c000930d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009310:	83 f8 46             	cmp    eax,0x46
c0009313:	0f 9f c0             	setg   al
c0009316:	0f b6 c0             	movzx  eax,al
c0009319:	85 c0                	test   eax,eax
c000931b:	0f 84 a4 00 00 00    	je     c00093c5 <KeDatetimeToSeconds(datetime_t)+0x1e3>
c0009321:	c7 45 e0 46 00 00 00 	mov    DWORD PTR [ebp-0x20],0x46
c0009328:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c000932c:	0f b7 d0             	movzx  edx,ax
c000932f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009332:	39 c2                	cmp    edx,eax
c0009334:	0f 8e b8 01 00 00    	jle    c00094f2 <KeDatetimeToSeconds(datetime_t)+0x310>
c000933a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000933d:	83 e0 03             	and    eax,0x3
c0009340:	85 c0                	test   eax,eax
c0009342:	75 6b                	jne    c00093af <KeDatetimeToSeconds(datetime_t)+0x1cd>
c0009344:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009347:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c000934c:	f7 e9                	imul   ecx
c000934e:	c1 fa 05             	sar    edx,0x5
c0009351:	89 c8                	mov    eax,ecx
c0009353:	c1 f8 1f             	sar    eax,0x1f
c0009356:	29 c2                	sub    edx,eax
c0009358:	89 d0                	mov    eax,edx
c000935a:	c1 e0 02             	shl    eax,0x2
c000935d:	01 d0                	add    eax,edx
c000935f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009366:	01 d0                	add    eax,edx
c0009368:	c1 e0 02             	shl    eax,0x2
c000936b:	29 c1                	sub    ecx,eax
c000936d:	89 ca                	mov    edx,ecx
c000936f:	85 d2                	test   edx,edx
c0009371:	75 35                	jne    c00093a8 <KeDatetimeToSeconds(datetime_t)+0x1c6>
c0009373:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009376:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000937c:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009381:	f7 e9                	imul   ecx
c0009383:	c1 fa 07             	sar    edx,0x7
c0009386:	89 c8                	mov    eax,ecx
c0009388:	c1 f8 1f             	sar    eax,0x1f
c000938b:	29 c2                	sub    edx,eax
c000938d:	89 d0                	mov    eax,edx
c000938f:	c1 e0 02             	shl    eax,0x2
c0009392:	01 d0                	add    eax,edx
c0009394:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000939b:	01 d0                	add    eax,edx
c000939d:	c1 e0 04             	shl    eax,0x4
c00093a0:	29 c1                	sub    ecx,eax
c00093a2:	89 ca                	mov    edx,ecx
c00093a4:	85 d2                	test   edx,edx
c00093a6:	75 07                	jne    c00093af <KeDatetimeToSeconds(datetime_t)+0x1cd>
c00093a8:	b8 6e 01 00 00       	mov    eax,0x16e
c00093ad:	eb 05                	jmp    c00093b4 <KeDatetimeToSeconds(datetime_t)+0x1d2>
c00093af:	b8 6d 01 00 00       	mov    eax,0x16d
c00093b4:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
c00093b7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093ba:	83 c0 01             	add    eax,0x1
c00093bd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00093c0:	e9 63 ff ff ff       	jmp    c0009328 <KeDatetimeToSeconds(datetime_t)+0x146>
c00093c5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093c8:	83 f8 45             	cmp    eax,0x45
c00093cb:	0f 8f 21 01 00 00    	jg     c00094f2 <KeDatetimeToSeconds(datetime_t)+0x310>
c00093d1:	c7 45 e0 45 00 00 00 	mov    DWORD PTR [ebp-0x20],0x45
c00093d8:	66 8b 45 0a          	mov    ax,WORD PTR [ebp+0xa]
c00093dc:	0f b7 d0             	movzx  edx,ax
c00093df:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093e2:	39 c2                	cmp    edx,eax
c00093e4:	0f 8d 8b 00 00 00    	jge    c0009475 <KeDatetimeToSeconds(datetime_t)+0x293>
c00093ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00093ed:	83 e0 03             	and    eax,0x3
c00093f0:	85 c0                	test   eax,eax
c00093f2:	75 6b                	jne    c000945f <KeDatetimeToSeconds(datetime_t)+0x27d>
c00093f4:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00093f7:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00093fc:	f7 e9                	imul   ecx
c00093fe:	c1 fa 05             	sar    edx,0x5
c0009401:	89 c8                	mov    eax,ecx
c0009403:	c1 f8 1f             	sar    eax,0x1f
c0009406:	29 c2                	sub    edx,eax
c0009408:	89 d0                	mov    eax,edx
c000940a:	c1 e0 02             	shl    eax,0x2
c000940d:	01 d0                	add    eax,edx
c000940f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009416:	01 d0                	add    eax,edx
c0009418:	c1 e0 02             	shl    eax,0x2
c000941b:	29 c1                	sub    ecx,eax
c000941d:	89 ca                	mov    edx,ecx
c000941f:	85 d2                	test   edx,edx
c0009421:	75 35                	jne    c0009458 <KeDatetimeToSeconds(datetime_t)+0x276>
c0009423:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009426:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c000942c:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009431:	f7 e9                	imul   ecx
c0009433:	c1 fa 07             	sar    edx,0x7
c0009436:	89 c8                	mov    eax,ecx
c0009438:	c1 f8 1f             	sar    eax,0x1f
c000943b:	29 c2                	sub    edx,eax
c000943d:	89 d0                	mov    eax,edx
c000943f:	c1 e0 02             	shl    eax,0x2
c0009442:	01 d0                	add    eax,edx
c0009444:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000944b:	01 d0                	add    eax,edx
c000944d:	c1 e0 04             	shl    eax,0x4
c0009450:	29 c1                	sub    ecx,eax
c0009452:	89 ca                	mov    edx,ecx
c0009454:	85 d2                	test   edx,edx
c0009456:	75 07                	jne    c000945f <KeDatetimeToSeconds(datetime_t)+0x27d>
c0009458:	b8 6e 01 00 00       	mov    eax,0x16e
c000945d:	eb 05                	jmp    c0009464 <KeDatetimeToSeconds(datetime_t)+0x282>
c000945f:	b8 6d 01 00 00       	mov    eax,0x16d
c0009464:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c0009467:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c000946a:	83 e8 01             	sub    eax,0x1
c000946d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0009470:	e9 63 ff ff ff       	jmp    c00093d8 <KeDatetimeToSeconds(datetime_t)+0x1f6>
c0009475:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009478:	83 e0 03             	and    eax,0x3
c000947b:	85 c0                	test   eax,eax
c000947d:	75 6b                	jne    c00094ea <KeDatetimeToSeconds(datetime_t)+0x308>
c000947f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0009482:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c0009487:	f7 e9                	imul   ecx
c0009489:	c1 fa 05             	sar    edx,0x5
c000948c:	89 c8                	mov    eax,ecx
c000948e:	c1 f8 1f             	sar    eax,0x1f
c0009491:	29 c2                	sub    edx,eax
c0009493:	89 d0                	mov    eax,edx
c0009495:	c1 e0 02             	shl    eax,0x2
c0009498:	01 d0                	add    eax,edx
c000949a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094a1:	01 d0                	add    eax,edx
c00094a3:	c1 e0 02             	shl    eax,0x2
c00094a6:	29 c1                	sub    ecx,eax
c00094a8:	89 ca                	mov    edx,ecx
c00094aa:	85 d2                	test   edx,edx
c00094ac:	75 35                	jne    c00094e3 <KeDatetimeToSeconds(datetime_t)+0x301>
c00094ae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00094b1:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
c00094b7:	b8 1f 85 eb 51       	mov    eax,0x51eb851f
c00094bc:	f7 e9                	imul   ecx
c00094be:	c1 fa 07             	sar    edx,0x7
c00094c1:	89 c8                	mov    eax,ecx
c00094c3:	c1 f8 1f             	sar    eax,0x1f
c00094c6:	29 c2                	sub    edx,eax
c00094c8:	89 d0                	mov    eax,edx
c00094ca:	c1 e0 02             	shl    eax,0x2
c00094cd:	01 d0                	add    eax,edx
c00094cf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00094d6:	01 d0                	add    eax,edx
c00094d8:	c1 e0 04             	shl    eax,0x4
c00094db:	29 c1                	sub    ecx,eax
c00094dd:	89 ca                	mov    edx,ecx
c00094df:	85 d2                	test   edx,edx
c00094e1:	75 07                	jne    c00094ea <KeDatetimeToSeconds(datetime_t)+0x308>
c00094e3:	b8 6e 01 00 00       	mov    eax,0x16e
c00094e8:	eb 05                	jmp    c00094ef <KeDatetimeToSeconds(datetime_t)+0x30d>
c00094ea:	b8 6d 01 00 00       	mov    eax,0x16d
c00094ef:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
c00094f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00094f5:	89 c2                	mov    edx,eax
c00094f7:	c1 fa 1f             	sar    edx,0x1f
c00094fa:	69 da 80 51 01 00    	imul   ebx,edx,0x15180
c0009500:	6b c8 00             	imul   ecx,eax,0x0
c0009503:	01 d9                	add    ecx,ebx
c0009505:	bb 80 51 01 00       	mov    ebx,0x15180
c000950a:	f7 e3                	mul    ebx
c000950c:	01 d1                	add    ecx,edx
c000950e:	89 ca                	mov    edx,ecx
c0009510:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
c0009513:	11 55 ec             	adc    DWORD PTR [ebp-0x14],edx
c0009516:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009519:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c000951c:	83 c4 24             	add    esp,0x24
c000951f:	5b                   	pop    ebx
c0009520:	5d                   	pop    ebp
c0009521:	c3                   	ret    

c0009522 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0009522:	55                   	push   ebp
c0009523:	89 e5                	mov    ebp,esp
c0009525:	56                   	push   esi
c0009526:	53                   	push   ebx
c0009527:	83 ec 20             	sub    esp,0x20
c000952a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c000952d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0009530:	e8 ad fc ff ff       	call   c00091e2 <KeDatetimeToSeconds(datetime_t)>
c0009535:	83 c4 08             	add    esp,0x8
c0009538:	89 c3                	mov    ebx,eax
c000953a:	89 d6                	mov    esi,edx
c000953c:	a0 60 b6 02 c0       	mov    al,ds:0xc002b660
c0009541:	0f b6 d0             	movzx  edx,al
c0009544:	a1 64 b6 02 c0       	mov    eax,ds:0xc002b664
c0009549:	01 c2                	add    edx,eax
c000954b:	89 d0                	mov    eax,edx
c000954d:	01 c0                	add    eax,eax
c000954f:	01 d0                	add    eax,edx
c0009551:	01 c0                	add    eax,eax
c0009553:	01 d0                	add    eax,edx
c0009555:	c1 e0 05             	shl    eax,0x5
c0009558:	01 d0                	add    eax,edx
c000955a:	c1 e0 04             	shl    eax,0x4
c000955d:	89 c2                	mov    edx,eax
c000955f:	c1 fa 1f             	sar    edx,0x1f
c0009562:	29 c3                	sub    ebx,eax
c0009564:	19 d6                	sbb    esi,edx
c0009566:	a0 61 b6 02 c0       	mov    al,ds:0xc002b661
c000956b:	0f b6 c0             	movzx  eax,al
c000956e:	85 c0                	test   eax,eax
c0009570:	74 0c                	je     c000957e <Clock::setTimeInDatetimeLocal(datetime_t)+0x5c>
c0009572:	b8 08 07 00 00       	mov    eax,0x708
c0009577:	ba 00 00 00 00       	mov    edx,0x0
c000957c:	eb 0a                	jmp    c0009588 <Clock::setTimeInDatetimeLocal(datetime_t)+0x66>
c000957e:	b8 00 00 00 00       	mov    eax,0x0
c0009583:	ba 00 00 00 00       	mov    edx,0x0
c0009588:	29 c3                	sub    ebx,eax
c000958a:	19 d6                	sbb    esi,edx
c000958c:	89 d8                	mov    eax,ebx
c000958e:	89 f2                	mov    edx,esi
c0009590:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009593:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009596:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009599:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c000959c:	89 d0                	mov    eax,edx
c000959e:	31 d2                	xor    edx,edx
c00095a0:	89 c3                	mov    ebx,eax
c00095a2:	89 d6                	mov    esi,edx
c00095a4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00095a7:	80 e5 ff             	and    ch,0xff
c00095aa:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00095ad:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c00095b0:	83 e1 00             	and    ecx,0x0
c00095b3:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00095b6:	83 ec 0c             	sub    esp,0xc
c00095b9:	56                   	push   esi
c00095ba:	53                   	push   ebx
c00095bb:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00095be:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00095c1:	68 2e 30 02 c0       	push   0xc002302e
c00095c6:	e8 99 d9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00095cb:	83 c4 20             	add    esp,0x20
c00095ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00095d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00095d3:	83 c0 2c             	add    eax,0x2c
c00095d6:	8b 00                	mov    eax,DWORD PTR [eax]
c00095d8:	83 ec 04             	sub    esp,0x4
c00095db:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00095de:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00095e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00095e4:	ff d0                	call   eax
c00095e6:	83 c4 10             	add    esp,0x10
c00095e9:	8d 65 f8             	lea    esp,[ebp-0x8]
c00095ec:	5b                   	pop    ebx
c00095ed:	5e                   	pop    esi
c00095ee:	5d                   	pop    ebp
c00095ef:	c3                   	ret    

c00095f0 <KeSecondsToDatetime(unsigned long long)>:
c00095f0:	55                   	push   ebp
c00095f1:	89 e5                	mov    ebp,esp
c00095f3:	83 ec 48             	sub    esp,0x48
c00095f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00095f9:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
c00095fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00095ff:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
c0009602:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009605:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009608:	6a 00                	push   0x0
c000960a:	68 80 51 01 00       	push   0x15180
c000960f:	52                   	push   edx
c0009610:	50                   	push   eax
c0009611:	e8 de 7e 01 00       	call   c00214f4 <__udivdi3>
c0009616:	83 c4 10             	add    esp,0x10
c0009619:	05 6c fa 0a 00       	add    eax,0xafa6c
c000961e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009621:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0009624:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0009627:	6a 00                	push   0x0
c0009629:	68 80 51 01 00       	push   0x15180
c000962e:	52                   	push   edx
c000962f:	50                   	push   eax
c0009630:	e8 bf 7f 01 00       	call   c00215f4 <__umoddi3>
c0009635:	83 c4 10             	add    esp,0x10
c0009638:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000963b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
c000963f:	79 0b                	jns    c000964c <KeSecondsToDatetime(unsigned long long)+0x5c>
c0009641:	81 45 f0 80 51 01 00 	add    DWORD PTR [ebp-0x10],0x15180
c0009648:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
c000964c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c000964f:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009654:	89 c8                	mov    eax,ecx
c0009656:	f7 ea                	imul   edx
c0009658:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000965b:	c1 f8 0b             	sar    eax,0xb
c000965e:	89 c2                	mov    edx,eax
c0009660:	89 c8                	mov    eax,ecx
c0009662:	c1 f8 1f             	sar    eax,0x1f
c0009665:	29 c2                	sub    edx,eax
c0009667:	89 d0                	mov    eax,edx
c0009669:	88 c2                	mov    dl,al
c000966b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000966e:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0009671:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0009674:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
c0009679:	89 c8                	mov    eax,ecx
c000967b:	f7 ea                	imul   edx
c000967d:	8d 04 0a             	lea    eax,[edx+ecx*1]
c0009680:	c1 f8 0b             	sar    eax,0xb
c0009683:	89 c2                	mov    edx,eax
c0009685:	89 c8                	mov    eax,ecx
c0009687:	c1 f8 1f             	sar    eax,0x1f
c000968a:	29 c2                	sub    edx,eax
c000968c:	89 d0                	mov    eax,edx
c000968e:	01 c0                	add    eax,eax
c0009690:	01 d0                	add    eax,edx
c0009692:	01 c0                	add    eax,eax
c0009694:	01 d0                	add    eax,edx
c0009696:	c1 e0 05             	shl    eax,0x5
c0009699:	01 d0                	add    eax,edx
c000969b:	c1 e0 04             	shl    eax,0x4
c000969e:	29 c1                	sub    ecx,eax
c00096a0:	89 c8                	mov    eax,ecx
c00096a2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00096a5:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096a8:	ba 89 88 88 88       	mov    edx,0x88888889
c00096ad:	89 c8                	mov    eax,ecx
c00096af:	f7 ea                	imul   edx
c00096b1:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096b4:	c1 f8 05             	sar    eax,0x5
c00096b7:	89 c2                	mov    edx,eax
c00096b9:	89 c8                	mov    eax,ecx
c00096bb:	c1 f8 1f             	sar    eax,0x1f
c00096be:	29 c2                	sub    edx,eax
c00096c0:	89 d0                	mov    eax,edx
c00096c2:	88 c2                	mov    dl,al
c00096c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096c7:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c00096ca:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c00096cd:	ba 89 88 88 88       	mov    edx,0x88888889
c00096d2:	89 c8                	mov    eax,ecx
c00096d4:	f7 ea                	imul   edx
c00096d6:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00096d9:	c1 f8 05             	sar    eax,0x5
c00096dc:	89 c2                	mov    edx,eax
c00096de:	89 c8                	mov    eax,ecx
c00096e0:	c1 f8 1f             	sar    eax,0x1f
c00096e3:	29 c2                	sub    edx,eax
c00096e5:	89 d0                	mov    eax,edx
c00096e7:	01 c0                	add    eax,eax
c00096e9:	01 d0                	add    eax,edx
c00096eb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00096f2:	01 d0                	add    eax,edx
c00096f4:	c1 e0 02             	shl    eax,0x2
c00096f7:	29 c1                	sub    ecx,eax
c00096f9:	89 ca                	mov    edx,ecx
c00096fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00096fe:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
c0009701:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009705:	79 20                	jns    c0009727 <KeSecondsToDatetime(unsigned long long)+0x137>
c0009707:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000970a:	8d 88 50 c5 fd ff    	lea    ecx,[eax-0x23ab0]
c0009710:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c0009715:	89 c8                	mov    eax,ecx
c0009717:	f7 ea                	imul   edx
c0009719:	c1 fa 0f             	sar    edx,0xf
c000971c:	89 c8                	mov    eax,ecx
c000971e:	c1 f8 1f             	sar    eax,0x1f
c0009721:	29 c2                	sub    edx,eax
c0009723:	89 d0                	mov    eax,edx
c0009725:	eb 18                	jmp    c000973f <KeSecondsToDatetime(unsigned long long)+0x14f>
c0009727:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
c000972a:	ba bd 06 6b 39       	mov    edx,0x396b06bd
c000972f:	89 c8                	mov    eax,ecx
c0009731:	f7 ea                	imul   edx
c0009733:	c1 fa 0f             	sar    edx,0xf
c0009736:	89 c8                	mov    eax,ecx
c0009738:	c1 f8 1f             	sar    eax,0x1f
c000973b:	29 c2                	sub    edx,eax
c000973d:	89 d0                	mov    eax,edx
c000973f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0009742:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009745:	89 d0                	mov    eax,edx
c0009747:	c1 e0 03             	shl    eax,0x3
c000974a:	01 d0                	add    eax,edx
c000974c:	c1 e0 04             	shl    eax,0x4
c000974f:	01 d0                	add    eax,edx
c0009751:	c1 e0 04             	shl    eax,0x4
c0009754:	29 d0                	sub    eax,edx
c0009756:	89 c2                	mov    edx,eax
c0009758:	c1 e2 06             	shl    edx,0x6
c000975b:	29 c2                	sub    edx,eax
c000975d:	89 d0                	mov    eax,edx
c000975f:	f7 d8                	neg    eax
c0009761:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009764:	01 d0                	add    eax,edx
c0009766:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0009769:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000976c:	c1 e8 02             	shr    eax,0x2
c000976f:	ba d9 7c c6 59       	mov    edx,0x59c67cd9
c0009774:	f7 e2                	mul    edx
c0009776:	c1 ea 07             	shr    edx,0x7
c0009779:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c000977c:	29 d0                	sub    eax,edx
c000977e:	89 c1                	mov    ecx,eax
c0009780:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009783:	c1 e8 02             	shr    eax,0x2
c0009786:	ba 7f 20 6b 39       	mov    edx,0x396b207f
c000978b:	f7 e2                	mul    edx
c000978d:	89 d0                	mov    eax,edx
c000978f:	c1 e8 0b             	shr    eax,0xb
c0009792:	01 c1                	add    ecx,eax
c0009794:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0009797:	c1 e8 04             	shr    eax,0x4
c000979a:	ba 41 d6 72 00       	mov    edx,0x72d641
c000979f:	f7 e2                	mul    edx
c00097a1:	89 d0                	mov    eax,edx
c00097a3:	c1 e8 04             	shr    eax,0x4
c00097a6:	29 c1                	sub    ecx,eax
c00097a8:	ba 61 f3 19 67       	mov    edx,0x6719f361
c00097ad:	89 c8                	mov    eax,ecx
c00097af:	f7 e2                	mul    edx
c00097b1:	89 c8                	mov    eax,ecx
c00097b3:	29 d0                	sub    eax,edx
c00097b5:	d1 e8                	shr    eax,1
c00097b7:	01 d0                	add    eax,edx
c00097b9:	c1 e8 08             	shr    eax,0x8
c00097bc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00097bf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097c2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
c00097c7:	f7 e2                	mul    edx
c00097c9:	89 d1                	mov    ecx,edx
c00097cb:	c1 e9 05             	shr    ecx,0x5
c00097ce:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00097d1:	89 d0                	mov    eax,edx
c00097d3:	c1 e0 03             	shl    eax,0x3
c00097d6:	01 d0                	add    eax,edx
c00097d8:	c1 e0 03             	shl    eax,0x3
c00097db:	01 d0                	add    eax,edx
c00097dd:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00097e4:	01 c2                	add    edx,eax
c00097e6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00097e9:	c1 e8 02             	shr    eax,0x2
c00097ec:	01 d0                	add    eax,edx
c00097ee:	29 c1                	sub    ecx,eax
c00097f0:	89 ca                	mov    edx,ecx
c00097f2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00097f5:	01 d0                	add    eax,edx
c00097f7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00097fa:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00097fd:	89 d0                	mov    eax,edx
c00097ff:	c1 e0 02             	shl    eax,0x2
c0009802:	01 d0                	add    eax,edx
c0009804:	83 c0 02             	add    eax,0x2
c0009807:	ba d7 80 2b d6       	mov    edx,0xd62b80d7
c000980c:	f7 e2                	mul    edx
c000980e:	89 d0                	mov    eax,edx
c0009810:	c1 e8 07             	shr    eax,0x7
c0009813:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0009816:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0009819:	89 d0                	mov    eax,edx
c000981b:	c1 e0 03             	shl    eax,0x3
c000981e:	01 d0                	add    eax,edx
c0009820:	01 c0                	add    eax,eax
c0009822:	01 d0                	add    eax,edx
c0009824:	c1 e0 03             	shl    eax,0x3
c0009827:	01 d0                	add    eax,edx
c0009829:	83 c0 02             	add    eax,0x2
c000982c:	ba cd cc cc cc       	mov    edx,0xcccccccd
c0009831:	f7 e2                	mul    edx
c0009833:	c1 ea 02             	shr    edx,0x2
c0009836:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0009839:	29 d0                	sub    eax,edx
c000983b:	83 c0 01             	add    eax,0x1
c000983e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0009841:	83 7d dc 09          	cmp    DWORD PTR [ebp-0x24],0x9
c0009845:	77 07                	ja     c000984e <KeSecondsToDatetime(unsigned long long)+0x25e>
c0009847:	b8 02 00 00 00       	mov    eax,0x2
c000984c:	eb 05                	jmp    c0009853 <KeSecondsToDatetime(unsigned long long)+0x263>
c000984e:	b8 f6 ff ff ff       	mov    eax,0xfffffff6
c0009853:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
c0009856:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0009859:	89 d0                	mov    eax,edx
c000985b:	c1 e0 02             	shl    eax,0x2
c000985e:	01 d0                	add    eax,edx
c0009860:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0009867:	01 d0                	add    eax,edx
c0009869:	c1 e0 04             	shl    eax,0x4
c000986c:	89 c2                	mov    edx,eax
c000986e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0009871:	01 c2                	add    edx,eax
c0009873:	83 7d dc 01          	cmp    DWORD PTR [ebp-0x24],0x1
c0009877:	0f 96 c0             	setbe  al
c000987a:	0f b6 c0             	movzx  eax,al
c000987d:	01 d0                	add    eax,edx
c000987f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0009882:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
c0009885:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009888:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000988c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c000988f:	83 c0 01             	add    eax,0x1
c0009892:	88 c2                	mov    dl,al
c0009894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009897:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000989a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c000989d:	88 c2                	mov    dl,al
c000989f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a2:	88 10                	mov    BYTE PTR [eax],dl
c00098a4:	90                   	nop
c00098a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a8:	c9                   	leave  
c00098a9:	c2 04 00             	ret    0x4

c00098ac <Clock::timeInDatetimeLocal()>:
c00098ac:	55                   	push   ebp
c00098ad:	89 e5                	mov    ebp,esp
c00098af:	83 ec 08             	sub    esp,0x8
c00098b2:	83 ec 0c             	sub    esp,0xc
c00098b5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00098b8:	e8 23 f8 ff ff       	call   c00090e0 <Clock::timeInSecondsLocal()>
c00098bd:	83 c4 10             	add    esp,0x10
c00098c0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00098c3:	83 ec 04             	sub    esp,0x4
c00098c6:	52                   	push   edx
c00098c7:	50                   	push   eax
c00098c8:	51                   	push   ecx
c00098c9:	e8 22 fd ff ff       	call   c00095f0 <KeSecondsToDatetime(unsigned long long)>
c00098ce:	83 c4 0c             	add    esp,0xc
c00098d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098d4:	c9                   	leave  
c00098d5:	c2 04 00             	ret    0x4

c00098d8 <Device::hibernate()>:
c00098d8:	c3                   	ret    
c00098d9:	90                   	nop

c00098da <Device::wake()>:
c00098da:	c3                   	ret    
c00098db:	90                   	nop

c00098dc <Device::detect()>:
c00098dc:	c3                   	ret    
c00098dd:	90                   	nop

c00098de <Device::disableLegacy()>:
c00098de:	c3                   	ret    
c00098df:	90                   	nop

c00098e0 <Device::powerSaving(PowerSavingLevel)>:
c00098e0:	c3                   	ret    
c00098e1:	90                   	nop

c00098e2 <DriverlessDevice::close(int, int, void*)>:
c00098e2:	31 c0                	xor    eax,eax
c00098e4:	c3                   	ret    
c00098e5:	90                   	nop

c00098e6 <DriverlessDevice::detect()>:
c00098e6:	c3                   	ret    
c00098e7:	90                   	nop

c00098e8 <DriverlessDevice::open(int, int, void*)>:
c00098e8:	83 ec 18             	sub    esp,0x18
c00098eb:	68 ac 30 02 c0       	push   0xc00230ac
c00098f0:	e8 ad 66 00 00       	call   c000ffa2 <KePanic(char const*)>
c00098f5:	83 c8 ff             	or     eax,0xffffffff
c00098f8:	83 c4 1c             	add    esp,0x1c
c00098fb:	c3                   	ret    

c00098fc <Device::~Device()>:
c00098fc:	ba 50 31 02 c0       	mov    edx,0xc0023150
c0009901:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009905:	89 10                	mov    DWORD PTR [eax],edx
c0009907:	90                   	nop
c0009908:	c3                   	ret    
c0009909:	90                   	nop

c000990a <Device::~Device()>:
c000990a:	83 ec 0c             	sub    esp,0xc
c000990d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009911:	e8 e6 ff ff ff       	call   c00098fc <Device::~Device()>
c0009916:	83 c4 04             	add    esp,0x4
c0009919:	83 ec 08             	sub    esp,0x8
c000991c:	68 58 01 00 00       	push   0x158
c0009921:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009925:	e8 b9 39 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c000992a:	83 c4 10             	add    esp,0x10
c000992d:	83 c4 0c             	add    esp,0xc
c0009930:	c3                   	ret    
c0009931:	90                   	nop

c0009932 <Device::findAndLoadDriver()>:
c0009932:	c7 44 24 04 ca 30 02 c0 	mov    DWORD PTR [esp+0x4],0xc00230ca
c000993a:	e9 25 d6 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c000993f:	90                   	nop

c0009940 <Device::preOpenPCI(PCIDeviceInfo)>:
c0009940:	57                   	push   edi
c0009941:	b9 09 00 00 00       	mov    ecx,0x9
c0009946:	56                   	push   esi
c0009947:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000994b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000994f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0009959:	81 c7 18 01 00 00    	add    edi,0x118
c000995f:	fc                   	cld    
c0009960:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0009962:	5e                   	pop    esi
c0009963:	5f                   	pop    edi
c0009964:	c3                   	ret    
c0009965:	90                   	nop

c0009966 <Device::preOpenACPI(void*, char*, char*)>:
c0009966:	57                   	push   edi
c0009967:	b9 1e 00 00 00       	mov    ecx,0x1e
c000996c:	56                   	push   esi
c000996d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009971:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009975:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000997f:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c0009985:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000998b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000998f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009991:	b9 0e 00 00 00       	mov    ecx,0xe
c0009996:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000999c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00099a0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00099a2:	5e                   	pop    esi
c00099a3:	5f                   	pop    edi
c00099a4:	c3                   	ret    
c00099a5:	90                   	nop

c00099a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00099a6:	53                   	push   ebx
c00099a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00099af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099b3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00099b7:	0f b6 c0             	movzx  eax,al
c00099ba:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00099be:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00099c2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099c6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099ca:	5b                   	pop    ebx
c00099cb:	e9 fb 07 01 00       	jmp    c001a1cb <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c00099d0 <Device::getParent()>:
c00099d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099d4:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c00099da:	c3                   	ret    
c00099db:	90                   	nop

c00099dc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00099dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00099e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00099e4:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c00099e9:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00099ed:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00099f1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00099f5:	e9 33 09 01 00       	jmp    c001a32d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c00099fa <Device::addChild(Device*)>:
c00099fa:	53                   	push   ebx
c00099fb:	83 ec 08             	sub    esp,0x8
c00099fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009a02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a06:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0009a0c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0009a12:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009a14:	85 d2                	test   edx,edx
c0009a16:	74 04                	je     c0009a1c <Device::addChild(Device*)+0x22>
c0009a18:	89 d3                	mov    ebx,edx
c0009a1a:	eb f6                	jmp    c0009a12 <Device::addChild(Device*)+0x18>
c0009a1c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009a1f:	83 ec 0c             	sub    esp,0xc
c0009a22:	6a 08                	push   0x8
c0009a24:	e8 32 62 00 00       	call   c000fc5b <malloc>
c0009a29:	89 03                	mov    DWORD PTR [ebx],eax
c0009a2b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a31:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a38:	83 c4 18             	add    esp,0x18
c0009a3b:	5b                   	pop    ebx
c0009a3c:	c3                   	ret    
c0009a3d:	90                   	nop

c0009a3e <Device::removeAllChildren()>:
c0009a3e:	56                   	push   esi
c0009a3f:	53                   	push   ebx
c0009a40:	52                   	push   edx
c0009a41:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0009a45:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0009a4b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a4e:	74 17                	je     c0009a67 <Device::removeAllChildren()+0x29>
c0009a50:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0009a53:	85 c0                	test   eax,eax
c0009a55:	74 0c                	je     c0009a63 <Device::removeAllChildren()+0x25>
c0009a57:	83 ec 0c             	sub    esp,0xc
c0009a5a:	8b 10                	mov    edx,DWORD PTR [eax]
c0009a5c:	50                   	push   eax
c0009a5d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0009a60:	83 c4 10             	add    esp,0x10
c0009a63:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009a65:	eb e4                	jmp    c0009a4b <Device::removeAllChildren()+0xd>
c0009a67:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009a73:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009a79:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009a80:	58                   	pop    eax
c0009a81:	5b                   	pop    ebx
c0009a82:	5e                   	pop    esi
c0009a83:	c3                   	ret    

c0009a84 <Device::hibernateAll()>:
c0009a84:	53                   	push   ebx
c0009a85:	83 ec 14             	sub    esp,0x14
c0009a88:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009a8c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009a8e:	53                   	push   ebx
c0009a8f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0009a92:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009a98:	83 c4 10             	add    esp,0x10
c0009a9b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009a9e:	74 0f                	je     c0009aaf <Device::hibernateAll()+0x2b>
c0009aa0:	83 ec 0c             	sub    esp,0xc
c0009aa3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009aa6:	e8 d9 ff ff ff       	call   c0009a84 <Device::hibernateAll()>
c0009aab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009aad:	eb e9                	jmp    c0009a98 <Device::hibernateAll()+0x14>
c0009aaf:	83 c4 08             	add    esp,0x8
c0009ab2:	5b                   	pop    ebx
c0009ab3:	c3                   	ret    

c0009ab4 <Device::wakeAll()>:
c0009ab4:	53                   	push   ebx
c0009ab5:	83 ec 14             	sub    esp,0x14
c0009ab8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009abc:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009abe:	53                   	push   ebx
c0009abf:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0009ac2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009ac8:	83 c4 10             	add    esp,0x10
c0009acb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009ace:	74 0f                	je     c0009adf <Device::wakeAll()+0x2b>
c0009ad0:	83 ec 0c             	sub    esp,0xc
c0009ad3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009ad6:	e8 d9 ff ff ff       	call   c0009ab4 <Device::wakeAll()>
c0009adb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009add:	eb e9                	jmp    c0009ac8 <Device::wakeAll()+0x14>
c0009adf:	83 c4 08             	add    esp,0x8
c0009ae2:	5b                   	pop    ebx
c0009ae3:	c3                   	ret    

c0009ae4 <Device::detectAll()>:
c0009ae4:	53                   	push   ebx
c0009ae5:	83 ec 14             	sub    esp,0x14
c0009ae8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aec:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009aee:	53                   	push   ebx
c0009aef:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0009af2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009af8:	83 c4 10             	add    esp,0x10
c0009afb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009afe:	74 0f                	je     c0009b0f <Device::detectAll()+0x2b>
c0009b00:	83 ec 0c             	sub    esp,0xc
c0009b03:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b06:	e8 d9 ff ff ff       	call   c0009ae4 <Device::detectAll()>
c0009b0b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b0d:	eb e9                	jmp    c0009af8 <Device::detectAll()+0x14>
c0009b0f:	83 c4 08             	add    esp,0x8
c0009b12:	5b                   	pop    ebx
c0009b13:	c3                   	ret    

c0009b14 <Device::disableLegacyAll()>:
c0009b14:	c3                   	ret    
c0009b15:	90                   	nop

c0009b16 <Device::loadDriversForAll()>:
c0009b16:	c3                   	ret    
c0009b17:	90                   	nop

c0009b18 <Device::powerSavingAll(PowerSavingLevel)>:
c0009b18:	56                   	push   esi
c0009b19:	53                   	push   ebx
c0009b1a:	83 ec 0c             	sub    esp,0xc
c0009b1d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0009b21:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0009b25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009b27:	56                   	push   esi
c0009b28:	53                   	push   ebx
c0009b29:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0009b2c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009b32:	83 c4 10             	add    esp,0x10
c0009b35:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009b38:	74 0f                	je     c0009b49 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0009b3a:	52                   	push   edx
c0009b3b:	52                   	push   edx
c0009b3c:	56                   	push   esi
c0009b3d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009b40:	e8 d3 ff ff ff       	call   c0009b18 <Device::powerSavingAll(PowerSavingLevel)>
c0009b45:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009b47:	eb e9                	jmp    c0009b32 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0009b49:	58                   	pop    eax
c0009b4a:	5b                   	pop    ebx
c0009b4b:	5e                   	pop    esi
c0009b4c:	c3                   	ret    
c0009b4d:	90                   	nop

c0009b4e <Device::setName(char const*)>:
c0009b4e:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0009b56:	e9 e5 6a ff ff       	jmp    c0000640 <strcpy>
c0009b5b:	90                   	nop

c0009b5c <Device::Device(char const*)>:
c0009b5c:	83 ec 1c             	sub    esp,0x1c
c0009b5f:	ba 50 31 02 c0       	mov    edx,0xc0023150
c0009b64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b68:	89 10                	mov    DWORD PTR [eax],edx
c0009b6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b6e:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009b78:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b7c:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009b86:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b8a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009b94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009b98:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009ba2:	83 ec 08             	sub    esp,0x8
c0009ba5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009bad:	e8 9c ff ff ff       	call   c0009b4e <Device::setName(char const*)>
c0009bb2:	83 c4 10             	add    esp,0x10
c0009bb5:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009bbd:	83 ec 0c             	sub    esp,0xc
c0009bc0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009bc4:	e8 92 60 00 00       	call   c000fc5b <malloc>
c0009bc9:	83 c4 10             	add    esp,0x10
c0009bcc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bd2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009bd9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009bdd:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c0009be3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009be7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bed:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0009bf3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009bf7:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009bfd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009c04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c08:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0009c0f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c13:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0009c1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c1e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0009c28:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c2c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0009c36:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c3a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0009c44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009c48:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c0009c52:	90                   	nop
c0009c53:	83 c4 1c             	add    esp,0x1c
c0009c56:	c3                   	ret    
c0009c57:	90                   	nop

c0009c58 <Device::getName()>:
c0009c58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c5c:	05 d0 00 00 00       	add    eax,0xd0
c0009c61:	c3                   	ret    

c0009c62 <Device::closeAll()>:
c0009c62:	53                   	push   ebx
c0009c63:	83 ec 08             	sub    esp,0x8
c0009c66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009c6a:	53                   	push   ebx
c0009c6b:	e8 e8 ff ff ff       	call   c0009c58 <Device::getName()>
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	68 04 31 02 c0       	push   0xc0023104
c0009c77:	e8 e8 d2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0009c7c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009c7e:	6a 00                	push   0x0
c0009c80:	6a 00                	push   0x0
c0009c82:	6a 00                	push   0x0
c0009c84:	53                   	push   ebx
c0009c85:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009c88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009c8e:	83 c4 20             	add    esp,0x20
c0009c91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009c94:	74 12                	je     c0009ca8 <Device::closeAll()+0x46>
c0009c96:	83 ec 0c             	sub    esp,0xc
c0009c99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009c9c:	e8 c1 ff ff ff       	call   c0009c62 <Device::closeAll()>
c0009ca1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009ca3:	83 c4 10             	add    esp,0x10
c0009ca6:	eb e9                	jmp    c0009c91 <Device::closeAll()+0x2f>
c0009ca8:	83 c4 08             	add    esp,0x8
c0009cab:	5b                   	pop    ebx
c0009cac:	c3                   	ret    
c0009cad:	90                   	nop

c0009cae <DriverlessDevice::DriverlessDevice(char const*)>:
c0009cae:	83 ec 0c             	sub    esp,0xc
c0009cb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb5:	83 ec 08             	sub    esp,0x8
c0009cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cbc:	50                   	push   eax
c0009cbd:	e8 9a fe ff ff       	call   c0009b5c <Device::Device(char const*)>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	ba 7c 31 02 c0       	mov    edx,0xc002317c
c0009cca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cce:	89 10                	mov    DWORD PTR [eax],edx
c0009cd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cd4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009cde:	90                   	nop
c0009cdf:	83 c4 0c             	add    esp,0xc
c0009ce2:	c3                   	ret    
c0009ce3:	90                   	nop

c0009ce4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0009ce4:	57                   	push   edi
c0009ce5:	56                   	push   esi
c0009ce6:	53                   	push   ebx
c0009ce7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009ceb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009cef:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009cf3:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009cf9:	75 0c                	jne    c0009d07 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009cfb:	52                   	push   edx
c0009cfc:	52                   	push   edx
c0009cfd:	53                   	push   ebx
c0009cfe:	56                   	push   esi
c0009cff:	e8 68 7a 01 00       	call   c002176c <LinkedList<Device>::addElement(Device*)>
c0009d04:	83 c4 10             	add    esp,0x10
c0009d07:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009d0d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009d10:	74 12                	je     c0009d24 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0009d12:	50                   	push   eax
c0009d13:	57                   	push   edi
c0009d14:	56                   	push   esi
c0009d15:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009d18:	e8 c7 ff ff ff       	call   c0009ce4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d1d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009d1f:	83 c4 10             	add    esp,0x10
c0009d22:	eb e9                	jmp    c0009d0d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0009d24:	5b                   	pop    ebx
c0009d25:	5e                   	pop    esi
c0009d26:	5f                   	pop    edi
c0009d27:	c3                   	ret    

c0009d28 <getDevicesOfType(DeviceType)>:
c0009d28:	53                   	push   ebx
c0009d29:	83 ec 14             	sub    esp,0x14
c0009d2c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009d30:	53                   	push   ebx
c0009d31:	e8 12 7b 01 00       	call   c0021848 <LinkedList<Device>::LinkedList()>
c0009d36:	83 c4 0c             	add    esp,0xc
c0009d39:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0009d3d:	53                   	push   ebx
c0009d3e:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0009d44:	e8 9b ff ff ff       	call   c0009ce4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0009d49:	89 d8                	mov    eax,ebx
c0009d4b:	83 c4 18             	add    esp,0x18
c0009d4e:	5b                   	pop    ebx
c0009d4f:	c2 04 00             	ret    0x4
c0009d52:	66 90                	xchg   ax,ax

c0009d54 <HardDiskController::HardDiskController(char const*)>:
c0009d54:	83 ec 0c             	sub    esp,0xc
c0009d57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5b:	83 ec 08             	sub    esp,0x8
c0009d5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d62:	50                   	push   eax
c0009d63:	e8 f4 fd ff ff       	call   c0009b5c <Device::Device(char const*)>
c0009d68:	83 c4 10             	add    esp,0x10
c0009d6b:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c0009d70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d74:	89 10                	mov    DWORD PTR [eax],edx
c0009d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d7a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0009d84:	90                   	nop
c0009d85:	83 c4 0c             	add    esp,0xc
c0009d88:	c3                   	ret    
c0009d89:	90                   	nop
c0009d8a:	66 90                	xchg   ax,ax

c0009d8c <HardDiskController::~HardDiskController()>:
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	ba a8 31 02 c0       	mov    edx,0xc00231a8
c0009d94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d98:	89 10                	mov    DWORD PTR [eax],edx
c0009d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d9e:	83 ec 0c             	sub    esp,0xc
c0009da1:	50                   	push   eax
c0009da2:	e8 55 fb ff ff       	call   c00098fc <Device::~Device()>
c0009da7:	83 c4 10             	add    esp,0x10
c0009daa:	90                   	nop
c0009dab:	83 c4 0c             	add    esp,0xc
c0009dae:	c3                   	ret    
c0009daf:	90                   	nop

c0009db0 <HardDiskController::~HardDiskController()>:
c0009db0:	83 ec 0c             	sub    esp,0xc
c0009db3:	83 ec 0c             	sub    esp,0xc
c0009db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dba:	e8 cd ff ff ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c0009dbf:	83 c4 10             	add    esp,0x10
c0009dc2:	83 ec 08             	sub    esp,0x8
c0009dc5:	68 58 01 00 00       	push   0x158
c0009dca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dce:	e8 10 35 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	83 c4 0c             	add    esp,0xc
c0009dd9:	c3                   	ret    

c0009dda <PhysicalDisk::eject()>:
c0009dda:	83 c8 ff             	or     eax,0xffffffff
c0009ddd:	c3                   	ret    

c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009dde:	83 ec 0c             	sub    esp,0xc
c0009de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009de5:	83 ec 08             	sub    esp,0x8
c0009de8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dec:	50                   	push   eax
c0009ded:	e8 6a fd ff ff       	call   c0009b5c <Device::Device(char const*)>
c0009df2:	83 c4 10             	add    esp,0x10
c0009df5:	ba d4 31 02 c0       	mov    edx,0xc00231d4
c0009dfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dfe:	89 10                	mov    DWORD PTR [eax],edx
c0009e00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e04:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009e0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e0f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0009e16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e1a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0009e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e28:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009e2c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0009e32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e36:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0009e40:	90                   	nop
c0009e41:	83 c4 0c             	add    esp,0xc
c0009e44:	c3                   	ret    
c0009e45:	90                   	nop

c0009e46 <PhysicalDisk::startCache()>:
c0009e46:	56                   	push   esi
c0009e47:	53                   	push   ebx
c0009e48:	83 ec 10             	sub    esp,0x10
c0009e4b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009e4f:	6a 44                	push   0x44
c0009e51:	e8 05 5e 00 00       	call   c000fc5b <malloc>
c0009e56:	89 c6                	mov    esi,eax
c0009e58:	58                   	pop    eax
c0009e59:	5a                   	pop    edx
c0009e5a:	53                   	push   ebx
c0009e5b:	56                   	push   esi
c0009e5c:	e8 97 13 00 00       	call   c000b1f8 <VCache::VCache(PhysicalDisk*)>
c0009e61:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0009e67:	83 c4 14             	add    esp,0x14
c0009e6a:	5b                   	pop    ebx
c0009e6b:	5e                   	pop    esi
c0009e6c:	c3                   	ret    
c0009e6d:	90                   	nop

c0009e6e <PhysicalDisk::~PhysicalDisk()>:
c0009e6e:	83 ec 0c             	sub    esp,0xc
c0009e71:	ba d4 31 02 c0       	mov    edx,0xc00231d4
c0009e76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e7a:	89 10                	mov    DWORD PTR [eax],edx
c0009e7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009e80:	83 ec 0c             	sub    esp,0xc
c0009e83:	50                   	push   eax
c0009e84:	e8 73 fa ff ff       	call   c00098fc <Device::~Device()>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	90                   	nop
c0009e8d:	83 c4 0c             	add    esp,0xc
c0009e90:	c3                   	ret    
c0009e91:	90                   	nop

c0009e92 <PhysicalDisk::~PhysicalDisk()>:
c0009e92:	83 ec 0c             	sub    esp,0xc
c0009e95:	83 ec 0c             	sub    esp,0xc
c0009e98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e9c:	e8 cd ff ff ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c0009ea1:	83 c4 10             	add    esp,0x10
c0009ea4:	83 ec 08             	sub    esp,0x8
c0009ea7:	68 6c 01 00 00       	push   0x16c
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 2e 34 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	83 c4 0c             	add    esp,0xc
c0009ebb:	c3                   	ret    

c0009ebc <startGUI(void*)>:
c0009ebc:	55                   	push   ebp
c0009ebd:	89 e5                	mov    ebp,esp
c0009ebf:	53                   	push   ebx
c0009ec0:	83 ec 04             	sub    esp,0x4
c0009ec3:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009ecb:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009ed0:	85 c0                	test   eax,eax
c0009ed2:	75 01                	jne    c0009ed5 <startGUI(void*)+0x19>
c0009ed4:	fb                   	sti    
c0009ed5:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009edb:	83 ec 08             	sub    esp,0x8
c0009ede:	6a 01                	push   0x1
c0009ee0:	68 04 32 02 c0       	push   0xc0023204
c0009ee5:	e8 b6 c1 00 00       	call   c00160a0 <Thr::loadDLL(char const*, bool)>
c0009eea:	83 c4 10             	add    esp,0x10
c0009eed:	83 ec 08             	sub    esp,0x8
c0009ef0:	53                   	push   ebx
c0009ef1:	50                   	push   eax
c0009ef2:	e8 fb c3 00 00       	call   c00162f2 <Thr::executeDLL(unsigned long, void*)>
c0009ef7:	83 c4 10             	add    esp,0x10
c0009efa:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f00:	83 ec 08             	sub    esp,0x8
c0009f03:	6a 01                	push   0x1
c0009f05:	68 1e 32 02 c0       	push   0xc002321e
c0009f0a:	e8 91 c1 00 00       	call   c00160a0 <Thr::loadDLL(char const*, bool)>
c0009f0f:	83 c4 10             	add    esp,0x10
c0009f12:	83 ec 08             	sub    esp,0x8
c0009f15:	53                   	push   ebx
c0009f16:	50                   	push   eax
c0009f17:	e8 d6 c3 00 00       	call   c00162f2 <Thr::executeDLL(unsigned long, void*)>
c0009f1c:	83 c4 10             	add    esp,0x10
c0009f1f:	eb fe                	jmp    c0009f1f <startGUI(void*)+0x63>

c0009f21 <startGUIVESA(void*)>:
c0009f21:	55                   	push   ebp
c0009f22:	89 e5                	mov    ebp,esp
c0009f24:	53                   	push   ebx
c0009f25:	83 ec 04             	sub    esp,0x4
c0009f28:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0009f30:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009f35:	85 c0                	test   eax,eax
c0009f37:	75 01                	jne    c0009f3a <startGUIVESA(void*)+0x19>
c0009f39:	fb                   	sti    
c0009f3a:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f40:	83 ec 08             	sub    esp,0x8
c0009f43:	6a 01                	push   0x1
c0009f45:	68 3c 32 02 c0       	push   0xc002323c
c0009f4a:	e8 51 c1 00 00       	call   c00160a0 <Thr::loadDLL(char const*, bool)>
c0009f4f:	83 c4 10             	add    esp,0x10
c0009f52:	83 ec 08             	sub    esp,0x8
c0009f55:	53                   	push   ebx
c0009f56:	50                   	push   eax
c0009f57:	e8 96 c3 00 00       	call   c00162f2 <Thr::executeDLL(unsigned long, void*)>
c0009f5c:	83 c4 10             	add    esp,0x10
c0009f5f:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c0009f65:	83 ec 08             	sub    esp,0x8
c0009f68:	6a 01                	push   0x1
c0009f6a:	68 1e 32 02 c0       	push   0xc002321e
c0009f6f:	e8 2c c1 00 00       	call   c00160a0 <Thr::loadDLL(char const*, bool)>
c0009f74:	83 c4 10             	add    esp,0x10
c0009f77:	83 ec 08             	sub    esp,0x8
c0009f7a:	53                   	push   ebx
c0009f7b:	50                   	push   eax
c0009f7c:	e8 71 c3 00 00       	call   c00162f2 <Thr::executeDLL(unsigned long, void*)>
c0009f81:	83 c4 10             	add    esp,0x10
c0009f84:	eb fe                	jmp    c0009f84 <startGUIVESA(void*)+0x63>

c0009f86 <sendKeyToTerminal(unsigned char)>:
c0009f86:	55                   	push   ebp
c0009f87:	89 e5                	mov    ebp,esp
c0009f89:	83 ec 28             	sub    esp,0x28
c0009f8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009f8f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0009f92:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0009f97:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009f9b:	83 ec 08             	sub    esp,0x8
c0009f9e:	52                   	push   edx
c0009f9f:	50                   	push   eax
c0009fa0:	e8 03 8b 00 00       	call   c0012aa8 <VgaText::receiveKey(unsigned char)>
c0009fa5:	83 c4 10             	add    esp,0x10
c0009fa8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fac:	83 f8 0a             	cmp    eax,0xa
c0009faf:	74 16                	je     c0009fc7 <sendKeyToTerminal(unsigned char)+0x41>
c0009fb1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fb5:	83 f8 03             	cmp    eax,0x3
c0009fb8:	74 0d                	je     c0009fc7 <sendKeyToTerminal(unsigned char)+0x41>
c0009fba:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009fbe:	83 f8 1c             	cmp    eax,0x1c
c0009fc1:	0f 85 92 00 00 00    	jne    c000a059 <sendKeyToTerminal(unsigned char)+0xd3>
c0009fc7:	fa                   	cli    
c0009fc8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0009fcd:	83 c0 01             	add    eax,0x1
c0009fd0:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0009fd5:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0009fda:	83 c0 01             	add    eax,0x1
c0009fdd:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0009fe2:	a1 80 b6 02 c0       	mov    eax,ds:0xc002b680
c0009fe7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009fea:	c7 05 80 b6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002b680,0x0
c0009ff4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009ff8:	74 1f                	je     c000a019 <sendKeyToTerminal(unsigned char)+0x93>
c0009ffa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009ffd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000a000:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a003:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000a006:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000a009:	83 ec 0c             	sub    esp,0xc
c000a00c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000a00f:	e8 bc ce 00 00       	call   c0016ed0 <unblockTask(ThreadControlBlock*)>
c000a014:	83 c4 10             	add    esp,0x10
c000a017:	eb db                	jmp    c0009ff4 <sendKeyToTerminal(unsigned char)+0x6e>
c000a019:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000a01e:	83 e8 01             	sub    eax,0x1
c000a021:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000a026:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000a02b:	85 c0                	test   eax,eax
c000a02d:	75 18                	jne    c000a047 <sendKeyToTerminal(unsigned char)+0xc1>
c000a02f:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c000a034:	85 c0                	test   eax,eax
c000a036:	74 0f                	je     c000a047 <sendKeyToTerminal(unsigned char)+0xc1>
c000a038:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000a042:	e8 79 cb 00 00       	call   c0016bc0 <schedule()>
c000a047:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a04f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a054:	85 c0                	test   eax,eax
c000a056:	75 01                	jne    c000a059 <sendKeyToTerminal(unsigned char)+0xd3>
c000a058:	fb                   	sti    
c000a059:	90                   	nop
c000a05a:	c9                   	leave  
c000a05b:	c3                   	ret    

c000a05c <sendKeyboardToken(KeyboardToken)>:
c000a05c:	55                   	push   ebp
c000a05d:	89 e5                	mov    ebp,esp
c000a05f:	83 ec 18             	sub    esp,0x18
c000a062:	e8 6b 68 00 00       	call   c00108d2 <KeUserIOReceived()>
c000a067:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000a06a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a06d:	0f b7 c0             	movzx  eax,ax
c000a070:	83 f2 01             	xor    edx,0x1
c000a073:	88 90 a0 b6 02 c0    	mov    BYTE PTR [eax-0x3ffd4960],dl
c000a079:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a07e:	85 c0                	test   eax,eax
c000a080:	74 24                	je     c000a0a6 <sendKeyboardToken(KeyboardToken)+0x4a>
c000a082:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a088:	83 ec 04             	sub    esp,0x4
c000a08b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a090:	83 ec 08             	sub    esp,0x8
c000a093:	89 e2                	mov    edx,esp
c000a095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a098:	89 02                	mov    DWORD PTR [edx],eax
c000a09a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a09d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a0a1:	ff d1                	call   ecx
c000a0a3:	83 c4 10             	add    esp,0x10
c000a0a6:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000a0aa:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000a0ad:	0f b6 c0             	movzx  eax,al
c000a0b0:	85 c0                	test   eax,eax
c000a0b2:	0f 84 da 00 00 00    	je     c000a192 <sendKeyboardToken(KeyboardToken)+0x136>
c000a0b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0bb:	0f b7 c0             	movzx  eax,ax
c000a0be:	3d 18 03 00 00       	cmp    eax,0x318
c000a0c3:	75 06                	jne    c000a0cb <sendKeyboardToken(KeyboardToken)+0x6f>
c000a0c5:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000a0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0ce:	0f b7 c0             	movzx  eax,ax
c000a0d1:	3d 19 03 00 00       	cmp    eax,0x319
c000a0d6:	75 06                	jne    c000a0de <sendKeyboardToken(KeyboardToken)+0x82>
c000a0d8:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000a0de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0e1:	0f b7 c0             	movzx  eax,ax
c000a0e4:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a0e9:	75 06                	jne    c000a0f1 <sendKeyboardToken(KeyboardToken)+0x95>
c000a0eb:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000a0f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a0f4:	0f b7 c0             	movzx  eax,ax
c000a0f7:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a0fc:	75 06                	jne    c000a104 <sendKeyboardToken(KeyboardToken)+0xa8>
c000a0fe:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000a104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a107:	0f b7 c0             	movzx  eax,ax
c000a10a:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a10f:	75 06                	jne    c000a117 <sendKeyboardToken(KeyboardToken)+0xbb>
c000a111:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000a117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a11a:	0f b7 c0             	movzx  eax,ax
c000a11d:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a122:	75 06                	jne    c000a12a <sendKeyboardToken(KeyboardToken)+0xce>
c000a124:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a12a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a12d:	0f b7 c0             	movzx  eax,ax
c000a130:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a135:	75 06                	jne    c000a13d <sendKeyboardToken(KeyboardToken)+0xe1>
c000a137:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000a13d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a140:	0f b7 c0             	movzx  eax,ax
c000a143:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a148:	75 06                	jne    c000a150 <sendKeyboardToken(KeyboardToken)+0xf4>
c000a14a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000a150:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a153:	0f b7 c0             	movzx  eax,ax
c000a156:	3d 20 03 00 00       	cmp    eax,0x320
c000a15b:	75 06                	jne    c000a163 <sendKeyboardToken(KeyboardToken)+0x107>
c000a15d:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000a163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a166:	0f b7 c0             	movzx  eax,ax
c000a169:	3d 21 03 00 00       	cmp    eax,0x321
c000a16e:	75 06                	jne    c000a176 <sendKeyboardToken(KeyboardToken)+0x11a>
c000a170:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000a176:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a179:	0f b7 c0             	movzx  eax,ax
c000a17c:	3d 22 03 00 00       	cmp    eax,0x322
c000a181:	0f 85 f1 00 00 00    	jne    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a187:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000a18d:	e9 e6 00 00 00       	jmp    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a195:	0f b7 c0             	movzx  eax,ax
c000a198:	3d 18 03 00 00       	cmp    eax,0x318
c000a19d:	75 0a                	jne    c000a1a9 <sendKeyboardToken(KeyboardToken)+0x14d>
c000a19f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000a1a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1ac:	0f b7 c0             	movzx  eax,ax
c000a1af:	3d 19 03 00 00       	cmp    eax,0x319
c000a1b4:	75 0a                	jne    c000a1c0 <sendKeyboardToken(KeyboardToken)+0x164>
c000a1b6:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000a1bc:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1c3:	0f b7 c0             	movzx  eax,ax
c000a1c6:	3d 1a 03 00 00       	cmp    eax,0x31a
c000a1cb:	75 0a                	jne    c000a1d7 <sendKeyboardToken(KeyboardToken)+0x17b>
c000a1cd:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000a1d3:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1da:	0f b7 c0             	movzx  eax,ax
c000a1dd:	3d 1b 03 00 00       	cmp    eax,0x31b
c000a1e2:	75 0a                	jne    c000a1ee <sendKeyboardToken(KeyboardToken)+0x192>
c000a1e4:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000a1ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a1ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a1f1:	0f b7 c0             	movzx  eax,ax
c000a1f4:	3d 1c 03 00 00       	cmp    eax,0x31c
c000a1f9:	75 0a                	jne    c000a205 <sendKeyboardToken(KeyboardToken)+0x1a9>
c000a1fb:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000a201:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a205:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a208:	0f b7 c0             	movzx  eax,ax
c000a20b:	3d 1d 03 00 00       	cmp    eax,0x31d
c000a210:	75 0a                	jne    c000a21c <sendKeyboardToken(KeyboardToken)+0x1c0>
c000a212:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000a218:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a21c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a21f:	0f b7 c0             	movzx  eax,ax
c000a222:	3d 1e 03 00 00       	cmp    eax,0x31e
c000a227:	75 0a                	jne    c000a233 <sendKeyboardToken(KeyboardToken)+0x1d7>
c000a229:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000a22f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a233:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a236:	0f b7 c0             	movzx  eax,ax
c000a239:	3d 1f 03 00 00       	cmp    eax,0x31f
c000a23e:	75 0a                	jne    c000a24a <sendKeyboardToken(KeyboardToken)+0x1ee>
c000a240:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000a246:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a24a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a24d:	0f b7 c0             	movzx  eax,ax
c000a250:	3d 20 03 00 00       	cmp    eax,0x320
c000a255:	75 0a                	jne    c000a261 <sendKeyboardToken(KeyboardToken)+0x205>
c000a257:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000a25d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a264:	0f b7 c0             	movzx  eax,ax
c000a267:	3d 21 03 00 00       	cmp    eax,0x321
c000a26c:	75 0a                	jne    c000a278 <sendKeyboardToken(KeyboardToken)+0x21c>
c000a26e:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000a274:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000a278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a27b:	0f b7 c0             	movzx  eax,ax
c000a27e:	3d 00 02 00 00       	cmp    eax,0x200
c000a283:	75 2f                	jne    c000a2b4 <sendKeyboardToken(KeyboardToken)+0x258>
c000a285:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a28a:	83 f0 01             	xor    eax,0x1
c000a28d:	0f b6 c0             	movzx  eax,al
c000a290:	85 c0                	test   eax,eax
c000a292:	74 20                	je     c000a2b4 <sendKeyboardToken(KeyboardToken)+0x258>
c000a294:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a299:	6a 01                	push   0x1
c000a29b:	6a 00                	push   0x0
c000a29d:	68 bc 9e 00 c0       	push   0xc0009ebc
c000a2a2:	50                   	push   eax
c000a2a3:	e8 c0 c6 00 00       	call   c0016968 <Process::createThread(void (*)(void*), void*, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2b2:	eb 3a                	jmp    c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2b7:	0f b7 c0             	movzx  eax,ax
c000a2ba:	3d 01 02 00 00       	cmp    eax,0x201
c000a2bf:	75 2d                	jne    c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2c1:	a0 a0 ba 02 c0       	mov    al,ds:0xc002baa0
c000a2c6:	83 f0 01             	xor    eax,0x1
c000a2c9:	0f b6 c0             	movzx  eax,al
c000a2cc:	85 c0                	test   eax,eax
c000a2ce:	74 1e                	je     c000a2ee <sendKeyboardToken(KeyboardToken)+0x292>
c000a2d0:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000a2d5:	6a 01                	push   0x1
c000a2d7:	6a 00                	push   0x0
c000a2d9:	68 21 9f 00 c0       	push   0xc0009f21
c000a2de:	50                   	push   eax
c000a2df:	e8 84 c6 00 00       	call   c0016968 <Process::createThread(void (*)(void*), void*, int)>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	c6 05 a0 ba 02 c0 01 	mov    BYTE PTR ds:0xc002baa0,0x1
c000a2ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a2f1:	0f b7 c0             	movzx  eax,ax
c000a2f4:	3d 25 03 00 00       	cmp    eax,0x325
c000a2f9:	75 06                	jne    c000a301 <sendKeyboardToken(KeyboardToken)+0x2a5>
c000a2fb:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000a301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a304:	0f b7 c0             	movzx  eax,ax
c000a307:	3d 24 03 00 00       	cmp    eax,0x324
c000a30c:	75 06                	jne    c000a314 <sendKeyboardToken(KeyboardToken)+0x2b8>
c000a30e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000a314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a317:	0f b7 c0             	movzx  eax,ax
c000a31a:	3d 23 03 00 00       	cmp    eax,0x323
c000a31f:	75 06                	jne    c000a327 <sendKeyboardToken(KeyboardToken)+0x2cb>
c000a321:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000a327:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a32a:	0f b7 c0             	movzx  eax,ax
c000a32d:	3d 26 03 00 00       	cmp    eax,0x326
c000a332:	75 06                	jne    c000a33a <sendKeyboardToken(KeyboardToken)+0x2de>
c000a334:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000a33a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a33d:	0f b7 c0             	movzx  eax,ax
c000a340:	3d 27 03 00 00       	cmp    eax,0x327
c000a345:	75 06                	jne    c000a34d <sendKeyboardToken(KeyboardToken)+0x2f1>
c000a347:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000a34d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a350:	0f b7 c0             	movzx  eax,ax
c000a353:	3d 22 03 00 00       	cmp    eax,0x322
c000a358:	75 06                	jne    c000a360 <sendKeyboardToken(KeyboardToken)+0x304>
c000a35a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000a360:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000a364:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a367:	83 f0 01             	xor    eax,0x1
c000a36a:	0f b6 c0             	movzx  eax,al
c000a36d:	85 c0                	test   eax,eax
c000a36f:	74 7c                	je     c000a3ed <sendKeyboardToken(KeyboardToken)+0x391>
c000a371:	a0 a1 b7 02 c0       	mov    al,ds:0xc002b7a1
c000a376:	0f b6 c0             	movzx  eax,al
c000a379:	85 c0                	test   eax,eax
c000a37b:	74 43                	je     c000a3c0 <sendKeyboardToken(KeyboardToken)+0x364>
c000a37d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a381:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000a385:	85 c0                	test   eax,eax
c000a387:	74 2b                	je     c000a3b4 <sendKeyboardToken(KeyboardToken)+0x358>
c000a389:	8b 15 a4 ba 02 c0    	mov    edx,DWORD PTR ds:0xc002baa4
c000a38f:	89 d0                	mov    eax,edx
c000a391:	c1 e0 02             	shl    eax,0x2
c000a394:	01 d0                	add    eax,edx
c000a396:	01 c0                	add    eax,eax
c000a398:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a39d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3a0:	0f b7 c0             	movzx  eax,ax
c000a3a3:	8d 50 d0             	lea    edx,[eax-0x30]
c000a3a6:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ab:	01 d0                	add    eax,edx
c000a3ad:	a3 a4 ba 02 c0       	mov    ds:0xc002baa4,eax
c000a3b2:	eb 71                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3b4:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3be:	eb 65                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3c0:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3c5:	85 c0                	test   eax,eax
c000a3c7:	74 18                	je     c000a3e1 <sendKeyboardToken(KeyboardToken)+0x385>
c000a3c9:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ce:	0f b6 c0             	movzx  eax,al
c000a3d1:	83 ec 0c             	sub    esp,0xc
c000a3d4:	50                   	push   eax
c000a3d5:	e8 ac fb ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a3da:	83 c4 10             	add    esp,0x10
c000a3dd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a3e1:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a3eb:	eb 38                	jmp    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a3f0:	0f b7 c0             	movzx  eax,ax
c000a3f3:	3d 01 01 00 00       	cmp    eax,0x101
c000a3f8:	75 2b                	jne    c000a425 <sendKeyboardToken(KeyboardToken)+0x3c9>
c000a3fa:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a3ff:	85 c0                	test   eax,eax
c000a401:	74 18                	je     c000a41b <sendKeyboardToken(KeyboardToken)+0x3bf>
c000a403:	a1 a4 ba 02 c0       	mov    eax,ds:0xc002baa4
c000a408:	0f b6 c0             	movzx  eax,al
c000a40b:	83 ec 0c             	sub    esp,0xc
c000a40e:	50                   	push   eax
c000a40f:	e8 72 fb ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a414:	83 c4 10             	add    esp,0x10
c000a417:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000a41b:	c7 05 a4 ba 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002baa4,0x0
c000a425:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a428:	83 f0 01             	xor    eax,0x1
c000a42b:	0f b6 c0             	movzx  eax,al
c000a42e:	85 c0                	test   eax,eax
c000a430:	74 5a                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a432:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a435:	83 f0 01             	xor    eax,0x1
c000a438:	0f b6 c0             	movzx  eax,al
c000a43b:	85 c0                	test   eax,eax
c000a43d:	74 4d                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a43f:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a444:	83 f0 01             	xor    eax,0x1
c000a447:	0f b6 c0             	movzx  eax,al
c000a44a:	85 c0                	test   eax,eax
c000a44c:	74 3e                	je     c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a44e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a451:	0f b7 c0             	movzx  eax,ax
c000a454:	83 f8 1f             	cmp    eax,0x1f
c000a457:	76 0b                	jbe    c000a464 <sendKeyboardToken(KeyboardToken)+0x408>
c000a459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a45c:	0f b7 c0             	movzx  eax,ax
c000a45f:	83 f8 7e             	cmp    eax,0x7e
c000a462:	76 16                	jbe    c000a47a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a464:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a467:	0f b7 c0             	movzx  eax,ax
c000a46a:	83 f8 0a             	cmp    eax,0xa
c000a46d:	74 0b                	je     c000a47a <sendKeyboardToken(KeyboardToken)+0x41e>
c000a46f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a472:	0f b7 c0             	movzx  eax,ax
c000a475:	83 f8 08             	cmp    eax,0x8
c000a478:	75 12                	jne    c000a48c <sendKeyboardToken(KeyboardToken)+0x430>
c000a47a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a47d:	0f b6 c0             	movzx  eax,al
c000a480:	83 ec 0c             	sub    esp,0xc
c000a483:	50                   	push   eax
c000a484:	e8 fd fa ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a489:	83 c4 10             	add    esp,0x10
c000a48c:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000a48f:	83 f0 01             	xor    eax,0x1
c000a492:	0f b6 c0             	movzx  eax,al
c000a495:	85 c0                	test   eax,eax
c000a497:	74 5d                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a499:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a49c:	83 f0 01             	xor    eax,0x1
c000a49f:	0f b6 c0             	movzx  eax,al
c000a4a2:	85 c0                	test   eax,eax
c000a4a4:	74 50                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4a6:	a0 a0 b7 02 c0       	mov    al,ds:0xc002b7a0
c000a4ab:	0f b6 c0             	movzx  eax,al
c000a4ae:	85 c0                	test   eax,eax
c000a4b0:	74 44                	je     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4b5:	0f b7 c0             	movzx  eax,ax
c000a4b8:	83 f8 3f             	cmp    eax,0x3f
c000a4bb:	76 39                	jbe    c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4c0:	0f b7 c0             	movzx  eax,ax
c000a4c3:	83 f8 7f             	cmp    eax,0x7f
c000a4c6:	77 2e                	ja     c000a4f6 <sendKeyboardToken(KeyboardToken)+0x49a>
c000a4c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4cb:	88 c2                	mov    dl,al
c000a4cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4d0:	0f b7 c0             	movzx  eax,ax
c000a4d3:	83 f8 5f             	cmp    eax,0x5f
c000a4d6:	76 04                	jbe    c000a4dc <sendKeyboardToken(KeyboardToken)+0x480>
c000a4d8:	b0 20                	mov    al,0x20
c000a4da:	eb 02                	jmp    c000a4de <sendKeyboardToken(KeyboardToken)+0x482>
c000a4dc:	b0 00                	mov    al,0x0
c000a4de:	89 d1                	mov    ecx,edx
c000a4e0:	29 c1                	sub    ecx,eax
c000a4e2:	89 c8                	mov    eax,ecx
c000a4e4:	83 e8 40             	sub    eax,0x40
c000a4e7:	0f b6 c0             	movzx  eax,al
c000a4ea:	83 ec 0c             	sub    esp,0xc
c000a4ed:	50                   	push   eax
c000a4ee:	e8 93 fa ff ff       	call   c0009f86 <sendKeyToTerminal(unsigned char)>
c000a4f3:	83 c4 10             	add    esp,0x10
c000a4f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a4f9:	0f b7 c0             	movzx  eax,ax
c000a4fc:	3d 00 03 00 00       	cmp    eax,0x300
c000a501:	75 12                	jne    c000a515 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a503:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000a506:	83 f0 01             	xor    eax,0x1
c000a509:	0f b6 c0             	movzx  eax,al
c000a50c:	85 c0                	test   eax,eax
c000a50e:	74 05                	je     c000a515 <sendKeyboardToken(KeyboardToken)+0x4b9>
c000a510:	e8 88 7c 00 00       	call   c001219d <doTerminalCycle()>
c000a515:	90                   	nop
c000a516:	c9                   	leave  
c000a517:	c3                   	ret    

c000a518 <clearInternalKeybuffer(VgaText*)>:
c000a518:	55                   	push   ebp
c000a519:	89 e5                	mov    ebp,esp
c000a51b:	83 ec 08             	sub    esp,0x8
c000a51e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a521:	05 02 01 00 00       	add    eax,0x102
c000a526:	83 ec 0c             	sub    esp,0xc
c000a529:	50                   	push   eax
c000a52a:	e8 41 60 ff ff       	call   c0000570 <strlen>
c000a52f:	83 c4 10             	add    esp,0x10
c000a532:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a535:	81 c2 02 01 00 00    	add    edx,0x102
c000a53b:	83 ec 04             	sub    esp,0x4
c000a53e:	50                   	push   eax
c000a53f:	6a 00                	push   0x0
c000a541:	52                   	push   edx
c000a542:	e8 a9 5f ff ff       	call   c00004f0 <memset>
c000a547:	83 c4 10             	add    esp,0x10
c000a54a:	90                   	nop
c000a54b:	c9                   	leave  
c000a54c:	c3                   	ret    

c000a54d <readKeyboard(VgaText*, char*, unsigned long)>:
c000a54d:	55                   	push   ebp
c000a54e:	89 e5                	mov    ebp,esp
c000a550:	83 ec 18             	sub    esp,0x18
c000a553:	a1 88 b6 02 c0       	mov    eax,ds:0xc002b688
c000a558:	85 c0                	test   eax,eax
c000a55a:	74 2a                	je     c000a586 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000a55c:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000a562:	8b 0d 88 b6 02 c0    	mov    ecx,DWORD PTR ds:0xc002b688
c000a568:	83 ec 04             	sub    esp,0x4
c000a56b:	68 a0 b6 02 c0       	push   0xc002b6a0
c000a570:	83 ec 08             	sub    esp,0x8
c000a573:	89 e2                	mov    edx,esp
c000a575:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000a578:	89 02                	mov    DWORD PTR [edx],eax
c000a57a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000a57d:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000a581:	ff d1                	call   ecx
c000a583:	83 c4 10             	add    esp,0x10
c000a586:	fb                   	sti    
c000a587:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000a58e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000a592:	0f 84 08 01 00 00    	je     c000a6a0 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000a598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a59b:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5a1:	0f be c0             	movsx  eax,al
c000a5a4:	85 c0                	test   eax,eax
c000a5a6:	75 27                	jne    c000a5cf <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c000a5a8:	fa                   	cli    
c000a5a9:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a5ae:	83 c0 01             	add    eax,0x1
c000a5b1:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000a5b6:	e8 05 c6 00 00       	call   c0016bc0 <schedule()>
c000a5bb:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000a5c3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000a5c8:	85 c0                	test   eax,eax
c000a5ca:	75 cc                	jne    c000a598 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cc:	fb                   	sti    
c000a5cd:	eb c9                	jmp    c000a598 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000a5cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000a5d2:	8d 50 01             	lea    edx,[eax+0x1]
c000a5d5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000a5d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a5db:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000a5e1:	88 10                	mov    BYTE PTR [eax],dl
c000a5e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a5e6:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000a5ec:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000a5ef:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a5f3:	83 f8 03             	cmp    eax,0x3
c000a5f6:	75 1e                	jne    c000a616 <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c000a5f8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a5fd:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a602:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000a608:	83 ec 08             	sub    esp,0x8
c000a60b:	6a 02                	push   0x2
c000a60d:	50                   	push   eax
c000a60e:	e8 d8 6a 00 00       	call   c00110eb <KeRaiseSignal(SigHandlerBlock*, int)>
c000a613:	83 c4 10             	add    esp,0x10
c000a616:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a61a:	83 f8 1c             	cmp    eax,0x1c
c000a61d:	75 1e                	jne    c000a63d <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c000a61f:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000a624:	8b 00                	mov    eax,DWORD PTR [eax]
c000a626:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000a629:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000a62f:	83 ec 08             	sub    esp,0x8
c000a632:	6a 09                	push   0x9
c000a634:	50                   	push   eax
c000a635:	e8 b1 6a 00 00       	call   c00110eb <KeRaiseSignal(SigHandlerBlock*, int)>
c000a63a:	83 c4 10             	add    esp,0x10
c000a63d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000a640:	05 02 01 00 00       	add    eax,0x102
c000a645:	83 ec 0c             	sub    esp,0xc
c000a648:	50                   	push   eax
c000a649:	e8 22 5f ff ff       	call   c0000570 <strlen>
c000a64e:	83 c4 10             	add    esp,0x10
c000a651:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a654:	81 c2 02 01 00 00    	add    edx,0x102
c000a65a:	8d 4a 01             	lea    ecx,[edx+0x1]
c000a65d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000a660:	81 c2 02 01 00 00    	add    edx,0x102
c000a666:	83 ec 04             	sub    esp,0x4
c000a669:	50                   	push   eax
c000a66a:	51                   	push   ecx
c000a66b:	52                   	push   edx
c000a66c:	e8 5f 5d ff ff       	call   c00003d0 <memmove>
c000a671:	83 c4 10             	add    esp,0x10
c000a674:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000a678:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000a67c:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a680:	83 f8 0a             	cmp    eax,0xa
c000a683:	74 16                	je     c000a69b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a685:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a689:	83 f8 03             	cmp    eax,0x3
c000a68c:	74 0d                	je     c000a69b <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c000a68e:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000a692:	83 f8 1c             	cmp    eax,0x1c
c000a695:	0f 85 f3 fe ff ff    	jne    c000a58e <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000a69b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a69e:	eb 03                	jmp    c000a6a3 <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c000a6a0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000a6a3:	c9                   	leave  
c000a6a4:	c3                   	ret    
c000a6a5:	90                   	nop

c000a6a6 <Keyboard::Keyboard(char const*)>:
c000a6a6:	83 ec 0c             	sub    esp,0xc
c000a6a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ad:	83 ec 08             	sub    esp,0x8
c000a6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6b4:	50                   	push   eax
c000a6b5:	e8 a2 f4 ff ff       	call   c0009b5c <Device::Device(char const*)>
c000a6ba:	83 c4 10             	add    esp,0x10
c000a6bd:	ba 60 32 02 c0       	mov    edx,0xc0023260
c000a6c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c6:	89 10                	mov    DWORD PTR [eax],edx
c000a6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6cc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000a6d6:	c6 05 84 b6 02 c0 01 	mov    BYTE PTR ds:0xc002b684,0x1
c000a6dd:	90                   	nop
c000a6de:	83 c4 0c             	add    esp,0xc
c000a6e1:	c3                   	ret    

c000a6e2 <Keyboard::~Keyboard()>:
c000a6e2:	83 ec 0c             	sub    esp,0xc
c000a6e5:	ba 60 32 02 c0       	mov    edx,0xc0023260
c000a6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6ee:	89 10                	mov    DWORD PTR [eax],edx
c000a6f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6f4:	83 ec 0c             	sub    esp,0xc
c000a6f7:	50                   	push   eax
c000a6f8:	e8 ff f1 ff ff       	call   c00098fc <Device::~Device()>
c000a6fd:	83 c4 10             	add    esp,0x10
c000a700:	90                   	nop
c000a701:	83 c4 0c             	add    esp,0xc
c000a704:	c3                   	ret    
c000a705:	90                   	nop

c000a706 <Keyboard::~Keyboard()>:
c000a706:	83 ec 0c             	sub    esp,0xc
c000a709:	83 ec 0c             	sub    esp,0xc
c000a70c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a710:	e8 cd ff ff ff       	call   c000a6e2 <Keyboard::~Keyboard()>
c000a715:	83 c4 10             	add    esp,0x10
c000a718:	83 ec 08             	sub    esp,0x8
c000a71b:	68 5c 01 00 00       	push   0x15c
c000a720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a724:	e8 ba 2b 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c000a729:	83 c4 10             	add    esp,0x10
c000a72c:	83 c4 0c             	add    esp,0xc
c000a72f:	c3                   	ret    

c000a730 <LogicalDisk::close(int, int, void*)>:
c000a730:	83 c8 ff             	or     eax,0xffffffff
c000a733:	c3                   	ret    

c000a734 <LogicalDisk::~LogicalDisk()>:
c000a734:	83 ec 0c             	sub    esp,0xc
c000a737:	ba d8 32 02 c0       	mov    edx,0xc00232d8
c000a73c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a740:	89 10                	mov    DWORD PTR [eax],edx
c000a742:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a746:	83 ec 0c             	sub    esp,0xc
c000a749:	50                   	push   eax
c000a74a:	e8 ad f1 ff ff       	call   c00098fc <Device::~Device()>
c000a74f:	83 c4 10             	add    esp,0x10
c000a752:	90                   	nop
c000a753:	83 c4 0c             	add    esp,0xc
c000a756:	c3                   	ret    
c000a757:	90                   	nop

c000a758 <LogicalDisk::~LogicalDisk()>:
c000a758:	83 ec 0c             	sub    esp,0xc
c000a75b:	83 ec 0c             	sub    esp,0xc
c000a75e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a762:	e8 cd ff ff ff       	call   c000a734 <LogicalDisk::~LogicalDisk()>
c000a767:	83 c4 10             	add    esp,0x10
c000a76a:	83 ec 08             	sub    esp,0x8
c000a76d:	68 78 01 00 00       	push   0x178
c000a772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a776:	e8 68 2b 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c000a77b:	83 c4 10             	add    esp,0x10
c000a77e:	83 c4 0c             	add    esp,0xc
c000a781:	c3                   	ret    

c000a782 <LogicalDisk::open(int, int, void*)>:
c000a782:	83 ec 18             	sub    esp,0x18
c000a785:	68 8c 32 02 c0       	push   0xc002328c
c000a78a:	e8 13 58 00 00       	call   c000ffa2 <KePanic(char const*)>
c000a78f:	83 c8 ff             	or     eax,0xffffffff
c000a792:	83 c4 1c             	add    esp,0x1c
c000a795:	c3                   	ret    

c000a796 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000a796:	53                   	push   ebx
c000a797:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a79b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a79f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000a7a3:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000a7a9:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000a7af:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000a7b5:	77 10                	ja     c000a7c7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000a7b7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000a7bd:	89 d3                	mov    ebx,edx
c000a7bf:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000a7c5:	72 05                	jb     c000a7cc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000a7c7:	83 c8 ff             	or     eax,0xffffffff
c000a7ca:	89 c2                	mov    edx,eax
c000a7cc:	5b                   	pop    ebx
c000a7cd:	c3                   	ret    

c000a7ce <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000a7ce:	56                   	push   esi
c000a7cf:	83 c8 ff             	or     eax,0xffffffff
c000a7d2:	53                   	push   ebx
c000a7d3:	89 c2                	mov    edx,eax
c000a7d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000a7d9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000a7dd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000a7e1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a7e7:	77 27                	ja     c000a810 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a7e9:	89 d8                	mov    eax,ebx
c000a7eb:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000a7f1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000a7f7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000a7fc:	89 c2                	mov    edx,eax
c000a7fe:	73 10                	jae    c000a810 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000a800:	89 c8                	mov    eax,ecx
c000a802:	89 da                	mov    edx,ebx
c000a804:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000a80a:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000a810:	5b                   	pop    ebx
c000a811:	5e                   	pop    esi
c000a812:	c3                   	ret    
c000a813:	90                   	nop

c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a814:	83 ec 1c             	sub    esp,0x1c
c000a817:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000a81b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a81f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a827:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a82b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a82e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a832:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a836:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a83a:	83 ec 08             	sub    esp,0x8
c000a83d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a841:	50                   	push   eax
c000a842:	e8 15 f3 ff ff       	call   c0009b5c <Device::Device(char const*)>
c000a847:	83 c4 10             	add    esp,0x10
c000a84a:	ba d8 32 02 c0       	mov    edx,0xc00232d8
c000a84f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a853:	89 10                	mov    DWORD PTR [eax],edx
c000a855:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a859:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a860:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a864:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000a86b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a86f:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000a876:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a87a:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000a884:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a888:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a88c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a890:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000a896:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000a89c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a8a0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000a8a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a8a7:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000a8ad:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000a8b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000a8bb:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000a8c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c5:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a8cf:	90                   	nop
c000a8d0:	83 c4 1c             	add    esp,0x1c
c000a8d3:	c3                   	ret    

c000a8d4 <LogicalDisk::assignDriveLetter()>:
c000a8d4:	55                   	push   ebp
c000a8d5:	57                   	push   edi
c000a8d6:	56                   	push   esi
c000a8d7:	53                   	push   ebx
c000a8d8:	83 ec 14             	sub    esp,0x14
c000a8db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000a8df:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000a8e5:	b0 41                	mov    al,0x41
c000a8e7:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000a8ed:	84 d2                	test   dl,dl
c000a8ef:	75 02                	jne    c000a8f3 <LogicalDisk::assignDriveLetter()+0x1f>
c000a8f1:	b0 43                	mov    al,0x43
c000a8f3:	8b 3d c0 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac0
c000a8f9:	0f b6 ca             	movzx  ecx,dl
c000a8fc:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000a900:	0f be e8             	movsx  ebp,al
c000a903:	8b 3d c4 ba 02 c0    	mov    edi,DWORD PTR ds:0xc002bac4
c000a909:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000a90d:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000a911:	3c 43                	cmp    al,0x43
c000a913:	75 10                	jne    c000a925 <LogicalDisk::assignDriveLetter()+0x51>
c000a915:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000a91c:	75 5a                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a91e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000a923:	75 53                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a925:	8d 75 bf             	lea    esi,[ebp-0x41]
c000a928:	ba 01 00 00 00       	mov    edx,0x1
c000a92d:	89 34 24             	mov    DWORD PTR [esp],esi
c000a930:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000a933:	d3 e2                	shl    edx,cl
c000a935:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a939:	89 d7                	mov    edi,edx
c000a93b:	89 d6                	mov    esi,edx
c000a93d:	c1 ff 1f             	sar    edi,0x1f
c000a940:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000a944:	21 f9                	and    ecx,edi
c000a946:	09 d1                	or     ecx,edx
c000a948:	75 2e                	jne    c000a978 <LogicalDisk::assignDriveLetter()+0xa4>
c000a94a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000a94e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a952:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000a958:	09 f2                	or     edx,esi
c000a95a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000a95d:	89 15 c0 ba 02 c0    	mov    DWORD PTR ds:0xc002bac0,edx
c000a963:	89 1c b5 e0 ba 02 c0 	mov    DWORD PTR [esi*4-0x3ffd4520],ebx
c000a96a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a96e:	09 fa                	or     edx,edi
c000a970:	89 15 c4 ba 02 c0    	mov    DWORD PTR ds:0xc002bac4,edx
c000a976:	eb 0d                	jmp    c000a985 <LogicalDisk::assignDriveLetter()+0xb1>
c000a978:	8d 50 01             	lea    edx,[eax+0x1]
c000a97b:	45                   	inc    ebp
c000a97c:	88 d0                	mov    al,dl
c000a97e:	80 fa 5b             	cmp    dl,0x5b
c000a981:	75 8e                	jne    c000a911 <LogicalDisk::assignDriveLetter()+0x3d>
c000a983:	31 c0                	xor    eax,eax
c000a985:	83 c4 14             	add    esp,0x14
c000a988:	5b                   	pop    ebx
c000a989:	5e                   	pop    esi
c000a98a:	5f                   	pop    edi
c000a98b:	5d                   	pop    ebp
c000a98c:	c3                   	ret    
c000a98d:	90                   	nop

c000a98e <LogicalDisk::mount()>:
c000a98e:	56                   	push   esi
c000a98f:	53                   	push   ebx
c000a990:	53                   	push   ebx
c000a991:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a995:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c000a99b:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a9a5:	85 db                	test   ebx,ebx
c000a9a7:	74 27                	je     c000a9d0 <LogicalDisk::mount()+0x42>
c000a9a9:	51                   	push   ecx
c000a9aa:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a9b1:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a9b3:	83 e8 41             	sub    eax,0x41
c000a9b6:	50                   	push   eax
c000a9b7:	56                   	push   esi
c000a9b8:	53                   	push   ebx
c000a9b9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a9bc:	83 c4 10             	add    esp,0x10
c000a9bf:	84 c0                	test   al,al
c000a9c1:	74 08                	je     c000a9cb <LogicalDisk::mount()+0x3d>
c000a9c3:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a9c9:	eb 07                	jmp    c000a9d2 <LogicalDisk::mount()+0x44>
c000a9cb:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a9ce:	eb d5                	jmp    c000a9a5 <LogicalDisk::mount()+0x17>
c000a9d0:	31 c0                	xor    eax,eax
c000a9d2:	5a                   	pop    edx
c000a9d3:	5b                   	pop    ebx
c000a9d4:	5e                   	pop    esi
c000a9d5:	c3                   	ret    

c000a9d6 <LogicalDisk::unmount()>:
c000a9d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9da:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a9e4:	c3                   	ret    
c000a9e5:	90                   	nop

c000a9e6 <LogicalDisk::eject()>:
c000a9e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a9ea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a9f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000a9f2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a9f6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a9f9:	90                   	nop

c000a9fa <LogicalDisk::unassignDriveLetter()>:
c000a9fa:	57                   	push   edi
c000a9fb:	56                   	push   esi
c000a9fc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000aa00:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000aa07:	85 c9                	test   ecx,ecx
c000aa09:	75 0f                	jne    c000aa1a <LogicalDisk::unassignDriveLetter()+0x20>
c000aa0b:	c7 44 24 0c b0 32 02 c0 	mov    DWORD PTR [esp+0xc],0xc00232b0
c000aa13:	5e                   	pop    esi
c000aa14:	5f                   	pop    edi
c000aa15:	e9 88 55 00 00       	jmp    c000ffa2 <KePanic(char const*)>
c000aa1a:	83 e9 41             	sub    ecx,0x41
c000aa1d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000aa24:	b8 01 00 00 00       	mov    eax,0x1
c000aa29:	c7 04 8d e0 ba 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd4520],0x0
c000aa34:	d3 e0                	shl    eax,cl
c000aa36:	89 c7                	mov    edi,eax
c000aa38:	f7 d0                	not    eax
c000aa3a:	c1 ff 1f             	sar    edi,0x1f
c000aa3d:	21 05 c0 ba 02 c0    	and    DWORD PTR ds:0xc002bac0,eax
c000aa43:	89 fe                	mov    esi,edi
c000aa45:	f7 d6                	not    esi
c000aa47:	21 35 c4 ba 02 c0    	and    DWORD PTR ds:0xc002bac4,esi
c000aa4d:	5e                   	pop    esi
c000aa4e:	5f                   	pop    edi
c000aa4f:	c3                   	ret    

c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>:
c000aa50:	57                   	push   edi
c000aa51:	56                   	push   esi
c000aa52:	53                   	push   ebx
c000aa53:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aa57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aa5b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aa5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aa63:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aa69:	77 41                	ja     c000aaac <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000aa6b:	99                   	cdq    
c000aa6c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aa72:	01 c8                	add    eax,ecx
c000aa74:	11 da                	adc    edx,ebx
c000aa76:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aa7c:	19 d7                	sbb    edi,edx
c000aa7e:	72 33                	jb     c000aab3 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000aa80:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aa86:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aa8c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aa90:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000aa94:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000aa9a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000aaa0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaa4:	5b                   	pop    ebx
c000aaa5:	5e                   	pop    esi
c000aaa6:	5f                   	pop    edi
c000aaa7:	e9 66 0b 00 00       	jmp    c000b612 <VCache::read(unsigned long long, int, void*)>
c000aaac:	b8 05 00 00 00       	mov    eax,0x5
c000aab1:	eb 05                	jmp    c000aab8 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000aab3:	b8 07 00 00 00       	mov    eax,0x7
c000aab8:	5b                   	pop    ebx
c000aab9:	5e                   	pop    esi
c000aaba:	5f                   	pop    edi
c000aabb:	c3                   	ret    

c000aabc <LogicalDisk::write(unsigned long long, int, void*)>:
c000aabc:	57                   	push   edi
c000aabd:	56                   	push   esi
c000aabe:	53                   	push   ebx
c000aabf:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000aac3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aac7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000aacb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000aacf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000aad5:	77 41                	ja     c000ab18 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000aad7:	99                   	cdq    
c000aad8:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000aade:	01 c8                	add    eax,ecx
c000aae0:	11 da                	adc    edx,ebx
c000aae2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000aae8:	19 d7                	sbb    edi,edx
c000aaea:	72 33                	jb     c000ab1f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000aaec:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000aaf2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000aaf8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000aafc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ab00:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ab06:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ab0c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ab10:	5b                   	pop    ebx
c000ab11:	5e                   	pop    esi
c000ab12:	5f                   	pop    edi
c000ab13:	e9 2c 09 00 00       	jmp    c000b444 <VCache::write(unsigned long long, int, void*)>
c000ab18:	b8 05 00 00 00       	mov    eax,0x5
c000ab1d:	eb 05                	jmp    c000ab24 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ab1f:	b8 07 00 00 00       	mov    eax,0x7
c000ab24:	5b                   	pop    ebx
c000ab25:	5e                   	pop    esi
c000ab26:	5f                   	pop    edi
c000ab27:	c3                   	ret    

c000ab28 <Mouse::Mouse(char const*)>:
c000ab28:	83 ec 0c             	sub    esp,0xc
c000ab2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2f:	83 ec 08             	sub    esp,0x8
c000ab32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab36:	50                   	push   eax
c000ab37:	e8 20 f0 ff ff       	call   c0009b5c <Device::Device(char const*)>
c000ab3c:	83 c4 10             	add    esp,0x10
c000ab3f:	ba 04 33 02 c0       	mov    edx,0xc0023304
c000ab44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab48:	89 10                	mov    DWORD PTR [eax],edx
c000ab4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab4e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000ab58:	90                   	nop
c000ab59:	83 c4 0c             	add    esp,0xc
c000ab5c:	c3                   	ret    
c000ab5d:	90                   	nop
c000ab5e:	66 90                	xchg   ax,ax

c000ab60 <Mouse::~Mouse()>:
c000ab60:	83 ec 0c             	sub    esp,0xc
c000ab63:	ba 04 33 02 c0       	mov    edx,0xc0023304
c000ab68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab6c:	89 10                	mov    DWORD PTR [eax],edx
c000ab6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab72:	83 ec 0c             	sub    esp,0xc
c000ab75:	50                   	push   eax
c000ab76:	e8 81 ed ff ff       	call   c00098fc <Device::~Device()>
c000ab7b:	83 c4 10             	add    esp,0x10
c000ab7e:	90                   	nop
c000ab7f:	83 c4 0c             	add    esp,0xc
c000ab82:	c3                   	ret    
c000ab83:	90                   	nop

c000ab84 <Mouse::~Mouse()>:
c000ab84:	83 ec 0c             	sub    esp,0xc
c000ab87:	83 ec 0c             	sub    esp,0xc
c000ab8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab8e:	e8 cd ff ff ff       	call   c000ab60 <Mouse::~Mouse()>
c000ab93:	83 c4 10             	add    esp,0x10
c000ab96:	83 ec 08             	sub    esp,0x8
c000ab99:	68 58 01 00 00       	push   0x158
c000ab9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aba2:	e8 3c 27 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	83 c4 0c             	add    esp,0xc
c000abad:	c3                   	ret    

c000abae <NIC::getMAC()>:
c000abae:	31 c0                	xor    eax,eax
c000abb0:	31 d2                	xor    edx,edx
c000abb2:	c3                   	ret    
c000abb3:	90                   	nop

c000abb4 <NIC::write(int, unsigned char*, int*)>:
c000abb4:	b8 01 00 00 00       	mov    eax,0x1
c000abb9:	c3                   	ret    

c000abba <NIC::NIC(char const*)>:
c000abba:	83 ec 0c             	sub    esp,0xc
c000abbd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abc1:	83 ec 08             	sub    esp,0x8
c000abc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000abc8:	50                   	push   eax
c000abc9:	e8 8e ef ff ff       	call   c0009b5c <Device::Device(char const*)>
c000abce:	83 c4 10             	add    esp,0x10
c000abd1:	ba 30 33 02 c0       	mov    edx,0xc0023330
c000abd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abda:	89 10                	mov    DWORD PTR [eax],edx
c000abdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abe0:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000abea:	90                   	nop
c000abeb:	83 c4 0c             	add    esp,0xc
c000abee:	c3                   	ret    
c000abef:	90                   	nop

c000abf0 <NIC::~NIC()>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	ba 30 33 02 c0       	mov    edx,0xc0023330
c000abf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000abfc:	89 10                	mov    DWORD PTR [eax],edx
c000abfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ac02:	83 ec 0c             	sub    esp,0xc
c000ac05:	50                   	push   eax
c000ac06:	e8 f1 ec ff ff       	call   c00098fc <Device::~Device()>
c000ac0b:	83 c4 10             	add    esp,0x10
c000ac0e:	90                   	nop
c000ac0f:	83 c4 0c             	add    esp,0xc
c000ac12:	c3                   	ret    
c000ac13:	90                   	nop

c000ac14 <NIC::~NIC()>:
c000ac14:	83 ec 0c             	sub    esp,0xc
c000ac17:	83 ec 0c             	sub    esp,0xc
c000ac1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac1e:	e8 cd ff ff ff       	call   c000abf0 <NIC::~NIC()>
c000ac23:	83 c4 10             	add    esp,0x10
c000ac26:	83 ec 08             	sub    esp,0x8
c000ac29:	68 58 01 00 00       	push   0x158
c000ac2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac32:	e8 ac 26 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c000ac37:	83 c4 10             	add    esp,0x10
c000ac3a:	83 c4 0c             	add    esp,0xc
c000ac3d:	c3                   	ret    

c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000ac3e:	55                   	push   ebp
c000ac3f:	57                   	push   edi
c000ac40:	56                   	push   esi
c000ac41:	53                   	push   ebx
c000ac42:	81 ec 28 01 00 00    	sub    esp,0x128
c000ac48:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000ac4f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000ac56:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000ac5d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000ac64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ac68:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000ac6c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000ac73:	e8 e0 ef ff ff       	call   c0009c58 <Device::getName()>
c000ac78:	5a                   	pop    edx
c000ac79:	59                   	pop    ecx
c000ac7a:	50                   	push   eax
c000ac7b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000ac7f:	55                   	push   ebp
c000ac80:	e8 bb 59 ff ff       	call   c0000640 <strcpy>
c000ac85:	5b                   	pop    ebx
c000ac86:	58                   	pop    eax
c000ac87:	68 5c 33 02 c0       	push   0xc002335c
c000ac8c:	55                   	push   ebp
c000ac8d:	e8 ae 5b ff ff       	call   c0000840 <strcat>
c000ac92:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000ac99:	e8 bd 4f 00 00       	call   c000fc5b <malloc>
c000ac9e:	83 c4 0c             	add    esp,0xc
c000aca1:	89 c3                	mov    ebx,eax
c000aca3:	57                   	push   edi
c000aca4:	56                   	push   esi
c000aca5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aca9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acad:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000acb4:	55                   	push   ebp
c000acb5:	50                   	push   eax
c000acb6:	e8 59 fb ff ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000acbb:	83 c4 14             	add    esp,0x14
c000acbe:	53                   	push   ebx
c000acbf:	e8 10 fc ff ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c000acc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000acc7:	e8 c2 fc ff ff       	call   c000a98e <LogicalDisk::mount()>
c000accc:	58                   	pop    eax
c000accd:	5a                   	pop    edx
c000acce:	53                   	push   ebx
c000accf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000acd6:	e8 1f ed ff ff       	call   c00099fa <Device::addChild(Device*)>
c000acdb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ace1:	5b                   	pop    ebx
c000ace2:	5e                   	pop    esi
c000ace3:	5f                   	pop    edi
c000ace4:	5d                   	pop    ebp
c000ace5:	c3                   	ret    

c000ace6 <createPartitionsForDisk(PhysicalDisk*)>:
c000ace6:	55                   	push   ebp
c000ace7:	57                   	push   edi
c000ace8:	56                   	push   esi
c000ace9:	53                   	push   ebx
c000acea:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000acf0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000acf7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000acfd:	3d 00 02 00 00       	cmp    eax,0x200
c000ad02:	74 27                	je     c000ad2b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ad04:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ad0a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ad10:	83 ec 10             	sub    esp,0x10
c000ad13:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ad17:	99                   	cdq    
c000ad18:	c1 e6 0a             	shl    esi,0xa
c000ad1b:	52                   	push   edx
c000ad1c:	89 fd                	mov    ebp,edi
c000ad1e:	50                   	push   eax
c000ad1f:	55                   	push   ebp
c000ad20:	56                   	push   esi
c000ad21:	e8 ce 67 01 00       	call   c00214f4 <__udivdi3>
c000ad26:	e9 b9 00 00 00       	jmp    c000ade4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad2b:	83 ec 0c             	sub    esp,0xc
c000ad2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ad30:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ad34:	56                   	push   esi
c000ad35:	6a 01                	push   0x1
c000ad37:	6a 00                	push   0x0
c000ad39:	6a 00                	push   0x0
c000ad3b:	53                   	push   ebx
c000ad3c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ad3f:	83 c4 20             	add    esp,0x20
c000ad42:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ad4a:	75 0a                	jne    c000ad56 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ad4c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ad54:	74 2c                	je     c000ad82 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ad56:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ad5c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ad62:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ad68:	83 ec 10             	sub    esp,0x10
c000ad6b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ad6f:	89 f7                	mov    edi,esi
c000ad71:	c1 e0 0a             	shl    eax,0xa
c000ad74:	c1 ff 1f             	sar    edi,0x1f
c000ad77:	57                   	push   edi
c000ad78:	56                   	push   esi
c000ad79:	52                   	push   edx
c000ad7a:	50                   	push   eax
c000ad7b:	e8 74 67 01 00       	call   c00214f4 <__udivdi3>
c000ad80:	eb 62                	jmp    c000ade4 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000ad82:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ad89:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000ad90:	89 cf                	mov    edi,ecx
c000ad92:	83 e2 7f             	and    edx,0x7f
c000ad95:	83 e7 7f             	and    edi,0x7f
c000ad98:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ad9f:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000ada2:	83 e0 7f             	and    eax,0x7f
c000ada5:	8d 14 01             	lea    edx,[ecx+eax*1]
c000ada8:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000adaf:	83 e0 7f             	and    eax,0x7f
c000adb2:	01 d0                	add    eax,edx
c000adb4:	89 c5                	mov    ebp,eax
c000adb6:	84 c0                	test   al,al
c000adb8:	74 41                	je     c000adfb <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000adba:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000adc0:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000adc6:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000adcc:	83 ec 10             	sub    esp,0x10
c000adcf:	0f a4 c2 0a          	shld   edx,eax,0xa
c000add3:	89 f7                	mov    edi,esi
c000add5:	c1 e0 0a             	shl    eax,0xa
c000add8:	c1 ff 1f             	sar    edi,0x1f
c000addb:	57                   	push   edi
c000addc:	56                   	push   esi
c000addd:	52                   	push   edx
c000adde:	50                   	push   eax
c000addf:	e8 10 67 01 00       	call   c00214f4 <__udivdi3>
c000ade4:	83 c4 14             	add    esp,0x14
c000ade7:	52                   	push   edx
c000ade8:	50                   	push   eax
c000ade9:	6a 00                	push   0x0
c000adeb:	6a 00                	push   0x0
c000aded:	53                   	push   ebx
c000adee:	e8 4b fe ff ff       	call   c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000adf3:	83 c4 20             	add    esp,0x20
c000adf6:	e9 73 01 00 00       	jmp    c000af6e <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000adfb:	89 f0                	mov    eax,esi
c000adfd:	31 c9                	xor    ecx,ecx
c000adff:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000ae06:	75 02                	jne    c000ae0a <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000ae08:	89 cd                	mov    ebp,ecx
c000ae0a:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000ae11:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ae18:	c1 e2 08             	shl    edx,0x8
c000ae1b:	c1 e6 10             	shl    esi,0x10
c000ae1e:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000ae26:	09 f2                	or     edx,esi
c000ae28:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000ae30:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000ae37:	83 c0 10             	add    eax,0x10
c000ae3a:	09 f2                	or     edx,esi
c000ae3c:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000ae43:	c1 e6 18             	shl    esi,0x18
c000ae46:	09 f2                	or     edx,esi
c000ae48:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000ae4f:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000ae53:	c1 e6 10             	shl    esi,0x10
c000ae56:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000ae5d:	c1 e2 08             	shl    edx,0x8
c000ae60:	09 f2                	or     edx,esi
c000ae62:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000ae69:	09 f2                	or     edx,esi
c000ae6b:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000ae72:	c1 e6 18             	shl    esi,0x18
c000ae75:	09 f2                	or     edx,esi
c000ae77:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000ae7b:	41                   	inc    ecx
c000ae7c:	83 f9 04             	cmp    ecx,0x4
c000ae7f:	0f 85 7a ff ff ff    	jne    c000adff <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000ae85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ae89:	83 f0 01             	xor    eax,0x1
c000ae8c:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000ae90:	75 4f                	jne    c000aee1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae92:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ae96:	83 f0 01             	xor    eax,0x1
c000ae99:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000ae9d:	75 42                	jne    c000aee1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000ae9f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000aea7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000aeaf:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000aeb5:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000aebb:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000aec1:	0f a4 c2 0a          	shld   edx,eax,0xa
c000aec5:	89 f7                	mov    edi,esi
c000aec7:	c1 e0 0a             	shl    eax,0xa
c000aeca:	c1 ff 1f             	sar    edi,0x1f
c000aecd:	57                   	push   edi
c000aece:	56                   	push   esi
c000aecf:	52                   	push   edx
c000aed0:	50                   	push   eax
c000aed1:	e8 1e 66 01 00       	call   c00214f4 <__udivdi3>
c000aed6:	83 c4 10             	add    esp,0x10
c000aed9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000aedd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000aee1:	89 e8                	mov    eax,ebp
c000aee3:	0f b6 e8             	movzx  ebp,al
c000aee6:	85 ed                	test   ebp,ebp
c000aee8:	74 50                	je     c000af3a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000aeea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000aeee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000aef2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000aef6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000aefa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aefe:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000af02:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af06:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000af0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000af12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000af16:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000af1a:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000af1e:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af22:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af26:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000af2a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000af2e:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000af32:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000af36:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000af3a:	31 ed                	xor    ebp,ebp
c000af3c:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000af40:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000af44:	89 f8                	mov    eax,edi
c000af46:	09 f0                	or     eax,esi
c000af48:	74 1e                	je     c000af68 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af4a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000af4e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000af52:	89 d1                	mov    ecx,edx
c000af54:	09 c1                	or     ecx,eax
c000af56:	74 10                	je     c000af68 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000af58:	83 ec 0c             	sub    esp,0xc
c000af5b:	57                   	push   edi
c000af5c:	56                   	push   esi
c000af5d:	52                   	push   edx
c000af5e:	50                   	push   eax
c000af5f:	53                   	push   ebx
c000af60:	e8 d9 fc ff ff       	call   c000ac3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000af65:	83 c4 20             	add    esp,0x20
c000af68:	45                   	inc    ebp
c000af69:	83 fd 04             	cmp    ebp,0x4
c000af6c:	75 ce                	jne    c000af3c <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000af6e:	81 c4 5c 02 00 00    	add    esp,0x25c
c000af74:	5b                   	pop    ebx
c000af75:	5e                   	pop    esi
c000af76:	5f                   	pop    edi
c000af77:	5d                   	pop    ebp
c000af78:	c3                   	ret    
c000af79:	66 90                	xchg   ax,ax
c000af7b:	90                   	nop

c000af7c <Serial::Serial(char const*)>:
c000af7c:	83 ec 0c             	sub    esp,0xc
c000af7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af83:	83 ec 08             	sub    esp,0x8
c000af86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af8a:	50                   	push   eax
c000af8b:	e8 cc eb ff ff       	call   c0009b5c <Device::Device(char const*)>
c000af90:	83 c4 10             	add    esp,0x10
c000af93:	ba 70 33 02 c0       	mov    edx,0xc0023370
c000af98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9c:	89 10                	mov    DWORD PTR [eax],edx
c000af9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afa2:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000afac:	90                   	nop
c000afad:	83 c4 0c             	add    esp,0xc
c000afb0:	c3                   	ret    
c000afb1:	90                   	nop
c000afb2:	66 90                	xchg   ax,ax

c000afb4 <Serial::~Serial()>:
c000afb4:	83 ec 0c             	sub    esp,0xc
c000afb7:	ba 70 33 02 c0       	mov    edx,0xc0023370
c000afbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc0:	89 10                	mov    DWORD PTR [eax],edx
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	83 ec 0c             	sub    esp,0xc
c000afc9:	50                   	push   eax
c000afca:	e8 2d e9 ff ff       	call   c00098fc <Device::~Device()>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	90                   	nop
c000afd3:	83 c4 0c             	add    esp,0xc
c000afd6:	c3                   	ret    
c000afd7:	90                   	nop

c000afd8 <Serial::~Serial()>:
c000afd8:	83 ec 0c             	sub    esp,0xc
c000afdb:	83 ec 0c             	sub    esp,0xc
c000afde:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afe2:	e8 cd ff ff ff       	call   c000afb4 <Serial::~Serial()>
c000afe7:	83 c4 10             	add    esp,0x10
c000afea:	83 ec 08             	sub    esp,0x8
c000afed:	68 58 01 00 00       	push   0x158
c000aff2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aff6:	e8 e8 22 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c000affb:	83 c4 10             	add    esp,0x10
c000affe:	83 c4 0c             	add    esp,0xc
c000b001:	c3                   	ret    
c000b002:	66 90                	xchg   ax,ax

c000b004 <Timer::Timer(char const*)>:
c000b004:	83 ec 0c             	sub    esp,0xc
c000b007:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b00b:	83 ec 08             	sub    esp,0x8
c000b00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b012:	50                   	push   eax
c000b013:	e8 44 eb ff ff       	call   c0009b5c <Device::Device(char const*)>
c000b018:	83 c4 10             	add    esp,0x10
c000b01b:	ba 20 34 02 c0       	mov    edx,0xc0023420
c000b020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b024:	89 10                	mov    DWORD PTR [eax],edx
c000b026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b02a:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000b034:	90                   	nop
c000b035:	83 c4 0c             	add    esp,0xc
c000b038:	c3                   	ret    
c000b039:	90                   	nop
c000b03a:	66 90                	xchg   ax,ax

c000b03c <Timer::~Timer()>:
c000b03c:	83 ec 0c             	sub    esp,0xc
c000b03f:	ba 20 34 02 c0       	mov    edx,0xc0023420
c000b044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b048:	89 10                	mov    DWORD PTR [eax],edx
c000b04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04e:	83 ec 0c             	sub    esp,0xc
c000b051:	50                   	push   eax
c000b052:	e8 a5 e8 ff ff       	call   c00098fc <Device::~Device()>
c000b057:	83 c4 10             	add    esp,0x10
c000b05a:	90                   	nop
c000b05b:	83 c4 0c             	add    esp,0xc
c000b05e:	c3                   	ret    
c000b05f:	90                   	nop

c000b060 <Timer::~Timer()>:
c000b060:	83 ec 0c             	sub    esp,0xc
c000b063:	83 ec 0c             	sub    esp,0xc
c000b066:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b06a:	e8 cd ff ff ff       	call   c000b03c <Timer::~Timer()>
c000b06f:	83 c4 10             	add    esp,0x10
c000b072:	83 ec 08             	sub    esp,0x8
c000b075:	68 5c 01 00 00       	push   0x15c
c000b07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b07e:	e8 60 22 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c000b083:	83 c4 10             	add    esp,0x10
c000b086:	83 c4 0c             	add    esp,0xc
c000b089:	c3                   	ret    

c000b08a <Timer::read()>:
c000b08a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b08e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b094:	c3                   	ret    

c000b095 <setupTimer(int)>:
c000b095:	53                   	push   ebx
c000b096:	83 ec 14             	sub    esp,0x14
c000b099:	68 5c 01 00 00       	push   0x15c
c000b09e:	e8 b8 4b 00 00       	call   c000fc5b <malloc>
c000b0a3:	89 04 24             	mov    DWORD PTR [esp],eax
c000b0a6:	89 c3                	mov    ebx,eax
c000b0a8:	e8 c7 5c 01 00       	call   c0020d74 <PIT::PIT()>
c000b0ad:	58                   	pop    eax
c000b0ae:	5a                   	pop    edx
c000b0af:	53                   	push   ebx
c000b0b0:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c000b0b6:	e8 3f e9 ff ff       	call   c00099fa <Device::addChild(Device*)>
c000b0bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0bd:	6a 00                	push   0x0
c000b0bf:	6a 00                	push   0x0
c000b0c1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000b0c5:	53                   	push   ebx
c000b0c6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0c9:	89 d8                	mov    eax,ebx
c000b0cb:	83 c4 28             	add    esp,0x28
c000b0ce:	5b                   	pop    ebx
c000b0cf:	c3                   	ret    

c000b0d0 <timerHandler(unsigned int)>:
c000b0d0:	57                   	push   edi
c000b0d1:	56                   	push   esi
c000b0d2:	53                   	push   ebx
c000b0d3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b0d7:	01 35 4c bb 02 c0    	add    DWORD PTR ds:0xc002bb4c,esi
c000b0dd:	80 3d d5 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d5,0x0
c000b0e4:	75 12                	jne    c000b0f8 <timerHandler(unsigned int)+0x28>
c000b0e6:	c7 44 24 10 ff 33 02 c0 	mov    DWORD PTR [esp+0x10],0xc00233ff
c000b0ee:	5b                   	pop    ebx
c000b0ef:	5e                   	pop    esi
c000b0f0:	5f                   	pop    edi
c000b0f1:	e9 6e be ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c000b0f6:	66 90                	xchg   ax,ax
c000b0f8:	fa                   	cli    
c000b0f9:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000b0ff:	83 ec 0c             	sub    esp,0xc
c000b102:	68 40 ea 02 c0       	push   0xc002ea40
c000b107:	e8 80 67 01 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b10c:	83 c4 10             	add    esp,0x10
c000b10f:	84 c0                	test   al,al
c000b111:	0f 85 a1 00 00 00    	jne    c000b1b8 <timerHandler(unsigned int)+0xe8>
c000b117:	83 ec 0c             	sub    esp,0xc
c000b11a:	68 40 ea 02 c0       	push   0xc002ea40
c000b11f:	e8 84 67 01 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b124:	83 c4 10             	add    esp,0x10
c000b127:	89 c7                	mov    edi,eax
c000b129:	8d 76 00             	lea    esi,[esi+0x0]
c000b12c:	83 ec 0c             	sub    esp,0xc
c000b12f:	68 40 ea 02 c0       	push   0xc002ea40
c000b134:	e8 6f 67 01 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b139:	c7 04 24 40 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea40
c000b140:	89 c3                	mov    ebx,eax
c000b142:	e8 69 67 01 00       	call   c00218b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000b147:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000b14a:	83 c4 10             	add    esp,0x10
c000b14d:	3b 05 4c bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb4c
c000b153:	77 23                	ja     c000b178 <timerHandler(unsigned int)+0xa8>
c000b155:	83 ec 0c             	sub    esp,0xc
c000b158:	53                   	push   ebx
c000b159:	e8 72 bd 00 00       	call   c0016ed0 <unblockTask(ThreadControlBlock*)>
c000b15e:	83 c4 10             	add    esp,0x10
c000b161:	39 df                	cmp    edi,ebx
c000b163:	75 27                	jne    c000b18c <timerHandler(unsigned int)+0xbc>
c000b165:	83 ec 0c             	sub    esp,0xc
c000b168:	68 40 ea 02 c0       	push   0xc002ea40
c000b16d:	e8 36 67 01 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b172:	89 c7                	mov    edi,eax
c000b174:	eb 12                	jmp    c000b188 <timerHandler(unsigned int)+0xb8>
c000b176:	66 90                	xchg   ax,ax
c000b178:	50                   	push   eax
c000b179:	50                   	push   eax
c000b17a:	53                   	push   ebx
c000b17b:	68 40 ea 02 c0       	push   0xc002ea40
c000b180:	e8 e7 67 01 00       	call   c002196c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000b185:	8d 76 00             	lea    esi,[esi+0x0]
c000b188:	83 c4 10             	add    esp,0x10
c000b18b:	90                   	nop
c000b18c:	83 ec 0c             	sub    esp,0xc
c000b18f:	68 40 ea 02 c0       	push   0xc002ea40
c000b194:	e8 f3 66 01 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000b199:	83 c4 10             	add    esp,0x10
c000b19c:	84 c0                	test   al,al
c000b19e:	75 18                	jne    c000b1b8 <timerHandler(unsigned int)+0xe8>
c000b1a0:	83 ec 0c             	sub    esp,0xc
c000b1a3:	68 40 ea 02 c0       	push   0xc002ea40
c000b1a8:	e8 fb 66 01 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000b1ad:	83 c4 10             	add    esp,0x10
c000b1b0:	39 f8                	cmp    eax,edi
c000b1b2:	0f 85 74 ff ff ff    	jne    c000b12c <timerHandler(unsigned int)+0x5c>
c000b1b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000b1be:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000b1c1:	85 c0                	test   eax,eax
c000b1c3:	74 1b                	je     c000b1e0 <timerHandler(unsigned int)+0x110>
c000b1c5:	80 3d d4 c0 02 c0 00 	cmp    BYTE PTR ds:0xc002c0d4,0x0
c000b1cc:	74 12                	je     c000b1e0 <timerHandler(unsigned int)+0x110>
c000b1ce:	89 c1                	mov    ecx,eax
c000b1d0:	29 f1                	sub    ecx,esi
c000b1d2:	39 f0                	cmp    eax,esi
c000b1d4:	89 4a 34             	mov    DWORD PTR [edx+0x34],ecx
c000b1d7:	77 07                	ja     c000b1e0 <timerHandler(unsigned int)+0x110>
c000b1d9:	e8 e2 b9 00 00       	call   c0016bc0 <schedule()>
c000b1de:	66 90                	xchg   ax,ax
c000b1e0:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000b1e7:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000b1ee:	75 04                	jne    c000b1f4 <timerHandler(unsigned int)+0x124>
c000b1f0:	fb                   	sti    
c000b1f1:	8d 76 00             	lea    esi,[esi+0x0]
c000b1f4:	5b                   	pop    ebx
c000b1f5:	5e                   	pop    esi
c000b1f6:	5f                   	pop    edi
c000b1f7:	c3                   	ret    

c000b1f8 <VCache::VCache(PhysicalDisk*)>:
c000b1f8:	53                   	push   ebx
c000b1f9:	83 ec 18             	sub    esp,0x18
c000b1fc:	ba 90 34 02 c0       	mov    edx,0xc0023490
c000b201:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b205:	89 10                	mov    DWORD PTR [eax],edx
c000b207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b20b:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000b212:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b216:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000b21d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b221:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000b228:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000b22f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b233:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000b23a:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000b241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b245:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000b24c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b250:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b258:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000b25f:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000b266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b26a:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b26e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b272:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000b276:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b27a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b27e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b282:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000b289:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000b291:	83 ec 0c             	sub    esp,0xc
c000b294:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b298:	e8 be 49 00 00       	call   c000fc5b <malloc>
c000b29d:	83 c4 10             	add    esp,0x10
c000b2a0:	89 c3                	mov    ebx,eax
c000b2a2:	83 ec 0c             	sub    esp,0xc
c000b2a5:	53                   	push   ebx
c000b2a6:	e8 dd 4c 00 00       	call   c000ff88 <Mutex::Mutex()>
c000b2ab:	83 c4 10             	add    esp,0x10
c000b2ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b2:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000b2b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2b9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000b2bd:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000b2c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2c4:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000b2cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2cf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b2d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2d9:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000b2dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b2e0:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000b2e6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000b2ec:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b2f0:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000b2f3:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000b2f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b2fa:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000b2fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b302:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b308:	05 00 01 00 00       	add    eax,0x100
c000b30d:	c1 e0 04             	shl    eax,0x4
c000b310:	83 ec 0c             	sub    esp,0xc
c000b313:	50                   	push   eax
c000b314:	e8 42 49 00 00       	call   c000fc5b <malloc>
c000b319:	83 c4 10             	add    esp,0x10
c000b31c:	89 c2                	mov    edx,eax
c000b31e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b322:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000b325:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b329:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000b330:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b334:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000b338:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b33c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000b342:	89 d0                	mov    eax,edx
c000b344:	c1 e0 02             	shl    eax,0x2
c000b347:	01 d0                	add    eax,edx
c000b349:	c1 e0 04             	shl    eax,0x4
c000b34c:	83 ec 0c             	sub    esp,0xc
c000b34f:	50                   	push   eax
c000b350:	e8 06 49 00 00       	call   c000fc5b <malloc>
c000b355:	83 c4 10             	add    esp,0x10
c000b358:	89 c2                	mov    edx,eax
c000b35a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b35e:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000b361:	90                   	nop
c000b362:	83 c4 18             	add    esp,0x18
c000b365:	5b                   	pop    ebx
c000b366:	c3                   	ret    
c000b367:	90                   	nop

c000b368 <VCache::invalidateReadBuffer()>:
c000b368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b36c:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000b372:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000b376:	c3                   	ret    
c000b377:	90                   	nop

c000b378 <VCache::writeWriteBuffer()>:
c000b378:	53                   	push   ebx
c000b379:	83 ec 08             	sub    esp,0x8
c000b37c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b380:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b384:	74 1e                	je     c000b3a4 <VCache::writeWriteBuffer()+0x2c>
c000b386:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b389:	83 ec 0c             	sub    esp,0xc
c000b38c:	8b 10                	mov    edx,DWORD PTR [eax]
c000b38e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000b391:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000b394:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000b397:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000b39a:	50                   	push   eax
c000b39b:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b39e:	83 c4 20             	add    esp,0x20
c000b3a1:	8d 76 00             	lea    esi,[esi+0x0]
c000b3a4:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000b3ab:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000b3b2:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000b3b6:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000b3bd:	83 c4 08             	add    esp,0x8
c000b3c0:	5b                   	pop    ebx
c000b3c1:	c3                   	ret    
c000b3c2:	66 90                	xchg   ax,ax

c000b3c4 <VCache::~VCache()>:
c000b3c4:	83 ec 0c             	sub    esp,0xc
c000b3c7:	ba 90 34 02 c0       	mov    edx,0xc0023490
c000b3cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d0:	89 10                	mov    DWORD PTR [eax],edx
c000b3d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3d6:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000b3d9:	0f b6 c0             	movzx  eax,al
c000b3dc:	85 c0                	test   eax,eax
c000b3de:	74 10                	je     c000b3f0 <VCache::~VCache()+0x2c>
c000b3e0:	83 ec 0c             	sub    esp,0xc
c000b3e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3e7:	e8 8c ff ff ff       	call   c000b378 <VCache::writeWriteBuffer()>
c000b3ec:	83 c4 10             	add    esp,0x10
c000b3ef:	90                   	nop
c000b3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3f4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000b3f7:	83 ec 0c             	sub    esp,0xc
c000b3fa:	50                   	push   eax
c000b3fb:	e8 6b 48 00 00       	call   c000fc6b <free>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b407:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000b40a:	83 ec 0c             	sub    esp,0xc
c000b40d:	50                   	push   eax
c000b40e:	e8 58 48 00 00       	call   c000fc6b <free>
c000b413:	83 c4 10             	add    esp,0x10
c000b416:	90                   	nop
c000b417:	83 c4 0c             	add    esp,0xc
c000b41a:	c3                   	ret    
c000b41b:	90                   	nop

c000b41c <VCache::~VCache()>:
c000b41c:	83 ec 0c             	sub    esp,0xc
c000b41f:	83 ec 0c             	sub    esp,0xc
c000b422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b426:	e8 99 ff ff ff       	call   c000b3c4 <VCache::~VCache()>
c000b42b:	83 c4 10             	add    esp,0x10
c000b42e:	83 ec 08             	sub    esp,0x8
c000b431:	6a 44                	push   0x44
c000b433:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b437:	e8 a7 1e 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c000b43c:	83 c4 10             	add    esp,0x10
c000b43f:	83 c4 0c             	add    esp,0xc
c000b442:	c3                   	ret    
c000b443:	90                   	nop

c000b444 <VCache::write(unsigned long long, int, void*)>:
c000b444:	55                   	push   ebp
c000b445:	57                   	push   edi
c000b446:	56                   	push   esi
c000b447:	53                   	push   ebx
c000b448:	83 ec 1c             	sub    esp,0x1c
c000b44b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b44f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b453:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000b457:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b45b:	e8 c0 b4 00 00       	call   c0016920 <KeDisablePreemption()>
c000b460:	b9 00 10 00 00       	mov    ecx,0x1000
c000b465:	50                   	push   eax
c000b466:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b469:	0f af c3             	imul   eax,ebx
c000b46c:	05 ff 0f 00 00       	add    eax,0xfff
c000b471:	99                   	cdq    
c000b472:	f7 f9                	idiv   ecx
c000b474:	50                   	push   eax
c000b475:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b479:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b47f:	e8 66 8c 00 00       	call   c00140ea <VAS::canLockPages(unsigned long, int)>
c000b484:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000b488:	83 c4 10             	add    esp,0x10
c000b48b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b490:	74 2a                	je     c000b4bc <VCache::write(unsigned long long, int, void*)+0x78>
c000b492:	b9 00 10 00 00       	mov    ecx,0x1000
c000b497:	50                   	push   eax
c000b498:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000b49b:	0f af c3             	imul   eax,ebx
c000b49e:	05 ff 0f 00 00       	add    eax,0xfff
c000b4a3:	99                   	cdq    
c000b4a4:	f7 f9                	idiv   ecx
c000b4a6:	50                   	push   eax
c000b4a7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b4ab:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b4b1:	e8 2e 90 00 00       	call   c00144e4 <VAS::lockPages(unsigned long, int)>
c000b4b6:	83 c4 10             	add    esp,0x10
c000b4b9:	8d 76 00             	lea    esi,[esi+0x0]
c000b4bc:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000b4c0:	74 0e                	je     c000b4d0 <VCache::write(unsigned long long, int, void*)+0x8c>
c000b4c2:	83 ec 0c             	sub    esp,0xc
c000b4c5:	55                   	push   ebp
c000b4c6:	e8 9d fe ff ff       	call   c000b368 <VCache::invalidateReadBuffer()>
c000b4cb:	83 c4 10             	add    esp,0x10
c000b4ce:	66 90                	xchg   ax,ax
c000b4d0:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000b4d4:	74 72                	je     c000b548 <VCache::write(unsigned long long, int, void*)+0x104>
c000b4d6:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000b4d9:	89 c8                	mov    eax,ecx
c000b4db:	99                   	cdq    
c000b4dc:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000b4df:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000b4e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b4e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b4ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b4ee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b4f2:	31 f0                	xor    eax,esi
c000b4f4:	31 fa                	xor    edx,edi
c000b4f6:	09 d0                	or     eax,edx
c000b4f8:	75 42                	jne    c000b53c <VCache::write(unsigned long long, int, void*)+0xf8>
c000b4fa:	83 fb 01             	cmp    ebx,0x1
c000b4fd:	75 3d                	jne    c000b53c <VCache::write(unsigned long long, int, void*)+0xf8>
c000b4ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b502:	89 cf                	mov    edi,ecx
c000b504:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b50a:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b50e:	0f af f8             	imul   edi,eax
c000b511:	89 c1                	mov    ecx,eax
c000b513:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000b516:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b518:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000b51b:	40                   	inc    eax
c000b51c:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000b51f:	83 f8 50             	cmp    eax,0x50
c000b522:	0f 85 a8 00 00 00    	jne    c000b5d0 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b528:	83 ec 0c             	sub    esp,0xc
c000b52b:	55                   	push   ebp
c000b52c:	e8 47 fe ff ff       	call   c000b378 <VCache::writeWriteBuffer()>
c000b531:	83 c4 10             	add    esp,0x10
c000b534:	e9 97 00 00 00       	jmp    c000b5d0 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b539:	8d 76 00             	lea    esi,[esi+0x0]
c000b53c:	83 ec 0c             	sub    esp,0xc
c000b53f:	55                   	push   ebp
c000b540:	e8 33 fe ff ff       	call   c000b378 <VCache::writeWriteBuffer()>
c000b545:	83 c4 10             	add    esp,0x10
c000b548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000b54b:	83 fb 4f             	cmp    ebx,0x4f
c000b54e:	7f 20                	jg     c000b570 <VCache::write(unsigned long long, int, void*)+0x12c>
c000b550:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000b553:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000b556:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000b559:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000b55d:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000b560:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b566:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b56a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b56c:	eb 62                	jmp    c000b5d0 <VCache::write(unsigned long long, int, void*)+0x18c>
c000b56e:	66 90                	xchg   ax,ax
c000b570:	83 ec 0c             	sub    esp,0xc
c000b573:	8b 10                	mov    edx,DWORD PTR [eax]
c000b575:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b579:	53                   	push   ebx
c000b57a:	57                   	push   edi
c000b57b:	56                   	push   esi
c000b57c:	50                   	push   eax
c000b57d:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000b580:	83 c4 20             	add    esp,0x20
c000b583:	89 c6                	mov    esi,eax
c000b585:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b58a:	74 28                	je     c000b5b4 <VCache::write(unsigned long long, int, void*)+0x170>
c000b58c:	b9 00 10 00 00       	mov    ecx,0x1000
c000b591:	52                   	push   edx
c000b592:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b596:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b59c:	99                   	cdq    
c000b59d:	f7 f9                	idiv   ecx
c000b59f:	50                   	push   eax
c000b5a0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5a4:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b5aa:	e8 77 8b 00 00       	call   c0014126 <VAS::unlockPages(unsigned long, int)>
c000b5af:	83 c4 10             	add    esp,0x10
c000b5b2:	66 90                	xchg   ax,ax
c000b5b4:	e8 8f b3 00 00       	call   c0016948 <KeRestorePreemption()>
c000b5b9:	85 f6                	test   esi,esi
c000b5bb:	74 4b                	je     c000b608 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5bd:	83 ec 0c             	sub    esp,0xc
c000b5c0:	68 48 34 02 c0       	push   0xc0023448
c000b5c5:	e8 9a b9 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b5ca:	83 c4 10             	add    esp,0x10
c000b5cd:	eb 39                	jmp    c000b608 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000b5cf:	90                   	nop
c000b5d0:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b5d5:	74 29                	je     c000b600 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000b5d7:	b9 00 10 00 00       	mov    ecx,0x1000
c000b5dc:	50                   	push   eax
c000b5dd:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000b5e1:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000b5e7:	99                   	cdq    
c000b5e8:	f7 f9                	idiv   ecx
c000b5ea:	50                   	push   eax
c000b5eb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000b5ef:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b5f5:	e8 2c 8b 00 00       	call   c0014126 <VAS::unlockPages(unsigned long, int)>
c000b5fa:	83 c4 10             	add    esp,0x10
c000b5fd:	8d 76 00             	lea    esi,[esi+0x0]
c000b600:	e8 43 b3 00 00       	call   c0016948 <KeRestorePreemption()>
c000b605:	31 f6                	xor    esi,esi
c000b607:	90                   	nop
c000b608:	83 c4 1c             	add    esp,0x1c
c000b60b:	89 f0                	mov    eax,esi
c000b60d:	5b                   	pop    ebx
c000b60e:	5e                   	pop    esi
c000b60f:	5f                   	pop    edi
c000b610:	5d                   	pop    ebp
c000b611:	c3                   	ret    

c000b612 <VCache::read(unsigned long long, int, void*)>:
c000b612:	55                   	push   ebp
c000b613:	57                   	push   edi
c000b614:	bf 00 10 00 00       	mov    edi,0x1000
c000b619:	56                   	push   esi
c000b61a:	53                   	push   ebx
c000b61b:	83 ec 2c             	sub    esp,0x2c
c000b61e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b622:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000b626:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b62a:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000b62e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b632:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000b636:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000b63a:	e8 e1 b2 00 00       	call   c0016920 <KeDisablePreemption()>
c000b63f:	50                   	push   eax
c000b640:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b643:	0f af c6             	imul   eax,esi
c000b646:	05 ff 0f 00 00       	add    eax,0xfff
c000b64b:	99                   	cdq    
c000b64c:	f7 ff                	idiv   edi
c000b64e:	50                   	push   eax
c000b64f:	55                   	push   ebp
c000b650:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b656:	e8 8f 8a 00 00       	call   c00140ea <VAS::canLockPages(unsigned long, int)>
c000b65b:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000b65f:	83 c4 10             	add    esp,0x10
c000b662:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b667:	74 1f                	je     c000b688 <VCache::read(unsigned long long, int, void*)+0x76>
c000b669:	50                   	push   eax
c000b66a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b66d:	0f af c6             	imul   eax,esi
c000b670:	05 ff 0f 00 00       	add    eax,0xfff
c000b675:	99                   	cdq    
c000b676:	f7 ff                	idiv   edi
c000b678:	50                   	push   eax
c000b679:	55                   	push   ebp
c000b67a:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b680:	e8 5f 8e 00 00       	call   c00144e4 <VAS::lockPages(unsigned long, int)>
c000b685:	83 c4 10             	add    esp,0x10
c000b688:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000b68c:	74 0e                	je     c000b69c <VCache::read(unsigned long long, int, void*)+0x8a>
c000b68e:	83 ec 0c             	sub    esp,0xc
c000b691:	53                   	push   ebx
c000b692:	e8 e1 fc ff ff       	call   c000b378 <VCache::writeWriteBuffer()>
c000b697:	83 c4 10             	add    esp,0x10
c000b69a:	66 90                	xchg   ax,ax
c000b69c:	83 fe 01             	cmp    esi,0x1
c000b69f:	0f 85 ef 00 00 00    	jne    c000b794 <VCache::read(unsigned long long, int, void*)+0x182>
c000b6a5:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000b6a8:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000b6af:	0f 85 df 00 00 00    	jne    c000b794 <VCache::read(unsigned long long, int, void*)+0x182>
c000b6b5:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b6b8:	89 fe                	mov    esi,edi
c000b6ba:	f7 de                	neg    esi
c000b6bc:	89 f0                	mov    eax,esi
c000b6be:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000b6c2:	c1 f8 1f             	sar    eax,0x1f
c000b6c5:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b6c9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b6cd:	89 f0                	mov    eax,esi
c000b6cf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000b6d3:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000b6d7:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000b6db:	89 f2                	mov    edx,esi
c000b6dd:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000b6e2:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000b6e6:	74 0c                	je     c000b6f4 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b6e8:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000b6eb:	75 07                	jne    c000b6f4 <VCache::read(unsigned long long, int, void*)+0xe2>
c000b6ed:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000b6f0:	74 4e                	je     c000b740 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b6f2:	66 90                	xchg   ax,ax
c000b6f4:	83 ec 0c             	sub    esp,0xc
c000b6f7:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000b6fb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000b6fe:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000b701:	8b 31                	mov    esi,DWORD PTR [ecx]
c000b703:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000b706:	57                   	push   edi
c000b707:	52                   	push   edx
c000b708:	50                   	push   eax
c000b709:	51                   	push   ecx
c000b70a:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000b70d:	83 c4 20             	add    esp,0x20
c000b710:	89 c7                	mov    edi,eax
c000b712:	85 c0                	test   eax,eax
c000b714:	74 2a                	je     c000b740 <VCache::read(unsigned long long, int, void*)+0x12e>
c000b716:	83 ec 0c             	sub    esp,0xc
c000b719:	68 60 34 02 c0       	push   0xc0023460
c000b71e:	e8 41 b8 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b723:	83 c4 10             	add    esp,0x10
c000b726:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b72b:	0f 84 b3 00 00 00    	je     c000b7e4 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b731:	51                   	push   ecx
c000b732:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b735:	05 ff 0f 00 00       	add    eax,0xfff
c000b73a:	e9 8d 00 00 00       	jmp    c000b7cc <VCache::read(unsigned long long, int, void*)+0x1ba>
c000b73f:	90                   	nop
c000b740:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b743:	89 ef                	mov    edi,ebp
c000b745:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000b74b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b74e:	8d 70 ff             	lea    esi,[eax-0x1]
c000b751:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000b755:	0f af f1             	imul   esi,ecx
c000b758:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000b75b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b75d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000b762:	74 24                	je     c000b788 <VCache::read(unsigned long long, int, void*)+0x176>
c000b764:	b9 00 10 00 00       	mov    ecx,0x1000
c000b769:	52                   	push   edx
c000b76a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000b76d:	05 ff 0f 00 00       	add    eax,0xfff
c000b772:	99                   	cdq    
c000b773:	f7 f9                	idiv   ecx
c000b775:	50                   	push   eax
c000b776:	55                   	push   ebp
c000b777:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b77d:	e8 a4 89 00 00       	call   c0014126 <VAS::unlockPages(unsigned long, int)>
c000b782:	83 c4 10             	add    esp,0x10
c000b785:	8d 76 00             	lea    esi,[esi+0x0]
c000b788:	e8 bb b1 00 00       	call   c0016948 <KeRestorePreemption()>
c000b78d:	31 ff                	xor    edi,edi
c000b78f:	eb 5b                	jmp    c000b7ec <VCache::read(unsigned long long, int, void*)+0x1da>
c000b791:	8d 76 00             	lea    esi,[esi+0x0]
c000b794:	83 ec 0c             	sub    esp,0xc
c000b797:	53                   	push   ebx
c000b798:	e8 cb fb ff ff       	call   c000b368 <VCache::invalidateReadBuffer()>
c000b79d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000b7a0:	8b 10                	mov    edx,DWORD PTR [eax]
c000b7a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b7a5:	56                   	push   esi
c000b7a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7aa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7ae:	50                   	push   eax
c000b7af:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000b7b2:	83 c4 20             	add    esp,0x20
c000b7b5:	89 c7                	mov    edi,eax
c000b7b7:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000b7bc:	74 26                	je     c000b7e4 <VCache::read(unsigned long long, int, void*)+0x1d2>
c000b7be:	50                   	push   eax
c000b7bf:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000b7c3:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000b7c9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7cc:	b9 00 10 00 00       	mov    ecx,0x1000
c000b7d1:	99                   	cdq    
c000b7d2:	f7 f9                	idiv   ecx
c000b7d4:	50                   	push   eax
c000b7d5:	55                   	push   ebp
c000b7d6:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000b7dc:	e8 45 89 00 00       	call   c0014126 <VAS::unlockPages(unsigned long, int)>
c000b7e1:	83 c4 10             	add    esp,0x10
c000b7e4:	e8 5f b1 00 00       	call   c0016948 <KeRestorePreemption()>
c000b7e9:	8d 76 00             	lea    esi,[esi+0x0]
c000b7ec:	83 c4 2c             	add    esp,0x2c
c000b7ef:	89 f8                	mov    eax,edi
c000b7f1:	5b                   	pop    ebx
c000b7f2:	5e                   	pop    esi
c000b7f3:	5f                   	pop    edi
c000b7f4:	5d                   	pop    ebp
c000b7f5:	c3                   	ret    

c000b7f6 <Video::putrect(int, int, int, int, unsigned int)>:
c000b7f6:	55                   	push   ebp
c000b7f7:	57                   	push   edi
c000b7f8:	56                   	push   esi
c000b7f9:	53                   	push   ebx
c000b7fa:	83 ec 1c             	sub    esp,0x1c
c000b7fd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b801:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b805:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000b809:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000b80d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b811:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b815:	01 df                	add    edi,ebx
c000b817:	39 fb                	cmp    ebx,edi
c000b819:	7d 1f                	jge    c000b83a <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000b81b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b81f:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000b823:	7d 12                	jge    c000b837 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000b825:	8b 16                	mov    edx,DWORD PTR [esi]
c000b827:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b82b:	53                   	push   ebx
c000b82c:	55                   	push   ebp
c000b82d:	45                   	inc    ebp
c000b82e:	56                   	push   esi
c000b82f:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b832:	83 c4 10             	add    esp,0x10
c000b835:	eb e8                	jmp    c000b81f <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000b837:	43                   	inc    ebx
c000b838:	eb dd                	jmp    c000b817 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000b83a:	83 c4 1c             	add    esp,0x1c
c000b83d:	5b                   	pop    ebx
c000b83e:	5e                   	pop    esi
c000b83f:	5f                   	pop    edi
c000b840:	5d                   	pop    ebp
c000b841:	c3                   	ret    

c000b842 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000b842:	55                   	push   ebp
c000b843:	57                   	push   edi
c000b844:	31 ff                	xor    edi,edi
c000b846:	56                   	push   esi
c000b847:	53                   	push   ebx
c000b848:	83 ec 1c             	sub    esp,0x1c
c000b84b:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000b84f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000b853:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000b85a:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000b85f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b863:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000b867:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b86b:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000b86e:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b872:	01 f9                	add    ecx,edi
c000b874:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000b878:	7d 2f                	jge    c000b8a9 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000b87a:	31 f6                	xor    esi,esi
c000b87c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000b880:	01 f2                	add    edx,esi
c000b882:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000b886:	7d 1a                	jge    c000b8a2 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000b888:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000b88b:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000b88e:	46                   	inc    esi
c000b88f:	51                   	push   ecx
c000b890:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000b894:	52                   	push   edx
c000b895:	55                   	push   ebp
c000b896:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b899:	83 c4 10             	add    esp,0x10
c000b89c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000b8a0:	eb da                	jmp    c000b87c <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000b8a2:	47                   	inc    edi
c000b8a3:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000b8a7:	eb c5                	jmp    c000b86e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000b8a9:	83 c4 1c             	add    esp,0x1c
c000b8ac:	5b                   	pop    ebx
c000b8ad:	5e                   	pop    esi
c000b8ae:	5f                   	pop    edi
c000b8af:	5d                   	pop    ebp
c000b8b0:	c3                   	ret    
c000b8b1:	90                   	nop

c000b8b2 <Video::blit(unsigned int*, int, int, int, int)>:
c000b8b2:	55                   	push   ebp
c000b8b3:	57                   	push   edi
c000b8b4:	56                   	push   esi
c000b8b5:	53                   	push   ebx
c000b8b6:	83 ec 1c             	sub    esp,0x1c
c000b8b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8bd:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8c1:	85 c0                	test   eax,eax
c000b8c3:	79 02                	jns    c000b8c7 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000b8c5:	31 c0                	xor    eax,eax
c000b8c7:	c1 e0 02             	shl    eax,0x2
c000b8ca:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000b8ce:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b8d2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b8d6:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000b8da:	39 d8                	cmp    eax,ebx
c000b8dc:	7e 49                	jle    c000b927 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b8de:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b8e4:	7c 41                	jl     c000b927 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000b8e6:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000b8ea:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b8ee:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000b8f2:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000b8f6:	39 f9                	cmp    ecx,edi
c000b8f8:	7e 22                	jle    c000b91c <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000b8fa:	83 c5 04             	add    ebp,0x4
c000b8fd:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b903:	7c 14                	jl     c000b919 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000b905:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000b907:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000b90a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b90e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000b912:	56                   	push   esi
c000b913:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000b916:	83 c4 10             	add    esp,0x10
c000b919:	47                   	inc    edi
c000b91a:	eb d2                	jmp    c000b8ee <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000b91c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b920:	43                   	inc    ebx
c000b921:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b925:	eb ab                	jmp    c000b8d2 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000b927:	83 c4 1c             	add    esp,0x1c
c000b92a:	5b                   	pop    ebx
c000b92b:	5e                   	pop    esi
c000b92c:	5f                   	pop    edi
c000b92d:	5d                   	pop    ebp
c000b92e:	c3                   	ret    
c000b92f:	90                   	nop

c000b930 <Video::clearScreen(unsigned int)>:
c000b930:	57                   	push   edi
c000b931:	56                   	push   esi
c000b932:	53                   	push   ebx
c000b933:	31 db                	xor    ebx,ebx
c000b935:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b939:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000b93f:	7e 1f                	jle    c000b960 <Video::clearScreen(unsigned int)+0x30>
c000b941:	31 ff                	xor    edi,edi
c000b943:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000b949:	7e 12                	jle    c000b95d <Video::clearScreen(unsigned int)+0x2d>
c000b94b:	8b 06                	mov    eax,DWORD PTR [esi]
c000b94d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b951:	53                   	push   ebx
c000b952:	57                   	push   edi
c000b953:	47                   	inc    edi
c000b954:	56                   	push   esi
c000b955:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b958:	83 c4 10             	add    esp,0x10
c000b95b:	eb e6                	jmp    c000b943 <Video::clearScreen(unsigned int)+0x13>
c000b95d:	43                   	inc    ebx
c000b95e:	eb d9                	jmp    c000b939 <Video::clearScreen(unsigned int)+0x9>
c000b960:	5b                   	pop    ebx
c000b961:	5e                   	pop    esi
c000b962:	5f                   	pop    edi
c000b963:	c3                   	ret    

c000b964 <Video::putpixel(int, int, unsigned int)>:
c000b964:	c7 44 24 04 98 34 02 c0 	mov    DWORD PTR [esp+0x4],0xc0023498
c000b96c:	e9 31 46 00 00       	jmp    c000ffa2 <KePanic(char const*)>
c000b971:	90                   	nop

c000b972 <Video::readPixelApprox(int, int)>:
c000b972:	83 ec 18             	sub    esp,0x18
c000b975:	68 b9 34 02 c0       	push   0xc00234b9
c000b97a:	e8 23 46 00 00       	call   c000ffa2 <KePanic(char const*)>
c000b97f:	31 c0                	xor    eax,eax
c000b981:	83 c4 1c             	add    esp,0x1c
c000b984:	c3                   	ret    
c000b985:	90                   	nop

c000b986 <Video::Video(char const*)>:
c000b986:	83 ec 0c             	sub    esp,0xc
c000b989:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b98d:	83 ec 08             	sub    esp,0x8
c000b990:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b994:	50                   	push   eax
c000b995:	e8 c2 e1 ff ff       	call   c0009b5c <Device::Device(char const*)>
c000b99a:	83 c4 10             	add    esp,0x10
c000b99d:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c000b9a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9a6:	89 10                	mov    DWORD PTR [eax],edx
c000b9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ac:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b9b6:	90                   	nop
c000b9b7:	83 c4 0c             	add    esp,0xc
c000b9ba:	c3                   	ret    
c000b9bb:	90                   	nop

c000b9bc <Video::~Video()>:
c000b9bc:	83 ec 0c             	sub    esp,0xc
c000b9bf:	ba 5c 35 02 c0       	mov    edx,0xc002355c
c000b9c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9c8:	89 10                	mov    DWORD PTR [eax],edx
c000b9ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b9ce:	83 ec 0c             	sub    esp,0xc
c000b9d1:	50                   	push   eax
c000b9d2:	e8 25 df ff ff       	call   c00098fc <Device::~Device()>
c000b9d7:	83 c4 10             	add    esp,0x10
c000b9da:	90                   	nop
c000b9db:	83 c4 0c             	add    esp,0xc
c000b9de:	c3                   	ret    
c000b9df:	90                   	nop

c000b9e0 <Video::~Video()>:
c000b9e0:	83 ec 0c             	sub    esp,0xc
c000b9e3:	83 ec 0c             	sub    esp,0xc
c000b9e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9ea:	e8 cd ff ff ff       	call   c000b9bc <Video::~Video()>
c000b9ef:	83 c4 10             	add    esp,0x10
c000b9f2:	83 ec 08             	sub    esp,0x8
c000b9f5:	68 64 01 00 00       	push   0x164
c000b9fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9fe:	e8 e0 18 00 00       	call   c000d2e3 <operator delete(void*, unsigned long)>
c000ba03:	83 c4 10             	add    esp,0x10
c000ba06:	83 c4 0c             	add    esp,0xc
c000ba09:	c3                   	ret    

c000ba0a <Video::isMonochrome()>:
c000ba0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba0e:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000ba14:	c3                   	ret    
c000ba15:	90                   	nop

c000ba16 <Video::getWidth()>:
c000ba16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba1a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ba20:	c3                   	ret    
c000ba21:	90                   	nop

c000ba22 <Video::getHeight()>:
c000ba22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba26:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000ba2c:	c3                   	ret    
c000ba2d:	90                   	nop

c000ba2e <Video::drawCursor(int, int, unsigned int*, int)>:
c000ba2e:	55                   	push   ebp
c000ba2f:	57                   	push   edi
c000ba30:	56                   	push   esi
c000ba31:	53                   	push   ebx
c000ba32:	83 ec 2c             	sub    esp,0x2c
c000ba35:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000ba39:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ba3d:	83 f8 01             	cmp    eax,0x1
c000ba40:	19 c9                	sbb    ecx,ecx
c000ba42:	31 db                	xor    ebx,ebx
c000ba44:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000ba48:	89 cd                	mov    ebp,ecx
c000ba4a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000ba52:	f7 d5                	not    ebp
c000ba54:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000ba5a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ba5e:	01 d8                	add    eax,ebx
c000ba60:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ba64:	56                   	push   esi
c000ba65:	e8 b8 ff ff ff       	call   c000ba22 <Video::getHeight()>
c000ba6a:	59                   	pop    ecx
c000ba6b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000ba6f:	7e 70                	jle    c000bae1 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000ba71:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ba75:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000ba79:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000ba7c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ba80:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ba84:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000ba8b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ba8f:	89 f8                	mov    eax,edi
c000ba91:	83 c0 20             	add    eax,0x20
c000ba94:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ba98:	56                   	push   esi
c000ba99:	e8 78 ff ff ff       	call   c000ba16 <Video::getWidth()>
c000ba9e:	5a                   	pop    edx
c000ba9f:	39 c7                	cmp    edi,eax
c000baa1:	7d 34                	jge    c000bad7 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000baa3:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000baa8:	74 05                	je     c000baaf <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000baaa:	8b 06                	mov    eax,DWORD PTR [esi]
c000baac:	55                   	push   ebp
c000baad:	eb 0d                	jmp    c000babc <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000baaf:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000bab4:	74 12                	je     c000bac8 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000bab6:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000babc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000bac0:	57                   	push   edi
c000bac1:	56                   	push   esi
c000bac2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000bac5:	83 c4 10             	add    esp,0x10
c000bac8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000bacc:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000bad0:	47                   	inc    edi
c000bad1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000bad5:	75 c1                	jne    c000ba98 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000bad7:	43                   	inc    ebx
c000bad8:	83 fb 20             	cmp    ebx,0x20
c000badb:	0f 85 79 ff ff ff    	jne    c000ba5a <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000bae1:	83 c4 2c             	add    esp,0x2c
c000bae4:	5b                   	pop    ebx
c000bae5:	5e                   	pop    esi
c000bae6:	5f                   	pop    edi
c000bae7:	5d                   	pop    ebp
c000bae8:	c3                   	ret    
c000bae9:	90                   	nop

c000baea <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000baea:	55                   	push   ebp
c000baeb:	57                   	push   edi
c000baec:	56                   	push   esi
c000baed:	53                   	push   ebx
c000baee:	83 ec 48             	sub    esp,0x48
c000baf1:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000baf5:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000baf9:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000bafd:	c1 e0 08             	shl    eax,0x8
c000bb00:	01 d0                	add    eax,edx
c000bb02:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000bb06:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb0a:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000bb0e:	c1 e0 08             	shl    eax,0x8
c000bb11:	01 d0                	add    eax,edx
c000bb13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bb17:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bb1b:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000bb20:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bb24:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb28:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000bb2f:	50                   	push   eax
c000bb30:	e8 26 41 00 00       	call   c000fc5b <malloc>
c000bb35:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb39:	83 c4 10             	add    esp,0x10
c000bb3c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000bb41:	75 10                	jne    c000bb53 <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000bb43:	83 ec 0c             	sub    esp,0xc
c000bb46:	68 e4 34 02 c0       	push   0xc00234e4
c000bb4b:	e8 52 44 00 00       	call   c000ffa2 <KePanic(char const*)>
c000bb50:	83 c4 10             	add    esp,0x10
c000bb53:	51                   	push   ecx
c000bb54:	51                   	push   ecx
c000bb55:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bb59:	50                   	push   eax
c000bb5a:	68 f4 34 02 c0       	push   0xc00234f4
c000bb5f:	e8 00 b4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bb64:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000bb67:	83 e0 20             	and    eax,0x20
c000bb6a:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	5e                   	pop    esi
c000bb71:	0f 94 c0             	sete   al
c000bb74:	5f                   	pop    edi
c000bb75:	0f b6 c0             	movzx  eax,al
c000bb78:	be 12 00 00 00       	mov    esi,0x12
c000bb7d:	50                   	push   eax
c000bb7e:	68 fe 34 02 c0       	push   0xc00234fe
c000bb83:	e8 dc b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bb88:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000bb8c:	83 c4 10             	add    esp,0x10
c000bb8f:	89 d0                	mov    eax,edx
c000bb91:	85 d2                	test   edx,edx
c000bb93:	74 11                	je     c000bba6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000bb95:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000bb99:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000bb9d:	c1 fe 03             	sar    esi,0x3
c000bba0:	0f af f1             	imul   esi,ecx
c000bba3:	83 c6 12             	add    esi,0x12
c000bba6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000bbab:	74 07                	je     c000bbb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000bbad:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000bbb2:	75 12                	jne    c000bbc6 <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000bbb4:	83 ec 0c             	sub    esp,0xc
c000bbb7:	68 0c 35 02 c0       	push   0xc002350c
c000bbbc:	e8 a3 b3 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000bbc1:	e9 a0 02 00 00       	jmp    c000be66 <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000bbc6:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000bbca:	83 f9 02             	cmp    ecx,0x2
c000bbcd:	74 0e                	je     c000bbdd <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000bbcf:	83 f9 0a             	cmp    ecx,0xa
c000bbd2:	0f 84 c8 00 00 00    	je     c000bca0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000bbd8:	e9 72 02 00 00       	jmp    c000be4f <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000bbdd:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bbe2:	75 0e                	jne    c000bbf2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bbe4:	84 c0                	test   al,al
c000bbe6:	75 0a                	jne    c000bbf2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000bbe8:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bbeb:	83 e8 18             	sub    eax,0x18
c000bbee:	a8 f7                	test   al,0xf7
c000bbf0:	74 0d                	je     c000bbff <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000bbf2:	83 ec 0c             	sub    esp,0xc
c000bbf5:	68 21 35 02 c0       	push   0xc0023521
c000bbfa:	e9 58 02 00 00       	jmp    c000be57 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bbff:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000bc04:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bc0c:	31 c0                	xor    eax,eax
c000bc0e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bc12:	89 c7                	mov    edi,eax
c000bc14:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000bc1c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000bc21:	75 15                	jne    c000bc38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc23:	99                   	cdq    
c000bc24:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bc28:	85 d2                	test   edx,edx
c000bc2a:	75 0c                	jne    c000bc38 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000bc2c:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000bc30:	29 c7                	sub    edi,eax
c000bc32:	4f                   	dec    edi
c000bc33:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000bc38:	31 d2                	xor    edx,edx
c000bc3a:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bc3e:	75 08                	jne    c000bc48 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000bc40:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000bc45:	c1 e2 18             	shl    edx,0x18
c000bc48:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000bc4d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000bc51:	c1 e1 10             	shl    ecx,0x10
c000bc54:	8d 47 01             	lea    eax,[edi+0x1]
c000bc57:	89 cd                	mov    ebp,ecx
c000bc59:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000bc5e:	c1 e1 08             	shl    ecx,0x8
c000bc61:	09 e9                	or     ecx,ebp
c000bc63:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bc67:	09 e9                	or     ecx,ebp
c000bc69:	09 d1                	or     ecx,edx
c000bc6b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000bc6f:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000bc72:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000bc76:	c1 fa 03             	sar    edx,0x3
c000bc79:	01 d6                	add    esi,edx
c000bc7b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bc7f:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000bc83:	7e 04                	jle    c000bc89 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000bc85:	89 c7                	mov    edi,eax
c000bc87:	eb 93                	jmp    c000bc1c <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000bc89:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bc8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bc91:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000bc95:	0f 8f 77 ff ff ff    	jg     c000bc12 <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000bc9b:	e9 d3 01 00 00       	jmp    c000be73 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bca0:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000bca5:	75 0e                	jne    c000bcb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bca7:	85 d2                	test   edx,edx
c000bca9:	75 0a                	jne    c000bcb5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000bcab:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000bcae:	83 e8 18             	sub    eax,0x18
c000bcb1:	a8 f7                	test   al,0xf7
c000bcb3:	74 0d                	je     c000bcc2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000bcb5:	83 ec 0c             	sub    esp,0xc
c000bcb8:	68 2f 35 02 c0       	push   0xc002352f
c000bcbd:	e9 95 01 00 00       	jmp    c000be57 <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000bcc2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bcca:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000bcd2:	31 c9                	xor    ecx,ecx
c000bcd4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bcd8:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000bcdc:	0f 8e 91 01 00 00    	jle    c000be73 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bce2:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000bce6:	0f 8d 87 01 00 00    	jge    c000be73 <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000bcec:	8d 46 01             	lea    eax,[esi+0x1]
c000bcef:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bcf3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bcf7:	83 fd 7f             	cmp    ebp,0x7f
c000bcfa:	89 e8                	mov    eax,ebp
c000bcfc:	0f 8e 9d 00 00 00    	jle    c000bd9f <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000bd02:	83 e0 7f             	and    eax,0x7f
c000bd05:	31 d2                	xor    edx,edx
c000bd07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000bd0b:	40                   	inc    eax
c000bd0c:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bd10:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bd14:	75 0a                	jne    c000bd20 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000bd16:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000bd1b:	89 ea                	mov    edx,ebp
c000bd1d:	c1 e2 18             	shl    edx,0x18
c000bd20:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000bd25:	c1 e0 10             	shl    eax,0x10
c000bd28:	89 c7                	mov    edi,eax
c000bd2a:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000bd2f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd33:	c1 e0 08             	shl    eax,0x8
c000bd36:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000bd3a:	09 f8                	or     eax,edi
c000bd3c:	31 f6                	xor    esi,esi
c000bd3e:	09 c5                	or     ebp,eax
c000bd40:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000bd45:	09 d5                	or     ebp,edx
c000bd47:	85 ff                	test   edi,edi
c000bd49:	75 1d                	jne    c000bd68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bd4b:	89 c8                	mov    eax,ecx
c000bd4d:	99                   	cdq    
c000bd4e:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bd52:	85 d2                	test   edx,edx
c000bd54:	75 12                	jne    c000bd68 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000bd56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bd5a:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bd5e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bd62:	49                   	dec    ecx
c000bd63:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bd68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bd6c:	8d 51 01             	lea    edx,[ecx+0x1]
c000bd6f:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000bd72:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000bd76:	8d 46 01             	lea    eax,[esi+0x1]
c000bd79:	7e 06                	jle    c000bd81 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000bd7b:	89 c6                	mov    esi,eax
c000bd7d:	89 d1                	mov    ecx,edx
c000bd7f:	eb c6                	jmp    c000bd47 <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000bd81:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000bd85:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000bd89:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000bd8d:	c1 f8 03             	sar    eax,0x3
c000bd90:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000bd94:	89 d1                	mov    ecx,edx
c000bd96:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000bd9a:	e9 35 ff ff ff       	jmp    c000bcd4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000bd9f:	8d 45 01             	lea    eax,[ebp+0x1]
c000bda2:	31 f6                	xor    esi,esi
c000bda4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bda8:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000bdad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bdb1:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000bdb6:	75 1d                	jne    c000bdd5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000bdb8:	89 c8                	mov    eax,ecx
c000bdba:	99                   	cdq    
c000bdbb:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000bdbf:	85 d2                	test   edx,edx
c000bdc1:	75 12                	jne    c000bdd5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000bdc3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bdc7:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000bdcb:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000bdcf:	49                   	dec    ecx
c000bdd0:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000bdd5:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000bddd:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000bde1:	75 10                	jne    c000bdf3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000bde3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bde7:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000bdec:	c1 e7 18             	shl    edi,0x18
c000bdef:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000bdf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bdf7:	8d 51 01             	lea    edx,[ecx+0x1]
c000bdfa:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000bdff:	c1 e0 10             	shl    eax,0x10
c000be02:	89 c7                	mov    edi,eax
c000be04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000be08:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000be0d:	c1 e0 08             	shl    eax,0x8
c000be10:	09 f8                	or     eax,edi
c000be12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000be16:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000be1a:	09 f8                	or     eax,edi
c000be1c:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000be20:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000be24:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000be27:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000be2b:	c1 f8 03             	sar    eax,0x3
c000be2e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000be32:	8d 46 01             	lea    eax,[esi+0x1]
c000be35:	39 f5                	cmp    ebp,esi
c000be37:	7e 09                	jle    c000be42 <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000be39:	89 c6                	mov    esi,eax
c000be3b:	89 d1                	mov    ecx,edx
c000be3d:	e9 6f ff ff ff       	jmp    c000bdb1 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000be42:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000be46:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000be4a:	e9 45 ff ff ff       	jmp    c000bd94 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000be4f:	52                   	push   edx
c000be50:	52                   	push   edx
c000be51:	51                   	push   ecx
c000be52:	68 3e 35 02 c0       	push   0xc002353e
c000be57:	e8 08 b1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000be5c:	58                   	pop    eax
c000be5d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000be61:	e8 05 3e 00 00       	call   c000fc6b <free>
c000be66:	83 c4 10             	add    esp,0x10
c000be69:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000be71:	eb 14                	jmp    c000be87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000be73:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000be77:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000be7b:	89 18                	mov    DWORD PTR [eax],ebx
c000be7d:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000be81:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be85:	89 18                	mov    DWORD PTR [eax],ebx
c000be87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be8b:	83 c4 3c             	add    esp,0x3c
c000be8e:	5b                   	pop    ebx
c000be8f:	5e                   	pop    esi
c000be90:	5f                   	pop    edi
c000be91:	5d                   	pop    ebp
c000be92:	c3                   	ret    
c000be93:	90                   	nop

c000be94 <Video::putTGA(int, int, unsigned char*, int)>:
c000be94:	55                   	push   ebp
c000be95:	57                   	push   edi
c000be96:	56                   	push   esi
c000be97:	53                   	push   ebx
c000be98:	83 ec 28             	sub    esp,0x28
c000be9b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000be9f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bea3:	50                   	push   eax
c000bea4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000bea8:	50                   	push   eax
c000bea9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000bead:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000beb1:	57                   	push   edi
c000beb2:	e8 33 fc ff ff       	call   c000baea <Video::tgaParse(unsigned char*, int, int*, int*)>
c000beb7:	83 c4 20             	add    esp,0x20
c000beba:	85 c0                	test   eax,eax
c000bebc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000bec0:	74 3a                	je     c000befc <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bec2:	89 c6                	mov    esi,eax
c000bec4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bec8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000becc:	39 d8                	cmp    eax,ebx
c000bece:	7e 2c                	jle    c000befc <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000bed0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000bed4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bed8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000bedc:	39 e8                	cmp    eax,ebp
c000bede:	7e 19                	jle    c000bef9 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000bee0:	83 c6 04             	add    esi,0x4
c000bee3:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000bee6:	85 c0                	test   eax,eax
c000bee8:	79 0c                	jns    c000bef6 <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000beea:	8b 17                	mov    edx,DWORD PTR [edi]
c000beec:	50                   	push   eax
c000beed:	53                   	push   ebx
c000beee:	55                   	push   ebp
c000beef:	57                   	push   edi
c000bef0:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000bef3:	83 c4 10             	add    esp,0x10
c000bef6:	45                   	inc    ebp
c000bef7:	eb db                	jmp    c000bed4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000bef9:	43                   	inc    ebx
c000befa:	eb c8                	jmp    c000bec4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000befc:	83 c4 1c             	add    esp,0x1c
c000beff:	5b                   	pop    ebx
c000bf00:	5e                   	pop    esi
c000bf01:	5f                   	pop    edi
c000bf02:	5d                   	pop    ebp
c000bf03:	c3                   	ret    

c000bf04 <ACPI::close(int, int, void*)>:
c000bf04:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf09:	c3                   	ret    
c000bf0a:	66 90                	xchg   ax,ax

c000bf0c <loadACPITables(unsigned char*)>:
c000bf0c:	57                   	push   edi
c000bf0d:	56                   	push   esi
c000bf0e:	53                   	push   ebx
c000bf0f:	83 ec 60             	sub    esp,0x60
c000bf12:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000bf17:	0f 84 43 02 00 00    	je     c000c160 <loadACPITables(unsigned char*)+0x254>
c000bf1d:	a0 80 bd 02 c0       	mov    al,ds:0xc002bd80
c000bf22:	0f b6 c0             	movzx  eax,al
c000bf25:	85 c0                	test   eax,eax
c000bf27:	74 7b                	je     c000bfa4 <loadACPITables(unsigned char*)+0x98>
c000bf29:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf2d:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bf31:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000bf35:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf38:	83 e8 24             	sub    eax,0x24
c000bf3b:	c1 e8 03             	shr    eax,0x3
c000bf3e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bf42:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000bf4a:	66 90                	xchg   ax,ax
c000bf4c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf50:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000bf54:	0f 8d ba 00 00 00    	jge    c000c014 <loadACPITables(unsigned char*)+0x108>
c000bf5a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bf5e:	83 c0 24             	add    eax,0x24
c000bf61:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bf65:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000bf69:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000bf6d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000bf71:	c1 e0 03             	shl    eax,0x3
c000bf74:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000bf78:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000bf7c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000bf7f:	8b 00                	mov    eax,DWORD PTR [eax]
c000bf81:	89 c1                	mov    ecx,eax
c000bf83:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bf88:	8d 50 01             	lea    edx,[eax+0x1]
c000bf8b:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000bf91:	89 ca                	mov    edx,ecx
c000bf93:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000bf9a:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000bf9f:	eb ab                	jmp    c000bf4c <loadACPITables(unsigned char*)+0x40>
c000bfa1:	8d 76 00             	lea    esi,[esi+0x0]
c000bfa4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfa8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000bfac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000bfb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bfb3:	83 e8 24             	sub    eax,0x24
c000bfb6:	c1 e8 02             	shr    eax,0x2
c000bfb9:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000bfbd:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000bfc5:	8d 76 00             	lea    esi,[esi+0x0]
c000bfc8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000bfcc:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000bfd0:	7d 42                	jge    c000c014 <loadACPITables(unsigned char*)+0x108>
c000bfd2:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000bfd6:	83 c0 24             	add    eax,0x24
c000bfd9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000bfdd:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000bfe1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bfe5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000bfe9:	c1 e0 02             	shl    eax,0x2
c000bfec:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000bff0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bff4:	8b 08                	mov    ecx,DWORD PTR [eax]
c000bff6:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000bffb:	8d 50 01             	lea    edx,[eax+0x1]
c000bffe:	89 15 60 bb 02 c0    	mov    DWORD PTR ds:0xc002bb60,edx
c000c004:	89 ca                	mov    edx,ecx
c000c006:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c00d:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000c012:	eb b4                	jmp    c000bfc8 <loadACPITables(unsigned char*)+0xbc>
c000c014:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000c01c:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c021:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000c025:	0f 8d 39 01 00 00    	jge    c000c164 <loadACPITables(unsigned char*)+0x258>
c000c02b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c02f:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c036:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c03a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c03e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c042:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c046:	25 ff 0f 00 00       	and    eax,0xfff
c000c04b:	89 c6                	mov    esi,eax
c000c04d:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c053:	83 ec 0c             	sub    esp,0xc
c000c056:	6a 01                	push   0x1
c000c058:	e8 38 73 00 00       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c000c05d:	83 c4 10             	add    esp,0x10
c000c060:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c064:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c06a:	83 ec 0c             	sub    esp,0xc
c000c06d:	6a 01                	push   0x1
c000c06f:	6a 01                	push   0x1
c000c071:	50                   	push   eax
c000c072:	52                   	push   edx
c000c073:	53                   	push   ebx
c000c074:	e8 e9 7b 00 00       	call   c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c079:	83 c4 20             	add    esp,0x20
c000c07c:	09 f0                	or     eax,esi
c000c07e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c082:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c086:	c1 e0 03             	shl    eax,0x3
c000c089:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c08e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c092:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c096:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c09a:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000c0a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c0a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0aa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0ae:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c0b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c0b6:	89 c6                	mov    esi,eax
c000c0b8:	89 d7                	mov    edi,edx
c000c0ba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c0bc:	89 c8                	mov    eax,ecx
c000c0be:	89 fa                	mov    edx,edi
c000c0c0:	89 f3                	mov    ebx,esi
c000c0c2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c0c6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c0ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c0ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c0d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0d9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c0dd:	05 00 10 00 00       	add    eax,0x1000
c000c0e2:	c1 e8 0c             	shr    eax,0xc
c000c0e5:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c0e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0ed:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c0f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c0f5:	25 ff 0f 00 00       	and    eax,0xfff
c000c0fa:	89 c6                	mov    esi,eax
c000c0fc:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c102:	83 ec 0c             	sub    esp,0xc
c000c105:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000c109:	e8 87 72 00 00       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c000c10e:	83 c4 10             	add    esp,0x10
c000c111:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c115:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c11b:	83 ec 0c             	sub    esp,0xc
c000c11e:	6a 01                	push   0x1
c000c120:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c124:	50                   	push   eax
c000c125:	52                   	push   edx
c000c126:	53                   	push   ebx
c000c127:	e8 36 7b 00 00       	call   c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c12c:	83 c4 20             	add    esp,0x20
c000c12f:	09 f0                	or     eax,esi
c000c131:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c135:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c139:	83 ec 0c             	sub    esp,0xc
c000c13c:	50                   	push   eax
c000c13d:	e8 5b 75 00 00       	call   c001369d <Virt::freeKernelVirtualPages(unsigned long)>
c000c142:	83 c4 10             	add    esp,0x10
c000c145:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000c149:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c14d:	89 14 c5 84 bb 02 c0 	mov    DWORD PTR [eax*8-0x3ffd447c],edx
c000c154:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000c159:	e9 be fe ff ff       	jmp    c000c01c <loadACPITables(unsigned char*)+0x110>
c000c15e:	66 90                	xchg   ax,ax
c000c160:	90                   	nop
c000c161:	8d 76 00             	lea    esi,[esi+0x0]
c000c164:	83 c4 60             	add    esp,0x60
c000c167:	5b                   	pop    ebx
c000c168:	5e                   	pop    esi
c000c169:	5f                   	pop    edi
c000c16a:	c3                   	ret    
c000c16b:	90                   	nop

c000c16c <findRSDT(unsigned char*)>:
c000c16c:	57                   	push   edi
c000c16d:	56                   	push   esi
c000c16e:	53                   	push   ebx
c000c16f:	83 ec 50             	sub    esp,0x50
c000c172:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c177:	85 c0                	test   eax,eax
c000c179:	75 0d                	jne    c000c188 <findRSDT(unsigned char*)+0x1c>
c000c17b:	b8 00 00 00 00       	mov    eax,0x0
c000c180:	e9 2b 01 00 00       	jmp    c000c2b0 <findRSDT(unsigned char*)+0x144>
c000c185:	8d 76 00             	lea    esi,[esi+0x0]
c000c188:	89 e0                	mov    eax,esp
c000c18a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000c18e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000c192:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c196:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000c19e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c1a2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c1a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c1aa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000c1ae:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000c1b2:	89 c6                	mov    esi,eax
c000c1b4:	89 d7                	mov    edi,edx
c000c1b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c1b8:	89 c8                	mov    eax,ecx
c000c1ba:	89 fa                	mov    edx,edi
c000c1bc:	89 f3                	mov    ebx,esi
c000c1be:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000c1c2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000c1c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c1ca:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000c1ce:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000c1d2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000c1da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c1de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c1e2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c1e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c1ea:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c1ee:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c1f2:	25 ff 0f 00 00       	and    eax,0xfff
c000c1f7:	89 c6                	mov    esi,eax
c000c1f9:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c1ff:	83 ec 0c             	sub    esp,0xc
c000c202:	6a 02                	push   0x2
c000c204:	e8 8c 71 00 00       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c000c209:	83 c4 10             	add    esp,0x10
c000c20c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000c210:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c216:	83 ec 0c             	sub    esp,0xc
c000c219:	6a 01                	push   0x1
c000c21b:	6a 02                	push   0x2
c000c21d:	50                   	push   eax
c000c21e:	52                   	push   edx
c000c21f:	53                   	push   ebx
c000c220:	e8 3d 7a 00 00       	call   c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c225:	83 c4 20             	add    esp,0x20
c000c228:	09 f0                	or     eax,esi
c000c22a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000c22e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c232:	25 ff 0f 00 00       	and    eax,0xfff
c000c237:	89 c6                	mov    esi,eax
c000c239:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c000c23f:	83 ec 0c             	sub    esp,0xc
c000c242:	6a 02                	push   0x2
c000c244:	e8 4c 71 00 00       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c000c249:	83 c4 10             	add    esp,0x10
c000c24c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c250:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000c256:	83 ec 0c             	sub    esp,0xc
c000c259:	6a 01                	push   0x1
c000c25b:	6a 02                	push   0x2
c000c25d:	50                   	push   eax
c000c25e:	52                   	push   edx
c000c25f:	53                   	push   ebx
c000c260:	e8 fd 79 00 00       	call   c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000c265:	83 c4 20             	add    esp,0x20
c000c268:	09 f0                	or     eax,esi
c000c26a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c26e:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c273:	85 c0                	test   eax,eax
c000c275:	75 11                	jne    c000c288 <findRSDT(unsigned char*)+0x11c>
c000c277:	c6 05 80 bd 02 c0 00 	mov    BYTE PTR ds:0xc002bd80,0x0
c000c27e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000c282:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c286:	eb 24                	jmp    c000c2ac <findRSDT(unsigned char*)+0x140>
c000c288:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000c28d:	83 f8 02             	cmp    eax,0x2
c000c290:	75 12                	jne    c000c2a4 <findRSDT(unsigned char*)+0x138>
c000c292:	c6 05 80 bd 02 c0 01 	mov    BYTE PTR ds:0xc002bd80,0x1
c000c299:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000c29d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c2a1:	eb 09                	jmp    c000c2ac <findRSDT(unsigned char*)+0x140>
c000c2a3:	90                   	nop
c000c2a4:	b8 00 00 00 00       	mov    eax,0x0
c000c2a9:	eb 05                	jmp    c000c2b0 <findRSDT(unsigned char*)+0x144>
c000c2ab:	90                   	nop
c000c2ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000c2b0:	83 c4 50             	add    esp,0x50
c000c2b3:	5b                   	pop    ebx
c000c2b4:	5e                   	pop    esi
c000c2b5:	5f                   	pop    edi
c000c2b6:	c3                   	ret    
c000c2b7:	90                   	nop

c000c2b8 <findDataTable(unsigned char*, char*)>:
c000c2b8:	83 ec 1c             	sub    esp,0x1c
c000c2bb:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000c2c0:	75 0a                	jne    c000c2cc <findDataTable(unsigned char*, char*)+0x14>
c000c2c2:	b8 00 00 00 00       	mov    eax,0x0
c000c2c7:	eb 5f                	jmp    c000c328 <findDataTable(unsigned char*, char*)+0x70>
c000c2c9:	8d 76 00             	lea    esi,[esi+0x0]
c000c2cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000c2d4:	a1 60 bb 02 c0       	mov    eax,ds:0xc002bb60
c000c2d9:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000c2dd:	7d 41                	jge    c000c320 <findDataTable(unsigned char*, char*)+0x68>
c000c2df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c2e3:	c1 e0 03             	shl    eax,0x3
c000c2e6:	05 80 bb 02 c0       	add    eax,0xc002bb80
c000c2eb:	83 ec 04             	sub    esp,0x4
c000c2ee:	6a 04                	push   0x4
c000c2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c2f4:	50                   	push   eax
c000c2f5:	e8 86 40 ff ff       	call   c0000380 <memcmp>
c000c2fa:	83 c4 10             	add    esp,0x10
c000c2fd:	85 c0                	test   eax,eax
c000c2ff:	0f 94 c0             	sete   al
c000c302:	0f b6 c0             	movzx  eax,al
c000c305:	85 c0                	test   eax,eax
c000c307:	74 0f                	je     c000c318 <findDataTable(unsigned char*, char*)+0x60>
c000c309:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c30d:	8b 04 c5 84 bb 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd447c]
c000c314:	eb 12                	jmp    c000c328 <findDataTable(unsigned char*, char*)+0x70>
c000c316:	66 90                	xchg   ax,ax
c000c318:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000c31d:	eb b5                	jmp    c000c2d4 <findDataTable(unsigned char*, char*)+0x1c>
c000c31f:	90                   	nop
c000c320:	b8 00 00 00 00       	mov    eax,0x0
c000c325:	8d 76 00             	lea    esi,[esi+0x0]
c000c328:	83 c4 1c             	add    esp,0x1c
c000c32b:	c3                   	ret    

c000c32c <scanMADT()>:
c000c32c:	53                   	push   ebx
c000c32d:	83 ec 38             	sub    esp,0x38
c000c330:	c7 05 88 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd88,0x0
c000c33a:	c7 05 84 bd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bd84,0x0
c000c344:	e8 af d0 00 00       	call   c00193f8 <HalFindRSDP()>
c000c349:	a3 88 bd 02 c0       	mov    ds:0xc002bd88,eax
c000c34e:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c353:	85 c0                	test   eax,eax
c000c355:	0f 84 11 04 00 00    	je     c000c76c <scanMADT()+0x440>
c000c35b:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000c360:	83 ec 0c             	sub    esp,0xc
c000c363:	50                   	push   eax
c000c364:	e8 03 fe ff ff       	call   c000c16c <findRSDT(unsigned char*)>
c000c369:	83 c4 10             	add    esp,0x10
c000c36c:	a3 84 bd 02 c0       	mov    ds:0xc002bd84,eax
c000c371:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c376:	85 c0                	test   eax,eax
c000c378:	0f 84 f2 03 00 00    	je     c000c770 <scanMADT()+0x444>
c000c37e:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c383:	83 ec 0c             	sub    esp,0xc
c000c386:	50                   	push   eax
c000c387:	e8 80 fb ff ff       	call   c000bf0c <loadACPITables(unsigned char*)>
c000c38c:	83 c4 10             	add    esp,0x10
c000c38f:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c394:	83 ec 08             	sub    esp,0x8
c000c397:	68 a0 35 02 c0       	push   0xc00235a0
c000c39c:	50                   	push   eax
c000c39d:	e8 16 ff ff ff       	call   c000c2b8 <findDataTable(unsigned char*, char*)>
c000c3a2:	83 c4 10             	add    esp,0x10
c000c3a5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3a9:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000c3ae:	0f 84 c0 03 00 00    	je     c000c774 <scanMADT()+0x448>
c000c3b4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000c3bc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c3c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c3c3:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000c3c7:	0f 87 af 03 00 00    	ja     c000c77c <scanMADT()+0x450>
c000c3cd:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000c3d5:	0f 87 a1 03 00 00    	ja     c000c77c <scanMADT()+0x450>
c000c3db:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c3df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000c3e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c3e7:	8d 50 01             	lea    edx,[eax+0x1]
c000c3ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c3f2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c3f6:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000c3fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c3fe:	8d 50 01             	lea    edx,[eax+0x1]
c000c401:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c405:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c409:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c40d:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000c411:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000c416:	83 f8 02             	cmp    eax,0x2
c000c419:	0f 86 59 03 00 00    	jbe    c000c778 <scanMADT()+0x44c>
c000c41f:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c424:	85 c0                	test   eax,eax
c000c426:	75 58                	jne    c000c480 <scanMADT()+0x154>
c000c428:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c42c:	8d 50 01             	lea    edx,[eax+0x1]
c000c42f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c433:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c439:	0f b6 d2             	movzx  edx,dl
c000c43c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c440:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c444:	88 82 c0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4040],al
c000c44a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c44e:	8d 50 01             	lea    edx,[eax+0x1]
c000c451:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c455:	8a 15 80 bf 02 c0    	mov    dl,BYTE PTR ds:0xc002bf80
c000c45b:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c45e:	88 0d 80 bf 02 c0    	mov    BYTE PTR ds:0xc002bf80,cl
c000c464:	0f b6 d2             	movzx  edx,dl
c000c467:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c46b:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c46f:	88 82 a0 bf 02 c0    	mov    BYTE PTR [edx-0x3ffd4060],al
c000c475:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c47a:	e9 d9 02 00 00       	jmp    c000c758 <scanMADT()+0x42c>
c000c47f:	90                   	nop
c000c480:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c485:	83 f8 01             	cmp    eax,0x1
c000c488:	0f 85 1a 01 00 00    	jne    c000c5a8 <scanMADT()+0x27c>
c000c48e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c492:	8d 50 01             	lea    edx,[eax+0x1]
c000c495:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c499:	8a 15 40 be 02 c0    	mov    dl,BYTE PTR ds:0xc002be40
c000c49f:	0f b6 d2             	movzx  edx,dl
c000c4a2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000c4a6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000c4aa:	88 82 60 be 02 c0    	mov    BYTE PTR [edx-0x3ffd41a0],al
c000c4b0:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000c4b5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c4b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4bd:	01 d0                	add    eax,edx
c000c4bf:	83 c0 2c             	add    eax,0x2c
c000c4c2:	8a 00                	mov    al,BYTE PTR [eax]
c000c4c4:	0f b6 d0             	movzx  edx,al
c000c4c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4cb:	8d 48 01             	lea    ecx,[eax+0x1]
c000c4ce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c4d2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c4d6:	0f b6 c0             	movzx  eax,al
c000c4d9:	c1 e0 08             	shl    eax,0x8
c000c4dc:	89 d1                	mov    ecx,edx
c000c4de:	09 c1                	or     ecx,eax
c000c4e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4e4:	8d 50 02             	lea    edx,[eax+0x2]
c000c4e7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c4eb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c4ef:	0f b6 c0             	movzx  eax,al
c000c4f2:	c1 e0 10             	shl    eax,0x10
c000c4f5:	09 c1                	or     ecx,eax
c000c4f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c4fb:	8d 50 03             	lea    edx,[eax+0x3]
c000c4fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c502:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c506:	0f b6 c0             	movzx  eax,al
c000c509:	c1 e0 18             	shl    eax,0x18
c000c50c:	09 c1                	or     ecx,eax
c000c50e:	89 ca                	mov    edx,ecx
c000c510:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c515:	0f b6 c0             	movzx  eax,al
c000c518:	89 14 85 80 be 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4180],edx
c000c51f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c524:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c528:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c52c:	01 d0                	add    eax,edx
c000c52e:	83 c0 2c             	add    eax,0x2c
c000c531:	8a 00                	mov    al,BYTE PTR [eax]
c000c533:	0f b6 d0             	movzx  edx,al
c000c536:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c53a:	8d 48 01             	lea    ecx,[eax+0x1]
c000c53d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c541:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c545:	0f b6 c0             	movzx  eax,al
c000c548:	c1 e0 08             	shl    eax,0x8
c000c54b:	89 d1                	mov    ecx,edx
c000c54d:	09 c1                	or     ecx,eax
c000c54f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c553:	8d 50 02             	lea    edx,[eax+0x2]
c000c556:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c55a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c55e:	0f b6 c0             	movzx  eax,al
c000c561:	c1 e0 10             	shl    eax,0x10
c000c564:	09 c1                	or     ecx,eax
c000c566:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c56a:	8d 50 03             	lea    edx,[eax+0x3]
c000c56d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c571:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c575:	0f b6 c0             	movzx  eax,al
c000c578:	c1 e0 18             	shl    eax,0x18
c000c57b:	09 c1                	or     ecx,eax
c000c57d:	89 ca                	mov    edx,ecx
c000c57f:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c584:	0f b6 c0             	movzx  eax,al
c000c587:	89 14 85 00 bf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4100],edx
c000c58e:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c593:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c000c598:	83 c0 01             	add    eax,0x1
c000c59b:	a2 40 be 02 c0       	mov    ds:0xc002be40,al
c000c5a0:	e9 b3 01 00 00       	jmp    c000c758 <scanMADT()+0x42c>
c000c5a5:	8d 76 00             	lea    esi,[esi+0x0]
c000c5a8:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c5ad:	83 f8 02             	cmp    eax,0x2
c000c5b0:	0f 85 ea 00 00 00    	jne    c000c6a0 <scanMADT()+0x374>
c000c5b6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5ba:	8d 50 01             	lea    edx,[eax+0x1]
c000c5bd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5c1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5c5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c5c9:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000c5cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5d1:	8d 50 01             	lea    edx,[eax+0x1]
c000c5d4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5d8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5dc:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c5e0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000c5e4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c5e8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5ec:	01 d0                	add    eax,edx
c000c5ee:	83 c0 2c             	add    eax,0x2c
c000c5f1:	8a 00                	mov    al,BYTE PTR [eax]
c000c5f3:	0f b6 d0             	movzx  edx,al
c000c5f6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c5fa:	8d 48 01             	lea    ecx,[eax+0x1]
c000c5fd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c601:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c605:	0f b6 c0             	movzx  eax,al
c000c608:	c1 e0 08             	shl    eax,0x8
c000c60b:	89 d1                	mov    ecx,edx
c000c60d:	09 c1                	or     ecx,eax
c000c60f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c613:	8d 50 02             	lea    edx,[eax+0x2]
c000c616:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c61a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c61e:	0f b6 c0             	movzx  eax,al
c000c621:	c1 e0 10             	shl    eax,0x10
c000c624:	09 c1                	or     ecx,eax
c000c626:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c62a:	8d 50 03             	lea    edx,[eax+0x3]
c000c62d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c631:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000c635:	0f b6 c0             	movzx  eax,al
c000c638:	c1 e0 18             	shl    eax,0x18
c000c63b:	09 c8                	or     eax,ecx
c000c63d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000c641:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000c646:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c64a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c64e:	01 d0                	add    eax,edx
c000c650:	83 c0 2c             	add    eax,0x2c
c000c653:	8a 00                	mov    al,BYTE PTR [eax]
c000c655:	0f b6 c0             	movzx  eax,al
c000c658:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000c65c:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c65f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c663:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000c667:	0f b6 d2             	movzx  edx,dl
c000c66a:	c1 e2 08             	shl    edx,0x8
c000c66d:	09 d0                	or     eax,edx
c000c66f:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000c674:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c679:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000c67e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c682:	88 90 88 5b 02 c0    	mov    BYTE PTR [eax-0x3ffda478],dl
c000c688:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000c68d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000c692:	66 89 84 12 20 be 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd41e0],ax
c000c69a:	e9 b9 00 00 00       	jmp    c000c758 <scanMADT()+0x42c>
c000c69f:	90                   	nop
c000c6a0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c6a5:	83 f8 04             	cmp    eax,0x4
c000c6a8:	0f 85 9a 00 00 00    	jne    c000c748 <scanMADT()+0x41c>
c000c6ae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6b2:	8d 50 01             	lea    edx,[eax+0x1]
c000c6b5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6b9:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6bd:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c6c1:	0f b6 c0             	movzx  eax,al
c000c6c4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c6c8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c6cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6d0:	01 d0                	add    eax,edx
c000c6d2:	83 c0 2c             	add    eax,0x2c
c000c6d5:	8a 00                	mov    al,BYTE PTR [eax]
c000c6d7:	0f b6 d0             	movzx  edx,al
c000c6da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6de:	8d 48 01             	lea    ecx,[eax+0x1]
c000c6e1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c6e5:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000c6e9:	0f b6 c0             	movzx  eax,al
c000c6ec:	c1 e0 08             	shl    eax,0x8
c000c6ef:	09 d0                	or     eax,edx
c000c6f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c6f5:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000c6fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c6fe:	8d 50 01             	lea    edx,[eax+0x1]
c000c701:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c705:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000c709:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000c70d:	0f b6 c0             	movzx  eax,al
c000c710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c714:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c718:	c1 e0 08             	shl    eax,0x8
c000c71b:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000c71f:	89 c1                	mov    ecx,eax
c000c721:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c725:	c1 e0 18             	shl    eax,0x18
c000c728:	89 c3                	mov    ebx,eax
c000c72a:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c000c72f:	8d 50 01             	lea    edx,[eax+0x1]
c000c732:	89 15 8c bd 02 c0    	mov    DWORD PTR ds:0xc002bd8c,edx
c000c738:	09 d9                	or     ecx,ebx
c000c73a:	89 ca                	mov    edx,ecx
c000c73c:	89 14 85 a0 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4260],edx
c000c743:	eb 13                	jmp    c000c758 <scanMADT()+0x42c>
c000c745:	8d 76 00             	lea    esi,[esi+0x0]
c000c748:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000c74d:	83 f8 05             	cmp    eax,0x5
c000c750:	75 06                	jne    c000c758 <scanMADT()+0x42c>
c000c752:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000c757:	90                   	nop
c000c758:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000c75d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000c761:	01 d0                	add    eax,edx
c000c763:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c767:	e9 50 fc ff ff       	jmp    c000c3bc <scanMADT()+0x90>
c000c76c:	90                   	nop
c000c76d:	eb 0d                	jmp    c000c77c <scanMADT()+0x450>
c000c76f:	90                   	nop
c000c770:	90                   	nop
c000c771:	eb 09                	jmp    c000c77c <scanMADT()+0x450>
c000c773:	90                   	nop
c000c774:	90                   	nop
c000c775:	eb 05                	jmp    c000c77c <scanMADT()+0x450>
c000c777:	90                   	nop
c000c778:	90                   	nop
c000c779:	8d 76 00             	lea    esi,[esi+0x0]
c000c77c:	83 c4 38             	add    esp,0x38
c000c77f:	5b                   	pop    ebx
c000c780:	c3                   	ret    
c000c781:	90                   	nop
c000c782:	66 90                	xchg   ax,ax

c000c784 <ACPI::ACPI()>:
c000c784:	83 ec 0c             	sub    esp,0xc
c000c787:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c78b:	83 ec 08             	sub    esp,0x8
c000c78e:	68 a5 35 02 c0       	push   0xc00235a5
c000c793:	50                   	push   eax
c000c794:	e8 c3 d3 ff ff       	call   c0009b5c <Device::Device(char const*)>
c000c799:	83 c4 10             	add    esp,0x10
c000c79c:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c000c7a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7a5:	89 10                	mov    DWORD PTR [eax],edx
c000c7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7ab:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000c7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7b6:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000c7c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c7c4:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000c7ce:	e8 59 fb ff ff       	call   c000c32c <scanMADT()>
c000c7d3:	90                   	nop
c000c7d4:	83 c4 0c             	add    esp,0xc
c000c7d7:	c3                   	ret    

c000c7d8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000c7d8:	83 ec 2c             	sub    esp,0x2c
c000c7db:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000c7df:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000c7e3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000c7e7:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000c7eb:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000c7f0:	88 d0                	mov    al,dl
c000c7f2:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c7f6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c7fb:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c803:	90                   	nop
c000c804:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c808:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c80e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000c812:	0f 8d b0 00 00 00    	jge    c000c8c8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000c818:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c81c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c820:	83 c2 2a             	add    edx,0x2a
c000c823:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000c827:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000c82c:	0f b7 c0             	movzx  eax,ax
c000c82f:	39 c2                	cmp    edx,eax
c000c831:	0f 85 85 00 00 00    	jne    c000c8bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c837:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c83b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c83f:	83 c2 2a             	add    edx,0x2a
c000c842:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000c846:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000c84b:	0f b6 c0             	movzx  eax,al
c000c84e:	39 c2                	cmp    edx,eax
c000c850:	75 6a                	jne    c000c8bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000c852:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c857:	85 c0                	test   eax,eax
c000c859:	74 3d                	je     c000c898 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000c85b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c85f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c863:	83 c2 2a             	add    edx,0x2a
c000c866:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000c86a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c86e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000c871:	39 c2                	cmp    edx,eax
c000c873:	74 13                	je     c000c888 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000c875:	83 ec 0c             	sub    esp,0xc
c000c878:	68 20 37 02 c0       	push   0xc0023720
c000c87d:	e8 20 37 00 00       	call   c000ffa2 <KePanic(char const*)>
c000c882:	83 c4 10             	add    esp,0x10
c000c885:	8d 76 00             	lea    esi,[esi+0x0]
c000c888:	83 ec 0c             	sub    esp,0xc
c000c88b:	68 aa 35 02 c0       	push   0xc00235aa
c000c890:	e8 0d 37 00 00       	call   c000ffa2 <KePanic(char const*)>
c000c895:	83 c4 10             	add    esp,0x10
c000c898:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000c89c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c8a0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000c8a4:	83 c2 2a             	add    edx,0x2a
c000c8a7:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000c8ab:	8b 02                	mov    eax,DWORD PTR [edx]
c000c8ad:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000c8b0:	89 01                	mov    DWORD PTR [ecx],eax
c000c8b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000c8b5:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c8ba:	66 90                	xchg   ax,ax
c000c8bc:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000c8c1:	e9 3e ff ff ff       	jmp    c000c804 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000c8c6:	66 90                	xchg   ax,ax
c000c8c8:	90                   	nop
c000c8c9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c8cd:	83 c4 2c             	add    esp,0x2c
c000c8d0:	c2 04 00             	ret    0x4
c000c8d3:	90                   	nop

c000c8d4 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000c8d4:	83 ec 1c             	sub    esp,0x1c
c000c8d7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000c8db:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000c8df:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000c8e3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000c8e8:	88 c8                	mov    al,cl
c000c8ea:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000c8ee:	88 d0                	mov    al,dl
c000c8f0:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000c8f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8f8:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c8fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c902:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c905:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000c909:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000c90d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c911:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c917:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c91b:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000c91e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c922:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000c927:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c92b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c931:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000c935:	83 c0 01             	add    eax,0x1
c000c938:	88 c1                	mov    cl,al
c000c93a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c93e:	83 c2 2a             	add    edx,0x2a
c000c941:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000c945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c949:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000c94f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c953:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000c956:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c95a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c95e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c962:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c968:	8d 50 01             	lea    edx,[eax+0x1]
c000c96b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c96f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c975:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c979:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c97f:	3d 00 02 00 00       	cmp    eax,0x200
c000c984:	75 12                	jne    c000c998 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c986:	83 ec 0c             	sub    esp,0xc
c000c989:	68 b9 35 02 c0       	push   0xc00235b9
c000c98e:	e8 0f 36 00 00       	call   c000ffa2 <KePanic(char const*)>
c000c993:	83 c4 10             	add    esp,0x10
c000c996:	66 90                	xchg   ax,ax
c000c998:	90                   	nop
c000c999:	83 c4 1c             	add    esp,0x1c
c000c99c:	c3                   	ret    
c000c99d:	90                   	nop
c000c99e:	66 90                	xchg   ax,ax

c000c9a0 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c9a0:	b8 00 00 00 00       	mov    eax,0x0
c000c9a5:	c3                   	ret    
c000c9a6:	66 90                	xchg   ax,ax

c000c9a8 <ACPI::detectPCI()>:
c000c9a8:	53                   	push   ebx
c000c9a9:	83 ec 28             	sub    esp,0x28
c000c9ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c9b1:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c9b6:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000c9bb:	83 ec 08             	sub    esp,0x8
c000c9be:	68 d6 35 02 c0       	push   0xc00235d6
c000c9c3:	50                   	push   eax
c000c9c4:	e8 ef f8 ff ff       	call   c000c2b8 <findDataTable(unsigned char*, char*)>
c000c9c9:	83 c4 10             	add    esp,0x10
c000c9cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9d0:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c9d5:	74 0d                	je     c000c9e4 <ACPI::detectPCI()+0x3c>
c000c9d7:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9dc:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c9e1:	8d 76 00             	lea    esi,[esi+0x0]
c000c9e4:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000c9ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c9f0:	8a 00                	mov    al,BYTE PTR [eax]
c000c9f2:	0f b6 c0             	movzx  eax,al
c000c9f5:	83 f8 01             	cmp    eax,0x1
c000c9f8:	75 0e                	jne    c000ca08 <ACPI::detectPCI()+0x60>
c000c9fa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c9ff:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca04:	eb 2e                	jmp    c000ca34 <ACPI::detectPCI()+0x8c>
c000ca06:	66 90                	xchg   ax,ax
c000ca08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ca0c:	8a 00                	mov    al,BYTE PTR [eax]
c000ca0e:	0f b6 c0             	movzx  eax,al
c000ca11:	83 f8 02             	cmp    eax,0x2
c000ca14:	75 1e                	jne    c000ca34 <ACPI::detectPCI()+0x8c>
c000ca16:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca1b:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ca20:	85 c0                	test   eax,eax
c000ca22:	74 10                	je     c000ca34 <ACPI::detectPCI()+0x8c>
c000ca24:	83 ec 0c             	sub    esp,0xc
c000ca27:	68 50 37 02 c0       	push   0xc0023750
c000ca2c:	e8 71 35 00 00       	call   c000ffa2 <KePanic(char const*)>
c000ca31:	83 c4 10             	add    esp,0x10
c000ca34:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000ca38:	83 f0 01             	xor    eax,0x1
c000ca3b:	0f b6 c0             	movzx  eax,al
c000ca3e:	85 c0                	test   eax,eax
c000ca40:	74 46                	je     c000ca88 <ACPI::detectPCI()+0xe0>
c000ca42:	e8 e9 36 ff ff       	call   c0000130 <manualPCIProbe>
c000ca47:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ca4b:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000ca50:	75 0e                	jne    c000ca60 <ACPI::detectPCI()+0xb8>
c000ca52:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca57:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000ca5c:	eb 2a                	jmp    c000ca88 <ACPI::detectPCI()+0xe0>
c000ca5e:	66 90                	xchg   ax,ax
c000ca60:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000ca65:	75 21                	jne    c000ca88 <ACPI::detectPCI()+0xe0>
c000ca67:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000ca6c:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000ca71:	85 c0                	test   eax,eax
c000ca73:	74 13                	je     c000ca88 <ACPI::detectPCI()+0xe0>
c000ca75:	83 ec 0c             	sub    esp,0xc
c000ca78:	68 50 37 02 c0       	push   0xc0023750
c000ca7d:	e8 20 35 00 00       	call   c000ffa2 <KePanic(char const*)>
c000ca82:	83 c4 10             	add    esp,0x10
c000ca85:	8d 76 00             	lea    esi,[esi+0x0]
c000ca88:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000ca8d:	85 c0                	test   eax,eax
c000ca8f:	0f 84 87 00 00 00    	je     c000cb1c <ACPI::detectPCI()+0x174>
c000ca95:	83 ec 0c             	sub    esp,0xc
c000ca98:	68 db 35 02 c0       	push   0xc00235db
c000ca9d:	e8 81 07 00 00       	call   c000d223 <KeSetBootMessage(char const*)>
c000caa2:	83 c4 10             	add    esp,0x10
c000caa5:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000caad:	83 ec 0c             	sub    esp,0xc
c000cab0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cab4:	e8 a2 31 00 00       	call   c000fc5b <malloc>
c000cab9:	83 c4 10             	add    esp,0x10
c000cabc:	89 c3                	mov    ebx,eax
c000cabe:	83 ec 0c             	sub    esp,0xc
c000cac1:	53                   	push   ebx
c000cac2:	e8 d9 06 01 00       	call   c001d1a0 <PCI::PCI()>
c000cac7:	83 c4 10             	add    esp,0x10
c000caca:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000cace:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cad2:	83 ec 08             	sub    esp,0x8
c000cad5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cad9:	50                   	push   eax
c000cada:	e8 1b cf ff ff       	call   c00099fa <Device::addChild(Device*)>
c000cadf:	83 c4 10             	add    esp,0x10
c000cae2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cae6:	8b 00                	mov    eax,DWORD PTR [eax]
c000cae8:	83 c0 08             	add    eax,0x8
c000caeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000caed:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000caf2:	85 d2                	test   edx,edx
c000caf4:	74 0a                	je     c000cb00 <ACPI::detectPCI()+0x158>
c000caf6:	ba 01 00 00 00       	mov    edx,0x1
c000cafb:	eb 0b                	jmp    c000cb08 <ACPI::detectPCI()+0x160>
c000cafd:	8d 76 00             	lea    esi,[esi+0x0]
c000cb00:	ba 02 00 00 00       	mov    edx,0x2
c000cb05:	8d 76 00             	lea    esi,[esi+0x0]
c000cb08:	6a 00                	push   0x0
c000cb0a:	6a 00                	push   0x0
c000cb0c:	52                   	push   edx
c000cb0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cb11:	ff d0                	call   eax
c000cb13:	83 c4 10             	add    esp,0x10
c000cb16:	e9 91 00 00 00       	jmp    c000cbac <ACPI::detectPCI()+0x204>
c000cb1b:	90                   	nop
c000cb1c:	83 ec 0c             	sub    esp,0xc
c000cb1f:	68 f3 35 02 c0       	push   0xc00235f3
c000cb24:	e8 fa 06 00 00       	call   c000d223 <KeSetBootMessage(char const*)>
c000cb29:	83 c4 10             	add    esp,0x10
c000cb2c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000cb33:	83 ec 0c             	sub    esp,0xc
c000cb36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb3a:	e8 1c 31 00 00       	call   c000fc5b <malloc>
c000cb3f:	83 c4 10             	add    esp,0x10
c000cb42:	89 c3                	mov    ebx,eax
c000cb44:	83 ec 0c             	sub    esp,0xc
c000cb47:	53                   	push   ebx
c000cb48:	e8 59 12 01 00       	call   c001dda6 <IDE::IDE()>
c000cb4d:	83 c4 10             	add    esp,0x10
c000cb50:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000cb54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cb58:	83 ec 08             	sub    esp,0x8
c000cb5b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000cb5f:	50                   	push   eax
c000cb60:	e8 95 ce ff ff       	call   c00099fa <Device::addChild(Device*)>
c000cb65:	83 c4 10             	add    esp,0x10
c000cb68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb6c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000cb76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb7a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000cb83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb87:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000cb90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb94:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb96:	83 c0 08             	add    eax,0x8
c000cb99:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb9b:	6a 00                	push   0x0
c000cb9d:	6a 00                	push   0x0
c000cb9f:	6a 00                	push   0x0
c000cba1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cba5:	ff d0                	call   eax
c000cba7:	83 c4 10             	add    esp,0x10
c000cbaa:	66 90                	xchg   ax,ax
c000cbac:	90                   	nop
c000cbad:	83 c4 28             	add    esp,0x28
c000cbb0:	5b                   	pop    ebx
c000cbb1:	c3                   	ret    
c000cbb2:	66 90                	xchg   ax,ax

c000cbb4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000cbb4:	83 ec 0c             	sub    esp,0xc
c000cbb7:	83 ec 0c             	sub    esp,0xc
c000cbba:	68 08 36 02 c0       	push   0xc0023608
c000cbbf:	e8 de 33 00 00       	call   c000ffa2 <KePanic(char const*)>
c000cbc4:	83 c4 10             	add    esp,0x10
c000cbc7:	90                   	nop
c000cbc8:	83 c4 0c             	add    esp,0xc
c000cbcb:	c3                   	ret    

c000cbcc <ACPI::open(int, int, void*)>:
c000cbcc:	57                   	push   edi
c000cbcd:	56                   	push   esi
c000cbce:	53                   	push   ebx
c000cbcf:	81 ec 70 01 00 00    	sub    esp,0x170
c000cbd5:	83 ec 0c             	sub    esp,0xc
c000cbd8:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000cbdf:	e8 c4 fd ff ff       	call   c000c9a8 <ACPI::detectPCI()>
c000cbe4:	83 c4 10             	add    esp,0x10
c000cbe7:	83 ec 0c             	sub    esp,0xc
c000cbea:	68 78 37 02 c0       	push   0xc0023778
c000cbef:	e8 2f 06 00 00       	call   c000d223 <KeSetBootMessage(char const*)>
c000cbf4:	83 c4 10             	add    esp,0x10
c000cbf7:	b8 4c 05 00 00       	mov    eax,0x54c
c000cbfc:	8a 00                	mov    al,BYTE PTR [eax]
c000cbfe:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000cc05:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cc0d:	83 f8 01             	cmp    eax,0x1
c000cc10:	75 12                	jne    c000cc24 <ACPI::open(int, int, void*)+0x58>
c000cc12:	83 ec 0c             	sub    esp,0xc
c000cc15:	68 19 36 02 c0       	push   0xc0023619
c000cc1a:	e8 07 8a 00 00       	call   c0015626 <Thr::loadKernelSymbolTable(char const*)>
c000cc1f:	83 c4 10             	add    esp,0x10
c000cc22:	eb 34                	jmp    c000cc58 <ACPI::open(int, int, void*)+0x8c>
c000cc24:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000cc2c:	3d bb 00 00 00       	cmp    eax,0xbb
c000cc31:	75 15                	jne    c000cc48 <ACPI::open(int, int, void*)+0x7c>
c000cc33:	83 ec 0c             	sub    esp,0xc
c000cc36:	68 37 36 02 c0       	push   0xc0023637
c000cc3b:	e8 e6 89 00 00       	call   c0015626 <Thr::loadKernelSymbolTable(char const*)>
c000cc40:	83 c4 10             	add    esp,0x10
c000cc43:	eb 13                	jmp    c000cc58 <ACPI::open(int, int, void*)+0x8c>
c000cc45:	8d 76 00             	lea    esi,[esi+0x0]
c000cc48:	83 ec 0c             	sub    esp,0xc
c000cc4b:	68 55 36 02 c0       	push   0xc0023655
c000cc50:	e8 4d 33 00 00       	call   c000ffa2 <KePanic(char const*)>
c000cc55:	83 c4 10             	add    esp,0x10
c000cc58:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000cc60:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000cc6b:	83 ec 0c             	sub    esp,0xc
c000cc6e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000cc75:	e8 e1 2f 00 00       	call   c000fc5b <malloc>
c000cc7a:	83 c4 10             	add    esp,0x10
c000cc7d:	89 c3                	mov    ebx,eax
c000cc7f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cc84:	83 ec 04             	sub    esp,0x4
c000cc87:	50                   	push   eax
c000cc88:	68 6f 36 02 c0       	push   0xc002366f
c000cc8d:	53                   	push   ebx
c000cc8e:	e8 9f b4 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000cc93:	83 c4 10             	add    esp,0x10
c000cc96:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000cc9d:	83 ec 08             	sub    esp,0x8
c000cca0:	6a 01                	push   0x1
c000cca2:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cca9:	e8 a2 b4 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000ccb8:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000ccc0:	75 16                	jne    c000ccd8 <ACPI::open(int, int, void*)+0x10c>
c000ccc2:	83 ec 0c             	sub    esp,0xc
c000ccc5:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cccc:	e8 dd b4 ff ff       	call   c00081ae <File::close()>
c000ccd1:	83 c4 10             	add    esp,0x10
c000ccd4:	eb 0a                	jmp    c000cce0 <ACPI::open(int, int, void*)+0x114>
c000ccd6:	66 90                	xchg   ax,ax
c000ccd8:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000cce0:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000cce8:	74 1e                	je     c000cd08 <ACPI::open(int, int, void*)+0x13c>
c000ccea:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000ccf1:	8b 00                	mov    eax,DWORD PTR [eax]
c000ccf3:	83 c0 08             	add    eax,0x8
c000ccf6:	8b 00                	mov    eax,DWORD PTR [eax]
c000ccf8:	83 ec 0c             	sub    esp,0xc
c000ccfb:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000cd02:	ff d0                	call   eax
c000cd04:	83 c4 10             	add    esp,0x10
c000cd07:	90                   	nop
c000cd08:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000cd0f:	83 f0 01             	xor    eax,0x1
c000cd12:	0f b6 c0             	movzx  eax,al
c000cd15:	85 c0                	test   eax,eax
c000cd17:	74 2f                	je     c000cd48 <ACPI::open(int, int, void*)+0x17c>
c000cd19:	83 ec 0c             	sub    esp,0xc
c000cd1c:	68 8d 36 02 c0       	push   0xc002368d
c000cd21:	e8 fd 04 00 00       	call   c000d223 <KeSetBootMessage(char const*)>
c000cd26:	83 c4 10             	add    esp,0x10
c000cd29:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000cd34:	83 ec 0c             	sub    esp,0xc
c000cd37:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000cd3e:	e8 81 68 00 00       	call   c00135c4 <Virt::setupPageSwapping(int)>
c000cd43:	83 c4 10             	add    esp,0x10
c000cd46:	66 90                	xchg   ax,ax
c000cd48:	83 ec 0c             	sub    esp,0xc
c000cd4b:	68 a8 36 02 c0       	push   0xc00236a8
c000cd50:	e8 ce 04 00 00       	call   c000d223 <KeSetBootMessage(char const*)>
c000cd55:	83 c4 10             	add    esp,0x10
c000cd58:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000cd5f:	83 ec 08             	sub    esp,0x8
c000cd62:	6a 13                	push   0x13
c000cd64:	50                   	push   eax
c000cd65:	e8 be cf ff ff       	call   c0009d28 <getDevicesOfType(DeviceType)>
c000cd6a:	83 c4 0c             	add    esp,0xc
c000cd6d:	8d 76 00             	lea    esi,[esi+0x0]
c000cd70:	83 ec 0c             	sub    esp,0xc
c000cd73:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cd7a:	50                   	push   eax
c000cd7b:	e8 1c 4d 01 00       	call   c0021a9c <LinkedList<Device>::isEmpty()>
c000cd80:	83 c4 10             	add    esp,0x10
c000cd83:	83 f0 01             	xor    eax,0x1
c000cd86:	0f b6 c0             	movzx  eax,al
c000cd89:	85 c0                	test   eax,eax
c000cd8b:	0f 84 47 01 00 00    	je     c000ced8 <ACPI::open(int, int, void*)+0x30c>
c000cd91:	83 ec 0c             	sub    esp,0xc
c000cd94:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cd9b:	50                   	push   eax
c000cd9c:	e8 17 4d 01 00       	call   c0021ab8 <LinkedList<Device>::getFirstElement()>
c000cda1:	83 c4 10             	add    esp,0x10
c000cda4:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000cdab:	83 ec 0c             	sub    esp,0xc
c000cdae:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cdb5:	50                   	push   eax
c000cdb6:	e8 05 4d 01 00       	call   c0021ac0 <LinkedList<Device>::removeFirst()>
c000cdbb:	83 c4 10             	add    esp,0x10
c000cdbe:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000cdc5:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000cdcc:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000cdd3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000cdd7:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000cddd:	ba 09 00 00 00       	mov    edx,0x9
c000cde2:	fc                   	cld    
c000cde3:	89 c7                	mov    edi,eax
c000cde5:	89 de                	mov    esi,ebx
c000cde7:	89 d1                	mov    ecx,edx
c000cde9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000cdeb:	83 ec 08             	sub    esp,0x8
c000cdee:	8d 44 24 38          	lea    eax,[esp+0x38]
c000cdf2:	50                   	push   eax
c000cdf3:	83 ec 24             	sub    esp,0x24
c000cdf6:	89 e0                	mov    eax,esp
c000cdf8:	89 c3                	mov    ebx,eax
c000cdfa:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000cdfe:	ba 09 00 00 00       	mov    edx,0x9
c000ce03:	89 df                	mov    edi,ebx
c000ce05:	89 c6                	mov    esi,eax
c000ce07:	89 d1                	mov    ecx,edx
c000ce09:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ce0b:	e8 7a 08 01 00       	call   c001d68a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ce10:	83 c4 30             	add    esp,0x30
c000ce13:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ce1a:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ce22:	0f 84 48 ff ff ff    	je     c000cd70 <ACPI::open(int, int, void*)+0x1a4>
c000ce28:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ce33:	83 ec 0c             	sub    esp,0xc
c000ce36:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ce3d:	e8 19 2e 00 00       	call   c000fc5b <malloc>
c000ce42:	83 c4 10             	add    esp,0x10
c000ce45:	89 c3                	mov    ebx,eax
c000ce47:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000ce4c:	83 ec 04             	sub    esp,0x4
c000ce4f:	50                   	push   eax
c000ce50:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ce57:	53                   	push   ebx
c000ce58:	e8 d5 b2 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ce67:	83 ec 0c             	sub    esp,0xc
c000ce6a:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ce71:	e8 9e b5 ff ff       	call   c0008414 <File::exists()>
c000ce76:	83 c4 10             	add    esp,0x10
c000ce79:	0f b6 c0             	movzx  eax,al
c000ce7c:	85 c0                	test   eax,eax
c000ce7e:	74 28                	je     c000cea8 <ACPI::open(int, int, void*)+0x2dc>
c000ce80:	83 ec 08             	sub    esp,0x8
c000ce83:	6a 01                	push   0x1
c000ce85:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ce8c:	e8 0f 92 00 00       	call   c00160a0 <Thr::loadDLL(char const*, bool)>
c000ce91:	83 c4 10             	add    esp,0x10
c000ce94:	83 ec 08             	sub    esp,0x8
c000ce97:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ce9e:	50                   	push   eax
c000ce9f:	e8 4e 94 00 00       	call   c00162f2 <Thr::executeDLL(unsigned long, void*)>
c000cea4:	83 c4 10             	add    esp,0x10
c000cea7:	90                   	nop
c000cea8:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ceb0:	0f 84 ba fe ff ff    	je     c000cd70 <ACPI::open(int, int, void*)+0x1a4>
c000ceb6:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000cebd:	8b 00                	mov    eax,DWORD PTR [eax]
c000cebf:	83 c0 08             	add    eax,0x8
c000cec2:	8b 00                	mov    eax,DWORD PTR [eax]
c000cec4:	83 ec 0c             	sub    esp,0xc
c000cec7:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000cece:	ff d0                	call   eax
c000ced0:	83 c4 10             	add    esp,0x10
c000ced3:	e9 98 fe ff ff       	jmp    c000cd70 <ACPI::open(int, int, void*)+0x1a4>
c000ced8:	83 ec 0c             	sub    esp,0xc
c000cedb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000cee2:	50                   	push   eax
c000cee3:	e8 b0 4b 01 00       	call   c0021a98 <LinkedList<Device>::~LinkedList()>
c000cee8:	83 c4 10             	add    esp,0x10
c000ceeb:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000cef1:	83 ec 08             	sub    esp,0x8
c000cef4:	6a 01                	push   0x1
c000cef6:	68 c2 36 02 c0       	push   0xc00236c2
c000cefb:	e8 a0 91 00 00       	call   c00160a0 <Thr::loadDLL(char const*, bool)>
c000cf00:	83 c4 10             	add    esp,0x10
c000cf03:	83 ec 08             	sub    esp,0x8
c000cf06:	53                   	push   ebx
c000cf07:	50                   	push   eax
c000cf08:	e8 e5 93 00 00       	call   c00162f2 <Thr::executeDLL(unsigned long, void*)>
c000cf0d:	83 c4 10             	add    esp,0x10
c000cf10:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000cf15:	85 c0                	test   eax,eax
c000cf17:	0f 84 27 01 00 00    	je     c000d044 <ACPI::open(int, int, void*)+0x478>
c000cf1d:	a1 88 bd 02 c0       	mov    eax,ds:0xc002bd88
c000cf22:	85 c0                	test   eax,eax
c000cf24:	0f 84 1a 01 00 00    	je     c000d044 <ACPI::open(int, int, void*)+0x478>
c000cf2a:	83 ec 0c             	sub    esp,0xc
c000cf2d:	68 df 36 02 c0       	push   0xc00236df
c000cf32:	e8 ec 02 00 00       	call   c000d223 <KeSetBootMessage(char const*)>
c000cf37:	83 c4 10             	add    esp,0x10
c000cf3a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000cf45:	83 ec 0c             	sub    esp,0xc
c000cf48:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000cf4f:	e8 07 2d 00 00       	call   c000fc5b <malloc>
c000cf54:	83 c4 10             	add    esp,0x10
c000cf57:	89 c3                	mov    ebx,eax
c000cf59:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000cf5e:	83 ec 04             	sub    esp,0x4
c000cf61:	50                   	push   eax
c000cf62:	68 fc 36 02 c0       	push   0xc00236fc
c000cf67:	53                   	push   ebx
c000cf68:	e8 c5 b1 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000cf6d:	83 c4 10             	add    esp,0x10
c000cf70:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000cf77:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000cf7f:	74 1f                	je     c000cfa0 <ACPI::open(int, int, void*)+0x3d4>
c000cf81:	83 ec 0c             	sub    esp,0xc
c000cf84:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000cf8b:	e8 84 b4 ff ff       	call   c0008414 <File::exists()>
c000cf90:	83 c4 10             	add    esp,0x10
c000cf93:	0f b6 c0             	movzx  eax,al
c000cf96:	85 c0                	test   eax,eax
c000cf98:	74 06                	je     c000cfa0 <ACPI::open(int, int, void*)+0x3d4>
c000cf9a:	b0 01                	mov    al,0x1
c000cf9c:	eb 06                	jmp    c000cfa4 <ACPI::open(int, int, void*)+0x3d8>
c000cf9e:	66 90                	xchg   ax,ax
c000cfa0:	b0 00                	mov    al,0x0
c000cfa2:	66 90                	xchg   ax,ax
c000cfa4:	0f b6 c0             	movzx  eax,al
c000cfa7:	85 c0                	test   eax,eax
c000cfa9:	74 25                	je     c000cfd0 <ACPI::open(int, int, void*)+0x404>
c000cfab:	83 ec 08             	sub    esp,0x8
c000cfae:	6a 01                	push   0x1
c000cfb0:	68 fc 36 02 c0       	push   0xc00236fc
c000cfb5:	e8 e6 90 00 00       	call   c00160a0 <Thr::loadDLL(char const*, bool)>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	83 ec 08             	sub    esp,0x8
c000cfc0:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000cfc7:	50                   	push   eax
c000cfc8:	e8 25 93 00 00       	call   c00162f2 <Thr::executeDLL(unsigned long, void*)>
c000cfcd:	83 c4 10             	add    esp,0x10
c000cfd0:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000cfd8:	74 2a                	je     c000d004 <ACPI::open(int, int, void*)+0x438>
c000cfda:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000cfe2:	74 20                	je     c000d004 <ACPI::open(int, int, void*)+0x438>
c000cfe4:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000cfeb:	8b 00                	mov    eax,DWORD PTR [eax]
c000cfed:	83 c0 08             	add    eax,0x8
c000cff0:	8b 00                	mov    eax,DWORD PTR [eax]
c000cff2:	83 ec 0c             	sub    esp,0xc
c000cff5:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000cffc:	ff d0                	call   eax
c000cffe:	83 c4 10             	add    esp,0x10
c000d001:	8d 76 00             	lea    esi,[esi+0x0]
c000d004:	a1 84 bd 02 c0       	mov    eax,ds:0xc002bd84
c000d009:	83 ec 08             	sub    esp,0x8
c000d00c:	68 19 37 02 c0       	push   0xc0023719
c000d011:	50                   	push   eax
c000d012:	e8 a1 f2 ff ff       	call   c000c2b8 <findDataTable(unsigned char*, char*)>
c000d017:	83 c4 10             	add    esp,0x10
c000d01a:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000d021:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000d029:	74 19                	je     c000d044 <ACPI::open(int, int, void*)+0x478>
c000d02b:	83 ec 08             	sub    esp,0x8
c000d02e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000d035:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000d03c:	e8 73 fb ff ff       	call   c000cbb4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000d041:	83 c4 10             	add    esp,0x10
c000d044:	b8 00 00 00 00       	mov    eax,0x0
c000d049:	81 c4 70 01 00 00    	add    esp,0x170
c000d04f:	5b                   	pop    ebx
c000d050:	5e                   	pop    esi
c000d051:	5f                   	pop    edi
c000d052:	c3                   	ret    
c000d053:	90                   	nop

c000d054 <KeAssertionFailed(char*, char const*, char const*, int)>:
c000d054:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000d05a:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000d061:	89 c2                	mov    edx,eax
c000d063:	c1 fa 1f             	sar    edx,0x1f
c000d066:	83 ec 04             	sub    esp,0x4
c000d069:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000d06d:	51                   	push   ecx
c000d06e:	52                   	push   edx
c000d06f:	50                   	push   eax
c000d070:	e8 db 29 00 00       	call   c000fa50 <KeItoa(long long, char*)>
c000d075:	83 c4 10             	add    esp,0x10
c000d078:	83 ec 08             	sub    esp,0x8
c000d07b:	68 c4 37 02 c0       	push   0xc00237c4
c000d080:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d084:	50                   	push   eax
c000d085:	e8 b6 35 ff ff       	call   c0000640 <strcpy>
c000d08a:	83 c4 10             	add    esp,0x10
c000d08d:	83 ec 08             	sub    esp,0x8
c000d090:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000d097:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d09b:	50                   	push   eax
c000d09c:	e8 9f 37 ff ff       	call   c0000840 <strcat>
c000d0a1:	83 c4 10             	add    esp,0x10
c000d0a4:	83 ec 08             	sub    esp,0x8
c000d0a7:	68 d2 37 02 c0       	push   0xc00237d2
c000d0ac:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0b0:	50                   	push   eax
c000d0b1:	e8 8a 37 ff ff       	call   c0000840 <strcat>
c000d0b6:	83 c4 10             	add    esp,0x10
c000d0b9:	83 ec 08             	sub    esp,0x8
c000d0bc:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000d0c3:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0c7:	50                   	push   eax
c000d0c8:	e8 73 37 ff ff       	call   c0000840 <strcat>
c000d0cd:	83 c4 10             	add    esp,0x10
c000d0d0:	83 ec 08             	sub    esp,0x8
c000d0d3:	68 d5 37 02 c0       	push   0xc00237d5
c000d0d8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0dc:	50                   	push   eax
c000d0dd:	e8 5e 37 ff ff       	call   c0000840 <strcat>
c000d0e2:	83 c4 10             	add    esp,0x10
c000d0e5:	83 ec 08             	sub    esp,0x8
c000d0e8:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000d0ef:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d0f3:	50                   	push   eax
c000d0f4:	e8 47 37 ff ff       	call   c0000840 <strcat>
c000d0f9:	83 c4 10             	add    esp,0x10
c000d0fc:	83 ec 08             	sub    esp,0x8
c000d0ff:	68 d5 37 02 c0       	push   0xc00237d5
c000d104:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d108:	50                   	push   eax
c000d109:	e8 32 37 ff ff       	call   c0000840 <strcat>
c000d10e:	83 c4 10             	add    esp,0x10
c000d111:	83 ec 08             	sub    esp,0x8
c000d114:	8d 44 24 08          	lea    eax,[esp+0x8]
c000d118:	50                   	push   eax
c000d119:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d11d:	50                   	push   eax
c000d11e:	e8 1d 37 ff ff       	call   c0000840 <strcat>
c000d123:	83 c4 10             	add    esp,0x10
c000d126:	83 ec 0c             	sub    esp,0xc
c000d129:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000d12d:	50                   	push   eax
c000d12e:	e8 6f 2e 00 00       	call   c000ffa2 <KePanic(char const*)>
c000d133:	83 c4 10             	add    esp,0x10
c000d136:	90                   	nop
c000d137:	81 c4 2c 02 00 00    	add    esp,0x22c
c000d13d:	c3                   	ret    

c000d13e <KeInitialiseAtexit()>:
c000d13e:	83 ec 10             	sub    esp,0x10
c000d141:	c7 05 e0 bf 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002bfe0,0x0
c000d14b:	6a 60                	push   0x60
c000d14d:	6a 00                	push   0x0
c000d14f:	68 60 c0 02 c0       	push   0xc002c060
c000d154:	e8 97 33 ff ff       	call   c00004f0 <memset>
c000d159:	83 c4 1c             	add    esp,0x1c
c000d15c:	c3                   	ret    

c000d15d <KeRegisterAtexit(void (*)(void*), void*)>:
c000d15d:	a1 e0 bf 02 c0       	mov    eax,ds:0xc002bfe0
c000d162:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d166:	89 14 85 60 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3fa0],edx
c000d16d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d171:	89 14 85 00 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4000],edx
c000d178:	40                   	inc    eax
c000d179:	a3 e0 bf 02 c0       	mov    ds:0xc002bfe0,eax
c000d17e:	83 f8 17             	cmp    eax,0x17
c000d181:	7e 0d                	jle    c000d190 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000d183:	c7 44 24 04 d7 37 02 c0 	mov    DWORD PTR [esp+0x4],0xc00237d7
c000d18b:	e9 12 2e 00 00       	jmp    c000ffa2 <KePanic(char const*)>
c000d190:	c3                   	ret    

c000d191 <KeExecuteAtexit()>:
c000d191:	53                   	push   ebx
c000d192:	31 db                	xor    ebx,ebx
c000d194:	83 ec 08             	sub    esp,0x8
c000d197:	39 1d e0 bf 02 c0    	cmp    DWORD PTR ds:0xc002bfe0,ebx
c000d19d:	7e 50                	jle    c000d1ef <KeExecuteAtexit()+0x5e>
c000d19f:	8b 04 9d 60 c0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd3fa0]
c000d1a6:	85 c0                	test   eax,eax
c000d1a8:	74 42                	je     c000d1ec <KeExecuteAtexit()+0x5b>
c000d1aa:	51                   	push   ecx
c000d1ab:	50                   	push   eax
c000d1ac:	53                   	push   ebx
c000d1ad:	68 f0 37 02 c0       	push   0xc00237f0
c000d1b2:	e8 ad 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d1b7:	58                   	pop    eax
c000d1b8:	ff 34 9d 00 c0 02 c0 	push   DWORD PTR [ebx*4-0x3ffd4000]
c000d1bf:	ff 14 9d 60 c0 02 c0 	call   DWORD PTR [ebx*4-0x3ffd3fa0]
c000d1c6:	c7 04 24 12 38 02 c0 	mov    DWORD PTR [esp],0xc0023812
c000d1cd:	e8 92 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d1d2:	c7 04 24 a3 3b 02 c0 	mov    DWORD PTR [esp],0xc0023ba3
c000d1d9:	c7 04 9d 60 c0 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd3fa0],0x0
c000d1e4:	e8 7b 9d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d1e9:	83 c4 10             	add    esp,0x10
c000d1ec:	43                   	inc    ebx
c000d1ed:	eb a8                	jmp    c000d197 <KeExecuteAtexit()+0x6>
c000d1ef:	83 c4 08             	add    esp,0x8
c000d1f2:	5b                   	pop    ebx
c000d1f3:	c3                   	ret    

c000d1f4 <KeDisplaySplashScreen()>:
c000d1f4:	53                   	push   ebx
c000d1f5:	bb 01 00 00 00       	mov    ebx,0x1
c000d1fa:	83 ec 08             	sub    esp,0x8
c000d1fd:	43                   	inc    ebx
c000d1fe:	0f be 83 15 38 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdc7eb]
c000d205:	85 c0                	test   eax,eax
c000d207:	74 15                	je     c000d21e <KeDisplaySplashScreen()+0x2a>
c000d209:	83 ec 0c             	sub    esp,0xc
c000d20c:	6a 01                	push   0x1
c000d20e:	53                   	push   ebx
c000d20f:	6a 00                	push   0x0
c000d211:	6a 0f                	push   0xf
c000d213:	50                   	push   eax
c000d214:	e8 67 db 00 00       	call   c001ad80 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000d219:	83 c4 20             	add    esp,0x20
c000d21c:	eb df                	jmp    c000d1fd <KeDisplaySplashScreen()+0x9>
c000d21e:	83 c4 08             	add    esp,0x8
c000d221:	5b                   	pop    ebx
c000d222:	c3                   	ret    

c000d223 <KeSetBootMessage(char const*)>:
c000d223:	57                   	push   edi
c000d224:	56                   	push   esi
c000d225:	53                   	push   ebx
c000d226:	81 ec a4 00 00 00    	sub    esp,0xa4
c000d22c:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000d233:	68 9e 00 00 00       	push   0x9e
c000d238:	6a 00                	push   0x0
c000d23a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000d23e:	56                   	push   esi
c000d23f:	e8 ac 32 ff ff       	call   c00004f0 <memset>
c000d244:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000d247:	e8 24 33 ff ff       	call   c0000570 <strlen>
c000d24c:	ba 50 00 00 00       	mov    edx,0x50
c000d251:	83 c4 10             	add    esp,0x10
c000d254:	29 c2                	sub    edx,eax
c000d256:	31 c9                	xor    ecx,ecx
c000d258:	83 e2 fe             	and    edx,0xfffffffe
c000d25b:	01 f2                	add    edx,esi
c000d25d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000d262:	84 c0                	test   al,al
c000d264:	74 0a                	je     c000d270 <KeSetBootMessage(char const*)+0x4d>
c000d266:	80 cc 07             	or     ah,0x7
c000d269:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000d26d:	41                   	inc    ecx
c000d26e:	eb ed                	jmp    c000d25d <KeSetBootMessage(char const*)+0x3a>
c000d270:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000d275:	b9 9e 00 00 00       	mov    ecx,0x9e
c000d27a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d27c:	50                   	push   eax
c000d27d:	50                   	push   eax
c000d27e:	53                   	push   ebx
c000d27f:	68 2a 38 02 c0       	push   0xc002382a
c000d284:	e8 db 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d289:	81 c4 b0 00 00 00    	add    esp,0xb0
c000d28f:	5b                   	pop    ebx
c000d290:	5e                   	pop    esi
c000d291:	5f                   	pop    edi
c000d292:	c3                   	ret    

c000d293 <__cxa_atexit>:
c000d293:	31 c0                	xor    eax,eax
c000d295:	c3                   	ret    

c000d296 <__cxa_finalize>:
c000d296:	c3                   	ret    

c000d297 <__stack_chk_fail>:
c000d297:	55                   	push   ebp
c000d298:	89 e5                	mov    ebp,esp
c000d29a:	83 ec 10             	sub    esp,0x10
c000d29d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d2a0:	68 38 38 02 c0       	push   0xc0023838
c000d2a5:	e8 ba 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d2aa:	58                   	pop    eax
c000d2ab:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2ae:	5a                   	pop    edx
c000d2af:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d2b2:	68 38 38 02 c0       	push   0xc0023838
c000d2b7:	e8 a8 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d2bc:	c7 04 24 40 38 02 c0 	mov    DWORD PTR [esp],0xc0023840
c000d2c3:	e8 da 2c 00 00       	call   c000ffa2 <KePanic(char const*)>
c000d2c8:	83 c4 10             	add    esp,0x10
c000d2cb:	c9                   	leave  
c000d2cc:	c3                   	ret    

c000d2cd <__cxa_pure_virtual>:
c000d2cd:	83 ec 18             	sub    esp,0x18
c000d2d0:	68 58 38 02 c0       	push   0xc0023858
c000d2d5:	e8 c8 2c 00 00       	call   c000ffa2 <KePanic(char const*)>
c000d2da:	83 c4 1c             	add    esp,0x1c
c000d2dd:	c3                   	ret    

c000d2de <operator new[](unsigned long)>:
c000d2de:	e9 78 29 00 00       	jmp    c000fc5b <malloc>

c000d2e3 <operator delete(void*, unsigned long)>:
c000d2e3:	e9 93 29 00 00       	jmp    c000fc7b <rfree>

c000d2e8 <operator delete[](void*)>:
c000d2e8:	e9 8e 29 00 00       	jmp    c000fc7b <rfree>

c000d2ed <operator delete[](void*, unsigned long)>:
c000d2ed:	e9 89 29 00 00       	jmp    c000fc7b <rfree>
c000d2f2:	66 90                	xchg   ax,ax

c000d2f4 <CUnlockScheduler>:
c000d2f4:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000d2fc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d301:	85 c0                	test   eax,eax
c000d303:	75 03                	jne    c000d308 <CUnlockScheduler+0x14>
c000d305:	fb                   	sti    
c000d306:	66 90                	xchg   ax,ax
c000d308:	90                   	nop
c000d309:	c3                   	ret    
c000d30a:	66 90                	xchg   ax,ax

c000d30c <CLockScheduler>:
c000d30c:	fa                   	cli    
c000d30d:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000d312:	83 c0 01             	add    eax,0x1
c000d315:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000d31a:	90                   	nop
c000d31b:	c3                   	ret    

c000d31c <CPrintf>:
c000d31c:	83 ec 0c             	sub    esp,0xc
c000d31f:	83 ec 08             	sub    esp,0x8
c000d322:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d326:	68 6b 38 02 c0       	push   0xc002386b
c000d32b:	e8 34 9c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d330:	83 c4 10             	add    esp,0x10
c000d333:	90                   	nop
c000d334:	83 c4 0c             	add    esp,0xc
c000d337:	c3                   	ret    

c000d338 <CmOpen(char const*)>:
c000d338:	57                   	push   edi
c000d339:	56                   	push   esi
c000d33a:	53                   	push   ebx
c000d33b:	83 ec 1c             	sub    esp,0x1c
c000d33e:	6a 30                	push   0x30
c000d340:	e8 16 29 00 00       	call   c000fc5b <malloc>
c000d345:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000d34c:	89 c3                	mov    ebx,eax
c000d34e:	e8 08 29 00 00       	call   c000fc5b <malloc>
c000d353:	83 c4 0c             	add    esp,0xc
c000d356:	89 c6                	mov    esi,eax
c000d358:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000d35e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d362:	50                   	push   eax
c000d363:	e8 ca ad ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000d368:	83 c4 0c             	add    esp,0xc
c000d36b:	89 33                	mov    DWORD PTR [ebx],esi
c000d36d:	8d 44 24 07          	lea    eax,[esp+0x7]
c000d371:	50                   	push   eax
c000d372:	8d 44 24 10          	lea    eax,[esp+0x10]
c000d376:	50                   	push   eax
c000d377:	56                   	push   esi
c000d378:	e8 d5 b0 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000d37d:	5a                   	pop    edx
c000d37e:	59                   	pop    ecx
c000d37f:	6a 01                	push   0x1
c000d381:	ff 33                	push   DWORD PTR [ebx]
c000d383:	e8 c8 ad ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d388:	5e                   	pop    esi
c000d389:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d38d:	e8 c9 28 00 00       	call   c000fc5b <malloc>
c000d392:	5a                   	pop    edx
c000d393:	89 c7                	mov    edi,eax
c000d395:	8d 74 24 10          	lea    esi,[esp+0x10]
c000d399:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d39b:	8b 10                	mov    edx,DWORD PTR [eax]
c000d39d:	56                   	push   esi
c000d39e:	57                   	push   edi
c000d39f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3a7:	50                   	push   eax
c000d3a8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d3ab:	83 c4 14             	add    esp,0x14
c000d3ae:	ff 33                	push   DWORD PTR [ebx]
c000d3b0:	e8 f9 ad ff ff       	call   c00081ae <File::close()>
c000d3b5:	59                   	pop    ecx
c000d3b6:	58                   	pop    eax
c000d3b7:	6a 13                	push   0x13
c000d3b9:	ff 33                	push   DWORD PTR [ebx]
c000d3bb:	e8 90 ad ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000d3c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000d3c4:	89 34 24             	mov    DWORD PTR [esp],esi
c000d3c7:	57                   	push   edi
c000d3c8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3cc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d3d0:	50                   	push   eax
c000d3d1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d3d4:	83 c4 14             	add    esp,0x14
c000d3d7:	57                   	push   edi
c000d3d8:	e8 8e 28 00 00       	call   c000fc6b <free>
c000d3dd:	83 c4 10             	add    esp,0x10
c000d3e0:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000d3e3:	75 10                	jne    c000d3f5 <CmOpen(char const*)+0xbd>
c000d3e5:	83 ec 0c             	sub    esp,0xc
c000d3e8:	68 6e 38 02 c0       	push   0xc002386e
c000d3ed:	e8 b0 2b 00 00       	call   c000ffa2 <KePanic(char const*)>
c000d3f2:	83 c4 10             	add    esp,0x10
c000d3f5:	8d 7b 05             	lea    edi,[ebx+0x5]
c000d3f8:	50                   	push   eax
c000d3f9:	6a 00                	push   0x0
c000d3fb:	6a 00                	push   0x0
c000d3fd:	ff 33                	push   DWORD PTR [ebx]
c000d3ff:	e8 0a ae ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d404:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d406:	8b 10                	mov    edx,DWORD PTR [eax]
c000d408:	89 34 24             	mov    DWORD PTR [esp],esi
c000d40b:	57                   	push   edi
c000d40c:	6a 00                	push   0x0
c000d40e:	6a 2b                	push   0x2b
c000d410:	50                   	push   eax
c000d411:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d414:	83 c4 1c             	add    esp,0x1c
c000d417:	6a 00                	push   0x0
c000d419:	6a 00                	push   0x0
c000d41b:	ff 33                	push   DWORD PTR [ebx]
c000d41d:	e8 ec ad ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d422:	83 c4 0c             	add    esp,0xc
c000d425:	6a 08                	push   0x8
c000d427:	68 7f 38 02 c0       	push   0xc002387f
c000d42c:	57                   	push   edi
c000d42d:	e8 4e 2f ff ff       	call   c0000380 <memcmp>
c000d432:	83 c4 10             	add    esp,0x10
c000d435:	85 c0                	test   eax,eax
c000d437:	74 10                	je     c000d449 <CmOpen(char const*)+0x111>
c000d439:	83 ec 0c             	sub    esp,0xc
c000d43c:	68 88 38 02 c0       	push   0xc0023888
c000d441:	e8 5c 2b 00 00       	call   c000ffa2 <KePanic(char const*)>
c000d446:	83 c4 10             	add    esp,0x10
c000d449:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000d44d:	89 d8                	mov    eax,ebx
c000d44f:	83 c4 10             	add    esp,0x10
c000d452:	5b                   	pop    ebx
c000d453:	5e                   	pop    esi
c000d454:	5f                   	pop    edi
c000d455:	c3                   	ret    

c000d456 <CmClose(Reghive_Tag*)>:
c000d456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d45a:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d45e:	74 0b                	je     c000d46b <CmClose(Reghive_Tag*)+0x15>
c000d460:	8b 00                	mov    eax,DWORD PTR [eax]
c000d462:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d466:	e9 43 ad ff ff       	jmp    c00081ae <File::close()>
c000d46b:	c3                   	ret    

c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000d46c:	53                   	push   ebx
c000d46d:	83 ec 18             	sub    esp,0x18
c000d470:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d474:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d478:	74 29                	je     c000d4a3 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d47a:	50                   	push   eax
c000d47b:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d480:	99                   	cdq    
c000d481:	52                   	push   edx
c000d482:	50                   	push   eax
c000d483:	ff 33                	push   DWORD PTR [ebx]
c000d485:	e8 84 ad ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d48a:	5a                   	pop    edx
c000d48b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d48d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d491:	8b 10                	mov    edx,DWORD PTR [eax]
c000d493:	51                   	push   ecx
c000d494:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d498:	6a 00                	push   0x0
c000d49a:	6a 2b                	push   0x2b
c000d49c:	50                   	push   eax
c000d49d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d4a0:	83 c4 20             	add    esp,0x20
c000d4a3:	83 c4 18             	add    esp,0x18
c000d4a6:	5b                   	pop    ebx
c000d4a7:	c3                   	ret    

c000d4a8 <CmGetString(Reghive_Tag*, int, char*)>:
c000d4a8:	55                   	push   ebp
c000d4a9:	57                   	push   edi
c000d4aa:	56                   	push   esi
c000d4ab:	53                   	push   ebx
c000d4ac:	31 db                	xor    ebx,ebx
c000d4ae:	83 ec 70             	sub    esp,0x70
c000d4b1:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000d4b8:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000d4bc:	50                   	push   eax
c000d4bd:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000d4c4:	55                   	push   ebp
c000d4c5:	e8 a2 ff ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4ca:	83 c4 10             	add    esp,0x10
c000d4cd:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000d4d2:	c1 e0 08             	shl    eax,0x8
c000d4d5:	89 c2                	mov    edx,eax
c000d4d7:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000d4dc:	09 d0                	or     eax,edx
c000d4de:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000d4e3:	c1 e0 08             	shl    eax,0x8
c000d4e6:	09 d0                	or     eax,edx
c000d4e8:	74 25                	je     c000d50f <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000d4ea:	6b fb 0d             	imul   edi,ebx,0xd
c000d4ed:	52                   	push   edx
c000d4ee:	8d 54 24 39          	lea    edx,[esp+0x39]
c000d4f2:	52                   	push   edx
c000d4f3:	50                   	push   eax
c000d4f4:	55                   	push   ebp
c000d4f5:	e8 72 ff ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d4fa:	8d 74 24 49          	lea    esi,[esp+0x49]
c000d4fe:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000d505:	b9 27 00 00 00       	mov    ecx,0x27
c000d50a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d50c:	83 c4 10             	add    esp,0x10
c000d50f:	83 c3 03             	add    ebx,0x3
c000d512:	83 fb 15             	cmp    ebx,0x15
c000d515:	75 b6                	jne    c000d4cd <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000d517:	83 c4 6c             	add    esp,0x6c
c000d51a:	5b                   	pop    ebx
c000d51b:	5e                   	pop    esi
c000d51c:	5f                   	pop    edi
c000d51d:	5d                   	pop    ebp
c000d51e:	c3                   	ret    

c000d51f <CmEnterDirectory(Reghive_Tag*, int)>:
c000d51f:	83 ec 40             	sub    esp,0x40
c000d522:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d526:	50                   	push   eax
c000d527:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d52b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d52f:	e8 38 ff ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d534:	83 c4 10             	add    esp,0x10
c000d537:	83 c8 ff             	or     eax,0xffffffff
c000d53a:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000d53f:	75 19                	jne    c000d55a <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000d541:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000d546:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000d54b:	c1 e0 08             	shl    eax,0x8
c000d54e:	09 c2                	or     edx,eax
c000d550:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000d555:	c1 e0 10             	shl    eax,0x10
c000d558:	09 d0                	or     eax,edx
c000d55a:	83 c4 3c             	add    esp,0x3c
c000d55d:	c3                   	ret    

c000d55e <CmGetNext(Reghive_Tag*, int)>:
c000d55e:	83 ec 40             	sub    esp,0x40
c000d561:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d565:	50                   	push   eax
c000d566:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d56a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d56e:	e8 f9 fe ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d573:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000d578:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000d57d:	c1 e0 08             	shl    eax,0x8
c000d580:	09 c2                	or     edx,eax
c000d582:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000d587:	83 c4 4c             	add    esp,0x4c
c000d58a:	c1 e0 10             	shl    eax,0x10
c000d58d:	09 d0                	or     eax,edx
c000d58f:	c3                   	ret    

c000d590 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000d590:	53                   	push   ebx
c000d591:	83 ec 18             	sub    esp,0x18
c000d594:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d598:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d59c:	74 29                	je     c000d5c7 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000d59e:	50                   	push   eax
c000d59f:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000d5a4:	99                   	cdq    
c000d5a5:	52                   	push   edx
c000d5a6:	50                   	push   eax
c000d5a7:	ff 33                	push   DWORD PTR [ebx]
c000d5a9:	e8 60 ac ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d5ae:	5a                   	pop    edx
c000d5af:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d5b1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d5b5:	8b 10                	mov    edx,DWORD PTR [eax]
c000d5b7:	51                   	push   ecx
c000d5b8:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000d5bc:	6a 00                	push   0x0
c000d5be:	6a 2b                	push   0x2b
c000d5c0:	50                   	push   eax
c000d5c1:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d5c4:	83 c4 20             	add    esp,0x20
c000d5c7:	83 c4 18             	add    esp,0x18
c000d5ca:	5b                   	pop    ebx
c000d5cb:	c3                   	ret    

c000d5cc <CmFreeExtent(Reghive_Tag*, int)>:
c000d5cc:	53                   	push   ebx
c000d5cd:	83 ec 3c             	sub    esp,0x3c
c000d5d0:	6a 2b                	push   0x2b
c000d5d2:	6a 00                	push   0x0
c000d5d4:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d5d8:	53                   	push   ebx
c000d5d9:	e8 12 2f ff ff       	call   c00004f0 <memset>
c000d5de:	83 c4 0c             	add    esp,0xc
c000d5e1:	53                   	push   ebx
c000d5e2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5e6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d5ea:	e8 a1 ff ff ff       	call   c000d590 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d5ef:	83 c4 48             	add    esp,0x48
c000d5f2:	5b                   	pop    ebx
c000d5f3:	c3                   	ret    

c000d5f4 <CmUpdateHeader(Reghive_Tag*)>:
c000d5f4:	83 ec 0c             	sub    esp,0xc
c000d5f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d5fb:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000d5ff:	74 10                	je     c000d611 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000d601:	52                   	push   edx
c000d602:	8d 50 05             	lea    edx,[eax+0x5]
c000d605:	52                   	push   edx
c000d606:	6a 00                	push   0x0
c000d608:	50                   	push   eax
c000d609:	e8 82 ff ff ff       	call   c000d590 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	83 c4 0c             	add    esp,0xc
c000d614:	c3                   	ret    

c000d615 <CmExpand(Reghive_Tag*, int)>:
c000d615:	57                   	push   edi
c000d616:	56                   	push   esi
c000d617:	83 ce ff             	or     esi,0xffffffff
c000d61a:	53                   	push   ebx
c000d61b:	83 ec 30             	sub    esp,0x30
c000d61e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000d622:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000d626:	74 5f                	je     c000d687 <CmExpand(Reghive_Tag*, int)+0x72>
c000d628:	31 d2                	xor    edx,edx
c000d62a:	31 f6                	xor    esi,esi
c000d62c:	50                   	push   eax
c000d62d:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000d631:	52                   	push   edx
c000d632:	50                   	push   eax
c000d633:	ff 33                	push   DWORD PTR [ebx]
c000d635:	e8 d4 ab ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d63a:	83 c4 0c             	add    esp,0xc
c000d63d:	6a 2b                	push   0x2b
c000d63f:	6a 00                	push   0x0
c000d641:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000d645:	57                   	push   edi
c000d646:	e8 a5 2e ff ff       	call   c00004f0 <memset>
c000d64b:	83 c4 10             	add    esp,0x10
c000d64e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d652:	7d 1b                	jge    c000d66f <CmExpand(Reghive_Tag*, int)+0x5a>
c000d654:	83 ec 0c             	sub    esp,0xc
c000d657:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d659:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000d65d:	8b 10                	mov    edx,DWORD PTR [eax]
c000d65f:	46                   	inc    esi
c000d660:	51                   	push   ecx
c000d661:	57                   	push   edi
c000d662:	6a 00                	push   0x0
c000d664:	6a 2b                	push   0x2b
c000d666:	50                   	push   eax
c000d667:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000d66a:	83 c4 20             	add    esp,0x20
c000d66d:	eb df                	jmp    c000d64e <CmExpand(Reghive_Tag*, int)+0x39>
c000d66f:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000d673:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000d676:	83 ec 0c             	sub    esp,0xc
c000d679:	01 f2                	add    edx,esi
c000d67b:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000d67e:	53                   	push   ebx
c000d67f:	e8 70 ff ff ff       	call   c000d5f4 <CmUpdateHeader(Reghive_Tag*)>
c000d684:	83 c4 10             	add    esp,0x10
c000d687:	83 c4 30             	add    esp,0x30
c000d68a:	89 f0                	mov    eax,esi
c000d68c:	5b                   	pop    ebx
c000d68d:	5e                   	pop    esi
c000d68e:	5f                   	pop    edi
c000d68f:	c3                   	ret    

c000d690 <CmFindUnusedExtent(Reghive_Tag*)>:
c000d690:	55                   	push   ebp
c000d691:	57                   	push   edi
c000d692:	56                   	push   esi
c000d693:	53                   	push   ebx
c000d694:	83 cb ff             	or     ebx,0xffffffff
c000d697:	83 ec 1c             	sub    esp,0x1c
c000d69a:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d69e:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000d6a2:	74 68                	je     c000d70c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d6a4:	be 2b 00 00 00       	mov    esi,0x2b
c000d6a9:	51                   	push   ecx
c000d6aa:	31 ff                	xor    edi,edi
c000d6ac:	6a 00                	push   0x0
c000d6ae:	31 db                	xor    ebx,ebx
c000d6b0:	6a 00                	push   0x0
c000d6b2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d6b5:	e8 54 ab ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d6ba:	83 c4 10             	add    esp,0x10
c000d6bd:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000d6c0:	76 3b                	jbe    c000d6fd <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000d6c2:	83 ec 0c             	sub    esp,0xc
c000d6c5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d6c8:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000d6cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6ce:	51                   	push   ecx
c000d6cf:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000d6d3:	51                   	push   ecx
c000d6d4:	6a 00                	push   0x0
c000d6d6:	6a 01                	push   0x1
c000d6d8:	50                   	push   eax
c000d6d9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d6dc:	83 c4 20             	add    esp,0x20
c000d6df:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000d6e4:	74 26                	je     c000d70c <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000d6e6:	43                   	inc    ebx
c000d6e7:	52                   	push   edx
c000d6e8:	57                   	push   edi
c000d6e9:	56                   	push   esi
c000d6ea:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d6ed:	e8 1c ab ff ff       	call   c000820e <File::seek(unsigned long long)>
c000d6f2:	83 c6 2b             	add    esi,0x2b
c000d6f5:	83 d7 00             	adc    edi,0x0
c000d6f8:	83 c4 10             	add    esp,0x10
c000d6fb:	eb c0                	jmp    c000d6bd <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000d6fd:	50                   	push   eax
c000d6fe:	50                   	push   eax
c000d6ff:	6a 40                	push   0x40
c000d701:	55                   	push   ebp
c000d702:	e8 0e ff ff ff       	call   c000d615 <CmExpand(Reghive_Tag*, int)>
c000d707:	83 c4 10             	add    esp,0x10
c000d70a:	89 c3                	mov    ebx,eax
c000d70c:	83 c4 1c             	add    esp,0x1c
c000d70f:	89 d8                	mov    eax,ebx
c000d711:	5b                   	pop    ebx
c000d712:	5e                   	pop    esi
c000d713:	5f                   	pop    edi
c000d714:	5d                   	pop    ebp
c000d715:	c3                   	ret    

c000d716 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000d716:	55                   	push   ebp
c000d717:	57                   	push   edi
c000d718:	56                   	push   esi
c000d719:	53                   	push   ebx
c000d71a:	81 ec 88 00 00 00    	sub    esp,0x88
c000d720:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000d727:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d72e:	e8 5d ff ff ff       	call   c000d690 <CmFindUnusedExtent(Reghive_Tag*)>
c000d733:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d737:	83 c4 0c             	add    esp,0xc
c000d73a:	6a 2b                	push   0x2b
c000d73c:	6a 00                	push   0x0
c000d73e:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000d742:	55                   	push   ebp
c000d743:	e8 a8 2d ff ff       	call   c00004f0 <memset>
c000d748:	83 c4 10             	add    esp,0x10
c000d74b:	85 db                	test   ebx,ebx
c000d74d:	74 12                	je     c000d761 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000d74f:	51                   	push   ecx
c000d750:	55                   	push   ebp
c000d751:	53                   	push   ebx
c000d752:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d759:	e8 0e fd ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d75e:	83 c4 10             	add    esp,0x10
c000d761:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000d765:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d76c:	b9 2b 00 00 00       	mov    ecx,0x2b
c000d771:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d773:	85 db                	test   ebx,ebx
c000d775:	74 49                	je     c000d7c0 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000d777:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000d77c:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000d781:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d785:	c1 e0 08             	shl    eax,0x8
c000d788:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000d78e:	09 c8                	or     eax,ecx
c000d790:	74 11                	je     c000d7a3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000d792:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000d796:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000d79a:	c1 e8 10             	shr    eax,0x10
c000d79d:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000d7a1:	eb 0f                	jmp    c000d7b2 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000d7a3:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d7a8:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d7ad:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d7b2:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000d7b6:	c1 ea 08             	shr    edx,0x8
c000d7b9:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000d7be:	eb 0f                	jmp    c000d7cf <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000d7c0:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000d7c5:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000d7ca:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000d7cf:	52                   	push   edx
c000d7d0:	8d 44 24 49          	lea    eax,[esp+0x49]
c000d7d4:	50                   	push   eax
c000d7d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d7d9:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7e0:	e8 ab fd ff ff       	call   c000d590 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d7e5:	83 c4 10             	add    esp,0x10
c000d7e8:	85 db                	test   ebx,ebx
c000d7ea:	74 12                	je     c000d7fe <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000d7ec:	50                   	push   eax
c000d7ed:	55                   	push   ebp
c000d7ee:	53                   	push   ebx
c000d7ef:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d7f6:	e8 95 fd ff ff       	call   c000d590 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d7fb:	83 c4 10             	add    esp,0x10
c000d7fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d802:	83 c4 7c             	add    esp,0x7c
c000d805:	5b                   	pop    ebx
c000d806:	5e                   	pop    esi
c000d807:	5f                   	pop    edi
c000d808:	5d                   	pop    ebp
c000d809:	c3                   	ret    

c000d80a <CmSetString(Reghive_Tag*, int, char const*)>:
c000d80a:	55                   	push   ebp
c000d80b:	57                   	push   edi
c000d80c:	56                   	push   esi
c000d80d:	53                   	push   ebx
c000d80e:	bb 27 00 00 00       	mov    ebx,0x27
c000d813:	81 ec 88 00 00 00    	sub    esp,0x88
c000d819:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000d820:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000d827:	e8 44 2d ff ff       	call   c0000570 <strlen>
c000d82c:	8d 48 26             	lea    ecx,[eax+0x26]
c000d82f:	89 c8                	mov    eax,ecx
c000d831:	99                   	cdq    
c000d832:	f7 fb                	idiv   ebx
c000d834:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d838:	83 c4 10             	add    esp,0x10
c000d83b:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000d841:	7e 10                	jle    c000d853 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000d843:	83 ec 0c             	sub    esp,0xc
c000d846:	68 99 38 02 c0       	push   0xc0023899
c000d84b:	e8 52 27 00 00       	call   c000ffa2 <KePanic(char const*)>
c000d850:	83 c4 10             	add    esp,0x10
c000d853:	31 ff                	xor    edi,edi
c000d855:	50                   	push   eax
c000d856:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000d85a:	53                   	push   ebx
c000d85b:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d862:	56                   	push   esi
c000d863:	e8 04 fc ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d868:	83 c4 10             	add    esp,0x10
c000d86b:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000d86f:	89 d0                	mov    eax,edx
c000d871:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000d875:	c1 e0 08             	shl    eax,0x8
c000d878:	09 c2                	or     edx,eax
c000d87a:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000d87e:	c1 e2 08             	shl    edx,0x8
c000d881:	09 c2                	or     edx,eax
c000d883:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000d887:	7e 76                	jle    c000d8ff <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000d889:	85 d2                	test   edx,edx
c000d88b:	75 25                	jne    c000d8b2 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000d88d:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000d892:	8d 44 24 45          	lea    eax,[esp+0x45]
c000d896:	50                   	push   eax
c000d897:	6a 00                	push   0x0
c000d899:	6a 00                	push   0x0
c000d89b:	56                   	push   esi
c000d89c:	e8 75 fe ff ff       	call   c000d716 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d8a1:	83 c4 10             	add    esp,0x10
c000d8a4:	89 c2                	mov    edx,eax
c000d8a6:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000d8a9:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000d8ac:	c1 f8 10             	sar    eax,0x10
c000d8af:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000d8b2:	55                   	push   ebp
c000d8b3:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000d8b7:	55                   	push   ebp
c000d8b8:	52                   	push   edx
c000d8b9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d8bd:	56                   	push   esi
c000d8be:	e8 a9 fb ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d8c3:	83 c4 0c             	add    esp,0xc
c000d8c6:	6a 27                	push   0x27
c000d8c8:	6a 00                	push   0x0
c000d8ca:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d8ce:	51                   	push   ecx
c000d8cf:	e8 1c 2c ff ff       	call   c00004f0 <memset>
c000d8d4:	83 c4 0c             	add    esp,0xc
c000d8d7:	6b c7 27             	imul   eax,edi,0x27
c000d8da:	6a 27                	push   0x27
c000d8dc:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000d8e3:	50                   	push   eax
c000d8e4:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000d8e8:	51                   	push   ecx
c000d8e9:	e8 92 2d ff ff       	call   c0000680 <strncpy>
c000d8ee:	83 c4 0c             	add    esp,0xc
c000d8f1:	55                   	push   ebp
c000d8f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8f6:	52                   	push   edx
c000d8f7:	56                   	push   esi
c000d8f8:	e8 93 fc ff ff       	call   c000d590 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d8fd:	eb 19                	jmp    c000d918 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000d8ff:	85 d2                	test   edx,edx
c000d901:	74 18                	je     c000d91b <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000d903:	51                   	push   ecx
c000d904:	51                   	push   ecx
c000d905:	52                   	push   edx
c000d906:	56                   	push   esi
c000d907:	e8 c0 fc ff ff       	call   c000d5cc <CmFreeExtent(Reghive_Tag*, int)>
c000d90c:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000d910:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000d914:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000d918:	83 c4 10             	add    esp,0x10
c000d91b:	47                   	inc    edi
c000d91c:	83 c3 03             	add    ebx,0x3
c000d91f:	83 ff 07             	cmp    edi,0x7
c000d922:	0f 85 43 ff ff ff    	jne    c000d86b <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000d928:	50                   	push   eax
c000d929:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000d92d:	50                   	push   eax
c000d92e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000d935:	56                   	push   esi
c000d936:	e8 55 fc ff ff       	call   c000d590 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d93b:	81 c4 8c 00 00 00    	add    esp,0x8c
c000d941:	5b                   	pop    ebx
c000d942:	5e                   	pop    esi
c000d943:	5f                   	pop    edi
c000d944:	5d                   	pop    ebp
c000d945:	c3                   	ret    

c000d946 <CmGetMatch(char*, char*, bool, bool*)>:
c000d946:	56                   	push   esi
c000d947:	53                   	push   ebx
c000d948:	50                   	push   eax
c000d949:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d94d:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000d952:	74 25                	je     c000d979 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000d954:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d957:	31 db                	xor    ebx,ebx
c000d959:	50                   	push   eax
c000d95a:	50                   	push   eax
c000d95b:	8d 04 9d a0 5b 02 c0 	lea    eax,[ebx*4-0x3ffda460]
c000d962:	50                   	push   eax
c000d963:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d967:	e8 e4 2d ff ff       	call   c0000750 <strcmp>
c000d96c:	83 c4 10             	add    esp,0x10
c000d96f:	85 c0                	test   eax,eax
c000d971:	74 2e                	je     c000d9a1 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d973:	43                   	inc    ebx
c000d974:	83 fb 3f             	cmp    ebx,0x3f
c000d977:	75 e0                	jne    c000d959 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d979:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d97c:	31 db                	xor    ebx,ebx
c000d97e:	8d 04 9d a0 5b 02 c0 	lea    eax,[ebx*4-0x3ffda460]
c000d985:	51                   	push   ecx
c000d986:	51                   	push   ecx
c000d987:	50                   	push   eax
c000d988:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d98c:	e8 bf 2d ff ff       	call   c0000750 <strcmp>
c000d991:	83 c4 10             	add    esp,0x10
c000d994:	85 c0                	test   eax,eax
c000d996:	74 09                	je     c000d9a1 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d998:	43                   	inc    ebx
c000d999:	83 fb 3f             	cmp    ebx,0x3f
c000d99c:	75 e0                	jne    c000d97e <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d99e:	83 cb ff             	or     ebx,0xffffffff
c000d9a1:	89 d8                	mov    eax,ebx
c000d9a3:	5a                   	pop    edx
c000d9a4:	5b                   	pop    ebx
c000d9a5:	5e                   	pop    esi
c000d9a6:	c3                   	ret    

c000d9a7 <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d9a7:	55                   	push   ebp
c000d9a8:	31 c0                	xor    eax,eax
c000d9aa:	57                   	push   edi
c000d9ab:	56                   	push   esi
c000d9ac:	53                   	push   ebx
c000d9ad:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d9b1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d9b5:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d9b7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d9bb:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d9be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d9c2:	83 fd 1f             	cmp    ebp,0x1f
c000d9c5:	7f 0b                	jg     c000d9d2 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d9c7:	0f b6 c2             	movzx  eax,dl
c000d9ca:	d3 e0                	shl    eax,cl
c000d9cc:	09 07                	or     DWORD PTR [edi],eax
c000d9ce:	b0 01                	mov    al,0x1
c000d9d0:	01 33                	add    DWORD PTR [ebx],esi
c000d9d2:	5b                   	pop    ebx
c000d9d3:	5e                   	pop    esi
c000d9d4:	5f                   	pop    edi
c000d9d5:	5d                   	pop    ebp
c000d9d6:	c3                   	ret    

c000d9d7 <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d9d7:	57                   	push   edi
c000d9d8:	56                   	push   esi
c000d9d9:	53                   	push   ebx
c000d9da:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d9de:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d9e2:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d9e6:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d9ea:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d9ec:	7c 17                	jl     c000da05 <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d9ee:	8b 17                	mov    edx,DWORD PTR [edi]
c000d9f0:	b8 01 00 00 00       	mov    eax,0x1
c000d9f5:	d3 e0                	shl    eax,cl
c000d9f7:	48                   	dec    eax
c000d9f8:	21 d0                	and    eax,edx
c000d9fa:	d3 ea                	shr    edx,cl
c000d9fc:	89 17                	mov    DWORD PTR [edi],edx
c000d9fe:	29 0b                	sub    DWORD PTR [ebx],ecx
c000da00:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000da03:	eb 05                	jmp    c000da0a <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000da05:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000da08:	31 c0                	xor    eax,eax
c000da0a:	5b                   	pop    ebx
c000da0b:	5e                   	pop    esi
c000da0c:	5f                   	pop    edi
c000da0d:	c3                   	ret    

c000da0e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000da0e:	83 ec 40             	sub    esp,0x40
c000da11:	8d 44 24 09          	lea    eax,[esp+0x9]
c000da15:	50                   	push   eax
c000da16:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da1a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000da1e:	e8 49 fa ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da23:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000da27:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000da2b:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000da2f:	89 10                	mov    DWORD PTR [eax],edx
c000da31:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000da34:	83 c4 4c             	add    esp,0x4c
c000da37:	c3                   	ret    

c000da38 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000da38:	55                   	push   ebp
c000da39:	57                   	push   edi
c000da3a:	56                   	push   esi
c000da3b:	53                   	push   ebx
c000da3c:	83 ec 40             	sub    esp,0x40
c000da3f:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000da43:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000da47:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000da4b:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000da4f:	53                   	push   ebx
c000da50:	56                   	push   esi
c000da51:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da55:	e8 12 fa ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000da5a:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000da5e:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000da62:	83 c4 0c             	add    esp,0xc
c000da65:	53                   	push   ebx
c000da66:	56                   	push   esi
c000da67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000da6b:	e8 20 fb ff ff       	call   c000d590 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000da70:	83 c4 4c             	add    esp,0x4c
c000da73:	5b                   	pop    ebx
c000da74:	5e                   	pop    esi
c000da75:	5f                   	pop    edi
c000da76:	5d                   	pop    ebp
c000da77:	c3                   	ret    

c000da78 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000da78:	55                   	push   ebp
c000da79:	57                   	push   edi
c000da7a:	56                   	push   esi
c000da7b:	31 f6                	xor    esi,esi
c000da7d:	53                   	push   ebx
c000da7e:	31 db                	xor    ebx,ebx
c000da80:	83 ec 40             	sub    esp,0x40
c000da83:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000da8b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000da93:	6a 12                	push   0x12
c000da95:	68 ee 00 00 00       	push   0xee
c000da9a:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000da9e:	e8 4d 2a ff ff       	call   c00004f0 <memset>
c000daa3:	83 c4 10             	add    esp,0x10
c000daa6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000daaa:	6a 08                	push   0x8
c000daac:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000dab0:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000dab4:	50                   	push   eax
c000dab5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dab9:	55                   	push   ebp
c000daba:	57                   	push   edi
c000dabb:	e8 e7 fe ff ff       	call   c000d9a7 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dac0:	83 c4 10             	add    esp,0x10
c000dac3:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dac7:	50                   	push   eax
c000dac8:	6a 06                	push   0x6
c000daca:	55                   	push   ebp
c000dacb:	57                   	push   edi
c000dacc:	e8 06 ff ff ff       	call   c000d9d7 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dad1:	83 c4 10             	add    esp,0x10
c000dad4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dad9:	74 07                	je     c000dae2 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000dadb:	46                   	inc    esi
c000dadc:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000dae0:	eb e1                	jmp    c000dac3 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000dae2:	43                   	inc    ebx
c000dae3:	83 fb 12             	cmp    ebx,0x12
c000dae6:	75 c2                	jne    c000daaa <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000dae8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000daec:	31 db                	xor    ebx,ebx
c000daee:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000daf1:	50                   	push   eax
c000daf2:	50                   	push   eax
c000daf3:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000daf8:	43                   	inc    ebx
c000daf9:	8d 04 85 a0 5b 02 c0 	lea    eax,[eax*4-0x3ffda460]
c000db00:	50                   	push   eax
c000db01:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000db05:	e8 36 2d ff ff       	call   c0000840 <strcat>
c000db0a:	83 c4 10             	add    esp,0x10
c000db0d:	83 fb 18             	cmp    ebx,0x18
c000db10:	75 df                	jne    c000daf1 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000db12:	83 c4 3c             	add    esp,0x3c
c000db15:	31 c0                	xor    eax,eax
c000db17:	5b                   	pop    ebx
c000db18:	5e                   	pop    esi
c000db19:	5f                   	pop    edi
c000db1a:	5d                   	pop    ebp
c000db1b:	c3                   	ret    

c000db1c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000db1c:	83 ec 40             	sub    esp,0x40
c000db1f:	8d 44 24 09          	lea    eax,[esp+0x9]
c000db23:	50                   	push   eax
c000db24:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db28:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db2c:	e8 3b f9 ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000db31:	58                   	pop    eax
c000db32:	5a                   	pop    edx
c000db33:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000db37:	8d 44 24 15          	lea    eax,[esp+0x15]
c000db3b:	50                   	push   eax
c000db3c:	e8 37 ff ff ff       	call   c000da78 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000db41:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000db46:	83 c4 4c             	add    esp,0x4c
c000db49:	c3                   	ret    

c000db4a <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000db4a:	55                   	push   ebp
c000db4b:	57                   	push   edi
c000db4c:	56                   	push   esi
c000db4d:	53                   	push   ebx
c000db4e:	31 db                	xor    ebx,ebx
c000db50:	83 ec 70             	sub    esp,0x70
c000db53:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000db5a:	6a 30                	push   0x30
c000db5c:	6a 00                	push   0x0
c000db5e:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000db62:	56                   	push   esi
c000db63:	e8 88 29 ff ff       	call   c00004f0 <memset>
c000db68:	83 c4 10             	add    esp,0x10
c000db6b:	83 ec 0c             	sub    esp,0xc
c000db6e:	57                   	push   edi
c000db6f:	e8 fc 29 ff ff       	call   c0000570 <strlen>
c000db74:	83 c4 10             	add    esp,0x10
c000db77:	39 d8                	cmp    eax,ebx
c000db79:	76 16                	jbe    c000db91 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000db7b:	83 ec 0c             	sub    esp,0xc
c000db7e:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000db82:	50                   	push   eax
c000db83:	e8 a8 2d ff ff       	call   c0000930 <toupper>
c000db88:	83 c4 10             	add    esp,0x10
c000db8b:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000db8e:	43                   	inc    ebx
c000db8f:	eb da                	jmp    c000db6b <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000db91:	31 f6                	xor    esi,esi
c000db93:	52                   	push   edx
c000db94:	31 ff                	xor    edi,edi
c000db96:	6a 18                	push   0x18
c000db98:	6a 3f                	push   0x3f
c000db9a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000db9e:	50                   	push   eax
c000db9f:	e8 4c 29 ff ff       	call   c00004f0 <memset>
c000dba4:	83 c4 10             	add    esp,0x10
c000dba7:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000dbab:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000dbaf:	84 c0                	test   al,al
c000dbb1:	0f 84 b0 00 00 00    	je     c000dc67 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dbb7:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000dbbb:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000dbc0:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000dbc4:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000dbc9:	8d 6e 01             	lea    ebp,[esi+0x1]
c000dbcc:	83 ec 0c             	sub    esp,0xc
c000dbcf:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000dbd3:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000dbd7:	53                   	push   ebx
c000dbd8:	e8 93 29 ff ff       	call   c0000570 <strlen>
c000dbdd:	83 c4 10             	add    esp,0x10
c000dbe0:	85 c0                	test   eax,eax
c000dbe2:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dbe6:	74 0b                	je     c000dbf3 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000dbe8:	50                   	push   eax
c000dbe9:	6a 01                	push   0x1
c000dbeb:	53                   	push   ebx
c000dbec:	8d 44 24 20          	lea    eax,[esp+0x20]
c000dbf0:	50                   	push   eax
c000dbf1:	eb 0a                	jmp    c000dbfd <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000dbf3:	50                   	push   eax
c000dbf4:	6a 00                	push   0x0
c000dbf6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000dbfa:	50                   	push   eax
c000dbfb:	6a 00                	push   0x0
c000dbfd:	e8 44 fd ff ff       	call   c000d946 <CmGetMatch(char*, char*, bool, bool*)>
c000dc02:	83 c4 10             	add    esp,0x10
c000dc05:	83 f8 ff             	cmp    eax,0xffffffff
c000dc08:	75 1a                	jne    c000dc24 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000dc0a:	83 ec 0c             	sub    esp,0xc
c000dc0d:	68 ae 38 02 c0       	push   0xc00238ae
c000dc12:	e8 8b 23 00 00       	call   c000ffa2 <KePanic(char const*)>
c000dc17:	83 c4 10             	add    esp,0x10
c000dc1a:	b8 02 00 00 00       	mov    eax,0x2
c000dc1f:	e9 bc 00 00 00       	jmp    c000dce0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dc24:	83 ff 18             	cmp    edi,0x18
c000dc27:	75 1a                	jne    c000dc43 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000dc29:	83 ec 0c             	sub    esp,0xc
c000dc2c:	68 c3 38 02 c0       	push   0xc00238c3
c000dc31:	e8 6c 23 00 00       	call   c000ffa2 <KePanic(char const*)>
c000dc36:	83 c4 10             	add    esp,0x10
c000dc39:	b8 01 00 00 00       	mov    eax,0x1
c000dc3e:	e9 9d 00 00 00       	jmp    c000dce0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dc43:	47                   	inc    edi
c000dc44:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dc49:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000dc4d:	74 02                	je     c000dc51 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000dc4f:	89 ee                	mov    esi,ebp
c000dc51:	83 ec 0c             	sub    esp,0xc
c000dc54:	53                   	push   ebx
c000dc55:	e8 16 29 ff ff       	call   c0000570 <strlen>
c000dc5a:	83 c4 10             	add    esp,0x10
c000dc5d:	85 c0                	test   eax,eax
c000dc5f:	74 06                	je     c000dc67 <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000dc61:	46                   	inc    esi
c000dc62:	e9 40 ff ff ff       	jmp    c000dba7 <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000dc67:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000dc6f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dc77:	31 f6                	xor    esi,esi
c000dc79:	50                   	push   eax
c000dc7a:	31 ff                	xor    edi,edi
c000dc7c:	6a 12                	push   0x12
c000dc7e:	68 ee 00 00 00       	push   0xee
c000dc83:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000dc8a:	e8 61 28 ff ff       	call   c00004f0 <memset>
c000dc8f:	83 c4 10             	add    esp,0x10
c000dc92:	83 fe 17             	cmp    esi,0x17
c000dc95:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000dc99:	7e 26                	jle    c000dcc1 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000dc9b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000dc9f:	50                   	push   eax
c000dca0:	6a 08                	push   0x8
c000dca2:	55                   	push   ebp
c000dca3:	53                   	push   ebx
c000dca4:	e8 2e fd ff ff       	call   c000d9d7 <CmGetShift(unsigned int*, int*, int, bool*)>
c000dca9:	83 c4 10             	add    esp,0x10
c000dcac:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000dcb1:	74 26                	je     c000dcd9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000dcb3:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000dcba:	4e                   	dec    esi
c000dcbb:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000dcbe:	47                   	inc    edi
c000dcbf:	eb 1c                	jmp    c000dcdd <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dcc1:	6a 06                	push   0x6
c000dcc3:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000dcc8:	50                   	push   eax
c000dcc9:	55                   	push   ebp
c000dcca:	53                   	push   ebx
c000dccb:	e8 d7 fc ff ff       	call   c000d9a7 <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	84 c0                	test   al,al
c000dcd5:	75 06                	jne    c000dcdd <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000dcd7:	eb c2                	jmp    c000dc9b <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000dcd9:	31 c0                	xor    eax,eax
c000dcdb:	eb 03                	jmp    c000dce0 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000dcdd:	46                   	inc    esi
c000dcde:	eb b2                	jmp    c000dc92 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000dce0:	83 c4 6c             	add    esp,0x6c
c000dce3:	5b                   	pop    ebx
c000dce4:	5e                   	pop    esi
c000dce5:	5f                   	pop    edi
c000dce6:	5d                   	pop    ebp
c000dce7:	c3                   	ret    

c000dce8 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000dce8:	53                   	push   ebx
c000dce9:	83 ec 3c             	sub    esp,0x3c
c000dcec:	6a 2b                	push   0x2b
c000dcee:	6a 00                	push   0x0
c000dcf0:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000dcf4:	53                   	push   ebx
c000dcf5:	e8 f6 27 ff ff       	call   c00004f0 <memset>
c000dcfa:	58                   	pop    eax
c000dcfb:	5a                   	pop    edx
c000dcfc:	8d 44 24 11          	lea    eax,[esp+0x11]
c000dd00:	50                   	push   eax
c000dd01:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000dd05:	e8 40 fe ff ff       	call   c000db4a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd0a:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000dd0f:	83 c4 0c             	add    esp,0xc
c000dd12:	6a 15                	push   0x15
c000dd14:	6a 00                	push   0x0
c000dd16:	8d 44 24 27          	lea    eax,[esp+0x27]
c000dd1a:	50                   	push   eax
c000dd1b:	e8 d0 27 ff ff       	call   c00004f0 <memset>
c000dd20:	53                   	push   ebx
c000dd21:	6a 00                	push   0x0
c000dd23:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd27:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd2b:	e8 e6 f9 ff ff       	call   c000d716 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000dd30:	83 c4 58             	add    esp,0x58
c000dd33:	5b                   	pop    ebx
c000dd34:	c3                   	ret    

c000dd35 <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000dd35:	56                   	push   esi
c000dd36:	53                   	push   ebx
c000dd37:	83 ec 48             	sub    esp,0x48
c000dd3a:	6a 12                	push   0x12
c000dd3c:	68 ff 00 00 00       	push   0xff
c000dd41:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000dd45:	56                   	push   esi
c000dd46:	e8 a5 27 ff ff       	call   c00004f0 <memset>
c000dd4b:	5a                   	pop    edx
c000dd4c:	59                   	pop    ecx
c000dd4d:	56                   	push   esi
c000dd4e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000dd52:	e8 f3 fd ff ff       	call   c000db4a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dd57:	83 c4 10             	add    esp,0x10
c000dd5a:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000dd5e:	85 db                	test   ebx,ebx
c000dd60:	74 42                	je     c000dda4 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000dd62:	50                   	push   eax
c000dd63:	8d 44 24 19          	lea    eax,[esp+0x19]
c000dd67:	50                   	push   eax
c000dd68:	53                   	push   ebx
c000dd69:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000dd6d:	e8 fa f6 ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000dd72:	83 c4 0c             	add    esp,0xc
c000dd75:	6a 12                	push   0x12
c000dd77:	8d 44 24 21          	lea    eax,[esp+0x21]
c000dd7b:	50                   	push   eax
c000dd7c:	56                   	push   esi
c000dd7d:	e8 fe 25 ff ff       	call   c0000380 <memcmp>
c000dd82:	83 c4 10             	add    esp,0x10
c000dd85:	85 c0                	test   eax,eax
c000dd87:	74 1e                	je     c000dda7 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000dd89:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000dd8e:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000dd93:	c1 e3 08             	shl    ebx,0x8
c000dd96:	09 d8                	or     eax,ebx
c000dd98:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000dd9d:	c1 e3 10             	shl    ebx,0x10
c000dda0:	09 c3                	or     ebx,eax
c000dda2:	eb ba                	jmp    c000dd5e <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000dda4:	83 cb ff             	or     ebx,0xffffffff
c000dda7:	89 d8                	mov    eax,ebx
c000dda9:	83 c4 44             	add    esp,0x44
c000ddac:	5b                   	pop    ebx
c000ddad:	5e                   	pop    esi
c000ddae:	c3                   	ret    

c000ddaf <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000ddaf:	57                   	push   edi
c000ddb0:	56                   	push   esi
c000ddb1:	53                   	push   ebx
c000ddb2:	83 ec 34             	sub    esp,0x34
c000ddb5:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000ddb9:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000ddbd:	6a 2b                	push   0x2b
c000ddbf:	6a 00                	push   0x0
c000ddc1:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000ddc5:	53                   	push   ebx
c000ddc6:	e8 25 27 ff ff       	call   c00004f0 <memset>
c000ddcb:	58                   	pop    eax
c000ddcc:	5a                   	pop    edx
c000ddcd:	8d 44 24 11          	lea    eax,[esp+0x11]
c000ddd1:	50                   	push   eax
c000ddd2:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ddd6:	e8 6f fd ff ff       	call   c000db4a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000dddb:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000dddf:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000dde3:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000dde7:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000ddeb:	53                   	push   ebx
c000ddec:	6a 00                	push   0x0
c000ddee:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddf2:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ddf6:	e8 1b f9 ff ff       	call   c000d716 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000ddfb:	83 c4 50             	add    esp,0x50
c000ddfe:	5b                   	pop    ebx
c000ddff:	5e                   	pop    esi
c000de00:	5f                   	pop    edi
c000de01:	c3                   	ret    

c000de02 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000de02:	55                   	push   ebp
c000de03:	57                   	push   edi
c000de04:	56                   	push   esi
c000de05:	53                   	push   ebx
c000de06:	83 ec 40             	sub    esp,0x40
c000de09:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000de0d:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000de11:	6a 2b                	push   0x2b
c000de13:	6a 00                	push   0x0
c000de15:	8d 74 24 11          	lea    esi,[esp+0x11]
c000de19:	56                   	push   esi
c000de1a:	e8 d1 26 ff ff       	call   c00004f0 <memset>
c000de1f:	5f                   	pop    edi
c000de20:	89 ef                	mov    edi,ebp
c000de22:	58                   	pop    eax
c000de23:	8d 44 24 11          	lea    eax,[esp+0x11]
c000de27:	50                   	push   eax
c000de28:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000de2c:	e8 19 fd ff ff       	call   c000db4a <CmConvertToInternalFilename(char const*, unsigned char*)>
c000de31:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000de36:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000de3b:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000de40:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000de45:	83 c4 10             	add    esp,0x10
c000de48:	85 ed                	test   ebp,ebp
c000de4a:	74 14                	je     c000de60 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de4c:	51                   	push   ecx
c000de4d:	51                   	push   ecx
c000de4e:	57                   	push   edi
c000de4f:	53                   	push   ebx
c000de50:	e8 09 f7 ff ff       	call   c000d55e <CmGetNext(Reghive_Tag*, int)>
c000de55:	83 c4 10             	add    esp,0x10
c000de58:	85 c0                	test   eax,eax
c000de5a:	74 04                	je     c000de60 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000de5c:	89 c7                	mov    edi,eax
c000de5e:	eb e8                	jmp    c000de48 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000de60:	56                   	push   esi
c000de61:	6a 00                	push   0x0
c000de63:	57                   	push   edi
c000de64:	53                   	push   ebx
c000de65:	e8 ac f8 ff ff       	call   c000d716 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000de6a:	83 c4 0c             	add    esp,0xc
c000de6d:	89 c7                	mov    edi,eax
c000de6f:	56                   	push   esi
c000de70:	50                   	push   eax
c000de71:	53                   	push   ebx
c000de72:	e8 f5 f5 ff ff       	call   c000d46c <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000de77:	58                   	pop    eax
c000de78:	5a                   	pop    edx
c000de79:	6a 6c                	push   0x6c
c000de7b:	6a 00                	push   0x0
c000de7d:	6a 00                	push   0x0
c000de7f:	68 d4 38 02 c0       	push   0xc00238d4
c000de84:	57                   	push   edi
c000de85:	53                   	push   ebx
c000de86:	e8 24 ff ff ff       	call   c000ddaf <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000de8b:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000de8f:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000de93:	c1 e8 10             	shr    eax,0x10
c000de96:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000de9a:	83 c4 1c             	add    esp,0x1c
c000de9d:	56                   	push   esi
c000de9e:	57                   	push   edi
c000de9f:	53                   	push   ebx
c000dea0:	e8 eb f6 ff ff       	call   c000d590 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000dea5:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000deaa:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000deaf:	c1 e0 08             	shl    eax,0x8
c000deb2:	09 c2                	or     edx,eax
c000deb4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000deb9:	83 c4 4c             	add    esp,0x4c
c000debc:	c1 e0 10             	shl    eax,0x10
c000debf:	5b                   	pop    ebx
c000dec0:	09 d0                	or     eax,edx
c000dec2:	5e                   	pop    esi
c000dec3:	5f                   	pop    edi
c000dec4:	5d                   	pop    ebp
c000dec5:	c3                   	ret    

c000dec6 <zStrtok(char*, char const*)>:
c000dec6:	55                   	push   ebp
c000dec7:	57                   	push   edi
c000dec8:	56                   	push   esi
c000dec9:	53                   	push   ebx
c000deca:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000dece:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ded2:	85 db                	test   ebx,ebx
c000ded4:	74 2f                	je     c000df05 <zStrtok(char*, char const*)+0x3f>
c000ded6:	85 c0                	test   eax,eax
c000ded8:	75 09                	jne    c000dee3 <zStrtok(char*, char const*)+0x1d>
c000deda:	a1 c0 c0 02 c0       	mov    eax,ds:0xc002c0c0
c000dedf:	85 c0                	test   eax,eax
c000dee1:	74 50                	je     c000df33 <zStrtok(char*, char const*)+0x6d>
c000dee3:	31 c9                	xor    ecx,ecx
c000dee5:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000dee9:	74 03                	je     c000deee <zStrtok(char*, char const*)+0x28>
c000deeb:	41                   	inc    ecx
c000deec:	eb f7                	jmp    c000dee5 <zStrtok(char*, char const*)+0x1f>
c000deee:	31 d2                	xor    edx,edx
c000def0:	39 ca                	cmp    edx,ecx
c000def2:	74 15                	je     c000df09 <zStrtok(char*, char const*)+0x43>
c000def4:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000def8:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000defb:	8d 3c 10             	lea    edi,[eax+edx*1]
c000defe:	39 ee                	cmp    esi,ebp
c000df00:	74 13                	je     c000df15 <zStrtok(char*, char const*)+0x4f>
c000df02:	42                   	inc    edx
c000df03:	eb eb                	jmp    c000def0 <zStrtok(char*, char const*)+0x2a>
c000df05:	31 c0                	xor    eax,eax
c000df07:	eb 2a                	jmp    c000df33 <zStrtok(char*, char const*)+0x6d>
c000df09:	c7 05 c0 c0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002c0c0,0x0
c000df13:	eb 1e                	jmp    c000df33 <zStrtok(char*, char const*)+0x6d>
c000df15:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000df18:	39 ce                	cmp    esi,ecx
c000df1a:	75 0a                	jne    c000df26 <zStrtok(char*, char const*)+0x60>
c000df1c:	40                   	inc    eax
c000df1d:	a3 c0 c0 02 c0       	mov    ds:0xc002c0c0,eax
c000df22:	89 d8                	mov    eax,ebx
c000df24:	eb 0d                	jmp    c000df33 <zStrtok(char*, char const*)+0x6d>
c000df26:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000df2a:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000df2d:	89 15 c0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0c0,edx
c000df33:	5b                   	pop    ebx
c000df34:	5e                   	pop    esi
c000df35:	5f                   	pop    edi
c000df36:	5d                   	pop    ebp
c000df37:	c3                   	ret    

c000df38 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000df38:	57                   	push   edi
c000df39:	56                   	push   esi
c000df3a:	53                   	push   ebx
c000df3b:	81 ec 08 01 00 00    	sub    esp,0x108
c000df41:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000df48:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000df4f:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000df53:	53                   	push   ebx
c000df54:	e8 e7 26 ff ff       	call   c0000640 <strcpy>
c000df59:	59                   	pop    ecx
c000df5a:	5e                   	pop    esi
c000df5b:	68 17 4a 02 c0       	push   0xc0024a17
c000df60:	53                   	push   ebx
c000df61:	bb 01 00 00 00       	mov    ebx,0x1
c000df66:	e8 5b ff ff ff       	call   c000dec6 <zStrtok(char*, char const*)>
c000df6b:	83 c4 10             	add    esp,0x10
c000df6e:	85 c0                	test   eax,eax
c000df70:	74 3b                	je     c000dfad <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df72:	52                   	push   edx
c000df73:	50                   	push   eax
c000df74:	6a 01                	push   0x1
c000df76:	57                   	push   edi
c000df77:	e8 b9 fd ff ff       	call   c000dd35 <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000df7c:	59                   	pop    ecx
c000df7d:	89 c3                	mov    ebx,eax
c000df7f:	5e                   	pop    esi
c000df80:	68 17 4a 02 c0       	push   0xc0024a17
c000df85:	6a 00                	push   0x0
c000df87:	e8 3a ff ff ff       	call   c000dec6 <zStrtok(char*, char const*)>
c000df8c:	83 c4 10             	add    esp,0x10
c000df8f:	89 c6                	mov    esi,eax
c000df91:	85 c0                	test   eax,eax
c000df93:	74 18                	je     c000dfad <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000df95:	52                   	push   edx
c000df96:	52                   	push   edx
c000df97:	53                   	push   ebx
c000df98:	57                   	push   edi
c000df99:	e8 81 f5 ff ff       	call   c000d51f <CmEnterDirectory(Reghive_Tag*, int)>
c000df9e:	83 c4 10             	add    esp,0x10
c000dfa1:	89 c3                	mov    ebx,eax
c000dfa3:	83 f8 ff             	cmp    eax,0xffffffff
c000dfa6:	74 05                	je     c000dfad <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000dfa8:	50                   	push   eax
c000dfa9:	56                   	push   esi
c000dfaa:	53                   	push   ebx
c000dfab:	eb c9                	jmp    c000df76 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000dfad:	81 c4 00 01 00 00    	add    esp,0x100
c000dfb3:	89 d8                	mov    eax,ebx
c000dfb5:	5b                   	pop    ebx
c000dfb6:	5e                   	pop    esi
c000dfb7:	5f                   	pop    edi
c000dfb8:	c3                   	ret    

c000dfb9 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000dfb9:	55                   	push   ebp
c000dfba:	57                   	push   edi
c000dfbb:	56                   	push   esi
c000dfbc:	53                   	push   ebx
c000dfbd:	83 ec 5c             	sub    esp,0x5c
c000dfc0:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000dfc4:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000dfc8:	85 db                	test   ebx,ebx
c000dfca:	0f 8e 84 00 00 00    	jle    c000e054 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000dfd0:	31 ed                	xor    ebp,ebp
c000dfd2:	57                   	push   edi
c000dfd3:	6a 32                	push   0x32
c000dfd5:	6a 00                	push   0x0
c000dfd7:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000dfdb:	57                   	push   edi
c000dfdc:	e8 0f 25 ff ff       	call   c00004f0 <memset>
c000dfe1:	83 c4 0c             	add    esp,0xc
c000dfe4:	57                   	push   edi
c000dfe5:	53                   	push   ebx
c000dfe6:	56                   	push   esi
c000dfe7:	e8 30 fb ff ff       	call   c000db1c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000dfec:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dff0:	83 c4 10             	add    esp,0x10
c000dff3:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000dff7:	7d 13                	jge    c000e00c <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000dff9:	83 ec 0c             	sub    esp,0xc
c000dffc:	45                   	inc    ebp
c000dffd:	68 08 4f 02 c0       	push   0xc0024f08
c000e002:	e8 5d 8f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e007:	83 c4 10             	add    esp,0x10
c000e00a:	eb e7                	jmp    c000dff3 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000e00c:	51                   	push   ecx
c000e00d:	57                   	push   edi
c000e00e:	53                   	push   ebx
c000e00f:	68 da 38 02 c0       	push   0xc00238da
c000e014:	e8 4b 8f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e019:	83 c4 10             	add    esp,0x10
c000e01c:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000e021:	75 1e                	jne    c000e041 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000e023:	52                   	push   edx
c000e024:	52                   	push   edx
c000e025:	53                   	push   ebx
c000e026:	56                   	push   esi
c000e027:	e8 f3 f4 ff ff       	call   c000d51f <CmEnterDirectory(Reghive_Tag*, int)>
c000e02c:	83 c4 0c             	add    esp,0xc
c000e02f:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000e033:	8d 51 04             	lea    edx,[ecx+0x4]
c000e036:	52                   	push   edx
c000e037:	50                   	push   eax
c000e038:	56                   	push   esi
c000e039:	e8 7b ff ff ff       	call   c000dfb9 <CmDisplayTree(Reghive_Tag*, int, int)>
c000e03e:	83 c4 10             	add    esp,0x10
c000e041:	50                   	push   eax
c000e042:	50                   	push   eax
c000e043:	53                   	push   ebx
c000e044:	56                   	push   esi
c000e045:	e8 14 f5 ff ff       	call   c000d55e <CmGetNext(Reghive_Tag*, int)>
c000e04a:	83 c4 10             	add    esp,0x10
c000e04d:	89 c3                	mov    ebx,eax
c000e04f:	e9 74 ff ff ff       	jmp    c000dfc8 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000e054:	83 c4 5c             	add    esp,0x5c
c000e057:	5b                   	pop    ebx
c000e058:	5e                   	pop    esi
c000e059:	5f                   	pop    edi
c000e05a:	5d                   	pop    ebp
c000e05b:	c3                   	ret    

c000e05c <CmSplitFinalSlashInPlace(char*)>:
c000e05c:	53                   	push   ebx
c000e05d:	83 ec 14             	sub    esp,0x14
c000e060:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000e064:	53                   	push   ebx
c000e065:	e8 06 25 ff ff       	call   c0000570 <strlen>
c000e06a:	83 c4 10             	add    esp,0x10
c000e06d:	48                   	dec    eax
c000e06e:	85 c0                	test   eax,eax
c000e070:	74 15                	je     c000e087 <CmSplitFinalSlashInPlace(char*)+0x2b>
c000e072:	8d 14 03             	lea    edx,[ebx+eax*1]
c000e075:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000e079:	75 09                	jne    c000e084 <CmSplitFinalSlashInPlace(char*)+0x28>
c000e07b:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000e07e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000e082:	eb 05                	jmp    c000e089 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000e084:	48                   	dec    eax
c000e085:	eb e7                	jmp    c000e06e <CmSplitFinalSlashInPlace(char*)+0x12>
c000e087:	31 c0                	xor    eax,eax
c000e089:	83 c4 08             	add    esp,0x8
c000e08c:	5b                   	pop    ebx
c000e08d:	c3                   	ret    
c000e08e:	66 90                	xchg   ax,ax

c000e090 <Krnl::handlePowerButton()>:
c000e090:	83 ec 0c             	sub    esp,0xc
c000e093:	e8 45 28 00 00       	call   c00108dd <KeHandlePowerButton()>
c000e098:	90                   	nop
c000e099:	83 c4 0c             	add    esp,0xc
c000e09c:	c3                   	ret    
c000e09d:	8d 76 00             	lea    esi,[esi+0x0]

c000e0a0 <Krnl::handleSleepButton()>:
c000e0a0:	83 ec 0c             	sub    esp,0xc
c000e0a3:	e8 4d 28 00 00       	call   c00108f5 <KeHandleSleepButton()>
c000e0a8:	90                   	nop
c000e0a9:	83 c4 0c             	add    esp,0xc
c000e0ac:	c3                   	ret    
c000e0ad:	90                   	nop

c000e0ae <Computer::close(int, int, void*)>:
c000e0ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e0b3:	c3                   	ret    

c000e0b4 <Computer::open(int, int, void*)>:
c000e0b4:	56                   	push   esi
c000e0b5:	53                   	push   ebx
c000e0b6:	83 ec 04             	sub    esp,0x4
c000e0b9:	f6 05 24 e1 02 c0 04 	test   BYTE PTR ds:0xc002e124,0x4
c000e0c0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e0c4:	0f 94 05 80 62 02 c0 	sete   BYTE PTR ds:0xc0026280
c000e0cb:	39 1d d0 c0 02 c0    	cmp    DWORD PTR ds:0xc002c0d0,ebx
c000e0d1:	74 10                	je     c000e0e3 <Computer::open(int, int, void*)+0x2f>
c000e0d3:	83 ec 0c             	sub    esp,0xc
c000e0d6:	68 e4 38 02 c0       	push   0xc00238e4
c000e0db:	e8 c2 1e 00 00       	call   c000ffa2 <KePanic(char const*)>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	83 ec 0c             	sub    esp,0xc
c000e0e6:	68 9c 39 02 c0       	push   0xc002399c
c000e0eb:	e8 33 f1 ff ff       	call   c000d223 <KeSetBootMessage(char const*)>
c000e0f0:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000e0f7:	e8 5f 1b 00 00       	call   c000fc5b <malloc>
c000e0fc:	89 04 24             	mov    DWORD PTR [esp],eax
c000e0ff:	89 c6                	mov    esi,eax
c000e101:	e8 7e e6 ff ff       	call   c000c784 <ACPI::ACPI()>
c000e106:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000e10c:	58                   	pop    eax
c000e10d:	5a                   	pop    edx
c000e10e:	56                   	push   esi
c000e10f:	53                   	push   ebx
c000e110:	e8 e5 b8 ff ff       	call   c00099fa <Device::addChild(Device*)>
c000e115:	c7 04 24 b4 39 02 c0 	mov    DWORD PTR [esp],0xc00239b4
c000e11c:	e8 02 f1 ff ff       	call   c000d223 <KeSetBootMessage(char const*)>
c000e121:	e8 0d b2 00 00       	call   c0019333 <HalEnableNMI()>
c000e126:	e8 3d a4 00 00       	call   c0018568 <HalDetectFeatures()>
c000e12b:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000e132:	e8 24 1b 00 00       	call   c000fc5b <malloc>
c000e137:	89 04 24             	mov    DWORD PTR [esp],eax
c000e13a:	89 c6                	mov    esi,eax
c000e13c:	e8 2d bd 00 00       	call   c0019e6e <CPU::CPU()>
c000e141:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000e147:	59                   	pop    ecx
c000e148:	58                   	pop    eax
c000e149:	56                   	push   esi
c000e14a:	53                   	push   ebx
c000e14b:	e8 aa b8 ff ff       	call   c00099fa <Device::addChild(Device*)>
c000e150:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e154:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000e15a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e15c:	51                   	push   ecx
c000e15d:	6a 00                	push   0x0
c000e15f:	6a 00                	push   0x0
c000e161:	50                   	push   eax
c000e162:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e165:	83 c4 14             	add    esp,0x14
c000e168:	68 10 39 02 c0       	push   0xc0023910
c000e16d:	e8 b1 f0 ff ff       	call   c000d223 <KeSetBootMessage(char const*)>
c000e172:	e8 52 b9 00 00       	call   c0019ac9 <HalInitialiseCoprocessor()>
c000e177:	c7 04 24 ce 39 02 c0 	mov    DWORD PTR [esp],0xc00239ce
c000e17e:	e8 a0 f0 ff ff       	call   c000d223 <KeSetBootMessage(char const*)>
c000e183:	c7 04 24 9a e1 00 c0 	mov    DWORD PTR [esp],0xc000e19a
c000e18a:	e8 0d 89 00 00       	call   c0016a9c <setupMultitasking(void (*)())>
c000e18f:	83 c4 14             	add    esp,0x14
c000e192:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000e197:	5b                   	pop    ebx
c000e198:	5e                   	pop    esi
c000e199:	c3                   	ret    

c000e19a <KeFirstTask()>:
c000e19a:	53                   	push   ebx
c000e19b:	83 ec 14             	sub    esp,0x14
c000e19e:	fb                   	sti    
c000e19f:	68 e9 39 02 c0       	push   0xc00239e9
c000e1a4:	e8 7a f0 ff ff       	call   c000d223 <KeSetBootMessage(char const*)>
c000e1a9:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000e1b0:	e8 a6 1a 00 00       	call   c000fc5b <malloc>
c000e1b5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e1bc:	89 c3                	mov    ebx,eax
c000e1be:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c000e1c3:	50                   	push   eax
c000e1c4:	68 02 3a 02 c0       	push   0xc0023a02
c000e1c9:	6a 01                	push   0x1
c000e1cb:	53                   	push   ebx
c000e1cc:	e8 57 85 00 00       	call   c0016728 <Process::Process(bool, char const*, Process*, char**)>
c000e1d1:	83 c4 20             	add    esp,0x20
c000e1d4:	68 ff 00 00 00       	push   0xff
c000e1d9:	6a 00                	push   0x0
c000e1db:	68 99 ee 00 c0       	push   0xc000ee99
c000e1e0:	53                   	push   ebx
c000e1e1:	e8 82 87 00 00       	call   c0016968 <Process::createThread(void (*)(void*), void*, int)>
c000e1e6:	8b 15 58 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea58
c000e1ec:	6a 7a                	push   0x7a
c000e1ee:	6a 00                	push   0x0
c000e1f0:	68 58 72 01 c0       	push   0xc0017258
c000e1f5:	52                   	push   edx
c000e1f6:	e8 6d 87 00 00       	call   c0016968 <Process::createThread(void (*)(void*), void*, int)>
c000e1fb:	83 c4 14             	add    esp,0x14
c000e1fe:	a3 10 ea 02 c0       	mov    ds:0xc002ea10,eax
c000e203:	68 34 39 02 c0       	push   0xc0023934
c000e208:	e8 16 f0 ff ff       	call   c000d223 <KeSetBootMessage(char const*)>
c000e20d:	c6 05 d5 c0 02 c0 01 	mov    BYTE PTR ds:0xc002c0d5,0x1
c000e214:	e8 e8 27 00 00       	call   c0010a01 <KeInitRand()>
c000e219:	e8 08 94 00 00       	call   c0017626 <Vm::initialise8086()>
c000e21e:	e8 cd 9b ff ff       	call   c0007df0 <Fs::initVFS()>
c000e223:	c7 04 24 a8 36 02 c0 	mov    DWORD PTR [esp],0xc00236a8
c000e22a:	e8 f4 ef ff ff       	call   c000d223 <KeSetBootMessage(char const*)>
c000e22f:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e234:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e23a:	8b 10                	mov    edx,DWORD PTR [eax]
c000e23c:	6a 00                	push   0x0
c000e23e:	6a 00                	push   0x0
c000e240:	6a 00                	push   0x0
c000e242:	50                   	push   eax
c000e243:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e246:	83 c4 14             	add    esp,0x14
c000e249:	68 34 39 02 c0       	push   0xc0023934
c000e24e:	e8 d0 ef ff ff       	call   c000d223 <KeSetBootMessage(char const*)>
c000e253:	e8 7d 93 ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000e258:	e8 f5 05 00 00       	call   c000e852 <KeLoadSystemEnv()>
c000e25d:	e8 ab 26 00 00       	call   c001090d <KeSetupPowerManager()>
c000e262:	c7 04 24 58 39 02 c0 	mov    DWORD PTR [esp],0xc0023958
c000e269:	e8 b5 ef ff ff       	call   c000d223 <KeSetBootMessage(char const*)>
c000e26e:	59                   	pop    ecx
c000e26f:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e274:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000e27a:	53                   	push   ebx
c000e27b:	e8 96 b8 ff ff       	call   c0009b16 <Device::loadDriversForAll()>
c000e280:	c7 04 24 0f 3a 02 c0 	mov    DWORD PTR [esp],0xc0023a0f
c000e287:	e8 97 ef ff ff       	call   c000d223 <KeSetBootMessage(char const*)>
c000e28c:	58                   	pop    eax
c000e28d:	8b 1d d0 c0 02 c0    	mov    ebx,DWORD PTR ds:0xc002c0d0
c000e293:	5a                   	pop    edx
c000e294:	6a 01                	push   0x1
c000e296:	68 20 3a 02 c0       	push   0xc0023a20
c000e29b:	e8 00 7e 00 00       	call   c00160a0 <Thr::loadDLL(char const*, bool)>
c000e2a0:	59                   	pop    ecx
c000e2a1:	5a                   	pop    edx
c000e2a2:	53                   	push   ebx
c000e2a3:	50                   	push   eax
c000e2a4:	e8 49 80 00 00       	call   c00162f2 <Thr::executeDLL(unsigned long, void*)>
c000e2a9:	83 c4 10             	add    esp,0x10
c000e2ac:	83 ec 0c             	sub    esp,0xc
c000e2af:	6a 02                	push   0x2
c000e2b1:	e8 ca 89 00 00       	call   c0016c80 <blockTask(TaskState)>
c000e2b6:	83 c4 10             	add    esp,0x10
c000e2b9:	eb f1                	jmp    c000e2ac <KeFirstTask()+0x112>
c000e2bb:	90                   	nop

c000e2bc <Computer::Computer()>:
c000e2bc:	83 ec 0c             	sub    esp,0xc
c000e2bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2c3:	83 ec 08             	sub    esp,0x8
c000e2c6:	68 3c 3a 02 c0       	push   0xc0023a3c
c000e2cb:	50                   	push   eax
c000e2cc:	e8 8b b8 ff ff       	call   c0009b5c <Device::Device(char const*)>
c000e2d1:	83 c4 10             	add    esp,0x10
c000e2d4:	ba 50 3a 02 c0       	mov    edx,0xc0023a50
c000e2d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2dd:	89 10                	mov    DWORD PTR [eax],edx
c000e2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2e3:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e2ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e2f1:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e2fb:	90                   	nop
c000e2fc:	83 c4 0c             	add    esp,0xc
c000e2ff:	c3                   	ret    

c000e300 <KePrepareShutdown()>:
c000e300:	83 ec 0c             	sub    esp,0xc
c000e303:	e8 89 ee ff ff       	call   c000d191 <KeExecuteAtexit()>
c000e308:	83 ec 0c             	sub    esp,0xc
c000e30b:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000e310:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000e316:	50                   	push   eax
c000e317:	e8 46 b9 ff ff       	call   c0009c62 <Device::closeAll()>
c000e31c:	83 c4 1c             	add    esp,0x1c
c000e31f:	c3                   	ret    

c000e320 <KeShutdown()>:
c000e320:	83 ec 0c             	sub    esp,0xc
c000e323:	e8 d8 ff ff ff       	call   c000e300 <KePrepareShutdown()>
c000e328:	a1 cc c0 02 c0       	mov    eax,ds:0xc002c0cc
c000e32d:	85 c0                	test   eax,eax
c000e32f:	74 02                	je     c000e333 <KeShutdown()+0x13>
c000e331:	ff d0                	call   eax
c000e333:	83 ec 0c             	sub    esp,0xc
c000e336:	68 78 39 02 c0       	push   0xc0023978
c000e33b:	e8 62 1c 00 00       	call   c000ffa2 <KePanic(char const*)>
c000e340:	83 c4 1c             	add    esp,0x1c
c000e343:	c3                   	ret    

c000e344 <KeSleep()>:
c000e344:	a1 c4 c0 02 c0       	mov    eax,ds:0xc002c0c4
c000e349:	85 c0                	test   eax,eax
c000e34b:	74 02                	je     c000e34f <KeSleep()+0xb>
c000e34d:	ff e0                	jmp    eax
c000e34f:	c3                   	ret    

c000e350 <KeRestart()>:
c000e350:	83 ec 0c             	sub    esp,0xc
c000e353:	e8 a8 ff ff ff       	call   c000e300 <KePrepareShutdown()>
c000e358:	a1 c8 c0 02 c0       	mov    eax,ds:0xc002c0c8
c000e35d:	85 c0                	test   eax,eax
c000e35f:	74 02                	je     c000e363 <KeRestart()+0x13>
c000e361:	ff d0                	call   eax
c000e363:	e4 64                	in     al,0x64
c000e365:	a8 02                	test   al,0x2
c000e367:	75 fa                	jne    c000e363 <KeRestart()+0x13>
c000e369:	b0 fe                	mov    al,0xfe
c000e36b:	e6 64                	out    0x64,al
c000e36d:	83 c4 0c             	add    esp,0xc
c000e370:	c3                   	ret    

c000e371 <KeCalculateCRC32(unsigned char*, int)>:
c000e371:	53                   	push   ebx
c000e372:	83 c8 ff             	or     eax,0xffffffff
c000e375:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e379:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000e37d:	01 cb                	add    ebx,ecx
c000e37f:	39 d9                	cmp    ecx,ebx
c000e381:	74 15                	je     c000e398 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000e383:	41                   	inc    ecx
c000e384:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000e387:	31 c2                	xor    edx,eax
c000e389:	c1 e8 08             	shr    eax,0x8
c000e38c:	0f b6 d2             	movzx  edx,dl
c000e38f:	33 04 95 a0 5c 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffda360]
c000e396:	eb e7                	jmp    c000e37f <KeCalculateCRC32(unsigned char*, int)+0xe>
c000e398:	f7 d0                	not    eax
c000e39a:	5b                   	pop    ebx
c000e39b:	c3                   	ret    

c000e39c <EnvVarContainer::getEnv(char const*)>:
c000e39c:	57                   	push   edi
c000e39d:	56                   	push   esi
c000e39e:	53                   	push   ebx
c000e39f:	31 db                	xor    ebx,ebx
c000e3a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e3a5:	39 1e                	cmp    DWORD PTR [esi],ebx
c000e3a7:	7e 2b                	jle    c000e3d4 <EnvVarContainer::getEnv(char const*)+0x38>
c000e3a9:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000e3b0:	50                   	push   eax
c000e3b1:	50                   	push   eax
c000e3b2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e3b5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000e3b8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e3bc:	e8 8f 23 ff ff       	call   c0000750 <strcmp>
c000e3c1:	83 c4 10             	add    esp,0x10
c000e3c4:	85 c0                	test   eax,eax
c000e3c6:	75 09                	jne    c000e3d1 <EnvVarContainer::getEnv(char const*)+0x35>
c000e3c8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e3cb:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000e3cf:	eb 05                	jmp    c000e3d6 <EnvVarContainer::getEnv(char const*)+0x3a>
c000e3d1:	43                   	inc    ebx
c000e3d2:	eb d1                	jmp    c000e3a5 <EnvVarContainer::getEnv(char const*)+0x9>
c000e3d4:	31 c0                	xor    eax,eax
c000e3d6:	5b                   	pop    ebx
c000e3d7:	5e                   	pop    esi
c000e3d8:	5f                   	pop    edi
c000e3d9:	c3                   	ret    

c000e3da <EnvVarContainer::setEnv(char const*, char const*)>:
c000e3da:	55                   	push   ebp
c000e3db:	57                   	push   edi
c000e3dc:	56                   	push   esi
c000e3dd:	53                   	push   ebx
c000e3de:	83 ec 28             	sub    esp,0x28
c000e3e1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e3e5:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000e3e9:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e3ed:	56                   	push   esi
c000e3ee:	e8 7d 21 ff ff       	call   c0000570 <strlen>
c000e3f3:	40                   	inc    eax
c000e3f4:	89 04 24             	mov    DWORD PTR [esp],eax
c000e3f7:	e8 5f 18 00 00       	call   c000fc5b <malloc>
c000e3fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e3ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e403:	e8 68 21 ff ff       	call   c0000570 <strlen>
c000e408:	40                   	inc    eax
c000e409:	89 04 24             	mov    DWORD PTR [esp],eax
c000e40c:	e8 4a 18 00 00       	call   c000fc5b <malloc>
c000e411:	89 34 24             	mov    DWORD PTR [esp],esi
c000e414:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e418:	e8 53 21 ff ff       	call   c0000570 <strlen>
c000e41d:	83 c4 0c             	add    esp,0xc
c000e420:	40                   	inc    eax
c000e421:	50                   	push   eax
c000e422:	6a 00                	push   0x0
c000e424:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e428:	e8 c3 20 ff ff       	call   c00004f0 <memset>
c000e42d:	89 34 24             	mov    DWORD PTR [esp],esi
c000e430:	e8 3b 21 ff ff       	call   c0000570 <strlen>
c000e435:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000e439:	8d 48 01             	lea    ecx,[eax+0x1]
c000e43c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e43e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e441:	89 de                	mov    esi,ebx
c000e443:	e8 28 21 ff ff       	call   c0000570 <strlen>
c000e448:	83 c4 0c             	add    esp,0xc
c000e44b:	40                   	inc    eax
c000e44c:	50                   	push   eax
c000e44d:	6a 00                	push   0x0
c000e44f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e453:	e8 98 20 ff ff       	call   c00004f0 <memset>
c000e458:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e45b:	e8 10 21 ff ff       	call   c0000570 <strlen>
c000e460:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e464:	8d 48 01             	lea    ecx,[eax+0x1]
c000e467:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e469:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e46c:	40                   	inc    eax
c000e46d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e470:	c1 e0 03             	shl    eax,0x3
c000e473:	5a                   	pop    edx
c000e474:	59                   	pop    ecx
c000e475:	50                   	push   eax
c000e476:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000e479:	e8 c9 17 00 00       	call   c000fc47 <realloc>
c000e47e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e482:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e485:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e488:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e48c:	b9 08 00 00 00       	mov    ecx,0x8
c000e491:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e493:	83 c4 2c             	add    esp,0x2c
c000e496:	5b                   	pop    ebx
c000e497:	5e                   	pop    esi
c000e498:	5f                   	pop    edi
c000e499:	5d                   	pop    ebp
c000e49a:	c3                   	ret    
c000e49b:	90                   	nop

c000e49c <EnvVarContainer::deleteEnv(char const*)>:
c000e49c:	c3                   	ret    
c000e49d:	90                   	nop

c000e49e <EnvVarContainer::loadFrom(char const*, char const*)>:
c000e49e:	55                   	push   ebp
c000e49f:	57                   	push   edi
c000e4a0:	56                   	push   esi
c000e4a1:	53                   	push   ebx
c000e4a2:	81 ec 38 01 00 00    	sub    esp,0x138
c000e4a8:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000e4af:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000e4b6:	68 14 01 00 00       	push   0x114
c000e4bb:	e8 9b 17 00 00       	call   c000fc5b <malloc>
c000e4c0:	83 c4 0c             	add    esp,0xc
c000e4c3:	89 c3                	mov    ebx,eax
c000e4c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e4c8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000e4cf:	50                   	push   eax
c000e4d0:	e8 5d 9c ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000e4d5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e4d8:	e8 37 9f ff ff       	call   c0008414 <File::exists()>
c000e4dd:	83 c4 10             	add    esp,0x10
c000e4e0:	84 c0                	test   al,al
c000e4e2:	75 31                	jne    c000e515 <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000e4e4:	50                   	push   eax
c000e4e5:	50                   	push   eax
c000e4e6:	6a 12                	push   0x12
c000e4e8:	53                   	push   ebx
c000e4e9:	e8 62 9c ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000e4ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e4f0:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000e4f3:	89 34 24             	mov    DWORD PTR [esp],esi
c000e4f6:	e8 75 20 ff ff       	call   c0000570 <strlen>
c000e4fb:	5a                   	pop    edx
c000e4fc:	31 d2                	xor    edx,edx
c000e4fe:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e502:	51                   	push   ecx
c000e503:	56                   	push   esi
c000e504:	52                   	push   edx
c000e505:	50                   	push   eax
c000e506:	53                   	push   ebx
c000e507:	ff d7                	call   edi
c000e509:	83 c4 14             	add    esp,0x14
c000e50c:	53                   	push   ebx
c000e50d:	e8 9c 9c ff ff       	call   c00081ae <File::close()>
c000e512:	83 c4 10             	add    esp,0x10
c000e515:	56                   	push   esi
c000e516:	31 f6                	xor    esi,esi
c000e518:	68 00 01 00 00       	push   0x100
c000e51d:	6a 00                	push   0x0
c000e51f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e523:	50                   	push   eax
c000e524:	e8 c7 1f ff ff       	call   c00004f0 <memset>
c000e529:	5f                   	pop    edi
c000e52a:	58                   	pop    eax
c000e52b:	6a 01                	push   0x1
c000e52d:	53                   	push   ebx
c000e52e:	e8 1d 9c ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000e533:	83 c4 10             	add    esp,0x10
c000e536:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e53e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000e546:	83 ec 0c             	sub    esp,0xc
c000e549:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e54b:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000e54f:	51                   	push   ecx
c000e550:	8d 54 24 23          	lea    edx,[esp+0x23]
c000e554:	52                   	push   edx
c000e555:	6a 00                	push   0x0
c000e557:	6a 01                	push   0x1
c000e559:	53                   	push   ebx
c000e55a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000e55d:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000e562:	83 c4 20             	add    esp,0x20
c000e565:	89 c2                	mov    edx,eax
c000e567:	85 c0                	test   eax,eax
c000e569:	0f 84 36 01 00 00    	je     c000e6a5 <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000e56f:	83 f8 0d             	cmp    eax,0xd
c000e572:	0f 84 22 01 00 00    	je     c000e69a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e578:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000e57d:	0f 84 f0 00 00 00    	je     c000e673 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000e583:	83 f8 0a             	cmp    eax,0xa
c000e586:	74 13                	je     c000e59b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e588:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e58d:	74 0c                	je     c000e59b <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000e58f:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e595:	0f 8e f6 00 00 00    	jle    c000e691 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000e59b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e59f:	83 ec 0c             	sub    esp,0xc
c000e5a2:	8d 78 01             	lea    edi,[eax+0x1]
c000e5a5:	57                   	push   edi
c000e5a6:	e8 b0 16 00 00       	call   c000fc5b <malloc>
c000e5ab:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000e5af:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e5b3:	8d 56 04             	lea    edx,[esi+0x4]
c000e5b6:	89 14 24             	mov    DWORD PTR [esp],edx
c000e5b9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e5bd:	e8 99 16 00 00       	call   c000fc5b <malloc>
c000e5c2:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e5c6:	83 c4 0c             	add    esp,0xc
c000e5c9:	57                   	push   edi
c000e5ca:	6a 00                	push   0x0
c000e5cc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e5d0:	e8 1b 1f ff ff       	call   c00004f0 <memset>
c000e5d5:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e5d9:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000e5dd:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000e5e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5e3:	83 c4 0c             	add    esp,0xc
c000e5e6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e5ea:	52                   	push   edx
c000e5eb:	6a 00                	push   0x0
c000e5ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e5f1:	e8 fa 1e ff ff       	call   c00004f0 <memset>
c000e5f6:	8d 74 24 30          	lea    esi,[esp+0x30]
c000e5fa:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000e5fe:	89 34 24             	mov    DWORD PTR [esp],esi
c000e601:	e8 6a 1f ff ff       	call   c0000570 <strlen>
c000e606:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000e60a:	89 c1                	mov    ecx,eax
c000e60c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e60e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e611:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000e614:	40                   	inc    eax
c000e615:	83 c4 10             	add    esp,0x10
c000e618:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000e61b:	85 d2                	test   edx,edx
c000e61d:	75 0c                	jne    c000e62b <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000e61f:	83 ec 0c             	sub    esp,0xc
c000e622:	6a 08                	push   0x8
c000e624:	e8 32 16 00 00       	call   c000fc5b <malloc>
c000e629:	eb 0c                	jmp    c000e637 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000e62b:	c1 e0 03             	shl    eax,0x3
c000e62e:	51                   	push   ecx
c000e62f:	51                   	push   ecx
c000e630:	50                   	push   eax
c000e631:	52                   	push   edx
c000e632:	e8 10 16 00 00       	call   c000fc47 <realloc>
c000e637:	83 c4 10             	add    esp,0x10
c000e63a:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000e63d:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000e640:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000e643:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e647:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000e64b:	b9 08 00 00 00       	mov    ecx,0x8
c000e650:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e652:	31 f6                	xor    esi,esi
c000e654:	50                   	push   eax
c000e655:	68 00 01 00 00       	push   0x100
c000e65a:	6a 00                	push   0x0
c000e65c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000e660:	50                   	push   eax
c000e661:	e8 8a 1e ff ff       	call   c00004f0 <memset>
c000e666:	83 c4 10             	add    esp,0x10
c000e669:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e671:	eb 27                	jmp    c000e69a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e673:	83 f8 3d             	cmp    eax,0x3d
c000e676:	74 1e                	je     c000e696 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000e678:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000e67e:	7f 07                	jg     c000e687 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000e680:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000e684:	46                   	inc    esi
c000e685:	eb 13                	jmp    c000e69a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e687:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000e68f:	eb 09                	jmp    c000e69a <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000e691:	83 f8 3d             	cmp    eax,0x3d
c000e694:	75 ea                	jne    c000e680 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000e696:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000e69a:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000e69f:	0f 85 99 fe ff ff    	jne    c000e53e <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000e6a5:	83 ec 0c             	sub    esp,0xc
c000e6a8:	53                   	push   ebx
c000e6a9:	e8 00 9b ff ff       	call   c00081ae <File::close()>
c000e6ae:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e6b0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e6b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e6b6:	81 c4 3c 01 00 00    	add    esp,0x13c
c000e6bc:	5b                   	pop    ebx
c000e6bd:	5e                   	pop    esi
c000e6be:	5f                   	pop    edi
c000e6bf:	5d                   	pop    ebp
c000e6c0:	c3                   	ret    
c000e6c1:	90                   	nop

c000e6c2 <EnvVarContainer::__loadSystem()>:
c000e6c2:	83 ec 10             	sub    esp,0x10
c000e6c5:	68 a0 60 02 c0       	push   0xc00260a0
c000e6ca:	68 74 3a 02 c0       	push   0xc0023a74
c000e6cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e6d3:	e8 c6 fd ff ff       	call   c000e49e <EnvVarContainer::loadFrom(char const*, char const*)>
c000e6d8:	83 c4 1c             	add    esp,0x1c
c000e6db:	c3                   	ret    

c000e6dc <EnvVarContainer::__loadUser()>:
c000e6dc:	c3                   	ret    
c000e6dd:	90                   	nop

c000e6de <EnvVarContainer::EnvVarContainer(Process*)>:
c000e6de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6e2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e6e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e6f0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e6f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e6f7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000e6fe:	90                   	nop
c000e6ff:	c3                   	ret    

c000e700 <EnvVarContainer::~EnvVarContainer()>:
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e707:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e70a:	85 c0                	test   eax,eax
c000e70c:	74 1d                	je     c000e72b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e70e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e712:	8b 00                	mov    eax,DWORD PTR [eax]
c000e714:	85 c0                	test   eax,eax
c000e716:	74 13                	je     c000e72b <EnvVarContainer::~EnvVarContainer()+0x2b>
c000e718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e71c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e71f:	83 ec 0c             	sub    esp,0xc
c000e722:	50                   	push   eax
c000e723:	e8 43 15 00 00       	call   c000fc6b <free>
c000e728:	83 c4 10             	add    esp,0x10
c000e72b:	90                   	nop
c000e72c:	83 c4 0c             	add    esp,0xc
c000e72f:	c3                   	ret    

c000e730 <KeGetEnv(Process*, char const*)>:
c000e730:	53                   	push   ebx
c000e731:	83 ec 08             	sub    esp,0x8
c000e734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e738:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000e73c:	39 05 58 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea58,eax
c000e742:	74 04                	je     c000e748 <KeGetEnv(Process*, char const*)+0x18>
c000e744:	85 c0                	test   eax,eax
c000e746:	75 0b                	jne    c000e753 <KeGetEnv(Process*, char const*)+0x23>
c000e748:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e74d:	85 c0                	test   eax,eax
c000e74f:	75 19                	jne    c000e76a <KeGetEnv(Process*, char const*)+0x3a>
c000e751:	eb 27                	jmp    c000e77a <KeGetEnv(Process*, char const*)+0x4a>
c000e753:	52                   	push   edx
c000e754:	52                   	push   edx
c000e755:	53                   	push   ebx
c000e756:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000e75c:	e8 3b fc ff ff       	call   c000e39c <EnvVarContainer::getEnv(char const*)>
c000e761:	83 c4 10             	add    esp,0x10
c000e764:	85 c0                	test   eax,eax
c000e766:	75 28                	jne    c000e790 <KeGetEnv(Process*, char const*)+0x60>
c000e768:	eb de                	jmp    c000e748 <KeGetEnv(Process*, char const*)+0x18>
c000e76a:	52                   	push   edx
c000e76b:	52                   	push   edx
c000e76c:	53                   	push   ebx
c000e76d:	50                   	push   eax
c000e76e:	e8 29 fc ff ff       	call   c000e39c <EnvVarContainer::getEnv(char const*)>
c000e773:	83 c4 10             	add    esp,0x10
c000e776:	85 c0                	test   eax,eax
c000e778:	75 16                	jne    c000e790 <KeGetEnv(Process*, char const*)+0x60>
c000e77a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000e77e:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e783:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e787:	83 c4 08             	add    esp,0x8
c000e78a:	5b                   	pop    ebx
c000e78b:	e9 0c fc ff ff       	jmp    c000e39c <EnvVarContainer::getEnv(char const*)>
c000e790:	83 c4 08             	add    esp,0x8
c000e793:	5b                   	pop    ebx
c000e794:	c3                   	ret    

c000e795 <KeSetEnvSystem(char const*, char const*)>:
c000e795:	83 ec 10             	sub    esp,0x10
c000e798:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e79c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7a0:	ff 35 dc c0 02 c0    	push   DWORD PTR ds:0xc002c0dc
c000e7a6:	e8 2f fc ff ff       	call   c000e3da <EnvVarContainer::setEnv(char const*, char const*)>
c000e7ab:	83 c4 1c             	add    esp,0x1c
c000e7ae:	c3                   	ret    

c000e7af <KeSetEnvUser(char const*, char const*)>:
c000e7af:	a1 d8 c0 02 c0       	mov    eax,ds:0xc002c0d8
c000e7b4:	85 c0                	test   eax,eax
c000e7b6:	74 15                	je     c000e7cd <KeSetEnvUser(char const*, char const*)+0x1e>
c000e7b8:	83 ec 10             	sub    esp,0x10
c000e7bb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7bf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e7c3:	50                   	push   eax
c000e7c4:	e8 11 fc ff ff       	call   c000e3da <EnvVarContainer::setEnv(char const*, char const*)>
c000e7c9:	83 c4 1c             	add    esp,0x1c
c000e7cc:	c3                   	ret    
c000e7cd:	c3                   	ret    

c000e7ce <KeSetEnvProcess(Process*, char const*, char const*)>:
c000e7ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e7d2:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000e7d8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e7dc:	e9 f9 fb ff ff       	jmp    c000e3da <EnvVarContainer::setEnv(char const*, char const*)>

c000e7e1 <KeDeleteEnvSystem(char const*)>:
c000e7e1:	c3                   	ret    

c000e7e2 <KeDeleteEnvUser(char const*)>:
c000e7e2:	c3                   	ret    

c000e7e3 <KeDeleteEnvProcess(Process*, char const*)>:
c000e7e3:	c3                   	ret    

c000e7e4 <KeNewProcessEnv(Process*)>:
c000e7e4:	83 ec 28             	sub    esp,0x28
c000e7e7:	6a 0c                	push   0xc
c000e7e9:	e8 6d 14 00 00       	call   c000fc5b <malloc>
c000e7ee:	5a                   	pop    edx
c000e7ef:	59                   	pop    ecx
c000e7f0:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e7f4:	50                   	push   eax
c000e7f5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e7f9:	e8 e0 fe ff ff       	call   c000e6de <EnvVarContainer::EnvVarContainer(Process*)>
c000e7fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e802:	83 c4 2c             	add    esp,0x2c
c000e805:	c3                   	ret    

c000e806 <KeCopyProcessEnv(Process*, Process*)>:
c000e806:	57                   	push   edi
c000e807:	56                   	push   esi
c000e808:	53                   	push   ebx
c000e809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80d:	83 ec 0c             	sub    esp,0xc
c000e810:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000e816:	6a 0c                	push   0xc
c000e818:	e8 3e 14 00 00       	call   c000fc5b <malloc>
c000e81d:	89 c3                	mov    ebx,eax
c000e81f:	58                   	pop    eax
c000e820:	5a                   	pop    edx
c000e821:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e825:	53                   	push   ebx
c000e826:	e8 b3 fe ff ff       	call   c000e6de <EnvVarContainer::EnvVarContainer(Process*)>
c000e82b:	8b 07                	mov    eax,DWORD PTR [edi]
c000e82d:	89 03                	mov    DWORD PTR [ebx],eax
c000e82f:	c1 e0 03             	shl    eax,0x3
c000e832:	89 04 24             	mov    DWORD PTR [esp],eax
c000e835:	e8 21 14 00 00       	call   c000fc5b <malloc>
c000e83a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000e83d:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000e83f:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000e842:	c1 e1 03             	shl    ecx,0x3
c000e845:	89 c7                	mov    edi,eax
c000e847:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e849:	83 c4 10             	add    esp,0x10
c000e84c:	89 d8                	mov    eax,ebx
c000e84e:	5b                   	pop    ebx
c000e84f:	5e                   	pop    esi
c000e850:	5f                   	pop    edi
c000e851:	c3                   	ret    

c000e852 <KeLoadSystemEnv()>:
c000e852:	53                   	push   ebx
c000e853:	83 ec 14             	sub    esp,0x14
c000e856:	6a 0c                	push   0xc
c000e858:	e8 fe 13 00 00       	call   c000fc5b <malloc>
c000e85d:	89 c3                	mov    ebx,eax
c000e85f:	58                   	pop    eax
c000e860:	5a                   	pop    edx
c000e861:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e867:	53                   	push   ebx
c000e868:	e8 71 fe ff ff       	call   c000e6de <EnvVarContainer::EnvVarContainer(Process*)>
c000e86d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e870:	89 1d dc c0 02 c0    	mov    DWORD PTR ds:0xc002c0dc,ebx
c000e876:	e8 47 fe ff ff       	call   c000e6c2 <EnvVarContainer::__loadSystem()>
c000e87b:	83 c4 18             	add    esp,0x18
c000e87e:	5b                   	pop    ebx
c000e87f:	c3                   	ret    

c000e880 <KeLoadUserEnv()>:
c000e880:	53                   	push   ebx
c000e881:	83 ec 14             	sub    esp,0x14
c000e884:	6a 0c                	push   0xc
c000e886:	e8 d0 13 00 00       	call   c000fc5b <malloc>
c000e88b:	89 c3                	mov    ebx,eax
c000e88d:	58                   	pop    eax
c000e88e:	5a                   	pop    edx
c000e88f:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c000e895:	53                   	push   ebx
c000e896:	e8 43 fe ff ff       	call   c000e6de <EnvVarContainer::EnvVarContainer(Process*)>
c000e89b:	89 1d d8 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d8,ebx
c000e8a1:	83 c4 18             	add    esp,0x18
c000e8a4:	5b                   	pop    ebx
c000e8a5:	c3                   	ret    

c000e8a6 <KeFlushEnv()>:
c000e8a6:	c3                   	ret    

c000e8a7 <KeGetProcessTotalEnvCount(Process*)>:
c000e8a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e8ab:	8b 15 d8 c0 02 c0    	mov    edx,DWORD PTR ds:0xc002c0d8
c000e8b1:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000e8b7:	a1 dc c0 02 c0       	mov    eax,ds:0xc002c0dc
c000e8bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e8be:	03 01                	add    eax,DWORD PTR [ecx]
c000e8c0:	85 d2                	test   edx,edx
c000e8c2:	74 02                	je     c000e8c6 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000e8c4:	03 02                	add    eax,DWORD PTR [edx]
c000e8c6:	c3                   	ret    

c000e8c7 <KeGetProcessEnvPair(Process*, int)>:
c000e8c7:	57                   	push   edi
c000e8c8:	56                   	push   esi
c000e8c9:	8b 35 d8 c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0d8
c000e8cf:	53                   	push   ebx
c000e8d0:	85 f6                	test   esi,esi
c000e8d2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e8d6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e8da:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000e8e0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e8e4:	8b 01                	mov    eax,DWORD PTR [ecx]
c000e8e6:	75 16                	jne    c000e8fe <KeGetProcessEnvPair(Process*, int)+0x37>
c000e8e8:	39 c2                	cmp    edx,eax
c000e8ea:	7c 16                	jl     c000e902 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e8ec:	8b 0d dc c0 02 c0    	mov    ecx,DWORD PTR ds:0xc002c0dc
c000e8f2:	8b 31                	mov    esi,DWORD PTR [ecx]
c000e8f4:	01 c6                	add    esi,eax
c000e8f6:	39 d6                	cmp    esi,edx
c000e8f8:	7e 3c                	jle    c000e936 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e8fa:	29 c2                	sub    edx,eax
c000e8fc:	eb 04                	jmp    c000e902 <KeGetProcessEnvPair(Process*, int)+0x3b>
c000e8fe:	39 c2                	cmp    edx,eax
c000e900:	7d 05                	jge    c000e907 <KeGetProcessEnvPair(Process*, int)+0x40>
c000e902:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000e905:	eb 20                	jmp    c000e927 <KeGetProcessEnvPair(Process*, int)+0x60>
c000e907:	8b 3e                	mov    edi,DWORD PTR [esi]
c000e909:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000e90c:	39 d1                	cmp    ecx,edx
c000e90e:	7e 04                	jle    c000e914 <KeGetProcessEnvPair(Process*, int)+0x4d>
c000e910:	29 c2                	sub    edx,eax
c000e912:	eb 10                	jmp    c000e924 <KeGetProcessEnvPair(Process*, int)+0x5d>
c000e914:	8b 35 dc c0 02 c0    	mov    esi,DWORD PTR ds:0xc002c0dc
c000e91a:	03 0e                	add    ecx,DWORD PTR [esi]
c000e91c:	39 d1                	cmp    ecx,edx
c000e91e:	7e 16                	jle    c000e936 <KeGetProcessEnvPair(Process*, int)+0x6f>
c000e920:	29 c2                	sub    edx,eax
c000e922:	29 fa                	sub    edx,edi
c000e924:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e927:	8d 14 d0             	lea    edx,[eax+edx*8]
c000e92a:	8b 02                	mov    eax,DWORD PTR [edx]
c000e92c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e92f:	89 03                	mov    DWORD PTR [ebx],eax
c000e931:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000e934:	eb 1d                	jmp    c000e953 <KeGetProcessEnvPair(Process*, int)+0x8c>
c000e936:	83 ec 0c             	sub    esp,0xc
c000e939:	68 96 3a 02 c0       	push   0xc0023a96
c000e93e:	e8 5f 16 00 00       	call   c000ffa2 <KePanic(char const*)>
c000e943:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000e949:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000e950:	83 c4 10             	add    esp,0x10
c000e953:	89 d8                	mov    eax,ebx
c000e955:	5b                   	pop    ebx
c000e956:	5e                   	pop    esi
c000e957:	5f                   	pop    edi
c000e958:	c2 04 00             	ret    0x4
c000e95b:	90                   	nop

c000e95c <KeSetupInterrupts()>:
c000e95c:	83 ec 10             	sub    esp,0x10
c000e95f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e967:	90                   	nop
c000e968:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e970:	7f 5a                	jg     c000e9cc <KeSetupInterrupts()+0x70>
c000e972:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e97a:	66 90                	xchg   ax,ax
c000e97c:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e981:	7f 41                	jg     c000e9c4 <KeSetupInterrupts()+0x68>
c000e983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e987:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e98e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e992:	01 d0                	add    eax,edx
c000e994:	c7 04 85 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd2f20],0x0
c000e99f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e9a3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e9aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ae:	01 d0                	add    eax,edx
c000e9b0:	c7 04 85 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd3f20],0x0
c000e9bb:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e9c0:	eb ba                	jmp    c000e97c <KeSetupInterrupts()+0x20>
c000e9c2:	66 90                	xchg   ax,ax
c000e9c4:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e9c9:	eb 9d                	jmp    c000e968 <KeSetupInterrupts()+0xc>
c000e9cb:	90                   	nop
c000e9cc:	90                   	nop
c000e9cd:	83 c4 10             	add    esp,0x10
c000e9d0:	c3                   	ret    
c000e9d1:	8d 76 00             	lea    esi,[esi+0x0]

c000e9d4 <int_handler>:
c000e9d4:	83 ec 2c             	sub    esp,0x2c
c000e9d7:	90                   	nop
c000e9d8:	a0 28 e1 02 c0       	mov    al,ds:0xc002e128
c000e9dd:	0f b6 c0             	movzx  eax,al
c000e9e0:	85 c0                	test   eax,eax
c000e9e2:	74 04                	je     c000e9e8 <int_handler+0x14>
c000e9e4:	fa                   	cli    
c000e9e5:	f4                   	hlt    
c000e9e6:	eb f0                	jmp    c000e9d8 <int_handler+0x4>
c000e9e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9ec:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e9ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e9f3:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e9f8:	7e 1a                	jle    c000ea14 <int_handler+0x40>
c000e9fa:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e9ff:	7f 13                	jg     c000ea14 <int_handler+0x40>
c000ea01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea05:	83 e8 20             	sub    eax,0x20
c000ea08:	83 ec 0c             	sub    esp,0xc
c000ea0b:	50                   	push   eax
c000ea0c:	e8 2f b4 00 00       	call   c0019e40 <HalEndOfInterrupt(int)>
c000ea11:	83 c4 10             	add    esp,0x10
c000ea14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea18:	c1 e0 04             	shl    eax,0x4
c000ea1b:	05 e0 d0 02 c0       	add    eax,0xc002d0e0
c000ea20:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ea24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ea28:	c1 e0 04             	shl    eax,0x4
c000ea2b:	05 e0 c0 02 c0       	add    eax,0xc002c0e0
c000ea30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ea34:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000ea3c:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000ea41:	0f 8f ad 00 00 00    	jg     c000eaf4 <int_handler+0x120>
c000ea47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea4b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea52:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea56:	01 d0                	add    eax,edx
c000ea58:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea5a:	85 c0                	test   eax,eax
c000ea5c:	0f 84 86 00 00 00    	je     c000eae8 <int_handler+0x114>
c000ea62:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ea66:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000ea69:	83 f8 60             	cmp    eax,0x60
c000ea6c:	75 46                	jne    c000eab4 <int_handler+0xe0>
c000ea6e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ea72:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000ea79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ea7d:	01 d0                	add    eax,edx
c000ea7f:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea81:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ea85:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ea8c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ea90:	01 ca                	add    edx,ecx
c000ea92:	8b 12                	mov    edx,DWORD PTR [edx]
c000ea94:	83 ec 08             	sub    esp,0x8
c000ea97:	52                   	push   edx
c000ea98:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ea9c:	ff d0                	call   eax
c000ea9e:	83 c4 10             	add    esp,0x10
c000eaa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eaa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000eaa9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eaad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eab1:	eb 4d                	jmp    c000eb00 <int_handler+0x12c>
c000eab3:	90                   	nop
c000eab4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000eab8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000eabf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eac3:	01 d0                	add    eax,edx
c000eac5:	8b 00                	mov    eax,DWORD PTR [eax]
c000eac7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000eacb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000ead2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ead6:	01 ca                	add    edx,ecx
c000ead8:	8b 12                	mov    edx,DWORD PTR [edx]
c000eada:	83 ec 08             	sub    esp,0x8
c000eadd:	52                   	push   edx
c000eade:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000eae2:	ff d0                	call   eax
c000eae4:	83 c4 10             	add    esp,0x10
c000eae7:	90                   	nop
c000eae8:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000eaed:	e9 4a ff ff ff       	jmp    c000ea3c <int_handler+0x68>
c000eaf2:	66 90                	xchg   ax,ax
c000eaf4:	b8 00 00 00 00       	mov    eax,0x0
c000eaf9:	ba 00 00 00 00       	mov    edx,0x0
c000eafe:	66 90                	xchg   ax,ax
c000eb00:	83 c4 2c             	add    esp,0x2c
c000eb03:	c3                   	ret    

c000eb04 <KeDisplayProgramFault(char const*)>:
c000eb04:	83 ec 0c             	sub    esp,0xc
c000eb07:	83 ec 0c             	sub    esp,0xc
c000eb0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb0e:	e8 51 84 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000eb13:	83 c4 10             	add    esp,0x10
c000eb16:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb1b:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb1d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eb20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000eb26:	85 c0                	test   eax,eax
c000eb28:	74 22                	je     c000eb4c <KeDisplayProgramFault(char const*)+0x48>
c000eb2a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000eb2f:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb31:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000eb34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000eb3a:	6a 04                	push   0x4
c000eb3c:	6a 0f                	push   0xf
c000eb3e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000eb42:	50                   	push   eax
c000eb43:	e8 86 3c 00 00       	call   c00127ce <VgaText::puts(char const*, VgaColour, VgaColour)>
c000eb48:	83 c4 10             	add    esp,0x10
c000eb4b:	90                   	nop
c000eb4c:	90                   	nop
c000eb4d:	83 c4 0c             	add    esp,0xc
c000eb50:	c3                   	ret    
c000eb51:	8d 76 00             	lea    esi,[esi+0x0]

c000eb54 <KeGeneralProtectionFault(void*, void*)>:
c000eb54:	83 ec 0c             	sub    esp,0xc
c000eb57:	83 ec 08             	sub    esp,0x8
c000eb5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb62:	e8 7b a8 00 00       	call   c00193e2 <HalHandleGeneralProtectionFault(void*, void*)>
c000eb67:	83 c4 10             	add    esp,0x10
c000eb6a:	0f b6 c0             	movzx  eax,al
c000eb6d:	85 c0                	test   eax,eax
c000eb6f:	75 2f                	jne    c000eba0 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000eb71:	83 ec 0c             	sub    esp,0xc
c000eb74:	68 b0 3a 02 c0       	push   0xc0023ab0
c000eb79:	e8 86 ff ff ff       	call   c000eb04 <KeDisplayProgramFault(char const*)>
c000eb7e:	83 c4 10             	add    esp,0x10
c000eb81:	83 ec 0c             	sub    esp,0xc
c000eb84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000eb88:	e8 ef a9 00 00       	call   c001957c <HalDisplayDebugInfo(void*)>
c000eb8d:	83 c4 10             	add    esp,0x10
c000eb90:	83 ec 0c             	sub    esp,0xc
c000eb93:	6a 00                	push   0x0
c000eb95:	e8 e6 88 00 00       	call   c0017480 <Thr::terminateFromIRQ(int)>
c000eb9a:	83 c4 10             	add    esp,0x10
c000eb9d:	eb 05                	jmp    c000eba4 <KeGeneralProtectionFault(void*, void*)+0x50>
c000eb9f:	90                   	nop
c000eba0:	90                   	nop
c000eba1:	8d 76 00             	lea    esi,[esi+0x0]
c000eba4:	83 c4 0c             	add    esp,0xc
c000eba7:	c3                   	ret    

c000eba8 <KePageFault(void*, void*)>:
c000eba8:	83 ec 0c             	sub    esp,0xc
c000ebab:	83 ec 0c             	sub    esp,0xc
c000ebae:	68 c9 3a 02 c0       	push   0xc0023ac9
c000ebb3:	e8 ac 83 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ebb8:	83 c4 10             	add    esp,0x10
c000ebbb:	83 ec 08             	sub    esp,0x8
c000ebbe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebc6:	e8 c2 a8 00 00       	call   c001948d <HalHandlePageFault(void*, void*)>
c000ebcb:	83 c4 10             	add    esp,0x10
c000ebce:	0f b6 c0             	movzx  eax,al
c000ebd1:	85 c0                	test   eax,eax
c000ebd3:	75 2f                	jne    c000ec04 <KePageFault(void*, void*)+0x5c>
c000ebd5:	83 ec 0c             	sub    esp,0xc
c000ebd8:	68 d6 3a 02 c0       	push   0xc0023ad6
c000ebdd:	e8 22 ff ff ff       	call   c000eb04 <KeDisplayProgramFault(char const*)>
c000ebe2:	83 c4 10             	add    esp,0x10
c000ebe5:	83 ec 0c             	sub    esp,0xc
c000ebe8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ebec:	e8 8b a9 00 00       	call   c001957c <HalDisplayDebugInfo(void*)>
c000ebf1:	83 c4 10             	add    esp,0x10
c000ebf4:	83 ec 0c             	sub    esp,0xc
c000ebf7:	6a 00                	push   0x0
c000ebf9:	e8 82 88 00 00       	call   c0017480 <Thr::terminateFromIRQ(int)>
c000ebfe:	83 c4 10             	add    esp,0x10
c000ec01:	eb 05                	jmp    c000ec08 <KePageFault(void*, void*)+0x60>
c000ec03:	90                   	nop
c000ec04:	90                   	nop
c000ec05:	8d 76 00             	lea    esi,[esi+0x0]
c000ec08:	83 c4 0c             	add    esp,0xc
c000ec0b:	c3                   	ret    

c000ec0c <KeNonMaskableInterrupt(void*, void*)>:
c000ec0c:	83 ec 0c             	sub    esp,0xc
c000ec0f:	e8 f6 ac 00 00       	call   c001990a <HalReceivedNMI()>
c000ec14:	90                   	nop
c000ec15:	83 c4 0c             	add    esp,0xc
c000ec18:	c3                   	ret    
c000ec19:	8d 76 00             	lea    esi,[esi+0x0]

c000ec1c <KeOtherFault(void*, void*)>:
c000ec1c:	83 ec 0c             	sub    esp,0xc
c000ec1f:	83 ec 0c             	sub    esp,0xc
c000ec22:	68 e4 3a 02 c0       	push   0xc0023ae4
c000ec27:	e8 d8 fe ff ff       	call   c000eb04 <KeDisplayProgramFault(char const*)>
c000ec2c:	83 c4 10             	add    esp,0x10
c000ec2f:	83 ec 0c             	sub    esp,0xc
c000ec32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ec36:	e8 41 a9 00 00       	call   c001957c <HalDisplayDebugInfo(void*)>
c000ec3b:	83 c4 10             	add    esp,0x10
c000ec3e:	83 ec 0c             	sub    esp,0xc
c000ec41:	6a 00                	push   0x0
c000ec43:	e8 38 88 00 00       	call   c0017480 <Thr::terminateFromIRQ(int)>
c000ec48:	83 c4 10             	add    esp,0x10
c000ec4b:	90                   	nop
c000ec4c:	83 c4 0c             	add    esp,0xc
c000ec4f:	c3                   	ret    

c000ec50 <KeOpcodeFault(void*, void*)>:
c000ec50:	55                   	push   ebp
c000ec51:	89 e5                	mov    ebp,esp
c000ec53:	83 ec 08             	sub    esp,0x8
c000ec56:	83 ec 08             	sub    esp,0x8
c000ec59:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000ec5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ec5f:	e8 d6 a8 00 00       	call   c001953a <HalHandleOpcodeFault(void*, void*)>
c000ec64:	83 c4 10             	add    esp,0x10
c000ec67:	0f b6 c0             	movzx  eax,al
c000ec6a:	85 c0                	test   eax,eax
c000ec6c:	75 2e                	jne    c000ec9c <KeOpcodeFault(void*, void*)+0x4c>
c000ec6e:	83 ec 0c             	sub    esp,0xc
c000ec71:	68 0c 3b 02 c0       	push   0xc0023b0c
c000ec76:	e8 89 fe ff ff       	call   c000eb04 <KeDisplayProgramFault(char const*)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	83 ec 0c             	sub    esp,0xc
c000ec81:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000ec84:	e8 f3 a8 00 00       	call   c001957c <HalDisplayDebugInfo(void*)>
c000ec89:	83 c4 10             	add    esp,0x10
c000ec8c:	83 ec 0c             	sub    esp,0xc
c000ec8f:	6a 00                	push   0x0
c000ec91:	e8 ea 87 00 00       	call   c0017480 <Thr::terminateFromIRQ(int)>
c000ec96:	83 c4 10             	add    esp,0x10
c000ec99:	eb 05                	jmp    c000eca0 <KeOpcodeFault(void*, void*)+0x50>
c000ec9b:	90                   	nop
c000ec9c:	90                   	nop
c000ec9d:	8d 76 00             	lea    esi,[esi+0x0]
c000eca0:	c9                   	leave  
c000eca1:	c3                   	ret    
c000eca2:	66 90                	xchg   ax,ax

c000eca4 <KeDoubleFault(void*, void*)>:
c000eca4:	55                   	push   ebp
c000eca5:	89 e5                	mov    ebp,esp
c000eca7:	83 ec 08             	sub    esp,0x8
c000ecaa:	83 ec 0c             	sub    esp,0xc
c000ecad:	68 19 3b 02 c0       	push   0xc0023b19
c000ecb2:	e8 eb 12 00 00       	call   c000ffa2 <KePanic(char const*)>
c000ecb7:	83 c4 10             	add    esp,0x10
c000ecba:	90                   	nop
c000ecbb:	c9                   	leave  
c000ecbc:	c3                   	ret    
c000ecbd:	90                   	nop

c000ecbe <GDTEntry::setBase(unsigned int)>:
c000ecbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ecc2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ecc6:	89 c1                	mov    ecx,eax
c000ecc8:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000eccc:	c1 e9 10             	shr    ecx,0x10
c000eccf:	c1 e8 18             	shr    eax,0x18
c000ecd2:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000ecd5:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000ecd8:	c3                   	ret    
c000ecd9:	90                   	nop

c000ecda <GDTEntry::setLimit(unsigned int)>:
c000ecda:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ecde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ece2:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000ece5:	66 89 01             	mov    WORD PTR [ecx],ax
c000ece8:	83 e2 f0             	and    edx,0xfffffff0
c000eceb:	c1 e8 10             	shr    eax,0x10
c000ecee:	83 e0 0f             	and    eax,0xf
c000ecf1:	09 d0                	or     eax,edx
c000ecf3:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000ecf6:	c3                   	ret    
c000ecf7:	90                   	nop

c000ecf8 <GDT::GDT()>:
c000ecf8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ecfc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed06:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000ed0c:	90                   	nop
c000ed0d:	c3                   	ret    

c000ed0e <GDT::addEntry(GDTEntry)>:
c000ed0e:	53                   	push   ebx
c000ed0f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ed13:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ed17:	8b 02                	mov    eax,DWORD PTR [edx]
c000ed19:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ed1d:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000ed21:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000ed25:	8d 48 01             	lea    ecx,[eax+0x1]
c000ed28:	c1 e0 03             	shl    eax,0x3
c000ed2b:	89 0a                	mov    DWORD PTR [edx],ecx
c000ed2d:	5b                   	pop    ebx
c000ed2e:	c3                   	ret    
c000ed2f:	90                   	nop

c000ed30 <GDT::getNumberOfEntries()>:
c000ed30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed34:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed36:	c3                   	ret    
c000ed37:	90                   	nop

c000ed38 <GDT::flush()>:
c000ed38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ed3c:	8b 10                	mov    edx,DWORD PTR [eax]
c000ed3e:	83 c0 04             	add    eax,0x4
c000ed41:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000ed48:	a3 e2 e0 02 c0       	mov    ds:0xc002e0e2,eax
c000ed4d:	66 89 15 e0 e0 02 c0 	mov    WORD PTR ds:0xc002e0e0,dx
c000ed54:	e9 01 16 ff ff       	jmp    c000035a <loadGDT>
c000ed59:	90                   	nop

c000ed5a <GDT::setup()>:
c000ed5a:	57                   	push   edi
c000ed5b:	56                   	push   esi
c000ed5c:	53                   	push   ebx
c000ed5d:	83 ec 30             	sub    esp,0x30
c000ed60:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ed64:	6a 00                	push   0x0
c000ed66:	8d 74 24 14          	lea    esi,[esp+0x14]
c000ed6a:	56                   	push   esi
c000ed6b:	e8 4e ff ff ff       	call   c000ecbe <GDTEntry::setBase(unsigned int)>
c000ed70:	6a 00                	push   0x0
c000ed72:	56                   	push   esi
c000ed73:	e8 62 ff ff ff       	call   c000ecda <GDTEntry::setLimit(unsigned int)>
c000ed78:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000ed80:	6a 00                	push   0x0
c000ed82:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000ed86:	56                   	push   esi
c000ed87:	e8 32 ff ff ff       	call   c000ecbe <GDTEntry::setBase(unsigned int)>
c000ed8c:	68 ff ff ff 00       	push   0xffffff
c000ed91:	56                   	push   esi
c000ed92:	e8 43 ff ff ff       	call   c000ecda <GDTEntry::setLimit(unsigned int)>
c000ed97:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000ed9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ed9f:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000eda3:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000eda7:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000edac:	0d 00 9a c0 00       	or     eax,0xc09a00
c000edb1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000edb5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000edb9:	89 f8                	mov    eax,edi
c000edbb:	89 fa                	mov    edx,edi
c000edbd:	80 e4 f7             	and    ah,0xf7
c000edc0:	80 ce 60             	or     dh,0x60
c000edc3:	89 c7                	mov    edi,eax
c000edc5:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000edc9:	80 cc 60             	or     ah,0x60
c000edcc:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000edd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000edd4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000edd8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eddc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ede0:	83 c4 20             	add    esp,0x20
c000ede3:	6a 00                	push   0x0
c000ede5:	8d 44 24 24          	lea    eax,[esp+0x24]
c000ede9:	50                   	push   eax
c000edea:	e8 cf fe ff ff       	call   c000ecbe <GDTEntry::setBase(unsigned int)>
c000edef:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000edf3:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000edf7:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000edfb:	83 e0 3f             	and    eax,0x3f
c000edfe:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000ee02:	6a 00                	push   0x0
c000ee04:	8d 44 24 34          	lea    eax,[esp+0x34]
c000ee08:	50                   	push   eax
c000ee09:	e8 b0 fe ff ff       	call   c000ecbe <GDTEntry::setBase(unsigned int)>
c000ee0e:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000ee12:	83 e0 3f             	and    eax,0x3f
c000ee15:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000ee19:	83 c4 0c             	add    esp,0xc
c000ee1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee20:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ee24:	53                   	push   ebx
c000ee25:	e8 e4 fe ff ff       	call   c000ed0e <GDT::addEntry(GDTEntry)>
c000ee2a:	83 c4 0c             	add    esp,0xc
c000ee2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ee35:	53                   	push   ebx
c000ee36:	e8 d3 fe ff ff       	call   c000ed0e <GDT::addEntry(GDTEntry)>
c000ee3b:	83 c4 0c             	add    esp,0xc
c000ee3e:	57                   	push   edi
c000ee3f:	56                   	push   esi
c000ee40:	53                   	push   ebx
c000ee41:	e8 c8 fe ff ff       	call   c000ed0e <GDT::addEntry(GDTEntry)>
c000ee46:	83 c4 0c             	add    esp,0xc
c000ee49:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ee4d:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ee51:	53                   	push   ebx
c000ee52:	e8 b7 fe ff ff       	call   c000ed0e <GDT::addEntry(GDTEntry)>
c000ee57:	83 c4 0c             	add    esp,0xc
c000ee5a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee5e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ee62:	53                   	push   ebx
c000ee63:	e8 a6 fe ff ff       	call   c000ed0e <GDT::addEntry(GDTEntry)>
c000ee68:	83 c4 0c             	add    esp,0xc
c000ee6b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee6f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ee73:	53                   	push   ebx
c000ee74:	e8 95 fe ff ff       	call   c000ed0e <GDT::addEntry(GDTEntry)>
c000ee79:	83 c4 0c             	add    esp,0xc
c000ee7c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee80:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee84:	53                   	push   ebx
c000ee85:	e8 84 fe ff ff       	call   c000ed0e <GDT::addEntry(GDTEntry)>
c000ee8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ee8d:	e8 a6 fe ff ff       	call   c000ed38 <GDT::flush()>
c000ee92:	83 c4 40             	add    esp,0x40
c000ee95:	5b                   	pop    ebx
c000ee96:	5e                   	pop    esi
c000ee97:	5f                   	pop    edi
c000ee98:	c3                   	ret    

c000ee99 <idleFunction(void*)>:
c000ee99:	83 ec 0c             	sub    esp,0xc
c000ee9c:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000eea3:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000eeaa:	75 01                	jne    c000eead <idleFunction(void*)+0x14>
c000eeac:	fb                   	sti    
c000eead:	e8 f3 aa 00 00       	call   c00199a5 <HalSystemIdle()>
c000eeb2:	e8 0f 2d 01 00       	call   c0021bc6 <idleCommon()>
c000eeb7:	eb f4                	jmp    c000eead <idleFunction(void*)+0x14>
c000eeb9:	66 90                	xchg   ax,ax
c000eebb:	90                   	nop

c000eebc <IDTEntry::IDTEntry(bool)>:
c000eebc:	53                   	push   ebx
c000eebd:	83 ec 04             	sub    esp,0x4
c000eec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000eec4:	88 04 24             	mov    BYTE PTR [esp],al
c000eec7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eecb:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000eed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eed5:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000eed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eedd:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eee0:	83 e2 f0             	and    edx,0xfffffff0
c000eee3:	83 ca 0e             	or     edx,0xe
c000eee6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eeed:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000eef0:	83 e2 ef             	and    edx,0xffffffef
c000eef3:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000eef6:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000eefa:	85 c0                	test   eax,eax
c000eefc:	74 06                	je     c000ef04 <IDTEntry::IDTEntry(bool)+0x48>
c000eefe:	b2 03                	mov    dl,0x3
c000ef00:	eb 06                	jmp    c000ef08 <IDTEntry::IDTEntry(bool)+0x4c>
c000ef02:	66 90                	xchg   ax,ax
c000ef04:	b2 00                	mov    dl,0x0
c000ef06:	66 90                	xchg   ax,ax
c000ef08:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef0c:	83 e2 03             	and    edx,0x3
c000ef0f:	89 d3                	mov    ebx,edx
c000ef11:	c1 e3 05             	shl    ebx,0x5
c000ef14:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef17:	83 e2 9f             	and    edx,0xffffff9f
c000ef1a:	88 d1                	mov    cl,dl
c000ef1c:	88 da                	mov    dl,bl
c000ef1e:	09 ca                	or     edx,ecx
c000ef20:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef27:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000ef2a:	83 ca 80             	or     edx,0xffffff80
c000ef2d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000ef30:	90                   	nop
c000ef31:	83 c4 04             	add    esp,0x4
c000ef34:	5b                   	pop    ebx
c000ef35:	c3                   	ret    

c000ef36 <IDTEntry::setOffset(unsigned int)>:
c000ef36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ef3a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef3e:	66 89 02             	mov    WORD PTR [edx],ax
c000ef41:	c1 e8 10             	shr    eax,0x10
c000ef44:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000ef48:	c3                   	ret    
c000ef49:	90                   	nop
c000ef4a:	66 90                	xchg   ax,ax

c000ef4c <IDT::IDT()>:
c000ef4c:	90                   	nop
c000ef4d:	c3                   	ret    

c000ef4e <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000ef4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef52:	83 c0 30             	add    eax,0x30
c000ef55:	c3                   	ret    

c000ef56 <IDT::addEntry(IDTEntry, int)>:
c000ef56:	53                   	push   ebx
c000ef57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ef5b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ef5f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ef63:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ef67:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000ef6a:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000ef6e:	5b                   	pop    ebx
c000ef6f:	c3                   	ret    

c000ef70 <IDT::addEntry(int, void (*)(), bool)>:
c000ef70:	53                   	push   ebx
c000ef71:	83 ec 10             	sub    esp,0x10
c000ef74:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000ef79:	50                   	push   eax
c000ef7a:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000ef7e:	53                   	push   ebx
c000ef7f:	e8 38 ff ff ff       	call   c000eebc <IDTEntry::IDTEntry(bool)>
c000ef84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ef88:	53                   	push   ebx
c000ef89:	e8 a8 ff ff ff       	call   c000ef36 <IDTEntry::setOffset(unsigned int)>
c000ef8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef92:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef96:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ef9a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ef9e:	e8 b3 ff ff ff       	call   c000ef56 <IDT::addEntry(IDTEntry, int)>
c000efa3:	83 c4 30             	add    esp,0x30
c000efa6:	5b                   	pop    ebx
c000efa7:	c3                   	ret    

c000efa8 <IDT::flush()>:
c000efa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efac:	66 c7 05 e8 e0 02 c0 ff 07 	mov    WORD PTR ds:0xc002e0e8,0x7ff
c000efb5:	a3 ea e0 02 c0       	mov    ds:0xc002e0ea,eax
c000efba:	0f 01 1d e8 e0 02 c0 	lidtd  ds:0xc002e0e8
c000efc1:	c3                   	ret    

c000efc2 <IDT::setup()>:
c000efc2:	57                   	push   edi
c000efc3:	56                   	push   esi
c000efc4:	53                   	push   ebx
c000efc5:	83 ec 10             	sub    esp,0x10
c000efc8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000efcc:	6a 00                	push   0x0
c000efce:	68 70 0e 02 c0       	push   0xc0020e70
c000efd3:	6a 00                	push   0x0
c000efd5:	53                   	push   ebx
c000efd6:	e8 95 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000efdb:	6a 00                	push   0x0
c000efdd:	68 80 0e 02 c0       	push   0xc0020e80
c000efe2:	6a 01                	push   0x1
c000efe4:	53                   	push   ebx
c000efe5:	e8 86 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000efea:	83 c4 20             	add    esp,0x20
c000efed:	6a 00                	push   0x0
c000efef:	68 8a 0e 02 c0       	push   0xc0020e8a
c000eff4:	6a 02                	push   0x2
c000eff6:	53                   	push   ebx
c000eff7:	e8 74 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000effc:	6a 00                	push   0x0
c000effe:	68 94 0e 02 c0       	push   0xc0020e94
c000f003:	6a 03                	push   0x3
c000f005:	53                   	push   ebx
c000f006:	e8 65 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f00b:	83 c4 20             	add    esp,0x20
c000f00e:	6a 00                	push   0x0
c000f010:	68 9e 0e 02 c0       	push   0xc0020e9e
c000f015:	6a 04                	push   0x4
c000f017:	53                   	push   ebx
c000f018:	e8 53 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f01d:	6a 00                	push   0x0
c000f01f:	68 a8 0e 02 c0       	push   0xc0020ea8
c000f024:	6a 05                	push   0x5
c000f026:	53                   	push   ebx
c000f027:	e8 44 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f02c:	83 c4 20             	add    esp,0x20
c000f02f:	6a 00                	push   0x0
c000f031:	68 b2 0e 02 c0       	push   0xc0020eb2
c000f036:	6a 06                	push   0x6
c000f038:	53                   	push   ebx
c000f039:	e8 32 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f03e:	6a 00                	push   0x0
c000f040:	68 bc 0e 02 c0       	push   0xc0020ebc
c000f045:	6a 07                	push   0x7
c000f047:	53                   	push   ebx
c000f048:	e8 23 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f04d:	83 c4 20             	add    esp,0x20
c000f050:	6a 00                	push   0x0
c000f052:	68 c6 0e 02 c0       	push   0xc0020ec6
c000f057:	6a 08                	push   0x8
c000f059:	53                   	push   ebx
c000f05a:	e8 11 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f05f:	6a 00                	push   0x0
c000f061:	68 ce 0e 02 c0       	push   0xc0020ece
c000f066:	6a 09                	push   0x9
c000f068:	53                   	push   ebx
c000f069:	e8 02 ff ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f06e:	83 c4 20             	add    esp,0x20
c000f071:	6a 00                	push   0x0
c000f073:	68 d8 0e 02 c0       	push   0xc0020ed8
c000f078:	6a 0a                	push   0xa
c000f07a:	53                   	push   ebx
c000f07b:	e8 f0 fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f080:	6a 00                	push   0x0
c000f082:	68 e0 0e 02 c0       	push   0xc0020ee0
c000f087:	6a 0b                	push   0xb
c000f089:	53                   	push   ebx
c000f08a:	e8 e1 fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f08f:	83 c4 20             	add    esp,0x20
c000f092:	6a 00                	push   0x0
c000f094:	68 e8 0e 02 c0       	push   0xc0020ee8
c000f099:	6a 0c                	push   0xc
c000f09b:	53                   	push   ebx
c000f09c:	e8 cf fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0a1:	6a 00                	push   0x0
c000f0a3:	68 f0 0e 02 c0       	push   0xc0020ef0
c000f0a8:	6a 0d                	push   0xd
c000f0aa:	53                   	push   ebx
c000f0ab:	e8 c0 fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0b0:	83 c4 20             	add    esp,0x20
c000f0b3:	6a 00                	push   0x0
c000f0b5:	68 0a 0f 02 c0       	push   0xc0020f0a
c000f0ba:	6a 0e                	push   0xe
c000f0bc:	53                   	push   ebx
c000f0bd:	e8 ae fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0c2:	6a 00                	push   0x0
c000f0c4:	68 12 0f 02 c0       	push   0xc0020f12
c000f0c9:	6a 0f                	push   0xf
c000f0cb:	53                   	push   ebx
c000f0cc:	e8 9f fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0d1:	83 c4 20             	add    esp,0x20
c000f0d4:	6a 00                	push   0x0
c000f0d6:	68 1c 0f 02 c0       	push   0xc0020f1c
c000f0db:	6a 10                	push   0x10
c000f0dd:	53                   	push   ebx
c000f0de:	e8 8d fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0e3:	6a 00                	push   0x0
c000f0e5:	68 26 0f 02 c0       	push   0xc0020f26
c000f0ea:	6a 11                	push   0x11
c000f0ec:	53                   	push   ebx
c000f0ed:	e8 7e fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f0f2:	83 c4 20             	add    esp,0x20
c000f0f5:	6a 00                	push   0x0
c000f0f7:	68 30 0f 02 c0       	push   0xc0020f30
c000f0fc:	6a 12                	push   0x12
c000f0fe:	53                   	push   ebx
c000f0ff:	e8 6c fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f104:	6a 01                	push   0x1
c000f106:	68 ca 0f 02 c0       	push   0xc0020fca
c000f10b:	6a 60                	push   0x60
c000f10d:	53                   	push   ebx
c000f10e:	e8 5d fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f113:	83 c4 20             	add    esp,0x20
c000f116:	6a 00                	push   0x0
c000f118:	68 d1 0f 02 c0       	push   0xc0020fd1
c000f11d:	6a 20                	push   0x20
c000f11f:	53                   	push   ebx
c000f120:	e8 4b fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f125:	6a 00                	push   0x0
c000f127:	68 bc 0f 02 c0       	push   0xc0020fbc
c000f12c:	6a 21                	push   0x21
c000f12e:	53                   	push   ebx
c000f12f:	e8 3c fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f134:	83 c4 20             	add    esp,0x20
c000f137:	6a 00                	push   0x0
c000f139:	68 c3 0f 02 c0       	push   0xc0020fc3
c000f13e:	6a 22                	push   0x22
c000f140:	53                   	push   ebx
c000f141:	e8 2a fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f146:	6a 00                	push   0x0
c000f148:	68 3a 0f 02 c0       	push   0xc0020f3a
c000f14d:	6a 23                	push   0x23
c000f14f:	53                   	push   ebx
c000f150:	e8 1b fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f155:	83 c4 20             	add    esp,0x20
c000f158:	6a 00                	push   0x0
c000f15a:	68 44 0f 02 c0       	push   0xc0020f44
c000f15f:	6a 24                	push   0x24
c000f161:	53                   	push   ebx
c000f162:	e8 09 fe ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f167:	6a 00                	push   0x0
c000f169:	68 4e 0f 02 c0       	push   0xc0020f4e
c000f16e:	6a 25                	push   0x25
c000f170:	53                   	push   ebx
c000f171:	e8 fa fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f176:	83 c4 20             	add    esp,0x20
c000f179:	6a 00                	push   0x0
c000f17b:	68 58 0f 02 c0       	push   0xc0020f58
c000f180:	6a 26                	push   0x26
c000f182:	53                   	push   ebx
c000f183:	e8 e8 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f188:	6a 00                	push   0x0
c000f18a:	68 62 0f 02 c0       	push   0xc0020f62
c000f18f:	6a 27                	push   0x27
c000f191:	53                   	push   ebx
c000f192:	e8 d9 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f197:	83 c4 20             	add    esp,0x20
c000f19a:	6a 00                	push   0x0
c000f19c:	68 6c 0f 02 c0       	push   0xc0020f6c
c000f1a1:	6a 28                	push   0x28
c000f1a3:	53                   	push   ebx
c000f1a4:	e8 c7 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1a9:	6a 00                	push   0x0
c000f1ab:	68 76 0f 02 c0       	push   0xc0020f76
c000f1b0:	6a 29                	push   0x29
c000f1b2:	53                   	push   ebx
c000f1b3:	e8 b8 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1b8:	83 c4 20             	add    esp,0x20
c000f1bb:	6a 00                	push   0x0
c000f1bd:	68 80 0f 02 c0       	push   0xc0020f80
c000f1c2:	6a 2a                	push   0x2a
c000f1c4:	53                   	push   ebx
c000f1c5:	e8 a6 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1ca:	6a 00                	push   0x0
c000f1cc:	68 8a 0f 02 c0       	push   0xc0020f8a
c000f1d1:	6a 2b                	push   0x2b
c000f1d3:	53                   	push   ebx
c000f1d4:	e8 97 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1d9:	83 c4 20             	add    esp,0x20
c000f1dc:	6a 00                	push   0x0
c000f1de:	68 94 0f 02 c0       	push   0xc0020f94
c000f1e3:	6a 2c                	push   0x2c
c000f1e5:	53                   	push   ebx
c000f1e6:	e8 85 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1eb:	6a 00                	push   0x0
c000f1ed:	68 9e 0f 02 c0       	push   0xc0020f9e
c000f1f2:	6a 2d                	push   0x2d
c000f1f4:	53                   	push   ebx
c000f1f5:	e8 76 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f1fa:	83 c4 20             	add    esp,0x20
c000f1fd:	6a 00                	push   0x0
c000f1ff:	68 a8 0f 02 c0       	push   0xc0020fa8
c000f204:	6a 2e                	push   0x2e
c000f206:	53                   	push   ebx
c000f207:	e8 64 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f20c:	6a 00                	push   0x0
c000f20e:	68 b2 0f 02 c0       	push   0xc0020fb2
c000f213:	6a 2f                	push   0x2f
c000f215:	53                   	push   ebx
c000f216:	e8 55 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f21b:	83 c4 20             	add    esp,0x20
c000f21e:	6a 00                	push   0x0
c000f220:	68 0c 11 02 c0       	push   0xc002110c
c000f225:	6a 30                	push   0x30
c000f227:	53                   	push   ebx
c000f228:	e8 43 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f22d:	6a 00                	push   0x0
c000f22f:	68 16 11 02 c0       	push   0xc0021116
c000f234:	6a 31                	push   0x31
c000f236:	53                   	push   ebx
c000f237:	e8 34 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f23c:	83 c4 20             	add    esp,0x20
c000f23f:	6a 00                	push   0x0
c000f241:	68 20 11 02 c0       	push   0xc0021120
c000f246:	6a 32                	push   0x32
c000f248:	53                   	push   ebx
c000f249:	e8 22 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f24e:	6a 00                	push   0x0
c000f250:	68 2a 11 02 c0       	push   0xc002112a
c000f255:	6a 33                	push   0x33
c000f257:	53                   	push   ebx
c000f258:	e8 13 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f25d:	83 c4 20             	add    esp,0x20
c000f260:	6a 00                	push   0x0
c000f262:	68 34 11 02 c0       	push   0xc0021134
c000f267:	6a 34                	push   0x34
c000f269:	53                   	push   ebx
c000f26a:	e8 01 fd ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f26f:	6a 00                	push   0x0
c000f271:	68 3e 11 02 c0       	push   0xc002113e
c000f276:	6a 35                	push   0x35
c000f278:	53                   	push   ebx
c000f279:	e8 f2 fc ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f27e:	83 c4 20             	add    esp,0x20
c000f281:	6a 00                	push   0x0
c000f283:	68 48 11 02 c0       	push   0xc0021148
c000f288:	6a 36                	push   0x36
c000f28a:	53                   	push   ebx
c000f28b:	e8 e0 fc ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f290:	6a 00                	push   0x0
c000f292:	68 52 11 02 c0       	push   0xc0021152
c000f297:	6a 37                	push   0x37
c000f299:	53                   	push   ebx
c000f29a:	e8 d1 fc ff ff       	call   c000ef70 <IDT::addEntry(int, void (*)(), bool)>
c000f29f:	83 c4 1c             	add    esp,0x1c
c000f2a2:	6a 03                	push   0x3
c000f2a4:	6a 02                	push   0x2
c000f2a6:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000f2ac:	e8 cb 48 00 00       	call   c0013b7c <VAS::allocatePages(int, int)>
c000f2b1:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f2b8:	89 c6                	mov    esi,eax
c000f2ba:	e8 9c 09 00 00       	call   c000fc5b <malloc>
c000f2bf:	81 c6 00 20 00 00    	add    esi,0x2000
c000f2c5:	89 04 24             	mov    DWORD PTR [esp],eax
c000f2c8:	89 c7                	mov    edi,eax
c000f2ca:	e8 69 39 00 00       	call   c0012c38 <TSS::TSS()>
c000f2cf:	83 c4 0c             	add    esp,0xc
c000f2d2:	68 c6 0e 02 c0       	push   0xc0020ec6
c000f2d7:	56                   	push   esi
c000f2d8:	57                   	push   edi
c000f2d9:	e8 9e 39 00 00       	call   c0012c7c <TSS::setup(unsigned long, unsigned long)>
c000f2de:	89 c6                	mov    esi,eax
c000f2e0:	58                   	pop    eax
c000f2e1:	5a                   	pop    edx
c000f2e2:	6a 00                	push   0x0
c000f2e4:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f2e8:	50                   	push   eax
c000f2e9:	e8 ce fb ff ff       	call   c000eebc <IDTEntry::IDTEntry(bool)>
c000f2ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f2f2:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f2f7:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f2fe:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f304:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f308:	80 ce 05             	or     dh,0x5
c000f30b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f30e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f312:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f316:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f319:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f31c:	e8 87 fc ff ff       	call   c000efa8 <IDT::flush()>
c000f321:	83 c4 20             	add    esp,0x20
c000f324:	5b                   	pop    ebx
c000f325:	5e                   	pop    esi
c000f326:	5f                   	pop    edi
c000f327:	c3                   	ret    

c000f328 <CPU::current()>:
c000f328:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000f32d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000f333:	c3                   	ret    

c000f334 <operator new(unsigned long)>:
c000f334:	e9 22 09 00 00       	jmp    c000fc5b <malloc>

c000f339 <operator delete(void*)>:
c000f339:	e9 3d 09 00 00       	jmp    c000fc7b <rfree>

c000f33e <disableIRQs()>:
c000f33e:	fa                   	cli    
c000f33f:	c3                   	ret    

c000f340 <enableIRQs()>:
c000f340:	fb                   	sti    
c000f341:	c3                   	ret    

c000f342 <lockScheduler()>:
c000f342:	fa                   	cli    
c000f343:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f349:	c3                   	ret    

c000f34a <unlockScheduler()>:
c000f34a:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f351:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f358:	75 01                	jne    c000f35b <unlockScheduler()+0x11>
c000f35a:	fb                   	sti    
c000f35b:	c3                   	ret    

c000f35c <lockStuff()>:
c000f35c:	fa                   	cli    
c000f35d:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c000f363:	ff 05 2c ea 02 c0    	inc    DWORD PTR ds:0xc002ea2c
c000f369:	c3                   	ret    

c000f36a <unlockStuff()>:
c000f36a:	83 ec 0c             	sub    esp,0xc
c000f36d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c000f372:	48                   	dec    eax
c000f373:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c000f378:	75 18                	jne    c000f392 <unlockStuff()+0x28>
c000f37a:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c000f381:	74 0f                	je     c000f392 <unlockStuff()+0x28>
c000f383:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c000f38d:	e8 2e 78 00 00       	call   c0016bc0 <schedule()>
c000f392:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c000f399:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000f3a0:	75 01                	jne    c000f3a3 <unlockStuff()+0x39>
c000f3a2:	fb                   	sti    
c000f3a3:	83 c4 0c             	add    esp,0xc
c000f3a6:	c3                   	ret    

c000f3a7 <Virt::getAKernelVAS()>:
c000f3a7:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c000f3ac:	c3                   	ret    

c000f3ad <__not_memcpy>:
c000f3ad:	57                   	push   edi
c000f3ae:	56                   	push   esi
c000f3af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f3b3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f3b7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000f3bb:	89 c7                	mov    edi,eax
c000f3bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f3bf:	5e                   	pop    esi
c000f3c0:	5f                   	pop    edi
c000f3c1:	c3                   	ret    

c000f3c2 <KeFormatDate(char*, int, int, int, int, bool)>:
c000f3c2:	55                   	push   ebp
c000f3c3:	b9 0a 00 00 00       	mov    ecx,0xa
c000f3c8:	57                   	push   edi
c000f3c9:	56                   	push   esi
c000f3ca:	53                   	push   ebx
c000f3cb:	bb e8 03 00 00       	mov    ebx,0x3e8
c000f3d0:	81 ec ac 00 00 00    	sub    esp,0xac
c000f3d6:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f3dd:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000f3e2:	99                   	cdq    
c000f3e3:	f7 f9                	idiv   ecx
c000f3e5:	89 d5                	mov    ebp,edx
c000f3e7:	99                   	cdq    
c000f3e8:	f7 f9                	idiv   ecx
c000f3ea:	8d 42 30             	lea    eax,[edx+0x30]
c000f3ed:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f3f1:	8d 45 30             	lea    eax,[ebp+0x30]
c000f3f4:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000f3f8:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f3ff:	99                   	cdq    
c000f400:	f7 fb                	idiv   ebx
c000f402:	bb 64 00 00 00       	mov    ebx,0x64
c000f407:	99                   	cdq    
c000f408:	f7 f9                	idiv   ecx
c000f40a:	8d 42 30             	lea    eax,[edx+0x30]
c000f40d:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000f411:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000f418:	99                   	cdq    
c000f419:	f7 fb                	idiv   ebx
c000f41b:	31 db                	xor    ebx,ebx
c000f41d:	99                   	cdq    
c000f41e:	f7 f9                	idiv   ecx
c000f420:	8d 42 30             	lea    eax,[edx+0x30]
c000f423:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000f427:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000f42f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f433:	0f be 8b 04 e1 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd1efc]
c000f43a:	83 f9 59             	cmp    ecx,0x59
c000f43d:	74 1c                	je     c000f45b <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000f43f:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000f446:	83 f9 4d             	cmp    ecx,0x4d
c000f449:	0f 84 e3 00 00 00    	je     c000f532 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f44f:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000f456:	e9 d7 00 00 00       	jmp    c000f532 <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000f45b:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000f460:	74 27                	je     c000f489 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000f462:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000f466:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f46b:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f46f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000f473:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f477:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f47b:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000f47f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f483:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000f487:	eb 15                	jmp    c000f49e <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f489:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000f48d:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f491:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000f495:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000f499:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000f49e:	50                   	push   eax
c000f49f:	50                   	push   eax
c000f4a0:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000f4a4:	57                   	push   edi
c000f4a5:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000f4a9:	56                   	push   esi
c000f4aa:	e8 91 13 ff ff       	call   c0000840 <strcat>
c000f4af:	83 c4 10             	add    esp,0x10
c000f4b2:	83 fb 02             	cmp    ebx,0x2
c000f4b5:	74 1a                	je     c000f4d1 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000f4b7:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f4bc:	a1 08 e1 02 c0       	mov    eax,ds:0xc002e108
c000f4c1:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000f4c5:	55                   	push   ebp
c000f4c6:	55                   	push   ebp
c000f4c7:	57                   	push   edi
c000f4c8:	56                   	push   esi
c000f4c9:	e8 72 13 ff ff       	call   c0000840 <strcat>
c000f4ce:	83 c4 10             	add    esp,0x10
c000f4d1:	43                   	inc    ebx
c000f4d2:	83 fb 03             	cmp    ebx,0x3
c000f4d5:	0f 85 58 ff ff ff    	jne    c000f433 <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000f4db:	51                   	push   ecx
c000f4dc:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000f4e3:	6a 00                	push   0x0
c000f4e5:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f4ec:	e8 ff 0f ff ff       	call   c00004f0 <memset>
c000f4f1:	89 34 24             	mov    DWORD PTR [esp],esi
c000f4f4:	e8 77 10 ff ff       	call   c0000570 <strlen>
c000f4f9:	83 c4 10             	add    esp,0x10
c000f4fc:	40                   	inc    eax
c000f4fd:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000f504:	72 17                	jb     c000f51d <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000f506:	52                   	push   edx
c000f507:	52                   	push   edx
c000f508:	56                   	push   esi
c000f509:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000f510:	e8 2b 11 ff ff       	call   c0000640 <strcpy>
c000f515:	83 c4 10             	add    esp,0x10
c000f518:	e9 8a 00 00 00       	jmp    c000f5a7 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f51d:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000f524:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000f52b:	8d 48 ff             	lea    ecx,[eax-0x1]
c000f52e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f530:	eb 75                	jmp    c000f5a7 <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000f532:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f536:	89 ef                	mov    edi,ebp
c000f538:	50                   	push   eax
c000f539:	c1 ff 1f             	sar    edi,0x1f
c000f53c:	50                   	push   eax
c000f53d:	57                   	push   edi
c000f53e:	55                   	push   ebp
c000f53f:	e8 70 04 00 00       	call   c000f9b4 <KeGetDigitsInNumber(long long)>
c000f544:	83 c4 10             	add    esp,0x10
c000f547:	48                   	dec    eax
c000f548:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f54c:	75 1c                	jne    c000f56a <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000f54e:	83 f9 44             	cmp    ecx,0x44
c000f551:	75 09                	jne    c000f55c <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000f553:	80 3d 20 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e120,0x0
c000f55a:	eb 0c                	jmp    c000f568 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000f55c:	83 f9 4d             	cmp    ecx,0x4d
c000f55f:	75 2b                	jne    c000f58c <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f561:	80 3d 21 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e121,0x0
c000f568:	74 22                	je     c000f58c <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000f56a:	89 e8                	mov    eax,ebp
c000f56c:	b9 0a 00 00 00       	mov    ecx,0xa
c000f571:	99                   	cdq    
c000f572:	f7 f9                	idiv   ecx
c000f574:	89 d5                	mov    ebp,edx
c000f576:	99                   	cdq    
c000f577:	f7 f9                	idiv   ecx
c000f579:	83 c2 30             	add    edx,0x30
c000f57c:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f580:	8d 55 30             	lea    edx,[ebp+0x30]
c000f583:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000f587:	e9 0d ff ff ff       	jmp    c000f499 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000f58c:	89 e8                	mov    eax,ebp
c000f58e:	b9 0a 00 00 00       	mov    ecx,0xa
c000f593:	99                   	cdq    
c000f594:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000f599:	f7 f9                	idiv   ecx
c000f59b:	83 c2 30             	add    edx,0x30
c000f59e:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000f5a2:	e9 f7 fe ff ff       	jmp    c000f49e <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000f5a7:	81 c4 ac 00 00 00    	add    esp,0xac
c000f5ad:	5b                   	pop    ebx
c000f5ae:	5e                   	pop    esi
c000f5af:	5f                   	pop    edi
c000f5b0:	5d                   	pop    ebp
c000f5b1:	c3                   	ret    

c000f5b2 <KeFormatShortDate(char*, int, int, int, int)>:
c000f5b2:	83 ec 14             	sub    esp,0x14
c000f5b5:	6a 00                	push   0x0
c000f5b7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5bf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5c3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5cb:	e8 f2 fd ff ff       	call   c000f3c2 <KeFormatDate(char*, int, int, int, int, bool)>
c000f5d0:	83 c4 2c             	add    esp,0x2c
c000f5d3:	c3                   	ret    

c000f5d4 <KeFormatLongDate(char*, int, int, int, int)>:
c000f5d4:	83 ec 14             	sub    esp,0x14
c000f5d7:	6a 01                	push   0x1
c000f5d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5e1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f5ed:	e8 d0 fd ff ff       	call   c000f3c2 <KeFormatDate(char*, int, int, int, int, bool)>
c000f5f2:	83 c4 2c             	add    esp,0x2c
c000f5f5:	c3                   	ret    

c000f5f6 <KeSetLocale(klocale_t)>:
c000f5f6:	57                   	push   edi
c000f5f7:	b9 09 00 00 00       	mov    ecx,0x9
c000f5fc:	56                   	push   esi
c000f5fd:	bf 00 e1 02 c0       	mov    edi,0xc002e100
c000f602:	fc                   	cld    
c000f603:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000f607:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f609:	5e                   	pop    esi
c000f60a:	5f                   	pop    edi
c000f60b:	c3                   	ret    

c000f60c <KeInitialiseLocale()>:
c000f60c:	57                   	push   edi
c000f60d:	56                   	push   esi
c000f60e:	83 ec 3c             	sub    esp,0x3c
c000f611:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000f619:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000f621:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000f629:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000f631:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000f638:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000f640:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000f648:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000f64f:	68 26 3b 02 c0       	push   0xc0023b26
c000f654:	8d 74 24 18          	lea    esi,[esp+0x18]
c000f658:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000f65c:	50                   	push   eax
c000f65d:	e8 de 0f ff ff       	call   c0000640 <strcpy>
c000f662:	83 ec 20             	sub    esp,0x20
c000f665:	b9 09 00 00 00       	mov    ecx,0x9
c000f66a:	fc                   	cld    
c000f66b:	89 e7                	mov    edi,esp
c000f66d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f66f:	e8 82 ff ff ff       	call   c000f5f6 <KeSetLocale(klocale_t)>
c000f674:	83 c4 64             	add    esp,0x64
c000f677:	5e                   	pop    esi
c000f678:	5f                   	pop    edi
c000f679:	c3                   	ret    

c000f67a <KeFormatCurrency(char*, int, long long, long long)>:
c000f67a:	c3                   	ret    

c000f67b <KeFormatCurrency(char*, int, double)>:
c000f67b:	c3                   	ret    

c000f67c <KeFormatNumber(char*, long long, long long)>:
c000f67c:	c3                   	ret    

c000f67d <KeFormatNumber(char*, double)>:
c000f67d:	c3                   	ret    
c000f67e:	66 90                	xchg   ax,ax

c000f680 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000f680:	55                   	push   ebp
c000f681:	57                   	push   edi
c000f682:	56                   	push   esi
c000f683:	53                   	push   ebx
c000f684:	83 ec 5c             	sub    esp,0x5c
c000f687:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f68b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f68f:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f693:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f697:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f69b:	bb cf 28 02 c0       	mov    ebx,0xc00228cf
c000f6a0:	bd 11 00 00 00       	mov    ebp,0x11
c000f6a5:	89 d0                	mov    eax,edx
c000f6a7:	83 e0 01             	and    eax,0x1
c000f6aa:	74 10                	je     c000f6bc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000f6ac:	8a 03                	mov    al,BYTE PTR [ebx]
c000f6ae:	88 02                	mov    BYTE PTR [edx],al
c000f6b0:	8d 52 01             	lea    edx,[edx+0x1]
c000f6b3:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f6b6:	83 ed 01             	sub    ebp,0x1
c000f6b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f6bc:	89 d0                	mov    eax,edx
c000f6be:	83 e0 02             	and    eax,0x2
c000f6c1:	74 11                	je     c000f6d4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000f6c3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f6c6:	66 89 02             	mov    WORD PTR [edx],ax
c000f6c9:	8d 52 02             	lea    edx,[edx+0x2]
c000f6cc:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f6cf:	83 ed 02             	sub    ebp,0x2
c000f6d2:	66 90                	xchg   ax,ax
c000f6d4:	89 e8                	mov    eax,ebp
c000f6d6:	c1 e8 02             	shr    eax,0x2
c000f6d9:	fc                   	cld    
c000f6da:	89 d7                	mov    edi,edx
c000f6dc:	89 de                	mov    esi,ebx
c000f6de:	89 c1                	mov    ecx,eax
c000f6e0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f6e2:	89 f3                	mov    ebx,esi
c000f6e4:	89 fa                	mov    edx,edi
c000f6e6:	b9 00 00 00 00       	mov    ecx,0x0
c000f6eb:	89 e8                	mov    eax,ebp
c000f6ed:	83 e0 02             	and    eax,0x2
c000f6f0:	74 0e                	je     c000f700 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000f6f2:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f6f6:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f6fa:	8d 41 02             	lea    eax,[ecx+0x2]
c000f6fd:	89 c1                	mov    ecx,eax
c000f6ff:	90                   	nop
c000f700:	89 e8                	mov    eax,ebp
c000f702:	83 e0 01             	and    eax,0x1
c000f705:	74 09                	je     c000f710 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000f707:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f70a:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f70d:	8d 76 00             	lea    esi,[esi+0x0]
c000f710:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f714:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f718:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f71c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f720:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f724:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f728:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f72d:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f731:	89 c2                	mov    edx,eax
c000f733:	c1 fa 1f             	sar    edx,0x1f
c000f736:	52                   	push   edx
c000f737:	50                   	push   eax
c000f738:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f73c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f740:	e8 af 1d 01 00       	call   c00214f4 <__udivdi3>
c000f745:	83 c4 10             	add    esp,0x10
c000f748:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f74c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f750:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f754:	80 f4 00             	xor    ah,0x0
c000f757:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f75b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f75f:	80 f4 00             	xor    ah,0x0
c000f762:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f766:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f76a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f76e:	89 f8                	mov    eax,edi
c000f770:	09 f0                	or     eax,esi
c000f772:	74 04                	je     c000f778 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000f774:	eb b2                	jmp    c000f728 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000f776:	66 90                	xchg   ax,ax
c000f778:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f77c:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f77f:	90                   	nop
c000f780:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f784:	89 c1                	mov    ecx,eax
c000f786:	89 c3                	mov    ebx,eax
c000f788:	c1 fb 1f             	sar    ebx,0x1f
c000f78b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f78f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f793:	53                   	push   ebx
c000f794:	51                   	push   ecx
c000f795:	52                   	push   edx
c000f796:	50                   	push   eax
c000f797:	e8 58 1e 01 00       	call   c00215f4 <__umoddi3>
c000f79c:	83 c4 10             	add    esp,0x10
c000f79f:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f7a4:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f7a8:	01 c8                	add    eax,ecx
c000f7aa:	8a 10                	mov    dl,BYTE PTR [eax]
c000f7ac:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f7b0:	88 10                	mov    BYTE PTR [eax],dl
c000f7b2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f7b6:	89 c2                	mov    edx,eax
c000f7b8:	c1 fa 1f             	sar    edx,0x1f
c000f7bb:	52                   	push   edx
c000f7bc:	50                   	push   eax
c000f7bd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f7c1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f7c5:	e8 2a 1d 01 00       	call   c00214f4 <__udivdi3>
c000f7ca:	83 c4 10             	add    esp,0x10
c000f7cd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f7d1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f7d5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f7d9:	80 f4 00             	xor    ah,0x0
c000f7dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f7e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f7e4:	80 f4 00             	xor    ah,0x0
c000f7e7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f7eb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f7ef:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f7f3:	89 f8                	mov    eax,edi
c000f7f5:	09 f0                	or     eax,esi
c000f7f7:	74 03                	je     c000f7fc <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000f7f9:	eb 85                	jmp    c000f780 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000f7fb:	90                   	nop
c000f7fc:	90                   	nop
c000f7fd:	83 c4 5c             	add    esp,0x5c
c000f800:	5b                   	pop    ebx
c000f801:	5e                   	pop    esi
c000f802:	5f                   	pop    edi
c000f803:	5d                   	pop    ebp
c000f804:	c3                   	ret    
c000f805:	8d 76 00             	lea    esi,[esi+0x0]

c000f808 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000f808:	55                   	push   ebp
c000f809:	57                   	push   edi
c000f80a:	56                   	push   esi
c000f80b:	53                   	push   ebx
c000f80c:	83 ec 5c             	sub    esp,0x5c
c000f80f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000f813:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f817:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000f81b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f81f:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000f823:	bb cf 28 02 c0       	mov    ebx,0xc00228cf
c000f828:	bd 11 00 00 00       	mov    ebp,0x11
c000f82d:	89 d0                	mov    eax,edx
c000f82f:	83 e0 01             	and    eax,0x1
c000f832:	74 10                	je     c000f844 <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000f834:	8a 03                	mov    al,BYTE PTR [ebx]
c000f836:	88 02                	mov    BYTE PTR [edx],al
c000f838:	8d 52 01             	lea    edx,[edx+0x1]
c000f83b:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000f83e:	83 ed 01             	sub    ebp,0x1
c000f841:	8d 76 00             	lea    esi,[esi+0x0]
c000f844:	89 d0                	mov    eax,edx
c000f846:	83 e0 02             	and    eax,0x2
c000f849:	74 11                	je     c000f85c <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000f84b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000f84e:	66 89 02             	mov    WORD PTR [edx],ax
c000f851:	8d 52 02             	lea    edx,[edx+0x2]
c000f854:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000f857:	83 ed 02             	sub    ebp,0x2
c000f85a:	66 90                	xchg   ax,ax
c000f85c:	89 e8                	mov    eax,ebp
c000f85e:	c1 e8 02             	shr    eax,0x2
c000f861:	fc                   	cld    
c000f862:	89 d7                	mov    edi,edx
c000f864:	89 de                	mov    esi,ebx
c000f866:	89 c1                	mov    ecx,eax
c000f868:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000f86a:	89 f3                	mov    ebx,esi
c000f86c:	89 fa                	mov    edx,edi
c000f86e:	b9 00 00 00 00       	mov    ecx,0x0
c000f873:	89 e8                	mov    eax,ebp
c000f875:	83 e0 02             	and    eax,0x2
c000f878:	74 0e                	je     c000f888 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000f87a:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000f87e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000f882:	8d 41 02             	lea    eax,[ecx+0x2]
c000f885:	89 c1                	mov    ecx,eax
c000f887:	90                   	nop
c000f888:	89 e8                	mov    eax,ebp
c000f88a:	83 e0 01             	and    eax,0x1
c000f88d:	74 09                	je     c000f898 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000f88f:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000f892:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000f895:	8d 76 00             	lea    esi,[esi+0x0]
c000f898:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000f89c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f8a0:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000f8a5:	79 1d                	jns    c000f8c4 <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000f8a7:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000f8ab:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000f8b0:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000f8b4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f8b8:	8d 50 01             	lea    edx,[eax+0x1]
c000f8bb:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000f8bf:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000f8c2:	66 90                	xchg   ax,ax
c000f8c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f8c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f8cc:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f8d0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f8d4:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000f8d9:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f8dd:	89 c2                	mov    edx,eax
c000f8df:	c1 fa 1f             	sar    edx,0x1f
c000f8e2:	52                   	push   edx
c000f8e3:	50                   	push   eax
c000f8e4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f8e8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000f8ec:	e8 03 1c 01 00       	call   c00214f4 <__udivdi3>
c000f8f1:	83 c4 10             	add    esp,0x10
c000f8f4:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000f8f8:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000f8fc:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000f900:	80 f4 00             	xor    ah,0x0
c000f903:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f907:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f90b:	80 f4 00             	xor    ah,0x0
c000f90e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f912:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000f916:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000f91a:	89 f8                	mov    eax,edi
c000f91c:	09 f0                	or     eax,esi
c000f91e:	74 04                	je     c000f924 <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000f920:	eb b2                	jmp    c000f8d4 <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000f922:	66 90                	xchg   ax,ax
c000f924:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f928:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f92b:	90                   	nop
c000f92c:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f930:	89 c1                	mov    ecx,eax
c000f932:	89 c3                	mov    ebx,eax
c000f934:	c1 fb 1f             	sar    ebx,0x1f
c000f937:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f93b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f93f:	53                   	push   ebx
c000f940:	51                   	push   ecx
c000f941:	52                   	push   edx
c000f942:	50                   	push   eax
c000f943:	e8 2c 1a 01 00       	call   c0021374 <__moddi3>
c000f948:	83 c4 10             	add    esp,0x10
c000f94b:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000f950:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000f954:	01 c8                	add    eax,ecx
c000f956:	8a 10                	mov    dl,BYTE PTR [eax]
c000f958:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f95c:	88 10                	mov    BYTE PTR [eax],dl
c000f95e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f962:	89 c2                	mov    edx,eax
c000f964:	c1 fa 1f             	sar    edx,0x1f
c000f967:	52                   	push   edx
c000f968:	50                   	push   eax
c000f969:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f96d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f971:	e8 b2 18 01 00       	call   c0021228 <__divdi3>
c000f976:	83 c4 10             	add    esp,0x10
c000f979:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f97d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f981:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f985:	80 f4 00             	xor    ah,0x0
c000f988:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f98c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f990:	80 f4 00             	xor    ah,0x0
c000f993:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f997:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f99b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f99f:	89 f8                	mov    eax,edi
c000f9a1:	09 f0                	or     eax,esi
c000f9a3:	74 03                	je     c000f9a8 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f9a5:	eb 85                	jmp    c000f92c <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f9a7:	90                   	nop
c000f9a8:	90                   	nop
c000f9a9:	83 c4 5c             	add    esp,0x5c
c000f9ac:	5b                   	pop    ebx
c000f9ad:	5e                   	pop    esi
c000f9ae:	5f                   	pop    edi
c000f9af:	5d                   	pop    ebp
c000f9b0:	c3                   	ret    
c000f9b1:	8d 76 00             	lea    esi,[esi+0x0]

c000f9b4 <KeGetDigitsInNumber(long long)>:
c000f9b4:	56                   	push   esi
c000f9b5:	53                   	push   ebx
c000f9b6:	83 ec 24             	sub    esp,0x24
c000f9b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f9bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f9c1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f9c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f9c9:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f9d1:	8d 76 00             	lea    esi,[esi+0x0]
c000f9d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9d8:	80 f4 00             	xor    ah,0x0
c000f9db:	89 c3                	mov    ebx,eax
c000f9dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9e1:	80 f4 00             	xor    ah,0x0
c000f9e4:	89 c6                	mov    esi,eax
c000f9e6:	89 f0                	mov    eax,esi
c000f9e8:	09 d8                	or     eax,ebx
c000f9ea:	74 28                	je     c000fa14 <KeGetDigitsInNumber(long long)+0x60>
c000f9ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f9f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f9f4:	6a 00                	push   0x0
c000f9f6:	6a 0a                	push   0xa
c000f9f8:	52                   	push   edx
c000f9f9:	50                   	push   eax
c000f9fa:	e8 29 18 01 00       	call   c0021228 <__divdi3>
c000f9ff:	83 c4 10             	add    esp,0x10
c000fa02:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa06:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fa0a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000fa0f:	eb c3                	jmp    c000f9d4 <KeGetDigitsInNumber(long long)+0x20>
c000fa11:	8d 76 00             	lea    esi,[esi+0x0]
c000fa14:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fa18:	83 c4 24             	add    esp,0x24
c000fa1b:	5b                   	pop    ebx
c000fa1c:	5e                   	pop    esi
c000fa1d:	c3                   	ret    
c000fa1e:	66 90                	xchg   ax,ax

c000fa20 <KeItoa(unsigned long long, char*)>:
c000fa20:	83 ec 1c             	sub    esp,0x1c
c000fa23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa2b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa33:	6a 0a                	push   0xa
c000fa35:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa39:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa41:	e8 3a fc ff ff       	call   c000f680 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000fa46:	83 c4 10             	add    esp,0x10
c000fa49:	90                   	nop
c000fa4a:	83 c4 1c             	add    esp,0x1c
c000fa4d:	c3                   	ret    
c000fa4e:	66 90                	xchg   ax,ax

c000fa50 <KeItoa(long long, char*)>:
c000fa50:	83 ec 1c             	sub    esp,0x1c
c000fa53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa57:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa5b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa63:	6a 0a                	push   0xa
c000fa65:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa69:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa71:	e8 92 fd ff ff       	call   c000f808 <KeBasedSignedIntegerToString(long long, char*, int)>
c000fa76:	83 c4 10             	add    esp,0x10
c000fa79:	90                   	nop
c000fa7a:	83 c4 1c             	add    esp,0x1c
c000fa7d:	c3                   	ret    
c000fa7e:	66 90                	xchg   ax,ax

c000fa80 <KeXtoa(unsigned long long, char*)>:
c000fa80:	83 ec 1c             	sub    esp,0x1c
c000fa83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000fa87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000fa8b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa8f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa93:	6a 10                	push   0x10
c000fa95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000fa99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fa9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000faa1:	e8 da fb ff ff       	call   c000f680 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000faa6:	83 c4 10             	add    esp,0x10
c000faa9:	90                   	nop
c000faaa:	83 c4 1c             	add    esp,0x1c
c000faad:	c3                   	ret    

c000faae <sbrk>:
c000faae:	55                   	push   ebp
c000faaf:	57                   	push   edi
c000fab0:	56                   	push   esi
c000fab1:	53                   	push   ebx
c000fab2:	83 ec 1c             	sub    esp,0x1c
c000fab5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fab9:	85 c0                	test   eax,eax
c000fabb:	74 61                	je     c000fb1e <sbrk+0x70>
c000fabd:	78 66                	js     c000fb25 <sbrk+0x77>
c000fabf:	8b 15 f0 60 02 c0    	mov    edx,DWORD PTR ds:0xc00260f0
c000fac5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000fac9:	05 ff 0f 00 00       	add    eax,0xfff
c000face:	89 c5                	mov    ebp,eax
c000fad0:	78 6b                	js     c000fb3d <sbrk+0x8f>
c000fad2:	c1 fd 0c             	sar    ebp,0xc
c000fad5:	bb 00 00 00 00       	mov    ebx,0x0
c000fada:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000fae0:	8b 3d f0 60 02 c0    	mov    edi,DWORD PTR ds:0xc00260f0
c000fae6:	e8 ab 06 00 00       	call   c0010196 <Phys::allocatePage()>
c000faeb:	68 01 04 00 00       	push   0x401
c000faf0:	57                   	push   edi
c000faf1:	50                   	push   eax
c000faf2:	56                   	push   esi
c000faf3:	e8 80 3f 00 00       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c000faf8:	81 05 f0 60 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc00260f0,0x1000
c000fb02:	83 c3 01             	add    ebx,0x1
c000fb05:	83 c4 10             	add    esp,0x10
c000fb08:	39 dd                	cmp    ebp,ebx
c000fb0a:	75 ce                	jne    c000fada <sbrk+0x2c>
c000fb0c:	0f 20 d8             	mov    eax,cr3
c000fb0f:	0f 22 d8             	mov    cr3,eax
c000fb12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fb16:	83 c4 1c             	add    esp,0x1c
c000fb19:	5b                   	pop    ebx
c000fb1a:	5e                   	pop    esi
c000fb1b:	5f                   	pop    edi
c000fb1c:	5d                   	pop    ebp
c000fb1d:	c3                   	ret    
c000fb1e:	a1 f0 60 02 c0       	mov    eax,ds:0xc00260f0
c000fb23:	eb f1                	jmp    c000fb16 <sbrk+0x68>
c000fb25:	83 ec 08             	sub    esp,0x8
c000fb28:	50                   	push   eax
c000fb29:	68 2c 3b 02 c0       	push   0xc0023b2c
c000fb2e:	e8 31 74 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fb33:	83 c4 10             	add    esp,0x10
c000fb36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fb3b:	eb d9                	jmp    c000fb16 <sbrk+0x68>
c000fb3d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000fb43:	eb 8d                	jmp    c000fad2 <sbrk+0x24>

c000fb45 <sbrk_thunk>:
c000fb45:	83 ec 0c             	sub    esp,0xc
c000fb48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fb4c:	3d ff bf 00 00       	cmp    eax,0xbfff
c000fb51:	7f 10                	jg     c000fb63 <sbrk_thunk+0x1e>
c000fb53:	83 ec 0c             	sub    esp,0xc
c000fb56:	50                   	push   eax
c000fb57:	e8 52 ff ff ff       	call   c000faae <sbrk>
c000fb5c:	83 c4 10             	add    esp,0x10
c000fb5f:	83 c4 0c             	add    esp,0xc
c000fb62:	c3                   	ret    
c000fb63:	83 ec 08             	sub    esp,0x8
c000fb66:	50                   	push   eax
c000fb67:	68 5c 3b 02 c0       	push   0xc0023b5c
c000fb6c:	e8 f3 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fb71:	83 c4 10             	add    esp,0x10
c000fb74:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000fb79:	eb e4                	jmp    c000fb5f <sbrk_thunk+0x1a>

c000fb7b <mmap>:
c000fb7b:	55                   	push   ebp
c000fb7c:	57                   	push   edi
c000fb7d:	56                   	push   esi
c000fb7e:	53                   	push   ebx
c000fb7f:	83 ec 18             	sub    esp,0x18
c000fb82:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000fb86:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000fb8c:	89 fb                	mov    ebx,edi
c000fb8e:	c1 eb 0c             	shr    ebx,0xc
c000fb91:	53                   	push   ebx
c000fb92:	e8 fe 37 00 00       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c000fb97:	89 c5                	mov    ebp,eax
c000fb99:	83 c4 10             	add    esp,0x10
c000fb9c:	85 db                	test   ebx,ebx
c000fb9e:	7e 2f                	jle    c000fbcf <mmap+0x54>
c000fba0:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000fba6:	01 c7                	add    edi,eax
c000fba8:	89 c3                	mov    ebx,eax
c000fbaa:	8b 35 50 e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e250
c000fbb0:	e8 e1 05 00 00       	call   c0010196 <Phys::allocatePage()>
c000fbb5:	68 01 04 00 00       	push   0x401
c000fbba:	53                   	push   ebx
c000fbbb:	50                   	push   eax
c000fbbc:	56                   	push   esi
c000fbbd:	e8 b6 3e 00 00       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c000fbc2:	81 c3 00 10 00 00    	add    ebx,0x1000
c000fbc8:	83 c4 10             	add    esp,0x10
c000fbcb:	39 fb                	cmp    ebx,edi
c000fbcd:	75 db                	jne    c000fbaa <mmap+0x2f>
c000fbcf:	89 e8                	mov    eax,ebp
c000fbd1:	83 c4 0c             	add    esp,0xc
c000fbd4:	5b                   	pop    ebx
c000fbd5:	5e                   	pop    esi
c000fbd6:	5f                   	pop    edi
c000fbd7:	5d                   	pop    ebp
c000fbd8:	c3                   	ret    

c000fbd9 <munmap>:
c000fbd9:	83 ec 18             	sub    esp,0x18
c000fbdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fbe0:	e8 b8 3a 00 00       	call   c001369d <Virt::freeKernelVirtualPages(unsigned long)>
c000fbe5:	b8 00 00 00 00       	mov    eax,0x0
c000fbea:	83 c4 1c             	add    esp,0x1c
c000fbed:	c3                   	ret    

c000fbee <liballoc_lock()>:
c000fbee:	fa                   	cli    
c000fbef:	83 05 30 ea 02 c0 01 	add    DWORD PTR ds:0xc002ea30,0x1
c000fbf6:	b8 00 00 00 00       	mov    eax,0x0
c000fbfb:	c3                   	ret    

c000fbfc <liballoc_unlock()>:
c000fbfc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fc04:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c000fc0b:	75 01                	jne    c000fc0e <liballoc_unlock()+0x12>
c000fc0d:	fb                   	sti    
c000fc0e:	b8 00 00 00 00       	mov    eax,0x0
c000fc13:	c3                   	ret    

c000fc14 <liballoc_alloc(int)>:
c000fc14:	83 ec 10             	sub    esp,0x10
c000fc17:	6a 01                	push   0x1
c000fc19:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc1d:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fc23:	e8 54 3f 00 00       	call   c0013b7c <VAS::allocatePages(int, int)>
c000fc28:	83 c4 1c             	add    esp,0x1c
c000fc2b:	c3                   	ret    

c000fc2c <liballoc_free(void*, int)>:
c000fc2c:	83 ec 14             	sub    esp,0x14
c000fc2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fc33:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c000fc39:	e8 9c 3b 00 00       	call   c00137da <VAS::freeAllocatedPages(unsigned long)>
c000fc3e:	b8 00 00 00 00       	mov    eax,0x0
c000fc43:	83 c4 1c             	add    esp,0x1c
c000fc46:	c3                   	ret    

c000fc47 <realloc>:
c000fc47:	83 ec 14             	sub    esp,0x14
c000fc4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc52:	e8 00 1b ff ff       	call   c0001757 <dlrealloc>
c000fc57:	83 c4 1c             	add    esp,0x1c
c000fc5a:	c3                   	ret    

c000fc5b <malloc>:
c000fc5b:	83 ec 18             	sub    esp,0x18
c000fc5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc62:	e8 b3 15 ff ff       	call   c000121a <dlmalloc>
c000fc67:	83 c4 1c             	add    esp,0x1c
c000fc6a:	c3                   	ret    

c000fc6b <free>:
c000fc6b:	83 ec 18             	sub    esp,0x18
c000fc6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc72:	e8 dc 10 ff ff       	call   c0000d53 <dlfree>
c000fc77:	83 c4 1c             	add    esp,0x1c
c000fc7a:	c3                   	ret    

c000fc7b <rfree>:
c000fc7b:	83 ec 18             	sub    esp,0x18
c000fc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fc82:	e8 cc 10 ff ff       	call   c0000d53 <dlfree>
c000fc87:	83 c4 1c             	add    esp,0x1c
c000fc8a:	c3                   	ret    

c000fc8b <calloc>:
c000fc8b:	56                   	push   esi
c000fc8c:	53                   	push   ebx
c000fc8d:	83 ec 10             	sub    esp,0x10
c000fc90:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000fc94:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000fc99:	53                   	push   ebx
c000fc9a:	e8 bc ff ff ff       	call   c000fc5b <malloc>
c000fc9f:	89 c6                	mov    esi,eax
c000fca1:	83 c4 0c             	add    esp,0xc
c000fca4:	53                   	push   ebx
c000fca5:	6a 00                	push   0x0
c000fca7:	50                   	push   eax
c000fca8:	e8 43 08 ff ff       	call   c00004f0 <memset>
c000fcad:	89 f0                	mov    eax,esi
c000fcaf:	83 c4 14             	add    esp,0x14
c000fcb2:	5b                   	pop    ebx
c000fcb3:	5e                   	pop    esi
c000fcb4:	c3                   	ret    
c000fcb5:	66 90                	xchg   ax,ax
c000fcb7:	90                   	nop

c000fcb8 <KeMailboxTryPost(Mailbox*, void*)>:
c000fcb8:	83 ec 10             	sub    esp,0x10
c000fcbb:	fa                   	cli    
c000fcbc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fcc1:	83 c0 01             	add    eax,0x1
c000fcc4:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fcc9:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fcce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fcd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcd5:	85 c0                	test   eax,eax
c000fcd7:	75 23                	jne    c000fcfc <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000fcd9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fcdd:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000fce1:	89 10                	mov    DWORD PTR [eax],edx
c000fce3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fce7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fcea:	8d 50 01             	lea    edx,[eax+0x1]
c000fced:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fcf1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fcf4:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fcf9:	8d 76 00             	lea    esi,[esi+0x0]
c000fcfc:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fd04:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fd09:	85 c0                	test   eax,eax
c000fd0b:	75 03                	jne    c000fd10 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000fd0d:	fb                   	sti    
c000fd0e:	66 90                	xchg   ax,ax
c000fd10:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fd14:	83 c4 10             	add    esp,0x10
c000fd17:	c3                   	ret    

c000fd18 <KeMailboxTryGet(Mailbox*, void**)>:
c000fd18:	83 ec 10             	sub    esp,0x10
c000fd1b:	fa                   	cli    
c000fd1c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fd21:	83 c0 01             	add    eax,0x1
c000fd24:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fd29:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fd2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd35:	83 f8 01             	cmp    eax,0x1
c000fd38:	75 22                	jne    c000fd5c <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000fd3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd3e:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000fd44:	89 10                	mov    DWORD PTR [eax],edx
c000fd46:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd4a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fd4d:	8d 50 ff             	lea    edx,[eax-0x1]
c000fd50:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000fd57:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000fd5c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fd64:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fd69:	85 c0                	test   eax,eax
c000fd6b:	75 03                	jne    c000fd70 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000fd6d:	fb                   	sti    
c000fd6e:	66 90                	xchg   ax,ax
c000fd70:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fd74:	83 c4 10             	add    esp,0x10
c000fd77:	c3                   	ret    

c000fd78 <KeMailboxCreate()>:
c000fd78:	83 ec 1c             	sub    esp,0x1c
c000fd7b:	83 ec 0c             	sub    esp,0xc
c000fd7e:	6a 08                	push   0x8
c000fd80:	e8 d6 fe ff ff       	call   c000fc5b <malloc>
c000fd85:	83 c4 10             	add    esp,0x10
c000fd88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd90:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fd96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fda1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fda5:	83 c4 1c             	add    esp,0x1c
c000fda8:	c3                   	ret    
c000fda9:	8d 76 00             	lea    esi,[esi+0x0]

c000fdac <KeMailboxPost(Mailbox*, void*)>:
c000fdac:	83 ec 1c             	sub    esp,0x1c
c000fdaf:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fdb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fdbc:	e8 f7 fe ff ff       	call   c000fcb8 <KeMailboxTryPost(Mailbox*, void*)>
c000fdc1:	83 c4 08             	add    esp,0x8
c000fdc4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fdc8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fdcc:	83 f0 01             	xor    eax,0x1
c000fdcf:	0f b6 c0             	movzx  eax,al
c000fdd2:	85 c0                	test   eax,eax
c000fdd4:	74 26                	je     c000fdfc <KeMailboxPost(Mailbox*, void*)+0x50>
c000fdd6:	fa                   	cli    
c000fdd7:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fddc:	83 c0 01             	add    eax,0x1
c000fddf:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fde4:	e8 d7 6d 00 00       	call   c0016bc0 <schedule()>
c000fde9:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fdf1:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fdf6:	85 c0                	test   eax,eax
c000fdf8:	75 02                	jne    c000fdfc <KeMailboxPost(Mailbox*, void*)+0x50>
c000fdfa:	fb                   	sti    
c000fdfb:	90                   	nop
c000fdfc:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fe01:	85 c0                	test   eax,eax
c000fe03:	75 03                	jne    c000fe08 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000fe05:	eb ad                	jmp    c000fdb4 <KeMailboxPost(Mailbox*, void*)+0x8>
c000fe07:	90                   	nop
c000fe08:	90                   	nop
c000fe09:	83 c4 1c             	add    esp,0x1c
c000fe0c:	c3                   	ret    
c000fe0d:	8d 76 00             	lea    esi,[esi+0x0]

c000fe10 <KeMailboxGet(Mailbox*, void**)>:
c000fe10:	83 ec 1c             	sub    esp,0x1c
c000fe13:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000fe18:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fe20:	e8 f3 fe ff ff       	call   c000fd18 <KeMailboxTryGet(Mailbox*, void**)>
c000fe25:	83 c4 08             	add    esp,0x8
c000fe28:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000fe2c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000fe30:	83 f0 01             	xor    eax,0x1
c000fe33:	0f b6 c0             	movzx  eax,al
c000fe36:	85 c0                	test   eax,eax
c000fe38:	74 26                	je     c000fe60 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fe3a:	fa                   	cli    
c000fe3b:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe40:	83 c0 01             	add    eax,0x1
c000fe43:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c000fe48:	e8 73 6d 00 00       	call   c0016bc0 <schedule()>
c000fe4d:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c000fe55:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c000fe5a:	85 c0                	test   eax,eax
c000fe5c:	75 02                	jne    c000fe60 <KeMailboxGet(Mailbox*, void**)+0x50>
c000fe5e:	fb                   	sti    
c000fe5f:	90                   	nop
c000fe60:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000fe65:	85 c0                	test   eax,eax
c000fe67:	75 03                	jne    c000fe6c <KeMailboxGet(Mailbox*, void**)+0x5c>
c000fe69:	eb ad                	jmp    c000fe18 <KeMailboxGet(Mailbox*, void**)+0x8>
c000fe6b:	90                   	nop
c000fe6c:	90                   	nop
c000fe6d:	83 c4 1c             	add    esp,0x1c
c000fe70:	c3                   	ret    
c000fe71:	8d 76 00             	lea    esi,[esi+0x0]

c000fe74 <KeMailboxDestroy(Mailbox*)>:
c000fe74:	83 ec 0c             	sub    esp,0xc
c000fe77:	83 ec 0c             	sub    esp,0xc
c000fe7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe7e:	e8 e8 fd ff ff       	call   c000fc6b <free>
c000fe83:	83 c4 10             	add    esp,0x10
c000fe86:	90                   	nop
c000fe87:	83 c4 0c             	add    esp,0xc
c000fe8a:	c3                   	ret    

c000fe8b <KeEntryPoint>:
c000fe8b:	57                   	push   edi
c000fe8c:	bf f9 03 00 00       	mov    edi,0x3f9
c000fe91:	56                   	push   esi
c000fe92:	89 fa                	mov    edx,edi
c000fe94:	53                   	push   ebx
c000fe95:	31 f6                	xor    esi,esi
c000fe97:	83 ec 2c             	sub    esp,0x2c
c000fe9a:	a1 00 05 00 00       	mov    eax,ds:0x500
c000fe9f:	a3 24 e1 02 c0       	mov    ds:0xc002e124,eax
c000fea4:	89 f0                	mov    eax,esi
c000fea6:	ee                   	out    dx,al
c000fea7:	bb fb 03 00 00       	mov    ebx,0x3fb
c000feac:	b0 80                	mov    al,0x80
c000feae:	89 da                	mov    edx,ebx
c000feb0:	ee                   	out    dx,al
c000feb1:	b1 03                	mov    cl,0x3
c000feb3:	ba f8 03 00 00       	mov    edx,0x3f8
c000feb8:	88 c8                	mov    al,cl
c000feba:	ee                   	out    dx,al
c000febb:	89 f0                	mov    eax,esi
c000febd:	89 fa                	mov    edx,edi
c000febf:	ee                   	out    dx,al
c000fec0:	88 c8                	mov    al,cl
c000fec2:	89 da                	mov    edx,ebx
c000fec4:	ee                   	out    dx,al
c000fec5:	b0 c7                	mov    al,0xc7
c000fec7:	ba fa 03 00 00       	mov    edx,0x3fa
c000fecc:	ee                   	out    dx,al
c000fecd:	b0 0b                	mov    al,0xb
c000fecf:	ba fc 03 00 00       	mov    edx,0x3fc
c000fed4:	ee                   	out    dx,al
c000fed5:	68 6b 3b 02 c0       	push   0xc0023b6b
c000feda:	e8 85 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fedf:	e8 10 d3 ff ff       	call   c000d1f4 <KeDisplaySplashScreen()>
c000fee4:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fee9:	05 ff 0f 00 00       	add    eax,0xfff
c000feee:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fef3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fef6:	e8 2c 04 00 00       	call   c0010327 <Phys::physicalMemorySetup(unsigned int)>
c000fefb:	e8 73 36 00 00       	call   c0013573 <Virt::virtualMemorySetup()>
c000ff00:	e8 39 d2 ff ff       	call   c000d13e <KeInitialiseAtexit()>
c000ff05:	c7 04 24 82 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b82
c000ff0c:	e8 53 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff11:	58                   	pop    eax
c000ff12:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000ff16:	53                   	push   ebx
c000ff17:	e8 3e 39 00 00       	call   c001385a <VAS::VAS()>
c000ff1c:	c7 04 24 92 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b92
c000ff23:	89 1d 50 e2 02 c0    	mov    DWORD PTR ds:0xc002e250,ebx
c000ff29:	e8 36 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff2e:	e8 db 17 01 00       	call   c002170e <_init>
c000ff33:	c7 04 24 a6 3b 02 c0 	mov    DWORD PTR [esp],0xc0023ba6
c000ff3a:	e8 25 70 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff3f:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000ff46:	e8 10 fd ff ff       	call   c000fc5b <malloc>
c000ff4b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ff4e:	89 c6                	mov    esi,eax
c000ff50:	e8 67 e3 ff ff       	call   c000e2bc <Computer::Computer()>
c000ff55:	5a                   	pop    edx
c000ff56:	89 35 d0 c0 02 c0    	mov    DWORD PTR ds:0xc002c0d0,esi
c000ff5c:	59                   	pop    ecx
c000ff5d:	56                   	push   esi
c000ff5e:	68 b5 3b 02 c0       	push   0xc0023bb5
c000ff63:	e8 fc 6f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ff68:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c000ff6d:	8b 10                	mov    edx,DWORD PTR [eax]
c000ff6f:	53                   	push   ebx
c000ff70:	6a 00                	push   0x0
c000ff72:	6a 00                	push   0x0
c000ff74:	50                   	push   eax
c000ff75:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ff78:	83 c4 14             	add    esp,0x14
c000ff7b:	53                   	push   ebx
c000ff7c:	e8 8f 39 00 00       	call   c0013910 <VAS::~VAS()>
c000ff81:	83 c4 30             	add    esp,0x30
c000ff84:	5b                   	pop    ebx
c000ff85:	5e                   	pop    esi
c000ff86:	5f                   	pop    edi
c000ff87:	c3                   	ret    

c000ff88 <Mutex::Mutex()>:
c000ff88:	83 ec 0c             	sub    esp,0xc
c000ff8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff8f:	83 ec 08             	sub    esp,0x8
c000ff92:	6a 01                	push   0x1
c000ff94:	50                   	push   eax
c000ff95:	e8 56 0c 00 00       	call   c0010bf0 <Semaphore::Semaphore(int)>
c000ff9a:	83 c4 10             	add    esp,0x10
c000ff9d:	90                   	nop
c000ff9e:	83 c4 0c             	add    esp,0xc
c000ffa1:	c3                   	ret    

c000ffa2 <KePanic(char const*)>:
c000ffa2:	c6 05 28 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e128,0x1
c000ffa9:	e9 9f 9b 00 00       	jmp    c0019b4d <HalPanic(char const*)>

c000ffae <Phys::allocateDMA(unsigned long)>:
c000ffae:	55                   	push   ebp
c000ffaf:	31 ed                	xor    ebp,ebp
c000ffb1:	57                   	push   edi
c000ffb2:	56                   	push   esi
c000ffb3:	53                   	push   ebx
c000ffb4:	31 db                	xor    ebx,ebx
c000ffb6:	83 ec 1c             	sub    esp,0x1c
c000ffb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ffbd:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ffc5:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000ffcb:	31 c0                	xor    eax,eax
c000ffcd:	c1 ef 0c             	shr    edi,0xc
c000ffd0:	eb 1b                	jmp    c000ffed <Phys::allocateDMA(unsigned long)+0x3f>
c000ffd2:	85 c0                	test   eax,eax
c000ffd4:	75 06                	jne    c000ffdc <Phys::allocateDMA(unsigned long)+0x2e>
c000ffd6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ffda:	89 dd                	mov    ebp,ebx
c000ffdc:	8d 70 01             	lea    esi,[eax+0x1]
c000ffdf:	39 f7                	cmp    edi,esi
c000ffe1:	74 37                	je     c001001a <Phys::allocateDMA(unsigned long)+0x6c>
c000ffe3:	89 f0                	mov    eax,esi
c000ffe5:	83 c3 01             	add    ebx,0x1
c000ffe8:	83 fb 0f             	cmp    ebx,0xf
c000ffeb:	7f 13                	jg     c0010000 <Phys::allocateDMA(unsigned long)+0x52>
c000ffed:	80 bb 44 e1 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd1ebc],0x0
c000fff4:	74 dc                	je     c000ffd2 <Phys::allocateDMA(unsigned long)+0x24>
c000fff6:	31 c0                	xor    eax,eax
c000fff8:	83 c3 01             	add    ebx,0x1
c000fffb:	83 fb 0f             	cmp    ebx,0xf
c000fffe:	7e ed                	jle    c000ffed <Phys::allocateDMA(unsigned long)+0x3f>
c0010000:	83 ec 0c             	sub    esp,0xc
c0010003:	68 cc 3b 02 c0       	push   0xc0023bcc
c0010008:	e8 95 ff ff ff       	call   c000ffa2 <KePanic(char const*)>
c001000d:	83 c4 10             	add    esp,0x10
c0010010:	31 c0                	xor    eax,eax
c0010012:	83 c4 1c             	add    esp,0x1c
c0010015:	5b                   	pop    ebx
c0010016:	5e                   	pop    esi
c0010017:	5f                   	pop    edi
c0010018:	5d                   	pop    ebp
c0010019:	c3                   	ret    
c001001a:	89 e9                	mov    ecx,ebp
c001001c:	c1 f9 04             	sar    ecx,0x4
c001001f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0010023:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0010027:	89 ca                	mov    edx,ecx
c0010029:	83 ea 01             	sub    edx,0x1
c001002c:	79 03                	jns    c0010031 <Phys::allocateDMA(unsigned long)+0x83>
c001002e:	8d 51 0e             	lea    edx,[ecx+0xe]
c0010031:	c1 fa 04             	sar    edx,0x4
c0010034:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0010038:	74 08                	je     c0010042 <Phys::allocateDMA(unsigned long)+0x94>
c001003a:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001003e:	31 c0                	xor    eax,eax
c0010040:	eb b6                	jmp    c000fff8 <Phys::allocateDMA(unsigned long)+0x4a>
c0010042:	85 f6                	test   esi,esi
c0010044:	74 17                	je     c001005d <Phys::allocateDMA(unsigned long)+0xaf>
c0010046:	8d 95 44 e1 02 c0    	lea    edx,[ebp-0x3ffd1ebc]
c001004c:	8d 84 05 45 e1 02 c0 	lea    eax,[ebp+eax*1-0x3ffd1ebb]
c0010053:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0010056:	83 c2 01             	add    edx,0x1
c0010059:	39 d0                	cmp    eax,edx
c001005b:	75 f6                	jne    c0010053 <Phys::allocateDMA(unsigned long)+0xa5>
c001005d:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c0010062:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010066:	01 f8                	add    eax,edi
c0010068:	85 d2                	test   edx,edx
c001006a:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c001006f:	74 17                	je     c0010088 <Phys::allocateDMA(unsigned long)+0xda>
c0010071:	83 ec 0c             	sub    esp,0xc
c0010074:	68 cc 3b 02 c0       	push   0xc0023bcc
c0010079:	e8 24 ff ff ff       	call   c000ffa2 <KePanic(char const*)>
c001007e:	83 c4 10             	add    esp,0x10
c0010081:	89 f0                	mov    eax,esi
c0010083:	e9 5d ff ff ff       	jmp    c000ffe5 <Phys::allocateDMA(unsigned long)+0x37>
c0010088:	c1 e5 0c             	shl    ebp,0xc
c001008b:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0010091:	e9 7c ff ff ff       	jmp    c0010012 <Phys::allocateDMA(unsigned long)+0x64>

c0010096 <Phys::freeDMA(unsigned long, unsigned long)>:
c0010096:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001009a:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00100a0:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c00100a5:	c1 ea 0c             	shr    edx,0xc
c00100a8:	29 d0                	sub    eax,edx
c00100aa:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c00100af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100b3:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00100b8:	c1 e8 0c             	shr    eax,0xc
c00100bb:	85 d2                	test   edx,edx
c00100bd:	74 11                	je     c00100d0 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c00100bf:	05 44 e1 02 c0       	add    eax,0xc002e144
c00100c4:	01 c2                	add    edx,eax
c00100c6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00100c9:	83 c0 01             	add    eax,0x1
c00100cc:	39 d0                	cmp    eax,edx
c00100ce:	75 f6                	jne    c00100c6 <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c00100d0:	c3                   	ret    

c00100d1 <Phys::setPageState(unsigned long, bool)>:
c00100d1:	57                   	push   edi
c00100d2:	56                   	push   esi
c00100d3:	8b 35 f4 60 02 c0    	mov    esi,DWORD PTR ds:0xc00260f4
c00100d9:	53                   	push   ebx
c00100da:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c00100df:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00100e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00100e7:	0f b6 c0             	movzx  eax,al
c00100ea:	89 ca                	mov    edx,ecx
c00100ec:	83 e1 07             	and    ecx,0x7
c00100ef:	c1 ea 03             	shr    edx,0x3
c00100f2:	d3 c3                	rol    ebx,cl
c00100f4:	01 d6                	add    esi,edx
c00100f6:	d3 e0                	shl    eax,cl
c00100f8:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c00100fb:	21 fb                	and    ebx,edi
c00100fd:	88 1e                	mov    BYTE PTR [esi],bl
c00100ff:	8b 1d f4 60 02 c0    	mov    ebx,DWORD PTR ds:0xc00260f4
c0010105:	01 da                	add    edx,ebx
c0010107:	8a 0a                	mov    cl,BYTE PTR [edx]
c0010109:	09 c8                	or     eax,ecx
c001010b:	88 02                	mov    BYTE PTR [edx],al
c001010d:	5b                   	pop    ebx
c001010e:	5e                   	pop    esi
c001010f:	5f                   	pop    edi
c0010110:	c3                   	ret    

c0010111 <Phys::getPageState(unsigned long)>:
c0010111:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0010115:	8b 15 f4 60 02 c0    	mov    edx,DWORD PTR ds:0xc00260f4
c001011b:	89 c8                	mov    eax,ecx
c001011d:	83 e1 07             	and    ecx,0x7
c0010120:	c1 e8 03             	shr    eax,0x3
c0010123:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0010127:	d3 f8                	sar    eax,cl
c0010129:	83 e0 01             	and    eax,0x1
c001012c:	c3                   	ret    

c001012d <Phys::freePage(unsigned long)>:
c001012d:	53                   	push   ebx
c001012e:	83 ec 08             	sub    esp,0x8
c0010131:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010135:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c001013b:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0010141:	76 41                	jbe    c0010184 <Phys::freePage(unsigned long)+0x57>
c0010143:	c1 e8 0c             	shr    eax,0xc
c0010146:	50                   	push   eax
c0010147:	89 c3                	mov    ebx,eax
c0010149:	e8 c3 ff ff ff       	call   c0010111 <Phys::getPageState(unsigned long)>
c001014e:	5a                   	pop    edx
c001014f:	84 c0                	test   al,al
c0010151:	74 20                	je     c0010173 <Phys::freePage(unsigned long)+0x46>
c0010153:	83 ec 08             	sub    esp,0x8
c0010156:	a1 3c e1 02 c0       	mov    eax,ds:0xc002e13c
c001015b:	6a 00                	push   0x0
c001015d:	83 e8 01             	sub    eax,0x1
c0010160:	53                   	push   ebx
c0010161:	a3 3c e1 02 c0       	mov    ds:0xc002e13c,eax
c0010166:	e8 66 ff ff ff       	call   c00100d1 <Phys::setPageState(unsigned long, bool)>
c001016b:	83 c4 10             	add    esp,0x10
c001016e:	83 c4 08             	add    esp,0x8
c0010171:	5b                   	pop    ebx
c0010172:	c3                   	ret    
c0010173:	c7 44 24 10 d1 3c 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023cd1
c001017b:	83 c4 08             	add    esp,0x8
c001017e:	5b                   	pop    ebx
c001017f:	e9 1e fe ff ff       	jmp    c000ffa2 <KePanic(char const*)>
c0010184:	68 00 10 00 00       	push   0x1000
c0010189:	50                   	push   eax
c001018a:	e8 07 ff ff ff       	call   c0010096 <Phys::freeDMA(unsigned long, unsigned long)>
c001018f:	59                   	pop    ecx
c0010190:	5b                   	pop    ebx
c0010191:	83 c4 08             	add    esp,0x8
c0010194:	5b                   	pop    ebx
c0010195:	c3                   	ret    

c0010196 <Phys::allocatePage()>:
c0010196:	56                   	push   esi
c0010197:	53                   	push   ebx
c0010198:	83 ec 14             	sub    esp,0x14
c001019b:	8b 35 30 e1 02 c0    	mov    esi,DWORD PTR ds:0xc002e130
c00101a1:	89 f3                	mov    ebx,esi
c00101a3:	eb 0a                	jmp    c00101af <Phys::allocatePage()+0x19>
c00101a5:	89 1d 30 e1 02 c0    	mov    DWORD PTR ds:0xc002e130,ebx
c00101ab:	39 de                	cmp    esi,ebx
c00101ad:	74 26                	je     c00101d5 <Phys::allocatePage()+0x3f>
c00101af:	53                   	push   ebx
c00101b0:	e8 5c ff ff ff       	call   c0010111 <Phys::getPageState(unsigned long)>
c00101b5:	59                   	pop    ecx
c00101b6:	84 c0                	test   al,al
c00101b8:	74 67                	je     c0010221 <Phys::allocatePage()+0x8b>
c00101ba:	83 c3 01             	add    ebx,0x1
c00101bd:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00101c3:	75 e0                	jne    c00101a5 <Phys::allocatePage()+0xf>
c00101c5:	31 db                	xor    ebx,ebx
c00101c7:	c7 05 30 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e130,0x0
c00101d1:	39 de                	cmp    esi,ebx
c00101d3:	75 da                	jne    c00101af <Phys::allocatePage()+0x19>
c00101d5:	83 ec 0c             	sub    esp,0xc
c00101d8:	a0 54 e1 02 c0       	mov    al,ds:0xc002e154
c00101dd:	83 f0 01             	xor    eax,0x1
c00101e0:	a2 54 e1 02 c0       	mov    ds:0xc002e154,al
c00101e5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00101ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00101ed:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00101f3:	51                   	push   ecx
c00101f4:	e8 c7 43 00 00       	call   c00145c0 <VAS::scanForEviction()>
c00101f9:	83 c4 10             	add    esp,0x10
c00101fc:	85 c0                	test   eax,eax
c00101fe:	75 48                	jne    c0010248 <Phys::allocatePage()+0xb2>
c0010200:	83 ec 0c             	sub    esp,0xc
c0010203:	68 f4 3b 02 c0       	push   0xc0023bf4
c0010208:	e8 95 fd ff ff       	call   c000ffa2 <KePanic(char const*)>
c001020d:	83 c4 10             	add    esp,0x10
c0010210:	8b 1d 30 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e130
c0010216:	53                   	push   ebx
c0010217:	e8 f5 fe ff ff       	call   c0010111 <Phys::getPageState(unsigned long)>
c001021c:	59                   	pop    ecx
c001021d:	84 c0                	test   al,al
c001021f:	75 99                	jne    c00101ba <Phys::allocatePage()+0x24>
c0010221:	6a 01                	push   0x1
c0010223:	53                   	push   ebx
c0010224:	e8 a8 fe ff ff       	call   c00100d1 <Phys::setPageState(unsigned long, bool)>
c0010229:	8b 1d 3c e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e13c
c001022f:	a1 30 e1 02 c0       	mov    eax,ds:0xc002e130
c0010234:	83 c3 01             	add    ebx,0x1
c0010237:	5e                   	pop    esi
c0010238:	89 1d 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,ebx
c001023e:	c1 e0 0c             	shl    eax,0xc
c0010241:	5a                   	pop    edx
c0010242:	83 c4 14             	add    esp,0x14
c0010245:	5b                   	pop    ebx
c0010246:	5e                   	pop    esi
c0010247:	c3                   	ret    
c0010248:	83 ec 08             	sub    esp,0x8
c001024b:	8b 15 3c e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e13c
c0010251:	6a 01                	push   0x1
c0010253:	83 c2 01             	add    edx,0x1
c0010256:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001025a:	89 15 3c e1 02 c0    	mov    DWORD PTR ds:0xc002e13c,edx
c0010260:	89 c2                	mov    edx,eax
c0010262:	c1 ea 0c             	shr    edx,0xc
c0010265:	52                   	push   edx
c0010266:	e8 66 fe ff ff       	call   c00100d1 <Phys::setPageState(unsigned long, bool)>
c001026b:	83 c4 10             	add    esp,0x10
c001026e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010272:	eb ce                	jmp    c0010242 <Phys::allocatePage()+0xac>

c0010274 <Phys::allocateContiguousPages(int)>:
c0010274:	57                   	push   edi
c0010275:	56                   	push   esi
c0010276:	53                   	push   ebx
c0010277:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001027b:	fa                   	cli    
c001027c:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0010282:	83 ec 0c             	sub    esp,0xc
c0010285:	83 c2 01             	add    edx,0x1
c0010288:	68 24 3c 02 c0       	push   0xc0023c24
c001028d:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c0010293:	31 db                	xor    ebx,ebx
c0010295:	e8 ca 6c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001029a:	83 c4 10             	add    esp,0x10
c001029d:	85 db                	test   ebx,ebx
c001029f:	75 11                	jne    c00102b2 <Phys::allocateContiguousPages(int)+0x3e>
c00102a1:	e8 f0 fe ff ff       	call   c0010196 <Phys::allocatePage()>
c00102a6:	83 ff 01             	cmp    edi,0x1
c00102a9:	89 c6                	mov    esi,eax
c00102ab:	74 21                	je     c00102ce <Phys::allocateContiguousPages(int)+0x5a>
c00102ad:	bb 01 00 00 00       	mov    ebx,0x1
c00102b2:	e8 df fe ff ff       	call   c0010196 <Phys::allocatePage()>
c00102b7:	89 da                	mov    edx,ebx
c00102b9:	c1 e2 0c             	shl    edx,0xc
c00102bc:	01 f2                	add    edx,esi
c00102be:	39 c2                	cmp    edx,eax
c00102c0:	74 24                	je     c00102e6 <Phys::allocateContiguousPages(int)+0x72>
c00102c2:	bb 01 00 00 00       	mov    ebx,0x1
c00102c7:	89 c6                	mov    esi,eax
c00102c9:	83 ff 01             	cmp    edi,0x1
c00102cc:	75 e4                	jne    c00102b2 <Phys::allocateContiguousPages(int)+0x3e>
c00102ce:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00102d6:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00102db:	85 c0                	test   eax,eax
c00102dd:	75 01                	jne    c00102e0 <Phys::allocateContiguousPages(int)+0x6c>
c00102df:	fb                   	sti    
c00102e0:	89 f0                	mov    eax,esi
c00102e2:	5b                   	pop    ebx
c00102e3:	5e                   	pop    esi
c00102e4:	5f                   	pop    edi
c00102e5:	c3                   	ret    
c00102e6:	83 c3 01             	add    ebx,0x1
c00102e9:	39 fb                	cmp    ebx,edi
c00102eb:	75 b0                	jne    c001029d <Phys::allocateContiguousPages(int)+0x29>
c00102ed:	eb df                	jmp    c00102ce <Phys::allocateContiguousPages(int)+0x5a>

c00102ef <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c00102ef:	56                   	push   esi
c00102f0:	53                   	push   ebx
c00102f1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00102f5:	39 1d 34 e1 02 c0    	cmp    DWORD PTR ds:0xc002e134,ebx
c00102fb:	73 06                	jae    c0010303 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c00102fd:	89 1d 34 e1 02 c0    	mov    DWORD PTR ds:0xc002e134,ebx
c0010303:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010307:	c1 eb 0c             	shr    ebx,0xc
c001030a:	c1 e8 0c             	shr    eax,0xc
c001030d:	39 d8                	cmp    eax,ebx
c001030f:	73 13                	jae    c0010324 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010311:	6a 00                	push   0x0
c0010313:	8d 70 01             	lea    esi,[eax+0x1]
c0010316:	50                   	push   eax
c0010317:	e8 b5 fd ff ff       	call   c00100d1 <Phys::setPageState(unsigned long, bool)>
c001031c:	5a                   	pop    edx
c001031d:	89 f0                	mov    eax,esi
c001031f:	59                   	pop    ecx
c0010320:	39 f3                	cmp    ebx,esi
c0010322:	75 ed                	jne    c0010311 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010324:	5b                   	pop    ebx
c0010325:	5e                   	pop    esi
c0010326:	c3                   	ret    

c0010327 <Phys::physicalMemorySetup(unsigned int)>:
c0010327:	55                   	push   ebp
c0010328:	57                   	push   edi
c0010329:	56                   	push   esi
c001032a:	53                   	push   ebx
c001032b:	83 ec 40             	sub    esp,0x40
c001032e:	6a 10                	push   0x10
c0010330:	6a 00                	push   0x0
c0010332:	68 44 e1 02 c0       	push   0xc002e144
c0010337:	e8 b4 01 ff ff       	call   c00004f0 <memset>
c001033c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0010340:	25 00 f0 ff ff       	and    eax,0xfffff000
c0010345:	05 00 10 00 00       	add    eax,0x1000
c001034a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001034e:	5b                   	pop    ebx
c001034f:	31 db                	xor    ebx,ebx
c0010351:	5e                   	pop    esi
c0010352:	50                   	push   eax
c0010353:	68 e7 3c 02 c0       	push   0xc0023ce7
c0010358:	e8 07 6c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001035d:	83 c4 10             	add    esp,0x10
c0010360:	83 ec 08             	sub    esp,0x8
c0010363:	6a 01                	push   0x1
c0010365:	53                   	push   ebx
c0010366:	83 c3 01             	add    ebx,0x1
c0010369:	e8 63 fd ff ff       	call   c00100d1 <Phys::setPageState(unsigned long, bool)>
c001036e:	83 c4 10             	add    esp,0x10
c0010371:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0010377:	75 e7                	jne    c0010360 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0010379:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0010380:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0010387:	c1 e0 08             	shl    eax,0x8
c001038a:	09 c2                	or     edx,eax
c001038c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0010390:	0f 84 98 01 00 00    	je     c001052e <Phys::physicalMemorySetup(unsigned int)+0x207>
c0010396:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001039a:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00103a2:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00103a7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00103ab:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00103b3:	eb 1c                	jmp    c00103d1 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c00103b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00103b9:	83 c3 18             	add    ebx,0x18
c00103bc:	83 c6 01             	add    esi,0x1
c00103bf:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00103c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00103c7:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00103cb:	0f 84 6d 01 00 00    	je     c001053e <Phys::physicalMemorySetup(unsigned int)+0x217>
c00103d1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00103d4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00103d7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00103da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00103de:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00103e2:	8b 33                	mov    esi,DWORD PTR [ebx]
c00103e4:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c00103e7:	01 f0                	add    eax,esi
c00103e9:	55                   	push   ebp
c00103ea:	11 fa                	adc    edx,edi
c00103ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00103f0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00103f4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00103f8:	51                   	push   ecx
c00103f9:	56                   	push   esi
c00103fa:	68 84 3c 02 c0       	push   0xc0023c84
c00103ff:	e8 60 6b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010404:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010408:	83 c4 10             	add    esp,0x10
c001040b:	09 f8                	or     eax,edi
c001040d:	0f 85 2b 01 00 00    	jne    c001053e <Phys::physicalMemorySetup(unsigned int)+0x217>
c0010413:	83 fd 01             	cmp    ebp,0x1
c0010416:	75 9d                	jne    c00103b5 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0010418:	ba 00 00 08 00       	mov    edx,0x80000
c001041d:	89 c1                	mov    ecx,eax
c001041f:	39 f2                	cmp    edx,esi
c0010421:	19 f9                	sbb    ecx,edi
c0010423:	0f 82 ab 00 00 00    	jb     c00104d4 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0010429:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001042d:	89 c1                	mov    ecx,eax
c001042f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010433:	0f 83 9b 00 00 00    	jae    c00104d4 <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c0010439:	ba 00 00 0a 00       	mov    edx,0xa0000
c001043e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010442:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010446:	39 fa                	cmp    edx,edi
c0010448:	19 e8                	sbb    eax,ebp
c001044a:	0f 82 b0 01 00 00    	jb     c0010600 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0010450:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010454:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010458:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c001045e:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010463:	83 d5 ff             	adc    ebp,0xffffffff
c0010466:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c001046a:	31 c0                	xor    eax,eax
c001046c:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0010470:	39 fa                	cmp    edx,edi
c0010472:	89 c1                	mov    ecx,eax
c0010474:	19 e9                	sbb    ecx,ebp
c0010476:	0f 83 39 ff ff ff    	jae    c00103b5 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c001047c:	be 00 00 08 00       	mov    esi,0x80000
c0010481:	83 ec 04             	sub    esp,0x4
c0010484:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0010488:	57                   	push   edi
c0010489:	56                   	push   esi
c001048a:	68 a8 3c 02 c0       	push   0xc0023ca8
c001048f:	e8 d0 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010494:	5d                   	pop    ebp
c0010495:	58                   	pop    eax
c0010496:	57                   	push   edi
c0010497:	56                   	push   esi
c0010498:	e8 52 fe ff ff       	call   c00102ef <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c001049d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00104a1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00104a5:	83 c4 0c             	add    esp,0xc
c00104a8:	0f ac d0 0c          	shrd   eax,edx,0xc
c00104ac:	8b 15 40 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e140
c00104b2:	01 d0                	add    eax,edx
c00104b4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00104bb:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00104c0:	52                   	push   edx
c00104c1:	50                   	push   eax
c00104c2:	68 0d 3d 02 c0       	push   0xc0023d0d
c00104c7:	e8 98 6a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00104cc:	83 c4 10             	add    esp,0x10
c00104cf:	e9 e1 fe ff ff       	jmp    c00103b5 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00104d4:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00104d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00104dc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00104e0:	39 ea                	cmp    edx,ebp
c00104e2:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00104e6:	0f 82 c9 fe ff ff    	jb     c00103b5 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00104ec:	ba ff 1f 00 00       	mov    edx,0x1fff
c00104f1:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00104f5:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00104f9:	0f 83 b6 fe ff ff    	jae    c00103b5 <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00104ff:	39 ee                	cmp    esi,ebp
c0010501:	89 f8                	mov    eax,edi
c0010503:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010507:	0f 83 74 ff ff ff    	jae    c0010481 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001050d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010511:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010515:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010519:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001051d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010521:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010525:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010529:	e9 53 ff ff ff       	jmp    c0010481 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c001052e:	83 ec 0c             	sub    esp,0xc
c0010531:	68 ff 3c 02 c0       	push   0xc0023cff
c0010536:	e8 67 fa ff ff       	call   c000ffa2 <KePanic(char const*)>
c001053b:	83 c4 10             	add    esp,0x10
c001053e:	83 ec 08             	sub    esp,0x8
c0010541:	bb 60 00 00 00       	mov    ebx,0x60
c0010546:	6a 00                	push   0x0
c0010548:	6a 06                	push   0x6
c001054a:	e8 82 fb ff ff       	call   c00100d1 <Phys::setPageState(unsigned long, bool)>
c001054f:	58                   	pop    eax
c0010550:	5a                   	pop    edx
c0010551:	6a 00                	push   0x0
c0010553:	6a 07                	push   0x7
c0010555:	e8 77 fb ff ff       	call   c00100d1 <Phys::setPageState(unsigned long, bool)>
c001055a:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c0010560:	83 c4 10             	add    esp,0x10
c0010563:	83 c1 02             	add    ecx,0x2
c0010566:	89 0d 40 e1 02 c0    	mov    DWORD PTR ds:0xc002e140,ecx
c001056c:	83 ec 08             	sub    esp,0x8
c001056f:	6a 00                	push   0x0
c0010571:	53                   	push   ebx
c0010572:	83 c3 01             	add    ebx,0x1
c0010575:	e8 57 fb ff ff       	call   c00100d1 <Phys::setPageState(unsigned long, bool)>
c001057a:	83 c4 10             	add    esp,0x10
c001057d:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0010583:	75 e7                	jne    c001056c <Phys::physicalMemorySetup(unsigned int)+0x245>
c0010585:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c001058a:	bb 40 01 00 00       	mov    ebx,0x140
c001058f:	83 c0 20             	add    eax,0x20
c0010592:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c0010597:	eb 26                	jmp    c00105bf <Phys::physicalMemorySetup(unsigned int)+0x298>
c0010599:	83 ec 08             	sub    esp,0x8
c001059c:	6a 00                	push   0x0
c001059e:	53                   	push   ebx
c001059f:	83 c3 01             	add    ebx,0x1
c00105a2:	e8 2a fb ff ff       	call   c00100d1 <Phys::setPageState(unsigned long, bool)>
c00105a7:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00105ac:	83 c4 10             	add    esp,0x10
c00105af:	83 c0 01             	add    eax,0x1
c00105b2:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00105b8:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00105bd:	74 07                	je     c00105c6 <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00105bf:	3d ff 03 00 00       	cmp    eax,0x3ff
c00105c4:	7e d3                	jle    c0010599 <Phys::physicalMemorySetup(unsigned int)+0x272>
c00105c6:	bb d0 01 00 00       	mov    ebx,0x1d0
c00105cb:	3d ff 07 00 00       	cmp    eax,0x7ff
c00105d0:	7f 26                	jg     c00105f8 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00105d2:	83 ec 08             	sub    esp,0x8
c00105d5:	6a 00                	push   0x0
c00105d7:	53                   	push   ebx
c00105d8:	83 c3 01             	add    ebx,0x1
c00105db:	e8 f1 fa ff ff       	call   c00100d1 <Phys::setPageState(unsigned long, bool)>
c00105e0:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c00105e5:	83 c4 10             	add    esp,0x10
c00105e8:	83 c0 01             	add    eax,0x1
c00105eb:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00105f1:	a3 40 e1 02 c0       	mov    ds:0xc002e140,eax
c00105f6:	75 d3                	jne    c00105cb <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00105f8:	83 c4 3c             	add    esp,0x3c
c00105fb:	5b                   	pop    ebx
c00105fc:	5e                   	pop    esi
c00105fd:	5f                   	pop    edi
c00105fe:	5d                   	pop    ebp
c00105ff:	c3                   	ret    
c0010600:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0010608:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010610:	e9 3b fe ff ff       	jmp    c0010450 <Phys::physicalMemorySetup(unsigned int)+0x129>
c0010615:	90                   	nop

c0010616 <Pipe::isAtty()>:
c0010616:	31 c0                	xor    eax,eax
c0010618:	c3                   	ret    
c0010619:	90                   	nop

c001061a <Pipe::~Pipe()>:
c001061a:	83 ec 0c             	sub    esp,0xc
c001061d:	ba 6c 3d 02 c0       	mov    edx,0xc0023d6c
c0010622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010626:	89 10                	mov    DWORD PTR [eax],edx
c0010628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001062c:	83 ec 0c             	sub    esp,0xc
c001062f:	50                   	push   eax
c0010630:	e8 e5 2a 00 00       	call   c001311a <UnixFile::~UnixFile()>
c0010635:	83 c4 10             	add    esp,0x10
c0010638:	90                   	nop
c0010639:	83 c4 0c             	add    esp,0xc
c001063c:	c3                   	ret    
c001063d:	90                   	nop

c001063e <Pipe::~Pipe()>:
c001063e:	83 ec 0c             	sub    esp,0xc
c0010641:	83 ec 0c             	sub    esp,0xc
c0010644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010648:	e8 cd ff ff ff       	call   c001061a <Pipe::~Pipe()>
c001064d:	83 c4 10             	add    esp,0x10
c0010650:	83 ec 08             	sub    esp,0x8
c0010653:	6a 20                	push   0x20
c0010655:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010659:	e8 85 cc ff ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c001065e:	83 c4 10             	add    esp,0x10
c0010661:	83 c4 0c             	add    esp,0xc
c0010664:	c3                   	ret    
c0010665:	90                   	nop

c0010666 <Pipe::write(unsigned long long, void*, int*)>:
c0010666:	55                   	push   ebp
c0010667:	57                   	push   edi
c0010668:	56                   	push   esi
c0010669:	53                   	push   ebx
c001066a:	83 ec 1c             	sub    esp,0x1c
c001066d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010671:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010675:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0010678:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001067c:	89 04 24             	mov    DWORD PTR [esp],eax
c001067f:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010683:	89 d8                	mov    eax,ebx
c0010685:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010688:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c001068c:	89 d6                	mov    esi,edx
c001068e:	89 d7                	mov    edi,edx
c0010690:	c1 ff 1f             	sar    edi,0x1f
c0010693:	03 34 24             	add    esi,DWORD PTR [esp]
c0010696:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c001069a:	c1 f8 1f             	sar    eax,0x1f
c001069d:	39 f3                	cmp    ebx,esi
c001069f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00106a3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00106a7:	19 f8                	sbb    eax,edi
c00106a9:	b8 01 00 00 00       	mov    eax,0x1
c00106ae:	72 6e                	jb     c001071e <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00106b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00106b3:	01 d0                	add    eax,edx
c00106b5:	99                   	cdq    
c00106b6:	f7 fb                	idiv   ebx
c00106b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106bc:	29 d3                	sub    ebx,edx
c00106be:	89 d7                	mov    edi,edx
c00106c0:	89 de                	mov    esi,ebx
c00106c2:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00106c5:	c1 fb 1f             	sar    ebx,0x1f
c00106c8:	39 f2                	cmp    edx,esi
c00106ca:	19 d8                	sbb    eax,ebx
c00106cc:	b8 00 00 00 00       	mov    eax,0x0
c00106d1:	72 04                	jb     c00106d7 <Pipe::write(unsigned long long, void*, int*)+0x71>
c00106d3:	89 d0                	mov    eax,edx
c00106d5:	29 f0                	sub    eax,esi
c00106d7:	89 d3                	mov    ebx,edx
c00106d9:	29 c3                	sub    ebx,eax
c00106db:	74 0b                	je     c00106e8 <Pipe::write(unsigned long long, void*, int*)+0x82>
c00106dd:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00106e0:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00106e4:	89 d9                	mov    ecx,ebx
c00106e6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106e8:	85 c0                	test   eax,eax
c00106ea:	74 0d                	je     c00106f9 <Pipe::write(unsigned long long, void*, int*)+0x93>
c00106ec:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00106f0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00106f3:	89 de                	mov    esi,ebx
c00106f5:	89 c1                	mov    ecx,eax
c00106f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106f9:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c00106fc:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010701:	75 10                	jne    c0010713 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0010703:	83 ec 0c             	sub    esp,0xc
c0010706:	68 29 3d 02 c0       	push   0xc0023d29
c001070b:	e8 92 f8 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0010710:	83 c4 10             	add    esp,0x10
c0010713:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010717:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c001071a:	89 08                	mov    DWORD PTR [eax],ecx
c001071c:	31 c0                	xor    eax,eax
c001071e:	83 c4 1c             	add    esp,0x1c
c0010721:	5b                   	pop    ebx
c0010722:	5e                   	pop    esi
c0010723:	5f                   	pop    edi
c0010724:	5d                   	pop    ebp
c0010725:	c3                   	ret    

c0010726 <Pipe::read(unsigned long long, void*, int*)>:
c0010726:	55                   	push   ebp
c0010727:	57                   	push   edi
c0010728:	56                   	push   esi
c0010729:	53                   	push   ebx
c001072a:	83 ec 1c             	sub    esp,0x1c
c001072d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010731:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010735:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010739:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001073c:	89 c8                	mov    eax,ecx
c001073e:	99                   	cdq    
c001073f:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010743:	74 27                	je     c001076c <Pipe::read(unsigned long long, void*, int*)+0x46>
c0010745:	39 f9                	cmp    ecx,edi
c0010747:	89 d1                	mov    ecx,edx
c0010749:	19 f1                	sbb    ecx,esi
c001074b:	73 1f                	jae    c001076c <Pipe::read(unsigned long long, void*, int*)+0x46>
c001074d:	fa                   	cli    
c001074e:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0010754:	e8 67 64 00 00       	call   c0016bc0 <schedule()>
c0010759:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0010760:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0010767:	75 d0                	jne    c0010739 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010769:	fb                   	sti    
c001076a:	eb cd                	jmp    c0010739 <Pipe::read(unsigned long long, void*, int*)+0x13>
c001076c:	39 f8                	cmp    eax,edi
c001076e:	89 d1                	mov    ecx,edx
c0010770:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010773:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0010777:	19 f1                	sbb    ecx,esi
c0010779:	73 07                	jae    c0010782 <Pipe::read(unsigned long long, void*, int*)+0x5c>
c001077b:	89 04 24             	mov    DWORD PTR [esp],eax
c001077e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010782:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010785:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0010788:	29 f7                	sub    edi,esi
c001078a:	89 f8                	mov    eax,edi
c001078c:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0010790:	99                   	cdq    
c0010791:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0010794:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010798:	19 d0                	sbb    eax,edx
c001079a:	73 07                	jae    c00107a3 <Pipe::read(unsigned long long, void*, int*)+0x7d>
c001079c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001079f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00107a3:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00107a6:	89 ea                	mov    edx,ebp
c00107a8:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00107ac:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00107b1:	74 0d                	je     c00107c0 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c00107b3:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00107b6:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00107ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00107be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107c0:	85 d2                	test   edx,edx
c00107c2:	74 11                	je     c00107d5 <Pipe::read(unsigned long long, void*, int*)+0xaf>
c00107c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00107c8:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00107cb:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00107cf:	89 d1                	mov    ecx,edx
c00107d1:	89 c7                	mov    edi,eax
c00107d3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00107d5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00107d8:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00107db:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00107de:	99                   	cdq    
c00107df:	89 f7                	mov    edi,esi
c00107e1:	03 04 24             	add    eax,DWORD PTR [esp]
c00107e4:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00107e8:	c1 ff 1f             	sar    edi,0x1f
c00107eb:	57                   	push   edi
c00107ec:	56                   	push   esi
c00107ed:	52                   	push   edx
c00107ee:	50                   	push   eax
c00107ef:	e8 00 0e 01 00       	call   c00215f4 <__umoddi3>
c00107f4:	83 c4 10             	add    esp,0x10
c00107f7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00107fa:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00107ff:	75 10                	jne    c0010811 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c0010801:	83 ec 0c             	sub    esp,0xc
c0010804:	68 46 3d 02 c0       	push   0xc0023d46
c0010809:	e8 94 f7 ff ff       	call   c000ffa2 <KePanic(char const*)>
c001080e:	83 c4 10             	add    esp,0x10
c0010811:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0010815:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0010818:	89 10                	mov    DWORD PTR [eax],edx
c001081a:	83 c4 1c             	add    esp,0x1c
c001081d:	31 c0                	xor    eax,eax
c001081f:	5b                   	pop    ebx
c0010820:	5e                   	pop    esi
c0010821:	5f                   	pop    edi
c0010822:	5d                   	pop    ebp
c0010823:	c3                   	ret    

c0010824 <Pipe::Pipe(int)>:
c0010824:	83 ec 0c             	sub    esp,0xc
c0010827:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001082b:	83 ec 08             	sub    esp,0x8
c001082e:	6a 00                	push   0x0
c0010830:	50                   	push   eax
c0010831:	e8 fe 26 00 00       	call   c0012f34 <UnixFile::UnixFile(int)>
c0010836:	83 c4 10             	add    esp,0x10
c0010839:	ba 6c 3d 02 c0       	mov    edx,0xc0023d6c
c001083e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010842:	89 10                	mov    DWORD PTR [eax],edx
c0010844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010848:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001084c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001084f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010853:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001085a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001085e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010865:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010869:	83 ec 0c             	sub    esp,0xc
c001086c:	50                   	push   eax
c001086d:	e8 e9 f3 ff ff       	call   c000fc5b <malloc>
c0010872:	83 c4 10             	add    esp,0x10
c0010875:	89 c2                	mov    edx,eax
c0010877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001087b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001087e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010882:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010886:	90                   	nop
c0010887:	83 c4 0c             	add    esp,0xc
c001088a:	c3                   	ret    

c001088b <KePowerThread(void*)>:
c001088b:	83 ec 0c             	sub    esp,0xc
c001088e:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0010895:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001089c:	75 01                	jne    c001089f <KePowerThread(void*)+0x14>
c001089e:	fb                   	sti    
c001089f:	83 ec 0c             	sub    esp,0xc
c00108a2:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c00108a9:	6a 0a                	push   0xa
c00108ab:	e8 0c 65 00 00       	call   c0016dbc <sleep(unsigned int)>
c00108b0:	83 05 a4 e1 02 c0 0a 	add    DWORD PTR ds:0xc002e1a4,0xa
c00108b7:	83 c4 10             	add    esp,0x10
c00108ba:	eb e3                	jmp    c001089f <KePowerThread(void*)+0x14>

c00108bc <KeChangePowerSettings(PowerSettings)>:
c00108bc:	57                   	push   edi
c00108bd:	b9 09 00 00 00       	mov    ecx,0x9
c00108c2:	56                   	push   esi
c00108c3:	bf 80 e1 02 c0       	mov    edi,0xc002e180
c00108c8:	fc                   	cld    
c00108c9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00108cd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00108cf:	5e                   	pop    esi
c00108d0:	5f                   	pop    edi
c00108d1:	c3                   	ret    

c00108d2 <KeUserIOReceived()>:
c00108d2:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c00108dc:	c3                   	ret    

c00108dd <KeHandlePowerButton()>:
c00108dd:	a1 80 e1 02 c0       	mov    eax,ds:0xc002e180
c00108e2:	83 f8 02             	cmp    eax,0x2
c00108e5:	75 05                	jne    c00108ec <KeHandlePowerButton()+0xf>
c00108e7:	e9 34 da ff ff       	jmp    c000e320 <KeShutdown()>
c00108ec:	48                   	dec    eax
c00108ed:	75 05                	jne    c00108f4 <KeHandlePowerButton()+0x17>
c00108ef:	e9 50 da ff ff       	jmp    c000e344 <KeSleep()>
c00108f4:	c3                   	ret    

c00108f5 <KeHandleSleepButton()>:
c00108f5:	a1 84 e1 02 c0       	mov    eax,ds:0xc002e184
c00108fa:	83 f8 02             	cmp    eax,0x2
c00108fd:	75 05                	jne    c0010904 <KeHandleSleepButton()+0xf>
c00108ff:	e9 1c da ff ff       	jmp    c000e320 <KeShutdown()>
c0010904:	48                   	dec    eax
c0010905:	75 05                	jne    c001090c <KeHandleSleepButton()+0x17>
c0010907:	e9 38 da ff ff       	jmp    c000e344 <KeSleep()>
c001090c:	c3                   	ret    

c001090d <KeSetupPowerManager()>:
c001090d:	83 ec 0c             	sub    esp,0xc
c0010910:	c7 05 a4 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1a4,0x0
c001091a:	68 f0 00 00 00       	push   0xf0
c001091f:	c6 05 60 e1 02 c0 00 	mov    BYTE PTR ds:0xc002e160,0x0
c0010926:	6a 00                	push   0x0
c0010928:	68 8b 08 01 c0       	push   0xc001088b
c001092d:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0010933:	e8 30 60 00 00       	call   c0016968 <Process::createThread(void (*)(void*), void*, int)>
c0010938:	c7 05 80 e1 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002e180,0x2
c0010942:	c7 05 84 e1 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002e184,0x1
c001094c:	c7 05 88 e1 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002e188,0x3
c0010956:	c7 05 8c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e18c,0x0
c0010960:	c7 05 98 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e198,0x0
c001096a:	c7 05 90 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e190,0x0
c0010974:	c7 05 9c e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e19c,0x0
c001097e:	c7 05 94 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e194,0x3c
c0010988:	c7 05 a0 e1 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002e1a0,0x3c
c0010992:	83 c4 1c             	add    esp,0x1c
c0010995:	c3                   	ret    

c0010996 <KeRand()>:
c0010996:	69 05 a8 e1 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002e1a8,0x2875
c00109a0:	69 0d ac e1 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002e1ac,0xa2e7b175
c00109aa:	53                   	push   ebx
c00109ab:	01 c1                	add    ecx,eax
c00109ad:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00109b2:	f7 25 a8 e1 02 c0    	mul    DWORD PTR ds:0xc002e1a8
c00109b8:	01 ca                	add    edx,ecx
c00109ba:	05 ef 04 b5 00       	add    eax,0xb504ef
c00109bf:	83 d2 00             	adc    edx,0x0
c00109c2:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c00109c7:	0f b7 da             	movzx  ebx,dx
c00109ca:	89 da                	mov    edx,ebx
c00109cc:	89 1d ac e1 02 c0    	mov    DWORD PTR ds:0xc002e1ac,ebx
c00109d2:	0f ac d0 0e          	shrd   eax,edx,0xe
c00109d6:	5b                   	pop    ebx
c00109d7:	c3                   	ret    

c00109d8 <KeSeedRand(unsigned int)>:
c00109d8:	53                   	push   ebx
c00109d9:	83 ec 08             	sub    esp,0x8
c00109dc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00109e0:	e8 58 94 00 00       	call   c0019e3d <HalGetRand()>
c00109e5:	c7 05 ac e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1ac,0x0
c00109ef:	31 d8                	xor    eax,ebx
c00109f1:	a3 a8 e1 02 c0       	mov    ds:0xc002e1a8,eax
c00109f6:	e8 9b ff ff ff       	call   c0010996 <KeRand()>
c00109fb:	83 c4 08             	add    esp,0x8
c00109fe:	5b                   	pop    ebx
c00109ff:	eb 95                	jmp    c0010996 <KeRand()>

c0010a01 <KeInitRand()>:
c0010a01:	83 ec 0c             	sub    esp,0xc
c0010a04:	e8 58 92 00 00       	call   c0019c61 <HalQueryPerformanceCounter()>
c0010a09:	0f 20 da             	mov    edx,cr3
c0010a0c:	0f 22 da             	mov    cr3,edx
c0010a0f:	0f 20 da             	mov    edx,cr3
c0010a12:	0f 22 da             	mov    cr3,edx
c0010a15:	0f 20 da             	mov    edx,cr3
c0010a18:	0f 22 da             	mov    cr3,edx
c0010a1b:	0f 20 da             	mov    edx,cr3
c0010a1e:	0f 22 da             	mov    cr3,edx
c0010a21:	83 ec 0c             	sub    esp,0xc
c0010a24:	35 03 8a 95 38       	xor    eax,0x38958a03
c0010a29:	50                   	push   eax
c0010a2a:	e8 a9 ff ff ff       	call   c00109d8 <KeSeedRand(unsigned int)>
c0010a2f:	83 c4 1c             	add    esp,0x1c
c0010a32:	c3                   	ret    
c0010a33:	90                   	nop

c0010a34 <KeResolveCompatibilitySymbol(char*)>:
c0010a34:	83 ec 0c             	sub    esp,0xc
c0010a37:	83 ec 08             	sub    esp,0x8
c0010a3a:	68 80 3d 02 c0       	push   0xc0023d80
c0010a3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a43:	e8 08 fd fe ff       	call   c0000750 <strcmp>
c0010a48:	83 c4 10             	add    esp,0x10
c0010a4b:	85 c0                	test   eax,eax
c0010a4d:	0f 94 c0             	sete   al
c0010a50:	0f b6 c0             	movzx  eax,al
c0010a53:	85 c0                	test   eax,eax
c0010a55:	74 0d                	je     c0010a64 <KeResolveCompatibilitySymbol(char*)+0x30>
c0010a57:	b8 d0 c0 02 c0       	mov    eax,0xc002c0d0
c0010a5c:	e9 8b 01 00 00       	jmp    c0010bec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a61:	8d 76 00             	lea    esi,[esi+0x0]
c0010a64:	83 ec 08             	sub    esp,0x8
c0010a67:	68 89 3d 02 c0       	push   0xc0023d89
c0010a6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a70:	e8 db fc fe ff       	call   c0000750 <strcmp>
c0010a75:	83 c4 10             	add    esp,0x10
c0010a78:	85 c0                	test   eax,eax
c0010a7a:	0f 94 c0             	sete   al
c0010a7d:	0f b6 c0             	movzx  eax,al
c0010a80:	85 c0                	test   eax,eax
c0010a82:	74 0c                	je     c0010a90 <KeResolveCompatibilitySymbol(char*)+0x5c>
c0010a84:	b8 f4 14 02 c0       	mov    eax,0xc00214f4
c0010a89:	e9 5e 01 00 00       	jmp    c0010bec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010a8e:	66 90                	xchg   ax,ax
c0010a90:	83 ec 08             	sub    esp,0x8
c0010a93:	68 93 3d 02 c0       	push   0xc0023d93
c0010a98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010a9c:	e8 af fc fe ff       	call   c0000750 <strcmp>
c0010aa1:	83 c4 10             	add    esp,0x10
c0010aa4:	85 c0                	test   eax,eax
c0010aa6:	0f 94 c0             	sete   al
c0010aa9:	0f b6 c0             	movzx  eax,al
c0010aac:	85 c0                	test   eax,eax
c0010aae:	74 0c                	je     c0010abc <KeResolveCompatibilitySymbol(char*)+0x88>
c0010ab0:	b8 28 12 02 c0       	mov    eax,0xc0021228
c0010ab5:	e9 32 01 00 00       	jmp    c0010bec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010aba:	66 90                	xchg   ax,ax
c0010abc:	83 ec 08             	sub    esp,0x8
c0010abf:	68 9c 3d 02 c0       	push   0xc0023d9c
c0010ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ac8:	e8 83 fc fe ff       	call   c0000750 <strcmp>
c0010acd:	83 c4 10             	add    esp,0x10
c0010ad0:	85 c0                	test   eax,eax
c0010ad2:	0f 94 c0             	sete   al
c0010ad5:	0f b6 c0             	movzx  eax,al
c0010ad8:	85 c0                	test   eax,eax
c0010ada:	74 0c                	je     c0010ae8 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010adc:	b8 a2 ff 00 c0       	mov    eax,0xc000ffa2
c0010ae1:	e9 06 01 00 00       	jmp    c0010bec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010ae6:	66 90                	xchg   ax,ax
c0010ae8:	83 ec 08             	sub    esp,0x8
c0010aeb:	68 af 3d 02 c0       	push   0xc0023daf
c0010af0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010af4:	e8 57 fc fe ff       	call   c0000750 <strcmp>
c0010af9:	83 c4 10             	add    esp,0x10
c0010afc:	85 c0                	test   eax,eax
c0010afe:	0f 94 c0             	sete   al
c0010b01:	0f b6 c0             	movzx  eax,al
c0010b04:	85 c0                	test   eax,eax
c0010b06:	74 0c                	je     c0010b14 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0010b08:	b8 23 d2 00 c0       	mov    eax,0xc000d223
c0010b0d:	e9 da 00 00 00       	jmp    c0010bec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b12:	66 90                	xchg   ax,ax
c0010b14:	83 ec 08             	sub    esp,0x8
c0010b17:	68 cc 3d 02 c0       	push   0xc0023dcc
c0010b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b20:	e8 2b fc fe ff       	call   c0000750 <strcmp>
c0010b25:	83 c4 10             	add    esp,0x10
c0010b28:	85 c0                	test   eax,eax
c0010b2a:	0f 94 c0             	sete   al
c0010b2d:	0f b6 c0             	movzx  eax,al
c0010b30:	85 c0                	test   eax,eax
c0010b32:	74 0c                	je     c0010b40 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0010b34:	b8 f4 15 02 c0       	mov    eax,0xc00215f4
c0010b39:	e9 ae 00 00 00       	jmp    c0010bec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b3e:	66 90                	xchg   ax,ax
c0010b40:	83 ec 08             	sub    esp,0x8
c0010b43:	68 d6 3d 02 c0       	push   0xc0023dd6
c0010b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b4c:	e8 ff fb fe ff       	call   c0000750 <strcmp>
c0010b51:	83 c4 10             	add    esp,0x10
c0010b54:	85 c0                	test   eax,eax
c0010b56:	0f 94 c0             	sete   al
c0010b59:	0f b6 c0             	movzx  eax,al
c0010b5c:	85 c0                	test   eax,eax
c0010b5e:	74 0c                	je     c0010b6c <KeResolveCompatibilitySymbol(char*)+0x138>
c0010b60:	b8 74 13 02 c0       	mov    eax,0xc0021374
c0010b65:	e9 82 00 00 00       	jmp    c0010bec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b6a:	66 90                	xchg   ax,ax
c0010b6c:	83 ec 08             	sub    esp,0x8
c0010b6f:	68 df 3d 02 c0       	push   0xc0023ddf
c0010b74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b78:	e8 d3 fb fe ff       	call   c0000750 <strcmp>
c0010b7d:	83 c4 10             	add    esp,0x10
c0010b80:	85 c0                	test   eax,eax
c0010b82:	0f 94 c0             	sete   al
c0010b85:	0f b6 c0             	movzx  eax,al
c0010b88:	85 c0                	test   eax,eax
c0010b8a:	74 08                	je     c0010b94 <KeResolveCompatibilitySymbol(char*)+0x160>
c0010b8c:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c0010b91:	eb 59                	jmp    c0010bec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010b93:	90                   	nop
c0010b94:	83 ec 08             	sub    esp,0x8
c0010b97:	68 f7 3d 02 c0       	push   0xc0023df7
c0010b9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010ba0:	e8 ab fb fe ff       	call   c0000750 <strcmp>
c0010ba5:	83 c4 10             	add    esp,0x10
c0010ba8:	85 c0                	test   eax,eax
c0010baa:	0f 94 c0             	sete   al
c0010bad:	0f b6 c0             	movzx  eax,al
c0010bb0:	85 c0                	test   eax,eax
c0010bb2:	74 08                	je     c0010bbc <KeResolveCompatibilitySymbol(char*)+0x188>
c0010bb4:	b8 d4 c0 02 c0       	mov    eax,0xc002c0d4
c0010bb9:	eb 31                	jmp    c0010bec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010bbb:	90                   	nop
c0010bbc:	83 ec 08             	sub    esp,0x8
c0010bbf:	68 04 3e 02 c0       	push   0xc0023e04
c0010bc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bc8:	e8 83 fb fe ff       	call   c0000750 <strcmp>
c0010bcd:	83 c4 10             	add    esp,0x10
c0010bd0:	85 c0                	test   eax,eax
c0010bd2:	0f 94 c0             	sete   al
c0010bd5:	0f b6 c0             	movzx  eax,al
c0010bd8:	85 c0                	test   eax,eax
c0010bda:	74 08                	je     c0010be4 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010bdc:	b8 d5 c0 02 c0       	mov    eax,0xc002c0d5
c0010be1:	eb 09                	jmp    c0010bec <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010be3:	90                   	nop
c0010be4:	b8 00 00 00 00       	mov    eax,0x0
c0010be9:	8d 76 00             	lea    esi,[esi+0x0]
c0010bec:	83 c4 0c             	add    esp,0xc
c0010bef:	c3                   	ret    

c0010bf0 <Semaphore::Semaphore(int)>:
c0010bf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bf4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010bf8:	89 10                	mov    DWORD PTR [eax],edx
c0010bfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010bfe:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0010c05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c09:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010c10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c14:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0010c1b:	90                   	nop
c0010c1c:	c3                   	ret    
c0010c1d:	90                   	nop
c0010c1e:	66 90                	xchg   ax,ax

c0010c20 <Semaphore::tryAcquire()>:
c0010c20:	83 ec 0c             	sub    esp,0xc
c0010c23:	fa                   	cli    
c0010c24:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010c29:	83 c0 01             	add    eax,0x1
c0010c2c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010c31:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010c36:	83 c0 01             	add    eax,0x1
c0010c39:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010c3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c42:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010c45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c49:	8b 00                	mov    eax,DWORD PTR [eax]
c0010c4b:	39 c2                	cmp    edx,eax
c0010c4d:	7d 59                	jge    c0010ca8 <Semaphore::tryAcquire()+0x88>
c0010c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010c56:	8d 50 01             	lea    edx,[eax+0x1]
c0010c59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010c5d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010c60:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010c65:	83 e8 01             	sub    eax,0x1
c0010c68:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010c6d:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010c72:	85 c0                	test   eax,eax
c0010c74:	75 1a                	jne    c0010c90 <Semaphore::tryAcquire()+0x70>
c0010c76:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010c7b:	85 c0                	test   eax,eax
c0010c7d:	74 11                	je     c0010c90 <Semaphore::tryAcquire()+0x70>
c0010c7f:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010c89:	e8 32 5f 00 00       	call   c0016bc0 <schedule()>
c0010c8e:	66 90                	xchg   ax,ax
c0010c90:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010c98:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010c9d:	85 c0                	test   eax,eax
c0010c9f:	75 03                	jne    c0010ca4 <Semaphore::tryAcquire()+0x84>
c0010ca1:	fb                   	sti    
c0010ca2:	66 90                	xchg   ax,ax
c0010ca4:	b0 01                	mov    al,0x1
c0010ca6:	eb 48                	jmp    c0010cf0 <Semaphore::tryAcquire()+0xd0>
c0010ca8:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010cad:	83 e8 01             	sub    eax,0x1
c0010cb0:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010cb5:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010cba:	85 c0                	test   eax,eax
c0010cbc:	75 1a                	jne    c0010cd8 <Semaphore::tryAcquire()+0xb8>
c0010cbe:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010cc3:	85 c0                	test   eax,eax
c0010cc5:	74 11                	je     c0010cd8 <Semaphore::tryAcquire()+0xb8>
c0010cc7:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010cd1:	e8 ea 5e 00 00       	call   c0016bc0 <schedule()>
c0010cd6:	66 90                	xchg   ax,ax
c0010cd8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010ce0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010ce5:	85 c0                	test   eax,eax
c0010ce7:	75 03                	jne    c0010cec <Semaphore::tryAcquire()+0xcc>
c0010ce9:	fb                   	sti    
c0010cea:	66 90                	xchg   ax,ax
c0010cec:	b0 00                	mov    al,0x0
c0010cee:	66 90                	xchg   ax,ax
c0010cf0:	83 c4 0c             	add    esp,0xc
c0010cf3:	c3                   	ret    

c0010cf4 <Semaphore::assertLocked(char const*)>:
c0010cf4:	83 ec 0c             	sub    esp,0xc
c0010cf7:	fa                   	cli    
c0010cf8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010cfd:	83 c0 01             	add    eax,0x1
c0010d00:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010d05:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d0a:	83 c0 01             	add    eax,0x1
c0010d0d:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d16:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010d1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010d1f:	39 c2                	cmp    edx,eax
c0010d21:	7d 11                	jge    c0010d34 <Semaphore::assertLocked(char const*)+0x40>
c0010d23:	83 ec 0c             	sub    esp,0xc
c0010d26:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010d2a:	e8 73 f2 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0010d2f:	83 c4 10             	add    esp,0x10
c0010d32:	66 90                	xchg   ax,ax
c0010d34:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d39:	83 e8 01             	sub    eax,0x1
c0010d3c:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010d41:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010d46:	85 c0                	test   eax,eax
c0010d48:	75 1a                	jne    c0010d64 <Semaphore::assertLocked(char const*)+0x70>
c0010d4a:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010d4f:	85 c0                	test   eax,eax
c0010d51:	74 11                	je     c0010d64 <Semaphore::assertLocked(char const*)+0x70>
c0010d53:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010d5d:	e8 5e 5e 00 00       	call   c0016bc0 <schedule()>
c0010d62:	66 90                	xchg   ax,ax
c0010d64:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010d6c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010d71:	85 c0                	test   eax,eax
c0010d73:	75 03                	jne    c0010d78 <Semaphore::assertLocked(char const*)+0x84>
c0010d75:	fb                   	sti    
c0010d76:	66 90                	xchg   ax,ax
c0010d78:	90                   	nop
c0010d79:	83 c4 0c             	add    esp,0xc
c0010d7c:	c3                   	ret    
c0010d7d:	90                   	nop
c0010d7e:	66 90                	xchg   ax,ax

c0010d80 <Semaphore::acquire(int)>:
c0010d80:	83 ec 1c             	sub    esp,0x1c
c0010d83:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010d88:	0f 84 9a 00 00 00    	je     c0010e28 <Semaphore::acquire(int)+0xa8>
c0010d8e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010d96:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010d9b:	90                   	nop
c0010d9c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010da1:	85 c0                	test   eax,eax
c0010da3:	74 77                	je     c0010e1c <Semaphore::acquire(int)+0x9c>
c0010da5:	83 ec 0c             	sub    esp,0xc
c0010da8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010dac:	e8 6f fe ff ff       	call   c0010c20 <Semaphore::tryAcquire()>
c0010db1:	83 c4 10             	add    esp,0x10
c0010db4:	83 f0 01             	xor    eax,0x1
c0010db7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010dbb:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010dbf:	83 f0 01             	xor    eax,0x1
c0010dc2:	0f b6 c0             	movzx  eax,al
c0010dc5:	85 c0                	test   eax,eax
c0010dc7:	75 4f                	jne    c0010e18 <Semaphore::acquire(int)+0x98>
c0010dc9:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010dce:	7f 2c                	jg     c0010dfc <Semaphore::acquire(int)+0x7c>
c0010dd0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010dd4:	89 d0                	mov    eax,edx
c0010dd6:	c1 e0 02             	shl    eax,0x2
c0010dd9:	01 d0                	add    eax,edx
c0010ddb:	01 c0                	add    eax,eax
c0010ddd:	83 ec 0c             	sub    esp,0xc
c0010de0:	50                   	push   eax
c0010de1:	e8 c2 5f 00 00       	call   c0016da8 <milliTenthSleep(unsigned int)>
c0010de6:	83 c4 10             	add    esp,0x10
c0010de9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010ded:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010df1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0010df9:	eb a1                	jmp    c0010d9c <Semaphore::acquire(int)+0x1c>
c0010dfb:	90                   	nop
c0010dfc:	83 ec 0c             	sub    esp,0xc
c0010dff:	68 90 01 00 00       	push   0x190
c0010e04:	e8 9f 5f 00 00       	call   c0016da8 <milliTenthSleep(unsigned int)>
c0010e09:	83 c4 10             	add    esp,0x10
c0010e0c:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c0010e11:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c0010e16:	eb 84                	jmp    c0010d9c <Semaphore::acquire(int)+0x1c>
c0010e18:	90                   	nop
c0010e19:	8d 76 00             	lea    esi,[esi+0x0]
c0010e1c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010e20:	e9 fb 00 00 00       	jmp    c0010f20 <Semaphore::acquire(int)+0x1a0>
c0010e25:	8d 76 00             	lea    esi,[esi+0x0]
c0010e28:	fa                   	cli    
c0010e29:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010e2e:	83 c0 01             	add    eax,0x1
c0010e31:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010e36:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010e3b:	83 c0 01             	add    eax,0x1
c0010e3e:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010e43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e47:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0010e4a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e50:	39 c2                	cmp    edx,eax
c0010e52:	7d 14                	jge    c0010e68 <Semaphore::acquire(int)+0xe8>
c0010e54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010e5b:	8d 50 01             	lea    edx,[eax+0x1]
c0010e5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e62:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010e65:	eb 6d                	jmp    c0010ed4 <Semaphore::acquire(int)+0x154>
c0010e67:	90                   	nop
c0010e68:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010e6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0010e6f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0010e76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010e7d:	85 c0                	test   eax,eax
c0010e7f:	75 13                	jne    c0010e94 <Semaphore::acquire(int)+0x114>
c0010e81:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010e86:	8b 10                	mov    edx,DWORD PTR [eax]
c0010e88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e8c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010e8f:	eb 17                	jmp    c0010ea8 <Semaphore::acquire(int)+0x128>
c0010e91:	8d 76 00             	lea    esi,[esi+0x0]
c0010e94:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010e9d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010ea0:	8b 12                	mov    edx,DWORD PTR [edx]
c0010ea2:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0010ea5:	8d 76 00             	lea    esi,[esi+0x0]
c0010ea8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010ead:	8b 10                	mov    edx,DWORD PTR [eax]
c0010eaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010eb3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010eb6:	83 ec 0c             	sub    esp,0xc
c0010eb9:	68 14 3e 02 c0       	push   0xc0023e14
c0010ebe:	e8 a1 60 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010ec3:	83 c4 10             	add    esp,0x10
c0010ec6:	83 ec 0c             	sub    esp,0xc
c0010ec9:	6a 05                	push   0x5
c0010ecb:	e8 b0 5d 00 00       	call   c0016c80 <blockTask(TaskState)>
c0010ed0:	83 c4 10             	add    esp,0x10
c0010ed3:	90                   	nop
c0010ed4:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ed9:	83 e8 01             	sub    eax,0x1
c0010edc:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010ee1:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010ee6:	85 c0                	test   eax,eax
c0010ee8:	75 1a                	jne    c0010f04 <Semaphore::acquire(int)+0x184>
c0010eea:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010eef:	85 c0                	test   eax,eax
c0010ef1:	74 11                	je     c0010f04 <Semaphore::acquire(int)+0x184>
c0010ef3:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010efd:	e8 be 5c 00 00       	call   c0016bc0 <schedule()>
c0010f02:	66 90                	xchg   ax,ax
c0010f04:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010f0c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010f11:	85 c0                	test   eax,eax
c0010f13:	75 03                	jne    c0010f18 <Semaphore::acquire(int)+0x198>
c0010f15:	fb                   	sti    
c0010f16:	66 90                	xchg   ax,ax
c0010f18:	b8 00 00 00 00       	mov    eax,0x0
c0010f1d:	8d 76 00             	lea    esi,[esi+0x0]
c0010f20:	83 c4 1c             	add    esp,0x1c
c0010f23:	c3                   	ret    

c0010f24 <Semaphore::acquire()>:
c0010f24:	83 ec 0c             	sub    esp,0xc
c0010f27:	83 ec 08             	sub    esp,0x8
c0010f2a:	6a 00                	push   0x0
c0010f2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f30:	e8 4b fe ff ff       	call   c0010d80 <Semaphore::acquire(int)>
c0010f35:	83 c4 10             	add    esp,0x10
c0010f38:	90                   	nop
c0010f39:	83 c4 0c             	add    esp,0xc
c0010f3c:	c3                   	ret    
c0010f3d:	90                   	nop
c0010f3e:	66 90                	xchg   ax,ax

c0010f40 <Semaphore::release()>:
c0010f40:	83 ec 1c             	sub    esp,0x1c
c0010f43:	fa                   	cli    
c0010f44:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010f49:	83 c0 01             	add    eax,0x1
c0010f4c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0010f51:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010f56:	83 c0 01             	add    eax,0x1
c0010f59:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010f5e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f62:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f65:	85 c0                	test   eax,eax
c0010f67:	74 2b                	je     c0010f94 <Semaphore::release()+0x54>
c0010f69:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f6d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010f74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010f78:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f7f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010f82:	83 ec 0c             	sub    esp,0xc
c0010f85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010f89:	e8 42 5f 00 00       	call   c0016ed0 <unblockTask(ThreadControlBlock*)>
c0010f8e:	83 c4 10             	add    esp,0x10
c0010f91:	eb 15                	jmp    c0010fa8 <Semaphore::release()+0x68>
c0010f93:	90                   	nop
c0010f94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010f98:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010f9b:	8d 50 ff             	lea    edx,[eax-0x1]
c0010f9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010fa2:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010fa5:	8d 76 00             	lea    esi,[esi+0x0]
c0010fa8:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010fad:	83 e8 01             	sub    eax,0x1
c0010fb0:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0010fb5:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0010fba:	85 c0                	test   eax,eax
c0010fbc:	75 1a                	jne    c0010fd8 <Semaphore::release()+0x98>
c0010fbe:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0010fc3:	85 c0                	test   eax,eax
c0010fc5:	74 11                	je     c0010fd8 <Semaphore::release()+0x98>
c0010fc7:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0010fd1:	e8 ea 5b 00 00       	call   c0016bc0 <schedule()>
c0010fd6:	66 90                	xchg   ax,ax
c0010fd8:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0010fe0:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0010fe5:	85 c0                	test   eax,eax
c0010fe7:	75 03                	jne    c0010fec <Semaphore::release()+0xac>
c0010fe9:	fb                   	sti    
c0010fea:	66 90                	xchg   ax,ax
c0010fec:	90                   	nop
c0010fed:	83 c4 1c             	add    esp,0x1c
c0010ff0:	c3                   	ret    

c0010ff1 <KiSigKill(int)>:
c0010ff1:	83 ec 0c             	sub    esp,0xc
c0010ff4:	6a 00                	push   0x0
c0010ff6:	6a 00                	push   0x0
c0010ff8:	6a ff                	push   0xffffffff
c0010ffa:	6a 01                	push   0x1
c0010ffc:	e8 51 60 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011001:	83 c4 1c             	add    esp,0x1c
c0011004:	c3                   	ret    

c0011005 <KiDefaultSignalHandlerIgnore(int)>:
c0011005:	c3                   	ret    

c0011006 <KiDefaultSignalHandlerPause(int)>:
c0011006:	57                   	push   edi
c0011007:	b9 07 00 00 00       	mov    ecx,0x7
c001100c:	56                   	push   esi
c001100d:	be 6f 3e 02 c0       	mov    esi,0xc0023e6f
c0011012:	83 ec 24             	sub    esp,0x24
c0011015:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011019:	fc                   	cld    
c001101a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001101c:	8d 44 24 04          	lea    eax,[esp+0x4]
c0011020:	50                   	push   eax
c0011021:	6a 00                	push   0x0
c0011023:	6a 00                	push   0x0
c0011025:	6a 27                	push   0x27
c0011027:	e8 26 60 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001102c:	83 c4 34             	add    esp,0x34
c001102f:	5e                   	pop    esi
c0011030:	5f                   	pop    edi
c0011031:	c3                   	ret    

c0011032 <KiDefaultSignalHandlerResume(int)>:
c0011032:	57                   	push   edi
c0011033:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011038:	56                   	push   esi
c0011039:	be 8b 3e 02 c0       	mov    esi,0xc0023e8b
c001103e:	83 ec 24             	sub    esp,0x24
c0011041:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011045:	fc                   	cld    
c0011046:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011048:	8d 44 24 03          	lea    eax,[esp+0x3]
c001104c:	50                   	push   eax
c001104d:	6a 00                	push   0x0
c001104f:	6a 00                	push   0x0
c0011051:	6a 27                	push   0x27
c0011053:	e8 fa 5f 01 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011058:	83 c4 34             	add    esp,0x34
c001105b:	5e                   	pop    esi
c001105c:	5f                   	pop    edi
c001105d:	c3                   	ret    

c001105e <KeDeinitSignals(SigHandlerBlock*)>:
c001105e:	e9 08 ec ff ff       	jmp    c000fc6b <free>

c0011063 <KeInitSignals()>:
c0011063:	53                   	push   ebx
c0011064:	83 ec 14             	sub    esp,0x14
c0011067:	68 c8 00 00 00       	push   0xc8
c001106c:	e8 ea eb ff ff       	call   c000fc5b <malloc>
c0011071:	83 c4 0c             	add    esp,0xc
c0011074:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c001107e:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0011088:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001108f:	89 c3                	mov    ebx,eax
c0011091:	6a 20                	push   0x20
c0011093:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0011099:	6a 00                	push   0x0
c001109b:	50                   	push   eax
c001109c:	e8 4f f4 fe ff       	call   c00004f0 <memset>
c00110a1:	83 c4 0c             	add    esp,0xc
c00110a4:	6a 44                	push   0x44
c00110a6:	6a 00                	push   0x0
c00110a8:	53                   	push   ebx
c00110a9:	e8 42 f4 fe ff       	call   c00004f0 <memset>
c00110ae:	89 d8                	mov    eax,ebx
c00110b0:	83 c4 18             	add    esp,0x18
c00110b3:	5b                   	pop    ebx
c00110b4:	c3                   	ret    

c00110b5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00110b5:	53                   	push   ebx
c00110b6:	b8 01 00 00 00       	mov    eax,0x1
c00110bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00110bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00110c3:	83 f9 10             	cmp    ecx,0x10
c00110c6:	7f 21                	jg     c00110e9 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00110c8:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00110cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110cf:	89 03                	mov    DWORD PTR [ebx],eax
c00110d1:	b8 01 00 00 00       	mov    eax,0x1
c00110d6:	d3 e0                	shl    eax,cl
c00110d8:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c00110dc:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00110df:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c00110e7:	31 c0                	xor    eax,eax
c00110e9:	5b                   	pop    ebx
c00110ea:	c3                   	ret    

c00110eb <KeRaiseSignal(SigHandlerBlock*, int)>:
c00110eb:	55                   	push   ebp
c00110ec:	57                   	push   edi
c00110ed:	bf 08 00 00 00       	mov    edi,0x8
c00110f2:	56                   	push   esi
c00110f3:	53                   	push   ebx
c00110f4:	83 ec 18             	sub    esp,0x18
c00110f7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00110fb:	68 a8 3e 02 c0       	push   0xc0023ea8
c0011100:	e8 5f 5e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0011105:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001110c:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011112:	83 c4 10             	add    esp,0x10
c0011115:	31 c9                	xor    ecx,ecx
c0011117:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001111b:	99                   	cdq    
c001111c:	f7 ff                	idiv   edi
c001111e:	8d 42 24             	lea    eax,[edx+0x24]
c0011121:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011125:	85 f6                	test   esi,esi
c0011127:	75 1a                	jne    c0011143 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011129:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001112d:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011131:	50                   	push   eax
c0011132:	50                   	push   eax
c0011133:	52                   	push   edx
c0011134:	68 b9 3e 02 c0       	push   0xc0023eb9
c0011139:	e8 26 5e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001113e:	83 c4 10             	add    esp,0x10
c0011141:	eb 1b                	jmp    c001115e <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011143:	41                   	inc    ecx
c0011144:	83 f9 08             	cmp    ecx,0x8
c0011147:	75 ce                	jne    c0011117 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011149:	83 ec 0c             	sub    esp,0xc
c001114c:	be 01 00 00 00       	mov    esi,0x1
c0011151:	68 da 3e 02 c0       	push   0xc0023eda
c0011156:	e8 09 5e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001115b:	83 c4 10             	add    esp,0x10
c001115e:	83 c4 0c             	add    esp,0xc
c0011161:	89 f0                	mov    eax,esi
c0011163:	5b                   	pop    ebx
c0011164:	5e                   	pop    esi
c0011165:	5f                   	pop    edi
c0011166:	5d                   	pop    ebp
c0011167:	c3                   	ret    

c0011168 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011168:	55                   	push   ebp
c0011169:	57                   	push   edi
c001116a:	56                   	push   esi
c001116b:	53                   	push   ebx
c001116c:	51                   	push   ecx
c001116d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011171:	85 db                	test   ebx,ebx
c0011173:	0f 84 bc 00 00 00    	je     c0011235 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011179:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0011180:	0f 84 af 00 00 00    	je     c0011235 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011186:	31 c9                	xor    ecx,ecx
c0011188:	bf 08 00 00 00       	mov    edi,0x8
c001118d:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c0011193:	8d 04 0e             	lea    eax,[esi+ecx*1]
c0011196:	99                   	cdq    
c0011197:	f7 ff                	idiv   edi
c0011199:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00111a0:	85 ed                	test   ebp,ebp
c00111a2:	0f 84 9e 00 00 00    	je     c0011246 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00111a8:	89 e9                	mov    ecx,ebp
c00111aa:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00111b0:	bf 01 00 00 00       	mov    edi,0x1
c00111b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00111b8:	d3 e7                	shl    edi,cl
c00111ba:	31 c9                	xor    ecx,ecx
c00111bc:	b8 01 00 00 00       	mov    eax,0x1
c00111c1:	d3 e0                	shl    eax,cl
c00111c3:	85 04 24             	test   DWORD PTR [esp],eax
c00111c6:	74 06                	je     c00111ce <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00111c8:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00111cc:	75 67                	jne    c0011235 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00111ce:	41                   	inc    ecx
c00111cf:	83 f9 11             	cmp    ecx,0x11
c00111d2:	75 e8                	jne    c00111bc <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c00111d4:	46                   	inc    esi
c00111d5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00111d8:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00111de:	09 f8                	or     eax,edi
c00111e0:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c00111eb:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c00111f1:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00111f8:	31 c0                	xor    eax,eax
c00111fa:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011202:	74 09                	je     c001120d <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011204:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001120b:	eb 06                	jmp    c0011213 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c001120d:	40                   	inc    eax
c001120e:	83 f8 08             	cmp    eax,0x8
c0011211:	75 e7                	jne    c00111fa <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011213:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011216:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001121a:	83 fd 09             	cmp    ebp,0x9
c001121d:	89 2a                	mov    DWORD PTR [edx],ebp
c001121f:	75 07                	jne    c0011228 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011221:	b8 f1 0f 01 c0       	mov    eax,0xc0010ff1
c0011226:	eb 31                	jmp    c0011259 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011228:	83 f8 01             	cmp    eax,0x1
c001122b:	75 0c                	jne    c0011239 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001122d:	f7 d7                	not    edi
c001122f:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011235:	31 c0                	xor    eax,eax
c0011237:	eb 20                	jmp    c0011259 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011239:	85 c0                	test   eax,eax
c001123b:	75 1c                	jne    c0011259 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001123d:	8b 04 ad 00 61 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffd9f00]
c0011244:	eb 13                	jmp    c0011259 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011246:	46                   	inc    esi
c0011247:	41                   	inc    ecx
c0011248:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001124e:	83 f9 08             	cmp    ecx,0x8
c0011251:	0f 85 36 ff ff ff    	jne    c001118d <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011257:	eb dc                	jmp    c0011235 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011259:	5a                   	pop    edx
c001125a:	5b                   	pop    ebx
c001125b:	5e                   	pop    esi
c001125c:	5f                   	pop    edi
c001125d:	5d                   	pop    ebp
c001125e:	c3                   	ret    

c001125f <KiCheckSignalZ>:
c001125f:	83 ec 10             	sub    esp,0x10
c0011262:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011266:	50                   	push   eax
c0011267:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001126c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001126f:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011275:	e8 ee fe ff ff       	call   c0011168 <KeCheckSignal(SigHandlerBlock*, int*)>
c001127a:	5a                   	pop    edx
c001127b:	31 d2                	xor    edx,edx
c001127d:	59                   	pop    ecx
c001127e:	85 c0                	test   eax,eax
c0011280:	74 19                	je     c001129b <KiCheckSignalZ+0x3c>
c0011282:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011288:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001128b:	89 02                	mov    DWORD PTR [edx],eax
c001128d:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c0011294:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011298:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001129b:	89 d0                	mov    eax,edx
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	c3                   	ret    

c00112a1 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00112a1:	56                   	push   esi
c00112a2:	53                   	push   ebx
c00112a3:	bb 01 00 00 00       	mov    ebx,0x1
c00112a8:	52                   	push   edx
c00112a9:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00112ad:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00112b1:	d3 e3                	shl    ebx,cl
c00112b3:	83 f9 10             	cmp    ecx,0x10
c00112b6:	7f 08                	jg     c00112c0 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00112b8:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00112be:	75 10                	jne    c00112d0 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00112c0:	83 ec 0c             	sub    esp,0xc
c00112c3:	68 eb 3e 02 c0       	push   0xc0023eeb
c00112c8:	e8 d5 ec ff ff       	call   c000ffa2 <KePanic(char const*)>
c00112cd:	83 c4 10             	add    esp,0x10
c00112d0:	f7 d3                	not    ebx
c00112d2:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c00112d8:	58                   	pop    eax
c00112d9:	5b                   	pop    ebx
c00112da:	5e                   	pop    esi
c00112db:	c3                   	ret    

c00112dc <KiFinishSignalZ>:
c00112dc:	53                   	push   ebx
c00112dd:	83 ec 10             	sub    esp,0x10
c00112e0:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00112e4:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c00112e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00112ec:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00112ef:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00112f5:	e8 a7 ff ff ff       	call   c00112a1 <KeCompleteSignal(SigHandlerBlock*, int)>
c00112fa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0011300:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011307:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001130e:	83 c4 18             	add    esp,0x18
c0011311:	5b                   	pop    ebx
c0011312:	c3                   	ret    

c0011313 <SysSeekDir(regs*)>:
c0011313:	31 c0                	xor    eax,eax
c0011315:	31 d2                	xor    edx,edx
c0011317:	c3                   	ret    

c0011318 <SysTellDir(regs*)>:
c0011318:	31 c0                	xor    eax,eax
c001131a:	31 d2                	xor    edx,edx
c001131c:	c3                   	ret    

c001131d <SysVerify(regs*)>:
c001131d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011321:	31 d2                	xor    edx,edx
c0011323:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011326:	c3                   	ret    

c0011327 <SysGetArgc(regs*)>:
c0011327:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001132c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001132f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011335:	89 c2                	mov    edx,eax
c0011337:	c1 fa 1f             	sar    edx,0x1f
c001133a:	c3                   	ret    

c001133b <SysTTYName(regs*)>:
c001133b:	b8 01 00 00 00       	mov    eax,0x1
c0011340:	31 d2                	xor    edx,edx
c0011342:	c3                   	ret    

c0011343 <SysFormatDisk(regs*)>:
c0011343:	56                   	push   esi
c0011344:	53                   	push   ebx
c0011345:	83 ec 04             	sub    esp,0x4
c0011348:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001134c:	8b 1d 04 b3 02 c0    	mov    ebx,DWORD PTR ds:0xc002b304
c0011352:	eb 28                	jmp    c001137c <SysFormatDisk(regs*)+0x39>
c0011354:	83 ec 0c             	sub    esp,0xc
c0011357:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001135a:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001135d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001135f:	51                   	push   ecx
c0011360:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011363:	51                   	push   ecx
c0011364:	50                   	push   eax
c0011365:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001136c:	50                   	push   eax
c001136d:	53                   	push   ebx
c001136e:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0011371:	83 c4 20             	add    esp,0x20
c0011374:	83 f8 08             	cmp    eax,0x8
c0011377:	75 14                	jne    c001138d <SysFormatDisk(regs*)+0x4a>
c0011379:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001137c:	85 db                	test   ebx,ebx
c001137e:	75 d4                	jne    c0011354 <SysFormatDisk(regs*)+0x11>
c0011380:	83 c4 04             	add    esp,0x4
c0011383:	b8 03 00 00 00       	mov    eax,0x3
c0011388:	31 d2                	xor    edx,edx
c001138a:	5b                   	pop    ebx
c001138b:	5e                   	pop    esi
c001138c:	c3                   	ret    
c001138d:	85 c0                	test   eax,eax
c001138f:	74 1f                	je     c00113b0 <SysFormatDisk(regs*)+0x6d>
c0011391:	83 f8 09             	cmp    eax,0x9
c0011394:	74 0d                	je     c00113a3 <SysFormatDisk(regs*)+0x60>
c0011396:	83 c4 04             	add    esp,0x4
c0011399:	b8 02 00 00 00       	mov    eax,0x2
c001139e:	31 d2                	xor    edx,edx
c00113a0:	5b                   	pop    ebx
c00113a1:	5e                   	pop    esi
c00113a2:	c3                   	ret    
c00113a3:	83 c4 04             	add    esp,0x4
c00113a6:	b8 01 00 00 00       	mov    eax,0x1
c00113ab:	31 d2                	xor    edx,edx
c00113ad:	5b                   	pop    ebx
c00113ae:	5e                   	pop    esi
c00113af:	c3                   	ret    
c00113b0:	83 c4 04             	add    esp,0x4
c00113b3:	31 c0                	xor    eax,eax
c00113b5:	31 d2                	xor    edx,edx
c00113b7:	5b                   	pop    ebx
c00113b8:	5e                   	pop    esi
c00113b9:	c3                   	ret    

c00113ba <SysSetDiskVolumeLabel(regs*)>:
c00113ba:	56                   	push   esi
c00113bb:	53                   	push   ebx
c00113bc:	83 ec 04             	sub    esp,0x4
c00113bf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00113c3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00113c6:	83 f8 19             	cmp    eax,0x19
c00113c9:	77 33                	ja     c00113fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00113cb:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c00113d2:	85 c9                	test   ecx,ecx
c00113d4:	74 28                	je     c00113fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00113d6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00113d9:	85 db                	test   ebx,ebx
c00113db:	74 21                	je     c00113fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00113dd:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c00113e3:	85 d2                	test   edx,edx
c00113e5:	74 17                	je     c00113fe <SysSetDiskVolumeLabel(regs*)+0x44>
c00113e7:	8b 32                	mov    esi,DWORD PTR [edx]
c00113e9:	53                   	push   ebx
c00113ea:	50                   	push   eax
c00113eb:	51                   	push   ecx
c00113ec:	52                   	push   edx
c00113ed:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c00113f0:	83 c4 10             	add    esp,0x10
c00113f3:	89 c2                	mov    edx,eax
c00113f5:	83 c4 04             	add    esp,0x4
c00113f8:	c1 fa 1f             	sar    edx,0x1f
c00113fb:	5b                   	pop    ebx
c00113fc:	5e                   	pop    esi
c00113fd:	c3                   	ret    
c00113fe:	83 c4 04             	add    esp,0x4
c0011401:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011406:	ba ff ff ff ff       	mov    edx,0xffffffff
c001140b:	5b                   	pop    ebx
c001140c:	5e                   	pop    esi
c001140d:	c3                   	ret    

c001140e <SysGetDiskVolumeLabel(regs*)>:
c001140e:	57                   	push   edi
c001140f:	56                   	push   esi
c0011410:	53                   	push   ebx
c0011411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011415:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011418:	83 fa 19             	cmp    edx,0x19
c001141b:	77 3c                	ja     c0011459 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001141d:	8b 0c 95 e0 ba 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd4520]
c0011424:	85 c9                	test   ecx,ecx
c0011426:	74 31                	je     c0011459 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011428:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001142b:	85 db                	test   ebx,ebx
c001142d:	74 2a                	je     c0011459 <SysGetDiskVolumeLabel(regs*)+0x4b>
c001142f:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011432:	85 f6                	test   esi,esi
c0011434:	74 23                	je     c0011459 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011436:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c001143c:	85 c0                	test   eax,eax
c001143e:	74 19                	je     c0011459 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011440:	83 ec 0c             	sub    esp,0xc
c0011443:	8b 38                	mov    edi,DWORD PTR [eax]
c0011445:	56                   	push   esi
c0011446:	53                   	push   ebx
c0011447:	52                   	push   edx
c0011448:	51                   	push   ecx
c0011449:	50                   	push   eax
c001144a:	ff 57 58             	call   DWORD PTR [edi+0x58]
c001144d:	83 c4 20             	add    esp,0x20
c0011450:	89 c2                	mov    edx,eax
c0011452:	5b                   	pop    ebx
c0011453:	c1 fa 1f             	sar    edx,0x1f
c0011456:	5e                   	pop    esi
c0011457:	5f                   	pop    edi
c0011458:	c3                   	ret    
c0011459:	5b                   	pop    ebx
c001145a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001145f:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011464:	5e                   	pop    esi
c0011465:	5f                   	pop    edi
c0011466:	c3                   	ret    

c0011467 <SysRealpath(regs*)>:
c0011467:	83 ec 0c             	sub    esp,0xc
c001146a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001146e:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011471:	85 d2                	test   edx,edx
c0011473:	74 07                	je     c001147c <SysRealpath(regs*)+0x15>
c0011475:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011478:	85 c0                	test   eax,eax
c001147a:	75 0b                	jne    c0011487 <SysRealpath(regs*)+0x20>
c001147c:	b8 01 00 00 00       	mov    eax,0x1
c0011481:	31 d2                	xor    edx,edx
c0011483:	83 c4 0c             	add    esp,0xc
c0011486:	c3                   	ret    
c0011487:	6a 00                	push   0x0
c0011489:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001148f:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011492:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011498:	51                   	push   ecx
c0011499:	52                   	push   edx
c001149a:	50                   	push   eax
c001149b:	e8 7a 69 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00114a0:	83 c4 10             	add    esp,0x10
c00114a3:	31 c0                	xor    eax,eax
c00114a5:	31 d2                	xor    edx,edx
c00114a7:	83 c4 0c             	add    esp,0xc
c00114aa:	c3                   	ret    

c00114ab <SysReadDir(regs*)>:
c00114ab:	53                   	push   ebx
c00114ac:	83 ec 18             	sub    esp,0x18
c00114af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00114b3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00114b6:	83 f8 02             	cmp    eax,0x2
c00114b9:	76 61                	jbe    c001151c <SysReadDir(regs*)+0x71>
c00114bb:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c00114c2:	77 49                	ja     c001150d <SysReadDir(regs*)+0x62>
c00114c4:	83 ec 0c             	sub    esp,0xc
c00114c7:	50                   	push   eax
c00114c8:	e8 5c 1d 00 00       	call   c0013229 <KeGetFileFromDescriptor(int)>
c00114cd:	83 c4 10             	add    esp,0x10
c00114d0:	85 c0                	test   eax,eax
c00114d2:	74 39                	je     c001150d <SysReadDir(regs*)+0x62>
c00114d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00114dc:	83 ec 0c             	sub    esp,0xc
c00114df:	8b 10                	mov    edx,DWORD PTR [eax]
c00114e1:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00114e5:	51                   	push   ecx
c00114e6:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00114e9:	51                   	push   ecx
c00114ea:	6a 00                	push   0x0
c00114ec:	68 10 01 00 00       	push   0x110
c00114f1:	50                   	push   eax
c00114f2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00114f5:	83 c4 20             	add    esp,0x20
c00114f8:	85 c0                	test   eax,eax
c00114fa:	74 29                	je     c0011525 <SysReadDir(regs*)+0x7a>
c00114fc:	83 f8 07             	cmp    eax,0x7
c00114ff:	74 1b                	je     c001151c <SysReadDir(regs*)+0x71>
c0011501:	b8 02 00 00 00       	mov    eax,0x2
c0011506:	31 d2                	xor    edx,edx
c0011508:	83 c4 18             	add    esp,0x18
c001150b:	5b                   	pop    ebx
c001150c:	c3                   	ret    
c001150d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011512:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011517:	83 c4 18             	add    esp,0x18
c001151a:	5b                   	pop    ebx
c001151b:	c3                   	ret    
c001151c:	b8 01 00 00 00       	mov    eax,0x1
c0011521:	31 d2                	xor    edx,edx
c0011523:	eb e3                	jmp    c0011508 <SysReadDir(regs*)+0x5d>
c0011525:	31 c0                	xor    eax,eax
c0011527:	31 d2                	xor    edx,edx
c0011529:	eb dd                	jmp    c0011508 <SysReadDir(regs*)+0x5d>

c001152b <SysIsATTY(regs*)>:
c001152b:	83 ec 0c             	sub    esp,0xc
c001152e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011532:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011535:	83 f8 02             	cmp    eax,0x2
c0011538:	76 07                	jbe    c0011541 <SysIsATTY(regs*)+0x16>
c001153a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001153f:	75 26                	jne    c0011567 <SysIsATTY(regs*)+0x3c>
c0011541:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011546:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011549:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001154f:	85 c0                	test   eax,eax
c0011551:	74 24                	je     c0011577 <SysIsATTY(regs*)+0x4c>
c0011553:	83 ec 0c             	sub    esp,0xc
c0011556:	8b 10                	mov    edx,DWORD PTR [eax]
c0011558:	50                   	push   eax
c0011559:	ff 12                	call   DWORD PTR [edx]
c001155b:	31 d2                	xor    edx,edx
c001155d:	0f b6 c0             	movzx  eax,al
c0011560:	83 c4 10             	add    esp,0x10
c0011563:	83 c4 0c             	add    esp,0xc
c0011566:	c3                   	ret    
c0011567:	83 ec 0c             	sub    esp,0xc
c001156a:	50                   	push   eax
c001156b:	e8 b9 1c 00 00       	call   c0013229 <KeGetFileFromDescriptor(int)>
c0011570:	83 c4 10             	add    esp,0x10
c0011573:	85 c0                	test   eax,eax
c0011575:	75 dc                	jne    c0011553 <SysIsATTY(regs*)+0x28>
c0011577:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001157c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011581:	83 c4 0c             	add    esp,0xc
c0011584:	c3                   	ret    

c0011585 <SysSeek(regs*)>:
c0011585:	53                   	push   ebx
c0011586:	83 ec 08             	sub    esp,0x8
c0011589:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001158d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011590:	8d 50 fd             	lea    edx,[eax-0x3]
c0011593:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011599:	77 39                	ja     c00115d4 <SysSeek(regs*)+0x4f>
c001159b:	83 ec 0c             	sub    esp,0xc
c001159e:	50                   	push   eax
c001159f:	e8 85 1c 00 00       	call   c0013229 <KeGetFileFromDescriptor(int)>
c00115a4:	83 c4 10             	add    esp,0x10
c00115a7:	85 c0                	test   eax,eax
c00115a9:	74 29                	je     c00115d4 <SysSeek(regs*)+0x4f>
c00115ab:	83 ec 04             	sub    esp,0x4
c00115ae:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00115b1:	31 db                	xor    ebx,ebx
c00115b3:	53                   	push   ebx
c00115b4:	51                   	push   ecx
c00115b5:	50                   	push   eax
c00115b6:	e8 53 6c ff ff       	call   c000820e <File::seek(unsigned long long)>
c00115bb:	83 c4 10             	add    esp,0x10
c00115be:	85 c0                	test   eax,eax
c00115c0:	0f 95 c0             	setne  al
c00115c3:	31 d2                	xor    edx,edx
c00115c5:	0f b6 c0             	movzx  eax,al
c00115c8:	f7 d8                	neg    eax
c00115ca:	83 d2 00             	adc    edx,0x0
c00115cd:	83 c4 08             	add    esp,0x8
c00115d0:	f7 da                	neg    edx
c00115d2:	5b                   	pop    ebx
c00115d3:	c3                   	ret    
c00115d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00115d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00115de:	83 c4 08             	add    esp,0x8
c00115e1:	5b                   	pop    ebx
c00115e2:	c3                   	ret    

c00115e3 <SysTell(regs*)>:
c00115e3:	53                   	push   ebx
c00115e4:	83 ec 08             	sub    esp,0x8
c00115e7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00115eb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115ee:	83 f8 02             	cmp    eax,0x2
c00115f1:	76 56                	jbe    c0011649 <SysTell(regs*)+0x66>
c00115f3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115f8:	76 19                	jbe    c0011613 <SysTell(regs*)+0x30>
c00115fa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00115fd:	31 d2                	xor    edx,edx
c00115ff:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011605:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001160c:	31 c0                	xor    eax,eax
c001160e:	83 c4 08             	add    esp,0x8
c0011611:	5b                   	pop    ebx
c0011612:	c3                   	ret    
c0011613:	83 ec 0c             	sub    esp,0xc
c0011616:	50                   	push   eax
c0011617:	e8 0d 1c 00 00       	call   c0013229 <KeGetFileFromDescriptor(int)>
c001161c:	83 c4 10             	add    esp,0x10
c001161f:	85 c0                	test   eax,eax
c0011621:	74 26                	je     c0011649 <SysTell(regs*)+0x66>
c0011623:	83 ec 08             	sub    esp,0x8
c0011626:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011629:	52                   	push   edx
c001162a:	50                   	push   eax
c001162b:	e8 8a 6c ff ff       	call   c00082ba <File::tell(unsigned long long*)>
c0011630:	83 c4 10             	add    esp,0x10
c0011633:	85 c0                	test   eax,eax
c0011635:	0f 95 c0             	setne  al
c0011638:	31 d2                	xor    edx,edx
c001163a:	0f b6 c0             	movzx  eax,al
c001163d:	f7 d8                	neg    eax
c001163f:	83 d2 00             	adc    edx,0x0
c0011642:	83 c4 08             	add    esp,0x8
c0011645:	f7 da                	neg    edx
c0011647:	5b                   	pop    ebx
c0011648:	c3                   	ret    
c0011649:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001164e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011653:	83 c4 08             	add    esp,0x8
c0011656:	5b                   	pop    ebx
c0011657:	c3                   	ret    

c0011658 <SysSize(regs*)>:
c0011658:	53                   	push   ebx
c0011659:	83 ec 18             	sub    esp,0x18
c001165c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011660:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011663:	83 f8 02             	cmp    eax,0x2
c0011666:	76 5b                	jbe    c00116c3 <SysSize(regs*)+0x6b>
c0011668:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001166d:	76 19                	jbe    c0011688 <SysSize(regs*)+0x30>
c001166f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011672:	31 d2                	xor    edx,edx
c0011674:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001167a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011681:	31 c0                	xor    eax,eax
c0011683:	83 c4 18             	add    esp,0x18
c0011686:	5b                   	pop    ebx
c0011687:	c3                   	ret    
c0011688:	83 ec 0c             	sub    esp,0xc
c001168b:	50                   	push   eax
c001168c:	e8 98 1b 00 00       	call   c0013229 <KeGetFileFromDescriptor(int)>
c0011691:	83 c4 10             	add    esp,0x10
c0011694:	85 c0                	test   eax,eax
c0011696:	74 2b                	je     c00116c3 <SysSize(regs*)+0x6b>
c0011698:	83 ec 04             	sub    esp,0x4
c001169b:	8d 54 24 13          	lea    edx,[esp+0x13]
c001169f:	52                   	push   edx
c00116a0:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00116a3:	52                   	push   edx
c00116a4:	50                   	push   eax
c00116a5:	e8 a8 6d ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c00116aa:	83 c4 10             	add    esp,0x10
c00116ad:	85 c0                	test   eax,eax
c00116af:	0f 95 c0             	setne  al
c00116b2:	31 d2                	xor    edx,edx
c00116b4:	0f b6 c0             	movzx  eax,al
c00116b7:	f7 d8                	neg    eax
c00116b9:	83 d2 00             	adc    edx,0x0
c00116bc:	83 c4 18             	add    esp,0x18
c00116bf:	f7 da                	neg    edx
c00116c1:	5b                   	pop    ebx
c00116c2:	c3                   	ret    
c00116c3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00116c8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00116cd:	83 c4 18             	add    esp,0x18
c00116d0:	5b                   	pop    ebx
c00116d1:	c3                   	ret    

c00116d2 <SysSizeFromFilename(regs*)>:
c00116d2:	55                   	push   ebp
c00116d3:	57                   	push   edi
c00116d4:	56                   	push   esi
c00116d5:	53                   	push   ebx
c00116d6:	81 ec 4c 02 00 00    	sub    esp,0x24c
c00116dc:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c00116e3:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00116e6:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00116e9:	85 f6                	test   esi,esi
c00116eb:	74 34                	je     c0011721 <SysSizeFromFilename(regs*)+0x4f>
c00116ed:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00116f3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00116f6:	83 f8 02             	cmp    eax,0x2
c00116f9:	76 2d                	jbe    c0011728 <SysSizeFromFilename(regs*)+0x56>
c00116fb:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011700:	76 3b                	jbe    c001173d <SysSizeFromFilename(regs*)+0x6b>
c0011702:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011705:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001170b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011712:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011718:	31 c0                	xor    eax,eax
c001171a:	5b                   	pop    ebx
c001171b:	31 d2                	xor    edx,edx
c001171d:	5e                   	pop    esi
c001171e:	5f                   	pop    edi
c001171f:	5d                   	pop    ebp
c0011720:	c3                   	ret    
c0011721:	89 f8                	mov    eax,edi
c0011723:	83 f8 02             	cmp    eax,0x2
c0011726:	77 d3                	ja     c00116fb <SysSizeFromFilename(regs*)+0x29>
c0011728:	81 c4 4c 02 00 00    	add    esp,0x24c
c001172e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011733:	5b                   	pop    ebx
c0011734:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011739:	5e                   	pop    esi
c001173a:	5f                   	pop    edi
c001173b:	5d                   	pop    ebp
c001173c:	c3                   	ret    
c001173d:	83 ec 0c             	sub    esp,0xc
c0011740:	68 14 01 00 00       	push   0x114
c0011745:	e8 11 e5 ff ff       	call   c000fc5b <malloc>
c001174a:	6a 01                	push   0x1
c001174c:	89 c5                	mov    ebp,eax
c001174e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011753:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011756:	50                   	push   eax
c0011757:	57                   	push   edi
c0011758:	55                   	push   ebp
c0011759:	e8 d6 68 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c001175e:	83 c4 20             	add    esp,0x20
c0011761:	85 ed                	test   ebp,ebp
c0011763:	74 c3                	je     c0011728 <SysSizeFromFilename(regs*)+0x56>
c0011765:	83 ec 04             	sub    esp,0x4
c0011768:	8d 44 24 13          	lea    eax,[esp+0x13]
c001176c:	50                   	push   eax
c001176d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011770:	51                   	push   ecx
c0011771:	55                   	push   ebp
c0011772:	e8 db 6c ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0011777:	89 c3                	mov    ebx,eax
c0011779:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001177c:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001177f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011782:	83 c4 10             	add    esp,0x10
c0011785:	85 db                	test   ebx,ebx
c0011787:	75 9f                	jne    c0011728 <SysSizeFromFilename(regs*)+0x56>
c0011789:	6a 00                	push   0x0
c001178b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011790:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011793:	05 0c 01 00 00       	add    eax,0x10c
c0011798:	50                   	push   eax
c0011799:	57                   	push   edi
c001179a:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00117a1:	53                   	push   ebx
c00117a2:	e8 73 66 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00117a7:	58                   	pop    eax
c00117a8:	5a                   	pop    edx
c00117a9:	8d 44 24 18          	lea    eax,[esp+0x18]
c00117ad:	50                   	push   eax
c00117ae:	53                   	push   ebx
c00117af:	e8 ed 60 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00117b4:	83 c4 10             	add    esp,0x10
c00117b7:	83 f8 01             	cmp    eax,0x1
c00117ba:	74 1a                	je     c00117d6 <SysSizeFromFilename(regs*)+0x104>
c00117bc:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00117c1:	74 26                	je     c00117e9 <SysSizeFromFilename(regs*)+0x117>
c00117c3:	85 f6                	test   esi,esi
c00117c5:	0f 84 47 ff ff ff    	je     c0011712 <SysSizeFromFilename(regs*)+0x40>
c00117cb:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00117d1:	e9 3c ff ff ff       	jmp    c0011712 <SysSizeFromFilename(regs*)+0x40>
c00117d6:	85 f6                	test   esi,esi
c00117d8:	0f 84 34 ff ff ff    	je     c0011712 <SysSizeFromFilename(regs*)+0x40>
c00117de:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c00117e4:	e9 29 ff ff ff       	jmp    c0011712 <SysSizeFromFilename(regs*)+0x40>
c00117e9:	85 f6                	test   esi,esi
c00117eb:	0f 84 21 ff ff ff    	je     c0011712 <SysSizeFromFilename(regs*)+0x40>
c00117f1:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c00117f7:	e9 16 ff ff ff       	jmp    c0011712 <SysSizeFromFilename(regs*)+0x40>

c00117fc <SysSizeFromFilenameNoSymlink(regs*)>:
c00117fc:	55                   	push   ebp
c00117fd:	57                   	push   edi
c00117fe:	56                   	push   esi
c00117ff:	53                   	push   ebx
c0011800:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0011806:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c001180d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011810:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011813:	85 f6                	test   esi,esi
c0011815:	74 34                	je     c001184b <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0011817:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001181d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011820:	83 f8 02             	cmp    eax,0x2
c0011823:	76 2d                	jbe    c0011852 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0011825:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001182a:	76 3b                	jbe    c0011867 <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c001182c:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001182f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011835:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001183c:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011842:	31 c0                	xor    eax,eax
c0011844:	5b                   	pop    ebx
c0011845:	31 d2                	xor    edx,edx
c0011847:	5e                   	pop    esi
c0011848:	5f                   	pop    edi
c0011849:	5d                   	pop    ebp
c001184a:	c3                   	ret    
c001184b:	89 f8                	mov    eax,edi
c001184d:	83 f8 02             	cmp    eax,0x2
c0011850:	77 d3                	ja     c0011825 <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0011852:	81 c4 4c 02 00 00    	add    esp,0x24c
c0011858:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001185d:	5b                   	pop    ebx
c001185e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011863:	5e                   	pop    esi
c0011864:	5f                   	pop    edi
c0011865:	5d                   	pop    ebp
c0011866:	c3                   	ret    
c0011867:	83 ec 0c             	sub    esp,0xc
c001186a:	68 14 01 00 00       	push   0x114
c001186f:	e8 e7 e3 ff ff       	call   c000fc5b <malloc>
c0011874:	6a 00                	push   0x0
c0011876:	89 c5                	mov    ebp,eax
c0011878:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001187d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011880:	50                   	push   eax
c0011881:	57                   	push   edi
c0011882:	55                   	push   ebp
c0011883:	e8 ac 67 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011888:	83 c4 20             	add    esp,0x20
c001188b:	85 ed                	test   ebp,ebp
c001188d:	74 c3                	je     c0011852 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c001188f:	83 ec 04             	sub    esp,0x4
c0011892:	8d 44 24 13          	lea    eax,[esp+0x13]
c0011896:	50                   	push   eax
c0011897:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001189a:	51                   	push   ecx
c001189b:	55                   	push   ebp
c001189c:	e8 b1 6b ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c00118a1:	89 c3                	mov    ebx,eax
c00118a3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00118a6:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00118a9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00118ac:	83 c4 10             	add    esp,0x10
c00118af:	85 db                	test   ebx,ebx
c00118b1:	75 9f                	jne    c0011852 <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c00118b3:	6a 00                	push   0x0
c00118b5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00118ba:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00118bd:	05 0c 01 00 00       	add    eax,0x10c
c00118c2:	50                   	push   eax
c00118c3:	57                   	push   edi
c00118c4:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c00118cb:	53                   	push   ebx
c00118cc:	e8 49 65 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00118d1:	58                   	pop    eax
c00118d2:	5a                   	pop    edx
c00118d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00118d7:	50                   	push   eax
c00118d8:	53                   	push   ebx
c00118d9:	e8 c3 5f ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c00118de:	83 c4 10             	add    esp,0x10
c00118e1:	83 f8 01             	cmp    eax,0x1
c00118e4:	74 1a                	je     c0011900 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c00118e6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00118eb:	74 26                	je     c0011913 <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c00118ed:	85 f6                	test   esi,esi
c00118ef:	0f 84 47 ff ff ff    	je     c001183c <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c00118f5:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c00118fb:	e9 3c ff ff ff       	jmp    c001183c <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011900:	85 f6                	test   esi,esi
c0011902:	0f 84 34 ff ff ff    	je     c001183c <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011908:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c001190e:	e9 29 ff ff ff       	jmp    c001183c <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0011913:	85 f6                	test   esi,esi
c0011915:	0f 84 21 ff ff ff    	je     c001183c <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c001191b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0011921:	e9 16 ff ff ff       	jmp    c001183c <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0011926 <SysClose(regs*)>:
c0011926:	53                   	push   ebx
c0011927:	83 ec 08             	sub    esp,0x8
c001192a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001192e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011931:	83 f8 02             	cmp    eax,0x2
c0011934:	76 41                	jbe    c0011977 <SysClose(regs*)+0x51>
c0011936:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c001193c:	83 fa 01             	cmp    edx,0x1
c001193f:	76 2d                	jbe    c001196e <SysClose(regs*)+0x48>
c0011941:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011946:	77 2f                	ja     c0011977 <SysClose(regs*)+0x51>
c0011948:	83 ec 0c             	sub    esp,0xc
c001194b:	50                   	push   eax
c001194c:	e8 d8 18 00 00       	call   c0013229 <KeGetFileFromDescriptor(int)>
c0011951:	83 c4 10             	add    esp,0x10
c0011954:	89 c3                	mov    ebx,eax
c0011956:	85 c0                	test   eax,eax
c0011958:	74 1d                	je     c0011977 <SysClose(regs*)+0x51>
c001195a:	83 ec 0c             	sub    esp,0xc
c001195d:	50                   	push   eax
c001195e:	e8 4b 68 ff ff       	call   c00081ae <File::close()>
c0011963:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011965:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011968:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001196b:	83 c4 10             	add    esp,0x10
c001196e:	31 c0                	xor    eax,eax
c0011970:	31 d2                	xor    edx,edx
c0011972:	83 c4 08             	add    esp,0x8
c0011975:	5b                   	pop    ebx
c0011976:	c3                   	ret    
c0011977:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001197c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011981:	83 c4 08             	add    esp,0x8
c0011984:	5b                   	pop    ebx
c0011985:	c3                   	ret    

c0011986 <SysOpenDir(regs*)>:
c0011986:	56                   	push   esi
c0011987:	53                   	push   ebx
c0011988:	83 ec 04             	sub    esp,0x4
c001198b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001198f:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011992:	85 c9                	test   ecx,ecx
c0011994:	74 5d                	je     c00119f3 <SysOpenDir(regs*)+0x6d>
c0011996:	83 ec 0c             	sub    esp,0xc
c0011999:	68 14 01 00 00       	push   0x114
c001199e:	e8 b8 e2 ff ff       	call   c000fc5b <malloc>
c00119a3:	83 c4 0c             	add    esp,0xc
c00119a6:	89 c6                	mov    esi,eax
c00119a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00119ad:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119b0:	50                   	push   eax
c00119b1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00119b4:	52                   	push   edx
c00119b5:	56                   	push   esi
c00119b6:	e8 57 6c ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c00119bb:	83 c4 10             	add    esp,0x10
c00119be:	85 f6                	test   esi,esi
c00119c0:	74 31                	je     c00119f3 <SysOpenDir(regs*)+0x6d>
c00119c2:	83 ec 0c             	sub    esp,0xc
c00119c5:	56                   	push   esi
c00119c6:	e8 0f 6d ff ff       	call   c00086da <Directory::open()>
c00119cb:	83 c4 10             	add    esp,0x10
c00119ce:	85 c0                	test   eax,eax
c00119d0:	75 21                	jne    c00119f3 <SysOpenDir(regs*)+0x6d>
c00119d2:	83 ec 0c             	sub    esp,0xc
c00119d5:	56                   	push   esi
c00119d6:	e8 51 15 00 00       	call   c0012f2c <UnixFile::getFileDescriptor()>
c00119db:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00119de:	83 c4 10             	add    esp,0x10
c00119e1:	89 02                	mov    DWORD PTR [edx],eax
c00119e3:	c1 f8 1f             	sar    eax,0x1f
c00119e6:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00119e9:	83 c4 04             	add    esp,0x4
c00119ec:	31 c0                	xor    eax,eax
c00119ee:	31 d2                	xor    edx,edx
c00119f0:	5b                   	pop    ebx
c00119f1:	5e                   	pop    esi
c00119f2:	c3                   	ret    
c00119f3:	83 c4 04             	add    esp,0x4
c00119f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00119fb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a00:	5b                   	pop    ebx
c0011a01:	5e                   	pop    esi
c0011a02:	c3                   	ret    

c0011a03 <SysMakeDir(regs*)>:
c0011a03:	56                   	push   esi
c0011a04:	53                   	push   ebx
c0011a05:	83 ec 10             	sub    esp,0x10
c0011a08:	68 14 01 00 00       	push   0x114
c0011a0d:	e8 49 e2 ff ff       	call   c000fc5b <malloc>
c0011a12:	83 c4 0c             	add    esp,0xc
c0011a15:	89 c3                	mov    ebx,eax
c0011a17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011a1c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011a1f:	50                   	push   eax
c0011a20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011a24:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011a27:	52                   	push   edx
c0011a28:	53                   	push   ebx
c0011a29:	e8 e4 6b ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c0011a2e:	83 c4 10             	add    esp,0x10
c0011a31:	85 db                	test   ebx,ebx
c0011a33:	74 2c                	je     c0011a61 <SysMakeDir(regs*)+0x5e>
c0011a35:	83 ec 0c             	sub    esp,0xc
c0011a38:	53                   	push   ebx
c0011a39:	e8 7c 6e ff ff       	call   c00088ba <Directory::create()>
c0011a3e:	89 c6                	mov    esi,eax
c0011a40:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011a42:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011a45:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011a48:	83 c4 10             	add    esp,0x10
c0011a4b:	31 c0                	xor    eax,eax
c0011a4d:	85 f6                	test   esi,esi
c0011a4f:	0f 95 c0             	setne  al
c0011a52:	31 d2                	xor    edx,edx
c0011a54:	f7 d8                	neg    eax
c0011a56:	83 d2 00             	adc    edx,0x0
c0011a59:	83 c4 04             	add    esp,0x4
c0011a5c:	f7 da                	neg    edx
c0011a5e:	5b                   	pop    ebx
c0011a5f:	5e                   	pop    esi
c0011a60:	c3                   	ret    
c0011a61:	83 c4 04             	add    esp,0x4
c0011a64:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a69:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a6e:	5b                   	pop    ebx
c0011a6f:	5e                   	pop    esi
c0011a70:	c3                   	ret    

c0011a71 <SysCloseDir(regs*)>:
c0011a71:	53                   	push   ebx
c0011a72:	83 ec 08             	sub    esp,0x8
c0011a75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a79:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011a7c:	8d 50 fd             	lea    edx,[eax-0x3]
c0011a7f:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011a85:	77 2f                	ja     c0011ab6 <SysCloseDir(regs*)+0x45>
c0011a87:	83 ec 0c             	sub    esp,0xc
c0011a8a:	50                   	push   eax
c0011a8b:	e8 99 17 00 00       	call   c0013229 <KeGetFileFromDescriptor(int)>
c0011a90:	83 c4 10             	add    esp,0x10
c0011a93:	89 c3                	mov    ebx,eax
c0011a95:	85 c0                	test   eax,eax
c0011a97:	74 1d                	je     c0011ab6 <SysCloseDir(regs*)+0x45>
c0011a99:	83 ec 0c             	sub    esp,0xc
c0011a9c:	50                   	push   eax
c0011a9d:	e8 94 6c ff ff       	call   c0008736 <Directory::close()>
c0011aa2:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011aa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011aa7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011aaa:	83 c4 10             	add    esp,0x10
c0011aad:	31 c0                	xor    eax,eax
c0011aaf:	31 d2                	xor    edx,edx
c0011ab1:	83 c4 08             	add    esp,0x8
c0011ab4:	5b                   	pop    ebx
c0011ab5:	c3                   	ret    
c0011ab6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011abb:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ac0:	83 c4 08             	add    esp,0x8
c0011ac3:	5b                   	pop    ebx
c0011ac4:	c3                   	ret    

c0011ac5 <SysWait(regs*)>:
c0011ac5:	83 ec 10             	sub    esp,0x10
c0011ac8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011acc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011acf:	52                   	push   edx
c0011ad0:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011ad3:	51                   	push   ecx
c0011ad4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011ad7:	50                   	push   eax
c0011ad8:	e8 df 51 00 00       	call   c0016cbc <waitTask(int, int*, int)>
c0011add:	83 c4 1c             	add    esp,0x1c
c0011ae0:	89 c2                	mov    edx,eax
c0011ae2:	c1 fa 1f             	sar    edx,0x1f
c0011ae5:	c3                   	ret    

c0011ae6 <SysNotImpl(regs*)>:
c0011ae6:	83 ec 18             	sub    esp,0x18
c0011ae9:	68 fc 3e 02 c0       	push   0xc0023efc
c0011aee:	e8 af e4 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0011af3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011af8:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011afd:	83 c4 1c             	add    esp,0x1c
c0011b00:	c3                   	ret    

c0011b01 <SysPanic(regs*)>:
c0011b01:	83 ec 18             	sub    esp,0x18
c0011b04:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011b08:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011b0b:	50                   	push   eax
c0011b0c:	e8 91 e4 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0011b11:	b8 01 00 00 00       	mov    eax,0x1
c0011b16:	31 d2                	xor    edx,edx
c0011b18:	83 c4 1c             	add    esp,0x1c
c0011b1b:	c3                   	ret    

c0011b1c <SysRmdir(regs*)>:
c0011b1c:	56                   	push   esi
c0011b1d:	53                   	push   ebx
c0011b1e:	83 ec 20             	sub    esp,0x20
c0011b21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b25:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011b28:	68 14 01 00 00       	push   0x114
c0011b2d:	e8 29 e1 ff ff       	call   c000fc5b <malloc>
c0011b32:	6a 00                	push   0x0
c0011b34:	89 c3                	mov    ebx,eax
c0011b36:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b3b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b3e:	50                   	push   eax
c0011b3f:	56                   	push   esi
c0011b40:	53                   	push   ebx
c0011b41:	e8 ee 64 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011b46:	83 c4 14             	add    esp,0x14
c0011b49:	53                   	push   ebx
c0011b4a:	e8 cf 67 ff ff       	call   c000831e <File::unlink()>
c0011b4f:	83 c4 10             	add    esp,0x10
c0011b52:	85 db                	test   ebx,ebx
c0011b54:	74 14                	je     c0011b6a <SysRmdir(regs*)+0x4e>
c0011b56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011b5a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011b5c:	83 ec 0c             	sub    esp,0xc
c0011b5f:	53                   	push   ebx
c0011b60:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011b63:	83 c4 10             	add    esp,0x10
c0011b66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011b6a:	85 c0                	test   eax,eax
c0011b6c:	0f 95 c0             	setne  al
c0011b6f:	31 d2                	xor    edx,edx
c0011b71:	0f b6 c0             	movzx  eax,al
c0011b74:	f7 d8                	neg    eax
c0011b76:	83 d2 00             	adc    edx,0x0
c0011b79:	83 c4 14             	add    esp,0x14
c0011b7c:	f7 da                	neg    edx
c0011b7e:	5b                   	pop    ebx
c0011b7f:	5e                   	pop    esi
c0011b80:	c3                   	ret    

c0011b81 <SysUnlink(regs*)>:
c0011b81:	56                   	push   esi
c0011b82:	53                   	push   ebx
c0011b83:	83 ec 20             	sub    esp,0x20
c0011b86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011b8a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011b8d:	68 14 01 00 00       	push   0x114
c0011b92:	e8 c4 e0 ff ff       	call   c000fc5b <malloc>
c0011b97:	6a 00                	push   0x0
c0011b99:	89 c3                	mov    ebx,eax
c0011b9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ba0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ba3:	50                   	push   eax
c0011ba4:	56                   	push   esi
c0011ba5:	53                   	push   ebx
c0011ba6:	e8 89 64 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011bab:	83 c4 14             	add    esp,0x14
c0011bae:	53                   	push   ebx
c0011baf:	e8 6a 67 ff ff       	call   c000831e <File::unlink()>
c0011bb4:	83 c4 10             	add    esp,0x10
c0011bb7:	85 db                	test   ebx,ebx
c0011bb9:	74 14                	je     c0011bcf <SysUnlink(regs*)+0x4e>
c0011bbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011bbf:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bc1:	83 ec 0c             	sub    esp,0xc
c0011bc4:	53                   	push   ebx
c0011bc5:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011bc8:	83 c4 10             	add    esp,0x10
c0011bcb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011bcf:	85 c0                	test   eax,eax
c0011bd1:	0f 95 c0             	setne  al
c0011bd4:	31 d2                	xor    edx,edx
c0011bd6:	0f b6 c0             	movzx  eax,al
c0011bd9:	f7 d8                	neg    eax
c0011bdb:	83 d2 00             	adc    edx,0x0
c0011bde:	83 c4 14             	add    esp,0x14
c0011be1:	f7 da                	neg    edx
c0011be3:	5b                   	pop    ebx
c0011be4:	5e                   	pop    esi
c0011be5:	c3                   	ret    

c0011be6 <SysGetArgv(regs*)>:
c0011be6:	83 ec 0c             	sub    esp,0xc
c0011be9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011bed:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011bf0:	85 c0                	test   eax,eax
c0011bf2:	78 2c                	js     c0011c20 <SysGetArgv(regs*)+0x3a>
c0011bf4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011bfa:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011bfd:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0011c03:	7d 1b                	jge    c0011c20 <SysGetArgv(regs*)+0x3a>
c0011c05:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0011c0c:	85 c0                	test   eax,eax
c0011c0e:	74 18                	je     c0011c28 <SysGetArgv(regs*)+0x42>
c0011c10:	83 ec 08             	sub    esp,0x8
c0011c13:	50                   	push   eax
c0011c14:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0011c17:	50                   	push   eax
c0011c18:	e8 23 ea fe ff       	call   c0000640 <strcpy>
c0011c1d:	83 c4 10             	add    esp,0x10
c0011c20:	31 c0                	xor    eax,eax
c0011c22:	31 d2                	xor    edx,edx
c0011c24:	83 c4 0c             	add    esp,0xc
c0011c27:	c3                   	ret    
c0011c28:	b8 01 00 00 00       	mov    eax,0x1
c0011c2d:	31 d2                	xor    edx,edx
c0011c2f:	83 c4 0c             	add    esp,0xc
c0011c32:	c3                   	ret    

c0011c33 <SysUSleep(regs*)>:
c0011c33:	83 ec 1c             	sub    esp,0x1c
c0011c36:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0011c3a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0011c3d:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0011c40:	6a 00                	push   0x0
c0011c42:	6a 64                	push   0x64
c0011c44:	52                   	push   edx
c0011c45:	50                   	push   eax
c0011c46:	e8 a9 f8 00 00       	call   c00214f4 <__udivdi3>
c0011c4b:	83 c4 14             	add    esp,0x14
c0011c4e:	50                   	push   eax
c0011c4f:	e8 54 51 00 00       	call   c0016da8 <milliTenthSleep(unsigned int)>
c0011c54:	31 c0                	xor    eax,eax
c0011c56:	31 d2                	xor    edx,edx
c0011c58:	83 c4 1c             	add    esp,0x1c
c0011c5b:	c3                   	ret    

c0011c5c <SysSpawn(regs*)>:
c0011c5c:	56                   	push   esi
c0011c5d:	53                   	push   ebx
c0011c5e:	83 ec 04             	sub    esp,0x4
c0011c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c65:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011c68:	85 f6                	test   esi,esi
c0011c6a:	75 0a                	jne    c0011c76 <SysSpawn(regs*)+0x1a>
c0011c6c:	83 c4 04             	add    esp,0x4
c0011c6f:	31 c0                	xor    eax,eax
c0011c71:	31 d2                	xor    edx,edx
c0011c73:	5b                   	pop    ebx
c0011c74:	5e                   	pop    esi
c0011c75:	c3                   	ret    
c0011c76:	83 ec 0c             	sub    esp,0xc
c0011c79:	68 24 07 00 00       	push   0x724
c0011c7e:	e8 d8 df ff ff       	call   c000fc5b <malloc>
c0011c83:	83 c4 10             	add    esp,0x10
c0011c86:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011c89:	89 c6                	mov    esi,eax
c0011c8b:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011c8e:	85 c9                	test   ecx,ecx
c0011c90:	74 39                	je     c0011ccb <SysSpawn(regs*)+0x6f>
c0011c92:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c9a:	52                   	push   edx
c0011c9b:	50                   	push   eax
c0011c9c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011c9f:	50                   	push   eax
c0011ca0:	56                   	push   esi
c0011ca1:	e8 5a 48 00 00       	call   c0016500 <Process::Process(char const*, Process*, char**)>
c0011ca6:	83 c4 10             	add    esp,0x10
c0011ca9:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011cb0:	75 ba                	jne    c0011c6c <SysSpawn(regs*)+0x10>
c0011cb2:	83 ec 0c             	sub    esp,0xc
c0011cb5:	56                   	push   esi
c0011cb6:	e8 c1 4d 00 00       	call   c0016a7c <Process::createUserThread()>
c0011cbb:	8b 06                	mov    eax,DWORD PTR [esi]
c0011cbd:	83 c4 10             	add    esp,0x10
c0011cc0:	89 c2                	mov    edx,eax
c0011cc2:	83 c4 04             	add    esp,0x4
c0011cc5:	c1 fa 1f             	sar    edx,0x1f
c0011cc8:	5b                   	pop    ebx
c0011cc9:	5e                   	pop    esi
c0011cca:	c3                   	ret    
c0011ccb:	31 c0                	xor    eax,eax
c0011ccd:	eb cb                	jmp    c0011c9a <SysSpawn(regs*)+0x3e>

c0011ccf <SysGetEnv(regs*)>:
c0011ccf:	57                   	push   edi
c0011cd0:	56                   	push   esi
c0011cd1:	53                   	push   ebx
c0011cd2:	83 ec 1c             	sub    esp,0x1c
c0011cd5:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011cd9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011cde:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011ce1:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011ce4:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0011ce7:	51                   	push   ecx
c0011ce8:	e8 ba cb ff ff       	call   c000e8a7 <KeGetProcessTotalEnvCount(Process*)>
c0011ced:	83 c4 10             	add    esp,0x10
c0011cf0:	39 c7                	cmp    edi,eax
c0011cf2:	7c 14                	jl     c0011d08 <SysGetEnv(regs*)+0x39>
c0011cf4:	85 f6                	test   esi,esi
c0011cf6:	75 0b                	jne    c0011d03 <SysGetEnv(regs*)+0x34>
c0011cf8:	83 c4 10             	add    esp,0x10
c0011cfb:	31 c0                	xor    eax,eax
c0011cfd:	5b                   	pop    ebx
c0011cfe:	31 d2                	xor    edx,edx
c0011d00:	5e                   	pop    esi
c0011d01:	5f                   	pop    edi
c0011d02:	c3                   	ret    
c0011d03:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011d06:	eb f0                	jmp    c0011cf8 <SysGetEnv(regs*)+0x29>
c0011d08:	8d 44 24 08          	lea    eax,[esp+0x8]
c0011d0c:	83 ec 04             	sub    esp,0x4
c0011d0f:	57                   	push   edi
c0011d10:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011d16:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c0011d19:	57                   	push   edi
c0011d1a:	50                   	push   eax
c0011d1b:	e8 a7 cb ff ff       	call   c000e8c7 <KeGetProcessEnvPair(Process*, int)>
c0011d20:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d23:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011d27:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011d2b:	83 c4 0c             	add    esp,0xc
c0011d2e:	85 d2                	test   edx,edx
c0011d30:	75 23                	jne    c0011d55 <SysGetEnv(regs*)+0x86>
c0011d32:	83 ec 0c             	sub    esp,0xc
c0011d35:	50                   	push   eax
c0011d36:	e8 35 e8 fe ff       	call   c0000570 <strlen>
c0011d3b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d3e:	89 c3                	mov    ebx,eax
c0011d40:	e8 2b e8 fe ff       	call   c0000570 <strlen>
c0011d45:	83 c4 10             	add    esp,0x10
c0011d48:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0011d4c:	83 c4 10             	add    esp,0x10
c0011d4f:	31 d2                	xor    edx,edx
c0011d51:	5b                   	pop    ebx
c0011d52:	5e                   	pop    esi
c0011d53:	5f                   	pop    edi
c0011d54:	c3                   	ret    
c0011d55:	83 ec 08             	sub    esp,0x8
c0011d58:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011d5b:	50                   	push   eax
c0011d5c:	56                   	push   esi
c0011d5d:	e8 de e8 fe ff       	call   c0000640 <strcpy>
c0011d62:	58                   	pop    eax
c0011d63:	5a                   	pop    edx
c0011d64:	68 16 3f 02 c0       	push   0xc0023f16
c0011d69:	56                   	push   esi
c0011d6a:	e8 d1 ea fe ff       	call   c0000840 <strcat>
c0011d6f:	59                   	pop    ecx
c0011d70:	5b                   	pop    ebx
c0011d71:	57                   	push   edi
c0011d72:	56                   	push   esi
c0011d73:	e8 c8 ea fe ff       	call   c0000840 <strcat>
c0011d78:	83 c4 10             	add    esp,0x10
c0011d7b:	e9 78 ff ff ff       	jmp    c0011cf8 <SysGetEnv(regs*)+0x29>

c0011d80 <SysSetFatAttrib(regs*)>:
c0011d80:	57                   	push   edi
c0011d81:	56                   	push   esi
c0011d82:	53                   	push   ebx
c0011d83:	83 ec 1c             	sub    esp,0x1c
c0011d86:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011d8a:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011d8d:	68 14 01 00 00       	push   0x114
c0011d92:	e8 c4 de ff ff       	call   c000fc5b <malloc>
c0011d97:	83 c4 0c             	add    esp,0xc
c0011d9a:	89 c3                	mov    ebx,eax
c0011d9c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011da1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011da4:	50                   	push   eax
c0011da5:	57                   	push   edi
c0011da6:	53                   	push   ebx
c0011da7:	e8 86 63 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0011dac:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011daf:	83 c4 0c             	add    esp,0xc
c0011db2:	0f b6 d4             	movzx  edx,ah
c0011db5:	0f b6 c0             	movzx  eax,al
c0011db8:	52                   	push   edx
c0011db9:	50                   	push   eax
c0011dba:	53                   	push   ebx
c0011dbb:	e8 f8 65 ff ff       	call   c00083b8 <File::chfatattr(unsigned char, unsigned char)>
c0011dc0:	83 c4 10             	add    esp,0x10
c0011dc3:	85 db                	test   ebx,ebx
c0011dc5:	74 14                	je     c0011ddb <SysSetFatAttrib(regs*)+0x5b>
c0011dc7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011dcb:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011dcd:	83 ec 0c             	sub    esp,0xc
c0011dd0:	53                   	push   ebx
c0011dd1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011dd4:	83 c4 10             	add    esp,0x10
c0011dd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ddb:	85 c0                	test   eax,eax
c0011ddd:	0f 95 c0             	setne  al
c0011de0:	31 d2                	xor    edx,edx
c0011de2:	0f b6 c0             	movzx  eax,al
c0011de5:	f7 d8                	neg    eax
c0011de7:	83 d2 00             	adc    edx,0x0
c0011dea:	83 c4 10             	add    esp,0x10
c0011ded:	f7 da                	neg    edx
c0011def:	5b                   	pop    ebx
c0011df0:	5e                   	pop    esi
c0011df1:	5f                   	pop    edi
c0011df2:	c3                   	ret    

c0011df3 <SysShutdown(regs*)>:
c0011df3:	83 ec 1c             	sub    esp,0x1c
c0011df6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011dfa:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0011dfd:	85 c9                	test   ecx,ecx
c0011dff:	74 18                	je     c0011e19 <SysShutdown(regs*)+0x26>
c0011e01:	83 f9 01             	cmp    ecx,0x1
c0011e04:	74 26                	je     c0011e2c <SysShutdown(regs*)+0x39>
c0011e06:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e0b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e10:	83 f9 02             	cmp    ecx,0x2
c0011e13:	74 24                	je     c0011e39 <SysShutdown(regs*)+0x46>
c0011e15:	83 c4 1c             	add    esp,0x1c
c0011e18:	c3                   	ret    
c0011e19:	e8 02 c5 ff ff       	call   c000e320 <KeShutdown()>
c0011e1e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e23:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e28:	83 c4 1c             	add    esp,0x1c
c0011e2b:	c3                   	ret    
c0011e2c:	e8 13 c5 ff ff       	call   c000e344 <KeSleep()>
c0011e31:	31 c0                	xor    eax,eax
c0011e33:	31 d2                	xor    edx,edx
c0011e35:	83 c4 1c             	add    esp,0x1c
c0011e38:	c3                   	ret    
c0011e39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011e41:	e8 0a c5 ff ff       	call   c000e350 <KeRestart()>
c0011e46:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e4a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011e4e:	eb c5                	jmp    c0011e15 <SysShutdown(regs*)+0x22>

c0011e50 <SysPipe(regs*)>:
c0011e50:	57                   	push   edi
c0011e51:	56                   	push   esi
c0011e52:	53                   	push   ebx
c0011e53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e57:	83 ec 0c             	sub    esp,0xc
c0011e5a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011e5d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011e60:	6a 20                	push   0x20
c0011e62:	e8 f4 dd ff ff       	call   c000fc5b <malloc>
c0011e67:	89 c3                	mov    ebx,eax
c0011e69:	58                   	pop    eax
c0011e6a:	5a                   	pop    edx
c0011e6b:	68 00 50 00 00       	push   0x5000
c0011e70:	53                   	push   ebx
c0011e71:	e8 ae e9 ff ff       	call   c0010824 <Pipe::Pipe(int)>
c0011e76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e79:	e8 ae 10 00 00       	call   c0012f2c <UnixFile::getFileDescriptor()>
c0011e7e:	89 07                	mov    DWORD PTR [edi],eax
c0011e80:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e83:	e8 a4 10 00 00       	call   c0012f2c <UnixFile::getFileDescriptor()>
c0011e88:	83 c4 10             	add    esp,0x10
c0011e8b:	89 06                	mov    DWORD PTR [esi],eax
c0011e8d:	31 d2                	xor    edx,edx
c0011e8f:	5b                   	pop    ebx
c0011e90:	31 c0                	xor    eax,eax
c0011e92:	5e                   	pop    esi
c0011e93:	5f                   	pop    edi
c0011e94:	c3                   	ret    

c0011e95 <SysGetUnixTime(regs*)>:
c0011e95:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0011e9a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011ea0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011ea4:	e9 37 72 ff ff       	jmp    c00090e0 <Clock::timeInSecondsLocal()>

c0011ea9 <string_ends_with(char const*, char const*)>:
c0011ea9:	57                   	push   edi
c0011eaa:	56                   	push   esi
c0011eab:	53                   	push   ebx
c0011eac:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011eb0:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0011eb4:	83 ec 0c             	sub    esp,0xc
c0011eb7:	53                   	push   ebx
c0011eb8:	e8 b3 e6 fe ff       	call   c0000570 <strlen>
c0011ebd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ec0:	89 c6                	mov    esi,eax
c0011ec2:	e8 a9 e6 fe ff       	call   c0000570 <strlen>
c0011ec7:	83 c4 10             	add    esp,0x10
c0011eca:	39 c6                	cmp    esi,eax
c0011ecc:	7d 06                	jge    c0011ed4 <string_ends_with(char const*, char const*)+0x2b>
c0011ece:	5b                   	pop    ebx
c0011ecf:	31 c0                	xor    eax,eax
c0011ed1:	5e                   	pop    esi
c0011ed2:	5f                   	pop    edi
c0011ed3:	c3                   	ret    
c0011ed4:	83 ec 08             	sub    esp,0x8
c0011ed7:	29 c6                	sub    esi,eax
c0011ed9:	57                   	push   edi
c0011eda:	01 f3                	add    ebx,esi
c0011edc:	53                   	push   ebx
c0011edd:	e8 6e e8 fe ff       	call   c0000750 <strcmp>
c0011ee2:	83 c4 10             	add    esp,0x10
c0011ee5:	85 c0                	test   eax,eax
c0011ee7:	5b                   	pop    ebx
c0011ee8:	0f 94 c0             	sete   al
c0011eeb:	5e                   	pop    esi
c0011eec:	0f b6 c0             	movzx  eax,al
c0011eef:	5f                   	pop    edi
c0011ef0:	c3                   	ret    

c0011ef1 <SysOpen(regs*)>:
c0011ef1:	56                   	push   esi
c0011ef2:	53                   	push   ebx
c0011ef3:	81 ec 04 01 00 00    	sub    esp,0x104
c0011ef9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0011f00:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f03:	85 c0                	test   eax,eax
c0011f05:	0f 84 bc 01 00 00    	je     c00120c7 <SysOpen(regs*)+0x1d6>
c0011f0b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f0e:	85 c0                	test   eax,eax
c0011f10:	0f 84 b1 01 00 00    	je     c00120c7 <SysOpen(regs*)+0x1d6>
c0011f16:	6a 00                	push   0x0
c0011f18:	68 18 3f 02 c0       	push   0xc0023f18
c0011f1d:	50                   	push   eax
c0011f1e:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0011f22:	56                   	push   esi
c0011f23:	e8 f2 5e ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0011f28:	89 34 24             	mov    DWORD PTR [esp],esi
c0011f2b:	e8 40 e6 fe ff       	call   c0000570 <strlen>
c0011f30:	83 c4 10             	add    esp,0x10
c0011f33:	83 e8 01             	sub    eax,0x1
c0011f36:	74 21                	je     c0011f59 <SysOpen(regs*)+0x68>
c0011f38:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c0011f3c:	eb 12                	jmp    c0011f50 <SysOpen(regs*)+0x5f>
c0011f3e:	83 fa 3a             	cmp    edx,0x3a
c0011f41:	74 12                	je     c0011f55 <SysOpen(regs*)+0x64>
c0011f43:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011f47:	83 e8 01             	sub    eax,0x1
c0011f4a:	74 0d                	je     c0011f59 <SysOpen(regs*)+0x68>
c0011f4c:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c0011f50:	83 fa 2e             	cmp    edx,0x2e
c0011f53:	75 e9                	jne    c0011f3e <SysOpen(regs*)+0x4d>
c0011f55:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011f59:	83 ec 08             	sub    esp,0x8
c0011f5c:	68 1c 3f 02 c0       	push   0xc0023f1c
c0011f61:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f64:	50                   	push   eax
c0011f65:	e8 3f ff ff ff       	call   c0011ea9 <string_ends_with(char const*, char const*)>
c0011f6a:	83 c4 10             	add    esp,0x10
c0011f6d:	85 c0                	test   eax,eax
c0011f6f:	74 1d                	je     c0011f8e <SysOpen(regs*)+0x9d>
c0011f71:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f74:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011f7a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f81:	81 c4 04 01 00 00    	add    esp,0x104
c0011f87:	31 c0                	xor    eax,eax
c0011f89:	31 d2                	xor    edx,edx
c0011f8b:	5b                   	pop    ebx
c0011f8c:	5e                   	pop    esi
c0011f8d:	c3                   	ret    
c0011f8e:	83 ec 08             	sub    esp,0x8
c0011f91:	68 21 3f 02 c0       	push   0xc0023f21
c0011f96:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011f99:	50                   	push   eax
c0011f9a:	e8 0a ff ff ff       	call   c0011ea9 <string_ends_with(char const*, char const*)>
c0011f9f:	83 c4 10             	add    esp,0x10
c0011fa2:	85 c0                	test   eax,eax
c0011fa4:	75 cb                	jne    c0011f71 <SysOpen(regs*)+0x80>
c0011fa6:	83 ec 08             	sub    esp,0x8
c0011fa9:	68 1d 3f 02 c0       	push   0xc0023f1d
c0011fae:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011fb1:	50                   	push   eax
c0011fb2:	e8 99 e7 fe ff       	call   c0000750 <strcmp>
c0011fb7:	83 c4 10             	add    esp,0x10
c0011fba:	85 c0                	test   eax,eax
c0011fbc:	74 b3                	je     c0011f71 <SysOpen(regs*)+0x80>
c0011fbe:	83 ec 08             	sub    esp,0x8
c0011fc1:	68 1c 3f 02 c0       	push   0xc0023f1c
c0011fc6:	56                   	push   esi
c0011fc7:	e8 dd fe ff ff       	call   c0011ea9 <string_ends_with(char const*, char const*)>
c0011fcc:	83 c4 10             	add    esp,0x10
c0011fcf:	85 c0                	test   eax,eax
c0011fd1:	75 9e                	jne    c0011f71 <SysOpen(regs*)+0x80>
c0011fd3:	83 ec 08             	sub    esp,0x8
c0011fd6:	68 26 3f 02 c0       	push   0xc0023f26
c0011fdb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011fde:	50                   	push   eax
c0011fdf:	e8 c5 fe ff ff       	call   c0011ea9 <string_ends_with(char const*, char const*)>
c0011fe4:	83 c4 10             	add    esp,0x10
c0011fe7:	85 c0                	test   eax,eax
c0011fe9:	0f 85 eb 00 00 00    	jne    c00120da <SysOpen(regs*)+0x1e9>
c0011fef:	83 ec 08             	sub    esp,0x8
c0011ff2:	68 2b 3f 02 c0       	push   0xc0023f2b
c0011ff7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011ffa:	50                   	push   eax
c0011ffb:	e8 a9 fe ff ff       	call   c0011ea9 <string_ends_with(char const*, char const*)>
c0012000:	83 c4 10             	add    esp,0x10
c0012003:	85 c0                	test   eax,eax
c0012005:	0f 85 cf 00 00 00    	jne    c00120da <SysOpen(regs*)+0x1e9>
c001200b:	83 ec 08             	sub    esp,0x8
c001200e:	68 27 3f 02 c0       	push   0xc0023f27
c0012013:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0012016:	51                   	push   ecx
c0012017:	e8 34 e7 fe ff       	call   c0000750 <strcmp>
c001201c:	83 c4 10             	add    esp,0x10
c001201f:	85 c0                	test   eax,eax
c0012021:	0f 84 b3 00 00 00    	je     c00120da <SysOpen(regs*)+0x1e9>
c0012027:	83 ec 08             	sub    esp,0x8
c001202a:	68 26 3f 02 c0       	push   0xc0023f26
c001202f:	56                   	push   esi
c0012030:	e8 74 fe ff ff       	call   c0011ea9 <string_ends_with(char const*, char const*)>
c0012035:	83 c4 10             	add    esp,0x10
c0012038:	85 c0                	test   eax,eax
c001203a:	0f 85 9a 00 00 00    	jne    c00120da <SysOpen(regs*)+0x1e9>
c0012040:	83 ec 0c             	sub    esp,0xc
c0012043:	68 14 01 00 00       	push   0x114
c0012048:	e8 0e dc ff ff       	call   c000fc5b <malloc>
c001204d:	83 c4 0c             	add    esp,0xc
c0012050:	89 c6                	mov    esi,eax
c0012052:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012057:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001205a:	50                   	push   eax
c001205b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001205e:	52                   	push   edx
c001205f:	56                   	push   esi
c0012060:	e8 cd 60 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0012065:	83 c4 10             	add    esp,0x10
c0012068:	85 f6                	test   esi,esi
c001206a:	74 5b                	je     c00120c7 <SysOpen(regs*)+0x1d6>
c001206c:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001206f:	0f b6 c2             	movzx  eax,dl
c0012072:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0012075:	89 d0                	mov    eax,edx
c0012077:	83 e0 01             	and    eax,0x1
c001207a:	f6 c2 02             	test   dl,0x2
c001207d:	74 03                	je     c0012082 <SysOpen(regs*)+0x191>
c001207f:	83 c8 02             	or     eax,0x2
c0012082:	f6 c2 04             	test   dl,0x4
c0012085:	74 03                	je     c001208a <SysOpen(regs*)+0x199>
c0012087:	83 c8 04             	or     eax,0x4
c001208a:	f6 c2 08             	test   dl,0x8
c001208d:	74 03                	je     c0012092 <SysOpen(regs*)+0x1a1>
c001208f:	83 c8 0a             	or     eax,0xa
c0012092:	80 e2 10             	and    dl,0x10
c0012095:	74 03                	je     c001209a <SysOpen(regs*)+0x1a9>
c0012097:	83 c8 12             	or     eax,0x12
c001209a:	83 ec 08             	sub    esp,0x8
c001209d:	50                   	push   eax
c001209e:	56                   	push   esi
c001209f:	e8 ac 60 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00120a4:	83 c4 10             	add    esp,0x10
c00120a7:	85 c0                	test   eax,eax
c00120a9:	75 1c                	jne    c00120c7 <SysOpen(regs*)+0x1d6>
c00120ab:	83 ec 0c             	sub    esp,0xc
c00120ae:	56                   	push   esi
c00120af:	e8 78 0e 00 00       	call   c0012f2c <UnixFile::getFileDescriptor()>
c00120b4:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00120b7:	83 c4 10             	add    esp,0x10
c00120ba:	89 02                	mov    DWORD PTR [edx],eax
c00120bc:	c1 f8 1f             	sar    eax,0x1f
c00120bf:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00120c2:	e9 ba fe ff ff       	jmp    c0011f81 <SysOpen(regs*)+0x90>
c00120c7:	81 c4 04 01 00 00    	add    esp,0x104
c00120cd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00120d2:	ba ff ff ff ff       	mov    edx,0xffffffff
c00120d7:	5b                   	pop    ebx
c00120d8:	5e                   	pop    esi
c00120d9:	c3                   	ret    
c00120da:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00120dd:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c00120e3:	e9 92 fe ff ff       	jmp    c0011f7a <SysOpen(regs*)+0x89>

c00120e8 <KeSystemCall(regs*, void*)>:
c00120e8:	53                   	push   ebx
c00120e9:	83 ec 08             	sub    esp,0x8
c00120ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00120f0:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00120f3:	83 f8 40             	cmp    eax,0x40
c00120f6:	77 16                	ja     c001210e <KeSystemCall(regs*, void*)+0x26>
c00120f8:	8b 14 85 60 61 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd9ea0]
c00120ff:	85 d2                	test   edx,edx
c0012101:	74 0b                	je     c001210e <KeSystemCall(regs*, void*)+0x26>
c0012103:	83 ec 0c             	sub    esp,0xc
c0012106:	53                   	push   ebx
c0012107:	ff d2                	call   edx
c0012109:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001210c:	eb 0d                	jmp    c001211b <KeSystemCall(regs*, void*)+0x33>
c001210e:	52                   	push   edx
c001210f:	52                   	push   edx
c0012110:	50                   	push   eax
c0012111:	68 30 3f 02 c0       	push   0xc0023f30
c0012116:	e8 49 4e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001211b:	83 c4 10             	add    esp,0x10
c001211e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0012123:	31 d2                	xor    edx,edx
c0012125:	83 c4 08             	add    esp,0x8
c0012128:	5b                   	pop    ebx
c0012129:	c3                   	ret    

c001212a <VgaText::isAtty()>:
c001212a:	b0 01                	mov    al,0x1
c001212c:	c3                   	ret    
c001212d:	90                   	nop

c001212e <VgaText::~VgaText()>:
c001212e:	83 ec 0c             	sub    esp,0xc
c0012131:	ba 9c 3f 02 c0       	mov    edx,0xc0023f9c
c0012136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001213a:	89 10                	mov    DWORD PTR [eax],edx
c001213c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012140:	83 ec 0c             	sub    esp,0xc
c0012143:	50                   	push   eax
c0012144:	e8 d1 0f 00 00       	call   c001311a <UnixFile::~UnixFile()>
c0012149:	83 c4 10             	add    esp,0x10
c001214c:	90                   	nop
c001214d:	83 c4 0c             	add    esp,0xc
c0012150:	c3                   	ret    
c0012151:	90                   	nop

c0012152 <VgaText::~VgaText()>:
c0012152:	83 ec 0c             	sub    esp,0xc
c0012155:	83 ec 0c             	sub    esp,0xc
c0012158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001215c:	e8 cd ff ff ff       	call   c001212e <VgaText::~VgaText()>
c0012161:	83 c4 10             	add    esp,0x10
c0012164:	83 ec 08             	sub    esp,0x8
c0012167:	68 84 01 00 00       	push   0x184
c001216c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012170:	e8 6e b1 ff ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0012175:	83 c4 10             	add    esp,0x10
c0012178:	83 c4 0c             	add    esp,0xc
c001217b:	c3                   	ret    

c001217c <VgaText::read(unsigned long long, void*, int*)>:
c001217c:	83 ec 10             	sub    esp,0x10
c001217f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012183:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012187:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001218b:	e8 bd 83 ff ff       	call   c000a54d <readKeyboard(VgaText*, char*, unsigned long)>
c0012190:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012194:	89 02                	mov    DWORD PTR [edx],eax
c0012196:	31 c0                	xor    eax,eax
c0012198:	83 c4 1c             	add    esp,0x1c
c001219b:	c3                   	ret    

c001219c <setTerminalScrollLock(bool)>:
c001219c:	c3                   	ret    

c001219d <doTerminalCycle()>:
c001219d:	c3                   	ret    

c001219e <addToTerminalCycle(VgaText*)>:
c001219e:	c3                   	ret    

c001219f <scrollTerminalScrollLock(int)>:
c001219f:	c3                   	ret    

c00121a0 <VgaText::updateTitle()>:
c00121a0:	c3                   	ret    
c00121a1:	90                   	nop

c00121a2 <VgaText::load()>:
c00121a2:	c3                   	ret    
c00121a3:	90                   	nop

c00121a4 <VgaText::updateCursor()>:
c00121a4:	83 ec 14             	sub    esp,0x14
c00121a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00121ab:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00121ae:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00121b1:	e8 2e 8c 00 00       	call   c001ade4 <HalConsoleCursorUpdate(int, int)>
c00121b6:	83 c4 1c             	add    esp,0x1c
c00121b9:	c3                   	ret    

c00121ba <VgaText::doANSI_SGR(int)>:
c00121ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00121be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121c2:	85 d2                	test   edx,edx
c00121c4:	75 0b                	jne    c00121d1 <VgaText::doANSI_SGR(int)+0x17>
c00121c6:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00121c9:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00121cc:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00121cf:	eb 59                	jmp    c001222a <VgaText::doANSI_SGR(int)+0x70>
c00121d1:	83 fa 07             	cmp    edx,0x7
c00121d4:	75 0b                	jne    c00121e1 <VgaText::doANSI_SGR(int)+0x27>
c00121d6:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00121d9:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00121dc:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00121df:	eb 49                	jmp    c001222a <VgaText::doANSI_SGR(int)+0x70>
c00121e1:	83 fa 1b             	cmp    edx,0x1b
c00121e4:	74 e0                	je     c00121c6 <VgaText::doANSI_SGR(int)+0xc>
c00121e6:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00121e9:	83 f9 07             	cmp    ecx,0x7
c00121ec:	77 09                	ja     c00121f7 <VgaText::doANSI_SGR(int)+0x3d>
c00121ee:	8b 14 8d a0 62 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9d60]
c00121f5:	eb 20                	jmp    c0012217 <VgaText::doANSI_SGR(int)+0x5d>
c00121f7:	8d 4a d8             	lea    ecx,[edx-0x28]
c00121fa:	83 f9 07             	cmp    ecx,0x7
c00121fd:	77 09                	ja     c0012208 <VgaText::doANSI_SGR(int)+0x4e>
c00121ff:	8b 14 8d a0 62 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd9d60]
c0012206:	eb 22                	jmp    c001222a <VgaText::doANSI_SGR(int)+0x70>
c0012208:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001220b:	83 f9 07             	cmp    ecx,0x7
c001220e:	77 0b                	ja     c001221b <VgaText::doANSI_SGR(int)+0x61>
c0012210:	8b 14 95 58 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9ea8]
c0012217:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001221a:	c3                   	ret    
c001221b:	8d 4a 9c             	lea    ecx,[edx-0x64]
c001221e:	83 f9 07             	cmp    ecx,0x7
c0012221:	77 0a                	ja     c001222d <VgaText::doANSI_SGR(int)+0x73>
c0012223:	8b 14 95 30 61 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd9ed0]
c001222a:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001222d:	c3                   	ret    

c001222e <VgaText::setDefaultBgColour(VgaColour)>:
c001222e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012232:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012236:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0012239:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c001223c:	c3                   	ret    
c001223d:	90                   	nop

c001223e <VgaText::setDefaultFgColour(VgaColour)>:
c001223e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012242:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012246:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0012249:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c001224c:	c3                   	ret    
c001224d:	90                   	nop

c001224e <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c001224e:	53                   	push   ebx
c001224f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012253:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012257:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001225b:	51                   	push   ecx
c001225c:	e8 cd ff ff ff       	call   c001222e <VgaText::setDefaultBgColour(VgaColour)>
c0012261:	58                   	pop    eax
c0012262:	5a                   	pop    edx
c0012263:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0012267:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001226b:	5b                   	pop    ebx
c001226c:	eb d0                	jmp    c001223e <VgaText::setDefaultFgColour(VgaColour)>

c001226e <VgaText::setTitleTextColour(VgaColour)>:
c001226e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012272:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012276:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0012279:	c3                   	ret    

c001227a <VgaText::setTitleColour(VgaColour)>:
c001227a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001227e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012282:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012285:	c3                   	ret    

c0012286 <VgaText::setTitle(char*)>:
c0012286:	c3                   	ret    
c0012287:	90                   	nop

c0012288 <VgaText::combineColours(unsigned char, unsigned char)>:
c0012288:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001228c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0012291:	83 e0 0f             	and    eax,0xf
c0012294:	c1 e2 04             	shl    edx,0x4
c0012297:	09 d0                	or     eax,edx
c0012299:	c3                   	ret    

c001229a <VgaText::scrollScreen()>:
c001229a:	55                   	push   ebp
c001229b:	57                   	push   edi
c001229c:	56                   	push   esi
c001229d:	be 01 00 00 00       	mov    esi,0x1
c00122a2:	53                   	push   ebx
c00122a3:	83 ec 0c             	sub    esp,0xc
c00122a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00122aa:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00122ad:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00122b3:	31 ff                	xor    edi,edi
c00122b5:	01 e9                	add    ecx,ebp
c00122b7:	8a 01                	mov    al,BYTE PTR [ecx]
c00122b9:	83 fe 18             	cmp    esi,0x18
c00122bc:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c00122c2:	75 20                	jne    c00122e4 <VgaText::scrollScreen()+0x4a>
c00122c4:	f7 c7 01 00 00 00    	test   edi,0x1
c00122ca:	74 15                	je     c00122e1 <VgaText::scrollScreen()+0x47>
c00122cc:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00122d0:	50                   	push   eax
c00122d1:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00122d5:	50                   	push   eax
c00122d6:	e8 ad ff ff ff       	call   c0012288 <VgaText::combineColours(unsigned char, unsigned char)>
c00122db:	5a                   	pop    edx
c00122dc:	5a                   	pop    edx
c00122dd:	88 01                	mov    BYTE PTR [ecx],al
c00122df:	eb 03                	jmp    c00122e4 <VgaText::scrollScreen()+0x4a>
c00122e1:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00122e4:	47                   	inc    edi
c00122e5:	41                   	inc    ecx
c00122e6:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00122ec:	75 c9                	jne    c00122b7 <VgaText::scrollScreen()+0x1d>
c00122ee:	46                   	inc    esi
c00122ef:	83 fe 19             	cmp    esi,0x19
c00122f2:	75 b9                	jne    c00122ad <VgaText::scrollScreen()+0x13>
c00122f4:	39 1d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,ebx
c00122fa:	75 1f                	jne    c001231b <VgaText::scrollScreen()+0x81>
c00122fc:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0012300:	74 05                	je     c0012307 <VgaText::scrollScreen()+0x6d>
c0012302:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0012305:	eb 14                	jmp    c001231b <VgaText::scrollScreen()+0x81>
c0012307:	50                   	push   eax
c0012308:	50                   	push   eax
c0012309:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c001230d:	50                   	push   eax
c001230e:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0012312:	50                   	push   eax
c0012313:	e8 60 89 00 00       	call   c001ac78 <HalConsoleScroll(int, int)>
c0012318:	83 c4 10             	add    esp,0x10
c001231b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c001231f:	83 c4 0c             	add    esp,0xc
c0012322:	5b                   	pop    ebx
c0012323:	5e                   	pop    esi
c0012324:	5f                   	pop    edi
c0012325:	5d                   	pop    ebp
c0012326:	e9 79 fe ff ff       	jmp    c00121a4 <VgaText::updateCursor()>
c001232b:	90                   	nop

c001232c <VgaText::combineCharAndColour(char, unsigned char)>:
c001232c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012331:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c0012336:	c1 e0 08             	shl    eax,0x8
c0012339:	09 d0                	or     eax,edx
c001233b:	c3                   	ret    

c001233c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001233c:	55                   	push   ebp
c001233d:	57                   	push   edi
c001233e:	56                   	push   esi
c001233f:	53                   	push   ebx
c0012340:	83 ec 1c             	sub    esp,0x1c
c0012343:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0012347:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001234b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001234f:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0012352:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012356:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001235a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001235e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012362:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0012366:	85 ed                	test   ebp,ebp
c0012368:	75 14                	jne    c001237e <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c001236a:	c7 44 24 30 44 3f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023f44
c0012372:	83 c4 1c             	add    esp,0x1c
c0012375:	5b                   	pop    ebx
c0012376:	5e                   	pop    esi
c0012377:	5f                   	pop    edi
c0012378:	5d                   	pop    ebp
c0012379:	e9 24 dc ff ff       	jmp    c000ffa2 <KePanic(char const*)>
c001237e:	50                   	push   eax
c001237f:	50                   	push   eax
c0012380:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012385:	50                   	push   eax
c0012386:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001238b:	50                   	push   eax
c001238c:	e8 f7 fe ff ff       	call   c0012288 <VgaText::combineColours(unsigned char, unsigned char)>
c0012391:	5a                   	pop    edx
c0012392:	0f be c9             	movsx  ecx,cl
c0012395:	5a                   	pop    edx
c0012396:	0f b6 c0             	movzx  eax,al
c0012399:	50                   	push   eax
c001239a:	51                   	push   ecx
c001239b:	e8 8c ff ff ff       	call   c001232c <VgaText::combineCharAndColour(char, unsigned char)>
c00123a0:	6b d6 50             	imul   edx,esi,0x50
c00123a3:	83 c4 10             	add    esp,0x10
c00123a6:	01 da                	add    edx,ebx
c00123a8:	0f b7 d2             	movzx  edx,dx
c00123ab:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c00123b0:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c00123b6:	75 28                	jne    c00123e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c00123b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123bc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00123c0:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c00123c4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00123c8:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c00123cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00123d0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00123d4:	83 c4 1c             	add    esp,0x1c
c00123d7:	5b                   	pop    ebx
c00123d8:	5e                   	pop    esi
c00123d9:	5f                   	pop    edi
c00123da:	5d                   	pop    ebp
c00123db:	e9 a0 89 00 00       	jmp    c001ad80 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00123e0:	83 c4 1c             	add    esp,0x1c
c00123e3:	5b                   	pop    ebx
c00123e4:	5e                   	pop    esi
c00123e5:	5f                   	pop    edi
c00123e6:	5d                   	pop    ebp
c00123e7:	c3                   	ret    

c00123e8 <VgaText::getCursorX()>:
c00123e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123ec:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00123ef:	c3                   	ret    

c00123f0 <VgaText::getCursorY()>:
c00123f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123f4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00123f7:	c3                   	ret    

c00123f8 <VgaText::setCursor(int, int)>:
c00123f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00123fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012400:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0012403:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012407:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001240a:	e9 95 fd ff ff       	jmp    c00121a4 <VgaText::updateCursor()>

c001240f <setActiveTerminal(VgaText*)>:
c001240f:	53                   	push   ebx
c0012410:	83 ec 08             	sub    esp,0x8
c0012413:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012417:	85 db                	test   ebx,ebx
c0012419:	75 11                	jne    c001242c <setActiveTerminal(VgaText*)+0x1d>
c001241b:	c7 44 24 10 54 3f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0023f54
c0012423:	83 c4 08             	add    esp,0x8
c0012426:	5b                   	pop    ebx
c0012427:	e9 76 db ff ff       	jmp    c000ffa2 <KePanic(char const*)>
c001242c:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0012431:	85 c0                	test   eax,eax
c0012433:	74 0c                	je     c0012441 <setActiveTerminal(VgaText*)+0x32>
c0012435:	83 ec 0c             	sub    esp,0xc
c0012438:	50                   	push   eax
c0012439:	e8 66 fd ff ff       	call   c00121a4 <VgaText::updateCursor()>
c001243e:	83 c4 10             	add    esp,0x10
c0012441:	89 1d b4 e1 02 c0    	mov    DWORD PTR ds:0xc002e1b4,ebx
c0012447:	50                   	push   eax
c0012448:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c001244b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c001244e:	53                   	push   ebx
c001244f:	e8 a4 ff ff ff       	call   c00123f8 <VgaText::setCursor(int, int)>
c0012454:	83 c4 18             	add    esp,0x18
c0012457:	5b                   	pop    ebx
c0012458:	c3                   	ret    
c0012459:	90                   	nop

c001245a <VgaText::clearScreen()>:
c001245a:	57                   	push   edi
c001245b:	56                   	push   esi
c001245c:	31 f6                	xor    esi,esi
c001245e:	53                   	push   ebx
c001245f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012463:	52                   	push   edx
c0012464:	6a 00                	push   0x0
c0012466:	6a 00                	push   0x0
c0012468:	53                   	push   ebx
c0012469:	e8 8a ff ff ff       	call   c00123f8 <VgaText::setCursor(int, int)>
c001246e:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0012475:	83 c4 10             	add    esp,0x10
c0012478:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c001247b:	7e 20                	jle    c001249d <VgaText::clearScreen()+0x43>
c001247d:	31 ff                	xor    edi,edi
c001247f:	50                   	push   eax
c0012480:	50                   	push   eax
c0012481:	56                   	push   esi
c0012482:	57                   	push   edi
c0012483:	47                   	inc    edi
c0012484:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012487:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c001248a:	6a 20                	push   0x20
c001248c:	53                   	push   ebx
c001248d:	e8 aa fe ff ff       	call   c001233c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012492:	83 c4 20             	add    esp,0x20
c0012495:	83 ff 50             	cmp    edi,0x50
c0012498:	75 e5                	jne    c001247f <VgaText::clearScreen()+0x25>
c001249a:	46                   	inc    esi
c001249b:	eb db                	jmp    c0012478 <VgaText::clearScreen()+0x1e>
c001249d:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00124a4:	5b                   	pop    ebx
c00124a5:	5e                   	pop    esi
c00124a6:	5f                   	pop    edi
c00124a7:	c3                   	ret    

c00124a8 <VgaText::setCursorX(int)>:
c00124a8:	83 ec 10             	sub    esp,0x10
c00124ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124af:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00124b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00124b6:	50                   	push   eax
c00124b7:	e8 3c ff ff ff       	call   c00123f8 <VgaText::setCursor(int, int)>
c00124bc:	83 c4 1c             	add    esp,0x1c
c00124bf:	c3                   	ret    

c00124c0 <VgaText::setCursorY(int)>:
c00124c0:	83 ec 10             	sub    esp,0x10
c00124c3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00124c7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124cb:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00124ce:	50                   	push   eax
c00124cf:	e8 24 ff ff ff       	call   c00123f8 <VgaText::setCursor(int, int)>
c00124d4:	83 c4 1c             	add    esp,0x1c
c00124d7:	c3                   	ret    

c00124d8 <VgaText::incrementCursor(bool)>:
c00124d8:	56                   	push   esi
c00124d9:	53                   	push   ebx
c00124da:	51                   	push   ecx
c00124db:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00124df:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00124e3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00124e6:	40                   	inc    eax
c00124e7:	83 f8 50             	cmp    eax,0x50
c00124ea:	74 05                	je     c00124f1 <VgaText::incrementCursor(bool)+0x19>
c00124ec:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00124ef:	eb 24                	jmp    c0012515 <VgaText::incrementCursor(bool)+0x3d>
c00124f1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00124f4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00124fb:	8d 50 01             	lea    edx,[eax+0x1]
c00124fe:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0012501:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0012504:	75 0f                	jne    c0012515 <VgaText::incrementCursor(bool)+0x3d>
c0012506:	83 ec 0c             	sub    esp,0xc
c0012509:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c001250c:	53                   	push   ebx
c001250d:	e8 88 fd ff ff       	call   c001229a <VgaText::scrollScreen()>
c0012512:	83 c4 10             	add    esp,0x10
c0012515:	89 f0                	mov    eax,esi
c0012517:	84 c0                	test   al,al
c0012519:	74 0c                	je     c0012527 <VgaText::incrementCursor(bool)+0x4f>
c001251b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001251f:	5a                   	pop    edx
c0012520:	5b                   	pop    ebx
c0012521:	5e                   	pop    esi
c0012522:	e9 7d fc ff ff       	jmp    c00121a4 <VgaText::updateCursor()>
c0012527:	58                   	pop    eax
c0012528:	5b                   	pop    ebx
c0012529:	5e                   	pop    esi
c001252a:	c3                   	ret    
c001252b:	90                   	nop

c001252c <VgaText::decrementCursor(bool)>:
c001252c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012530:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012534:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0012537:	85 c0                	test   eax,eax
c0012539:	74 04                	je     c001253f <VgaText::decrementCursor(bool)+0x13>
c001253b:	48                   	dec    eax
c001253c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c001253f:	84 c9                	test   cl,cl
c0012541:	74 09                	je     c001254c <VgaText::decrementCursor(bool)+0x20>
c0012543:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012547:	e9 58 fc ff ff       	jmp    c00121a4 <VgaText::updateCursor()>
c001254c:	c3                   	ret    
c001254d:	90                   	nop

c001254e <VgaText::putchar(char, VgaColour, VgaColour)>:
c001254e:	53                   	push   ebx
c001254f:	83 ec 08             	sub    esp,0x8
c0012552:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0012557:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001255b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001255f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0012563:	83 f8 07             	cmp    eax,0x7
c0012566:	75 21                	jne    c0012589 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0012568:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012570:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0012578:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0012580:	83 c4 08             	add    esp,0x8
c0012583:	5b                   	pop    ebx
c0012584:	e9 49 64 ff ff       	jmp    c00089d2 <KeBeep(int, int, bool)>
c0012589:	83 f8 0d             	cmp    eax,0xd
c001258c:	75 09                	jne    c0012597 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c001258e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0012595:	eb 2d                	jmp    c00125c4 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0012597:	83 f8 0a             	cmp    eax,0xa
c001259a:	75 31                	jne    c00125cd <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c001259c:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001259f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00125a6:	8d 50 01             	lea    edx,[eax+0x1]
c00125a9:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00125ac:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00125af:	75 0f                	jne    c00125c0 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00125b1:	83 ec 0c             	sub    esp,0xc
c00125b4:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00125b7:	53                   	push   ebx
c00125b8:	e8 dd fc ff ff       	call   c001229a <VgaText::scrollScreen()>
c00125bd:	83 c4 10             	add    esp,0x10
c00125c0:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00125c4:	83 c4 08             	add    esp,0x8
c00125c7:	5b                   	pop    ebx
c00125c8:	e9 d7 fb ff ff       	jmp    c00121a4 <VgaText::updateCursor()>
c00125cd:	83 f8 08             	cmp    eax,0x8
c00125d0:	75 25                	jne    c00125f7 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c00125d2:	50                   	push   eax
c00125d3:	50                   	push   eax
c00125d4:	6a 01                	push   0x1
c00125d6:	53                   	push   ebx
c00125d7:	e8 50 ff ff ff       	call   c001252c <VgaText::decrementCursor(bool)>
c00125dc:	5a                   	pop    edx
c00125dd:	59                   	pop    ecx
c00125de:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00125e1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00125e4:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00125e7:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00125ea:	6a 20                	push   0x20
c00125ec:	53                   	push   ebx
c00125ed:	e8 4a fd ff ff       	call   c001233c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00125f2:	83 c4 28             	add    esp,0x28
c00125f5:	5b                   	pop    ebx
c00125f6:	c3                   	ret    
c00125f7:	83 ec 08             	sub    esp,0x8
c00125fa:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00125fd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0012600:	51                   	push   ecx
c0012601:	52                   	push   edx
c0012602:	50                   	push   eax
c0012603:	53                   	push   ebx
c0012604:	e8 33 fd ff ff       	call   c001233c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0012609:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c001260d:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0012615:	83 c4 28             	add    esp,0x28
c0012618:	5b                   	pop    ebx
c0012619:	e9 ba fe ff ff       	jmp    c00124d8 <VgaText::incrementCursor(bool)>

c001261e <VgaText::putchar(char)>:
c001261e:	57                   	push   edi
c001261f:	56                   	push   esi
c0012620:	53                   	push   ebx
c0012621:	83 ec 10             	sub    esp,0x10
c0012624:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001262c:	89 f8                	mov    eax,edi
c001262e:	0f be c0             	movsx  eax,al
c0012631:	83 f8 5b             	cmp    eax,0x5b
c0012634:	75 18                	jne    c001264e <VgaText::putchar(char)+0x30>
c0012636:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c001263a:	74 20                	je     c001265c <VgaText::putchar(char)+0x3e>
c001263c:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0012642:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0012649:	e9 c1 00 00 00       	jmp    c001270f <VgaText::putchar(char)+0xf1>
c001264e:	83 f8 1b             	cmp    eax,0x1b
c0012651:	75 09                	jne    c001265c <VgaText::putchar(char)+0x3e>
c0012653:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0012657:	e9 b3 00 00 00       	jmp    c001270f <VgaText::putchar(char)+0xf1>
c001265c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c001265f:	84 c9                	test   cl,cl
c0012661:	0f 84 98 00 00 00    	je     c00126ff <VgaText::putchar(char)+0xe1>
c0012667:	8d 77 c0             	lea    esi,[edi-0x40]
c001266a:	89 f2                	mov    edx,esi
c001266c:	80 fa 3e             	cmp    dl,0x3e
c001266f:	77 78                	ja     c00126e9 <VgaText::putchar(char)+0xcb>
c0012671:	83 f8 6d             	cmp    eax,0x6d
c0012674:	75 47                	jne    c00126bd <VgaText::putchar(char)+0x9f>
c0012676:	31 f6                	xor    esi,esi
c0012678:	31 d2                	xor    edx,edx
c001267a:	31 c0                	xor    eax,eax
c001267c:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c001267f:	7e 2d                	jle    c00126ae <VgaText::putchar(char)+0x90>
c0012681:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0012686:	83 fa 3b             	cmp    edx,0x3b
c0012689:	75 17                	jne    c00126a2 <VgaText::putchar(char)+0x84>
c001268b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001268f:	50                   	push   eax
c0012690:	53                   	push   ebx
c0012691:	e8 24 fb ff ff       	call   c00121ba <VgaText::doANSI_SGR(int)>
c0012696:	59                   	pop    ecx
c0012697:	31 d2                	xor    edx,edx
c0012699:	5f                   	pop    edi
c001269a:	31 c0                	xor    eax,eax
c001269c:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00126a0:	eb 09                	jmp    c00126ab <VgaText::putchar(char)+0x8d>
c00126a2:	6b c0 0a             	imul   eax,eax,0xa
c00126a5:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00126a9:	88 ca                	mov    dl,cl
c00126ab:	46                   	inc    esi
c00126ac:	eb ce                	jmp    c001267c <VgaText::putchar(char)+0x5e>
c00126ae:	84 d2                	test   dl,dl
c00126b0:	74 2f                	je     c00126e1 <VgaText::putchar(char)+0xc3>
c00126b2:	50                   	push   eax
c00126b3:	53                   	push   ebx
c00126b4:	e8 01 fb ff ff       	call   c00121ba <VgaText::doANSI_SGR(int)>
c00126b9:	58                   	pop    eax
c00126ba:	5a                   	pop    edx
c00126bb:	eb 24                	jmp    c00126e1 <VgaText::putchar(char)+0xc3>
c00126bd:	83 f8 4a             	cmp    eax,0x4a
c00126c0:	75 1f                	jne    c00126e1 <VgaText::putchar(char)+0xc3>
c00126c2:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00126c6:	75 19                	jne    c00126e1 <VgaText::putchar(char)+0xc3>
c00126c8:	83 ec 0c             	sub    esp,0xc
c00126cb:	53                   	push   ebx
c00126cc:	e8 89 fd ff ff       	call   c001245a <VgaText::clearScreen()>
c00126d1:	83 c4 0c             	add    esp,0xc
c00126d4:	6a 00                	push   0x0
c00126d6:	6a 00                	push   0x0
c00126d8:	53                   	push   ebx
c00126d9:	e8 1a fd ff ff       	call   c00123f8 <VgaText::setCursor(int, int)>
c00126de:	83 c4 10             	add    esp,0x10
c00126e1:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00126e7:	eb 26                	jmp    c001270f <VgaText::putchar(char)+0xf1>
c00126e9:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c00126ec:	83 f8 0e             	cmp    eax,0xe
c00126ef:	7f 1e                	jg     c001270f <VgaText::putchar(char)+0xf1>
c00126f1:	8d 48 01             	lea    ecx,[eax+0x1]
c00126f4:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00126f7:	89 f9                	mov    ecx,edi
c00126f9:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c00126fd:	eb 10                	jmp    c001270f <VgaText::putchar(char)+0xf1>
c00126ff:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012702:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012705:	50                   	push   eax
c0012706:	53                   	push   ebx
c0012707:	e8 42 fe ff ff       	call   c001254e <VgaText::putchar(char, VgaColour, VgaColour)>
c001270c:	83 c4 10             	add    esp,0x10
c001270f:	83 c4 10             	add    esp,0x10
c0012712:	5b                   	pop    ebx
c0012713:	5e                   	pop    esi
c0012714:	5f                   	pop    edi
c0012715:	c3                   	ret    

c0012716 <VgaText::putx(unsigned int)>:
c0012716:	57                   	push   edi
c0012717:	b9 11 00 00 00       	mov    ecx,0x11
c001271c:	56                   	push   esi
c001271d:	be cf 28 02 c0       	mov    esi,0xc00228cf
c0012722:	53                   	push   ebx
c0012723:	83 ec 20             	sub    esp,0x20
c0012726:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001272a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001272e:	fc                   	cld    
c001272f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012731:	be 08 00 00 00       	mov    esi,0x8
c0012736:	50                   	push   eax
c0012737:	50                   	push   eax
c0012738:	89 d8                	mov    eax,ebx
c001273a:	c1 e3 04             	shl    ebx,0x4
c001273d:	c1 e8 1c             	shr    eax,0x1c
c0012740:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0012745:	50                   	push   eax
c0012746:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001274a:	e8 cf fe ff ff       	call   c001261e <VgaText::putchar(char)>
c001274f:	83 c4 10             	add    esp,0x10
c0012752:	4e                   	dec    esi
c0012753:	75 e1                	jne    c0012736 <VgaText::putx(unsigned int)+0x20>
c0012755:	83 c4 20             	add    esp,0x20
c0012758:	5b                   	pop    ebx
c0012759:	5e                   	pop    esi
c001275a:	5f                   	pop    edi
c001275b:	c3                   	ret    

c001275c <VgaText::puts(char const*)>:
c001275c:	53                   	push   ebx
c001275d:	83 ec 08             	sub    esp,0x8
c0012760:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012764:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012767:	85 c0                	test   eax,eax
c0012769:	74 12                	je     c001277d <VgaText::puts(char const*)+0x21>
c001276b:	43                   	inc    ebx
c001276c:	51                   	push   ecx
c001276d:	51                   	push   ecx
c001276e:	50                   	push   eax
c001276f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012773:	e8 a6 fe ff ff       	call   c001261e <VgaText::putchar(char)>
c0012778:	83 c4 10             	add    esp,0x10
c001277b:	eb e7                	jmp    c0012764 <VgaText::puts(char const*)+0x8>
c001277d:	83 c4 08             	add    esp,0x8
c0012780:	5b                   	pop    ebx
c0012781:	c3                   	ret    

c0012782 <VgaText::write(unsigned long long, void*, int*)>:
c0012782:	55                   	push   ebp
c0012783:	57                   	push   edi
c0012784:	56                   	push   esi
c0012785:	53                   	push   ebx
c0012786:	83 ec 0c             	sub    esp,0xc
c0012789:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001278d:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0012791:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0012795:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c001279c:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c001279f:	39 eb                	cmp    ebx,ebp
c00127a1:	74 13                	je     c00127b6 <VgaText::write(unsigned long long, void*, int*)+0x34>
c00127a3:	43                   	inc    ebx
c00127a4:	50                   	push   eax
c00127a5:	50                   	push   eax
c00127a6:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c00127aa:	50                   	push   eax
c00127ab:	56                   	push   esi
c00127ac:	e8 6d fe ff ff       	call   c001261e <VgaText::putchar(char)>
c00127b1:	83 c4 10             	add    esp,0x10
c00127b4:	eb e9                	jmp    c001279f <VgaText::write(unsigned long long, void*, int*)+0x1d>
c00127b6:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c00127bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127c1:	89 38                	mov    DWORD PTR [eax],edi
c00127c3:	83 c4 0c             	add    esp,0xc
c00127c6:	31 c0                	xor    eax,eax
c00127c8:	5b                   	pop    ebx
c00127c9:	5e                   	pop    esi
c00127ca:	5f                   	pop    edi
c00127cb:	5d                   	pop    ebp
c00127cc:	c3                   	ret    
c00127cd:	90                   	nop

c00127ce <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00127ce:	55                   	push   ebp
c00127cf:	57                   	push   edi
c00127d0:	56                   	push   esi
c00127d1:	53                   	push   ebx
c00127d2:	83 ec 1c             	sub    esp,0x1c
c00127d5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00127d9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00127dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00127e1:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c00127e4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00127e8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00127ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00127f0:	85 db                	test   ebx,ebx
c00127f2:	75 14                	jne    c0012808 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c00127f4:	c7 44 24 30 62 3f 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023f62
c00127fc:	83 c4 1c             	add    esp,0x1c
c00127ff:	5b                   	pop    ebx
c0012800:	5e                   	pop    esi
c0012801:	5f                   	pop    edi
c0012802:	5d                   	pop    ebp
c0012803:	e9 9a d7 ff ff       	jmp    c000ffa2 <KePanic(char const*)>
c0012808:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c001280f:	50                   	push   eax
c0012810:	50                   	push   eax
c0012811:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0012816:	50                   	push   eax
c0012817:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001281c:	50                   	push   eax
c001281d:	e8 66 fa ff ff       	call   c0012288 <VgaText::combineColours(unsigned char, unsigned char)>
c0012822:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0012826:	83 c4 10             	add    esp,0x10
c0012829:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c001282c:	0f b6 e8             	movzx  ebp,al
c001282f:	0f b7 c9             	movzx  ecx,cx
c0012832:	01 c9                	add    ecx,ecx
c0012834:	01 cb                	add    ebx,ecx
c0012836:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012839:	85 c0                	test   eax,eax
c001283b:	0f 84 ef 00 00 00    	je     c0012930 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0012841:	83 f8 0d             	cmp    eax,0xd
c0012844:	75 0c                	jne    c0012852 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0012846:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c001284d:	e9 d8 00 00 00       	jmp    c001292a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0012852:	83 f8 0a             	cmp    eax,0xa
c0012855:	75 44                	jne    c001289b <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0012857:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001285a:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0012861:	8d 48 01             	lea    ecx,[eax+0x1]
c0012864:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0012867:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c001286a:	75 0f                	jne    c001287b <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c001286c:	83 ec 0c             	sub    esp,0xc
c001286f:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0012872:	57                   	push   edi
c0012873:	e8 22 fa ff ff       	call   c001229a <VgaText::scrollScreen()>
c0012878:	83 c4 10             	add    esp,0x10
c001287b:	83 ec 0c             	sub    esp,0xc
c001287e:	57                   	push   edi
c001287f:	e8 20 f9 ff ff       	call   c00121a4 <VgaText::updateCursor()>
c0012884:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012888:	83 c4 10             	add    esp,0x10
c001288b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c001288e:	0f b7 db             	movzx  ebx,bx
c0012891:	01 db                	add    ebx,ebx
c0012893:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0012896:	e9 8f 00 00 00       	jmp    c001292a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001289b:	83 f8 08             	cmp    eax,0x8
c001289e:	75 34                	jne    c00128d4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c00128a0:	51                   	push   ecx
c00128a1:	51                   	push   ecx
c00128a2:	6a 01                	push   0x1
c00128a4:	57                   	push   edi
c00128a5:	e8 82 fc ff ff       	call   c001252c <VgaText::decrementCursor(bool)>
c00128aa:	5b                   	pop    ebx
c00128ab:	58                   	pop    eax
c00128ac:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00128af:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00128b2:	ff 77 30             	push   DWORD PTR [edi+0x30]
c00128b5:	ff 77 34             	push   DWORD PTR [edi+0x34]
c00128b8:	6a 20                	push   0x20
c00128ba:	57                   	push   edi
c00128bb:	e8 7c fa ff ff       	call   c001233c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00128c0:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c00128c4:	83 c4 20             	add    esp,0x20
c00128c7:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c00128ca:	0f b7 db             	movzx  ebx,bx
c00128cd:	01 db                	add    ebx,ebx
c00128cf:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c00128d2:	eb 56                	jmp    c001292a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c00128d4:	52                   	push   edx
c00128d5:	52                   	push   edx
c00128d6:	55                   	push   ebp
c00128d7:	50                   	push   eax
c00128d8:	e8 4f fa ff ff       	call   c001232c <VgaText::combineCharAndColour(char, unsigned char)>
c00128dd:	83 c4 10             	add    esp,0x10
c00128e0:	66 89 03             	mov    WORD PTR [ebx],ax
c00128e3:	39 3d b4 e1 02 c0    	cmp    DWORD PTR ds:0xc002e1b4,edi
c00128e9:	75 1d                	jne    c0012908 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00128eb:	83 ec 0c             	sub    esp,0xc
c00128ee:	ff 77 18             	push   DWORD PTR [edi+0x18]
c00128f1:	ff 77 14             	push   DWORD PTR [edi+0x14]
c00128f4:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128f8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00128fc:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00128ff:	50                   	push   eax
c0012900:	e8 7b 84 00 00       	call   c001ad80 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0012905:	83 c4 20             	add    esp,0x20
c0012908:	83 c3 02             	add    ebx,0x2
c001290b:	50                   	push   eax
c001290c:	50                   	push   eax
c001290d:	6a 00                	push   0x0
c001290f:	57                   	push   edi
c0012910:	e8 c3 fb ff ff       	call   c00124d8 <VgaText::incrementCursor(bool)>
c0012915:	83 c4 10             	add    esp,0x10
c0012918:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c001291c:	75 0c                	jne    c001292a <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c001291e:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0012922:	0f b7 db             	movzx  ebx,bx
c0012925:	01 db                	add    ebx,ebx
c0012927:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c001292a:	46                   	inc    esi
c001292b:	e9 06 ff ff ff       	jmp    c0012836 <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0012930:	83 ec 0c             	sub    esp,0xc
c0012933:	57                   	push   edi
c0012934:	e8 6b f8 ff ff       	call   c00121a4 <VgaText::updateCursor()>
c0012939:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012940:	83 c4 2c             	add    esp,0x2c
c0012943:	5b                   	pop    ebx
c0012944:	5e                   	pop    esi
c0012945:	5f                   	pop    edi
c0012946:	5d                   	pop    ebp
c0012947:	c3                   	ret    

c0012948 <VgaText::VgaText(char const*)>:
c0012948:	56                   	push   esi
c0012949:	53                   	push   ebx
c001294a:	83 ec 04             	sub    esp,0x4
c001294d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012951:	83 ec 08             	sub    esp,0x8
c0012954:	6a 00                	push   0x0
c0012956:	50                   	push   eax
c0012957:	e8 d8 05 00 00       	call   c0012f34 <UnixFile::UnixFile(int)>
c001295c:	83 c4 10             	add    esp,0x10
c001295f:	ba 9c 3f 02 c0       	mov    edx,0xc0023f9c
c0012964:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012968:	89 10                	mov    DWORD PTR [eax],edx
c001296a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001296e:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012975:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012979:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012984:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0012988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001298c:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012994:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001299b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001299f:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00129a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129aa:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00129b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129b5:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00129bc:	83 ec 0c             	sub    esp,0xc
c00129bf:	68 72 3f 02 c0       	push   0xc0023f72
c00129c4:	e8 9b 45 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00129c9:	83 c4 10             	add    esp,0x10
c00129cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129d0:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c00129d7:	83 ec 0c             	sub    esp,0xc
c00129da:	6a 01                	push   0x1
c00129dc:	e8 b4 09 00 00       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c00129e1:	83 c4 10             	add    esp,0x10
c00129e4:	89 c2                	mov    edx,eax
c00129e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129ea:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00129ed:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c00129f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00129fa:	89 c6                	mov    esi,eax
c00129fc:	e8 95 d7 ff ff       	call   c0010196 <Phys::allocatePage()>
c0012a01:	68 05 0c 00 00       	push   0xc05
c0012a06:	56                   	push   esi
c0012a07:	50                   	push   eax
c0012a08:	53                   	push   ebx
c0012a09:	e8 6a 10 00 00       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a0e:	83 c4 10             	add    esp,0x10
c0012a11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012a18:	83 ec 04             	sub    esp,0x4
c0012a1b:	68 a0 0f 00 00       	push   0xfa0
c0012a20:	6a 00                	push   0x0
c0012a22:	50                   	push   eax
c0012a23:	e8 c8 da fe ff       	call   c00004f0 <memset>
c0012a28:	83 c4 10             	add    esp,0x10
c0012a2b:	83 ec 04             	sub    esp,0x4
c0012a2e:	6a 00                	push   0x0
c0012a30:	6a 07                	push   0x7
c0012a32:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a36:	e8 13 f8 ff ff       	call   c001224e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0012a3b:	83 c4 10             	add    esp,0x10
c0012a3e:	83 ec 04             	sub    esp,0x4
c0012a41:	6a 00                	push   0x0
c0012a43:	6a 00                	push   0x0
c0012a45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a49:	e8 aa f9 ff ff       	call   c00123f8 <VgaText::setCursor(int, int)>
c0012a4e:	83 c4 10             	add    esp,0x10
c0012a51:	83 ec 0c             	sub    esp,0xc
c0012a54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012a58:	e8 fd f9 ff ff       	call   c001245a <VgaText::clearScreen()>
c0012a5d:	83 c4 10             	add    esp,0x10
c0012a60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a64:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0012a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a6c:	05 82 00 00 00       	add    eax,0x82
c0012a71:	83 ec 04             	sub    esp,0x4
c0012a74:	68 80 00 00 00       	push   0x80
c0012a79:	6a 00                	push   0x0
c0012a7b:	50                   	push   eax
c0012a7c:	e8 6f da fe ff       	call   c00004f0 <memset>
c0012a81:	83 c4 10             	add    esp,0x10
c0012a84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012a88:	05 02 01 00 00       	add    eax,0x102
c0012a8d:	83 ec 04             	sub    esp,0x4
c0012a90:	68 80 00 00 00       	push   0x80
c0012a95:	6a 00                	push   0x0
c0012a97:	50                   	push   eax
c0012a98:	e8 53 da fe ff       	call   c00004f0 <memset>
c0012a9d:	83 c4 10             	add    esp,0x10
c0012aa0:	90                   	nop
c0012aa1:	83 c4 04             	add    esp,0x4
c0012aa4:	5b                   	pop    ebx
c0012aa5:	5e                   	pop    esi
c0012aa6:	c3                   	ret    
c0012aa7:	90                   	nop

c0012aa8 <VgaText::receiveKey(unsigned char)>:
c0012aa8:	55                   	push   ebp
c0012aa9:	57                   	push   edi
c0012aaa:	56                   	push   esi
c0012aab:	53                   	push   ebx
c0012aac:	83 ec 2c             	sub    esp,0x2c
c0012aaf:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012ab3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012ab7:	89 ef                	mov    edi,ebp
c0012ab9:	81 e7 ff 00 00 00    	and    edi,0xff
c0012abf:	0f 84 66 01 00 00    	je     c0012c2b <VgaText::receiveKey(unsigned char)+0x183>
c0012ac5:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0012acb:	83 ff 08             	cmp    edi,0x8
c0012ace:	75 73                	jne    c0012b43 <VgaText::receiveKey(unsigned char)+0x9b>
c0012ad0:	83 ec 0c             	sub    esp,0xc
c0012ad3:	56                   	push   esi
c0012ad4:	e8 97 da fe ff       	call   c0000570 <strlen>
c0012ad9:	83 c4 10             	add    esp,0x10
c0012adc:	85 c0                	test   eax,eax
c0012ade:	0f 84 02 01 00 00    	je     c0012be6 <VgaText::receiveKey(unsigned char)+0x13e>
c0012ae4:	50                   	push   eax
c0012ae5:	50                   	push   eax
c0012ae6:	6a 08                	push   0x8
c0012ae8:	53                   	push   ebx
c0012ae9:	e8 30 fb ff ff       	call   c001261e <VgaText::putchar(char)>
c0012aee:	89 34 24             	mov    DWORD PTR [esp],esi
c0012af1:	e8 7a da fe ff       	call   c0000570 <strlen>
c0012af6:	83 c4 10             	add    esp,0x10
c0012af9:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0012b01:	83 fa 0d             	cmp    edx,0xd
c0012b04:	89 d0                	mov    eax,edx
c0012b06:	0f 95 c1             	setne  cl
c0012b09:	83 fa 1f             	cmp    edx,0x1f
c0012b0c:	0f 9e c2             	setle  dl
c0012b0f:	0f b6 d2             	movzx  edx,dl
c0012b12:	85 ca                	test   edx,ecx
c0012b14:	74 17                	je     c0012b2d <VgaText::receiveKey(unsigned char)+0x85>
c0012b16:	83 e8 08             	sub    eax,0x8
c0012b19:	3c 02                	cmp    al,0x2
c0012b1b:	76 10                	jbe    c0012b2d <VgaText::receiveKey(unsigned char)+0x85>
c0012b1d:	55                   	push   ebp
c0012b1e:	55                   	push   ebp
c0012b1f:	68 85 3f 02 c0       	push   0xc0023f85
c0012b24:	53                   	push   ebx
c0012b25:	e8 32 fc ff ff       	call   c001275c <VgaText::puts(char const*)>
c0012b2a:	83 c4 10             	add    esp,0x10
c0012b2d:	83 ec 0c             	sub    esp,0xc
c0012b30:	56                   	push   esi
c0012b31:	e8 3a da fe ff       	call   c0000570 <strlen>
c0012b36:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012b3e:	e9 a0 00 00 00       	jmp    c0012be3 <VgaText::receiveKey(unsigned char)+0x13b>
c0012b43:	83 ec 0c             	sub    esp,0xc
c0012b46:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012b4c:	50                   	push   eax
c0012b4d:	e8 1e da fe ff       	call   c0000570 <strlen>
c0012b52:	89 34 24             	mov    DWORD PTR [esp],esi
c0012b55:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012b59:	e8 12 da fe ff       	call   c0000570 <strlen>
c0012b5e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b62:	83 c4 10             	add    esp,0x10
c0012b65:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0012b69:	3d 80 00 00 00       	cmp    eax,0x80
c0012b6e:	0f 87 b7 00 00 00    	ja     c0012c2b <VgaText::receiveKey(unsigned char)+0x183>
c0012b74:	8d 45 ff             	lea    eax,[ebp-0x1]
c0012b77:	8d 55 f7             	lea    edx,[ebp-0x9]
c0012b7a:	3c 1e                	cmp    al,0x1e
c0012b7c:	0f 96 c0             	setbe  al
c0012b7f:	80 fa 01             	cmp    dl,0x1
c0012b82:	0f 97 c2             	seta   dl
c0012b85:	0f b6 d2             	movzx  edx,dl
c0012b88:	85 c2                	test   edx,eax
c0012b8a:	74 2e                	je     c0012bba <VgaText::receiveKey(unsigned char)+0x112>
c0012b8c:	83 ff 0d             	cmp    edi,0xd
c0012b8f:	74 29                	je     c0012bba <VgaText::receiveKey(unsigned char)+0x112>
c0012b91:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012b94:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012b97:	68 8b 3f 02 c0       	push   0xc0023f8b
c0012b9c:	53                   	push   ebx
c0012b9d:	e8 2c fc ff ff       	call   c00127ce <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012ba2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012ba5:	8d 45 40             	lea    eax,[ebp+0x40]
c0012ba8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0012bab:	0f b6 c0             	movzx  eax,al
c0012bae:	50                   	push   eax
c0012baf:	53                   	push   ebx
c0012bb0:	e8 99 f9 ff ff       	call   c001254e <VgaText::putchar(char, VgaColour, VgaColour)>
c0012bb5:	83 c4 20             	add    esp,0x20
c0012bb8:	eb 11                	jmp    c0012bcb <VgaText::receiveKey(unsigned char)+0x123>
c0012bba:	89 e8                	mov    eax,ebp
c0012bbc:	51                   	push   ecx
c0012bbd:	0f be c0             	movsx  eax,al
c0012bc0:	51                   	push   ecx
c0012bc1:	50                   	push   eax
c0012bc2:	53                   	push   ebx
c0012bc3:	e8 56 fa ff ff       	call   c001261e <VgaText::putchar(char)>
c0012bc8:	83 c4 10             	add    esp,0x10
c0012bcb:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012bd0:	89 e8                	mov    eax,ebp
c0012bd2:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0012bd6:	52                   	push   edx
c0012bd7:	52                   	push   edx
c0012bd8:	8d 44 24 26          	lea    eax,[esp+0x26]
c0012bdc:	50                   	push   eax
c0012bdd:	56                   	push   esi
c0012bde:	e8 5d dc fe ff       	call   c0000840 <strcat>
c0012be3:	83 c4 10             	add    esp,0x10
c0012be6:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0012bec:	b0 01                	mov    al,0x1
c0012bee:	83 ff 1c             	cmp    edi,0x1c
c0012bf1:	77 0e                	ja     c0012c01 <VgaText::receiveKey(unsigned char)+0x159>
c0012bf3:	b8 08 04 00 10       	mov    eax,0x10000408
c0012bf8:	89 f9                	mov    ecx,edi
c0012bfa:	d3 e8                	shr    eax,cl
c0012bfc:	f7 d0                	not    eax
c0012bfe:	83 e0 01             	and    eax,0x1
c0012c01:	84 c0                	test   al,al
c0012c03:	74 04                	je     c0012c09 <VgaText::receiveKey(unsigned char)+0x161>
c0012c05:	84 d2                	test   dl,dl
c0012c07:	74 22                	je     c0012c2b <VgaText::receiveKey(unsigned char)+0x183>
c0012c09:	81 c3 02 01 00 00    	add    ebx,0x102
c0012c0f:	50                   	push   eax
c0012c10:	50                   	push   eax
c0012c11:	56                   	push   esi
c0012c12:	53                   	push   ebx
c0012c13:	e8 28 dc fe ff       	call   c0000840 <strcat>
c0012c18:	83 c4 0c             	add    esp,0xc
c0012c1b:	68 80 00 00 00       	push   0x80
c0012c20:	6a 00                	push   0x0
c0012c22:	56                   	push   esi
c0012c23:	e8 c8 d8 fe ff       	call   c00004f0 <memset>
c0012c28:	83 c4 10             	add    esp,0x10
c0012c2b:	83 c4 2c             	add    esp,0x2c
c0012c2e:	5b                   	pop    ebx
c0012c2f:	5e                   	pop    esi
c0012c30:	5f                   	pop    edi
c0012c31:	5d                   	pop    ebp
c0012c32:	c3                   	ret    
c0012c33:	90                   	nop

c0012c34 <VgaText::doUpdate()>:
c0012c34:	c3                   	ret    
c0012c35:	66 90                	xchg   ax,ax
c0012c37:	90                   	nop

c0012c38 <TSS::TSS()>:
c0012c38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012c3c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012c43:	90                   	nop
c0012c44:	c3                   	ret    
c0012c45:	90                   	nop
c0012c46:	66 90                	xchg   ax,ax

c0012c48 <TSS::setESP(unsigned long)>:
c0012c48:	55                   	push   ebp
c0012c49:	89 e5                	mov    ebp,esp
c0012c4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c4e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c51:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012c54:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c57:	90                   	nop
c0012c58:	5d                   	pop    ebp
c0012c59:	c3                   	ret    
c0012c5a:	66 90                	xchg   ax,ax

c0012c5c <TSS::flush()>:
c0012c5c:	55                   	push   ebp
c0012c5d:	89 e5                	mov    ebp,esp
c0012c5f:	83 ec 10             	sub    esp,0x10
c0012c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c65:	8b 00                	mov    eax,DWORD PTR [eax]
c0012c67:	83 c8 03             	or     eax,0x3
c0012c6a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012c6e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012c72:	66 89 d0             	mov    ax,dx
c0012c75:	0f 00 d8             	ltr    ax
c0012c78:	90                   	nop
c0012c79:	c9                   	leave  
c0012c7a:	c3                   	ret    
c0012c7b:	90                   	nop

c0012c7c <TSS::setup(unsigned long, unsigned long)>:
c0012c7c:	55                   	push   ebp
c0012c7d:	89 e5                	mov    ebp,esp
c0012c7f:	83 ec 18             	sub    esp,0x18
c0012c82:	83 ec 0c             	sub    esp,0xc
c0012c85:	6a 68                	push   0x68
c0012c87:	e8 cf cf ff ff       	call   c000fc5b <malloc>
c0012c8c:	83 c4 10             	add    esp,0x10
c0012c8f:	89 c2                	mov    edx,eax
c0012c91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c94:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012c97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012c9a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012c9d:	83 ec 08             	sub    esp,0x8
c0012ca0:	50                   	push   eax
c0012ca1:	68 b0 3f 02 c0       	push   0xc0023fb0
c0012ca6:	e8 b9 42 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012cab:	83 c4 10             	add    esp,0x10
c0012cae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cb1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cb4:	83 ec 04             	sub    esp,0x4
c0012cb7:	6a 68                	push   0x68
c0012cb9:	6a 00                	push   0x0
c0012cbb:	50                   	push   eax
c0012cbc:	e8 2f d8 fe ff       	call   c00004f0 <memset>
c0012cc1:	83 c4 10             	add    esp,0x10
c0012cc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cc7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cca:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012cd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cd3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cd6:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0012cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cdf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ce2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012ce5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012ceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cee:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0012cf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012cf7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012cfa:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0012d00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d03:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d06:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0012d0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d0f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d12:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0012d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d1e:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0012d24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d27:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d2a:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0012d30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d36:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0012d39:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d3f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d42:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012d45:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0012d48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d4b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d4e:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012d55:	83 ec 0c             	sub    esp,0xc
c0012d58:	68 c7 3f 02 c0       	push   0xc0023fc7
c0012d5d:	e8 02 42 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012d62:	83 c4 10             	add    esp,0x10
c0012d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d6b:	0f 20 da             	mov    edx,cr3
c0012d6e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012d71:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012d74:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0012d77:	83 ec 0c             	sub    esp,0xc
c0012d7a:	68 ca 3f 02 c0       	push   0xc0023fca
c0012d7f:	e8 e0 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012d84:	83 c4 10             	add    esp,0x10
c0012d87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d8a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012d8d:	83 ec 08             	sub    esp,0x8
c0012d90:	50                   	push   eax
c0012d91:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012d94:	50                   	push   eax
c0012d95:	e8 24 bf ff ff       	call   c000ecbe <GDTEntry::setBase(unsigned int)>
c0012d9a:	83 c4 10             	add    esp,0x10
c0012d9d:	83 ec 08             	sub    esp,0x8
c0012da0:	6a 68                	push   0x68
c0012da2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012da5:	50                   	push   eax
c0012da6:	e8 2f bf ff ff       	call   c000ecda <GDTEntry::setLimit(unsigned int)>
c0012dab:	83 c4 10             	add    esp,0x10
c0012dae:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012db2:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012db5:	83 e0 0f             	and    eax,0xf
c0012db8:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012dbb:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012dbe:	83 c8 40             	or     eax,0x40
c0012dc1:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012dc4:	83 ec 0c             	sub    esp,0xc
c0012dc7:	68 cd 3f 02 c0       	push   0xc0023fcd
c0012dcc:	e8 93 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012dd1:	83 c4 10             	add    esp,0x10
c0012dd4:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012dd9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012ddf:	83 ec 08             	sub    esp,0x8
c0012de2:	50                   	push   eax
c0012de3:	68 d0 3f 02 c0       	push   0xc0023fd0
c0012de8:	e8 77 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012ded:	83 c4 10             	add    esp,0x10
c0012df0:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012df5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012dfb:	05 64 01 00 00       	add    eax,0x164
c0012e00:	83 ec 04             	sub    esp,0x4
c0012e03:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0012e06:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0012e09:	50                   	push   eax
c0012e0a:	e8 ff be ff ff       	call   c000ed0e <GDT::addEntry(GDTEntry)>
c0012e0f:	83 c4 10             	add    esp,0x10
c0012e12:	89 c2                	mov    edx,eax
c0012e14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e17:	89 10                	mov    DWORD PTR [eax],edx
c0012e19:	83 ec 0c             	sub    esp,0xc
c0012e1c:	68 e5 3f 02 c0       	push   0xc0023fe5
c0012e21:	e8 3e 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e26:	83 c4 10             	add    esp,0x10
c0012e29:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0012e2e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012e34:	05 64 01 00 00       	add    eax,0x164
c0012e39:	83 ec 0c             	sub    esp,0xc
c0012e3c:	50                   	push   eax
c0012e3d:	e8 f6 be ff ff       	call   c000ed38 <GDT::flush()>
c0012e42:	83 c4 10             	add    esp,0x10
c0012e45:	83 ec 0c             	sub    esp,0xc
c0012e48:	68 e8 3f 02 c0       	push   0xc0023fe8
c0012e4d:	e8 12 41 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012e52:	83 c4 10             	add    esp,0x10
c0012e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012e58:	8b 00                	mov    eax,DWORD PTR [eax]
c0012e5a:	c9                   	leave  
c0012e5b:	c3                   	ret    

c0012e5c <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012e5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e60:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012e64:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012e67:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012e6c:	75 08                	jne    c0012e76 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012e6e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012e74:	eb 38                	jmp    c0012eae <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0012e76:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012e7b:	75 17                	jne    c0012e94 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012e7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012e85:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012e8b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012e8d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e91:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012e94:	89 c1                	mov    ecx,eax
c0012e96:	83 e1 fd             	and    ecx,0xfffffffd
c0012e99:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012e9f:	74 cd                	je     c0012e6e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012ea1:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012ea6:	83 e0 ef             	and    eax,0xffffffef
c0012ea9:	83 f8 08             	cmp    eax,0x8
c0012eac:	76 c0                	jbe    c0012e6e <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012eae:	31 c0                	xor    eax,eax
c0012eb0:	c3                   	ret    
c0012eb1:	90                   	nop

c0012eb2 <ReservedFilename::isAtty()>:
c0012eb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012eb6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0012eb9:	31 c0                	xor    eax,eax
c0012ebb:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012ec1:	74 09                	je     c0012ecc <ReservedFilename::isAtty()+0x1a>
c0012ec3:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0012ec9:	0f 94 c0             	sete   al
c0012ecc:	c3                   	ret    
c0012ecd:	90                   	nop

c0012ece <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012ece:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ed2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012ed6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012ed9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012edd:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012ee2:	75 08                	jne    c0012eec <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0012ee4:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012eea:	eb 3d                	jmp    c0012f29 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012eec:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0012ef1:	75 17                	jne    c0012f0a <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0012ef3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012ef8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012efb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012f01:	8b 10                	mov    edx,DWORD PTR [eax]
c0012f03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012f07:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0012f0a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0012f0f:	75 04                	jne    c0012f15 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0012f11:	89 0a                	mov    DWORD PTR [edx],ecx
c0012f13:	eb 14                	jmp    c0012f29 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0012f15:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0012f1a:	74 c8                	je     c0012ee4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012f1c:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0012f21:	83 e0 ef             	and    eax,0xffffffef
c0012f24:	83 f8 08             	cmp    eax,0x8
c0012f27:	76 bb                	jbe    c0012ee4 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0012f29:	31 c0                	xor    eax,eax
c0012f2b:	c3                   	ret    

c0012f2c <UnixFile::getFileDescriptor()>:
c0012f2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f30:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012f33:	c3                   	ret    

c0012f34 <UnixFile::UnixFile(int)>:
c0012f34:	53                   	push   ebx
c0012f35:	83 ec 28             	sub    esp,0x28
c0012f38:	ba 38 40 02 c0       	mov    edx,0xc0024038
c0012f3d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f41:	89 10                	mov    DWORD PTR [eax],edx
c0012f43:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0012f4b:	0f 8f 90 01 00 00    	jg     c00130e1 <UnixFile::UnixFile(int)+0x1ad>
c0012f51:	a1 e0 62 02 c0       	mov    eax,ds:0xc00262e0
c0012f56:	8d 50 01             	lea    edx,[eax+0x1]
c0012f59:	89 15 e0 62 02 c0    	mov    DWORD PTR ds:0xc00262e0,edx
c0012f5f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012f63:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0012f66:	83 ec 08             	sub    esp,0x8
c0012f69:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012f6d:	68 38 e2 02 c0       	push   0xc002e238
c0012f72:	e8 b7 ec 00 00       	call   c0021c2e <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012f77:	83 c4 10             	add    esp,0x10
c0012f7a:	a0 34 e2 02 c0       	mov    al,ds:0xc002e234
c0012f7f:	83 f0 01             	xor    eax,0x1
c0012f82:	0f b6 c0             	movzx  eax,al
c0012f85:	85 c0                	test   eax,eax
c0012f87:	0f 84 55 01 00 00    	je     c00130e2 <UnixFile::UnixFile(int)+0x1ae>
c0012f8d:	c6 05 34 e2 02 c0 01 	mov    BYTE PTR ds:0xc002e234,0x1
c0012f94:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012f9c:	83 ec 0c             	sub    esp,0xc
c0012f9f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fa3:	e8 b3 cc ff ff       	call   c000fc5b <malloc>
c0012fa8:	83 c4 10             	add    esp,0x10
c0012fab:	89 c3                	mov    ebx,eax
c0012fad:	83 ec 08             	sub    esp,0x8
c0012fb0:	68 03 ff ff 0f       	push   0xfffff03
c0012fb5:	53                   	push   ebx
c0012fb6:	e8 2d 01 00 00       	call   c00130e8 <ReservedFilename::ReservedFilename(int)>
c0012fbb:	83 c4 10             	add    esp,0x10
c0012fbe:	89 1d 2c e2 02 c0    	mov    DWORD PTR ds:0xc002e22c,ebx
c0012fc4:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012fcc:	83 ec 0c             	sub    esp,0xc
c0012fcf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fd3:	e8 83 cc ff ff       	call   c000fc5b <malloc>
c0012fd8:	83 c4 10             	add    esp,0x10
c0012fdb:	89 c3                	mov    ebx,eax
c0012fdd:	83 ec 08             	sub    esp,0x8
c0012fe0:	68 01 ff ff 0f       	push   0xfffff01
c0012fe5:	53                   	push   ebx
c0012fe6:	e8 fd 00 00 00       	call   c00130e8 <ReservedFilename::ReservedFilename(int)>
c0012feb:	83 c4 10             	add    esp,0x10
c0012fee:	89 1d 30 e2 02 c0    	mov    DWORD PTR ds:0xc002e230,ebx
c0012ff4:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0012ffc:	83 ec 0c             	sub    esp,0xc
c0012fff:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013003:	e8 53 cc ff ff       	call   c000fc5b <malloc>
c0013008:	83 c4 10             	add    esp,0x10
c001300b:	89 c3                	mov    ebx,eax
c001300d:	83 ec 08             	sub    esp,0x8
c0013010:	68 00 ff ff 0f       	push   0xfffff00
c0013015:	53                   	push   ebx
c0013016:	e8 cd 00 00 00       	call   c00130e8 <ReservedFilename::ReservedFilename(int)>
c001301b:	83 c4 10             	add    esp,0x10
c001301e:	89 1d 24 e2 02 c0    	mov    DWORD PTR ds:0xc002e224,ebx
c0013024:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c001302c:	83 ec 0c             	sub    esp,0xc
c001302f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0013033:	e8 23 cc ff ff       	call   c000fc5b <malloc>
c0013038:	83 c4 10             	add    esp,0x10
c001303b:	89 c3                	mov    ebx,eax
c001303d:	83 ec 08             	sub    esp,0x8
c0013040:	68 02 ff ff 0f       	push   0xfffff02
c0013045:	53                   	push   ebx
c0013046:	e8 9d 00 00 00       	call   c00130e8 <ReservedFilename::ReservedFilename(int)>
c001304b:	83 c4 10             	add    esp,0x10
c001304e:	89 1d 28 e2 02 c0    	mov    DWORD PTR ds:0xc002e228,ebx
c0013054:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001305c:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0013061:	7f 7f                	jg     c00130e2 <UnixFile::UnixFile(int)+0x1ae>
c0013063:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001306b:	83 ec 0c             	sub    esp,0xc
c001306e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013072:	e8 e4 cb ff ff       	call   c000fc5b <malloc>
c0013077:	83 c4 10             	add    esp,0x10
c001307a:	89 c3                	mov    ebx,eax
c001307c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013080:	05 10 ff ff 0f       	add    eax,0xfffff10
c0013085:	83 ec 08             	sub    esp,0x8
c0013088:	50                   	push   eax
c0013089:	53                   	push   ebx
c001308a:	e8 59 00 00 00       	call   c00130e8 <ReservedFilename::ReservedFilename(int)>
c001308f:	83 c4 10             	add    esp,0x10
c0013092:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013096:	89 1c 85 00 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e00],ebx
c001309d:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00130a5:	83 ec 0c             	sub    esp,0xc
c00130a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00130ac:	e8 aa cb ff ff       	call   c000fc5b <malloc>
c00130b1:	83 c4 10             	add    esp,0x10
c00130b4:	89 c3                	mov    ebx,eax
c00130b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130ba:	05 20 ff ff 0f       	add    eax,0xfffff20
c00130bf:	83 ec 08             	sub    esp,0x8
c00130c2:	50                   	push   eax
c00130c3:	53                   	push   ebx
c00130c4:	e8 1f 00 00 00       	call   c00130e8 <ReservedFilename::ReservedFilename(int)>
c00130c9:	83 c4 10             	add    esp,0x10
c00130cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00130d0:	89 1c 85 c0 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1e40],ebx
c00130d7:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00130dc:	e9 7b ff ff ff       	jmp    c001305c <UnixFile::UnixFile(int)+0x128>
c00130e1:	90                   	nop
c00130e2:	83 c4 28             	add    esp,0x28
c00130e5:	5b                   	pop    ebx
c00130e6:	c3                   	ret    
c00130e7:	90                   	nop

c00130e8 <ReservedFilename::ReservedFilename(int)>:
c00130e8:	83 ec 0c             	sub    esp,0xc
c00130eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130ef:	83 ec 08             	sub    esp,0x8
c00130f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f6:	50                   	push   eax
c00130f7:	e8 38 fe ff ff       	call   c0012f34 <UnixFile::UnixFile(int)>
c00130fc:	83 c4 10             	add    esp,0x10
c00130ff:	ba 54 40 02 c0       	mov    edx,0xc0024054
c0013104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013108:	89 10                	mov    DWORD PTR [eax],edx
c001310a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001310e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013112:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0013115:	90                   	nop
c0013116:	83 c4 0c             	add    esp,0xc
c0013119:	c3                   	ret    

c001311a <UnixFile::~UnixFile()>:
c001311a:	83 ec 1c             	sub    esp,0x1c
c001311d:	ba 38 40 02 c0       	mov    edx,0xc0024038
c0013122:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013126:	89 10                	mov    DWORD PTR [eax],edx
c0013128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001312c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001312f:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0013134:	7f 76                	jg     c00131ac <UnixFile::~UnixFile()+0x92>
c0013136:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001313e:	83 ec 0c             	sub    esp,0xc
c0013141:	68 38 e2 02 c0       	push   0xc002e238
c0013146:	e8 b7 eb 00 00       	call   c0021d02 <LinkedList<UnixFile>::getFirstElement()>
c001314b:	83 c4 10             	add    esp,0x10
c001314e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013152:	83 ec 0c             	sub    esp,0xc
c0013155:	68 38 e2 02 c0       	push   0xc002e238
c001315a:	e8 ab eb 00 00       	call   c0021d0a <LinkedList<UnixFile>::removeFirst()>
c001315f:	83 c4 10             	add    esp,0x10
c0013162:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013166:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001316a:	74 43                	je     c00131af <UnixFile::~UnixFile()+0x95>
c001316c:	83 ec 08             	sub    esp,0x8
c001316f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013173:	68 38 e2 02 c0       	push   0xc002e238
c0013178:	e8 b1 ea 00 00       	call   c0021c2e <LinkedList<UnixFile>::addElement(UnixFile*)>
c001317d:	83 c4 10             	add    esp,0x10
c0013180:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013184:	8d 50 01             	lea    edx,[eax+0x1]
c0013187:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001318b:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0013190:	0f 94 c0             	sete   al
c0013193:	0f b6 c0             	movzx  eax,al
c0013196:	85 c0                	test   eax,eax
c0013198:	74 a4                	je     c001313e <UnixFile::~UnixFile()+0x24>
c001319a:	83 ec 0c             	sub    esp,0xc
c001319d:	68 ec 3f 02 c0       	push   0xc0023fec
c00131a2:	e8 fb cd ff ff       	call   c000ffa2 <KePanic(char const*)>
c00131a7:	83 c4 10             	add    esp,0x10
c00131aa:	eb 92                	jmp    c001313e <UnixFile::~UnixFile()+0x24>
c00131ac:	90                   	nop
c00131ad:	eb 01                	jmp    c00131b0 <UnixFile::~UnixFile()+0x96>
c00131af:	90                   	nop
c00131b0:	90                   	nop
c00131b1:	83 c4 1c             	add    esp,0x1c
c00131b4:	c3                   	ret    
c00131b5:	90                   	nop

c00131b6 <UnixFile::~UnixFile()>:
c00131b6:	83 ec 0c             	sub    esp,0xc
c00131b9:	83 ec 0c             	sub    esp,0xc
c00131bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131c0:	e8 55 ff ff ff       	call   c001311a <UnixFile::~UnixFile()>
c00131c5:	83 c4 10             	add    esp,0x10
c00131c8:	83 ec 08             	sub    esp,0x8
c00131cb:	6a 0c                	push   0xc
c00131cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00131d1:	e8 0d a1 ff ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c00131d6:	83 c4 10             	add    esp,0x10
c00131d9:	83 c4 0c             	add    esp,0xc
c00131dc:	c3                   	ret    
c00131dd:	90                   	nop

c00131de <ReservedFilename::~ReservedFilename()>:
c00131de:	83 ec 0c             	sub    esp,0xc
c00131e1:	ba 54 40 02 c0       	mov    edx,0xc0024054
c00131e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131ea:	89 10                	mov    DWORD PTR [eax],edx
c00131ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00131f0:	83 ec 0c             	sub    esp,0xc
c00131f3:	50                   	push   eax
c00131f4:	e8 21 ff ff ff       	call   c001311a <UnixFile::~UnixFile()>
c00131f9:	83 c4 10             	add    esp,0x10
c00131fc:	90                   	nop
c00131fd:	83 c4 0c             	add    esp,0xc
c0013200:	c3                   	ret    
c0013201:	90                   	nop

c0013202 <ReservedFilename::~ReservedFilename()>:
c0013202:	83 ec 0c             	sub    esp,0xc
c0013205:	83 ec 0c             	sub    esp,0xc
c0013208:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001320c:	e8 cd ff ff ff       	call   c00131de <ReservedFilename::~ReservedFilename()>
c0013211:	83 c4 10             	add    esp,0x10
c0013214:	83 ec 08             	sub    esp,0x8
c0013217:	6a 0c                	push   0xc
c0013219:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001321d:	e8 c1 a0 ff ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0013222:	83 c4 10             	add    esp,0x10
c0013225:	83 c4 0c             	add    esp,0xc
c0013228:	c3                   	ret    

c0013229 <KeGetFileFromDescriptor(int)>:
c0013229:	53                   	push   ebx
c001322a:	83 ec 10             	sub    esp,0x10
c001322d:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013231:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0013237:	53                   	push   ebx
c0013238:	68 0c 40 02 c0       	push   0xc002400c
c001323d:	e8 22 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013242:	83 c4 10             	add    esp,0x10
c0013245:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001324b:	7f 30                	jg     c001327d <KeGetFileFromDescriptor(int)+0x54>
c001324d:	83 ec 0c             	sub    esp,0xc
c0013250:	68 38 e2 02 c0       	push   0xc002e238
c0013255:	e8 a8 ea 00 00       	call   c0021d02 <LinkedList<UnixFile>::getFirstElement()>
c001325a:	83 c4 10             	add    esp,0x10
c001325d:	8d 50 ff             	lea    edx,[eax-0x1]
c0013260:	83 fa fd             	cmp    edx,0xfffffffd
c0013263:	76 04                	jbe    c0013269 <KeGetFileFromDescriptor(int)+0x40>
c0013265:	31 c0                	xor    eax,eax
c0013267:	eb 6e                	jmp    c00132d7 <KeGetFileFromDescriptor(int)+0xae>
c0013269:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001326c:	74 69                	je     c00132d7 <KeGetFileFromDescriptor(int)+0xae>
c001326e:	52                   	push   edx
c001326f:	52                   	push   edx
c0013270:	50                   	push   eax
c0013271:	68 38 e2 02 c0       	push   0xc002e238
c0013276:	e8 31 eb 00 00       	call   c0021dac <LinkedList<UnixFile>::getNext(UnixFile*)>
c001327b:	eb dd                	jmp    c001325a <KeGetFileFromDescriptor(int)+0x31>
c001327d:	a1 2c e2 02 c0       	mov    eax,ds:0xc002e22c
c0013282:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0013288:	74 4d                	je     c00132d7 <KeGetFileFromDescriptor(int)+0xae>
c001328a:	a1 30 e2 02 c0       	mov    eax,ds:0xc002e230
c001328f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0013295:	74 40                	je     c00132d7 <KeGetFileFromDescriptor(int)+0xae>
c0013297:	a1 28 e2 02 c0       	mov    eax,ds:0xc002e228
c001329c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00132a2:	74 33                	je     c00132d7 <KeGetFileFromDescriptor(int)+0xae>
c00132a4:	a1 24 e2 02 c0       	mov    eax,ds:0xc002e224
c00132a9:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00132af:	74 26                	je     c00132d7 <KeGetFileFromDescriptor(int)+0xae>
c00132b1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00132b7:	83 f8 08             	cmp    eax,0x8
c00132ba:	77 09                	ja     c00132c5 <KeGetFileFromDescriptor(int)+0x9c>
c00132bc:	8b 04 85 00 e2 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1e00]
c00132c3:	eb 12                	jmp    c00132d7 <KeGetFileFromDescriptor(int)+0xae>
c00132c5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00132cb:	83 fb 08             	cmp    ebx,0x8
c00132ce:	77 95                	ja     c0013265 <KeGetFileFromDescriptor(int)+0x3c>
c00132d0:	8b 04 9d c0 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1e40]
c00132d7:	83 c4 08             	add    esp,0x8
c00132da:	5b                   	pop    ebx
c00132db:	c3                   	ret    

c00132dc <__static_initialization_and_destruction_0(int, int)>:
c00132dc:	83 ec 0c             	sub    esp,0xc
c00132df:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00132e4:	75 34                	jne    c001331a <__static_initialization_and_destruction_0(int, int)+0x3e>
c00132e6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00132ee:	75 2a                	jne    c001331a <__static_initialization_and_destruction_0(int, int)+0x3e>
c00132f0:	83 ec 0c             	sub    esp,0xc
c00132f3:	68 38 e2 02 c0       	push   0xc002e238
c00132f8:	e8 ef e8 00 00       	call   c0021bec <LinkedList<UnixFile>::LinkedList()>
c00132fd:	83 c4 10             	add    esp,0x10
c0013300:	83 ec 04             	sub    esp,0x4
c0013303:	68 58 5b 02 c0       	push   0xc0025b58
c0013308:	68 38 e2 02 c0       	push   0xc002e238
c001330d:	68 ea 1b 02 c0       	push   0xc0021bea
c0013312:	e8 7c 9f ff ff       	call   c000d293 <__cxa_atexit>
c0013317:	83 c4 10             	add    esp,0x10
c001331a:	90                   	nop
c001331b:	83 c4 0c             	add    esp,0xc
c001331e:	c3                   	ret    

c001331f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c001331f:	83 ec 0c             	sub    esp,0xc
c0013322:	83 ec 08             	sub    esp,0x8
c0013325:	68 ff ff 00 00       	push   0xffff
c001332a:	6a 01                	push   0x1
c001332c:	e8 ab ff ff ff       	call   c00132dc <__static_initialization_and_destruction_0(int, int)>
c0013331:	83 c4 10             	add    esp,0x10
c0013334:	83 c4 0c             	add    esp,0xc
c0013337:	c3                   	ret    

c0013338 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0013338:	53                   	push   ebx
c0013339:	8b 15 e8 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262e8
c001333f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013343:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013347:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c001334d:	89 d8                	mov    eax,ebx
c001334f:	d1 e8                	shr    eax,1
c0013351:	01 d0                	add    eax,edx
c0013353:	80 e3 01             	and    bl,0x1
c0013356:	8a 10                	mov    dl,BYTE PTR [eax]
c0013358:	75 09                	jne    c0013363 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c001335a:	83 e2 f0             	and    edx,0xfffffff0
c001335d:	09 ca                	or     edx,ecx
c001335f:	88 10                	mov    BYTE PTR [eax],dl
c0013361:	5b                   	pop    ebx
c0013362:	c3                   	ret    
c0013363:	83 e2 0f             	and    edx,0xf
c0013366:	0f b6 c9             	movzx  ecx,cl
c0013369:	c1 e1 04             	shl    ecx,0x4
c001336c:	09 ca                	or     edx,ecx
c001336e:	88 10                	mov    BYTE PTR [eax],dl
c0013370:	5b                   	pop    ebx
c0013371:	c3                   	ret    

c0013372 <Virt::getPageState(unsigned long)>:
c0013372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013376:	8b 0d e8 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262e8
c001337c:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0013382:	89 d0                	mov    eax,edx
c0013384:	d1 e8                	shr    eax,1
c0013386:	80 e2 01             	and    dl,0x1
c0013389:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c001338c:	74 03                	je     c0013391 <Virt::getPageState(unsigned long)+0x1f>
c001338e:	c1 e8 04             	shr    eax,0x4
c0013391:	83 e0 0f             	and    eax,0xf
c0013394:	c3                   	ret    

c0013395 <Virt::allocateKernelVirtualPages(int)>:
c0013395:	55                   	push   ebp
c0013396:	31 ed                	xor    ebp,ebp
c0013398:	57                   	push   edi
c0013399:	31 ff                	xor    edi,edi
c001339b:	56                   	push   esi
c001339c:	53                   	push   ebx
c001339d:	31 db                	xor    ebx,ebx
c001339f:	83 ec 0c             	sub    esp,0xc
c00133a2:	8b 35 e4 62 02 c0    	mov    esi,DWORD PTR ds:0xc00262e4
c00133a8:	56                   	push   esi
c00133a9:	e8 c4 ff ff ff       	call   c0013372 <Virt::getPageState(unsigned long)>
c00133ae:	5a                   	pop    edx
c00133af:	84 c0                	test   al,al
c00133b1:	75 41                	jne    c00133f4 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00133b3:	85 db                	test   ebx,ebx
c00133b5:	75 02                	jne    c00133b9 <Virt::allocateKernelVirtualPages(int)+0x24>
c00133b7:	89 f5                	mov    ebp,esi
c00133b9:	83 c3 01             	add    ebx,0x1
c00133bc:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00133c0:	74 5f                	je     c0013421 <Virt::allocateKernelVirtualPages(int)+0x8c>
c00133c2:	83 c6 01             	add    esi,0x1
c00133c5:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00133cb:	76 34                	jbe    c0013401 <Virt::allocateKernelVirtualPages(int)+0x6c>
c00133cd:	c7 05 e4 62 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc00262e4,0xc8000
c00133d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00133dd:	75 2a                	jne    c0013409 <Virt::allocateKernelVirtualPages(int)+0x74>
c00133df:	be 00 80 0c 00       	mov    esi,0xc8000
c00133e4:	bf 01 00 00 00       	mov    edi,0x1
c00133e9:	56                   	push   esi
c00133ea:	e8 83 ff ff ff       	call   c0013372 <Virt::getPageState(unsigned long)>
c00133ef:	5a                   	pop    edx
c00133f0:	84 c0                	test   al,al
c00133f2:	74 bf                	je     c00133b3 <Virt::allocateKernelVirtualPages(int)+0x1e>
c00133f4:	31 db                	xor    ebx,ebx
c00133f6:	83 c6 01             	add    esi,0x1
c00133f9:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c00133ff:	77 cc                	ja     c00133cd <Virt::allocateKernelVirtualPages(int)+0x38>
c0013401:	89 35 e4 62 02 c0    	mov    DWORD PTR ds:0xc00262e4,esi
c0013407:	eb 9f                	jmp    c00133a8 <Virt::allocateKernelVirtualPages(int)+0x13>
c0013409:	83 ec 0c             	sub    esp,0xc
c001340c:	68 68 40 02 c0       	push   0xc0024068
c0013411:	e8 8c cb ff ff       	call   c000ffa2 <KePanic(char const*)>
c0013416:	8b 35 e4 62 02 c0    	mov    esi,DWORD PTR ds:0xc00262e4
c001341c:	83 c4 10             	add    esp,0x10
c001341f:	eb 87                	jmp    c00133a8 <Virt::allocateKernelVirtualPages(int)+0x13>
c0013421:	89 2d e4 62 02 c0    	mov    DWORD PTR ds:0xc00262e4,ebp
c0013427:	83 fb 01             	cmp    ebx,0x1
c001342a:	74 6f                	je     c001349b <Virt::allocateKernelVirtualPages(int)+0x106>
c001342c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013430:	85 c9                	test   ecx,ecx
c0013432:	74 49                	je     c001347d <Virt::allocateKernelVirtualPages(int)+0xe8>
c0013434:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013438:	89 e8                	mov    eax,ebp
c001343a:	31 db                	xor    ebx,ebx
c001343c:	8d 79 ff             	lea    edi,[ecx-0x1]
c001343f:	eb 18                	jmp    c0013459 <Virt::allocateKernelVirtualPages(int)+0xc4>
c0013441:	6a 01                	push   0x1
c0013443:	83 c3 01             	add    ebx,0x1
c0013446:	50                   	push   eax
c0013447:	e8 ec fe ff ff       	call   c0013338 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001344c:	58                   	pop    eax
c001344d:	5a                   	pop    edx
c001344e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0013452:	74 29                	je     c001347d <Virt::allocateKernelVirtualPages(int)+0xe8>
c0013454:	a1 e4 62 02 c0       	mov    eax,ds:0xc00262e4
c0013459:	8d 50 01             	lea    edx,[eax+0x1]
c001345c:	85 db                	test   ebx,ebx
c001345e:	89 15 e4 62 02 c0    	mov    DWORD PTR ds:0xc00262e4,edx
c0013464:	74 24                	je     c001348a <Virt::allocateKernelVirtualPages(int)+0xf5>
c0013466:	39 df                	cmp    edi,ebx
c0013468:	75 d7                	jne    c0013441 <Virt::allocateKernelVirtualPages(int)+0xac>
c001346a:	6a 03                	push   0x3
c001346c:	83 c3 01             	add    ebx,0x1
c001346f:	50                   	push   eax
c0013470:	e8 c3 fe ff ff       	call   c0013338 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013475:	59                   	pop    ecx
c0013476:	5e                   	pop    esi
c0013477:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c001347b:	75 d7                	jne    c0013454 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001347d:	83 c4 0c             	add    esp,0xc
c0013480:	89 e8                	mov    eax,ebp
c0013482:	5b                   	pop    ebx
c0013483:	c1 e0 0c             	shl    eax,0xc
c0013486:	5e                   	pop    esi
c0013487:	5f                   	pop    edi
c0013488:	5d                   	pop    ebp
c0013489:	c3                   	ret    
c001348a:	6a 02                	push   0x2
c001348c:	bb 01 00 00 00       	mov    ebx,0x1
c0013491:	50                   	push   eax
c0013492:	e8 a1 fe ff ff       	call   c0013338 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013497:	58                   	pop    eax
c0013498:	5a                   	pop    edx
c0013499:	eb b9                	jmp    c0013454 <Virt::allocateKernelVirtualPages(int)+0xbf>
c001349b:	6a 04                	push   0x4
c001349d:	8d 45 01             	lea    eax,[ebp+0x1]
c00134a0:	55                   	push   ebp
c00134a1:	a3 e4 62 02 c0       	mov    ds:0xc00262e4,eax
c00134a6:	e8 8d fe ff ff       	call   c0013338 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00134ab:	5b                   	pop    ebx
c00134ac:	89 e8                	mov    eax,ebp
c00134ae:	5e                   	pop    esi
c00134af:	c1 e0 0c             	shl    eax,0xc
c00134b2:	83 c4 0c             	add    esp,0xc
c00134b5:	5b                   	pop    ebx
c00134b6:	5e                   	pop    esi
c00134b7:	5f                   	pop    edi
c00134b8:	5d                   	pop    ebp
c00134b9:	c3                   	ret    

c00134ba <Virt::freeSwapfilePage(unsigned long)>:
c00134ba:	53                   	push   ebx
c00134bb:	8b 15 4c e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e24c
c00134c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00134c5:	b8 01 00 00 00       	mov    eax,0x1
c00134ca:	89 cb                	mov    ebx,ecx
c00134cc:	d3 e0                	shl    eax,cl
c00134ce:	c1 eb 05             	shr    ebx,0x5
c00134d1:	f7 d0                	not    eax
c00134d3:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c00134d6:	21 c1                	and    ecx,eax
c00134d8:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c00134db:	5b                   	pop    ebx
c00134dc:	c3                   	ret    

c00134dd <Virt::swapIDToSector(unsigned long)>:
c00134dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00134e1:	8b 15 ec 62 02 c0    	mov    edx,DWORD PTR ds:0xc00262ec
c00134e7:	8b 0d f4 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262f4
c00134ed:	0f af c2             	imul   eax,edx
c00134f0:	01 c8                	add    eax,ecx
c00134f2:	c3                   	ret    

c00134f3 <Virt::allocateSwapfilePage()>:
c00134f3:	55                   	push   ebp
c00134f4:	31 d2                	xor    edx,edx
c00134f6:	57                   	push   edi
c00134f7:	56                   	push   esi
c00134f8:	53                   	push   ebx
c00134f9:	83 ec 0c             	sub    esp,0xc
c00134fc:	8b 0d ec 62 02 c0    	mov    ecx,DWORD PTR ds:0xc00262ec
c0013502:	a1 f0 62 02 c0       	mov    eax,ds:0xc00262f0
c0013507:	f7 f1                	div    ecx
c0013509:	39 0d f0 62 02 c0    	cmp    DWORD PTR ds:0xc00262f0,ecx
c001350f:	72 2f                	jb     c0013540 <Virt::allocateSwapfilePage()+0x4d>
c0013511:	8b 35 4c e2 02 c0    	mov    esi,DWORD PTR ds:0xc002e24c
c0013517:	8b 16                	mov    edx,DWORD PTR [esi]
c0013519:	f6 c2 01             	test   dl,0x1
c001351c:	74 3e                	je     c001355c <Virt::allocateSwapfilePage()+0x69>
c001351e:	31 c9                	xor    ecx,ecx
c0013520:	bf 01 00 00 00       	mov    edi,0x1
c0013525:	eb 12                	jmp    c0013539 <Virt::allocateSwapfilePage()+0x46>
c0013527:	89 fd                	mov    ebp,edi
c0013529:	89 ca                	mov    edx,ecx
c001352b:	d3 e5                	shl    ebp,cl
c001352d:	c1 ea 05             	shr    edx,0x5
c0013530:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0013533:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013535:	85 ea                	test   edx,ebp
c0013537:	74 2c                	je     c0013565 <Virt::allocateSwapfilePage()+0x72>
c0013539:	83 c1 01             	add    ecx,0x1
c001353c:	39 c8                	cmp    eax,ecx
c001353e:	77 e7                	ja     c0013527 <Virt::allocateSwapfilePage()+0x34>
c0013540:	83 ec 0c             	sub    esp,0xc
c0013543:	68 eb 45 02 c0       	push   0xc00245eb
c0013548:	e8 55 ca ff ff       	call   c000ffa2 <KePanic(char const*)>
c001354d:	83 c4 10             	add    esp,0x10
c0013550:	31 c9                	xor    ecx,ecx
c0013552:	83 c4 0c             	add    esp,0xc
c0013555:	89 c8                	mov    eax,ecx
c0013557:	5b                   	pop    ebx
c0013558:	5e                   	pop    esi
c0013559:	5f                   	pop    edi
c001355a:	5d                   	pop    ebp
c001355b:	c3                   	ret    
c001355c:	89 f3                	mov    ebx,esi
c001355e:	bd 01 00 00 00       	mov    ebp,0x1
c0013563:	31 c9                	xor    ecx,ecx
c0013565:	09 ea                	or     edx,ebp
c0013567:	89 c8                	mov    eax,ecx
c0013569:	89 13                	mov    DWORD PTR [ebx],edx
c001356b:	83 c4 0c             	add    esp,0xc
c001356e:	5b                   	pop    ebx
c001356f:	5e                   	pop    esi
c0013570:	5f                   	pop    edi
c0013571:	5d                   	pop    ebp
c0013572:	c3                   	ret    

c0013573 <Virt::virtualMemorySetup()>:
c0013573:	53                   	push   ebx
c0013574:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013579:	6a 0f                	push   0xf
c001357b:	53                   	push   ebx
c001357c:	83 c3 01             	add    ebx,0x1
c001357f:	e8 b4 fd ff ff       	call   c0013338 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0013584:	58                   	pop    eax
c0013585:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c001358b:	5a                   	pop    edx
c001358c:	75 eb                	jne    c0013579 <Virt::virtualMemorySetup()+0x6>
c001358e:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0013593:	6a 00                	push   0x0
c0013595:	53                   	push   ebx
c0013596:	83 c3 01             	add    ebx,0x1
c0013599:	e8 9a fd ff ff       	call   c0013338 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001359e:	59                   	pop    ecx
c001359f:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00135a5:	58                   	pop    eax
c00135a6:	75 eb                	jne    c0013593 <Virt::virtualMemorySetup()+0x20>
c00135a8:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00135ad:	6a 0f                	push   0xf
c00135af:	53                   	push   ebx
c00135b0:	83 c3 01             	add    ebx,0x1
c00135b3:	e8 80 fd ff ff       	call   c0013338 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00135b8:	58                   	pop    eax
c00135b9:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00135bf:	5a                   	pop    edx
c00135c0:	75 eb                	jne    c00135ad <Virt::virtualMemorySetup()+0x3a>
c00135c2:	5b                   	pop    ebx
c00135c3:	c3                   	ret    

c00135c4 <Virt::setupPageSwapping(int)>:
c00135c4:	53                   	push   ebx
c00135c5:	83 ec 0c             	sub    esp,0xc
c00135c8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00135cc:	a1 e8 ba 02 c0       	mov    eax,ds:0xc002bae8
c00135d1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00135d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00135d9:	53                   	push   ebx
c00135da:	c1 e3 0b             	shl    ebx,0xb
c00135dd:	68 02 46 02 c0       	push   0xc0024602
c00135e2:	50                   	push   eax
c00135e3:	ff 52 60             	call   DWORD PTR [edx+0x60]
c00135e6:	89 1d f0 62 02 c0    	mov    DWORD PTR ds:0xc00262f0,ebx
c00135ec:	c6 05 f8 62 02 c0 43 	mov    BYTE PTR ds:0xc00262f8,0x43
c00135f3:	c1 eb 08             	shr    ebx,0x8
c00135f6:	a3 f4 62 02 c0       	mov    ds:0xc00262f4,eax
c00135fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00135fe:	c7 05 ec 62 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc00262ec,0x8
c0013608:	e8 4e c6 ff ff       	call   c000fc5b <malloc>
c001360d:	83 c4 0c             	add    esp,0xc
c0013610:	89 c1                	mov    ecx,eax
c0013612:	a3 4c e2 02 c0       	mov    ds:0xc002e24c,eax
c0013617:	31 d2                	xor    edx,edx
c0013619:	a1 f0 62 02 c0       	mov    eax,ds:0xc00262f0
c001361e:	f7 35 ec 62 02 c0    	div    DWORD PTR ds:0xc00262ec
c0013624:	c1 e8 05             	shr    eax,0x5
c0013627:	50                   	push   eax
c0013628:	6a 00                	push   0x0
c001362a:	51                   	push   ecx
c001362b:	e8 c0 ce fe ff       	call   c00004f0 <memset>
c0013630:	83 c4 18             	add    esp,0x18
c0013633:	5b                   	pop    ebx
c0013634:	c3                   	ret    
c0013635:	90                   	nop

c0013636 <VAS::setCPUSpecific(unsigned long)>:
c0013636:	c3                   	ret    
c0013637:	90                   	nop

c0013638 <VAS::VAS(VAS*)>:
c0013638:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001363c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013643:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013647:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001364e:	90                   	nop
c001364f:	c3                   	ret    

c0013650 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0013650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013654:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0013659:	89 c2                	mov    edx,eax
c001365b:	c1 e8 0a             	shr    eax,0xa
c001365e:	c1 ea 16             	shr    edx,0x16
c0013661:	83 f9 01             	cmp    ecx,0x1
c0013664:	19 c9                	sbb    ecx,ecx
c0013666:	c1 e2 0c             	shl    edx,0xc
c0013669:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c001366f:	25 fc 0f 00 00       	and    eax,0xffc
c0013674:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c001367b:	01 d0                	add    eax,edx
c001367d:	c3                   	ret    

c001367e <VAS::getPageTableEntry(unsigned long)>:
c001367e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013682:	89 ca                	mov    edx,ecx
c0013684:	c1 e9 0a             	shr    ecx,0xa
c0013687:	c1 ea 16             	shr    edx,0x16
c001368a:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0013690:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0013696:	c1 e0 0c             	shl    eax,0xc
c0013699:	8d 04 08             	lea    eax,[eax+ecx*1]
c001369c:	c3                   	ret    

c001369d <Virt::freeKernelVirtualPages(unsigned long)>:
c001369d:	55                   	push   ebp
c001369e:	57                   	push   edi
c001369f:	bf 01 00 00 00       	mov    edi,0x1
c00136a4:	56                   	push   esi
c00136a5:	53                   	push   ebx
c00136a6:	83 ec 1c             	sub    esp,0x1c
c00136a9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00136ad:	c1 ee 0c             	shr    esi,0xc
c00136b0:	eb 48                	jmp    c00136fa <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c00136b2:	83 ec 08             	sub    esp,0x8
c00136b5:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c00136ba:	55                   	push   ebp
c00136bb:	50                   	push   eax
c00136bc:	e8 bd ff ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c00136c1:	83 c4 10             	add    esp,0x10
c00136c4:	8b 10                	mov    edx,DWORD PTR [eax]
c00136c6:	f6 c6 04             	test   dh,0x4
c00136c9:	75 70                	jne    c001373b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00136cb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00136d1:	83 fb 04             	cmp    ebx,0x4
c00136d4:	0f 84 8a 00 00 00    	je     c0013764 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c00136da:	83 fb 02             	cmp    ebx,0x2
c00136dd:	0f 84 9a 00 00 00    	je     c001377d <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c00136e3:	83 fb 03             	cmp    ebx,0x3
c00136e6:	0f 84 be 00 00 00    	je     c00137aa <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c00136ec:	83 fb 01             	cmp    ebx,0x1
c00136ef:	0f 84 a2 00 00 00    	je     c0013797 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c00136f5:	83 c6 01             	add    esi,0x1
c00136f8:	31 ff                	xor    edi,edi
c00136fa:	56                   	push   esi
c00136fb:	89 f5                	mov    ebp,esi
c00136fd:	e8 70 fc ff ff       	call   c0013372 <Virt::getPageState(unsigned long)>
c0013702:	c1 e5 0c             	shl    ebp,0xc
c0013705:	0f b6 d8             	movzx  ebx,al
c0013708:	5a                   	pop    edx
c0013709:	85 db                	test   ebx,ebx
c001370b:	75 a5                	jne    c00136b2 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c001370d:	83 ec 0c             	sub    esp,0xc
c0013710:	68 19 46 02 c0       	push   0xc0024619
c0013715:	e8 88 c8 ff ff       	call   c000ffa2 <KePanic(char const*)>
c001371a:	5a                   	pop    edx
c001371b:	59                   	pop    ecx
c001371c:	55                   	push   ebp
c001371d:	8b 2d 50 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e250
c0013723:	55                   	push   ebp
c0013724:	e8 55 ff ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c0013729:	83 c4 10             	add    esp,0x10
c001372c:	8b 10                	mov    edx,DWORD PTR [eax]
c001372e:	f6 c6 04             	test   dh,0x4
c0013731:	75 08                	jne    c001373b <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0013733:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013739:	eb ba                	jmp    c00136f5 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c001373b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001373f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0013745:	83 ec 0c             	sub    esp,0xc
c0013748:	52                   	push   edx
c0013749:	e8 df c9 ff ff       	call   c001012d <Phys::freePage(unsigned long)>
c001374e:	83 c4 10             	add    esp,0x10
c0013751:	83 fb 04             	cmp    ebx,0x4
c0013754:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013758:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001375e:	0f 85 76 ff ff ff    	jne    c00136da <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0013764:	83 e7 01             	and    edi,0x1
c0013767:	75 46                	jne    c00137af <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0013769:	c7 44 24 30 88 40 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024088
c0013771:	83 c4 1c             	add    esp,0x1c
c0013774:	5b                   	pop    ebx
c0013775:	5e                   	pop    esi
c0013776:	5f                   	pop    edi
c0013777:	5d                   	pop    ebp
c0013778:	e9 25 c8 ff ff       	jmp    c000ffa2 <KePanic(char const*)>
c001377d:	83 e7 01             	and    edi,0x1
c0013780:	75 15                	jne    c0013797 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0013782:	83 ec 0c             	sub    esp,0xc
c0013785:	68 35 46 02 c0       	push   0xc0024635
c001378a:	e8 13 c8 ff ff       	call   c000ffa2 <KePanic(char const*)>
c001378f:	83 c4 10             	add    esp,0x10
c0013792:	e9 5e ff ff ff       	jmp    c00136f5 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0013797:	83 ec 08             	sub    esp,0x8
c001379a:	6a 00                	push   0x0
c001379c:	56                   	push   esi
c001379d:	e8 96 fb ff ff       	call   c0013338 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00137a2:	83 c4 10             	add    esp,0x10
c00137a5:	e9 4b ff ff ff       	jmp    c00136f5 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00137aa:	83 e7 01             	and    edi,0x1
c00137ad:	75 16                	jne    c00137c5 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c00137af:	83 ec 08             	sub    esp,0x8
c00137b2:	6a 00                	push   0x0
c00137b4:	56                   	push   esi
c00137b5:	e8 7e fb ff ff       	call   c0013338 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00137ba:	83 c4 10             	add    esp,0x10
c00137bd:	83 c4 1c             	add    esp,0x1c
c00137c0:	5b                   	pop    ebx
c00137c1:	5e                   	pop    esi
c00137c2:	5f                   	pop    edi
c00137c3:	5d                   	pop    ebp
c00137c4:	c3                   	ret    
c00137c5:	c7 44 24 30 51 46 02 c0 	mov    DWORD PTR [esp+0x30],0xc0024651
c00137cd:	83 c4 1c             	add    esp,0x1c
c00137d0:	5b                   	pop    ebx
c00137d1:	5e                   	pop    esi
c00137d2:	5f                   	pop    edi
c00137d3:	5d                   	pop    ebp
c00137d4:	e9 c9 c7 ff ff       	jmp    c000ffa2 <KePanic(char const*)>
c00137d9:	90                   	nop

c00137da <VAS::freeAllocatedPages(unsigned long)>:
c00137da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00137de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00137e2:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00137e6:	74 09                	je     c00137f1 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00137e8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00137ec:	e9 ac fe ff ff       	jmp    c001369d <Virt::freeKernelVirtualPages(unsigned long)>
c00137f1:	c7 44 24 04 ac 40 02 c0 	mov    DWORD PTR [esp+0x4],0xc00240ac
c00137f9:	e9 66 37 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c00137fe <VAS::virtualToPhysical(unsigned long)>:
c00137fe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013802:	50                   	push   eax
c0013803:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013807:	52                   	push   edx
c0013808:	e8 71 fe ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c001380d:	59                   	pop    ecx
c001380e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013810:	5a                   	pop    edx
c0013811:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013816:	c3                   	ret    
c0013817:	90                   	nop

c0013818 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0013818:	55                   	push   ebp
c0013819:	57                   	push   edi
c001381a:	56                   	push   esi
c001381b:	53                   	push   ebx
c001381c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013820:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0013824:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013828:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001382c:	85 db                	test   ebx,ebx
c001382e:	7e 24                	jle    c0013854 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0013830:	c1 e3 0c             	shl    ebx,0xc
c0013833:	01 f3                	add    ebx,esi
c0013835:	56                   	push   esi
c0013836:	81 c6 00 10 00 00    	add    esi,0x1000
c001383c:	55                   	push   ebp
c001383d:	e8 3c fe ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c0013842:	5a                   	pop    edx
c0013843:	59                   	pop    ecx
c0013844:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013846:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001384a:	21 f9                	and    ecx,edi
c001384c:	09 d1                	or     ecx,edx
c001384e:	39 f3                	cmp    ebx,esi
c0013850:	89 08                	mov    DWORD PTR [eax],ecx
c0013852:	75 e1                	jne    c0013835 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0013854:	5b                   	pop    ebx
c0013855:	5e                   	pop    esi
c0013856:	5f                   	pop    edi
c0013857:	5d                   	pop    ebp
c0013858:	c3                   	ret    
c0013859:	90                   	nop

c001385a <VAS::VAS()>:
c001385a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001385e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013865:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013869:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013870:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013874:	a3 50 e2 02 c0       	mov    ds:0xc002e250,eax
c0013879:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001387d:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0013881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013885:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0013888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001388c:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0013893:	ba 7d 70 02 c0       	mov    edx,0xc002707d
c0013898:	b8 00 70 02 c0       	mov    eax,0xc0027000
c001389d:	29 c2                	sub    edx,eax
c001389f:	89 d0                	mov    eax,edx
c00138a1:	05 ff 0f 00 00       	add    eax,0xfff
c00138a6:	c1 e8 0c             	shr    eax,0xc
c00138a9:	89 c2                	mov    edx,eax
c00138ab:	b8 00 70 02 c0       	mov    eax,0xc0027000
c00138b0:	6a 04                	push   0x4
c00138b2:	6a ff                	push   0xffffffff
c00138b4:	52                   	push   edx
c00138b5:	50                   	push   eax
c00138b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00138ba:	e8 59 ff ff ff       	call   c0013818 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00138bf:	83 c4 14             	add    esp,0x14
c00138c2:	90                   	nop
c00138c3:	c3                   	ret    

c00138c4 <VAS::setToWriteCombining(unsigned long, int)>:
c00138c4:	a1 e4 ea 02 c0       	mov    eax,ds:0xc002eae4
c00138c9:	50                   	push   eax
c00138ca:	6a ff                	push   0xffffffff
c00138cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00138d0:	52                   	push   edx
c00138d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00138d5:	51                   	push   ecx
c00138d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00138da:	50                   	push   eax
c00138db:	e8 38 ff ff ff       	call   c0013818 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00138e0:	83 c4 14             	add    esp,0x14
c00138e3:	c3                   	ret    

c00138e4 <VAS::mapOtherVASIn(bool, VAS*)>:
c00138e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00138e8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00138eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138ef:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00138f2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00138f7:	83 f8 01             	cmp    eax,0x1
c00138fa:	19 c0                	sbb    eax,eax
c00138fc:	83 ca 03             	or     edx,0x3
c00138ff:	83 e0 fc             	and    eax,0xfffffffc
c0013902:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0013909:	0f 20 d8             	mov    eax,cr3
c001390c:	0f 22 d8             	mov    cr3,eax
c001390f:	c3                   	ret    

c0013910 <VAS::~VAS()>:
c0013910:	83 ec 2c             	sub    esp,0x2c
c0013913:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001391b:	fa                   	cli    
c001391c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013921:	83 c0 01             	add    eax,0x1
c0013924:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0013929:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001392e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013930:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013933:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0013939:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001393d:	6a 01                	push   0x1
c001393f:	50                   	push   eax
c0013940:	e8 9f ff ff ff       	call   c00138e4 <VAS::mapOtherVASIn(bool, VAS*)>
c0013945:	83 c4 0c             	add    esp,0xc
c0013948:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013950:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0013958:	0f 8f d8 00 00 00    	jg     c0013a36 <VAS::~VAS()+0x126>
c001395e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013962:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013965:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013969:	c1 e2 02             	shl    edx,0x2
c001396c:	01 d0                	add    eax,edx
c001396e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013970:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013974:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013978:	83 e0 01             	and    eax,0x1
c001397b:	0f 84 ab 00 00 00    	je     c0013a2c <VAS::~VAS()+0x11c>
c0013981:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0013989:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013991:	7f 74                	jg     c0013a07 <VAS::~VAS()+0xf7>
c0013993:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013997:	c1 e0 0a             	shl    eax,0xa
c001399a:	89 c2                	mov    edx,eax
c001399c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00139a0:	01 d0                	add    eax,edx
c00139a2:	c1 e0 0c             	shl    eax,0xc
c00139a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00139a9:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00139ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00139b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139b3:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00139b9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00139bd:	6a 01                	push   0x1
c00139bf:	50                   	push   eax
c00139c0:	e8 8b fc ff ff       	call   c0013650 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00139c5:	83 c4 0c             	add    esp,0xc
c00139c8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00139cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00139d0:	8b 00                	mov    eax,DWORD PTR [eax]
c00139d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00139d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139da:	25 01 04 00 00       	and    eax,0x401
c00139df:	3d 01 04 00 00       	cmp    eax,0x401
c00139e4:	75 1a                	jne    c0013a00 <VAS::~VAS()+0xf0>
c00139e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00139ea:	25 00 f0 ff ff       	and    eax,0xfffff000
c00139ef:	83 ec 0c             	sub    esp,0xc
c00139f2:	50                   	push   eax
c00139f3:	e8 35 c7 ff ff       	call   c001012d <Phys::freePage(unsigned long)>
c00139f8:	83 c4 10             	add    esp,0x10
c00139fb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013a00:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0013a05:	eb 82                	jmp    c0013989 <VAS::~VAS()+0x79>
c0013a07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a0b:	25 00 04 00 00       	and    eax,0x400
c0013a10:	74 1a                	je     c0013a2c <VAS::~VAS()+0x11c>
c0013a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a16:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013a1b:	83 ec 0c             	sub    esp,0xc
c0013a1e:	50                   	push   eax
c0013a1f:	e8 09 c7 ff ff       	call   c001012d <Phys::freePage(unsigned long)>
c0013a24:	83 c4 10             	add    esp,0x10
c0013a27:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013a2c:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013a31:	e9 1a ff ff ff       	jmp    c0013950 <VAS::~VAS()+0x40>
c0013a36:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013a3d:	83 ec 0c             	sub    esp,0xc
c0013a40:	50                   	push   eax
c0013a41:	e8 57 fc ff ff       	call   c001369d <Virt::freeKernelVirtualPages(unsigned long)>
c0013a46:	83 c4 10             	add    esp,0x10
c0013a49:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013a4d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013a50:	83 ec 0c             	sub    esp,0xc
c0013a53:	50                   	push   eax
c0013a54:	e8 d4 c6 ff ff       	call   c001012d <Phys::freePage(unsigned long)>
c0013a59:	83 c4 10             	add    esp,0x10
c0013a5c:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013a61:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0013a69:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013a6e:	85 c0                	test   eax,eax
c0013a70:	75 01                	jne    c0013a73 <VAS::~VAS()+0x163>
c0013a72:	fb                   	sti    
c0013a73:	90                   	nop
c0013a74:	83 c4 2c             	add    esp,0x2c
c0013a77:	c3                   	ret    

c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0013a78:	55                   	push   ebp
c0013a79:	57                   	push   edi
c0013a7a:	56                   	push   esi
c0013a7b:	53                   	push   ebx
c0013a7c:	83 ec 1c             	sub    esp,0x1c
c0013a7f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013a83:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0013a87:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013a8d:	77 08                	ja     c0013a97 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013a8f:	0f 20 d8             	mov    eax,cr3
c0013a92:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013a95:	75 49                	jne    c0013ae0 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0013a97:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013a9b:	09 d8                	or     eax,ebx
c0013a9d:	a9 ff 0f 00 00       	test   eax,0xfff
c0013aa2:	75 59                	jne    c0013afd <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013aa4:	89 de                	mov    esi,ebx
c0013aa6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013aa9:	c1 ee 16             	shr    esi,0x16
c0013aac:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013ab3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0013ab7:	74 56                	je     c0013b0f <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0013ab9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013abd:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013ac1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0013ac7:	c1 eb 0a             	shr    ebx,0xa
c0013aca:	c1 e6 0c             	shl    esi,0xc
c0013acd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013ad3:	09 d0                	or     eax,edx
c0013ad5:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0013ad8:	83 c4 1c             	add    esp,0x1c
c0013adb:	5b                   	pop    ebx
c0013adc:	5e                   	pop    esi
c0013add:	5f                   	pop    edi
c0013ade:	5d                   	pop    ebp
c0013adf:	c3                   	ret    
c0013ae0:	83 ec 0c             	sub    esp,0xc
c0013ae3:	68 d0 40 02 c0       	push   0xc00240d0
c0013ae8:	e8 77 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013aed:	83 c4 10             	add    esp,0x10
c0013af0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013af4:	09 d8                	or     eax,ebx
c0013af6:	a9 ff 0f 00 00       	test   eax,0xfff
c0013afb:	74 a7                	je     c0013aa4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013afd:	83 ec 0c             	sub    esp,0xc
c0013b00:	68 38 41 02 c0       	push   0xc0024138
c0013b05:	e8 98 c4 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0013b0a:	83 c4 10             	add    esp,0x10
c0013b0d:	eb 95                	jmp    c0013aa4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0013b0f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013b13:	e8 7e c6 ff ff       	call   c0010196 <Phys::allocatePage()>
c0013b18:	83 ec 0c             	sub    esp,0xc
c0013b1b:	89 c5                	mov    ebp,eax
c0013b1d:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013b23:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013b27:	6a 01                	push   0x1
c0013b29:	e8 67 f8 ff ff       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c0013b2e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013b35:	6a 01                	push   0x1
c0013b37:	50                   	push   eax
c0013b38:	55                   	push   ebp
c0013b39:	81 cd 07 04 00 00    	or     ebp,0x407
c0013b3f:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013b43:	51                   	push   ecx
c0013b44:	e8 19 01 00 00       	call   c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013b49:	83 c4 1c             	add    esp,0x1c
c0013b4c:	68 00 10 00 00       	push   0x1000
c0013b51:	6a 00                	push   0x0
c0013b53:	50                   	push   eax
c0013b54:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013b58:	e8 93 c9 fe ff       	call   c00004f0 <memset>
c0013b5d:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013b61:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013b64:	e8 34 fb ff ff       	call   c001369d <Virt::freeKernelVirtualPages(unsigned long)>
c0013b69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013b6d:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013b70:	83 c4 10             	add    esp,0x10
c0013b73:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0013b76:	e9 3e ff ff ff       	jmp    c0013ab9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0013b7b:	90                   	nop

c0013b7c <VAS::allocatePages(int, int)>:
c0013b7c:	55                   	push   ebp
c0013b7d:	57                   	push   edi
c0013b7e:	56                   	push   esi
c0013b7f:	53                   	push   ebx
c0013b80:	83 ec 1c             	sub    esp,0x1c
c0013b83:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013b87:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0013b8b:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013b8f:	75 71                	jne    c0013c02 <VAS::allocatePages(int, int)+0x86>
c0013b91:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013b94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013b98:	85 c0                	test   eax,eax
c0013b9a:	74 4d                	je     c0013be9 <VAS::allocatePages(int, int)+0x6d>
c0013b9c:	89 dd                	mov    ebp,ebx
c0013b9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013ba2:	c1 e5 0c             	shl    ebp,0xc
c0013ba5:	01 c5                	add    ebp,eax
c0013ba7:	85 db                	test   ebx,ebx
c0013ba9:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013bac:	7e 29                	jle    c0013bd7 <VAS::allocatePages(int, int)+0x5b>
c0013bae:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013bb2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013bb6:	81 cf 00 04 00 00    	or     edi,0x400
c0013bbc:	e8 d5 c5 ff ff       	call   c0010196 <Phys::allocatePage()>
c0013bc1:	57                   	push   edi
c0013bc2:	53                   	push   ebx
c0013bc3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013bc9:	50                   	push   eax
c0013bca:	56                   	push   esi
c0013bcb:	e8 a8 fe ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013bd0:	83 c4 10             	add    esp,0x10
c0013bd3:	39 dd                	cmp    ebp,ebx
c0013bd5:	75 e5                	jne    c0013bbc <VAS::allocatePages(int, int)+0x40>
c0013bd7:	0f 20 d8             	mov    eax,cr3
c0013bda:	0f 22 d8             	mov    cr3,eax
c0013bdd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013be1:	83 c4 1c             	add    esp,0x1c
c0013be4:	5b                   	pop    ebx
c0013be5:	5e                   	pop    esi
c0013be6:	5f                   	pop    edi
c0013be7:	5d                   	pop    ebp
c0013be8:	c3                   	ret    
c0013be9:	83 ec 0c             	sub    esp,0xc
c0013bec:	68 5c 41 02 c0       	push   0xc002415c
c0013bf1:	e8 ac c3 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0013bf6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013bf9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013bfd:	83 c4 10             	add    esp,0x10
c0013c00:	eb 9a                	jmp    c0013b9c <VAS::allocatePages(int, int)+0x20>
c0013c02:	83 ec 0c             	sub    esp,0xc
c0013c05:	53                   	push   ebx
c0013c06:	e8 8a f7 ff ff       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c0013c0b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0013c0f:	83 c4 10             	add    esp,0x10
c0013c12:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0013c17:	77 37                	ja     c0013c50 <VAS::allocatePages(int, int)+0xd4>
c0013c19:	85 db                	test   ebx,ebx
c0013c1b:	7e ba                	jle    c0013bd7 <VAS::allocatePages(int, int)+0x5b>
c0013c1d:	c1 e3 0c             	shl    ebx,0xc
c0013c20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013c24:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013c28:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0013c2b:	81 cf 00 04 00 00    	or     edi,0x400
c0013c31:	89 c3                	mov    ebx,eax
c0013c33:	e8 5e c5 ff ff       	call   c0010196 <Phys::allocatePage()>
c0013c38:	57                   	push   edi
c0013c39:	53                   	push   ebx
c0013c3a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013c40:	50                   	push   eax
c0013c41:	56                   	push   esi
c0013c42:	e8 31 fe ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c47:	83 c4 10             	add    esp,0x10
c0013c4a:	39 dd                	cmp    ebp,ebx
c0013c4c:	75 e5                	jne    c0013c33 <VAS::allocatePages(int, int)+0xb7>
c0013c4e:	eb 87                	jmp    c0013bd7 <VAS::allocatePages(int, int)+0x5b>
c0013c50:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013c54:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013c59:	09 c2                	or     edx,eax
c0013c5b:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013c5f:	eb b8                	jmp    c0013c19 <VAS::allocatePages(int, int)+0x9d>
c0013c61:	90                   	nop

c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013c62:	55                   	push   ebp
c0013c63:	57                   	push   edi
c0013c64:	56                   	push   esi
c0013c65:	53                   	push   ebx
c0013c66:	83 ec 0c             	sub    esp,0xc
c0013c69:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013c6d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013c71:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013c75:	85 db                	test   ebx,ebx
c0013c77:	7e 2f                	jle    c0013ca8 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0013c79:	c1 e3 0c             	shl    ebx,0xc
c0013c7c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013c80:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013c84:	01 d3                	add    ebx,edx
c0013c86:	55                   	push   ebp
c0013c87:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0013c8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013c8f:	29 c2                	sub    edx,eax
c0013c91:	01 f2                	add    edx,esi
c0013c93:	52                   	push   edx
c0013c94:	56                   	push   esi
c0013c95:	81 c6 00 10 00 00    	add    esi,0x1000
c0013c9b:	57                   	push   edi
c0013c9c:	e8 d7 fd ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013ca1:	83 c4 10             	add    esp,0x10
c0013ca4:	39 de                	cmp    esi,ebx
c0013ca6:	75 de                	jne    c0013c86 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0013ca8:	0f 20 d8             	mov    eax,cr3
c0013cab:	0f 22 d8             	mov    cr3,eax
c0013cae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013cb2:	83 c4 0c             	add    esp,0xc
c0013cb5:	5b                   	pop    ebx
c0013cb6:	5e                   	pop    esi
c0013cb7:	5f                   	pop    edi
c0013cb8:	5d                   	pop    ebp
c0013cb9:	c3                   	ret    

c0013cba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0013cba:	55                   	push   ebp
c0013cbb:	57                   	push   edi
c0013cbc:	56                   	push   esi
c0013cbd:	53                   	push   ebx
c0013cbe:	83 ec 1c             	sub    esp,0x1c
c0013cc1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013cc5:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0013cc9:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013ccd:	09 f8                	or     eax,edi
c0013ccf:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013cd3:	a9 ff 0f 00 00       	test   eax,0xfff
c0013cd8:	75 4f                	jne    c0013d29 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0013cda:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0013cde:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013ce1:	c1 eb 16             	shr    ebx,0x16
c0013ce4:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0013ceb:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0013cef:	74 52                	je     c0013d43 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0013cf1:	0f b6 f2             	movzx  esi,dl
c0013cf4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013cf8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0013cfc:	c1 e8 0a             	shr    eax,0xa
c0013cff:	83 fe 01             	cmp    esi,0x1
c0013d02:	19 d2                	sbb    edx,edx
c0013d04:	c1 e3 0c             	shl    ebx,0xc
c0013d07:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0013d0d:	25 fc 0f 00 00       	and    eax,0xffc
c0013d12:	01 d8                	add    eax,ebx
c0013d14:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0013d18:	09 d9                	or     ecx,ebx
c0013d1a:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0013d21:	83 c4 1c             	add    esp,0x1c
c0013d24:	5b                   	pop    ebx
c0013d25:	5e                   	pop    esi
c0013d26:	5f                   	pop    edi
c0013d27:	5d                   	pop    ebp
c0013d28:	c3                   	ret    
c0013d29:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0013d2d:	83 ec 0c             	sub    esp,0xc
c0013d30:	68 88 41 02 c0       	push   0xc0024188
c0013d35:	e8 68 c2 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0013d3a:	83 c4 10             	add    esp,0x10
c0013d3d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013d41:	eb 97                	jmp    c0013cda <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013d43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013d47:	e8 4a c4 ff ff       	call   c0010196 <Phys::allocatePage()>
c0013d4c:	83 ec 0c             	sub    esp,0xc
c0013d4f:	89 c5                	mov    ebp,eax
c0013d51:	8b 0d 50 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e250
c0013d57:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0013d5b:	6a 01                	push   0x1
c0013d5d:	e8 33 f6 ff ff       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c0013d62:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013d69:	6a 01                	push   0x1
c0013d6b:	50                   	push   eax
c0013d6c:	55                   	push   ebp
c0013d6d:	81 cd 07 04 00 00    	or     ebp,0x407
c0013d73:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013d77:	51                   	push   ecx
c0013d78:	e8 e5 fe ff ff       	call   c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013d7d:	83 c4 1c             	add    esp,0x1c
c0013d80:	68 00 10 00 00       	push   0x1000
c0013d85:	6a 00                	push   0x0
c0013d87:	50                   	push   eax
c0013d88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d8c:	e8 5f c7 fe ff       	call   c00004f0 <memset>
c0013d91:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013d95:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013d98:	e8 00 f9 ff ff       	call   c001369d <Virt::freeKernelVirtualPages(unsigned long)>
c0013d9d:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013da0:	83 c4 10             	add    esp,0x10
c0013da3:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c0013da6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0013daa:	e9 42 ff ff ff       	jmp    c0013cf1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013daf:	90                   	nop

c0013db0 <VAS::VAS(bool)>:
c0013db0:	53                   	push   ebx
c0013db1:	83 ec 28             	sub    esp,0x28
c0013db4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0013db8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013dbc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dc0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013dc7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dcb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013dd2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013dd6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0013dda:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0013ddd:	e8 b4 c3 ff ff       	call   c0010196 <Phys::allocatePage()>
c0013de2:	89 c2                	mov    edx,eax
c0013de4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013de8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0013deb:	8b 1d 50 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e250
c0013df1:	83 ec 0c             	sub    esp,0xc
c0013df4:	6a 01                	push   0x1
c0013df6:	e8 9a f5 ff ff       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c0013dfb:	83 c4 10             	add    esp,0x10
c0013dfe:	89 c2                	mov    edx,eax
c0013e00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e04:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013e07:	83 ec 0c             	sub    esp,0xc
c0013e0a:	6a 03                	push   0x3
c0013e0c:	6a 01                	push   0x1
c0013e0e:	52                   	push   edx
c0013e0f:	50                   	push   eax
c0013e10:	53                   	push   ebx
c0013e11:	e8 4c fe ff ff       	call   c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013e16:	83 c4 20             	add    esp,0x20
c0013e19:	89 c2                	mov    edx,eax
c0013e1b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e1f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0013e22:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0013e2a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0013e32:	7f 1d                	jg     c0013e51 <VAS::VAS(bool)+0xa1>
c0013e34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e38:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e3b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013e3f:	c1 e2 02             	shl    edx,0x2
c0013e42:	01 d0                	add    eax,edx
c0013e44:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013e4a:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013e4f:	eb d9                	jmp    c0013e2a <VAS::VAS(bool)+0x7a>
c0013e51:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0013e59:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013e61:	7f 59                	jg     c0013ebc <VAS::VAS(bool)+0x10c>
c0013e63:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e67:	2d 00 02 00 00       	sub    eax,0x200
c0013e6c:	c1 e0 0c             	shl    eax,0xc
c0013e6f:	89 c2                	mov    edx,eax
c0013e71:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013e76:	89 d1                	mov    ecx,edx
c0013e78:	09 c1                	or     ecx,eax
c0013e7a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013e7e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013e81:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013e85:	c1 e2 02             	shl    edx,0x2
c0013e88:	01 d0                	add    eax,edx
c0013e8a:	83 c9 05             	or     ecx,0x5
c0013e8d:	89 ca                	mov    edx,ecx
c0013e8f:	89 10                	mov    DWORD PTR [eax],edx
c0013e91:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e95:	2d 40 03 00 00       	sub    eax,0x340
c0013e9a:	83 f8 7f             	cmp    eax,0x7f
c0013e9d:	77 16                	ja     c0013eb5 <VAS::VAS(bool)+0x105>
c0013e9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ea3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ea6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013eaa:	c1 e2 02             	shl    edx,0x2
c0013ead:	01 d0                	add    eax,edx
c0013eaf:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013eb5:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0013eba:	eb 9d                	jmp    c0013e59 <VAS::VAS(bool)+0xa9>
c0013ebc:	8b 15 e8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae8
c0013ec2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ec6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013ec9:	05 20 0c 00 00       	add    eax,0xc20
c0013ece:	81 ca 03 40 00 00    	or     edx,0x4003
c0013ed4:	89 10                	mov    DWORD PTR [eax],edx
c0013ed6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013eda:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013edd:	a1 e8 ea 02 c0       	mov    eax,ds:0xc002eae8
c0013ee2:	09 c2                	or     edx,eax
c0013ee4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013ee8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013eeb:	05 fc 0f 00 00       	add    eax,0xffc
c0013ef0:	83 ca 03             	or     edx,0x3
c0013ef3:	89 10                	mov    DWORD PTR [eax],edx
c0013ef5:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013efa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f00:	83 ec 0c             	sub    esp,0xc
c0013f03:	50                   	push   eax
c0013f04:	e8 4f 5d ff ff       	call   c0009c58 <Device::getName()>
c0013f09:	83 c4 10             	add    esp,0x10
c0013f0c:	83 ec 08             	sub    esp,0x8
c0013f0f:	68 6b 46 02 c0       	push   0xc002466b
c0013f14:	50                   	push   eax
c0013f15:	e8 36 c8 fe ff       	call   c0000750 <strcmp>
c0013f1a:	83 c4 10             	add    esp,0x10
c0013f1d:	85 c0                	test   eax,eax
c0013f1f:	0f 94 c0             	sete   al
c0013f22:	0f b6 c0             	movzx  eax,al
c0013f25:	85 c0                	test   eax,eax
c0013f27:	74 68                	je     c0013f91 <VAS::VAS(bool)+0x1e1>
c0013f29:	fa                   	cli    
c0013f2a:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013f2f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f35:	05 68 09 00 00       	add    eax,0x968
c0013f3a:	83 ec 0c             	sub    esp,0xc
c0013f3d:	50                   	push   eax
c0013f3e:	e8 0b b0 ff ff       	call   c000ef4e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013f43:	83 c4 10             	add    esp,0x10
c0013f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f4b:	89 c3                	mov    ebx,eax
c0013f4d:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0013f52:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f58:	05 68 09 00 00       	add    eax,0x968
c0013f5d:	83 ec 0c             	sub    esp,0xc
c0013f60:	50                   	push   eax
c0013f61:	e8 e8 af ff ff       	call   c000ef4e <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013f66:	83 c4 10             	add    esp,0x10
c0013f69:	83 ec 08             	sub    esp,0x8
c0013f6c:	50                   	push   eax
c0013f6d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f71:	e8 08 f7 ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c0013f76:	83 c4 10             	add    esp,0x10
c0013f79:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f7b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013f80:	6a 11                	push   0x11
c0013f82:	53                   	push   ebx
c0013f83:	50                   	push   eax
c0013f84:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013f88:	e8 eb fa ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c0013f8d:	83 c4 10             	add    esp,0x10
c0013f90:	fb                   	sti    
c0013f91:	90                   	nop
c0013f92:	83 c4 28             	add    esp,0x28
c0013f95:	5b                   	pop    ebx
c0013f96:	c3                   	ret    
c0013f97:	90                   	nop

c0013f98 <VAS::evict(unsigned long)>:
c0013f98:	55                   	push   ebp
c0013f99:	57                   	push   edi
c0013f9a:	56                   	push   esi
c0013f9b:	53                   	push   ebx
c0013f9c:	83 ec 24             	sub    esp,0x24
c0013f9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013fa3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0013fa7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fab:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0013fb0:	50                   	push   eax
c0013fb1:	68 79 46 02 c0       	push   0xc0024679
c0013fb6:	e8 a9 2f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013fbb:	e8 33 f5 ff ff       	call   c00134f3 <Virt::allocateSwapfilePage()>
c0013fc0:	83 c4 10             	add    esp,0x10
c0013fc3:	89 c7                	mov    edi,eax
c0013fc5:	a1 ec 62 02 c0       	mov    eax,ds:0xc00262ec
c0013fca:	85 c0                	test   eax,eax
c0013fcc:	7e 40                	jle    c001400e <VAS::evict(unsigned long)+0x76>
c0013fce:	89 ee                	mov    esi,ebp
c0013fd0:	31 db                	xor    ebx,ebx
c0013fd2:	83 ec 0c             	sub    esp,0xc
c0013fd5:	57                   	push   edi
c0013fd6:	e8 02 f5 ff ff       	call   c00134dd <Virt::swapIDToSector(unsigned long)>
c0013fdb:	89 34 24             	mov    DWORD PTR [esp],esi
c0013fde:	01 d8                	add    eax,ebx
c0013fe0:	6a 01                	push   0x1
c0013fe2:	31 d2                	xor    edx,edx
c0013fe4:	83 c3 01             	add    ebx,0x1
c0013fe7:	52                   	push   edx
c0013fe8:	81 c6 00 02 00 00    	add    esi,0x200
c0013fee:	50                   	push   eax
c0013fef:	0f be 05 f8 62 02 c0 	movsx  eax,BYTE PTR ds:0xc00262f8
c0013ff6:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c0013ffd:	50                   	push   eax
c0013ffe:	e8 b9 6a ff ff       	call   c000aabc <LogicalDisk::write(unsigned long long, int, void*)>
c0014003:	83 c4 20             	add    esp,0x20
c0014006:	39 1d ec 62 02 c0    	cmp    DWORD PTR ds:0xc00262ec,ebx
c001400c:	7f c4                	jg     c0013fd2 <VAS::evict(unsigned long)+0x3a>
c001400e:	83 ec 08             	sub    esp,0x8
c0014011:	c1 e7 0c             	shl    edi,0xc
c0014014:	55                   	push   ebp
c0014015:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014019:	50                   	push   eax
c001401a:	e8 5f f6 ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c001401f:	8b 10                	mov    edx,DWORD PTR [eax]
c0014021:	89 d3                	mov    ebx,edx
c0014023:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0014029:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001402f:	09 d7                	or     edi,edx
c0014031:	89 38                	mov    DWORD PTR [eax],edi
c0014033:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014036:	8b 15 48 e2 02 c0    	mov    edx,DWORD PTR ds:0xc002e248
c001403c:	83 c2 01             	add    edx,0x1
c001403f:	89 15 48 e2 02 c0    	mov    DWORD PTR ds:0xc002e248,edx
c0014045:	e8 e3 c0 ff ff       	call   c001012d <Phys::freePage(unsigned long)>
c001404a:	0f 20 d8             	mov    eax,cr3
c001404d:	0f 22 d8             	mov    cr3,eax
c0014050:	8b 0d 48 e2 02 c0    	mov    ecx,DWORD PTR ds:0xc002e248
c0014056:	51                   	push   ecx
c0014057:	55                   	push   ebp
c0014058:	53                   	push   ebx
c0014059:	68 ac 41 02 c0       	push   0xc00241ac
c001405e:	e8 01 2f ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014063:	83 c4 18             	add    esp,0x18
c0014066:	a1 44 e2 02 c0       	mov    eax,ds:0xc002e244
c001406b:	50                   	push   eax
c001406c:	8d 50 01             	lea    edx,[eax+0x1]
c001406f:	68 8e 46 02 c0       	push   0xc002468e
c0014074:	89 15 44 e2 02 c0    	mov    DWORD PTR ds:0xc002e244,edx
c001407a:	e8 e5 2e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001407f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014084:	c7 44 24 40 a0 46 02 c0 	mov    DWORD PTR [esp+0x40],0xc00246a0
c001408c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014090:	83 c4 2c             	add    esp,0x2c
c0014093:	5b                   	pop    ebx
c0014094:	5e                   	pop    esi
c0014095:	5f                   	pop    edi
c0014096:	5d                   	pop    ebp
c0014097:	e9 c8 2e ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c001409c <VAS::canLockPage(unsigned long)>:
c001409c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00140a0:	50                   	push   eax
c00140a1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00140a5:	52                   	push   edx
c00140a6:	e8 d3 f5 ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c00140ab:	59                   	pop    ecx
c00140ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00140ae:	5a                   	pop    edx
c00140af:	c1 e8 0b             	shr    eax,0xb
c00140b2:	83 e0 01             	and    eax,0x1
c00140b5:	c3                   	ret    

c00140b6 <VAS::unlockPage(unsigned long)>:
c00140b6:	83 ec 0c             	sub    esp,0xc
c00140b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00140bd:	50                   	push   eax
c00140be:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00140c2:	52                   	push   edx
c00140c3:	e8 b6 f5 ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c00140c8:	59                   	pop    ecx
c00140c9:	5a                   	pop    edx
c00140ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00140cc:	f6 c6 08             	test   dh,0x8
c00140cf:	75 09                	jne    c00140da <VAS::unlockPage(unsigned long)+0x24>
c00140d1:	80 ce 08             	or     dh,0x8
c00140d4:	89 10                	mov    DWORD PTR [eax],edx
c00140d6:	83 c4 0c             	add    esp,0xc
c00140d9:	c3                   	ret    
c00140da:	c7 44 24 10 e0 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc00241e0
c00140e2:	83 c4 0c             	add    esp,0xc
c00140e5:	e9 b8 be ff ff       	jmp    c000ffa2 <KePanic(char const*)>

c00140ea <VAS::canLockPages(unsigned long, int)>:
c00140ea:	55                   	push   ebp
c00140eb:	57                   	push   edi
c00140ec:	56                   	push   esi
c00140ed:	53                   	push   ebx
c00140ee:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00140f2:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00140f6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00140fa:	85 ff                	test   edi,edi
c00140fc:	7e 23                	jle    c0014121 <VAS::canLockPages(unsigned long, int)+0x37>
c00140fe:	31 f6                	xor    esi,esi
c0014100:	eb 0d                	jmp    c001410f <VAS::canLockPages(unsigned long, int)+0x25>
c0014102:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014108:	83 c6 01             	add    esi,0x1
c001410b:	39 f7                	cmp    edi,esi
c001410d:	74 0d                	je     c001411c <VAS::canLockPages(unsigned long, int)+0x32>
c001410f:	53                   	push   ebx
c0014110:	55                   	push   ebp
c0014111:	e8 86 ff ff ff       	call   c001409c <VAS::canLockPage(unsigned long)>
c0014116:	5a                   	pop    edx
c0014117:	84 c0                	test   al,al
c0014119:	59                   	pop    ecx
c001411a:	75 e6                	jne    c0014102 <VAS::canLockPages(unsigned long, int)+0x18>
c001411c:	5b                   	pop    ebx
c001411d:	5e                   	pop    esi
c001411e:	5f                   	pop    edi
c001411f:	5d                   	pop    ebp
c0014120:	c3                   	ret    
c0014121:	b0 01                	mov    al,0x1
c0014123:	eb f7                	jmp    c001411c <VAS::canLockPages(unsigned long, int)+0x32>
c0014125:	90                   	nop

c0014126 <VAS::unlockPages(unsigned long, int)>:
c0014126:	55                   	push   ebp
c0014127:	57                   	push   edi
c0014128:	56                   	push   esi
c0014129:	53                   	push   ebx
c001412a:	83 ec 0c             	sub    esp,0xc
c001412d:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0014131:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0014135:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0014139:	85 ff                	test   edi,edi
c001413b:	7e 1c                	jle    c0014159 <VAS::unlockPages(unsigned long, int)+0x33>
c001413d:	31 f6                	xor    esi,esi
c001413f:	83 ec 08             	sub    esp,0x8
c0014142:	83 c6 01             	add    esi,0x1
c0014145:	53                   	push   ebx
c0014146:	81 c3 00 10 00 00    	add    ebx,0x1000
c001414c:	55                   	push   ebp
c001414d:	e8 64 ff ff ff       	call   c00140b6 <VAS::unlockPage(unsigned long)>
c0014152:	83 c4 10             	add    esp,0x10
c0014155:	39 f7                	cmp    edi,esi
c0014157:	75 e6                	jne    c001413f <VAS::unlockPages(unsigned long, int)+0x19>
c0014159:	83 c4 0c             	add    esp,0xc
c001415c:	5b                   	pop    ebx
c001415d:	5e                   	pop    esi
c001415e:	5f                   	pop    edi
c001415f:	5d                   	pop    ebp
c0014160:	c3                   	ret    
c0014161:	90                   	nop

c0014162 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0014162:	55                   	push   ebp
c0014163:	57                   	push   edi
c0014164:	56                   	push   esi
c0014165:	53                   	push   ebx
c0014166:	81 ec 0c 10 00 00    	sub    esp,0x100c
c001416c:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0014173:	89 f3                	mov    ebx,esi
c0014175:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001417b:	53                   	push   ebx
c001417c:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0014183:	50                   	push   eax
c0014184:	e8 f5 f4 ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c0014189:	5a                   	pop    edx
c001418a:	89 c5                	mov    ebp,eax
c001418c:	59                   	pop    ecx
c001418d:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0014193:	0f 87 cb 00 00 00    	ja     c0014264 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c0014199:	83 ec 08             	sub    esp,0x8
c001419c:	56                   	push   esi
c001419d:	68 10 42 02 c0       	push   0xc0024210
c00141a2:	e8 bd 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00141a7:	5e                   	pop    esi
c00141a8:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00141ad:	5f                   	pop    edi
c00141ae:	50                   	push   eax
c00141af:	68 40 42 02 c0       	push   0xc0024240
c00141b4:	e8 ab 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00141b9:	58                   	pop    eax
c00141ba:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00141c0:	5a                   	pop    edx
c00141c1:	51                   	push   ecx
c00141c2:	68 64 42 02 c0       	push   0xc0024264
c00141c7:	e8 98 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00141cc:	83 c4 10             	add    esp,0x10
c00141cf:	85 db                	test   ebx,ebx
c00141d1:	74 5b                	je     c001422e <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c00141d3:	85 ed                	test   ebp,ebp
c00141d5:	74 21                	je     c00141f8 <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c00141d7:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c00141da:	f7 c6 00 02 00 00    	test   esi,0x200
c00141e0:	0f 85 c5 00 00 00    	jne    c00142ab <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c00141e6:	89 f0                	mov    eax,esi
c00141e8:	25 01 04 00 00       	and    eax,0x401
c00141ed:	3d 00 04 00 00       	cmp    eax,0x400
c00141f2:	0f 84 39 01 00 00    	je     c0014331 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c00141f8:	83 ec 08             	sub    esp,0x8
c00141fb:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0014200:	50                   	push   eax
c0014201:	68 58 44 02 c0       	push   0xc0024458
c0014206:	e8 59 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001420b:	5a                   	pop    edx
c001420c:	8b 1d 30 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea30
c0014212:	59                   	pop    ecx
c0014213:	53                   	push   ebx
c0014214:	68 7c 44 02 c0       	push   0xc002447c
c0014219:	e8 46 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001421e:	83 c4 10             	add    esp,0x10
c0014221:	31 c0                	xor    eax,eax
c0014223:	81 c4 0c 10 00 00    	add    esp,0x100c
c0014229:	5b                   	pop    ebx
c001422a:	5e                   	pop    esi
c001422b:	5f                   	pop    edi
c001422c:	5d                   	pop    ebp
c001422d:	c3                   	ret    
c001422e:	83 ec 08             	sub    esp,0x8
c0014231:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0014236:	50                   	push   eax
c0014237:	68 88 42 02 c0       	push   0xc0024288
c001423c:	e8 23 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014241:	58                   	pop    eax
c0014242:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014248:	5a                   	pop    edx
c0014249:	51                   	push   ecx
c001424a:	68 ac 42 02 c0       	push   0xc00242ac
c001424f:	e8 10 2d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014254:	83 c4 10             	add    esp,0x10
c0014257:	31 c0                	xor    eax,eax
c0014259:	81 c4 0c 10 00 00    	add    esp,0x100c
c001425f:	5b                   	pop    ebx
c0014260:	5e                   	pop    esi
c0014261:	5f                   	pop    edi
c0014262:	5d                   	pop    ebp
c0014263:	c3                   	ret    
c0014264:	83 ec 0c             	sub    esp,0xc
c0014267:	68 b5 46 02 c0       	push   0xc00246b5
c001426c:	e8 31 bd ff ff       	call   c000ffa2 <KePanic(char const*)>
c0014271:	5f                   	pop    edi
c0014272:	58                   	pop    eax
c0014273:	56                   	push   esi
c0014274:	68 10 42 02 c0       	push   0xc0024210
c0014279:	e8 e6 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001427e:	58                   	pop    eax
c001427f:	8b 0d 0c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea0c
c0014285:	5a                   	pop    edx
c0014286:	51                   	push   ecx
c0014287:	68 40 42 02 c0       	push   0xc0024240
c001428c:	e8 d3 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014291:	5e                   	pop    esi
c0014292:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014297:	5f                   	pop    edi
c0014298:	50                   	push   eax
c0014299:	68 64 42 02 c0       	push   0xc0024264
c001429e:	e8 c1 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00142a3:	83 c4 10             	add    esp,0x10
c00142a6:	e9 28 ff ff ff       	jmp    c00141d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c00142ab:	83 ec 0c             	sub    esp,0xc
c00142ae:	68 d0 42 02 c0       	push   0xc00242d0
c00142b3:	e8 ac 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00142b8:	e8 d9 be ff ff       	call   c0010196 <Phys::allocatePage()>
c00142bd:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00142c0:	83 ca 01             	or     edx,0x1
c00142c3:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c00142c6:	0f 20 da             	mov    edx,cr3
c00142c9:	0f 22 da             	mov    cr3,edx
c00142cc:	ba 00 10 00 00       	mov    edx,0x1000
c00142d1:	89 de                	mov    esi,ebx
c00142d3:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00142d7:	89 d1                	mov    ecx,edx
c00142d9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142db:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00142de:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00142e4:	09 c8                	or     eax,ecx
c00142e6:	83 c8 02             	or     eax,0x2
c00142e9:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00142ec:	0f 20 d8             	mov    eax,cr3
c00142ef:	0f 22 d8             	mov    cr3,eax
c00142f2:	8d 74 24 10          	lea    esi,[esp+0x10]
c00142f6:	89 df                	mov    edi,ebx
c00142f8:	89 d1                	mov    ecx,edx
c00142fa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142fc:	8b 35 0c ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea0c
c0014302:	59                   	pop    ecx
c0014303:	5b                   	pop    ebx
c0014304:	56                   	push   esi
c0014305:	68 f0 42 02 c0       	push   0xc00242f0
c001430a:	e8 55 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001430f:	5f                   	pop    edi
c0014310:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014315:	5d                   	pop    ebp
c0014316:	50                   	push   eax
c0014317:	68 14 43 02 c0       	push   0xc0024314
c001431c:	e8 43 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014321:	83 c4 10             	add    esp,0x10
c0014324:	b0 01                	mov    al,0x1
c0014326:	81 c4 0c 10 00 00    	add    esp,0x100c
c001432c:	5b                   	pop    ebx
c001432d:	5e                   	pop    esi
c001432e:	5f                   	pop    edi
c001432f:	5d                   	pop    ebp
c0014330:	c3                   	ret    
c0014331:	83 ec 08             	sub    esp,0x8
c0014334:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0014339:	c1 ee 0c             	shr    esi,0xc
c001433c:	50                   	push   eax
c001433d:	68 38 43 02 c0       	push   0xc0024338
c0014342:	e8 1d 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014347:	e8 4a be ff ff       	call   c0010196 <Phys::allocatePage()>
c001434c:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014352:	89 c7                	mov    edi,eax
c0014354:	58                   	pop    eax
c0014355:	5a                   	pop    edx
c0014356:	51                   	push   ecx
c0014357:	68 5c 43 02 c0       	push   0xc002435c
c001435c:	e8 03 2c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014361:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0014364:	83 c4 10             	add    esp,0x10
c0014367:	81 e2 ff 0f 00 00    	and    edx,0xfff
c001436d:	09 fa                	or     edx,edi
c001436f:	81 ca 01 08 00 00    	or     edx,0x801
c0014375:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0014378:	8b 3d ec 62 02 c0    	mov    edi,DWORD PTR ds:0xc00262ec
c001437e:	85 ff                	test   edi,edi
c0014380:	7e 65                	jle    c00143e7 <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c0014382:	89 dd                	mov    ebp,ebx
c0014384:	31 ff                	xor    edi,edi
c0014386:	83 ec 08             	sub    esp,0x8
c0014389:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001438e:	50                   	push   eax
c001438f:	68 10 44 02 c0       	push   0xc0024410
c0014394:	e8 cb 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014399:	89 34 24             	mov    DWORD PTR [esp],esi
c001439c:	e8 3c f1 ff ff       	call   c00134dd <Virt::swapIDToSector(unsigned long)>
c00143a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00143a4:	01 f8                	add    eax,edi
c00143a6:	6a 01                	push   0x1
c00143a8:	31 d2                	xor    edx,edx
c00143aa:	83 c7 01             	add    edi,0x1
c00143ad:	52                   	push   edx
c00143ae:	81 c5 00 02 00 00    	add    ebp,0x200
c00143b4:	50                   	push   eax
c00143b5:	0f be 05 f8 62 02 c0 	movsx  eax,BYTE PTR ds:0xc00262f8
c00143bc:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c00143c3:	50                   	push   eax
c00143c4:	e8 87 66 ff ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c00143c9:	83 c4 18             	add    esp,0x18
c00143cc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00143d1:	50                   	push   eax
c00143d2:	68 34 44 02 c0       	push   0xc0024434
c00143d7:	e8 88 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143dc:	83 c4 10             	add    esp,0x10
c00143df:	39 3d ec 62 02 c0    	cmp    DWORD PTR ds:0xc00262ec,edi
c00143e5:	7f 9f                	jg     c0014386 <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c00143e7:	83 ec 08             	sub    esp,0x8
c00143ea:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00143ef:	50                   	push   eax
c00143f0:	68 80 43 02 c0       	push   0xc0024380
c00143f5:	e8 6a 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00143fa:	83 c4 0c             	add    esp,0xc
c00143fd:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014402:	83 e8 01             	sub    eax,0x1
c0014405:	50                   	push   eax
c0014406:	a3 48 e2 02 c0       	mov    ds:0xc002e248,eax
c001440b:	53                   	push   ebx
c001440c:	68 c7 46 02 c0       	push   0xc00246c7
c0014411:	e8 4e 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014416:	89 34 24             	mov    DWORD PTR [esp],esi
c0014419:	e8 9c f0 ff ff       	call   c00134ba <Virt::freeSwapfilePage(unsigned long)>
c001441e:	58                   	pop    eax
c001441f:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0014425:	5a                   	pop    edx
c0014426:	51                   	push   ecx
c0014427:	68 a4 43 02 c0       	push   0xc00243a4
c001442c:	e8 33 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014431:	0f 20 d8             	mov    eax,cr3
c0014434:	0f 22 d8             	mov    cr3,eax
c0014437:	c7 04 24 dc 46 02 c0 	mov    DWORD PTR [esp],0xc00246dc
c001443e:	e8 21 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014443:	5b                   	pop    ebx
c0014444:	8b 3d 0c ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea0c
c001444a:	5e                   	pop    esi
c001444b:	57                   	push   edi
c001444c:	68 c8 43 02 c0       	push   0xc00243c8
c0014451:	e8 0e 2b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014456:	5d                   	pop    ebp
c0014457:	58                   	pop    eax
c0014458:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001445d:	50                   	push   eax
c001445e:	68 ec 43 02 c0       	push   0xc00243ec
c0014463:	e8 fc 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014468:	83 c4 10             	add    esp,0x10
c001446b:	b0 01                	mov    al,0x1
c001446d:	e9 b1 fd ff ff       	jmp    c0014223 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c0014472 <VAS::lockPage(unsigned long)>:
c0014472:	56                   	push   esi
c0014473:	53                   	push   ebx
c0014474:	83 ec 04             	sub    esp,0x4
c0014477:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001447b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001447f:	50                   	push   eax
c0014480:	56                   	push   esi
c0014481:	e8 f8 f1 ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c0014486:	5a                   	pop    edx
c0014487:	89 c3                	mov    ebx,eax
c0014489:	59                   	pop    ecx
c001448a:	8b 00                	mov    eax,DWORD PTR [eax]
c001448c:	a8 01                	test   al,0x1
c001448e:	74 10                	je     c00144a0 <VAS::lockPage(unsigned long)+0x2e>
c0014490:	f6 c4 08             	test   ah,0x8
c0014493:	74 28                	je     c00144bd <VAS::lockPage(unsigned long)+0x4b>
c0014495:	80 e4 f7             	and    ah,0xf7
c0014498:	89 03                	mov    DWORD PTR [ebx],eax
c001449a:	83 c4 04             	add    esp,0x4
c001449d:	5b                   	pop    ebx
c001449e:	5e                   	pop    esi
c001449f:	c3                   	ret    
c00144a0:	83 ec 08             	sub    esp,0x8
c00144a3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00144a8:	50                   	push   eax
c00144a9:	56                   	push   esi
c00144aa:	e8 b3 fc ff ff       	call   c0014162 <VAS::tryLoadBackOffDisk(unsigned long)>
c00144af:	83 c4 10             	add    esp,0x10
c00144b2:	84 c0                	test   al,al
c00144b4:	74 19                	je     c00144cf <VAS::lockPage(unsigned long)+0x5d>
c00144b6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144b8:	f6 c4 08             	test   ah,0x8
c00144bb:	75 d8                	jne    c0014495 <VAS::lockPage(unsigned long)+0x23>
c00144bd:	c7 44 24 10 e0 41 02 c0 	mov    DWORD PTR [esp+0x10],0xc00241e0
c00144c5:	83 c4 04             	add    esp,0x4
c00144c8:	5b                   	pop    ebx
c00144c9:	5e                   	pop    esi
c00144ca:	e9 d3 ba ff ff       	jmp    c000ffa2 <KePanic(char const*)>
c00144cf:	83 ec 0c             	sub    esp,0xc
c00144d2:	68 a0 44 02 c0       	push   0xc00244a0
c00144d7:	e8 c6 ba ff ff       	call   c000ffa2 <KePanic(char const*)>
c00144dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144de:	83 c4 10             	add    esp,0x10
c00144e1:	eb ad                	jmp    c0014490 <VAS::lockPage(unsigned long)+0x1e>
c00144e3:	90                   	nop

c00144e4 <VAS::lockPages(unsigned long, int)>:
c00144e4:	55                   	push   ebp
c00144e5:	57                   	push   edi
c00144e6:	56                   	push   esi
c00144e7:	53                   	push   ebx
c00144e8:	83 ec 0c             	sub    esp,0xc
c00144eb:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00144ef:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00144f3:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00144f7:	85 ff                	test   edi,edi
c00144f9:	7e 1c                	jle    c0014517 <VAS::lockPages(unsigned long, int)+0x33>
c00144fb:	31 f6                	xor    esi,esi
c00144fd:	83 ec 08             	sub    esp,0x8
c0014500:	83 c6 01             	add    esi,0x1
c0014503:	53                   	push   ebx
c0014504:	81 c3 00 10 00 00    	add    ebx,0x1000
c001450a:	55                   	push   ebp
c001450b:	e8 62 ff ff ff       	call   c0014472 <VAS::lockPage(unsigned long)>
c0014510:	83 c4 10             	add    esp,0x10
c0014513:	39 f7                	cmp    edi,esi
c0014515:	75 e6                	jne    c00144fd <VAS::lockPages(unsigned long, int)+0x19>
c0014517:	83 c4 0c             	add    esp,0xc
c001451a:	5b                   	pop    ebx
c001451b:	5e                   	pop    esi
c001451c:	5f                   	pop    edi
c001451d:	5d                   	pop    ebp
c001451e:	c3                   	ret    
c001451f:	90                   	nop

c0014520 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0014520:	55                   	push   ebp
c0014521:	57                   	push   edi
c0014522:	56                   	push   esi
c0014523:	53                   	push   ebx
c0014524:	83 ec 28             	sub    esp,0x28
c0014527:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001452b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001452f:	50                   	push   eax
c0014530:	e8 60 ee ff ff       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c0014535:	83 c4 0c             	add    esp,0xc
c0014538:	89 c5                	mov    ebp,eax
c001453a:	6a 07                	push   0x7
c001453c:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0014540:	52                   	push   edx
c0014541:	56                   	push   esi
c0014542:	e8 35 f6 ff ff       	call   c0013b7c <VAS::allocatePages(int, int)>
c0014547:	83 c4 10             	add    esp,0x10
c001454a:	89 c7                	mov    edi,eax
c001454c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014550:	85 c9                	test   ecx,ecx
c0014552:	74 2f                	je     c0014583 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0014554:	31 db                	xor    ebx,ebx
c0014556:	e8 3b bc ff ff       	call   c0010196 <Phys::allocatePage()>
c001455b:	83 c3 01             	add    ebx,0x1
c001455e:	6a 03                	push   0x3
c0014560:	55                   	push   ebp
c0014561:	50                   	push   eax
c0014562:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014566:	56                   	push   esi
c0014567:	e8 0c f5 ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c001456c:	6a 07                	push   0x7
c001456e:	57                   	push   edi
c001456f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014573:	50                   	push   eax
c0014574:	56                   	push   esi
c0014575:	e8 fe f4 ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c001457a:	83 c4 20             	add    esp,0x20
c001457d:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0014581:	75 d3                	jne    c0014556 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0014583:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0014587:	89 28                	mov    DWORD PTR [eax],ebp
c0014589:	83 c4 1c             	add    esp,0x1c
c001458c:	89 f8                	mov    eax,edi
c001458e:	5b                   	pop    ebx
c001458f:	5e                   	pop    esi
c0014590:	5f                   	pop    edi
c0014591:	5d                   	pop    ebp
c0014592:	c3                   	ret    
c0014593:	90                   	nop

c0014594 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0014594:	53                   	push   ebx
c0014595:	83 ec 14             	sub    esp,0x14
c0014598:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001459c:	68 d0 44 02 c0       	push   0xc00244d0
c00145a1:	e8 be 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00145a6:	c7 04 24 30 45 02 c0 	mov    DWORD PTR [esp],0xc0024530
c00145ad:	e8 b2 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00145b2:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00145b6:	83 c4 18             	add    esp,0x18
c00145b9:	5b                   	pop    ebx
c00145ba:	e9 de f0 ff ff       	jmp    c001369d <Virt::freeKernelVirtualPages(unsigned long)>
c00145bf:	90                   	nop

c00145c0 <VAS::scanForEviction()>:
c00145c0:	57                   	push   edi
c00145c1:	56                   	push   esi
c00145c2:	31 f6                	xor    esi,esi
c00145c4:	53                   	push   ebx
c00145c5:	83 ec 18             	sub    esp,0x18
c00145c8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00145cc:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00145d1:	50                   	push   eax
c00145d2:	68 ac 45 02 c0       	push   0xc00245ac
c00145d7:	e8 88 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00145dc:	c7 04 24 e3 46 02 c0 	mov    DWORD PTR [esp],0xc00246e3
c00145e3:	e8 7c 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00145e8:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c00145eb:	83 c4 10             	add    esp,0x10
c00145ee:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c00145f4:	75 0e                	jne    c0014604 <VAS::scanForEviction()+0x44>
c00145f6:	89 da                	mov    edx,ebx
c00145f8:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00145fb:	c1 ea 16             	shr    edx,0x16
c00145fe:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0014602:	74 5b                	je     c001465f <VAS::scanForEviction()+0x9f>
c0014604:	83 ec 08             	sub    esp,0x8
c0014607:	53                   	push   ebx
c0014608:	57                   	push   edi
c0014609:	e8 70 f0 ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c001460e:	83 c4 10             	add    esp,0x10
c0014611:	8b 10                	mov    edx,DWORD PTR [eax]
c0014613:	89 d1                	mov    ecx,edx
c0014615:	c1 e9 0c             	shr    ecx,0xc
c0014618:	74 10                	je     c001462a <VAS::scanForEviction()+0x6a>
c001461a:	89 d1                	mov    ecx,edx
c001461c:	81 e1 01 08 00 00    	and    ecx,0x801
c0014622:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0014628:	74 40                	je     c001466a <VAS::scanForEviction()+0xaa>
c001462a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0014630:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0014636:	76 2d                	jbe    c0014665 <VAS::scanForEviction()+0xa5>
c0014638:	83 c6 01             	add    esi,0x1
c001463b:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0014642:	83 fe 03             	cmp    esi,0x3
c0014645:	74 32                	je     c0014679 <VAS::scanForEviction()+0xb9>
c0014647:	31 db                	xor    ebx,ebx
c0014649:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c001464f:	75 b3                	jne    c0014604 <VAS::scanForEviction()+0x44>
c0014651:	89 da                	mov    edx,ebx
c0014653:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0014656:	c1 ea 16             	shr    edx,0x16
c0014659:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c001465d:	75 a5                	jne    c0014604 <VAS::scanForEviction()+0x44>
c001465f:	81 c3 00 00 40 00    	add    ebx,0x400000
c0014665:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0014668:	eb 84                	jmp    c00145ee <VAS::scanForEviction()+0x2e>
c001466a:	f6 c2 20             	test   dl,0x20
c001466d:	74 13                	je     c0014682 <VAS::scanForEviction()+0xc2>
c001466f:	83 e2 df             	and    edx,0xffffffdf
c0014672:	89 10                	mov    DWORD PTR [eax],edx
c0014674:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0014677:	eb b1                	jmp    c001462a <VAS::scanForEviction()+0x6a>
c0014679:	83 c4 10             	add    esp,0x10
c001467c:	31 c0                	xor    eax,eax
c001467e:	5b                   	pop    ebx
c001467f:	5e                   	pop    esi
c0014680:	5f                   	pop    edi
c0014681:	c3                   	ret    
c0014682:	83 ec 08             	sub    esp,0x8
c0014685:	89 d0                	mov    eax,edx
c0014687:	25 00 f0 ff ff       	and    eax,0xfffff000
c001468c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014690:	53                   	push   ebx
c0014691:	68 ff 46 02 c0       	push   0xc00246ff
c0014696:	e8 c9 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001469b:	58                   	pop    eax
c001469c:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c001469f:	5a                   	pop    edx
c00146a0:	51                   	push   ecx
c00146a1:	57                   	push   edi
c00146a2:	e8 f1 f8 ff ff       	call   c0013f98 <VAS::evict(unsigned long)>
c00146a7:	5b                   	pop    ebx
c00146a8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00146ab:	5e                   	pop    esi
c00146ac:	50                   	push   eax
c00146ad:	68 13 47 02 c0       	push   0xc0024713
c00146b2:	e8 ad 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146b7:	58                   	pop    eax
c00146b8:	5a                   	pop    edx
c00146b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00146bd:	50                   	push   eax
c00146be:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00146c2:	68 26 47 02 c0       	push   0xc0024726
c00146c7:	e8 98 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146cc:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c00146cf:	81 c1 00 10 00 00    	add    ecx,0x1000
c00146d5:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c00146d8:	8b 3d 30 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea30
c00146de:	5b                   	pop    ebx
c00146df:	5e                   	pop    esi
c00146e0:	57                   	push   edi
c00146e1:	68 cc 45 02 c0       	push   0xc00245cc
c00146e6:	e8 79 28 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00146eb:	83 c4 10             	add    esp,0x10
c00146ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00146f2:	83 c4 10             	add    esp,0x10
c00146f5:	5b                   	pop    ebx
c00146f6:	5e                   	pop    esi
c00146f7:	5f                   	pop    edi
c00146f8:	c3                   	ret    

c00146f9 <mapVASFirstTime>:
c00146f9:	55                   	push   ebp
c00146fa:	57                   	push   edi
c00146fb:	56                   	push   esi
c00146fc:	53                   	push   ebx
c00146fd:	83 ec 0c             	sub    esp,0xc
c0014700:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014705:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0014708:	83 fa 01             	cmp    edx,0x1
c001470b:	0f 84 cb 00 00 00    	je     c00147dc <mapVASFirstTime+0xe3>
c0014711:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014714:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0014717:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c001471c:	c1 e5 15             	shl    ebp,0x15
c001471f:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0014724:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c001472a:	29 eb                	sub    ebx,ebp
c001472c:	29 ef                	sub    edi,ebp
c001472e:	e8 63 ba ff ff       	call   c0010196 <Phys::allocatePage()>
c0014733:	83 ec 0c             	sub    esp,0xc
c0014736:	68 03 04 00 00       	push   0x403
c001473b:	6a 01                	push   0x1
c001473d:	53                   	push   ebx
c001473e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014744:	50                   	push   eax
c0014745:	56                   	push   esi
c0014746:	e8 17 f5 ff ff       	call   c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001474b:	83 c4 20             	add    esp,0x20
c001474e:	39 fb                	cmp    ebx,edi
c0014750:	75 dc                	jne    c001472e <mapVASFirstTime+0x35>
c0014752:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0014757:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c001475c:	29 eb                	sub    ebx,ebp
c001475e:	29 ef                	sub    edi,ebp
c0014760:	e8 31 ba ff ff       	call   c0010196 <Phys::allocatePage()>
c0014765:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0014769:	83 fa 01             	cmp    edx,0x1
c001476c:	19 d2                	sbb    edx,edx
c001476e:	83 ec 0c             	sub    esp,0xc
c0014771:	83 e2 04             	and    edx,0x4
c0014774:	81 c2 03 04 00 00    	add    edx,0x403
c001477a:	52                   	push   edx
c001477b:	6a 01                	push   0x1
c001477d:	53                   	push   ebx
c001477e:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0014784:	50                   	push   eax
c0014785:	56                   	push   esi
c0014786:	e8 d7 f4 ff ff       	call   c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001478b:	83 c4 20             	add    esp,0x20
c001478e:	39 df                	cmp    edi,ebx
c0014790:	75 ce                	jne    c0014760 <mapVASFirstTime+0x67>
c0014792:	83 ec 0c             	sub    esp,0xc
c0014795:	bb 7c 80 02 c0       	mov    ebx,0xc002807c
c001479a:	6a 04                	push   0x4
c001479c:	81 eb 00 70 02 c0    	sub    ebx,0xc0027000
c00147a2:	6a ff                	push   0xffffffff
c00147a4:	c1 eb 0c             	shr    ebx,0xc
c00147a7:	53                   	push   ebx
c00147a8:	68 00 70 02 c0       	push   0xc0027000
c00147ad:	56                   	push   esi
c00147ae:	e8 65 f0 ff ff       	call   c0013818 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00147b3:	83 c4 14             	add    esp,0x14
c00147b6:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c00147bb:	6a 04                	push   0x4
c00147bd:	6a ff                	push   0xffffffff
c00147bf:	53                   	push   ebx
c00147c0:	68 00 70 02 c0       	push   0xc0027000
c00147c5:	50                   	push   eax
c00147c6:	e8 4d f0 ff ff       	call   c0013818 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c00147cb:	0f 20 d8             	mov    eax,cr3
c00147ce:	0f 22 d8             	mov    cr3,eax
c00147d1:	83 c4 20             	add    esp,0x20
c00147d4:	83 c4 0c             	add    esp,0xc
c00147d7:	5b                   	pop    ebx
c00147d8:	5e                   	pop    esi
c00147d9:	5f                   	pop    edi
c00147da:	5d                   	pop    ebp
c00147db:	c3                   	ret    
c00147dc:	83 ec 0c             	sub    esp,0xc
c00147df:	68 33 47 02 c0       	push   0xc0024733
c00147e4:	e8 7b 27 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00147e9:	83 c4 10             	add    esp,0x10
c00147ec:	83 c4 0c             	add    esp,0xc
c00147ef:	5b                   	pop    ebx
c00147f0:	5e                   	pop    esi
c00147f1:	5f                   	pop    edi
c00147f2:	5d                   	pop    ebp
c00147f3:	c3                   	ret    

c00147f4 <SysEject(regs*)>:
c00147f4:	83 ec 0c             	sub    esp,0xc
c00147f7:	83 ca ff             	or     edx,0xffffffff
c00147fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147fe:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014801:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0014806:	83 e9 41             	sub    ecx,0x41
c0014809:	83 f9 19             	cmp    ecx,0x19
c001480c:	77 18                	ja     c0014826 <SysEject(regs*)+0x32>
c001480e:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c0014815:	85 c9                	test   ecx,ecx
c0014817:	74 0d                	je     c0014826 <SysEject(regs*)+0x32>
c0014819:	83 ec 0c             	sub    esp,0xc
c001481c:	51                   	push   ecx
c001481d:	e8 c4 61 ff ff       	call   c000a9e6 <LogicalDisk::eject()>
c0014822:	83 c4 10             	add    esp,0x10
c0014825:	99                   	cdq    
c0014826:	83 c4 0c             	add    esp,0xc
c0014829:	c3                   	ret    

c001482a <SysExit(regs*)>:
c001482a:	83 ec 18             	sub    esp,0x18
c001482d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014831:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014834:	e8 37 2b 00 00       	call   c0017370 <terminateTask(int)>
c0014839:	83 c8 ff             	or     eax,0xffffffff
c001483c:	83 c4 1c             	add    esp,0x1c
c001483f:	89 c2                	mov    edx,eax
c0014841:	c3                   	ret    

c0014842 <SysGetCwd(regs*)>:
c0014842:	83 ec 10             	sub    esp,0x10
c0014845:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014849:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001484c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001484f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014854:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014857:	e8 6a 35 ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c001485c:	83 c4 1c             	add    esp,0x1c
c001485f:	99                   	cdq    
c0014860:	c3                   	ret    

c0014861 <SysGetPID(regs*)>:
c0014861:	83 ec 14             	sub    esp,0x14
c0014864:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014869:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001486c:	ff 30                	push   DWORD PTR [eax]
c001486e:	68 4c 47 02 c0       	push   0xc002474c
c0014873:	e8 ec 26 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014878:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001487d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014880:	8b 00                	mov    eax,DWORD PTR [eax]
c0014882:	83 c4 1c             	add    esp,0x1c
c0014885:	99                   	cdq    
c0014886:	c3                   	ret    

c0014887 <SysGetRAMData(regs*)>:
c0014887:	8b 0d 40 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e140
c001488d:	a1 48 e2 02 c0       	mov    eax,ds:0xc002e248
c0014892:	03 05 3c e1 02 c0    	add    eax,DWORD PTR ds:0xc002e13c
c0014898:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c001489e:	99                   	cdq    
c001489f:	f7 f9                	idiv   ecx
c00148a1:	c1 e0 18             	shl    eax,0x18
c00148a4:	09 c8                	or     eax,ecx
c00148a6:	99                   	cdq    
c00148a7:	c3                   	ret    

c00148a8 <SysGetVGAPtr(regs*)>:
c00148a8:	55                   	push   ebp
c00148a9:	57                   	push   edi
c00148aa:	56                   	push   esi
c00148ab:	53                   	push   ebx
c00148ac:	83 ec 0c             	sub    esp,0xc
c00148af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00148b3:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00148b6:	83 f8 ff             	cmp    eax,0xffffffff
c00148b9:	74 1b                	je     c00148d6 <SysGetVGAPtr(regs*)+0x2e>
c00148bb:	83 ec 0c             	sub    esp,0xc
c00148be:	50                   	push   eax
c00148bf:	e8 5c 25 00 00       	call   c0016e20 <Thr::processFromPID(int)>
c00148c4:	83 c4 10             	add    esp,0x10
c00148c7:	89 c1                	mov    ecx,eax
c00148c9:	31 d2                	xor    edx,edx
c00148cb:	b8 01 00 00 00       	mov    eax,0x1
c00148d0:	85 c9                	test   ecx,ecx
c00148d2:	75 0a                	jne    c00148de <SysGetVGAPtr(regs*)+0x36>
c00148d4:	eb 61                	jmp    c0014937 <SysGetVGAPtr(regs*)+0x8f>
c00148d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148db:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00148de:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c00148e4:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c00148e8:	74 0c                	je     c00148f6 <SysGetVGAPtr(regs*)+0x4e>
c00148ea:	83 ec 0c             	sub    esp,0xc
c00148ed:	55                   	push   ebp
c00148ee:	e8 1c db ff ff       	call   c001240f <setActiveTerminal(VgaText*)>
c00148f3:	83 c4 10             	add    esp,0x10
c00148f6:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00148f9:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00148fc:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0014901:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014903:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0014906:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014909:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001490f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014912:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0014915:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001491b:	50                   	push   eax
c001491c:	50                   	push   eax
c001491d:	68 5b 47 02 c0       	push   0xc002475b
c0014922:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014925:	05 a8 0f 00 00       	add    eax,0xfa8
c001492a:	50                   	push   eax
c001492b:	e8 10 bd fe ff       	call   c0000640 <strcpy>
c0014930:	83 c4 10             	add    esp,0x10
c0014933:	31 c0                	xor    eax,eax
c0014935:	31 d2                	xor    edx,edx
c0014937:	83 c4 0c             	add    esp,0xc
c001493a:	5b                   	pop    ebx
c001493b:	5e                   	pop    esi
c001493c:	5f                   	pop    edi
c001493d:	5d                   	pop    ebp
c001493e:	c3                   	ret    
c001493f:	90                   	nop

c0014940 <SysKill(regs*)>:
c0014940:	53                   	push   ebx
c0014941:	83 ec 08             	sub    esp,0x8
c0014944:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014948:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c001494c:	75 16                	jne    c0014964 <SysKill(regs*)+0x24>
c001494e:	83 ec 0c             	sub    esp,0xc
c0014951:	68 65 47 02 c0       	push   0xc0024765
c0014956:	e8 47 b6 ff ff       	call   c000ffa2 <KePanic(char const*)>
c001495b:	83 c4 10             	add    esp,0x10
c001495e:	e9 89 00 00 00       	jmp    c00149ec <SysKill(regs*)+0xac>
c0014963:	90                   	nop
c0014964:	83 ec 0c             	sub    esp,0xc
c0014967:	68 4c ea 02 c0       	push   0xc002ea4c
c001496c:	e8 37 cf 00 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014971:	8d 76 00             	lea    esi,[esi+0x0]
c0014974:	83 c4 10             	add    esp,0x10
c0014977:	85 c0                	test   eax,eax
c0014979:	74 19                	je     c0014994 <SysKill(regs*)+0x54>
c001497b:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001497e:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014981:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014983:	74 33                	je     c00149b8 <SysKill(regs*)+0x78>
c0014985:	52                   	push   edx
c0014986:	52                   	push   edx
c0014987:	50                   	push   eax
c0014988:	68 4c ea 02 c0       	push   0xc002ea4c
c001498d:	e8 22 d4 00 00       	call   c0021db4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014992:	eb e0                	jmp    c0014974 <SysKill(regs*)+0x34>
c0014994:	83 ec 0c             	sub    esp,0xc
c0014997:	68 40 ea 02 c0       	push   0xc002ea40
c001499c:	e8 07 cf 00 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00149a1:	8d 76 00             	lea    esi,[esi+0x0]
c00149a4:	83 c4 10             	add    esp,0x10
c00149a7:	85 c0                	test   eax,eax
c00149a9:	74 41                	je     c00149ec <SysKill(regs*)+0xac>
c00149ab:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00149ae:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c00149b1:	39 0a                	cmp    DWORD PTR [edx],ecx
c00149b3:	75 27                	jne    c00149dc <SysKill(regs*)+0x9c>
c00149b5:	8d 76 00             	lea    esi,[esi+0x0]
c00149b8:	51                   	push   ecx
c00149b9:	51                   	push   ecx
c00149ba:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00149bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149c2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149c5:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00149cb:	e8 1b c7 ff ff       	call   c00110eb <KeRaiseSignal(SigHandlerBlock*, int)>
c00149d0:	83 c4 10             	add    esp,0x10
c00149d3:	31 c0                	xor    eax,eax
c00149d5:	31 d2                	xor    edx,edx
c00149d7:	eb 1b                	jmp    c00149f4 <SysKill(regs*)+0xb4>
c00149d9:	8d 76 00             	lea    esi,[esi+0x0]
c00149dc:	52                   	push   edx
c00149dd:	52                   	push   edx
c00149de:	50                   	push   eax
c00149df:	68 40 ea 02 c0       	push   0xc002ea40
c00149e4:	e8 cb d3 00 00       	call   c0021db4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00149e9:	eb b9                	jmp    c00149a4 <SysKill(regs*)+0x64>
c00149eb:	90                   	nop
c00149ec:	83 c8 ff             	or     eax,0xffffffff
c00149ef:	89 c2                	mov    edx,eax
c00149f1:	8d 76 00             	lea    esi,[esi+0x0]
c00149f4:	83 c4 08             	add    esp,0x8
c00149f7:	5b                   	pop    ebx
c00149f8:	c3                   	ret    

c00149f9 <SysLoadDLL(regs*)>:
c00149f9:	56                   	push   esi
c00149fa:	53                   	push   ebx
c00149fb:	31 d2                	xor    edx,edx
c00149fd:	51                   	push   ecx
c00149fe:	b8 01 00 00 00       	mov    eax,0x1
c0014a03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014a07:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0014a0b:	0f 84 8c 00 00 00    	je     c0014a9d <SysLoadDLL(regs*)+0xa4>
c0014a11:	83 ec 0c             	sub    esp,0xc
c0014a14:	68 14 01 00 00       	push   0x114
c0014a19:	e8 3d b2 ff ff       	call   c000fc5b <malloc>
c0014a1e:	83 c4 0c             	add    esp,0xc
c0014a21:	89 c3                	mov    ebx,eax
c0014a23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a28:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014a2b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a2e:	53                   	push   ebx
c0014a2f:	e8 fe 36 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014a34:	83 c4 10             	add    esp,0x10
c0014a37:	31 d2                	xor    edx,edx
c0014a39:	b8 02 00 00 00       	mov    eax,0x2
c0014a3e:	85 db                	test   ebx,ebx
c0014a40:	74 5b                	je     c0014a9d <SysLoadDLL(regs*)+0xa4>
c0014a42:	83 ec 0c             	sub    esp,0xc
c0014a45:	53                   	push   ebx
c0014a46:	e8 c9 39 ff ff       	call   c0008414 <File::exists()>
c0014a4b:	83 c4 10             	add    esp,0x10
c0014a4e:	84 c0                	test   al,al
c0014a50:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014a52:	75 11                	jne    c0014a65 <SysLoadDLL(regs*)+0x6c>
c0014a54:	83 ec 0c             	sub    esp,0xc
c0014a57:	53                   	push   ebx
c0014a58:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a5b:	83 c4 10             	add    esp,0x10
c0014a5e:	b8 03 00 00 00       	mov    eax,0x3
c0014a63:	eb 36                	jmp    c0014a9b <SysLoadDLL(regs*)+0xa2>
c0014a65:	83 ec 0c             	sub    esp,0xc
c0014a68:	53                   	push   ebx
c0014a69:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014a6c:	58                   	pop    eax
c0014a6d:	5a                   	pop    edx
c0014a6e:	6a 00                	push   0x0
c0014a70:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014a73:	e8 28 16 00 00       	call   c00160a0 <Thr::loadDLL(char const*, bool)>
c0014a78:	83 c4 10             	add    esp,0x10
c0014a7b:	89 c1                	mov    ecx,eax
c0014a7d:	31 d2                	xor    edx,edx
c0014a7f:	b8 04 00 00 00       	mov    eax,0x4
c0014a84:	85 c9                	test   ecx,ecx
c0014a86:	74 15                	je     c0014a9d <SysLoadDLL(regs*)+0xa4>
c0014a88:	53                   	push   ebx
c0014a89:	53                   	push   ebx
c0014a8a:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0014a90:	51                   	push   ecx
c0014a91:	e8 5c 18 00 00       	call   c00162f2 <Thr::executeDLL(unsigned long, void*)>
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	31 c0                	xor    eax,eax
c0014a9b:	31 d2                	xor    edx,edx
c0014a9d:	59                   	pop    ecx
c0014a9e:	5b                   	pop    ebx
c0014a9f:	5e                   	pop    esi
c0014aa0:	c3                   	ret    

c0014aa1 <SysRead(regs*)>:
c0014aa1:	57                   	push   edi
c0014aa2:	56                   	push   esi
c0014aa3:	53                   	push   ebx
c0014aa4:	83 ec 10             	sub    esp,0x10
c0014aa7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014aab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014aae:	83 f8 02             	cmp    eax,0x2
c0014ab1:	77 10                	ja     c0014ac3 <SysRead(regs*)+0x22>
c0014ab3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014ab8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014abb:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014ac1:	eb 0e                	jmp    c0014ad1 <SysRead(regs*)+0x30>
c0014ac3:	83 ec 0c             	sub    esp,0xc
c0014ac6:	50                   	push   eax
c0014ac7:	e8 5d e7 ff ff       	call   c0013229 <KeGetFileFromDescriptor(int)>
c0014acc:	83 c4 10             	add    esp,0x10
c0014acf:	89 c1                	mov    ecx,eax
c0014ad1:	83 c8 ff             	or     eax,0xffffffff
c0014ad4:	85 c9                	test   ecx,ecx
c0014ad6:	89 c2                	mov    edx,eax
c0014ad8:	74 28                	je     c0014b02 <SysRead(regs*)+0x61>
c0014ada:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014ae2:	31 ff                	xor    edi,edi
c0014ae4:	83 ec 0c             	sub    esp,0xc
c0014ae7:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014ae9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014aed:	52                   	push   edx
c0014aee:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014af1:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0014af4:	57                   	push   edi
c0014af5:	56                   	push   esi
c0014af6:	51                   	push   ecx
c0014af7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014afa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014afe:	83 c4 20             	add    esp,0x20
c0014b01:	99                   	cdq    
c0014b02:	83 c4 10             	add    esp,0x10
c0014b05:	5b                   	pop    ebx
c0014b06:	5e                   	pop    esi
c0014b07:	5f                   	pop    edi
c0014b08:	c3                   	ret    

c0014b09 <SysRegisterSignal(regs*)>:
c0014b09:	83 ec 18             	sub    esp,0x18
c0014b0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014b10:	6a 00                	push   0x0
c0014b12:	6a 00                	push   0x0
c0014b14:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014b17:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014b1a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b1f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014b22:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0014b28:	e8 88 c5 ff ff       	call   c00110b5 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0014b2d:	83 c4 2c             	add    esp,0x2c
c0014b30:	99                   	cdq    
c0014b31:	c3                   	ret    

c0014b32 <SysRegistryGetTypeFromPath(regs*)>:
c0014b32:	53                   	push   ebx
c0014b33:	81 ec 40 01 00 00    	sub    esp,0x140
c0014b39:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014b40:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014b43:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014b46:	e8 ed 93 ff ff       	call   c000df38 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014b4b:	83 c4 10             	add    esp,0x10
c0014b4e:	89 c1                	mov    ecx,eax
c0014b50:	85 c0                	test   eax,eax
c0014b52:	74 15                	je     c0014b69 <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014b54:	50                   	push   eax
c0014b55:	8d 44 24 08          	lea    eax,[esp+0x8]
c0014b59:	50                   	push   eax
c0014b5a:	51                   	push   ecx
c0014b5b:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014b5e:	e8 b9 8f ff ff       	call   c000db1c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014b63:	83 c4 10             	add    esp,0x10
c0014b66:	99                   	cdq    
c0014b67:	eb 05                	jmp    c0014b6e <SysRegistryGetTypeFromPath(regs*)+0x3c>
c0014b69:	83 c8 ff             	or     eax,0xffffffff
c0014b6c:	89 c2                	mov    edx,eax
c0014b6e:	81 c4 38 01 00 00    	add    esp,0x138
c0014b74:	5b                   	pop    ebx
c0014b75:	c3                   	ret    

c0014b76 <SysRegistryReadExtent(regs*)>:
c0014b76:	83 ec 1c             	sub    esp,0x1c
c0014b79:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b7d:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014b80:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014b83:	85 c0                	test   eax,eax
c0014b85:	79 1f                	jns    c0014ba6 <SysRegistryReadExtent(regs*)+0x30>
c0014b87:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014b8c:	52                   	push   edx
c0014b8d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014b91:	52                   	push   edx
c0014b92:	50                   	push   eax
c0014b93:	51                   	push   ecx
c0014b94:	e8 75 8e ff ff       	call   c000da0e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014b99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014b9d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014ba1:	83 c4 10             	add    esp,0x10
c0014ba4:	eb 14                	jmp    c0014bba <SysRegistryReadExtent(regs*)+0x44>
c0014ba6:	83 ec 04             	sub    esp,0x4
c0014ba9:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014bac:	50                   	push   eax
c0014bad:	51                   	push   ecx
c0014bae:	e8 f5 88 ff ff       	call   c000d4a8 <CmGetString(Reghive_Tag*, int, char*)>
c0014bb3:	83 c4 10             	add    esp,0x10
c0014bb6:	31 c0                	xor    eax,eax
c0014bb8:	31 d2                	xor    edx,edx
c0014bba:	83 c4 1c             	add    esp,0x1c
c0014bbd:	c3                   	ret    

c0014bbe <SysRegistryPathToExtentLookup(regs*)>:
c0014bbe:	83 ec 14             	sub    esp,0x14
c0014bc1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bc5:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014bc8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014bcb:	e8 68 93 ff ff       	call   c000df38 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014bd0:	83 c4 1c             	add    esp,0x1c
c0014bd3:	99                   	cdq    
c0014bd4:	c3                   	ret    

c0014bd5 <SysRegistryEnterDirectory(regs*)>:
c0014bd5:	83 ec 14             	sub    esp,0x14
c0014bd8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bdc:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014bdf:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014be2:	e8 38 89 ff ff       	call   c000d51f <CmEnterDirectory(Reghive_Tag*, int)>
c0014be7:	83 c4 1c             	add    esp,0x1c
c0014bea:	99                   	cdq    
c0014beb:	c3                   	ret    

c0014bec <SysRegistryGetNext(regs*)>:
c0014bec:	83 ec 14             	sub    esp,0x14
c0014bef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014bf3:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0014bf6:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014bf9:	e8 60 89 ff ff       	call   c000d55e <CmGetNext(Reghive_Tag*, int)>
c0014bfe:	83 c4 1c             	add    esp,0x1c
c0014c01:	99                   	cdq    
c0014c02:	c3                   	ret    

c0014c03 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0014c03:	57                   	push   edi
c0014c04:	56                   	push   esi
c0014c05:	53                   	push   ebx
c0014c06:	81 ec 34 01 00 00    	sub    esp,0x134
c0014c0c:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0014c13:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0014c17:	57                   	push   edi
c0014c18:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014c1b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c1e:	e8 f9 8e ff ff       	call   c000db1c <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014c23:	89 c3                	mov    ebx,eax
c0014c25:	58                   	pop    eax
c0014c26:	5a                   	pop    edx
c0014c27:	57                   	push   edi
c0014c28:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014c2b:	e8 10 ba fe ff       	call   c0000640 <strcpy>
c0014c30:	89 d8                	mov    eax,ebx
c0014c32:	81 c4 40 01 00 00    	add    esp,0x140
c0014c38:	99                   	cdq    
c0014c39:	5b                   	pop    ebx
c0014c3a:	5e                   	pop    esi
c0014c3b:	5f                   	pop    edi
c0014c3c:	c3                   	ret    

c0014c3d <SysRegistryOpen(regs*)>:
c0014c3d:	83 ec 18             	sub    esp,0x18
c0014c40:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c44:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014c47:	e8 ec 86 ff ff       	call   c000d338 <CmOpen(char const*)>
c0014c4c:	83 c4 1c             	add    esp,0x1c
c0014c4f:	99                   	cdq    
c0014c50:	c3                   	ret    

c0014c51 <SysRegistryClose(regs*)>:
c0014c51:	83 ec 18             	sub    esp,0x18
c0014c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014c58:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014c5b:	e8 f6 87 ff ff       	call   c000d456 <CmClose(Reghive_Tag*)>
c0014c60:	31 c0                	xor    eax,eax
c0014c62:	31 d2                	xor    edx,edx
c0014c64:	83 c4 1c             	add    esp,0x1c
c0014c67:	c3                   	ret    

c0014c68 <SysRegistryEasyReadString(regs*)>:
c0014c68:	57                   	push   edi
c0014c69:	56                   	push   esi
c0014c6a:	53                   	push   ebx
c0014c6b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c6f:	83 ec 0c             	sub    esp,0xc
c0014c72:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014c75:	e8 be 86 ff ff       	call   c000d338 <CmOpen(char const*)>
c0014c7a:	5a                   	pop    edx
c0014c7b:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014c7e:	59                   	pop    ecx
c0014c7f:	89 c3                	mov    ebx,eax
c0014c81:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014c84:	50                   	push   eax
c0014c85:	e8 ae 92 ff ff       	call   c000df38 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014c8a:	83 c4 10             	add    esp,0x10
c0014c8d:	89 c1                	mov    ecx,eax
c0014c8f:	b8 01 00 00 00       	mov    eax,0x1
c0014c94:	85 c9                	test   ecx,ecx
c0014c96:	7e 16                	jle    c0014cae <SysRegistryEasyReadString(regs*)+0x46>
c0014c98:	50                   	push   eax
c0014c99:	57                   	push   edi
c0014c9a:	51                   	push   ecx
c0014c9b:	53                   	push   ebx
c0014c9c:	e8 07 88 ff ff       	call   c000d4a8 <CmGetString(Reghive_Tag*, int, char*)>
c0014ca1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ca4:	e8 ad 87 ff ff       	call   c000d456 <CmClose(Reghive_Tag*)>
c0014ca9:	83 c4 10             	add    esp,0x10
c0014cac:	31 c0                	xor    eax,eax
c0014cae:	5b                   	pop    ebx
c0014caf:	31 d2                	xor    edx,edx
c0014cb1:	5e                   	pop    esi
c0014cb2:	5f                   	pop    edi
c0014cb3:	c3                   	ret    

c0014cb4 <SysRegistryEasyReadInteger(regs*)>:
c0014cb4:	56                   	push   esi
c0014cb5:	53                   	push   ebx
c0014cb6:	83 ec 10             	sub    esp,0x10
c0014cb9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014cbd:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014cc0:	e8 73 86 ff ff       	call   c000d338 <CmOpen(char const*)>
c0014cc5:	5a                   	pop    edx
c0014cc6:	89 c3                	mov    ebx,eax
c0014cc8:	59                   	pop    ecx
c0014cc9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014ccc:	50                   	push   eax
c0014ccd:	e8 66 92 ff ff       	call   c000df38 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014cd2:	83 c4 10             	add    esp,0x10
c0014cd5:	89 c1                	mov    ecx,eax
c0014cd7:	b8 01 00 00 00       	mov    eax,0x1
c0014cdc:	85 c9                	test   ecx,ecx
c0014cde:	7e 18                	jle    c0014cf8 <SysRegistryEasyReadInteger(regs*)+0x44>
c0014ce0:	50                   	push   eax
c0014ce1:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0014ce4:	51                   	push   ecx
c0014ce5:	53                   	push   ebx
c0014ce6:	e8 23 8d ff ff       	call   c000da0e <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0014ceb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014cee:	e8 63 87 ff ff       	call   c000d456 <CmClose(Reghive_Tag*)>
c0014cf3:	83 c4 10             	add    esp,0x10
c0014cf6:	31 c0                	xor    eax,eax
c0014cf8:	59                   	pop    ecx
c0014cf9:	31 d2                	xor    edx,edx
c0014cfb:	5b                   	pop    ebx
c0014cfc:	5e                   	pop    esi
c0014cfd:	c3                   	ret    

c0014cfe <SysSbrk(regs*)>:
c0014cfe:	56                   	push   esi
c0014cff:	53                   	push   ebx
c0014d00:	50                   	push   eax
c0014d01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d06:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014d0a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014d0d:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0014d10:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0014d16:	85 db                	test   ebx,ebx
c0014d18:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0014d1b:	74 02                	je     c0014d1f <SysSbrk(regs*)+0x21>
c0014d1d:	79 06                	jns    c0014d25 <SysSbrk(regs*)+0x27>
c0014d1f:	89 f0                	mov    eax,esi
c0014d21:	31 d2                	xor    edx,edx
c0014d23:	eb 2a                	jmp    c0014d4f <SysSbrk(regs*)+0x51>
c0014d25:	83 c8 ff             	or     eax,0xffffffff
c0014d28:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0014d2e:	89 c2                	mov    edx,eax
c0014d30:	77 1d                	ja     c0014d4f <SysSbrk(regs*)+0x51>
c0014d32:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0014d38:	50                   	push   eax
c0014d39:	c1 ea 0c             	shr    edx,0xc
c0014d3c:	68 07 0c 00 00       	push   0xc07
c0014d41:	52                   	push   edx
c0014d42:	51                   	push   ecx
c0014d43:	e8 34 ee ff ff       	call   c0013b7c <VAS::allocatePages(int, int)>
c0014d48:	89 f0                	mov    eax,esi
c0014d4a:	31 d2                	xor    edx,edx
c0014d4c:	83 c4 10             	add    esp,0x10
c0014d4f:	59                   	pop    ecx
c0014d50:	5b                   	pop    ebx
c0014d51:	5e                   	pop    esi
c0014d52:	c3                   	ret    

c0014d53 <SysSetCwd(regs*)>:
c0014d53:	83 ec 14             	sub    esp,0x14
c0014d56:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d5a:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014d5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014d62:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014d65:	e8 49 37 ff ff       	call   c00084b3 <Fs::setcwd(Process*, char*)>
c0014d6a:	83 c4 1c             	add    esp,0x1c
c0014d6d:	99                   	cdq    
c0014d6e:	c3                   	ret    

c0014d6f <SysSetTime(regs*)>:
c0014d6f:	55                   	push   ebp
c0014d70:	31 d2                	xor    edx,edx
c0014d72:	57                   	push   edi
c0014d73:	56                   	push   esi
c0014d74:	be 18 00 00 00       	mov    esi,0x18
c0014d79:	53                   	push   ebx
c0014d7a:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014d7f:	83 ec 20             	sub    esp,0x20
c0014d82:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0014d86:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014d89:	f7 f3                	div    ebx
c0014d8b:	89 d7                	mov    edi,edx
c0014d8d:	31 d2                	xor    edx,edx
c0014d8f:	f7 f3                	div    ebx
c0014d91:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014d94:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014d98:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014d9d:	31 d2                	xor    edx,edx
c0014d9f:	f7 f3                	div    ebx
c0014da1:	31 d2                	xor    edx,edx
c0014da3:	f7 f6                	div    esi
c0014da5:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014da8:	89 d5                	mov    ebp,edx
c0014daa:	89 c3                	mov    ebx,eax
c0014dac:	be 0c 00 00 00       	mov    esi,0xc
c0014db1:	83 e3 1f             	and    ebx,0x1f
c0014db4:	c1 e8 05             	shr    eax,0x5
c0014db7:	43                   	inc    ebx
c0014db8:	31 d2                	xor    edx,edx
c0014dba:	f7 f6                	div    esi
c0014dbc:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014dc0:	57                   	push   edi
c0014dc1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014dc5:	55                   	push   ebp
c0014dc6:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c0014dca:	56                   	push   esi
c0014dcb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014dcf:	53                   	push   ebx
c0014dd0:	68 86 47 02 c0       	push   0xc0024786
c0014dd5:	e8 8a 21 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014dda:	83 c4 1c             	add    esp,0x1c
c0014ddd:	57                   	push   edi
c0014dde:	c1 e7 10             	shl    edi,0x10
c0014de1:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014de5:	55                   	push   ebp
c0014de6:	56                   	push   esi
c0014de7:	c1 e6 10             	shl    esi,0x10
c0014dea:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014dee:	53                   	push   ebx
c0014def:	68 a8 47 02 c0       	push   0xc00247a8
c0014df4:	e8 6b 21 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014df9:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0014dfe:	31 d2                	xor    edx,edx
c0014e00:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c0014e06:	31 c0                	xor    eax,eax
c0014e08:	88 d8                	mov    al,bl
c0014e0a:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c0014e0e:	0f b7 d8             	movzx  ebx,ax
c0014e11:	09 f3                	or     ebx,esi
c0014e13:	89 d8                	mov    eax,ebx
c0014e15:	89 eb                	mov    ebx,ebp
c0014e17:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c0014e1b:	88 da                	mov    dl,bl
c0014e1d:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c0014e21:	83 c4 1c             	add    esp,0x1c
c0014e24:	89 d6                	mov    esi,edx
c0014e26:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c0014e2c:	09 fe                	or     esi,edi
c0014e2e:	56                   	push   esi
c0014e2f:	50                   	push   eax
c0014e30:	51                   	push   ecx
c0014e31:	e8 ec 46 ff ff       	call   c0009522 <Clock::setTimeInDatetimeLocal(datetime_t)>
c0014e36:	83 c4 2c             	add    esp,0x2c
c0014e39:	83 f0 01             	xor    eax,0x1
c0014e3c:	5b                   	pop    ebx
c0014e3d:	0f b6 c0             	movzx  eax,al
c0014e40:	5e                   	pop    esi
c0014e41:	31 d2                	xor    edx,edx
c0014e43:	5f                   	pop    edi
c0014e44:	5d                   	pop    ebp
c0014e45:	c3                   	ret    

c0014e46 <SysSymlink(regs*)>:
c0014e46:	56                   	push   esi
c0014e47:	83 c8 ff             	or     eax,0xffffffff
c0014e4a:	53                   	push   ebx
c0014e4b:	89 c2                	mov    edx,eax
c0014e4d:	81 ec 34 02 00 00    	sub    esp,0x234
c0014e53:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c0014e5a:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014e5e:	74 50                	je     c0014eb0 <SysSymlink(regs*)+0x6a>
c0014e60:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014e63:	85 c9                	test   ecx,ecx
c0014e65:	74 49                	je     c0014eb0 <SysSymlink(regs*)+0x6a>
c0014e67:	6a 01                	push   0x1
c0014e69:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e6e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e71:	05 0c 01 00 00       	add    eax,0x10c
c0014e76:	50                   	push   eax
c0014e77:	51                   	push   ecx
c0014e78:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014e7c:	56                   	push   esi
c0014e7d:	e8 98 2f ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014e82:	6a 01                	push   0x1
c0014e84:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014e89:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e8c:	05 0c 01 00 00       	add    eax,0x10c
c0014e91:	50                   	push   eax
c0014e92:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014e95:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014e9c:	53                   	push   ebx
c0014e9d:	e8 78 2f ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014ea2:	83 c4 18             	add    esp,0x18
c0014ea5:	56                   	push   esi
c0014ea6:	53                   	push   ebx
c0014ea7:	e8 9c 2b ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c0014eac:	83 c4 10             	add    esp,0x10
c0014eaf:	99                   	cdq    
c0014eb0:	81 c4 34 02 00 00    	add    esp,0x234
c0014eb6:	5b                   	pop    ebx
c0014eb7:	5e                   	pop    esi
c0014eb8:	c3                   	ret    

c0014eb9 <SysTimezone(regs*)>:
c0014eb9:	83 ec 0c             	sub    esp,0xc
c0014ebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ec0:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014ec4:	75 17                	jne    c0014edd <SysTimezone(regs*)+0x24>
c0014ec6:	83 ec 0c             	sub    esp,0xc
c0014ec9:	68 ca 47 02 c0       	push   0xc00247ca
c0014ece:	e8 91 20 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014ed3:	83 c8 ff             	or     eax,0xffffffff
c0014ed6:	83 c4 10             	add    esp,0x10
c0014ed9:	89 c2                	mov    edx,eax
c0014edb:	eb 16                	jmp    c0014ef3 <SysTimezone(regs*)+0x3a>
c0014edd:	83 ec 0c             	sub    esp,0xc
c0014ee0:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014ee3:	e8 c7 40 ff ff       	call   c0008faf <KeSetTimezone(int)>
c0014ee8:	31 d2                	xor    edx,edx
c0014eea:	83 f0 01             	xor    eax,0x1
c0014eed:	83 c4 10             	add    esp,0x10
c0014ef0:	0f b6 c0             	movzx  eax,al
c0014ef3:	83 c4 0c             	add    esp,0xc
c0014ef6:	c3                   	ret    

c0014ef7 <SysTruncate(regs*)>:
c0014ef7:	55                   	push   ebp
c0014ef8:	57                   	push   edi
c0014ef9:	31 ff                	xor    edi,edi
c0014efb:	56                   	push   esi
c0014efc:	53                   	push   ebx
c0014efd:	83 ec 0c             	sub    esp,0xc
c0014f00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014f04:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0014f07:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0014f0a:	89 ce                	mov    esi,ecx
c0014f0c:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014f10:	0f 84 9a 00 00 00    	je     c0014fb0 <SysTruncate(regs*)+0xb9>
c0014f16:	83 ec 0c             	sub    esp,0xc
c0014f19:	68 14 01 00 00       	push   0x114
c0014f1e:	e8 38 ad ff ff       	call   c000fc5b <malloc>
c0014f23:	83 c4 0c             	add    esp,0xc
c0014f26:	89 c3                	mov    ebx,eax
c0014f28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f2d:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014f30:	55                   	push   ebp
c0014f31:	53                   	push   ebx
c0014f32:	e8 fb 31 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014f37:	83 c4 10             	add    esp,0x10
c0014f3a:	31 d2                	xor    edx,edx
c0014f3c:	b8 03 00 00 00       	mov    eax,0x3
c0014f41:	85 db                	test   ebx,ebx
c0014f43:	0f 84 a2 00 00 00    	je     c0014feb <SysTruncate(regs*)+0xf4>
c0014f49:	51                   	push   ecx
c0014f4a:	51                   	push   ecx
c0014f4b:	6a 02                	push   0x2
c0014f4d:	53                   	push   ebx
c0014f4e:	e8 fd 31 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0014f53:	83 c4 10             	add    esp,0x10
c0014f56:	85 c0                	test   eax,eax
c0014f58:	74 13                	je     c0014f6d <SysTruncate(regs*)+0x76>
c0014f5a:	83 ec 0c             	sub    esp,0xc
c0014f5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f5f:	53                   	push   ebx
c0014f60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f63:	83 c4 10             	add    esp,0x10
c0014f66:	b8 04 00 00 00       	mov    eax,0x4
c0014f6b:	eb 7c                	jmp    c0014fe9 <SysTruncate(regs*)+0xf2>
c0014f6d:	52                   	push   edx
c0014f6e:	57                   	push   edi
c0014f6f:	56                   	push   esi
c0014f70:	53                   	push   ebx
c0014f71:	e8 ee 32 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0014f76:	83 c4 10             	add    esp,0x10
c0014f79:	85 c0                	test   eax,eax
c0014f7b:	74 1b                	je     c0014f98 <SysTruncate(regs*)+0xa1>
c0014f7d:	83 ec 0c             	sub    esp,0xc
c0014f80:	53                   	push   ebx
c0014f81:	e8 28 32 ff ff       	call   c00081ae <File::close()>
c0014f86:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f88:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f8b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014f8e:	83 c4 10             	add    esp,0x10
c0014f91:	b8 05 00 00 00       	mov    eax,0x5
c0014f96:	eb 51                	jmp    c0014fe9 <SysTruncate(regs*)+0xf2>
c0014f98:	83 ec 0c             	sub    esp,0xc
c0014f9b:	53                   	push   ebx
c0014f9c:	e8 0d 32 ff ff       	call   c00081ae <File::close()>
c0014fa1:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014fa3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014fa6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014fa9:	83 c4 10             	add    esp,0x10
c0014fac:	31 c0                	xor    eax,eax
c0014fae:	eb 39                	jmp    c0014fe9 <SysTruncate(regs*)+0xf2>
c0014fb0:	31 d2                	xor    edx,edx
c0014fb2:	b8 01 00 00 00       	mov    eax,0x1
c0014fb7:	83 fd 02             	cmp    ebp,0x2
c0014fba:	7e 2f                	jle    c0014feb <SysTruncate(regs*)+0xf4>
c0014fbc:	83 ec 0c             	sub    esp,0xc
c0014fbf:	51                   	push   ecx
c0014fc0:	e8 64 e2 ff ff       	call   c0013229 <KeGetFileFromDescriptor(int)>
c0014fc5:	83 c4 10             	add    esp,0x10
c0014fc8:	89 c1                	mov    ecx,eax
c0014fca:	31 d2                	xor    edx,edx
c0014fcc:	b8 02 00 00 00       	mov    eax,0x2
c0014fd1:	85 c9                	test   ecx,ecx
c0014fd3:	74 16                	je     c0014feb <SysTruncate(regs*)+0xf4>
c0014fd5:	50                   	push   eax
c0014fd6:	57                   	push   edi
c0014fd7:	56                   	push   esi
c0014fd8:	51                   	push   ecx
c0014fd9:	e8 86 32 ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c0014fde:	83 c4 10             	add    esp,0x10
c0014fe1:	85 c0                	test   eax,eax
c0014fe3:	0f 95 c0             	setne  al
c0014fe6:	0f b6 c0             	movzx  eax,al
c0014fe9:	31 d2                	xor    edx,edx
c0014feb:	83 c4 0c             	add    esp,0xc
c0014fee:	5b                   	pop    ebx
c0014fef:	5e                   	pop    esi
c0014ff0:	5f                   	pop    edi
c0014ff1:	5d                   	pop    ebp
c0014ff2:	c3                   	ret    

c0014ff3 <SysWrite(regs*)>:
c0014ff3:	57                   	push   edi
c0014ff4:	56                   	push   esi
c0014ff5:	53                   	push   ebx
c0014ff6:	83 ec 10             	sub    esp,0x10
c0014ff9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014ffd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0015000:	83 f8 02             	cmp    eax,0x2
c0015003:	77 10                	ja     c0015015 <SysWrite(regs*)+0x22>
c0015005:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001500a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001500d:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0015013:	eb 0e                	jmp    c0015023 <SysWrite(regs*)+0x30>
c0015015:	83 ec 0c             	sub    esp,0xc
c0015018:	50                   	push   eax
c0015019:	e8 0b e2 ff ff       	call   c0013229 <KeGetFileFromDescriptor(int)>
c001501e:	83 c4 10             	add    esp,0x10
c0015021:	89 c1                	mov    ecx,eax
c0015023:	83 c8 ff             	or     eax,0xffffffff
c0015026:	85 c9                	test   ecx,ecx
c0015028:	89 c2                	mov    edx,eax
c001502a:	74 28                	je     c0015054 <SysWrite(regs*)+0x61>
c001502c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015034:	31 ff                	xor    edi,edi
c0015036:	83 ec 0c             	sub    esp,0xc
c0015039:	8b 01                	mov    eax,DWORD PTR [ecx]
c001503b:	8d 54 24 18          	lea    edx,[esp+0x18]
c001503f:	52                   	push   edx
c0015040:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0015043:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0015046:	57                   	push   edi
c0015047:	56                   	push   esi
c0015048:	51                   	push   ecx
c0015049:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001504c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015050:	83 c4 20             	add    esp,0x20
c0015053:	99                   	cdq    
c0015054:	83 c4 10             	add    esp,0x10
c0015057:	5b                   	pop    ebx
c0015058:	5e                   	pop    esi
c0015059:	5f                   	pop    edi
c001505a:	c3                   	ret    

c001505b <SysWsbe(regs*)>:
c001505b:	55                   	push   ebp
c001505c:	57                   	push   edi
c001505d:	56                   	push   esi
c001505e:	53                   	push   ebx
c001505f:	83 ec 3c             	sub    esp,0x3c
c0015062:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0015066:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c001506d:	75 2d                	jne    c001509c <SysWsbe(regs*)+0x41>
c001506f:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c0015076:	75 24                	jne    c001509c <SysWsbe(regs*)+0x41>
c0015078:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c001507f:	75 1b                	jne    c001509c <SysWsbe(regs*)+0x41>
c0015081:	6a 01                	push   0x1
c0015083:	6a 00                	push   0x0
c0015085:	68 21 9f 00 c0       	push   0xc0009f21
c001508a:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c0015090:	e8 d3 18 00 00       	call   c0016968 <Process::createThread(void (*)(void*), void*, int)>
c0015095:	83 c4 10             	add    esp,0x10
c0015098:	31 c0                	xor    eax,eax
c001509a:	eb 52                	jmp    c00150ee <SysWsbe(regs*)+0x93>
c001509c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00150a0:	be df 47 02 c0       	mov    esi,0xc00247df
c00150a5:	b9 0b 00 00 00       	mov    ecx,0xb
c00150aa:	fc                   	cld    
c00150ab:	83 ec 0c             	sub    esp,0xc
c00150ae:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00150b0:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00150b4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150b9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150bc:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00150c2:	8b 06                	mov    eax,DWORD PTR [esi]
c00150c4:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c00150c7:	57                   	push   edi
c00150c8:	e8 a3 b4 fe ff       	call   c0000570 <strlen>
c00150cd:	5a                   	pop    edx
c00150ce:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00150d2:	52                   	push   edx
c00150d3:	31 d2                	xor    edx,edx
c00150d5:	57                   	push   edi
c00150d6:	52                   	push   edx
c00150d7:	50                   	push   eax
c00150d8:	56                   	push   esi
c00150d9:	ff d5                	call   ebp
c00150db:	83 c4 14             	add    esp,0x14
c00150de:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00150e1:	e8 8a 22 00 00       	call   c0017370 <terminateTask(int)>
c00150e6:	83 c4 10             	add    esp,0x10
c00150e9:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00150ee:	83 c4 3c             	add    esp,0x3c
c00150f1:	31 d2                	xor    edx,edx
c00150f3:	5b                   	pop    ebx
c00150f4:	5e                   	pop    esi
c00150f5:	5f                   	pop    edi
c00150f6:	5d                   	pop    ebp
c00150f7:	c3                   	ret    

c00150f8 <SysYield(regs*)>:
c00150f8:	83 ec 0c             	sub    esp,0xc
c00150fb:	fa                   	cli    
c00150fc:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0015102:	e8 b9 1a 00 00       	call   c0016bc0 <schedule()>
c0015107:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001510e:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0015115:	75 01                	jne    c0015118 <SysYield(regs*)+0x20>
c0015117:	fb                   	sti    
c0015118:	31 c0                	xor    eax,eax
c001511a:	31 d2                	xor    edx,edx
c001511c:	83 c4 0c             	add    esp,0xc
c001511f:	c3                   	ret    

c0015120 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0015120:	55                   	push   ebp
c0015121:	57                   	push   edi
c0015122:	56                   	push   esi
c0015123:	53                   	push   ebx
c0015124:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001512a:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0015132:	0f 95 c0             	setne  al
c0015135:	31 d2                	xor    edx,edx
c0015137:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001513f:	0f 94 c2             	sete   dl
c0015142:	85 c2                	test   edx,eax
c0015144:	74 34                	je     c001517a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015146:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0015151:	74 27                	je     c001517a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0015153:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001515a:	05 00 10 00 00       	add    eax,0x1000
c001515f:	89 c1                	mov    ecx,eax
c0015161:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015166:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c001516c:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0015173:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001517a:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0015181:	83 ec 0c             	sub    esp,0xc
c0015184:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001518a:	6a 01                	push   0x1
c001518c:	e8 04 e2 ff ff       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c0015191:	83 c4 10             	add    esp,0x10
c0015194:	89 c3                	mov    ebx,eax
c0015196:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001519c:	0f 86 26 01 00 00    	jbe    c00152c8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c00151a2:	c1 ee 0c             	shr    esi,0xc
c00151a5:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00151ac:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00151b0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00151b8:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00151bf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00151c3:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c00151ca:	29 ef                	sub    edi,ebp
c00151cc:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00151d0:	0f 83 f9 00 00 00    	jae    c00152cf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c00151d6:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00151dc:	76 05                	jbe    c00151e3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00151de:	bf 00 10 00 00       	mov    edi,0x1000
c00151e3:	83 ec 0c             	sub    esp,0xc
c00151e6:	31 d2                	xor    edx,edx
c00151e8:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00151ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c00151f1:	8d 44 24 28          	lea    eax,[esp+0x28]
c00151f5:	50                   	push   eax
c00151f6:	8d 74 24 30          	lea    esi,[esp+0x30]
c00151fa:	56                   	push   esi
c00151fb:	52                   	push   edx
c00151fc:	57                   	push   edi
c00151fd:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0015204:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015207:	83 c4 20             	add    esp,0x20
c001520a:	85 c0                	test   eax,eax
c001520c:	75 06                	jne    c0015214 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001520e:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0015212:	74 13                	je     c0015227 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0015214:	83 ec 0c             	sub    esp,0xc
c0015217:	53                   	push   ebx
c0015218:	e8 80 e4 ff ff       	call   c001369d <Virt::freeKernelVirtualPages(unsigned long)>
c001521d:	83 c4 10             	add    esp,0x10
c0015220:	31 c0                	xor    eax,eax
c0015222:	e9 80 01 00 00       	jmp    c00153a7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c0015227:	fa                   	cli    
c0015228:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001522e:	e8 63 af ff ff       	call   c0010196 <Phys::allocatePage()>
c0015233:	6a 07                	push   0x7
c0015235:	89 c7                	mov    edi,eax
c0015237:	53                   	push   ebx
c0015238:	50                   	push   eax
c0015239:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001523e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015241:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015247:	e8 2c e8 ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c001524c:	83 c4 0c             	add    esp,0xc
c001524f:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0015256:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001525c:	6a 00                	push   0x0
c001525e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015263:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015266:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001526c:	e8 73 e6 ff ff       	call   c00138e4 <VAS::mapOtherVASIn(bool, VAS*)>
c0015271:	58                   	pop    eax
c0015272:	5a                   	pop    edx
c0015273:	68 07 0c 00 00       	push   0xc07
c0015278:	55                   	push   ebp
c0015279:	57                   	push   edi
c001527a:	89 df                	mov    edi,ebx
c001527c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015283:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015289:	6a 00                	push   0x0
c001528b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015290:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015293:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015299:	e8 1c ea ff ff       	call   c0013cba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001529e:	b9 00 10 00 00       	mov    ecx,0x1000
c00152a3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00152a5:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00152ac:	83 c4 20             	add    esp,0x20
c00152af:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00152b6:	75 01                	jne    c00152b9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c00152b8:	fb                   	sti    
c00152b9:	81 c5 00 10 00 00    	add    ebp,0x1000
c00152bf:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c00152c3:	e9 f0 fe ff ff       	jmp    c00151b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c00152c8:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00152cf:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00152d6:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00152dc:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00152e2:	0f 86 b1 00 00 00    	jbe    c0015399 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00152e8:	fa                   	cli    
c00152e9:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00152ef:	c1 ee 0c             	shr    esi,0xc
c00152f2:	51                   	push   ecx
c00152f3:	31 ff                	xor    edi,edi
c00152f5:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00152fc:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015302:	6a 00                	push   0x0
c0015304:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015309:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001530c:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0015312:	e8 cd e5 ff ff       	call   c00138e4 <VAS::mapOtherVASIn(bool, VAS*)>
c0015317:	83 c4 10             	add    esp,0x10
c001531a:	e8 77 ae ff ff       	call   c0010196 <Phys::allocatePage()>
c001531f:	47                   	inc    edi
c0015320:	6a 07                	push   0x7
c0015322:	53                   	push   ebx
c0015323:	50                   	push   eax
c0015324:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015328:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001532e:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0015331:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0015337:	e8 3c e7 ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c001533c:	58                   	pop    eax
c001533d:	5a                   	pop    edx
c001533e:	68 07 0c 00 00       	push   0xc07
c0015343:	55                   	push   ebp
c0015344:	81 c5 00 10 00 00    	add    ebp,0x1000
c001534a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001534e:	50                   	push   eax
c001534f:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0015356:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001535c:	6a 00                	push   0x0
c001535e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015363:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015366:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001536c:	e8 49 e9 ff ff       	call   c0013cba <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0015371:	83 c4 1c             	add    esp,0x1c
c0015374:	68 00 10 00 00       	push   0x1000
c0015379:	6a 00                	push   0x0
c001537b:	53                   	push   ebx
c001537c:	e8 6f b1 fe ff       	call   c00004f0 <memset>
c0015381:	83 c4 10             	add    esp,0x10
c0015384:	39 fe                	cmp    esi,edi
c0015386:	77 92                	ja     c001531a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0015388:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001538f:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0015396:	75 01                	jne    c0015399 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0015398:	fb                   	sti    
c0015399:	83 ec 0c             	sub    esp,0xc
c001539c:	53                   	push   ebx
c001539d:	e8 fb e2 ff ff       	call   c001369d <Virt::freeKernelVirtualPages(unsigned long)>
c00153a2:	83 c4 10             	add    esp,0x10
c00153a5:	b0 01                	mov    al,0x1
c00153a7:	81 c4 2c 10 00 00    	add    esp,0x102c
c00153ad:	5b                   	pop    ebx
c00153ae:	5e                   	pop    esi
c00153af:	5f                   	pop    edi
c00153b0:	5d                   	pop    ebp
c00153b1:	c3                   	ret    

c00153b2 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00153b2:	55                   	push   ebp
c00153b3:	57                   	push   edi
c00153b4:	56                   	push   esi
c00153b5:	53                   	push   ebx
c00153b6:	83 ec 48             	sub    esp,0x48
c00153b9:	68 14 01 00 00       	push   0x114
c00153be:	e8 98 a8 ff ff       	call   c000fc5b <malloc>
c00153c3:	83 c4 0c             	add    esp,0xc
c00153c6:	89 c6                	mov    esi,eax
c00153c8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00153cc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00153d0:	50                   	push   eax
c00153d1:	e8 5c 2d ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00153d6:	58                   	pop    eax
c00153d7:	5a                   	pop    edx
c00153d8:	6a 01                	push   0x1
c00153da:	56                   	push   esi
c00153db:	e8 70 2d ff ff       	call   c0008150 <File::open(FileOpenMode)>
c00153e0:	83 c4 10             	add    esp,0x10
c00153e3:	85 c0                	test   eax,eax
c00153e5:	0f 85 43 01 00 00    	jne    c001552e <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00153eb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00153f3:	83 ec 0c             	sub    esp,0xc
c00153f6:	6a 34                	push   0x34
c00153f8:	e8 5e a8 ff ff       	call   c000fc5b <malloc>
c00153fd:	89 c3                	mov    ebx,eax
c00153ff:	58                   	pop    eax
c0015400:	8b 06                	mov    eax,DWORD PTR [esi]
c0015402:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0015406:	57                   	push   edi
c0015407:	53                   	push   ebx
c0015408:	6a 00                	push   0x0
c001540a:	6a 34                	push   0x34
c001540c:	56                   	push   esi
c001540d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015410:	83 c4 20             	add    esp,0x20
c0015413:	85 c0                	test   eax,eax
c0015415:	0f 85 13 01 00 00    	jne    c001552e <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001541b:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0015421:	0f 85 07 01 00 00    	jne    c001552e <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0015427:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001542a:	85 c0                	test   eax,eax
c001542c:	0f 84 fc 00 00 00    	je     c001552e <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0015432:	31 d2                	xor    edx,edx
c0015434:	55                   	push   ebp
c0015435:	52                   	push   edx
c0015436:	50                   	push   eax
c0015437:	56                   	push   esi
c0015438:	e8 d1 2d ff ff       	call   c000820e <File::seek(unsigned long long)>
c001543d:	83 c4 10             	add    esp,0x10
c0015440:	85 c0                	test   eax,eax
c0015442:	0f 85 e6 00 00 00    	jne    c001552e <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0015448:	83 ec 0c             	sub    esp,0xc
c001544b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001544e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015452:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015456:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001545a:	0f af c2             	imul   eax,edx
c001545d:	50                   	push   eax
c001545e:	e8 f8 a7 ff ff       	call   c000fc5b <malloc>
c0015463:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0015465:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015469:	89 3c 24             	mov    DWORD PTR [esp],edi
c001546c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015470:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0015474:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0015478:	0f af c2             	imul   eax,edx
c001547b:	99                   	cdq    
c001547c:	52                   	push   edx
c001547d:	50                   	push   eax
c001547e:	56                   	push   esi
c001547f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015482:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0015485:	83 c4 20             	add    esp,0x20
c0015488:	85 c0                	test   eax,eax
c001548a:	0f 84 9e 00 00 00    	je     c001552e <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0015490:	31 d2                	xor    edx,edx
c0015492:	51                   	push   ecx
c0015493:	52                   	push   edx
c0015494:	50                   	push   eax
c0015495:	56                   	push   esi
c0015496:	e8 73 2d ff ff       	call   c000820e <File::seek(unsigned long long)>
c001549b:	83 c4 10             	add    esp,0x10
c001549e:	85 c0                	test   eax,eax
c00154a0:	0f 85 88 00 00 00    	jne    c001552e <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00154a6:	83 ec 0c             	sub    esp,0xc
c00154a9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00154ad:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00154b1:	31 ed                	xor    ebp,ebp
c00154b3:	0f af c2             	imul   eax,edx
c00154b6:	50                   	push   eax
c00154b7:	e8 9f a7 ff ff       	call   c000fc5b <malloc>
c00154bc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00154be:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00154c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c00154c5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00154c9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00154cd:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00154d1:	0f af c2             	imul   eax,edx
c00154d4:	99                   	cdq    
c00154d5:	52                   	push   edx
c00154d6:	50                   	push   eax
c00154d7:	56                   	push   esi
c00154d8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00154db:	83 c4 20             	add    esp,0x20
c00154de:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00154e6:	0f b7 fd             	movzx  edi,bp
c00154e9:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c00154ed:	73 7d                	jae    c001556c <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c00154ef:	c1 e7 05             	shl    edi,0x5
c00154f2:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c00154f6:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c00154f9:	75 6b                	jne    c0015566 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c00154fb:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00154fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015502:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0015505:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015509:	52                   	push   edx
c001550a:	31 d2                	xor    edx,edx
c001550c:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001550f:	52                   	push   edx
c0015510:	50                   	push   eax
c0015511:	56                   	push   esi
c0015512:	e8 f7 2c ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015517:	83 c4 10             	add    esp,0x10
c001551a:	85 c0                	test   eax,eax
c001551c:	74 17                	je     c0015535 <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c001551e:	83 ec 0c             	sub    esp,0xc
c0015521:	68 0b 48 02 c0       	push   0xc002480b
c0015526:	e8 39 1a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001552b:	83 c4 10             	add    esp,0x10
c001552e:	31 c0                	xor    eax,eax
c0015530:	e9 87 00 00 00       	jmp    c00155bc <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0015535:	83 ec 0c             	sub    esp,0xc
c0015538:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001553b:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001553e:	50                   	push   eax
c001553f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015543:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015547:	56                   	push   esi
c0015548:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001554c:	e8 cf fb ff ff       	call   c0015120 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0015551:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015555:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0015559:	83 c4 20             	add    esp,0x20
c001555c:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0015560:	73 04                	jae    c0015566 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0015562:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0015566:	45                   	inc    ebp
c0015567:	e9 7a ff ff ff       	jmp    c00154e6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001556c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0015570:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015574:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015578:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c001557e:	83 ec 0c             	sub    esp,0xc
c0015581:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0015587:	25 00 f0 ff ff       	and    eax,0xfffff000
c001558c:	05 00 10 00 00       	add    eax,0x1000
c0015591:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015594:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015598:	e8 ce a6 ff ff       	call   c000fc6b <free>
c001559d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00155a0:	e8 c6 a6 ff ff       	call   c000fc6b <free>
c00155a5:	58                   	pop    eax
c00155a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155aa:	e8 bc a6 ff ff       	call   c000fc6b <free>
c00155af:	89 34 24             	mov    DWORD PTR [esp],esi
c00155b2:	e8 f7 2b ff ff       	call   c00081ae <File::close()>
c00155b7:	83 c4 10             	add    esp,0x10
c00155ba:	b0 01                	mov    al,0x1
c00155bc:	83 c4 3c             	add    esp,0x3c
c00155bf:	5b                   	pop    ebx
c00155c0:	5e                   	pop    esi
c00155c1:	5f                   	pop    edi
c00155c2:	5d                   	pop    ebp
c00155c3:	c3                   	ret    

c00155c4 <Thr::runtimeReferenceHelper()>:
c00155c4:	83 ec 18             	sub    esp,0x18
c00155c7:	68 13 48 02 c0       	push   0xc0024813
c00155cc:	e8 93 19 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00155d1:	fa                   	cli    
c00155d2:	83 c4 10             	add    esp,0x10
c00155d5:	eb fe                	jmp    c00155d5 <Thr::runtimeReferenceHelper()+0x11>

c00155d7 <Thr::getAddressOfKernelSymbol(char const*)>:
c00155d7:	57                   	push   edi
c00155d8:	56                   	push   esi
c00155d9:	53                   	push   ebx
c00155da:	31 db                	xor    ebx,ebx
c00155dc:	39 1d 00 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea00,ebx
c00155e2:	7e 3c                	jle    c0015620 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c00155e4:	8b 34 9d 80 e9 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd1680]
c00155eb:	31 ff                	xor    edi,edi
c00155ed:	39 3c 9d 80 e8 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd1780],edi
c00155f4:	7e 27                	jle    c001561d <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c00155f6:	50                   	push   eax
c00155f7:	50                   	push   eax
c00155f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00155fc:	8b 06                	mov    eax,DWORD PTR [esi]
c00155fe:	03 04 9d 00 e9 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd1700]
c0015605:	50                   	push   eax
c0015606:	e8 45 b1 fe ff       	call   c0000750 <strcmp>
c001560b:	83 c4 10             	add    esp,0x10
c001560e:	85 c0                	test   eax,eax
c0015610:	75 05                	jne    c0015617 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0015612:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0015615:	eb 0b                	jmp    c0015622 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0015617:	83 c6 10             	add    esi,0x10
c001561a:	47                   	inc    edi
c001561b:	eb d0                	jmp    c00155ed <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001561d:	43                   	inc    ebx
c001561e:	eb bc                	jmp    c00155dc <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0015620:	31 c0                	xor    eax,eax
c0015622:	5b                   	pop    ebx
c0015623:	5e                   	pop    esi
c0015624:	5f                   	pop    edi
c0015625:	c3                   	ret    

c0015626 <Thr::loadKernelSymbolTable(char const*)>:
c0015626:	55                   	push   ebp
c0015627:	57                   	push   edi
c0015628:	56                   	push   esi
c0015629:	53                   	push   ebx
c001562a:	83 ec 68             	sub    esp,0x68
c001562d:	8b 35 58 ea 02 c0    	mov    esi,DWORD PTR ds:0xc002ea58
c0015633:	68 14 01 00 00       	push   0x114
c0015638:	e8 1e a6 ff ff       	call   c000fc5b <malloc>
c001563d:	83 c4 0c             	add    esp,0xc
c0015640:	89 c3                	mov    ebx,eax
c0015642:	56                   	push   esi
c0015643:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0015647:	50                   	push   eax
c0015648:	e8 e5 2a ff ff       	call   c0008132 <File::File(char const*, Process*)>
c001564d:	5e                   	pop    esi
c001564e:	5f                   	pop    edi
c001564f:	6a 01                	push   0x1
c0015651:	53                   	push   ebx
c0015652:	e8 f9 2a ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0015657:	83 c4 10             	add    esp,0x10
c001565a:	85 c0                	test   eax,eax
c001565c:	74 0a                	je     c0015668 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001565e:	83 ec 0c             	sub    esp,0xc
c0015661:	68 35 48 02 c0       	push   0xc0024835
c0015666:	eb 34                	jmp    c001569c <Thr::loadKernelSymbolTable(char const*)+0x76>
c0015668:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0015670:	83 ec 0c             	sub    esp,0xc
c0015673:	6a 34                	push   0x34
c0015675:	e8 e1 a5 ff ff       	call   c000fc5b <malloc>
c001567a:	59                   	pop    ecx
c001567b:	89 c7                	mov    edi,eax
c001567d:	8d 74 24 34          	lea    esi,[esp+0x34]
c0015681:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015683:	56                   	push   esi
c0015684:	57                   	push   edi
c0015685:	6a 00                	push   0x0
c0015687:	6a 34                	push   0x34
c0015689:	53                   	push   ebx
c001568a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001568d:	83 c4 20             	add    esp,0x20
c0015690:	85 c0                	test   eax,eax
c0015692:	74 17                	je     c00156ab <Thr::loadKernelSymbolTable(char const*)+0x85>
c0015694:	83 ec 0c             	sub    esp,0xc
c0015697:	68 4c 48 02 c0       	push   0xc002484c
c001569c:	e8 01 a9 ff ff       	call   c000ffa2 <KePanic(char const*)>
c00156a1:	83 c4 10             	add    esp,0x10
c00156a4:	31 c0                	xor    eax,eax
c00156a6:	e9 31 02 00 00       	jmp    c00158dc <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00156ab:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00156b1:	75 e1                	jne    c0015694 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00156b3:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00156b6:	85 c0                	test   eax,eax
c00156b8:	74 da                	je     c0015694 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00156ba:	52                   	push   edx
c00156bb:	31 d2                	xor    edx,edx
c00156bd:	52                   	push   edx
c00156be:	50                   	push   eax
c00156bf:	53                   	push   ebx
c00156c0:	e8 49 2b ff ff       	call   c000820e <File::seek(unsigned long long)>
c00156c5:	83 c4 10             	add    esp,0x10
c00156c8:	85 c0                	test   eax,eax
c00156ca:	75 c8                	jne    c0015694 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00156cc:	83 ec 0c             	sub    esp,0xc
c00156cf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00156d3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00156d7:	31 ed                	xor    ebp,ebp
c00156d9:	0f af c2             	imul   eax,edx
c00156dc:	50                   	push   eax
c00156dd:	e8 79 a5 ff ff       	call   c000fc5b <malloc>
c00156e2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00156e4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00156e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00156eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00156ef:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00156f3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00156f7:	0f af c2             	imul   eax,edx
c00156fa:	99                   	cdq    
c00156fb:	52                   	push   edx
c00156fc:	50                   	push   eax
c00156fd:	53                   	push   ebx
c00156fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015701:	83 c4 20             	add    esp,0x20
c0015704:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001570c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0015714:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001571c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0015724:	0f b7 f5             	movzx  esi,bp
c0015727:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c001572b:	0f 83 a7 00 00 00    	jae    c00157d8 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0015731:	6b f6 28             	imul   esi,esi,0x28
c0015734:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015738:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001573b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001573f:	50                   	push   eax
c0015740:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015744:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0015748:	8b 16                	mov    edx,DWORD PTR [esi]
c001574a:	6b c0 28             	imul   eax,eax,0x28
c001574d:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0015751:	89 d0                	mov    eax,edx
c0015753:	31 d2                	xor    edx,edx
c0015755:	52                   	push   edx
c0015756:	50                   	push   eax
c0015757:	53                   	push   ebx
c0015758:	e8 b1 2a ff ff       	call   c000820e <File::seek(unsigned long long)>
c001575d:	83 c4 0c             	add    esp,0xc
c0015760:	6a 20                	push   0x20
c0015762:	6a 00                	push   0x0
c0015764:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0015768:	52                   	push   edx
c0015769:	e8 82 ad fe ff       	call   c00004f0 <memset>
c001576e:	58                   	pop    eax
c001576f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015771:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0015775:	51                   	push   ecx
c0015776:	8d 54 24 40          	lea    edx,[esp+0x40]
c001577a:	52                   	push   edx
c001577b:	6a 00                	push   0x0
c001577d:	6a 1f                	push   0x1f
c001577f:	53                   	push   ebx
c0015780:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015783:	83 c4 18             	add    esp,0x18
c0015786:	68 63 48 02 c0       	push   0xc0024863
c001578b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001578f:	52                   	push   edx
c0015790:	e8 bb af fe ff       	call   c0000750 <strcmp>
c0015795:	83 c4 10             	add    esp,0x10
c0015798:	85 c0                	test   eax,eax
c001579a:	75 0f                	jne    c00157ab <Thr::loadKernelSymbolTable(char const*)+0x185>
c001579c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001579f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00157a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00157a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00157ab:	50                   	push   eax
c00157ac:	50                   	push   eax
c00157ad:	68 6b 48 02 c0       	push   0xc002486b
c00157b2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00157b6:	50                   	push   eax
c00157b7:	e8 94 af fe ff       	call   c0000750 <strcmp>
c00157bc:	83 c4 10             	add    esp,0x10
c00157bf:	85 c0                	test   eax,eax
c00157c1:	75 0f                	jne    c00157d2 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00157c3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00157c6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00157ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00157ce:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00157d2:	45                   	inc    ebp
c00157d3:	e9 4c ff ff ff       	jmp    c0015724 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00157d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00157dd:	75 10                	jne    c00157ef <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00157df:	83 ec 0c             	sub    esp,0xc
c00157e2:	68 73 48 02 c0       	push   0xc0024873
c00157e7:	e8 b6 a7 ff ff       	call   c000ffa2 <KePanic(char const*)>
c00157ec:	83 c4 10             	add    esp,0x10
c00157ef:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00157f4:	75 10                	jne    c0015806 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00157f6:	83 ec 0c             	sub    esp,0xc
c00157f9:	68 73 48 02 c0       	push   0xc0024873
c00157fe:	e8 9f a7 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0015803:	83 c4 10             	add    esp,0x10
c0015806:	31 d2                	xor    edx,edx
c0015808:	50                   	push   eax
c0015809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001580d:	52                   	push   edx
c001580e:	50                   	push   eax
c001580f:	53                   	push   ebx
c0015810:	e8 f9 29 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015815:	5a                   	pop    edx
c0015816:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001581a:	e8 3c a4 ff ff       	call   c000fc5b <malloc>
c001581f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015823:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015827:	31 c9                	xor    ecx,ecx
c0015829:	5e                   	pop    esi
c001582a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001582c:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0015830:	55                   	push   ebp
c0015831:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015835:	51                   	push   ecx
c0015836:	52                   	push   edx
c0015837:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001583b:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001583f:	53                   	push   ebx
c0015840:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015843:	83 c4 14             	add    esp,0x14
c0015846:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001584a:	e8 0c a4 ff ff       	call   c000fc5b <malloc>
c001584f:	89 c6                	mov    esi,eax
c0015851:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015853:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015856:	56                   	push   esi
c0015857:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001585b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001585f:	51                   	push   ecx
c0015860:	52                   	push   edx
c0015861:	53                   	push   ebx
c0015862:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015865:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015869:	8b 15 00 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea00
c001586f:	83 c4 1c             	add    esp,0x1c
c0015872:	c1 e8 04             	shr    eax,0x4
c0015875:	89 04 95 80 e8 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1780],eax
c001587c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015880:	31 d2                	xor    edx,edx
c0015882:	52                   	push   edx
c0015883:	50                   	push   eax
c0015884:	53                   	push   ebx
c0015885:	e8 84 29 ff ff       	call   c000820e <File::seek(unsigned long long)>
c001588a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001588c:	31 d2                	xor    edx,edx
c001588e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015891:	56                   	push   esi
c0015892:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015896:	52                   	push   edx
c0015897:	50                   	push   eax
c0015898:	53                   	push   ebx
c0015899:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001589c:	83 c4 14             	add    esp,0x14
c001589f:	53                   	push   ebx
c00158a0:	e8 09 29 ff ff       	call   c00081ae <File::close()>
c00158a5:	5d                   	pop    ebp
c00158a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00158aa:	e8 bc a3 ff ff       	call   c000fc6b <free>
c00158af:	89 3c 24             	mov    DWORD PTR [esp],edi
c00158b2:	e8 b4 a3 ff ff       	call   c000fc6b <free>
c00158b7:	a1 00 ea 02 c0       	mov    eax,ds:0xc002ea00
c00158bc:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00158c0:	8d 50 01             	lea    edx,[eax+0x1]
c00158c3:	89 0c 85 80 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1680],ecx
c00158ca:	89 34 85 00 e9 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1700],esi
c00158d1:	89 15 00 ea 02 c0    	mov    DWORD PTR ds:0xc002ea00,edx
c00158d7:	83 c4 10             	add    esp,0x10
c00158da:	b0 01                	mov    al,0x1
c00158dc:	83 c4 5c             	add    esp,0x5c
c00158df:	5b                   	pop    ebx
c00158e0:	5e                   	pop    esi
c00158e1:	5f                   	pop    edi
c00158e2:	5d                   	pop    ebp
c00158e3:	c3                   	ret    

c00158e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00158e4:	55                   	push   ebp
c00158e5:	57                   	push   edi
c00158e6:	56                   	push   esi
c00158e7:	53                   	push   ebx
c00158e8:	81 ec 68 03 00 00    	sub    esp,0x368
c00158ee:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00158f5:	8b 1d 58 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea58
c00158fb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00158ff:	68 14 01 00 00       	push   0x114
c0015904:	e8 52 a3 ff ff       	call   c000fc5b <malloc>
c0015909:	83 c4 0c             	add    esp,0xc
c001590c:	89 c5                	mov    ebp,eax
c001590e:	53                   	push   ebx
c001590f:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0015916:	50                   	push   eax
c0015917:	e8 16 28 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c001591c:	5e                   	pop    esi
c001591d:	5f                   	pop    edi
c001591e:	6a 01                	push   0x1
c0015920:	55                   	push   ebp
c0015921:	e8 2a 28 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0015926:	83 c4 10             	add    esp,0x10
c0015929:	85 c0                	test   eax,eax
c001592b:	0f 85 aa 06 00 00    	jne    c0015fdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015931:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0015939:	83 ec 0c             	sub    esp,0xc
c001593c:	6a 34                	push   0x34
c001593e:	e8 18 a3 ff ff       	call   c000fc5b <malloc>
c0015943:	5b                   	pop    ebx
c0015944:	89 c7                	mov    edi,eax
c0015946:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001594a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001594d:	53                   	push   ebx
c001594e:	57                   	push   edi
c001594f:	6a 00                	push   0x0
c0015951:	6a 34                	push   0x34
c0015953:	55                   	push   ebp
c0015954:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015957:	83 c4 20             	add    esp,0x20
c001595a:	85 c0                	test   eax,eax
c001595c:	0f 85 79 06 00 00    	jne    c0015fdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015962:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0015968:	0f 85 6d 06 00 00    	jne    c0015fdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001596e:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015971:	85 c0                	test   eax,eax
c0015973:	0f 84 62 06 00 00    	je     c0015fdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015979:	31 d2                	xor    edx,edx
c001597b:	51                   	push   ecx
c001597c:	52                   	push   edx
c001597d:	50                   	push   eax
c001597e:	55                   	push   ebp
c001597f:	e8 8a 28 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015984:	83 c4 10             	add    esp,0x10
c0015987:	85 c0                	test   eax,eax
c0015989:	0f 85 4c 06 00 00    	jne    c0015fdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001598f:	83 ec 0c             	sub    esp,0xc
c0015992:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0015995:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015999:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001599d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00159a1:	0f af c2             	imul   eax,edx
c00159a4:	50                   	push   eax
c00159a5:	e8 b1 a2 ff ff       	call   c000fc5b <malloc>
c00159aa:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00159ad:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00159b1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00159b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159b8:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00159bc:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00159c0:	0f af c2             	imul   eax,edx
c00159c3:	99                   	cdq    
c00159c4:	52                   	push   edx
c00159c5:	50                   	push   eax
c00159c6:	55                   	push   ebp
c00159c7:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00159ca:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00159cd:	83 c4 20             	add    esp,0x20
c00159d0:	85 c0                	test   eax,eax
c00159d2:	0f 84 03 06 00 00    	je     c0015fdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00159d8:	52                   	push   edx
c00159d9:	31 d2                	xor    edx,edx
c00159db:	52                   	push   edx
c00159dc:	50                   	push   eax
c00159dd:	55                   	push   ebp
c00159de:	e8 2b 28 ff ff       	call   c000820e <File::seek(unsigned long long)>
c00159e3:	83 c4 10             	add    esp,0x10
c00159e6:	85 c0                	test   eax,eax
c00159e8:	0f 85 ed 05 00 00    	jne    c0015fdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00159ee:	83 ec 0c             	sub    esp,0xc
c00159f1:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00159f5:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00159f9:	31 f6                	xor    esi,esi
c00159fb:	0f af c2             	imul   eax,edx
c00159fe:	50                   	push   eax
c00159ff:	e8 57 a2 ff ff       	call   c000fc5b <malloc>
c0015a04:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015a07:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015a0b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015a0e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015a12:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0015a16:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0015a1a:	0f af c2             	imul   eax,edx
c0015a1d:	99                   	cdq    
c0015a1e:	52                   	push   edx
c0015a1f:	50                   	push   eax
c0015a20:	55                   	push   ebp
c0015a21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a24:	83 c4 20             	add    esp,0x20
c0015a27:	0f b7 de             	movzx  ebx,si
c0015a2a:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0015a2e:	0f 83 87 00 00 00    	jae    c0015abb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0015a34:	c1 e3 05             	shl    ebx,0x5
c0015a37:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0015a3b:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015a3e:	75 75                	jne    c0015ab5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0015a40:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015a43:	31 d2                	xor    edx,edx
c0015a45:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a49:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015a4c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015a50:	50                   	push   eax
c0015a51:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015a54:	52                   	push   edx
c0015a55:	50                   	push   eax
c0015a56:	55                   	push   ebp
c0015a57:	e8 b2 27 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015a5c:	83 c4 10             	add    esp,0x10
c0015a5f:	85 c0                	test   eax,eax
c0015a61:	0f 85 74 05 00 00    	jne    c0015fdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015a67:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015a6e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015a71:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0015a75:	31 d2                	xor    edx,edx
c0015a77:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015a7b:	83 ec 0c             	sub    esp,0xc
c0015a7e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015a82:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015a89:	50                   	push   eax
c0015a8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015a8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015a92:	52                   	push   edx
c0015a93:	50                   	push   eax
c0015a94:	55                   	push   ebp
c0015a95:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015a98:	83 c4 1c             	add    esp,0x1c
c0015a9b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015a9e:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015aa1:	50                   	push   eax
c0015aa2:	6a 00                	push   0x0
c0015aa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015aa8:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015aac:	50                   	push   eax
c0015aad:	e8 3e aa fe ff       	call   c00004f0 <memset>
c0015ab2:	83 c4 10             	add    esp,0x10
c0015ab5:	46                   	inc    esi
c0015ab6:	e9 6c ff ff ff       	jmp    c0015a27 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015abb:	53                   	push   ebx
c0015abc:	31 db                	xor    ebx,ebx
c0015abe:	68 00 01 00 00       	push   0x100
c0015ac3:	6a 00                	push   0x0
c0015ac5:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0015ac9:	50                   	push   eax
c0015aca:	e8 21 aa fe ff       	call   c00004f0 <memset>
c0015acf:	83 c4 0c             	add    esp,0xc
c0015ad2:	68 00 01 00 00       	push   0x100
c0015ad7:	6a 00                	push   0x0
c0015ad9:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0015ae0:	50                   	push   eax
c0015ae1:	e8 0a aa fe ff       	call   c00004f0 <memset>
c0015ae6:	83 c4 10             	add    esp,0x10
c0015ae9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0015af1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0015af9:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015b01:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015b09:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0015b11:	0f b7 f3             	movzx  esi,bx
c0015b14:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0015b18:	0f 83 2d 01 00 00    	jae    c0015c4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0015b1e:	6b f6 28             	imul   esi,esi,0x28
c0015b21:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0015b25:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0015b28:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015b2c:	52                   	push   edx
c0015b2d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015b31:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0015b35:	8b 06                	mov    eax,DWORD PTR [esi]
c0015b37:	6b d2 28             	imul   edx,edx,0x28
c0015b3a:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015b3e:	31 d2                	xor    edx,edx
c0015b40:	52                   	push   edx
c0015b41:	50                   	push   eax
c0015b42:	55                   	push   ebp
c0015b43:	e8 c6 26 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015b48:	83 c4 0c             	add    esp,0xc
c0015b4b:	6a 20                	push   0x20
c0015b4d:	6a 00                	push   0x0
c0015b4f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015b56:	51                   	push   ecx
c0015b57:	e8 94 a9 fe ff       	call   c00004f0 <memset>
c0015b5c:	59                   	pop    ecx
c0015b5d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015b60:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015b64:	52                   	push   edx
c0015b65:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015b6c:	51                   	push   ecx
c0015b6d:	6a 00                	push   0x0
c0015b6f:	6a 1f                	push   0x1f
c0015b71:	55                   	push   ebp
c0015b72:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0015b75:	83 c4 1c             	add    esp,0x1c
c0015b78:	6a 09                	push   0x9
c0015b7a:	68 8d 48 02 c0       	push   0xc002488d
c0015b7f:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0015b86:	51                   	push   ecx
c0015b87:	e8 f4 a7 fe ff       	call   c0000380 <memcmp>
c0015b8c:	83 c4 10             	add    esp,0x10
c0015b8f:	85 c0                	test   eax,eax
c0015b91:	75 21                	jne    c0015bb4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015b93:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015b97:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015b9b:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015b9f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015ba3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015ba6:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015bad:	89 d0                	mov    eax,edx
c0015baf:	40                   	inc    eax
c0015bb0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bb4:	50                   	push   eax
c0015bb5:	6a 09                	push   0x9
c0015bb7:	68 97 48 02 c0       	push   0xc0024897
c0015bbc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015bc3:	50                   	push   eax
c0015bc4:	e8 b7 a7 fe ff       	call   c0000380 <memcmp>
c0015bc9:	83 c4 10             	add    esp,0x10
c0015bcc:	85 c0                	test   eax,eax
c0015bce:	75 21                	jne    c0015bf1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015bd4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015bd8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015bdc:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0015be0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015be3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015bea:	89 d0                	mov    eax,edx
c0015bec:	40                   	inc    eax
c0015bed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015bf1:	50                   	push   eax
c0015bf2:	50                   	push   eax
c0015bf3:	68 63 48 02 c0       	push   0xc0024863
c0015bf8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015bff:	50                   	push   eax
c0015c00:	e8 4b ab fe ff       	call   c0000750 <strcmp>
c0015c05:	83 c4 10             	add    esp,0x10
c0015c08:	85 c0                	test   eax,eax
c0015c0a:	75 0f                	jne    c0015c1b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0015c0c:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015c0f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0015c13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c17:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015c1b:	50                   	push   eax
c0015c1c:	50                   	push   eax
c0015c1d:	68 6b 48 02 c0       	push   0xc002486b
c0015c22:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015c29:	50                   	push   eax
c0015c2a:	e8 21 ab fe ff       	call   c0000750 <strcmp>
c0015c2f:	83 c4 10             	add    esp,0x10
c0015c32:	85 c0                	test   eax,eax
c0015c34:	75 0f                	jne    c0015c45 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0015c36:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0015c39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015c3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015c41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015c45:	43                   	inc    ebx
c0015c46:	e9 c6 fe ff ff       	jmp    c0015b11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015c4b:	31 d2                	xor    edx,edx
c0015c4d:	50                   	push   eax
c0015c4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c52:	52                   	push   edx
c0015c53:	50                   	push   eax
c0015c54:	55                   	push   ebp
c0015c55:	e8 b4 25 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015c5a:	58                   	pop    eax
c0015c5b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015c5f:	e8 f7 9f ff ff       	call   c000fc5b <malloc>
c0015c64:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015c67:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015c6b:	31 d2                	xor    edx,edx
c0015c6d:	58                   	pop    eax
c0015c6e:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015c72:	53                   	push   ebx
c0015c73:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0015c77:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015c7b:	52                   	push   edx
c0015c7c:	50                   	push   eax
c0015c7d:	55                   	push   ebp
c0015c7e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015c81:	83 c4 14             	add    esp,0x14
c0015c84:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015c88:	e8 ce 9f ff ff       	call   c000fc5b <malloc>
c0015c8d:	31 d2                	xor    edx,edx
c0015c8f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015c93:	83 c4 0c             	add    esp,0xc
c0015c96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015c9a:	52                   	push   edx
c0015c9b:	50                   	push   eax
c0015c9c:	55                   	push   ebp
c0015c9d:	e8 6c 25 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015ca2:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015ca5:	31 d2                	xor    edx,edx
c0015ca7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015caa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015cae:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015cb2:	52                   	push   edx
c0015cb3:	50                   	push   eax
c0015cb4:	55                   	push   ebp
c0015cb5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015cb8:	83 c4 20             	add    esp,0x20
c0015cbb:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0015cc0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0015cc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015ccc:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015cd0:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015cd4:	0f 84 05 03 00 00    	je     c0015fdf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0015cda:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0015ce1:	31 d2                	xor    edx,edx
c0015ce3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015ce7:	c1 e8 03             	shr    eax,0x3
c0015cea:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0015cee:	51                   	push   ecx
c0015cef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015cf3:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0015cf7:	52                   	push   edx
c0015cf8:	50                   	push   eax
c0015cf9:	55                   	push   ebp
c0015cfa:	e8 0f 25 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015cff:	5b                   	pop    ebx
c0015d00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d04:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0015d0b:	e8 4b 9f ff ff       	call   c000fc5b <malloc>
c0015d10:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015d13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015d17:	31 d2                	xor    edx,edx
c0015d19:	5e                   	pop    esi
c0015d1a:	8d 44 24 58          	lea    eax,[esp+0x58]
c0015d1e:	50                   	push   eax
c0015d1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015d23:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015d27:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0015d2e:	52                   	push   edx
c0015d2f:	50                   	push   eax
c0015d30:	55                   	push   ebp
c0015d31:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015d34:	83 c4 20             	add    esp,0x20
c0015d37:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015d3f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015d43:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0015d47:	0f 8d 76 02 00 00    	jge    c0015fc3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0015d4d:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015d51:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d55:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0015d5a:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0015d5d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015d61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015d65:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0015d69:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015d6d:	c1 e8 08             	shr    eax,0x8
c0015d70:	89 c6                	mov    esi,eax
c0015d72:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015d76:	c1 e6 04             	shl    esi,0x4
c0015d79:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015d7d:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0015d80:	85 db                	test   ebx,ebx
c0015d82:	0f 85 b3 00 00 00    	jne    c0015e3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015d88:	83 ec 0c             	sub    esp,0xc
c0015d8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015d8f:	03 06                	add    eax,DWORD PTR [esi]
c0015d91:	50                   	push   eax
c0015d92:	e8 40 f8 ff ff       	call   c00155d7 <Thr::getAddressOfKernelSymbol(char const*)>
c0015d97:	83 c4 10             	add    esp,0x10
c0015d9a:	89 c3                	mov    ebx,eax
c0015d9c:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0015da1:	85 c0                	test   eax,eax
c0015da3:	0f 85 92 00 00 00    	jne    c0015e3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015da9:	83 ec 0c             	sub    esp,0xc
c0015dac:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015db0:	03 06                	add    eax,DWORD PTR [esi]
c0015db2:	50                   	push   eax
c0015db3:	e8 7c ac ff ff       	call   c0010a34 <KeResolveCompatibilitySymbol(char*)>
c0015db8:	83 c4 10             	add    esp,0x10
c0015dbb:	89 c3                	mov    ebx,eax
c0015dbd:	85 c0                	test   eax,eax
c0015dbf:	75 7a                	jne    c0015e3b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015dc1:	51                   	push   ecx
c0015dc2:	51                   	push   ecx
c0015dc3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015dc7:	03 06                	add    eax,DWORD PTR [esi]
c0015dc9:	50                   	push   eax
c0015dca:	68 a1 48 02 c0       	push   0xc00248a1
c0015dcf:	e8 90 11 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015dd4:	58                   	pop    eax
c0015dd5:	5a                   	pop    edx
c0015dd6:	68 bb 48 02 c0       	push   0xc00248bb
c0015ddb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015de2:	50                   	push   eax
c0015de3:	e8 58 a8 fe ff       	call   c0000640 <strcpy>
c0015de8:	59                   	pop    ecx
c0015de9:	58                   	pop    eax
c0015dea:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015dee:	03 06                	add    eax,DWORD PTR [esi]
c0015df0:	50                   	push   eax
c0015df1:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015df8:	50                   	push   eax
c0015df9:	e8 42 aa fe ff       	call   c0000840 <strcat>
c0015dfe:	58                   	pop    eax
c0015dff:	5a                   	pop    edx
c0015e00:	68 55 49 02 c0       	push   0xc0024955
c0015e05:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015e0c:	50                   	push   eax
c0015e0d:	e8 2e aa fe ff       	call   c0000840 <strcat>
c0015e12:	83 c4 10             	add    esp,0x10
c0015e15:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015e1a:	0f 84 5d 01 00 00    	je     c0015f7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015e20:	83 ec 0c             	sub    esp,0xc
c0015e23:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015e2a:	50                   	push   eax
c0015e2b:	e8 72 a1 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0015e30:	83 c4 10             	add    esp,0x10
c0015e33:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0015e37:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0015e3b:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0015e40:	83 f8 01             	cmp    eax,0x1
c0015e43:	0f 85 8f 00 00 00    	jne    c0015ed8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0015e49:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015e50:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0015e54:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0015e58:	01 ce                	add    esi,ecx
c0015e5a:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015e62:	0f 94 c0             	sete   al
c0015e65:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015e6d:	0f 94 c2             	sete   dl
c0015e70:	09 c2                	or     edx,eax
c0015e72:	8b 06                	mov    eax,DWORD PTR [esi]
c0015e74:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015e79:	0f b6 d2             	movzx  edx,dl
c0015e7c:	74 41                	je     c0015ebf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0015e7e:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015e81:	85 d2                	test   edx,edx
c0015e83:	75 15                	jne    c0015e9a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0015e85:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015e89:	66 83 f8 0c          	cmp    ax,0xc
c0015e8d:	76 05                	jbe    c0015e94 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0015e8f:	b8 0c 00 00 00       	mov    eax,0xc
c0015e94:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015e98:	76 37                	jbe    c0015ed1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015e9a:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015e9e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015ea3:	0f 84 d4 00 00 00    	je     c0015f7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015ea9:	83 ec 0c             	sub    esp,0xc
c0015eac:	68 d2 48 02 c0       	push   0xc00248d2
c0015eb1:	e8 ec a0 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0015eb6:	83 c4 10             	add    esp,0x10
c0015eb9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015ebd:	eb 12                	jmp    c0015ed1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015ebf:	01 c1                	add    ecx,eax
c0015ec1:	85 d2                	test   edx,edx
c0015ec3:	75 0c                	jne    c0015ed1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015ec5:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015ec9:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015ecd:	77 02                	ja     c0015ed1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015ecf:	01 d9                	add    ecx,ebx
c0015ed1:	89 0e                	mov    DWORD PTR [esi],ecx
c0015ed3:	e9 e2 00 00 00       	jmp    c0015fba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015ed8:	83 f8 02             	cmp    eax,0x2
c0015edb:	75 77                	jne    c0015f54 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0015edd:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0015ee4:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0015ee8:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0015eec:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015ef4:	74 21                	je     c0015f17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015ef6:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015efe:	74 17                	je     c0015f17 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0015f00:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0015f04:	b8 0a 00 00 00       	mov    eax,0xa
c0015f09:	83 fa 0e             	cmp    edx,0xe
c0015f0c:	77 03                	ja     c0015f11 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0015f0e:	8d 42 fc             	lea    eax,[edx-0x4]
c0015f11:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015f15:	76 17                	jbe    c0015f2e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0015f17:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015f1c:	74 5f                	je     c0015f7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015f1e:	83 ec 0c             	sub    esp,0xc
c0015f21:	68 ee 48 02 c0       	push   0xc00248ee
c0015f26:	e8 77 a0 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0015f2b:	83 c4 10             	add    esp,0x10
c0015f2e:	8b 06                	mov    eax,DWORD PTR [esi]
c0015f30:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0015f35:	74 13                	je     c0015f4a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0015f37:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015f3b:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0015f42:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0015f46:	01 d0                	add    eax,edx
c0015f48:	eb 04                	jmp    c0015f4e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0015f4a:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015f4e:	01 c3                	add    ebx,eax
c0015f50:	89 1e                	mov    DWORD PTR [esi],ebx
c0015f52:	eb 66                	jmp    c0015fba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015f54:	52                   	push   edx
c0015f55:	52                   	push   edx
c0015f56:	50                   	push   eax
c0015f57:	68 0a 49 02 c0       	push   0xc002490a
c0015f5c:	e8 03 10 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015f61:	83 c4 10             	add    esp,0x10
c0015f64:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015f69:	74 12                	je     c0015f7d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015f6b:	83 ec 0c             	sub    esp,0xc
c0015f6e:	68 15 49 02 c0       	push   0xc0024915
c0015f73:	e8 2a a0 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0015f78:	83 c4 10             	add    esp,0x10
c0015f7b:	eb 3d                	jmp    c0015fba <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015f7d:	83 ec 0c             	sub    esp,0xc
c0015f80:	55                   	push   ebp
c0015f81:	e8 28 22 ff ff       	call   c00081ae <File::close()>
c0015f86:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015f89:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015f8c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015f8f:	59                   	pop    ecx
c0015f90:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015f94:	e8 d2 9c ff ff       	call   c000fc6b <free>
c0015f99:	5b                   	pop    ebx
c0015f9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015f9e:	e8 c8 9c ff ff       	call   c000fc6b <free>
c0015fa3:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015fa6:	e8 c0 9c ff ff       	call   c000fc6b <free>
c0015fab:	5e                   	pop    esi
c0015fac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fb0:	e8 b6 9c ff ff       	call   c000fc6b <free>
c0015fb5:	83 c4 10             	add    esp,0x10
c0015fb8:	eb 21                	jmp    c0015fdb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015fba:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015fbe:	e9 7c fd ff ff       	jmp    c0015d3f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015fc3:	83 ec 0c             	sub    esp,0xc
c0015fc6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015fca:	e8 9c 9c ff ff       	call   c000fc6b <free>
c0015fcf:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015fd3:	83 c4 10             	add    esp,0x10
c0015fd6:	e9 f1 fc ff ff       	jmp    c0015ccc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0015fdb:	31 c0                	xor    eax,eax
c0015fdd:	eb 33                	jmp    c0016012 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0015fdf:	83 ec 0c             	sub    esp,0xc
c0015fe2:	55                   	push   ebp
c0015fe3:	e8 c6 21 ff ff       	call   c00081ae <File::close()>
c0015fe8:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015feb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015fee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015ff1:	58                   	pop    eax
c0015ff2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015ff6:	e8 70 9c ff ff       	call   c000fc6b <free>
c0015ffb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015ffe:	e8 68 9c ff ff       	call   c000fc6b <free>
c0016003:	5a                   	pop    edx
c0016004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016008:	e8 5e 9c ff ff       	call   c000fc6b <free>
c001600d:	83 c4 10             	add    esp,0x10
c0016010:	b0 01                	mov    al,0x1
c0016012:	81 c4 5c 03 00 00    	add    esp,0x35c
c0016018:	5b                   	pop    ebx
c0016019:	5e                   	pop    esi
c001601a:	5f                   	pop    edi
c001601b:	5d                   	pop    ebp
c001601c:	c3                   	ret    

c001601d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001601d:	56                   	push   esi
c001601e:	31 d2                	xor    edx,edx
c0016020:	53                   	push   ebx
c0016021:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c0016027:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001602b:	39 d3                	cmp    ebx,edx
c001602d:	7e 1b                	jle    c001604a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001602f:	8b 04 95 80 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b80]
c0016036:	39 c8                	cmp    eax,ecx
c0016038:	77 0d                	ja     c0016047 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001603a:	8b 34 95 80 e2 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd1d80]
c0016041:	01 c6                	add    esi,eax
c0016043:	39 ce                	cmp    esi,ecx
c0016045:	77 05                	ja     c001604c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0016047:	42                   	inc    edx
c0016048:	eb e1                	jmp    c001602b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001604a:	31 c0                	xor    eax,eax
c001604c:	5b                   	pop    ebx
c001604d:	5e                   	pop    esi
c001604e:	c3                   	ret    

c001604f <Thr::getDriverNameFromAddress(unsigned long)>:
c001604f:	53                   	push   ebx
c0016050:	31 c0                	xor    eax,eax
c0016052:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0016056:	8b 1d 60 e2 02 c0    	mov    ebx,DWORD PTR ds:0xc002e260
c001605c:	39 c3                	cmp    ebx,eax
c001605e:	7e 22                	jle    c0016082 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0016060:	8b 14 85 80 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b80]
c0016067:	39 ca                	cmp    edx,ecx
c0016069:	77 14                	ja     c001607f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001606b:	03 14 85 80 e2 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd1d80]
c0016072:	39 ca                	cmp    edx,ecx
c0016074:	76 09                	jbe    c001607f <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0016076:	8b 04 85 80 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1980]
c001607d:	eb 05                	jmp    c0016084 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001607f:	40                   	inc    eax
c0016080:	eb da                	jmp    c001605c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0016082:	31 c0                	xor    eax,eax
c0016084:	5b                   	pop    ebx
c0016085:	c3                   	ret    

c0016086 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0016086:	53                   	push   ebx
c0016087:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001608b:	53                   	push   ebx
c001608c:	e8 8c ff ff ff       	call   c001601d <Thr::getDriverBaseFromAddress(unsigned long)>
c0016091:	5a                   	pop    edx
c0016092:	31 d2                	xor    edx,edx
c0016094:	85 c0                	test   eax,eax
c0016096:	74 04                	je     c001609c <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0016098:	89 da                	mov    edx,ebx
c001609a:	29 c2                	sub    edx,eax
c001609c:	89 d0                	mov    eax,edx
c001609e:	5b                   	pop    ebx
c001609f:	c3                   	ret    

c00160a0 <Thr::loadDLL(char const*, bool)>:
c00160a0:	55                   	push   ebp
c00160a1:	57                   	push   edi
c00160a2:	56                   	push   esi
c00160a3:	53                   	push   ebx
c00160a4:	81 ec 34 01 00 00    	sub    esp,0x134
c00160aa:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00160b1:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00160b8:	56                   	push   esi
c00160b9:	68 2d 49 02 c0       	push   0xc002492d
c00160be:	e8 a1 0e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00160c3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00160ca:	e8 8c 9b ff ff       	call   c000fc5b <malloc>
c00160cf:	83 c4 0c             	add    esp,0xc
c00160d2:	89 c3                	mov    ebx,eax
c00160d4:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c00160da:	56                   	push   esi
c00160db:	50                   	push   eax
c00160dc:	e8 51 20 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00160e1:	83 c4 10             	add    esp,0x10
c00160e4:	85 db                	test   ebx,ebx
c00160e6:	75 3c                	jne    c0016124 <Thr::loadDLL(char const*, bool)+0x84>
c00160e8:	89 f8                	mov    eax,edi
c00160ea:	84 c0                	test   al,al
c00160ec:	0f 84 f3 01 00 00    	je     c00162e5 <Thr::loadDLL(char const*, bool)+0x245>
c00160f2:	55                   	push   ebp
c00160f3:	55                   	push   ebp
c00160f4:	68 3e 49 02 c0       	push   0xc002493e
c00160f9:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00160fd:	55                   	push   ebp
c00160fe:	e8 3d a5 fe ff       	call   c0000640 <strcpy>
c0016103:	58                   	pop    eax
c0016104:	5a                   	pop    edx
c0016105:	56                   	push   esi
c0016106:	55                   	push   ebp
c0016107:	e8 34 a7 fe ff       	call   c0000840 <strcat>
c001610c:	59                   	pop    ecx
c001610d:	58                   	pop    eax
c001610e:	68 55 49 02 c0       	push   0xc0024955
c0016113:	55                   	push   ebp
c0016114:	e8 27 a7 fe ff       	call   c0000840 <strcat>
c0016119:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001611c:	e8 81 9e ff ff       	call   c000ffa2 <KePanic(char const*)>
c0016121:	83 c4 10             	add    esp,0x10
c0016124:	51                   	push   ecx
c0016125:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0016129:	50                   	push   eax
c001612a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001612e:	50                   	push   eax
c001612f:	53                   	push   ebx
c0016130:	e8 1d 23 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0016135:	83 c4 10             	add    esp,0x10
c0016138:	89 c5                	mov    ebp,eax
c001613a:	85 db                	test   ebx,ebx
c001613c:	74 0c                	je     c001614a <Thr::loadDLL(char const*, bool)+0xaa>
c001613e:	83 ec 0c             	sub    esp,0xc
c0016141:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016143:	53                   	push   ebx
c0016144:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016147:	83 c4 10             	add    esp,0x10
c001614a:	83 ec 0c             	sub    esp,0xc
c001614d:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0016152:	50                   	push   eax
c0016153:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016157:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001615b:	55                   	push   ebp
c001615c:	68 57 49 02 c0       	push   0xc0024957
c0016161:	e8 fe 0d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016166:	83 c4 20             	add    esp,0x20
c0016169:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001616e:	75 0a                	jne    c001617a <Thr::loadDLL(char const*, bool)+0xda>
c0016170:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016174:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0016178:	75 3c                	jne    c00161b6 <Thr::loadDLL(char const*, bool)+0x116>
c001617a:	89 f8                	mov    eax,edi
c001617c:	84 c0                	test   al,al
c001617e:	0f 84 49 01 00 00    	je     c00162cd <Thr::loadDLL(char const*, bool)+0x22d>
c0016184:	51                   	push   ecx
c0016185:	51                   	push   ecx
c0016186:	68 78 49 02 c0       	push   0xc0024978
c001618b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001618f:	53                   	push   ebx
c0016190:	e8 ab a4 fe ff       	call   c0000640 <strcpy>
c0016195:	5d                   	pop    ebp
c0016196:	58                   	pop    eax
c0016197:	56                   	push   esi
c0016198:	53                   	push   ebx
c0016199:	e8 a2 a6 fe ff       	call   c0000840 <strcat>
c001619e:	58                   	pop    eax
c001619f:	5a                   	pop    edx
c00161a0:	68 55 49 02 c0       	push   0xc0024955
c00161a5:	53                   	push   ebx
c00161a6:	e8 95 a6 fe ff       	call   c0000840 <strcat>
c00161ab:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00161ae:	e8 ef 9d ff ff       	call   c000ffa2 <KePanic(char const*)>
c00161b3:	83 c4 10             	add    esp,0x10
c00161b6:	52                   	push   edx
c00161b7:	6a 03                	push   0x3
c00161b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161bd:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00161c1:	05 ff 0f 00 00       	add    eax,0xfff
c00161c6:	83 d2 00             	adc    edx,0x0
c00161c9:	0f ac d0 0c          	shrd   eax,edx,0xc
c00161cd:	50                   	push   eax
c00161ce:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00161d4:	e8 a3 d9 ff ff       	call   c0013b7c <VAS::allocatePages(int, int)>
c00161d9:	59                   	pop    ecx
c00161da:	89 c3                	mov    ebx,eax
c00161dc:	5d                   	pop    ebp
c00161dd:	50                   	push   eax
c00161de:	68 f2 3c 02 c0       	push   0xc0023cf2
c00161e3:	e8 7c 0d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00161e8:	89 34 24             	mov    DWORD PTR [esp],esi
c00161eb:	e8 80 a3 fe ff       	call   c0000570 <strlen>
c00161f0:	8b 2d 60 e2 02 c0    	mov    ebp,DWORD PTR ds:0xc002e260
c00161f6:	40                   	inc    eax
c00161f7:	89 04 24             	mov    DWORD PTR [esp],eax
c00161fa:	e8 5c 9a ff ff       	call   c000fc5b <malloc>
c00161ff:	89 04 ad 80 e6 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd1980],eax
c0016206:	58                   	pop    eax
c0016207:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c001620c:	5a                   	pop    edx
c001620d:	56                   	push   esi
c001620e:	ff 34 85 80 e6 02 c0 	push   DWORD PTR [eax*4-0x3ffd1980]
c0016215:	e8 26 a4 fe ff       	call   c0000640 <strcpy>
c001621a:	a1 60 e2 02 c0       	mov    eax,ds:0xc002e260
c001621f:	8d 50 01             	lea    edx,[eax+0x1]
c0016222:	89 1c 85 80 e4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1b80],ebx
c0016229:	89 15 60 e2 02 c0    	mov    DWORD PTR ds:0xc002e260,edx
c001622f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016233:	83 c4 0c             	add    esp,0xc
c0016236:	89 14 85 80 e2 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1d80],edx
c001623d:	6a 01                	push   0x1
c001623f:	53                   	push   ebx
c0016240:	56                   	push   esi
c0016241:	e8 9e f6 ff ff       	call   c00158e4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0016246:	83 c4 10             	add    esp,0x10
c0016249:	0f b6 c0             	movzx  eax,al
c001624c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016250:	85 c0                	test   eax,eax
c0016252:	0f 85 89 00 00 00    	jne    c00162e1 <Thr::loadDLL(char const*, bool)+0x241>
c0016258:	89 f8                	mov    eax,edi
c001625a:	84 c0                	test   al,al
c001625c:	74 73                	je     c00162d1 <Thr::loadDLL(char const*, bool)+0x231>
c001625e:	83 ec 0c             	sub    esp,0xc
c0016261:	68 91 49 02 c0       	push   0xc0024991
c0016266:	e8 37 9d ff ff       	call   c000ffa2 <KePanic(char const*)>
c001626b:	83 c4 10             	add    esp,0x10
c001626e:	eb 61                	jmp    c00162d1 <Thr::loadDLL(char const*, bool)+0x231>
c0016270:	50                   	push   eax
c0016271:	50                   	push   eax
c0016272:	89 e8                	mov    eax,ebp
c0016274:	c1 e0 0c             	shl    eax,0xc
c0016277:	01 d8                	add    eax,ebx
c0016279:	50                   	push   eax
c001627a:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c0016280:	e8 f9 d3 ff ff       	call   c001367e <VAS::getPageTableEntry(unsigned long)>
c0016285:	83 c4 10             	add    esp,0x10
c0016288:	8b 00                	mov    eax,DWORD PTR [eax]
c001628a:	a8 60                	test   al,0x60
c001628c:	75 11                	jne    c001629f <Thr::loadDLL(char const*, bool)+0x1ff>
c001628e:	83 ec 0c             	sub    esp,0xc
c0016291:	25 00 f0 ff ff       	and    eax,0xfffff000
c0016296:	50                   	push   eax
c0016297:	e8 91 9e ff ff       	call   c001012d <Phys::freePage(unsigned long)>
c001629c:	83 c4 10             	add    esp,0x10
c001629f:	45                   	inc    ebp
c00162a0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00162a4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00162a8:	05 ff 0f 00 00       	add    eax,0xfff
c00162ad:	bf 00 00 00 00       	mov    edi,0x0
c00162b2:	83 d2 00             	adc    edx,0x0
c00162b5:	0f ac d0 0c          	shrd   eax,edx,0xc
c00162b9:	c1 ea 0c             	shr    edx,0xc
c00162bc:	39 c5                	cmp    ebp,eax
c00162be:	89 d1                	mov    ecx,edx
c00162c0:	89 f8                	mov    eax,edi
c00162c2:	19 c8                	sbb    eax,ecx
c00162c4:	72 aa                	jb     c0016270 <Thr::loadDLL(char const*, bool)+0x1d0>
c00162c6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00162cb:	75 18                	jne    c00162e5 <Thr::loadDLL(char const*, bool)+0x245>
c00162cd:	31 db                	xor    ebx,ebx
c00162cf:	eb 14                	jmp    c00162e5 <Thr::loadDLL(char const*, bool)+0x245>
c00162d1:	83 ec 0c             	sub    esp,0xc
c00162d4:	68 b0 49 02 c0       	push   0xc00249b0
c00162d9:	e8 c4 9c ff ff       	call   c000ffa2 <KePanic(char const*)>
c00162de:	83 c4 10             	add    esp,0x10
c00162e1:	31 ed                	xor    ebp,ebp
c00162e3:	eb bb                	jmp    c00162a0 <Thr::loadDLL(char const*, bool)+0x200>
c00162e5:	81 c4 2c 01 00 00    	add    esp,0x12c
c00162eb:	89 d8                	mov    eax,ebx
c00162ed:	5b                   	pop    ebx
c00162ee:	5e                   	pop    esi
c00162ef:	5f                   	pop    edi
c00162f0:	5d                   	pop    ebp
c00162f1:	c3                   	ret    

c00162f2 <Thr::executeDLL(unsigned long, void*)>:
c00162f2:	56                   	push   esi
c00162f3:	53                   	push   ebx
c00162f4:	52                   	push   edx
c00162f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00162f9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00162fd:	85 db                	test   ebx,ebx
c00162ff:	75 10                	jne    c0016311 <Thr::executeDLL(unsigned long, void*)+0x1f>
c0016301:	83 ec 0c             	sub    esp,0xc
c0016304:	68 cc 49 02 c0       	push   0xc00249cc
c0016309:	e8 94 9c ff ff       	call   c000ffa2 <KePanic(char const*)>
c001630e:	83 c4 10             	add    esp,0x10
c0016311:	50                   	push   eax
c0016312:	50                   	push   eax
c0016313:	53                   	push   ebx
c0016314:	68 f6 49 02 c0       	push   0xc00249f6
c0016319:	e8 46 0c ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001631e:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016322:	89 d8                	mov    eax,ebx
c0016324:	83 c4 14             	add    esp,0x14
c0016327:	5b                   	pop    ebx
c0016328:	5e                   	pop    esi
c0016329:	ff e0                	jmp    eax

c001632b <KeProcessExec(Process*, char const*)>:
c001632b:	56                   	push   esi
c001632c:	53                   	push   ebx
c001632d:	83 ec 04             	sub    esp,0x4
c0016330:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016334:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c001633a:	85 f6                	test   esi,esi
c001633c:	74 16                	je     c0016354 <KeProcessExec(Process*, char const*)+0x29>
c001633e:	83 ec 0c             	sub    esp,0xc
c0016341:	56                   	push   esi
c0016342:	e8 c9 d5 ff ff       	call   c0013910 <VAS::~VAS()>
c0016347:	58                   	pop    eax
c0016348:	5a                   	pop    edx
c0016349:	6a 14                	push   0x14
c001634b:	56                   	push   esi
c001634c:	e8 92 6f ff ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0016351:	83 c4 10             	add    esp,0x10
c0016354:	83 ec 0c             	sub    esp,0xc
c0016357:	6a 14                	push   0x14
c0016359:	e8 fd 98 ff ff       	call   c000fc5b <malloc>
c001635e:	89 c6                	mov    esi,eax
c0016360:	58                   	pop    eax
c0016361:	5a                   	pop    edx
c0016362:	6a 00                	push   0x0
c0016364:	56                   	push   esi
c0016365:	e8 46 da ff ff       	call   c0013db0 <VAS::VAS(bool)>
c001636a:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0016370:	59                   	pop    ecx
c0016371:	5e                   	pop    esi
c0016372:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016376:	50                   	push   eax
c0016377:	53                   	push   ebx
c0016378:	e8 35 f0 ff ff       	call   c00153b2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001637d:	83 c4 14             	add    esp,0x14
c0016380:	31 c0                	xor    eax,eax
c0016382:	5b                   	pop    ebx
c0016383:	5e                   	pop    esi
c0016384:	c3                   	ret    
c0016385:	66 90                	xchg   ax,ax
c0016387:	90                   	nop

c0016388 <userModeEntryPoint(void*)>:
c0016388:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016390:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016395:	85 c0                	test   eax,eax
c0016397:	75 03                	jne    c001639c <userModeEntryPoint(void*)+0x14>
c0016399:	fb                   	sti    
c001639a:	66 90                	xchg   ax,ax
c001639c:	fb                   	sti    
c001639d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163a2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00163a5:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c00163ab:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00163af:	e9 8b 9e fe ff       	jmp    c000023f <goToUsermode>

c00163b4 <changeTSS>:
c00163b4:	83 ec 14             	sub    esp,0x14
c00163b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163bc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00163bf:	b8 00 00 e8 01       	mov    eax,0x1e80000
c00163c4:	c1 e2 15             	shl    edx,0x15
c00163c7:	29 d0                	sub    eax,edx
c00163c9:	50                   	push   eax
c00163ca:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c00163cf:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00163d5:	05 68 11 00 00       	add    eax,0x1168
c00163da:	50                   	push   eax
c00163db:	e8 68 c8 ff ff       	call   c0012c48 <TSS::setESP(unsigned long)>
c00163e0:	83 c4 1c             	add    esp,0x1c
c00163e3:	c3                   	ret    

c00163e4 <switchToThread(ThreadControlBlock*)>:
c00163e4:	57                   	push   edi
c00163e5:	8b 0d 2c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea2c
c00163eb:	56                   	push   esi
c00163ec:	85 c9                	test   ecx,ecx
c00163ee:	53                   	push   ebx
c00163ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00163f3:	0f 85 8b 00 00 00    	jne    c0016484 <switchToThread(ThreadControlBlock*)+0xa0>
c00163f9:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00163fd:	81 fa ff 00 00 00    	cmp    edx,0xff
c0016403:	74 7b                	je     c0016480 <switchToThread(ThreadControlBlock*)+0x9c>
c0016405:	b8 00 04 00 00       	mov    eax,0x400
c001640a:	29 d0                	sub    eax,edx
c001640c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c001640f:	d1 f8                	sar    eax,1
c0016411:	01 d0                	add    eax,edx
c0016413:	90                   	nop
c0016414:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0016417:	e8 45 38 00 00       	call   c0019c61 <HalQueryPerformanceCounter()>
c001641c:	a3 70 ea 02 c0       	mov    ds:0xc002ea70,eax
c0016421:	89 15 74 ea 02 c0    	mov    DWORD PTR ds:0xc002ea74,edx
c0016427:	89 c6                	mov    esi,eax
c0016429:	89 d7                	mov    edi,edx
c001642b:	2b 35 60 ea 02 c0    	sub    esi,DWORD PTR ds:0xc002ea60
c0016431:	a3 60 ea 02 c0       	mov    ds:0xc002ea60,eax
c0016436:	1b 3d 64 ea 02 c0    	sbb    edi,DWORD PTR ds:0xc002ea64
c001643c:	89 35 68 ea 02 c0    	mov    DWORD PTR ds:0xc002ea68,esi
c0016442:	89 3d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edi
c0016448:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001644e:	89 15 64 ea 02 c0    	mov    DWORD PTR ds:0xc002ea64,edx
c0016454:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0016457:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c001645a:	01 c6                	add    esi,eax
c001645c:	11 d7                	adc    edi,edx
c001645e:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0016461:	83 ec 0c             	sub    esp,0xc
c0016464:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0016467:	53                   	push   ebx
c0016468:	e8 0a 9e fe ff       	call   c0000277 <switchToThreadASM>
c001646d:	0f 20 c0             	mov    eax,cr0
c0016470:	83 c8 08             	or     eax,0x8
c0016473:	0f 22 c0             	mov    cr0,eax
c0016476:	83 c4 10             	add    esp,0x10
c0016479:	5b                   	pop    ebx
c001647a:	5e                   	pop    esi
c001647b:	5f                   	pop    edi
c001647c:	c3                   	ret    
c001647d:	8d 76 00             	lea    esi,[esi+0x0]
c0016480:	31 c0                	xor    eax,eax
c0016482:	eb 90                	jmp    c0016414 <switchToThread(ThreadControlBlock*)+0x30>
c0016484:	5b                   	pop    ebx
c0016485:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c001648f:	5e                   	pop    esi
c0016490:	5f                   	pop    edi
c0016491:	c3                   	ret    
c0016492:	66 90                	xchg   ax,ax

c0016494 <Process::addArgs(char**)>:
c0016494:	57                   	push   edi
c0016495:	56                   	push   esi
c0016496:	53                   	push   ebx
c0016497:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001649b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001649f:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c00164a9:	85 ff                	test   edi,edi
c00164ab:	74 4f                	je     c00164fc <Process::addArgs(char**)+0x68>
c00164ad:	8b 07                	mov    eax,DWORD PTR [edi]
c00164af:	85 c0                	test   eax,eax
c00164b1:	74 49                	je     c00164fc <Process::addArgs(char**)+0x68>
c00164b3:	31 db                	xor    ebx,ebx
c00164b5:	8d 76 00             	lea    esi,[esi+0x0]
c00164b8:	83 ec 0c             	sub    esp,0xc
c00164bb:	50                   	push   eax
c00164bc:	e8 af a0 fe ff       	call   c0000570 <strlen>
c00164c1:	83 c0 01             	add    eax,0x1
c00164c4:	89 04 24             	mov    DWORD PTR [esp],eax
c00164c7:	e8 8f 97 ff ff       	call   c000fc5b <malloc>
c00164cc:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c00164d3:	5a                   	pop    edx
c00164d4:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00164d7:	59                   	pop    ecx
c00164d8:	83 c3 01             	add    ebx,0x1
c00164db:	52                   	push   edx
c00164dc:	50                   	push   eax
c00164dd:	e8 5e a1 fe ff       	call   c0000640 <strcpy>
c00164e2:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00164e8:	83 c4 10             	add    esp,0x10
c00164eb:	83 c1 01             	add    ecx,0x1
c00164ee:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00164f4:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00164f7:	85 c0                	test   eax,eax
c00164f9:	75 bd                	jne    c00164b8 <Process::addArgs(char**)+0x24>
c00164fb:	90                   	nop
c00164fc:	5b                   	pop    ebx
c00164fd:	5e                   	pop    esi
c00164fe:	5f                   	pop    edi
c00164ff:	c3                   	ret    

c0016500 <Process::Process(char const*, Process*, char**)>:
c0016500:	56                   	push   esi
c0016501:	53                   	push   ebx
c0016502:	83 ec 14             	sub    esp,0x14
c0016505:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016509:	05 0c 02 00 00       	add    eax,0x20c
c001650e:	bb 07 00 00 00       	mov    ebx,0x7
c0016513:	89 c6                	mov    esi,eax
c0016515:	8d 76 00             	lea    esi,[esi+0x0]
c0016518:	85 db                	test   ebx,ebx
c001651a:	78 14                	js     c0016530 <Process::Process(char const*, Process*, char**)+0x30>
c001651c:	83 ec 0c             	sub    esp,0xc
c001651f:	56                   	push   esi
c0016520:	e8 9b b8 00 00       	call   c0021dc0 <ThreadControlBlock::ThreadControlBlock()>
c0016525:	83 c4 10             	add    esp,0x10
c0016528:	83 c6 5f             	add    esi,0x5f
c001652b:	83 eb 01             	sub    ebx,0x1
c001652e:	eb e8                	jmp    c0016518 <Process::Process(char const*, Process*, char**)+0x18>
c0016530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016534:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001653b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001653f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0016546:	83 ec 0c             	sub    esp,0xc
c0016549:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001654d:	e8 92 82 ff ff       	call   c000e7e4 <KeNewProcessEnv(Process*)>
c0016552:	83 c4 10             	add    esp,0x10
c0016555:	89 c2                	mov    edx,eax
c0016557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001655b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0016561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016565:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001656e:	a1 fc 62 02 c0       	mov    eax,ds:0xc00262fc
c0016573:	8d 50 01             	lea    edx,[eax+0x1]
c0016576:	89 15 fc 62 02 c0    	mov    DWORD PTR ds:0xc00262fc,edx
c001657c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016580:	89 02                	mov    DWORD PTR [edx],eax
c0016582:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001658a:	83 ec 0c             	sub    esp,0xc
c001658d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0016591:	e8 c5 96 ff ff       	call   c000fc5b <malloc>
c0016596:	83 c4 10             	add    esp,0x10
c0016599:	89 c3                	mov    ebx,eax
c001659b:	83 ec 08             	sub    esp,0x8
c001659e:	6a 00                	push   0x0
c00165a0:	53                   	push   ebx
c00165a1:	e8 0a d8 ff ff       	call   c0013db0 <VAS::VAS(bool)>
c00165a6:	83 c4 10             	add    esp,0x10
c00165a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ad:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00165b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b7:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00165c1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00165c9:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c00165cf:	e8 8f aa ff ff       	call   c0011063 <KeInitSignals()>
c00165d4:	89 c2                	mov    edx,eax
c00165d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165da:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00165e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165e4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00165ea:	85 c0                	test   eax,eax
c00165ec:	74 42                	je     c0016630 <Process::Process(char const*, Process*, char**)+0x130>
c00165ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00165f8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00165fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016602:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0016608:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001660c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016612:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0016618:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001661c:	05 0c 01 00 00       	add    eax,0x10c
c0016621:	83 ec 08             	sub    esp,0x8
c0016624:	52                   	push   edx
c0016625:	50                   	push   eax
c0016626:	e8 15 a0 fe ff       	call   c0000640 <strcpy>
c001662b:	83 c4 10             	add    esp,0x10
c001662e:	eb 7c                	jmp    c00166ac <Process::Process(char const*, Process*, char**)+0x1ac>
c0016630:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0016638:	83 ec 0c             	sub    esp,0xc
c001663b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001663f:	e8 17 96 ff ff       	call   c000fc5b <malloc>
c0016644:	83 c4 10             	add    esp,0x10
c0016647:	89 c3                	mov    ebx,eax
c0016649:	83 ec 08             	sub    esp,0x8
c001664c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016650:	53                   	push   ebx
c0016651:	e8 f2 c2 ff ff       	call   c0012948 <VgaText::VgaText(char const*)>
c0016656:	83 c4 10             	add    esp,0x10
c0016659:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001665d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0016663:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016667:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001666d:	83 ec 0c             	sub    esp,0xc
c0016670:	50                   	push   eax
c0016671:	e8 28 bb ff ff       	call   c001219e <addToTerminalCycle(VgaText*)>
c0016676:	83 c4 10             	add    esp,0x10
c0016679:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001667d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016683:	83 ec 0c             	sub    esp,0xc
c0016686:	50                   	push   eax
c0016687:	e8 83 bd ff ff       	call   c001240f <setActiveTerminal(VgaText*)>
c001668c:	83 c4 10             	add    esp,0x10
c001668f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016693:	05 0c 01 00 00       	add    eax,0x10c
c0016698:	83 ec 08             	sub    esp,0x8
c001669b:	68 15 4a 02 c0       	push   0xc0024a15
c00166a0:	50                   	push   eax
c00166a1:	e8 9a 9f fe ff       	call   c0000640 <strcpy>
c00166a6:	83 c4 10             	add    esp,0x10
c00166a9:	8d 76 00             	lea    esi,[esi+0x0]
c00166ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166b0:	83 c0 0c             	add    eax,0xc
c00166b3:	83 ec 08             	sub    esp,0x8
c00166b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166ba:	50                   	push   eax
c00166bb:	e8 80 9f fe ff       	call   c0000640 <strcpy>
c00166c0:	83 c4 10             	add    esp,0x10
c00166c3:	83 ec 08             	sub    esp,0x8
c00166c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00166ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166ce:	e8 c1 fd ff ff       	call   c0016494 <Process::addArgs(char**)>
c00166d3:	83 c4 10             	add    esp,0x10
c00166d6:	83 ec 08             	sub    esp,0x8
c00166d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00166e1:	e8 cc ec ff ff       	call   c00153b2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c00166e6:	83 c4 10             	add    esp,0x10
c00166e9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00166ed:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00166f1:	83 f0 01             	xor    eax,0x1
c00166f4:	88 c2                	mov    dl,al
c00166f6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00166fa:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0016700:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016704:	8b 10                	mov    edx,DWORD PTR [eax]
c0016706:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001670b:	52                   	push   edx
c001670c:	50                   	push   eax
c001670d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016711:	68 6c 4a 02 c0       	push   0xc0024a6c
c0016716:	e8 49 08 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001671b:	83 c4 10             	add    esp,0x10
c001671e:	90                   	nop
c001671f:	83 c4 14             	add    esp,0x14
c0016722:	5b                   	pop    ebx
c0016723:	5e                   	pop    esi
c0016724:	c3                   	ret    
c0016725:	90                   	nop
c0016726:	66 90                	xchg   ax,ax

c0016728 <Process::Process(bool, char const*, Process*, char**)>:
c0016728:	56                   	push   esi
c0016729:	53                   	push   ebx
c001672a:	83 ec 24             	sub    esp,0x24
c001672d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016731:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016735:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016739:	05 0c 02 00 00       	add    eax,0x20c
c001673e:	bb 07 00 00 00       	mov    ebx,0x7
c0016743:	89 c6                	mov    esi,eax
c0016745:	8d 76 00             	lea    esi,[esi+0x0]
c0016748:	85 db                	test   ebx,ebx
c001674a:	78 14                	js     c0016760 <Process::Process(bool, char const*, Process*, char**)+0x38>
c001674c:	83 ec 0c             	sub    esp,0xc
c001674f:	56                   	push   esi
c0016750:	e8 6b b6 00 00       	call   c0021dc0 <ThreadControlBlock::ThreadControlBlock()>
c0016755:	83 c4 10             	add    esp,0x10
c0016758:	83 c6 5f             	add    esi,0x5f
c001675b:	83 eb 01             	sub    ebx,0x1
c001675e:	eb e8                	jmp    c0016748 <Process::Process(bool, char const*, Process*, char**)+0x20>
c0016760:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016764:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c001676b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001676f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0016776:	83 ec 0c             	sub    esp,0xc
c0016779:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001677d:	e8 62 80 ff ff       	call   c000e7e4 <KeNewProcessEnv(Process*)>
c0016782:	83 c4 10             	add    esp,0x10
c0016785:	89 c2                	mov    edx,eax
c0016787:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001678b:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0016791:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016795:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001679e:	a1 fc 62 02 c0       	mov    eax,ds:0xc00262fc
c00167a3:	8d 50 01             	lea    edx,[eax+0x1]
c00167a6:	89 15 fc 62 02 c0    	mov    DWORD PTR ds:0xc00262fc,edx
c00167ac:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00167b0:	89 02                	mov    DWORD PTR [edx],eax
c00167b2:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c00167ba:	83 ec 0c             	sub    esp,0xc
c00167bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00167c1:	e8 95 94 ff ff       	call   c000fc5b <malloc>
c00167c6:	83 c4 10             	add    esp,0x10
c00167c9:	89 c3                	mov    ebx,eax
c00167cb:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00167d0:	83 ec 08             	sub    esp,0x8
c00167d3:	50                   	push   eax
c00167d4:	53                   	push   ebx
c00167d5:	e8 d6 d5 ff ff       	call   c0013db0 <VAS::VAS(bool)>
c00167da:	83 c4 10             	add    esp,0x10
c00167dd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167e1:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c00167e7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167eb:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c00167f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00167f9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00167fd:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0016803:	e8 5b a8 ff ff       	call   c0011063 <KeInitSignals()>
c0016808:	89 c2                	mov    edx,eax
c001680a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001680e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0016814:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016818:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001681e:	85 c0                	test   eax,eax
c0016820:	74 42                	je     c0016864 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0016822:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016826:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001682c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0016832:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016836:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001683c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016840:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016846:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001684c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016850:	05 0c 01 00 00       	add    eax,0x10c
c0016855:	83 ec 08             	sub    esp,0x8
c0016858:	52                   	push   edx
c0016859:	50                   	push   eax
c001685a:	e8 e1 9d fe ff       	call   c0000640 <strcpy>
c001685f:	83 c4 10             	add    esp,0x10
c0016862:	eb 7c                	jmp    c00168e0 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0016864:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c001686c:	83 ec 0c             	sub    esp,0xc
c001686f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016873:	e8 e3 93 ff ff       	call   c000fc5b <malloc>
c0016878:	83 c4 10             	add    esp,0x10
c001687b:	89 c3                	mov    ebx,eax
c001687d:	83 ec 08             	sub    esp,0x8
c0016880:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016884:	53                   	push   ebx
c0016885:	e8 be c0 ff ff       	call   c0012948 <VgaText::VgaText(char const*)>
c001688a:	83 c4 10             	add    esp,0x10
c001688d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016891:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0016897:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001689b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168a1:	83 ec 0c             	sub    esp,0xc
c00168a4:	50                   	push   eax
c00168a5:	e8 f4 b8 ff ff       	call   c001219e <addToTerminalCycle(VgaText*)>
c00168aa:	83 c4 10             	add    esp,0x10
c00168ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168b1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00168b7:	83 ec 0c             	sub    esp,0xc
c00168ba:	50                   	push   eax
c00168bb:	e8 4f bb ff ff       	call   c001240f <setActiveTerminal(VgaText*)>
c00168c0:	83 c4 10             	add    esp,0x10
c00168c3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168c7:	05 0c 01 00 00       	add    eax,0x10c
c00168cc:	83 ec 08             	sub    esp,0x8
c00168cf:	68 15 4a 02 c0       	push   0xc0024a15
c00168d4:	50                   	push   eax
c00168d5:	e8 66 9d fe ff       	call   c0000640 <strcpy>
c00168da:	83 c4 10             	add    esp,0x10
c00168dd:	8d 76 00             	lea    esi,[esi+0x0]
c00168e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00168e4:	83 c0 0c             	add    eax,0xc
c00168e7:	83 ec 08             	sub    esp,0x8
c00168ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00168ee:	50                   	push   eax
c00168ef:	e8 4c 9d fe ff       	call   c0000640 <strcpy>
c00168f4:	83 c4 10             	add    esp,0x10
c00168f7:	83 ec 08             	sub    esp,0x8
c00168fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00168fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0016902:	e8 8d fb ff ff       	call   c0016494 <Process::addArgs(char**)>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	90                   	nop
c001690b:	83 c4 24             	add    esp,0x24
c001690e:	5b                   	pop    ebx
c001690f:	5e                   	pop    esi
c0016910:	c3                   	ret    
c0016911:	8d 76 00             	lea    esi,[esi+0x0]

c0016914 <taskStartupFunction>:
c0016914:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016919:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001691c:	c3                   	ret    
c001691d:	8d 76 00             	lea    esi,[esi+0x0]

c0016920 <KeDisablePreemption()>:
c0016920:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c0016925:	85 c0                	test   eax,eax
c0016927:	75 13                	jne    c001693c <KeDisablePreemption()+0x1c>
c0016929:	8a 15 d4 c0 02 c0    	mov    dl,BYTE PTR ds:0xc002c0d4
c001692f:	c6 05 d4 c0 02 c0 00 	mov    BYTE PTR ds:0xc002c0d4,0x0
c0016936:	88 15 08 ea 02 c0    	mov    BYTE PTR ds:0xc002ea08,dl
c001693c:	83 c0 01             	add    eax,0x1
c001693f:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016944:	c3                   	ret    
c0016945:	8d 76 00             	lea    esi,[esi+0x0]

c0016948 <KeRestorePreemption()>:
c0016948:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c001694d:	83 e8 01             	sub    eax,0x1
c0016950:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c0016955:	75 0d                	jne    c0016964 <KeRestorePreemption()+0x1c>
c0016957:	a0 08 ea 02 c0       	mov    al,ds:0xc002ea08
c001695c:	a2 d4 c0 02 c0       	mov    ds:0xc002c0d4,al
c0016961:	8d 76 00             	lea    esi,[esi+0x0]
c0016964:	c3                   	ret    
c0016965:	90                   	nop
c0016966:	66 90                	xchg   ax,ax

c0016968 <Process::createThread(void (*)(void*), void*, int)>:
c0016968:	57                   	push   edi
c0016969:	31 c9                	xor    ecx,ecx
c001696b:	56                   	push   esi
c001696c:	53                   	push   ebx
c001696d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016971:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0016978:	89 f2                	mov    edx,esi
c001697a:	66 90                	xchg   ax,ax
c001697c:	0f b7 c2             	movzx  eax,dx
c001697f:	80 e2 01             	and    dl,0x1
c0016982:	74 14                	je     c0016998 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0016984:	d1 f8                	sar    eax,1
c0016986:	83 c1 01             	add    ecx,0x1
c0016989:	89 c2                	mov    edx,eax
c001698b:	83 f9 10             	cmp    ecx,0x10
c001698e:	75 ec                	jne    c001697c <Process::createThread(void (*)(void*), void*, int)+0x14>
c0016990:	31 db                	xor    ebx,ebx
c0016992:	89 d8                	mov    eax,ebx
c0016994:	5b                   	pop    ebx
c0016995:	5e                   	pop    esi
c0016996:	5f                   	pop    edi
c0016997:	c3                   	ret    
c0016998:	b8 01 00 00 00       	mov    eax,0x1
c001699d:	d3 e0                	shl    eax,cl
c001699f:	09 c6                	or     esi,eax
c00169a1:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00169a4:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00169ab:	01 c0                	add    eax,eax
c00169ad:	01 c8                	add    eax,ecx
c00169af:	8d 04 80             	lea    eax,[eax+eax*4]
c00169b2:	01 d8                	add    eax,ebx
c00169b4:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00169bb:	75 0b                	jne    c00169c8 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00169bd:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00169c7:	90                   	nop
c00169c8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00169ce:	83 ec 0c             	sub    esp,0xc
c00169d1:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00169d4:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00169d7:	01 c0                	add    eax,eax
c00169d9:	01 c8                	add    eax,ecx
c00169db:	8d 3c 80             	lea    edi,[eax+eax*4]
c00169de:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00169e1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00169e7:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00169ed:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00169f1:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00169f7:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00169fd:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0016a03:	89 ca                	mov    edx,ecx
c0016a05:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0016a0c:	c7 80 40 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x240],0x0
c0016a16:	f7 da                	neg    edx
c0016a18:	c1 e2 15             	shl    edx,0x15
c0016a1b:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0016a21:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0016a27:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016a2b:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0016a35:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0016a3b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016a3f:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0016a45:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016a4f:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0016a59:	68 00 01 00 00       	push   0x100
c0016a5e:	e8 f8 91 ff ff       	call   c000fc5b <malloc>
c0016a63:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0016a66:	58                   	pop    eax
c0016a67:	5a                   	pop    edx
c0016a68:	53                   	push   ebx
c0016a69:	68 4c ea 02 c0       	push   0xc002ea4c
c0016a6e:	e8 f9 ae 00 00       	call   c002196c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a73:	83 c4 10             	add    esp,0x10
c0016a76:	89 d8                	mov    eax,ebx
c0016a78:	5b                   	pop    ebx
c0016a79:	5e                   	pop    esi
c0016a7a:	5f                   	pop    edi
c0016a7b:	c3                   	ret    

c0016a7c <Process::createUserThread()>:
c0016a7c:	83 ec 0c             	sub    esp,0xc
c0016a7f:	68 80 00 00 00       	push   0x80
c0016a84:	6a 00                	push   0x0
c0016a86:	68 88 63 01 c0       	push   0xc0016388
c0016a8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016a8f:	50                   	push   eax
c0016a90:	e8 d3 fe ff ff       	call   c0016968 <Process::createThread(void (*)(void*), void*, int)>
c0016a95:	83 c4 1c             	add    esp,0x1c
c0016a98:	c3                   	ret    
c0016a99:	8d 76 00             	lea    esi,[esi+0x0]

c0016a9c <setupMultitasking(void (*)())>:
c0016a9c:	56                   	push   esi
c0016a9d:	53                   	push   ebx
c0016a9e:	83 ec 04             	sub    esp,0x4
c0016aa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016aa5:	eb 11                	jmp    c0016ab8 <setupMultitasking(void (*)())+0x1c>
c0016aa7:	90                   	nop
c0016aa8:	83 ec 0c             	sub    esp,0xc
c0016aab:	68 4c ea 02 c0       	push   0xc002ea4c
c0016ab0:	e8 fb ad 00 00       	call   c00218b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016ab5:	83 c4 10             	add    esp,0x10
c0016ab8:	83 ec 0c             	sub    esp,0xc
c0016abb:	68 4c ea 02 c0       	push   0xc002ea4c
c0016ac0:	e8 c7 ad 00 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016ac5:	83 c4 10             	add    esp,0x10
c0016ac8:	84 c0                	test   al,al
c0016aca:	74 dc                	je     c0016aa8 <setupMultitasking(void (*)())+0xc>
c0016acc:	83 ec 0c             	sub    esp,0xc
c0016acf:	68 24 07 00 00       	push   0x724
c0016ad4:	e8 82 91 ff ff       	call   c000fc5b <malloc>
c0016ad9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0016ae0:	89 c3                	mov    ebx,eax
c0016ae2:	6a 00                	push   0x0
c0016ae4:	68 19 4a 02 c0       	push   0xc0024a19
c0016ae9:	6a 01                	push   0x1
c0016aeb:	50                   	push   eax
c0016aec:	e8 37 fc ff ff       	call   c0016728 <Process::Process(bool, char const*, Process*, char**)>
c0016af1:	83 c4 14             	add    esp,0x14
c0016af4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0016afa:	89 1d 58 ea 02 c0    	mov    DWORD PTR ds:0xc002ea58,ebx
c0016b00:	50                   	push   eax
c0016b01:	e8 09 b9 ff ff       	call   c001240f <setActiveTerminal(VgaText*)>
c0016b06:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0016b0d:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0016b17:	83 c8 01             	or     eax,0x1
c0016b1a:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0016b21:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016b27:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0016b2a:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0016b34:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0016b3a:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016b40:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0016b4a:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016b54:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016b5e:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016b64:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016b6e:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016b74:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016b7e:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016b85:	e8 d1 90 ff ff       	call   c000fc5b <malloc>
c0016b8a:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016b90:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0016b96:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016b9c:	5a                   	pop    edx
c0016b9d:	59                   	pop    ecx
c0016b9e:	68 15 4a 02 c0       	push   0xc0024a15
c0016ba3:	50                   	push   eax
c0016ba4:	e8 97 9a fe ff       	call   c0000640 <strcpy>
c0016ba9:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016bb0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016bb4:	83 c4 14             	add    esp,0x14
c0016bb7:	5b                   	pop    ebx
c0016bb8:	5e                   	pop    esi
c0016bb9:	e9 ab 96 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016bbe:	66 90                	xchg   ax,ax

c0016bc0 <schedule()>:
c0016bc0:	8b 15 2c ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea2c
c0016bc6:	85 d2                	test   edx,edx
c0016bc8:	74 0e                	je     c0016bd8 <schedule()+0x18>
c0016bca:	c7 05 28 ea 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x1
c0016bd4:	c3                   	ret    
c0016bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016bd8:	53                   	push   ebx
c0016bd9:	83 ec 14             	sub    esp,0x14
c0016bdc:	68 4c ea 02 c0       	push   0xc002ea4c
c0016be1:	e8 a6 ac 00 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016be6:	83 c4 10             	add    esp,0x10
c0016be9:	84 c0                	test   al,al
c0016beb:	75 3f                	jne    c0016c2c <schedule()+0x6c>
c0016bed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016bf2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0016bf5:	83 fa 01             	cmp    edx,0x1
c0016bf8:	74 3a                	je     c0016c34 <schedule()+0x74>
c0016bfa:	66 90                	xchg   ax,ax
c0016bfc:	83 ec 0c             	sub    esp,0xc
c0016bff:	68 4c ea 02 c0       	push   0xc002ea4c
c0016c04:	e8 9f ac 00 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016c09:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016c10:	89 c3                	mov    ebx,eax
c0016c12:	e8 99 ac 00 00       	call   c00218b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016c17:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0016c1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016c21:	e8 be f7 ff ff       	call   c00163e4 <switchToThread(ThreadControlBlock*)>
c0016c26:	83 c4 10             	add    esp,0x10
c0016c29:	8d 76 00             	lea    esi,[esi+0x0]
c0016c2c:	83 c4 08             	add    esp,0x8
c0016c2f:	5b                   	pop    ebx
c0016c30:	c3                   	ret    
c0016c31:	8d 76 00             	lea    esi,[esi+0x0]
c0016c34:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016c3b:	83 ec 08             	sub    esp,0x8
c0016c3e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c43:	50                   	push   eax
c0016c44:	68 4c ea 02 c0       	push   0xc002ea4c
c0016c49:	e8 1e ad 00 00       	call   c002196c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016c4e:	83 c4 10             	add    esp,0x10
c0016c51:	eb a9                	jmp    c0016bfc <schedule()+0x3c>
c0016c53:	90                   	nop

c0016c54 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c60:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016c63:	e8 58 ff ff ff       	call   c0016bc0 <schedule()>
c0016c68:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016c70:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016c75:	85 c0                	test   eax,eax
c0016c77:	75 03                	jne    c0016c7c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c0016c79:	fb                   	sti    
c0016c7a:	66 90                	xchg   ax,ax
c0016c7c:	83 c4 0c             	add    esp,0xc
c0016c7f:	c3                   	ret    

c0016c80 <blockTask(TaskState)>:
c0016c80:	83 ec 0c             	sub    esp,0xc
c0016c83:	fa                   	cli    
c0016c84:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016c89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016c8d:	83 c0 01             	add    eax,0x1
c0016c90:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0016c95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c9a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016c9d:	e8 1e ff ff ff       	call   c0016bc0 <schedule()>
c0016ca2:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016caa:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0016cb0:	85 d2                	test   edx,edx
c0016cb2:	75 04                	jne    c0016cb8 <blockTask(TaskState)+0x38>
c0016cb4:	fb                   	sti    
c0016cb5:	8d 76 00             	lea    esi,[esi+0x0]
c0016cb8:	83 c4 0c             	add    esp,0xc
c0016cbb:	c3                   	ret    

c0016cbc <waitTask(int, int*, int)>:
c0016cbc:	83 ec 18             	sub    esp,0x18
c0016cbf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016cc8:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0016ccb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016ccf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cd4:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0016cd7:	6a 07                	push   0x7
c0016cd9:	e8 a2 ff ff ff       	call   c0016c80 <blockTask(TaskState)>
c0016cde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ce3:	83 c4 10             	add    esp,0x10
c0016ce6:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0016ce9:	85 d2                	test   edx,edx
c0016ceb:	74 0b                	je     c0016cf8 <waitTask(int, int*, int)+0x3c>
c0016ced:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0016cf0:	89 02                	mov    DWORD PTR [edx],eax
c0016cf2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016cf7:	90                   	nop
c0016cf8:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0016cfb:	83 c4 0c             	add    esp,0xc
c0016cfe:	c3                   	ret    
c0016cff:	90                   	nop

c0016d00 <milliTenthSleepUntil(unsigned int)>:
c0016d00:	83 ec 0c             	sub    esp,0xc
c0016d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d07:	39 05 4c bb 02 c0    	cmp    DWORD PTR ds:0xc002bb4c,eax
c0016d0d:	76 05                	jbe    c0016d14 <milliTenthSleepUntil(unsigned int)+0x14>
c0016d0f:	90                   	nop
c0016d10:	83 c4 0c             	add    esp,0xc
c0016d13:	c3                   	ret    
c0016d14:	fa                   	cli    
c0016d15:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0016d1b:	83 ec 08             	sub    esp,0x8
c0016d1e:	83 c1 01             	add    ecx,0x1
c0016d21:	8b 15 2c ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea2c
c0016d27:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c0016d2d:	83 c2 01             	add    edx,0x1
c0016d30:	89 15 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,edx
c0016d36:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016d3c:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016d3f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016d45:	51                   	push   ecx
c0016d46:	68 40 ea 02 c0       	push   0xc002ea40
c0016d4b:	e8 1c ac 00 00       	call   c002196c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016d50:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0016d57:	e8 24 ff ff ff       	call   c0016c80 <blockTask(TaskState)>
c0016d5c:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0016d61:	83 c4 10             	add    esp,0x10
c0016d64:	83 e8 01             	sub    eax,0x1
c0016d67:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c0016d6c:	85 c0                	test   eax,eax
c0016d6e:	75 0c                	jne    c0016d7c <milliTenthSleepUntil(unsigned int)+0x7c>
c0016d70:	8b 15 28 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea28
c0016d76:	85 d2                	test   edx,edx
c0016d78:	75 1a                	jne    c0016d94 <milliTenthSleepUntil(unsigned int)+0x94>
c0016d7a:	66 90                	xchg   ax,ax
c0016d7c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016d84:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016d89:	85 c0                	test   eax,eax
c0016d8b:	75 83                	jne    c0016d10 <milliTenthSleepUntil(unsigned int)+0x10>
c0016d8d:	fb                   	sti    
c0016d8e:	83 c4 0c             	add    esp,0xc
c0016d91:	c3                   	ret    
c0016d92:	66 90                	xchg   ax,ax
c0016d94:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0016d9e:	e8 1d fe ff ff       	call   c0016bc0 <schedule()>
c0016da3:	eb d7                	jmp    c0016d7c <milliTenthSleepUntil(unsigned int)+0x7c>
c0016da5:	8d 76 00             	lea    esi,[esi+0x0]

c0016da8 <milliTenthSleep(unsigned int)>:
c0016da8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016dac:	a1 4c bb 02 c0       	mov    eax,ds:0xc002bb4c
c0016db1:	01 c2                	add    edx,eax
c0016db3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0016db7:	e9 44 ff ff ff       	jmp    c0016d00 <milliTenthSleepUntil(unsigned int)>

c0016dbc <sleep(unsigned int)>:
c0016dbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dc0:	8d 04 80             	lea    eax,[eax+eax*4]
c0016dc3:	8d 04 80             	lea    eax,[eax+eax*4]
c0016dc6:	8d 04 80             	lea    eax,[eax+eax*4]
c0016dc9:	8d 04 80             	lea    eax,[eax+eax*4]
c0016dcc:	c1 e0 04             	shl    eax,0x4
c0016dcf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016dd3:	eb d3                	jmp    c0016da8 <milliTenthSleep(unsigned int)>
c0016dd5:	8d 76 00             	lea    esi,[esi+0x0]

c0016dd8 <taskReturned>:
c0016dd8:	83 ec 18             	sub    esp,0x18
c0016ddb:	68 a0 4a 02 c0       	push   0xc0024aa0
c0016de0:	e8 bd 91 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0016de5:	83 c4 10             	add    esp,0x10
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	6a 02                	push   0x2
c0016ded:	e8 8e fe ff ff       	call   c0016c80 <blockTask(TaskState)>
c0016df2:	fa                   	cli    
c0016df3:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016df8:	83 c0 01             	add    eax,0x1
c0016dfb:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0016e00:	e8 bb fd ff ff       	call   c0016bc0 <schedule()>
c0016e05:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016e0d:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0016e13:	83 c4 10             	add    esp,0x10
c0016e16:	85 d2                	test   edx,edx
c0016e18:	75 ce                	jne    c0016de8 <taskReturned+0x10>
c0016e1a:	fb                   	sti    
c0016e1b:	eb cb                	jmp    c0016de8 <taskReturned+0x10>
c0016e1d:	8d 76 00             	lea    esi,[esi+0x0]

c0016e20 <Thr::processFromPID(int)>:
c0016e20:	57                   	push   edi
c0016e21:	56                   	push   esi
c0016e22:	53                   	push   ebx
c0016e23:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016e27:	fa                   	cli    
c0016e28:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016e2d:	83 ec 0c             	sub    esp,0xc
c0016e30:	83 c0 01             	add    eax,0x1
c0016e33:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e38:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0016e3d:	e8 66 aa 00 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e42:	83 c4 10             	add    esp,0x10
c0016e45:	89 c7                	mov    edi,eax
c0016e47:	eb 17                	jmp    c0016e60 <Thr::processFromPID(int)+0x40>
c0016e49:	8d 76 00             	lea    esi,[esi+0x0]
c0016e4c:	83 ec 0c             	sub    esp,0xc
c0016e4f:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e54:	e8 4f aa 00 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	39 f8                	cmp    eax,edi
c0016e5e:	74 50                	je     c0016eb0 <Thr::processFromPID(int)+0x90>
c0016e60:	83 ec 0c             	sub    esp,0xc
c0016e63:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e68:	e8 3b aa 00 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e6d:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0016e74:	89 c3                	mov    ebx,eax
c0016e76:	e8 35 aa 00 00       	call   c00218b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e7b:	59                   	pop    ecx
c0016e7c:	58                   	pop    eax
c0016e7d:	53                   	push   ebx
c0016e7e:	68 4c ea 02 c0       	push   0xc002ea4c
c0016e83:	e8 e4 aa 00 00       	call   c002196c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e88:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016e8b:	83 c4 10             	add    esp,0x10
c0016e8e:	39 30                	cmp    DWORD PTR [eax],esi
c0016e90:	75 ba                	jne    c0016e4c <Thr::processFromPID(int)+0x2c>
c0016e92:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016e9a:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0016ea0:	85 d2                	test   edx,edx
c0016ea2:	74 08                	je     c0016eac <Thr::processFromPID(int)+0x8c>
c0016ea4:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016ea7:	5b                   	pop    ebx
c0016ea8:	5e                   	pop    esi
c0016ea9:	5f                   	pop    edi
c0016eaa:	c3                   	ret    
c0016eab:	90                   	nop
c0016eac:	fb                   	sti    
c0016ead:	eb f5                	jmp    c0016ea4 <Thr::processFromPID(int)+0x84>
c0016eaf:	90                   	nop
c0016eb0:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016eb8:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016ebd:	85 c0                	test   eax,eax
c0016ebf:	75 07                	jne    c0016ec8 <Thr::processFromPID(int)+0xa8>
c0016ec1:	fb                   	sti    
c0016ec2:	31 c0                	xor    eax,eax
c0016ec4:	5b                   	pop    ebx
c0016ec5:	5e                   	pop    esi
c0016ec6:	5f                   	pop    edi
c0016ec7:	c3                   	ret    
c0016ec8:	5b                   	pop    ebx
c0016ec9:	31 c0                	xor    eax,eax
c0016ecb:	5e                   	pop    esi
c0016ecc:	5f                   	pop    edi
c0016ecd:	c3                   	ret    
c0016ece:	66 90                	xchg   ax,ax

c0016ed0 <unblockTask(ThreadControlBlock*)>:
c0016ed0:	53                   	push   ebx
c0016ed1:	83 ec 08             	sub    esp,0x8
c0016ed4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016ed8:	fa                   	cli    
c0016ed9:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0016edf:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016ee2:	83 c2 01             	add    edx,0x1
c0016ee5:	85 c0                	test   eax,eax
c0016ee7:	89 15 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,edx
c0016eed:	74 6d                	je     c0016f5c <unblockTask(ThreadControlBlock*)+0x8c>
c0016eef:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016ef2:	83 f8 01             	cmp    eax,0x1
c0016ef5:	74 39                	je     c0016f30 <unblockTask(ThreadControlBlock*)+0x60>
c0016ef7:	83 ec 0c             	sub    esp,0xc
c0016efa:	68 4c ea 02 c0       	push   0xc002ea4c
c0016eff:	e8 a4 a9 00 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016f04:	83 c4 10             	add    esp,0x10
c0016f07:	85 c0                	test   eax,eax
c0016f09:	75 1d                	jne    c0016f28 <unblockTask(ThreadControlBlock*)+0x58>
c0016f0b:	eb 63                	jmp    c0016f70 <unblockTask(ThreadControlBlock*)+0xa0>
c0016f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f10:	83 ec 08             	sub    esp,0x8
c0016f13:	50                   	push   eax
c0016f14:	68 4c ea 02 c0       	push   0xc002ea4c
c0016f19:	e8 96 ae 00 00       	call   c0021db4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0016f1e:	83 c4 10             	add    esp,0x10
c0016f21:	85 c0                	test   eax,eax
c0016f23:	74 4b                	je     c0016f70 <unblockTask(ThreadControlBlock*)+0xa0>
c0016f25:	8d 76 00             	lea    esi,[esi+0x0]
c0016f28:	39 c3                	cmp    ebx,eax
c0016f2a:	75 e4                	jne    c0016f10 <unblockTask(ThreadControlBlock*)+0x40>
c0016f2c:	eb 12                	jmp    c0016f40 <unblockTask(ThreadControlBlock*)+0x70>
c0016f2e:	66 90                	xchg   ax,ax
c0016f30:	83 ec 0c             	sub    esp,0xc
c0016f33:	68 37 4a 02 c0       	push   0xc0024a37
c0016f38:	e8 27 00 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016f3d:	83 c4 10             	add    esp,0x10
c0016f40:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0016f48:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0016f4d:	85 c0                	test   eax,eax
c0016f4f:	75 03                	jne    c0016f54 <unblockTask(ThreadControlBlock*)+0x84>
c0016f51:	fb                   	sti    
c0016f52:	66 90                	xchg   ax,ax
c0016f54:	83 c4 08             	add    esp,0x8
c0016f57:	5b                   	pop    ebx
c0016f58:	c3                   	ret    
c0016f59:	8d 76 00             	lea    esi,[esi+0x0]
c0016f5c:	83 ec 0c             	sub    esp,0xc
c0016f5f:	68 20 4a 02 c0       	push   0xc0024a20
c0016f64:	e8 fb ff fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016f69:	83 c4 10             	add    esp,0x10
c0016f6c:	eb d2                	jmp    c0016f40 <unblockTask(ThreadControlBlock*)+0x70>
c0016f6e:	66 90                	xchg   ax,ax
c0016f70:	83 ec 08             	sub    esp,0x8
c0016f73:	53                   	push   ebx
c0016f74:	68 4c ea 02 c0       	push   0xc002ea4c
c0016f79:	e8 ee a9 00 00       	call   c002196c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016f7e:	83 c4 10             	add    esp,0x10
c0016f81:	eb bd                	jmp    c0016f40 <unblockTask(ThreadControlBlock*)+0x70>
c0016f83:	90                   	nop

c0016f84 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016f84:	55                   	push   ebp
c0016f85:	57                   	push   edi
c0016f86:	56                   	push   esi
c0016f87:	53                   	push   ebx
c0016f88:	83 ec 1c             	sub    esp,0x1c
c0016f8b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016f8f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016f92:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016f98:	85 ed                	test   ebp,ebp
c0016f9a:	7e 28                	jle    c0016fc4 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016f9c:	31 f6                	xor    esi,esi
c0016f9e:	66 90                	xchg   ax,ax
c0016fa0:	83 ec 0c             	sub    esp,0xc
c0016fa3:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016faa:	83 c6 01             	add    esi,0x1
c0016fad:	57                   	push   edi
c0016fae:	e8 b8 8c ff ff       	call   c000fc6b <free>
c0016fb3:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016fb6:	83 c4 10             	add    esp,0x10
c0016fb9:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016fbf:	7f df                	jg     c0016fa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fc4:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016fce:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016fd3:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0016fd6:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016fd9:	d3 c0                	rol    eax,cl
c0016fdb:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c0016fe2:	21 c8                	and    eax,ecx
c0016fe4:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016feb:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016fee:	89 f7                	mov    edi,esi
c0016ff0:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016ff8:	0f 85 72 01 00 00    	jne    c0017170 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016ffe:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0017004:	85 ed                	test   ebp,ebp
c0017006:	74 1c                	je     c0017024 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0017008:	83 ec 0c             	sub    esp,0xc
c001700b:	55                   	push   ebp
c001700c:	e8 ef 76 ff ff       	call   c000e700 <EnvVarContainer::~EnvVarContainer()>
c0017011:	59                   	pop    ecx
c0017012:	5e                   	pop    esi
c0017013:	6a 0c                	push   0xc
c0017015:	55                   	push   ebp
c0017016:	e8 c8 62 ff ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c001701b:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001701e:	83 c4 10             	add    esp,0x10
c0017021:	89 f7                	mov    edi,esi
c0017023:	90                   	nop
c0017024:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001702a:	85 c0                	test   eax,eax
c001702c:	0f 84 b2 00 00 00    	je     c00170e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0017032:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0017035:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017039:	31 c9                	xor    ecx,ecx
c001703b:	eb 17                	jmp    c0017054 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c001703d:	8d 76 00             	lea    esi,[esi+0x0]
c0017040:	83 c1 01             	add    ecx,0x1
c0017043:	83 f9 10             	cmp    ecx,0x10
c0017046:	0f 84 98 00 00 00    	je     c00170e4 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c001704c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0017052:	66 90                	xchg   ax,ax
c0017054:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001705b:	d3 fa                	sar    edx,cl
c001705d:	80 e2 01             	and    dl,0x1
c0017060:	74 de                	je     c0017040 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017062:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0017065:	01 d2                	add    edx,edx
c0017067:	01 ca                	add    edx,ecx
c0017069:	8d 14 92             	lea    edx,[edx+edx*4]
c001706c:	01 d0                	add    eax,edx
c001706e:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0017074:	83 fd 07             	cmp    ebp,0x7
c0017077:	75 c7                	jne    c0017040 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0017079:	05 40 02 00 00       	add    eax,0x240
c001707e:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0017081:	83 fd ff             	cmp    ebp,0xffffffff
c0017084:	0f 8c ee 00 00 00    	jl     c0017178 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001708a:	0f 84 ac 01 00 00    	je     c001723c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0017090:	85 ed                	test   ebp,ebp
c0017092:	0f 84 90 01 00 00    	je     c0017228 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0017098:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001709a:	75 a4                	jne    c0017040 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001709c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00170a2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00170a6:	01 d0                	add    eax,edx
c00170a8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00170ac:	83 ec 0c             	sub    esp,0xc
c00170af:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c00170b5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00170b8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00170be:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c00170c5:	50                   	push   eax
c00170c6:	e8 05 fe ff ff       	call   c0016ed0 <unblockTask(ThreadControlBlock*)>
c00170cb:	83 c4 10             	add    esp,0x10
c00170ce:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00170d1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00170d5:	89 f7                	mov    edi,esi
c00170d7:	83 c1 01             	add    ecx,0x1
c00170da:	83 f9 10             	cmp    ecx,0x10
c00170dd:	0f 85 69 ff ff ff    	jne    c001704c <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00170e3:	90                   	nop
c00170e4:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00170ea:	85 c0                	test   eax,eax
c00170ec:	74 62                	je     c0017150 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00170ee:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00170f4:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00170fa:	74 54                	je     c0017150 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00170fc:	83 ec 0c             	sub    esp,0xc
c00170ff:	68 4c ea 02 c0       	push   0xc002ea4c
c0017104:	e8 9f a7 00 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0017109:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0017110:	89 c7                	mov    edi,eax
c0017112:	e8 75 a7 00 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017117:	83 c4 10             	add    esp,0x10
c001711a:	84 c0                	test   al,al
c001711c:	0f 84 ce 00 00 00    	je     c00171f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c0017122:	66 90                	xchg   ax,ax
c0017124:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017127:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c001712d:	85 d2                	test   edx,edx
c001712f:	74 0f                	je     c0017140 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c0017131:	83 ec 0c             	sub    esp,0xc
c0017134:	8b 02                	mov    eax,DWORD PTR [edx]
c0017136:	52                   	push   edx
c0017137:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001713a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001713d:	83 c4 10             	add    esp,0x10
c0017140:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001714a:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c001714d:	8d 76 00             	lea    esi,[esi+0x0]
c0017150:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0017156:	85 db                	test   ebx,ebx
c0017158:	74 16                	je     c0017170 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001715a:	83 ec 0c             	sub    esp,0xc
c001715d:	53                   	push   ebx
c001715e:	e8 ad c7 ff ff       	call   c0013910 <VAS::~VAS()>
c0017163:	58                   	pop    eax
c0017164:	5a                   	pop    edx
c0017165:	6a 14                	push   0x14
c0017167:	53                   	push   ebx
c0017168:	e8 76 61 ff ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c001716d:	83 c4 10             	add    esp,0x10
c0017170:	83 c4 1c             	add    esp,0x1c
c0017173:	5b                   	pop    ebx
c0017174:	5e                   	pop    esi
c0017175:	5f                   	pop    edi
c0017176:	5d                   	pop    ebp
c0017177:	c3                   	ret    
c0017178:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001717c:	83 ec 0c             	sub    esp,0xc
c001717f:	68 d4 4a 02 c0       	push   0xc0024ad4
c0017184:	e8 19 8e ff ff       	call   c000ffa2 <KePanic(char const*)>
c0017189:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c001718c:	83 c4 10             	add    esp,0x10
c001718f:	89 f7                	mov    edi,esi
c0017191:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017195:	e9 a6 fe ff ff       	jmp    c0017040 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001719a:	66 90                	xchg   ax,ax
c001719c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00171a2:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c00171a8:	75 1e                	jne    c00171c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00171aa:	83 ec 0c             	sub    esp,0xc
c00171ad:	68 3c 4b 02 c0       	push   0xc0024b3c
c00171b2:	e8 ad fd fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00171b7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00171be:	e8 bd fa ff ff       	call   c0016c80 <blockTask(TaskState)>
c00171c3:	83 c4 10             	add    esp,0x10
c00171c6:	66 90                	xchg   ax,ax
c00171c8:	83 ec 08             	sub    esp,0x8
c00171cb:	56                   	push   esi
c00171cc:	68 4c ea 02 c0       	push   0xc002ea4c
c00171d1:	e8 96 a7 00 00       	call   c002196c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00171d6:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c00171dd:	e8 c6 a6 00 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00171e2:	83 c4 10             	add    esp,0x10
c00171e5:	39 f8                	cmp    eax,edi
c00171e7:	0f 84 37 ff ff ff    	je     c0017124 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00171ed:	8d 76 00             	lea    esi,[esi+0x0]
c00171f0:	83 ec 0c             	sub    esp,0xc
c00171f3:	68 4c ea 02 c0       	push   0xc002ea4c
c00171f8:	e8 ab a6 00 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00171fd:	c7 04 24 4c ea 02 c0 	mov    DWORD PTR [esp],0xc002ea4c
c0017204:	89 c6                	mov    esi,eax
c0017206:	e8 a5 a6 00 00       	call   c00218b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001720b:	83 c4 10             	add    esp,0x10
c001720e:	39 f3                	cmp    ebx,esi
c0017210:	74 b6                	je     c00171c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0017212:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0017215:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017218:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c001721e:	75 a8                	jne    c00171c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0017220:	e9 77 ff ff ff       	jmp    c001719c <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c0017225:	8d 76 00             	lea    esi,[esi+0x0]
c0017228:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001722c:	83 ec 0c             	sub    esp,0xc
c001722f:	68 08 4b 02 c0       	push   0xc0024b08
c0017234:	e9 4b ff ff ff       	jmp    c0017184 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c0017239:	8d 76 00             	lea    esi,[esi+0x0]
c001723c:	8b 36                	mov    esi,DWORD PTR [esi]
c001723e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0017242:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0017245:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017248:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c001724e:	01 d7                	add    edi,edx
c0017250:	89 f8                	mov    eax,edi
c0017252:	e9 51 fe ff ff       	jmp    c00170a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c0017257:	90                   	nop

c0017258 <cleanerTaskFunction(void*)>:
c0017258:	53                   	push   ebx
c0017259:	83 ec 08             	sub    esp,0x8
c001725c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017264:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017269:	85 c0                	test   eax,eax
c001726b:	75 03                	jne    c0017270 <cleanerTaskFunction(void*)+0x18>
c001726d:	fb                   	sti    
c001726e:	66 90                	xchg   ax,ax
c0017270:	fa                   	cli    
c0017271:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017276:	83 c0 01             	add    eax,0x1
c0017279:	80 3d 14 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea14,0x0
c0017280:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017285:	0f 85 c9 00 00 00    	jne    c0017354 <cleanerTaskFunction(void*)+0xfc>
c001728b:	83 ec 0c             	sub    esp,0xc
c001728e:	6a 02                	push   0x2
c0017290:	e8 bf f9 ff ff       	call   c0016c54 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017295:	83 c4 10             	add    esp,0x10
c0017298:	c6 05 14 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea14,0x0
c001729f:	fa                   	cli    
c00172a0:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c00172a6:	8b 1d 2c ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea2c
c00172ac:	83 c1 01             	add    ecx,0x1
c00172af:	83 c3 01             	add    ebx,0x1
c00172b2:	89 0d 30 ea 02 c0    	mov    DWORD PTR ds:0xc002ea30,ecx
c00172b8:	89 1d 2c ea 02 c0    	mov    DWORD PTR ds:0xc002ea2c,ebx
c00172be:	fa                   	cli    
c00172bf:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00172c4:	83 c0 01             	add    eax,0x1
c00172c7:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00172cc:	eb 2a                	jmp    c00172f8 <cleanerTaskFunction(void*)+0xa0>
c00172ce:	66 90                	xchg   ax,ax
c00172d0:	83 ec 0c             	sub    esp,0xc
c00172d3:	68 34 ea 02 c0       	push   0xc002ea34
c00172d8:	e8 cb a5 00 00       	call   c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00172dd:	c7 04 24 34 ea 02 c0 	mov    DWORD PTR [esp],0xc002ea34
c00172e4:	89 c3                	mov    ebx,eax
c00172e6:	e8 c5 a5 00 00       	call   c00218b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00172eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00172ee:	e8 91 fc ff ff       	call   c0016f84 <cleanupTerminatedTask(ThreadControlBlock*)>
c00172f3:	83 c4 10             	add    esp,0x10
c00172f6:	66 90                	xchg   ax,ax
c00172f8:	83 ec 0c             	sub    esp,0xc
c00172fb:	68 34 ea 02 c0       	push   0xc002ea34
c0017300:	e8 87 a5 00 00       	call   c002188c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0017305:	83 c4 10             	add    esp,0x10
c0017308:	84 c0                	test   al,al
c001730a:	74 c4                	je     c00172d0 <cleanerTaskFunction(void*)+0x78>
c001730c:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017314:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c001731a:	85 d2                	test   edx,edx
c001731c:	75 02                	jne    c0017320 <cleanerTaskFunction(void*)+0xc8>
c001731e:	fb                   	sti    
c001731f:	90                   	nop
c0017320:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0017325:	83 e8 01             	sub    eax,0x1
c0017328:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c001732d:	0f 85 29 ff ff ff    	jne    c001725c <cleanerTaskFunction(void*)+0x4>
c0017333:	a1 28 ea 02 c0       	mov    eax,ds:0xc002ea28
c0017338:	85 c0                	test   eax,eax
c001733a:	0f 84 1c ff ff ff    	je     c001725c <cleanerTaskFunction(void*)+0x4>
c0017340:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c001734a:	e8 71 f8 ff ff       	call   c0016bc0 <schedule()>
c001734f:	e9 08 ff ff ff       	jmp    c001725c <cleanerTaskFunction(void*)+0x4>
c0017354:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001735c:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017361:	85 c0                	test   eax,eax
c0017363:	0f 85 2f ff ff ff    	jne    c0017298 <cleanerTaskFunction(void*)+0x40>
c0017369:	fb                   	sti    
c001736a:	e9 29 ff ff ff       	jmp    c0017298 <cleanerTaskFunction(void*)+0x40>
c001736f:	90                   	nop

c0017370 <terminateTask(int)>:
c0017370:	83 ec 14             	sub    esp,0x14
c0017373:	fa                   	cli    
c0017374:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017379:	83 c0 01             	add    eax,0x1
c001737c:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c0017381:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0017386:	83 c0 01             	add    eax,0x1
c0017389:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c001738e:	fa                   	cli    
c001738f:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017394:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017398:	83 c0 01             	add    eax,0x1
c001739b:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c00173a0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173a5:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c00173a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173ad:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00173b0:	50                   	push   eax
c00173b1:	68 34 ea 02 c0       	push   0xc002ea34
c00173b6:	e8 b1 a5 00 00       	call   c002196c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00173bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00173c0:	83 c4 10             	add    esp,0x10
c00173c3:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c00173ca:	a1 10 ea 02 c0       	mov    eax,ds:0xc002ea10
c00173cf:	85 c0                	test   eax,eax
c00173d1:	0f 84 81 00 00 00    	je     c0017458 <terminateTask(int)+0xe8>
c00173d7:	83 ec 0c             	sub    esp,0xc
c00173da:	c6 05 14 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea14,0x1
c00173e1:	50                   	push   eax
c00173e2:	e8 e9 fa ff ff       	call   c0016ed0 <unblockTask(ThreadControlBlock*)>
c00173e7:	83 c4 10             	add    esp,0x10
c00173ea:	66 90                	xchg   ax,ax
c00173ec:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c00173f4:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c00173f9:	85 c0                	test   eax,eax
c00173fb:	75 03                	jne    c0017400 <terminateTask(int)+0x90>
c00173fd:	fb                   	sti    
c00173fe:	66 90                	xchg   ax,ax
c0017400:	a1 2c ea 02 c0       	mov    eax,ds:0xc002ea2c
c0017405:	83 e8 01             	sub    eax,0x1
c0017408:	a3 2c ea 02 c0       	mov    ds:0xc002ea2c,eax
c001740d:	75 09                	jne    c0017418 <terminateTask(int)+0xa8>
c001740f:	83 3d 28 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea28,0x0
c0017416:	75 54                	jne    c001746c <terminateTask(int)+0xfc>
c0017418:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c0017420:	8b 0d 30 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea30
c0017426:	85 c9                	test   ecx,ecx
c0017428:	75 06                	jne    c0017430 <terminateTask(int)+0xc0>
c001742a:	66 90                	xchg   ax,ax
c001742c:	fb                   	sti    
c001742d:	8d 76 00             	lea    esi,[esi+0x0]
c0017430:	fa                   	cli    
c0017431:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c0017436:	83 c0 01             	add    eax,0x1
c0017439:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001743e:	e8 7d f7 ff ff       	call   c0016bc0 <schedule()>
c0017443:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001744b:	8b 15 30 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ea30
c0017451:	85 d2                	test   edx,edx
c0017453:	75 db                	jne    c0017430 <terminateTask(int)+0xc0>
c0017455:	eb d5                	jmp    c001742c <terminateTask(int)+0xbc>
c0017457:	90                   	nop
c0017458:	83 ec 0c             	sub    esp,0xc
c001745b:	68 4e 4a 02 c0       	push   0xc0024a4e
c0017460:	e8 ff fa fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017465:	83 c4 10             	add    esp,0x10
c0017468:	eb 82                	jmp    c00173ec <terminateTask(int)+0x7c>
c001746a:	66 90                	xchg   ax,ax
c001746c:	c7 05 28 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea28,0x0
c0017476:	e8 45 f7 ff ff       	call   c0016bc0 <schedule()>
c001747b:	eb 9b                	jmp    c0017418 <terminateTask(int)+0xa8>
c001747d:	8d 76 00             	lea    esi,[esi+0x0]

c0017480 <Thr::terminateFromIRQ(int)>:
c0017480:	83 ec 18             	sub    esp,0x18
c0017483:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017487:	50                   	push   eax
c0017488:	e8 e3 fe ff ff       	call   c0017370 <terminateTask(int)>
c001748d:	8d 76 00             	lea    esi,[esi+0x0]

c0017490 <__static_initialization_and_destruction_0(int, int)>:
c0017490:	83 ec 0c             	sub    esp,0xc
c0017493:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0017498:	0f 85 8e 00 00 00    	jne    c001752c <__static_initialization_and_destruction_0(int, int)+0x9c>
c001749e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00174a6:	0f 85 80 00 00 00    	jne    c001752c <__static_initialization_and_destruction_0(int, int)+0x9c>
c00174ac:	83 ec 0c             	sub    esp,0xc
c00174af:	68 4c ea 02 c0       	push   0xc002ea4c
c00174b4:	e8 53 a9 00 00       	call   c0021e0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00174b9:	83 c4 10             	add    esp,0x10
c00174bc:	83 ec 04             	sub    esp,0x4
c00174bf:	68 58 5b 02 c0       	push   0xc0025b58
c00174c4:	68 4c ea 02 c0       	push   0xc002ea4c
c00174c9:	68 bc 1d 02 c0       	push   0xc0021dbc
c00174ce:	e8 c0 5d ff ff       	call   c000d293 <__cxa_atexit>
c00174d3:	83 c4 10             	add    esp,0x10
c00174d6:	83 ec 0c             	sub    esp,0xc
c00174d9:	68 40 ea 02 c0       	push   0xc002ea40
c00174de:	e8 29 a9 00 00       	call   c0021e0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00174e3:	83 c4 10             	add    esp,0x10
c00174e6:	83 ec 04             	sub    esp,0x4
c00174e9:	68 58 5b 02 c0       	push   0xc0025b58
c00174ee:	68 40 ea 02 c0       	push   0xc002ea40
c00174f3:	68 bc 1d 02 c0       	push   0xc0021dbc
c00174f8:	e8 96 5d ff ff       	call   c000d293 <__cxa_atexit>
c00174fd:	83 c4 10             	add    esp,0x10
c0017500:	83 ec 0c             	sub    esp,0xc
c0017503:	68 34 ea 02 c0       	push   0xc002ea34
c0017508:	e8 ff a8 00 00       	call   c0021e0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001750d:	83 c4 10             	add    esp,0x10
c0017510:	83 ec 04             	sub    esp,0x4
c0017513:	68 58 5b 02 c0       	push   0xc0025b58
c0017518:	68 34 ea 02 c0       	push   0xc002ea34
c001751d:	68 bc 1d 02 c0       	push   0xc0021dbc
c0017522:	e8 6c 5d ff ff       	call   c000d293 <__cxa_atexit>
c0017527:	83 c4 10             	add    esp,0x10
c001752a:	66 90                	xchg   ax,ax
c001752c:	90                   	nop
c001752d:	83 c4 0c             	add    esp,0xc
c0017530:	c3                   	ret    
c0017531:	8d 76 00             	lea    esi,[esi+0x0]

c0017534 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0017534:	83 ec 0c             	sub    esp,0xc
c0017537:	83 ec 08             	sub    esp,0x8
c001753a:	68 ff ff 00 00       	push   0xffff
c001753f:	6a 01                	push   0x1
c0017541:	e8 4a ff ff ff       	call   c0017490 <__static_initialization_and_destruction_0(int, int)>
c0017546:	83 c4 10             	add    esp,0x10
c0017549:	83 c4 0c             	add    esp,0xc
c001754c:	c3                   	ret    

c001754d <Vm::inbv(unsigned short)>:
c001754d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017551:	66 81 fa fe fe       	cmp    dx,0xfefe
c0017556:	75 06                	jne    c001755e <Vm::inbv(unsigned short)+0x11>
c0017558:	a0 90 ea 02 c0       	mov    al,ds:0xc002ea90
c001755d:	c3                   	ret    
c001755e:	ec                   	in     al,dx
c001755f:	c3                   	ret    

c0017560 <Vm::outbv(unsigned short, unsigned char)>:
c0017560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017564:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017568:	66 81 fa fe fe       	cmp    dx,0xfefe
c001756d:	75 25                	jne    c0017594 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001756f:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c0017575:	8d 51 01             	lea    edx,[ecx+0x1]
c0017578:	88 81 a0 ea 02 c0    	mov    BYTE PTR [ecx-0x3ffd1560],al
c001757e:	89 15 90 ea 02 c0    	mov    DWORD PTR ds:0xc002ea90,edx
c0017584:	83 fa 20             	cmp    edx,0x20
c0017587:	75 0c                	jne    c0017595 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0017589:	c7 05 90 ea 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x1f
c0017593:	c3                   	ret    
c0017594:	ee                   	out    dx,al
c0017595:	c3                   	ret    

c0017596 <Vm::realToLinear(unsigned short, unsigned short)>:
c0017596:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001759b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00175a0:	c1 e0 04             	shl    eax,0x4
c00175a3:	01 d0                	add    eax,edx
c00175a5:	c3                   	ret    

c00175a6 <Vm::getSegment(unsigned int)>:
c00175a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175aa:	c1 e8 10             	shr    eax,0x10
c00175ad:	c3                   	ret    

c00175ae <Vm::getOffset(unsigned int)>:
c00175ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175b2:	c3                   	ret    

c00175b3 <Vm::mainloop2()>:
c00175b3:	83 ec 18             	sub    esp,0x18
c00175b6:	fa                   	cli    
c00175b7:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00175bd:	6a 02                	push   0x2
c00175bf:	c6 05 89 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea89,0x1
c00175c6:	e8 89 f6 ff ff       	call   c0016c54 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00175cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00175d0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00175d4:	52                   	push   edx
c00175d5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00175d9:	52                   	push   edx
c00175da:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00175de:	52                   	push   edx
c00175df:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00175e3:	50                   	push   eax
c00175e4:	e8 26 8c fe ff       	call   c000020f <goToVM86>
c00175e9:	83 c4 2c             	add    esp,0x2c
c00175ec:	c3                   	ret    

c00175ed <Vm::mainVm8086Loop(void*)>:
c00175ed:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00175f4:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00175fb:	75 01                	jne    c00175fe <Vm::mainVm8086Loop(void*)+0x11>
c00175fd:	fb                   	sti    
c00175fe:	eb b3                	jmp    c00175b3 <Vm::mainloop2()>

c0017600 <Vm::mainloop3(unsigned long)>:
c0017600:	83 ec 18             	sub    esp,0x18
c0017603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017607:	fa                   	cli    
c0017608:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001760e:	6a 02                	push   0x2
c0017610:	c6 05 88 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea88,0x1
c0017617:	a3 84 ea 02 c0       	mov    ds:0xc002ea84,eax
c001761c:	e8 33 f6 ff ff       	call   c0016c54 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0017621:	83 c4 1c             	add    esp,0x1c
c0017624:	eb 8d                	jmp    c00175b3 <Vm::mainloop2()>

c0017626 <Vm::initialise8086()>:
c0017626:	83 ec 0c             	sub    esp,0xc
c0017629:	68 80 00 00 00       	push   0x80
c001762e:	6a 00                	push   0x0
c0017630:	68 ed 75 01 c0       	push   0xc00175ed
c0017635:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001763b:	e8 28 f3 ff ff       	call   c0016968 <Process::createThread(void (*)(void*), void*, int)>
c0017640:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0017647:	a3 8c ea 02 c0       	mov    ds:0xc002ea8c,eax
c001764c:	68 10 01 00 00       	push   0x110
c0017651:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0017656:	6a 00                	push   0x0
c0017658:	6a 00                	push   0x0
c001765a:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0017660:	e8 fd c5 ff ff       	call   c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017665:	83 c4 2c             	add    esp,0x2c
c0017668:	c3                   	ret    

c0017669 <Vm::resetConventionalMemory8086()>:
c0017669:	c3                   	ret    

c001766a <Vm::finish8086()>:
c001766a:	53                   	push   ebx
c001766b:	83 ec 08             	sub    esp,0x8
c001766e:	fa                   	cli    
c001766f:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017675:	80 3d 88 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea88,0x0
c001767c:	75 18                	jne    c0017696 <Vm::finish8086()+0x2c>
c001767e:	e8 3d f5 ff ff       	call   c0016bc0 <schedule()>
c0017683:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001768a:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017691:	75 db                	jne    c001766e <Vm::finish8086()+0x4>
c0017693:	fb                   	sti    
c0017694:	eb d8                	jmp    c001766e <Vm::finish8086()+0x4>
c0017696:	83 ec 0c             	sub    esp,0xc
c0017699:	8b 1d 84 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea84
c001769f:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c00176a5:	c6 05 88 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea88,0x0
c00176ac:	e8 1f f8 ff ff       	call   c0016ed0 <unblockTask(ThreadControlBlock*)>
c00176b1:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00176b8:	83 c4 10             	add    esp,0x10
c00176bb:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00176c2:	75 01                	jne    c00176c5 <Vm::finish8086()+0x5b>
c00176c4:	fb                   	sti    
c00176c5:	89 d8                	mov    eax,ebx
c00176c7:	83 c4 08             	add    esp,0x8
c00176ca:	5b                   	pop    ebx
c00176cb:	c3                   	ret    

c00176cc <Vm::getOutput8086(unsigned char*)>:
c00176cc:	57                   	push   edi
c00176cd:	8b 0d 90 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea90
c00176d3:	56                   	push   esi
c00176d4:	be a0 ea 02 c0       	mov    esi,0xc002eaa0
c00176d9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00176dd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00176df:	a1 90 ea 02 c0       	mov    eax,ds:0xc002ea90
c00176e4:	5e                   	pop    esi
c00176e5:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c00176ef:	5f                   	pop    edi
c00176f0:	c3                   	ret    

c00176f1 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00176f1:	55                   	push   ebp
c00176f2:	57                   	push   edi
c00176f3:	56                   	push   esi
c00176f4:	53                   	push   ebx
c00176f5:	83 ec 2c             	sub    esp,0x2c
c00176f8:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00176fc:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017700:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017704:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0017708:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001770c:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017713:	75 5d                	jne    c0017772 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017715:	83 ec 0c             	sub    esp,0xc
c0017718:	68 14 01 00 00       	push   0x114
c001771d:	e8 39 85 ff ff       	call   c000fc5b <malloc>
c0017722:	83 c4 0c             	add    esp,0xc
c0017725:	89 c7                	mov    edi,eax
c0017727:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001772d:	68 64 4b 02 c0       	push   0xc0024b64
c0017732:	50                   	push   eax
c0017733:	e8 fa 09 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017738:	58                   	pop    eax
c0017739:	5a                   	pop    edx
c001773a:	6a 12                	push   0x12
c001773c:	57                   	push   edi
c001773d:	e8 0e 0a ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0017742:	59                   	pop    ecx
c0017743:	8b 07                	mov    eax,DWORD PTR [edi]
c0017745:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0017749:	51                   	push   ecx
c001774a:	6a 00                	push   0x0
c001774c:	6a 00                	push   0x0
c001774e:	68 00 00 11 00       	push   0x110000
c0017753:	57                   	push   edi
c0017754:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017757:	83 c4 14             	add    esp,0x14
c001775a:	57                   	push   edi
c001775b:	e8 4e 0a ff ff       	call   c00081ae <File::close()>
c0017760:	8b 07                	mov    eax,DWORD PTR [edi]
c0017762:	89 3c 24             	mov    DWORD PTR [esp],edi
c0017765:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017768:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c001776f:	83 c4 10             	add    esp,0x10
c0017772:	fa                   	cli    
c0017773:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0017779:	80 3d 89 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea89,0x0
c0017780:	75 18                	jne    c001779a <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0017782:	e8 39 f4 ff ff       	call   c0016bc0 <schedule()>
c0017787:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001778e:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017795:	75 db                	jne    c0017772 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017797:	fb                   	sti    
c0017798:	eb d8                	jmp    c0017772 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c001779a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001779e:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c00177a3:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c00177ad:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c00177b1:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c00177b5:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00177b9:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00177bd:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00177c1:	0f b7 f6             	movzx  esi,si
c00177c4:	0f b7 db             	movzx  ebx,bx
c00177c7:	50                   	push   eax
c00177c8:	6a 20                	push   0x20
c00177ca:	6a 00                	push   0x0
c00177cc:	68 a0 ea 02 c0       	push   0xc002eaa0
c00177d1:	e8 1a 8d fe ff       	call   c00004f0 <memset>
c00177d6:	5a                   	pop    edx
c00177d7:	59                   	pop    ecx
c00177d8:	56                   	push   esi
c00177d9:	53                   	push   ebx
c00177da:	e8 b7 fd ff ff       	call   c0017596 <Vm::realToLinear(unsigned short, unsigned short)>
c00177df:	83 c4 10             	add    esp,0x10
c00177e2:	89 c7                	mov    edi,eax
c00177e4:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00177e8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00177ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00177ee:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c00177f5:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00177fc:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017803:	75 01                	jne    c0017806 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0017805:	fb                   	sti    
c0017806:	83 ec 0c             	sub    esp,0xc
c0017809:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c001780f:	e8 bc f6 ff ff       	call   c0016ed0 <unblockTask(ThreadControlBlock*)>
c0017814:	83 c4 3c             	add    esp,0x3c
c0017817:	b0 01                	mov    al,0x1
c0017819:	5b                   	pop    ebx
c001781a:	5e                   	pop    esi
c001781b:	5f                   	pop    edi
c001781c:	5d                   	pop    ebp
c001781d:	c3                   	ret    

c001781e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001781e:	55                   	push   ebp
c001781f:	57                   	push   edi
c0017820:	56                   	push   esi
c0017821:	53                   	push   ebx
c0017822:	83 ec 2c             	sub    esp,0x2c
c0017825:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017829:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001782d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017831:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017835:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017839:	80 3d 80 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea80,0x0
c0017840:	75 5d                	jne    c001789f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0017842:	83 ec 0c             	sub    esp,0xc
c0017845:	68 14 01 00 00       	push   0x114
c001784a:	e8 0c 84 ff ff       	call   c000fc5b <malloc>
c001784f:	83 c4 0c             	add    esp,0xc
c0017852:	89 c6                	mov    esi,eax
c0017854:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001785a:	68 64 4b 02 c0       	push   0xc0024b64
c001785f:	50                   	push   eax
c0017860:	e8 cd 08 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017865:	58                   	pop    eax
c0017866:	5a                   	pop    edx
c0017867:	6a 12                	push   0x12
c0017869:	56                   	push   esi
c001786a:	e8 e1 08 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001786f:	59                   	pop    ecx
c0017870:	8b 06                	mov    eax,DWORD PTR [esi]
c0017872:	8d 54 24 24          	lea    edx,[esp+0x24]
c0017876:	52                   	push   edx
c0017877:	6a 00                	push   0x0
c0017879:	6a 00                	push   0x0
c001787b:	68 00 00 11 00       	push   0x110000
c0017880:	56                   	push   esi
c0017881:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0017884:	83 c4 14             	add    esp,0x14
c0017887:	56                   	push   esi
c0017888:	e8 21 09 ff ff       	call   c00081ae <File::close()>
c001788d:	8b 06                	mov    eax,DWORD PTR [esi]
c001788f:	89 34 24             	mov    DWORD PTR [esp],esi
c0017892:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017895:	c6 05 80 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea80,0x1
c001789c:	83 c4 10             	add    esp,0x10
c001789f:	50                   	push   eax
c00178a0:	50                   	push   eax
c00178a1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00178a5:	68 7f 4b 02 c0       	push   0xc0024b7f
c00178aa:	e8 b5 f6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00178af:	83 c4 10             	add    esp,0x10
c00178b2:	fa                   	cli    
c00178b3:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c00178b9:	0f b6 35 89 ea 02 c0 	movzx  esi,BYTE PTR ds:0xc002ea89
c00178c0:	89 f0                	mov    eax,esi
c00178c2:	84 c0                	test   al,al
c00178c4:	75 18                	jne    c00178de <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c00178c6:	e8 f5 f2 ff ff       	call   c0016bc0 <schedule()>
c00178cb:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00178d2:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00178d9:	75 d7                	jne    c00178b2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00178db:	fb                   	sti    
c00178dc:	eb d4                	jmp    c00178b2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c00178de:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00178e2:	a1 8c ea 02 c0       	mov    eax,ds:0xc002ea8c
c00178e7:	c7 05 90 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ea90,0x0
c00178f1:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c00178f5:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c00178f9:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00178fd:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c0017901:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0017905:	50                   	push   eax
c0017906:	6a 20                	push   0x20
c0017908:	6a 00                	push   0x0
c001790a:	68 a0 ea 02 c0       	push   0xc002eaa0
c001790f:	e8 dc 8b fe ff       	call   c00004f0 <memset>
c0017914:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001791b:	e8 3b 83 ff ff       	call   c000fc5b <malloc>
c0017920:	83 c4 0c             	add    esp,0xc
c0017923:	89 c3                	mov    ebx,eax
c0017925:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001792b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001792f:	50                   	push   eax
c0017930:	e8 fd 07 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0017935:	83 c4 10             	add    esp,0x10
c0017938:	85 db                	test   ebx,ebx
c001793a:	75 0a                	jne    c0017946 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x128>
c001793c:	83 ec 0c             	sub    esp,0xc
c001793f:	68 a1 4b 02 c0       	push   0xc0024ba1
c0017944:	eb 2b                	jmp    c0017971 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x153>
c0017946:	50                   	push   eax
c0017947:	8d 44 24 17          	lea    eax,[esp+0x17]
c001794b:	50                   	push   eax
c001794c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017950:	50                   	push   eax
c0017951:	53                   	push   ebx
c0017952:	e8 fb 0a ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0017957:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001795b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001795f:	83 c4 10             	add    esp,0x10
c0017962:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0017967:	74 28                	je     c0017991 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x173>
c0017969:	83 ec 0c             	sub    esp,0xc
c001796c:	68 b5 4b 02 c0       	push   0xc0024bb5
c0017971:	e8 2c 86 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0017976:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001797d:	83 c4 10             	add    esp,0x10
c0017980:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017987:	75 01                	jne    c001798a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0017989:	fb                   	sti    
c001798a:	31 f6                	xor    esi,esi
c001798c:	e9 91 00 00 00       	jmp    c0017a22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0017991:	51                   	push   ecx
c0017992:	51                   	push   ecx
c0017993:	6a 01                	push   0x1
c0017995:	53                   	push   ebx
c0017996:	e8 b5 07 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001799b:	83 c4 10             	add    esp,0x10
c001799e:	85 c0                	test   eax,eax
c00179a0:	74 27                	je     c00179c9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ab>
c00179a2:	83 ec 0c             	sub    esp,0xc
c00179a5:	68 ce 4b 02 c0       	push   0xc0024bce
c00179aa:	e8 f3 85 ff ff       	call   c000ffa2 <KePanic(char const*)>
c00179af:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c00179b6:	83 c4 10             	add    esp,0x10
c00179b9:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c00179c0:	75 c8                	jne    c001798a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c00179c2:	fb                   	sti    
c00179c3:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00179c7:	eb 59                	jmp    c0017a22 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c00179c9:	0f b7 ff             	movzx  edi,di
c00179cc:	50                   	push   eax
c00179cd:	50                   	push   eax
c00179ce:	0f b7 c5             	movzx  eax,bp
c00179d1:	57                   	push   edi
c00179d2:	50                   	push   eax
c00179d3:	e8 be fb ff ff       	call   c0017596 <Vm::realToLinear(unsigned short, unsigned short)>
c00179d8:	5a                   	pop    edx
c00179d9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00179db:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00179df:	51                   	push   ecx
c00179e0:	50                   	push   eax
c00179e1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00179e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00179e9:	53                   	push   ebx
c00179ea:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00179ed:	83 c4 14             	add    esp,0x14
c00179f0:	53                   	push   ebx
c00179f1:	e8 b8 07 ff ff       	call   c00081ae <File::close()>
c00179f6:	c6 05 89 ea 02 c0 00 	mov    BYTE PTR ds:0xc002ea89,0x0
c00179fd:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0017a04:	83 c4 10             	add    esp,0x10
c0017a07:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0017a0e:	75 01                	jne    c0017a11 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f3>
c0017a10:	fb                   	sti    
c0017a11:	83 ec 0c             	sub    esp,0xc
c0017a14:	ff 35 8c ea 02 c0    	push   DWORD PTR ds:0xc002ea8c
c0017a1a:	e8 b1 f4 ff ff       	call   c0016ed0 <unblockTask(ThreadControlBlock*)>
c0017a1f:	83 c4 10             	add    esp,0x10
c0017a22:	83 c4 2c             	add    esp,0x2c
c0017a25:	89 f0                	mov    eax,esi
c0017a27:	5b                   	pop    ebx
c0017a28:	5e                   	pop    esi
c0017a29:	5f                   	pop    edi
c0017a2a:	5d                   	pop    ebp
c0017a2b:	c3                   	ret    

c0017a2c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0017a2c:	57                   	push   edi
c0017a2d:	56                   	push   esi
c0017a2e:	53                   	push   ebx
c0017a2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a37:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017a3b:	83 e8 06             	sub    eax,0x6
c0017a3e:	0f b7 c0             	movzx  eax,ax
c0017a41:	50                   	push   eax
c0017a42:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0017a47:	50                   	push   eax
c0017a48:	e8 49 fb ff ff       	call   c0017596 <Vm::realToLinear(unsigned short, unsigned short)>
c0017a4d:	5a                   	pop    edx
c0017a4e:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017a51:	59                   	pop    ecx
c0017a52:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017a55:	8d 51 fa             	lea    edx,[ecx-0x6]
c0017a58:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017a5e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017a61:	8d 56 02             	lea    edx,[esi+0x2]
c0017a64:	66 89 10             	mov    WORD PTR [eax],dx
c0017a67:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0017a6b:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017a6f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017a72:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0017a76:	0f b6 f1             	movzx  esi,cl
c0017a79:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017a7d:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017a83:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0017a87:	0f b6 d5             	movzx  edx,ch
c0017a8a:	74 0a                	je     c0017a96 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0017a8c:	c1 e2 08             	shl    edx,0x8
c0017a8f:	09 f2                	or     edx,esi
c0017a91:	80 ce 02             	or     dh,0x2
c0017a94:	eb 08                	jmp    c0017a9e <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0017a96:	c1 e2 08             	shl    edx,0x8
c0017a99:	09 f2                	or     edx,esi
c0017a9b:	80 e6 fd             	and    dh,0xfd
c0017a9e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017aa2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017aa7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017aab:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017ab3:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0017ab6:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017abe:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017ac1:	5b                   	pop    ebx
c0017ac2:	5e                   	pop    esi
c0017ac3:	5f                   	pop    edi
c0017ac4:	c3                   	ret    

c0017ac5 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017ac5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017aca:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017acf:	c1 e0 04             	shl    eax,0x4
c0017ad2:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017ad5:	c3                   	ret    

c0017ad6 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0017ad6:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017adb:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017ae0:	c1 e0 04             	shl    eax,0x4
c0017ae3:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0017ae7:	c3                   	ret    

c0017ae8 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0017ae8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017aed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017af2:	c1 e0 04             	shl    eax,0x4
c0017af5:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0017af8:	c3                   	ret    

c0017af9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0017af9:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017afe:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017b03:	c1 e0 04             	shl    eax,0x4
c0017b06:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017b0a:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0017b0d:	c3                   	ret    

c0017b0e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0017b0e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017b13:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017b18:	c1 e0 04             	shl    eax,0x4
c0017b1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017b1f:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0017b23:	c3                   	ret    

c0017b24 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0017b24:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0017b29:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017b2e:	c1 e0 04             	shl    eax,0x4
c0017b31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017b35:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0017b38:	c3                   	ret    

c0017b39 <Vm::faultHandler(regs*)>:
c0017b39:	55                   	push   ebp
c0017b3a:	57                   	push   edi
c0017b3b:	56                   	push   esi
c0017b3c:	53                   	push   ebx
c0017b3d:	83 ec 2c             	sub    esp,0x2c
c0017b40:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017b44:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0017b47:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0017b4b:	0f b7 f8             	movzx  edi,ax
c0017b4e:	52                   	push   edx
c0017b4f:	0f b7 c0             	movzx  eax,ax
c0017b52:	50                   	push   eax
c0017b53:	e8 3e fa ff ff       	call   c0017596 <Vm::realToLinear(unsigned short, unsigned short)>
c0017b58:	5a                   	pop    edx
c0017b59:	59                   	pop    ecx
c0017b5a:	89 c1                	mov    ecx,eax
c0017b5c:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017b5f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b63:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0017b68:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017b6c:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017b6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017b73:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0017b78:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017b80:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b84:	e8 0d fa ff ff       	call   c0017596 <Vm::realToLinear(unsigned short, unsigned short)>
c0017b89:	5e                   	pop    esi
c0017b8a:	be 06 00 00 00       	mov    esi,0x6
c0017b8f:	5d                   	pop    ebp
c0017b90:	31 ed                	xor    ebp,ebp
c0017b92:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017b97:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0017b9a:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017ba0:	0f 84 74 02 00 00    	je     c0017e1a <Vm::faultHandler(regs*)+0x2e1>
c0017ba6:	0f 87 94 00 00 00    	ja     c0017c40 <Vm::faultHandler(regs*)+0x107>
c0017bac:	83 fa 66             	cmp    edx,0x66
c0017baf:	0f 84 e2 01 00 00    	je     c0017d97 <Vm::faultHandler(regs*)+0x25e>
c0017bb5:	77 47                	ja     c0017bfe <Vm::faultHandler(regs*)+0xc5>
c0017bb7:	83 fa 36             	cmp    edx,0x36
c0017bba:	0f 84 ca 01 00 00    	je     c0017d8a <Vm::faultHandler(regs*)+0x251>
c0017bc0:	77 1a                	ja     c0017bdc <Vm::faultHandler(regs*)+0xa3>
c0017bc2:	83 fa 26             	cmp    edx,0x26
c0017bc5:	0f 84 98 01 00 00    	je     c0017d63 <Vm::faultHandler(regs*)+0x22a>
c0017bcb:	83 fa 2e             	cmp    edx,0x2e
c0017bce:	0f 85 21 06 00 00    	jne    c00181f5 <Vm::faultHandler(regs*)+0x6bc>
c0017bd4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017bd7:	31 f6                	xor    esi,esi
c0017bd9:	41                   	inc    ecx
c0017bda:	eb bb                	jmp    c0017b97 <Vm::faultHandler(regs*)+0x5e>
c0017bdc:	83 fa 64             	cmp    edx,0x64
c0017bdf:	0f 84 8b 01 00 00    	je     c0017d70 <Vm::faultHandler(regs*)+0x237>
c0017be5:	0f 87 92 01 00 00    	ja     c0017d7d <Vm::faultHandler(regs*)+0x244>
c0017beb:	83 fa 3e             	cmp    edx,0x3e
c0017bee:	0f 85 01 06 00 00    	jne    c00181f5 <Vm::faultHandler(regs*)+0x6bc>
c0017bf4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017bf7:	be 01 00 00 00       	mov    esi,0x1
c0017bfc:	eb db                	jmp    c0017bd9 <Vm::faultHandler(regs*)+0xa0>
c0017bfe:	83 fa 6d             	cmp    edx,0x6d
c0017c01:	0f 84 34 03 00 00    	je     c0017f3b <Vm::faultHandler(regs*)+0x402>
c0017c07:	77 17                	ja     c0017c20 <Vm::faultHandler(regs*)+0xe7>
c0017c09:	83 fa 67             	cmp    edx,0x67
c0017c0c:	0f 84 92 01 00 00    	je     c0017da4 <Vm::faultHandler(regs*)+0x26b>
c0017c12:	83 fa 6c             	cmp    edx,0x6c
c0017c15:	0f 84 b1 02 00 00    	je     c0017ecc <Vm::faultHandler(regs*)+0x393>
c0017c1b:	e9 d5 05 00 00       	jmp    c00181f5 <Vm::faultHandler(regs*)+0x6bc>
c0017c20:	83 fa 6f             	cmp    edx,0x6f
c0017c23:	0f 84 3d 04 00 00    	je     c0018066 <Vm::faultHandler(regs*)+0x52d>
c0017c29:	0f 82 9f 03 00 00    	jb     c0017fce <Vm::faultHandler(regs*)+0x495>
c0017c2f:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0017c35:	0f 84 76 01 00 00    	je     c0017db1 <Vm::faultHandler(regs*)+0x278>
c0017c3b:	e9 b5 05 00 00       	jmp    c00181f5 <Vm::faultHandler(regs*)+0x6bc>
c0017c40:	81 fa ec 00 00 00    	cmp    edx,0xec
c0017c46:	0f 84 51 05 00 00    	je     c001819d <Vm::faultHandler(regs*)+0x664>
c0017c4c:	0f 87 a9 00 00 00    	ja     c0017cfb <Vm::faultHandler(regs*)+0x1c2>
c0017c52:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0017c58:	0f 84 d0 04 00 00    	je     c001812e <Vm::faultHandler(regs*)+0x5f5>
c0017c5e:	77 78                	ja     c0017cd8 <Vm::faultHandler(regs*)+0x19f>
c0017c60:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0017c66:	0f 84 0e 02 00 00    	je     c0017e7a <Vm::faultHandler(regs*)+0x341>
c0017c6c:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017c72:	0f 85 7d 05 00 00    	jne    c00181f5 <Vm::faultHandler(regs*)+0x6bc>
c0017c78:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017c7c:	89 d1                	mov    ecx,edx
c0017c7e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017c81:	c1 e1 08             	shl    ecx,0x8
c0017c84:	09 ca                	or     edx,ecx
c0017c86:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0017c89:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017c8d:	89 d1                	mov    ecx,edx
c0017c8f:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017c93:	c1 e1 08             	shl    ecx,0x8
c0017c96:	09 ca                	or     edx,ecx
c0017c98:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0017c9b:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017c9f:	89 d1                	mov    ecx,edx
c0017ca1:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017ca5:	c1 e1 08             	shl    ecx,0x8
c0017ca8:	09 ca                	or     edx,ecx
c0017caa:	81 ca 00 02 02 00    	or     edx,0x20200
c0017cb0:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017cb3:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0017cb7:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017cbd:	d1 e8                	shr    eax,1
c0017cbf:	83 e0 01             	and    eax,0x1
c0017cc2:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017cc5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017cc8:	83 c0 06             	add    eax,0x6
c0017ccb:	25 ff ff 00 00       	and    eax,0xffff
c0017cd0:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017cd3:	e9 19 05 00 00       	jmp    c00181f1 <Vm::faultHandler(regs*)+0x6b8>
c0017cd8:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0017cde:	0f 84 8f 04 00 00    	je     c0018173 <Vm::faultHandler(regs*)+0x63a>
c0017ce4:	0f 82 60 04 00 00    	jb     c001814a <Vm::faultHandler(regs*)+0x611>
c0017cea:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0017cf0:	0f 84 94 04 00 00    	je     c001818a <Vm::faultHandler(regs*)+0x651>
c0017cf6:	e9 fa 04 00 00       	jmp    c00181f5 <Vm::faultHandler(regs*)+0x6bc>
c0017cfb:	81 fa ef 00 00 00    	cmp    edx,0xef
c0017d01:	0f 84 d7 04 00 00    	je     c00181de <Vm::faultHandler(regs*)+0x6a5>
c0017d07:	77 2e                	ja     c0017d37 <Vm::faultHandler(regs*)+0x1fe>
c0017d09:	81 fa ed 00 00 00    	cmp    edx,0xed
c0017d0f:	0f 84 a4 04 00 00    	je     c00181b9 <Vm::faultHandler(regs*)+0x680>
c0017d15:	81 fa ee 00 00 00    	cmp    edx,0xee
c0017d1b:	0f 85 d4 04 00 00    	jne    c00181f5 <Vm::faultHandler(regs*)+0x6bc>
c0017d21:	50                   	push   eax
c0017d22:	50                   	push   eax
c0017d23:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017d27:	50                   	push   eax
c0017d28:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017d2c:	50                   	push   eax
c0017d2d:	e8 2e f8 ff ff       	call   c0017560 <Vm::outbv(unsigned short, unsigned char)>
c0017d32:	e9 9f 04 00 00       	jmp    c00181d6 <Vm::faultHandler(regs*)+0x69d>
c0017d37:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017d3d:	0f 84 6d 01 00 00    	je     c0017eb0 <Vm::faultHandler(regs*)+0x377>
c0017d43:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0017d49:	0f 84 6f 01 00 00    	je     c0017ebe <Vm::faultHandler(regs*)+0x385>
c0017d4f:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017d55:	0f 85 9a 04 00 00    	jne    c00181f5 <Vm::faultHandler(regs*)+0x6bc>
c0017d5b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017d5e:	e9 76 fe ff ff       	jmp    c0017bd9 <Vm::faultHandler(regs*)+0xa0>
c0017d63:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017d66:	be 02 00 00 00       	mov    esi,0x2
c0017d6b:	e9 69 fe ff ff       	jmp    c0017bd9 <Vm::faultHandler(regs*)+0xa0>
c0017d70:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017d73:	be 03 00 00 00       	mov    esi,0x3
c0017d78:	e9 5c fe ff ff       	jmp    c0017bd9 <Vm::faultHandler(regs*)+0xa0>
c0017d7d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017d80:	be 04 00 00 00       	mov    esi,0x4
c0017d85:	e9 4f fe ff ff       	jmp    c0017bd9 <Vm::faultHandler(regs*)+0xa0>
c0017d8a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017d8d:	be 05 00 00 00       	mov    esi,0x5
c0017d92:	e9 42 fe ff ff       	jmp    c0017bd9 <Vm::faultHandler(regs*)+0xa0>
c0017d97:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017d9a:	bd 01 00 00 00       	mov    ebp,0x1
c0017d9f:	e9 35 fe ff ff       	jmp    c0017bd9 <Vm::faultHandler(regs*)+0xa0>
c0017da4:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017da7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017dac:	e9 28 fe ff ff       	jmp    c0017bd9 <Vm::faultHandler(regs*)+0xa0>
c0017db1:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017db4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017db8:	83 e5 01             	and    ebp,0x1
c0017dbb:	74 30                	je     c0017ded <Vm::faultHandler(regs*)+0x2b4>
c0017dbd:	83 e9 04             	sub    ecx,0x4
c0017dc0:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017dc6:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017dcc:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017dcf:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017dd2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017dd8:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017ddc:	0f 84 0c 04 00 00    	je     c00181ee <Vm::faultHandler(regs*)+0x6b5>
c0017de2:	80 ce 02             	or     dh,0x2
c0017de5:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017de8:	e9 01 04 00 00       	jmp    c00181ee <Vm::faultHandler(regs*)+0x6b5>
c0017ded:	83 e9 02             	sub    ecx,0x2
c0017df0:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017df6:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017df9:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017dfd:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0017e03:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0017e07:	74 05                	je     c0017e0e <Vm::faultHandler(regs*)+0x2d5>
c0017e09:	80 ce 02             	or     dh,0x2
c0017e0c:	eb 03                	jmp    c0017e11 <Vm::faultHandler(regs*)+0x2d8>
c0017e0e:	80 e6 fd             	and    dh,0xfd
c0017e11:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0017e15:	e9 d4 03 00 00       	jmp    c00181ee <Vm::faultHandler(regs*)+0x6b5>
c0017e1a:	83 e5 01             	and    ebp,0x1
c0017e1d:	74 2a                	je     c0017e49 <Vm::faultHandler(regs*)+0x310>
c0017e1f:	8b 10                	mov    edx,DWORD PTR [eax]
c0017e21:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0017e27:	81 ca 00 02 02 00    	or     edx,0x20200
c0017e2d:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017e30:	8b 00                	mov    eax,DWORD PTR [eax]
c0017e32:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017e38:	c1 e8 09             	shr    eax,0x9
c0017e3b:	83 e0 01             	and    eax,0x1
c0017e3e:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017e41:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017e44:	83 c0 04             	add    eax,0x4
c0017e47:	eb 24                	jmp    c0017e6d <Vm::faultHandler(regs*)+0x334>
c0017e49:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017e4c:	81 ca 00 02 02 00    	or     edx,0x20200
c0017e52:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017e55:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0017e58:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017e5e:	c1 e8 09             	shr    eax,0x9
c0017e61:	83 e0 01             	and    eax,0x1
c0017e64:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017e67:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017e6a:	83 c0 02             	add    eax,0x2
c0017e6d:	25 ff ff 00 00       	and    eax,0xffff
c0017e72:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017e75:	e9 74 03 00 00       	jmp    c00181ee <Vm::faultHandler(regs*)+0x6b5>
c0017e7a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017e7e:	3d ee 00 00 00       	cmp    eax,0xee
c0017e83:	75 10                	jne    c0017e95 <Vm::faultHandler(regs*)+0x35c>
c0017e85:	83 ec 0c             	sub    esp,0xc
c0017e88:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0017e8b:	e8 70 f7 ff ff       	call   c0017600 <Vm::mainloop3(unsigned long)>
c0017e90:	e9 44 03 00 00       	jmp    c00181d9 <Vm::faultHandler(regs*)+0x6a0>
c0017e95:	83 ec 0c             	sub    esp,0xc
c0017e98:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017e9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ea0:	51                   	push   ecx
c0017ea1:	50                   	push   eax
c0017ea2:	53                   	push   ebx
c0017ea3:	e8 84 fb ff ff       	call   c0017a2c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0017ea8:	83 c4 20             	add    esp,0x20
c0017eab:	e9 41 03 00 00       	jmp    c00181f1 <Vm::faultHandler(regs*)+0x6b8>
c0017eb0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017eb5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0017eb9:	e9 30 03 00 00       	jmp    c00181ee <Vm::faultHandler(regs*)+0x6b5>
c0017ebe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017ec3:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0017ec7:	e9 22 03 00 00       	jmp    c00181ee <Vm::faultHandler(regs*)+0x6b5>
c0017ecc:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017ecf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017ed4:	74 2b                	je     c0017f01 <Vm::faultHandler(regs*)+0x3c8>
c0017ed6:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0017edd:	76 22                	jbe    c0017f01 <Vm::faultHandler(regs*)+0x3c8>
c0017edf:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017ee3:	50                   	push   eax
c0017ee4:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017ee8:	50                   	push   eax
c0017ee9:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017eed:	50                   	push   eax
c0017eee:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017ef2:	50                   	push   eax
c0017ef3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017ef7:	50                   	push   eax
c0017ef8:	6a 6c                	push   0x6c
c0017efa:	6a 6c                	push   0x6c
c0017efc:	e9 bd 01 00 00       	jmp    c00180be <Vm::faultHandler(regs*)+0x585>
c0017f01:	83 ec 0c             	sub    esp,0xc
c0017f04:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017f08:	0f b7 f6             	movzx  esi,si
c0017f0b:	50                   	push   eax
c0017f0c:	e8 3c f6 ff ff       	call   c001754d <Vm::inbv(unsigned short)>
c0017f11:	83 c4 0c             	add    esp,0xc
c0017f14:	0f b6 c0             	movzx  eax,al
c0017f17:	50                   	push   eax
c0017f18:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017f1c:	50                   	push   eax
c0017f1d:	56                   	push   esi
c0017f1e:	e8 d6 fb ff ff       	call   c0017af9 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0017f23:	83 c4 10             	add    esp,0x10
c0017f26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f29:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017f2d:	74 03                	je     c0017f32 <Vm::faultHandler(regs*)+0x3f9>
c0017f2f:	48                   	dec    eax
c0017f30:	eb 01                	jmp    c0017f33 <Vm::faultHandler(regs*)+0x3fa>
c0017f32:	40                   	inc    eax
c0017f33:	0f b7 c0             	movzx  eax,ax
c0017f36:	e9 8b 00 00 00       	jmp    c0017fc6 <Vm::faultHandler(regs*)+0x48d>
c0017f3b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017f3e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f41:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017f46:	74 29                	je     c0017f71 <Vm::faultHandler(regs*)+0x438>
c0017f48:	3d ff ff 00 00       	cmp    eax,0xffff
c0017f4d:	76 22                	jbe    c0017f71 <Vm::faultHandler(regs*)+0x438>
c0017f4f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017f53:	50                   	push   eax
c0017f54:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017f58:	50                   	push   eax
c0017f59:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017f5d:	50                   	push   eax
c0017f5e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017f62:	50                   	push   eax
c0017f63:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017f67:	50                   	push   eax
c0017f68:	6a 6d                	push   0x6d
c0017f6a:	6a 6d                	push   0x6d
c0017f6c:	e9 4d 01 00 00       	jmp    c00180be <Vm::faultHandler(regs*)+0x585>
c0017f71:	0f b7 c8             	movzx  ecx,ax
c0017f74:	0f b7 f6             	movzx  esi,si
c0017f77:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017f7a:	83 e5 01             	and    ebp,0x1
c0017f7d:	74 20                	je     c0017f9f <Vm::faultHandler(regs*)+0x466>
c0017f7f:	ed                   	in     eax,dx
c0017f80:	55                   	push   ebp
c0017f81:	50                   	push   eax
c0017f82:	51                   	push   ecx
c0017f83:	56                   	push   esi
c0017f84:	e8 9b fb ff ff       	call   c0017b24 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017f89:	83 c4 10             	add    esp,0x10
c0017f8c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f8f:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017f93:	74 05                	je     c0017f9a <Vm::faultHandler(regs*)+0x461>
c0017f95:	83 e8 04             	sub    eax,0x4
c0017f98:	eb 27                	jmp    c0017fc1 <Vm::faultHandler(regs*)+0x488>
c0017f9a:	83 c0 04             	add    eax,0x4
c0017f9d:	eb 22                	jmp    c0017fc1 <Vm::faultHandler(regs*)+0x488>
c0017f9f:	66 ed                	in     ax,dx
c0017fa1:	0f b7 c0             	movzx  eax,ax
c0017fa4:	57                   	push   edi
c0017fa5:	50                   	push   eax
c0017fa6:	51                   	push   ecx
c0017fa7:	56                   	push   esi
c0017fa8:	e8 61 fb ff ff       	call   c0017b0e <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017fad:	83 c4 10             	add    esp,0x10
c0017fb0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017fb3:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017fb7:	74 05                	je     c0017fbe <Vm::faultHandler(regs*)+0x485>
c0017fb9:	83 e8 02             	sub    eax,0x2
c0017fbc:	eb 03                	jmp    c0017fc1 <Vm::faultHandler(regs*)+0x488>
c0017fbe:	83 c0 02             	add    eax,0x2
c0017fc1:	25 ff ff 00 00       	and    eax,0xffff
c0017fc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0017fc9:	e9 20 02 00 00       	jmp    c00181ee <Vm::faultHandler(regs*)+0x6b5>
c0017fce:	8d 46 ff             	lea    eax,[esi-0x1]
c0017fd1:	0f b6 f0             	movzx  esi,al
c0017fd4:	83 fe 05             	cmp    esi,0x5
c0017fd7:	77 23                	ja     c0017ffc <Vm::faultHandler(regs*)+0x4c3>
c0017fd9:	ff 24 b5 44 4c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdb3bc]
c0017fe0:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c0017fe5:	eb 15                	jmp    c0017ffc <Vm::faultHandler(regs*)+0x4c3>
c0017fe7:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0017feb:	eb 0f                	jmp    c0017ffc <Vm::faultHandler(regs*)+0x4c3>
c0017fed:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0017ff1:	eb 09                	jmp    c0017ffc <Vm::faultHandler(regs*)+0x4c3>
c0017ff3:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0017ff7:	eb 03                	jmp    c0017ffc <Vm::faultHandler(regs*)+0x4c3>
c0017ff9:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0017ffc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017fff:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018004:	74 29                	je     c001802f <Vm::faultHandler(regs*)+0x4f6>
c0018006:	3d ff ff 00 00       	cmp    eax,0xffff
c001800b:	76 22                	jbe    c001802f <Vm::faultHandler(regs*)+0x4f6>
c001800d:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0018011:	50                   	push   eax
c0018012:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0018016:	50                   	push   eax
c0018017:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001801b:	50                   	push   eax
c001801c:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018020:	50                   	push   eax
c0018021:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0018025:	50                   	push   eax
c0018026:	6a 6e                	push   0x6e
c0018028:	6a 6e                	push   0x6e
c001802a:	e9 8f 00 00 00       	jmp    c00180be <Vm::faultHandler(regs*)+0x585>
c001802f:	0f b7 c0             	movzx  eax,ax
c0018032:	52                   	push   edx
c0018033:	52                   	push   edx
c0018034:	50                   	push   eax
c0018035:	57                   	push   edi
c0018036:	e8 8a fa ff ff       	call   c0017ac5 <Vm::readByteFromReal(unsigned short, unsigned short)>
c001803b:	59                   	pop    ecx
c001803c:	0f b6 c0             	movzx  eax,al
c001803f:	5e                   	pop    esi
c0018040:	50                   	push   eax
c0018041:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0018045:	50                   	push   eax
c0018046:	e8 15 f5 ff ff       	call   c0017560 <Vm::outbv(unsigned short, unsigned char)>
c001804b:	83 c4 10             	add    esp,0x10
c001804e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0018051:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0018055:	74 03                	je     c001805a <Vm::faultHandler(regs*)+0x521>
c0018057:	48                   	dec    eax
c0018058:	eb 01                	jmp    c001805b <Vm::faultHandler(regs*)+0x522>
c001805a:	40                   	inc    eax
c001805b:	0f b7 c0             	movzx  eax,ax
c001805e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0018061:	e9 88 01 00 00       	jmp    c00181ee <Vm::faultHandler(regs*)+0x6b5>
c0018066:	8d 46 ff             	lea    eax,[esi-0x1]
c0018069:	0f b6 f0             	movzx  esi,al
c001806c:	83 fe 05             	cmp    esi,0x5
c001806f:	77 1e                	ja     c001808f <Vm::faultHandler(regs*)+0x556>
c0018071:	ff 24 b5 5c 4c 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdb3a4]
c0018078:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001807c:	eb 11                	jmp    c001808f <Vm::faultHandler(regs*)+0x556>
c001807e:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0018081:	eb 0c                	jmp    c001808f <Vm::faultHandler(regs*)+0x556>
c0018083:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0018086:	eb 07                	jmp    c001808f <Vm::faultHandler(regs*)+0x556>
c0018088:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001808b:	eb 02                	jmp    c001808f <Vm::faultHandler(regs*)+0x556>
c001808d:	8b 3b                	mov    edi,DWORD PTR [ebx]
c001808f:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0018092:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0018097:	74 37                	je     c00180d0 <Vm::faultHandler(regs*)+0x597>
c0018099:	81 fe ff ff 00 00    	cmp    esi,0xffff
c001809f:	76 2f                	jbe    c00180d0 <Vm::faultHandler(regs*)+0x597>
c00180a1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00180a5:	50                   	push   eax
c00180a6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00180aa:	50                   	push   eax
c00180ab:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00180af:	50                   	push   eax
c00180b0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00180b4:	50                   	push   eax
c00180b5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00180b9:	50                   	push   eax
c00180ba:	6a 6f                	push   0x6f
c00180bc:	6a 6f                	push   0x6f
c00180be:	68 e7 4b 02 c0       	push   0xc0024be7
c00180c3:	e8 9c ee fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00180c8:	83 c4 20             	add    esp,0x20
c00180cb:	e9 83 01 00 00       	jmp    c0018253 <Vm::faultHandler(regs*)+0x71a>
c00180d0:	0f b7 d7             	movzx  edx,di
c00180d3:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00180d6:	0f b7 c6             	movzx  eax,si
c00180d9:	81 e1 00 04 00 00    	and    ecx,0x400
c00180df:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00180e2:	83 e5 01             	and    ebp,0x1
c00180e5:	74 1d                	je     c0018104 <Vm::faultHandler(regs*)+0x5cb>
c00180e7:	55                   	push   ebp
c00180e8:	55                   	push   ebp
c00180e9:	50                   	push   eax
c00180ea:	52                   	push   edx
c00180eb:	e8 f8 f9 ff ff       	call   c0017ae8 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00180f0:	83 c4 10             	add    esp,0x10
c00180f3:	89 fa                	mov    edx,edi
c00180f5:	ef                   	out    dx,eax
c00180f6:	85 c9                	test   ecx,ecx
c00180f8:	74 05                	je     c00180ff <Vm::faultHandler(regs*)+0x5c6>
c00180fa:	83 ee 04             	sub    esi,0x4
c00180fd:	eb 21                	jmp    c0018120 <Vm::faultHandler(regs*)+0x5e7>
c00180ff:	83 c6 04             	add    esi,0x4
c0018102:	eb 1c                	jmp    c0018120 <Vm::faultHandler(regs*)+0x5e7>
c0018104:	55                   	push   ebp
c0018105:	55                   	push   ebp
c0018106:	50                   	push   eax
c0018107:	52                   	push   edx
c0018108:	e8 c9 f9 ff ff       	call   c0017ad6 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001810d:	83 c4 10             	add    esp,0x10
c0018110:	89 fa                	mov    edx,edi
c0018112:	66 ef                	out    dx,ax
c0018114:	85 c9                	test   ecx,ecx
c0018116:	74 05                	je     c001811d <Vm::faultHandler(regs*)+0x5e4>
c0018118:	83 ee 02             	sub    esi,0x2
c001811b:	eb 03                	jmp    c0018120 <Vm::faultHandler(regs*)+0x5e7>
c001811d:	83 c6 02             	add    esi,0x2
c0018120:	81 e6 ff ff 00 00    	and    esi,0xffff
c0018126:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0018129:	e9 c0 00 00 00       	jmp    c00181ee <Vm::faultHandler(regs*)+0x6b5>
c001812e:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0018135:	83 ec 0c             	sub    esp,0xc
c0018138:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001813c:	50                   	push   eax
c001813d:	e8 0b f4 ff ff       	call   c001754d <Vm::inbv(unsigned short)>
c0018142:	0f b6 c0             	movzx  eax,al
c0018145:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0018148:	eb 3a                	jmp    c0018184 <Vm::faultHandler(regs*)+0x64b>
c001814a:	83 e5 01             	and    ebp,0x1
c001814d:	74 07                	je     c0018156 <Vm::faultHandler(regs*)+0x61d>
c001814f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018153:	ed                   	in     eax,dx
c0018154:	eb 14                	jmp    c001816a <Vm::faultHandler(regs*)+0x631>
c0018156:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0018159:	66 31 f6             	xor    si,si
c001815c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c001815f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018163:	66 ed                	in     ax,dx
c0018165:	0f b7 c0             	movzx  eax,ax
c0018168:	09 f0                	or     eax,esi
c001816a:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001816d:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018171:	eb 7e                	jmp    c00181f1 <Vm::faultHandler(regs*)+0x6b8>
c0018173:	52                   	push   edx
c0018174:	52                   	push   edx
c0018175:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0018179:	50                   	push   eax
c001817a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001817e:	50                   	push   eax
c001817f:	e8 dc f3 ff ff       	call   c0017560 <Vm::outbv(unsigned short, unsigned char)>
c0018184:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0018188:	eb 4f                	jmp    c00181d9 <Vm::faultHandler(regs*)+0x6a0>
c001818a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001818d:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0018191:	83 e5 01             	and    ebp,0x1
c0018194:	74 03                	je     c0018199 <Vm::faultHandler(regs*)+0x660>
c0018196:	ef                   	out    dx,eax
c0018197:	eb d4                	jmp    c001816d <Vm::faultHandler(regs*)+0x634>
c0018199:	66 ef                	out    dx,ax
c001819b:	eb d0                	jmp    c001816d <Vm::faultHandler(regs*)+0x634>
c001819d:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00181a4:	83 ec 0c             	sub    esp,0xc
c00181a7:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00181ab:	50                   	push   eax
c00181ac:	e8 9c f3 ff ff       	call   c001754d <Vm::inbv(unsigned short)>
c00181b1:	0f b6 c0             	movzx  eax,al
c00181b4:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00181b7:	eb 1d                	jmp    c00181d6 <Vm::faultHandler(regs*)+0x69d>
c00181b9:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00181bc:	83 e5 01             	and    ebp,0x1
c00181bf:	74 03                	je     c00181c4 <Vm::faultHandler(regs*)+0x68b>
c00181c1:	ed                   	in     eax,dx
c00181c2:	eb 0d                	jmp    c00181d1 <Vm::faultHandler(regs*)+0x698>
c00181c4:	66 ed                	in     ax,dx
c00181c6:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00181c9:	0f b7 c0             	movzx  eax,ax
c00181cc:	66 31 d2             	xor    dx,dx
c00181cf:	09 d0                	or     eax,edx
c00181d1:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00181d4:	eb 18                	jmp    c00181ee <Vm::faultHandler(regs*)+0x6b5>
c00181d6:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00181d9:	83 c4 10             	add    esp,0x10
c00181dc:	eb 13                	jmp    c00181f1 <Vm::faultHandler(regs*)+0x6b8>
c00181de:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00181e1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00181e4:	83 e5 01             	and    ebp,0x1
c00181e7:	74 03                	je     c00181ec <Vm::faultHandler(regs*)+0x6b3>
c00181e9:	ef                   	out    dx,eax
c00181ea:	eb 02                	jmp    c00181ee <Vm::faultHandler(regs*)+0x6b5>
c00181ec:	66 ef                	out    dx,ax
c00181ee:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00181f1:	b0 01                	mov    al,0x1
c00181f3:	eb 60                	jmp    c0018255 <Vm::faultHandler(regs*)+0x71c>
c00181f5:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00181f9:	50                   	push   eax
c00181fa:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00181fe:	50                   	push   eax
c00181ff:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0018203:	50                   	push   eax
c0018204:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0018208:	50                   	push   eax
c0018209:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001820d:	50                   	push   eax
c001820e:	52                   	push   edx
c001820f:	52                   	push   edx
c0018210:	68 14 4c 02 c0       	push   0xc0024c14
c0018215:	e8 4a ed fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001821a:	83 c4 20             	add    esp,0x20
c001821d:	83 ec 0c             	sub    esp,0xc
c0018220:	6a 60                	push   0x60
c0018222:	e8 26 f3 ff ff       	call   c001754d <Vm::inbv(unsigned short)>
c0018227:	83 c4 10             	add    esp,0x10
c001822a:	0f b6 d0             	movzx  edx,al
c001822d:	83 fa 1c             	cmp    edx,0x1c
c0018230:	74 05                	je     c0018237 <Vm::faultHandler(regs*)+0x6fe>
c0018232:	83 fa 5a             	cmp    edx,0x5a
c0018235:	75 e6                	jne    c001821d <Vm::faultHandler(regs*)+0x6e4>
c0018237:	0f b6 c0             	movzx  eax,al
c001823a:	83 f8 1c             	cmp    eax,0x1c
c001823d:	74 05                	je     c0018244 <Vm::faultHandler(regs*)+0x70b>
c001823f:	83 f8 5a             	cmp    eax,0x5a
c0018242:	75 0f                	jne    c0018253 <Vm::faultHandler(regs*)+0x71a>
c0018244:	83 ec 0c             	sub    esp,0xc
c0018247:	6a 60                	push   0x60
c0018249:	e8 ff f2 ff ff       	call   c001754d <Vm::inbv(unsigned short)>
c001824e:	83 c4 10             	add    esp,0x10
c0018251:	eb e4                	jmp    c0018237 <Vm::faultHandler(regs*)+0x6fe>
c0018253:	31 c0                	xor    eax,eax
c0018255:	83 c4 2c             	add    esp,0x2c
c0018258:	5b                   	pop    ebx
c0018259:	5e                   	pop    esi
c001825a:	5f                   	pop    edi
c001825b:	5d                   	pop    ebp
c001825c:	c3                   	ret    
c001825d:	90                   	nop

c001825e <noCopro(unsigned long)>:
c001825e:	c3                   	ret    
c001825f:	90                   	nop

c0018260 <CPU::close(int, int, void*)>:
c0018260:	31 c0                	xor    eax,eax
c0018262:	c3                   	ret    

c0018263 <x86ReadCMOS(unsigned char)>:
c0018263:	83 ec 14             	sub    esp,0x14
c0018266:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001826a:	88 04 24             	mov    BYTE PTR [esp],al
c001826d:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c0018272:	0f b6 c0             	movzx  eax,al
c0018275:	85 c0                	test   eax,eax
c0018277:	74 04                	je     c001827d <x86ReadCMOS(unsigned char)+0x1a>
c0018279:	b2 00                	mov    dl,0x0
c001827b:	eb 02                	jmp    c001827f <x86ReadCMOS(unsigned char)+0x1c>
c001827d:	b2 80                	mov    dl,0x80
c001827f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018282:	09 d0                	or     eax,edx
c0018284:	0f b6 c0             	movzx  eax,al
c0018287:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c001828e:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018292:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018296:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001829b:	ee                   	out    dx,al
c001829c:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c00182a3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00182a8:	89 c2                	mov    edx,eax
c00182aa:	ec                   	in     al,dx
c00182ab:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00182af:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00182b3:	83 c4 14             	add    esp,0x14
c00182b6:	c3                   	ret    

c00182b7 <x86WriteCMOS(unsigned char, unsigned char)>:
c00182b7:	83 ec 18             	sub    esp,0x18
c00182ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00182be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00182c2:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c00182c6:	88 04 24             	mov    BYTE PTR [esp],al
c00182c9:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c00182ce:	0f b6 c0             	movzx  eax,al
c00182d1:	85 c0                	test   eax,eax
c00182d3:	74 04                	je     c00182d9 <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c00182d5:	b2 00                	mov    dl,0x0
c00182d7:	eb 02                	jmp    c00182db <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c00182d9:	b2 80                	mov    dl,0x80
c00182db:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00182df:	09 d0                	or     eax,edx
c00182e1:	0f b6 c0             	movzx  eax,al
c00182e4:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c00182eb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00182ef:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00182f3:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00182f8:	ee                   	out    dx,al
c00182f9:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00182fd:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c0018304:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c0018308:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c001830c:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c0018311:	ee                   	out    dx,al
c0018312:	90                   	nop
c0018313:	83 c4 18             	add    esp,0x18
c0018316:	c3                   	ret    

c0018317 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c0018317:	60                   	pusha  
c0018318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001831c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018320:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018324:	9c                   	pushf  
c0018325:	fa                   	cli    
c0018326:	0f 09                	wbinvd 
c0018328:	0f 30                	wrmsr  
c001832a:	9d                   	popf   
c001832b:	89 c2                	mov    edx,eax
c001832d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018331:	89 10                	mov    DWORD PTR [eax],edx
c0018333:	61                   	popa   
c0018334:	90                   	nop
c0018335:	c3                   	ret    

c0018336 <AMD_K6_read_msr(unsigned int, REGS*)>:
c0018336:	60                   	pusha  
c0018337:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001833b:	89 c1                	mov    ecx,eax
c001833d:	9c                   	pushf  
c001833e:	fa                   	cli    
c001833f:	0f 09                	wbinvd 
c0018341:	31 c0                	xor    eax,eax
c0018343:	31 d2                	xor    edx,edx
c0018345:	0f 32                	rdmsr  
c0018347:	9d                   	popf   
c0018348:	89 c2                	mov    edx,eax
c001834a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001834e:	89 10                	mov    DWORD PTR [eax],edx
c0018350:	61                   	popa   
c0018351:	90                   	nop
c0018352:	c3                   	ret    

c0018353 <AMD_K6_writeback(int, int, int)>:
c0018353:	83 ec 20             	sub    esp,0x20
c0018356:	a1 34 e1 02 c0       	mov    eax,ds:0xc002e134
c001835b:	c1 e8 14             	shr    eax,0x14
c001835e:	c1 e8 02             	shr    eax,0x2
c0018361:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018365:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c001836a:	0f 85 9e 00 00 00    	jne    c001840e <AMD_K6_writeback(int, int, int)+0xbb>
c0018370:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018374:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018378:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c001837d:	75 19                	jne    c0018398 <AMD_K6_writeback(int, int, int)+0x45>
c001837f:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0018384:	7f 0a                	jg     c0018390 <AMD_K6_writeback(int, int, int)+0x3d>
c0018386:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c001838e:	eb 08                	jmp    c0018398 <AMD_K6_writeback(int, int, int)+0x45>
c0018390:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0018398:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c001839d:	7c 6e                	jl     c001840d <AMD_K6_writeback(int, int, int)+0xba>
c001839f:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c00183a4:	7e 09                	jle    c00183af <AMD_K6_writeback(int, int, int)+0x5c>
c00183a6:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c00183ab:	74 36                	je     c00183e3 <AMD_K6_writeback(int, int, int)+0x90>
c00183ad:	eb 5e                	jmp    c001840d <AMD_K6_writeback(int, int, int)+0xba>
c00183af:	8d 44 24 08          	lea    eax,[esp+0x8]
c00183b3:	50                   	push   eax
c00183b4:	68 82 00 00 c0       	push   0xc0000082
c00183b9:	e8 78 ff ff ff       	call   c0018336 <AMD_K6_read_msr(unsigned int, REGS*)>
c00183be:	83 c4 08             	add    esp,0x8
c00183c1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00183c5:	01 c0                	add    eax,eax
c00183c7:	83 e0 7f             	and    eax,0x7f
c00183ca:	89 c2                	mov    edx,eax
c00183cc:	8d 44 24 08          	lea    eax,[esp+0x8]
c00183d0:	50                   	push   eax
c00183d1:	6a 00                	push   0x0
c00183d3:	52                   	push   edx
c00183d4:	68 82 00 00 c0       	push   0xc0000082
c00183d9:	e8 39 ff ff ff       	call   c0018317 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c00183de:	83 c4 10             	add    esp,0x10
c00183e1:	eb 2b                	jmp    c001840e <AMD_K6_writeback(int, int, int)+0xbb>
c00183e3:	8d 44 24 08          	lea    eax,[esp+0x8]
c00183e7:	50                   	push   eax
c00183e8:	68 82 00 00 c0       	push   0xc0000082
c00183ed:	e8 44 ff ff ff       	call   c0018336 <AMD_K6_read_msr(unsigned int, REGS*)>
c00183f2:	83 c4 08             	add    esp,0x8
c00183f5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00183f9:	50                   	push   eax
c00183fa:	6a 00                	push   0x0
c00183fc:	6a 00                	push   0x0
c00183fe:	68 82 00 00 c0       	push   0xc0000082
c0018403:	e8 0f ff ff ff       	call   c0018317 <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0018408:	83 c4 10             	add    esp,0x10
c001840b:	eb 01                	jmp    c001840e <AMD_K6_writeback(int, int, int)+0xbb>
c001840d:	90                   	nop
c001840e:	90                   	nop
c001840f:	83 c4 20             	add    esp,0x20
c0018412:	c3                   	ret    

c0018413 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018413:	56                   	push   esi
c0018414:	53                   	push   ebx
c0018415:	a1 a0 65 02 c0       	mov    eax,ds:0xc00265a0
c001841a:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c001841e:	75 32                	jne    c0018452 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018420:	8b 15 e0 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eae0
c0018426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001842a:	89 10                	mov    DWORD PTR [eax],edx
c001842c:	8b 15 dc ea 02 c0    	mov    edx,DWORD PTR ds:0xc002eadc
c0018432:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018436:	89 10                	mov    DWORD PTR [eax],edx
c0018438:	8b 15 d8 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead8
c001843e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018442:	89 10                	mov    DWORD PTR [eax],edx
c0018444:	8b 15 d4 ea 02 c0    	mov    edx,DWORD PTR ds:0xc002ead4
c001844a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001844e:	89 10                	mov    DWORD PTR [eax],edx
c0018450:	eb 5c                	jmp    c00184ae <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0018452:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018456:	ba 00 00 00 00       	mov    edx,0x0
c001845b:	89 d1                	mov    ecx,edx
c001845d:	0f a2                	cpuid  
c001845f:	89 c6                	mov    esi,eax
c0018461:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018465:	89 30                	mov    DWORD PTR [eax],esi
c0018467:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001846b:	89 18                	mov    DWORD PTR [eax],ebx
c001846d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018471:	89 08                	mov    DWORD PTR [eax],ecx
c0018473:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018477:	89 10                	mov    DWORD PTR [eax],edx
c0018479:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001847d:	a3 a0 65 02 c0       	mov    ds:0xc00265a0,eax
c0018482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018486:	8b 00                	mov    eax,DWORD PTR [eax]
c0018488:	a3 e0 ea 02 c0       	mov    ds:0xc002eae0,eax
c001848d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018491:	8b 00                	mov    eax,DWORD PTR [eax]
c0018493:	a3 dc ea 02 c0       	mov    ds:0xc002eadc,eax
c0018498:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001849c:	8b 00                	mov    eax,DWORD PTR [eax]
c001849e:	a3 d8 ea 02 c0       	mov    ds:0xc002ead8,eax
c00184a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00184a7:	8b 00                	mov    eax,DWORD PTR [eax]
c00184a9:	a3 d4 ea 02 c0       	mov    ds:0xc002ead4,eax
c00184ae:	5b                   	pop    ebx
c00184af:	5e                   	pop    esi
c00184b0:	c3                   	ret    

c00184b1 <cpuidCheckEDX(unsigned int)>:
c00184b1:	83 ec 10             	sub    esp,0x10
c00184b4:	89 e0                	mov    eax,esp
c00184b6:	50                   	push   eax
c00184b7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00184bb:	50                   	push   eax
c00184bc:	8d 44 24 10          	lea    eax,[esp+0x10]
c00184c0:	50                   	push   eax
c00184c1:	8d 44 24 18          	lea    eax,[esp+0x18]
c00184c5:	50                   	push   eax
c00184c6:	6a 01                	push   0x1
c00184c8:	e8 46 ff ff ff       	call   c0018413 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184cd:	83 c4 14             	add    esp,0x14
c00184d0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00184d3:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c00184d7:	0f 95 c0             	setne  al
c00184da:	83 c4 10             	add    esp,0x10
c00184dd:	c3                   	ret    

c00184de <cpuidCheckECX(unsigned int)>:
c00184de:	83 ec 10             	sub    esp,0x10
c00184e1:	89 e0                	mov    eax,esp
c00184e3:	50                   	push   eax
c00184e4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00184e8:	50                   	push   eax
c00184e9:	8d 44 24 10          	lea    eax,[esp+0x10]
c00184ed:	50                   	push   eax
c00184ee:	8d 44 24 18          	lea    eax,[esp+0x18]
c00184f2:	50                   	push   eax
c00184f3:	6a 01                	push   0x1
c00184f5:	e8 19 ff ff ff       	call   c0018413 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00184fa:	83 c4 14             	add    esp,0x14
c00184fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018501:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018505:	0f 95 c0             	setne  al
c0018508:	83 c4 10             	add    esp,0x10
c001850b:	c3                   	ret    

c001850c <cpuidCheckExtendedEBX(unsigned int)>:
c001850c:	83 ec 10             	sub    esp,0x10
c001850f:	89 e0                	mov    eax,esp
c0018511:	50                   	push   eax
c0018512:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018516:	50                   	push   eax
c0018517:	8d 44 24 10          	lea    eax,[esp+0x10]
c001851b:	50                   	push   eax
c001851c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018520:	50                   	push   eax
c0018521:	6a 07                	push   0x7
c0018523:	e8 eb fe ff ff       	call   c0018413 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018528:	83 c4 14             	add    esp,0x14
c001852b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001852f:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018533:	0f 95 c0             	setne  al
c0018536:	83 c4 10             	add    esp,0x10
c0018539:	c3                   	ret    

c001853a <cpuidCheckExtendedECX(unsigned int)>:
c001853a:	83 ec 10             	sub    esp,0x10
c001853d:	89 e0                	mov    eax,esp
c001853f:	50                   	push   eax
c0018540:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018544:	50                   	push   eax
c0018545:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018549:	50                   	push   eax
c001854a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001854e:	50                   	push   eax
c001854f:	6a 07                	push   0x7
c0018551:	e8 bd fe ff ff       	call   c0018413 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018556:	83 c4 14             	add    esp,0x14
c0018559:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001855d:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0018561:	0f 95 c0             	setne  al
c0018564:	83 c4 10             	add    esp,0x10
c0018567:	c3                   	ret    

c0018568 <HalDetectFeatures()>:
c0018568:	57                   	push   edi
c0018569:	56                   	push   esi
c001856a:	53                   	push   ebx
c001856b:	81 ec 90 00 00 00    	sub    esp,0x90
c0018571:	83 ec 04             	sub    esp,0x4
c0018574:	6a 08                	push   0x8
c0018576:	6a 00                	push   0x0
c0018578:	68 0c eb 02 c0       	push   0xc002eb0c
c001857d:	e8 6e 7f fe ff       	call   c00004f0 <memset>
c0018582:	83 c4 10             	add    esp,0x10
c0018585:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001858a:	83 c8 04             	or     eax,0x4
c001858d:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018592:	e8 62 7c fe ff       	call   c00001f9 <detectCPUID>
c0018597:	85 c0                	test   eax,eax
c0018599:	0f 95 c0             	setne  al
c001859c:	83 e0 01             	and    eax,0x1
c001859f:	83 e0 01             	and    eax,0x1
c00185a2:	8d 0c 00             	lea    ecx,[eax+eax*1]
c00185a5:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00185aa:	83 e0 fd             	and    eax,0xfffffffd
c00185ad:	88 c2                	mov    dl,al
c00185af:	88 c8                	mov    al,cl
c00185b1:	09 d0                	or     eax,edx
c00185b3:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00185b8:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00185bd:	83 e0 02             	and    eax,0x2
c00185c0:	0f b6 c0             	movzx  eax,al
c00185c3:	85 c0                	test   eax,eax
c00185c5:	0f 84 7f 02 00 00    	je     c001884a <HalDetectFeatures()+0x2e2>
c00185cb:	83 ec 0c             	sub    esp,0xc
c00185ce:	6a 20                	push   0x20
c00185d0:	e8 dc fe ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c00185d5:	83 c4 10             	add    esp,0x10
c00185d8:	83 e0 01             	and    eax,0x1
c00185db:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00185e2:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00185e7:	83 e0 f7             	and    eax,0xfffffff7
c00185ea:	88 c2                	mov    dl,al
c00185ec:	88 c8                	mov    al,cl
c00185ee:	09 d0                	or     eax,edx
c00185f0:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00185f5:	83 ec 0c             	sub    esp,0xc
c00185f8:	68 00 00 00 04       	push   0x4000000
c00185fd:	e8 af fe ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c0018602:	83 c4 10             	add    esp,0x10
c0018605:	89 c1                	mov    ecx,eax
c0018607:	83 e1 01             	and    ecx,0x1
c001860a:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c001860f:	83 e0 fe             	and    eax,0xfffffffe
c0018612:	88 c2                	mov    dl,al
c0018614:	88 c8                	mov    al,cl
c0018616:	09 d0                	or     eax,edx
c0018618:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c001861d:	83 ec 0c             	sub    esp,0xc
c0018620:	68 80 00 00 00       	push   0x80
c0018625:	e8 87 fe ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c001862a:	83 c4 10             	add    esp,0x10
c001862d:	89 c1                	mov    ecx,eax
c001862f:	c1 e1 07             	shl    ecx,0x7
c0018632:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018637:	83 e0 7f             	and    eax,0x7f
c001863a:	88 c2                	mov    dl,al
c001863c:	88 c8                	mov    al,cl
c001863e:	09 d0                	or     eax,edx
c0018640:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018645:	83 ec 0c             	sub    esp,0xc
c0018648:	68 00 00 80 00       	push   0x800000
c001864d:	e8 5f fe ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c0018652:	83 c4 10             	add    esp,0x10
c0018655:	83 e0 01             	and    eax,0x1
c0018658:	89 c1                	mov    ecx,eax
c001865a:	c1 e1 05             	shl    ecx,0x5
c001865d:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018662:	83 e0 df             	and    eax,0xffffffdf
c0018665:	88 c2                	mov    dl,al
c0018667:	88 c8                	mov    al,cl
c0018669:	09 d0                	or     eax,edx
c001866b:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018670:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c0018675:	83 e0 01             	and    eax,0x1
c0018678:	75 0c                	jne    c0018686 <HalDetectFeatures()+0x11e>
c001867a:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001867f:	25 00 04 00 00       	and    eax,0x400
c0018684:	74 0f                	je     c0018695 <HalDetectFeatures()+0x12d>
c0018686:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001868b:	83 e0 fe             	and    eax,0xfffffffe
c001868e:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018693:	eb 28                	jmp    c00186bd <HalDetectFeatures()+0x155>
c0018695:	83 ec 0c             	sub    esp,0xc
c0018698:	68 00 02 00 00       	push   0x200
c001869d:	e8 0f fe ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c00186a2:	83 c4 10             	add    esp,0x10
c00186a5:	89 c1                	mov    ecx,eax
c00186a7:	83 e1 01             	and    ecx,0x1
c00186aa:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00186af:	83 e0 fe             	and    eax,0xfffffffe
c00186b2:	88 c2                	mov    dl,al
c00186b4:	88 c8                	mov    al,cl
c00186b6:	09 d0                	or     eax,edx
c00186b8:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00186bd:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00186c2:	83 e0 01             	and    eax,0x1
c00186c5:	0f b6 c0             	movzx  eax,al
c00186c8:	85 c0                	test   eax,eax
c00186ca:	74 1c                	je     c00186e8 <HalDetectFeatures()+0x180>
c00186cc:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00186d1:	83 e0 08             	and    eax,0x8
c00186d4:	0f b6 c0             	movzx  eax,al
c00186d7:	85 c0                	test   eax,eax
c00186d9:	75 0d                	jne    c00186e8 <HalDetectFeatures()+0x180>
c00186db:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00186e0:	83 e0 fe             	and    eax,0xfffffffe
c00186e3:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00186e8:	83 ec 0c             	sub    esp,0xc
c00186eb:	68 74 4c 02 c0       	push   0xc0024c74
c00186f0:	e8 6f e8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00186f5:	83 c4 10             	add    esp,0x10
c00186f8:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00186fd:	83 e0 fe             	and    eax,0xfffffffe
c0018700:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018705:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c001870d:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0018715:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c001871d:	85 c0                	test   eax,eax
c001871f:	0f 84 ab 00 00 00    	je     c00187d0 <HalDetectFeatures()+0x268>
c0018725:	83 ec 0c             	sub    esp,0xc
c0018728:	6a 01                	push   0x1
c001872a:	e8 af fd ff ff       	call   c00184de <cpuidCheckECX(unsigned int)>
c001872f:	83 c4 10             	add    esp,0x10
c0018732:	83 e0 01             	and    eax,0x1
c0018735:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018738:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c001873d:	83 e0 fd             	and    eax,0xfffffffd
c0018740:	88 c2                	mov    dl,al
c0018742:	88 c8                	mov    al,cl
c0018744:	09 d0                	or     eax,edx
c0018746:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c001874b:	83 ec 0c             	sub    esp,0xc
c001874e:	68 00 02 00 00       	push   0x200
c0018753:	e8 86 fd ff ff       	call   c00184de <cpuidCheckECX(unsigned int)>
c0018758:	83 c4 10             	add    esp,0x10
c001875b:	83 e0 01             	and    eax,0x1
c001875e:	89 c1                	mov    ecx,eax
c0018760:	c1 e1 04             	shl    ecx,0x4
c0018763:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018768:	83 e0 ef             	and    eax,0xffffffef
c001876b:	88 c2                	mov    dl,al
c001876d:	88 c8                	mov    al,cl
c001876f:	09 d0                	or     eax,edx
c0018771:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0018776:	83 ec 0c             	sub    esp,0xc
c0018779:	68 00 00 08 00       	push   0x80000
c001877e:	e8 5b fd ff ff       	call   c00184de <cpuidCheckECX(unsigned int)>
c0018783:	83 c4 10             	add    esp,0x10
c0018786:	83 e0 01             	and    eax,0x1
c0018789:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018790:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0018795:	83 e0 fb             	and    eax,0xfffffffb
c0018798:	88 c2                	mov    dl,al
c001879a:	88 c8                	mov    al,cl
c001879c:	09 d0                	or     eax,edx
c001879e:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00187a3:	83 ec 0c             	sub    esp,0xc
c00187a6:	68 00 00 10 00       	push   0x100000
c00187ab:	e8 2e fd ff ff       	call   c00184de <cpuidCheckECX(unsigned int)>
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	83 e0 01             	and    eax,0x1
c00187b6:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00187bd:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00187c2:	83 e0 f7             	and    eax,0xfffffff7
c00187c5:	88 c2                	mov    dl,al
c00187c7:	88 c8                	mov    al,cl
c00187c9:	09 d0                	or     eax,edx
c00187cb:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c00187d0:	83 ec 0c             	sub    esp,0xc
c00187d3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00187d7:	50                   	push   eax
c00187d8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00187dc:	50                   	push   eax
c00187dd:	8d 44 24 34          	lea    eax,[esp+0x34]
c00187e1:	50                   	push   eax
c00187e2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00187e6:	50                   	push   eax
c00187e7:	68 00 00 00 80       	push   0x80000000
c00187ec:	e8 22 fc ff ff       	call   c0018413 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00187f1:	83 c4 20             	add    esp,0x20
c00187f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00187f8:	3d 00 00 00 80       	cmp    eax,0x80000000
c00187fd:	76 4b                	jbe    c001884a <HalDetectFeatures()+0x2e2>
c00187ff:	83 ec 0c             	sub    esp,0xc
c0018802:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018806:	50                   	push   eax
c0018807:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001880b:	50                   	push   eax
c001880c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018810:	50                   	push   eax
c0018811:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0018815:	50                   	push   eax
c0018816:	68 01 00 00 80       	push   0x80000001
c001881b:	e8 f3 fb ff ff       	call   c0018413 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018820:	83 c4 20             	add    esp,0x20
c0018823:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018828:	83 e0 bf             	and    eax,0xffffffbf
c001882b:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018830:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018835:	83 e0 fd             	and    eax,0xfffffffd
c0018838:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c001883d:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018842:	83 e0 fe             	and    eax,0xfffffffe
c0018845:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c001884a:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001884f:	25 00 04 00 00       	and    eax,0x400
c0018854:	74 0d                	je     c0018863 <HalDetectFeatures()+0x2fb>
c0018856:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001885b:	83 e0 fb             	and    eax,0xfffffffb
c001885e:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0018863:	c6 05 08 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb08,0x1
c001886a:	83 ec 04             	sub    esp,0x4
c001886d:	6a 0d                	push   0xd
c001886f:	6a 00                	push   0x0
c0018871:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018876:	e8 75 7c fe ff       	call   c00004f0 <memset>
c001887b:	83 c4 10             	add    esp,0x10
c001887e:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0018883:	83 e0 02             	and    eax,0x2
c0018886:	0f b6 c0             	movzx  eax,al
c0018889:	85 c0                	test   eax,eax
c001888b:	0f 84 16 08 00 00    	je     c00190a7 <HalDetectFeatures()+0xb3f>
c0018891:	83 ec 0c             	sub    esp,0xc
c0018894:	6a 10                	push   0x10
c0018896:	e8 16 fc ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c001889b:	83 c4 10             	add    esp,0x10
c001889e:	83 e0 01             	and    eax,0x1
c00188a1:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00188a8:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00188ad:	83 e0 f7             	and    eax,0xfffffff7
c00188b0:	88 c2                	mov    dl,al
c00188b2:	88 c8                	mov    al,cl
c00188b4:	09 d0                	or     eax,edx
c00188b6:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c00188bb:	83 ec 0c             	sub    esp,0xc
c00188be:	6a 40                	push   0x40
c00188c0:	e8 ec fb ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c00188c5:	83 c4 10             	add    esp,0x10
c00188c8:	83 e0 01             	and    eax,0x1
c00188cb:	89 c1                	mov    ecx,eax
c00188cd:	c1 e1 04             	shl    ecx,0x4
c00188d0:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00188d5:	83 e0 ef             	and    eax,0xffffffef
c00188d8:	88 c2                	mov    dl,al
c00188da:	88 c8                	mov    al,cl
c00188dc:	09 d0                	or     eax,edx
c00188de:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c00188e3:	83 ec 0c             	sub    esp,0xc
c00188e6:	6a 08                	push   0x8
c00188e8:	e8 c4 fb ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c00188ed:	83 c4 10             	add    esp,0x10
c00188f0:	83 e0 01             	and    eax,0x1
c00188f3:	89 c1                	mov    ecx,eax
c00188f5:	c1 e1 05             	shl    ecx,0x5
c00188f8:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00188fd:	83 e0 df             	and    eax,0xffffffdf
c0018900:	88 c2                	mov    dl,al
c0018902:	88 c8                	mov    al,cl
c0018904:	09 d0                	or     eax,edx
c0018906:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c001890b:	83 ec 0c             	sub    esp,0xc
c001890e:	68 00 20 00 00       	push   0x2000
c0018913:	e8 99 fb ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c0018918:	83 c4 10             	add    esp,0x10
c001891b:	83 e0 01             	and    eax,0x1
c001891e:	89 c1                	mov    ecx,eax
c0018920:	c1 e1 06             	shl    ecx,0x6
c0018923:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018928:	83 e0 bf             	and    eax,0xffffffbf
c001892b:	88 c2                	mov    dl,al
c001892d:	88 c8                	mov    al,cl
c001892f:	09 d0                	or     eax,edx
c0018931:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018936:	83 ec 0c             	sub    esp,0xc
c0018939:	68 00 00 01 00       	push   0x10000
c001893e:	e8 6e fb ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c0018943:	83 c4 10             	add    esp,0x10
c0018946:	89 c1                	mov    ecx,eax
c0018948:	c1 e1 07             	shl    ecx,0x7
c001894b:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018950:	83 e0 7f             	and    eax,0x7f
c0018953:	88 c2                	mov    dl,al
c0018955:	88 c8                	mov    al,cl
c0018957:	09 d0                	or     eax,edx
c0018959:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c001895e:	83 ec 0c             	sub    esp,0xc
c0018961:	6a 01                	push   0x1
c0018963:	e8 49 fb ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c0018968:	83 c4 10             	add    esp,0x10
c001896b:	83 e0 01             	and    eax,0x1
c001896e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018975:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001897a:	83 e0 f7             	and    eax,0xfffffff7
c001897d:	88 c2                	mov    dl,al
c001897f:	88 c8                	mov    al,cl
c0018981:	09 d0                	or     eax,edx
c0018983:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018988:	83 ec 0c             	sub    esp,0xc
c001898b:	68 00 08 00 00       	push   0x800
c0018990:	e8 1c fb ff ff       	call   c00184b1 <cpuidCheckEDX(unsigned int)>
c0018995:	83 c4 10             	add    esp,0x10
c0018998:	89 c1                	mov    ecx,eax
c001899a:	83 e1 01             	and    ecx,0x1
c001899d:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00189a2:	83 e0 fe             	and    eax,0xfffffffe
c00189a5:	88 c2                	mov    dl,al
c00189a7:	88 c8                	mov    al,cl
c00189a9:	09 d0                	or     eax,edx
c00189ab:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00189b0:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00189b5:	83 e0 40             	and    eax,0x40
c00189b8:	0f b6 c0             	movzx  eax,al
c00189bb:	85 c0                	test   eax,eax
c00189bd:	74 0a                	je     c00189c9 <HalDetectFeatures()+0x461>
c00189bf:	c7 05 e8 ea 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002eae8,0x100
c00189c9:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c00189ce:	83 e0 80             	and    eax,0xffffff80
c00189d1:	0f b6 c0             	movzx  eax,al
c00189d4:	85 c0                	test   eax,eax
c00189d6:	74 0a                	je     c00189e2 <HalDetectFeatures()+0x47a>
c00189d8:	c7 05 e4 ea 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002eae4,0x80
c00189e2:	83 ec 0c             	sub    esp,0xc
c00189e5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00189e9:	50                   	push   eax
c00189ea:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00189ee:	50                   	push   eax
c00189ef:	8d 44 24 24          	lea    eax,[esp+0x24]
c00189f3:	50                   	push   eax
c00189f4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00189f8:	50                   	push   eax
c00189f9:	6a 00                	push   0x0
c00189fb:	e8 13 fa ff ff       	call   c0018413 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018a00:	83 c4 20             	add    esp,0x20
c0018a03:	c7 44 24 48 f0 ea 02 c0 	mov    DWORD PTR [esp+0x48],0xc002eaf0
c0018a0b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0018a0f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018a13:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c0018a1b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0018a1f:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0018a23:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0018a27:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0018a2b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0018a2f:	89 c6                	mov    esi,eax
c0018a31:	89 d7                	mov    edi,edx
c0018a33:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018a35:	89 c8                	mov    eax,ecx
c0018a37:	89 fa                	mov    edx,edi
c0018a39:	89 f3                	mov    ebx,esi
c0018a3b:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0018a3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018a43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0018a47:	b8 f4 ea 02 c0       	mov    eax,0xc002eaf4
c0018a4c:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0018a50:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018a54:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0018a58:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0018a60:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0018a64:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0018a68:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0018a6c:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0018a70:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0018a74:	89 c6                	mov    esi,eax
c0018a76:	89 d7                	mov    edi,edx
c0018a78:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018a7a:	89 c8                	mov    eax,ecx
c0018a7c:	89 fa                	mov    edx,edi
c0018a7e:	89 f3                	mov    ebx,esi
c0018a80:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0018a84:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c0018a88:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018a8c:	b8 f8 ea 02 c0       	mov    eax,0xc002eaf8
c0018a91:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0018a98:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018a9c:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0018aa0:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c0018aa8:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018aaf:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0018ab3:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0018ab7:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0018abe:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0018ac2:	89 c6                	mov    esi,eax
c0018ac4:	89 d7                	mov    edi,edx
c0018ac6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0018ac8:	89 c8                	mov    eax,ecx
c0018aca:	89 fa                	mov    edx,edi
c0018acc:	89 f3                	mov    ebx,esi
c0018ace:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0018ad2:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c0018ad6:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0018ada:	83 ec 08             	sub    esp,0x8
c0018add:	68 86 4c 02 c0       	push   0xc0024c86
c0018ae2:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018ae7:	e8 64 7c fe ff       	call   c0000750 <strcmp>
c0018aec:	83 c4 10             	add    esp,0x10
c0018aef:	85 c0                	test   eax,eax
c0018af1:	74 19                	je     c0018b0c <HalDetectFeatures()+0x5a4>
c0018af3:	83 ec 08             	sub    esp,0x8
c0018af6:	68 93 4c 02 c0       	push   0xc0024c93
c0018afb:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018b00:	e8 4b 7c fe ff       	call   c0000750 <strcmp>
c0018b05:	83 c4 10             	add    esp,0x10
c0018b08:	85 c0                	test   eax,eax
c0018b0a:	75 04                	jne    c0018b10 <HalDetectFeatures()+0x5a8>
c0018b0c:	b0 01                	mov    al,0x1
c0018b0e:	eb 02                	jmp    c0018b12 <HalDetectFeatures()+0x5aa>
c0018b10:	b0 00                	mov    al,0x0
c0018b12:	0f b6 c0             	movzx  eax,al
c0018b15:	85 c0                	test   eax,eax
c0018b17:	74 0f                	je     c0018b28 <HalDetectFeatures()+0x5c0>
c0018b19:	c7 05 04 eb 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x2
c0018b23:	e9 0d 03 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018b28:	83 ec 08             	sub    esp,0x8
c0018b2b:	68 a0 4c 02 c0       	push   0xc0024ca0
c0018b30:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018b35:	e8 16 7c fe ff       	call   c0000750 <strcmp>
c0018b3a:	83 c4 10             	add    esp,0x10
c0018b3d:	85 c0                	test   eax,eax
c0018b3f:	74 19                	je     c0018b5a <HalDetectFeatures()+0x5f2>
c0018b41:	83 ec 08             	sub    esp,0x8
c0018b44:	68 ad 4c 02 c0       	push   0xc0024cad
c0018b49:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018b4e:	e8 fd 7b fe ff       	call   c0000750 <strcmp>
c0018b53:	83 c4 10             	add    esp,0x10
c0018b56:	85 c0                	test   eax,eax
c0018b58:	75 04                	jne    c0018b5e <HalDetectFeatures()+0x5f6>
c0018b5a:	b0 01                	mov    al,0x1
c0018b5c:	eb 02                	jmp    c0018b60 <HalDetectFeatures()+0x5f8>
c0018b5e:	b0 00                	mov    al,0x0
c0018b60:	0f b6 c0             	movzx  eax,al
c0018b63:	85 c0                	test   eax,eax
c0018b65:	74 0f                	je     c0018b76 <HalDetectFeatures()+0x60e>
c0018b67:	c7 05 04 eb 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x4
c0018b71:	e9 bf 02 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018b76:	83 ec 08             	sub    esp,0x8
c0018b79:	68 ba 4c 02 c0       	push   0xc0024cba
c0018b7e:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018b83:	e8 c8 7b fe ff       	call   c0000750 <strcmp>
c0018b88:	83 c4 10             	add    esp,0x10
c0018b8b:	85 c0                	test   eax,eax
c0018b8d:	74 19                	je     c0018ba8 <HalDetectFeatures()+0x640>
c0018b8f:	83 ec 08             	sub    esp,0x8
c0018b92:	68 c7 4c 02 c0       	push   0xc0024cc7
c0018b97:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018b9c:	e8 af 7b fe ff       	call   c0000750 <strcmp>
c0018ba1:	83 c4 10             	add    esp,0x10
c0018ba4:	85 c0                	test   eax,eax
c0018ba6:	75 04                	jne    c0018bac <HalDetectFeatures()+0x644>
c0018ba8:	b0 01                	mov    al,0x1
c0018baa:	eb 02                	jmp    c0018bae <HalDetectFeatures()+0x646>
c0018bac:	b0 00                	mov    al,0x0
c0018bae:	0f b6 c0             	movzx  eax,al
c0018bb1:	85 c0                	test   eax,eax
c0018bb3:	74 0f                	je     c0018bc4 <HalDetectFeatures()+0x65c>
c0018bb5:	c7 05 04 eb 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x5
c0018bbf:	e9 71 02 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018bc4:	83 ec 08             	sub    esp,0x8
c0018bc7:	68 d4 4c 02 c0       	push   0xc0024cd4
c0018bcc:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018bd1:	e8 7a 7b fe ff       	call   c0000750 <strcmp>
c0018bd6:	83 c4 10             	add    esp,0x10
c0018bd9:	85 c0                	test   eax,eax
c0018bdb:	0f 94 c0             	sete   al
c0018bde:	0f b6 c0             	movzx  eax,al
c0018be1:	85 c0                	test   eax,eax
c0018be3:	74 0f                	je     c0018bf4 <HalDetectFeatures()+0x68c>
c0018be5:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c0018bef:	e9 41 02 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018bf4:	83 ec 08             	sub    esp,0x8
c0018bf7:	68 e1 4c 02 c0       	push   0xc0024ce1
c0018bfc:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018c01:	e8 4a 7b fe ff       	call   c0000750 <strcmp>
c0018c06:	83 c4 10             	add    esp,0x10
c0018c09:	85 c0                	test   eax,eax
c0018c0b:	0f 94 c0             	sete   al
c0018c0e:	0f b6 c0             	movzx  eax,al
c0018c11:	85 c0                	test   eax,eax
c0018c13:	74 0f                	je     c0018c24 <HalDetectFeatures()+0x6bc>
c0018c15:	c7 05 04 eb 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x3
c0018c1f:	e9 11 02 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018c24:	83 ec 08             	sub    esp,0x8
c0018c27:	68 a0 4c 02 c0       	push   0xc0024ca0
c0018c2c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018c31:	e8 1a 7b fe ff       	call   c0000750 <strcmp>
c0018c36:	83 c4 10             	add    esp,0x10
c0018c39:	85 c0                	test   eax,eax
c0018c3b:	0f 94 c0             	sete   al
c0018c3e:	0f b6 c0             	movzx  eax,al
c0018c41:	85 c0                	test   eax,eax
c0018c43:	74 0f                	je     c0018c54 <HalDetectFeatures()+0x6ec>
c0018c45:	c7 05 04 eb 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x6
c0018c4f:	e9 e1 01 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018c54:	83 ec 08             	sub    esp,0x8
c0018c57:	68 ee 4c 02 c0       	push   0xc0024cee
c0018c5c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018c61:	e8 ea 7a fe ff       	call   c0000750 <strcmp>
c0018c66:	83 c4 10             	add    esp,0x10
c0018c69:	85 c0                	test   eax,eax
c0018c6b:	0f 94 c0             	sete   al
c0018c6e:	0f b6 c0             	movzx  eax,al
c0018c71:	85 c0                	test   eax,eax
c0018c73:	74 0f                	je     c0018c84 <HalDetectFeatures()+0x71c>
c0018c75:	c7 05 04 eb 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x7
c0018c7f:	e9 b1 01 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018c84:	83 ec 08             	sub    esp,0x8
c0018c87:	68 fb 4c 02 c0       	push   0xc0024cfb
c0018c8c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018c91:	e8 ba 7a fe ff       	call   c0000750 <strcmp>
c0018c96:	83 c4 10             	add    esp,0x10
c0018c99:	85 c0                	test   eax,eax
c0018c9b:	0f 94 c0             	sete   al
c0018c9e:	0f b6 c0             	movzx  eax,al
c0018ca1:	85 c0                	test   eax,eax
c0018ca3:	74 0f                	je     c0018cb4 <HalDetectFeatures()+0x74c>
c0018ca5:	c7 05 04 eb 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x8
c0018caf:	e9 81 01 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018cb4:	83 ec 08             	sub    esp,0x8
c0018cb7:	68 08 4d 02 c0       	push   0xc0024d08
c0018cbc:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018cc1:	e8 8a 7a fe ff       	call   c0000750 <strcmp>
c0018cc6:	83 c4 10             	add    esp,0x10
c0018cc9:	85 c0                	test   eax,eax
c0018ccb:	0f 94 c0             	sete   al
c0018cce:	0f b6 c0             	movzx  eax,al
c0018cd1:	85 c0                	test   eax,eax
c0018cd3:	74 0f                	je     c0018ce4 <HalDetectFeatures()+0x77c>
c0018cd5:	c7 05 04 eb 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x9
c0018cdf:	e9 51 01 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018ce4:	83 ec 08             	sub    esp,0x8
c0018ce7:	68 15 4d 02 c0       	push   0xc0024d15
c0018cec:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018cf1:	e8 5a 7a fe ff       	call   c0000750 <strcmp>
c0018cf6:	83 c4 10             	add    esp,0x10
c0018cf9:	85 c0                	test   eax,eax
c0018cfb:	0f 94 c0             	sete   al
c0018cfe:	0f b6 c0             	movzx  eax,al
c0018d01:	85 c0                	test   eax,eax
c0018d03:	74 0f                	je     c0018d14 <HalDetectFeatures()+0x7ac>
c0018d05:	c7 05 04 eb 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xa
c0018d0f:	e9 21 01 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018d14:	83 ec 08             	sub    esp,0x8
c0018d17:	68 22 4d 02 c0       	push   0xc0024d22
c0018d1c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018d21:	e8 2a 7a fe ff       	call   c0000750 <strcmp>
c0018d26:	83 c4 10             	add    esp,0x10
c0018d29:	85 c0                	test   eax,eax
c0018d2b:	0f 94 c0             	sete   al
c0018d2e:	0f b6 c0             	movzx  eax,al
c0018d31:	85 c0                	test   eax,eax
c0018d33:	74 0f                	je     c0018d44 <HalDetectFeatures()+0x7dc>
c0018d35:	c7 05 04 eb 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xb
c0018d3f:	e9 f1 00 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018d44:	83 ec 08             	sub    esp,0x8
c0018d47:	68 2f 4d 02 c0       	push   0xc0024d2f
c0018d4c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018d51:	e8 fa 79 fe ff       	call   c0000750 <strcmp>
c0018d56:	83 c4 10             	add    esp,0x10
c0018d59:	85 c0                	test   eax,eax
c0018d5b:	0f 94 c0             	sete   al
c0018d5e:	0f b6 c0             	movzx  eax,al
c0018d61:	85 c0                	test   eax,eax
c0018d63:	74 0f                	je     c0018d74 <HalDetectFeatures()+0x80c>
c0018d65:	c7 05 04 eb 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xc
c0018d6f:	e9 c1 00 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018d74:	83 ec 08             	sub    esp,0x8
c0018d77:	68 3c 4d 02 c0       	push   0xc0024d3c
c0018d7c:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018d81:	e8 ca 79 fe ff       	call   c0000750 <strcmp>
c0018d86:	83 c4 10             	add    esp,0x10
c0018d89:	85 c0                	test   eax,eax
c0018d8b:	0f 94 c0             	sete   al
c0018d8e:	0f b6 c0             	movzx  eax,al
c0018d91:	85 c0                	test   eax,eax
c0018d93:	74 0f                	je     c0018da4 <HalDetectFeatures()+0x83c>
c0018d95:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018d9f:	e9 91 00 00 00       	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018da4:	83 ec 08             	sub    esp,0x8
c0018da7:	68 49 4d 02 c0       	push   0xc0024d49
c0018dac:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018db1:	e8 9a 79 fe ff       	call   c0000750 <strcmp>
c0018db6:	83 c4 10             	add    esp,0x10
c0018db9:	85 c0                	test   eax,eax
c0018dbb:	0f 94 c0             	sete   al
c0018dbe:	0f b6 c0             	movzx  eax,al
c0018dc1:	85 c0                	test   eax,eax
c0018dc3:	74 0c                	je     c0018dd1 <HalDetectFeatures()+0x869>
c0018dc5:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018dcf:	eb 64                	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018dd1:	83 ec 08             	sub    esp,0x8
c0018dd4:	68 56 4d 02 c0       	push   0xc0024d56
c0018dd9:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018dde:	e8 6d 79 fe ff       	call   c0000750 <strcmp>
c0018de3:	83 c4 10             	add    esp,0x10
c0018de6:	85 c0                	test   eax,eax
c0018de8:	0f 94 c0             	sete   al
c0018deb:	0f b6 c0             	movzx  eax,al
c0018dee:	85 c0                	test   eax,eax
c0018df0:	74 0c                	je     c0018dfe <HalDetectFeatures()+0x896>
c0018df2:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018dfc:	eb 37                	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018dfe:	83 ec 08             	sub    esp,0x8
c0018e01:	68 63 4d 02 c0       	push   0xc0024d63
c0018e06:	68 f0 ea 02 c0       	push   0xc002eaf0
c0018e0b:	e8 40 79 fe ff       	call   c0000750 <strcmp>
c0018e10:	83 c4 10             	add    esp,0x10
c0018e13:	85 c0                	test   eax,eax
c0018e15:	0f 94 c0             	sete   al
c0018e18:	0f b6 c0             	movzx  eax,al
c0018e1b:	85 c0                	test   eax,eax
c0018e1d:	74 0c                	je     c0018e2b <HalDetectFeatures()+0x8c3>
c0018e1f:	c7 05 04 eb 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0xd
c0018e29:	eb 0a                	jmp    c0018e35 <HalDetectFeatures()+0x8cd>
c0018e2b:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c0018e35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018e39:	83 f8 06             	cmp    eax,0x6
c0018e3c:	0f 86 cc 00 00 00    	jbe    c0018f0e <HalDetectFeatures()+0x9a6>
c0018e42:	83 ec 0c             	sub    esp,0xc
c0018e45:	68 80 00 00 00       	push   0x80
c0018e4a:	e8 bd f6 ff ff       	call   c001850c <cpuidCheckExtendedEBX(unsigned int)>
c0018e4f:	83 c4 10             	add    esp,0x10
c0018e52:	89 c1                	mov    ecx,eax
c0018e54:	83 e1 01             	and    ecx,0x1
c0018e57:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018e5c:	83 e0 fe             	and    eax,0xfffffffe
c0018e5f:	88 c2                	mov    dl,al
c0018e61:	88 c8                	mov    al,cl
c0018e63:	09 d0                	or     eax,edx
c0018e65:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018e6a:	83 ec 0c             	sub    esp,0xc
c0018e6d:	68 00 00 10 00       	push   0x100000
c0018e72:	e8 95 f6 ff ff       	call   c001850c <cpuidCheckExtendedEBX(unsigned int)>
c0018e77:	83 c4 10             	add    esp,0x10
c0018e7a:	83 e0 01             	and    eax,0x1
c0018e7d:	89 c1                	mov    ecx,eax
c0018e7f:	c1 e1 06             	shl    ecx,0x6
c0018e82:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018e87:	83 e0 bf             	and    eax,0xffffffbf
c0018e8a:	88 c2                	mov    dl,al
c0018e8c:	88 c8                	mov    al,cl
c0018e8e:	09 d0                	or     eax,edx
c0018e90:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018e95:	83 ec 0c             	sub    esp,0xc
c0018e98:	68 00 00 04 00       	push   0x40000
c0018e9d:	e8 6a f6 ff ff       	call   c001850c <cpuidCheckExtendedEBX(unsigned int)>
c0018ea2:	83 c4 10             	add    esp,0x10
c0018ea5:	83 e0 01             	and    eax,0x1
c0018ea8:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0018eab:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018eb0:	83 e0 fd             	and    eax,0xfffffffd
c0018eb3:	88 c2                	mov    dl,al
c0018eb5:	88 c8                	mov    al,cl
c0018eb7:	09 d0                	or     eax,edx
c0018eb9:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018ebe:	83 ec 0c             	sub    esp,0xc
c0018ec1:	6a 04                	push   0x4
c0018ec3:	e8 72 f6 ff ff       	call   c001853a <cpuidCheckExtendedECX(unsigned int)>
c0018ec8:	83 c4 10             	add    esp,0x10
c0018ecb:	83 e0 01             	and    eax,0x1
c0018ece:	89 c1                	mov    ecx,eax
c0018ed0:	c1 e1 05             	shl    ecx,0x5
c0018ed3:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0018ed8:	83 e0 df             	and    eax,0xffffffdf
c0018edb:	88 c2                	mov    dl,al
c0018edd:	88 c8                	mov    al,cl
c0018edf:	09 d0                	or     eax,edx
c0018ee1:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0018ee6:	83 ec 0c             	sub    esp,0xc
c0018ee9:	6a 20                	push   0x20
c0018eeb:	e8 4a f6 ff ff       	call   c001853a <cpuidCheckExtendedECX(unsigned int)>
c0018ef0:	83 c4 10             	add    esp,0x10
c0018ef3:	83 e0 01             	and    eax,0x1
c0018ef6:	89 c1                	mov    ecx,eax
c0018ef8:	c1 e1 04             	shl    ecx,0x4
c0018efb:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0018f00:	83 e0 ef             	and    eax,0xffffffef
c0018f03:	88 c2                	mov    dl,al
c0018f05:	88 c8                	mov    al,cl
c0018f07:	09 d0                	or     eax,edx
c0018f09:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0018f0e:	83 ec 0c             	sub    esp,0xc
c0018f11:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f15:	50                   	push   eax
c0018f16:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018f1a:	50                   	push   eax
c0018f1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c0018f1f:	50                   	push   eax
c0018f20:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018f24:	50                   	push   eax
c0018f25:	6a 01                	push   0x1
c0018f27:	e8 e7 f4 ff ff       	call   c0018413 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f2c:	83 c4 20             	add    esp,0x20
c0018f2f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f33:	83 e0 0f             	and    eax,0xf
c0018f36:	a2 00 eb 02 c0       	mov    ds:0xc002eb00,al
c0018f3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f3f:	c1 e8 04             	shr    eax,0x4
c0018f42:	83 e0 0f             	and    eax,0xf
c0018f45:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c0018f4a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f4e:	c1 e8 08             	shr    eax,0x8
c0018f51:	83 e0 0f             	and    eax,0xf
c0018f54:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c0018f59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f5d:	c1 e8 0c             	shr    eax,0xc
c0018f60:	83 e0 03             	and    eax,0x3
c0018f63:	a2 ff ea 02 c0       	mov    ds:0xc002eaff,al
c0018f68:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0018f6d:	0f b6 c0             	movzx  eax,al
c0018f70:	83 f8 06             	cmp    eax,0x6
c0018f73:	74 0d                	je     c0018f82 <HalDetectFeatures()+0xa1a>
c0018f75:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0018f7a:	0f b6 c0             	movzx  eax,al
c0018f7d:	83 f8 0f             	cmp    eax,0xf
c0018f80:	75 18                	jne    c0018f9a <HalDetectFeatures()+0xa32>
c0018f82:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f86:	c1 e8 10             	shr    eax,0x10
c0018f89:	c1 e0 04             	shl    eax,0x4
c0018f8c:	88 c2                	mov    dl,al
c0018f8e:	a0 fe ea 02 c0       	mov    al,ds:0xc002eafe
c0018f93:	09 d0                	or     eax,edx
c0018f95:	a2 fe ea 02 c0       	mov    ds:0xc002eafe,al
c0018f9a:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0018f9f:	0f b6 c0             	movzx  eax,al
c0018fa2:	83 f8 0f             	cmp    eax,0xf
c0018fa5:	75 15                	jne    c0018fbc <HalDetectFeatures()+0xa54>
c0018fa7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018fab:	c1 e8 14             	shr    eax,0x14
c0018fae:	88 c2                	mov    dl,al
c0018fb0:	a0 fd ea 02 c0       	mov    al,ds:0xc002eafd
c0018fb5:	01 d0                	add    eax,edx
c0018fb7:	a2 fd ea 02 c0       	mov    ds:0xc002eafd,al
c0018fbc:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0018fc4:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0018fcc:	85 c0                	test   eax,eax
c0018fce:	74 2d                	je     c0018ffd <HalDetectFeatures()+0xa95>
c0018fd0:	83 ec 0c             	sub    esp,0xc
c0018fd3:	68 00 00 00 40       	push   0x40000000
c0018fd8:	e8 01 f5 ff ff       	call   c00184de <cpuidCheckECX(unsigned int)>
c0018fdd:	83 c4 10             	add    esp,0x10
c0018fe0:	83 e0 01             	and    eax,0x1
c0018fe3:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0018fea:	a0 0e eb 02 c0       	mov    al,ds:0xc002eb0e
c0018fef:	83 e0 fb             	and    eax,0xfffffffb
c0018ff2:	88 c2                	mov    dl,al
c0018ff4:	88 c8                	mov    al,cl
c0018ff6:	09 d0                	or     eax,edx
c0018ff8:	a2 0e eb 02 c0       	mov    ds:0xc002eb0e,al
c0018ffd:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019002:	83 c8 04             	or     eax,0x4
c0019005:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001900a:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001900f:	83 c8 08             	or     eax,0x8
c0019012:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019017:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001901c:	83 c8 10             	or     eax,0x10
c001901f:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019024:	83 ec 0c             	sub    esp,0xc
c0019027:	8d 44 24 14          	lea    eax,[esp+0x14]
c001902b:	50                   	push   eax
c001902c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019030:	50                   	push   eax
c0019031:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019035:	50                   	push   eax
c0019036:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001903a:	50                   	push   eax
c001903b:	68 00 00 00 80       	push   0x80000000
c0019040:	e8 ce f3 ff ff       	call   c0018413 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019045:	83 c4 20             	add    esp,0x20
c0019048:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001904c:	3d 00 00 00 80       	cmp    eax,0x80000000
c0019051:	0f 86 96 01 00 00    	jbe    c00191ed <HalDetectFeatures()+0xc85>
c0019057:	83 ec 0c             	sub    esp,0xc
c001905a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001905e:	50                   	push   eax
c001905f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0019063:	50                   	push   eax
c0019064:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019068:	50                   	push   eax
c0019069:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001906d:	50                   	push   eax
c001906e:	68 01 00 00 80       	push   0x80000001
c0019073:	e8 9b f3 ff ff       	call   c0018413 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019078:	83 c4 20             	add    esp,0x20
c001907b:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019080:	83 e0 7f             	and    eax,0x7f
c0019083:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019088:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001908d:	83 e0 fb             	and    eax,0xfffffffb
c0019090:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019095:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c001909a:	83 e0 fd             	and    eax,0xfffffffd
c001909d:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00190a2:	e9 46 01 00 00       	jmp    c00191ed <HalDetectFeatures()+0xc85>
c00190a7:	83 ec 08             	sub    esp,0x8
c00190aa:	68 d4 4c 02 c0       	push   0xc0024cd4
c00190af:	68 f0 ea 02 c0       	push   0xc002eaf0
c00190b4:	e8 87 75 fe ff       	call   c0000640 <strcpy>
c00190b9:	83 c4 10             	add    esp,0x10
c00190bc:	c7 05 04 eb 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x1
c00190c6:	e8 f8 70 fe ff       	call   c00001c3 <is486>
c00190cb:	85 c0                	test   eax,eax
c00190cd:	0f 95 c0             	setne  al
c00190d0:	0f b6 c0             	movzx  eax,al
c00190d3:	85 c0                	test   eax,eax
c00190d5:	0f 84 8d 00 00 00    	je     c0019168 <HalDetectFeatures()+0xc00>
c00190db:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00190e0:	83 c8 04             	or     eax,0x4
c00190e3:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00190e8:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00190ed:	83 c8 08             	or     eax,0x8
c00190f0:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c00190f5:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c00190fa:	83 c8 10             	or     eax,0x10
c00190fd:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019102:	0f 20 c0             	mov    eax,cr0
c0019105:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019109:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001910d:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c0019114:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001911b:	83 e0 04             	and    eax,0x4
c001911e:	74 1e                	je     c001913e <HalDetectFeatures()+0xbd6>
c0019120:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0019127:	83 e0 10             	and    eax,0x10
c001912a:	75 12                	jne    c001913e <HalDetectFeatures()+0xbd6>
c001912c:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019131:	83 e0 f7             	and    eax,0xfffffff7
c0019134:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019139:	e9 af 00 00 00       	jmp    c00191ed <HalDetectFeatures()+0xc85>
c001913e:	e8 5b 70 fe ff       	call   c000019e <hasLegacyFPU>
c0019143:	83 e0 01             	and    eax,0x1
c0019146:	83 e0 01             	and    eax,0x1
c0019149:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019150:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019155:	83 e0 f7             	and    eax,0xfffffff7
c0019158:	88 c2                	mov    dl,al
c001915a:	88 c8                	mov    al,cl
c001915c:	09 d0                	or     eax,edx
c001915e:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019163:	e9 85 00 00 00       	jmp    c00191ed <HalDetectFeatures()+0xc85>
c0019168:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001916d:	83 e0 fb             	and    eax,0xfffffffb
c0019170:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019175:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c001917a:	83 e0 f7             	and    eax,0xfffffff7
c001917d:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c0019182:	a0 0f eb 02 c0       	mov    al,ds:0xc002eb0f
c0019187:	83 e0 ef             	and    eax,0xffffffef
c001918a:	a2 0f eb 02 c0       	mov    ds:0xc002eb0f,al
c001918f:	0f 20 c0             	mov    eax,cr0
c0019192:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019196:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001919a:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00191a1:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00191a8:	83 e0 04             	and    eax,0x4
c00191ab:	74 1b                	je     c00191c8 <HalDetectFeatures()+0xc60>
c00191ad:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c00191b4:	83 e0 10             	and    eax,0x10
c00191b7:	75 0f                	jne    c00191c8 <HalDetectFeatures()+0xc60>
c00191b9:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00191be:	83 e0 f7             	and    eax,0xfffffff7
c00191c1:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00191c6:	eb 25                	jmp    c00191ed <HalDetectFeatures()+0xc85>
c00191c8:	e8 d1 6f fe ff       	call   c000019e <hasLegacyFPU>
c00191cd:	83 e0 01             	and    eax,0x1
c00191d0:	83 e0 01             	and    eax,0x1
c00191d3:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00191da:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00191df:	83 e0 f7             	and    eax,0xfffffff7
c00191e2:	88 c2                	mov    dl,al
c00191e4:	88 c8                	mov    al,cl
c00191e6:	09 d0                	or     eax,edx
c00191e8:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c00191ed:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00191f2:	83 e0 08             	and    eax,0x8
c00191f5:	0f b6 c0             	movzx  eax,al
c00191f8:	85 c0                	test   eax,eax
c00191fa:	75 25                	jne    c0019221 <HalDetectFeatures()+0xcb9>
c00191fc:	e8 9d 6f fe ff       	call   c000019e <hasLegacyFPU>
c0019201:	83 e0 01             	and    eax,0x1
c0019204:	83 e0 01             	and    eax,0x1
c0019207:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001920e:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019213:	83 e0 f7             	and    eax,0xfffffff7
c0019216:	88 c2                	mov    dl,al
c0019218:	88 c8                	mov    al,cl
c001921a:	09 d0                	or     eax,edx
c001921c:	a2 10 eb 02 c0       	mov    ds:0xc002eb10,al
c0019221:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c0019226:	83 e0 08             	and    eax,0x8
c0019229:	0f b6 c0             	movzx  eax,al
c001922c:	85 c0                	test   eax,eax
c001922e:	74 0d                	je     c001923d <HalDetectFeatures()+0xcd5>
c0019230:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019235:	83 c8 10             	or     eax,0x10
c0019238:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001923d:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019242:	83 e0 10             	and    eax,0x10
c0019245:	0f b6 c0             	movzx  eax,al
c0019248:	85 c0                	test   eax,eax
c001924a:	75 23                	jne    c001926f <HalDetectFeatures()+0xd07>
c001924c:	e8 65 7f 00 00       	call   c00211b6 <x87Detect>
c0019251:	83 e0 01             	and    eax,0x1
c0019254:	83 e0 01             	and    eax,0x1
c0019257:	89 c1                	mov    ecx,eax
c0019259:	c1 e1 04             	shl    ecx,0x4
c001925c:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019261:	83 e0 ef             	and    eax,0xffffffef
c0019264:	88 c2                	mov    dl,al
c0019266:	88 c8                	mov    al,cl
c0019268:	09 d0                	or     eax,edx
c001926a:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c001926f:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019274:	83 e0 01             	and    eax,0x1
c0019277:	0f b6 c0             	movzx  eax,al
c001927a:	85 c0                	test   eax,eax
c001927c:	75 2d                	jne    c00192ab <HalDetectFeatures()+0xd43>
c001927e:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019283:	83 e0 02             	and    eax,0x2
c0019286:	0f b6 c0             	movzx  eax,al
c0019289:	85 c0                	test   eax,eax
c001928b:	75 1e                	jne    c00192ab <HalDetectFeatures()+0xd43>
c001928d:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019292:	83 e0 04             	and    eax,0x4
c0019295:	0f b6 c0             	movzx  eax,al
c0019298:	85 c0                	test   eax,eax
c001929a:	75 0f                	jne    c00192ab <HalDetectFeatures()+0xd43>
c001929c:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c00192a1:	83 e0 08             	and    eax,0x8
c00192a4:	0f b6 c0             	movzx  eax,al
c00192a7:	85 c0                	test   eax,eax
c00192a9:	74 0d                	je     c00192b8 <HalDetectFeatures()+0xd50>
c00192ab:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00192b0:	83 c8 80             	or     eax,0xffffff80
c00192b3:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00192b8:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00192bd:	83 e0 10             	and    eax,0x10
c00192c0:	0f b6 c0             	movzx  eax,al
c00192c3:	85 c0                	test   eax,eax
c00192c5:	74 2f                	je     c00192f6 <HalDetectFeatures()+0xd8e>
c00192c7:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00192cc:	83 e0 80             	and    eax,0xffffff80
c00192cf:	0f b6 c0             	movzx  eax,al
c00192d2:	85 c0                	test   eax,eax
c00192d4:	75 20                	jne    c00192f6 <HalDetectFeatures()+0xd8e>
c00192d6:	e8 95 7e 00 00       	call   c0021170 <sseDetect>
c00192db:	83 e0 01             	and    eax,0x1
c00192de:	89 c1                	mov    ecx,eax
c00192e0:	c1 e1 07             	shl    ecx,0x7
c00192e3:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00192e8:	83 e0 7f             	and    eax,0x7f
c00192eb:	88 c2                	mov    dl,al
c00192ed:	88 c8                	mov    al,cl
c00192ef:	09 d0                	or     eax,edx
c00192f1:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c00192f6:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00192fb:	83 e0 80             	and    eax,0xffffff80
c00192fe:	0f b6 c0             	movzx  eax,al
c0019301:	85 c0                	test   eax,eax
c0019303:	74 1c                	je     c0019321 <HalDetectFeatures()+0xdb9>
c0019305:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c001930a:	83 e0 20             	and    eax,0x20
c001930d:	0f b6 c0             	movzx  eax,al
c0019310:	85 c0                	test   eax,eax
c0019312:	75 0d                	jne    c0019321 <HalDetectFeatures()+0xdb9>
c0019314:	a0 0d eb 02 c0       	mov    al,ds:0xc002eb0d
c0019319:	83 e0 df             	and    eax,0xffffffdf
c001931c:	a2 0d eb 02 c0       	mov    ds:0xc002eb0d,al
c0019321:	c6 05 08 eb 02 c0 00 	mov    BYTE PTR ds:0xc002eb08,0x0
c0019328:	90                   	nop
c0019329:	81 c4 90 00 00 00    	add    esp,0x90
c001932f:	5b                   	pop    ebx
c0019330:	5e                   	pop    esi
c0019331:	5f                   	pop    edi
c0019332:	c3                   	ret    

c0019333 <HalEnableNMI()>:
c0019333:	c6 05 ec ea 02 c0 01 	mov    BYTE PTR ds:0xc002eaec,0x1
c001933a:	6a 10                	push   0x10
c001933c:	e8 22 ef ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c0019341:	83 c4 04             	add    esp,0x4
c0019344:	90                   	nop
c0019345:	c3                   	ret    

c0019346 <HalDisableNMI()>:
c0019346:	c6 05 ec ea 02 c0 00 	mov    BYTE PTR ds:0xc002eaec,0x0
c001934d:	6a 10                	push   0x10
c001934f:	e8 0f ef ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c0019354:	83 c4 04             	add    esp,0x4
c0019357:	90                   	nop
c0019358:	c3                   	ret    

c0019359 <HalGetNMIState()>:
c0019359:	a0 ec ea 02 c0       	mov    al,ds:0xc002eaec
c001935e:	c3                   	ret    

c001935f <x86rdmsr(unsigned int)>:
c001935f:	83 ec 1c             	sub    esp,0x1c
c0019362:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019367:	83 e0 08             	and    eax,0x8
c001936a:	0f b6 c0             	movzx  eax,al
c001936d:	85 c0                	test   eax,eax
c001936f:	75 10                	jne    c0019381 <x86rdmsr(unsigned int)+0x22>
c0019371:	83 ec 0c             	sub    esp,0xc
c0019374:	68 6f 4d 02 c0       	push   0xc0024d6f
c0019379:	e8 24 6c ff ff       	call   c000ffa2 <KePanic(char const*)>
c001937e:	83 c4 10             	add    esp,0x10
c0019381:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019385:	89 c1                	mov    ecx,eax
c0019387:	0f 32                	rdmsr  
c0019389:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001938d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019391:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019395:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0019399:	83 c4 1c             	add    esp,0x1c
c001939c:	c3                   	ret    

c001939d <x86wrmsr(unsigned int, unsigned long long)>:
c001939d:	83 ec 1c             	sub    esp,0x1c
c00193a0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00193a4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00193a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00193ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193b0:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c00193b5:	83 e0 08             	and    eax,0x8
c00193b8:	0f b6 c0             	movzx  eax,al
c00193bb:	85 c0                	test   eax,eax
c00193bd:	75 10                	jne    c00193cf <x86wrmsr(unsigned int, unsigned long long)+0x32>
c00193bf:	83 ec 0c             	sub    esp,0xc
c00193c2:	68 75 4d 02 c0       	push   0xc0024d75
c00193c7:	e8 d6 6b ff ff       	call   c000ffa2 <KePanic(char const*)>
c00193cc:	83 c4 10             	add    esp,0x10
c00193cf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00193d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00193d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00193db:	0f 30                	wrmsr  
c00193dd:	90                   	nop
c00193de:	83 c4 1c             	add    esp,0x1c
c00193e1:	c3                   	ret    

c00193e2 <HalHandleGeneralProtectionFault(void*, void*)>:
c00193e2:	83 ec 0c             	sub    esp,0xc
c00193e5:	83 ec 0c             	sub    esp,0xc
c00193e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00193ec:	e8 48 e7 ff ff       	call   c0017b39 <Vm::faultHandler(regs*)>
c00193f1:	83 c4 10             	add    esp,0x10
c00193f4:	83 c4 0c             	add    esp,0xc
c00193f7:	c3                   	ret    

c00193f8 <HalFindRSDP()>:
c00193f8:	83 ec 1c             	sub    esp,0x1c
c00193fb:	a1 40 e1 02 c0       	mov    eax,ds:0xc002e140
c0019400:	3d ff 07 00 00       	cmp    eax,0x7ff
c0019405:	7e 0c                	jle    c0019413 <HalFindRSDP()+0x1b>
c0019407:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001940c:	25 00 04 00 00       	and    eax,0x400
c0019411:	74 0d                	je     c0019420 <HalFindRSDP()+0x28>
c0019413:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019418:	83 e0 fb             	and    eax,0xfffffffb
c001941b:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019420:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019425:	83 e0 04             	and    eax,0x4
c0019428:	0f b6 c0             	movzx  eax,al
c001942b:	85 c0                	test   eax,eax
c001942d:	75 07                	jne    c0019436 <HalFindRSDP()+0x3e>
c001942f:	b8 00 00 00 00       	mov    eax,0x0
c0019434:	eb 53                	jmp    c0019489 <HalFindRSDP()+0x91>
c0019436:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c001943e:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0019446:	77 2f                	ja     c0019477 <HalFindRSDP()+0x7f>
c0019448:	83 ec 04             	sub    esp,0x4
c001944b:	6a 08                	push   0x8
c001944d:	68 7b 4d 02 c0       	push   0xc0024d7b
c0019452:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019456:	e8 25 6f fe ff       	call   c0000380 <memcmp>
c001945b:	83 c4 10             	add    esp,0x10
c001945e:	85 c0                	test   eax,eax
c0019460:	0f 94 c0             	sete   al
c0019463:	0f b6 c0             	movzx  eax,al
c0019466:	85 c0                	test   eax,eax
c0019468:	74 06                	je     c0019470 <HalFindRSDP()+0x78>
c001946a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001946e:	eb 19                	jmp    c0019489 <HalFindRSDP()+0x91>
c0019470:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0019475:	eb c7                	jmp    c001943e <HalFindRSDP()+0x46>
c0019477:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c001947c:	83 e0 fb             	and    eax,0xfffffffb
c001947f:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019484:	b8 00 00 00 00       	mov    eax,0x0
c0019489:	83 c4 1c             	add    esp,0x1c
c001948c:	c3                   	ret    

c001948d <HalHandlePageFault(void*, void*)>:
c001948d:	83 ec 1c             	sub    esp,0x1c
c0019490:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019494:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019497:	83 ec 08             	sub    esp,0x8
c001949a:	50                   	push   eax
c001949b:	68 c0 4f 02 c0       	push   0xc0024fc0
c00194a0:	e8 bf da fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00194a5:	83 c4 10             	add    esp,0x10
c00194a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194ac:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00194af:	83 ec 08             	sub    esp,0x8
c00194b2:	50                   	push   eax
c00194b3:	68 84 4d 02 c0       	push   0xc0024d84
c00194b8:	e8 a7 da fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00194bd:	83 c4 10             	add    esp,0x10
c00194c0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00194c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00194c7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00194ca:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00194d0:	0f 20 d2             	mov    edx,cr2
c00194d3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00194d7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00194db:	83 ec 08             	sub    esp,0x8
c00194de:	52                   	push   edx
c00194df:	50                   	push   eax
c00194e0:	e8 7d ac ff ff       	call   c0014162 <VAS::tryLoadBackOffDisk(unsigned long)>
c00194e5:	83 c4 10             	add    esp,0x10
c00194e8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00194ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00194f0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00194f3:	83 ec 08             	sub    esp,0x8
c00194f6:	50                   	push   eax
c00194f7:	68 99 4d 02 c0       	push   0xc0024d99
c00194fc:	e8 63 da fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019501:	83 c4 10             	add    esp,0x10
c0019504:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019508:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001950b:	83 ec 08             	sub    esp,0x8
c001950e:	50                   	push   eax
c001950f:	68 b3 4d 02 c0       	push   0xc0024db3
c0019514:	e8 4b da fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019519:	83 c4 10             	add    esp,0x10
c001951c:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019521:	83 ec 08             	sub    esp,0x8
c0019524:	50                   	push   eax
c0019525:	68 c8 4d 02 c0       	push   0xc0024dc8
c001952a:	e8 35 da fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001952f:	83 c4 10             	add    esp,0x10
c0019532:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019536:	83 c4 1c             	add    esp,0x1c
c0019539:	c3                   	ret    

c001953a <HalHandleOpcodeFault(void*, void*)>:
c001953a:	83 ec 1c             	sub    esp,0x1c
c001953d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019545:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c001954a:	0f b6 c0             	movzx  eax,al
c001954d:	85 c0                	test   eax,eax
c001954f:	74 25                	je     c0019576 <HalHandleOpcodeFault(void*, void*)+0x3c>
c0019551:	83 ec 0c             	sub    esp,0xc
c0019554:	68 f4 4f 02 c0       	push   0xc0024ff4
c0019559:	e8 06 da fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001955e:	83 c4 10             	add    esp,0x10
c0019561:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019565:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019568:	8d 50 19             	lea    edx,[eax+0x19]
c001956b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001956f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0019572:	b0 01                	mov    al,0x1
c0019574:	eb 02                	jmp    c0019578 <HalHandleOpcodeFault(void*, void*)+0x3e>
c0019576:	b0 00                	mov    al,0x0
c0019578:	83 c4 1c             	add    esp,0x1c
c001957b:	c3                   	ret    

c001957c <HalDisplayDebugInfo(void*)>:
c001957c:	83 ec 2c             	sub    esp,0x2c
c001957f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0019583:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019587:	0f 20 c0             	mov    eax,cr0
c001958a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001958e:	0f 20 d0             	mov    eax,cr2
c0019591:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019595:	0f 20 d8             	mov    eax,cr3
c0019598:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001959c:	0f 20 e0             	mov    eax,cr4
c001959f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195a7:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c00195aa:	83 ec 08             	sub    esp,0x8
c00195ad:	50                   	push   eax
c00195ae:	68 e3 4d 02 c0       	push   0xc0024de3
c00195b3:	e8 ac d9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00195b8:	83 c4 10             	add    esp,0x10
c00195bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195bf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00195c2:	83 ec 08             	sub    esp,0x8
c00195c5:	50                   	push   eax
c00195c6:	68 d4 4d 02 c0       	push   0xc0024dd4
c00195cb:	e8 94 d9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00195d0:	83 c4 10             	add    esp,0x10
c00195d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195d7:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00195da:	83 ec 08             	sub    esp,0x8
c00195dd:	50                   	push   eax
c00195de:	68 df 4d 02 c0       	push   0xc0024ddf
c00195e3:	e8 7c d9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00195e8:	83 c4 10             	add    esp,0x10
c00195eb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00195ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00195f2:	83 ec 08             	sub    esp,0x8
c00195f5:	50                   	push   eax
c00195f6:	68 ee 4d 02 c0       	push   0xc0024dee
c00195fb:	e8 64 d9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019600:	83 c4 10             	add    esp,0x10
c0019603:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019607:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c001960a:	83 ec 08             	sub    esp,0x8
c001960d:	50                   	push   eax
c001960e:	68 f9 4d 02 c0       	push   0xc0024df9
c0019613:	e8 4c d9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019618:	83 c4 10             	add    esp,0x10
c001961b:	83 ec 08             	sub    esp,0x8
c001961e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019622:	68 04 4e 02 c0       	push   0xc0024e04
c0019627:	e8 38 d9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001962c:	83 c4 10             	add    esp,0x10
c001962f:	83 ec 08             	sub    esp,0x8
c0019632:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019636:	68 0f 4e 02 c0       	push   0xc0024e0f
c001963b:	e8 24 d9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019640:	83 c4 10             	add    esp,0x10
c0019643:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019647:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001964a:	c1 e0 05             	shl    eax,0x5
c001964d:	8d 90 00 63 02 c0    	lea    edx,[eax-0x3ffd9d00]
c0019653:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019657:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001965a:	83 ec 04             	sub    esp,0x4
c001965d:	52                   	push   edx
c001965e:	50                   	push   eax
c001965f:	68 1a 4e 02 c0       	push   0xc0024e1a
c0019664:	e8 fb d8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019669:	83 c4 10             	add    esp,0x10
c001966c:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019671:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019677:	83 ec 0c             	sub    esp,0xc
c001967a:	50                   	push   eax
c001967b:	e8 8f 8d ff ff       	call   c001240f <setActiveTerminal(VgaText*)>
c0019680:	83 c4 10             	add    esp,0x10
c0019683:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019688:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001968e:	83 ec 08             	sub    esp,0x8
c0019691:	68 29 4e 02 c0       	push   0xc0024e29
c0019696:	50                   	push   eax
c0019697:	e8 c0 90 ff ff       	call   c001275c <VgaText::puts(char const*)>
c001969c:	83 c4 10             	add    esp,0x10
c001969f:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00196a4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00196aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00196ae:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00196b1:	83 ec 08             	sub    esp,0x8
c00196b4:	52                   	push   edx
c00196b5:	50                   	push   eax
c00196b6:	e8 5b 90 ff ff       	call   c0012716 <VgaText::putx(unsigned int)>
c00196bb:	83 c4 10             	add    esp,0x10
c00196be:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00196c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00196c9:	83 ec 08             	sub    esp,0x8
c00196cc:	68 37 4e 02 c0       	push   0xc0024e37
c00196d1:	50                   	push   eax
c00196d2:	e8 85 90 ff ff       	call   c001275c <VgaText::puts(char const*)>
c00196d7:	83 c4 10             	add    esp,0x10
c00196da:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00196df:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00196e5:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00196ea:	8b 12                	mov    edx,DWORD PTR [edx]
c00196ec:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00196ef:	83 c2 0c             	add    edx,0xc
c00196f2:	83 ec 08             	sub    esp,0x8
c00196f5:	52                   	push   edx
c00196f6:	50                   	push   eax
c00196f7:	e8 60 90 ff ff       	call   c001275c <VgaText::puts(char const*)>
c00196fc:	83 c4 10             	add    esp,0x10
c00196ff:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019704:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001970a:	83 ec 08             	sub    esp,0x8
c001970d:	68 40 4e 02 c0       	push   0xc0024e40
c0019712:	50                   	push   eax
c0019713:	e8 44 90 ff ff       	call   c001275c <VgaText::puts(char const*)>
c0019718:	83 c4 10             	add    esp,0x10
c001971b:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019720:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019726:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001972a:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001972d:	83 ec 08             	sub    esp,0x8
c0019730:	52                   	push   edx
c0019731:	50                   	push   eax
c0019732:	e8 df 8f ff ff       	call   c0012716 <VgaText::putx(unsigned int)>
c0019737:	83 c4 10             	add    esp,0x10
c001973a:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001973f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019745:	83 ec 08             	sub    esp,0x8
c0019748:	68 48 4e 02 c0       	push   0xc0024e48
c001974d:	50                   	push   eax
c001974e:	e8 09 90 ff ff       	call   c001275c <VgaText::puts(char const*)>
c0019753:	83 c4 10             	add    esp,0x10
c0019756:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001975b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019761:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019765:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0019768:	83 ec 08             	sub    esp,0x8
c001976b:	52                   	push   edx
c001976c:	50                   	push   eax
c001976d:	e8 a4 8f ff ff       	call   c0012716 <VgaText::putx(unsigned int)>
c0019772:	83 c4 10             	add    esp,0x10
c0019775:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001977a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019780:	83 ec 08             	sub    esp,0x8
c0019783:	68 50 4e 02 c0       	push   0xc0024e50
c0019788:	50                   	push   eax
c0019789:	e8 ce 8f ff ff       	call   c001275c <VgaText::puts(char const*)>
c001978e:	83 c4 10             	add    esp,0x10
c0019791:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019796:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001979c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00197a0:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c00197a3:	83 ec 08             	sub    esp,0x8
c00197a6:	52                   	push   edx
c00197a7:	50                   	push   eax
c00197a8:	e8 69 8f ff ff       	call   c0012716 <VgaText::putx(unsigned int)>
c00197ad:	83 c4 10             	add    esp,0x10
c00197b0:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00197b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00197bb:	83 ec 08             	sub    esp,0x8
c00197be:	68 58 4e 02 c0       	push   0xc0024e58
c00197c3:	50                   	push   eax
c00197c4:	e8 93 8f ff ff       	call   c001275c <VgaText::puts(char const*)>
c00197c9:	83 c4 10             	add    esp,0x10
c00197cc:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00197d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00197d7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00197db:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00197de:	83 ec 08             	sub    esp,0x8
c00197e1:	52                   	push   edx
c00197e2:	50                   	push   eax
c00197e3:	e8 2e 8f ff ff       	call   c0012716 <VgaText::putx(unsigned int)>
c00197e8:	83 c4 10             	add    esp,0x10
c00197eb:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00197f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00197f6:	83 ec 08             	sub    esp,0x8
c00197f9:	68 60 4e 02 c0       	push   0xc0024e60
c00197fe:	50                   	push   eax
c00197ff:	e8 58 8f ff ff       	call   c001275c <VgaText::puts(char const*)>
c0019804:	83 c4 10             	add    esp,0x10
c0019807:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001980c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019812:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019816:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0019819:	83 ec 08             	sub    esp,0x8
c001981c:	52                   	push   edx
c001981d:	50                   	push   eax
c001981e:	e8 f3 8e ff ff       	call   c0012716 <VgaText::putx(unsigned int)>
c0019823:	83 c4 10             	add    esp,0x10
c0019826:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001982b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019831:	83 ec 08             	sub    esp,0x8
c0019834:	68 68 4e 02 c0       	push   0xc0024e68
c0019839:	50                   	push   eax
c001983a:	e8 1d 8f ff ff       	call   c001275c <VgaText::puts(char const*)>
c001983f:	83 c4 10             	add    esp,0x10
c0019842:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019847:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001984d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019851:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0019854:	83 ec 08             	sub    esp,0x8
c0019857:	52                   	push   edx
c0019858:	50                   	push   eax
c0019859:	e8 b8 8e ff ff       	call   c0012716 <VgaText::putx(unsigned int)>
c001985e:	83 c4 10             	add    esp,0x10
c0019861:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019866:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001986c:	83 ec 08             	sub    esp,0x8
c001986f:	68 70 4e 02 c0       	push   0xc0024e70
c0019874:	50                   	push   eax
c0019875:	e8 e2 8e ff ff       	call   c001275c <VgaText::puts(char const*)>
c001987a:	83 c4 10             	add    esp,0x10
c001987d:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c0019882:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0019888:	83 ec 08             	sub    esp,0x8
c001988b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001988f:	50                   	push   eax
c0019890:	e8 81 8e ff ff       	call   c0012716 <VgaText::putx(unsigned int)>
c0019895:	83 c4 10             	add    esp,0x10
c0019898:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001989d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00198a3:	83 ec 08             	sub    esp,0x8
c00198a6:	68 79 4e 02 c0       	push   0xc0024e79
c00198ab:	50                   	push   eax
c00198ac:	e8 ab 8e ff ff       	call   c001275c <VgaText::puts(char const*)>
c00198b1:	83 c4 10             	add    esp,0x10
c00198b4:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00198b9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00198bf:	83 ec 08             	sub    esp,0x8
c00198c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00198c6:	50                   	push   eax
c00198c7:	e8 4a 8e ff ff       	call   c0012716 <VgaText::putx(unsigned int)>
c00198cc:	83 c4 10             	add    esp,0x10
c00198cf:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00198d4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00198da:	83 ec 08             	sub    esp,0x8
c00198dd:	68 81 4e 02 c0       	push   0xc0024e81
c00198e2:	50                   	push   eax
c00198e3:	e8 74 8e ff ff       	call   c001275c <VgaText::puts(char const*)>
c00198e8:	83 c4 10             	add    esp,0x10
c00198eb:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c00198f0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00198f6:	83 ec 08             	sub    esp,0x8
c00198f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00198fd:	50                   	push   eax
c00198fe:	e8 13 8e ff ff       	call   c0012716 <VgaText::putx(unsigned int)>
c0019903:	83 c4 10             	add    esp,0x10
c0019906:	fa                   	cli    
c0019907:	f4                   	hlt    
c0019908:	eb fe                	jmp    c0019908 <HalDisplayDebugInfo(void*)+0x38c>

c001990a <HalReceivedNMI()>:
c001990a:	83 ec 1c             	sub    esp,0x1c
c001990d:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0019914:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019918:	89 c2                	mov    edx,eax
c001991a:	ec                   	in     al,dx
c001991b:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c001991f:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0019923:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019927:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c001992e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019932:	89 c2                	mov    edx,eax
c0019934:	ec                   	in     al,dx
c0019935:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0019939:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c001993d:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019941:	83 ec 0c             	sub    esp,0xc
c0019944:	68 89 4e 02 c0       	push   0xc0024e89
c0019949:	e8 16 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001994e:	83 c4 10             	add    esp,0x10
c0019951:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0019956:	83 e0 10             	and    eax,0x10
c0019959:	74 10                	je     c001996b <HalReceivedNMI()+0x61>
c001995b:	83 ec 0c             	sub    esp,0xc
c001995e:	68 9a 4e 02 c0       	push   0xc0024e9a
c0019963:	e8 3a 66 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0019968:	83 c4 10             	add    esp,0x10
c001996b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019970:	83 e0 40             	and    eax,0x40
c0019973:	74 10                	je     c0019985 <HalReceivedNMI()+0x7b>
c0019975:	83 ec 0c             	sub    esp,0xc
c0019978:	68 a7 4e 02 c0       	push   0xc0024ea7
c001997d:	e8 20 66 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0019982:	83 c4 10             	add    esp,0x10
c0019985:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c0019989:	0f be c0             	movsx  eax,al
c001998c:	85 c0                	test   eax,eax
c001998e:	79 10                	jns    c00199a0 <HalReceivedNMI()+0x96>
c0019990:	83 ec 0c             	sub    esp,0xc
c0019993:	68 b1 4e 02 c0       	push   0xc0024eb1
c0019998:	e8 05 66 ff ff       	call   c000ffa2 <KePanic(char const*)>
c001999d:	83 c4 10             	add    esp,0x10
c00199a0:	90                   	nop
c00199a1:	83 c4 1c             	add    esp,0x1c
c00199a4:	c3                   	ret    

c00199a5 <HalSystemIdle()>:
c00199a5:	56                   	push   esi
c00199a6:	53                   	push   ebx
c00199a7:	83 ec 14             	sub    esp,0x14
c00199aa:	a0 10 eb 02 c0       	mov    al,ds:0xc002eb10
c00199af:	83 e0 10             	and    eax,0x10
c00199b2:	0f b6 c0             	movzx  eax,al
c00199b5:	85 c0                	test   eax,eax
c00199b7:	74 43                	je     c00199fc <HalSystemIdle()+0x57>
c00199b9:	83 ec 0c             	sub    esp,0xc
c00199bc:	68 e1 00 00 00       	push   0xe1
c00199c1:	e8 99 f9 ff ff       	call   c001935f <x86rdmsr(unsigned int)>
c00199c6:	83 c4 10             	add    esp,0x10
c00199c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00199d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00199d5:	83 e0 02             	and    eax,0x2
c00199d8:	89 c3                	mov    ebx,eax
c00199da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00199de:	83 e0 00             	and    eax,0x0
c00199e1:	89 c6                	mov    esi,eax
c00199e3:	83 ec 04             	sub    esp,0x4
c00199e6:	56                   	push   esi
c00199e7:	53                   	push   ebx
c00199e8:	68 e1 00 00 00       	push   0xe1
c00199ed:	e8 ab f9 ff ff       	call   c001939d <x86wrmsr(unsigned int, unsigned long long)>
c00199f2:	83 c4 10             	add    esp,0x10
c00199f5:	e8 9a 67 fe ff       	call   c0000194 <doTPAUSE>
c00199fa:	eb 01                	jmp    c00199fd <HalSystemIdle()+0x58>
c00199fc:	f4                   	hlt    
c00199fd:	90                   	nop
c00199fe:	83 c4 14             	add    esp,0x14
c0019a01:	5b                   	pop    ebx
c0019a02:	5e                   	pop    esi
c0019a03:	c3                   	ret    

c0019a04 <i386SaveCoprocessor(void*)>:
c0019a04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a08:	83 c0 3f             	add    eax,0x3f
c0019a0b:	83 e0 c0             	and    eax,0xffffffc0
c0019a0e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019a12:	ff 25 d0 ea 02 c0    	jmp    DWORD PTR ds:0xc002ead0

c0019a18 <i386LoadCoprocessor(void*)>:
c0019a18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a1c:	83 c0 3f             	add    eax,0x3f
c0019a1f:	83 e0 c0             	and    eax,0xffffffc0
c0019a22:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019a26:	ff 25 cc ea 02 c0    	jmp    DWORD PTR ds:0xc002eacc

c0019a2c <x87EmulHandler(regs*, void*)>:
c0019a2c:	53                   	push   ebx
c0019a2d:	83 ec 08             	sub    esp,0x8
c0019a30:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a35:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0019a39:	74 10                	je     c0019a4b <x87EmulHandler(regs*, void*)+0x1f>
c0019a3b:	83 ec 0c             	sub    esp,0xc
c0019a3e:	68 be 4e 02 c0       	push   0xc0024ebe
c0019a43:	e8 5a 65 ff ff       	call   c000ffa2 <KePanic(char const*)>
c0019a48:	83 c4 10             	add    esp,0x10
c0019a4b:	0f 20 c0             	mov    eax,cr0
c0019a4e:	a8 08                	test   al,0x8
c0019a50:	74 59                	je     c0019aab <x87EmulHandler(regs*, void*)+0x7f>
c0019a52:	0f 06                	clts   
c0019a54:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019a59:	85 c0                	test   eax,eax
c0019a5b:	74 0e                	je     c0019a6b <x87EmulHandler(regs*, void*)+0x3f>
c0019a5d:	83 ec 0c             	sub    esp,0xc
c0019a60:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019a63:	e8 9c ff ff ff       	call   c0019a04 <i386SaveCoprocessor(void*)>
c0019a68:	83 c4 10             	add    esp,0x10
c0019a6b:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019a71:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0019a75:	75 12                	jne    c0019a89 <x87EmulHandler(regs*, void*)+0x5d>
c0019a77:	83 ec 0c             	sub    esp,0xc
c0019a7a:	68 40 02 00 00       	push   0x240
c0019a7f:	e8 d7 61 ff ff       	call   c000fc5b <malloc>
c0019a84:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c0019a87:	eb 10                	jmp    c0019a99 <x87EmulHandler(regs*, void*)+0x6d>
c0019a89:	83 ec 0c             	sub    esp,0xc
c0019a8c:	a1 c8 ea 02 c0       	mov    eax,ds:0xc002eac8
c0019a91:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019a94:	e8 7f ff ff ff       	call   c0019a18 <i386LoadCoprocessor(void*)>
c0019a99:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019a9e:	83 c4 10             	add    esp,0x10
c0019aa1:	a3 c8 ea 02 c0       	mov    ds:0xc002eac8,eax
c0019aa6:	83 c4 08             	add    esp,0x8
c0019aa9:	5b                   	pop    ebx
c0019aaa:	c3                   	ret    
c0019aab:	83 ec 0c             	sub    esp,0xc
c0019aae:	68 d2 4e 02 c0       	push   0xc0024ed2
c0019ab3:	e8 ac d4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019ab8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019ac0:	83 c4 18             	add    esp,0x18
c0019ac3:	5b                   	pop    ebx
c0019ac4:	e9 b7 d9 ff ff       	jmp    c0017480 <Thr::terminateFromIRQ(int)>

c0019ac9 <HalInitialiseCoprocessor()>:
c0019ac9:	83 ec 10             	sub    esp,0x10
c0019acc:	c7 05 c8 ea 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eac8,0x0
c0019ad6:	6a 00                	push   0x0
c0019ad8:	68 2c 9a 01 c0       	push   0xc0019a2c
c0019add:	6a 07                	push   0x7
c0019adf:	e8 9d 06 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ae4:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019ae9:	83 c4 10             	add    esp,0x10
c0019aec:	a8 80                	test   al,0x80
c0019aee:	74 1c                	je     c0019b0c <HalInitialiseCoprocessor()+0x43>
c0019af0:	c7 05 d0 ea 02 c0 88 11 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc0021188
c0019afa:	c7 05 cc ea 02 c0 90 11 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc0021190
c0019b04:	83 c4 0c             	add    esp,0xc
c0019b07:	e9 8c 76 00 00       	jmp    c0021198 <sseInit>
c0019b0c:	a8 10                	test   al,0x10
c0019b0e:	74 1c                	je     c0019b2c <HalInitialiseCoprocessor()+0x63>
c0019b10:	c7 05 d0 ea 02 c0 d7 11 02 c0 	mov    DWORD PTR ds:0xc002ead0,0xc00211d7
c0019b1a:	c7 05 cc ea 02 c0 de 11 02 c0 	mov    DWORD PTR ds:0xc002eacc,0xc00211de
c0019b24:	83 c4 0c             	add    esp,0xc
c0019b27:	e9 b9 76 00 00       	jmp    c00211e5 <x87Init>
c0019b2c:	c7 05 d0 ea 02 c0 5e 82 01 c0 	mov    DWORD PTR ds:0xc002ead0,0xc001825e
c0019b36:	c7 05 cc ea 02 c0 5e 82 01 c0 	mov    DWORD PTR ds:0xc002eacc,0xc001825e
c0019b40:	0f 20 c0             	mov    eax,cr0
c0019b43:	83 c8 04             	or     eax,0x4
c0019b46:	0f 22 c0             	mov    cr0,eax
c0019b49:	83 c4 0c             	add    esp,0xc
c0019b4c:	c3                   	ret    

c0019b4d <HalPanic(char const*)>:
c0019b4d:	53                   	push   ebx
c0019b4e:	83 ec 10             	sub    esp,0x10
c0019b51:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019b55:	fa                   	cli    
c0019b56:	53                   	push   ebx
c0019b57:	68 e8 4e 02 c0       	push   0xc0024ee8
c0019b5c:	e8 03 d4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019b61:	a1 c4 ea 02 c0       	mov    eax,ds:0xc002eac4
c0019b66:	83 c4 10             	add    esp,0x10
c0019b69:	85 c0                	test   eax,eax
c0019b6b:	74 09                	je     c0019b76 <HalPanic(char const*)+0x29>
c0019b6d:	83 ec 0c             	sub    esp,0xc
c0019b70:	53                   	push   ebx
c0019b71:	ff d0                	call   eax
c0019b73:	83 c4 10             	add    esp,0x10
c0019b76:	a1 b4 e1 02 c0       	mov    eax,ds:0xc002e1b4
c0019b7b:	85 c0                	test   eax,eax
c0019b7d:	0f 84 dc 00 00 00    	je     c0019c5f <HalPanic(char const*)+0x112>
c0019b83:	52                   	push   edx
c0019b84:	6a 01                	push   0x1
c0019b86:	6a 0f                	push   0xf
c0019b88:	50                   	push   eax
c0019b89:	e8 c0 86 ff ff       	call   c001224e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019b8e:	59                   	pop    ecx
c0019b8f:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019b95:	e8 c0 88 ff ff       	call   c001245a <VgaText::clearScreen()>
c0019b9a:	58                   	pop    eax
c0019b9b:	5a                   	pop    edx
c0019b9c:	68 8a 3f 02 c0       	push   0xc0023f8a
c0019ba1:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019ba7:	e8 da 86 ff ff       	call   c0012286 <VgaText::setTitle(char*)>
c0019bac:	83 c4 0c             	add    esp,0xc
c0019baf:	6a 01                	push   0x1
c0019bb1:	6a 0f                	push   0xf
c0019bb3:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019bb9:	e8 90 86 ff ff       	call   c001224e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019bbe:	59                   	pop    ecx
c0019bbf:	58                   	pop    eax
c0019bc0:	68 01 4f 02 c0       	push   0xc0024f01
c0019bc5:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019bcb:	e8 8c 8b ff ff       	call   c001275c <VgaText::puts(char const*)>
c0019bd0:	83 c4 0c             	add    esp,0xc
c0019bd3:	6a 0f                	push   0xf
c0019bd5:	6a 01                	push   0x1
c0019bd7:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019bdd:	e8 6c 86 ff ff       	call   c001224e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019be2:	58                   	pop    eax
c0019be3:	5a                   	pop    edx
c0019be4:	68 0a 4f 02 c0       	push   0xc0024f0a
c0019be9:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019bef:	e8 68 8b ff ff       	call   c001275c <VgaText::puts(char const*)>
c0019bf4:	83 c4 0c             	add    esp,0xc
c0019bf7:	6a 01                	push   0x1
c0019bf9:	6a 0f                	push   0xf
c0019bfb:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019c01:	e8 48 86 ff ff       	call   c001224e <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019c06:	59                   	pop    ecx
c0019c07:	58                   	pop    eax
c0019c08:	68 4e 4f 02 c0       	push   0xc0024f4e
c0019c0d:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019c13:	e8 44 8b ff ff       	call   c001275c <VgaText::puts(char const*)>
c0019c18:	58                   	pop    eax
c0019c19:	5a                   	pop    edx
c0019c1a:	68 17 4f 02 c0       	push   0xc0024f17
c0019c1f:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019c25:	e8 32 8b ff ff       	call   c001275c <VgaText::puts(char const*)>
c0019c2a:	59                   	pop    ecx
c0019c2b:	58                   	pop    eax
c0019c2c:	68 51 4f 02 c0       	push   0xc0024f51
c0019c31:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019c37:	e8 20 8b ff ff       	call   c001275c <VgaText::puts(char const*)>
c0019c3c:	58                   	pop    eax
c0019c3d:	5a                   	pop    edx
c0019c3e:	53                   	push   ebx
c0019c3f:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019c45:	e8 12 8b ff ff       	call   c001275c <VgaText::puts(char const*)>
c0019c4a:	59                   	pop    ecx
c0019c4b:	5b                   	pop    ebx
c0019c4c:	68 4e 4f 02 c0       	push   0xc0024f4e
c0019c51:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c0019c57:	e8 00 8b ff ff       	call   c001275c <VgaText::puts(char const*)>
c0019c5c:	83 c4 10             	add    esp,0x10
c0019c5f:	eb fe                	jmp    c0019c5f <HalPanic(char const*)+0x112>

c0019c61 <HalQueryPerformanceCounter()>:
c0019c61:	31 c0                	xor    eax,eax
c0019c63:	31 d2                	xor    edx,edx
c0019c65:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c0019c6c:	75 02                	jne    c0019c70 <HalQueryPerformanceCounter()+0xf>
c0019c6e:	0f 31                	rdtsc  
c0019c70:	c3                   	ret    

c0019c71 <HalInitialise()>:
c0019c71:	53                   	push   ebx
c0019c72:	83 ec 08             	sub    esp,0x8
c0019c75:	c6 05 c0 ea 02 c0 00 	mov    BYTE PTR ds:0xc002eac0,0x0
c0019c7c:	a0 0c eb 02 c0       	mov    al,ds:0xc002eb0c
c0019c81:	83 e0 fe             	and    eax,0xfffffffe
c0019c84:	a2 0c eb 02 c0       	mov    ds:0xc002eb0c,al
c0019c89:	e8 d2 07 00 00       	call   c001a460 <picOpen()>
c0019c8e:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c0019c95:	74 0a                	je     c0019ca1 <HalInitialise()+0x30>
c0019c97:	e8 14 07 00 00       	call   c001a3b0 <picDisable()>
c0019c9c:	e8 bf 6a 00 00       	call   c0020760 <apicOpen()>
c0019ca1:	bb 0f 00 00 00       	mov    ebx,0xf
c0019ca6:	50                   	push   eax
c0019ca7:	6a 00                	push   0x0
c0019ca9:	68 1c ec 00 c0       	push   0xc000ec1c
c0019cae:	6a 00                	push   0x0
c0019cb0:	e8 cc 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019cb5:	83 c4 0c             	add    esp,0xc
c0019cb8:	6a 00                	push   0x0
c0019cba:	68 1c ec 00 c0       	push   0xc000ec1c
c0019cbf:	6a 01                	push   0x1
c0019cc1:	e8 bb 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019cc6:	83 c4 0c             	add    esp,0xc
c0019cc9:	6a 00                	push   0x0
c0019ccb:	68 0c ec 00 c0       	push   0xc000ec0c
c0019cd0:	6a 02                	push   0x2
c0019cd2:	e8 aa 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019cd7:	83 c4 0c             	add    esp,0xc
c0019cda:	6a 00                	push   0x0
c0019cdc:	68 1c ec 00 c0       	push   0xc000ec1c
c0019ce1:	6a 03                	push   0x3
c0019ce3:	e8 99 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019ce8:	83 c4 0c             	add    esp,0xc
c0019ceb:	6a 00                	push   0x0
c0019ced:	68 1c ec 00 c0       	push   0xc000ec1c
c0019cf2:	6a 04                	push   0x4
c0019cf4:	e8 88 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019cf9:	83 c4 0c             	add    esp,0xc
c0019cfc:	6a 00                	push   0x0
c0019cfe:	68 1c ec 00 c0       	push   0xc000ec1c
c0019d03:	6a 05                	push   0x5
c0019d05:	e8 77 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019d0a:	83 c4 0c             	add    esp,0xc
c0019d0d:	6a 00                	push   0x0
c0019d0f:	68 50 ec 00 c0       	push   0xc000ec50
c0019d14:	6a 06                	push   0x6
c0019d16:	e8 66 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019d1b:	83 c4 0c             	add    esp,0xc
c0019d1e:	6a 00                	push   0x0
c0019d20:	68 a4 ec 00 c0       	push   0xc000eca4
c0019d25:	6a 08                	push   0x8
c0019d27:	e8 55 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019d2c:	83 c4 0c             	add    esp,0xc
c0019d2f:	6a 00                	push   0x0
c0019d31:	68 1c ec 00 c0       	push   0xc000ec1c
c0019d36:	6a 09                	push   0x9
c0019d38:	e8 44 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019d3d:	83 c4 0c             	add    esp,0xc
c0019d40:	6a 00                	push   0x0
c0019d42:	68 1c ec 00 c0       	push   0xc000ec1c
c0019d47:	6a 0a                	push   0xa
c0019d49:	e8 33 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019d4e:	83 c4 0c             	add    esp,0xc
c0019d51:	6a 00                	push   0x0
c0019d53:	68 1c ec 00 c0       	push   0xc000ec1c
c0019d58:	6a 0b                	push   0xb
c0019d5a:	e8 22 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019d5f:	83 c4 0c             	add    esp,0xc
c0019d62:	6a 00                	push   0x0
c0019d64:	68 54 eb 00 c0       	push   0xc000eb54
c0019d69:	6a 0d                	push   0xd
c0019d6b:	e8 11 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019d70:	83 c4 0c             	add    esp,0xc
c0019d73:	6a 00                	push   0x0
c0019d75:	68 a8 eb 00 c0       	push   0xc000eba8
c0019d7a:	6a 0e                	push   0xe
c0019d7c:	e8 00 04 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019d81:	83 c4 10             	add    esp,0x10
c0019d84:	50                   	push   eax
c0019d85:	6a 00                	push   0x0
c0019d87:	68 1c ec 00 c0       	push   0xc000ec1c
c0019d8c:	53                   	push   ebx
c0019d8d:	43                   	inc    ebx
c0019d8e:	e8 ee 03 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019d93:	83 c4 10             	add    esp,0x10
c0019d96:	83 fb 1e             	cmp    ebx,0x1e
c0019d99:	75 e9                	jne    c0019d84 <HalInitialise()+0x113>
c0019d9b:	50                   	push   eax
c0019d9c:	6a 00                	push   0x0
c0019d9e:	68 e8 20 01 c0       	push   0xc00120e8
c0019da3:	6a 60                	push   0x60
c0019da5:	e8 d7 03 00 00       	call   c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019daa:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0019daf:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0019db9:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0019dc0:	e8 96 5e ff ff       	call   c000fc5b <malloc>
c0019dc5:	89 04 24             	mov    DWORD PTR [esp],eax
c0019dc8:	89 c3                	mov    ebx,eax
c0019dca:	e8 ff 0d 00 00       	call   c001abce <RTC::RTC()>
c0019dcf:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0019dd9:	5a                   	pop    edx
c0019dda:	59                   	pop    ecx
c0019ddb:	53                   	push   ebx
c0019ddc:	ff 35 d0 c0 02 c0    	push   DWORD PTR ds:0xc002c0d0
c0019de2:	e8 13 fc fe ff       	call   c00099fa <Device::addChild(Device*)>
c0019de7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019de9:	6a 00                	push   0x0
c0019deb:	6a 00                	push   0x0
c0019ded:	6a 00                	push   0x0
c0019def:	53                   	push   ebx
c0019df0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019df3:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c0019df8:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0019dfe:	83 c4 28             	add    esp,0x28
c0019e01:	5b                   	pop    ebx
c0019e02:	c3                   	ret    

c0019e03 <HalMakeBeep(int)>:
c0019e03:	53                   	push   ebx
c0019e04:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0019e08:	85 db                	test   ebx,ebx
c0019e0a:	75 07                	jne    c0019e13 <HalMakeBeep(int)+0x10>
c0019e0c:	e4 61                	in     al,0x61
c0019e0e:	83 e0 fc             	and    eax,0xfffffffc
c0019e11:	eb 26                	jmp    c0019e39 <HalMakeBeep(int)+0x36>
c0019e13:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0019e18:	99                   	cdq    
c0019e19:	f7 fb                	idiv   ebx
c0019e1b:	89 c1                	mov    ecx,eax
c0019e1d:	b0 b6                	mov    al,0xb6
c0019e1f:	e6 43                	out    0x43,al
c0019e21:	88 c8                	mov    al,cl
c0019e23:	e6 42                	out    0x42,al
c0019e25:	89 c8                	mov    eax,ecx
c0019e27:	c1 e8 08             	shr    eax,0x8
c0019e2a:	e6 42                	out    0x42,al
c0019e2c:	e4 61                	in     al,0x61
c0019e2e:	89 c2                	mov    edx,eax
c0019e30:	83 ca 03             	or     edx,0x3
c0019e33:	38 d0                	cmp    al,dl
c0019e35:	74 04                	je     c0019e3b <HalMakeBeep(int)+0x38>
c0019e37:	88 d0                	mov    al,dl
c0019e39:	e6 61                	out    0x61,al
c0019e3b:	5b                   	pop    ebx
c0019e3c:	c3                   	ret    

c0019e3d <HalGetRand()>:
c0019e3d:	31 c0                	xor    eax,eax
c0019e3f:	c3                   	ret    

c0019e40 <HalEndOfInterrupt(int)>:
c0019e40:	80 3d c0 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002eac0,0x0
c0019e47:	74 1d                	je     c0019e66 <HalEndOfInterrupt(int)+0x26>
c0019e49:	83 ec 18             	sub    esp,0x18
c0019e4c:	6a 1b                	push   0x1b
c0019e4e:	e8 0c f5 ff ff       	call   c001935f <x86rdmsr(unsigned int)>
c0019e53:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019e58:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0019e62:	83 c4 1c             	add    esp,0x1c
c0019e65:	c3                   	ret    
c0019e66:	e9 79 07 00 00       	jmp    c001a5e4 <picEOI(int)>

c0019e6b <HalRestart()>:
c0019e6b:	c3                   	ret    

c0019e6c <HalShutdown()>:
c0019e6c:	c3                   	ret    

c0019e6d <HalSleep()>:
c0019e6d:	c3                   	ret    

c0019e6e <CPU::CPU()>:
c0019e6e:	83 ec 0c             	sub    esp,0xc
c0019e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e75:	83 ec 08             	sub    esp,0x8
c0019e78:	68 c3 4c 02 c0       	push   0xc0024cc3
c0019e7d:	50                   	push   eax
c0019e7e:	e8 d9 fc fe ff       	call   c0009b5c <Device::Device(char const*)>
c0019e83:	83 c4 10             	add    esp,0x10
c0019e86:	ba 20 50 02 c0       	mov    edx,0xc0025020
c0019e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e8f:	89 10                	mov    DWORD PTR [eax],edx
c0019e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019e95:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0019e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ea3:	05 64 01 00 00       	add    eax,0x164
c0019ea8:	83 ec 0c             	sub    esp,0xc
c0019eab:	50                   	push   eax
c0019eac:	e8 47 4e ff ff       	call   c000ecf8 <GDT::GDT()>
c0019eb1:	83 c4 10             	add    esp,0x10
c0019eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019eb8:	05 68 09 00 00       	add    eax,0x968
c0019ebd:	83 ec 0c             	sub    esp,0xc
c0019ec0:	50                   	push   eax
c0019ec1:	e8 86 50 ff ff       	call   c000ef4c <IDT::IDT()>
c0019ec6:	83 c4 10             	add    esp,0x10
c0019ec9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ecd:	05 68 11 00 00       	add    eax,0x1168
c0019ed2:	83 ec 0c             	sub    esp,0xc
c0019ed5:	50                   	push   eax
c0019ed6:	e8 5d 8d ff ff       	call   c0012c38 <TSS::TSS()>
c0019edb:	83 c4 10             	add    esp,0x10
c0019ede:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ee2:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c0019eec:	90                   	nop
c0019eed:	83 c4 0c             	add    esp,0xc
c0019ef0:	c3                   	ret    
c0019ef1:	90                   	nop

c0019ef2 <CPU::setupSMEP()>:
c0019ef2:	0f 20 e0             	mov    eax,cr4
c0019ef5:	0d 00 00 10 00       	or     eax,0x100000
c0019efa:	0f 22 e0             	mov    cr4,eax
c0019efd:	c3                   	ret    

c0019efe <CPU::setupUMIP()>:
c0019efe:	0f 20 e0             	mov    eax,cr4
c0019f01:	80 cc 08             	or     ah,0x8
c0019f04:	0f 22 e0             	mov    cr4,eax
c0019f07:	c3                   	ret    

c0019f08 <CPU::setupTSC()>:
c0019f08:	0f 20 e0             	mov    eax,cr4
c0019f0b:	83 c8 04             	or     eax,0x4
c0019f0e:	0f 22 e0             	mov    cr4,eax
c0019f11:	c3                   	ret    

c0019f12 <CPU::setupLargePages()>:
c0019f12:	0f 20 e0             	mov    eax,cr4
c0019f15:	83 c8 10             	or     eax,0x10
c0019f18:	0f 22 e0             	mov    cr4,eax
c0019f1b:	c3                   	ret    

c0019f1c <CPU::setupPAT()>:
c0019f1c:	f6 05 0c eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0c,0x8
c0019f23:	74 28                	je     c0019f4d <CPU::setupPAT()+0x31>
c0019f25:	53                   	push   ebx
c0019f26:	83 ec 14             	sub    esp,0x14
c0019f29:	68 77 02 00 00       	push   0x277
c0019f2e:	e8 2c f4 ff ff       	call   c001935f <x86rdmsr(unsigned int)>
c0019f33:	83 c4 0c             	add    esp,0xc
c0019f36:	83 e2 f8             	and    edx,0xfffffff8
c0019f39:	83 ca 01             	or     edx,0x1
c0019f3c:	52                   	push   edx
c0019f3d:	50                   	push   eax
c0019f3e:	68 77 02 00 00       	push   0x277
c0019f43:	e8 55 f4 ff ff       	call   c001939d <x86wrmsr(unsigned int, unsigned long long)>
c0019f48:	83 c4 18             	add    esp,0x18
c0019f4b:	5b                   	pop    ebx
c0019f4c:	c3                   	ret    
c0019f4d:	c3                   	ret    

c0019f4e <CPU::setupMTRR()>:
c0019f4e:	c3                   	ret    
c0019f4f:	90                   	nop

c0019f50 <CPU::setupGlobalPages()>:
c0019f50:	0f 20 e0             	mov    eax,cr4
c0019f53:	0c 80                	or     al,0x80
c0019f55:	0f 22 e0             	mov    cr4,eax
c0019f58:	c3                   	ret    
c0019f59:	90                   	nop

c0019f5a <CPU::allowUsermodeDataAccess()>:
c0019f5a:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c0019f61:	74 03                	je     c0019f66 <CPU::allowUsermodeDataAccess()+0xc>
c0019f63:	0f 01 cb             	stac   
c0019f66:	c3                   	ret    
c0019f67:	90                   	nop

c0019f68 <CPU::prohibitUsermodeDataAccess()>:
c0019f68:	f6 05 0f eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0f,0x40
c0019f6f:	74 03                	je     c0019f74 <CPU::prohibitUsermodeDataAccess()+0xc>
c0019f71:	0f 01 ca             	clac   
c0019f74:	c3                   	ret    
c0019f75:	90                   	nop

c0019f76 <CPU::setupSMAP()>:
c0019f76:	0f 20 e0             	mov    eax,cr4
c0019f79:	0d 00 00 20 00       	or     eax,0x200000
c0019f7e:	0f 22 e0             	mov    cr4,eax
c0019f81:	eb e5                	jmp    c0019f68 <CPU::prohibitUsermodeDataAccess()>
c0019f83:	90                   	nop

c0019f84 <CPU::setupFeatures()>:
c0019f84:	53                   	push   ebx
c0019f85:	83 ec 08             	sub    esp,0x8
c0019f88:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f8c:	f6 05 0f eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0f,0x20
c0019f93:	74 18                	je     c0019fad <CPU::setupFeatures()+0x29>
c0019f95:	83 ec 0c             	sub    esp,0xc
c0019f98:	68 5c 4f 02 c0       	push   0xc0024f5c
c0019f9d:	e8 c2 cf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019fa2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fa5:	e8 54 ff ff ff       	call   c0019efe <CPU::setupUMIP()>
c0019faa:	83 c4 10             	add    esp,0x10
c0019fad:	f6 05 0e eb 02 c0 08 	test   BYTE PTR ds:0xc002eb0e,0x8
c0019fb4:	74 18                	je     c0019fce <CPU::setupFeatures()+0x4a>
c0019fb6:	83 ec 0c             	sub    esp,0xc
c0019fb9:	68 66 4f 02 c0       	push   0xc0024f66
c0019fbe:	e8 a1 cf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019fc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fc6:	e8 3d ff ff ff       	call   c0019f08 <CPU::setupTSC()>
c0019fcb:	83 c4 10             	add    esp,0x10
c0019fce:	f6 05 0e eb 02 c0 20 	test   BYTE PTR ds:0xc002eb0e,0x20
c0019fd5:	74 18                	je     c0019fef <CPU::setupFeatures()+0x6b>
c0019fd7:	83 ec 0c             	sub    esp,0xc
c0019fda:	68 6f 4f 02 c0       	push   0xc0024f6f
c0019fdf:	e8 80 cf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019fe4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fe7:	e8 26 ff ff ff       	call   c0019f12 <CPU::setupLargePages()>
c0019fec:	83 c4 10             	add    esp,0x10
c0019fef:	f6 05 0e eb 02 c0 40 	test   BYTE PTR ds:0xc002eb0e,0x40
c0019ff6:	74 18                	je     c001a010 <CPU::setupFeatures()+0x8c>
c0019ff8:	83 ec 0c             	sub    esp,0xc
c0019ffb:	68 78 4f 02 c0       	push   0xc0024f78
c001a000:	e8 5f cf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a005:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a008:	e8 43 ff ff ff       	call   c0019f50 <CPU::setupGlobalPages()>
c001a00d:	83 c4 10             	add    esp,0x10
c001a010:	f6 05 0e eb 02 c0 80 	test   BYTE PTR ds:0xc002eb0e,0x80
c001a017:	74 18                	je     c001a031 <CPU::setupFeatures()+0xad>
c001a019:	83 ec 0c             	sub    esp,0xc
c001a01c:	68 8a 4f 02 c0       	push   0xc0024f8a
c001a021:	e8 3e cf fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a026:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a029:	e8 ee fe ff ff       	call   c0019f1c <CPU::setupPAT()>
c001a02e:	83 c4 10             	add    esp,0x10
c001a031:	f6 05 10 eb 02 c0 04 	test   BYTE PTR ds:0xc002eb10,0x4
c001a038:	74 11                	je     c001a04b <CPU::setupFeatures()+0xc7>
c001a03a:	c7 44 24 10 93 4f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0024f93
c001a042:	83 c4 08             	add    esp,0x8
c001a045:	5b                   	pop    ebx
c001a046:	e9 19 cf fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c001a04b:	83 c4 08             	add    esp,0x8
c001a04e:	5b                   	pop    ebx
c001a04f:	c3                   	ret    

c001a050 <CPU::open(int, int, void*)>:
c001a050:	55                   	push   ebp
c001a051:	57                   	push   edi
c001a052:	56                   	push   esi
c001a053:	53                   	push   ebx
c001a054:	83 ec 18             	sub    esp,0x18
c001a057:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a05b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a05f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a063:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001a069:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c001a06f:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c001a075:	50                   	push   eax
c001a076:	e8 df 4c ff ff       	call   c000ed5a <GDT::setup()>
c001a07b:	83 c4 0c             	add    esp,0xc
c001a07e:	6a 00                	push   0x0
c001a080:	68 ef be ad de       	push   0xdeadbeef
c001a085:	55                   	push   ebp
c001a086:	e8 f1 8b ff ff       	call   c0012c7c <TSS::setup(unsigned long, unsigned long)>
c001a08b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a08e:	e8 c9 8b ff ff       	call   c0012c5c <TSS::flush()>
c001a093:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001a099:	89 04 24             	mov    DWORD PTR [esp],eax
c001a09c:	e8 21 4f ff ff       	call   c000efc2 <IDT::setup()>
c001a0a1:	b8 00 04 00 00       	mov    eax,0x400
c001a0a6:	0f 23 f8             	mov    dr7,eax
c001a0a9:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c001a0b3:	e8 de 60 ff ff       	call   c0010196 <Phys::allocatePage()>
c001a0b8:	83 c4 10             	add    esp,0x10
c001a0bb:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c001a0c1:	85 f6                	test   esi,esi
c001a0c3:	89 38                	mov    DWORD PTR [eax],edi
c001a0c5:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a0cb:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c001a0ce:	74 10                	je     c001a0e0 <CPU::open(int, int, void*)+0x90>
c001a0d0:	50                   	push   eax
c001a0d1:	50                   	push   eax
c001a0d2:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a0d8:	56                   	push   esi
c001a0d9:	e8 58 95 ff ff       	call   c0013636 <VAS::setCPUSpecific(unsigned long)>
c001a0de:	eb 0d                	jmp    c001a0ed <CPU::open(int, int, void*)+0x9d>
c001a0e0:	83 ec 0c             	sub    esp,0xc
c001a0e3:	68 9d 4f 02 c0       	push   0xc0024f9d
c001a0e8:	e8 b5 5e ff ff       	call   c000ffa2 <KePanic(char const*)>
c001a0ed:	83 c4 10             	add    esp,0x10
c001a0f0:	83 ec 0c             	sub    esp,0xc
c001a0f3:	68 ab 4f 02 c0       	push   0xc0024fab
c001a0f8:	e8 26 31 ff ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001a0fd:	e8 6f fb ff ff       	call   c0019c71 <HalInitialise()>
c001a102:	a1 24 e1 02 c0       	mov    eax,ds:0xc002e124
c001a107:	83 e0 10             	and    eax,0x10
c001a10a:	83 f8 01             	cmp    eax,0x1
c001a10d:	19 c0                	sbb    eax,eax
c001a10f:	83 e0 46             	and    eax,0x46
c001a112:	83 c0 1e             	add    eax,0x1e
c001a115:	89 04 24             	mov    DWORD PTR [esp],eax
c001a118:	e8 78 0f ff ff       	call   c000b095 <setupTimer(int)>
c001a11d:	83 c4 10             	add    esp,0x10
c001a120:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c001a126:	f6 05 24 e1 02 c0 20 	test   BYTE PTR ds:0xc002e124,0x20
c001a12d:	74 0c                	je     c001a13b <CPU::open(int, int, void*)+0xeb>
c001a12f:	83 ec 0c             	sub    esp,0xc
c001a132:	53                   	push   ebx
c001a133:	e8 4c fe ff ff       	call   c0019f84 <CPU::setupFeatures()>
c001a138:	83 c4 10             	add    esp,0x10
c001a13b:	83 c4 0c             	add    esp,0xc
c001a13e:	31 c0                	xor    eax,eax
c001a140:	5b                   	pop    ebx
c001a141:	5e                   	pop    esi
c001a142:	5f                   	pop    edi
c001a143:	5d                   	pop    ebp
c001a144:	c3                   	ret    

c001a145 <convertLegacyIRQNumber(int)>:
c001a145:	83 ec 0c             	sub    esp,0xc
c001a148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a14c:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a153:	74 0c                	je     c001a161 <convertLegacyIRQNumber(int)+0x1c>
c001a155:	83 f8 0f             	cmp    eax,0xf
c001a158:	7f 0b                	jg     c001a165 <convertLegacyIRQNumber(int)+0x20>
c001a15a:	0f b6 80 88 5b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda478]
c001a161:	83 c4 0c             	add    esp,0xc
c001a164:	c3                   	ret    
c001a165:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a169:	83 ec 0c             	sub    esp,0xc
c001a16c:	68 44 50 02 c0       	push   0xc0025044
c001a171:	e8 2c 5e ff ff       	call   c000ffa2 <KePanic(char const*)>
c001a176:	83 c4 10             	add    esp,0x10
c001a179:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a17d:	83 c4 0c             	add    esp,0xc
c001a180:	c3                   	ret    

c001a181 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c001a181:	56                   	push   esi
c001a182:	31 c0                	xor    eax,eax
c001a184:	53                   	push   ebx
c001a185:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a189:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a18d:	89 ca                	mov    edx,ecx
c001a18f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001a193:	c1 e2 04             	shl    edx,0x4
c001a196:	83 bc 82 e0 d0 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd2f20],0x0
c001a19e:	74 17                	je     c001a1b7 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c001a1a0:	83 c0 01             	add    eax,0x1
c001a1a3:	83 f8 04             	cmp    eax,0x4
c001a1a6:	75 ee                	jne    c001a196 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001a1a8:	c7 44 24 0c a5 50 02 c0 	mov    DWORD PTR [esp+0xc],0xc00250a5
c001a1b0:	5b                   	pop    ebx
c001a1b1:	5e                   	pop    esi
c001a1b2:	e9 eb 5d ff ff       	jmp    c000ffa2 <KePanic(char const*)>
c001a1b7:	8d 04 88             	lea    eax,[eax+ecx*4]
c001a1ba:	89 1c 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],ebx
c001a1c1:	89 34 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],esi
c001a1c8:	5b                   	pop    ebx
c001a1c9:	5e                   	pop    esi
c001a1ca:	c3                   	ret    

c001a1cb <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001a1cb:	57                   	push   edi
c001a1cc:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a1d3:	56                   	push   esi
c001a1d4:	53                   	push   ebx
c001a1d5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a1d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a1dd:	74 54                	je     c001a233 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c001a1df:	89 c7                	mov    edi,eax
c001a1e1:	84 c0                	test   al,al
c001a1e3:	74 1d                	je     c001a202 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001a1e5:	83 fe 0f             	cmp    esi,0xf
c001a1e8:	0f 8f d5 00 00 00    	jg     c001a2c3 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c001a1ee:	0f b6 b6 88 5b 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffda478]
c001a1f5:	0f b7 bc 36 20 be 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd41e0]
c001a1fd:	d1 ef                	shr    edi,1
c001a1ff:	83 e7 01             	and    edi,0x1
c001a202:	83 ec 08             	sub    esp,0x8
c001a205:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a20a:	31 db                	xor    ebx,ebx
c001a20c:	50                   	push   eax
c001a20d:	68 b2 50 02 c0       	push   0xc00250b2
c001a212:	e8 4d cd fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001a217:	83 c4 10             	add    esp,0x10
c001a21a:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c001a21f:	85 c0                	test   eax,eax
c001a221:	7f 55                	jg     c001a278 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c001a223:	83 ec 0c             	sub    esp,0xc
c001a226:	68 c9 50 02 c0       	push   0xc00250c9
c001a22b:	e8 72 5d ff ff       	call   c000ffa2 <KePanic(char const*)>
c001a230:	83 c4 10             	add    esp,0x10
c001a233:	8d 7e 20             	lea    edi,[esi+0x20]
c001a236:	89 f8                	mov    eax,edi
c001a238:	31 d2                	xor    edx,edx
c001a23a:	c1 e0 04             	shl    eax,0x4
c001a23d:	8b 8c 90 e0 d0 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd2f20]
c001a244:	85 c9                	test   ecx,ecx
c001a246:	0f 84 8e 00 00 00    	je     c001a2da <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c001a24c:	83 c2 01             	add    edx,0x1
c001a24f:	83 fa 04             	cmp    edx,0x4
c001a252:	75 e9                	jne    c001a23d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c001a254:	83 ec 0c             	sub    esp,0xc
c001a257:	68 80 50 02 c0       	push   0xc0025080
c001a25c:	e8 41 5d ff ff       	call   c000ffa2 <KePanic(char const*)>
c001a261:	83 c4 10             	add    esp,0x10
c001a264:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001a269:	5b                   	pop    ebx
c001a26a:	5e                   	pop    esi
c001a26b:	5f                   	pop    edi
c001a26c:	c3                   	ret    
c001a26d:	83 c3 01             	add    ebx,0x1
c001a270:	39 1d 60 f4 02 c0    	cmp    DWORD PTR ds:0xc002f460,ebx
c001a276:	7e ab                	jle    c001a223 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001a278:	83 ec 08             	sub    esp,0x8
c001a27b:	8b 04 9d 80 f4 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd0b80]
c001a282:	56                   	push   esi
c001a283:	50                   	push   eax
c001a284:	e8 63 66 00 00       	call   c00208ec <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001a289:	83 c4 10             	add    esp,0x10
c001a28c:	84 c0                	test   al,al
c001a28e:	74 dd                	je     c001a26d <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c001a290:	83 ec 04             	sub    esp,0x4
c001a293:	89 f8                	mov    eax,edi
c001a295:	8b 1c 9d 80 f4 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd0b80]
c001a29c:	0f b6 f8             	movzx  edi,al
c001a29f:	57                   	push   edi
c001a2a0:	8d 7e 20             	lea    edi,[esi+0x20]
c001a2a3:	6a 00                	push   0x0
c001a2a5:	89 f8                	mov    eax,edi
c001a2a7:	0f b6 c0             	movzx  eax,al
c001a2aa:	50                   	push   eax
c001a2ab:	89 f0                	mov    eax,esi
c001a2ad:	6a 00                	push   0x0
c001a2af:	0f b6 c0             	movzx  eax,al
c001a2b2:	6a 00                	push   0x0
c001a2b4:	50                   	push   eax
c001a2b5:	53                   	push   ebx
c001a2b6:	e8 9d 67 00 00       	call   c0020a58 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001a2bb:	83 c4 20             	add    esp,0x20
c001a2be:	e9 73 ff ff ff       	jmp    c001a236 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c001a2c3:	83 ec 0c             	sub    esp,0xc
c001a2c6:	31 ff                	xor    edi,edi
c001a2c8:	68 44 50 02 c0       	push   0xc0025044
c001a2cd:	e8 d0 5c ff ff       	call   c000ffa2 <KePanic(char const*)>
c001a2d2:	83 c4 10             	add    esp,0x10
c001a2d5:	e9 28 ff ff ff       	jmp    c001a202 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001a2da:	8d 04 ba             	lea    eax,[edx+edi*4]
c001a2dd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a2e1:	89 14 85 e0 d0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2f20],edx
c001a2e8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a2ec:	5b                   	pop    ebx
c001a2ed:	89 14 85 e0 c0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3f20],edx
c001a2f4:	89 f0                	mov    eax,esi
c001a2f6:	5e                   	pop    esi
c001a2f7:	5f                   	pop    edi
c001a2f8:	c3                   	ret    

c001a2f9 <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c001a2f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2fd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a301:	c1 e0 04             	shl    eax,0x4
c001a304:	8d 50 10             	lea    edx,[eax+0x10]
c001a307:	39 88 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ecx
c001a30d:	74 08                	je     c001a317 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c001a30f:	83 c0 04             	add    eax,0x4
c001a312:	39 d0                	cmp    eax,edx
c001a314:	75 f1                	jne    c001a307 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c001a316:	c3                   	ret    
c001a317:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a321:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a32b:	eb e2                	jmp    c001a30f <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c001a32d <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c001a32d:	53                   	push   ebx
c001a32e:	83 ec 08             	sub    esp,0x8
c001a331:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a335:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001a33a:	74 09                	je     c001a345 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a33c:	f6 05 0c eb 02 c0 01 	test   BYTE PTR ds:0xc002eb0c,0x1
c001a343:	75 37                	jne    c001a37c <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c001a345:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a349:	83 c0 20             	add    eax,0x20
c001a34c:	c1 e0 04             	shl    eax,0x4
c001a34f:	8d 50 10             	lea    edx,[eax+0x10]
c001a352:	39 98 e0 d0 02 c0    	cmp    DWORD PTR [eax-0x3ffd2f20],ebx
c001a358:	74 0c                	je     c001a366 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c001a35a:	83 c0 04             	add    eax,0x4
c001a35d:	39 d0                	cmp    eax,edx
c001a35f:	75 f1                	jne    c001a352 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c001a361:	83 c4 08             	add    esp,0x8
c001a364:	5b                   	pop    ebx
c001a365:	c3                   	ret    
c001a366:	c7 80 e0 d0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd2f20],0x0
c001a370:	c7 80 e0 c0 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd3f20],0x0
c001a37a:	eb de                	jmp    c001a35a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c001a37c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c001a381:	7f 11                	jg     c001a394 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c001a383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a387:	0f b6 80 88 5b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffda478]
c001a38e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a392:	eb b1                	jmp    c001a345 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a394:	83 ec 0c             	sub    esp,0xc
c001a397:	68 d6 50 02 c0       	push   0xc00250d6
c001a39c:	e8 01 5c ff ff       	call   c000ffa2 <KePanic(char const*)>
c001a3a1:	83 c4 10             	add    esp,0x10
c001a3a4:	eb 9f                	jmp    c001a345 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c001a3a6:	66 90                	xchg   ax,ax

c001a3a8 <picIoWait()>:
c001a3a8:	eb 00                	jmp    c001a3aa <picIoWait()+0x2>
c001a3aa:	eb 00                	jmp    c001a3ac <picIoWait()+0x4>
c001a3ac:	90                   	nop
c001a3ad:	c3                   	ret    
c001a3ae:	66 90                	xchg   ax,ax

c001a3b0 <picDisable()>:
c001a3b0:	83 ec 10             	sub    esp,0x10
c001a3b3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001a3ba:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001a3bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a3c3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a3c8:	ee                   	out    dx,al
c001a3c9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c001a3d0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c001a3d5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a3d9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001a3de:	ee                   	out    dx,al
c001a3df:	90                   	nop
c001a3e0:	83 c4 10             	add    esp,0x10
c001a3e3:	c3                   	ret    

c001a3e4 <picGetIRQReg(int)>:
c001a3e4:	83 ec 10             	sub    esp,0x10
c001a3e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3eb:	0f b6 c0             	movzx  eax,al
c001a3ee:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a3f5:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c001a3f9:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a3fd:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a402:	ee                   	out    dx,al
c001a403:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a407:	0f b6 c0             	movzx  eax,al
c001a40a:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a411:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001a415:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a419:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a41e:	ee                   	out    dx,al
c001a41f:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001a426:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001a42b:	89 c2                	mov    edx,eax
c001a42d:	ec                   	in     al,dx
c001a42e:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a432:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a436:	0f b6 c0             	movzx  eax,al
c001a439:	c1 e0 08             	shl    eax,0x8
c001a43c:	89 c1                	mov    ecx,eax
c001a43e:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001a445:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c001a44a:	89 c2                	mov    edx,eax
c001a44c:	ec                   	in     al,dx
c001a44d:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a451:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001a455:	0f b6 c0             	movzx  eax,al
c001a458:	09 c8                	or     eax,ecx
c001a45a:	83 c4 10             	add    esp,0x10
c001a45d:	c3                   	ret    
c001a45e:	66 90                	xchg   ax,ax

c001a460 <picOpen()>:
c001a460:	83 ec 50             	sub    esp,0x50
c001a463:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c001a46a:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001a46f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a473:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a477:	ee                   	out    dx,al
c001a478:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c001a47f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a484:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a488:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a48c:	ee                   	out    dx,al
c001a48d:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001a495:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c001a49d:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001a4a4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a4a8:	89 c2                	mov    edx,eax
c001a4aa:	ec                   	in     al,dx
c001a4ab:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001a4af:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a4b3:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001a4b7:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c001a4be:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a4c2:	89 c2                	mov    edx,eax
c001a4c4:	ec                   	in     al,dx
c001a4c5:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a4c9:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a4cd:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c001a4d1:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c001a4d8:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c001a4dd:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001a4e1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a4e5:	ee                   	out    dx,al
c001a4e6:	e8 bd fe ff ff       	call   c001a3a8 <picIoWait()>
c001a4eb:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c001a4f2:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c001a4f7:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001a4fb:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a4ff:	ee                   	out    dx,al
c001a500:	e8 a3 fe ff ff       	call   c001a3a8 <picIoWait()>
c001a505:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a509:	0f b6 c0             	movzx  eax,al
c001a50c:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001a513:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c001a517:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c001a51b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a51f:	ee                   	out    dx,al
c001a520:	e8 83 fe ff ff       	call   c001a3a8 <picIoWait()>
c001a525:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a529:	0f b6 c0             	movzx  eax,al
c001a52c:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001a533:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001a537:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001a53b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a53f:	ee                   	out    dx,al
c001a540:	e8 63 fe ff ff       	call   c001a3a8 <picIoWait()>
c001a545:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c001a54c:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001a551:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c001a555:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a559:	ee                   	out    dx,al
c001a55a:	e8 49 fe ff ff       	call   c001a3a8 <picIoWait()>
c001a55f:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c001a566:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c001a56b:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a56f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a573:	ee                   	out    dx,al
c001a574:	e8 2f fe ff ff       	call   c001a3a8 <picIoWait()>
c001a579:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001a580:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c001a585:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c001a589:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a58d:	ee                   	out    dx,al
c001a58e:	e8 15 fe ff ff       	call   c001a3a8 <picIoWait()>
c001a593:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c001a59a:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001a59f:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001a5a3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001a5a7:	ee                   	out    dx,al
c001a5a8:	e8 fb fd ff ff       	call   c001a3a8 <picIoWait()>
c001a5ad:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001a5b2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c001a5b9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c001a5bd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001a5c1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001a5c5:	ee                   	out    dx,al
c001a5c6:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c001a5cb:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001a5d2:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001a5d6:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c001a5da:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001a5de:	ee                   	out    dx,al
c001a5df:	90                   	nop
c001a5e0:	83 c4 50             	add    esp,0x50
c001a5e3:	c3                   	ret    

c001a5e4 <picEOI(int)>:
c001a5e4:	83 ec 10             	sub    esp,0x10
c001a5e7:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a5ec:	75 1e                	jne    c001a60c <picEOI(int)+0x28>
c001a5ee:	6a 0b                	push   0xb
c001a5f0:	e8 ef fd ff ff       	call   c001a3e4 <picGetIRQReg(int)>
c001a5f5:	83 c4 04             	add    esp,0x4
c001a5f8:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c001a5fd:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001a602:	25 80 00 00 00       	and    eax,0x80
c001a607:	74 73                	je     c001a67c <picEOI(int)+0x98>
c001a609:	8d 76 00             	lea    esi,[esi+0x0]
c001a60c:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001a611:	75 31                	jne    c001a644 <picEOI(int)+0x60>
c001a613:	6a 0b                	push   0xb
c001a615:	e8 ca fd ff ff       	call   c001a3e4 <picGetIRQReg(int)>
c001a61a:	83 c4 04             	add    esp,0x4
c001a61d:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001a622:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a626:	98                   	cwde   
c001a627:	85 c0                	test   eax,eax
c001a629:	78 19                	js     c001a644 <picEOI(int)+0x60>
c001a62b:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001a632:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001a637:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a63b:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001a640:	ee                   	out    dx,al
c001a641:	eb 3d                	jmp    c001a680 <picEOI(int)+0x9c>
c001a643:	90                   	nop
c001a644:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c001a649:	7e 19                	jle    c001a664 <picEOI(int)+0x80>
c001a64b:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001a652:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001a657:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001a65b:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001a660:	ee                   	out    dx,al
c001a661:	8d 76 00             	lea    esi,[esi+0x0]
c001a664:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c001a66b:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c001a670:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001a674:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001a679:	ee                   	out    dx,al
c001a67a:	eb 04                	jmp    c001a680 <picEOI(int)+0x9c>
c001a67c:	90                   	nop
c001a67d:	8d 76 00             	lea    esi,[esi+0x0]
c001a680:	83 c4 10             	add    esp,0x10
c001a683:	c3                   	ret    

c001a684 <RTC::open(int, int, void*)>:
c001a684:	31 c0                	xor    eax,eax
c001a686:	c3                   	ret    
c001a687:	90                   	nop

c001a688 <RTC::close(int, int, void*)>:
c001a688:	31 c0                	xor    eax,eax
c001a68a:	c3                   	ret    
c001a68b:	90                   	nop

c001a68c <RTC::timeInSecondsUTC()>:
c001a68c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a690:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001a696:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a69c:	c3                   	ret    
c001a69d:	90                   	nop

c001a69e <RTC::timeInDatetimeUTC()>:
c001a69e:	53                   	push   ebx
c001a69f:	83 ec 14             	sub    esp,0x14
c001a6a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a6a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6aa:	8b 10                	mov    edx,DWORD PTR [eax]
c001a6ac:	50                   	push   eax
c001a6ad:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001a6b0:	83 c4 0c             	add    esp,0xc
c001a6b3:	52                   	push   edx
c001a6b4:	50                   	push   eax
c001a6b5:	53                   	push   ebx
c001a6b6:	e8 35 ef fe ff       	call   c00095f0 <KeSecondsToDatetime(unsigned long long)>
c001a6bb:	89 d8                	mov    eax,ebx
c001a6bd:	83 c4 14             	add    esp,0x14
c001a6c0:	5b                   	pop    ebx
c001a6c1:	c2 04 00             	ret    0x4

c001a6c4 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c001a6c4:	56                   	push   esi
c001a6c5:	53                   	push   ebx
c001a6c6:	83 ec 14             	sub    esp,0x14
c001a6c9:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a6cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a6cf:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001a6d2:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a6d6:	52                   	push   edx
c001a6d7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a6df:	50                   	push   eax
c001a6e0:	e8 0b ef fe ff       	call   c00095f0 <KeSecondsToDatetime(unsigned long long)>
c001a6e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a6e9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a6ed:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001a6f1:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001a6f5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a6f9:	89 f0                	mov    eax,esi
c001a6fb:	83 c4 20             	add    esp,0x20
c001a6fe:	5b                   	pop    ebx
c001a6ff:	5e                   	pop    esi
c001a700:	ff e0                	jmp    eax

c001a702 <RTC::~RTC()>:
c001a702:	83 ec 0c             	sub    esp,0xc
c001a705:	ba 00 51 02 c0       	mov    edx,0xc0025100
c001a70a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a70e:	89 10                	mov    DWORD PTR [eax],edx
c001a710:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a714:	83 ec 0c             	sub    esp,0xc
c001a717:	50                   	push   eax
c001a718:	e8 75 e9 fe ff       	call   c0009092 <Clock::~Clock()>
c001a71d:	83 c4 10             	add    esp,0x10
c001a720:	90                   	nop
c001a721:	83 c4 0c             	add    esp,0xc
c001a724:	c3                   	ret    
c001a725:	90                   	nop

c001a726 <RTC::~RTC()>:
c001a726:	83 ec 0c             	sub    esp,0xc
c001a729:	83 ec 0c             	sub    esp,0xc
c001a72c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a730:	e8 cd ff ff ff       	call   c001a702 <RTC::~RTC()>
c001a735:	83 c4 10             	add    esp,0x10
c001a738:	83 ec 08             	sub    esp,0x8
c001a73b:	68 60 01 00 00       	push   0x160
c001a740:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a744:	e8 9a 2b ff ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c001a749:	83 c4 10             	add    esp,0x10
c001a74c:	83 c4 0c             	add    esp,0xc
c001a74f:	c3                   	ret    

c001a750 <RTC::get_update_in_progress_flag()>:
c001a750:	83 ec 18             	sub    esp,0x18
c001a753:	6a 0a                	push   0xa
c001a755:	e8 09 db ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a75a:	83 c4 1c             	add    esp,0x1c
c001a75d:	0f b6 c0             	movzx  eax,al
c001a760:	c1 e8 07             	shr    eax,0x7
c001a763:	c3                   	ret    

c001a764 <RTC::completeRTCRefresh()>:
c001a764:	55                   	push   ebp
c001a765:	57                   	push   edi
c001a766:	56                   	push   esi
c001a767:	53                   	push   ebx
c001a768:	83 ec 3c             	sub    esp,0x3c
c001a76b:	8b 1d 4c bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb4c
c001a771:	83 ec 0c             	sub    esp,0xc
c001a774:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a778:	e8 d3 ff ff ff       	call   c001a750 <RTC::get_update_in_progress_flag()>
c001a77d:	83 c4 10             	add    esp,0x10
c001a780:	84 c0                	test   al,al
c001a782:	74 0e                	je     c001a792 <RTC::completeRTCRefresh()+0x2e>
c001a784:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001a78a:	3b 05 4c bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb4c
c001a790:	73 df                	jae    c001a771 <RTC::completeRTCRefresh()+0xd>
c001a792:	83 ec 0c             	sub    esp,0xc
c001a795:	6a 00                	push   0x0
c001a797:	e8 c7 da ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a79c:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001a7a3:	89 c5                	mov    ebp,eax
c001a7a5:	e8 b9 da ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a7aa:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001a7b1:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c001a7b5:	e8 a9 da ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a7ba:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001a7c1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001a7c5:	e8 99 da ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a7ca:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a7d1:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001a7d5:	e8 89 da ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a7da:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001a7e1:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001a7e5:	e8 79 da ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a7ea:	0f b6 c0             	movzx  eax,al
c001a7ed:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001a7f1:	83 c4 10             	add    esp,0x10
c001a7f4:	8b 1d 4c bb 02 c0    	mov    ebx,DWORD PTR ds:0xc002bb4c
c001a7fa:	83 ec 0c             	sub    esp,0xc
c001a7fd:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001a801:	e8 4a ff ff ff       	call   c001a750 <RTC::get_update_in_progress_flag()>
c001a806:	83 c4 10             	add    esp,0x10
c001a809:	84 c0                	test   al,al
c001a80b:	74 0e                	je     c001a81b <RTC::completeRTCRefresh()+0xb7>
c001a80d:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001a813:	3b 05 4c bb 02 c0    	cmp    eax,DWORD PTR ds:0xc002bb4c
c001a819:	73 df                	jae    c001a7fa <RTC::completeRTCRefresh()+0x96>
c001a81b:	83 ec 0c             	sub    esp,0xc
c001a81e:	6a 00                	push   0x0
c001a820:	e8 3e da ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a825:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001a82c:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a830:	e8 2e da ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a835:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001a83c:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001a840:	e8 1e da ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a845:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001a84c:	88 c3                	mov    bl,al
c001a84e:	e8 10 da ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a853:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001a85a:	89 c6                	mov    esi,eax
c001a85c:	e8 02 da ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a861:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c001a868:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a86c:	e8 f2 d9 ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a871:	89 e9                	mov    ecx,ebp
c001a873:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a877:	0f b6 f8             	movzx  edi,al
c001a87a:	83 c4 10             	add    esp,0x10
c001a87d:	0f b6 eb             	movzx  ebp,bl
c001a880:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001a884:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a889:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001a88e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a892:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a896:	0f 94 c0             	sete   al
c001a899:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a89d:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001a8a1:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c001a8a6:	0f 94 c2             	sete   dl
c001a8a9:	21 d0                	and    eax,edx
c001a8ab:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c001a8af:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001a8b3:	0f 94 c2             	sete   dl
c001a8b6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a8ba:	21 c2                	and    edx,eax
c001a8bc:	89 f0                	mov    eax,esi
c001a8be:	0f b6 c0             	movzx  eax,al
c001a8c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8c5:	89 f0                	mov    eax,esi
c001a8c7:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c001a8cb:	0f 94 c0             	sete   al
c001a8ce:	21 d0                	and    eax,edx
c001a8d0:	31 d2                	xor    edx,edx
c001a8d2:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c001a8d6:	0f 94 c2             	sete   dl
c001a8d9:	85 c2                	test   edx,eax
c001a8db:	75 27                	jne    c001a904 <RTC::completeRTCRefresh()+0x1a0>
c001a8dd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a8e1:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c001a8e5:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c001a8e9:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c001a8ed:	89 f0                	mov    eax,esi
c001a8ef:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c001a8f3:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c001a8f7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a8fb:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001a8ff:	e9 f0 fe ff ff       	jmp    c001a7f4 <RTC::completeRTCRefresh()+0x90>
c001a904:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c001a908:	75 d3                	jne    c001a8dd <RTC::completeRTCRefresh()+0x179>
c001a90a:	83 ec 0c             	sub    esp,0xc
c001a90d:	6a 0b                	push   0xb
c001a90f:	e8 4f d9 ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001a914:	83 c4 10             	add    esp,0x10
c001a917:	a8 04                	test   al,0x4
c001a919:	75 7a                	jne    c001a995 <RTC::completeRTCRefresh()+0x231>
c001a91b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001a91f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a923:	83 e1 0f             	and    ecx,0xf
c001a926:	c1 ea 04             	shr    edx,0x4
c001a929:	83 e6 0f             	and    esi,0xf
c001a92c:	6b d2 0a             	imul   edx,edx,0xa
c001a92f:	c1 ef 04             	shr    edi,0x4
c001a932:	01 d1                	add    ecx,edx
c001a934:	6b ff 0a             	imul   edi,edi,0xa
c001a937:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c001a93b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a93f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a943:	c1 ea 04             	shr    edx,0x4
c001a946:	83 e1 0f             	and    ecx,0xf
c001a949:	6b d2 0a             	imul   edx,edx,0xa
c001a94c:	01 d1                	add    ecx,edx
c001a94e:	89 ea                	mov    edx,ebp
c001a950:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001a954:	c1 ea 04             	shr    edx,0x4
c001a957:	89 d9                	mov    ecx,ebx
c001a959:	83 e2 07             	and    edx,0x7
c001a95c:	83 e1 0f             	and    ecx,0xf
c001a95f:	6b d2 0a             	imul   edx,edx,0xa
c001a962:	83 e3 80             	and    ebx,0xffffff80
c001a965:	01 d1                	add    ecx,edx
c001a967:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a96b:	09 cb                	or     ebx,ecx
c001a96d:	c1 ea 04             	shr    edx,0x4
c001a970:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a974:	6b d2 0a             	imul   edx,edx,0xa
c001a977:	83 e1 0f             	and    ecx,0xf
c001a97a:	01 d6                	add    esi,edx
c001a97c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a980:	c1 ea 04             	shr    edx,0x4
c001a983:	6b d2 0a             	imul   edx,edx,0xa
c001a986:	01 d1                	add    ecx,edx
c001a988:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a98c:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001a990:	83 e2 0f             	and    edx,0xf
c001a993:	01 d7                	add    edi,edx
c001a995:	a8 02                	test   al,0x2
c001a997:	75 15                	jne    c001a9ae <RTC::completeRTCRefresh()+0x24a>
c001a999:	f6 c3 80             	test   bl,0x80
c001a99c:	74 10                	je     c001a9ae <RTC::completeRTCRefresh()+0x24a>
c001a99e:	83 e3 7f             	and    ebx,0x7f
c001a9a1:	b9 18 00 00 00       	mov    ecx,0x18
c001a9a6:	8d 43 0c             	lea    eax,[ebx+0xc]
c001a9a9:	99                   	cdq    
c001a9aa:	f7 f9                	idiv   ecx
c001a9ac:	88 d3                	mov    bl,dl
c001a9ae:	8d af 6c 07 00 00    	lea    ebp,[edi+0x76c]
c001a9b4:	81 fd b1 07 00 00    	cmp    ebp,0x7b1
c001a9ba:	77 06                	ja     c001a9c2 <RTC::completeRTCRefresh()+0x25e>
c001a9bc:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001a9c2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a9c7:	31 c9                	xor    ecx,ecx
c001a9c9:	c1 e0 10             	shl    eax,0x10
c001a9cc:	89 cf                	mov    edi,ecx
c001a9ce:	c1 e5 10             	shl    ebp,0x10
c001a9d1:	31 d2                	xor    edx,edx
c001a9d3:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001a9d9:	09 c7                	or     edi,eax
c001a9db:	89 f0                	mov    eax,esi
c001a9dd:	89 f9                	mov    ecx,edi
c001a9df:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a9e3:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001a9e7:	88 c2                	mov    dl,al
c001a9e9:	88 d9                	mov    cl,bl
c001a9eb:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001a9ef:	0f b7 c2             	movzx  eax,dx
c001a9f2:	09 e8                	or     eax,ebp
c001a9f4:	89 c2                	mov    edx,eax
c001a9f6:	50                   	push   eax
c001a9f7:	50                   	push   eax
c001a9f8:	51                   	push   ecx
c001a9f9:	52                   	push   edx
c001a9fa:	e8 e3 e7 fe ff       	call   c00091e2 <KeDatetimeToSeconds(datetime_t)>
c001a9ff:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001aa03:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001aa09:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001aa0f:	83 c4 4c             	add    esp,0x4c
c001aa12:	5b                   	pop    ebx
c001aa13:	5e                   	pop    esi
c001aa14:	5f                   	pop    edi
c001aa15:	5d                   	pop    ebp
c001aa16:	c3                   	ret    
c001aa17:	90                   	nop

c001aa18 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001aa18:	55                   	push   ebp
c001aa19:	57                   	push   edi
c001aa1a:	56                   	push   esi
c001aa1b:	53                   	push   ebx
c001aa1c:	83 ec 34             	sub    esp,0x34
c001aa1f:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001aa23:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001aa27:	6a 00                	push   0x0
c001aa29:	89 fb                	mov    ebx,edi
c001aa2b:	6a 00                	push   0x0
c001aa2d:	e8 85 d8 ff ff       	call   c00182b7 <x86WriteCMOS(unsigned char, unsigned char)>
c001aa32:	5d                   	pop    ebp
c001aa33:	58                   	pop    eax
c001aa34:	6a 00                	push   0x0
c001aa36:	6a 02                	push   0x2
c001aa38:	e8 7a d8 ff ff       	call   c00182b7 <x86WriteCMOS(unsigned char, unsigned char)>
c001aa3d:	31 d2                	xor    edx,edx
c001aa3f:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001aa46:	89 f9                	mov    ecx,edi
c001aa48:	89 f8                	mov    eax,edi
c001aa4a:	c1 e9 10             	shr    ecx,0x10
c001aa4d:	0f b6 c4             	movzx  eax,ah
c001aa50:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001aa54:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001aa58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa5c:	b9 64 00 00 00       	mov    ecx,0x64
c001aa61:	89 f0                	mov    eax,esi
c001aa63:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001aa67:	89 f0                	mov    eax,esi
c001aa69:	0f b6 c4             	movzx  eax,ah
c001aa6c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa70:	89 f0                	mov    eax,esi
c001aa72:	c1 e8 10             	shr    eax,0x10
c001aa75:	f7 f1                	div    ecx
c001aa77:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aa7b:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001aa7f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001aa83:	e8 db d7 ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001aa88:	83 c4 10             	add    esp,0x10
c001aa8b:	89 c5                	mov    ebp,eax
c001aa8d:	a8 04                	test   al,0x4
c001aa8f:	75 6e                	jne    c001aaff <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001aa91:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aa95:	31 d2                	xor    edx,edx
c001aa97:	0f b6 c1             	movzx  eax,cl
c001aa9a:	b9 0a 00 00 00       	mov    ecx,0xa
c001aa9f:	f7 f1                	div    ecx
c001aaa1:	c1 e0 04             	shl    eax,0x4
c001aaa4:	09 d0                	or     eax,edx
c001aaa6:	31 d2                	xor    edx,edx
c001aaa8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aaac:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001aab1:	f7 f1                	div    ecx
c001aab3:	c1 e0 04             	shl    eax,0x4
c001aab6:	09 d0                	or     eax,edx
c001aab8:	31 d2                	xor    edx,edx
c001aaba:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aabe:	0f b6 c3             	movzx  eax,bl
c001aac1:	f7 f1                	div    ecx
c001aac3:	c1 e0 04             	shl    eax,0x4
c001aac6:	09 d0                	or     eax,edx
c001aac8:	31 d2                	xor    edx,edx
c001aaca:	89 c3                	mov    ebx,eax
c001aacc:	89 f0                	mov    eax,esi
c001aace:	0f b6 c0             	movzx  eax,al
c001aad1:	f7 f1                	div    ecx
c001aad3:	c1 e0 04             	shl    eax,0x4
c001aad6:	09 d0                	or     eax,edx
c001aad8:	31 d2                	xor    edx,edx
c001aada:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001aade:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001aae3:	f7 f1                	div    ecx
c001aae5:	c1 e0 04             	shl    eax,0x4
c001aae8:	09 d0                	or     eax,edx
c001aaea:	31 d2                	xor    edx,edx
c001aaec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001aaf0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001aaf4:	f7 f1                	div    ecx
c001aaf6:	c1 e0 04             	shl    eax,0x4
c001aaf9:	09 d0                	or     eax,edx
c001aafb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aaff:	83 e5 02             	and    ebp,0x2
c001ab02:	75 1e                	jne    c001ab22 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001ab04:	0f b6 c3             	movzx  eax,bl
c001ab07:	83 f8 0b             	cmp    eax,0xb
c001ab0a:	76 10                	jbe    c001ab1c <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001ab0c:	8d 53 f4             	lea    edx,[ebx-0xc]
c001ab0f:	88 d3                	mov    bl,dl
c001ab11:	84 d2                	test   dl,dl
c001ab13:	75 02                	jne    c001ab17 <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001ab15:	b3 0c                	mov    bl,0xc
c001ab17:	83 cb 80             	or     ebx,0xffffff80
c001ab1a:	eb 06                	jmp    c001ab22 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001ab1c:	85 c0                	test   eax,eax
c001ab1e:	75 02                	jne    c001ab22 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001ab20:	b3 0c                	mov    bl,0xc
c001ab22:	0f b6 db             	movzx  ebx,bl
c001ab25:	50                   	push   eax
c001ab26:	50                   	push   eax
c001ab27:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001ab2c:	52                   	push   edx
c001ab2d:	6a 00                	push   0x0
c001ab2f:	e8 83 d7 ff ff       	call   c00182b7 <x86WriteCMOS(unsigned char, unsigned char)>
c001ab34:	5a                   	pop    edx
c001ab35:	59                   	pop    ecx
c001ab36:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ab3b:	50                   	push   eax
c001ab3c:	6a 02                	push   0x2
c001ab3e:	e8 74 d7 ff ff       	call   c00182b7 <x86WriteCMOS(unsigned char, unsigned char)>
c001ab43:	5e                   	pop    esi
c001ab44:	5f                   	pop    edi
c001ab45:	53                   	push   ebx
c001ab46:	6a 04                	push   0x4
c001ab48:	e8 6a d7 ff ff       	call   c00182b7 <x86WriteCMOS(unsigned char, unsigned char)>
c001ab4d:	5d                   	pop    ebp
c001ab4e:	58                   	pop    eax
c001ab4f:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001ab54:	52                   	push   edx
c001ab55:	6a 07                	push   0x7
c001ab57:	e8 5b d7 ff ff       	call   c00182b7 <x86WriteCMOS(unsigned char, unsigned char)>
c001ab5c:	58                   	pop    eax
c001ab5d:	5a                   	pop    edx
c001ab5e:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001ab63:	50                   	push   eax
c001ab64:	6a 08                	push   0x8
c001ab66:	e8 4c d7 ff ff       	call   c00182b7 <x86WriteCMOS(unsigned char, unsigned char)>
c001ab6b:	59                   	pop    ecx
c001ab6c:	5b                   	pop    ebx
c001ab6d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001ab72:	55                   	push   ebp
c001ab73:	6a 09                	push   0x9
c001ab75:	e8 3d d7 ff ff       	call   c00182b7 <x86WriteCMOS(unsigned char, unsigned char)>
c001ab7a:	5e                   	pop    esi
c001ab7b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001ab7f:	e8 e0 fb ff ff       	call   c001a764 <RTC::completeRTCRefresh()>
c001ab84:	83 c4 3c             	add    esp,0x3c
c001ab87:	b0 01                	mov    al,0x1
c001ab89:	5b                   	pop    ebx
c001ab8a:	5e                   	pop    esi
c001ab8b:	5f                   	pop    edi
c001ab8c:	5d                   	pop    ebp
c001ab8d:	c3                   	ret    

c001ab8e <rtcIRQHandler(regs*, void*)>:
c001ab8e:	53                   	push   ebx
c001ab8f:	83 ec 14             	sub    esp,0x14
c001ab92:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ab96:	6a 0c                	push   0xc
c001ab98:	e8 c6 d6 ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001ab9d:	83 c4 10             	add    esp,0x10
c001aba0:	a8 80                	test   al,0x80
c001aba2:	74 24                	je     c001abc8 <rtcIRQHandler(regs*, void*)+0x3a>
c001aba4:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001abab:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001abb2:	66 ff 05 14 eb 02 c0 	inc    WORD PTR ds:0xc002eb14
c001abb9:	75 0d                	jne    c001abc8 <rtcIRQHandler(regs*, void*)+0x3a>
c001abbb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001abbf:	83 c4 08             	add    esp,0x8
c001abc2:	5b                   	pop    ebx
c001abc3:	e9 9c fb ff ff       	jmp    c001a764 <RTC::completeRTCRefresh()>
c001abc8:	83 c4 08             	add    esp,0x8
c001abcb:	5b                   	pop    ebx
c001abcc:	c3                   	ret    
c001abcd:	90                   	nop

c001abce <RTC::RTC()>:
c001abce:	83 ec 1c             	sub    esp,0x1c
c001abd1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abd5:	83 ec 08             	sub    esp,0x8
c001abd8:	68 e3 50 02 c0       	push   0xc00250e3
c001abdd:	50                   	push   eax
c001abde:	e8 79 e4 fe ff       	call   c000905c <Clock::Clock(char const*)>
c001abe3:	83 c4 10             	add    esp,0x10
c001abe6:	ba 00 51 02 c0       	mov    edx,0xc0025100
c001abeb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abef:	89 10                	mov    DWORD PTR [eax],edx
c001abf1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abf5:	83 ec 0c             	sub    esp,0xc
c001abf8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001abfc:	6a 01                	push   0x1
c001abfe:	68 8e ab 01 c0       	push   0xc001ab8e
c001ac03:	6a 08                	push   0x8
c001ac05:	50                   	push   eax
c001ac06:	e8 9b ed fe ff       	call   c00099a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001ac0b:	83 c4 20             	add    esp,0x20
c001ac0e:	89 c2                	mov    edx,eax
c001ac10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ac14:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001ac1a:	fa                   	cli    
c001ac1b:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001ac20:	83 c0 01             	add    eax,0x1
c001ac23:	a3 30 ea 02 c0       	mov    ds:0xc002ea30,eax
c001ac28:	83 ec 0c             	sub    esp,0xc
c001ac2b:	6a 0b                	push   0xb
c001ac2d:	e8 31 d6 ff ff       	call   c0018263 <x86ReadCMOS(unsigned char)>
c001ac32:	83 c4 10             	add    esp,0x10
c001ac35:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ac39:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ac3d:	83 c8 10             	or     eax,0x10
c001ac40:	0f b6 c0             	movzx  eax,al
c001ac43:	83 ec 08             	sub    esp,0x8
c001ac46:	50                   	push   eax
c001ac47:	6a 0b                	push   0xb
c001ac49:	e8 69 d6 ff ff       	call   c00182b7 <x86WriteCMOS(unsigned char, unsigned char)>
c001ac4e:	83 c4 10             	add    esp,0x10
c001ac51:	83 ec 0c             	sub    esp,0xc
c001ac54:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ac58:	e8 07 fb ff ff       	call   c001a764 <RTC::completeRTCRefresh()>
c001ac5d:	83 c4 10             	add    esp,0x10
c001ac60:	f0 83 2d 30 ea 02 c0 01 	lock sub DWORD PTR ds:0xc002ea30,0x1
c001ac68:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c001ac6d:	85 c0                	test   eax,eax
c001ac6f:	75 01                	jne    c001ac72 <RTC::RTC()+0xa4>
c001ac71:	fb                   	sti    
c001ac72:	90                   	nop
c001ac73:	83 c4 1c             	add    esp,0x1c
c001ac76:	c3                   	ret    
c001ac77:	90                   	nop

c001ac78 <HalConsoleScroll(int, int)>:
c001ac78:	83 ec 10             	sub    esp,0x10
c001ac7b:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001ac83:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001ac8b:	90                   	nop
c001ac8c:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001ac91:	0f 8f e1 00 00 00    	jg     c001ad78 <HalConsoleScroll(int, int)+0x100>
c001ac97:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ac9f:	90                   	nop
c001aca0:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001aca8:	0f 8f be 00 00 00    	jg     c001ad6c <HalConsoleScroll(int, int)+0xf4>
c001acae:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acb2:	89 d0                	mov    eax,edx
c001acb4:	c1 e0 02             	shl    eax,0x2
c001acb7:	01 d0                	add    eax,edx
c001acb9:	c1 e0 05             	shl    eax,0x5
c001acbc:	89 c2                	mov    edx,eax
c001acbe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acc2:	01 d0                	add    eax,edx
c001acc4:	89 c2                	mov    edx,eax
c001acc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001acca:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001accd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001acd1:	89 d0                	mov    eax,edx
c001acd3:	c1 e0 02             	shl    eax,0x2
c001acd6:	01 d0                	add    eax,edx
c001acd8:	c1 e0 05             	shl    eax,0x5
c001acdb:	89 c2                	mov    edx,eax
c001acdd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ace1:	01 d0                	add    eax,edx
c001ace3:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001ace9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aced:	01 c2                	add    edx,eax
c001acef:	8a 01                	mov    al,BYTE PTR [ecx]
c001acf1:	88 02                	mov    BYTE PTR [edx],al
c001acf3:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001acf8:	75 66                	jne    c001ad60 <HalConsoleScroll(int, int)+0xe8>
c001acfa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001acfe:	83 e0 01             	and    eax,0x1
c001ad01:	74 39                	je     c001ad3c <HalConsoleScroll(int, int)+0xc4>
c001ad03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad07:	83 e0 0f             	and    eax,0xf
c001ad0a:	88 c2                	mov    dl,al
c001ad0c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad10:	c1 e0 04             	shl    eax,0x4
c001ad13:	09 d0                	or     eax,edx
c001ad15:	88 c1                	mov    cl,al
c001ad17:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad1b:	89 d0                	mov    eax,edx
c001ad1d:	c1 e0 02             	shl    eax,0x2
c001ad20:	01 d0                	add    eax,edx
c001ad22:	c1 e0 05             	shl    eax,0x5
c001ad25:	89 c2                	mov    edx,eax
c001ad27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad2b:	01 d0                	add    eax,edx
c001ad2d:	89 c2                	mov    edx,eax
c001ad2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad33:	01 d0                	add    eax,edx
c001ad35:	88 ca                	mov    dl,cl
c001ad37:	88 10                	mov    BYTE PTR [eax],dl
c001ad39:	eb 25                	jmp    c001ad60 <HalConsoleScroll(int, int)+0xe8>
c001ad3b:	90                   	nop
c001ad3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ad40:	89 d0                	mov    eax,edx
c001ad42:	c1 e0 02             	shl    eax,0x2
c001ad45:	01 d0                	add    eax,edx
c001ad47:	c1 e0 05             	shl    eax,0x5
c001ad4a:	89 c2                	mov    edx,eax
c001ad4c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ad50:	01 d0                	add    eax,edx
c001ad52:	89 c2                	mov    edx,eax
c001ad54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ad58:	01 d0                	add    eax,edx
c001ad5a:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001ad5d:	8d 76 00             	lea    esi,[esi+0x0]
c001ad60:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001ad65:	e9 36 ff ff ff       	jmp    c001aca0 <HalConsoleScroll(int, int)+0x28>
c001ad6a:	66 90                	xchg   ax,ax
c001ad6c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001ad71:	e9 16 ff ff ff       	jmp    c001ac8c <HalConsoleScroll(int, int)+0x14>
c001ad76:	66 90                	xchg   ax,ax
c001ad78:	90                   	nop
c001ad79:	83 c4 10             	add    esp,0x10
c001ad7c:	c3                   	ret    
c001ad7d:	8d 76 00             	lea    esi,[esi+0x0]

c001ad80 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001ad80:	83 ec 14             	sub    esp,0x14
c001ad83:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ad87:	88 04 24             	mov    BYTE PTR [esp],al
c001ad8a:	8a 04 24             	mov    al,BYTE PTR [esp]
c001ad8d:	0f b6 c0             	movzx  eax,al
c001ad90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ad94:	89 d1                	mov    ecx,edx
c001ad96:	83 e1 0f             	and    ecx,0xf
c001ad99:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad9d:	c1 e2 04             	shl    edx,0x4
c001ada0:	0f b6 d2             	movzx  edx,dl
c001ada3:	09 ca                	or     edx,ecx
c001ada5:	c1 e2 08             	shl    edx,0x8
c001ada8:	09 d0                	or     eax,edx
c001adaa:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001adaf:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001adb7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001adbb:	89 d0                	mov    eax,edx
c001adbd:	c1 e0 02             	shl    eax,0x2
c001adc0:	01 d0                	add    eax,edx
c001adc2:	c1 e0 04             	shl    eax,0x4
c001adc5:	89 c2                	mov    edx,eax
c001adc7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001adcb:	01 d0                	add    eax,edx
c001adcd:	01 c0                	add    eax,eax
c001adcf:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001add3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001add7:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001addc:	66 89 02             	mov    WORD PTR [edx],ax
c001addf:	90                   	nop
c001ade0:	83 c4 14             	add    esp,0x14
c001ade3:	c3                   	ret    

c001ade4 <HalConsoleCursorUpdate(int, int)>:
c001ade4:	83 ec 20             	sub    esp,0x20
c001ade7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001adeb:	89 c2                	mov    edx,eax
c001aded:	c1 e2 02             	shl    edx,0x2
c001adf0:	01 d0                	add    eax,edx
c001adf2:	c1 e0 04             	shl    eax,0x4
c001adf5:	89 c2                	mov    edx,eax
c001adf7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001adfb:	01 d0                	add    eax,edx
c001adfd:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001ae02:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001ae09:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001ae0e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001ae12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ae16:	ee                   	out    dx,al
c001ae17:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001ae1c:	0f b6 c0             	movzx  eax,al
c001ae1f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001ae26:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001ae2a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001ae2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ae32:	ee                   	out    dx,al
c001ae33:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001ae3a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001ae3f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001ae43:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ae47:	ee                   	out    dx,al
c001ae48:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001ae4d:	c1 e8 08             	shr    eax,0x8
c001ae50:	0f b6 c0             	movzx  eax,al
c001ae53:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001ae5a:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001ae5e:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001ae62:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ae66:	ee                   	out    dx,al
c001ae67:	90                   	nop
c001ae68:	83 c4 20             	add    esp,0x20
c001ae6b:	c3                   	ret    

c001ae6c <FAT::getName()>:
c001ae6c:	b8 34 51 02 c0       	mov    eax,0xc0025134
c001ae71:	c3                   	ret    
c001ae72:	66 90                	xchg   ax,ax

c001ae74 <FAT::tell(void*, unsigned long long*)>:
c001ae74:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001ae79:	75 09                	jne    c001ae84 <FAT::tell(void*, unsigned long long*)+0x10>
c001ae7b:	b8 04 00 00 00       	mov    eax,0x4
c001ae80:	c3                   	ret    
c001ae81:	8d 76 00             	lea    esi,[esi+0x0]
c001ae84:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001ae89:	75 09                	jne    c001ae94 <FAT::tell(void*, unsigned long long*)+0x20>
c001ae8b:	b8 04 00 00 00       	mov    eax,0x4
c001ae90:	c3                   	ret    
c001ae91:	8d 76 00             	lea    esi,[esi+0x0]
c001ae94:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae98:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ae9b:	ba 00 00 00 00       	mov    edx,0x0
c001aea0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aea4:	89 01                	mov    DWORD PTR [ecx],eax
c001aea6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aea9:	b8 00 00 00 00       	mov    eax,0x0
c001aeae:	c3                   	ret    
c001aeaf:	90                   	nop

c001aeb0 <FAT::stat(void*, unsigned long long*)>:
c001aeb0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001aeb5:	75 09                	jne    c001aec0 <FAT::stat(void*, unsigned long long*)+0x10>
c001aeb7:	b8 04 00 00 00       	mov    eax,0x4
c001aebc:	c3                   	ret    
c001aebd:	8d 76 00             	lea    esi,[esi+0x0]
c001aec0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001aec5:	75 09                	jne    c001aed0 <FAT::stat(void*, unsigned long long*)+0x20>
c001aec7:	b8 04 00 00 00       	mov    eax,0x4
c001aecc:	c3                   	ret    
c001aecd:	8d 76 00             	lea    esi,[esi+0x0]
c001aed0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aed4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001aed7:	ba 00 00 00 00       	mov    edx,0x0
c001aedc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001aee0:	89 01                	mov    DWORD PTR [ecx],eax
c001aee2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001aee5:	b8 00 00 00 00       	mov    eax,0x0
c001aeea:	c3                   	ret    
c001aeeb:	90                   	nop

c001aeec <FAT::~FAT()>:
c001aeec:	83 ec 0c             	sub    esp,0xc
c001aeef:	ba 80 51 02 c0       	mov    edx,0xc0025180
c001aef4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aef8:	89 10                	mov    DWORD PTR [eax],edx
c001aefa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aefe:	83 ec 0c             	sub    esp,0xc
c001af01:	50                   	push   eax
c001af02:	e8 8d ce fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001af07:	83 c4 10             	add    esp,0x10
c001af0a:	90                   	nop
c001af0b:	83 c4 0c             	add    esp,0xc
c001af0e:	c3                   	ret    
c001af0f:	90                   	nop

c001af10 <FAT::~FAT()>:
c001af10:	83 ec 0c             	sub    esp,0xc
c001af13:	83 ec 0c             	sub    esp,0xc
c001af16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af1a:	e8 cd ff ff ff       	call   c001aeec <FAT::~FAT()>
c001af1f:	83 c4 10             	add    esp,0x10
c001af22:	83 ec 08             	sub    esp,0x8
c001af25:	6a 08                	push   0x8
c001af27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001af2b:	e8 b3 23 ff ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c001af30:	83 c4 10             	add    esp,0x10
c001af33:	83 c4 0c             	add    esp,0xc
c001af36:	c3                   	ret    
c001af37:	90                   	nop

c001af38 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001af38:	83 ec 1c             	sub    esp,0x1c
c001af3b:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001af42:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001af47:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af4b:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001af52:	83 f8 ff             	cmp    eax,0xffffffff
c001af55:	75 35                	jne    c001af8c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001af57:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001af5b:	88 c2                	mov    dl,al
c001af5d:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001af62:	01 d0                	add    eax,edx
c001af64:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001af68:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001af6e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af72:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001af79:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001af7e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001af82:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001af89:	eb 19                	jmp    c001afa4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001af8b:	90                   	nop
c001af8c:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001af90:	88 c2                	mov    dl,al
c001af92:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001af96:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001af9d:	01 d0                	add    eax,edx
c001af9f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001afa3:	90                   	nop
c001afa4:	83 ec 04             	sub    esp,0x4
c001afa7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001afab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001afaf:	8d 44 24 15          	lea    eax,[esp+0x15]
c001afb3:	50                   	push   eax
c001afb4:	e8 ff a1 fe ff       	call   c00051b8 <f_getlabel>
c001afb9:	83 c4 10             	add    esp,0x10
c001afbc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afc0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001afc5:	75 09                	jne    c001afd0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001afc7:	b8 00 00 00 00       	mov    eax,0x0
c001afcc:	eb 0a                	jmp    c001afd8 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001afce:	66 90                	xchg   ax,ax
c001afd0:	b8 01 00 00 00       	mov    eax,0x1
c001afd5:	8d 76 00             	lea    esi,[esi+0x0]
c001afd8:	83 c4 1c             	add    esp,0x1c
c001afdb:	c3                   	ret    

c001afdc <FAT::setlabel(LogicalDisk*, int, char*)>:
c001afdc:	57                   	push   edi
c001afdd:	83 ec 58             	sub    esp,0x58
c001afe0:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001afe8:	8d 54 24 10          	lea    edx,[esp+0x10]
c001afec:	b8 00 00 00 00       	mov    eax,0x0
c001aff1:	b9 0f 00 00 00       	mov    ecx,0xf
c001aff6:	fc                   	cld    
c001aff7:	89 d7                	mov    edi,edx
c001aff9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001affb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001afff:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b006:	83 f8 ff             	cmp    eax,0xffffffff
c001b009:	75 35                	jne    c001b040 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001b00b:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b00f:	88 c2                	mov    dl,al
c001b011:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b016:	01 d0                	add    eax,edx
c001b018:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b01c:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b022:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b026:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b02d:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b032:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001b036:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b03d:	eb 19                	jmp    c001b058 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001b03f:	90                   	nop
c001b040:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b044:	88 c2                	mov    dl,al
c001b046:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001b04a:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b051:	01 d0                	add    eax,edx
c001b053:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b057:	90                   	nop
c001b058:	83 ec 08             	sub    esp,0x8
c001b05b:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001b05f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b063:	50                   	push   eax
c001b064:	e8 d7 57 fe ff       	call   c0000840 <strcat>
c001b069:	83 c4 10             	add    esp,0x10
c001b06c:	83 ec 0c             	sub    esp,0xc
c001b06f:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b073:	50                   	push   eax
c001b074:	e8 90 a2 fe ff       	call   c0005309 <f_setlabel>
c001b079:	83 c4 10             	add    esp,0x10
c001b07c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b080:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001b085:	75 09                	jne    c001b090 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001b087:	b8 00 00 00 00       	mov    eax,0x0
c001b08c:	eb 0a                	jmp    c001b098 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001b08e:	66 90                	xchg   ax,ax
c001b090:	b8 01 00 00 00       	mov    eax,0x1
c001b095:	8d 76 00             	lea    esi,[esi+0x0]
c001b098:	83 c4 58             	add    esp,0x58
c001b09b:	5f                   	pop    edi
c001b09c:	c3                   	ret    
c001b09d:	90                   	nop
c001b09e:	66 90                	xchg   ax,ax

c001b0a0 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001b0a0:	83 ec 2c             	sub    esp,0x2c
c001b0a3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b0ab:	83 ec 08             	sub    esp,0x8
c001b0ae:	68 58 51 02 c0       	push   0xc0025158
c001b0b3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b0b7:	e8 94 56 fe ff       	call   c0000750 <strcmp>
c001b0bc:	83 c4 10             	add    esp,0x10
c001b0bf:	85 c0                	test   eax,eax
c001b0c1:	0f 94 c0             	sete   al
c001b0c4:	0f b6 c0             	movzx  eax,al
c001b0c7:	85 c0                	test   eax,eax
c001b0c9:	74 0d                	je     c001b0d8 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001b0cb:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b0d3:	e9 c0 00 00 00       	jmp    c001b198 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b0d8:	83 ec 08             	sub    esp,0x8
c001b0db:	68 4a 51 02 c0       	push   0xc002514a
c001b0e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b0e4:	e8 67 56 fe ff       	call   c0000750 <strcmp>
c001b0e9:	83 c4 10             	add    esp,0x10
c001b0ec:	85 c0                	test   eax,eax
c001b0ee:	0f 94 c0             	sete   al
c001b0f1:	0f b6 c0             	movzx  eax,al
c001b0f4:	85 c0                	test   eax,eax
c001b0f6:	74 10                	je     c001b108 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001b0f8:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b100:	e9 93 00 00 00       	jmp    c001b198 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b105:	8d 76 00             	lea    esi,[esi+0x0]
c001b108:	83 ec 08             	sub    esp,0x8
c001b10b:	68 50 51 02 c0       	push   0xc0025150
c001b110:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b114:	e8 37 56 fe ff       	call   c0000750 <strcmp>
c001b119:	83 c4 10             	add    esp,0x10
c001b11c:	85 c0                	test   eax,eax
c001b11e:	0f 94 c0             	sete   al
c001b121:	0f b6 c0             	movzx  eax,al
c001b124:	85 c0                	test   eax,eax
c001b126:	74 0c                	je     c001b134 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001b128:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001b130:	eb 66                	jmp    c001b198 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b132:	66 90                	xchg   ax,ax
c001b134:	83 ec 08             	sub    esp,0x8
c001b137:	68 fc 22 02 c0       	push   0xc00222fc
c001b13c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b140:	e8 0b 56 fe ff       	call   c0000750 <strcmp>
c001b145:	83 c4 10             	add    esp,0x10
c001b148:	85 c0                	test   eax,eax
c001b14a:	0f 94 c0             	sete   al
c001b14d:	0f b6 c0             	movzx  eax,al
c001b150:	85 c0                	test   eax,eax
c001b152:	74 0c                	je     c001b160 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001b154:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001b15c:	eb 3a                	jmp    c001b198 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b15e:	66 90                	xchg   ax,ax
c001b160:	83 ec 08             	sub    esp,0x8
c001b163:	68 56 51 02 c0       	push   0xc0025156
c001b168:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001b16c:	e8 df 55 fe ff       	call   c0000750 <strcmp>
c001b171:	83 c4 10             	add    esp,0x10
c001b174:	85 c0                	test   eax,eax
c001b176:	0f 94 c0             	sete   al
c001b179:	0f b6 c0             	movzx  eax,al
c001b17c:	85 c0                	test   eax,eax
c001b17e:	74 0c                	je     c001b18c <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001b180:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001b188:	eb 0e                	jmp    c001b198 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001b18a:	66 90                	xchg   ax,ax
c001b18c:	b8 08 00 00 00       	mov    eax,0x8
c001b191:	e9 ea 00 00 00       	jmp    c001b280 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b196:	66 90                	xchg   ax,ax
c001b198:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001b19f:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001b1a4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b1a8:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b1af:	83 f8 ff             	cmp    eax,0xffffffff
c001b1b2:	75 34                	jne    c001b1e8 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001b1b4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b1b8:	88 c2                	mov    dl,al
c001b1ba:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b1bf:	01 d0                	add    eax,edx
c001b1c1:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b1c5:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b1cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b1cf:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b1d6:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b1db:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b1df:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b1e6:	eb 18                	jmp    c001b200 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001b1e8:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001b1ec:	88 c2                	mov    dl,al
c001b1ee:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b1f2:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b1f9:	01 d0                	add    eax,edx
c001b1fb:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001b1ff:	90                   	nop
c001b200:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b204:	88 04 24             	mov    BYTE PTR [esp],al
c001b207:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001b20b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b20f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001b217:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001b21c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b224:	83 ec 0c             	sub    esp,0xc
c001b227:	68 00 20 00 00       	push   0x2000
c001b22c:	e8 2a 4a ff ff       	call   c000fc5b <malloc>
c001b231:	83 c4 10             	add    esp,0x10
c001b234:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b238:	68 00 20 00 00       	push   0x2000
c001b23d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b241:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b245:	50                   	push   eax
c001b246:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001b24a:	50                   	push   eax
c001b24b:	e8 b6 a3 fe ff       	call   c0005606 <f_mkfs>
c001b250:	83 c4 10             	add    esp,0x10
c001b253:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b257:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001b25c:	75 0a                	jne    c001b268 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001b25e:	b8 00 00 00 00       	mov    eax,0x0
c001b263:	eb 1b                	jmp    c001b280 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b265:	8d 76 00             	lea    esi,[esi+0x0]
c001b268:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001b26d:	75 09                	jne    c001b278 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001b26f:	b8 09 00 00 00       	mov    eax,0x9
c001b274:	eb 0a                	jmp    c001b280 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001b276:	66 90                	xchg   ax,ax
c001b278:	b8 01 00 00 00       	mov    eax,0x1
c001b27d:	8d 76 00             	lea    esi,[esi+0x0]
c001b280:	83 c4 2c             	add    esp,0x2c
c001b283:	c3                   	ret    

c001b284 <FAT::tryMount(LogicalDisk*, int)>:
c001b284:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001b28a:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b28f:	83 f8 14             	cmp    eax,0x14
c001b292:	75 18                	jne    c001b2ac <FAT::tryMount(LogicalDisk*, int)+0x28>
c001b294:	83 ec 0c             	sub    esp,0xc
c001b297:	68 5c 51 02 c0       	push   0xc002515c
c001b29c:	e8 01 4d ff ff       	call   c000ffa2 <KePanic(char const*)>
c001b2a1:	83 c4 10             	add    esp,0x10
c001b2a4:	b0 00                	mov    al,0x0
c001b2a6:	e9 ed 01 00 00       	jmp    c001b498 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b2ab:	90                   	nop
c001b2ac:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001b2b3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b2b9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b2bf:	3d 00 02 00 00       	cmp    eax,0x200
c001b2c4:	74 0a                	je     c001b2d0 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001b2c6:	b0 00                	mov    al,0x0
c001b2c8:	e9 cb 01 00 00       	jmp    c001b498 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b2cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b2d0:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001b2d8:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b2df:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001b2e6:	83 f8 ff             	cmp    eax,0xffffffff
c001b2e9:	74 09                	je     c001b2f4 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001b2eb:	b0 01                	mov    al,0x1
c001b2ed:	e9 a6 01 00 00       	jmp    c001b498 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b2f2:	66 90                	xchg   ax,ax
c001b2f4:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001b2fe:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001b306:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001b30d:	88 c2                	mov    dl,al
c001b30f:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b314:	01 d0                	add    eax,edx
c001b316:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001b31d:	8b 15 20 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb20
c001b323:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001b32a:	89 14 85 40 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd14c0],edx
c001b331:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b336:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001b33d:	89 14 85 c0 eb 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1440],edx
c001b344:	83 ec 0c             	sub    esp,0xc
c001b347:	68 34 02 00 00       	push   0x234
c001b34c:	e8 0a 49 ff ff       	call   c000fc5b <malloc>
c001b351:	83 c4 10             	add    esp,0x10
c001b354:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001b35b:	83 ec 04             	sub    esp,0x4
c001b35e:	6a 00                	push   0x0
c001b360:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b367:	50                   	push   eax
c001b368:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b36f:	e8 6d 8a fe ff       	call   c0003de1 <f_mount>
c001b374:	83 c4 10             	add    esp,0x10
c001b377:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b37e:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001b386:	74 1c                	je     c001b3a4 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001b388:	83 ec 0c             	sub    esp,0xc
c001b38b:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b392:	e8 e4 48 ff ff       	call   c000fc7b <rfree>
c001b397:	83 c4 10             	add    esp,0x10
c001b39a:	b0 00                	mov    al,0x0
c001b39c:	e9 f7 00 00 00       	jmp    c001b498 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b3a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b3a4:	83 ec 04             	sub    esp,0x4
c001b3a7:	68 00 01 00 00       	push   0x100
c001b3ac:	6a 00                	push   0x0
c001b3ae:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b3b5:	50                   	push   eax
c001b3b6:	e8 35 51 fe ff       	call   c00004f0 <memset>
c001b3bb:	83 c4 10             	add    esp,0x10
c001b3be:	83 ec 08             	sub    esp,0x8
c001b3c1:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b3c8:	50                   	push   eax
c001b3c9:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b3d0:	50                   	push   eax
c001b3d1:	e8 6a 54 fe ff       	call   c0000840 <strcat>
c001b3d6:	83 c4 10             	add    esp,0x10
c001b3d9:	83 ec 08             	sub    esp,0x8
c001b3dc:	68 6a 51 02 c0       	push   0xc002516a
c001b3e1:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001b3e8:	50                   	push   eax
c001b3e9:	e8 52 54 fe ff       	call   c0000840 <strcat>
c001b3ee:	83 c4 10             	add    esp,0x10
c001b3f1:	83 ec 04             	sub    esp,0x4
c001b3f4:	6a 01                	push   0x1
c001b3f6:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001b3fd:	50                   	push   eax
c001b3fe:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b402:	50                   	push   eax
c001b403:	e8 3b 8a fe ff       	call   c0003e43 <f_open>
c001b408:	83 c4 10             	add    esp,0x10
c001b40b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001b412:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001b419:	85 c0                	test   eax,eax
c001b41b:	74 0b                	je     c001b428 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001b41d:	78 31                	js     c001b450 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b41f:	83 e8 04             	sub    eax,0x4
c001b422:	83 f8 01             	cmp    eax,0x1
c001b425:	77 29                	ja     c001b450 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001b427:	90                   	nop
c001b428:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001b430:	83 ec 0c             	sub    esp,0xc
c001b433:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b437:	50                   	push   eax
c001b438:	e8 d5 91 fe ff       	call   c0004612 <f_close>
c001b43d:	83 c4 10             	add    esp,0x10
c001b440:	90                   	nop
c001b441:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001b449:	85 c0                	test   eax,eax
c001b44b:	74 43                	je     c001b490 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001b44d:	eb 31                	jmp    c001b480 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001b44f:	90                   	nop
c001b450:	83 ec 0c             	sub    esp,0xc
c001b453:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001b45a:	e8 1c 48 ff ff       	call   c000fc7b <rfree>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	83 ec 04             	sub    esp,0x4
c001b465:	6a 00                	push   0x0
c001b467:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001b46e:	50                   	push   eax
c001b46f:	6a 00                	push   0x0
c001b471:	e8 6b 89 fe ff       	call   c0003de1 <f_mount>
c001b476:	83 c4 10             	add    esp,0x10
c001b479:	b0 00                	mov    al,0x0
c001b47b:	eb 1b                	jmp    c001b498 <FAT::tryMount(LogicalDisk*, int)+0x214>
c001b47d:	8d 76 00             	lea    esi,[esi+0x0]
c001b480:	a1 20 eb 02 c0       	mov    eax,ds:0xc002eb20
c001b485:	83 c0 01             	add    eax,0x1
c001b488:	a3 20 eb 02 c0       	mov    ds:0xc002eb20,eax
c001b48d:	8d 76 00             	lea    esi,[esi+0x0]
c001b490:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001b497:	90                   	nop
c001b498:	81 c4 4c 03 00 00    	add    esp,0x34c
c001b49e:	c3                   	ret    
c001b49f:	90                   	nop

c001b4a0 <FAT::allocateSwapfile(char const*, int)>:
c001b4a0:	55                   	push   ebp
c001b4a1:	57                   	push   edi
c001b4a2:	56                   	push   esi
c001b4a3:	53                   	push   ebx
c001b4a4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001b4aa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001b4b5:	83 ec 0c             	sub    esp,0xc
c001b4b8:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001b4bf:	e8 97 47 ff ff       	call   c000fc5b <malloc>
c001b4c4:	83 c4 10             	add    esp,0x10
c001b4c7:	89 c7                	mov    edi,eax
c001b4c9:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001b4ce:	83 ec 04             	sub    esp,0x4
c001b4d1:	50                   	push   eax
c001b4d2:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001b4d9:	57                   	push   edi
c001b4da:	e8 53 cc fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001b4df:	83 c4 10             	add    esp,0x10
c001b4e2:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001b4e9:	83 ec 04             	sub    esp,0x4
c001b4ec:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b4f0:	50                   	push   eax
c001b4f1:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b4f5:	50                   	push   eax
c001b4f6:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b4fd:	e8 50 cf fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001b502:	83 c4 10             	add    esp,0x10
c001b505:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b50c:	c1 e0 14             	shl    eax,0x14
c001b50f:	89 c7                	mov    edi,eax
c001b511:	89 c5                	mov    ebp,eax
c001b513:	c1 fd 1f             	sar    ebp,0x1f
c001b516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b51a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b51e:	89 f9                	mov    ecx,edi
c001b520:	31 c1                	xor    ecx,eax
c001b522:	89 cb                	mov    ebx,ecx
c001b524:	89 e9                	mov    ecx,ebp
c001b526:	31 d1                	xor    ecx,edx
c001b528:	89 ce                	mov    esi,ecx
c001b52a:	89 f0                	mov    eax,esi
c001b52c:	09 d8                	or     eax,ebx
c001b52e:	0f 84 9c 00 00 00    	je     c001b5d0 <FAT::allocateSwapfile(char const*, int)+0x130>
c001b534:	83 ec 0c             	sub    esp,0xc
c001b537:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b53e:	e8 db cd fe ff       	call   c000831e <File::unlink()>
c001b543:	83 c4 10             	add    esp,0x10
c001b546:	83 ec 08             	sub    esp,0x8
c001b549:	6a 12                	push   0x12
c001b54b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b552:	e8 f9 cb fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001b557:	83 c4 10             	add    esp,0x10
c001b55a:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b561:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b567:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b56e:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001b575:	c1 e0 14             	shl    eax,0x14
c001b578:	83 ec 04             	sub    esp,0x4
c001b57b:	6a 01                	push   0x1
c001b57d:	50                   	push   eax
c001b57e:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001b585:	e8 0f 9f fe ff       	call   c0005499 <f_expand>
c001b58a:	83 c4 10             	add    esp,0x10
c001b58d:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b594:	8b 00                	mov    eax,DWORD PTR [eax]
c001b596:	83 c0 10             	add    eax,0x10
c001b599:	8b 00                	mov    eax,DWORD PTR [eax]
c001b59b:	83 ec 0c             	sub    esp,0xc
c001b59e:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b5a2:	52                   	push   edx
c001b5a3:	8d 54 24 30          	lea    edx,[esp+0x30]
c001b5a7:	52                   	push   edx
c001b5a8:	6a 00                	push   0x0
c001b5aa:	68 00 04 00 00       	push   0x400
c001b5af:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b5b6:	ff d0                	call   eax
c001b5b8:	83 c4 20             	add    esp,0x20
c001b5bb:	83 ec 0c             	sub    esp,0xc
c001b5be:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b5c5:	e8 e4 cb fe ff       	call   c00081ae <File::close()>
c001b5ca:	83 c4 10             	add    esp,0x10
c001b5cd:	8d 76 00             	lea    esi,[esi+0x0]
c001b5d0:	83 ec 08             	sub    esp,0x8
c001b5d3:	6a 01                	push   0x1
c001b5d5:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b5dc:	e8 6f cb fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001b5e1:	83 c4 10             	add    esp,0x10
c001b5e4:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b5eb:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5ed:	83 c0 0c             	add    eax,0xc
c001b5f0:	8b 00                	mov    eax,DWORD PTR [eax]
c001b5f2:	83 ec 0c             	sub    esp,0xc
c001b5f5:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b5f9:	52                   	push   edx
c001b5fa:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001b5fe:	52                   	push   edx
c001b5ff:	6a 00                	push   0x0
c001b601:	6a 04                	push   0x4
c001b603:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001b60a:	ff d0                	call   eax
c001b60c:	83 c4 20             	add    esp,0x20
c001b60f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001b616:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001b61c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001b623:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001b62a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001b62d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001b634:	83 ec 0c             	sub    esp,0xc
c001b637:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001b63e:	e8 6b cb fe ff       	call   c00081ae <File::close()>
c001b643:	83 c4 10             	add    esp,0x10
c001b646:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001b64d:	ba 00 00 00 00       	mov    edx,0x0
c001b652:	81 c4 3c 04 00 00    	add    esp,0x43c
c001b658:	5b                   	pop    ebx
c001b659:	5e                   	pop    esi
c001b65a:	5f                   	pop    edi
c001b65b:	5d                   	pop    ebp
c001b65c:	c3                   	ret    
c001b65d:	90                   	nop
c001b65e:	66 90                	xchg   ax,ax

c001b660 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001b660:	57                   	push   edi
c001b661:	56                   	push   esi
c001b662:	53                   	push   ebx
c001b663:	81 ec 50 02 00 00    	sub    esp,0x250
c001b669:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001b671:	74 0d                	je     c001b680 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001b673:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001b67b:	75 0f                	jne    c001b68c <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001b67d:	8d 76 00             	lea    esi,[esi+0x0]
c001b680:	b8 04 00 00 00       	mov    eax,0x4
c001b685:	e9 3a 01 00 00       	jmp    c001b7c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b68a:	66 90                	xchg   ax,ax
c001b68c:	83 ec 08             	sub    esp,0x8
c001b68f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b696:	50                   	push   eax
c001b697:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001b69e:	e8 3c 92 fe ff       	call   c00048df <f_readdir>
c001b6a3:	83 c4 10             	add    esp,0x10
c001b6a6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001b6ad:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001b6b4:	83 ec 0c             	sub    esp,0xc
c001b6b7:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b6be:	83 c0 16             	add    eax,0x16
c001b6c1:	50                   	push   eax
c001b6c2:	e8 a9 4e fe ff       	call   c0000570 <strlen>
c001b6c7:	83 c4 10             	add    esp,0x10
c001b6ca:	ba 00 00 00 00       	mov    edx,0x0
c001b6cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b6d3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b6d7:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001b6de:	0f b6 c0             	movzx  eax,al
c001b6e1:	83 e0 10             	and    eax,0x10
c001b6e4:	74 0a                	je     c001b6f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001b6e6:	b8 02 00 00 00       	mov    eax,0x2
c001b6eb:	eb 0b                	jmp    c001b6f8 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001b6ed:	8d 76 00             	lea    esi,[esi+0x0]
c001b6f0:	b8 01 00 00 00       	mov    eax,0x1
c001b6f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b6f8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b6fc:	83 ec 08             	sub    esp,0x8
c001b6ff:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001b706:	83 c0 16             	add    eax,0x16
c001b709:	50                   	push   eax
c001b70a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b70e:	83 c0 10             	add    eax,0x10
c001b711:	50                   	push   eax
c001b712:	e8 29 4f fe ff       	call   c0000640 <strcpy>
c001b717:	83 c4 10             	add    esp,0x10
c001b71a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001b721:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001b728:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b72c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001b733:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001b73a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001b741:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001b748:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001b74f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001b756:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001b75d:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001b764:	89 c6                	mov    esi,eax
c001b766:	89 d7                	mov    edi,edx
c001b768:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b76a:	89 c8                	mov    eax,ecx
c001b76c:	89 fa                	mov    edx,edi
c001b76e:	89 f3                	mov    ebx,esi
c001b770:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001b777:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001b77e:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001b785:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001b78c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001b792:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001b799:	0f be c0             	movsx  eax,al
c001b79c:	85 c0                	test   eax,eax
c001b79e:	75 08                	jne    c001b7a8 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001b7a0:	b8 07 00 00 00       	mov    eax,0x7
c001b7a5:	eb 1d                	jmp    c001b7c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b7a7:	90                   	nop
c001b7a8:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001b7af:	85 c0                	test   eax,eax
c001b7b1:	75 09                	jne    c001b7bc <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001b7b3:	b8 00 00 00 00       	mov    eax,0x0
c001b7b8:	eb 0a                	jmp    c001b7c4 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001b7ba:	66 90                	xchg   ax,ax
c001b7bc:	b8 01 00 00 00       	mov    eax,0x1
c001b7c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7c4:	81 c4 50 02 00 00    	add    esp,0x250
c001b7ca:	5b                   	pop    ebx
c001b7cb:	5e                   	pop    esi
c001b7cc:	5f                   	pop    edi
c001b7cd:	c3                   	ret    
c001b7ce:	66 90                	xchg   ax,ax

c001b7d0 <FAT::read(void*, unsigned long, void*, int*)>:
c001b7d0:	83 ec 1c             	sub    esp,0x1c
c001b7d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b7d8:	74 0a                	je     c001b7e4 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001b7da:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b7df:	75 0b                	jne    c001b7ec <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001b7e1:	8d 76 00             	lea    esi,[esi+0x0]
c001b7e4:	b8 04 00 00 00       	mov    eax,0x4
c001b7e9:	eb 41                	jmp    c001b82c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b7eb:	90                   	nop
c001b7ec:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b7f0:	50                   	push   eax
c001b7f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b7f5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b7f9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b7fd:	e8 04 89 fe ff       	call   c0004106 <f_read>
c001b802:	83 c4 10             	add    esp,0x10
c001b805:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b809:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b80d:	89 c2                	mov    edx,eax
c001b80f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b813:	89 10                	mov    DWORD PTR [eax],edx
c001b815:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b819:	85 c0                	test   eax,eax
c001b81b:	75 07                	jne    c001b824 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001b81d:	b8 00 00 00 00       	mov    eax,0x0
c001b822:	eb 08                	jmp    c001b82c <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001b824:	b8 01 00 00 00       	mov    eax,0x1
c001b829:	8d 76 00             	lea    esi,[esi+0x0]
c001b82c:	83 c4 1c             	add    esp,0x1c
c001b82f:	c3                   	ret    

c001b830 <FAT::write(void*, unsigned long, void*, int*)>:
c001b830:	83 ec 1c             	sub    esp,0x1c
c001b833:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b838:	74 0a                	je     c001b844 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001b83a:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001b83f:	75 0b                	jne    c001b84c <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001b841:	8d 76 00             	lea    esi,[esi+0x0]
c001b844:	b8 04 00 00 00       	mov    eax,0x4
c001b849:	eb 41                	jmp    c001b88c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b84b:	90                   	nop
c001b84c:	8d 44 24 08          	lea    eax,[esp+0x8]
c001b850:	50                   	push   eax
c001b851:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b855:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001b859:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b85d:	e8 a3 8a fe ff       	call   c0004305 <f_write>
c001b862:	83 c4 10             	add    esp,0x10
c001b865:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b869:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b86d:	89 c2                	mov    edx,eax
c001b86f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001b873:	89 10                	mov    DWORD PTR [eax],edx
c001b875:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b879:	85 c0                	test   eax,eax
c001b87b:	75 07                	jne    c001b884 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001b87d:	b8 00 00 00 00       	mov    eax,0x0
c001b882:	eb 08                	jmp    c001b88c <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001b884:	b8 01 00 00 00       	mov    eax,0x1
c001b889:	8d 76 00             	lea    esi,[esi+0x0]
c001b88c:	83 c4 1c             	add    esp,0x1c
c001b88f:	c3                   	ret    

c001b890 <FAT::close(void*)>:
c001b890:	83 ec 1c             	sub    esp,0x1c
c001b893:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b898:	75 0a                	jne    c001b8a4 <FAT::close(void*)+0x14>
c001b89a:	b8 04 00 00 00       	mov    eax,0x4
c001b89f:	eb 3f                	jmp    c001b8e0 <FAT::close(void*)+0x50>
c001b8a1:	8d 76 00             	lea    esi,[esi+0x0]
c001b8a4:	83 ec 0c             	sub    esp,0xc
c001b8a7:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8ab:	e8 62 8d fe ff       	call   c0004612 <f_close>
c001b8b0:	83 c4 10             	add    esp,0x10
c001b8b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b8b7:	83 ec 0c             	sub    esp,0xc
c001b8ba:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8be:	e8 a8 43 ff ff       	call   c000fc6b <free>
c001b8c3:	83 c4 10             	add    esp,0x10
c001b8c6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b8ca:	85 c0                	test   eax,eax
c001b8cc:	75 0a                	jne    c001b8d8 <FAT::close(void*)+0x48>
c001b8ce:	b8 00 00 00 00       	mov    eax,0x0
c001b8d3:	eb 0b                	jmp    c001b8e0 <FAT::close(void*)+0x50>
c001b8d5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8d8:	b8 01 00 00 00       	mov    eax,0x1
c001b8dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b8e0:	83 c4 1c             	add    esp,0x1c
c001b8e3:	c3                   	ret    

c001b8e4 <FAT::closeDir(void*)>:
c001b8e4:	83 ec 1c             	sub    esp,0x1c
c001b8e7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001b8ec:	75 0a                	jne    c001b8f8 <FAT::closeDir(void*)+0x14>
c001b8ee:	b8 04 00 00 00       	mov    eax,0x4
c001b8f3:	eb 3f                	jmp    c001b934 <FAT::closeDir(void*)+0x50>
c001b8f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b8f8:	83 ec 0c             	sub    esp,0xc
c001b8fb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b8ff:	e8 b9 8f fe ff       	call   c00048bd <f_closedir>
c001b904:	83 c4 10             	add    esp,0x10
c001b907:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b90b:	83 ec 0c             	sub    esp,0xc
c001b90e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b912:	e8 54 43 ff ff       	call   c000fc6b <free>
c001b917:	83 c4 10             	add    esp,0x10
c001b91a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b91e:	85 c0                	test   eax,eax
c001b920:	75 0a                	jne    c001b92c <FAT::closeDir(void*)+0x48>
c001b922:	b8 00 00 00 00       	mov    eax,0x0
c001b927:	eb 0b                	jmp    c001b934 <FAT::closeDir(void*)+0x50>
c001b929:	8d 76 00             	lea    esi,[esi+0x0]
c001b92c:	b8 01 00 00 00       	mov    eax,0x1
c001b931:	8d 76 00             	lea    esi,[esi+0x0]
c001b934:	83 c4 1c             	add    esp,0x1c
c001b937:	c3                   	ret    

c001b938 <FAT::truncate(void*, unsigned long long)>:
c001b938:	83 ec 2c             	sub    esp,0x2c
c001b93b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b93f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b943:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b947:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b94b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b950:	75 0a                	jne    c001b95c <FAT::truncate(void*, unsigned long long)+0x24>
c001b952:	b8 04 00 00 00       	mov    eax,0x4
c001b957:	eb 47                	jmp    c001b9a0 <FAT::truncate(void*, unsigned long long)+0x68>
c001b959:	8d 76 00             	lea    esi,[esi+0x0]
c001b95c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b960:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b963:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b967:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b96f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b973:	83 ec 08             	sub    esp,0x8
c001b976:	50                   	push   eax
c001b977:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b97b:	e8 c1 8c fe ff       	call   c0004641 <f_lseek>
c001b980:	83 c4 10             	add    esp,0x10
c001b983:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b987:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b98b:	85 c0                	test   eax,eax
c001b98d:	75 09                	jne    c001b998 <FAT::truncate(void*, unsigned long long)+0x60>
c001b98f:	b8 00 00 00 00       	mov    eax,0x0
c001b994:	eb 0a                	jmp    c001b9a0 <FAT::truncate(void*, unsigned long long)+0x68>
c001b996:	66 90                	xchg   ax,ax
c001b998:	b8 01 00 00 00       	mov    eax,0x1
c001b99d:	8d 76 00             	lea    esi,[esi+0x0]
c001b9a0:	83 c4 2c             	add    esp,0x2c
c001b9a3:	c3                   	ret    

c001b9a4 <FAT::seek(void*, unsigned long long)>:
c001b9a4:	83 ec 2c             	sub    esp,0x2c
c001b9a7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9ab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b9af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b9b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b9b7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b9bc:	75 0a                	jne    c001b9c8 <FAT::seek(void*, unsigned long long)+0x24>
c001b9be:	b8 04 00 00 00       	mov    eax,0x4
c001b9c3:	eb 33                	jmp    c001b9f8 <FAT::seek(void*, unsigned long long)+0x54>
c001b9c5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9c8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b9cc:	83 ec 08             	sub    esp,0x8
c001b9cf:	50                   	push   eax
c001b9d0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b9d4:	e8 68 8c fe ff       	call   c0004641 <f_lseek>
c001b9d9:	83 c4 10             	add    esp,0x10
c001b9dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b9e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b9e4:	85 c0                	test   eax,eax
c001b9e6:	75 08                	jne    c001b9f0 <FAT::seek(void*, unsigned long long)+0x4c>
c001b9e8:	b8 00 00 00 00       	mov    eax,0x0
c001b9ed:	eb 09                	jmp    c001b9f8 <FAT::seek(void*, unsigned long long)+0x54>
c001b9ef:	90                   	nop
c001b9f0:	b8 01 00 00 00       	mov    eax,0x1
c001b9f5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9f8:	83 c4 2c             	add    esp,0x2c
c001b9fb:	c3                   	ret    

c001b9fc <fatWrapperReadDisk>:
c001b9fc:	53                   	push   ebx
c001b9fd:	83 ec 18             	sub    esp,0x18
c001ba00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba04:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ba08:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ba0d:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001ba14:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ba18:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ba1c:	ba 00 00 00 00       	mov    edx,0x0
c001ba21:	83 ec 0c             	sub    esp,0xc
c001ba24:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba28:	53                   	push   ebx
c001ba29:	52                   	push   edx
c001ba2a:	50                   	push   eax
c001ba2b:	51                   	push   ecx
c001ba2c:	e8 1f f0 fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001ba31:	83 c4 20             	add    esp,0x20
c001ba34:	83 c4 18             	add    esp,0x18
c001ba37:	5b                   	pop    ebx
c001ba38:	c3                   	ret    
c001ba39:	8d 76 00             	lea    esi,[esi+0x0]

c001ba3c <fatWrapperWriteDisk>:
c001ba3c:	53                   	push   ebx
c001ba3d:	83 ec 18             	sub    esp,0x18
c001ba40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ba44:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ba48:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001ba4d:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001ba54:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ba58:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ba5c:	ba 00 00 00 00       	mov    edx,0x0
c001ba61:	83 ec 0c             	sub    esp,0xc
c001ba64:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ba68:	53                   	push   ebx
c001ba69:	52                   	push   edx
c001ba6a:	50                   	push   eax
c001ba6b:	51                   	push   ecx
c001ba6c:	e8 4b f0 fe ff       	call   c000aabc <LogicalDisk::write(unsigned long long, int, void*)>
c001ba71:	83 c4 20             	add    esp,0x20
c001ba74:	83 c4 18             	add    esp,0x18
c001ba77:	5b                   	pop    ebx
c001ba78:	c3                   	ret    
c001ba79:	8d 76 00             	lea    esi,[esi+0x0]

c001ba7c <fatWrapperIoctl>:
c001ba7c:	53                   	push   ebx
c001ba7d:	83 ec 28             	sub    esp,0x28
c001ba80:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ba84:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ba88:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001ba8c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ba90:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ba95:	83 f8 02             	cmp    eax,0x2
c001ba98:	75 32                	jne    c001bacc <fatWrapperIoctl+0x50>
c001ba9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ba9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001baa2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001baa7:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001baae:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001bab4:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001baba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001babe:	66 89 02             	mov    WORD PTR [edx],ax
c001bac1:	b8 00 00 00 00       	mov    eax,0x0
c001bac6:	e9 c5 00 00 00       	jmp    c001bb90 <fatWrapperIoctl+0x114>
c001bacb:	90                   	nop
c001bacc:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bad1:	83 f8 01             	cmp    eax,0x1
c001bad4:	75 6a                	jne    c001bb40 <fatWrapperIoctl+0xc4>
c001bad6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bada:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bade:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001bae3:	8b 04 85 e0 ba 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4520]
c001baea:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001baf0:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001baf6:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001bafc:	89 c8                	mov    eax,ecx
c001bafe:	89 da                	mov    edx,ebx
c001bb00:	0f a4 c2 0a          	shld   edx,eax,0xa
c001bb04:	c1 e0 0a             	shl    eax,0xa
c001bb07:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001bb0c:	8b 0c 8d e0 ba 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4520]
c001bb13:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001bb19:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001bb1f:	89 cb                	mov    ebx,ecx
c001bb21:	c1 fb 1f             	sar    ebx,0x1f
c001bb24:	53                   	push   ebx
c001bb25:	51                   	push   ecx
c001bb26:	52                   	push   edx
c001bb27:	50                   	push   eax
c001bb28:	e8 c7 59 00 00       	call   c00214f4 <__udivdi3>
c001bb2d:	83 c4 10             	add    esp,0x10
c001bb30:	89 c2                	mov    edx,eax
c001bb32:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bb36:	89 10                	mov    DWORD PTR [eax],edx
c001bb38:	b8 00 00 00 00       	mov    eax,0x0
c001bb3d:	eb 51                	jmp    c001bb90 <fatWrapperIoctl+0x114>
c001bb3f:	90                   	nop
c001bb40:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb45:	85 c0                	test   eax,eax
c001bb47:	75 07                	jne    c001bb50 <fatWrapperIoctl+0xd4>
c001bb49:	b8 00 00 00 00       	mov    eax,0x0
c001bb4e:	eb 40                	jmp    c001bb90 <fatWrapperIoctl+0x114>
c001bb50:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb55:	83 f8 03             	cmp    eax,0x3
c001bb58:	75 1a                	jne    c001bb74 <fatWrapperIoctl+0xf8>
c001bb5a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001bb5e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001bb62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb66:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001bb6c:	b8 00 00 00 00       	mov    eax,0x0
c001bb71:	eb 1d                	jmp    c001bb90 <fatWrapperIoctl+0x114>
c001bb73:	90                   	nop
c001bb74:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001bb79:	83 f8 04             	cmp    eax,0x4
c001bb7c:	75 0a                	jne    c001bb88 <fatWrapperIoctl+0x10c>
c001bb7e:	b8 00 00 00 00       	mov    eax,0x0
c001bb83:	eb 0b                	jmp    c001bb90 <fatWrapperIoctl+0x114>
c001bb85:	8d 76 00             	lea    esi,[esi+0x0]
c001bb88:	b8 04 00 00 00       	mov    eax,0x4
c001bb8d:	8d 76 00             	lea    esi,[esi+0x0]
c001bb90:	83 c4 28             	add    esp,0x28
c001bb93:	5b                   	pop    ebx
c001bb94:	c3                   	ret    
c001bb95:	90                   	nop
c001bb96:	66 90                	xchg   ax,ax

c001bb98 <FAT::FAT()>:
c001bb98:	83 ec 1c             	sub    esp,0x1c
c001bb9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bb9f:	83 ec 0c             	sub    esp,0xc
c001bba2:	50                   	push   eax
c001bba3:	e8 c8 c1 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001bba8:	83 c4 10             	add    esp,0x10
c001bbab:	ba 80 51 02 c0       	mov    edx,0xc0025180
c001bbb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bbb4:	89 10                	mov    DWORD PTR [eax],edx
c001bbb6:	c7 05 20 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb20,0x0
c001bbc0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bbc8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001bbcd:	7f 19                	jg     c001bbe8 <FAT::FAT()+0x50>
c001bbcf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bbd3:	c7 04 85 40 eb 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd14c0],0xffffffff
c001bbde:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001bbe3:	eb e3                	jmp    c001bbc8 <FAT::FAT()+0x30>
c001bbe5:	8d 76 00             	lea    esi,[esi+0x0]
c001bbe8:	90                   	nop
c001bbe9:	83 c4 1c             	add    esp,0x1c
c001bbec:	c3                   	ret    
c001bbed:	90                   	nop
c001bbee:	66 90                	xchg   ax,ax

c001bbf0 <FAT::fixFilepath(char*)>:
c001bbf0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bbf4:	8a 00                	mov    al,BYTE PTR [eax]
c001bbf6:	0f be c0             	movsx  eax,al
c001bbf9:	83 f8 40             	cmp    eax,0x40
c001bbfc:	7e 2e                	jle    c001bc2c <FAT::fixFilepath(char*)+0x3c>
c001bbfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc02:	8a 00                	mov    al,BYTE PTR [eax]
c001bc04:	83 e8 41             	sub    eax,0x41
c001bc07:	88 c2                	mov    dl,al
c001bc09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc0d:	88 10                	mov    BYTE PTR [eax],dl
c001bc0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc13:	8a 00                	mov    al,BYTE PTR [eax]
c001bc15:	0f be c0             	movsx  eax,al
c001bc18:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c001bc1f:	83 c0 30             	add    eax,0x30
c001bc22:	88 c2                	mov    dl,al
c001bc24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001bc28:	88 10                	mov    BYTE PTR [eax],dl
c001bc2a:	66 90                	xchg   ax,ax
c001bc2c:	90                   	nop
c001bc2d:	c3                   	ret    
c001bc2e:	66 90                	xchg   ax,ax

c001bc30 <FAT::open(char const*, void**, FileOpenMode)>:
c001bc30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bc36:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bc3e:	74 0c                	je     c001bc4c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001bc40:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bc48:	75 0e                	jne    c001bc58 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001bc4a:	66 90                	xchg   ax,ax
c001bc4c:	b8 04 00 00 00       	mov    eax,0x4
c001bc51:	e9 46 01 00 00       	jmp    c001bd9c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001bc56:	66 90                	xchg   ax,ax
c001bc58:	83 ec 08             	sub    esp,0x8
c001bc5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc62:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bc66:	50                   	push   eax
c001bc67:	e8 d4 49 fe ff       	call   c0000640 <strcpy>
c001bc6c:	83 c4 10             	add    esp,0x10
c001bc6f:	83 ec 08             	sub    esp,0x8
c001bc72:	8d 44 24 10          	lea    eax,[esp+0x10]
c001bc76:	50                   	push   eax
c001bc77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bc7e:	e8 6d ff ff ff       	call   c001bbf0 <FAT::fixFilepath(char*)>
c001bc83:	83 c4 10             	add    esp,0x10
c001bc86:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001bc8e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bc95:	83 e0 01             	and    eax,0x1
c001bc98:	74 12                	je     c001bcac <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001bc9a:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bca1:	83 c8 01             	or     eax,0x1
c001bca4:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bcab:	90                   	nop
c001bcac:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bcb3:	83 e0 04             	and    eax,0x4
c001bcb6:	74 24                	je     c001bcdc <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001bcb8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bcbf:	83 c8 30             	or     eax,0x30
c001bcc2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bcc9:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bcd0:	83 c8 02             	or     eax,0x2
c001bcd3:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bcda:	66 90                	xchg   ax,ax
c001bcdc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bce3:	83 e0 02             	and    eax,0x2
c001bce6:	74 14                	je     c001bcfc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001bce8:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bcef:	83 c8 02             	or     eax,0x2
c001bcf2:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bcf9:	8d 76 00             	lea    esi,[esi+0x0]
c001bcfc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bd03:	83 e0 08             	and    eax,0x8
c001bd06:	74 14                	je     c001bd1c <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001bd08:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bd0f:	83 c8 04             	or     eax,0x4
c001bd12:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bd19:	8d 76 00             	lea    esi,[esi+0x0]
c001bd1c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001bd23:	83 e0 10             	and    eax,0x10
c001bd26:	74 14                	je     c001bd3c <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001bd28:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001bd2f:	83 c8 08             	or     eax,0x8
c001bd32:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001bd39:	8d 76 00             	lea    esi,[esi+0x0]
c001bd3c:	83 ec 0c             	sub    esp,0xc
c001bd3f:	68 28 02 00 00       	push   0x228
c001bd44:	e8 12 3f ff ff       	call   c000fc5b <malloc>
c001bd49:	83 c4 10             	add    esp,0x10
c001bd4c:	89 c2                	mov    edx,eax
c001bd4e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bd55:	89 10                	mov    DWORD PTR [eax],edx
c001bd57:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001bd5f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001bd66:	8b 00                	mov    eax,DWORD PTR [eax]
c001bd68:	83 ec 04             	sub    esp,0x4
c001bd6b:	52                   	push   edx
c001bd6c:	8d 54 24 10          	lea    edx,[esp+0x10]
c001bd70:	52                   	push   edx
c001bd71:	50                   	push   eax
c001bd72:	e8 cc 80 fe ff       	call   c0003e43 <f_open>
c001bd77:	83 c4 10             	add    esp,0x10
c001bd7a:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001bd81:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001bd89:	74 09                	je     c001bd94 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001bd8b:	b8 01 00 00 00       	mov    eax,0x1
c001bd90:	eb 0a                	jmp    c001bd9c <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001bd92:	66 90                	xchg   ax,ax
c001bd94:	b8 00 00 00 00       	mov    eax,0x0
c001bd99:	8d 76 00             	lea    esi,[esi+0x0]
c001bd9c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bda2:	c3                   	ret    
c001bda3:	90                   	nop

c001bda4 <FAT::openDir(char const*, void**)>:
c001bda4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bdaa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bdb2:	74 0c                	je     c001bdc0 <FAT::openDir(char const*, void**)+0x1c>
c001bdb4:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001bdbc:	75 0e                	jne    c001bdcc <FAT::openDir(char const*, void**)+0x28>
c001bdbe:	66 90                	xchg   ax,ax
c001bdc0:	b8 04 00 00 00       	mov    eax,0x4
c001bdc5:	e9 82 00 00 00       	jmp    c001be4c <FAT::openDir(char const*, void**)+0xa8>
c001bdca:	66 90                	xchg   ax,ax
c001bdcc:	83 ec 08             	sub    esp,0x8
c001bdcf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bdd6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bdda:	50                   	push   eax
c001bddb:	e8 60 48 fe ff       	call   c0000640 <strcpy>
c001bde0:	83 c4 10             	add    esp,0x10
c001bde3:	83 ec 08             	sub    esp,0x8
c001bde6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bdea:	50                   	push   eax
c001bdeb:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bdf2:	e8 f9 fd ff ff       	call   c001bbf0 <FAT::fixFilepath(char*)>
c001bdf7:	83 c4 10             	add    esp,0x10
c001bdfa:	83 ec 0c             	sub    esp,0xc
c001bdfd:	6a 30                	push   0x30
c001bdff:	e8 57 3e ff ff       	call   c000fc5b <malloc>
c001be04:	83 c4 10             	add    esp,0x10
c001be07:	89 c2                	mov    edx,eax
c001be09:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001be10:	89 10                	mov    DWORD PTR [eax],edx
c001be12:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001be19:	8b 00                	mov    eax,DWORD PTR [eax]
c001be1b:	83 ec 08             	sub    esp,0x8
c001be1e:	8d 54 24 14          	lea    edx,[esp+0x14]
c001be22:	52                   	push   edx
c001be23:	50                   	push   eax
c001be24:	e8 c9 89 fe ff       	call   c00047f2 <f_opendir>
c001be29:	83 c4 10             	add    esp,0x10
c001be2c:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001be33:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001be3b:	74 07                	je     c001be44 <FAT::openDir(char const*, void**)+0xa0>
c001be3d:	b8 01 00 00 00       	mov    eax,0x1
c001be42:	eb 08                	jmp    c001be4c <FAT::openDir(char const*, void**)+0xa8>
c001be44:	b8 00 00 00 00       	mov    eax,0x0
c001be49:	8d 76 00             	lea    esi,[esi+0x0]
c001be4c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001be52:	c3                   	ret    
c001be53:	90                   	nop

c001be54 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001be54:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001be5a:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001be62:	75 0c                	jne    c001be70 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001be64:	b8 04 00 00 00       	mov    eax,0x4
c001be69:	e9 d6 00 00 00       	jmp    c001bf44 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001be6e:	66 90                	xchg   ax,ax
c001be70:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001be78:	75 0a                	jne    c001be84 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001be7a:	b8 04 00 00 00       	mov    eax,0x4
c001be7f:	e9 c0 00 00 00       	jmp    c001bf44 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001be84:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001be8c:	75 0a                	jne    c001be98 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001be8e:	b8 04 00 00 00       	mov    eax,0x4
c001be93:	e9 ac 00 00 00       	jmp    c001bf44 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001be98:	83 ec 08             	sub    esp,0x8
c001be9b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bea2:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bea9:	50                   	push   eax
c001beaa:	e8 91 47 fe ff       	call   c0000640 <strcpy>
c001beaf:	83 c4 10             	add    esp,0x10
c001beb2:	83 ec 08             	sub    esp,0x8
c001beb5:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001bebc:	50                   	push   eax
c001bebd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001bec4:	e8 27 fd ff ff       	call   c001bbf0 <FAT::fixFilepath(char*)>
c001bec9:	83 c4 10             	add    esp,0x10
c001becc:	83 ec 08             	sub    esp,0x8
c001becf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001bed3:	50                   	push   eax
c001bed4:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001bedb:	50                   	push   eax
c001bedc:	e8 90 8a fe ff       	call   c0004971 <f_stat>
c001bee1:	83 c4 10             	add    esp,0x10
c001bee4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001beeb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001bef2:	85 c0                	test   eax,eax
c001bef4:	74 0a                	je     c001bf00 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001bef6:	83 f8 04             	cmp    eax,0x4
c001bef9:	74 39                	je     c001bf34 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001befb:	eb 3f                	jmp    c001bf3c <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001befd:	8d 76 00             	lea    esi,[esi+0x0]
c001bf00:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001bf04:	0f b6 c0             	movzx  eax,al
c001bf07:	83 e0 10             	and    eax,0x10
c001bf0a:	0f 95 c2             	setne  dl
c001bf0d:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001bf14:	88 10                	mov    BYTE PTR [eax],dl
c001bf16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf1a:	ba 00 00 00 00       	mov    edx,0x0
c001bf1f:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001bf26:	89 01                	mov    DWORD PTR [ecx],eax
c001bf28:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001bf2b:	b8 00 00 00 00       	mov    eax,0x0
c001bf30:	eb 12                	jmp    c001bf44 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001bf32:	66 90                	xchg   ax,ax
c001bf34:	b8 02 00 00 00       	mov    eax,0x2
c001bf39:	eb 09                	jmp    c001bf44 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001bf3b:	90                   	nop
c001bf3c:	b8 01 00 00 00       	mov    eax,0x1
c001bf41:	8d 76 00             	lea    esi,[esi+0x0]
c001bf44:	81 c4 2c 02 00 00    	add    esp,0x22c
c001bf4a:	c3                   	ret    
c001bf4b:	90                   	nop

c001bf4c <FAT::unlink(char const*)>:
c001bf4c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf52:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001bf5a:	75 08                	jne    c001bf64 <FAT::unlink(char const*)+0x18>
c001bf5c:	b8 04 00 00 00       	mov    eax,0x4
c001bf61:	eb 61                	jmp    c001bfc4 <FAT::unlink(char const*)+0x78>
c001bf63:	90                   	nop
c001bf64:	83 ec 08             	sub    esp,0x8
c001bf67:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bf6e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf72:	50                   	push   eax
c001bf73:	e8 c8 46 fe ff       	call   c0000640 <strcpy>
c001bf78:	83 c4 10             	add    esp,0x10
c001bf7b:	83 ec 08             	sub    esp,0x8
c001bf7e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001bf82:	50                   	push   eax
c001bf83:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001bf8a:	e8 61 fc ff ff       	call   c001bbf0 <FAT::fixFilepath(char*)>
c001bf8f:	83 c4 10             	add    esp,0x10
c001bf92:	83 ec 0c             	sub    esp,0xc
c001bf95:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bf99:	50                   	push   eax
c001bf9a:	e8 44 8c fe ff       	call   c0004be3 <f_unlink>
c001bf9f:	83 c4 10             	add    esp,0x10
c001bfa2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001bfa9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001bfb0:	85 c0                	test   eax,eax
c001bfb2:	75 08                	jne    c001bfbc <FAT::unlink(char const*)+0x70>
c001bfb4:	b8 00 00 00 00       	mov    eax,0x0
c001bfb9:	eb 09                	jmp    c001bfc4 <FAT::unlink(char const*)+0x78>
c001bfbb:	90                   	nop
c001bfbc:	b8 01 00 00 00       	mov    eax,0x1
c001bfc1:	8d 76 00             	lea    esi,[esi+0x0]
c001bfc4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001bfca:	c3                   	ret    
c001bfcb:	90                   	nop

c001bfcc <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001bfcc:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001bfd2:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001bfd9:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001bfe0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001bfe4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bfe8:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bff0:	75 0a                	jne    c001bffc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001bff2:	b8 04 00 00 00       	mov    eax,0x4
c001bff7:	e9 7c 01 00 00       	jmp    c001c178 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001bffc:	83 ec 08             	sub    esp,0x8
c001bfff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c006:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c00a:	50                   	push   eax
c001c00b:	e8 30 46 fe ff       	call   c0000640 <strcpy>
c001c010:	83 c4 10             	add    esp,0x10
c001c013:	83 ec 08             	sub    esp,0x8
c001c016:	8d 44 24 20          	lea    eax,[esp+0x20]
c001c01a:	50                   	push   eax
c001c01b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001c022:	e8 c9 fb ff ff       	call   c001bbf0 <FAT::fixFilepath(char*)>
c001c027:	83 c4 10             	add    esp,0x10
c001c02a:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001c032:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001c03a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c03f:	83 e0 01             	and    eax,0x1
c001c042:	74 14                	je     c001c058 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001c044:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c04b:	83 c8 01             	or     eax,0x1
c001c04e:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c055:	8d 76 00             	lea    esi,[esi+0x0]
c001c058:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c05d:	83 e0 02             	and    eax,0x2
c001c060:	74 12                	je     c001c074 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001c062:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c069:	83 c8 20             	or     eax,0x20
c001c06c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c073:	90                   	nop
c001c074:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c079:	83 e0 04             	and    eax,0x4
c001c07c:	74 12                	je     c001c090 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001c07e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c085:	83 c8 04             	or     eax,0x4
c001c088:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c08f:	90                   	nop
c001c090:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001c095:	83 e0 08             	and    eax,0x8
c001c098:	74 12                	je     c001c0ac <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001c09a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c0a1:	83 c8 02             	or     eax,0x2
c001c0a4:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001c0ab:	90                   	nop
c001c0ac:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0b1:	83 e0 01             	and    eax,0x1
c001c0b4:	74 12                	je     c001c0c8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001c0b6:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c0bd:	83 c8 01             	or     eax,0x1
c001c0c0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c0c7:	90                   	nop
c001c0c8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0cd:	83 e0 02             	and    eax,0x2
c001c0d0:	74 12                	je     c001c0e4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001c0d2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c0d9:	83 c8 20             	or     eax,0x20
c001c0dc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c0e3:	90                   	nop
c001c0e4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c0e9:	83 e0 04             	and    eax,0x4
c001c0ec:	74 12                	je     c001c100 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001c0ee:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c0f5:	83 c8 04             	or     eax,0x4
c001c0f8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c0ff:	90                   	nop
c001c100:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001c105:	83 e0 08             	and    eax,0x8
c001c108:	74 12                	je     c001c11c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001c10a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001c111:	83 c8 02             	or     eax,0x2
c001c114:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c11b:	90                   	nop
c001c11c:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001c123:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001c12a:	09 d0                	or     eax,edx
c001c12c:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001c133:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001c13b:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001c143:	83 ec 04             	sub    esp,0x4
c001c146:	52                   	push   edx
c001c147:	50                   	push   eax
c001c148:	8d 44 24 24          	lea    eax,[esp+0x24]
c001c14c:	50                   	push   eax
c001c14d:	e8 06 8f fe ff       	call   c0005058 <f_chmod>
c001c152:	83 c4 10             	add    esp,0x10
c001c155:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001c15c:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001c163:	85 c0                	test   eax,eax
c001c165:	75 09                	jne    c001c170 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001c167:	b8 00 00 00 00       	mov    eax,0x0
c001c16c:	eb 0a                	jmp    c001c178 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001c16e:	66 90                	xchg   ax,ax
c001c170:	b8 01 00 00 00       	mov    eax,0x1
c001c175:	8d 76 00             	lea    esi,[esi+0x0]
c001c178:	81 c4 2c 01 00 00    	add    esp,0x12c
c001c17e:	c3                   	ret    
c001c17f:	90                   	nop

c001c180 <FAT::rename(char const*, char const*)>:
c001c180:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001c186:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001c18e:	74 0c                	je     c001c19c <FAT::rename(char const*, char const*)+0x1c>
c001c190:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001c198:	75 0e                	jne    c001c1a8 <FAT::rename(char const*, char const*)+0x28>
c001c19a:	66 90                	xchg   ax,ax
c001c19c:	b8 04 00 00 00       	mov    eax,0x4
c001c1a1:	e9 9e 00 00 00       	jmp    c001c244 <FAT::rename(char const*, char const*)+0xc4>
c001c1a6:	66 90                	xchg   ax,ax
c001c1a8:	83 ec 08             	sub    esp,0x8
c001c1ab:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c1b2:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c1b9:	50                   	push   eax
c001c1ba:	e8 81 44 fe ff       	call   c0000640 <strcpy>
c001c1bf:	83 c4 10             	add    esp,0x10
c001c1c2:	83 ec 08             	sub    esp,0x8
c001c1c5:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001c1cc:	50                   	push   eax
c001c1cd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c1d4:	e8 17 fa ff ff       	call   c001bbf0 <FAT::fixFilepath(char*)>
c001c1d9:	83 c4 10             	add    esp,0x10
c001c1dc:	83 ec 08             	sub    esp,0x8
c001c1df:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001c1e6:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c1ea:	50                   	push   eax
c001c1eb:	e8 50 44 fe ff       	call   c0000640 <strcpy>
c001c1f0:	83 c4 10             	add    esp,0x10
c001c1f3:	83 ec 08             	sub    esp,0x8
c001c1f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c1fa:	50                   	push   eax
c001c1fb:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001c202:	e8 e9 f9 ff ff       	call   c001bbf0 <FAT::fixFilepath(char*)>
c001c207:	83 c4 10             	add    esp,0x10
c001c20a:	83 ec 08             	sub    esp,0x8
c001c20d:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c211:	50                   	push   eax
c001c212:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001c219:	50                   	push   eax
c001c21a:	e8 81 8c fe ff       	call   c0004ea0 <f_rename>
c001c21f:	83 c4 10             	add    esp,0x10
c001c222:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001c229:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001c230:	85 c0                	test   eax,eax
c001c232:	75 08                	jne    c001c23c <FAT::rename(char const*, char const*)+0xbc>
c001c234:	b8 00 00 00 00       	mov    eax,0x0
c001c239:	eb 09                	jmp    c001c244 <FAT::rename(char const*, char const*)+0xc4>
c001c23b:	90                   	nop
c001c23c:	b8 01 00 00 00       	mov    eax,0x1
c001c241:	8d 76 00             	lea    esi,[esi+0x0]
c001c244:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c24a:	c3                   	ret    
c001c24b:	90                   	nop

c001c24c <FAT::mkdir(char const*)>:
c001c24c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c252:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001c25a:	75 08                	jne    c001c264 <FAT::mkdir(char const*)+0x18>
c001c25c:	b8 04 00 00 00       	mov    eax,0x4
c001c261:	eb 61                	jmp    c001c2c4 <FAT::mkdir(char const*)+0x78>
c001c263:	90                   	nop
c001c264:	83 ec 08             	sub    esp,0x8
c001c267:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c26e:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c272:	50                   	push   eax
c001c273:	e8 c8 43 fe ff       	call   c0000640 <strcpy>
c001c278:	83 c4 10             	add    esp,0x10
c001c27b:	83 ec 08             	sub    esp,0x8
c001c27e:	8d 44 24 14          	lea    eax,[esp+0x14]
c001c282:	50                   	push   eax
c001c283:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001c28a:	e8 61 f9 ff ff       	call   c001bbf0 <FAT::fixFilepath(char*)>
c001c28f:	83 c4 10             	add    esp,0x10
c001c292:	83 ec 0c             	sub    esp,0xc
c001c295:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c299:	50                   	push   eax
c001c29a:	e8 66 8a fe ff       	call   c0004d05 <f_mkdir>
c001c29f:	83 c4 10             	add    esp,0x10
c001c2a2:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001c2a9:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001c2b0:	85 c0                	test   eax,eax
c001c2b2:	75 08                	jne    c001c2bc <FAT::mkdir(char const*)+0x70>
c001c2b4:	b8 00 00 00 00       	mov    eax,0x0
c001c2b9:	eb 09                	jmp    c001c2c4 <FAT::mkdir(char const*)+0x78>
c001c2bb:	90                   	nop
c001c2bc:	b8 01 00 00 00       	mov    eax,0x1
c001c2c1:	8d 76 00             	lea    esi,[esi+0x0]
c001c2c4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c2ca:	c3                   	ret    
c001c2cb:	90                   	nop

c001c2cc <FAT::exists(char const*)>:
c001c2cc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001c2d2:	83 ec 08             	sub    esp,0x8
c001c2d5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c2dc:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c2e0:	50                   	push   eax
c001c2e1:	e8 5a 43 fe ff       	call   c0000640 <strcpy>
c001c2e6:	83 c4 10             	add    esp,0x10
c001c2e9:	83 ec 08             	sub    esp,0x8
c001c2ec:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001c2f0:	50                   	push   eax
c001c2f1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001c2f8:	e8 f3 f8 ff ff       	call   c001bbf0 <FAT::fixFilepath(char*)>
c001c2fd:	83 c4 10             	add    esp,0x10
c001c300:	83 ec 08             	sub    esp,0x8
c001c303:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001c30a:	50                   	push   eax
c001c30b:	8d 44 24 10          	lea    eax,[esp+0x10]
c001c30f:	50                   	push   eax
c001c310:	e8 5c 86 fe ff       	call   c0004971 <f_stat>
c001c315:	83 c4 10             	add    esp,0x10
c001c318:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001c31f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001c326:	85 c0                	test   eax,eax
c001c328:	75 06                	jne    c001c330 <FAT::exists(char const*)+0x64>
c001c32a:	b0 01                	mov    al,0x1
c001c32c:	eb 06                	jmp    c001c334 <FAT::exists(char const*)+0x68>
c001c32e:	66 90                	xchg   ax,ax
c001c330:	b0 00                	mov    al,0x0
c001c332:	66 90                	xchg   ax,ax
c001c334:	81 c4 2c 02 00 00    	add    esp,0x22c
c001c33a:	c3                   	ret    
c001c33b:	90                   	nop

c001c33c <isoReadDiscSectorHelper>:
c001c33c:	83 ec 2c             	sub    esp,0x2c
c001c33f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c343:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001c347:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001c34c:	83 e8 41             	sub    eax,0x41
c001c34f:	8b 0c 85 e0 ba 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd4520]
c001c356:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c35a:	ba 00 00 00 00       	mov    edx,0x0
c001c35f:	83 ec 0c             	sub    esp,0xc
c001c362:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001c366:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001c36a:	52                   	push   edx
c001c36b:	50                   	push   eax
c001c36c:	51                   	push   ecx
c001c36d:	e8 de e6 fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001c372:	83 c4 20             	add    esp,0x20
c001c375:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c379:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001c37e:	74 0c                	je     c001c38c <isoReadDiscSectorHelper+0x50>
c001c380:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001c384:	c1 e0 0b             	shl    eax,0xb
c001c387:	eb 0b                	jmp    c001c394 <isoReadDiscSectorHelper+0x58>
c001c389:	8d 76 00             	lea    esi,[esi+0x0]
c001c38c:	b8 00 00 00 00       	mov    eax,0x0
c001c391:	8d 76 00             	lea    esi,[esi+0x0]
c001c394:	83 c4 2c             	add    esp,0x2c
c001c397:	c3                   	ret    

c001c398 <iso_kprintf>:
c001c398:	83 ec 0c             	sub    esp,0xc
c001c39b:	83 ec 08             	sub    esp,0x8
c001c39e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c3a2:	68 25 4e 02 c0       	push   0xc0024e25
c001c3a7:	e8 b8 ab fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c3ac:	83 c4 10             	add    esp,0x10
c001c3af:	90                   	nop
c001c3b0:	83 c4 0c             	add    esp,0xc
c001c3b3:	c3                   	ret    

c001c3b4 <iso_kprintfd>:
c001c3b4:	83 ec 0c             	sub    esp,0xc
c001c3b7:	83 ec 08             	sub    esp,0x8
c001c3ba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c3be:	68 c6 3b 02 c0       	push   0xc0023bc6
c001c3c3:	e8 9c ab fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c3c8:	83 c4 10             	add    esp,0x10
c001c3cb:	90                   	nop
c001c3cc:	83 c4 0c             	add    esp,0xc
c001c3cf:	c3                   	ret    

c001c3d0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001c3d0:	b8 08 00 00 00       	mov    eax,0x8
c001c3d5:	c3                   	ret    

c001c3d6 <ISO9660::truncate(void*, unsigned long long)>:
c001c3d6:	b8 01 00 00 00       	mov    eax,0x1
c001c3db:	c3                   	ret    

c001c3dc <ISO9660::getName()>:
c001c3dc:	b8 e4 51 02 c0       	mov    eax,0xc00251e4
c001c3e1:	c3                   	ret    

c001c3e2 <ISO9660::closeDir(void*)>:
c001c3e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3e6:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3e8:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001c3eb:	90                   	nop

c001c3ec <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001c3ec:	b8 01 00 00 00       	mov    eax,0x1
c001c3f1:	c3                   	ret    

c001c3f2 <ISO9660::unlink(char const*)>:
c001c3f2:	b8 01 00 00 00       	mov    eax,0x1
c001c3f7:	c3                   	ret    

c001c3f8 <ISO9660::write(void*, unsigned long, void*, int*)>:
c001c3f8:	b8 03 00 00 00       	mov    eax,0x3
c001c3fd:	c3                   	ret    

c001c3fe <ISO9660::rename(char const*, char const*)>:
c001c3fe:	b8 01 00 00 00       	mov    eax,0x1
c001c403:	c3                   	ret    

c001c404 <ISO9660::mkdir(char const*)>:
c001c404:	b8 01 00 00 00       	mov    eax,0x1
c001c409:	c3                   	ret    

c001c40a <ISO9660::~ISO9660()>:
c001c40a:	83 ec 0c             	sub    esp,0xc
c001c40d:	ba 24 53 02 c0       	mov    edx,0xc0025324
c001c412:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c416:	89 10                	mov    DWORD PTR [eax],edx
c001c418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c41c:	83 ec 0c             	sub    esp,0xc
c001c41f:	50                   	push   eax
c001c420:	e8 6f b9 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001c425:	83 c4 10             	add    esp,0x10
c001c428:	90                   	nop
c001c429:	83 c4 0c             	add    esp,0xc
c001c42c:	c3                   	ret    
c001c42d:	90                   	nop

c001c42e <ISO9660::~ISO9660()>:
c001c42e:	83 ec 0c             	sub    esp,0xc
c001c431:	83 ec 0c             	sub    esp,0xc
c001c434:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c438:	e8 cd ff ff ff       	call   c001c40a <ISO9660::~ISO9660()>
c001c43d:	83 c4 10             	add    esp,0x10
c001c440:	83 ec 08             	sub    esp,0x8
c001c443:	6a 08                	push   0x8
c001c445:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c449:	e8 95 0e ff ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c001c44e:	83 c4 10             	add    esp,0x10
c001c451:	83 c4 0c             	add    esp,0xc
c001c454:	c3                   	ret    
c001c455:	90                   	nop

c001c456 <ISO9660::exists(char const*)>:
c001c456:	83 ec 18             	sub    esp,0x18
c001c459:	68 ff 51 02 c0       	push   0xc00251ff
c001c45e:	e8 3f 3b ff ff       	call   c000ffa2 <KePanic(char const*)>
c001c463:	31 c0                	xor    eax,eax
c001c465:	83 c4 1c             	add    esp,0x1c
c001c468:	c3                   	ret    
c001c469:	90                   	nop

c001c46a <ISO9660::open(char const*, void**, FileOpenMode)>:
c001c46a:	56                   	push   esi
c001c46b:	53                   	push   ebx
c001c46c:	53                   	push   ebx
c001c46d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c471:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c475:	85 db                	test   ebx,ebx
c001c477:	0f 84 ca 00 00 00    	je     c001c547 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c47d:	85 f6                	test   esi,esi
c001c47f:	0f 84 c2 00 00 00    	je     c001c547 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001c485:	b8 03 00 00 00       	mov    eax,0x3
c001c48a:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001c48f:	0f 85 b7 00 00 00    	jne    c001c54c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c495:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001c497:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c49e:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001c4a4:	74 1b                	je     c001c4c1 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001c4a6:	85 c0                	test   eax,eax
c001c4a8:	74 10                	je     c001c4ba <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001c4aa:	83 ec 0c             	sub    esp,0xc
c001c4ad:	68 1d 52 02 c0       	push   0xc002521d
c001c4b2:	e8 eb 3a ff ff       	call   c000ffa2 <KePanic(char const*)>
c001c4b7:	83 c4 10             	add    esp,0x10
c001c4ba:	8a 03                	mov    al,BYTE PTR [ebx]
c001c4bc:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c4c1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c4c4:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c4cb:	85 c0                	test   eax,eax
c001c4cd:	74 09                	je     c001c4d8 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001c4cf:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c4d6:	74 48                	je     c001c520 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001c4d8:	83 ec 0c             	sub    esp,0xc
c001c4db:	68 2d 52 02 c0       	push   0xc002522d
c001c4e0:	e8 7f aa fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c4e5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c4e8:	83 c4 10             	add    esp,0x10
c001c4eb:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c4f2:	85 c0                	test   eax,eax
c001c4f4:	74 17                	je     c001c50d <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001c4f6:	83 ec 0c             	sub    esp,0xc
c001c4f9:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c500:	68 4d 52 02 c0       	push   0xc002524d
c001c505:	e8 5a aa fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c50a:	83 c4 10             	add    esp,0x10
c001c50d:	83 ec 0c             	sub    esp,0xc
c001c510:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c517:	50                   	push   eax
c001c518:	e8 11 a7 fe ff       	call   c0006c2e <init_percd>
c001c51d:	83 c4 10             	add    esp,0x10
c001c520:	83 c3 03             	add    ebx,0x3
c001c523:	51                   	push   ecx
c001c524:	51                   	push   ecx
c001c525:	6a 00                	push   0x0
c001c527:	53                   	push   ebx
c001c528:	e8 c8 a1 fe ff       	call   c00066f5 <iso_open>
c001c52d:	83 c4 10             	add    esp,0x10
c001c530:	89 c2                	mov    edx,eax
c001c532:	b8 01 00 00 00       	mov    eax,0x1
c001c537:	83 fa ff             	cmp    edx,0xffffffff
c001c53a:	74 10                	je     c001c54c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c53c:	83 c2 32             	add    edx,0x32
c001c53f:	31 c0                	xor    eax,eax
c001c541:	01 d2                	add    edx,edx
c001c543:	89 16                	mov    DWORD PTR [esi],edx
c001c545:	eb 05                	jmp    c001c54c <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001c547:	b8 04 00 00 00       	mov    eax,0x4
c001c54c:	5a                   	pop    edx
c001c54d:	5b                   	pop    ebx
c001c54e:	5e                   	pop    esi
c001c54f:	c3                   	ret    

c001c550 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001c550:	53                   	push   ebx
c001c551:	83 ec 08             	sub    esp,0x8
c001c554:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c558:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001c55c:	85 c0                	test   eax,eax
c001c55e:	74 2d                	je     c001c58d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c560:	85 db                	test   ebx,ebx
c001c562:	74 29                	je     c001c58d <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001c564:	b9 02 00 00 00       	mov    ecx,0x2
c001c569:	52                   	push   edx
c001c56a:	99                   	cdq    
c001c56b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c56f:	f7 f9                	idiv   ecx
c001c571:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c575:	83 e8 32             	sub    eax,0x32
c001c578:	50                   	push   eax
c001c579:	e8 1f a2 fe ff       	call   c000679d <iso_read>
c001c57e:	83 c4 10             	add    esp,0x10
c001c581:	89 03                	mov    DWORD PTR [ebx],eax
c001c583:	09 d0                	or     eax,edx
c001c585:	0f 94 c0             	sete   al
c001c588:	0f b6 c0             	movzx  eax,al
c001c58b:	eb 05                	jmp    c001c592 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001c58d:	b8 04 00 00 00       	mov    eax,0x4
c001c592:	83 c4 08             	add    esp,0x8
c001c595:	5b                   	pop    ebx
c001c596:	c3                   	ret    
c001c597:	90                   	nop

c001c598 <ISO9660::seek(void*, unsigned long long)>:
c001c598:	57                   	push   edi
c001c599:	56                   	push   esi
c001c59a:	b8 04 00 00 00       	mov    eax,0x4
c001c59f:	51                   	push   ecx
c001c5a0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5a4:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c5a8:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c5ac:	85 d2                	test   edx,edx
c001c5ae:	74 26                	je     c001c5d6 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001c5b0:	6a 00                	push   0x0
c001c5b2:	b9 02 00 00 00       	mov    ecx,0x2
c001c5b7:	57                   	push   edi
c001c5b8:	89 d0                	mov    eax,edx
c001c5ba:	56                   	push   esi
c001c5bb:	99                   	cdq    
c001c5bc:	f7 f9                	idiv   ecx
c001c5be:	83 e8 32             	sub    eax,0x32
c001c5c1:	50                   	push   eax
c001c5c2:	e8 ec a2 fe ff       	call   c00068b3 <iso_seek>
c001c5c7:	83 c4 10             	add    esp,0x10
c001c5ca:	31 f0                	xor    eax,esi
c001c5cc:	31 fa                	xor    edx,edi
c001c5ce:	09 d0                	or     eax,edx
c001c5d0:	0f 95 c0             	setne  al
c001c5d3:	0f b6 c0             	movzx  eax,al
c001c5d6:	5a                   	pop    edx
c001c5d7:	5e                   	pop    esi
c001c5d8:	5f                   	pop    edi
c001c5d9:	c3                   	ret    

c001c5da <ISO9660::tell(void*, unsigned long long*)>:
c001c5da:	53                   	push   ebx
c001c5db:	83 ec 08             	sub    esp,0x8
c001c5de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c5e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c5e6:	85 c0                	test   eax,eax
c001c5e8:	74 24                	je     c001c60e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c5ea:	85 db                	test   ebx,ebx
c001c5ec:	74 20                	je     c001c60e <ISO9660::tell(void*, unsigned long long*)+0x34>
c001c5ee:	83 ec 0c             	sub    esp,0xc
c001c5f1:	b9 02 00 00 00       	mov    ecx,0x2
c001c5f6:	99                   	cdq    
c001c5f7:	f7 f9                	idiv   ecx
c001c5f9:	83 e8 32             	sub    eax,0x32
c001c5fc:	50                   	push   eax
c001c5fd:	e8 35 a3 fe ff       	call   c0006937 <iso_tell>
c001c602:	83 c4 10             	add    esp,0x10
c001c605:	89 03                	mov    DWORD PTR [ebx],eax
c001c607:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001c60a:	31 c0                	xor    eax,eax
c001c60c:	eb 05                	jmp    c001c613 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001c60e:	b8 04 00 00 00       	mov    eax,0x4
c001c613:	83 c4 08             	add    esp,0x8
c001c616:	5b                   	pop    ebx
c001c617:	c3                   	ret    

c001c618 <ISO9660::stat(void*, unsigned long long*)>:
c001c618:	53                   	push   ebx
c001c619:	83 ec 14             	sub    esp,0x14
c001c61c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c620:	68 71 52 02 c0       	push   0xc0025271
c001c625:	e8 3a a9 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c62a:	83 c4 10             	add    esp,0x10
c001c62d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c632:	74 2c                	je     c001c660 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c634:	85 db                	test   ebx,ebx
c001c636:	74 28                	je     c001c660 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001c638:	83 ec 0c             	sub    esp,0xc
c001c63b:	b9 02 00 00 00       	mov    ecx,0x2
c001c640:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c644:	99                   	cdq    
c001c645:	f7 f9                	idiv   ecx
c001c647:	83 e8 32             	sub    eax,0x32
c001c64a:	50                   	push   eax
c001c64b:	e8 18 a3 fe ff       	call   c0006968 <iso_total>
c001c650:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c657:	89 03                	mov    DWORD PTR [ebx],eax
c001c659:	83 c4 10             	add    esp,0x10
c001c65c:	31 c0                	xor    eax,eax
c001c65e:	eb 05                	jmp    c001c665 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001c660:	b8 04 00 00 00       	mov    eax,0x4
c001c665:	83 c4 08             	add    esp,0x8
c001c668:	5b                   	pop    ebx
c001c669:	c3                   	ret    

c001c66a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001c66a:	55                   	push   ebp
c001c66b:	57                   	push   edi
c001c66c:	56                   	push   esi
c001c66d:	53                   	push   ebx
c001c66e:	83 ec 18             	sub    esp,0x18
c001c671:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001c675:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c679:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001c67d:	68 79 52 02 c0       	push   0xc0025279
c001c682:	e8 dd a8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c687:	83 c4 10             	add    esp,0x10
c001c68a:	85 ff                	test   edi,edi
c001c68c:	0f 94 c0             	sete   al
c001c68f:	85 f6                	test   esi,esi
c001c691:	0f 94 c2             	sete   dl
c001c694:	09 d0                	or     eax,edx
c001c696:	a8 01                	test   al,0x1
c001c698:	0f 85 dd 00 00 00    	jne    c001c77b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001c69e:	85 db                	test   ebx,ebx
c001c6a0:	0f 84 d5 00 00 00    	je     c001c77b <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001c6a6:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001c6a9:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001c6af:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001c6b6:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c6bd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001c6bf:	38 0d 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,cl
c001c6c5:	74 1b                	je     c001c6e2 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001c6c7:	85 c0                	test   eax,eax
c001c6c9:	74 10                	je     c001c6db <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001c6cb:	83 ec 0c             	sub    esp,0xc
c001c6ce:	68 1d 52 02 c0       	push   0xc002521d
c001c6d3:	e8 ca 38 ff ff       	call   c000ffa2 <KePanic(char const*)>
c001c6d8:	83 c4 10             	add    esp,0x10
c001c6db:	8a 03                	mov    al,BYTE PTR [ebx]
c001c6dd:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c6e2:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c6e5:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c6ec:	85 c0                	test   eax,eax
c001c6ee:	74 09                	je     c001c6f9 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001c6f0:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c6f7:	74 51                	je     c001c74a <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001c6f9:	83 ec 0c             	sub    esp,0xc
c001c6fc:	68 81 52 02 c0       	push   0xc0025281
c001c701:	e8 5e a8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c706:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c709:	83 c4 10             	add    esp,0x10
c001c70c:	83 3c 85 dc b9 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd4624],0x0
c001c714:	74 21                	je     c001c737 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001c716:	83 ec 0c             	sub    esp,0xc
c001c719:	68 a1 52 02 c0       	push   0xc00252a1
c001c71e:	e8 41 a8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c723:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c726:	83 c4 10             	add    esp,0x10
c001c729:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c730:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c737:	83 ec 0c             	sub    esp,0xc
c001c73a:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c741:	50                   	push   eax
c001c742:	e8 e7 a4 fe ff       	call   c0006c2e <init_percd>
c001c747:	83 c4 10             	add    esp,0x10
c001c74a:	83 c3 03             	add    ebx,0x3
c001c74d:	52                   	push   edx
c001c74e:	52                   	push   edx
c001c74f:	6a 00                	push   0x0
c001c751:	53                   	push   ebx
c001c752:	e8 9e 9f fe ff       	call   c00066f5 <iso_open>
c001c757:	83 c4 10             	add    esp,0x10
c001c75a:	89 c5                	mov    ebp,eax
c001c75c:	83 f8 ff             	cmp    eax,0xffffffff
c001c75f:	75 21                	jne    c001c782 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001c761:	50                   	push   eax
c001c762:	50                   	push   eax
c001c763:	6a 01                	push   0x1
c001c765:	53                   	push   ebx
c001c766:	e8 8a 9f fe ff       	call   c00066f5 <iso_open>
c001c76b:	83 c4 10             	add    esp,0x10
c001c76e:	ba 02 00 00 00       	mov    edx,0x2
c001c773:	40                   	inc    eax
c001c774:	74 2b                	je     c001c7a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001c776:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001c779:	eb 24                	jmp    c001c79f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001c77b:	ba 04 00 00 00       	mov    edx,0x4
c001c780:	eb 1f                	jmp    c001c7a1 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001c782:	83 ec 0c             	sub    esp,0xc
c001c785:	50                   	push   eax
c001c786:	e8 dd a1 fe ff       	call   c0006968 <iso_total>
c001c78b:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001c792:	89 07                	mov    DWORD PTR [edi],eax
c001c794:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c797:	e8 e3 9f fe ff       	call   c000677f <iso_close>
c001c79c:	83 c4 10             	add    esp,0x10
c001c79f:	31 d2                	xor    edx,edx
c001c7a1:	83 c4 0c             	add    esp,0xc
c001c7a4:	89 d0                	mov    eax,edx
c001c7a6:	5b                   	pop    ebx
c001c7a7:	5e                   	pop    esi
c001c7a8:	5f                   	pop    edi
c001c7a9:	5d                   	pop    ebp
c001c7aa:	c3                   	ret    
c001c7ab:	90                   	nop

c001c7ac <ISO9660::close(void*)>:
c001c7ac:	83 ec 0c             	sub    esp,0xc
c001c7af:	b8 04 00 00 00       	mov    eax,0x4
c001c7b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c7b8:	85 d2                	test   edx,edx
c001c7ba:	74 1b                	je     c001c7d7 <ISO9660::close(void*)+0x2b>
c001c7bc:	83 ec 0c             	sub    esp,0xc
c001c7bf:	b9 02 00 00 00       	mov    ecx,0x2
c001c7c4:	89 d0                	mov    eax,edx
c001c7c6:	99                   	cdq    
c001c7c7:	f7 f9                	idiv   ecx
c001c7c9:	83 e8 32             	sub    eax,0x32
c001c7cc:	50                   	push   eax
c001c7cd:	e8 ad 9f fe ff       	call   c000677f <iso_close>
c001c7d2:	83 c4 10             	add    esp,0x10
c001c7d5:	31 c0                	xor    eax,eax
c001c7d7:	83 c4 0c             	add    esp,0xc
c001c7da:	c3                   	ret    
c001c7db:	90                   	nop

c001c7dc <ISO9660::openDir(char const*, void**)>:
c001c7dc:	56                   	push   esi
c001c7dd:	53                   	push   ebx
c001c7de:	50                   	push   eax
c001c7df:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001c7e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001c7e7:	85 db                	test   ebx,ebx
c001c7e9:	0f 84 bd 00 00 00    	je     c001c8ac <ISO9660::openDir(char const*, void**)+0xd0>
c001c7ef:	85 f6                	test   esi,esi
c001c7f1:	0f 84 b5 00 00 00    	je     c001c8ac <ISO9660::openDir(char const*, void**)+0xd0>
c001c7f7:	8a 13                	mov    dl,BYTE PTR [ebx]
c001c7f9:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c800:	38 15 20 ec 02 c0    	cmp    BYTE PTR ds:0xc002ec20,dl
c001c806:	74 1b                	je     c001c823 <ISO9660::openDir(char const*, void**)+0x47>
c001c808:	85 c0                	test   eax,eax
c001c80a:	74 10                	je     c001c81c <ISO9660::openDir(char const*, void**)+0x40>
c001c80c:	83 ec 0c             	sub    esp,0xc
c001c80f:	68 1d 52 02 c0       	push   0xc002521d
c001c814:	e8 89 37 ff ff       	call   c000ffa2 <KePanic(char const*)>
c001c819:	83 c4 10             	add    esp,0x10
c001c81c:	8a 03                	mov    al,BYTE PTR [ebx]
c001c81e:	a2 20 ec 02 c0       	mov    ds:0xc002ec20,al
c001c823:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001c826:	8b 04 85 dc b9 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4624]
c001c82d:	85 c0                	test   eax,eax
c001c82f:	74 10                	je     c001c841 <ISO9660::openDir(char const*, void**)+0x65>
c001c831:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001c838:	74 1a                	je     c001c854 <ISO9660::openDir(char const*, void**)+0x78>
c001c83a:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001c841:	83 ec 0c             	sub    esp,0xc
c001c844:	0f be 05 20 ec 02 c0 	movsx  eax,BYTE PTR ds:0xc002ec20
c001c84b:	50                   	push   eax
c001c84c:	e8 dd a3 fe ff       	call   c0006c2e <init_percd>
c001c851:	83 c4 10             	add    esp,0x10
c001c854:	83 c3 03             	add    ebx,0x3
c001c857:	50                   	push   eax
c001c858:	50                   	push   eax
c001c859:	6a 01                	push   0x1
c001c85b:	53                   	push   ebx
c001c85c:	e8 94 9e fe ff       	call   c00066f5 <iso_open>
c001c861:	83 c4 10             	add    esp,0x10
c001c864:	89 c3                	mov    ebx,eax
c001c866:	83 f8 ff             	cmp    eax,0xffffffff
c001c869:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001c86e:	75 1c                	jne    c001c88c <ISO9660::openDir(char const*, void**)+0xb0>
c001c870:	53                   	push   ebx
c001c871:	53                   	push   ebx
c001c872:	68 c5 52 02 c0       	push   0xc00252c5
c001c877:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c87d:	e8 da 5e ff ff       	call   c001275c <VgaText::puts(char const*)>
c001c882:	83 c4 10             	add    esp,0x10
c001c885:	b8 01 00 00 00       	mov    eax,0x1
c001c88a:	eb 25                	jmp    c001c8b1 <ISO9660::openDir(char const*, void**)+0xd5>
c001c88c:	01 db                	add    ebx,ebx
c001c88e:	51                   	push   ecx
c001c88f:	83 c3 65             	add    ebx,0x65
c001c892:	51                   	push   ecx
c001c893:	68 d8 52 02 c0       	push   0xc00252d8
c001c898:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c89e:	e8 b9 5e ff ff       	call   c001275c <VgaText::puts(char const*)>
c001c8a3:	89 1e                	mov    DWORD PTR [esi],ebx
c001c8a5:	83 c4 10             	add    esp,0x10
c001c8a8:	31 c0                	xor    eax,eax
c001c8aa:	eb 05                	jmp    c001c8b1 <ISO9660::openDir(char const*, void**)+0xd5>
c001c8ac:	b8 04 00 00 00       	mov    eax,0x4
c001c8b1:	5a                   	pop    edx
c001c8b2:	5b                   	pop    ebx
c001c8b3:	5e                   	pop    esi
c001c8b4:	c3                   	ret    
c001c8b5:	90                   	nop

c001c8b6 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001c8b6:	55                   	push   ebp
c001c8b7:	57                   	push   edi
c001c8b8:	56                   	push   esi
c001c8b9:	53                   	push   ebx
c001c8ba:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001c8c0:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001c8c7:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001c8ce:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001c8d6:	0f 84 e7 00 00 00    	je     c001c9c3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001c8dc:	85 db                	test   ebx,ebx
c001c8de:	0f 84 df 00 00 00    	je     c001c9c3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001c8e4:	83 ec 0c             	sub    esp,0xc
c001c8e7:	68 eb 52 02 c0       	push   0xc00252eb
c001c8ec:	e8 73 a6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001c8f1:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001c8f8:	b9 02 00 00 00       	mov    ecx,0x2
c001c8fd:	99                   	cdq    
c001c8fe:	f7 f9                	idiv   ecx
c001c900:	83 e8 32             	sub    eax,0x32
c001c903:	89 04 24             	mov    DWORD PTR [esp],eax
c001c906:	e8 af a0 fe ff       	call   c00069ba <iso_readdir>
c001c90b:	83 c4 10             	add    esp,0x10
c001c90e:	89 c6                	mov    esi,eax
c001c910:	85 c0                	test   eax,eax
c001c912:	75 37                	jne    c001c94b <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001c914:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001c919:	56                   	push   esi
c001c91a:	56                   	push   esi
c001c91b:	68 f6 52 02 c0       	push   0xc00252f6
c001c920:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c926:	e8 31 5e ff ff       	call   c001275c <VgaText::puts(char const*)>
c001c92b:	83 c4 0c             	add    esp,0xc
c001c92e:	68 10 01 00 00       	push   0x110
c001c933:	6a 00                	push   0x0
c001c935:	57                   	push   edi
c001c936:	e8 b5 3b fe ff       	call   c00004f0 <memset>
c001c93b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c941:	83 c4 10             	add    esp,0x10
c001c944:	b8 01 00 00 00       	mov    eax,0x1
c001c949:	eb 7d                	jmp    c001c9c8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001c94b:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001c951:	8d 68 08             	lea    ebp,[eax+0x8]
c001c954:	83 ec 0c             	sub    esp,0xc
c001c957:	55                   	push   ebp
c001c958:	e8 13 3c fe ff       	call   c0000570 <strlen>
c001c95d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c965:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c969:	83 c4 10             	add    esp,0x10
c001c96c:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001c970:	75 0a                	jne    c001c97c <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001c972:	b8 02 00 00 00       	mov    eax,0x2
c001c977:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001c97a:	74 05                	je     c001c981 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001c97c:	b8 01 00 00 00       	mov    eax,0x1
c001c981:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c985:	50                   	push   eax
c001c986:	50                   	push   eax
c001c987:	55                   	push   ebp
c001c988:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c98c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c990:	50                   	push   eax
c001c991:	e8 aa 3c fe ff       	call   c0000640 <strcpy>
c001c996:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c99d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c99f:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001c9a5:	5a                   	pop    edx
c001c9a6:	a1 58 ea 02 c0       	mov    eax,ds:0xc002ea58
c001c9ab:	59                   	pop    ecx
c001c9ac:	68 09 53 02 c0       	push   0xc0025309
c001c9b1:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c9b7:	e8 a0 5d ff ff       	call   c001275c <VgaText::puts(char const*)>
c001c9bc:	83 c4 10             	add    esp,0x10
c001c9bf:	31 c0                	xor    eax,eax
c001c9c1:	eb 05                	jmp    c001c9c8 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001c9c3:	b8 04 00 00 00       	mov    eax,0x4
c001c9c8:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c9ce:	5b                   	pop    ebx
c001c9cf:	5e                   	pop    esi
c001c9d0:	5f                   	pop    edi
c001c9d1:	5d                   	pop    ebp
c001c9d2:	c3                   	ret    

c001c9d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c9d3:	57                   	push   edi
c001c9d4:	56                   	push   esi
c001c9d5:	53                   	push   ebx
c001c9d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c9da:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c9de:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c9e2:	39 35 24 ec 02 c0    	cmp    DWORD PTR ds:0xc002ec24,esi
c001c9e8:	0f be cb             	movsx  ecx,bl
c001c9eb:	75 0b                	jne    c001c9f8 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001c9ed:	0f be 05 a4 65 02 c0 	movsx  eax,BYTE PTR ds:0xc00265a4
c001c9f4:	39 c8                	cmp    eax,ecx
c001c9f6:	74 47                	je     c001ca3f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001c9f8:	83 ec 0c             	sub    esp,0xc
c001c9fb:	31 d2                	xor    edx,edx
c001c9fd:	68 40 ec 02 c0       	push   0xc002ec40
c001ca02:	6a 01                	push   0x1
c001ca04:	52                   	push   edx
c001ca05:	56                   	push   esi
c001ca06:	ff 34 8d dc b9 02 c0 	push   DWORD PTR [ecx*4-0x3ffd4624]
c001ca0d:	e8 3e e0 fe ff       	call   c000aa50 <LogicalDisk::read(unsigned long long, int, void*)>
c001ca12:	83 c4 20             	add    esp,0x20
c001ca15:	85 c0                	test   eax,eax
c001ca17:	75 0e                	jne    c001ca27 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001ca19:	89 35 24 ec 02 c0    	mov    DWORD PTR ds:0xc002ec24,esi
c001ca1f:	88 1d a4 65 02 c0    	mov    BYTE PTR ds:0xc00265a4,bl
c001ca25:	eb 18                	jmp    c001ca3f <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001ca27:	50                   	push   eax
c001ca28:	68 00 08 00 00       	push   0x800
c001ca2d:	6a 00                	push   0x0
c001ca2f:	57                   	push   edi
c001ca30:	e8 bb 3a fe ff       	call   c00004f0 <memset>
c001ca35:	83 c4 10             	add    esp,0x10
c001ca38:	b8 01 00 00 00       	mov    eax,0x1
c001ca3d:	eb 0e                	jmp    c001ca4d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001ca3f:	be 40 ec 02 c0       	mov    esi,0xc002ec40
c001ca44:	b9 00 08 00 00       	mov    ecx,0x800
c001ca49:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ca4b:	31 c0                	xor    eax,eax
c001ca4d:	5b                   	pop    ebx
c001ca4e:	5e                   	pop    esi
c001ca4f:	5f                   	pop    edi
c001ca50:	c3                   	ret    
c001ca51:	90                   	nop

c001ca52 <ISO9660::tryMount(LogicalDisk*, int)>:
c001ca52:	53                   	push   ebx
c001ca53:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001ca59:	c7 05 24 ec 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002ec24,0xdeadbeef
c001ca63:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001ca6a:	8d 58 41             	lea    ebx,[eax+0x41]
c001ca6d:	0f be db             	movsx  ebx,bl
c001ca70:	53                   	push   ebx
c001ca71:	8d 44 24 08          	lea    eax,[esp+0x8]
c001ca75:	50                   	push   eax
c001ca76:	6a 10                	push   0x10
c001ca78:	e8 56 ff ff ff       	call   c001c9d3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001ca7d:	83 c4 10             	add    esp,0x10
c001ca80:	31 d2                	xor    edx,edx
c001ca82:	85 c0                	test   eax,eax
c001ca84:	75 33                	jne    c001cab9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ca86:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001ca8b:	75 2c                	jne    c001cab9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ca8d:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001ca92:	75 25                	jne    c001cab9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ca94:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001ca99:	75 1e                	jne    c001cab9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001ca9b:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001caa0:	75 17                	jne    c001cab9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001caa2:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001caa7:	75 10                	jne    c001cab9 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001caa9:	83 ec 0c             	sub    esp,0xc
c001caac:	53                   	push   ebx
c001caad:	e8 7c a1 fe ff       	call   c0006c2e <init_percd>
c001cab2:	83 c4 10             	add    esp,0x10
c001cab5:	40                   	inc    eax
c001cab6:	0f 95 c2             	setne  dl
c001cab9:	88 d0                	mov    al,dl
c001cabb:	81 c4 08 08 00 00    	add    esp,0x808
c001cac1:	5b                   	pop    ebx
c001cac2:	c3                   	ret    
c001cac3:	90                   	nop

c001cac4 <ISO9660::ISO9660()>:
c001cac4:	83 ec 0c             	sub    esp,0xc
c001cac7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cacb:	83 ec 0c             	sub    esp,0xc
c001cace:	50                   	push   eax
c001cacf:	e8 9c b2 fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001cad4:	83 c4 10             	add    esp,0x10
c001cad7:	ba 24 53 02 c0       	mov    edx,0xc0025324
c001cadc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cae0:	89 10                	mov    DWORD PTR [eax],edx
c001cae2:	e8 59 a2 fe ff       	call   c0006d40 <fs_iso9660_init>
c001cae7:	90                   	nop
c001cae8:	83 c4 0c             	add    esp,0xc
c001caeb:	c3                   	ret    

c001caec <SoundCard::beginPlayback()>:
c001caec:	c7 44 24 04 88 53 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025388
c001caf4:	e9 a9 34 ff ff       	jmp    c000ffa2 <KePanic(char const*)>
c001caf9:	90                   	nop

c001cafa <SoundCard::stopPlayback()>:
c001cafa:	c7 44 24 04 88 53 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025388
c001cb02:	e9 9b 34 ff ff       	jmp    c000ffa2 <KePanic(char const*)>
c001cb07:	90                   	nop

c001cb08 <SoundCard::SoundCard(char const*)>:
c001cb08:	83 ec 1c             	sub    esp,0x1c
c001cb0b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb0f:	83 ec 08             	sub    esp,0x8
c001cb12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb16:	50                   	push   eax
c001cb17:	e8 40 d0 fe ff       	call   c0009b5c <Device::Device(char const*)>
c001cb1c:	83 c4 10             	add    esp,0x10
c001cb1f:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c001cb24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb28:	89 10                	mov    DWORD PTR [eax],edx
c001cb2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb2e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cb35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb39:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001cb43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb47:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001cb51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb55:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001cb5f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb63:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001cb6d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001cb75:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001cb7a:	7f 1a                	jg     c001cb96 <SoundCard::SoundCard(char const*)+0x8e>
c001cb7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb80:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cb84:	83 c2 54             	add    edx,0x54
c001cb87:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001cb8f:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001cb94:	eb df                	jmp    c001cb75 <SoundCard::SoundCard(char const*)+0x6d>
c001cb96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cb9a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001cba1:	90                   	nop
c001cba2:	83 c4 1c             	add    esp,0x1c
c001cba5:	c3                   	ret    

c001cba6 <SoundCard::~SoundCard()>:
c001cba6:	83 ec 0c             	sub    esp,0xc
c001cba9:	ba d4 53 02 c0       	mov    edx,0xc00253d4
c001cbae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb2:	89 10                	mov    DWORD PTR [eax],edx
c001cbb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cbb8:	83 ec 0c             	sub    esp,0xc
c001cbbb:	50                   	push   eax
c001cbbc:	e8 3b cd fe ff       	call   c00098fc <Device::~Device()>
c001cbc1:	83 c4 10             	add    esp,0x10
c001cbc4:	90                   	nop
c001cbc5:	83 c4 0c             	add    esp,0xc
c001cbc8:	c3                   	ret    
c001cbc9:	90                   	nop

c001cbca <SoundCard::~SoundCard()>:
c001cbca:	83 ec 0c             	sub    esp,0xc
c001cbcd:	83 ec 0c             	sub    esp,0xc
c001cbd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbd4:	e8 cd ff ff ff       	call   c001cba6 <SoundCard::~SoundCard()>
c001cbd9:	83 c4 10             	add    esp,0x10
c001cbdc:	83 ec 08             	sub    esp,0x8
c001cbdf:	68 e8 01 00 00       	push   0x1e8
c001cbe4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cbe8:	e8 f6 06 ff ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c001cbed:	83 c4 10             	add    esp,0x10
c001cbf0:	83 c4 0c             	add    esp,0xc
c001cbf3:	c3                   	ret    

c001cbf4 <SoundCard::configureRates(int, int, int)>:
c001cbf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cbf8:	31 c0                	xor    eax,eax
c001cbfa:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001cc01:	75 20                	jne    c001cc23 <SoundCard::configureRates(int, int, int)+0x2f>
c001cc03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cc07:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001cc0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cc11:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001cc17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cc1b:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001cc21:	b0 01                	mov    al,0x1
c001cc23:	c3                   	ret    

c001cc24 <SoundCard::getSamples16(int, short*)>:
c001cc24:	55                   	push   ebp
c001cc25:	57                   	push   edi
c001cc26:	31 ff                	xor    edi,edi
c001cc28:	56                   	push   esi
c001cc29:	53                   	push   ebx
c001cc2a:	31 db                	xor    ebx,ebx
c001cc2c:	83 ec 10             	sub    esp,0x10
c001cc2f:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001cc33:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cc37:	8d 04 36             	lea    eax,[esi+esi*1]
c001cc3a:	50                   	push   eax
c001cc3b:	6a 00                	push   0x0
c001cc3d:	55                   	push   ebp
c001cc3e:	e8 ad 38 fe ff       	call   c00004f0 <memset>
c001cc43:	83 c4 10             	add    esp,0x10
c001cc46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cc4a:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001cc51:	85 c0                	test   eax,eax
c001cc53:	74 1b                	je     c001cc70 <SoundCard::getSamples16(int, short*)+0x4c>
c001cc55:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001cc59:	75 15                	jne    c001cc70 <SoundCard::getSamples16(int, short*)+0x4c>
c001cc5b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cc5f:	55                   	push   ebp
c001cc60:	56                   	push   esi
c001cc61:	50                   	push   eax
c001cc62:	e8 8d 03 00 00       	call   c001cff4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001cc67:	83 c4 10             	add    esp,0x10
c001cc6a:	39 c7                	cmp    edi,eax
c001cc6c:	7d 02                	jge    c001cc70 <SoundCard::getSamples16(int, short*)+0x4c>
c001cc6e:	89 c7                	mov    edi,eax
c001cc70:	43                   	inc    ebx
c001cc71:	83 fb 20             	cmp    ebx,0x20
c001cc74:	75 d0                	jne    c001cc46 <SoundCard::getSamples16(int, short*)+0x22>
c001cc76:	83 c4 0c             	add    esp,0xc
c001cc79:	89 f8                	mov    eax,edi
c001cc7b:	5b                   	pop    ebx
c001cc7c:	5e                   	pop    esi
c001cc7d:	5f                   	pop    edi
c001cc7e:	5d                   	pop    ebp
c001cc7f:	c3                   	ret    

c001cc80 <SoundCard::getSamples32(int, int*)>:
c001cc80:	55                   	push   ebp
c001cc81:	57                   	push   edi
c001cc82:	31 ff                	xor    edi,edi
c001cc84:	56                   	push   esi
c001cc85:	31 f6                	xor    esi,esi
c001cc87:	53                   	push   ebx
c001cc88:	83 ec 10             	sub    esp,0x10
c001cc8b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cc8f:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001cc93:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001cc97:	c1 e0 02             	shl    eax,0x2
c001cc9a:	50                   	push   eax
c001cc9b:	6a 00                	push   0x0
c001cc9d:	55                   	push   ebp
c001cc9e:	e8 4d 38 fe ff       	call   c00004f0 <memset>
c001cca3:	83 c4 10             	add    esp,0x10
c001cca6:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001ccad:	85 c0                	test   eax,eax
c001ccaf:	74 1b                	je     c001cccc <SoundCard::getSamples32(int, int*)+0x4c>
c001ccb1:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001ccb5:	75 15                	jne    c001cccc <SoundCard::getSamples32(int, int*)+0x4c>
c001ccb7:	53                   	push   ebx
c001ccb8:	55                   	push   ebp
c001ccb9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ccbd:	50                   	push   eax
c001ccbe:	e8 fd 03 00 00       	call   c001d0c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001ccc3:	83 c4 10             	add    esp,0x10
c001ccc6:	39 c6                	cmp    esi,eax
c001ccc8:	7d 02                	jge    c001cccc <SoundCard::getSamples32(int, int*)+0x4c>
c001ccca:	89 c6                	mov    esi,eax
c001cccc:	47                   	inc    edi
c001cccd:	83 ff 20             	cmp    edi,0x20
c001ccd0:	75 d4                	jne    c001cca6 <SoundCard::getSamples32(int, int*)+0x26>
c001ccd2:	85 f6                	test   esi,esi
c001ccd4:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001ccdb:	75 0f                	jne    c001ccec <SoundCard::getSamples32(int, int*)+0x6c>
c001ccdd:	85 c0                	test   eax,eax
c001ccdf:	74 1b                	je     c001ccfc <SoundCard::getSamples32(int, int*)+0x7c>
c001cce1:	83 ec 0c             	sub    esp,0xc
c001cce4:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cce6:	53                   	push   ebx
c001cce7:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001ccea:	eb 0d                	jmp    c001ccf9 <SoundCard::getSamples32(int, int*)+0x79>
c001ccec:	85 c0                	test   eax,eax
c001ccee:	75 0c                	jne    c001ccfc <SoundCard::getSamples32(int, int*)+0x7c>
c001ccf0:	83 ec 0c             	sub    esp,0xc
c001ccf3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ccf5:	53                   	push   ebx
c001ccf6:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001ccf9:	83 c4 10             	add    esp,0x10
c001ccfc:	83 c4 0c             	add    esp,0xc
c001ccff:	89 f0                	mov    eax,esi
c001cd01:	5b                   	pop    ebx
c001cd02:	5e                   	pop    esi
c001cd03:	5f                   	pop    edi
c001cd04:	5d                   	pop    ebp
c001cd05:	c3                   	ret    

c001cd06 <SoundCard::addChannel(SoundPort*)>:
c001cd06:	83 ec 0c             	sub    esp,0xc
c001cd09:	31 c0                	xor    eax,eax
c001cd0b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001cd0f:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001cd17:	74 1b                	je     c001cd34 <SoundCard::addChannel(SoundPort*)+0x2e>
c001cd19:	40                   	inc    eax
c001cd1a:	83 f8 20             	cmp    eax,0x20
c001cd1d:	75 f0                	jne    c001cd0f <SoundCard::addChannel(SoundPort*)+0x9>
c001cd1f:	83 ec 0c             	sub    esp,0xc
c001cd22:	68 ad 53 02 c0       	push   0xc00253ad
c001cd27:	e8 76 32 ff ff       	call   c000ffa2 <KePanic(char const*)>
c001cd2c:	83 c4 10             	add    esp,0x10
c001cd2f:	83 c8 ff             	or     eax,0xffffffff
c001cd32:	eb 0b                	jmp    c001cd3f <SoundCard::addChannel(SoundPort*)+0x39>
c001cd34:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001cd38:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001cd3f:	83 c4 0c             	add    esp,0xc
c001cd42:	c3                   	ret    
c001cd43:	90                   	nop

c001cd44 <SoundCard::removeChannel(int)>:
c001cd44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cd48:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001cd4c:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001cd57:	c3                   	ret    

c001cd58 <SoundPort::SoundPort(int, int, int, int)>:
c001cd58:	83 ec 0c             	sub    esp,0xc
c001cd5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd5f:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001cd66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd6a:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001cd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cd76:	89 10                	mov    DWORD PTR [eax],edx
c001cd78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd7c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cd80:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001cd83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd87:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cd8b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001cd8e:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001cd93:	75 13                	jne    c001cda8 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001cd95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd99:	8b 00                	mov    eax,DWORD PTR [eax]
c001cd9b:	05 a0 0f 00 00       	add    eax,0xfa0
c001cda0:	01 c0                	add    eax,eax
c001cda2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cda6:	66 90                	xchg   ax,ax
c001cda8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdac:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001cdb0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001cdb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdb7:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001cdbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdc2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001cdc5:	c1 e0 02             	shl    eax,0x2
c001cdc8:	83 ec 0c             	sub    esp,0xc
c001cdcb:	50                   	push   eax
c001cdcc:	e8 8a 2e ff ff       	call   c000fc5b <malloc>
c001cdd1:	83 c4 10             	add    esp,0x10
c001cdd4:	89 c2                	mov    edx,eax
c001cdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdda:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001cddd:	90                   	nop
c001cdde:	83 c4 0c             	add    esp,0xc
c001cde1:	c3                   	ret    
c001cde2:	66 90                	xchg   ax,ax

c001cde4 <SoundPort::~SoundPort()>:
c001cde4:	83 ec 0c             	sub    esp,0xc
c001cde7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdeb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cdee:	85 c0                	test   eax,eax
c001cdf0:	74 1e                	je     c001ce10 <SoundPort::~SoundPort()+0x2c>
c001cdf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cdf6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001cdf9:	83 ec 0c             	sub    esp,0xc
c001cdfc:	50                   	push   eax
c001cdfd:	e8 69 2e ff ff       	call   c000fc6b <free>
c001ce02:	83 c4 10             	add    esp,0x10
c001ce05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ce09:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001ce10:	90                   	nop
c001ce11:	83 c4 0c             	add    esp,0xc
c001ce14:	c3                   	ret    
c001ce15:	90                   	nop
c001ce16:	66 90                	xchg   ax,ax

c001ce18 <SoundPort::unpause()>:
c001ce18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce1c:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001ce20:	c3                   	ret    
c001ce21:	90                   	nop
c001ce22:	66 90                	xchg   ax,ax

c001ce24 <SoundPort::pause()>:
c001ce24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce28:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001ce2c:	c3                   	ret    
c001ce2d:	90                   	nop
c001ce2e:	66 90                	xchg   ax,ax

c001ce30 <SoundPort::getBufferUsed()>:
c001ce30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce34:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001ce37:	c3                   	ret    

c001ce38 <SoundPort::getBufferSize()>:
c001ce38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce3c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001ce3f:	c3                   	ret    

c001ce40 <SoundPort::buffer8(signed char*, int)>:
c001ce40:	55                   	push   ebp
c001ce41:	57                   	push   edi
c001ce42:	56                   	push   esi
c001ce43:	53                   	push   ebx
c001ce44:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001ce48:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001ce4c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001ce4f:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001ce52:	74 70                	je     c001cec4 <SoundPort::buffer8(signed char*, int)+0x84>
c001ce54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ce58:	85 c9                	test   ecx,ecx
c001ce5a:	7e 68                	jle    c001cec4 <SoundPort::buffer8(signed char*, int)+0x84>
c001ce5c:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001ce60:	8d 48 01             	lea    ecx,[eax+0x1]
c001ce63:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001ce66:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001ce69:	89 f1                	mov    ecx,esi
c001ce6b:	c1 e1 18             	shl    ecx,0x18
c001ce6e:	29 f1                	sub    ecx,esi
c001ce70:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001ce73:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ce76:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ce79:	74 51                	je     c001cecc <SoundPort::buffer8(signed char*, int)+0x8c>
c001ce7b:	31 ff                	xor    edi,edi
c001ce7d:	eb 25                	jmp    c001cea4 <SoundPort::buffer8(signed char*, int)+0x64>
c001ce7f:	90                   	nop
c001ce80:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001ce85:	8d 59 01             	lea    ebx,[ecx+0x1]
c001ce88:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001ce8b:	89 f3                	mov    ebx,esi
c001ce8d:	c1 e3 18             	shl    ebx,0x18
c001ce90:	29 f3                	sub    ebx,esi
c001ce92:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001ce95:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001ce98:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001ce9b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001ce9e:	74 1c                	je     c001cebc <SoundPort::buffer8(signed char*, int)+0x7c>
c001cea0:	89 c7                	mov    edi,eax
c001cea2:	66 90                	xchg   ax,ax
c001cea4:	8d 47 01             	lea    eax,[edi+0x1]
c001cea7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001ceab:	75 d3                	jne    c001ce80 <SoundPort::buffer8(signed char*, int)+0x40>
c001cead:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ceb1:	8d 76 00             	lea    esi,[esi+0x0]
c001ceb4:	5b                   	pop    ebx
c001ceb5:	5e                   	pop    esi
c001ceb6:	5f                   	pop    edi
c001ceb7:	5d                   	pop    ebp
c001ceb8:	c3                   	ret    
c001ceb9:	8d 76 00             	lea    esi,[esi+0x0]
c001cebc:	5b                   	pop    ebx
c001cebd:	8d 47 02             	lea    eax,[edi+0x2]
c001cec0:	5e                   	pop    esi
c001cec1:	5f                   	pop    edi
c001cec2:	5d                   	pop    ebp
c001cec3:	c3                   	ret    
c001cec4:	5b                   	pop    ebx
c001cec5:	31 c0                	xor    eax,eax
c001cec7:	5e                   	pop    esi
c001cec8:	5f                   	pop    edi
c001cec9:	5d                   	pop    ebp
c001ceca:	c3                   	ret    
c001cecb:	90                   	nop
c001cecc:	b8 01 00 00 00       	mov    eax,0x1
c001ced1:	eb e1                	jmp    c001ceb4 <SoundPort::buffer8(signed char*, int)+0x74>
c001ced3:	90                   	nop

c001ced4 <SoundPort::buffer16(short*, int)>:
c001ced4:	55                   	push   ebp
c001ced5:	57                   	push   edi
c001ced6:	56                   	push   esi
c001ced7:	53                   	push   ebx
c001ced8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cedc:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001cee0:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001cee3:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001cee6:	74 70                	je     c001cf58 <SoundPort::buffer16(short*, int)+0x84>
c001cee8:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ceec:	85 c9                	test   ecx,ecx
c001ceee:	7e 68                	jle    c001cf58 <SoundPort::buffer16(short*, int)+0x84>
c001cef0:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001cef4:	8d 48 01             	lea    ecx,[eax+0x1]
c001cef7:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cefa:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001cefd:	89 f1                	mov    ecx,esi
c001ceff:	c1 e1 10             	shl    ecx,0x10
c001cf02:	29 f1                	sub    ecx,esi
c001cf04:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001cf07:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cf0a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cf0d:	74 51                	je     c001cf60 <SoundPort::buffer16(short*, int)+0x8c>
c001cf0f:	31 ff                	xor    edi,edi
c001cf11:	eb 25                	jmp    c001cf38 <SoundPort::buffer16(short*, int)+0x64>
c001cf13:	90                   	nop
c001cf14:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001cf19:	8d 59 01             	lea    ebx,[ecx+0x1]
c001cf1c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001cf1f:	89 f3                	mov    ebx,esi
c001cf21:	c1 e3 10             	shl    ebx,0x10
c001cf24:	29 f3                	sub    ebx,esi
c001cf26:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001cf29:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001cf2c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cf2f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cf32:	74 1c                	je     c001cf50 <SoundPort::buffer16(short*, int)+0x7c>
c001cf34:	89 c7                	mov    edi,eax
c001cf36:	66 90                	xchg   ax,ax
c001cf38:	8d 47 01             	lea    eax,[edi+0x1]
c001cf3b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001cf3f:	75 d3                	jne    c001cf14 <SoundPort::buffer16(short*, int)+0x40>
c001cf41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf45:	8d 76 00             	lea    esi,[esi+0x0]
c001cf48:	5b                   	pop    ebx
c001cf49:	5e                   	pop    esi
c001cf4a:	5f                   	pop    edi
c001cf4b:	5d                   	pop    ebp
c001cf4c:	c3                   	ret    
c001cf4d:	8d 76 00             	lea    esi,[esi+0x0]
c001cf50:	5b                   	pop    ebx
c001cf51:	8d 47 02             	lea    eax,[edi+0x2]
c001cf54:	5e                   	pop    esi
c001cf55:	5f                   	pop    edi
c001cf56:	5d                   	pop    ebp
c001cf57:	c3                   	ret    
c001cf58:	5b                   	pop    ebx
c001cf59:	31 c0                	xor    eax,eax
c001cf5b:	5e                   	pop    esi
c001cf5c:	5f                   	pop    edi
c001cf5d:	5d                   	pop    ebp
c001cf5e:	c3                   	ret    
c001cf5f:	90                   	nop
c001cf60:	b8 01 00 00 00       	mov    eax,0x1
c001cf65:	eb e1                	jmp    c001cf48 <SoundPort::buffer16(short*, int)+0x74>
c001cf67:	90                   	nop

c001cf68 <SoundPort::buffer32(int*, int)>:
c001cf68:	55                   	push   ebp
c001cf69:	57                   	push   edi
c001cf6a:	56                   	push   esi
c001cf6b:	53                   	push   ebx
c001cf6c:	83 ec 04             	sub    esp,0x4
c001cf6f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001cf73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cf77:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cf7a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cf7e:	89 04 24             	mov    DWORD PTR [esp],eax
c001cf81:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cf84:	74 5a                	je     c001cfe0 <SoundPort::buffer32(int*, int)+0x78>
c001cf86:	85 c0                	test   eax,eax
c001cf88:	7e 56                	jle    c001cfe0 <SoundPort::buffer32(int*, int)+0x78>
c001cf8a:	8d 71 01             	lea    esi,[ecx+0x1]
c001cf8d:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001cf90:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001cf93:	8b 37                	mov    esi,DWORD PTR [edi]
c001cf95:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001cf98:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cf9b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cf9e:	74 4c                	je     c001cfec <SoundPort::buffer32(int*, int)+0x84>
c001cfa0:	31 f6                	xor    esi,esi
c001cfa2:	eb 1c                	jmp    c001cfc0 <SoundPort::buffer32(int*, int)+0x58>
c001cfa4:	8d 69 01             	lea    ebp,[ecx+0x1]
c001cfa7:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001cfaa:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001cfad:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001cfb0:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001cfb4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001cfb7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001cfba:	74 18                	je     c001cfd4 <SoundPort::buffer32(int*, int)+0x6c>
c001cfbc:	89 de                	mov    esi,ebx
c001cfbe:	66 90                	xchg   ax,ax
c001cfc0:	8d 5e 01             	lea    ebx,[esi+0x1]
c001cfc3:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001cfc6:	75 dc                	jne    c001cfa4 <SoundPort::buffer32(int*, int)+0x3c>
c001cfc8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cfcb:	90                   	nop
c001cfcc:	83 c4 04             	add    esp,0x4
c001cfcf:	5b                   	pop    ebx
c001cfd0:	5e                   	pop    esi
c001cfd1:	5f                   	pop    edi
c001cfd2:	5d                   	pop    ebp
c001cfd3:	c3                   	ret    
c001cfd4:	83 c4 04             	add    esp,0x4
c001cfd7:	8d 46 02             	lea    eax,[esi+0x2]
c001cfda:	5b                   	pop    ebx
c001cfdb:	5e                   	pop    esi
c001cfdc:	5f                   	pop    edi
c001cfdd:	5d                   	pop    ebp
c001cfde:	c3                   	ret    
c001cfdf:	90                   	nop
c001cfe0:	83 c4 04             	add    esp,0x4
c001cfe3:	31 c0                	xor    eax,eax
c001cfe5:	5b                   	pop    ebx
c001cfe6:	5e                   	pop    esi
c001cfe7:	5f                   	pop    edi
c001cfe8:	5d                   	pop    ebp
c001cfe9:	c3                   	ret    
c001cfea:	66 90                	xchg   ax,ax
c001cfec:	b8 01 00 00 00       	mov    eax,0x1
c001cff1:	eb d9                	jmp    c001cfcc <SoundPort::buffer32(int*, int)+0x64>
c001cff3:	90                   	nop

c001cff4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001cff4:	57                   	push   edi
c001cff5:	56                   	push   esi
c001cff6:	53                   	push   ebx
c001cff7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cffb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001cfff:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001d005:	39 03                	cmp    DWORD PTR [ebx],eax
c001d007:	74 13                	je     c001d01c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001d009:	83 ec 0c             	sub    esp,0xc
c001d00c:	68 00 54 02 c0       	push   0xc0025400
c001d011:	e8 8c 2f ff ff       	call   c000ffa2 <KePanic(char const*)>
c001d016:	83 c4 10             	add    esp,0x10
c001d019:	8d 76 00             	lea    esi,[esi+0x0]
c001d01c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001d022:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001d025:	74 11                	je     c001d038 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001d027:	83 ec 0c             	sub    esp,0xc
c001d02a:	68 3f 54 02 c0       	push   0xc002543f
c001d02f:	e8 6e 2f ff ff       	call   c000ffa2 <KePanic(char const*)>
c001d034:	83 c4 10             	add    esp,0x10
c001d037:	90                   	nop
c001d038:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001d03e:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001d041:	74 11                	je     c001d054 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001d043:	83 ec 0c             	sub    esp,0xc
c001d046:	68 3f 54 02 c0       	push   0xc002543f
c001d04b:	e8 52 2f ff ff       	call   c000ffa2 <KePanic(char const*)>
c001d050:	83 c4 10             	add    esp,0x10
c001d053:	90                   	nop
c001d054:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001d057:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001d05b:	7e 07                	jle    c001d064 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001d05d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d061:	8d 76 00             	lea    esi,[esi+0x0]
c001d064:	85 f6                	test   esi,esi
c001d066:	7e 2c                	jle    c001d094 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001d068:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d06c:	8d 3c 36             	lea    edi,[esi+esi*1]
c001d06f:	31 c9                	xor    ecx,ecx
c001d071:	01 d7                	add    edi,edx
c001d073:	90                   	nop
c001d074:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001d077:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001d07a:	85 c0                	test   eax,eax
c001d07c:	79 06                	jns    c001d084 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001d07e:	05 ff 7f 00 00       	add    eax,0x7fff
c001d083:	90                   	nop
c001d084:	c1 f8 0f             	sar    eax,0xf
c001d087:	83 c1 04             	add    ecx,0x4
c001d08a:	66 01 02             	add    WORD PTR [edx],ax
c001d08d:	83 c2 02             	add    edx,0x2
c001d090:	39 d7                	cmp    edi,edx
c001d092:	75 e0                	jne    c001d074 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001d094:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001d097:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d09a:	83 ec 04             	sub    esp,0x4
c001d09d:	29 f0                	sub    eax,esi
c001d09f:	c1 e0 02             	shl    eax,0x2
c001d0a2:	50                   	push   eax
c001d0a3:	8d 04 b2             	lea    eax,[edx+esi*4]
c001d0a6:	50                   	push   eax
c001d0a7:	52                   	push   edx
c001d0a8:	e8 23 33 fe ff       	call   c00003d0 <memmove>
c001d0ad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d0b0:	83 c4 10             	add    esp,0x10
c001d0b3:	29 f0                	sub    eax,esi
c001d0b5:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001d0b8:	89 f0                	mov    eax,esi
c001d0ba:	5b                   	pop    ebx
c001d0bb:	5e                   	pop    esi
c001d0bc:	5f                   	pop    edi
c001d0bd:	c3                   	ret    
c001d0be:	66 90                	xchg   ax,ax

c001d0c0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001d0c0:	57                   	push   edi
c001d0c1:	56                   	push   esi
c001d0c2:	53                   	push   ebx
c001d0c3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d0c7:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d0cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001d0cf:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001d0d5:	39 06                	cmp    DWORD PTR [esi],eax
c001d0d7:	74 13                	je     c001d0ec <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001d0d9:	83 ec 0c             	sub    esp,0xc
c001d0dc:	68 20 54 02 c0       	push   0xc0025420
c001d0e1:	e8 bc 2e ff ff       	call   c000ffa2 <KePanic(char const*)>
c001d0e6:	83 c4 10             	add    esp,0x10
c001d0e9:	8d 76 00             	lea    esi,[esi+0x0]
c001d0ec:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001d0f2:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001d0f5:	74 11                	je     c001d108 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001d0f7:	83 ec 0c             	sub    esp,0xc
c001d0fa:	68 5b 54 02 c0       	push   0xc002545b
c001d0ff:	e8 9e 2e ff ff       	call   c000ffa2 <KePanic(char const*)>
c001d104:	83 c4 10             	add    esp,0x10
c001d107:	90                   	nop
c001d108:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001d10e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001d111:	74 11                	je     c001d124 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001d113:	83 ec 0c             	sub    esp,0xc
c001d116:	68 5b 54 02 c0       	push   0xc002545b
c001d11b:	e8 82 2e ff ff       	call   c000ffa2 <KePanic(char const*)>
c001d120:	83 c4 10             	add    esp,0x10
c001d123:	90                   	nop
c001d124:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001d127:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001d12b:	7e 07                	jle    c001d134 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001d12d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d131:	8d 76 00             	lea    esi,[esi+0x0]
c001d134:	85 ff                	test   edi,edi
c001d136:	7e 1c                	jle    c001d154 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001d138:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001d13f:	31 c0                	xor    eax,eax
c001d141:	8d 76 00             	lea    esi,[esi+0x0]
c001d144:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d147:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001d14a:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001d14d:	83 c0 04             	add    eax,0x4
c001d150:	39 c1                	cmp    ecx,eax
c001d152:	75 f0                	jne    c001d144 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001d154:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001d157:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d15a:	83 ec 04             	sub    esp,0x4
c001d15d:	29 f8                	sub    eax,edi
c001d15f:	c1 e0 02             	shl    eax,0x2
c001d162:	50                   	push   eax
c001d163:	8d 04 ba             	lea    eax,[edx+edi*4]
c001d166:	50                   	push   eax
c001d167:	52                   	push   edx
c001d168:	e8 63 32 fe ff       	call   c00003d0 <memmove>
c001d16d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d170:	83 c4 10             	add    esp,0x10
c001d173:	29 f8                	sub    eax,edi
c001d175:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001d178:	89 f8                	mov    eax,edi
c001d17a:	5b                   	pop    ebx
c001d17b:	5e                   	pop    esi
c001d17c:	5f                   	pop    edi
c001d17d:	c3                   	ret    

c001d17e <PCI::open(int, int, void*)>:
c001d17e:	83 ec 18             	sub    esp,0x18
c001d181:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d185:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d189:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001d18f:	8b 10                	mov    edx,DWORD PTR [eax]
c001d191:	50                   	push   eax
c001d192:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001d195:	31 c0                	xor    eax,eax
c001d197:	83 c4 1c             	add    esp,0x1c
c001d19a:	c3                   	ret    
c001d19b:	90                   	nop

c001d19c <PCI::close(int, int, void*)>:
c001d19c:	31 c0                	xor    eax,eax
c001d19e:	c3                   	ret    
c001d19f:	90                   	nop

c001d1a0 <PCI::PCI()>:
c001d1a0:	83 ec 0c             	sub    esp,0xc
c001d1a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1a7:	83 ec 08             	sub    esp,0x8
c001d1aa:	68 77 54 02 c0       	push   0xc0025477
c001d1af:	50                   	push   eax
c001d1b0:	e8 57 b7 fe ff       	call   c000890c <Bus::Bus(char const*)>
c001d1b5:	83 c4 10             	add    esp,0x10
c001d1b8:	ba 84 55 02 c0       	mov    edx,0xc0025584
c001d1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1c1:	89 10                	mov    DWORD PTR [eax],edx
c001d1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1c7:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001d1d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1d5:	a3 40 f4 02 c0       	mov    ds:0xc002f440,eax
c001d1da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1de:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d1e4:	0f b6 d0             	movzx  edx,al
c001d1e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1eb:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001d1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d1fc:	0f b6 d0             	movzx  edx,al
c001d1ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d203:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001d208:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d20c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001d212:	8d 50 01             	lea    edx,[eax+0x1]
c001d215:	88 d1                	mov    cl,dl
c001d217:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001d21b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001d221:	0f b6 d0             	movzx  edx,al
c001d224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d228:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001d22c:	83 c9 c0             	or     ecx,0xffffffc0
c001d22f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001d233:	90                   	nop
c001d234:	83 c4 0c             	add    esp,0xc
c001d237:	c3                   	ret    

c001d238 <PCI::readBAR8(unsigned int, int)>:
c001d238:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d23c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d240:	f6 c2 01             	test   dl,0x1
c001d243:	74 07                	je     c001d24c <PCI::readBAR8(unsigned int, int)+0x14>
c001d245:	83 e2 fc             	and    edx,0xfffffffc
c001d248:	01 c2                	add    edx,eax
c001d24a:	ec                   	in     al,dx
c001d24b:	c3                   	ret    
c001d24c:	83 e2 f0             	and    edx,0xfffffff0
c001d24f:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001d252:	c3                   	ret    
c001d253:	90                   	nop

c001d254 <PCI::readBAR16(unsigned int, int)>:
c001d254:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d258:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d25c:	f6 c2 01             	test   dl,0x1
c001d25f:	74 08                	je     c001d269 <PCI::readBAR16(unsigned int, int)+0x15>
c001d261:	83 e2 fc             	and    edx,0xfffffffc
c001d264:	01 c2                	add    edx,eax
c001d266:	66 ed                	in     ax,dx
c001d268:	c3                   	ret    
c001d269:	83 e2 f0             	and    edx,0xfffffff0
c001d26c:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001d270:	c3                   	ret    
c001d271:	90                   	nop

c001d272 <PCI::readBAR32(unsigned int, int)>:
c001d272:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d276:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d27a:	f6 c2 01             	test   dl,0x1
c001d27d:	74 07                	je     c001d286 <PCI::readBAR32(unsigned int, int)+0x14>
c001d27f:	83 e2 fc             	and    edx,0xfffffffc
c001d282:	01 c2                	add    edx,eax
c001d284:	ed                   	in     eax,dx
c001d285:	c3                   	ret    
c001d286:	83 e2 f0             	and    edx,0xfffffff0
c001d289:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001d28c:	c3                   	ret    
c001d28d:	90                   	nop

c001d28e <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001d28e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d292:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d296:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d29a:	f6 c2 01             	test   dl,0x1
c001d29d:	74 07                	je     c001d2a6 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001d29f:	83 e2 fc             	and    edx,0xfffffffc
c001d2a2:	01 ca                	add    edx,ecx
c001d2a4:	ee                   	out    dx,al
c001d2a5:	c3                   	ret    
c001d2a6:	83 e2 f0             	and    edx,0xfffffff0
c001d2a9:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001d2ac:	c3                   	ret    
c001d2ad:	90                   	nop

c001d2ae <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001d2ae:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d2b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2ba:	f6 c2 01             	test   dl,0x1
c001d2bd:	74 08                	je     c001d2c7 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001d2bf:	83 e2 fc             	and    edx,0xfffffffc
c001d2c2:	01 ca                	add    edx,ecx
c001d2c4:	66 ef                	out    dx,ax
c001d2c6:	c3                   	ret    
c001d2c7:	83 e2 f0             	and    edx,0xfffffff0
c001d2ca:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001d2ce:	c3                   	ret    
c001d2cf:	90                   	nop

c001d2d0 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001d2d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001d2d4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d2d8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d2dc:	f6 c2 01             	test   dl,0x1
c001d2df:	74 07                	je     c001d2e8 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001d2e1:	83 e2 fc             	and    edx,0xfffffffc
c001d2e4:	01 ca                	add    edx,ecx
c001d2e6:	ef                   	out    dx,eax
c001d2e7:	c3                   	ret    
c001d2e8:	83 e2 f0             	and    edx,0xfffffff0
c001d2eb:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001d2ee:	c3                   	ret    
c001d2ef:	90                   	nop

c001d2f0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d2f0:	55                   	push   ebp
c001d2f1:	57                   	push   edi
c001d2f2:	56                   	push   esi
c001d2f3:	53                   	push   ebx
c001d2f4:	83 ec 0c             	sub    esp,0xc
c001d2f7:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001d2fc:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001d300:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001d304:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001d308:	83 fe 07             	cmp    esi,0x7
c001d30b:	76 10                	jbe    c001d31d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001d30d:	83 ec 0c             	sub    esp,0xc
c001d310:	68 7f 54 02 c0       	push   0xc002547f
c001d315:	e8 88 2c ff ff       	call   c000ffa2 <KePanic(char const*)>
c001d31a:	83 c4 10             	add    esp,0x10
c001d31d:	0f b6 db             	movzx  ebx,bl
c001d320:	83 fb 0f             	cmp    ebx,0xf
c001d323:	76 10                	jbe    c001d335 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001d325:	83 ec 0c             	sub    esp,0xc
c001d328:	68 af 54 02 c0       	push   0xc00254af
c001d32d:	e8 70 2c ff ff       	call   c000ffa2 <KePanic(char const*)>
c001d332:	83 c4 10             	add    esp,0x10
c001d335:	8d 04 36             	lea    eax,[esi+esi*1]
c001d338:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d33d:	83 c8 f0             	or     eax,0xfffffff0
c001d340:	ee                   	out    dx,al
c001d341:	ba fa 0c 00 00       	mov    edx,0xcfa
c001d346:	89 e8                	mov    eax,ebp
c001d348:	ee                   	out    dx,al
c001d349:	83 c4 0c             	add    esp,0xc
c001d34c:	89 d8                	mov    eax,ebx
c001d34e:	89 f9                	mov    ecx,edi
c001d350:	c1 e0 08             	shl    eax,0x8
c001d353:	0f b6 d9             	movzx  ebx,cl
c001d356:	83 e3 fc             	and    ebx,0xfffffffc
c001d359:	09 d8                	or     eax,ebx
c001d35b:	5b                   	pop    ebx
c001d35c:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001d361:	5e                   	pop    esi
c001d362:	5f                   	pop    edi
c001d363:	5d                   	pop    ebp
c001d364:	c3                   	ret    
c001d365:	90                   	nop

c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d366:	57                   	push   edi
c001d367:	56                   	push   esi
c001d368:	53                   	push   ebx
c001d369:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d36d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d371:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001d377:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001d37b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d37f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d383:	83 ff 01             	cmp    edi,0x1
c001d386:	75 3f                	jne    c001d3c7 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001d388:	89 de                	mov    esi,ebx
c001d38a:	0f b6 c0             	movzx  eax,al
c001d38d:	81 e6 fc 00 00 00    	and    esi,0xfc
c001d393:	c1 e0 10             	shl    eax,0x10
c001d396:	0f b6 c9             	movzx  ecx,cl
c001d399:	09 f0                	or     eax,esi
c001d39b:	c1 e1 08             	shl    ecx,0x8
c001d39e:	0f b6 d2             	movzx  edx,dl
c001d3a1:	09 c8                	or     eax,ecx
c001d3a3:	c1 e2 0b             	shl    edx,0xb
c001d3a6:	09 d0                	or     eax,edx
c001d3a8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d3ad:	0d 00 00 00 80       	or     eax,0x80000000
c001d3b2:	ef                   	out    dx,eax
c001d3b3:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d3b8:	ed                   	in     eax,dx
c001d3b9:	83 e3 02             	and    ebx,0x2
c001d3bc:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d3c3:	d3 e8                	shr    eax,cl
c001d3c5:	eb 44                	jmp    c001d40b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d3c7:	83 ff 02             	cmp    edi,0x2
c001d3ca:	75 2d                	jne    c001d3f9 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001d3cc:	83 ec 0c             	sub    esp,0xc
c001d3cf:	0f b6 c9             	movzx  ecx,cl
c001d3d2:	0f b6 d2             	movzx  edx,dl
c001d3d5:	0f b6 fb             	movzx  edi,bl
c001d3d8:	0f b6 c0             	movzx  eax,al
c001d3db:	57                   	push   edi
c001d3dc:	51                   	push   ecx
c001d3dd:	52                   	push   edx
c001d3de:	50                   	push   eax
c001d3df:	56                   	push   esi
c001d3e0:	e8 0b ff ff ff       	call   c001d2f0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d3e5:	89 c2                	mov    edx,eax
c001d3e7:	ed                   	in     eax,dx
c001d3e8:	83 e3 02             	and    ebx,0x2
c001d3eb:	83 c4 20             	add    esp,0x20
c001d3ee:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001d3f5:	d3 e8                	shr    eax,cl
c001d3f7:	eb 12                	jmp    c001d40b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001d3f9:	83 ec 0c             	sub    esp,0xc
c001d3fc:	68 df 54 02 c0       	push   0xc00254df
c001d401:	e8 9c 2b ff ff       	call   c000ffa2 <KePanic(char const*)>
c001d406:	83 c4 10             	add    esp,0x10
c001d409:	31 c0                	xor    eax,eax
c001d40b:	5b                   	pop    ebx
c001d40c:	5e                   	pop    esi
c001d40d:	5f                   	pop    edi
c001d40e:	c3                   	ret    
c001d40f:	90                   	nop

c001d410 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001d410:	83 ec 18             	sub    esp,0x18
c001d413:	6a 00                	push   0x0
c001d415:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d41a:	50                   	push   eax
c001d41b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d420:	50                   	push   eax
c001d421:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d426:	50                   	push   eax
c001d427:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d42b:	e8 36 ff ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d430:	83 c4 2c             	add    esp,0x2c
c001d433:	c3                   	ret    

c001d434 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001d434:	83 ec 18             	sub    esp,0x18
c001d437:	6a 0e                	push   0xe
c001d439:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d43e:	50                   	push   eax
c001d43f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d444:	50                   	push   eax
c001d445:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d44a:	50                   	push   eax
c001d44b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d44f:	e8 12 ff ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d454:	83 c4 2c             	add    esp,0x2c
c001d457:	0f b6 c0             	movzx  eax,al
c001d45a:	c3                   	ret    
c001d45b:	90                   	nop

c001d45c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001d45c:	55                   	push   ebp
c001d45d:	57                   	push   edi
c001d45e:	56                   	push   esi
c001d45f:	53                   	push   ebx
c001d460:	83 ec 18             	sub    esp,0x18
c001d463:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001d468:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001d46d:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001d472:	6a 0a                	push   0xa
c001d474:	56                   	push   esi
c001d475:	55                   	push   ebp
c001d476:	57                   	push   edi
c001d477:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d47b:	e8 e6 fe ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d480:	83 c4 14             	add    esp,0x14
c001d483:	89 c3                	mov    ebx,eax
c001d485:	6a 0a                	push   0xa
c001d487:	0f b6 db             	movzx  ebx,bl
c001d48a:	56                   	push   esi
c001d48b:	55                   	push   ebp
c001d48c:	57                   	push   edi
c001d48d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d491:	e8 d0 fe ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d496:	83 c4 2c             	add    esp,0x2c
c001d499:	25 00 ff 00 00       	and    eax,0xff00
c001d49e:	09 d8                	or     eax,ebx
c001d4a0:	5b                   	pop    ebx
c001d4a1:	5e                   	pop    esi
c001d4a2:	5f                   	pop    edi
c001d4a3:	5d                   	pop    ebp
c001d4a4:	c3                   	ret    
c001d4a5:	90                   	nop

c001d4a6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001d4a6:	83 ec 18             	sub    esp,0x18
c001d4a9:	6a 08                	push   0x8
c001d4ab:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4b0:	50                   	push   eax
c001d4b1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4b6:	50                   	push   eax
c001d4b7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4bc:	50                   	push   eax
c001d4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4c1:	e8 a0 fe ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4c6:	83 c4 2c             	add    esp,0x2c
c001d4c9:	0f b6 c4             	movzx  eax,ah
c001d4cc:	c3                   	ret    
c001d4cd:	90                   	nop

c001d4ce <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001d4ce:	83 ec 18             	sub    esp,0x18
c001d4d1:	6a 08                	push   0x8
c001d4d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4d8:	50                   	push   eax
c001d4d9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4de:	50                   	push   eax
c001d4df:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4e4:	50                   	push   eax
c001d4e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d4e9:	e8 78 fe ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d4ee:	83 c4 2c             	add    esp,0x2c
c001d4f1:	c3                   	ret    

c001d4f2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001d4f2:	83 ec 18             	sub    esp,0x18
c001d4f5:	6a 3c                	push   0x3c
c001d4f7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d4fc:	50                   	push   eax
c001d4fd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d502:	50                   	push   eax
c001d503:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d508:	50                   	push   eax
c001d509:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d50d:	e8 54 fe ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d512:	83 c4 2c             	add    esp,0x2c
c001d515:	c3                   	ret    

c001d516 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001d516:	83 ec 18             	sub    esp,0x18
c001d519:	6a 18                	push   0x18
c001d51b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d520:	50                   	push   eax
c001d521:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d526:	50                   	push   eax
c001d527:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001d52c:	50                   	push   eax
c001d52d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d531:	e8 30 fe ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d536:	83 c4 2c             	add    esp,0x2c
c001d539:	0f b6 c4             	movzx  eax,ah
c001d53c:	c3                   	ret    
c001d53d:	90                   	nop

c001d53e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001d53e:	55                   	push   ebp
c001d53f:	57                   	push   edi
c001d540:	56                   	push   esi
c001d541:	53                   	push   ebx
c001d542:	83 ec 28             	sub    esp,0x28
c001d545:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001d549:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001d54e:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001d553:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001d558:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001d55f:	8d 43 12             	lea    eax,[ebx+0x12]
c001d562:	83 c3 10             	add    ebx,0x10
c001d565:	0f b6 c0             	movzx  eax,al
c001d568:	0f b6 db             	movzx  ebx,bl
c001d56b:	50                   	push   eax
c001d56c:	51                   	push   ecx
c001d56d:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001d571:	57                   	push   edi
c001d572:	55                   	push   ebp
c001d573:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d577:	e8 ea fd ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d57c:	83 c4 14             	add    esp,0x14
c001d57f:	89 c6                	mov    esi,eax
c001d581:	53                   	push   ebx
c001d582:	c1 e6 10             	shl    esi,0x10
c001d585:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d589:	51                   	push   ecx
c001d58a:	57                   	push   edi
c001d58b:	55                   	push   ebp
c001d58c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d590:	e8 d1 fd ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d595:	83 c4 3c             	add    esp,0x3c
c001d598:	0f b7 c0             	movzx  eax,ax
c001d59b:	5b                   	pop    ebx
c001d59c:	09 f0                	or     eax,esi
c001d59e:	5e                   	pop    esi
c001d59f:	5f                   	pop    edi
c001d5a0:	5d                   	pop    ebp
c001d5a1:	c3                   	ret    

c001d5a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001d5a2:	55                   	push   ebp
c001d5a3:	57                   	push   edi
c001d5a4:	56                   	push   esi
c001d5a5:	53                   	push   ebx
c001d5a6:	83 ec 0c             	sub    esp,0xc
c001d5a9:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d5ad:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d5b1:	89 f5                	mov    ebp,esi
c001d5b3:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001d5b9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d5bd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d5c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d5c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d5c9:	83 f9 01             	cmp    ecx,0x1
c001d5cc:	75 5d                	jne    c001d62b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001d5ce:	0f b6 c8             	movzx  ecx,al
c001d5d1:	0f b6 d2             	movzx  edx,dl
c001d5d4:	c1 e1 10             	shl    ecx,0x10
c001d5d7:	c1 e2 0b             	shl    edx,0xb
c001d5da:	89 f0                	mov    eax,esi
c001d5dc:	25 fc 00 00 00       	and    eax,0xfc
c001d5e1:	09 c1                	or     ecx,eax
c001d5e3:	89 e8                	mov    eax,ebp
c001d5e5:	0f b6 c0             	movzx  eax,al
c001d5e8:	c1 e0 08             	shl    eax,0x8
c001d5eb:	09 c1                	or     ecx,eax
c001d5ed:	09 d1                	or     ecx,edx
c001d5ef:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d5f4:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001d5fa:	89 c8                	mov    eax,ecx
c001d5fc:	ef                   	out    dx,eax
c001d5fd:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d602:	ed                   	in     eax,dx
c001d603:	0f b7 db             	movzx  ebx,bx
c001d606:	83 e6 02             	and    esi,0x2
c001d609:	74 0a                	je     c001d615 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001d60b:	0f b7 d0             	movzx  edx,ax
c001d60e:	c1 e3 10             	shl    ebx,0x10
c001d611:	09 d3                	or     ebx,edx
c001d613:	eb 05                	jmp    c001d61a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001d615:	66 31 c0             	xor    ax,ax
c001d618:	09 c3                	or     ebx,eax
c001d61a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001d61f:	89 c8                	mov    eax,ecx
c001d621:	ef                   	out    dx,eax
c001d622:	ba fc 0c 00 00       	mov    edx,0xcfc
c001d627:	89 d8                	mov    eax,ebx
c001d629:	eb 41                	jmp    c001d66c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d62b:	83 f9 02             	cmp    ecx,0x2
c001d62e:	75 45                	jne    c001d675 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001d630:	83 ec 0c             	sub    esp,0xc
c001d633:	0f b6 d2             	movzx  edx,dl
c001d636:	89 f1                	mov    ecx,esi
c001d638:	0f b6 c0             	movzx  eax,al
c001d63b:	0f b6 f1             	movzx  esi,cl
c001d63e:	89 e9                	mov    ecx,ebp
c001d640:	56                   	push   esi
c001d641:	0f b6 c9             	movzx  ecx,cl
c001d644:	51                   	push   ecx
c001d645:	52                   	push   edx
c001d646:	50                   	push   eax
c001d647:	57                   	push   edi
c001d648:	e8 a3 fc ff ff       	call   c001d2f0 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d64d:	89 c2                	mov    edx,eax
c001d64f:	ed                   	in     eax,dx
c001d650:	83 c4 20             	add    esp,0x20
c001d653:	0f b7 db             	movzx  ebx,bx
c001d656:	f6 c2 02             	test   dl,0x2
c001d659:	74 0c                	je     c001d667 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001d65b:	0f b7 c8             	movzx  ecx,ax
c001d65e:	89 d8                	mov    eax,ebx
c001d660:	c1 e0 10             	shl    eax,0x10
c001d663:	09 c8                	or     eax,ecx
c001d665:	eb 05                	jmp    c001d66c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001d667:	66 31 c0             	xor    ax,ax
c001d66a:	09 d8                	or     eax,ebx
c001d66c:	ef                   	out    dx,eax
c001d66d:	83 c4 0c             	add    esp,0xc
c001d670:	5b                   	pop    ebx
c001d671:	5e                   	pop    esi
c001d672:	5f                   	pop    edi
c001d673:	5d                   	pop    ebp
c001d674:	c3                   	ret    
c001d675:	c7 44 24 20 df 54 02 c0 	mov    DWORD PTR [esp+0x20],0xc00254df
c001d67d:	83 c4 0c             	add    esp,0xc
c001d680:	5b                   	pop    ebx
c001d681:	5e                   	pop    esi
c001d682:	5f                   	pop    edi
c001d683:	5d                   	pop    ebp
c001d684:	e9 19 29 ff ff       	jmp    c000ffa2 <KePanic(char const*)>
c001d689:	90                   	nop

c001d68a <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001d68a:	55                   	push   ebp
c001d68b:	57                   	push   edi
c001d68c:	56                   	push   esi
c001d68d:	53                   	push   ebx
c001d68e:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001d694:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001d69b:	80 3d 4c f4 02 c0 00 	cmp    BYTE PTR ds:0xc002f44c,0x0
c001d6a2:	0f 85 bd 00 00 00    	jne    c001d765 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001d6a8:	83 ec 0c             	sub    esp,0xc
c001d6ab:	68 14 01 00 00       	push   0x114
c001d6b0:	e8 a6 25 ff ff       	call   c000fc5b <malloc>
c001d6b5:	83 c4 0c             	add    esp,0xc
c001d6b8:	89 c3                	mov    ebx,eax
c001d6ba:	ff 35 58 ea 02 c0    	push   DWORD PTR ds:0xc002ea58
c001d6c0:	68 e5 54 02 c0       	push   0xc00254e5
c001d6c5:	50                   	push   eax
c001d6c6:	e8 67 aa fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001d6cb:	83 c4 10             	add    esp,0x10
c001d6ce:	85 db                	test   ebx,ebx
c001d6d0:	0f 84 67 02 00 00    	je     c001d93d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001d6d6:	56                   	push   esi
c001d6d7:	56                   	push   esi
c001d6d8:	6a 01                	push   0x1
c001d6da:	53                   	push   ebx
c001d6db:	e8 70 aa fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001d6e0:	83 c4 10             	add    esp,0x10
c001d6e3:	85 c0                	test   eax,eax
c001d6e5:	0f 85 52 02 00 00    	jne    c001d93d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001d6eb:	52                   	push   edx
c001d6ec:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001d6f0:	50                   	push   eax
c001d6f1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001d6f5:	50                   	push   eax
c001d6f6:	53                   	push   ebx
c001d6f7:	e8 56 ad fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001d6fc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d700:	40                   	inc    eax
c001d701:	89 04 24             	mov    DWORD PTR [esp],eax
c001d704:	e8 52 25 ff ff       	call   c000fc5b <malloc>
c001d709:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001d70d:	a3 48 f4 02 c0       	mov    ds:0xc002f448,eax
c001d712:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001d716:	59                   	pop    ecx
c001d717:	8b 13                	mov    edx,DWORD PTR [ebx]
c001d719:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001d71d:	51                   	push   ecx
c001d71e:	50                   	push   eax
c001d71f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d723:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001d727:	53                   	push   ebx
c001d728:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001d72b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001d72f:	83 c4 20             	add    esp,0x20
c001d732:	89 c8                	mov    eax,ecx
c001d734:	99                   	cdq    
c001d735:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001d739:	0f 85 fe 01 00 00    	jne    c001d93d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001d73f:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001d743:	0f 85 f4 01 00 00    	jne    c001d93d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001d749:	83 ec 0c             	sub    esp,0xc
c001d74c:	53                   	push   ebx
c001d74d:	e8 5c aa fe ff       	call   c00081ae <File::close()>
c001d752:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001d756:	c6 05 4c f4 02 c0 01 	mov    BYTE PTR ds:0xc002f44c,0x1
c001d75d:	a3 44 f4 02 c0       	mov    ds:0xc002f444,eax
c001d762:	83 c4 10             	add    esp,0x10
c001d765:	a1 44 f4 02 c0       	mov    eax,ds:0xc002f444
c001d76a:	8b 1d 48 f4 02 c0    	mov    ebx,DWORD PTR ds:0xc002f448
c001d770:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d774:	31 f6                	xor    esi,esi
c001d776:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001d77e:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001d785:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001d78a:	31 c9                	xor    ecx,ecx
c001d78c:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001d794:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001d799:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001d7a1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d7a5:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001d7ad:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d7b1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001d7b5:	0f 8e 82 01 00 00    	jle    c001d93d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001d7bb:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001d7be:	d4 40                	aam    0x40
c001d7c0:	d5 39                	aad    0x39
c001d7c2:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d7c6:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001d7ca:	d4 40                	aam    0x40
c001d7cc:	d5 39                	aad    0x39
c001d7ce:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001d7d2:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001d7d6:	d4 40                	aam    0x40
c001d7d8:	d5 39                	aad    0x39
c001d7da:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001d7de:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001d7e2:	d4 40                	aam    0x40
c001d7e4:	d5 39                	aad    0x39
c001d7e6:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d7ea:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001d7ee:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001d7f2:	3c 56                	cmp    al,0x56
c001d7f4:	74 43                	je     c001d839 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001d7f6:	d4 40                	aam    0x40
c001d7f8:	d5 39                	aad    0x39
c001d7fa:	8d 48 d0             	lea    ecx,[eax-0x30]
c001d7fd:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001d801:	0f b6 c9             	movzx  ecx,cl
c001d804:	c1 e1 04             	shl    ecx,0x4
c001d807:	d4 40                	aam    0x40
c001d809:	d5 39                	aad    0x39
c001d80b:	83 e8 30             	sub    eax,0x30
c001d80e:	0f b6 c0             	movzx  eax,al
c001d811:	09 c1                	or     ecx,eax
c001d813:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001d817:	c1 e1 04             	shl    ecx,0x4
c001d81a:	d4 40                	aam    0x40
c001d81c:	d5 39                	aad    0x39
c001d81e:	83 e8 30             	sub    eax,0x30
c001d821:	0f b6 c0             	movzx  eax,al
c001d824:	09 c1                	or     ecx,eax
c001d826:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001d82a:	c1 e1 04             	shl    ecx,0x4
c001d82d:	d4 40                	aam    0x40
c001d82f:	d5 39                	aad    0x39
c001d831:	83 e8 30             	sub    eax,0x30
c001d834:	0f b6 c0             	movzx  eax,al
c001d837:	09 c1                	or     ecx,eax
c001d839:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001d83d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001d841:	3c 58                	cmp    al,0x58
c001d843:	74 47                	je     c001d88c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001d845:	d4 40                	aam    0x40
c001d847:	d5 39                	aad    0x39
c001d849:	8d 50 d0             	lea    edx,[eax-0x30]
c001d84c:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001d850:	0f b6 d2             	movzx  edx,dl
c001d853:	c1 e2 04             	shl    edx,0x4
c001d856:	d4 40                	aam    0x40
c001d858:	d5 39                	aad    0x39
c001d85a:	83 e8 30             	sub    eax,0x30
c001d85d:	0f b6 c0             	movzx  eax,al
c001d860:	09 c2                	or     edx,eax
c001d862:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001d866:	c1 e2 04             	shl    edx,0x4
c001d869:	d4 40                	aam    0x40
c001d86b:	d5 39                	aad    0x39
c001d86d:	83 e8 30             	sub    eax,0x30
c001d870:	0f b6 c0             	movzx  eax,al
c001d873:	09 c2                	or     edx,eax
c001d875:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001d879:	c1 e2 04             	shl    edx,0x4
c001d87c:	d4 40                	aam    0x40
c001d87e:	d5 39                	aad    0x39
c001d880:	83 e8 30             	sub    eax,0x30
c001d883:	0f b6 c0             	movzx  eax,al
c001d886:	09 c2                	or     edx,eax
c001d888:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d88c:	83 c6 10             	add    esi,0x10
c001d88f:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001d893:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001d897:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001d89b:	83 fa 0a             	cmp    edx,0xa
c001d89e:	74 0b                	je     c001d8ab <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001d8a0:	47                   	inc    edi
c001d8a1:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001d8a5:	75 19                	jne    c001d8c0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001d8a7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001d8ab:	31 c0                	xor    eax,eax
c001d8ad:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001d8b2:	0f 94 c0             	sete   al
c001d8b5:	01 c6                	add    esi,eax
c001d8b7:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001d8bc:	75 0b                	jne    c001d8c9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001d8be:	eb 14                	jmp    c001d8d4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001d8c0:	46                   	inc    esi
c001d8c1:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001d8c4:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001d8c7:	eb ca                	jmp    c001d893 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001d8c9:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001d8ce:	0f 85 dd fe ff ff    	jne    c001d7b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001d8d4:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001d8d9:	74 10                	je     c001d8eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001d8db:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001d8e0:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001d8e5:	0f 85 c6 fe ff ff    	jne    c001d7b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001d8eb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d8ef:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001d8f3:	83 e8 30             	sub    eax,0x30
c001d8f6:	83 ef 30             	sub    edi,0x30
c001d8f9:	c1 e0 04             	shl    eax,0x4
c001d8fc:	09 f8                	or     eax,edi
c001d8fe:	0f b6 c0             	movzx  eax,al
c001d901:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001d905:	0f 85 a6 fe ff ff    	jne    c001d7b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001d90b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d90f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001d913:	83 e8 30             	sub    eax,0x30
c001d916:	83 ef 30             	sub    edi,0x30
c001d919:	c1 e0 04             	shl    eax,0x4
c001d91c:	09 f8                	or     eax,edi
c001d91e:	0f b6 c0             	movzx  eax,al
c001d921:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001d925:	0f 85 86 fe ff ff    	jne    c001d7b1 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001d92b:	50                   	push   eax
c001d92c:	50                   	push   eax
c001d92d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001d931:	50                   	push   eax
c001d932:	55                   	push   ebp
c001d933:	e8 08 2d fe ff       	call   c0000640 <strcpy>
c001d938:	83 c4 10             	add    esp,0x10
c001d93b:	eb 06                	jmp    c001d943 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001d93d:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d941:	31 ed                	xor    ebp,ebp
c001d943:	81 c4 4c 01 00 00    	add    esp,0x14c
c001d949:	89 e8                	mov    eax,ebp
c001d94b:	5b                   	pop    ebx
c001d94c:	5e                   	pop    esi
c001d94d:	5f                   	pop    edi
c001d94e:	5d                   	pop    ebp
c001d94f:	c3                   	ret    

c001d950 <PCI::checkBus(unsigned char)>:
c001d950:	56                   	push   esi
c001d951:	53                   	push   ebx
c001d952:	31 db                	xor    ebx,ebx
c001d954:	51                   	push   ecx
c001d955:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d95a:	52                   	push   edx
c001d95b:	53                   	push   ebx
c001d95c:	43                   	inc    ebx
c001d95d:	56                   	push   esi
c001d95e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d962:	e8 6f 03 00 00       	call   c001dcd6 <PCI::checkDevice(unsigned char, unsigned char)>
c001d967:	83 c4 10             	add    esp,0x10
c001d96a:	83 fb 20             	cmp    ebx,0x20
c001d96d:	75 eb                	jne    c001d95a <PCI::checkBus(unsigned char)+0xa>
c001d96f:	58                   	pop    eax
c001d970:	5b                   	pop    ebx
c001d971:	5e                   	pop    esi
c001d972:	c3                   	ret    
c001d973:	90                   	nop

c001d974 <PCI::foundDevice(PCIDeviceInfo)>:
c001d974:	55                   	push   ebp
c001d975:	57                   	push   edi
c001d976:	56                   	push   esi
c001d977:	53                   	push   ebx
c001d978:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001d97e:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001d986:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001d98d:	3d ff ff 00 00       	cmp    eax,0xffff
c001d992:	0f 84 b7 01 00 00    	je     c001db4f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001d998:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001d9a0:	66 81 fb 06 04       	cmp    bx,0x406
c001d9a5:	75 32                	jne    c001d9d9 <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001d9a7:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001d9af:	50                   	push   eax
c001d9b0:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001d9b8:	50                   	push   eax
c001d9b9:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001d9c1:	50                   	push   eax
c001d9c2:	55                   	push   ebp
c001d9c3:	e8 4e fb ff ff       	call   c001d516 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d9c8:	59                   	pop    ecx
c001d9c9:	0f b6 c0             	movzx  eax,al
c001d9cc:	5b                   	pop    ebx
c001d9cd:	50                   	push   eax
c001d9ce:	55                   	push   ebp
c001d9cf:	e8 7c ff ff ff       	call   c001d950 <PCI::checkBus(unsigned char)>
c001d9d4:	e9 16 01 00 00       	jmp    c001daef <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001d9d9:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001d9e0:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001d9e6:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001d9ea:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001d9f1:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001d9f9:	85 c0                	test   eax,eax
c001d9fb:	74 36                	je     c001da33 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001d9fd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001da00:	85 d2                	test   edx,edx
c001da02:	74 2b                	je     c001da2f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001da04:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001da0a:	31 f9                	xor    ecx,edi
c001da0c:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001da12:	75 1b                	jne    c001da2f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001da14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da18:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001da1e:	75 0f                	jne    c001da2f <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001da20:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001da27:	39 f2                	cmp    edx,esi
c001da29:	0f 84 20 01 00 00    	je     c001db4f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001da2f:	8b 00                	mov    eax,DWORD PTR [eax]
c001da31:	eb c6                	jmp    c001d9f9 <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001da33:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001da37:	be 18 55 02 c0       	mov    esi,0xc0025518
c001da3c:	b9 07 00 00 00       	mov    ecx,0x7
c001da41:	fc                   	cld    
c001da42:	31 d2                	xor    edx,edx
c001da44:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001da46:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001da4d:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001da51:	b9 12 00 00 00       	mov    ecx,0x12
c001da56:	83 ec 0c             	sub    esp,0xc
c001da59:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001da5b:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001da63:	b9 0a 00 00 00       	mov    ecx,0xa
c001da68:	f7 f1                	div    ecx
c001da6a:	83 c0 30             	add    eax,0x30
c001da6d:	83 c2 30             	add    edx,0x30
c001da70:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001da74:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001da78:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001da80:	31 d2                	xor    edx,edx
c001da82:	f7 f1                	div    ecx
c001da84:	83 c0 30             	add    eax,0x30
c001da87:	83 c2 30             	add    edx,0x30
c001da8a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001da8e:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001da92:	8d 44 24 28          	lea    eax,[esp+0x28]
c001da96:	50                   	push   eax
c001da97:	e8 87 f7 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001da9c:	83 c4 10             	add    esp,0x10
c001da9f:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001daa5:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001daac:	75 46                	jne    c001daf4 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001daae:	83 ec 0c             	sub    esp,0xc
c001dab1:	68 64 01 00 00       	push   0x164
c001dab6:	e8 a0 21 ff ff       	call   c000fc5b <malloc>
c001dabb:	89 c3                	mov    ebx,eax
c001dabd:	89 04 24             	mov    DWORD PTR [esp],eax
c001dac0:	e8 39 11 00 00       	call   c001ebfe <SATABus::SATABus()>
c001dac5:	58                   	pop    eax
c001dac6:	5a                   	pop    edx
c001dac7:	53                   	push   ebx
c001dac8:	55                   	push   ebp
c001dac9:	e8 2c bf fe ff       	call   c00099fa <Device::addChild(Device*)>
c001dace:	83 ec 1c             	sub    esp,0x1c
c001dad1:	b9 09 00 00 00       	mov    ecx,0x9
c001dad6:	89 e7                	mov    edi,esp
c001dad8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dada:	53                   	push   ebx
c001dadb:	e8 60 be fe ff       	call   c0009940 <Device::preOpenPCI(PCIDeviceInfo)>
c001dae0:	83 c4 30             	add    esp,0x30
c001dae3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dae5:	6a 00                	push   0x0
c001dae7:	6a 00                	push   0x0
c001dae9:	6a 00                	push   0x0
c001daeb:	53                   	push   ebx
c001daec:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001daef:	83 c4 10             	add    esp,0x10
c001daf2:	eb 5b                	jmp    c001db4f <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001daf4:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001dafa:	75 19                	jne    c001db15 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001dafc:	83 ec 0c             	sub    esp,0xc
c001daff:	68 70 02 00 00       	push   0x270
c001db04:	e8 52 21 ff ff       	call   c000fc5b <malloc>
c001db09:	89 c3                	mov    ebx,eax
c001db0b:	89 04 24             	mov    DWORD PTR [esp],eax
c001db0e:	e8 93 02 00 00       	call   c001dda6 <IDE::IDE()>
c001db13:	eb b0                	jmp    c001dac5 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001db15:	83 ec 0c             	sub    esp,0xc
c001db18:	68 58 01 00 00       	push   0x158
c001db1d:	e8 39 21 ff ff       	call   c000fc5b <malloc>
c001db22:	89 c3                	mov    ebx,eax
c001db24:	58                   	pop    eax
c001db25:	5a                   	pop    edx
c001db26:	68 fe 54 02 c0       	push   0xc00254fe
c001db2b:	53                   	push   ebx
c001db2c:	e8 7d c1 fe ff       	call   c0009cae <DriverlessDevice::DriverlessDevice(char const*)>
c001db31:	59                   	pop    ecx
c001db32:	5f                   	pop    edi
c001db33:	53                   	push   ebx
c001db34:	55                   	push   ebp
c001db35:	e8 c0 be fe ff       	call   c00099fa <Device::addChild(Device*)>
c001db3a:	83 ec 1c             	sub    esp,0x1c
c001db3d:	b9 09 00 00 00       	mov    ecx,0x9
c001db42:	89 e7                	mov    edi,esp
c001db44:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001db46:	53                   	push   ebx
c001db47:	e8 f4 bd fe ff       	call   c0009940 <Device::preOpenPCI(PCIDeviceInfo)>
c001db4c:	83 c4 30             	add    esp,0x30
c001db4f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001db55:	5b                   	pop    ebx
c001db56:	5e                   	pop    esi
c001db57:	5f                   	pop    edi
c001db58:	5d                   	pop    ebp
c001db59:	c3                   	ret    

c001db5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001db5a:	55                   	push   ebp
c001db5b:	57                   	push   edi
c001db5c:	56                   	push   esi
c001db5d:	53                   	push   ebx
c001db5e:	83 ec 68             	sub    esp,0x68
c001db61:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001db65:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001db6c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001db70:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001db77:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001db7c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001db80:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001db87:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001db8c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001db90:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001db95:	6a 0c                	push   0xc
c001db97:	57                   	push   edi
c001db98:	53                   	push   ebx
c001db99:	56                   	push   esi
c001db9a:	55                   	push   ebp
c001db9b:	e8 c6 f7 ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dba0:	83 c4 20             	add    esp,0x20
c001dba3:	57                   	push   edi
c001dba4:	53                   	push   ebx
c001dba5:	56                   	push   esi
c001dba6:	55                   	push   ebp
c001dba7:	e8 b0 f8 ff ff       	call   c001d45c <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001dbac:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001dbb1:	57                   	push   edi
c001dbb2:	53                   	push   ebx
c001dbb3:	56                   	push   esi
c001dbb4:	55                   	push   ebp
c001dbb5:	e8 38 f9 ff ff       	call   c001d4f2 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001dbba:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001dbbe:	83 c4 14             	add    esp,0x14
c001dbc1:	6a 3c                	push   0x3c
c001dbc3:	57                   	push   edi
c001dbc4:	53                   	push   ebx
c001dbc5:	56                   	push   esi
c001dbc6:	55                   	push   ebp
c001dbc7:	e8 9a f7 ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dbcc:	0f b6 c4             	movzx  eax,ah
c001dbcf:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001dbd3:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001dbd7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001dbdb:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c001dbe0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001dbe6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001dbec:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001dbf0:	83 c4 20             	add    esp,0x20
c001dbf3:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001dbf8:	74 30                	je     c001dc2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001dbfa:	31 c0                	xor    eax,eax
c001dbfc:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001dc00:	7e 28                	jle    c001dc2a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001dc02:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001dc0a:	39 cb                	cmp    ebx,ecx
c001dc0c:	75 19                	jne    c001dc27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001dc0e:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001dc16:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001dc1a:	75 0b                	jne    c001dc27 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001dc1c:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001dc23:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001dc27:	40                   	inc    eax
c001dc28:	eb d2                	jmp    c001dbfc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001dc2a:	31 d2                	xor    edx,edx
c001dc2c:	83 ec 0c             	sub    esp,0xc
c001dc2f:	57                   	push   edi
c001dc30:	53                   	push   ebx
c001dc31:	56                   	push   esi
c001dc32:	52                   	push   edx
c001dc33:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001dc37:	55                   	push   ebp
c001dc38:	e8 01 f9 ff ff       	call   c001d53e <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc3d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dc41:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001dc45:	42                   	inc    edx
c001dc46:	83 c4 20             	add    esp,0x20
c001dc49:	83 fa 06             	cmp    edx,0x6
c001dc4c:	75 de                	jne    c001dc2c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001dc4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dc52:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc56:	c1 e2 08             	shl    edx,0x8
c001dc59:	83 ec 0c             	sub    esp,0xc
c001dc5c:	0f b6 c4             	movzx  eax,ah
c001dc5f:	09 d0                	or     eax,edx
c001dc61:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001dc66:	6a 02                	push   0x2
c001dc68:	57                   	push   edi
c001dc69:	53                   	push   ebx
c001dc6a:	56                   	push   esi
c001dc6b:	55                   	push   ebp
c001dc6c:	e8 f5 f6 ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001dc71:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001dc76:	83 c4 20             	add    esp,0x20
c001dc79:	57                   	push   edi
c001dc7a:	53                   	push   ebx
c001dc7b:	56                   	push   esi
c001dc7c:	55                   	push   ebp
c001dc7d:	e8 24 f8 ff ff       	call   c001d4a6 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001dc82:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001dc86:	57                   	push   edi
c001dc87:	53                   	push   ebx
c001dc88:	56                   	push   esi
c001dc89:	55                   	push   ebp
c001dc8a:	e8 81 f7 ff ff       	call   c001d410 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dc8f:	b9 09 00 00 00       	mov    ecx,0x9
c001dc94:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001dc99:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001dc9d:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001dca1:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001dca5:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001dca9:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001dcad:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001dcb1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001dcb5:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001dcb9:	83 ec 0c             	sub    esp,0xc
c001dcbc:	fc                   	cld    
c001dcbd:	89 e7                	mov    edi,esp
c001dcbf:	8d 74 24 58          	lea    esi,[esp+0x58]
c001dcc3:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001dcc5:	55                   	push   ebp
c001dcc6:	e8 a9 fc ff ff       	call   c001d974 <PCI::foundDevice(PCIDeviceInfo)>
c001dccb:	81 c4 8c 00 00 00    	add    esp,0x8c
c001dcd1:	5b                   	pop    ebx
c001dcd2:	5e                   	pop    esi
c001dcd3:	5f                   	pop    edi
c001dcd4:	5d                   	pop    ebp
c001dcd5:	c3                   	ret    

c001dcd6 <PCI::checkDevice(unsigned char, unsigned char)>:
c001dcd6:	55                   	push   ebp
c001dcd7:	57                   	push   edi
c001dcd8:	56                   	push   esi
c001dcd9:	53                   	push   ebx
c001dcda:	83 ec 0c             	sub    esp,0xc
c001dcdd:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001dce1:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001dce6:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001dceb:	6a 00                	push   0x0
c001dced:	56                   	push   esi
c001dcee:	57                   	push   edi
c001dcef:	55                   	push   ebp
c001dcf0:	e8 1b f7 ff ff       	call   c001d410 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dcf5:	6a 00                	push   0x0
c001dcf7:	56                   	push   esi
c001dcf8:	57                   	push   edi
c001dcf9:	55                   	push   ebp
c001dcfa:	e8 5b fe ff ff       	call   c001db5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001dcff:	83 c4 20             	add    esp,0x20
c001dd02:	6a 00                	push   0x0
c001dd04:	56                   	push   esi
c001dd05:	57                   	push   edi
c001dd06:	55                   	push   ebp
c001dd07:	e8 28 f7 ff ff       	call   c001d434 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001dd0c:	83 c4 10             	add    esp,0x10
c001dd0f:	a8 80                	test   al,0x80
c001dd11:	74 2d                	je     c001dd40 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001dd13:	bb 01 00 00 00       	mov    ebx,0x1
c001dd18:	53                   	push   ebx
c001dd19:	56                   	push   esi
c001dd1a:	57                   	push   edi
c001dd1b:	55                   	push   ebp
c001dd1c:	e8 ef f6 ff ff       	call   c001d410 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dd21:	83 c4 10             	add    esp,0x10
c001dd24:	0f b7 c0             	movzx  eax,ax
c001dd27:	3d ff ff 00 00       	cmp    eax,0xffff
c001dd2c:	74 0c                	je     c001dd3a <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001dd2e:	53                   	push   ebx
c001dd2f:	56                   	push   esi
c001dd30:	57                   	push   edi
c001dd31:	55                   	push   ebp
c001dd32:	e8 23 fe ff ff       	call   c001db5a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001dd37:	83 c4 10             	add    esp,0x10
c001dd3a:	43                   	inc    ebx
c001dd3b:	83 fb 08             	cmp    ebx,0x8
c001dd3e:	75 d8                	jne    c001dd18 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001dd40:	83 c4 0c             	add    esp,0xc
c001dd43:	5b                   	pop    ebx
c001dd44:	5e                   	pop    esi
c001dd45:	5f                   	pop    edi
c001dd46:	5d                   	pop    ebp
c001dd47:	c3                   	ret    

c001dd48 <PCI::detect()>:
c001dd48:	56                   	push   esi
c001dd49:	53                   	push   ebx
c001dd4a:	53                   	push   ebx
c001dd4b:	31 db                	xor    ebx,ebx
c001dd4d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dd51:	6a 00                	push   0x0
c001dd53:	6a 00                	push   0x0
c001dd55:	6a 00                	push   0x0
c001dd57:	56                   	push   esi
c001dd58:	e8 d7 f6 ff ff       	call   c001d434 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001dd5d:	83 c4 10             	add    esp,0x10
c001dd60:	a8 80                	test   al,0x80
c001dd62:	75 21                	jne    c001dd85 <PCI::detect()+0x3d>
c001dd64:	51                   	push   ecx
c001dd65:	51                   	push   ecx
c001dd66:	6a 00                	push   0x0
c001dd68:	56                   	push   esi
c001dd69:	e8 e2 fb ff ff       	call   c001d950 <PCI::checkBus(unsigned char)>
c001dd6e:	83 c4 10             	add    esp,0x10
c001dd71:	eb 2a                	jmp    c001dd9d <PCI::detect()+0x55>
c001dd73:	52                   	push   edx
c001dd74:	52                   	push   edx
c001dd75:	53                   	push   ebx
c001dd76:	43                   	inc    ebx
c001dd77:	56                   	push   esi
c001dd78:	e8 d3 fb ff ff       	call   c001d950 <PCI::checkBus(unsigned char)>
c001dd7d:	83 c4 10             	add    esp,0x10
c001dd80:	83 fb 08             	cmp    ebx,0x8
c001dd83:	74 18                	je     c001dd9d <PCI::detect()+0x55>
c001dd85:	53                   	push   ebx
c001dd86:	6a 00                	push   0x0
c001dd88:	6a 00                	push   0x0
c001dd8a:	56                   	push   esi
c001dd8b:	e8 80 f6 ff ff       	call   c001d410 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001dd90:	83 c4 10             	add    esp,0x10
c001dd93:	0f b7 c0             	movzx  eax,ax
c001dd96:	3d ff ff 00 00       	cmp    eax,0xffff
c001dd9b:	74 d6                	je     c001dd73 <PCI::detect()+0x2b>
c001dd9d:	58                   	pop    eax
c001dd9e:	5b                   	pop    ebx
c001dd9f:	5e                   	pop    esi
c001dda0:	c3                   	ret    
c001dda1:	90                   	nop

c001dda2 <IDE::close(int, int, void*)>:
c001dda2:	83 c8 ff             	or     eax,0xffffffff
c001dda5:	c3                   	ret    

c001dda6 <IDE::IDE()>:
c001dda6:	83 ec 0c             	sub    esp,0xc
c001dda9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddad:	83 ec 08             	sub    esp,0x8
c001ddb0:	68 a8 55 02 c0       	push   0xc00255a8
c001ddb5:	50                   	push   eax
c001ddb6:	e8 99 bf fe ff       	call   c0009d54 <HardDiskController::HardDiskController(char const*)>
c001ddbb:	83 c4 10             	add    esp,0x10
c001ddbe:	ba d4 56 02 c0       	mov    edx,0xc00256d4
c001ddc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddc7:	89 10                	mov    DWORD PTR [eax],edx
c001ddc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddcd:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001ddd4:	90                   	nop
c001ddd5:	83 c4 0c             	add    esp,0xc
c001ddd8:	c3                   	ret    
c001ddd9:	90                   	nop

c001ddda <IDE::prepareInterrupt(unsigned char)>:
c001ddda:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001dddf:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001dde3:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001ddeb:	c3                   	ret    

c001ddec <selectDrive(unsigned char, unsigned char)>:
c001ddec:	c3                   	ret    
c001dded:	90                   	nop

c001ddee <IDE::getBase(unsigned char)>:
c001ddee:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001ddf3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ddf7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001ddff:	c3                   	ret    

c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001de00:	55                   	push   ebp
c001de01:	57                   	push   edi
c001de02:	56                   	push   esi
c001de03:	53                   	push   ebx
c001de04:	83 ec 1c             	sub    esp,0x1c
c001de07:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001de0b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001de0f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001de12:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001de16:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001de1a:	80 f9 03             	cmp    cl,0x3
c001de1d:	77 4f                	ja     c001de6e <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001de1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de23:	0f b6 fa             	movzx  edi,dl
c001de26:	0f b6 db             	movzx  ebx,bl
c001de29:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001de2c:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001de31:	80 ca 80             	or     dl,0x80
c001de34:	52                   	push   edx
c001de35:	6a 0c                	push   0xc
c001de37:	57                   	push   edi
c001de38:	56                   	push   esi
c001de39:	e8 c2 ff ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de3e:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001de43:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001de47:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001de4b:	ee                   	out    dx,al
c001de4c:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001de51:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001de55:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001de59:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001de5d:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001de65:	83 c4 2c             	add    esp,0x2c
c001de68:	5b                   	pop    ebx
c001de69:	5e                   	pop    esi
c001de6a:	5f                   	pop    edi
c001de6b:	5d                   	pop    ebp
c001de6c:	eb 92                	jmp    c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de6e:	0f b6 cb             	movzx  ecx,bl
c001de71:	83 f9 07             	cmp    ecx,0x7
c001de74:	77 12                	ja     c001de88 <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001de76:	0f b6 d2             	movzx  edx,dl
c001de79:	0f b6 db             	movzx  ebx,bl
c001de7c:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001de84:	01 da                	add    edx,ebx
c001de86:	eb 2f                	jmp    c001deb7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001de88:	83 f9 0d             	cmp    ecx,0xd
c001de8b:	77 13                	ja     c001dea0 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001de8d:	0f b6 d2             	movzx  edx,dl
c001de90:	0f b6 db             	movzx  ebx,bl
c001de93:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001de9a:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001de9e:	eb 17                	jmp    c001deb7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001dea0:	83 f9 15             	cmp    ecx,0x15
c001dea3:	77 13                	ja     c001deb8 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001dea5:	0f b6 d2             	movzx  edx,dl
c001dea8:	0f b6 db             	movzx  ebx,bl
c001deab:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001deb3:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001deb7:	ee                   	out    dx,al
c001deb8:	83 c4 1c             	add    esp,0x1c
c001debb:	5b                   	pop    ebx
c001debc:	5e                   	pop    esi
c001debd:	5f                   	pop    edi
c001debe:	5d                   	pop    ebp
c001debf:	c3                   	ret    

c001dec0 <IDE::read(unsigned char, unsigned char)>:
c001dec0:	55                   	push   ebp
c001dec1:	57                   	push   edi
c001dec2:	56                   	push   esi
c001dec3:	53                   	push   ebx
c001dec4:	83 ec 1c             	sub    esp,0x1c
c001dec7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001decb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001decf:	8d 43 f8             	lea    eax,[ebx-0x8]
c001ded2:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001ded6:	3c 03                	cmp    al,0x3
c001ded8:	77 40                	ja     c001df1a <IDE::read(unsigned char, unsigned char)+0x5a>
c001deda:	0f b6 f9             	movzx  edi,cl
c001dedd:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001dee0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dee5:	0c 80                	or     al,0x80
c001dee7:	50                   	push   eax
c001dee8:	6a 0c                	push   0xc
c001deea:	57                   	push   edi
c001deeb:	56                   	push   esi
c001deec:	e8 0f ff ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001def1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001def6:	0f b6 d3             	movzx  edx,bl
c001def9:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001defd:	ec                   	in     al,dx
c001defe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001df02:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001df07:	52                   	push   edx
c001df08:	6a 0c                	push   0xc
c001df0a:	57                   	push   edi
c001df0b:	56                   	push   esi
c001df0c:	e8 ef fe ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df11:	83 c4 20             	add    esp,0x20
c001df14:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001df18:	eb 4c                	jmp    c001df66 <IDE::read(unsigned char, unsigned char)+0xa6>
c001df1a:	0f b6 d3             	movzx  edx,bl
c001df1d:	83 fa 07             	cmp    edx,0x7
c001df20:	77 12                	ja     c001df34 <IDE::read(unsigned char, unsigned char)+0x74>
c001df22:	0f b6 c9             	movzx  ecx,cl
c001df25:	0f b6 d3             	movzx  edx,bl
c001df28:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001df30:	01 c2                	add    edx,eax
c001df32:	eb 31                	jmp    c001df65 <IDE::read(unsigned char, unsigned char)+0xa5>
c001df34:	83 fa 0d             	cmp    edx,0xd
c001df37:	77 13                	ja     c001df4c <IDE::read(unsigned char, unsigned char)+0x8c>
c001df39:	0f b6 c9             	movzx  ecx,cl
c001df3c:	0f b6 d3             	movzx  edx,bl
c001df3f:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001df46:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001df4a:	eb 19                	jmp    c001df65 <IDE::read(unsigned char, unsigned char)+0xa5>
c001df4c:	31 c0                	xor    eax,eax
c001df4e:	83 fa 15             	cmp    edx,0x15
c001df51:	77 13                	ja     c001df66 <IDE::read(unsigned char, unsigned char)+0xa6>
c001df53:	0f b6 c9             	movzx  ecx,cl
c001df56:	0f b6 d3             	movzx  edx,bl
c001df59:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001df61:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001df65:	ec                   	in     al,dx
c001df66:	83 c4 1c             	add    esp,0x1c
c001df69:	5b                   	pop    ebx
c001df6a:	5e                   	pop    esi
c001df6b:	5f                   	pop    edi
c001df6c:	5d                   	pop    ebp
c001df6d:	c3                   	ret    

c001df6e <IDE::waitInterrupt(unsigned char)>:
c001df6e:	55                   	push   ebp
c001df6f:	57                   	push   edi
c001df70:	56                   	push   esi
c001df71:	53                   	push   ebx
c001df72:	31 db                	xor    ebx,ebx
c001df74:	83 ec 0c             	sub    esp,0xc
c001df77:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001df7b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001df80:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001df88:	89 e8                	mov    eax,ebp
c001df8a:	84 c0                	test   al,al
c001df8c:	75 30                	jne    c001dfbe <IDE::waitInterrupt(unsigned char)+0x50>
c001df8e:	50                   	push   eax
c001df8f:	6a 0c                	push   0xc
c001df91:	56                   	push   esi
c001df92:	57                   	push   edi
c001df93:	e8 28 ff ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001df98:	83 c4 10             	add    esp,0x10
c001df9b:	a8 01                	test   al,0x1
c001df9d:	75 27                	jne    c001dfc6 <IDE::waitInterrupt(unsigned char)+0x58>
c001df9f:	f6 c3 04             	test   bl,0x4
c001dfa2:	75 12                	jne    c001dfb6 <IDE::waitInterrupt(unsigned char)+0x48>
c001dfa4:	83 fb 32             	cmp    ebx,0x32
c001dfa7:	7e 0d                	jle    c001dfb6 <IDE::waitInterrupt(unsigned char)+0x48>
c001dfa9:	83 ec 0c             	sub    esp,0xc
c001dfac:	6a 64                	push   0x64
c001dfae:	e8 f5 8d ff ff       	call   c0016da8 <milliTenthSleep(unsigned int)>
c001dfb3:	83 c4 10             	add    esp,0x10
c001dfb6:	83 fb 3c             	cmp    ebx,0x3c
c001dfb9:	74 0b                	je     c001dfc6 <IDE::waitInterrupt(unsigned char)+0x58>
c001dfbb:	43                   	inc    ebx
c001dfbc:	eb c2                	jmp    c001df80 <IDE::waitInterrupt(unsigned char)+0x12>
c001dfbe:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001dfc6:	83 c4 0c             	add    esp,0xc
c001dfc9:	89 e8                	mov    eax,ebp
c001dfcb:	5b                   	pop    ebx
c001dfcc:	5e                   	pop    esi
c001dfcd:	5f                   	pop    edi
c001dfce:	5d                   	pop    ebp
c001dfcf:	c3                   	ret    

c001dfd0 <ideChannel0IRQHandler(regs*, void*)>:
c001dfd0:	83 ec 10             	sub    esp,0x10
c001dfd3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dfd7:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001dfde:	6a 07                	push   0x7
c001dfe0:	6a 00                	push   0x0
c001dfe2:	50                   	push   eax
c001dfe3:	e8 d8 fe ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001dfe8:	83 c4 1c             	add    esp,0x1c
c001dfeb:	c3                   	ret    

c001dfec <ideChannel1IRQHandler(regs*, void*)>:
c001dfec:	83 ec 10             	sub    esp,0x10
c001dfef:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dff3:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001dffa:	6a 07                	push   0x7
c001dffc:	6a 01                	push   0x1
c001dffe:	50                   	push   eax
c001dfff:	e8 bc fe ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e004:	83 c4 1c             	add    esp,0x1c
c001e007:	c3                   	ret    

c001e008 <IDE::enableIRQs(unsigned char, bool)>:
c001e008:	57                   	push   edi
c001e009:	b8 02 00 00 00       	mov    eax,0x2
c001e00e:	56                   	push   esi
c001e00f:	53                   	push   ebx
c001e010:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e014:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e018:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001e01d:	74 02                	je     c001e021 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001e01f:	31 c0                	xor    eax,eax
c001e021:	0f b6 db             	movzx  ebx,bl
c001e024:	bf 04 00 00 00       	mov    edi,0x4
c001e029:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001e030:	50                   	push   eax
c001e031:	6a 0c                	push   0xc
c001e033:	53                   	push   ebx
c001e034:	56                   	push   esi
c001e035:	e8 c6 fd ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e03a:	83 c4 10             	add    esp,0x10
c001e03d:	50                   	push   eax
c001e03e:	6a 0c                	push   0xc
c001e040:	53                   	push   ebx
c001e041:	56                   	push   esi
c001e042:	e8 79 fe ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e047:	83 c4 10             	add    esp,0x10
c001e04a:	4f                   	dec    edi
c001e04b:	75 f0                	jne    c001e03d <IDE::enableIRQs(unsigned char, bool)+0x35>
c001e04d:	5b                   	pop    ebx
c001e04e:	5e                   	pop    esi
c001e04f:	5f                   	pop    edi
c001e050:	c3                   	ret    
c001e051:	90                   	nop

c001e052 <IDE::open(int, int, void*)>:
c001e052:	57                   	push   edi
c001e053:	56                   	push   esi
c001e054:	53                   	push   ebx
c001e055:	83 ec 10             	sub    esp,0x10
c001e058:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001e05c:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001e065:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001e06e:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001e075:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001e07c:	0f 85 84 02 00 00    	jne    c001e306 <IDE::open(int, int, void*)+0x2b4>
c001e082:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001e088:	a8 70                	test   al,0x70
c001e08a:	75 44                	jne    c001e0d0 <IDE::open(int, int, void*)+0x7e>
c001e08c:	ba 20 84 00 00       	mov    edx,0x8420
c001e091:	0f a3 c2             	bt     edx,eax
c001e094:	73 3a                	jae    c001e0d0 <IDE::open(int, int, void*)+0x7e>
c001e096:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001e09c:	83 ec 0c             	sub    esp,0xc
c001e09f:	83 e0 fc             	and    eax,0xfffffffc
c001e0a2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e0a9:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001e0af:	83 e0 fc             	and    eax,0xfffffffc
c001e0b2:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e0b9:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001e0bf:	83 e0 fc             	and    eax,0xfffffffc
c001e0c2:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e0c9:	68 b5 2d 02 c0       	push   0xc0022db5
c001e0ce:	eb 60                	jmp    c001e130 <IDE::open(int, int, void*)+0xde>
c001e0d0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001e0da:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001e0e4:	be 64 00 00 00       	mov    esi,0x64
c001e0e9:	57                   	push   edi
c001e0ea:	57                   	push   edi
c001e0eb:	68 c0 55 02 c0       	push   0xc00255c0
c001e0f0:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001e0f4:	57                   	push   edi
c001e0f5:	e8 46 25 fe ff       	call   c0000640 <strcpy>
c001e0fa:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001e101:	31 d2                	xor    edx,edx
c001e103:	89 c8                	mov    eax,ecx
c001e105:	89 3c 24             	mov    DWORD PTR [esp],edi
c001e108:	f7 f6                	div    esi
c001e10a:	be 0a 00 00 00       	mov    esi,0xa
c001e10f:	83 c0 30             	add    eax,0x30
c001e112:	31 d2                	xor    edx,edx
c001e114:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e118:	89 c8                	mov    eax,ecx
c001e11a:	f7 f6                	div    esi
c001e11c:	89 d1                	mov    ecx,edx
c001e11e:	31 d2                	xor    edx,edx
c001e120:	83 c1 30             	add    ecx,0x30
c001e123:	f7 f6                	div    esi
c001e125:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001e129:	83 c2 30             	add    edx,0x30
c001e12c:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001e130:	e8 ee f0 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e135:	bf f8 0c 00 00       	mov    edi,0xcf8
c001e13a:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e141:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e148:	c1 e1 10             	shl    ecx,0x10
c001e14b:	c1 e0 0b             	shl    eax,0xb
c001e14e:	83 c4 10             	add    esp,0x10
c001e151:	09 c1                	or     ecx,eax
c001e153:	89 fa                	mov    edx,edi
c001e155:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e15c:	c1 e0 08             	shl    eax,0x8
c001e15f:	09 c1                	or     ecx,eax
c001e161:	89 c8                	mov    eax,ecx
c001e163:	0d 08 00 00 80       	or     eax,0x80000008
c001e168:	ef                   	out    dx,eax
c001e169:	be fc 0c 00 00       	mov    esi,0xcfc
c001e16e:	89 f2                	mov    edx,esi
c001e170:	ed                   	in     eax,dx
c001e171:	c1 e8 10             	shr    eax,0x10
c001e174:	3d ff ff 00 00       	cmp    eax,0xffff
c001e179:	0f 84 e5 00 00 00    	je     c001e264 <IDE::open(int, int, void*)+0x212>
c001e17f:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e185:	89 fa                	mov    edx,edi
c001e187:	89 c8                	mov    eax,ecx
c001e189:	ef                   	out    dx,eax
c001e18a:	b0 fe                	mov    al,0xfe
c001e18c:	89 f2                	mov    edx,esi
c001e18e:	ee                   	out    dx,al
c001e18f:	89 c8                	mov    eax,ecx
c001e191:	89 fa                	mov    edx,edi
c001e193:	ef                   	out    dx,eax
c001e194:	89 f2                	mov    edx,esi
c001e196:	ed                   	in     eax,dx
c001e197:	3c fe                	cmp    al,0xfe
c001e199:	0f 85 85 00 00 00    	jne    c001e224 <IDE::open(int, int, void*)+0x1d2>
c001e19f:	83 ec 0c             	sub    esp,0xc
c001e1a2:	68 eb 2d 02 c0       	push   0xc0022deb
c001e1a7:	e8 77 f0 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e1ac:	c7 04 24 c6 55 02 c0 	mov    DWORD PTR [esp],0xc00255c6
c001e1b3:	e8 ac 8d fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e1b8:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001e1c2:	c7 04 24 c8 30 02 c0 	mov    DWORD PTR [esp],0xc00230c8
c001e1c9:	e8 55 f0 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e1ce:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001e1d5:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e1dc:	c1 e1 10             	shl    ecx,0x10
c001e1df:	c1 e0 08             	shl    eax,0x8
c001e1e2:	89 fa                	mov    edx,edi
c001e1e4:	09 c1                	or     ecx,eax
c001e1e6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e1ed:	c1 e0 0b             	shl    eax,0xb
c001e1f0:	09 c1                	or     ecx,eax
c001e1f2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001e1f8:	89 c8                	mov    eax,ecx
c001e1fa:	ef                   	out    dx,eax
c001e1fb:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001e201:	89 f2                	mov    edx,esi
c001e203:	ee                   	out    dx,al
c001e204:	89 c8                	mov    eax,ecx
c001e206:	89 fa                	mov    edx,edi
c001e208:	ef                   	out    dx,eax
c001e209:	89 f2                	mov    edx,esi
c001e20b:	ed                   	in     eax,dx
c001e20c:	0f b6 c0             	movzx  eax,al
c001e20f:	83 c4 10             	add    esp,0x10
c001e212:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001e218:	74 5a                	je     c001e274 <IDE::open(int, int, void*)+0x222>
c001e21a:	83 ec 0c             	sub    esp,0xc
c001e21d:	68 db 55 02 c0       	push   0xc00255db
c001e222:	eb 48                	jmp    c001e26c <IDE::open(int, int, void*)+0x21a>
c001e224:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001e22d:	75 2b                	jne    c001e25a <IDE::open(int, int, void*)+0x208>
c001e22f:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001e236:	3d 80 00 00 00       	cmp    eax,0x80
c001e23b:	74 07                	je     c001e244 <IDE::open(int, int, void*)+0x1f2>
c001e23d:	3d 8a 00 00 00       	cmp    eax,0x8a
c001e242:	75 16                	jne    c001e25a <IDE::open(int, int, void*)+0x208>
c001e244:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e24b:	83 ec 0c             	sub    esp,0xc
c001e24e:	68 de 28 02 c0       	push   0xc00228de
c001e253:	e8 cb ef fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e258:	eb 17                	jmp    c001e271 <IDE::open(int, int, void*)+0x21f>
c001e25a:	83 ec 0c             	sub    esp,0xc
c001e25d:	68 e3 55 02 c0       	push   0xc00255e3
c001e262:	eb 08                	jmp    c001e26c <IDE::open(int, int, void*)+0x21a>
c001e264:	83 ec 0c             	sub    esp,0xc
c001e267:	68 14 56 02 c0       	push   0xc0025614
c001e26c:	e8 31 1d ff ff       	call   c000ffa2 <KePanic(char const*)>
c001e271:	83 c4 10             	add    esp,0x10
c001e274:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001e27b:	0f 84 bf 00 00 00    	je     c001e340 <IDE::open(int, int, void*)+0x2ee>
c001e281:	83 ec 0c             	sub    esp,0xc
c001e284:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001e28a:	83 e0 fc             	and    eax,0xfffffffc
c001e28d:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001e294:	83 c0 08             	add    eax,0x8
c001e297:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001e29e:	68 3e 56 02 c0       	push   0xc002563e
c001e2a3:	e8 bc 8c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e2a8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e2af:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e2b6:	50                   	push   eax
c001e2b7:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e2be:	50                   	push   eax
c001e2bf:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e2c6:	50                   	push   eax
c001e2c7:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e2cd:	e8 94 f0 ff ff       	call   c001d366 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001e2d2:	83 c4 18             	add    esp,0x18
c001e2d5:	83 c8 07             	or     eax,0x7
c001e2d8:	0f b7 c0             	movzx  eax,ax
c001e2db:	50                   	push   eax
c001e2dc:	6a 04                	push   0x4
c001e2de:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001e2e5:	50                   	push   eax
c001e2e6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001e2ed:	50                   	push   eax
c001e2ee:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001e2f5:	50                   	push   eax
c001e2f6:	ff 35 40 f4 02 c0    	push   DWORD PTR ds:0xc002f440
c001e2fc:	e8 a1 f2 ff ff       	call   c001d5a2 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001e301:	83 c4 20             	add    esp,0x20
c001e304:	eb 3a                	jmp    c001e340 <IDE::open(int, int, void*)+0x2ee>
c001e306:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001e30c:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001e313:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001e31a:	05 06 02 00 00       	add    eax,0x206
c001e31f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e326:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001e32d:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001e334:	05 06 02 00 00       	add    eax,0x206
c001e339:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e340:	83 ec 0c             	sub    esp,0xc
c001e343:	68 17 36 02 c0       	push   0xc0023617
c001e348:	e8 d6 ee fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e34d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001e353:	83 c4 10             	add    esp,0x10
c001e356:	89 c2                	mov    edx,eax
c001e358:	83 e2 0f             	and    edx,0xf
c001e35b:	83 fa 08             	cmp    edx,0x8
c001e35e:	75 0a                	jne    c001e36a <IDE::open(int, int, void*)+0x318>
c001e360:	83 e8 02             	sub    eax,0x2
c001e363:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001e36a:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001e370:	89 c2                	mov    edx,eax
c001e372:	83 e2 0f             	and    edx,0xf
c001e375:	83 fa 08             	cmp    edx,0x8
c001e378:	75 0a                	jne    c001e384 <IDE::open(int, int, void*)+0x332>
c001e37a:	83 e8 02             	sub    eax,0x2
c001e37d:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001e384:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001e38b:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001e392:	89 d0                	mov    eax,edx
c001e394:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e397:	8d 7a 01             	lea    edi,[edx+0x1]
c001e39a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e39e:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001e3a2:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e3a6:	83 e1 3f             	and    ecx,0x3f
c001e3a9:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e3ad:	89 f9                	mov    ecx,edi
c001e3af:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001e3b6:	0f b6 c9             	movzx  ecx,cl
c001e3b9:	8d 78 02             	lea    edi,[eax+0x2]
c001e3bc:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e3bf:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e3c3:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001e3c7:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e3cb:	83 e2 3f             	and    edx,0x3f
c001e3ce:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e3d2:	89 f9                	mov    ecx,edi
c001e3d4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001e3da:	0f b6 d1             	movzx  edx,cl
c001e3dd:	8d 78 03             	lea    edi,[eax+0x3]
c001e3e0:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e3e3:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e3e7:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001e3eb:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001e3ef:	83 e1 3f             	and    ecx,0x3f
c001e3f2:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001e3f6:	89 fa                	mov    edx,edi
c001e3f8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001e3fe:	0f b6 ca             	movzx  ecx,dl
c001e401:	8d 78 04             	lea    edi,[eax+0x4]
c001e404:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001e407:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001e40b:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001e40f:	89 fa                	mov    edx,edi
c001e411:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001e417:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001e41b:	83 e2 3f             	and    edx,0x3f
c001e41e:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001e422:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001e429:	66 85 f6             	test   si,si
c001e42c:	74 24                	je     c001e452 <IDE::open(int, int, void*)+0x400>
c001e42e:	89 f9                	mov    ecx,edi
c001e430:	83 c0 05             	add    eax,0x5
c001e433:	0f b6 d1             	movzx  edx,cl
c001e436:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001e439:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001e43d:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001e441:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001e447:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001e44b:	83 e0 3f             	and    eax,0x3f
c001e44e:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001e452:	83 ec 0c             	sub    esp,0xc
c001e455:	68 56 56 02 c0       	push   0xc0025656
c001e45a:	e8 c4 ed fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e45f:	58                   	pop    eax
c001e460:	5a                   	pop    edx
c001e461:	6a 00                	push   0x0
c001e463:	53                   	push   ebx
c001e464:	e8 71 f9 ff ff       	call   c001ddda <IDE::prepareInterrupt(unsigned char)>
c001e469:	59                   	pop    ecx
c001e46a:	5e                   	pop    esi
c001e46b:	6a 01                	push   0x1
c001e46d:	53                   	push   ebx
c001e46e:	e8 67 f9 ff ff       	call   c001ddda <IDE::prepareInterrupt(unsigned char)>
c001e473:	c7 04 24 a5 4e 02 c0 	mov    DWORD PTR [esp],0xc0024ea5
c001e47a:	e8 a4 ed fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e47f:	83 c4 0c             	add    esp,0xc
c001e482:	6a 00                	push   0x0
c001e484:	6a 00                	push   0x0
c001e486:	53                   	push   ebx
c001e487:	e8 7c fb ff ff       	call   c001e008 <IDE::enableIRQs(unsigned char, bool)>
c001e48c:	83 c4 0c             	add    esp,0xc
c001e48f:	6a 00                	push   0x0
c001e491:	6a 01                	push   0x1
c001e493:	53                   	push   ebx
c001e494:	e8 6f fb ff ff       	call   c001e008 <IDE::enableIRQs(unsigned char, bool)>
c001e499:	c7 04 24 58 56 02 c0 	mov    DWORD PTR [esp],0xc0025658
c001e4a0:	e8 7e ed fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e4a5:	83 c4 10             	add    esp,0x10
c001e4a8:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001e4af:	74 3c                	je     c001e4ed <IDE::open(int, int, void*)+0x49b>
c001e4b1:	83 ec 0c             	sub    esp,0xc
c001e4b4:	53                   	push   ebx
c001e4b5:	6a 01                	push   0x1
c001e4b7:	68 d0 df 01 c0       	push   0xc001dfd0
c001e4bc:	6a 0e                	push   0xe
c001e4be:	53                   	push   ebx
c001e4bf:	e8 e2 b4 fe ff       	call   c00099a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e4c4:	83 c4 14             	add    esp,0x14
c001e4c7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001e4cd:	53                   	push   ebx
c001e4ce:	6a 01                	push   0x1
c001e4d0:	68 ec df 01 c0       	push   0xc001dfec
c001e4d5:	6a 0f                	push   0xf
c001e4d7:	53                   	push   ebx
c001e4d8:	e8 c9 b4 fe ff       	call   c00099a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e4dd:	83 c4 14             	add    esp,0x14
c001e4e0:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001e4e6:	68 ce 32 02 c0       	push   0xc00232ce
c001e4eb:	eb 40                	jmp    c001e52d <IDE::open(int, int, void*)+0x4db>
c001e4ed:	83 ec 0c             	sub    esp,0xc
c001e4f0:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001e4fa:	53                   	push   ebx
c001e4fb:	6a 00                	push   0x0
c001e4fd:	68 d0 df 01 c0       	push   0xc001dfd0
c001e502:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001e508:	53                   	push   ebx
c001e509:	e8 98 b4 fe ff       	call   c00099a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e50e:	83 c4 14             	add    esp,0x14
c001e511:	53                   	push   ebx
c001e512:	6a 00                	push   0x0
c001e514:	68 ec df 01 c0       	push   0xc001dfec
c001e519:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001e51f:	53                   	push   ebx
c001e520:	e8 81 b4 fe ff       	call   c00099a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e525:	83 c4 14             	add    esp,0x14
c001e528:	68 60 3f 02 c0       	push   0xc0023f60
c001e52d:	e8 f1 ec fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e532:	83 c4 10             	add    esp,0x10
c001e535:	83 ec 0c             	sub    esp,0xc
c001e538:	68 5a 56 02 c0       	push   0xc002565a
c001e53d:	e8 e1 ec fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e542:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e544:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e547:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001e54a:	c7 04 24 69 46 02 c0 	mov    DWORD PTR [esp],0xc0024669
c001e551:	e8 cd ec fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e556:	83 c4 0c             	add    esp,0xc
c001e559:	6a 07                	push   0x7
c001e55b:	6a 00                	push   0x0
c001e55d:	53                   	push   ebx
c001e55e:	e8 5d f9 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e563:	83 c4 0c             	add    esp,0xc
c001e566:	6a 07                	push   0x7
c001e568:	6a 01                	push   0x1
c001e56a:	53                   	push   ebx
c001e56b:	e8 50 f9 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e570:	c7 04 24 60 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d60
c001e577:	e8 a7 ec fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e57c:	83 c4 0c             	add    esp,0xc
c001e57f:	6a 01                	push   0x1
c001e581:	6a 00                	push   0x0
c001e583:	53                   	push   ebx
c001e584:	e8 7f fa ff ff       	call   c001e008 <IDE::enableIRQs(unsigned char, bool)>
c001e589:	83 c4 0c             	add    esp,0xc
c001e58c:	6a 01                	push   0x1
c001e58e:	6a 01                	push   0x1
c001e590:	53                   	push   ebx
c001e591:	e8 72 fa ff ff       	call   c001e008 <IDE::enableIRQs(unsigned char, bool)>
c001e596:	c7 04 24 5d 56 02 c0 	mov    DWORD PTR [esp],0xc002565d
c001e59d:	e8 81 ec fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e5a2:	83 c4 20             	add    esp,0x20
c001e5a5:	31 c0                	xor    eax,eax
c001e5a7:	5b                   	pop    ebx
c001e5a8:	5e                   	pop    esi
c001e5a9:	5f                   	pop    edi
c001e5aa:	c3                   	ret    
c001e5ab:	90                   	nop

c001e5ac <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001e5ac:	55                   	push   ebp
c001e5ad:	57                   	push   edi
c001e5ae:	56                   	push   esi
c001e5af:	53                   	push   ebx
c001e5b0:	83 ec 1c             	sub    esp,0x1c
c001e5b3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001e5b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e5bb:	8d 42 f8             	lea    eax,[edx-0x8]
c001e5be:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e5c2:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001e5c6:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001e5ca:	3c 03                	cmp    al,0x3
c001e5cc:	77 5a                	ja     c001e628 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001e5ce:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e5d2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e5d6:	0f b6 db             	movzx  ebx,bl
c001e5d9:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001e5dc:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e5e1:	0c 80                	or     al,0x80
c001e5e3:	50                   	push   eax
c001e5e4:	6a 0c                	push   0xc
c001e5e6:	53                   	push   ebx
c001e5e7:	56                   	push   esi
c001e5e8:	e8 13 f8 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e5ed:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001e5f2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e5f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001e5fa:	0f b6 d2             	movzx  edx,dl
c001e5fd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001e601:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e603:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001e608:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001e60c:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001e610:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001e614:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001e61c:	83 c4 2c             	add    esp,0x2c
c001e61f:	5b                   	pop    ebx
c001e620:	5e                   	pop    esi
c001e621:	5f                   	pop    edi
c001e622:	5d                   	pop    ebp
c001e623:	e9 d8 f7 ff ff       	jmp    c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e628:	0f b6 c2             	movzx  eax,dl
c001e62b:	83 f8 07             	cmp    eax,0x7
c001e62e:	77 12                	ja     c001e642 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001e630:	0f b6 c2             	movzx  eax,dl
c001e633:	0f b6 db             	movzx  ebx,bl
c001e636:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001e63e:	01 c2                	add    edx,eax
c001e640:	eb 2f                	jmp    c001e671 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001e642:	83 f8 0d             	cmp    eax,0xd
c001e645:	77 13                	ja     c001e65a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001e647:	0f b6 db             	movzx  ebx,bl
c001e64a:	0f b6 d2             	movzx  edx,dl
c001e64d:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001e654:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001e658:	eb 17                	jmp    c001e671 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001e65a:	83 f8 15             	cmp    eax,0x15
c001e65d:	77 14                	ja     c001e673 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001e65f:	0f b6 db             	movzx  ebx,bl
c001e662:	0f b6 d2             	movzx  edx,dl
c001e665:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001e66d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001e671:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001e673:	83 c4 1c             	add    esp,0x1c
c001e676:	5b                   	pop    ebx
c001e677:	5e                   	pop    esi
c001e678:	5f                   	pop    edi
c001e679:	5d                   	pop    ebp
c001e67a:	c3                   	ret    
c001e67b:	90                   	nop

c001e67c <IDE::detect()>:
c001e67c:	55                   	push   ebp
c001e67d:	57                   	push   edi
c001e67e:	56                   	push   esi
c001e67f:	53                   	push   ebx
c001e680:	81 ec 28 02 00 00    	sub    esp,0x228
c001e686:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001e68d:	68 5f 56 02 c0       	push   0xc002565f
c001e692:	e8 8c eb fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e697:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001e69d:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001e6a1:	83 c4 10             	add    esp,0x10
c001e6a4:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001e6a9:	0f 85 2f 04 00 00    	jne    c001eade <IDE::detect()+0x462>
c001e6af:	83 ec 0c             	sub    esp,0xc
c001e6b2:	31 f6                	xor    esi,esi
c001e6b4:	68 62 56 02 c0       	push   0xc0025662
c001e6b9:	31 ff                	xor    edi,edi
c001e6bb:	e8 63 eb fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e6c0:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001e6c7:	83 c4 10             	add    esp,0x10
c001e6ca:	83 ec 0c             	sub    esp,0xc
c001e6cd:	68 65 56 02 c0       	push   0xc0025665
c001e6d2:	e8 4c eb fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e6d7:	83 c4 10             	add    esp,0x10
c001e6da:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e6e1:	83 ec 0c             	sub    esp,0xc
c001e6e4:	31 ed                	xor    ebp,ebp
c001e6e6:	68 68 56 02 c0       	push   0xc0025668
c001e6eb:	e8 33 eb fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e6f0:	89 f8                	mov    eax,edi
c001e6f2:	c1 e0 06             	shl    eax,0x6
c001e6f5:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001e6fd:	c7 04 24 6b 56 02 c0 	mov    DWORD PTR [esp],0xc002566b
c001e704:	e8 1a eb fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e709:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001e70d:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001e711:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e715:	c1 e0 04             	shl    eax,0x4
c001e718:	83 c8 a0             	or     eax,0xffffffa0
c001e71b:	0f b6 c0             	movzx  eax,al
c001e71e:	50                   	push   eax
c001e71f:	6a 06                	push   0x6
c001e721:	56                   	push   esi
c001e722:	53                   	push   ebx
c001e723:	e8 d8 f6 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e728:	83 c4 1c             	add    esp,0x1c
c001e72b:	6a 0c                	push   0xc
c001e72d:	56                   	push   esi
c001e72e:	53                   	push   ebx
c001e72f:	e8 8c f7 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e734:	83 c4 0c             	add    esp,0xc
c001e737:	6a 0c                	push   0xc
c001e739:	56                   	push   esi
c001e73a:	53                   	push   ebx
c001e73b:	e8 80 f7 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e740:	83 c4 0c             	add    esp,0xc
c001e743:	6a 0c                	push   0xc
c001e745:	56                   	push   esi
c001e746:	53                   	push   ebx
c001e747:	e8 74 f7 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e74c:	83 c4 0c             	add    esp,0xc
c001e74f:	6a 0c                	push   0xc
c001e751:	56                   	push   esi
c001e752:	53                   	push   ebx
c001e753:	e8 68 f7 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e758:	c7 04 24 6e 56 02 c0 	mov    DWORD PTR [esp],0xc002566e
c001e75f:	e8 bf ea fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e764:	68 ec 00 00 00       	push   0xec
c001e769:	6a 07                	push   0x7
c001e76b:	56                   	push   esi
c001e76c:	53                   	push   ebx
c001e76d:	e8 8e f6 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e772:	83 c4 1c             	add    esp,0x1c
c001e775:	6a 0c                	push   0xc
c001e777:	56                   	push   esi
c001e778:	53                   	push   ebx
c001e779:	e8 42 f7 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e77e:	83 c4 0c             	add    esp,0xc
c001e781:	6a 0c                	push   0xc
c001e783:	56                   	push   esi
c001e784:	53                   	push   ebx
c001e785:	e8 36 f7 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e78a:	83 c4 0c             	add    esp,0xc
c001e78d:	6a 0c                	push   0xc
c001e78f:	56                   	push   esi
c001e790:	53                   	push   ebx
c001e791:	e8 2a f7 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e796:	83 c4 0c             	add    esp,0xc
c001e799:	6a 0c                	push   0xc
c001e79b:	56                   	push   esi
c001e79c:	53                   	push   ebx
c001e79d:	e8 1e f7 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e7a2:	c7 04 24 71 56 02 c0 	mov    DWORD PTR [esp],0xc0025671
c001e7a9:	e8 75 ea fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e7ae:	83 c4 0c             	add    esp,0xc
c001e7b1:	6a 0c                	push   0xc
c001e7b3:	56                   	push   esi
c001e7b4:	53                   	push   ebx
c001e7b5:	e8 06 f7 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e7ba:	83 c4 10             	add    esp,0x10
c001e7bd:	84 c0                	test   al,al
c001e7bf:	75 1f                	jne    c001e7e0 <IDE::detect()+0x164>
c001e7c1:	83 ec 0c             	sub    esp,0xc
c001e7c4:	68 74 56 02 c0       	push   0xc0025674
c001e7c9:	e8 55 ea fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e7ce:	e9 e9 02 00 00       	jmp    c001eabc <IDE::detect()+0x440>
c001e7d3:	a8 80                	test   al,0x80
c001e7d5:	74 21                	je     c001e7f8 <IDE::detect()+0x17c>
c001e7d7:	45                   	inc    ebp
c001e7d8:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001e7de:	7f 1e                	jg     c001e7fe <IDE::detect()+0x182>
c001e7e0:	50                   	push   eax
c001e7e1:	6a 0c                	push   0xc
c001e7e3:	56                   	push   esi
c001e7e4:	53                   	push   ebx
c001e7e5:	e8 d6 f6 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e7ea:	83 c4 10             	add    esp,0x10
c001e7ed:	a8 01                	test   al,0x1
c001e7ef:	74 e2                	je     c001e7d3 <IDE::detect()+0x157>
c001e7f1:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001e7f6:	eb 22                	jmp    c001e81a <IDE::detect()+0x19e>
c001e7f8:	a8 08                	test   al,0x8
c001e7fa:	74 db                	je     c001e7d7 <IDE::detect()+0x15b>
c001e7fc:	eb 17                	jmp    c001e815 <IDE::detect()+0x199>
c001e7fe:	83 ec 0c             	sub    esp,0xc
c001e801:	6a 32                	push   0x32
c001e803:	e8 a0 85 ff ff       	call   c0016da8 <milliTenthSleep(unsigned int)>
c001e808:	83 c4 10             	add    esp,0x10
c001e80b:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001e811:	75 cd                	jne    c001e7e0 <IDE::detect()+0x164>
c001e813:	eb dc                	jmp    c001e7f1 <IDE::detect()+0x175>
c001e815:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001e81a:	83 ec 0c             	sub    esp,0xc
c001e81d:	68 77 56 02 c0       	push   0xc0025677
c001e822:	e8 fc e9 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e827:	83 c4 10             	add    esp,0x10
c001e82a:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001e82f:	74 60                	je     c001e891 <IDE::detect()+0x215>
c001e831:	50                   	push   eax
c001e832:	6a 04                	push   0x4
c001e834:	56                   	push   esi
c001e835:	53                   	push   ebx
c001e836:	e8 85 f6 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e83b:	83 c4 0c             	add    esp,0xc
c001e83e:	89 c5                	mov    ebp,eax
c001e840:	6a 05                	push   0x5
c001e842:	56                   	push   esi
c001e843:	53                   	push   ebx
c001e844:	e8 77 f6 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001e849:	83 c4 10             	add    esp,0x10
c001e84c:	89 e9                	mov    ecx,ebp
c001e84e:	0f b6 c0             	movzx  eax,al
c001e851:	0f b6 e9             	movzx  ebp,cl
c001e854:	83 fd 14             	cmp    ebp,0x14
c001e857:	75 07                	jne    c001e860 <IDE::detect()+0x1e4>
c001e859:	3d eb 00 00 00       	cmp    eax,0xeb
c001e85e:	eb 0e                	jmp    c001e86e <IDE::detect()+0x1f2>
c001e860:	3d 96 00 00 00       	cmp    eax,0x96
c001e865:	0f 85 54 02 00 00    	jne    c001eabf <IDE::detect()+0x443>
c001e86b:	83 fd 69             	cmp    ebp,0x69
c001e86e:	0f 85 4b 02 00 00    	jne    c001eabf <IDE::detect()+0x443>
c001e874:	68 a1 00 00 00       	push   0xa1
c001e879:	6a 07                	push   0x7
c001e87b:	56                   	push   esi
c001e87c:	53                   	push   ebx
c001e87d:	e8 7e f5 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e882:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001e889:	e8 1a 85 ff ff       	call   c0016da8 <milliTenthSleep(unsigned int)>
c001e88e:	83 c4 10             	add    esp,0x10
c001e891:	83 ec 0c             	sub    esp,0xc
c001e894:	89 fd                	mov    ebp,edi
c001e896:	68 7a 56 02 c0       	push   0xc002567a
c001e89b:	c1 e5 06             	shl    ebp,0x6
c001e89e:	e8 80 e9 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e8a3:	01 dd                	add    ebp,ebx
c001e8a5:	8d 54 24 20          	lea    edx,[esp+0x20]
c001e8a9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001e8b0:	52                   	push   edx
c001e8b1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001e8b5:	6a 00                	push   0x0
c001e8b7:	56                   	push   esi
c001e8b8:	53                   	push   ebx
c001e8b9:	e8 ee fc ff ff       	call   c001e5ac <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001e8be:	83 c4 14             	add    esp,0x14
c001e8c1:	68 7e 56 02 c0       	push   0xc002567e
c001e8c6:	e8 58 e9 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e8cb:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001e8d0:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001e8d7:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001e8de:	89 f0                	mov    eax,esi
c001e8e0:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001e8e6:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001e8ea:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001e8f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e8f4:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001e8fb:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001e903:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001e90a:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001e912:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001e918:	c7 04 24 82 56 02 c0 	mov    DWORD PTR [esp],0xc0025682
c001e91f:	e8 ff e8 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e924:	83 c4 10             	add    esp,0x10
c001e927:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001e92e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001e932:	74 09                	je     c001e93d <IDE::detect()+0x2c1>
c001e934:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001e93b:	eb 07                	jmp    c001e944 <IDE::detect()+0x2c8>
c001e93d:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001e944:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e948:	89 f8                	mov    eax,edi
c001e94a:	83 ec 0c             	sub    esp,0xc
c001e94d:	c1 e0 06             	shl    eax,0x6
c001e950:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001e953:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001e959:	68 86 56 02 c0       	push   0xc0025686
c001e95e:	e8 c0 e8 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e963:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e967:	89 e8                	mov    eax,ebp
c001e969:	83 c4 10             	add    esp,0x10
c001e96c:	8d 6a 28             	lea    ebp,[edx+0x28]
c001e96f:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001e972:	83 c0 02             	add    eax,0x2
c001e975:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001e97b:	83 c2 02             	add    edx,0x2
c001e97e:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001e981:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001e987:	39 d5                	cmp    ebp,edx
c001e989:	75 e4                	jne    c001e96f <IDE::detect()+0x2f3>
c001e98b:	89 f8                	mov    eax,edi
c001e98d:	c1 e0 06             	shl    eax,0x6
c001e990:	01 d8                	add    eax,ebx
c001e992:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001e999:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e9a0:	c1 ea 09             	shr    edx,0x9
c001e9a3:	83 e2 01             	and    edx,0x1
c001e9a6:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001e9ad:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e9b3:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001e9b7:	74 0c                	je     c001e9c5 <IDE::detect()+0x349>
c001e9b9:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001e9c2:	0f 95 c2             	setne  dl
c001e9c5:	83 ec 0c             	sub    esp,0xc
c001e9c8:	89 fd                	mov    ebp,edi
c001e9ca:	c1 e5 06             	shl    ebp,0x6
c001e9cd:	01 dd                	add    ebp,ebx
c001e9cf:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001e9d5:	68 8a 56 02 c0       	push   0xc002568a
c001e9da:	e8 44 e8 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001e9df:	83 c4 10             	add    esp,0x10
c001e9e2:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001e9e7:	75 66                	jne    c001ea4f <IDE::detect()+0x3d3>
c001e9e9:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001e9f0:	0f 84 b8 00 00 00    	je     c001eaae <IDE::detect()+0x432>
c001e9f6:	83 ec 0c             	sub    esp,0xc
c001e9f9:	68 8e 56 02 c0       	push   0xc002568e
c001e9fe:	e8 20 e8 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001ea03:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001ea0a:	e8 4c 12 ff ff       	call   c000fc5b <malloc>
c001ea0f:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea12:	89 c5                	mov    ebp,eax
c001ea14:	e8 43 05 00 00       	call   c001ef5c <ATA::ATA()>
c001ea19:	c7 04 24 92 56 02 c0 	mov    DWORD PTR [esp],0xc0025692
c001ea20:	e8 fe e7 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001ea25:	59                   	pop    ecx
c001ea26:	58                   	pop    eax
c001ea27:	55                   	push   ebp
c001ea28:	53                   	push   ebx
c001ea29:	e8 cc af fe ff       	call   c00099fa <Device::addChild(Device*)>
c001ea2e:	c7 04 24 97 56 02 c0 	mov    DWORD PTR [esp],0xc0025697
c001ea35:	e8 e9 e7 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001ea3a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ea3d:	53                   	push   ebx
c001ea3e:	57                   	push   edi
c001ea3f:	6a 00                	push   0x0
c001ea41:	55                   	push   ebp
c001ea42:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ea45:	83 c4 14             	add    esp,0x14
c001ea48:	68 9c 56 02 c0       	push   0xc002569c
c001ea4d:	eb 57                	jmp    c001eaa6 <IDE::detect()+0x42a>
c001ea4f:	83 ec 0c             	sub    esp,0xc
c001ea52:	68 a1 56 02 c0       	push   0xc00256a1
c001ea57:	e8 c7 e7 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001ea5c:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001ea63:	e8 f3 11 ff ff       	call   c000fc5b <malloc>
c001ea68:	89 04 24             	mov    DWORD PTR [esp],eax
c001ea6b:	89 c5                	mov    ebp,eax
c001ea6d:	e8 98 0c 00 00       	call   c001f70a <ATAPI::ATAPI()>
c001ea72:	c7 04 24 a7 56 02 c0 	mov    DWORD PTR [esp],0xc00256a7
c001ea79:	e8 a5 e7 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001ea7e:	58                   	pop    eax
c001ea7f:	5a                   	pop    edx
c001ea80:	55                   	push   ebp
c001ea81:	53                   	push   ebx
c001ea82:	e8 73 af fe ff       	call   c00099fa <Device::addChild(Device*)>
c001ea87:	c7 04 24 ae 56 02 c0 	mov    DWORD PTR [esp],0xc00256ae
c001ea8e:	e8 90 e7 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001ea93:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ea96:	53                   	push   ebx
c001ea97:	57                   	push   edi
c001ea98:	6a 00                	push   0x0
c001ea9a:	55                   	push   ebp
c001ea9b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ea9e:	83 c4 14             	add    esp,0x14
c001eaa1:	68 b5 56 02 c0       	push   0xc00256b5
c001eaa6:	e8 78 e7 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001eaab:	83 c4 10             	add    esp,0x10
c001eaae:	83 ec 0c             	sub    esp,0xc
c001eab1:	47                   	inc    edi
c001eab2:	68 bc 56 02 c0       	push   0xc00256bc
c001eab7:	e8 67 e7 fe ff       	call   c000d223 <KeSetBootMessage(char const*)>
c001eabc:	83 c4 10             	add    esp,0x10
c001eabf:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001eac3:	74 0c                	je     c001ead1 <IDE::detect()+0x455>
c001eac5:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001eacc:	e9 10 fc ff ff       	jmp    c001e6e1 <IDE::detect()+0x65>
c001ead1:	4e                   	dec    esi
c001ead2:	74 0a                	je     c001eade <IDE::detect()+0x462>
c001ead4:	be 01 00 00 00       	mov    esi,0x1
c001ead9:	e9 ec fb ff ff       	jmp    c001e6ca <IDE::detect()+0x4e>
c001eade:	81 c4 1c 02 00 00    	add    esp,0x21c
c001eae4:	5b                   	pop    ebx
c001eae5:	5e                   	pop    esi
c001eae6:	5f                   	pop    edi
c001eae7:	5d                   	pop    ebp
c001eae8:	c3                   	ret    
c001eae9:	90                   	nop

c001eaea <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001eaea:	55                   	push   ebp
c001eaeb:	57                   	push   edi
c001eaec:	56                   	push   esi
c001eaed:	53                   	push   ebx
c001eaee:	83 ec 1c             	sub    esp,0x1c
c001eaf1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001eaf5:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001eaf9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001eafd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001eb01:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001eb05:	88 c3                	mov    bl,al
c001eb07:	25 ff 00 00 00       	and    eax,0xff
c001eb0c:	0f 84 88 00 00 00    	je     c001eb9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001eb12:	83 ec 0c             	sub    esp,0xc
c001eb15:	89 c7                	mov    edi,eax
c001eb17:	68 c0 56 02 c0       	push   0xc00256c0
c001eb1c:	e8 43 84 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001eb21:	83 c4 10             	add    esp,0x10
c001eb24:	83 ff 01             	cmp    edi,0x1
c001eb27:	74 6b                	je     c001eb94 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001eb29:	83 ff 02             	cmp    edi,0x2
c001eb2c:	75 58                	jne    c001eb86 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001eb2e:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001eb33:	01 ff                	add    edi,edi
c001eb35:	50                   	push   eax
c001eb36:	09 fe                	or     esi,edi
c001eb38:	6a 01                	push   0x1
c001eb3a:	89 f0                	mov    eax,esi
c001eb3c:	0f b6 f0             	movzx  esi,al
c001eb3f:	c1 e6 06             	shl    esi,0x6
c001eb42:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001eb4a:	50                   	push   eax
c001eb4b:	55                   	push   ebp
c001eb4c:	e8 6f f3 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001eb51:	83 c4 10             	add    esp,0x10
c001eb54:	a8 01                	test   al,0x1
c001eb56:	74 02                	je     c001eb5a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001eb58:	b3 07                	mov    bl,0x7
c001eb5a:	a8 02                	test   al,0x2
c001eb5c:	74 02                	je     c001eb60 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001eb5e:	b3 03                	mov    bl,0x3
c001eb60:	a8 04                	test   al,0x4
c001eb62:	74 02                	je     c001eb66 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001eb64:	b3 14                	mov    bl,0x14
c001eb66:	a8 08                	test   al,0x8
c001eb68:	74 02                	je     c001eb6c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001eb6a:	b3 03                	mov    bl,0x3
c001eb6c:	a8 10                	test   al,0x10
c001eb6e:	74 02                	je     c001eb72 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001eb70:	b3 15                	mov    bl,0x15
c001eb72:	a8 20                	test   al,0x20
c001eb74:	74 02                	je     c001eb78 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001eb76:	b3 03                	mov    bl,0x3
c001eb78:	a8 40                	test   al,0x40
c001eb7a:	74 02                	je     c001eb7e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001eb7c:	b3 16                	mov    bl,0x16
c001eb7e:	a8 80                	test   al,0x80
c001eb80:	74 18                	je     c001eb9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001eb82:	b3 0d                	mov    bl,0xd
c001eb84:	eb 14                	jmp    c001eb9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001eb86:	83 ff 03             	cmp    edi,0x3
c001eb89:	74 0d                	je     c001eb98 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001eb8b:	83 ff 04             	cmp    edi,0x4
c001eb8e:	75 0a                	jne    c001eb9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001eb90:	b3 08                	mov    bl,0x8
c001eb92:	eb 06                	jmp    c001eb9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001eb94:	b3 13                	mov    bl,0x13
c001eb96:	eb 02                	jmp    c001eb9a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001eb98:	b3 17                	mov    bl,0x17
c001eb9a:	83 c4 1c             	add    esp,0x1c
c001eb9d:	88 d8                	mov    al,bl
c001eb9f:	5b                   	pop    ebx
c001eba0:	5e                   	pop    esi
c001eba1:	5f                   	pop    edi
c001eba2:	5d                   	pop    ebp
c001eba3:	c3                   	ret    

c001eba4 <IDE::polling(unsigned char, unsigned int)>:
c001eba4:	57                   	push   edi
c001eba5:	56                   	push   esi
c001eba6:	53                   	push   ebx
c001eba7:	bb 04 00 00 00       	mov    ebx,0x4
c001ebac:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001ebb0:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001ebb5:	52                   	push   edx
c001ebb6:	6a 0c                	push   0xc
c001ebb8:	56                   	push   esi
c001ebb9:	57                   	push   edi
c001ebba:	e8 01 f3 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001ebbf:	83 c4 10             	add    esp,0x10
c001ebc2:	4b                   	dec    ebx
c001ebc3:	75 f0                	jne    c001ebb5 <IDE::polling(unsigned char, unsigned int)+0x11>
c001ebc5:	bb a0 86 01 00       	mov    ebx,0x186a0
c001ebca:	50                   	push   eax
c001ebcb:	6a 0c                	push   0xc
c001ebcd:	56                   	push   esi
c001ebce:	57                   	push   edi
c001ebcf:	e8 ec f2 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001ebd4:	83 c4 10             	add    esp,0x10
c001ebd7:	a8 01                	test   al,0x1
c001ebd9:	75 17                	jne    c001ebf2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ebdb:	a8 20                	test   al,0x20
c001ebdd:	75 0f                	jne    c001ebee <IDE::polling(unsigned char, unsigned int)+0x4a>
c001ebdf:	4b                   	dec    ebx
c001ebe0:	74 10                	je     c001ebf2 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001ebe2:	a8 80                	test   al,0x80
c001ebe4:	75 e4                	jne    c001ebca <IDE::polling(unsigned char, unsigned int)+0x26>
c001ebe6:	a8 08                	test   al,0x8
c001ebe8:	74 e0                	je     c001ebca <IDE::polling(unsigned char, unsigned int)+0x26>
c001ebea:	31 c0                	xor    eax,eax
c001ebec:	eb 06                	jmp    c001ebf4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ebee:	b0 01                	mov    al,0x1
c001ebf0:	eb 02                	jmp    c001ebf4 <IDE::polling(unsigned char, unsigned int)+0x50>
c001ebf2:	b0 02                	mov    al,0x2
c001ebf4:	5b                   	pop    ebx
c001ebf5:	5e                   	pop    esi
c001ebf6:	5f                   	pop    edi
c001ebf7:	c3                   	ret    

c001ebf8 <SATABus::close(int, int, void*)>:
c001ebf8:	31 c0                	xor    eax,eax
c001ebfa:	c3                   	ret    
c001ebfb:	90                   	nop

c001ebfc <SATABus::detect()>:
c001ebfc:	c3                   	ret    
c001ebfd:	90                   	nop

c001ebfe <SATABus::SATABus()>:
c001ebfe:	83 ec 0c             	sub    esp,0xc
c001ec01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec05:	83 ec 08             	sub    esp,0x8
c001ec08:	68 f8 56 02 c0       	push   0xc00256f8
c001ec0d:	50                   	push   eax
c001ec0e:	e8 41 b1 fe ff       	call   c0009d54 <HardDiskController::HardDiskController(char const*)>
c001ec13:	83 c4 10             	add    esp,0x10
c001ec16:	ba 24 57 02 c0       	mov    edx,0xc0025724
c001ec1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec1f:	89 10                	mov    DWORD PTR [eax],edx
c001ec21:	83 ec 0c             	sub    esp,0xc
c001ec24:	6a 50                	push   0x50
c001ec26:	e8 49 16 ff ff       	call   c0010274 <Phys::allocateContiguousPages(int)>
c001ec2b:	83 c4 10             	add    esp,0x10
c001ec2e:	89 c2                	mov    edx,eax
c001ec30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec34:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001ec3a:	83 ec 0c             	sub    esp,0xc
c001ec3d:	6a 50                	push   0x50
c001ec3f:	e8 51 47 ff ff       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c001ec44:	83 c4 10             	add    esp,0x10
c001ec47:	89 c2                	mov    edx,eax
c001ec49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ec4d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001ec53:	a1 50 e2 02 c0       	mov    eax,ds:0xc002e250
c001ec58:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec5c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001ec62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ec66:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001ec6c:	83 ec 0c             	sub    esp,0xc
c001ec6f:	6a 03                	push   0x3
c001ec71:	6a 50                	push   0x50
c001ec73:	51                   	push   ecx
c001ec74:	52                   	push   edx
c001ec75:	50                   	push   eax
c001ec76:	e8 e7 4f ff ff       	call   c0013c62 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ec7b:	83 c4 20             	add    esp,0x20
c001ec7e:	90                   	nop
c001ec7f:	83 c4 0c             	add    esp,0xc
c001ec82:	c3                   	ret    
c001ec83:	90                   	nop

c001ec84 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001ec84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ec88:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001ec8b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001ec8e:	09 c2                	or     edx,eax
c001ec90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ec94:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ec9a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ec9c:	31 c0                	xor    eax,eax
c001ec9e:	c1 e9 08             	shr    ecx,0x8
c001eca1:	83 e1 0f             	and    ecx,0xf
c001eca4:	39 c8                	cmp    eax,ecx
c001eca6:	74 0a                	je     c001ecb2 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001eca8:	f6 c2 01             	test   dl,0x1
c001ecab:	74 08                	je     c001ecb5 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001ecad:	d1 ea                	shr    edx,1
c001ecaf:	40                   	inc    eax
c001ecb0:	eb f2                	jmp    c001eca4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001ecb2:	83 c8 ff             	or     eax,0xffffffff
c001ecb5:	c3                   	ret    

c001ecb6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001ecb6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ecba:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001ecbd:	89 c2                	mov    edx,eax
c001ecbf:	c1 ea 08             	shr    edx,0x8
c001ecc2:	83 e2 0f             	and    edx,0xf
c001ecc5:	4a                   	dec    edx
c001ecc6:	75 32                	jne    c001ecfa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ecc8:	83 e0 0f             	and    eax,0xf
c001eccb:	83 f8 03             	cmp    eax,0x3
c001ecce:	75 2a                	jne    c001ecfa <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001ecd0:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001ecd3:	b8 02 00 00 00       	mov    eax,0x2
c001ecd8:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001ecde:	74 1c                	je     c001ecfc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001ece0:	b8 04 00 00 00       	mov    eax,0x4
c001ece5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001eceb:	74 0f                	je     c001ecfc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001eced:	31 c0                	xor    eax,eax
c001ecef:	83 fa 03             	cmp    edx,0x3
c001ecf2:	0f 94 c0             	sete   al
c001ecf5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001ecf9:	c3                   	ret    
c001ecfa:	31 c0                	xor    eax,eax
c001ecfc:	c3                   	ret    
c001ecfd:	90                   	nop

c001ecfe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001ecfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed02:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed05:	0f ba e2 0f          	bt     edx,0xf
c001ed09:	72 f7                	jb     c001ed02 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001ed0b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed0e:	83 ca 10             	or     edx,0x10
c001ed11:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ed14:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed17:	83 ca 01             	or     edx,0x1
c001ed1a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ed1d:	c3                   	ret    

c001ed1e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001ed1e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ed22:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed25:	83 e2 fe             	and    edx,0xfffffffe
c001ed28:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ed2b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed2e:	83 e2 ef             	and    edx,0xffffffef
c001ed31:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ed34:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed37:	0f ba e2 0e          	bt     edx,0xe
c001ed3b:	72 f7                	jb     c001ed34 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ed3d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed40:	0f ba e2 0f          	bt     edx,0xf
c001ed44:	72 ee                	jb     c001ed34 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001ed46:	c3                   	ret    
c001ed47:	90                   	nop

c001ed48 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001ed48:	55                   	push   ebp
c001ed49:	57                   	push   edi
c001ed4a:	56                   	push   esi
c001ed4b:	53                   	push   ebx
c001ed4c:	83 ec 1c             	sub    esp,0x1c
c001ed4f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001ed53:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001ed57:	53                   	push   ebx
c001ed58:	56                   	push   esi
c001ed59:	e8 c0 ff ff ff       	call   c001ed1e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ed5e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001ed62:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001ed68:	83 ec 0c             	sub    esp,0xc
c001ed6b:	c1 e5 0a             	shl    ebp,0xa
c001ed6e:	01 e8                	add    eax,ebp
c001ed70:	89 03                	mov    DWORD PTR [ebx],eax
c001ed72:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ed74:	68 00 04 00 00       	push   0x400
c001ed79:	6a 00                	push   0x0
c001ed7b:	50                   	push   eax
c001ed7c:	e8 6f 17 fe ff       	call   c00004f0 <memset>
c001ed81:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001ed87:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001ed8b:	01 e8                	add    eax,ebp
c001ed8d:	83 c4 1c             	add    esp,0x1c
c001ed90:	89 03                	mov    DWORD PTR [ebx],eax
c001ed92:	c1 e2 08             	shl    edx,0x8
c001ed95:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001ed9c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001eda2:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001eda8:	01 f8                	add    eax,edi
c001edaa:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001edad:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001edb0:	68 00 01 00 00       	push   0x100
c001edb5:	6a 00                	push   0x0
c001edb7:	50                   	push   eax
c001edb8:	e8 33 17 fe ff       	call   c00004f0 <memset>
c001edbd:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001edc3:	01 fa                	add    edx,edi
c001edc5:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001edc9:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001edcc:	c1 e7 0d             	shl    edi,0xd
c001edcf:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001edd6:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001eddc:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001ede2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ede6:	31 ff                	xor    edi,edi
c001ede8:	83 c4 10             	add    esp,0x10
c001edeb:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001edf1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001edf5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001edfb:	83 c5 20             	add    ebp,0x20
c001edfe:	01 f8                	add    eax,edi
c001ee00:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ee03:	52                   	push   edx
c001ee04:	68 00 01 00 00       	push   0x100
c001ee09:	6a 00                	push   0x0
c001ee0b:	50                   	push   eax
c001ee0c:	e8 df 16 fe ff       	call   c00004f0 <memset>
c001ee11:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ee15:	83 c4 10             	add    esp,0x10
c001ee18:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001ee1e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001ee25:	01 f8                	add    eax,edi
c001ee27:	81 c7 00 01 00 00    	add    edi,0x100
c001ee2d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001ee30:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001ee36:	75 b3                	jne    c001edeb <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001ee38:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ee3f:	50                   	push   eax
c001ee40:	50                   	push   eax
c001ee41:	53                   	push   ebx
c001ee42:	56                   	push   esi
c001ee43:	e8 b6 fe ff ff       	call   c001ecfe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ee48:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001ee4f:	83 c4 2c             	add    esp,0x2c
c001ee52:	5b                   	pop    ebx
c001ee53:	5e                   	pop    esi
c001ee54:	5f                   	pop    edi
c001ee55:	5d                   	pop    ebp
c001ee56:	c3                   	ret    
c001ee57:	90                   	nop

c001ee58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001ee58:	55                   	push   ebp
c001ee59:	57                   	push   edi
c001ee5a:	56                   	push   esi
c001ee5b:	53                   	push   ebx
c001ee5c:	31 db                	xor    ebx,ebx
c001ee5e:	83 ec 0c             	sub    esp,0xc
c001ee61:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ee65:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001ee69:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001ee6c:	f7 c7 01 00 00 00    	test   edi,0x1
c001ee72:	74 7a                	je     c001eeee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001ee74:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001ee78:	89 d8                	mov    eax,ebx
c001ee7a:	c1 e0 07             	shl    eax,0x7
c001ee7d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001ee84:	55                   	push   ebp
c001ee85:	56                   	push   esi
c001ee86:	e8 2b fe ff ff       	call   c001ecb6 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001ee8b:	5a                   	pop    edx
c001ee8c:	83 f8 01             	cmp    eax,0x1
c001ee8f:	59                   	pop    ecx
c001ee90:	75 21                	jne    c001eeb3 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001ee92:	50                   	push   eax
c001ee93:	53                   	push   ebx
c001ee94:	55                   	push   ebp
c001ee95:	56                   	push   esi
c001ee96:	e8 ad fe ff ff       	call   c001ed48 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001ee9b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001eea2:	e8 b4 0d ff ff       	call   c000fc5b <malloc>
c001eea7:	89 c5                	mov    ebp,eax
c001eea9:	89 04 24             	mov    DWORD PTR [esp],eax
c001eeac:	e8 25 0f 00 00       	call   c001fdd6 <SATA::SATA()>
c001eeb1:	eb 24                	jmp    c001eed7 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001eeb3:	83 f8 04             	cmp    eax,0x4
c001eeb6:	75 36                	jne    c001eeee <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001eeb8:	51                   	push   ecx
c001eeb9:	53                   	push   ebx
c001eeba:	55                   	push   ebp
c001eebb:	56                   	push   esi
c001eebc:	e8 87 fe ff ff       	call   c001ed48 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001eec1:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001eec8:	e8 8e 0d ff ff       	call   c000fc5b <malloc>
c001eecd:	89 c5                	mov    ebp,eax
c001eecf:	89 04 24             	mov    DWORD PTR [esp],eax
c001eed2:	e8 97 12 00 00       	call   c002016e <SATAPI::SATAPI()>
c001eed7:	58                   	pop    eax
c001eed8:	5a                   	pop    edx
c001eed9:	55                   	push   ebp
c001eeda:	56                   	push   esi
c001eedb:	e8 1a ab fe ff       	call   c00099fa <Device::addChild(Device*)>
c001eee0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001eee3:	56                   	push   esi
c001eee4:	6a 00                	push   0x0
c001eee6:	53                   	push   ebx
c001eee7:	55                   	push   ebp
c001eee8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001eeeb:	83 c4 20             	add    esp,0x20
c001eeee:	d1 ef                	shr    edi,1
c001eef0:	43                   	inc    ebx
c001eef1:	83 fb 20             	cmp    ebx,0x20
c001eef4:	0f 85 72 ff ff ff    	jne    c001ee6c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001eefa:	83 c4 0c             	add    esp,0xc
c001eefd:	5b                   	pop    ebx
c001eefe:	5e                   	pop    esi
c001eeff:	5f                   	pop    edi
c001ef00:	5d                   	pop    ebp
c001ef01:	c3                   	ret    

c001ef02 <SATABus::open(int, int, void*)>:
c001ef02:	53                   	push   ebx
c001ef03:	83 ec 08             	sub    esp,0x8
c001ef06:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef0a:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001ef10:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ef16:	e8 05 7a ff ff       	call   c0016920 <KeDisablePreemption()>
c001ef1b:	52                   	push   edx
c001ef1c:	52                   	push   edx
c001ef1d:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001ef23:	53                   	push   ebx
c001ef24:	e8 2f ff ff ff       	call   c001ee58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001ef29:	e8 1a 7a ff ff       	call   c0016948 <KeRestorePreemption()>
c001ef2e:	31 c0                	xor    eax,eax
c001ef30:	83 c4 18             	add    esp,0x18
c001ef33:	5b                   	pop    ebx
c001ef34:	c3                   	ret    
c001ef35:	90                   	nop

c001ef36 <ATA::close(int, int, void*)>:
c001ef36:	83 ec 0c             	sub    esp,0xc
c001ef39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef3d:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001ef43:	85 c0                	test   eax,eax
c001ef45:	74 0c                	je     c001ef53 <ATA::close(int, int, void*)+0x1d>
c001ef47:	83 ec 0c             	sub    esp,0xc
c001ef4a:	8b 10                	mov    edx,DWORD PTR [eax]
c001ef4c:	50                   	push   eax
c001ef4d:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ef50:	83 c4 10             	add    esp,0x10
c001ef53:	31 c0                	xor    eax,eax
c001ef55:	83 c4 0c             	add    esp,0xc
c001ef58:	c3                   	ret    
c001ef59:	90                   	nop

c001ef5a <ATA::powerSaving(PowerSavingLevel)>:
c001ef5a:	c3                   	ret    
c001ef5b:	90                   	nop

c001ef5c <ATA::ATA()>:
c001ef5c:	83 ec 0c             	sub    esp,0xc
c001ef5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef63:	83 ec 04             	sub    esp,0x4
c001ef66:	68 00 02 00 00       	push   0x200
c001ef6b:	68 a5 58 02 c0       	push   0xc00258a5
c001ef70:	50                   	push   eax
c001ef71:	e8 68 ae fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ef76:	83 c4 10             	add    esp,0x10
c001ef79:	ba 0c 58 02 c0       	mov    edx,0xc002580c
c001ef7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ef82:	89 10                	mov    DWORD PTR [eax],edx
c001ef84:	90                   	nop
c001ef85:	83 c4 0c             	add    esp,0xc
c001ef88:	c3                   	ret    
c001ef89:	90                   	nop

c001ef8a <ATA::flush(bool)>:
c001ef8a:	53                   	push   ebx
c001ef8b:	83 ec 08             	sub    esp,0x8
c001ef8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ef92:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001ef97:	83 f8 01             	cmp    eax,0x1
c001ef9a:	19 c0                	sbb    eax,eax
c001ef9c:	83 e0 fd             	and    eax,0xfffffffd
c001ef9f:	05 ea 00 00 00       	add    eax,0xea
c001efa4:	50                   	push   eax
c001efa5:	6a 07                	push   0x7
c001efa7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001efae:	50                   	push   eax
c001efaf:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001efb5:	e8 46 ee ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001efba:	83 c4 0c             	add    esp,0xc
c001efbd:	6a 00                	push   0x0
c001efbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001efc6:	50                   	push   eax
c001efc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001efcd:	e8 d2 fb ff ff       	call   c001eba4 <IDE::polling(unsigned char, unsigned int)>
c001efd2:	83 c4 18             	add    esp,0x18
c001efd5:	5b                   	pop    ebx
c001efd6:	c3                   	ret    
c001efd7:	90                   	nop

c001efd8 <ATA::readyForCommand()>:
c001efd8:	56                   	push   esi
c001efd9:	53                   	push   ebx
c001efda:	53                   	push   ebx
c001efdb:	31 db                	xor    ebx,ebx
c001efdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001efe1:	51                   	push   ecx
c001efe2:	6a 0c                	push   0xc
c001efe4:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001efeb:	50                   	push   eax
c001efec:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001eff2:	e8 c9 ee ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001eff7:	83 c4 10             	add    esp,0x10
c001effa:	a8 88                	test   al,0x88
c001effc:	74 1f                	je     c001f01d <ATA::readyForCommand()+0x45>
c001effe:	43                   	inc    ebx
c001efff:	83 fb 63             	cmp    ebx,0x63
c001f002:	7e dd                	jle    c001efe1 <ATA::readyForCommand()+0x9>
c001f004:	83 ec 0c             	sub    esp,0xc
c001f007:	6a 0a                	push   0xa
c001f009:	e8 9a 7d ff ff       	call   c0016da8 <milliTenthSleep(unsigned int)>
c001f00e:	83 c4 10             	add    esp,0x10
c001f011:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001f017:	75 c8                	jne    c001efe1 <ATA::readyForCommand()+0x9>
c001f019:	31 c0                	xor    eax,eax
c001f01b:	eb 02                	jmp    c001f01f <ATA::readyForCommand()+0x47>
c001f01d:	b0 01                	mov    al,0x1
c001f01f:	5a                   	pop    edx
c001f020:	5b                   	pop    ebx
c001f021:	5e                   	pop    esi
c001f022:	c3                   	ret    
c001f023:	90                   	nop

c001f024 <ATA::access(unsigned long long, int, void*, bool)>:
c001f024:	55                   	push   ebp
c001f025:	57                   	push   edi
c001f026:	56                   	push   esi
c001f027:	53                   	push   ebx
c001f028:	83 ec 2c             	sub    esp,0x2c
c001f02b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f02f:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f033:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f037:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001f03b:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f03f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001f043:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001f047:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001f04d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f051:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f057:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f05b:	c1 e0 06             	shl    eax,0x6
c001f05e:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001f066:	74 5d                	je     c001f0c5 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001f068:	89 fa                	mov    edx,edi
c001f06a:	89 f0                	mov    eax,esi
c001f06c:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001f070:	c1 ea 1c             	shr    edx,0x1c
c001f073:	89 d1                	mov    ecx,edx
c001f075:	09 c1                	or     ecx,eax
c001f077:	74 25                	je     c001f09e <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001f079:	31 ed                	xor    ebp,ebp
c001f07b:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001f082:	89 fa                	mov    edx,edi
c001f084:	89 f0                	mov    eax,esi
c001f086:	0f ad d0             	shrd   eax,edx,cl
c001f089:	d3 ea                	shr    edx,cl
c001f08b:	f6 c1 20             	test   cl,0x20
c001f08e:	74 02                	je     c001f092 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001f090:	89 d0                	mov    eax,edx
c001f092:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001f096:	45                   	inc    ebp
c001f097:	83 fd 06             	cmp    ebp,0x6
c001f09a:	75 df                	jne    c001f07b <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001f09c:	eb 76                	jmp    c001f114 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001f09e:	89 f0                	mov    eax,esi
c001f0a0:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001f0a5:	89 fa                	mov    edx,edi
c001f0a7:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f0ae:	0f ac d0 10          	shrd   eax,edx,0x10
c001f0b2:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f0b7:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001f0bb:	c1 ee 18             	shr    esi,0x18
c001f0be:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f0c3:	eb 56                	jmp    c001f11b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001f0c5:	6a 00                	push   0x0
c001f0c7:	6a 3f                	push   0x3f
c001f0c9:	57                   	push   edi
c001f0ca:	56                   	push   esi
c001f0cb:	e8 24 25 00 00       	call   c00215f4 <__umoddi3>
c001f0d0:	83 c4 10             	add    esp,0x10
c001f0d3:	40                   	inc    eax
c001f0d4:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001f0d8:	6a 00                	push   0x0
c001f0da:	68 f0 03 00 00       	push   0x3f0
c001f0df:	57                   	push   edi
c001f0e0:	56                   	push   esi
c001f0e1:	e8 0e 24 00 00       	call   c00214f4 <__udivdi3>
c001f0e6:	83 c4 10             	add    esp,0x10
c001f0e9:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001f0ee:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001f0f5:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001f0fa:	6a 00                	push   0x0
c001f0fc:	6a 3f                	push   0x3f
c001f0fe:	57                   	push   edi
c001f0ff:	56                   	push   esi
c001f100:	e8 ef 23 00 00       	call   c00214f4 <__udivdi3>
c001f105:	83 c4 10             	add    esp,0x10
c001f108:	83 e0 0f             	and    eax,0xf
c001f10b:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f110:	89 c6                	mov    esi,eax
c001f112:	eb 07                	jmp    c001f11b <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001f114:	31 f6                	xor    esi,esi
c001f116:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001f11b:	55                   	push   ebp
c001f11c:	6a 00                	push   0x0
c001f11e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f125:	50                   	push   eax
c001f126:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001f12a:	e8 d9 ee ff ff       	call   c001e008 <IDE::enableIRQs(unsigned char, bool)>
c001f12f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f132:	e8 a1 fe ff ff       	call   c001efd8 <ATA::readyForCommand()>
c001f137:	83 c4 10             	add    esp,0x10
c001f13a:	84 c0                	test   al,al
c001f13c:	75 0a                	jne    c001f148 <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001f13e:	be 01 00 00 00       	mov    esi,0x1
c001f143:	e9 c2 02 00 00       	jmp    c001f40a <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001f148:	fa                   	cli    
c001f149:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f14f:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001f155:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001f15a:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f160:	75 0a                	jne    c001f16c <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001f162:	c1 e0 04             	shl    eax,0x4
c001f165:	09 c6                	or     esi,eax
c001f167:	83 ce a0             	or     esi,0xffffffa0
c001f16a:	eb 08                	jmp    c001f174 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001f16c:	c1 e0 04             	shl    eax,0x4
c001f16f:	09 c6                	or     esi,eax
c001f171:	83 ce e0             	or     esi,0xffffffe0
c001f174:	89 f0                	mov    eax,esi
c001f176:	0f b6 d2             	movzx  edx,dl
c001f179:	0f b6 f0             	movzx  esi,al
c001f17c:	56                   	push   esi
c001f17d:	6a 06                	push   0x6
c001f17f:	52                   	push   edx
c001f180:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f186:	e8 75 ec ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f18b:	83 c4 10             	add    esp,0x10
c001f18e:	6a 00                	push   0x0
c001f190:	6a 01                	push   0x1
c001f192:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f199:	50                   	push   eax
c001f19a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f1a0:	e8 5b ec ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1a5:	83 c4 10             	add    esp,0x10
c001f1a8:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001f1ad:	83 f8 02             	cmp    eax,0x2
c001f1b0:	75 6e                	jne    c001f220 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001f1b2:	6a 00                	push   0x0
c001f1b4:	6a 08                	push   0x8
c001f1b6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f1bd:	50                   	push   eax
c001f1be:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f1c4:	e8 37 ec ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1c9:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001f1ce:	50                   	push   eax
c001f1cf:	6a 09                	push   0x9
c001f1d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f1d8:	50                   	push   eax
c001f1d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f1df:	e8 1c ec ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f1e4:	83 c4 20             	add    esp,0x20
c001f1e7:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001f1ec:	50                   	push   eax
c001f1ed:	6a 0a                	push   0xa
c001f1ef:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f1f6:	50                   	push   eax
c001f1f7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f1fd:	e8 fe eb ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f202:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001f207:	50                   	push   eax
c001f208:	6a 0b                	push   0xb
c001f20a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f211:	50                   	push   eax
c001f212:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f218:	e8 e3 eb ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f21d:	83 c4 20             	add    esp,0x20
c001f220:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001f225:	50                   	push   eax
c001f226:	6a 02                	push   0x2
c001f228:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f22f:	50                   	push   eax
c001f230:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f236:	e8 c5 eb ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f23b:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001f240:	50                   	push   eax
c001f241:	6a 03                	push   0x3
c001f243:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f24a:	50                   	push   eax
c001f24b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f251:	e8 aa eb ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f256:	83 c4 20             	add    esp,0x20
c001f259:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001f25e:	50                   	push   eax
c001f25f:	6a 04                	push   0x4
c001f261:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f268:	50                   	push   eax
c001f269:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f26f:	e8 8c eb ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f274:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001f279:	50                   	push   eax
c001f27a:	6a 05                	push   0x5
c001f27c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f283:	50                   	push   eax
c001f284:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f28a:	e8 71 eb ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f28f:	83 c4 20             	add    esp,0x20
c001f292:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f297:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001f29c:	74 13                	je     c001f2b1 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001f29e:	83 f8 02             	cmp    eax,0x2
c001f2a1:	74 20                	je     c001f2c3 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001f2a3:	48                   	dec    eax
c001f2a4:	0f 85 94 fe ff ff    	jne    c001f13e <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001f2aa:	b8 30 00 00 00       	mov    eax,0x30
c001f2af:	eb 1e                	jmp    c001f2cf <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f2b1:	83 f8 02             	cmp    eax,0x2
c001f2b4:	74 14                	je     c001f2ca <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001f2b6:	48                   	dec    eax
c001f2b7:	b8 20 00 00 00       	mov    eax,0x20
c001f2bc:	74 11                	je     c001f2cf <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f2be:	e9 7b fe ff ff       	jmp    c001f13e <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001f2c3:	b8 34 00 00 00       	mov    eax,0x34
c001f2c8:	eb 05                	jmp    c001f2cf <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001f2ca:	b8 24 00 00 00       	mov    eax,0x24
c001f2cf:	50                   	push   eax
c001f2d0:	6a 07                	push   0x7
c001f2d2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f2d9:	50                   	push   eax
c001f2da:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f2e0:	e8 1b eb ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2e5:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f2ec:	83 c4 10             	add    esp,0x10
c001f2ef:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f2f6:	75 01                	jne    c001f2f9 <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001f2f8:	fb                   	sti    
c001f2f9:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001f2fd:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001f302:	85 f6                	test   esi,esi
c001f304:	0f 84 dd 00 00 00    	je     c001f3e7 <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001f30a:	57                   	push   edi
c001f30b:	6a 01                	push   0x1
c001f30d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f314:	50                   	push   eax
c001f315:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f31b:	e8 84 f8 ff ff       	call   c001eba4 <IDE::polling(unsigned char, unsigned int)>
c001f320:	83 c4 10             	add    esp,0x10
c001f323:	0f b6 c0             	movzx  eax,al
c001f326:	85 c0                	test   eax,eax
c001f328:	74 23                	je     c001f34d <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001f32a:	50                   	push   eax
c001f32b:	89 c6                	mov    esi,eax
c001f32d:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001f334:	50                   	push   eax
c001f335:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f33c:	50                   	push   eax
c001f33d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f343:	e8 a2 f7 ff ff       	call   c001eaea <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f348:	e9 ba 00 00 00       	jmp    c001f407 <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001f34d:	85 ed                	test   ebp,ebp
c001f34f:	74 49                	je     c001f39a <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001f351:	fa                   	cli    
c001f352:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f358:	31 c9                	xor    ecx,ecx
c001f35a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001f35e:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f362:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001f366:	51                   	push   ecx
c001f367:	51                   	push   ecx
c001f368:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f36f:	50                   	push   eax
c001f370:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f376:	e8 73 ea ff ff       	call   c001ddee <IDE::getBase(unsigned char)>
c001f37b:	89 c2                	mov    edx,eax
c001f37d:	89 f8                	mov    eax,edi
c001f37f:	66 ef                	out    dx,ax
c001f381:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001f385:	83 c4 10             	add    esp,0x10
c001f388:	41                   	inc    ecx
c001f389:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001f38f:	75 c9                	jne    c001f35a <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001f391:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f398:	eb 35                	jmp    c001f3cf <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001f39a:	fa                   	cli    
c001f39b:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001f3a1:	52                   	push   edx
c001f3a2:	52                   	push   edx
c001f3a3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f3aa:	50                   	push   eax
c001f3ab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f3b1:	e8 38 ea ff ff       	call   c001ddee <IDE::getBase(unsigned char)>
c001f3b6:	b9 00 01 00 00       	mov    ecx,0x100
c001f3bb:	89 c2                	mov    edx,eax
c001f3bd:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001f3c1:	fc                   	cld    
c001f3c2:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001f3c5:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c001f3cc:	83 c4 10             	add    esp,0x10
c001f3cf:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c001f3d6:	75 01                	jne    c001f3d9 <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001f3d8:	fb                   	sti    
c001f3d9:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001f3e1:	4e                   	dec    esi
c001f3e2:	e9 1b ff ff ff       	jmp    c001f302 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001f3e7:	31 f6                	xor    esi,esi
c001f3e9:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001f3ee:	74 1a                	je     c001f40a <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001f3f0:	50                   	push   eax
c001f3f1:	50                   	push   eax
c001f3f2:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001f3f7:	83 f8 02             	cmp    eax,0x2
c001f3fa:	0f 94 c0             	sete   al
c001f3fd:	0f b6 c0             	movzx  eax,al
c001f400:	50                   	push   eax
c001f401:	53                   	push   ebx
c001f402:	e8 83 fb ff ff       	call   c001ef8a <ATA::flush(bool)>
c001f407:	83 c4 10             	add    esp,0x10
c001f40a:	83 c4 2c             	add    esp,0x2c
c001f40d:	89 f0                	mov    eax,esi
c001f40f:	5b                   	pop    ebx
c001f410:	5e                   	pop    esi
c001f411:	5f                   	pop    edi
c001f412:	5d                   	pop    ebp
c001f413:	c3                   	ret    

c001f414 <ATA::read(unsigned long long, int, void*)>:
c001f414:	57                   	push   edi
c001f415:	b8 04 00 00 00       	mov    eax,0x4
c001f41a:	56                   	push   esi
c001f41b:	53                   	push   ebx
c001f41c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f420:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f424:	8d 7a ff             	lea    edi,[edx-0x1]
c001f427:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f42b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f42f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f435:	77 25                	ja     c001f45c <ATA::read(unsigned long long, int, void*)+0x48>
c001f437:	b8 06 00 00 00       	mov    eax,0x6
c001f43c:	85 f6                	test   esi,esi
c001f43e:	74 1c                	je     c001f45c <ATA::read(unsigned long long, int, void*)+0x48>
c001f440:	50                   	push   eax
c001f441:	50                   	push   eax
c001f442:	6a 00                	push   0x0
c001f444:	56                   	push   esi
c001f445:	52                   	push   edx
c001f446:	53                   	push   ebx
c001f447:	51                   	push   ecx
c001f448:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f44c:	e8 d3 fb ff ff       	call   c001f024 <ATA::access(unsigned long long, int, void*, bool)>
c001f451:	83 c4 20             	add    esp,0x20
c001f454:	85 c0                	test   eax,eax
c001f456:	0f 95 c0             	setne  al
c001f459:	0f b6 c0             	movzx  eax,al
c001f45c:	5b                   	pop    ebx
c001f45d:	5e                   	pop    esi
c001f45e:	5f                   	pop    edi
c001f45f:	c3                   	ret    

c001f460 <ATA::write(unsigned long long, int, void*)>:
c001f460:	57                   	push   edi
c001f461:	b8 04 00 00 00       	mov    eax,0x4
c001f466:	56                   	push   esi
c001f467:	53                   	push   ebx
c001f468:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f46c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f470:	8d 7a ff             	lea    edi,[edx-0x1]
c001f473:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f477:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f47b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f481:	77 25                	ja     c001f4a8 <ATA::write(unsigned long long, int, void*)+0x48>
c001f483:	b8 06 00 00 00       	mov    eax,0x6
c001f488:	85 f6                	test   esi,esi
c001f48a:	74 1c                	je     c001f4a8 <ATA::write(unsigned long long, int, void*)+0x48>
c001f48c:	50                   	push   eax
c001f48d:	50                   	push   eax
c001f48e:	6a 01                	push   0x1
c001f490:	56                   	push   esi
c001f491:	52                   	push   edx
c001f492:	53                   	push   ebx
c001f493:	51                   	push   ecx
c001f494:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f498:	e8 87 fb ff ff       	call   c001f024 <ATA::access(unsigned long long, int, void*, bool)>
c001f49d:	83 c4 20             	add    esp,0x20
c001f4a0:	85 c0                	test   eax,eax
c001f4a2:	0f 95 c0             	setne  al
c001f4a5:	0f b6 c0             	movzx  eax,al
c001f4a8:	5b                   	pop    ebx
c001f4a9:	5e                   	pop    esi
c001f4aa:	5f                   	pop    edi
c001f4ab:	c3                   	ret    

c001f4ac <ATA::detectCHS()>:
c001f4ac:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f4b0:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001f4b6:	c1 e0 06             	shl    eax,0x6
c001f4b9:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001f4bf:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001f4c9:	c7 44 24 04 48 57 02 c0 	mov    DWORD PTR [esp+0x4],0xc0025748
c001f4d1:	e9 cc 0a ff ff       	jmp    c000ffa2 <KePanic(char const*)>

c001f4d6 <ATA::open(int, int, void*)>:
c001f4d6:	53                   	push   ebx
c001f4d7:	83 ec 08             	sub    esp,0x8
c001f4da:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f4de:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f4e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f4e6:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f4ec:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f4f2:	c1 e0 06             	shl    eax,0x6
c001f4f5:	01 d0                	add    eax,edx
c001f4f7:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001f4fe:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001f504:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001f50b:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f515:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001f51b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f522:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001f529:	75 0c                	jne    c001f537 <ATA::open(int, int, void*)+0x61>
c001f52b:	83 ec 0c             	sub    esp,0xc
c001f52e:	53                   	push   ebx
c001f52f:	e8 78 ff ff ff       	call   c001f4ac <ATA::detectCHS()>
c001f534:	83 c4 10             	add    esp,0x10
c001f537:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f53d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f543:	c1 e0 06             	shl    eax,0x6
c001f546:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001f54d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f557:	d1 e8                	shr    eax,1
c001f559:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001f55f:	6a 04                	push   0x4
c001f561:	6a 0c                	push   0xc
c001f563:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f56a:	50                   	push   eax
c001f56b:	52                   	push   edx
c001f56c:	e8 8f e8 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f571:	90                   	nop
c001f572:	90                   	nop
c001f573:	6a 00                	push   0x0
c001f575:	6a 0c                	push   0xc
c001f577:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f57e:	50                   	push   eax
c001f57f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f585:	e8 76 e8 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f58a:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001f590:	83 c4 20             	add    esp,0x20
c001f593:	c1 e0 06             	shl    eax,0x6
c001f596:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001f59c:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001f5a3:	0f 84 00 01 00 00    	je     c001f6a9 <ATA::open(int, int, void*)+0x1d3>
c001f5a9:	83 ec 0c             	sub    esp,0xc
c001f5ac:	6a 08                	push   0x8
c001f5ae:	e8 c1 0c ff ff       	call   c0010274 <Phys::allocateContiguousPages(int)>
c001f5b3:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001f5b9:	c7 04 24 5a 57 02 c0 	mov    DWORD PTR [esp],0xc002575a
c001f5c0:	e8 9f 79 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f5c5:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001f5cc:	e8 c4 3d ff ff       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c001f5d1:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001f5d7:	6a 03                	push   0x3
c001f5d9:	50                   	push   eax
c001f5da:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001f5e0:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f5e6:	e8 8d 44 ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f5eb:	83 c4 20             	add    esp,0x20
c001f5ee:	e8 a3 0b ff ff       	call   c0010196 <Phys::allocatePage()>
c001f5f3:	83 ec 0c             	sub    esp,0xc
c001f5f6:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001f5fc:	6a 01                	push   0x1
c001f5fe:	e8 92 3d ff ff       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c001f603:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001f609:	6a 03                	push   0x3
c001f60b:	50                   	push   eax
c001f60c:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001f612:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001f618:	e8 5b 44 ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c001f61d:	83 c4 14             	add    esp,0x14
c001f620:	68 93 57 02 c0       	push   0xc0025793
c001f625:	e8 3a 79 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f62a:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001f631:	50                   	push   eax
c001f632:	6a 12                	push   0x12
c001f634:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f63b:	50                   	push   eax
c001f63c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f642:	e8 b9 e7 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f647:	83 c4 20             	add    esp,0x20
c001f64a:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001f650:	0f b6 c4             	movzx  eax,ah
c001f653:	50                   	push   eax
c001f654:	6a 13                	push   0x13
c001f656:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f65d:	50                   	push   eax
c001f65e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f664:	e8 97 e7 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f669:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001f670:	50                   	push   eax
c001f671:	6a 14                	push   0x14
c001f673:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f67a:	50                   	push   eax
c001f67b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f681:	e8 7a e7 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f686:	83 c4 20             	add    esp,0x20
c001f689:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001f690:	50                   	push   eax
c001f691:	6a 15                	push   0x15
c001f693:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f69a:	50                   	push   eax
c001f69b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f6a1:	e8 5a e7 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f6a6:	83 c4 10             	add    esp,0x10
c001f6a9:	83 ec 0c             	sub    esp,0xc
c001f6ac:	53                   	push   ebx
c001f6ad:	e8 94 a7 fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c001f6b2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f6b5:	e8 2c b6 fe ff       	call   c000ace6 <createPartitionsForDisk(PhysicalDisk*)>
c001f6ba:	31 c0                	xor    eax,eax
c001f6bc:	83 c4 18             	add    esp,0x18
c001f6bf:	5b                   	pop    ebx
c001f6c0:	c3                   	ret    

c001f6c1 <combineCharAndColour(char, unsigned char)>:
c001f6c1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f6c6:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001f6cc:	c1 e0 08             	shl    eax,0x8
c001f6cf:	09 d0                	or     eax,edx
c001f6d1:	c3                   	ret    

c001f6d2 <combineColours(unsigned char, unsigned char)>:
c001f6d2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001f6d7:	c1 e0 04             	shl    eax,0x4
c001f6da:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001f6de:	c3                   	ret    
c001f6df:	90                   	nop

c001f6e0 <ATAPI::write(unsigned long long, int, void*)>:
c001f6e0:	b8 03 00 00 00       	mov    eax,0x3
c001f6e5:	c3                   	ret    

c001f6e6 <ATAPI::close(int, int, void*)>:
c001f6e6:	83 ec 0c             	sub    esp,0xc
c001f6e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ed:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f6f3:	85 c0                	test   eax,eax
c001f6f5:	74 0c                	je     c001f703 <ATAPI::close(int, int, void*)+0x1d>
c001f6f7:	83 ec 0c             	sub    esp,0xc
c001f6fa:	8b 10                	mov    edx,DWORD PTR [eax]
c001f6fc:	50                   	push   eax
c001f6fd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f700:	83 c4 10             	add    esp,0x10
c001f703:	31 c0                	xor    eax,eax
c001f705:	83 c4 0c             	add    esp,0xc
c001f708:	c3                   	ret    
c001f709:	90                   	nop

c001f70a <ATAPI::ATAPI()>:
c001f70a:	83 ec 0c             	sub    esp,0xc
c001f70d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f711:	83 ec 04             	sub    esp,0x4
c001f714:	68 00 08 00 00       	push   0x800
c001f719:	68 45 59 02 c0       	push   0xc0025945
c001f71e:	50                   	push   eax
c001f71f:	e8 ba a6 fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f724:	83 c4 10             	add    esp,0x10
c001f727:	ba 54 58 02 c0       	mov    edx,0xc0025854
c001f72c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f730:	89 10                	mov    DWORD PTR [eax],edx
c001f732:	90                   	nop
c001f733:	83 c4 0c             	add    esp,0xc
c001f736:	c3                   	ret    
c001f737:	90                   	nop

c001f738 <ATAPI::readyForCommand()>:
c001f738:	56                   	push   esi
c001f739:	53                   	push   ebx
c001f73a:	53                   	push   ebx
c001f73b:	31 db                	xor    ebx,ebx
c001f73d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f741:	51                   	push   ecx
c001f742:	6a 0c                	push   0xc
c001f744:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001f74b:	50                   	push   eax
c001f74c:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001f752:	e8 69 e7 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001f757:	83 c4 10             	add    esp,0x10
c001f75a:	a8 88                	test   al,0x88
c001f75c:	74 25                	je     c001f783 <ATAPI::readyForCommand()+0x4b>
c001f75e:	43                   	inc    ebx
c001f75f:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001f765:	7e da                	jle    c001f741 <ATAPI::readyForCommand()+0x9>
c001f767:	83 ec 0c             	sub    esp,0xc
c001f76a:	68 5e 01 00 00       	push   0x15e
c001f76f:	e8 34 76 ff ff       	call   c0016da8 <milliTenthSleep(unsigned int)>
c001f774:	83 c4 10             	add    esp,0x10
c001f777:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001f77d:	75 c2                	jne    c001f741 <ATAPI::readyForCommand()+0x9>
c001f77f:	31 c0                	xor    eax,eax
c001f781:	eb 02                	jmp    c001f785 <ATAPI::readyForCommand()+0x4d>
c001f783:	b0 01                	mov    al,0x1
c001f785:	5a                   	pop    edx
c001f786:	5b                   	pop    ebx
c001f787:	5e                   	pop    esi
c001f788:	c3                   	ret    
c001f789:	90                   	nop

c001f78a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001f78a:	55                   	push   ebp
c001f78b:	57                   	push   edi
c001f78c:	56                   	push   esi
c001f78d:	53                   	push   ebx
c001f78e:	83 ec 20             	sub    esp,0x20
c001f791:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001f795:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001f799:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001f79d:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001f7a1:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f7a5:	6a 01                	push   0x1
c001f7a7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f7ae:	50                   	push   eax
c001f7af:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f7b5:	e8 4e e8 ff ff       	call   c001e008 <IDE::enableIRQs(unsigned char, bool)>
c001f7ba:	5e                   	pop    esi
c001f7bb:	58                   	pop    eax
c001f7bc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f7c3:	50                   	push   eax
c001f7c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f7ca:	e8 0b e6 ff ff       	call   c001ddda <IDE::prepareInterrupt(unsigned char)>
c001f7cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c001f7d2:	e8 61 ff ff ff       	call   c001f738 <ATAPI::readyForCommand()>
c001f7d7:	83 c4 10             	add    esp,0x10
c001f7da:	84 c0                	test   al,al
c001f7dc:	75 0a                	jne    c001f7e8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001f7de:	bb 01 00 00 00       	mov    ebx,0x1
c001f7e3:	e9 60 02 00 00       	jmp    c001fa48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001f7e8:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001f7ee:	c1 e0 04             	shl    eax,0x4
c001f7f1:	0f b6 c0             	movzx  eax,al
c001f7f4:	50                   	push   eax
c001f7f5:	6a 06                	push   0x6
c001f7f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f7fe:	50                   	push   eax
c001f7ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f805:	e8 f6 e5 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f80a:	6a 00                	push   0x0
c001f80c:	6a 01                	push   0x1
c001f80e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f815:	50                   	push   eax
c001f816:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f81c:	e8 df e5 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f821:	83 c4 20             	add    esp,0x20
c001f824:	0f b6 c3             	movzx  eax,bl
c001f827:	0f b6 df             	movzx  ebx,bh
c001f82a:	50                   	push   eax
c001f82b:	6a 04                	push   0x4
c001f82d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f834:	50                   	push   eax
c001f835:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f83b:	e8 c0 e5 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f840:	53                   	push   ebx
c001f841:	6a 05                	push   0x5
c001f843:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f84a:	50                   	push   eax
c001f84b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f851:	e8 aa e5 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f856:	83 c4 20             	add    esp,0x20
c001f859:	68 a0 00 00 00       	push   0xa0
c001f85e:	6a 07                	push   0x7
c001f860:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f867:	50                   	push   eax
c001f868:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f86e:	e8 8d e5 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f873:	83 c4 0c             	add    esp,0xc
c001f876:	6a 01                	push   0x1
c001f878:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f87f:	50                   	push   eax
c001f880:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f886:	e8 19 f3 ff ff       	call   c001eba4 <IDE::polling(unsigned char, unsigned int)>
c001f88b:	83 c4 10             	add    esp,0x10
c001f88e:	0f b6 d8             	movzx  ebx,al
c001f891:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001f897:	85 db                	test   ebx,ebx
c001f899:	74 20                	je     c001f8bb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001f89b:	53                   	push   ebx
c001f89c:	0f b6 c0             	movzx  eax,al
c001f89f:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001f8a6:	52                   	push   edx
c001f8a7:	50                   	push   eax
c001f8a8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f8ae:	e8 37 f2 ff ff       	call   c001eaea <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001f8b3:	83 c4 10             	add    esp,0x10
c001f8b6:	e9 8d 01 00 00       	jmp    c001fa48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001f8bb:	0f b6 c0             	movzx  eax,al
c001f8be:	53                   	push   ebx
c001f8bf:	53                   	push   ebx
c001f8c0:	50                   	push   eax
c001f8c1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f8c7:	e8 22 e5 ff ff       	call   c001ddee <IDE::getBase(unsigned char)>
c001f8cc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001f8d0:	b9 06 00 00 00       	mov    ecx,0x6
c001f8d5:	89 c2                	mov    edx,eax
c001f8d7:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001f8da:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001f8de:	83 c4 10             	add    esp,0x10
c001f8e1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001f8e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f8ea:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f8f0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f8f7:	85 db                	test   ebx,ebx
c001f8f9:	0f 84 ec 00 00 00    	je     c001f9eb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001f8ff:	51                   	push   ecx
c001f900:	51                   	push   ecx
c001f901:	52                   	push   edx
c001f902:	50                   	push   eax
c001f903:	e8 66 e6 ff ff       	call   c001df6e <IDE::waitInterrupt(unsigned char)>
c001f908:	83 c4 10             	add    esp,0x10
c001f90b:	84 c0                	test   al,al
c001f90d:	0f 84 cb fe ff ff    	je     c001f7de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f913:	56                   	push   esi
c001f914:	56                   	push   esi
c001f915:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f91c:	50                   	push   eax
c001f91d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f923:	e8 b2 e4 ff ff       	call   c001ddda <IDE::prepareInterrupt(unsigned char)>
c001f928:	83 c4 0c             	add    esp,0xc
c001f92b:	6a 04                	push   0x4
c001f92d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f934:	50                   	push   eax
c001f935:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f93b:	e8 80 e5 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001f940:	83 c4 0c             	add    esp,0xc
c001f943:	89 c6                	mov    esi,eax
c001f945:	6a 05                	push   0x5
c001f947:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f94e:	50                   	push   eax
c001f94f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f955:	e8 66 e5 ff ff       	call   c001dec0 <IDE::read(unsigned char, unsigned char)>
c001f95a:	89 f1                	mov    ecx,esi
c001f95c:	0f b6 c0             	movzx  eax,al
c001f95f:	0f b6 f1             	movzx  esi,cl
c001f962:	c1 e0 08             	shl    eax,0x8
c001f965:	09 c6                	or     esi,eax
c001f967:	d1 fe                	sar    esi,1
c001f969:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001f96d:	83 c4 10             	add    esp,0x10
c001f970:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f975:	74 41                	je     c001f9b8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001f977:	31 c9                	xor    ecx,ecx
c001f979:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f97f:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f986:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001f98a:	75 0a                	jne    c001f996 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001f98c:	01 c9                	add    ecx,ecx
c001f98e:	01 cd                	add    ebp,ecx
c001f990:	4b                   	dec    ebx
c001f991:	e9 54 ff ff ff       	jmp    c001f8ea <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001f996:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001f99b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f99f:	51                   	push   ecx
c001f9a0:	51                   	push   ecx
c001f9a1:	52                   	push   edx
c001f9a2:	50                   	push   eax
c001f9a3:	e8 46 e4 ff ff       	call   c001ddee <IDE::getBase(unsigned char)>
c001f9a8:	89 c2                	mov    edx,eax
c001f9aa:	89 f0                	mov    eax,esi
c001f9ac:	66 ef                	out    dx,ax
c001f9ae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f9b2:	83 c4 10             	add    esp,0x10
c001f9b5:	41                   	inc    ecx
c001f9b6:	eb c1                	jmp    c001f979 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001f9b8:	31 f6                	xor    esi,esi
c001f9ba:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f9c0:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f9c7:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001f9cb:	75 06                	jne    c001f9d3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001f9cd:	01 f6                	add    esi,esi
c001f9cf:	01 f5                	add    ebp,esi
c001f9d1:	eb bd                	jmp    c001f990 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001f9d3:	51                   	push   ecx
c001f9d4:	51                   	push   ecx
c001f9d5:	52                   	push   edx
c001f9d6:	50                   	push   eax
c001f9d7:	e8 12 e4 ff ff       	call   c001ddee <IDE::getBase(unsigned char)>
c001f9dc:	89 c2                	mov    edx,eax
c001f9de:	66 ed                	in     ax,dx
c001f9e0:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001f9e5:	83 c4 10             	add    esp,0x10
c001f9e8:	46                   	inc    esi
c001f9e9:	eb cf                	jmp    c001f9ba <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001f9eb:	51                   	push   ecx
c001f9ec:	51                   	push   ecx
c001f9ed:	52                   	push   edx
c001f9ee:	50                   	push   eax
c001f9ef:	e8 7a e5 ff ff       	call   c001df6e <IDE::waitInterrupt(unsigned char)>
c001f9f4:	83 c4 10             	add    esp,0x10
c001f9f7:	84 c0                	test   al,al
c001f9f9:	0f 84 df fd ff ff    	je     c001f7de <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f9ff:	bb a0 86 01 00       	mov    ebx,0x186a0
c001fa04:	52                   	push   edx
c001fa05:	52                   	push   edx
c001fa06:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa0d:	50                   	push   eax
c001fa0e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa14:	e8 c1 e3 ff ff       	call   c001ddda <IDE::prepareInterrupt(unsigned char)>
c001fa19:	83 c4 10             	add    esp,0x10
c001fa1c:	50                   	push   eax
c001fa1d:	50                   	push   eax
c001fa1e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001fa25:	50                   	push   eax
c001fa26:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001fa2c:	e8 bd e3 ff ff       	call   c001ddee <IDE::getBase(unsigned char)>
c001fa31:	8d 50 07             	lea    edx,[eax+0x7]
c001fa34:	ec                   	in     al,dx
c001fa35:	83 c4 10             	add    esp,0x10
c001fa38:	a8 88                	test   al,0x88
c001fa3a:	74 0a                	je     c001fa46 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001fa3c:	4b                   	dec    ebx
c001fa3d:	75 dd                	jne    c001fa1c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001fa3f:	bb 02 00 00 00       	mov    ebx,0x2
c001fa44:	eb 02                	jmp    c001fa48 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001fa46:	31 db                	xor    ebx,ebx
c001fa48:	83 c4 1c             	add    esp,0x1c
c001fa4b:	89 d8                	mov    eax,ebx
c001fa4d:	5b                   	pop    ebx
c001fa4e:	5e                   	pop    esi
c001fa4f:	5f                   	pop    edi
c001fa50:	5d                   	pop    ebp
c001fa51:	c3                   	ret    

c001fa52 <ATAPI::diskRemoved()>:
c001fa52:	53                   	push   ebx
c001fa53:	83 ec 14             	sub    esp,0x14
c001fa56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fa5a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fa61:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001fa67:	e8 6a af fe ff       	call   c000a9d6 <LogicalDisk::unmount()>
c001fa6c:	58                   	pop    eax
c001fa6d:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fa73:	e8 00 b9 fe ff       	call   c000b378 <VCache::writeWriteBuffer()>
c001fa78:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001fa7e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fa82:	83 c4 18             	add    esp,0x18
c001fa85:	5b                   	pop    ebx
c001fa86:	e9 dd b8 fe ff       	jmp    c000b368 <VCache::invalidateReadBuffer()>
c001fa8b:	90                   	nop

c001fa8c <ATAPI::eject()>:
c001fa8c:	57                   	push   edi
c001fa8d:	b9 03 00 00 00       	mov    ecx,0x3
c001fa92:	53                   	push   ebx
c001fa93:	83 ec 14             	sub    esp,0x14
c001fa96:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001fa9a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fa9e:	fc                   	cld    
c001fa9f:	31 c0                	xor    eax,eax
c001faa1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001faa3:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001faa8:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001faad:	50                   	push   eax
c001faae:	50                   	push   eax
c001faaf:	6a 00                	push   0x0
c001fab1:	6a 00                	push   0x0
c001fab3:	6a 00                	push   0x0
c001fab5:	6a 02                	push   0x2
c001fab7:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fabb:	50                   	push   eax
c001fabc:	53                   	push   ebx
c001fabd:	e8 c8 fc ff ff       	call   c001f78a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fac2:	83 c4 14             	add    esp,0x14
c001fac5:	53                   	push   ebx
c001fac6:	e8 87 ff ff ff       	call   c001fa52 <ATAPI::diskRemoved()>
c001facb:	83 c4 24             	add    esp,0x24
c001face:	31 c0                	xor    eax,eax
c001fad0:	5b                   	pop    ebx
c001fad1:	5f                   	pop    edi
c001fad2:	c3                   	ret    
c001fad3:	90                   	nop

c001fad4 <ATAPI::diskInserted()>:
c001fad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad8:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001fadf:	c3                   	ret    

c001fae0 <ATAPI::detectMedia()>:
c001fae0:	56                   	push   esi
c001fae1:	53                   	push   ebx
c001fae2:	83 ec 28             	sub    esp,0x28
c001fae5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001fae9:	6a 0c                	push   0xc
c001faeb:	6a 00                	push   0x0
c001faed:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001faf1:	56                   	push   esi
c001faf2:	e8 f9 09 fe ff       	call   c00004f0 <memset>
c001faf7:	58                   	pop    eax
c001faf8:	5a                   	pop    edx
c001faf9:	6a 00                	push   0x0
c001fafb:	6a 00                	push   0x0
c001fafd:	6a 00                	push   0x0
c001faff:	6a 00                	push   0x0
c001fb01:	56                   	push   esi
c001fb02:	53                   	push   ebx
c001fb03:	e8 82 fc ff ff       	call   c001f78a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fb08:	83 c4 1c             	add    esp,0x1c
c001fb0b:	6a 0c                	push   0xc
c001fb0d:	6a 00                	push   0x0
c001fb0f:	56                   	push   esi
c001fb10:	e8 db 09 fe ff       	call   c00004f0 <memset>
c001fb15:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001fb1a:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001fb1f:	59                   	pop    ecx
c001fb20:	58                   	pop    eax
c001fb21:	6a 01                	push   0x1
c001fb23:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001fb27:	50                   	push   eax
c001fb28:	6a 00                	push   0x0
c001fb2a:	6a 12                	push   0x12
c001fb2c:	56                   	push   esi
c001fb2d:	53                   	push   ebx
c001fb2e:	e8 57 fc ff ff       	call   c001f78a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fb33:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001fb37:	83 c4 20             	add    esp,0x20
c001fb3a:	83 e0 7f             	and    eax,0x7f
c001fb3d:	83 f8 70             	cmp    eax,0x70
c001fb40:	74 15                	je     c001fb57 <ATAPI::detectMedia()+0x77>
c001fb42:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fb49:	75 0c                	jne    c001fb57 <ATAPI::detectMedia()+0x77>
c001fb4b:	83 ec 0c             	sub    esp,0xc
c001fb4e:	53                   	push   ebx
c001fb4f:	e8 80 ff ff ff       	call   c001fad4 <ATAPI::diskInserted()>
c001fb54:	83 c4 10             	add    esp,0x10
c001fb57:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001fb5b:	83 e0 0f             	and    eax,0xf
c001fb5e:	83 f8 02             	cmp    eax,0x2
c001fb61:	75 1b                	jne    c001fb7e <ATAPI::detectMedia()+0x9e>
c001fb63:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001fb68:	75 2d                	jne    c001fb97 <ATAPI::detectMedia()+0xb7>
c001fb6a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fb71:	74 24                	je     c001fb97 <ATAPI::detectMedia()+0xb7>
c001fb73:	83 ec 0c             	sub    esp,0xc
c001fb76:	53                   	push   ebx
c001fb77:	e8 d6 fe ff ff       	call   c001fa52 <ATAPI::diskRemoved()>
c001fb7c:	eb 16                	jmp    c001fb94 <ATAPI::detectMedia()+0xb4>
c001fb7e:	85 c0                	test   eax,eax
c001fb80:	75 15                	jne    c001fb97 <ATAPI::detectMedia()+0xb7>
c001fb82:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fb89:	75 0c                	jne    c001fb97 <ATAPI::detectMedia()+0xb7>
c001fb8b:	83 ec 0c             	sub    esp,0xc
c001fb8e:	53                   	push   ebx
c001fb8f:	e8 40 ff ff ff       	call   c001fad4 <ATAPI::diskInserted()>
c001fb94:	83 c4 10             	add    esp,0x10
c001fb97:	83 c4 24             	add    esp,0x24
c001fb9a:	5b                   	pop    ebx
c001fb9b:	5e                   	pop    esi
c001fb9c:	c3                   	ret    
c001fb9d:	90                   	nop

c001fb9e <ATAPI::open(int, int, void*)>:
c001fb9e:	56                   	push   esi
c001fb9f:	53                   	push   ebx
c001fba0:	50                   	push   eax
c001fba1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fba5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001fba9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001fbad:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fbb3:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001fbb9:	c1 e0 06             	shl    eax,0x6
c001fbbc:	01 d0                	add    eax,edx
c001fbbe:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001fbc5:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001fbcb:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001fbd2:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fbdc:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fbe2:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001fbe9:	6a 04                	push   0x4
c001fbeb:	6a 0c                	push   0xc
c001fbed:	51                   	push   ecx
c001fbee:	52                   	push   edx
c001fbef:	e8 0c e2 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fbf4:	90                   	nop
c001fbf5:	90                   	nop
c001fbf6:	6a 00                	push   0x0
c001fbf8:	6a 0c                	push   0xc
c001fbfa:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001fc01:	50                   	push   eax
c001fc02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001fc08:	e8 f3 e1 ff ff       	call   c001de00 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001fc0d:	83 c4 14             	add    esp,0x14
c001fc10:	68 78 01 00 00       	push   0x178
c001fc15:	e8 41 00 ff ff       	call   c000fc5b <malloc>
c001fc1a:	83 c4 0c             	add    esp,0xc
c001fc1d:	89 c6                	mov    esi,eax
c001fc1f:	6a 00                	push   0x0
c001fc21:	68 ff ff ff 7f       	push   0x7fffffff
c001fc26:	6a 00                	push   0x0
c001fc28:	6a 00                	push   0x0
c001fc2a:	53                   	push   ebx
c001fc2b:	68 f7 59 02 c0       	push   0xc00259f7
c001fc30:	50                   	push   eax
c001fc31:	e8 de ab fe ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001fc36:	83 c4 14             	add    esp,0x14
c001fc39:	56                   	push   esi
c001fc3a:	e8 95 ac fe ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c001fc3f:	5a                   	pop    edx
c001fc40:	0f be c0             	movsx  eax,al
c001fc43:	59                   	pop    ecx
c001fc44:	50                   	push   eax
c001fc45:	68 3c 58 02 c0       	push   0xc002583c
c001fc4a:	e8 15 73 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fc4f:	58                   	pop    eax
c001fc50:	5a                   	pop    edx
c001fc51:	56                   	push   esi
c001fc52:	53                   	push   ebx
c001fc53:	e8 a2 9d fe ff       	call   c00099fa <Device::addChild(Device*)>
c001fc58:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001fc5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc61:	e8 e0 a1 fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c001fc66:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001fc6d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fc70:	e8 6b fe ff ff       	call   c001fae0 <ATAPI::detectMedia()>
c001fc75:	83 c4 14             	add    esp,0x14
c001fc78:	31 c0                	xor    eax,eax
c001fc7a:	5b                   	pop    ebx
c001fc7b:	5e                   	pop    esi
c001fc7c:	c3                   	ret    
c001fc7d:	90                   	nop

c001fc7e <ATAPI::read(unsigned long long, int, void*)>:
c001fc7e:	55                   	push   ebp
c001fc7f:	57                   	push   edi
c001fc80:	56                   	push   esi
c001fc81:	53                   	push   ebx
c001fc82:	83 ec 1c             	sub    esp,0x1c
c001fc85:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fc89:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001fc8d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001fc91:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fc98:	74 3c                	je     c001fcd6 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001fc9a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fc9e:	b9 03 00 00 00       	mov    ecx,0x3
c001fca3:	fc                   	cld    
c001fca4:	31 c0                	xor    eax,eax
c001fca6:	0f ce                	bswap  esi
c001fca8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fcaa:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001fcaf:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001fcb3:	89 e8                	mov    eax,ebp
c001fcb5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001fcb9:	50                   	push   eax
c001fcba:	50                   	push   eax
c001fcbb:	55                   	push   ebp
c001fcbc:	c1 e5 0b             	shl    ebp,0xb
c001fcbf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001fcc3:	6a 00                	push   0x0
c001fcc5:	55                   	push   ebp
c001fcc6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fcca:	50                   	push   eax
c001fccb:	53                   	push   ebx
c001fccc:	e8 b9 fa ff ff       	call   c001f78a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001fcd1:	83 c4 20             	add    esp,0x20
c001fcd4:	eb 1a                	jmp    c001fcf0 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001fcd6:	83 ec 0c             	sub    esp,0xc
c001fcd9:	53                   	push   ebx
c001fcda:	e8 01 fe ff ff       	call   c001fae0 <ATAPI::detectMedia()>
c001fcdf:	83 c4 10             	add    esp,0x10
c001fce2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001fce9:	75 af                	jne    c001fc9a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001fceb:	b8 02 00 00 00       	mov    eax,0x2
c001fcf0:	83 c4 1c             	add    esp,0x1c
c001fcf3:	5b                   	pop    ebx
c001fcf4:	5e                   	pop    esi
c001fcf5:	5f                   	pop    edi
c001fcf6:	5d                   	pop    ebp
c001fcf7:	c3                   	ret    

c001fcf8 <SATA::close(int, int, void*)>:
c001fcf8:	83 ec 0c             	sub    esp,0xc
c001fcfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcff:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001fd05:	85 c0                	test   eax,eax
c001fd07:	74 0c                	je     c001fd15 <SATA::close(int, int, void*)+0x1d>
c001fd09:	83 ec 0c             	sub    esp,0xc
c001fd0c:	8b 10                	mov    edx,DWORD PTR [eax]
c001fd0e:	50                   	push   eax
c001fd0f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001fd12:	83 c4 10             	add    esp,0x10
c001fd15:	31 c0                	xor    eax,eax
c001fd17:	83 c4 0c             	add    esp,0xc
c001fd1a:	c3                   	ret    
c001fd1b:	90                   	nop

c001fd1c <SATA::powerSaving(PowerSavingLevel)>:
c001fd1c:	c3                   	ret    
c001fd1d:	90                   	nop

c001fd1e <SATA::open(int, int, void*)>:
c001fd1e:	56                   	push   esi
c001fd1f:	53                   	push   ebx
c001fd20:	83 ec 10             	sub    esp,0x10
c001fd23:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fd27:	68 84 58 02 c0       	push   0xc0025884
c001fd2c:	e8 33 72 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fd31:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001fd35:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001fd3f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001fd45:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001fd4f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001fd53:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fd5d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fd63:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001fd6a:	e8 27 04 ff ff       	call   c0010196 <Phys::allocatePage()>
c001fd6f:	89 c6                	mov    esi,eax
c001fd71:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001fd77:	81 c6 00 10 00 00    	add    esi,0x1000
c001fd7d:	e8 14 04 ff ff       	call   c0010196 <Phys::allocatePage()>
c001fd82:	83 c4 10             	add    esp,0x10
c001fd85:	39 c6                	cmp    esi,eax
c001fd87:	74 10                	je     c001fd99 <SATA::open(int, int, void*)+0x7b>
c001fd89:	83 ec 0c             	sub    esp,0xc
c001fd8c:	68 90 58 02 c0       	push   0xc0025890
c001fd91:	e8 0c 02 ff ff       	call   c000ffa2 <KePanic(char const*)>
c001fd96:	83 c4 10             	add    esp,0x10
c001fd99:	83 ec 0c             	sub    esp,0xc
c001fd9c:	6a 02                	push   0x2
c001fd9e:	e8 f2 35 ff ff       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c001fda3:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001fda9:	6a 03                	push   0x3
c001fdab:	50                   	push   eax
c001fdac:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001fdb2:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c001fdb8:	e8 bb 3c ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c001fdbd:	83 c4 14             	add    esp,0x14
c001fdc0:	53                   	push   ebx
c001fdc1:	e8 80 a0 fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c001fdc6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fdc9:	e8 18 af fe ff       	call   c000ace6 <createPartitionsForDisk(PhysicalDisk*)>
c001fdce:	83 c4 14             	add    esp,0x14
c001fdd1:	31 c0                	xor    eax,eax
c001fdd3:	5b                   	pop    ebx
c001fdd4:	5e                   	pop    esi
c001fdd5:	c3                   	ret    

c001fdd6 <SATA::SATA()>:
c001fdd6:	83 ec 0c             	sub    esp,0xc
c001fdd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fddd:	83 ec 04             	sub    esp,0x4
c001fde0:	68 00 02 00 00       	push   0x200
c001fde5:	68 a4 58 02 c0       	push   0xc00258a4
c001fdea:	50                   	push   eax
c001fdeb:	e8 ee 9f fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c001fdf0:	83 c4 10             	add    esp,0x10
c001fdf3:	ba 14 59 02 c0       	mov    edx,0xc0025914
c001fdf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdfc:	89 10                	mov    DWORD PTR [eax],edx
c001fdfe:	90                   	nop
c001fdff:	83 c4 0c             	add    esp,0xc
c001fe02:	c3                   	ret    
c001fe03:	90                   	nop

c001fe04 <SATA::access(unsigned long long, int, void*, bool)>:
c001fe04:	55                   	push   ebp
c001fe05:	57                   	push   edi
c001fe06:	56                   	push   esi
c001fe07:	53                   	push   ebx
c001fe08:	83 ec 2c             	sub    esp,0x2c
c001fe0b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001fe0f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fe13:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001fe17:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001fe1b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001fe1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001fe23:	fa                   	cli    
c001fe24:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c001fe2a:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001fe2f:	7e 10                	jle    c001fe41 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c001fe31:	83 ec 0c             	sub    esp,0xc
c001fe34:	68 b4 58 02 c0       	push   0xc00258b4
c001fe39:	e8 64 01 ff ff       	call   c000ffa2 <KePanic(char const*)>
c001fe3e:	83 c4 10             	add    esp,0x10
c001fe41:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001fe47:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001fe4d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001fe53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fe57:	89 d0                	mov    eax,edx
c001fe59:	c1 e0 07             	shl    eax,0x7
c001fe5c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fe60:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001fe6a:	51                   	push   ecx
c001fe6b:	8d 42 02             	lea    eax,[edx+0x2]
c001fe6e:	51                   	push   ecx
c001fe6f:	c1 e0 07             	shl    eax,0x7
c001fe72:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fe76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fe7a:	50                   	push   eax
c001fe7b:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001fe81:	e8 fe ed ff ff       	call   c001ec84 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001fe86:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001fe8a:	83 c4 10             	add    esp,0x10
c001fe8d:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001fe92:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fe96:	0f 84 a4 01 00 00    	je     c0020040 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c001fe9c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001fea0:	c1 e0 09             	shl    eax,0x9
c001fea3:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001fea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001feac:	74 0e                	je     c001febc <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c001feae:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001feb4:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001feb8:	89 c1                	mov    ecx,eax
c001feba:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001febc:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001fec2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001fec6:	8d 42 02             	lea    eax,[edx+0x2]
c001fec9:	c1 e0 07             	shl    eax,0x7
c001fecc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001fed0:	8b 00                	mov    eax,DWORD PTR [eax]
c001fed2:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001fed8:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001fede:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fee2:	c1 e1 05             	shl    ecx,0x5
c001fee5:	01 c8                	add    eax,ecx
c001fee7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001feeb:	83 e1 01             	and    ecx,0x1
c001feee:	89 ce                	mov    esi,ecx
c001fef0:	8a 08                	mov    cl,BYTE PTR [eax]
c001fef2:	c1 e6 06             	shl    esi,0x6
c001fef5:	83 e1 bf             	and    ecx,0xffffffbf
c001fef8:	09 f1                	or     ecx,esi
c001fefa:	88 08                	mov    BYTE PTR [eax],cl
c001fefc:	8b 08                	mov    ecx,DWORD PTR [eax]
c001fefe:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001ff04:	81 c9 05 00 01 00    	or     ecx,0x10005
c001ff0a:	89 08                	mov    DWORD PTR [eax],ecx
c001ff0c:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001ff12:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001ff18:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001ff1e:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001ff21:	50                   	push   eax
c001ff22:	68 90 00 00 00       	push   0x90
c001ff27:	6a 00                	push   0x0
c001ff29:	56                   	push   esi
c001ff2a:	e8 c1 05 fe ff       	call   c00004f0 <memset>
c001ff2f:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001ff35:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001ff3b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ff3f:	83 c4 10             	add    esp,0x10
c001ff42:	48                   	dec    eax
c001ff43:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ff48:	89 c1                	mov    ecx,eax
c001ff4a:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001ff50:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ff55:	09 c8                	or     eax,ecx
c001ff57:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001ff5d:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001ff63:	83 c8 80             	or     eax,0xffffff80
c001ff66:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001ff6c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001ff6f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ff73:	25 00 7f 00 00       	and    eax,0x7f00
c001ff78:	0d 27 80 ff ff       	or     eax,0xffff8027
c001ff7d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001ff82:	66 89 06             	mov    WORD PTR [esi],ax
c001ff85:	b0 35                	mov    al,0x35
c001ff87:	75 02                	jne    c001ff8b <SATA::access(unsigned long long, int, void*, bool)+0x187>
c001ff89:	b0 25                	mov    al,0x25
c001ff8b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001ff8e:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001ff92:	89 e8                	mov    eax,ebp
c001ff94:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001ff98:	c1 e8 10             	shr    eax,0x10
c001ff9b:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001ff9e:	89 e8                	mov    eax,ebp
c001ffa0:	c1 e8 18             	shr    eax,0x18
c001ffa3:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001ffa6:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001ffaa:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001ffad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ffb1:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001ffb4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001ffb8:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001ffbc:	89 d6                	mov    esi,edx
c001ffbe:	31 c0                	xor    eax,eax
c001ffc0:	c1 e6 07             	shl    esi,0x7
c001ffc3:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ffc7:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001ffcd:	80 e1 88             	and    cl,0x88
c001ffd0:	74 0a                	je     c001ffdc <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001ffd2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ffd7:	74 0a                	je     c001ffe3 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001ffd9:	40                   	inc    eax
c001ffda:	eb eb                	jmp    c001ffc7 <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001ffdc:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001ffe1:	75 0a                	jne    c001ffed <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001ffe3:	83 ec 0c             	sub    esp,0xc
c001ffe6:	68 ed 58 02 c0       	push   0xc00258ed
c001ffeb:	eb 36                	jmp    c0020023 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001ffed:	b8 01 00 00 00       	mov    eax,0x1
c001fff2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001fff6:	c1 e2 07             	shl    edx,0x7
c001fff9:	d3 e0                	shl    eax,cl
c001fffb:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001ffff:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0020005:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002000b:	85 c8                	test   eax,ecx
c002000d:	74 25                	je     c0020034 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c002000f:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0020015:	0f ba e1 1e          	bt     ecx,0x1e
c0020019:	73 ea                	jae    c0020005 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c002001b:	83 ec 0c             	sub    esp,0xc
c002001e:	68 fb 58 02 c0       	push   0xc00258fb
c0020023:	e8 3c 6f fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020028:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c002002f:	83 c4 10             	add    esp,0x10
c0020032:	eb 13                	jmp    c0020047 <SATA::access(unsigned long long, int, void*, bool)+0x243>
c0020034:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c002003a:	0f ba e0 1e          	bt     eax,0x1e
c002003e:	73 18                	jae    c0020058 <SATA::access(unsigned long long, int, void*, bool)+0x254>
c0020040:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020047:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c002004e:	75 01                	jne    c0020051 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c0020050:	fb                   	sti    
c0020051:	b8 01 00 00 00       	mov    eax,0x1
c0020056:	eb 2c                	jmp    c0020084 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020058:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c002005d:	75 10                	jne    c002006f <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c002005f:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c0020065:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0020069:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002006d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002006f:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0020076:	a1 30 ea 02 c0       	mov    eax,ds:0xc002ea30
c002007b:	85 c0                	test   eax,eax
c002007d:	75 03                	jne    c0020082 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c002007f:	fb                   	sti    
c0020080:	eb 02                	jmp    c0020084 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c0020082:	31 c0                	xor    eax,eax
c0020084:	83 c4 2c             	add    esp,0x2c
c0020087:	5b                   	pop    ebx
c0020088:	5e                   	pop    esi
c0020089:	5f                   	pop    edi
c002008a:	5d                   	pop    ebp
c002008b:	c3                   	ret    

c002008c <SATA::read(unsigned long long, int, void*)>:
c002008c:	57                   	push   edi
c002008d:	b8 04 00 00 00       	mov    eax,0x4
c0020092:	56                   	push   esi
c0020093:	53                   	push   ebx
c0020094:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020098:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002009c:	8d 7a ff             	lea    edi,[edx-0x1]
c002009f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00200a3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00200a7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c00200ad:	77 25                	ja     c00200d4 <SATA::read(unsigned long long, int, void*)+0x48>
c00200af:	b8 06 00 00 00       	mov    eax,0x6
c00200b4:	85 f6                	test   esi,esi
c00200b6:	74 1c                	je     c00200d4 <SATA::read(unsigned long long, int, void*)+0x48>
c00200b8:	50                   	push   eax
c00200b9:	50                   	push   eax
c00200ba:	6a 00                	push   0x0
c00200bc:	56                   	push   esi
c00200bd:	52                   	push   edx
c00200be:	53                   	push   ebx
c00200bf:	51                   	push   ecx
c00200c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00200c4:	e8 3b fd ff ff       	call   c001fe04 <SATA::access(unsigned long long, int, void*, bool)>
c00200c9:	83 c4 20             	add    esp,0x20
c00200cc:	85 c0                	test   eax,eax
c00200ce:	0f 95 c0             	setne  al
c00200d1:	0f b6 c0             	movzx  eax,al
c00200d4:	5b                   	pop    ebx
c00200d5:	5e                   	pop    esi
c00200d6:	5f                   	pop    edi
c00200d7:	c3                   	ret    

c00200d8 <SATA::write(unsigned long long, int, void*)>:
c00200d8:	55                   	push   ebp
c00200d9:	b8 04 00 00 00       	mov    eax,0x4
c00200de:	57                   	push   edi
c00200df:	56                   	push   esi
c00200e0:	53                   	push   ebx
c00200e1:	83 ec 0c             	sub    esp,0xc
c00200e4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00200e8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00200ec:	8d 73 ff             	lea    esi,[ebx-0x1]
c00200ef:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00200f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00200f7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c00200fd:	77 3d                	ja     c002013c <SATA::write(unsigned long long, int, void*)+0x64>
c00200ff:	b8 06 00 00 00       	mov    eax,0x6
c0020104:	85 ed                	test   ebp,ebp
c0020106:	74 34                	je     c002013c <SATA::write(unsigned long long, int, void*)+0x64>
c0020108:	c1 e3 09             	shl    ebx,0x9
c002010b:	01 eb                	add    ebx,ebp
c002010d:	89 d6                	mov    esi,edx
c002010f:	89 cf                	mov    edi,ecx
c0020111:	83 c6 01             	add    esi,0x1
c0020114:	83 d7 00             	adc    edi,0x0
c0020117:	50                   	push   eax
c0020118:	50                   	push   eax
c0020119:	6a 01                	push   0x1
c002011b:	55                   	push   ebp
c002011c:	81 c5 00 02 00 00    	add    ebp,0x200
c0020122:	6a 01                	push   0x1
c0020124:	51                   	push   ecx
c0020125:	52                   	push   edx
c0020126:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002012a:	e8 d5 fc ff ff       	call   c001fe04 <SATA::access(unsigned long long, int, void*, bool)>
c002012f:	83 c4 20             	add    esp,0x20
c0020132:	89 f2                	mov    edx,esi
c0020134:	89 f9                	mov    ecx,edi
c0020136:	39 dd                	cmp    ebp,ebx
c0020138:	75 d3                	jne    c002010d <SATA::write(unsigned long long, int, void*)+0x35>
c002013a:	31 c0                	xor    eax,eax
c002013c:	83 c4 0c             	add    esp,0xc
c002013f:	5b                   	pop    ebx
c0020140:	5e                   	pop    esi
c0020141:	5f                   	pop    edi
c0020142:	5d                   	pop    ebp
c0020143:	c3                   	ret    

c0020144 <SATAPI::write(unsigned long long, int, void*)>:
c0020144:	b8 03 00 00 00       	mov    eax,0x3
c0020149:	c3                   	ret    

c002014a <SATAPI::close(int, int, void*)>:
c002014a:	83 ec 0c             	sub    esp,0xc
c002014d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020151:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020157:	85 c0                	test   eax,eax
c0020159:	74 0c                	je     c0020167 <SATAPI::close(int, int, void*)+0x1d>
c002015b:	83 ec 0c             	sub    esp,0xc
c002015e:	8b 10                	mov    edx,DWORD PTR [eax]
c0020160:	50                   	push   eax
c0020161:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0020164:	83 c4 10             	add    esp,0x10
c0020167:	31 c0                	xor    eax,eax
c0020169:	83 c4 0c             	add    esp,0xc
c002016c:	c3                   	ret    
c002016d:	90                   	nop

c002016e <SATAPI::SATAPI()>:
c002016e:	83 ec 0c             	sub    esp,0xc
c0020171:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020175:	83 ec 04             	sub    esp,0x4
c0020178:	68 00 08 00 00       	push   0x800
c002017d:	68 44 59 02 c0       	push   0xc0025944
c0020182:	50                   	push   eax
c0020183:	e8 56 9c fe ff       	call   c0009dde <PhysicalDisk::PhysicalDisk(char const*, int)>
c0020188:	83 c4 10             	add    esp,0x10
c002018b:	ba 38 5a 02 c0       	mov    edx,0xc0025a38
c0020190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020194:	89 10                	mov    DWORD PTR [eax],edx
c0020196:	90                   	nop
c0020197:	83 c4 0c             	add    esp,0xc
c002019a:	c3                   	ret    
c002019b:	90                   	nop

c002019c <SATAPI::diskRemoved()>:
c002019c:	c3                   	ret    
c002019d:	90                   	nop

c002019e <SATAPI::diskInserted()>:
c002019e:	83 ec 18             	sub    esp,0x18
c00201a1:	68 50 59 02 c0       	push   0xc0025950
c00201a6:	e8 b9 6d fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00201ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00201af:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c00201b6:	83 c4 1c             	add    esp,0x1c
c00201b9:	c3                   	ret    

c00201ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c00201ba:	55                   	push   ebp
c00201bb:	57                   	push   edi
c00201bc:	56                   	push   esi
c00201bd:	53                   	push   ebx
c00201be:	83 ec 34             	sub    esp,0x34
c00201c1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c00201c5:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00201c9:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c00201cd:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00201d1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00201d5:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00201db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00201e1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00201e5:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00201eb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00201ef:	83 c0 02             	add    eax,0x2
c00201f2:	c1 e0 07             	shl    eax,0x7
c00201f5:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00201f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00201fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020201:	c1 e0 07             	shl    eax,0x7
c0020204:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0020208:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002020c:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0020216:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c002021a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0020220:	e8 5f ea ff ff       	call   c001ec84 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0020225:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0020229:	83 c4 10             	add    esp,0x10
c002022c:	b8 01 00 00 00       	mov    eax,0x1
c0020231:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c0020236:	0f 84 53 02 00 00    	je     c002048f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c002023c:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020242:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020246:	8b 00                	mov    eax,DWORD PTR [eax]
c0020248:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002024e:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0020254:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020258:	c1 e1 05             	shl    ecx,0x5
c002025b:	01 c8                	add    eax,ecx
c002025d:	8b 08                	mov    ecx,DWORD PTR [eax]
c002025f:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0020265:	81 c9 25 00 01 00    	or     ecx,0x10025
c002026b:	89 08                	mov    DWORD PTR [eax],ecx
c002026d:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0020273:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0020279:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c002027f:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0020282:	8d 7b 40             	lea    edi,[ebx+0x40]
c0020285:	50                   	push   eax
c0020286:	68 90 00 00 00       	push   0x90
c002028b:	6a 00                	push   0x0
c002028d:	53                   	push   ebx
c002028e:	e8 5d 02 fe ff       	call   c00004f0 <memset>
c0020293:	b9 0c 00 00 00       	mov    ecx,0xc
c0020298:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c002029c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002029e:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c00202a4:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c00202a8:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00202ae:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00202b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00202b6:	48                   	dec    eax
c00202b7:	25 ff ff 3f 00       	and    eax,0x3fffff
c00202bc:	89 c1                	mov    ecx,eax
c00202be:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c00202c4:	25 00 00 c0 ff       	and    eax,0xffc00000
c00202c9:	09 c8                	or     eax,ecx
c00202cb:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c00202d1:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c00202d7:	83 c8 80             	or     eax,0xffffff80
c00202da:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c00202e0:	66 8b 03             	mov    ax,WORD PTR [ebx]
c00202e3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00202e7:	25 00 7f 00 00       	and    eax,0x7f00
c00202ec:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00202f0:	0d 27 80 ff ff       	or     eax,0xffff8027
c00202f5:	66 89 03             	mov    WORD PTR [ebx],ax
c00202f8:	89 d0                	mov    eax,edx
c00202fa:	c1 ea 18             	shr    edx,0x18
c00202fd:	c1 e8 10             	shr    eax,0x10
c0020300:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0020303:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0020306:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c002030a:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002030d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020311:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0020314:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020318:	83 c4 10             	add    esp,0x10
c002031b:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002031f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020323:	31 c0                	xor    eax,eax
c0020325:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c002032b:	80 e1 88             	and    cl,0x88
c002032e:	74 0a                	je     c002033a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c0020330:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0020335:	74 0a                	je     c0020341 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c0020337:	40                   	inc    eax
c0020338:	eb eb                	jmp    c0020325 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c002033a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002033f:	75 43                	jne    c0020384 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0020341:	83 ec 0c             	sub    esp,0xc
c0020344:	68 68 59 02 c0       	push   0xc0025968
c0020349:	e8 16 6c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c002034e:	58                   	pop    eax
c002034f:	5a                   	pop    edx
c0020350:	68 7d 59 02 c0       	push   0xc002597d
c0020355:	ff 35 b4 e1 02 c0    	push   DWORD PTR ds:0xc002e1b4
c002035b:	e8 fc 23 ff ff       	call   c001275c <VgaText::puts(char const*)>
c0020360:	59                   	pop    ecx
c0020361:	5b                   	pop    ebx
c0020362:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020366:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002036c:	e8 ad e9 ff ff       	call   c001ed1e <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0020371:	5e                   	pop    esi
c0020372:	5f                   	pop    edi
c0020373:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0020377:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c002037d:	e8 7c e9 ff ff       	call   c001ecfe <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0020382:	eb 48                	jmp    c00203cc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c0020384:	be 01 00 00 00       	mov    esi,0x1
c0020389:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c002038d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020391:	d3 e6                	shl    esi,cl
c0020393:	c1 e7 07             	shl    edi,0x7
c0020396:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c002039c:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c00203a1:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c00203a5:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c00203ab:	85 c6                	test   esi,eax
c00203ad:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00203b3:	0f 84 a3 00 00 00    	je     c002045c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c00203b9:	0f ba e0 1e          	bt     eax,0x1e
c00203bd:	73 1a                	jae    c00203d9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	68 8f 59 02 c0       	push   0xc002598f
c00203c7:	e8 98 6b fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00203cc:	83 c4 10             	add    esp,0x10
c00203cf:	b8 01 00 00 00       	mov    eax,0x1
c00203d4:	e9 b6 00 00 00       	jmp    c002048f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c00203d9:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c00203df:	83 f8 0d             	cmp    eax,0xd
c00203e2:	77 0a                	ja     c00203ee <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c00203e4:	83 ec 0c             	sub    esp,0xc
c00203e7:	68 c8 00 00 00       	push   0xc8
c00203ec:	eb 28                	jmp    c0020416 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c00203ee:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c00203f4:	83 f8 0d             	cmp    eax,0xd
c00203f7:	77 0a                	ja     c0020403 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c00203f9:	83 ec 0c             	sub    esp,0xc
c00203fc:	68 58 02 00 00       	push   0x258
c0020401:	eb 13                	jmp    c0020416 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c0020403:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c0020409:	83 f8 06             	cmp    eax,0x6
c002040c:	77 10                	ja     c002041e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c002040e:	83 ec 0c             	sub    esp,0xc
c0020411:	68 dc 05 00 00       	push   0x5dc
c0020416:	e8 8d 69 ff ff       	call   c0016da8 <milliTenthSleep(unsigned int)>
c002041b:	83 c4 10             	add    esp,0x10
c002041e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020422:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c0020425:	75 06                	jne    c002042d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c0020427:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c002042b:	74 15                	je     c0020442 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c002042d:	83 fb 06             	cmp    ebx,0x6
c0020430:	77 10                	ja     c0020442 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c0020432:	83 ec 0c             	sub    esp,0xc
c0020435:	68 c4 09 00 00       	push   0x9c4
c002043a:	e8 69 69 ff ff       	call   c0016da8 <milliTenthSleep(unsigned int)>
c002043f:	83 c4 10             	add    esp,0x10
c0020442:	43                   	inc    ebx
c0020443:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c0020449:	0f 85 56 ff ff ff    	jne    c00203a5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c002044f:	83 ec 0c             	sub    esp,0xc
c0020452:	68 a2 59 02 c0       	push   0xc00259a2
c0020457:	e9 6b ff ff ff       	jmp    c00203c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002045c:	0f ba e0 1e          	bt     eax,0x1e
c0020460:	73 0d                	jae    c002046f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c0020462:	83 ec 0c             	sub    esp,0xc
c0020465:	68 b6 59 02 c0       	push   0xc00259b6
c002046a:	e9 58 ff ff ff       	jmp    c00203c7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c002046f:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0020474:	74 17                	je     c002048d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c0020476:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c002047b:	74 10                	je     c002048d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c002047d:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c0020483:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0020487:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c002048b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002048d:	31 c0                	xor    eax,eax
c002048f:	83 c4 2c             	add    esp,0x2c
c0020492:	5b                   	pop    ebx
c0020493:	5e                   	pop    esi
c0020494:	5f                   	pop    edi
c0020495:	5d                   	pop    ebp
c0020496:	c3                   	ret    
c0020497:	90                   	nop

c0020498 <SATAPI::eject()>:
c0020498:	57                   	push   edi
c0020499:	b9 03 00 00 00       	mov    ecx,0x3
c002049e:	83 ec 18             	sub    esp,0x18
c00204a1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00204a5:	fc                   	cld    
c00204a6:	31 c0                	xor    eax,eax
c00204a8:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00204aa:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c00204af:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00204b4:	50                   	push   eax
c00204b5:	6a 00                	push   0x0
c00204b7:	6a 00                	push   0x0
c00204b9:	6a 00                	push   0x0
c00204bb:	6a 00                	push   0x0
c00204bd:	6a 02                	push   0x2
c00204bf:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00204c3:	50                   	push   eax
c00204c4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00204c8:	e8 ed fc ff ff       	call   c00201ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00204cd:	31 c0                	xor    eax,eax
c00204cf:	83 c4 38             	add    esp,0x38
c00204d2:	5f                   	pop    edi
c00204d3:	c3                   	ret    

c00204d4 <SATAPI::detectMedia()>:
c00204d4:	53                   	push   ebx
c00204d5:	83 ec 14             	sub    esp,0x14
c00204d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00204dc:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00204e2:	e8 91 ae fe ff       	call   c000b378 <VCache::writeWriteBuffer()>
c00204e7:	59                   	pop    ecx
c00204e8:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c00204ee:	e8 75 ae fe ff       	call   c000b368 <VCache::invalidateReadBuffer()>
c00204f3:	c7 04 24 cb 59 02 c0 	mov    DWORD PTR [esp],0xc00259cb
c00204fa:	e8 65 6a fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00204ff:	83 c4 10             	add    esp,0x10
c0020502:	31 c0                	xor    eax,eax
c0020504:	8b 14 85 e0 ba 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4520]
c002050b:	85 d2                	test   edx,edx
c002050d:	74 0f                	je     c002051e <SATAPI::detectMedia()+0x4a>
c002050f:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c0020515:	75 07                	jne    c002051e <SATAPI::detectMedia()+0x4a>
c0020517:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c002051e:	40                   	inc    eax
c002051f:	83 f8 1a             	cmp    eax,0x1a
c0020522:	75 e0                	jne    c0020504 <SATAPI::detectMedia()+0x30>
c0020524:	83 c4 08             	add    esp,0x8
c0020527:	5b                   	pop    ebx
c0020528:	c3                   	ret    
c0020529:	90                   	nop

c002052a <SATAPI::open(int, int, void*)>:
c002052a:	56                   	push   esi
c002052b:	53                   	push   ebx
c002052c:	51                   	push   ecx
c002052d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0020531:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020535:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c002053f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0020545:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c002054f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020553:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c002055d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0020563:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c002056a:	e8 27 fc fe ff       	call   c0010196 <Phys::allocatePage()>
c002056f:	89 c6                	mov    esi,eax
c0020571:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0020577:	81 c6 00 10 00 00    	add    esi,0x1000
c002057d:	e8 14 fc fe ff       	call   c0010196 <Phys::allocatePage()>
c0020582:	39 c6                	cmp    esi,eax
c0020584:	74 10                	je     c0020596 <SATAPI::open(int, int, void*)+0x6c>
c0020586:	83 ec 0c             	sub    esp,0xc
c0020589:	68 e0 59 02 c0       	push   0xc00259e0
c002058e:	e8 0f fa fe ff       	call   c000ffa2 <KePanic(char const*)>
c0020593:	83 c4 10             	add    esp,0x10
c0020596:	83 ec 0c             	sub    esp,0xc
c0020599:	6a 02                	push   0x2
c002059b:	e8 f5 2d ff ff       	call   c0013395 <Virt::allocateKernelVirtualPages(int)>
c00205a0:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c00205a6:	6a 03                	push   0x3
c00205a8:	50                   	push   eax
c00205a9:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00205af:	ff 35 50 e2 02 c0    	push   DWORD PTR ds:0xc002e250
c00205b5:	e8 be 34 ff ff       	call   c0013a78 <VAS::mapPage(unsigned long, unsigned long, int)>
c00205ba:	83 c4 14             	add    esp,0x14
c00205bd:	68 78 01 00 00       	push   0x178
c00205c2:	e8 94 f6 fe ff       	call   c000fc5b <malloc>
c00205c7:	83 c4 0c             	add    esp,0xc
c00205ca:	89 c6                	mov    esi,eax
c00205cc:	6a 00                	push   0x0
c00205ce:	68 ff ff ff 7f       	push   0x7fffffff
c00205d3:	6a 00                	push   0x0
c00205d5:	6a 00                	push   0x0
c00205d7:	53                   	push   ebx
c00205d8:	68 f6 59 02 c0       	push   0xc00259f6
c00205dd:	50                   	push   eax
c00205de:	e8 31 a2 fe ff       	call   c000a814 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00205e3:	83 c4 14             	add    esp,0x14
c00205e6:	56                   	push   esi
c00205e7:	e8 e8 a2 fe ff       	call   c000a8d4 <LogicalDisk::assignDriveLetter()>
c00205ec:	5a                   	pop    edx
c00205ed:	0f be c0             	movsx  eax,al
c00205f0:	59                   	pop    ecx
c00205f1:	50                   	push   eax
c00205f2:	68 3c 58 02 c0       	push   0xc002583c
c00205f7:	e8 68 69 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00205fc:	58                   	pop    eax
c00205fd:	5a                   	pop    edx
c00205fe:	56                   	push   esi
c00205ff:	53                   	push   ebx
c0020600:	e8 f5 93 fe ff       	call   c00099fa <Device::addChild(Device*)>
c0020605:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c002060b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002060e:	e8 33 98 fe ff       	call   c0009e46 <PhysicalDisk::startCache()>
c0020613:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002061a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002061d:	e8 b2 fe ff ff       	call   c00204d4 <SATAPI::detectMedia()>
c0020622:	83 c4 14             	add    esp,0x14
c0020625:	31 c0                	xor    eax,eax
c0020627:	5b                   	pop    ebx
c0020628:	5e                   	pop    esi
c0020629:	c3                   	ret    

c002062a <SATAPI::read(unsigned long long, int, void*)>:
c002062a:	57                   	push   edi
c002062b:	56                   	push   esi
c002062c:	53                   	push   ebx
c002062d:	83 ec 30             	sub    esp,0x30
c0020630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0020634:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0020638:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c002063c:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0020640:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020644:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0020648:	83 fe 04             	cmp    esi,0x4
c002064b:	7e 10                	jle    c002065d <SATAPI::read(unsigned long long, int, void*)+0x33>
c002064d:	83 ec 0c             	sub    esp,0xc
c0020650:	68 04 5a 02 c0       	push   0xc0025a04
c0020655:	e8 48 f9 fe ff       	call   c000ffa2 <KePanic(char const*)>
c002065a:	83 c4 10             	add    esp,0x10
c002065d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0020663:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0020669:	51                   	push   ecx
c002066a:	50                   	push   eax
c002066b:	83 c0 02             	add    eax,0x2
c002066e:	c1 e0 07             	shl    eax,0x7
c0020671:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c0020677:	50                   	push   eax
c0020678:	52                   	push   edx
c0020679:	e8 ca e6 ff ff       	call   c001ed48 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c002067e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0020682:	b9 03 00 00 00       	mov    ecx,0x3
c0020687:	fc                   	cld    
c0020688:	31 c0                	xor    eax,eax
c002068a:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002068c:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c0020691:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0020696:	83 c4 0c             	add    esp,0xc
c0020699:	6a 00                	push   0x0
c002069b:	6a 00                	push   0x0
c002069d:	6a 00                	push   0x0
c002069f:	6a 00                	push   0x0
c00206a1:	6a 02                	push   0x2
c00206a3:	8d 44 24 30          	lea    eax,[esp+0x30]
c00206a7:	50                   	push   eax
c00206a8:	53                   	push   ebx
c00206a9:	e8 0c fb ff ff       	call   c00201ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00206ae:	83 c4 20             	add    esp,0x20
c00206b1:	85 c0                	test   eax,eax
c00206b3:	75 44                	jne    c00206f9 <SATAPI::read(unsigned long long, int, void*)+0xcf>
c00206b5:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00206b9:	b9 03 00 00 00       	mov    ecx,0x3
c00206be:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00206c0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00206c4:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c00206c9:	0f c8                	bswap  eax
c00206cb:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c00206cf:	89 f0                	mov    eax,esi
c00206d1:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00206d5:	50                   	push   eax
c00206d6:	56                   	push   esi
c00206d7:	c1 e6 0b             	shl    esi,0xb
c00206da:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00206de:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00206e6:	56                   	push   esi
c00206e7:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00206eb:	50                   	push   eax
c00206ec:	53                   	push   ebx
c00206ed:	e8 c8 fa ff ff       	call   c00201ba <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00206f2:	83 c4 20             	add    esp,0x20
c00206f5:	85 c0                	test   eax,eax
c00206f7:	74 14                	je     c002070d <SATAPI::read(unsigned long long, int, void*)+0xe3>
c00206f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00206fd:	83 ec 0c             	sub    esp,0xc
c0020700:	53                   	push   ebx
c0020701:	e8 ce fd ff ff       	call   c00204d4 <SATAPI::detectMedia()>
c0020706:	83 c4 10             	add    esp,0x10
c0020709:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002070d:	83 c4 30             	add    esp,0x30
c0020710:	5b                   	pop    ebx
c0020711:	5e                   	pop    esi
c0020712:	5f                   	pop    edi
c0020713:	c3                   	ret    

c0020714 <IOAPIC::close(int, int, void*)>:
c0020714:	b8 00 00 00 00       	mov    eax,0x0
c0020719:	c3                   	ret    

c002071a <apicGetBase()>:
c002071a:	55                   	push   ebp
c002071b:	89 e5                	mov    ebp,esp
c002071d:	83 ec 08             	sub    esp,0x8
c0020720:	83 ec 0c             	sub    esp,0xc
c0020723:	68 68 5a 02 c0       	push   0xc0025a68
c0020728:	e8 75 f8 fe ff       	call   c000ffa2 <KePanic(char const*)>
c002072d:	83 c4 10             	add    esp,0x10
c0020730:	b8 00 00 00 00       	mov    eax,0x0
c0020735:	c9                   	leave  
c0020736:	c3                   	ret    
c0020737:	90                   	nop

c0020738 <IOAPIC::IOAPIC()>:
c0020738:	83 ec 0c             	sub    esp,0xc
c002073b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002073f:	83 ec 08             	sub    esp,0x8
c0020742:	68 77 5a 02 c0       	push   0xc0025a77
c0020747:	50                   	push   eax
c0020748:	e8 0f 94 fe ff       	call   c0009b5c <Device::Device(char const*)>
c002074d:	83 c4 10             	add    esp,0x10
c0020750:	ba 98 5a 02 c0       	mov    edx,0xc0025a98
c0020755:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020759:	89 10                	mov    DWORD PTR [eax],edx
c002075b:	90                   	nop
c002075c:	83 c4 0c             	add    esp,0xc
c002075f:	c3                   	ret    

c0020760 <apicOpen()>:
c0020760:	55                   	push   ebp
c0020761:	89 e5                	mov    ebp,esp
c0020763:	53                   	push   ebx
c0020764:	83 ec 34             	sub    esp,0x34
c0020767:	83 ec 0c             	sub    esp,0xc
c002076a:	68 7f 5a 02 c0       	push   0xc0025a7f
c002076f:	e8 f0 67 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0020774:	83 c4 10             	add    esp,0x10
c0020777:	a0 a0 f4 02 c0       	mov    al,ds:0xc002f4a0
c002077c:	83 f0 01             	xor    eax,0x1
c002077f:	0f b6 c0             	movzx  eax,al
c0020782:	85 c0                	test   eax,eax
c0020784:	0f 84 a3 00 00 00    	je     c002082d <apicOpen()+0xcd>
c002078a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c002078e:	a0 40 be 02 c0       	mov    al,ds:0xc002be40
c0020793:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c0020797:	0f b6 c0             	movzx  eax,al
c002079a:	39 c2                	cmp    edx,eax
c002079c:	0f 83 84 00 00 00    	jae    c0020826 <apicOpen()+0xc6>
c00207a2:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c00207a9:	83 ec 0c             	sub    esp,0xc
c00207ac:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00207af:	e8 a7 f4 fe ff       	call   c000fc5b <malloc>
c00207b4:	83 c4 10             	add    esp,0x10
c00207b7:	89 c3                	mov    ebx,eax
c00207b9:	83 ec 0c             	sub    esp,0xc
c00207bc:	53                   	push   ebx
c00207bd:	e8 76 ff ff ff       	call   c0020738 <IOAPIC::IOAPIC()>
c00207c2:	83 c4 10             	add    esp,0x10
c00207c5:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00207c8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c00207cc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00207cf:	89 14 85 80 f4 02 c0 	mov    DWORD PTR [eax*4-0x3ffd0b80],edx
c00207d6:	a1 60 f4 02 c0       	mov    eax,ds:0xc002f460
c00207db:	83 c0 01             	add    eax,0x1
c00207de:	a3 60 f4 02 c0       	mov    ds:0xc002f460,eax
c00207e3:	a1 d0 c0 02 c0       	mov    eax,ds:0xc002c0d0
c00207e8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c00207ee:	83 ec 08             	sub    esp,0x8
c00207f1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00207f4:	50                   	push   eax
c00207f5:	e8 00 92 fe ff       	call   c00099fa <Device::addChild(Device*)>
c00207fa:	83 c4 10             	add    esp,0x10
c00207fd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020800:	8b 00                	mov    eax,DWORD PTR [eax]
c0020802:	83 c0 08             	add    eax,0x8
c0020805:	8b 00                	mov    eax,DWORD PTR [eax]
c0020807:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c002080b:	6a 00                	push   0x0
c002080d:	6a 00                	push   0x0
c002080f:	52                   	push   edx
c0020810:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0020813:	ff d0                	call   eax
c0020815:	83 c4 10             	add    esp,0x10
c0020818:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c002081b:	83 c0 01             	add    eax,0x1
c002081e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c0020821:	e9 68 ff ff ff       	jmp    c002078e <apicOpen()+0x2e>
c0020826:	c6 05 a0 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f4a0,0x1
c002082d:	e8 e8 fe ff ff       	call   c002071a <apicGetBase()>
c0020832:	05 f0 00 00 00       	add    eax,0xf0
c0020837:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002083a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002083d:	8b 00                	mov    eax,DWORD PTR [eax]
c002083f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0020842:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c0020849:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c0020850:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0020853:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0020856:	89 10                	mov    DWORD PTR [eax],edx
c0020858:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c002085f:	a1 8c bd 02 c0       	mov    eax,ds:0xc002bd8c
c0020864:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c0020867:	7d 7c                	jge    c00208e5 <apicOpen()+0x185>
c0020869:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002086c:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020873:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c0020876:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020879:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020880:	c1 e8 08             	shr    eax,0x8
c0020883:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c0020887:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002088a:	8b 04 85 a0 bd 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd4260]
c0020891:	c1 e8 18             	shr    eax,0x18
c0020894:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0020897:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c002089b:	3d ff 00 00 00       	cmp    eax,0xff
c00208a0:	75 3a                	jne    c00208dc <apicOpen()+0x17c>
c00208a2:	e8 73 fe ff ff       	call   c002071a <apicGetBase()>
c00208a7:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c00208ab:	83 fa 01             	cmp    edx,0x1
c00208ae:	75 07                	jne    c00208b7 <apicOpen()+0x157>
c00208b0:	ba 60 03 00 00       	mov    edx,0x360
c00208b5:	eb 05                	jmp    c00208bc <apicOpen()+0x15c>
c00208b7:	ba 50 03 00 00       	mov    edx,0x350
c00208bc:	01 d0                	add    eax,edx
c00208be:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00208c1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00208c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00208c6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00208c9:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c00208d0:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c00208d4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00208d7:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00208da:	89 10                	mov    DWORD PTR [eax],edx
c00208dc:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c00208e0:	e9 7a ff ff ff       	jmp    c002085f <apicOpen()+0xff>
c00208e5:	90                   	nop
c00208e6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00208e9:	c9                   	leave  
c00208ea:	c3                   	ret    
c00208eb:	90                   	nop

c00208ec <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c00208ec:	55                   	push   ebp
c00208ed:	89 e5                	mov    ebp,esp
c00208ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00208f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00208f8:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c00208fb:	72 1d                	jb     c002091a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c00208fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020900:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0020906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020909:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c002090f:	01 d0                	add    eax,edx
c0020911:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0020914:	73 04                	jae    c002091a <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0020916:	b0 01                	mov    al,0x1
c0020918:	eb 02                	jmp    c002091c <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c002091a:	b0 00                	mov    al,0x0
c002091c:	5d                   	pop    ebp
c002091d:	c3                   	ret    

c002091e <IOAPIC::read(int)>:
c002091e:	55                   	push   ebp
c002091f:	89 e5                	mov    ebp,esp
c0020921:	83 ec 10             	sub    esp,0x10
c0020924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020927:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c002092d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020930:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020933:	0f b6 d0             	movzx  edx,al
c0020936:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020939:	89 10                	mov    DWORD PTR [eax],edx
c002093b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002093e:	83 c0 10             	add    eax,0x10
c0020941:	8b 00                	mov    eax,DWORD PTR [eax]
c0020943:	c9                   	leave  
c0020944:	c3                   	ret    
c0020945:	90                   	nop

c0020946 <IOAPIC::open(int, int, void*)>:
c0020946:	55                   	push   ebp
c0020947:	89 e5                	mov    ebp,esp
c0020949:	57                   	push   edi
c002094a:	56                   	push   esi
c002094b:	53                   	push   ebx
c002094c:	83 ec 04             	sub    esp,0x4
c002094f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020952:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020955:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002095b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002095e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020964:	8b 14 85 80 be 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4180]
c002096b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002096e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020974:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020977:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002097d:	8b 14 85 00 bf 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd4100]
c0020984:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020987:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002098d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020990:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0020996:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020999:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002099f:	0f b6 f0             	movzx  esi,al
c00209a2:	89 d0                	mov    eax,edx
c00209a4:	ba 00 00 00 00       	mov    edx,0x0
c00209a9:	89 c7                	mov    edi,eax
c00209ab:	83 e7 ff             	and    edi,0xffffffff
c00209ae:	89 f9                	mov    ecx,edi
c00209b0:	0f b6 da             	movzx  ebx,dl
c00209b3:	89 c8                	mov    eax,ecx
c00209b5:	89 da                	mov    edx,ebx
c00209b7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00209ba:	8d 5e 08             	lea    ebx,[esi+0x8]
c00209bd:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00209c1:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00209c5:	83 e0 00             	and    eax,0x0
c00209c8:	09 d0                	or     eax,edx
c00209ca:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00209ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209d1:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00209d7:	8d 50 01             	lea    edx,[eax+0x1]
c00209da:	88 d1                	mov    cl,dl
c00209dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00209df:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c00209e5:	0f b6 d0             	movzx  edx,al
c00209e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00209eb:	83 c2 08             	add    edx,0x8
c00209ee:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00209f2:	0f b6 c9             	movzx  ecx,cl
c00209f5:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00209fb:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00209ff:	6a 01                	push   0x1
c0020a01:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020a04:	e8 15 ff ff ff       	call   c002091e <IOAPIC::read(int)>
c0020a09:	83 c4 08             	add    esp,0x8
c0020a0c:	c1 f8 10             	sar    eax,0x10
c0020a0f:	0f b6 c0             	movzx  eax,al
c0020a12:	8d 50 01             	lea    edx,[eax+0x1]
c0020a15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a18:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0020a1e:	b8 00 00 00 00       	mov    eax,0x0
c0020a23:	8d 65 f4             	lea    esp,[ebp-0xc]
c0020a26:	5b                   	pop    ebx
c0020a27:	5e                   	pop    esi
c0020a28:	5f                   	pop    edi
c0020a29:	5d                   	pop    ebp
c0020a2a:	c3                   	ret    
c0020a2b:	90                   	nop

c0020a2c <IOAPIC::write(int, int)>:
c0020a2c:	55                   	push   ebp
c0020a2d:	89 e5                	mov    ebp,esp
c0020a2f:	83 ec 10             	sub    esp,0x10
c0020a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020a35:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a3b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020a3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020a41:	0f b6 d0             	movzx  edx,al
c0020a44:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020a47:	89 10                	mov    DWORD PTR [eax],edx
c0020a49:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020a4c:	8d 50 10             	lea    edx,[eax+0x10]
c0020a4f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020a52:	89 02                	mov    DWORD PTR [edx],eax
c0020a54:	90                   	nop
c0020a55:	c9                   	leave  
c0020a56:	c3                   	ret    
c0020a57:	90                   	nop

c0020a58 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0020a58:	55                   	push   ebp
c0020a59:	89 e5                	mov    ebp,esp
c0020a5b:	53                   	push   ebx
c0020a5c:	83 ec 2c             	sub    esp,0x2c
c0020a5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020a62:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020a65:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0020a68:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0020a6b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020a6e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020a71:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020a74:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0020a77:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0020a7a:	88 d8                	mov    al,bl
c0020a7c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020a7f:	88 c8                	mov    al,cl
c0020a81:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020a84:	88 d0                	mov    al,dl
c0020a86:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0020a89:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020a8d:	83 c0 08             	add    eax,0x8
c0020a90:	01 c0                	add    eax,eax
c0020a92:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020a95:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020a99:	83 c0 08             	add    eax,0x8
c0020a9c:	01 c0                	add    eax,eax
c0020a9e:	83 c0 01             	add    eax,0x1
c0020aa1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020aa4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020aa7:	50                   	push   eax
c0020aa8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020aab:	e8 6e fe ff ff       	call   c002091e <IOAPIC::read(int)>
c0020ab0:	83 c4 08             	add    esp,0x8
c0020ab3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0020ab6:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020abd:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020ac0:	c1 e0 18             	shl    eax,0x18
c0020ac3:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0020ac6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0020ac9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020acc:	52                   	push   edx
c0020acd:	50                   	push   eax
c0020ace:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020ad1:	e8 56 ff ff ff       	call   c0020a2c <IOAPIC::write(int, int)>
c0020ad6:	83 c4 0c             	add    esp,0xc
c0020ad9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020adc:	50                   	push   eax
c0020add:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020ae0:	e8 39 fe ff ff       	call   c002091e <IOAPIC::read(int)>
c0020ae5:	83 c4 08             	add    esp,0x8
c0020ae8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0020aeb:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0020af2:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0020af9:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0020b00:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c0020b04:	85 c0                	test   eax,eax
c0020b06:	74 09                	je     c0020b11 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c0020b08:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0020b0f:	eb 07                	jmp    c0020b18 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c0020b11:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0020b18:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c0020b1c:	85 c0                	test   eax,eax
c0020b1e:	74 09                	je     c0020b29 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c0020b20:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0020b27:	eb 07                	jmp    c0020b30 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c0020b29:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0020b30:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0020b37:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0020b3b:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020b3e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020b41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020b44:	52                   	push   edx
c0020b45:	50                   	push   eax
c0020b46:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020b49:	e8 de fe ff ff       	call   c0020a2c <IOAPIC::write(int, int)>
c0020b4e:	83 c4 0c             	add    esp,0xc
c0020b51:	90                   	nop
c0020b52:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020b55:	c9                   	leave  
c0020b56:	c3                   	ret    
c0020b57:	90                   	nop

c0020b58 <APICTimer::close(int, int, void*)>:
c0020b58:	b8 00 00 00 00       	mov    eax,0x0
c0020b5d:	c3                   	ret    
c0020b5e:	66 90                	xchg   ax,ax

c0020b60 <apicTimerHandler(regs*, void*)>:
c0020b60:	83 ec 0c             	sub    esp,0xc
c0020b63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b67:	8b 08                	mov    ecx,DWORD PTR [eax]
c0020b69:	b8 10 27 00 00       	mov    eax,0x2710
c0020b6e:	ba 00 00 00 00       	mov    edx,0x0
c0020b73:	f7 f1                	div    ecx
c0020b75:	83 ec 0c             	sub    esp,0xc
c0020b78:	50                   	push   eax
c0020b79:	e8 52 a5 fe ff       	call   c000b0d0 <timerHandler(unsigned int)>
c0020b7e:	83 c4 10             	add    esp,0x10
c0020b81:	90                   	nop
c0020b82:	83 c4 0c             	add    esp,0xc
c0020b85:	c3                   	ret    
c0020b86:	66 90                	xchg   ax,ax

c0020b88 <APICTimer::open(int, int, void*)>:
c0020b88:	83 ec 0c             	sub    esp,0xc
c0020b8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020b8f:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b91:	83 c0 24             	add    eax,0x24
c0020b94:	8b 00                	mov    eax,DWORD PTR [eax]
c0020b96:	83 ec 08             	sub    esp,0x8
c0020b99:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020b9d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020ba1:	ff d0                	call   eax
c0020ba3:	83 c4 10             	add    esp,0x10
c0020ba6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020baa:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020bae:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bb8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020bbc:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020bc2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020bc6:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020bcc:	83 ec 0c             	sub    esp,0xc
c0020bcf:	51                   	push   ecx
c0020bd0:	6a 01                	push   0x1
c0020bd2:	68 60 0b 02 c0       	push   0xc0020b60
c0020bd7:	52                   	push   edx
c0020bd8:	50                   	push   eax
c0020bd9:	e8 c8 8d fe ff       	call   c00099a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020bde:	83 c4 20             	add    esp,0x20
c0020be1:	89 c2                	mov    edx,eax
c0020be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020be7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020bed:	b8 00 00 00 00       	mov    eax,0x0
c0020bf2:	83 c4 0c             	add    esp,0xc
c0020bf5:	c3                   	ret    
c0020bf6:	66 90                	xchg   ax,ax

c0020bf8 <APICTimer::write(int)>:
c0020bf8:	83 ec 0c             	sub    esp,0xc
c0020bfb:	83 ec 0c             	sub    esp,0xc
c0020bfe:	68 bc 5a 02 c0       	push   0xc0025abc
c0020c03:	e8 9a f3 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0020c08:	83 c4 10             	add    esp,0x10
c0020c0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c0f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020c13:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020c19:	90                   	nop
c0020c1a:	83 c4 0c             	add    esp,0xc
c0020c1d:	c3                   	ret    
c0020c1e:	66 90                	xchg   ax,ax

c0020c20 <APICTimer::APICTimer()>:
c0020c20:	83 ec 0c             	sub    esp,0xc
c0020c23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c27:	83 ec 08             	sub    esp,0x8
c0020c2a:	68 cc 5a 02 c0       	push   0xc0025acc
c0020c2f:	50                   	push   eax
c0020c30:	e8 cf a3 fe ff       	call   c000b004 <Timer::Timer(char const*)>
c0020c35:	83 c4 10             	add    esp,0x10
c0020c38:	ba e0 5a 02 c0       	mov    edx,0xc0025ae0
c0020c3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020c41:	89 10                	mov    DWORD PTR [eax],edx
c0020c43:	90                   	nop
c0020c44:	83 c4 0c             	add    esp,0xc
c0020c47:	c3                   	ret    

c0020c48 <PIT::write(int)>:
c0020c48:	83 ec 10             	sub    esp,0x10
c0020c4b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020c4f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020c53:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0020c59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020c5d:	a3 a4 f4 02 c0       	mov    ds:0xc002f4a4,eax
c0020c62:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0020c67:	89 c2                	mov    edx,eax
c0020c69:	c1 fa 1f             	sar    edx,0x1f
c0020c6c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020c70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c74:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0020c7b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020c80:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020c84:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0020c89:	ee                   	out    dx,al
c0020c8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020c8e:	0f b6 c0             	movzx  eax,al
c0020c91:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0020c98:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020c9c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020ca0:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020ca5:	ee                   	out    dx,al
c0020ca6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020caa:	c1 f8 08             	sar    eax,0x8
c0020cad:	0f b6 c0             	movzx  eax,al
c0020cb0:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0020cb7:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020cbb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020cbf:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020cc4:	ee                   	out    dx,al
c0020cc5:	90                   	nop
c0020cc6:	83 c4 10             	add    esp,0x10
c0020cc9:	c3                   	ret    
c0020cca:	66 90                	xchg   ax,ax

c0020ccc <pitHandler(regs*, void*)>:
c0020ccc:	83 ec 0c             	sub    esp,0xc
c0020ccf:	8b 0d a4 f4 02 c0    	mov    ecx,DWORD PTR ds:0xc002f4a4
c0020cd5:	b8 10 27 00 00       	mov    eax,0x2710
c0020cda:	89 c2                	mov    edx,eax
c0020cdc:	c1 fa 1f             	sar    edx,0x1f
c0020cdf:	f7 f9                	idiv   ecx
c0020ce1:	83 ec 0c             	sub    esp,0xc
c0020ce4:	50                   	push   eax
c0020ce5:	e8 e6 a3 fe ff       	call   c000b0d0 <timerHandler(unsigned int)>
c0020cea:	83 c4 10             	add    esp,0x10
c0020ced:	90                   	nop
c0020cee:	83 c4 0c             	add    esp,0xc
c0020cf1:	c3                   	ret    
c0020cf2:	66 90                	xchg   ax,ax

c0020cf4 <PIT::open(int, int, void*)>:
c0020cf4:	83 ec 0c             	sub    esp,0xc
c0020cf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020cfb:	8b 00                	mov    eax,DWORD PTR [eax]
c0020cfd:	83 c0 24             	add    eax,0x24
c0020d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d02:	83 ec 08             	sub    esp,0x8
c0020d05:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020d0d:	ff d0                	call   eax
c0020d0f:	83 c4 10             	add    esp,0x10
c0020d12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d16:	83 ec 0c             	sub    esp,0xc
c0020d19:	6a 00                	push   0x0
c0020d1b:	6a 01                	push   0x1
c0020d1d:	68 cc 0c 02 c0       	push   0xc0020ccc
c0020d22:	6a 00                	push   0x0
c0020d24:	50                   	push   eax
c0020d25:	e8 7c 8c fe ff       	call   c00099a6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0020d2a:	83 c4 20             	add    esp,0x20
c0020d2d:	89 c2                	mov    edx,eax
c0020d2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d33:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0020d39:	b8 00 00 00 00       	mov    eax,0x0
c0020d3e:	83 c4 0c             	add    esp,0xc
c0020d41:	c3                   	ret    
c0020d42:	66 90                	xchg   ax,ax

c0020d44 <PIT::close(int, int, void*)>:
c0020d44:	83 ec 0c             	sub    esp,0xc
c0020d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d4b:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d59:	6a 01                	push   0x1
c0020d5b:	68 cc 0c 02 c0       	push   0xc0020ccc
c0020d60:	6a 00                	push   0x0
c0020d62:	50                   	push   eax
c0020d63:	e8 74 8c fe ff       	call   c00099dc <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0020d68:	83 c4 10             	add    esp,0x10
c0020d6b:	b8 00 00 00 00       	mov    eax,0x0
c0020d70:	83 c4 0c             	add    esp,0xc
c0020d73:	c3                   	ret    

c0020d74 <PIT::PIT()>:
c0020d74:	83 ec 0c             	sub    esp,0xc
c0020d77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d7b:	83 ec 08             	sub    esp,0x8
c0020d7e:	68 08 5b 02 c0       	push   0xc0025b08
c0020d83:	50                   	push   eax
c0020d84:	e8 7b a2 fe ff       	call   c000b004 <Timer::Timer(char const*)>
c0020d89:	83 c4 10             	add    esp,0x10
c0020d8c:	ba 30 5b 02 c0       	mov    edx,0xc0025b30
c0020d91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d95:	89 10                	mov    DWORD PTR [eax],edx
c0020d97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020d9b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020da1:	0f b6 d0             	movzx  edx,al
c0020da4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020da8:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020daf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020db3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020db9:	0f b6 d0             	movzx  edx,al
c0020dbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dc0:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020dc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020dc9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020dcf:	8d 50 01             	lea    edx,[eax+0x1]
c0020dd2:	88 d1                	mov    cl,dl
c0020dd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020dd8:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0020dde:	0f b6 d0             	movzx  edx,al
c0020de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020de5:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0020de9:	83 e1 3f             	and    ecx,0x3f
c0020dec:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0020df0:	90                   	nop
c0020df1:	83 c4 0c             	add    esp,0xc
c0020df4:	c3                   	ret    
c0020df5:	66 90                	xchg   ax,ax
c0020df7:	66 90                	xchg   ax,ax
c0020df9:	66 90                	xchg   ax,ax
c0020dfb:	66 90                	xchg   ax,ax
c0020dfd:	66 90                	xchg   ax,ax
c0020dff:	90                   	nop

c0020e00 <avxDetect>:
c0020e00:	b8 01 00 00 00       	mov    eax,0x1
c0020e05:	0f a2                	cpuid  
c0020e07:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c0020e0d:	74 15                	je     c0020e24 <avxDetect.noAVX>
c0020e0f:	b8 01 00 00 00       	mov    eax,0x1
c0020e14:	0f a2                	cpuid  
c0020e16:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c0020e1c:	74 06                	je     c0020e24 <avxDetect.noAVX>
c0020e1e:	b8 01 00 00 00       	mov    eax,0x1
c0020e23:	c3                   	ret    

c0020e24 <avxDetect.noAVX>:
c0020e24:	b8 00 00 00 00       	mov    eax,0x0
c0020e29:	c3                   	ret    

c0020e2a <avxSave>:
c0020e2a:	53                   	push   ebx
c0020e2b:	52                   	push   edx
c0020e2c:	31 c0                	xor    eax,eax
c0020e2e:	48                   	dec    eax
c0020e2f:	89 c2                	mov    edx,eax
c0020e31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e35:	0f ae 23             	xsave  [ebx]
c0020e38:	5a                   	pop    edx
c0020e39:	5b                   	pop    ebx
c0020e3a:	c3                   	ret    

c0020e3b <avxLoad>:
c0020e3b:	53                   	push   ebx
c0020e3c:	52                   	push   edx
c0020e3d:	31 c0                	xor    eax,eax
c0020e3f:	48                   	dec    eax
c0020e40:	89 c2                	mov    edx,eax
c0020e42:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020e46:	0f ae 2b             	xrstor [ebx]
c0020e49:	5a                   	pop    edx
c0020e4a:	5b                   	pop    ebx
c0020e4b:	c3                   	ret    

c0020e4c <avxInit>:
c0020e4c:	e8 47 03 00 00       	call   c0021198 <sseInit>
c0020e51:	50                   	push   eax
c0020e52:	51                   	push   ecx
c0020e53:	0f 20 e0             	mov    eax,cr4
c0020e56:	0d 00 00 04 00       	or     eax,0x40000
c0020e5b:	0f 22 e0             	mov    cr4,eax
c0020e5e:	31 c9                	xor    ecx,ecx
c0020e60:	0f 01 d0             	xgetbv 
c0020e63:	0d 07 00 00 00       	or     eax,0x7
c0020e68:	0f 01 d1             	xsetbv 
c0020e6b:	59                   	pop    ecx
c0020e6c:	58                   	pop    eax
c0020e6d:	c3                   	ret    

c0020e6e <avxClose>:
c0020e6e:	c3                   	ret    
c0020e6f:	90                   	nop

c0020e70 <isr0>:
c0020e70:	fa                   	cli    
c0020e71:	68 00 00 00 00       	push   0x0
c0020e76:	68 00 00 00 00       	push   0x0
c0020e7b:	e9 56 01 00 00       	jmp    c0020fd6 <int_common_stub>

c0020e80 <isr1>:
c0020e80:	fa                   	cli    
c0020e81:	6a 00                	push   0x0
c0020e83:	6a 01                	push   0x1
c0020e85:	e9 4c 01 00 00       	jmp    c0020fd6 <int_common_stub>

c0020e8a <isr2>:
c0020e8a:	fa                   	cli    
c0020e8b:	6a 00                	push   0x0
c0020e8d:	6a 02                	push   0x2
c0020e8f:	e9 42 01 00 00       	jmp    c0020fd6 <int_common_stub>

c0020e94 <isr3>:
c0020e94:	fa                   	cli    
c0020e95:	6a 00                	push   0x0
c0020e97:	6a 03                	push   0x3
c0020e99:	e9 38 01 00 00       	jmp    c0020fd6 <int_common_stub>

c0020e9e <isr4>:
c0020e9e:	fa                   	cli    
c0020e9f:	6a 00                	push   0x0
c0020ea1:	6a 04                	push   0x4
c0020ea3:	e9 2e 01 00 00       	jmp    c0020fd6 <int_common_stub>

c0020ea8 <isr5>:
c0020ea8:	fa                   	cli    
c0020ea9:	6a 00                	push   0x0
c0020eab:	6a 05                	push   0x5
c0020ead:	e9 24 01 00 00       	jmp    c0020fd6 <int_common_stub>

c0020eb2 <isr6>:
c0020eb2:	fa                   	cli    
c0020eb3:	6a 00                	push   0x0
c0020eb5:	6a 06                	push   0x6
c0020eb7:	e9 1a 01 00 00       	jmp    c0020fd6 <int_common_stub>

c0020ebc <isr7>:
c0020ebc:	fa                   	cli    
c0020ebd:	6a 00                	push   0x0
c0020ebf:	6a 07                	push   0x7
c0020ec1:	e9 10 01 00 00       	jmp    c0020fd6 <int_common_stub>

c0020ec6 <isr8>:
c0020ec6:	fa                   	cli    
c0020ec7:	6a 08                	push   0x8
c0020ec9:	e9 08 01 00 00       	jmp    c0020fd6 <int_common_stub>

c0020ece <isr9>:
c0020ece:	fa                   	cli    
c0020ecf:	6a 00                	push   0x0
c0020ed1:	6a 09                	push   0x9
c0020ed3:	e9 fe 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020ed8 <isr10>:
c0020ed8:	fa                   	cli    
c0020ed9:	6a 0a                	push   0xa
c0020edb:	e9 f6 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020ee0 <isr11>:
c0020ee0:	fa                   	cli    
c0020ee1:	6a 0b                	push   0xb
c0020ee3:	e9 ee 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020ee8 <isr12>:
c0020ee8:	fa                   	cli    
c0020ee9:	6a 0c                	push   0xc
c0020eeb:	e9 e6 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020ef0 <isr13>:
c0020ef0:	fa                   	cli    
c0020ef1:	6a 0d                	push   0xd
c0020ef3:	53                   	push   ebx
c0020ef4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020ef8:	81 fb c6 10 02 c0    	cmp    ebx,0xc00210c6
c0020efe:	5b                   	pop    ebx
c0020eff:	0f 84 c3 01 00 00    	je     c00210c8 <finishSignal2>
c0020f05:	e9 cc 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f0a <isr14>:
c0020f0a:	fa                   	cli    
c0020f0b:	6a 0e                	push   0xe
c0020f0d:	e9 c4 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f12 <isr15>:
c0020f12:	fa                   	cli    
c0020f13:	6a 00                	push   0x0
c0020f15:	6a 0f                	push   0xf
c0020f17:	e9 ba 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f1c <isr16>:
c0020f1c:	fa                   	cli    
c0020f1d:	6a 00                	push   0x0
c0020f1f:	6a 10                	push   0x10
c0020f21:	e9 b0 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f26 <isr17>:
c0020f26:	fa                   	cli    
c0020f27:	6a 00                	push   0x0
c0020f29:	6a 11                	push   0x11
c0020f2b:	e9 a6 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f30 <isr18>:
c0020f30:	fa                   	cli    
c0020f31:	6a 00                	push   0x0
c0020f33:	6a 12                	push   0x12
c0020f35:	e9 9c 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f3a <irq3>:
c0020f3a:	fa                   	cli    
c0020f3b:	6a 00                	push   0x0
c0020f3d:	6a 23                	push   0x23
c0020f3f:	e9 92 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f44 <irq4>:
c0020f44:	fa                   	cli    
c0020f45:	6a 00                	push   0x0
c0020f47:	6a 24                	push   0x24
c0020f49:	e9 88 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f4e <irq5>:
c0020f4e:	fa                   	cli    
c0020f4f:	6a 00                	push   0x0
c0020f51:	6a 25                	push   0x25
c0020f53:	e9 7e 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f58 <irq6>:
c0020f58:	fa                   	cli    
c0020f59:	6a 00                	push   0x0
c0020f5b:	6a 26                	push   0x26
c0020f5d:	e9 74 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f62 <irq7>:
c0020f62:	fa                   	cli    
c0020f63:	6a 00                	push   0x0
c0020f65:	6a 27                	push   0x27
c0020f67:	e9 6a 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f6c <irq8>:
c0020f6c:	fa                   	cli    
c0020f6d:	6a 00                	push   0x0
c0020f6f:	6a 28                	push   0x28
c0020f71:	e9 60 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f76 <irq9>:
c0020f76:	fa                   	cli    
c0020f77:	6a 00                	push   0x0
c0020f79:	6a 29                	push   0x29
c0020f7b:	e9 56 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f80 <irq10>:
c0020f80:	fa                   	cli    
c0020f81:	6a 00                	push   0x0
c0020f83:	6a 2a                	push   0x2a
c0020f85:	e9 4c 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f8a <irq11>:
c0020f8a:	fa                   	cli    
c0020f8b:	6a 00                	push   0x0
c0020f8d:	6a 2b                	push   0x2b
c0020f8f:	e9 42 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f94 <irq12>:
c0020f94:	fa                   	cli    
c0020f95:	6a 00                	push   0x0
c0020f97:	6a 2c                	push   0x2c
c0020f99:	e9 38 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020f9e <irq13>:
c0020f9e:	fa                   	cli    
c0020f9f:	6a 00                	push   0x0
c0020fa1:	6a 2d                	push   0x2d
c0020fa3:	e9 2e 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020fa8 <irq14>:
c0020fa8:	fa                   	cli    
c0020fa9:	6a 00                	push   0x0
c0020fab:	6a 2e                	push   0x2e
c0020fad:	e9 24 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020fb2 <irq15>:
c0020fb2:	fa                   	cli    
c0020fb3:	6a 00                	push   0x0
c0020fb5:	6a 2f                	push   0x2f
c0020fb7:	e9 1a 00 00 00       	jmp    c0020fd6 <int_common_stub>

c0020fbc <irq1>:
c0020fbc:	fa                   	cli    
c0020fbd:	6a 00                	push   0x0
c0020fbf:	6a 21                	push   0x21
c0020fc1:	eb 13                	jmp    c0020fd6 <int_common_stub>

c0020fc3 <irq2>:
c0020fc3:	fa                   	cli    
c0020fc4:	6a 00                	push   0x0
c0020fc6:	6a 22                	push   0x22
c0020fc8:	eb 0c                	jmp    c0020fd6 <int_common_stub>

c0020fca <isr96>:
c0020fca:	6a 00                	push   0x0
c0020fcc:	6a 60                	push   0x60
c0020fce:	fb                   	sti    
c0020fcf:	eb 37                	jmp    c0021008 <syscall_common_stub>

c0020fd1 <irq0>:
c0020fd1:	fa                   	cli    
c0020fd2:	6a 00                	push   0x0
c0020fd4:	6a 20                	push   0x20

c0020fd6 <int_common_stub>:
c0020fd6:	60                   	pusha  
c0020fd7:	1e                   	push   ds
c0020fd8:	06                   	push   es
c0020fd9:	0f a0                	push   fs
c0020fdb:	0f a8                	push   gs
c0020fdd:	66 b8 10 00          	mov    ax,0x10
c0020fe1:	66 8e d8             	mov    ds,ax
c0020fe4:	66 8e c0             	mov    es,ax
c0020fe7:	66 8e e0             	mov    fs,ax
c0020fea:	66 8e e8             	mov    gs,ax
c0020fed:	54                   	push   esp
c0020fee:	fc                   	cld    
c0020fef:	e8 e0 d9 fe ff       	call   c000e9d4 <int_handler>
c0020ff4:	81 c4 04 00 00 00    	add    esp,0x4
c0020ffa:	0f a9                	pop    gs
c0020ffc:	0f a1                	pop    fs
c0020ffe:	07                   	pop    es
c0020fff:	1f                   	pop    ds
c0021000:	61                   	popa   
c0021001:	81 c4 08 00 00 00    	add    esp,0x8
c0021007:	cf                   	iret   

c0021008 <syscall_common_stub>:
c0021008:	60                   	pusha  
c0021009:	1e                   	push   ds
c002100a:	06                   	push   es
c002100b:	0f a0                	push   fs
c002100d:	0f a8                	push   gs
c002100f:	66 b8 10 00          	mov    ax,0x10
c0021013:	66 8e d8             	mov    ds,ax
c0021016:	66 8e c0             	mov    es,ax
c0021019:	66 8e e0             	mov    fs,ax
c002101c:	66 8e e8             	mov    gs,ax
c002101f:	54                   	push   esp
c0021020:	fc                   	cld    
c0021021:	e8 ae d9 fe ff       	call   c000e9d4 <int_handler>
c0021026:	81 c4 04 00 00 00    	add    esp,0x4
c002102c:	0f a9                	pop    gs
c002102e:	0f a1                	pop    fs
c0021030:	07                   	pop    es
c0021031:	1f                   	pop    ds
c0021032:	e8 28 02 ff ff       	call   c001125f <KiCheckSignalZ>
c0021037:	3d 00 00 00 00       	cmp    eax,0x0
c002103c:	0f 84 c0 00 00 00    	je     c0021102 <skipSignals>
c0021042:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0021047:	61                   	popa   
c0021048:	53                   	push   ebx
c0021049:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002104f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0021052:	5b                   	pop    ebx
c0021053:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0021058:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002105b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002105e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0021061:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0021064:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0021067:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002106a:	81 c4 08 00 00 00    	add    esp,0x8
c0021070:	5e                   	pop    esi
c0021071:	5b                   	pop    ebx
c0021072:	59                   	pop    ecx
c0021073:	5a                   	pop    edx
c0021074:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0021077:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002107a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002107d:	52                   	push   edx
c002107e:	51                   	push   ecx
c002107f:	53                   	push   ebx
c0021080:	56                   	push   esi
c0021081:	81 ec 08 00 00 00    	sub    esp,0x8
c0021087:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002108a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002108d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0021090:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0021093:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0021096:	60                   	pusha  
c0021097:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002109d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c00210a0:	89 e3                	mov    ebx,esp
c00210a2:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c00210a5:	52                   	push   edx
c00210a6:	68 c6 10 02 c0       	push   0xc00210c6
c00210ab:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c00210ae:	89 dc                	mov    esp,ebx
c00210b0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00210b3:	68 23 00 00 00       	push   0x23
c00210b8:	51                   	push   ecx
c00210b9:	68 02 02 00 00       	push   0x202
c00210be:	68 1b 00 00 00       	push   0x1b
c00210c3:	ff 36                	push   DWORD PTR [esi]
c00210c5:	cf                   	iret   

c00210c6 <finishSignal>:
c00210c6:	cd 0f                	int    0xf

c00210c8 <finishSignal2>:
c00210c8:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c00210ce:	e8 09 02 ff ff       	call   c00112dc <KiFinishSignalZ>
c00210d3:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c00210d9:	68 23 00 00 00       	push   0x23
c00210de:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00210e1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00210e4:	68 1b 00 00 00       	push   0x1b
c00210e9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00210ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00210ef:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00210f2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00210f5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00210f8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00210fb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00210fe:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c0021101:	cf                   	iret   

c0021102 <skipSignals>:
c0021102:	61                   	popa   
c0021103:	81 c4 08 00 00 00    	add    esp,0x8
c0021109:	cf                   	iret   
c002110a:	90                   	nop
c002110b:	90                   	nop

c002110c <irq16>:
c002110c:	fa                   	cli    
c002110d:	6a 00                	push   0x0
c002110f:	6a 30                	push   0x30
c0021111:	e9 c0 fe ff ff       	jmp    c0020fd6 <int_common_stub>

c0021116 <irq17>:
c0021116:	fa                   	cli    
c0021117:	6a 00                	push   0x0
c0021119:	6a 31                	push   0x31
c002111b:	e9 b6 fe ff ff       	jmp    c0020fd6 <int_common_stub>

c0021120 <irq18>:
c0021120:	fa                   	cli    
c0021121:	6a 00                	push   0x0
c0021123:	6a 32                	push   0x32
c0021125:	e9 ac fe ff ff       	jmp    c0020fd6 <int_common_stub>

c002112a <irq19>:
c002112a:	fa                   	cli    
c002112b:	6a 00                	push   0x0
c002112d:	6a 33                	push   0x33
c002112f:	e9 a2 fe ff ff       	jmp    c0020fd6 <int_common_stub>

c0021134 <irq20>:
c0021134:	fa                   	cli    
c0021135:	6a 00                	push   0x0
c0021137:	6a 34                	push   0x34
c0021139:	e9 98 fe ff ff       	jmp    c0020fd6 <int_common_stub>

c002113e <irq21>:
c002113e:	fa                   	cli    
c002113f:	6a 00                	push   0x0
c0021141:	6a 35                	push   0x35
c0021143:	e9 8e fe ff ff       	jmp    c0020fd6 <int_common_stub>

c0021148 <irq22>:
c0021148:	fa                   	cli    
c0021149:	6a 00                	push   0x0
c002114b:	6a 36                	push   0x36
c002114d:	e9 84 fe ff ff       	jmp    c0020fd6 <int_common_stub>

c0021152 <irq23>:
c0021152:	fa                   	cli    
c0021153:	6a 00                	push   0x0
c0021155:	6a 37                	push   0x37
c0021157:	e9 7a fe ff ff       	jmp    c0020fd6 <int_common_stub>
c002115c:	66 90                	xchg   ax,ax
c002115e:	66 90                	xchg   ax,ax

c0021160 <i386GetRDRAND>:
c0021160:	b9 64 00 00 00       	mov    ecx,0x64

c0021165 <retry>:
c0021165:	0f c7 f0             	rdrand eax
c0021168:	72 05                	jb     c002116f <retry.done>
c002116a:	e2 f9                	loop   c0021165 <retry>

c002116c <retry.fail>:
c002116c:	31 c0                	xor    eax,eax
c002116e:	c3                   	ret    

c002116f <retry.done>:
c002116f:	c3                   	ret    

c0021170 <sseDetect>:
c0021170:	b8 01 00 00 00       	mov    eax,0x1
c0021175:	0f a2                	cpuid  
c0021177:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002117d:	74 06                	je     c0021185 <sseDetect.noSSE>
c002117f:	b8 01 00 00 00       	mov    eax,0x1
c0021184:	c3                   	ret    

c0021185 <sseDetect.noSSE>:
c0021185:	31 c0                	xor    eax,eax
c0021187:	c3                   	ret    

c0021188 <sseSave>:
c0021188:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002118c:	0f ae 00             	fxsave [eax]
c002118f:	c3                   	ret    

c0021190 <sseLoad>:
c0021190:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021194:	0f ae 08             	fxrstor [eax]
c0021197:	c3                   	ret    

c0021198 <sseInit>:
c0021198:	e8 48 00 00 00       	call   c00211e5 <x87Init>
c002119d:	0f 20 e0             	mov    eax,cr4
c00211a0:	66 0d 00 06          	or     ax,0x600
c00211a4:	0f 22 e0             	mov    cr4,eax
c00211a7:	c3                   	ret    

c00211a8 <sseClose>:
c00211a8:	c3                   	ret    
c00211a9:	66 90                	xchg   ax,ax
c00211ab:	66 90                	xchg   ax,ax
c00211ad:	66 90                	xchg   ax,ax
c00211af:	90                   	nop

c00211b0 <value_37F>:
c00211b0:	7f 03                	jg     c00211b5 <value_37A+0x1>

c00211b2 <value_37E>:
c00211b2:	7e 03                	jle    c00211b7 <x87Detect+0x1>

c00211b4 <value_37A>:
c00211b4:	7a 03                	jp     c00211b9 <x87Detect+0x3>

c00211b6 <x87Detect>:
c00211b6:	53                   	push   ebx
c00211b7:	51                   	push   ecx
c00211b8:	52                   	push   edx
c00211b9:	b8 01 00 00 00       	mov    eax,0x1
c00211be:	0f a2                	cpuid  
c00211c0:	f7 c2 01 00 00 00    	test   edx,0x1
c00211c6:	74 06                	je     c00211ce <x87Detect.nox87>
c00211c8:	b8 01 00 00 00       	mov    eax,0x1
c00211cd:	c3                   	ret    

c00211ce <x87Detect.nox87>:
c00211ce:	b8 00 00 00 00       	mov    eax,0x0
c00211d3:	5a                   	pop    edx
c00211d4:	59                   	pop    ecx
c00211d5:	5b                   	pop    ebx
c00211d6:	c3                   	ret    

c00211d7 <x87Save>:
c00211d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211db:	dd 30                	fnsave [eax]
c00211dd:	c3                   	ret    

c00211de <x87Load>:
c00211de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00211e2:	dd 20                	frstor [eax]
c00211e4:	c3                   	ret    

c00211e5 <x87Init>:
c00211e5:	0f 20 c0             	mov    eax,cr0
c00211e8:	66 25 fb ff          	and    ax,0xfffb
c00211ec:	66 0d 22 00          	or     ax,0x22
c00211f0:	0f 22 c0             	mov    cr0,eax
c00211f3:	db e3                	fninit 
c00211f5:	0f 06                	clts   
c00211f7:	d9 2d b4 11 02 c0    	fldcw  WORD PTR ds:0xc00211b4
c00211fd:	c3                   	ret    

c00211fe <x87Close>:
c00211fe:	c3                   	ret    
c00211ff:	90                   	nop

c0021200 <__do_global_ctors_aux>:
c0021200:	a1 b4 21 02 c0       	mov    eax,ds:0xc00221b4
c0021205:	83 f8 ff             	cmp    eax,0xffffffff
c0021208:	74 1a                	je     c0021224 <__do_global_ctors_aux+0x24>
c002120a:	55                   	push   ebp
c002120b:	89 e5                	mov    ebp,esp
c002120d:	53                   	push   ebx
c002120e:	52                   	push   edx
c002120f:	bb b4 21 02 c0       	mov    ebx,0xc00221b4
c0021214:	ff d0                	call   eax
c0021216:	83 eb 04             	sub    ebx,0x4
c0021219:	8b 03                	mov    eax,DWORD PTR [ebx]
c002121b:	83 f8 ff             	cmp    eax,0xffffffff
c002121e:	75 f4                	jne    c0021214 <__do_global_ctors_aux+0x14>
c0021220:	58                   	pop    eax
c0021221:	5b                   	pop    ebx
c0021222:	5d                   	pop    ebp
c0021223:	c3                   	ret    
c0021224:	c3                   	ret    
c0021225:	66 90                	xchg   ax,ax
c0021227:	90                   	nop

c0021228 <__divdi3>:
c0021228:	55                   	push   ebp
c0021229:	57                   	push   edi
c002122a:	56                   	push   esi
c002122b:	53                   	push   ebx
c002122c:	83 ec 1c             	sub    esp,0x1c
c002122f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0021233:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021237:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002123a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c002123e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0021242:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0021246:	85 db                	test   ebx,ebx
c0021248:	0f 88 8e 00 00 00    	js     c00212dc <__divdi3+0xb4>
c002124e:	89 dd                	mov    ebp,ebx
c0021250:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0021258:	89 d3                	mov    ebx,edx
c002125a:	85 d2                	test   edx,edx
c002125c:	79 0d                	jns    c002126b <__divdi3+0x43>
c002125e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0021262:	f7 d8                	neg    eax
c0021264:	83 d2 00             	adc    edx,0x0
c0021267:	f7 da                	neg    edx
c0021269:	89 d3                	mov    ebx,edx
c002126b:	89 c7                	mov    edi,eax
c002126d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021270:	85 db                	test   ebx,ebx
c0021272:	75 48                	jne    c00212bc <__divdi3+0x94>
c0021274:	39 ef                	cmp    edi,ebp
c0021276:	76 24                	jbe    c002129c <__divdi3+0x74>
c0021278:	89 ea                	mov    edx,ebp
c002127a:	f7 f7                	div    edi
c002127c:	89 c1                	mov    ecx,eax
c002127e:	31 f6                	xor    esi,esi
c0021280:	89 c8                	mov    eax,ecx
c0021282:	89 f2                	mov    edx,esi
c0021284:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021288:	85 c9                	test   ecx,ecx
c002128a:	74 07                	je     c0021293 <__divdi3+0x6b>
c002128c:	f7 d8                	neg    eax
c002128e:	83 d2 00             	adc    edx,0x0
c0021291:	f7 da                	neg    edx
c0021293:	83 c4 1c             	add    esp,0x1c
c0021296:	5b                   	pop    ebx
c0021297:	5e                   	pop    esi
c0021298:	5f                   	pop    edi
c0021299:	5d                   	pop    ebp
c002129a:	c3                   	ret    
c002129b:	90                   	nop
c002129c:	85 ff                	test   edi,edi
c002129e:	75 0b                	jne    c00212ab <__divdi3+0x83>
c00212a0:	b8 01 00 00 00       	mov    eax,0x1
c00212a5:	31 d2                	xor    edx,edx
c00212a7:	f7 f3                	div    ebx
c00212a9:	89 c7                	mov    edi,eax
c00212ab:	31 d2                	xor    edx,edx
c00212ad:	89 e8                	mov    eax,ebp
c00212af:	f7 f7                	div    edi
c00212b1:	89 c6                	mov    esi,eax
c00212b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00212b6:	f7 f7                	div    edi
c00212b8:	89 c1                	mov    ecx,eax
c00212ba:	eb c4                	jmp    c0021280 <__divdi3+0x58>
c00212bc:	39 eb                	cmp    ebx,ebp
c00212be:	77 3c                	ja     c00212fc <__divdi3+0xd4>
c00212c0:	0f bd f3             	bsr    esi,ebx
c00212c3:	83 f6 1f             	xor    esi,0x1f
c00212c6:	75 40                	jne    c0021308 <__divdi3+0xe0>
c00212c8:	39 eb                	cmp    ebx,ebp
c00212ca:	72 09                	jb     c00212d5 <__divdi3+0xad>
c00212cc:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00212cf:	0f 87 97 00 00 00    	ja     c002136c <__divdi3+0x144>
c00212d5:	b9 01 00 00 00       	mov    ecx,0x1
c00212da:	eb a4                	jmp    c0021280 <__divdi3+0x58>
c00212dc:	f7 d9                	neg    ecx
c00212de:	83 d3 00             	adc    ebx,0x0
c00212e1:	f7 db                	neg    ebx
c00212e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00212e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00212ea:	89 dd                	mov    ebp,ebx
c00212ec:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00212f4:	e9 5f ff ff ff       	jmp    c0021258 <__divdi3+0x30>
c00212f9:	8d 76 00             	lea    esi,[esi+0x0]
c00212fc:	31 f6                	xor    esi,esi
c00212fe:	31 c9                	xor    ecx,ecx
c0021300:	e9 7b ff ff ff       	jmp    c0021280 <__divdi3+0x58>
c0021305:	8d 76 00             	lea    esi,[esi+0x0]
c0021308:	b8 20 00 00 00       	mov    eax,0x20
c002130d:	29 f0                	sub    eax,esi
c002130f:	89 f1                	mov    ecx,esi
c0021311:	d3 e3                	shl    ebx,cl
c0021313:	89 fa                	mov    edx,edi
c0021315:	88 c1                	mov    cl,al
c0021317:	d3 ea                	shr    edx,cl
c0021319:	09 da                	or     edx,ebx
c002131b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002131f:	89 f1                	mov    ecx,esi
c0021321:	d3 e7                	shl    edi,cl
c0021323:	89 eb                	mov    ebx,ebp
c0021325:	88 c1                	mov    cl,al
c0021327:	d3 eb                	shr    ebx,cl
c0021329:	89 f1                	mov    ecx,esi
c002132b:	d3 e5                	shl    ebp,cl
c002132d:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0021330:	88 c1                	mov    cl,al
c0021332:	d3 ea                	shr    edx,cl
c0021334:	09 d5                	or     ebp,edx
c0021336:	89 e8                	mov    eax,ebp
c0021338:	89 da                	mov    edx,ebx
c002133a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002133e:	89 d3                	mov    ebx,edx
c0021340:	89 c5                	mov    ebp,eax
c0021342:	f7 e7                	mul    edi
c0021344:	39 d3                	cmp    ebx,edx
c0021346:	72 18                	jb     c0021360 <__divdi3+0x138>
c0021348:	74 0a                	je     c0021354 <__divdi3+0x12c>
c002134a:	89 e9                	mov    ecx,ebp
c002134c:	31 f6                	xor    esi,esi
c002134e:	e9 2d ff ff ff       	jmp    c0021280 <__divdi3+0x58>
c0021353:	90                   	nop
c0021354:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0021357:	89 f1                	mov    ecx,esi
c0021359:	d3 e7                	shl    edi,cl
c002135b:	39 c7                	cmp    edi,eax
c002135d:	73 eb                	jae    c002134a <__divdi3+0x122>
c002135f:	90                   	nop
c0021360:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0021363:	31 f6                	xor    esi,esi
c0021365:	e9 16 ff ff ff       	jmp    c0021280 <__divdi3+0x58>
c002136a:	66 90                	xchg   ax,ax
c002136c:	31 c9                	xor    ecx,ecx
c002136e:	e9 0d ff ff ff       	jmp    c0021280 <__divdi3+0x58>
c0021373:	90                   	nop

c0021374 <__moddi3>:
c0021374:	55                   	push   ebp
c0021375:	57                   	push   edi
c0021376:	56                   	push   esi
c0021377:	53                   	push   ebx
c0021378:	83 ec 2c             	sub    esp,0x2c
c002137b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002137f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0021383:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0021387:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002138b:	85 db                	test   ebx,ebx
c002138d:	0f 88 85 00 00 00    	js     c0021418 <__moddi3+0xa4>
c0021393:	89 de                	mov    esi,ebx
c0021395:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002139d:	89 d7                	mov    edi,edx
c002139f:	85 d2                	test   edx,edx
c00213a1:	79 09                	jns    c00213ac <__moddi3+0x38>
c00213a3:	f7 d8                	neg    eax
c00213a5:	83 d2 00             	adc    edx,0x0
c00213a8:	f7 da                	neg    edx
c00213aa:	89 d7                	mov    edi,edx
c00213ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213b0:	89 cd                	mov    ebp,ecx
c00213b2:	85 ff                	test   edi,edi
c00213b4:	75 52                	jne    c0021408 <__moddi3+0x94>
c00213b6:	89 c3                	mov    ebx,eax
c00213b8:	39 f0                	cmp    eax,esi
c00213ba:	76 24                	jbe    c00213e0 <__moddi3+0x6c>
c00213bc:	89 c8                	mov    eax,ecx
c00213be:	89 f2                	mov    edx,esi
c00213c0:	f7 f3                	div    ebx
c00213c2:	89 d6                	mov    esi,edx
c00213c4:	89 f0                	mov    eax,esi
c00213c6:	31 d2                	xor    edx,edx
c00213c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213cc:	85 c9                	test   ecx,ecx
c00213ce:	74 07                	je     c00213d7 <__moddi3+0x63>
c00213d0:	f7 d8                	neg    eax
c00213d2:	83 d2 00             	adc    edx,0x0
c00213d5:	f7 da                	neg    edx
c00213d7:	83 c4 2c             	add    esp,0x2c
c00213da:	5b                   	pop    ebx
c00213db:	5e                   	pop    esi
c00213dc:	5f                   	pop    edi
c00213dd:	5d                   	pop    ebp
c00213de:	c3                   	ret    
c00213df:	90                   	nop
c00213e0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00213e4:	85 db                	test   ebx,ebx
c00213e6:	75 0d                	jne    c00213f5 <__moddi3+0x81>
c00213e8:	b8 01 00 00 00       	mov    eax,0x1
c00213ed:	31 d2                	xor    edx,edx
c00213ef:	f7 f7                	div    edi
c00213f1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213f5:	89 f0                	mov    eax,esi
c00213f7:	31 d2                	xor    edx,edx
c00213f9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00213fd:	f7 f7                	div    edi
c00213ff:	89 e8                	mov    eax,ebp
c0021401:	f7 f7                	div    edi
c0021403:	89 d6                	mov    esi,edx
c0021405:	eb bd                	jmp    c00213c4 <__moddi3+0x50>
c0021407:	90                   	nop
c0021408:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002140c:	39 f7                	cmp    edi,esi
c002140e:	76 20                	jbe    c0021430 <__moddi3+0xbc>
c0021410:	89 c8                	mov    eax,ecx
c0021412:	89 f2                	mov    edx,esi
c0021414:	eb b2                	jmp    c00213c8 <__moddi3+0x54>
c0021416:	66 90                	xchg   ax,ax
c0021418:	f7 d9                	neg    ecx
c002141a:	83 d3 00             	adc    ebx,0x0
c002141d:	f7 db                	neg    ebx
c002141f:	89 de                	mov    esi,ebx
c0021421:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0021429:	e9 6f ff ff ff       	jmp    c002139d <__moddi3+0x29>
c002142e:	66 90                	xchg   ax,ax
c0021430:	0f bd c7             	bsr    eax,edi
c0021433:	83 f0 1f             	xor    eax,0x1f
c0021436:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002143a:	75 24                	jne    c0021460 <__moddi3+0xec>
c002143c:	39 f7                	cmp    edi,esi
c002143e:	72 06                	jb     c0021446 <__moddi3+0xd2>
c0021440:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0021444:	77 0c                	ja     c0021452 <__moddi3+0xde>
c0021446:	89 e9                	mov    ecx,ebp
c0021448:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002144c:	19 fe                	sbb    esi,edi
c002144e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0021452:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021456:	89 f2                	mov    edx,esi
c0021458:	e9 6b ff ff ff       	jmp    c00213c8 <__moddi3+0x54>
c002145d:	8d 76 00             	lea    esi,[esi+0x0]
c0021460:	b8 20 00 00 00       	mov    eax,0x20
c0021465:	89 c2                	mov    edx,eax
c0021467:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002146b:	29 da                	sub    edx,ebx
c002146d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0021471:	88 d9                	mov    cl,bl
c0021473:	d3 e7                	shl    edi,cl
c0021475:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021479:	88 d1                	mov    cl,dl
c002147b:	d3 e8                	shr    eax,cl
c002147d:	09 c7                	or     edi,eax
c002147f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021483:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0021487:	89 d8                	mov    eax,ebx
c0021489:	88 d9                	mov    cl,bl
c002148b:	d3 e7                	shl    edi,cl
c002148d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0021491:	89 f3                	mov    ebx,esi
c0021493:	88 d1                	mov    cl,dl
c0021495:	d3 eb                	shr    ebx,cl
c0021497:	89 c7                	mov    edi,eax
c0021499:	88 c1                	mov    cl,al
c002149b:	d3 e6                	shl    esi,cl
c002149d:	89 e8                	mov    eax,ebp
c002149f:	88 d1                	mov    cl,dl
c00214a1:	d3 e8                	shr    eax,cl
c00214a3:	09 f0                	or     eax,esi
c00214a5:	89 f9                	mov    ecx,edi
c00214a7:	d3 e5                	shl    ebp,cl
c00214a9:	89 da                	mov    edx,ebx
c00214ab:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00214af:	89 d3                	mov    ebx,edx
c00214b1:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00214b5:	89 c6                	mov    esi,eax
c00214b7:	89 d1                	mov    ecx,edx
c00214b9:	39 d3                	cmp    ebx,edx
c00214bb:	72 27                	jb     c00214e4 <__moddi3+0x170>
c00214bd:	74 21                	je     c00214e0 <__moddi3+0x16c>
c00214bf:	29 f5                	sub    ebp,esi
c00214c1:	19 cb                	sbb    ebx,ecx
c00214c3:	89 de                	mov    esi,ebx
c00214c5:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00214c9:	d3 e6                	shl    esi,cl
c00214cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00214cf:	89 f9                	mov    ecx,edi
c00214d1:	d3 ed                	shr    ebp,cl
c00214d3:	09 ee                	or     esi,ebp
c00214d5:	89 f0                	mov    eax,esi
c00214d7:	d3 eb                	shr    ebx,cl
c00214d9:	89 da                	mov    edx,ebx
c00214db:	e9 e8 fe ff ff       	jmp    c00213c8 <__moddi3+0x54>
c00214e0:	39 c5                	cmp    ebp,eax
c00214e2:	73 db                	jae    c00214bf <__moddi3+0x14b>
c00214e4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00214e8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00214ec:	89 d1                	mov    ecx,edx
c00214ee:	89 c6                	mov    esi,eax
c00214f0:	eb cd                	jmp    c00214bf <__moddi3+0x14b>
c00214f2:	66 90                	xchg   ax,ax

c00214f4 <__udivdi3>:
c00214f4:	55                   	push   ebp
c00214f5:	57                   	push   edi
c00214f6:	56                   	push   esi
c00214f7:	53                   	push   ebx
c00214f8:	83 ec 1c             	sub    esp,0x1c
c00214fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00214ff:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0021503:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021507:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002150b:	85 d2                	test   edx,edx
c002150d:	75 41                	jne    c0021550 <__udivdi3+0x5c>
c002150f:	39 f7                	cmp    edi,esi
c0021511:	76 15                	jbe    c0021528 <__udivdi3+0x34>
c0021513:	89 e8                	mov    eax,ebp
c0021515:	89 f2                	mov    edx,esi
c0021517:	f7 f7                	div    edi
c0021519:	31 db                	xor    ebx,ebx
c002151b:	89 da                	mov    edx,ebx
c002151d:	83 c4 1c             	add    esp,0x1c
c0021520:	5b                   	pop    ebx
c0021521:	5e                   	pop    esi
c0021522:	5f                   	pop    edi
c0021523:	5d                   	pop    ebp
c0021524:	c3                   	ret    
c0021525:	8d 76 00             	lea    esi,[esi+0x0]
c0021528:	89 f9                	mov    ecx,edi
c002152a:	85 ff                	test   edi,edi
c002152c:	75 0b                	jne    c0021539 <__udivdi3+0x45>
c002152e:	b8 01 00 00 00       	mov    eax,0x1
c0021533:	31 d2                	xor    edx,edx
c0021535:	f7 f7                	div    edi
c0021537:	89 c1                	mov    ecx,eax
c0021539:	31 d2                	xor    edx,edx
c002153b:	89 f0                	mov    eax,esi
c002153d:	f7 f1                	div    ecx
c002153f:	89 c3                	mov    ebx,eax
c0021541:	89 e8                	mov    eax,ebp
c0021543:	f7 f1                	div    ecx
c0021545:	89 da                	mov    edx,ebx
c0021547:	83 c4 1c             	add    esp,0x1c
c002154a:	5b                   	pop    ebx
c002154b:	5e                   	pop    esi
c002154c:	5f                   	pop    edi
c002154d:	5d                   	pop    ebp
c002154e:	c3                   	ret    
c002154f:	90                   	nop
c0021550:	39 f2                	cmp    edx,esi
c0021552:	77 1c                	ja     c0021570 <__udivdi3+0x7c>
c0021554:	0f bd da             	bsr    ebx,edx
c0021557:	83 f3 1f             	xor    ebx,0x1f
c002155a:	75 24                	jne    c0021580 <__udivdi3+0x8c>
c002155c:	39 f2                	cmp    edx,esi
c002155e:	72 08                	jb     c0021568 <__udivdi3+0x74>
c0021560:	39 ef                	cmp    edi,ebp
c0021562:	0f 87 84 00 00 00    	ja     c00215ec <__udivdi3+0xf8>
c0021568:	b8 01 00 00 00       	mov    eax,0x1
c002156d:	eb ac                	jmp    c002151b <__udivdi3+0x27>
c002156f:	90                   	nop
c0021570:	31 db                	xor    ebx,ebx
c0021572:	31 c0                	xor    eax,eax
c0021574:	89 da                	mov    edx,ebx
c0021576:	83 c4 1c             	add    esp,0x1c
c0021579:	5b                   	pop    ebx
c002157a:	5e                   	pop    esi
c002157b:	5f                   	pop    edi
c002157c:	5d                   	pop    ebp
c002157d:	c3                   	ret    
c002157e:	66 90                	xchg   ax,ax
c0021580:	b8 20 00 00 00       	mov    eax,0x20
c0021585:	29 d8                	sub    eax,ebx
c0021587:	88 d9                	mov    cl,bl
c0021589:	d3 e2                	shl    edx,cl
c002158b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002158f:	89 fa                	mov    edx,edi
c0021591:	88 c1                	mov    cl,al
c0021593:	d3 ea                	shr    edx,cl
c0021595:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021599:	09 d1                	or     ecx,edx
c002159b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002159f:	88 d9                	mov    cl,bl
c00215a1:	d3 e7                	shl    edi,cl
c00215a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00215a7:	89 f7                	mov    edi,esi
c00215a9:	88 c1                	mov    cl,al
c00215ab:	d3 ef                	shr    edi,cl
c00215ad:	88 d9                	mov    cl,bl
c00215af:	d3 e6                	shl    esi,cl
c00215b1:	89 ea                	mov    edx,ebp
c00215b3:	88 c1                	mov    cl,al
c00215b5:	d3 ea                	shr    edx,cl
c00215b7:	09 d6                	or     esi,edx
c00215b9:	89 f0                	mov    eax,esi
c00215bb:	89 fa                	mov    edx,edi
c00215bd:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00215c1:	89 d7                	mov    edi,edx
c00215c3:	89 c6                	mov    esi,eax
c00215c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00215c9:	39 d7                	cmp    edi,edx
c00215cb:	72 13                	jb     c00215e0 <__udivdi3+0xec>
c00215cd:	74 09                	je     c00215d8 <__udivdi3+0xe4>
c00215cf:	89 f0                	mov    eax,esi
c00215d1:	31 db                	xor    ebx,ebx
c00215d3:	e9 43 ff ff ff       	jmp    c002151b <__udivdi3+0x27>
c00215d8:	88 d9                	mov    cl,bl
c00215da:	d3 e5                	shl    ebp,cl
c00215dc:	39 c5                	cmp    ebp,eax
c00215de:	73 ef                	jae    c00215cf <__udivdi3+0xdb>
c00215e0:	8d 46 ff             	lea    eax,[esi-0x1]
c00215e3:	31 db                	xor    ebx,ebx
c00215e5:	e9 31 ff ff ff       	jmp    c002151b <__udivdi3+0x27>
c00215ea:	66 90                	xchg   ax,ax
c00215ec:	31 c0                	xor    eax,eax
c00215ee:	e9 28 ff ff ff       	jmp    c002151b <__udivdi3+0x27>
c00215f3:	90                   	nop

c00215f4 <__umoddi3>:
c00215f4:	55                   	push   ebp
c00215f5:	57                   	push   edi
c00215f6:	56                   	push   esi
c00215f7:	53                   	push   ebx
c00215f8:	83 ec 1c             	sub    esp,0x1c
c00215fb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00215ff:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0021603:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0021607:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c002160b:	89 da                	mov    edx,ebx
c002160d:	85 c0                	test   eax,eax
c002160f:	75 37                	jne    c0021648 <__umoddi3+0x54>
c0021611:	39 df                	cmp    edi,ebx
c0021613:	76 13                	jbe    c0021628 <__umoddi3+0x34>
c0021615:	89 f0                	mov    eax,esi
c0021617:	f7 f7                	div    edi
c0021619:	89 d0                	mov    eax,edx
c002161b:	31 d2                	xor    edx,edx
c002161d:	83 c4 1c             	add    esp,0x1c
c0021620:	5b                   	pop    ebx
c0021621:	5e                   	pop    esi
c0021622:	5f                   	pop    edi
c0021623:	5d                   	pop    ebp
c0021624:	c3                   	ret    
c0021625:	8d 76 00             	lea    esi,[esi+0x0]
c0021628:	89 fd                	mov    ebp,edi
c002162a:	85 ff                	test   edi,edi
c002162c:	75 0b                	jne    c0021639 <__umoddi3+0x45>
c002162e:	b8 01 00 00 00       	mov    eax,0x1
c0021633:	31 d2                	xor    edx,edx
c0021635:	f7 f7                	div    edi
c0021637:	89 c5                	mov    ebp,eax
c0021639:	89 d8                	mov    eax,ebx
c002163b:	31 d2                	xor    edx,edx
c002163d:	f7 f5                	div    ebp
c002163f:	89 f0                	mov    eax,esi
c0021641:	f7 f5                	div    ebp
c0021643:	89 d0                	mov    eax,edx
c0021645:	eb d4                	jmp    c002161b <__umoddi3+0x27>
c0021647:	90                   	nop
c0021648:	89 f1                	mov    ecx,esi
c002164a:	39 d8                	cmp    eax,ebx
c002164c:	76 0a                	jbe    c0021658 <__umoddi3+0x64>
c002164e:	89 f0                	mov    eax,esi
c0021650:	83 c4 1c             	add    esp,0x1c
c0021653:	5b                   	pop    ebx
c0021654:	5e                   	pop    esi
c0021655:	5f                   	pop    edi
c0021656:	5d                   	pop    ebp
c0021657:	c3                   	ret    
c0021658:	0f bd e8             	bsr    ebp,eax
c002165b:	83 f5 1f             	xor    ebp,0x1f
c002165e:	75 1c                	jne    c002167c <__umoddi3+0x88>
c0021660:	39 d8                	cmp    eax,ebx
c0021662:	72 04                	jb     c0021668 <__umoddi3+0x74>
c0021664:	39 f7                	cmp    edi,esi
c0021666:	77 08                	ja     c0021670 <__umoddi3+0x7c>
c0021668:	89 da                	mov    edx,ebx
c002166a:	29 fe                	sub    esi,edi
c002166c:	19 c2                	sbb    edx,eax
c002166e:	89 f1                	mov    ecx,esi
c0021670:	89 c8                	mov    eax,ecx
c0021672:	83 c4 1c             	add    esp,0x1c
c0021675:	5b                   	pop    ebx
c0021676:	5e                   	pop    esi
c0021677:	5f                   	pop    edi
c0021678:	5d                   	pop    ebp
c0021679:	c3                   	ret    
c002167a:	66 90                	xchg   ax,ax
c002167c:	ba 20 00 00 00       	mov    edx,0x20
c0021681:	29 ea                	sub    edx,ebp
c0021683:	89 e9                	mov    ecx,ebp
c0021685:	d3 e0                	shl    eax,cl
c0021687:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002168b:	89 f8                	mov    eax,edi
c002168d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021691:	88 d1                	mov    cl,dl
c0021693:	d3 e8                	shr    eax,cl
c0021695:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021699:	09 c1                	or     ecx,eax
c002169b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002169f:	89 e9                	mov    ecx,ebp
c00216a1:	d3 e7                	shl    edi,cl
c00216a3:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00216a7:	89 d8                	mov    eax,ebx
c00216a9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00216ad:	88 d1                	mov    cl,dl
c00216af:	d3 e8                	shr    eax,cl
c00216b1:	89 c7                	mov    edi,eax
c00216b3:	89 e9                	mov    ecx,ebp
c00216b5:	d3 e3                	shl    ebx,cl
c00216b7:	89 f0                	mov    eax,esi
c00216b9:	88 d1                	mov    cl,dl
c00216bb:	d3 e8                	shr    eax,cl
c00216bd:	09 d8                	or     eax,ebx
c00216bf:	89 e9                	mov    ecx,ebp
c00216c1:	d3 e6                	shl    esi,cl
c00216c3:	89 f3                	mov    ebx,esi
c00216c5:	89 fa                	mov    edx,edi
c00216c7:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00216cb:	89 d1                	mov    ecx,edx
c00216cd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00216d1:	89 c6                	mov    esi,eax
c00216d3:	89 d7                	mov    edi,edx
c00216d5:	39 d1                	cmp    ecx,edx
c00216d7:	72 27                	jb     c0021700 <__umoddi3+0x10c>
c00216d9:	74 21                	je     c00216fc <__umoddi3+0x108>
c00216db:	89 ca                	mov    edx,ecx
c00216dd:	29 f3                	sub    ebx,esi
c00216df:	19 fa                	sbb    edx,edi
c00216e1:	89 d0                	mov    eax,edx
c00216e3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00216e7:	d3 e0                	shl    eax,cl
c00216e9:	89 e9                	mov    ecx,ebp
c00216eb:	d3 eb                	shr    ebx,cl
c00216ed:	09 d8                	or     eax,ebx
c00216ef:	d3 ea                	shr    edx,cl
c00216f1:	83 c4 1c             	add    esp,0x1c
c00216f4:	5b                   	pop    ebx
c00216f5:	5e                   	pop    esi
c00216f6:	5f                   	pop    edi
c00216f7:	5d                   	pop    ebp
c00216f8:	c3                   	ret    
c00216f9:	8d 76 00             	lea    esi,[esi+0x0]
c00216fc:	39 c3                	cmp    ebx,eax
c00216fe:	73 db                	jae    c00216db <__umoddi3+0xe7>
c0021700:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0021704:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0021708:	89 d7                	mov    edi,edx
c002170a:	89 c6                	mov    esi,eax
c002170c:	eb cd                	jmp    c00216db <__umoddi3+0xe7>

Disassembly of section .init:

c002170e <_init>:
c002170e:	55                   	push   ebp
c002170f:	89 e5                	mov    ebp,esp
c0021711:	e8 de e9 fd ff       	call   c00000f4 <frame_dummy>
c0021716:	e8 e5 fa ff ff       	call   c0021200 <__do_global_ctors_aux>
c002171b:	5d                   	pop    ebp
c002171c:	c3                   	ret    

Disassembly of section .fini:

c002171d <_fini>:
c002171d:	55                   	push   ebp
c002171e:	89 e5                	mov    ebp,esp
c0021720:	e8 5f e9 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0021725:	5d                   	pop    ebp
c0021726:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0021728 <DriverlessDevice::~DriverlessDevice()>:
c0021728:	ba 7c 31 02 c0       	mov    edx,0xc002317c
c002172d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021731:	89 10                	mov    DWORD PTR [eax],edx
c0021733:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021737:	50                   	push   eax
c0021738:	e8 bf 81 fe ff       	call   c00098fc <Device::~Device()>
c002173d:	83 c4 04             	add    esp,0x4
c0021740:	90                   	nop
c0021741:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0021742 <DriverlessDevice::~DriverlessDevice()>:
c0021742:	83 ec 0c             	sub    esp,0xc
c0021745:	83 ec 0c             	sub    esp,0xc
c0021748:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002174c:	e8 d7 ff ff ff       	call   c0021728 <DriverlessDevice::~DriverlessDevice()>
c0021751:	83 c4 10             	add    esp,0x10
c0021754:	83 ec 08             	sub    esp,0x8
c0021757:	68 58 01 00 00       	push   0x158
c002175c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021760:	e8 7e bb fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0021765:	83 c4 10             	add    esp,0x10
c0021768:	83 c4 0c             	add    esp,0xc
c002176b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002176c <LinkedList<Device>::addElement(Device*)>:
c002176c:	83 ec 0c             	sub    esp,0xc
c002176f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021774:	75 10                	jne    c0021786 <LinkedList<Device>::addElement(Device*)+0x1a>
c0021776:	83 ec 0c             	sub    esp,0xc
c0021779:	68 10 31 02 c0       	push   0xc0023110
c002177e:	e8 1f e8 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021783:	83 c4 10             	add    esp,0x10
c0021786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002178a:	8b 00                	mov    eax,DWORD PTR [eax]
c002178c:	85 c0                	test   eax,eax
c002178e:	74 3a                	je     c00217ca <LinkedList<Device>::addElement(Device*)+0x5e>
c0021790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021794:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021797:	85 c0                	test   eax,eax
c0021799:	74 2f                	je     c00217ca <LinkedList<Device>::addElement(Device*)+0x5e>
c002179b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002179f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217a2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217a6:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00217ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217b4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00217b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217be:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00217c8:	eb 68                	jmp    c0021832 <LinkedList<Device>::addElement(Device*)+0xc6>
c00217ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00217d0:	85 c0                	test   eax,eax
c00217d2:	75 4e                	jne    c0021822 <LinkedList<Device>::addElement(Device*)+0xb6>
c00217d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217db:	85 c0                	test   eax,eax
c00217dd:	75 43                	jne    c0021822 <LinkedList<Device>::addElement(Device*)+0xb6>
c00217df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217e7:	89 10                	mov    DWORD PTR [eax],edx
c00217e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217ed:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00217f1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00217f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00217fb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0021805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021809:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002180c:	85 c0                	test   eax,eax
c002180e:	74 22                	je     c0021832 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021810:	83 ec 0c             	sub    esp,0xc
c0021813:	68 32 31 02 c0       	push   0xc0023132
c0021818:	e8 85 e7 fe ff       	call   c000ffa2 <KePanic(char const*)>
c002181d:	83 c4 10             	add    esp,0x10
c0021820:	eb 10                	jmp    c0021832 <LinkedList<Device>::addElement(Device*)+0xc6>
c0021822:	83 ec 0c             	sub    esp,0xc
c0021825:	68 3c 31 02 c0       	push   0xc002313c
c002182a:	e8 73 e7 fe ff       	call   c000ffa2 <KePanic(char const*)>
c002182f:	83 c4 10             	add    esp,0x10
c0021832:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021836:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021839:	8d 50 01             	lea    edx,[eax+0x1]
c002183c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021840:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021843:	90                   	nop
c0021844:	83 c4 0c             	add    esp,0xc
c0021847:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0021848 <LinkedList<Device>::LinkedList()>:
c0021848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002184c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021852:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021856:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002185d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021861:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021868:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002186c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021872:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021876:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002187d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021881:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021888:	90                   	nop
c0021889:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002188c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002188c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021890:	8b 00                	mov    eax,DWORD PTR [eax]
c0021892:	85 c0                	test   eax,eax
c0021894:	75 0e                	jne    c00218a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0021896:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002189a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002189d:	85 c0                	test   eax,eax
c002189f:	75 03                	jne    c00218a4 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c00218a1:	b0 01                	mov    al,0x1
c00218a3:	c3                   	ret    
c00218a4:	b0 00                	mov    al,0x0
c00218a6:	90                   	nop
c00218a7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c00218a8 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c00218a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00218ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00218ae:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c00218b0 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c00218b0:	83 ec 0c             	sub    esp,0xc
c00218b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00218b9:	85 c0                	test   eax,eax
c00218bb:	75 17                	jne    c00218d4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c00218bd:	83 ec 0c             	sub    esp,0xc
c00218c0:	68 ac 33 02 c0       	push   0xc00233ac
c00218c5:	e8 d8 e6 fe ff       	call   c000ffa2 <KePanic(char const*)>
c00218ca:	83 c4 10             	add    esp,0x10
c00218cd:	e9 96 00 00 00       	jmp    c0021968 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c00218d2:	66 90                	xchg   ax,ax
c00218d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00218d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00218db:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00218de:	85 c0                	test   eax,eax
c00218e0:	0f 95 c0             	setne  al
c00218e3:	0f b6 c0             	movzx  eax,al
c00218e6:	85 c0                	test   eax,eax
c00218e8:	74 12                	je     c00218fc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c00218ea:	83 ec 0c             	sub    esp,0xc
c00218ed:	68 f7 33 02 c0       	push   0xc00233f7
c00218f2:	e8 ab e6 fe ff       	call   c000ffa2 <KePanic(char const*)>
c00218f7:	83 c4 10             	add    esp,0x10
c00218fa:	66 90                	xchg   ax,ax
c00218fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021900:	8b 00                	mov    eax,DWORD PTR [eax]
c0021902:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021905:	85 c0                	test   eax,eax
c0021907:	0f 94 c0             	sete   al
c002190a:	0f b6 c0             	movzx  eax,al
c002190d:	85 c0                	test   eax,eax
c002190f:	74 33                	je     c0021944 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0021911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021915:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002191b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002191f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021926:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002192a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002192d:	83 f8 01             	cmp    eax,0x1
c0021930:	74 22                	je     c0021954 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021932:	83 ec 0c             	sub    esp,0xc
c0021935:	68 d0 33 02 c0       	push   0xc00233d0
c002193a:	e8 63 e6 fe ff       	call   c000ffa2 <KePanic(char const*)>
c002193f:	83 c4 10             	add    esp,0x10
c0021942:	eb 10                	jmp    c0021954 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021948:	8b 00                	mov    eax,DWORD PTR [eax]
c002194a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002194d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021951:	89 10                	mov    DWORD PTR [eax],edx
c0021953:	90                   	nop
c0021954:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021958:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002195b:	8d 50 ff             	lea    edx,[eax-0x1]
c002195e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021962:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021965:	8d 76 00             	lea    esi,[esi+0x0]
c0021968:	83 c4 0c             	add    esp,0xc
c002196b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002196c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002196c:	83 ec 0c             	sub    esp,0xc
c002196f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021974:	75 12                	jne    c0021988 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021976:	83 ec 0c             	sub    esp,0xc
c0021979:	68 10 31 02 c0       	push   0xc0023110
c002197e:	e8 1f e6 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021983:	83 c4 10             	add    esp,0x10
c0021986:	66 90                	xchg   ax,ax
c0021988:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002198c:	8b 00                	mov    eax,DWORD PTR [eax]
c002198e:	85 c0                	test   eax,eax
c0021990:	74 36                	je     c00219c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021992:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021999:	85 c0                	test   eax,eax
c002199b:	74 2b                	je     c00219c8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002199d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219a8:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00219ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219b3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00219b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219bd:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00219c4:	eb 6a                	jmp    c0021a30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00219c6:	66 90                	xchg   ax,ax
c00219c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00219ce:	85 c0                	test   eax,eax
c00219d0:	75 4e                	jne    c0021a20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00219d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219d9:	85 c0                	test   eax,eax
c00219db:	75 43                	jne    c0021a20 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c00219dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219e5:	89 10                	mov    DWORD PTR [eax],edx
c00219e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219eb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00219ef:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00219f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00219f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00219f9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a04:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021a07:	85 c0                	test   eax,eax
c0021a09:	74 25                	je     c0021a30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021a0b:	83 ec 0c             	sub    esp,0xc
c0021a0e:	68 32 31 02 c0       	push   0xc0023132
c0021a13:	e8 8a e5 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021a18:	83 c4 10             	add    esp,0x10
c0021a1b:	eb 13                	jmp    c0021a30 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0021a20:	83 ec 0c             	sub    esp,0xc
c0021a23:	68 3c 31 02 c0       	push   0xc002313c
c0021a28:	e8 75 e5 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021a2d:	83 c4 10             	add    esp,0x10
c0021a30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021a37:	8d 50 01             	lea    edx,[eax+0x1]
c0021a3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021a41:	90                   	nop
c0021a42:	83 c4 0c             	add    esp,0xc
c0021a45:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021a48 <ACPI::~ACPI()>:
c0021a48:	83 ec 0c             	sub    esp,0xc
c0021a4b:	ba a0 37 02 c0       	mov    edx,0xc00237a0
c0021a50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a54:	89 10                	mov    DWORD PTR [eax],edx
c0021a56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021a5a:	83 ec 0c             	sub    esp,0xc
c0021a5d:	50                   	push   eax
c0021a5e:	e8 99 7e fe ff       	call   c00098fc <Device::~Device()>
c0021a63:	83 c4 10             	add    esp,0x10
c0021a66:	90                   	nop
c0021a67:	83 c4 0c             	add    esp,0xc
c0021a6a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0021a6c <ACPI::~ACPI()>:
c0021a6c:	83 ec 0c             	sub    esp,0xc
c0021a6f:	83 ec 0c             	sub    esp,0xc
c0021a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a76:	e8 cd ff ff ff       	call   c0021a48 <ACPI::~ACPI()>
c0021a7b:	83 c4 10             	add    esp,0x10
c0021a7e:	83 ec 08             	sub    esp,0x8
c0021a81:	68 64 12 00 00       	push   0x1264
c0021a86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021a8a:	e8 54 b8 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0021a8f:	83 c4 10             	add    esp,0x10
c0021a92:	83 c4 0c             	add    esp,0xc
c0021a95:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021a98 <LinkedList<Device>::~LinkedList()>:
c0021a98:	90                   	nop
c0021a99:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0021a9c <LinkedList<Device>::isEmpty()>:
c0021a9c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0021aa2:	85 c0                	test   eax,eax
c0021aa4:	75 0e                	jne    c0021ab4 <LinkedList<Device>::isEmpty()+0x18>
c0021aa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021aaa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021aad:	85 c0                	test   eax,eax
c0021aaf:	75 03                	jne    c0021ab4 <LinkedList<Device>::isEmpty()+0x18>
c0021ab1:	b0 01                	mov    al,0x1
c0021ab3:	c3                   	ret    
c0021ab4:	b0 00                	mov    al,0x0
c0021ab6:	90                   	nop
c0021ab7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021ab8 <LinkedList<Device>::getFirstElement()>:
c0021ab8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021abc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021abe:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021ac0 <LinkedList<Device>::removeFirst()>:
c0021ac0:	83 ec 0c             	sub    esp,0xc
c0021ac3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ac7:	8b 00                	mov    eax,DWORD PTR [eax]
c0021ac9:	85 c0                	test   eax,eax
c0021acb:	75 17                	jne    c0021ae4 <LinkedList<Device>::removeFirst()+0x24>
c0021acd:	83 ec 0c             	sub    esp,0xc
c0021ad0:	68 ac 33 02 c0       	push   0xc00233ac
c0021ad5:	e8 c8 e4 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021ada:	83 c4 10             	add    esp,0x10
c0021add:	e9 92 00 00 00       	jmp    c0021b74 <LinkedList<Device>::removeFirst()+0xb4>
c0021ae2:	66 90                	xchg   ax,ax
c0021ae4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ae8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021aeb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021af1:	85 c0                	test   eax,eax
c0021af3:	74 13                	je     c0021b08 <LinkedList<Device>::removeFirst()+0x48>
c0021af5:	83 ec 0c             	sub    esp,0xc
c0021af8:	68 f7 33 02 c0       	push   0xc00233f7
c0021afd:	e8 a0 e4 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021b02:	83 c4 10             	add    esp,0x10
c0021b05:	8d 76 00             	lea    esi,[esi+0x0]
c0021b08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b0e:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0021b14:	85 c0                	test   eax,eax
c0021b16:	75 34                	jne    c0021b4c <LinkedList<Device>::removeFirst()+0x8c>
c0021b18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021b22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b26:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b34:	83 f8 01             	cmp    eax,0x1
c0021b37:	74 27                	je     c0021b60 <LinkedList<Device>::removeFirst()+0xa0>
c0021b39:	83 ec 0c             	sub    esp,0xc
c0021b3c:	68 d0 33 02 c0       	push   0xc00233d0
c0021b41:	e8 5c e4 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021b46:	83 c4 10             	add    esp,0x10
c0021b49:	eb 15                	jmp    c0021b60 <LinkedList<Device>::removeFirst()+0xa0>
c0021b4b:	90                   	nop
c0021b4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b50:	8b 00                	mov    eax,DWORD PTR [eax]
c0021b52:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b5c:	89 10                	mov    DWORD PTR [eax],edx
c0021b5e:	66 90                	xchg   ax,ax
c0021b60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b64:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021b67:	8d 50 ff             	lea    edx,[eax-0x1]
c0021b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b6e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021b71:	8d 76 00             	lea    esi,[esi+0x0]
c0021b74:	83 c4 0c             	add    esp,0xc
c0021b77:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021b78 <Computer::~Computer()>:
c0021b78:	83 ec 0c             	sub    esp,0xc
c0021b7b:	ba 50 3a 02 c0       	mov    edx,0xc0023a50
c0021b80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b84:	89 10                	mov    DWORD PTR [eax],edx
c0021b86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021b8a:	83 ec 0c             	sub    esp,0xc
c0021b8d:	50                   	push   eax
c0021b8e:	e8 69 7d fe ff       	call   c00098fc <Device::~Device()>
c0021b93:	83 c4 10             	add    esp,0x10
c0021b96:	90                   	nop
c0021b97:	83 c4 0c             	add    esp,0xc
c0021b9a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0021b9c <Computer::~Computer()>:
c0021b9c:	83 ec 0c             	sub    esp,0xc
c0021b9f:	83 ec 0c             	sub    esp,0xc
c0021ba2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ba6:	e8 cd ff ff ff       	call   c0021b78 <Computer::~Computer()>
c0021bab:	83 c4 10             	add    esp,0x10
c0021bae:	83 ec 08             	sub    esp,0x8
c0021bb1:	68 6c 01 00 00       	push   0x16c
c0021bb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021bba:	e8 24 b7 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0021bbf:	83 c4 10             	add    esp,0x10
c0021bc2:	83 c4 0c             	add    esp,0xc
c0021bc5:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021bc6 <idleCommon()>:
c0021bc6:	83 ec 0c             	sub    esp,0xc
c0021bc9:	fa                   	cli    
c0021bca:	ff 05 30 ea 02 c0    	inc    DWORD PTR ds:0xc002ea30
c0021bd0:	e8 eb 4f ff ff       	call   c0016bc0 <schedule()>
c0021bd5:	f0 ff 0d 30 ea 02 c0 	lock dec DWORD PTR ds:0xc002ea30
c0021bdc:	83 3d 30 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea30,0x0
c0021be3:	75 01                	jne    c0021be6 <idleCommon()+0x20>
c0021be5:	fb                   	sti    
c0021be6:	83 c4 0c             	add    esp,0xc
c0021be9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0021bea <LinkedList<UnixFile>::~LinkedList()>:
c0021bea:	90                   	nop
c0021beb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0021bec <LinkedList<UnixFile>::LinkedList()>:
c0021bec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bf0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021bf6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021bfa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c01:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c05:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021c0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c10:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021c16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021c21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c25:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021c2c:	90                   	nop
c0021c2d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0021c2e <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0021c2e:	83 ec 0c             	sub    esp,0xc
c0021c31:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021c36:	75 10                	jne    c0021c48 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0021c38:	83 ec 0c             	sub    esp,0xc
c0021c3b:	68 10 31 02 c0       	push   0xc0023110
c0021c40:	e8 5d e3 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021c45:	83 c4 10             	add    esp,0x10
c0021c48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c4e:	85 c0                	test   eax,eax
c0021c50:	74 34                	je     c0021c86 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021c52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c56:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c59:	85 c0                	test   eax,eax
c0021c5b:	74 29                	je     c0021c86 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021c5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c68:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c6f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021c73:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021c76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c7d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021c84:	eb 65                	jmp    c0021ceb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021c86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0021c8c:	85 c0                	test   eax,eax
c0021c8e:	75 4b                	jne    c0021cdb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021c90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c94:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021c97:	85 c0                	test   eax,eax
c0021c99:	75 40                	jne    c0021cdb <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021c9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021c9f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021ca3:	89 10                	mov    DWORD PTR [eax],edx
c0021ca5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ca9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021cad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021cb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021cbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cc2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021cc5:	85 c0                	test   eax,eax
c0021cc7:	74 22                	je     c0021ceb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021cc9:	83 ec 0c             	sub    esp,0xc
c0021ccc:	68 32 31 02 c0       	push   0xc0023132
c0021cd1:	e8 cc e2 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021cd6:	83 c4 10             	add    esp,0x10
c0021cd9:	eb 10                	jmp    c0021ceb <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021cdb:	83 ec 0c             	sub    esp,0xc
c0021cde:	68 3c 31 02 c0       	push   0xc002313c
c0021ce3:	e8 ba e2 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021ce8:	83 c4 10             	add    esp,0x10
c0021ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021cf2:	8d 50 01             	lea    edx,[eax+0x1]
c0021cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021cf9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021cfc:	90                   	nop
c0021cfd:	83 c4 0c             	add    esp,0xc
c0021d00:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0021d02 <LinkedList<UnixFile>::getFirstElement()>:
c0021d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d06:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d08:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0021d0a <LinkedList<UnixFile>::removeFirst()>:
c0021d0a:	83 ec 0c             	sub    esp,0xc
c0021d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d11:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d13:	85 c0                	test   eax,eax
c0021d15:	75 12                	jne    c0021d29 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0021d17:	83 ec 0c             	sub    esp,0xc
c0021d1a:	68 ac 33 02 c0       	push   0xc00233ac
c0021d1f:	e8 7e e2 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021d24:	83 c4 10             	add    esp,0x10
c0021d27:	eb 7e                	jmp    c0021da7 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0021d29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d2d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021d30:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d33:	85 c0                	test   eax,eax
c0021d35:	74 10                	je     c0021d47 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0021d37:	83 ec 0c             	sub    esp,0xc
c0021d3a:	68 f7 33 02 c0       	push   0xc00233f7
c0021d3f:	e8 5e e2 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021d44:	83 c4 10             	add    esp,0x10
c0021d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d4d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d50:	85 c0                	test   eax,eax
c0021d52:	75 33                	jne    c0021d87 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021d54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d58:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021d5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d62:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d6d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d70:	83 f8 01             	cmp    eax,0x1
c0021d73:	74 21                	je     c0021d96 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021d75:	83 ec 0c             	sub    esp,0xc
c0021d78:	68 d0 33 02 c0       	push   0xc00233d0
c0021d7d:	e8 20 e2 fe ff       	call   c000ffa2 <KePanic(char const*)>
c0021d82:	83 c4 10             	add    esp,0x10
c0021d85:	eb 0f                	jmp    c0021d96 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021d87:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0021d8d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0021d90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d94:	89 10                	mov    DWORD PTR [eax],edx
c0021d96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021d9a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021d9d:	8d 50 ff             	lea    edx,[eax-0x1]
c0021da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021da4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021da7:	83 c4 0c             	add    esp,0xc
c0021daa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c0021dac <LinkedList<UnixFile>::getNext(UnixFile*)>:
c0021dac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021db0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021db3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021db4 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021db4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021db8:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0021dbb:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0021dbc <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0021dbc:	90                   	nop
c0021dbd:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021dc0 <ThreadControlBlock::ThreadControlBlock()>:
c0021dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dc4:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021dcb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dcf:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021dd6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dda:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0021de1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021de5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c0021dec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021df0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c0021df7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021dfb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0021dff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e03:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c0021e07:	90                   	nop
c0021e08:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0021e0c <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0021e0c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e10:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e25:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021e2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e30:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021e36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e3a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021e41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e45:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021e4c:	90                   	nop
c0021e4d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0021e4e <CPU::~CPU()>:
c0021e4e:	83 ec 0c             	sub    esp,0xc
c0021e51:	ba 20 50 02 c0       	mov    edx,0xc0025020
c0021e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e5a:	89 10                	mov    DWORD PTR [eax],edx
c0021e5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e60:	83 ec 0c             	sub    esp,0xc
c0021e63:	50                   	push   eax
c0021e64:	e8 93 7a fe ff       	call   c00098fc <Device::~Device()>
c0021e69:	83 c4 10             	add    esp,0x10
c0021e6c:	90                   	nop
c0021e6d:	83 c4 0c             	add    esp,0xc
c0021e70:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021e72 <CPU::~CPU()>:
c0021e72:	83 ec 0c             	sub    esp,0xc
c0021e75:	83 ec 0c             	sub    esp,0xc
c0021e78:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e7c:	e8 cd ff ff ff       	call   c0021e4e <CPU::~CPU()>
c0021e81:	83 c4 10             	add    esp,0x10
c0021e84:	83 ec 08             	sub    esp,0x8
c0021e87:	68 78 11 00 00       	push   0x1178
c0021e8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e90:	e8 4e b4 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0021e95:	83 c4 10             	add    esp,0x10
c0021e98:	83 c4 0c             	add    esp,0xc
c0021e9b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0021e9c <PCI::~PCI()>:
c0021e9c:	83 ec 0c             	sub    esp,0xc
c0021e9f:	ba 84 55 02 c0       	mov    edx,0xc0025584
c0021ea4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ea8:	89 10                	mov    DWORD PTR [eax],edx
c0021eaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021eae:	83 ec 0c             	sub    esp,0xc
c0021eb1:	50                   	push   eax
c0021eb2:	e8 8d 6a fe ff       	call   c0008944 <Bus::~Bus()>
c0021eb7:	83 c4 10             	add    esp,0x10
c0021eba:	90                   	nop
c0021ebb:	83 c4 0c             	add    esp,0xc
c0021ebe:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0021ec0 <PCI::~PCI()>:
c0021ec0:	83 ec 0c             	sub    esp,0xc
c0021ec3:	83 ec 0c             	sub    esp,0xc
c0021ec6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021eca:	e8 cd ff ff ff       	call   c0021e9c <PCI::~PCI()>
c0021ecf:	83 c4 10             	add    esp,0x10
c0021ed2:	83 ec 08             	sub    esp,0x8
c0021ed5:	68 5c 01 00 00       	push   0x15c
c0021eda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021ede:	e8 00 b4 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0021ee3:	83 c4 10             	add    esp,0x10
c0021ee6:	83 c4 0c             	add    esp,0xc
c0021ee9:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0021eea <IDE::~IDE()>:
c0021eea:	83 ec 0c             	sub    esp,0xc
c0021eed:	ba d4 56 02 c0       	mov    edx,0xc00256d4
c0021ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021ef6:	89 10                	mov    DWORD PTR [eax],edx
c0021ef8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021efc:	83 ec 0c             	sub    esp,0xc
c0021eff:	50                   	push   eax
c0021f00:	e8 87 7e fe ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c0021f05:	83 c4 10             	add    esp,0x10
c0021f08:	90                   	nop
c0021f09:	83 c4 0c             	add    esp,0xc
c0021f0c:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0021f0e <IDE::~IDE()>:
c0021f0e:	83 ec 0c             	sub    esp,0xc
c0021f11:	83 ec 0c             	sub    esp,0xc
c0021f14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f18:	e8 cd ff ff ff       	call   c0021eea <IDE::~IDE()>
c0021f1d:	83 c4 10             	add    esp,0x10
c0021f20:	83 ec 08             	sub    esp,0x8
c0021f23:	68 70 02 00 00       	push   0x270
c0021f28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f2c:	e8 b2 b3 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0021f31:	83 c4 10             	add    esp,0x10
c0021f34:	83 c4 0c             	add    esp,0xc
c0021f37:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0021f38 <SATABus::~SATABus()>:
c0021f38:	83 ec 0c             	sub    esp,0xc
c0021f3b:	ba 24 57 02 c0       	mov    edx,0xc0025724
c0021f40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f44:	89 10                	mov    DWORD PTR [eax],edx
c0021f46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f4a:	83 ec 0c             	sub    esp,0xc
c0021f4d:	50                   	push   eax
c0021f4e:	e8 39 7e fe ff       	call   c0009d8c <HardDiskController::~HardDiskController()>
c0021f53:	83 c4 10             	add    esp,0x10
c0021f56:	90                   	nop
c0021f57:	83 c4 0c             	add    esp,0xc
c0021f5a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0021f5c <SATABus::~SATABus()>:
c0021f5c:	83 ec 0c             	sub    esp,0xc
c0021f5f:	83 ec 0c             	sub    esp,0xc
c0021f62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f66:	e8 cd ff ff ff       	call   c0021f38 <SATABus::~SATABus()>
c0021f6b:	83 c4 10             	add    esp,0x10
c0021f6e:	83 ec 08             	sub    esp,0x8
c0021f71:	68 64 01 00 00       	push   0x164
c0021f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021f7a:	e8 64 b3 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0021f7f:	83 c4 10             	add    esp,0x10
c0021f82:	83 c4 0c             	add    esp,0xc
c0021f85:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021f86 <ATA::~ATA()>:
c0021f86:	83 ec 0c             	sub    esp,0xc
c0021f89:	ba 0c 58 02 c0       	mov    edx,0xc002580c
c0021f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f92:	89 10                	mov    DWORD PTR [eax],edx
c0021f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021f98:	83 ec 0c             	sub    esp,0xc
c0021f9b:	50                   	push   eax
c0021f9c:	e8 cd 7e fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c0021fa1:	83 c4 10             	add    esp,0x10
c0021fa4:	90                   	nop
c0021fa5:	83 c4 0c             	add    esp,0xc
c0021fa8:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0021faa <ATA::~ATA()>:
c0021faa:	83 ec 0c             	sub    esp,0xc
c0021fad:	83 ec 0c             	sub    esp,0xc
c0021fb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fb4:	e8 cd ff ff ff       	call   c0021f86 <ATA::~ATA()>
c0021fb9:	83 c4 10             	add    esp,0x10
c0021fbc:	83 ec 08             	sub    esp,0x8
c0021fbf:	68 8c 01 00 00       	push   0x18c
c0021fc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021fc8:	e8 16 b3 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0021fcd:	83 c4 10             	add    esp,0x10
c0021fd0:	83 c4 0c             	add    esp,0xc
c0021fd3:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021fd4 <ATAPI::~ATAPI()>:
c0021fd4:	83 ec 0c             	sub    esp,0xc
c0021fd7:	ba 54 58 02 c0       	mov    edx,0xc0025854
c0021fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe0:	89 10                	mov    DWORD PTR [eax],edx
c0021fe2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021fe6:	83 ec 0c             	sub    esp,0xc
c0021fe9:	50                   	push   eax
c0021fea:	e8 7f 7e fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c0021fef:	83 c4 10             	add    esp,0x10
c0021ff2:	90                   	nop
c0021ff3:	83 c4 0c             	add    esp,0xc
c0021ff6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0021ff8 <ATAPI::~ATAPI()>:
c0021ff8:	83 ec 0c             	sub    esp,0xc
c0021ffb:	83 ec 0c             	sub    esp,0xc
c0021ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022002:	e8 cd ff ff ff       	call   c0021fd4 <ATAPI::~ATAPI()>
c0022007:	83 c4 10             	add    esp,0x10
c002200a:	83 ec 08             	sub    esp,0x8
c002200d:	68 84 01 00 00       	push   0x184
c0022012:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022016:	e8 c8 b2 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c002201b:	83 c4 10             	add    esp,0x10
c002201e:	83 c4 0c             	add    esp,0xc
c0022021:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0022022 <SATA::~SATA()>:
c0022022:	83 ec 0c             	sub    esp,0xc
c0022025:	ba 14 59 02 c0       	mov    edx,0xc0025914
c002202a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002202e:	89 10                	mov    DWORD PTR [eax],edx
c0022030:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022034:	83 ec 0c             	sub    esp,0xc
c0022037:	50                   	push   eax
c0022038:	e8 31 7e fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c002203d:	83 c4 10             	add    esp,0x10
c0022040:	90                   	nop
c0022041:	83 c4 0c             	add    esp,0xc
c0022044:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0022046 <SATA::~SATA()>:
c0022046:	83 ec 0c             	sub    esp,0xc
c0022049:	83 ec 0c             	sub    esp,0xc
c002204c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022050:	e8 cd ff ff ff       	call   c0022022 <SATA::~SATA()>
c0022055:	83 c4 10             	add    esp,0x10
c0022058:	83 ec 08             	sub    esp,0x8
c002205b:	68 7c 01 00 00       	push   0x17c
c0022060:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022064:	e8 7a b2 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0022069:	83 c4 10             	add    esp,0x10
c002206c:	83 c4 0c             	add    esp,0xc
c002206f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0022070 <SATAPI::~SATAPI()>:
c0022070:	83 ec 0c             	sub    esp,0xc
c0022073:	ba 38 5a 02 c0       	mov    edx,0xc0025a38
c0022078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002207c:	89 10                	mov    DWORD PTR [eax],edx
c002207e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022082:	83 ec 0c             	sub    esp,0xc
c0022085:	50                   	push   eax
c0022086:	e8 e3 7d fe ff       	call   c0009e6e <PhysicalDisk::~PhysicalDisk()>
c002208b:	83 c4 10             	add    esp,0x10
c002208e:	90                   	nop
c002208f:	83 c4 0c             	add    esp,0xc
c0022092:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0022094 <SATAPI::~SATAPI()>:
c0022094:	83 ec 0c             	sub    esp,0xc
c0022097:	83 ec 0c             	sub    esp,0xc
c002209a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002209e:	e8 cd ff ff ff       	call   c0022070 <SATAPI::~SATAPI()>
c00220a3:	83 c4 10             	add    esp,0x10
c00220a6:	83 ec 08             	sub    esp,0x8
c00220a9:	68 84 01 00 00       	push   0x184
c00220ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220b2:	e8 2c b2 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c00220b7:	83 c4 10             	add    esp,0x10
c00220ba:	83 c4 0c             	add    esp,0xc
c00220bd:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c00220be <IOAPIC::~IOAPIC()>:
c00220be:	83 ec 0c             	sub    esp,0xc
c00220c1:	ba 98 5a 02 c0       	mov    edx,0xc0025a98
c00220c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220ca:	89 10                	mov    DWORD PTR [eax],edx
c00220cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00220d0:	83 ec 0c             	sub    esp,0xc
c00220d3:	50                   	push   eax
c00220d4:	e8 23 78 fe ff       	call   c00098fc <Device::~Device()>
c00220d9:	83 c4 10             	add    esp,0x10
c00220dc:	90                   	nop
c00220dd:	83 c4 0c             	add    esp,0xc
c00220e0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00220e2 <IOAPIC::~IOAPIC()>:
c00220e2:	83 ec 0c             	sub    esp,0xc
c00220e5:	83 ec 0c             	sub    esp,0xc
c00220e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00220ec:	e8 cd ff ff ff       	call   c00220be <IOAPIC::~IOAPIC()>
c00220f1:	83 c4 10             	add    esp,0x10
c00220f4:	83 ec 08             	sub    esp,0x8
c00220f7:	68 68 01 00 00       	push   0x168
c00220fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022100:	e8 de b1 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0022105:	83 c4 10             	add    esp,0x10
c0022108:	83 c4 0c             	add    esp,0xc
c002210b:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c002210c <APICTimer::~APICTimer()>:
c002210c:	83 ec 0c             	sub    esp,0xc
c002210f:	ba e0 5a 02 c0       	mov    edx,0xc0025ae0
c0022114:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022118:	89 10                	mov    DWORD PTR [eax],edx
c002211a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002211e:	83 ec 0c             	sub    esp,0xc
c0022121:	50                   	push   eax
c0022122:	e8 15 8f fe ff       	call   c000b03c <Timer::~Timer()>
c0022127:	83 c4 10             	add    esp,0x10
c002212a:	90                   	nop
c002212b:	83 c4 0c             	add    esp,0xc
c002212e:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0022130 <APICTimer::~APICTimer()>:
c0022130:	83 ec 0c             	sub    esp,0xc
c0022133:	83 ec 0c             	sub    esp,0xc
c0022136:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002213a:	e8 cd ff ff ff       	call   c002210c <APICTimer::~APICTimer()>
c002213f:	83 c4 10             	add    esp,0x10
c0022142:	83 ec 08             	sub    esp,0x8
c0022145:	68 60 01 00 00       	push   0x160
c002214a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002214e:	e8 90 b1 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c0022153:	83 c4 10             	add    esp,0x10
c0022156:	83 c4 0c             	add    esp,0xc
c0022159:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002215c <PIT::~PIT()>:
c002215c:	83 ec 0c             	sub    esp,0xc
c002215f:	ba 30 5b 02 c0       	mov    edx,0xc0025b30
c0022164:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022168:	89 10                	mov    DWORD PTR [eax],edx
c002216a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002216e:	83 ec 0c             	sub    esp,0xc
c0022171:	50                   	push   eax
c0022172:	e8 c5 8e fe ff       	call   c000b03c <Timer::~Timer()>
c0022177:	83 c4 10             	add    esp,0x10
c002217a:	90                   	nop
c002217b:	83 c4 0c             	add    esp,0xc
c002217e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0022180 <PIT::~PIT()>:
c0022180:	83 ec 0c             	sub    esp,0xc
c0022183:	83 ec 0c             	sub    esp,0xc
c0022186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002218a:	e8 cd ff ff ff       	call   c002215c <PIT::~PIT()>
c002218f:	83 c4 10             	add    esp,0x10
c0022192:	83 ec 08             	sub    esp,0x8
c0022195:	68 5c 01 00 00       	push   0x15c
c002219a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002219e:	e8 40 b1 fe ff       	call   c000d2e3 <operator delete(void*, unsigned long)>
c00221a3:	83 c4 10             	add    esp,0x10
c00221a6:	83 c4 0c             	add    esp,0xc
c00221a9:	c3                   	ret    

Disassembly of section userkernel:

c0027000 <KiDefaultSignalHandlerAbort(int)>:
c0027000:	57                   	push   edi
c0027001:	b9 07 00 00 00       	mov    ecx,0x7
c0027006:	56                   	push   esi
c0027007:	be 33 3e 02 c0       	mov    esi,0xc0023e33
c002700c:	83 ec 24             	sub    esp,0x24
c002700f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0027013:	fc                   	cld    
c0027014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002701a:	50                   	push   eax
c002701b:	6a 00                	push   0x0
c002701d:	6a 38                	push   0x38
c002701f:	6a 01                	push   0x1
c0027021:	e8 2c 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0027026:	83 c4 34             	add    esp,0x34
c0027029:	5e                   	pop    esi
c002702a:	5f                   	pop    edi
c002702b:	c3                   	ret    

c002702c <KiDefaultSignalHandlerTerminate(int)>:
c002702c:	57                   	push   edi
c002702d:	b9 08 00 00 00       	mov    ecx,0x8
c0027032:	56                   	push   esi
c0027033:	be 4f 3e 02 c0       	mov    esi,0xc0023e4f
c0027038:	83 ec 24             	sub    esp,0x24
c002703b:	89 e7                	mov    edi,esp
c002703d:	fc                   	cld    
c002703e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0027040:	54                   	push   esp
c0027041:	6a 00                	push   0x0
c0027043:	6a 37                	push   0x37
c0027045:	6a 01                	push   0x1
c0027047:	e8 06 00 00 00       	call   c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002704c:	83 c4 34             	add    esp,0x34
c002704f:	5e                   	pop    esi
c0027050:	5f                   	pop    edi
c0027051:	c3                   	ret    

c0027052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0027052:	53                   	push   ebx
c0027053:	83 ec 10             	sub    esp,0x10
c0027056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002705a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002705e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0027062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0027066:	cd 60                	int    0x60
c0027068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002706c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0027070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0027074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0027078:	83 c4 10             	add    esp,0x10
c002707b:	5b                   	pop    ebx
c002707c:	c3                   	ret    

Disassembly of section align_previous:

c0028000 <DO_NOT_DELETE()>:
c0028000:	c3                   	ret    
