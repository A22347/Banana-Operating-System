
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 13 f5 00 00       	call   c000f533 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 48 5c 02 c0       	mov    eax,0xc0025c48
c0000025:	3d 48 5c 02 c0       	cmp    eax,0xc0025c48
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 48 5c 02 c0       	push   0xc0025c48
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 48 5c 02 c0       	mov    eax,0xc0025c48
c0000051:	2d 48 5c 02 c0       	sub    eax,0xc0025c48
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 48 5c 02 c0       	push   0xc0025c48
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 70 02 c0 00 	cmp    BYTE PTR ds:0xc00270c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 80 18 02 c0       	mov    ebx,0xc0021880
c0000097:	81 eb 7c 18 02 c0    	sub    ebx,0xc002187c
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 7c 18 02 c0       	mov    esi,0xc002187c
c00000a6:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 70 02 c0       	mov    ds:0xc00270c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 70 02 c0       	mov    eax,ds:0xc00270c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 48 5c 02 c0       	push   0xc0025c48
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 70 02 c0 01 	mov    BYTE PTR ds:0xc00270c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 70 02 c0       	push   0xc00270c8
c0000108:	68 48 5c 02 c0       	push   0xc0025c48
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 cb 57 01 00       	call   c0015a78 <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 f8 3a 01 00       	call   c0013dbd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 a9 57 01 00       	call   c0015a78 <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 ea 5c 01 00       	call   c0015fd8 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 a5 61 01 00       	call   c001649c <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 80 cd 02 c0 	lgdtd  ds:0xc002cd80
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 d6 e6 00 00       	jmp    c000ea55 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 70 02 c0       	mov    ds:0xc00270e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 70 02 c0    	mov    DWORD PTR ds:0xc00270e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 70 02 c0    	mov    ebx,DWORD PTR ds:0xc00270e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 a0 18 02 c0 02 	test   BYTE PTR [edx-0x3ffde760],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 a0 18 02 c0 01 	test   BYTE PTR [edx-0x3ffde760],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 a0 18 02 c0 08 	test   BYTE PTR [edx-0x3ffde760],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 a0 18 02 c0 04 	test   BYTE PTR [ecx-0x3ffde760],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 a0 18 02 c0 01 	test   BYTE PTR [edx-0x3ffde760],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 01 00 	mov    DWORD PTR [eax+0x354],0x10000
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000d5a:	85 c9                	test   ecx,ecx
c0000d5c:	0f 84 01 01 00 00    	je     c0000e63 <dlfree+0x110>
c0000d62:	8b 71 fc             	mov    esi,DWORD PTR [ecx-0x4]
c0000d65:	8b 1d 00 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 51 f8             	lea    edx,[ecx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c3                	cmp    ebx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 cb 03             	or     ebx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 1c 85 04 71 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffd8efc]
c0000d8d:	89 19                	mov    DWORD PTR [ecx],ebx
c0000d8f:	89 14 85 04 71 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8efc],edx
c0000d96:	e9 c8 00 00 00       	jmp    c0000e63 <dlfree+0x110>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 cb 01             	or     ebx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 1d 00 71 02 c0    	mov    DWORD PTR ds:0xc0027100,ebx
c0000db0:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000db3:	83 e3 fc             	and    ebx,0xfffffffc
c0000db6:	f6 41 fc 01          	test   BYTE PTR [ecx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000dbf:	29 ca                	sub    edx,ecx
c0000dc1:	01 c8                	add    eax,ecx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0000dc9:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dcc:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000dcf:	39 35 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 4c 1e 04          	mov    ecx,DWORD PTR [esi+ebx*1+0x4]
c0000ddb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000dde:	80 e1 01             	and    cl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 4e 0c             	mov    ecx,DWORD PTR [esi+0xc]
c0000de9:	01 d8                	add    eax,ebx
c0000deb:	89 4f 0c             	mov    DWORD PTR [edi+0xc],ecx
c0000dee:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0000df1:	8b 0d 3c 71 02 c0    	mov    ecx,DWORD PTR ds:0xc002713c
c0000df7:	c7 42 0c 34 71 02 c0 	mov    DWORD PTR [edx+0xc],0xc0027134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 d8                	add    eax,ebx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 35                	jbe    c0000e63 <dlfree+0x110>
c0000e2e:	f6 05 00 71 02 c0 02 	test   BYTE PTR ds:0xc0027100,0x2
c0000e35:	74 2c                	je     c0000e63 <dlfree+0x110>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	8b 49 f8             	mov    ecx,DWORD PTR [ecx-0x8]
c0000e47:	01 c8                	add    eax,ecx
c0000e49:	53                   	push   ebx
c0000e4a:	29 ca                	sub    edx,ecx
c0000e4c:	53                   	push   ebx
c0000e4d:	ff 0d 50 74 02 c0    	dec    DWORD PTR ds:0xc0027450
c0000e53:	50                   	push   eax
c0000e54:	29 05 64 74 02 c0    	sub    DWORD PTR ds:0xc0027464,eax
c0000e5a:	52                   	push   edx
c0000e5b:	e8 21 e4 00 00       	call   c000f281 <munmap>
c0000e60:	83 c4 10             	add    esp,0x10
c0000e63:	5b                   	pop    ebx
c0000e64:	5e                   	pop    esi
c0000e65:	5f                   	pop    edi
c0000e66:	c3                   	ret    

c0000e67 <sYSMALLOc>:
c0000e67:	55                   	push   ebp
c0000e68:	57                   	push   edi
c0000e69:	56                   	push   esi
c0000e6a:	53                   	push   ebx
c0000e6b:	89 d3                	mov    ebx,edx
c0000e6d:	83 ec 2c             	sub    esp,0x2c
c0000e70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e74:	8b aa 5c 03 00 00    	mov    ebp,DWORD PTR [edx+0x35c]
c0000e7a:	f6 02 02             	test   BYTE PTR [edx],0x2
c0000e7d:	8d 45 ff             	lea    eax,[ebp-0x1]
c0000e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e84:	74 1f                	je     c0000ea5 <sYSMALLOc+0x3e>
c0000e86:	89 d0                	mov    eax,edx
c0000e88:	e8 df fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e8d:	83 ec 0c             	sub    esp,0xc
c0000e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0000e94:	83 e8 07             	sub    eax,0x7
c0000e97:	50                   	push   eax
c0000e98:	e8 7d 03 00 00       	call   c000121a <dlmalloc>
c0000e9d:	83 c4 10             	add    esp,0x10
c0000ea0:	e9 6d 03 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0000ea5:	f7 dd                	neg    ebp
c0000ea7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000eab:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0000eaf:	39 82 4c 03 00 00    	cmp    DWORD PTR [edx+0x34c],eax
c0000eb5:	0f 87 be 00 00 00    	ja     c0000f79 <sYSMALLOc+0x112>
c0000ebb:	8b 82 54 03 00 00    	mov    eax,DWORD PTR [edx+0x354]
c0000ec1:	39 82 50 03 00 00    	cmp    DWORD PTR [edx+0x350],eax
c0000ec7:	0f 8d ac 00 00 00    	jge    c0000f79 <sYSMALLOc+0x112>
c0000ecd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0000ed1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000ed5:	8d 74 38 0b          	lea    esi,[eax+edi*1+0xb]
c0000ed9:	21 ee                	and    esi,ebp
c0000edb:	39 fe                	cmp    esi,edi
c0000edd:	0f 86 96 00 00 00    	jbe    c0000f79 <sYSMALLOc+0x112>
c0000ee3:	52                   	push   edx
c0000ee4:	52                   	push   edx
c0000ee5:	6a 00                	push   0x0
c0000ee7:	6a ff                	push   0xffffffff
c0000ee9:	6a 0c                	push   0xc
c0000eeb:	6a 03                	push   0x3
c0000eed:	56                   	push   esi
c0000eee:	6a 00                	push   0x0
c0000ef0:	e8 2e e3 00 00       	call   c000f223 <mmap>
c0000ef5:	83 c4 20             	add    esp,0x20
c0000ef8:	83 f8 ff             	cmp    eax,0xffffffff
c0000efb:	74 7c                	je     c0000f79 <sYSMALLOc+0x112>
c0000efd:	89 c1                	mov    ecx,eax
c0000eff:	83 e1 07             	and    ecx,0x7
c0000f02:	74 13                	je     c0000f17 <sYSMALLOc+0xb0>
c0000f04:	ba 08 00 00 00       	mov    edx,0x8
c0000f09:	29 ca                	sub    edx,ecx
c0000f0b:	89 f1                	mov    ecx,esi
c0000f0d:	01 d0                	add    eax,edx
c0000f0f:	29 d1                	sub    ecx,edx
c0000f11:	89 10                	mov    DWORD PTR [eax],edx
c0000f13:	89 ca                	mov    edx,ecx
c0000f15:	eb 08                	jmp    c0000f1f <sYSMALLOc+0xb8>
c0000f17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000f1d:	89 f2                	mov    edx,esi
c0000f1f:	83 ca 02             	or     edx,0x2
c0000f22:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0000f25:	8b bb 50 03 00 00    	mov    edi,DWORD PTR [ebx+0x350]
c0000f2b:	8d 57 01             	lea    edx,[edi+0x1]
c0000f2e:	89 93 50 03 00 00    	mov    DWORD PTR [ebx+0x350],edx
c0000f34:	3b 93 58 03 00 00    	cmp    edx,DWORD PTR [ebx+0x358]
c0000f3a:	7e 06                	jle    c0000f42 <sYSMALLOc+0xdb>
c0000f3c:	89 93 58 03 00 00    	mov    DWORD PTR [ebx+0x358],edx
c0000f42:	03 b3 64 03 00 00    	add    esi,DWORD PTR [ebx+0x364]
c0000f48:	89 b3 64 03 00 00    	mov    DWORD PTR [ebx+0x364],esi
c0000f4e:	3b b3 70 03 00 00    	cmp    esi,DWORD PTR [ebx+0x370]
c0000f54:	76 06                	jbe    c0000f5c <sYSMALLOc+0xf5>
c0000f56:	89 b3 70 03 00 00    	mov    DWORD PTR [ebx+0x370],esi
c0000f5c:	03 b3 68 03 00 00    	add    esi,DWORD PTR [ebx+0x368]
c0000f62:	39 b3 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],esi
c0000f68:	0f 83 3f 01 00 00    	jae    c00010ad <sYSMALLOc+0x246>
c0000f6e:	89 b3 74 03 00 00    	mov    DWORD PTR [ebx+0x374],esi
c0000f74:	e9 34 01 00 00       	jmp    c00010ad <sYSMALLOc+0x246>
c0000f79:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000f7c:	8b ab 48 03 00 00    	mov    ebp,DWORD PTR [ebx+0x348]
c0000f82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0000f86:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0000f89:	83 e0 fc             	and    eax,0xfffffffc
c0000f8c:	89 04 24             	mov    DWORD PTR [esp],eax
c0000f8f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f93:	03 04 24             	add    eax,DWORD PTR [esp]
c0000f96:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000f9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f9e:	83 c0 10             	add    eax,0x10
c0000fa1:	01 c5                	add    ebp,eax
c0000fa3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000fa7:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fae:	74 03                	je     c0000fb3 <sYSMALLOc+0x14c>
c0000fb0:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c0000fb3:	03 6c 24 0c          	add    ebp,DWORD PTR [esp+0xc]
c0000fb7:	23 6c 24 10          	and    ebp,DWORD PTR [esp+0x10]
c0000fbb:	89 ee                	mov    esi,ebp
c0000fbd:	7f 18                	jg     c0000fd7 <sYSMALLOc+0x170>
c0000fbf:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000fc6:	74 27                	je     c0000fef <sYSMALLOc+0x188>
c0000fc8:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000fcc:	03 34 24             	add    esi,DWORD PTR [esp]
c0000fcf:	01 ee                	add    esi,ebp
c0000fd1:	23 74 24 10          	and    esi,DWORD PTR [esp+0x10]
c0000fd5:	eb 18                	jmp    c0000fef <sYSMALLOc+0x188>
c0000fd7:	83 ec 0c             	sub    esp,0xc
c0000fda:	55                   	push   ebp
c0000fdb:	e8 0d e2 00 00       	call   c000f1ed <sbrk_thunk>
c0000fe0:	83 c4 10             	add    esp,0x10
c0000fe3:	89 c7                	mov    edi,eax
c0000fe5:	83 c8 ff             	or     eax,0xffffffff
c0000fe8:	83 ff ff             	cmp    edi,0xffffffff
c0000feb:	75 42                	jne    c000102f <sYSMALLOc+0x1c8>
c0000fed:	eb d0                	jmp    c0000fbf <sYSMALLOc+0x158>
c0000fef:	81 fe ff bf 00 00    	cmp    esi,0xbfff
c0000ff5:	77 05                	ja     c0000ffc <sYSMALLOc+0x195>
c0000ff7:	be 00 c0 00 00       	mov    esi,0xc000
c0000ffc:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c0001000:	77 07                	ja     c0001009 <sYSMALLOc+0x1a2>
c0001002:	31 c0                	xor    eax,eax
c0001004:	e9 09 02 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c0001009:	50                   	push   eax
c000100a:	50                   	push   eax
c000100b:	6a 00                	push   0x0
c000100d:	6a ff                	push   0xffffffff
c000100f:	6a 0c                	push   0xc
c0001011:	6a 03                	push   0x3
c0001013:	56                   	push   esi
c0001014:	6a 00                	push   0x0
c0001016:	e8 08 e2 00 00       	call   c000f223 <mmap>
c000101b:	83 c4 20             	add    esp,0x20
c000101e:	89 c7                	mov    edi,eax
c0001020:	83 f8 ff             	cmp    eax,0xffffffff
c0001023:	74 dd                	je     c0001002 <sYSMALLOc+0x19b>
c0001025:	8d 04 30             	lea    eax,[eax+esi*1]
c0001028:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000102f:	8b ab 68 03 00 00    	mov    ebp,DWORD PTR [ebx+0x368]
c0001035:	01 f5                	add    ebp,esi
c0001037:	83 f8 ff             	cmp    eax,0xffffffff
c000103a:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0001040:	75 73                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001042:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c0001046:	75 6d                	jne    c00010b5 <sYSMALLOc+0x24e>
c0001048:	03 34 24             	add    esi,DWORD PTR [esp]
c000104b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000104f:	83 ce 01             	or     esi,0x1
c0001052:	89 70 04             	mov    DWORD PTR [eax+0x4],esi
c0001055:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c000105b:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001061:	73 06                	jae    c0001069 <sYSMALLOc+0x202>
c0001063:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0001069:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c000106f:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0001075:	73 06                	jae    c000107d <sYSMALLOc+0x216>
c0001077:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c000107d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001080:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001083:	83 e2 fc             	and    edx,0xfffffffc
c0001086:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000108a:	0f 82 72 ff ff ff    	jb     c0001002 <sYSMALLOc+0x19b>
c0001090:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001094:	2b 54 24 04          	sub    edx,DWORD PTR [esp+0x4]
c0001098:	01 c1                	add    ecx,eax
c000109a:	83 ca 01             	or     edx,0x1
c000109d:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010a0:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c00010a4:	83 cb 01             	or     ebx,0x1
c00010a7:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00010aa:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010ad:	83 c0 08             	add    eax,0x8
c00010b0:	e9 5d 01 00 00       	jmp    c0001212 <sYSMALLOc+0x3ab>
c00010b5:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c00010bb:	89 d1                	mov    ecx,edx
c00010bd:	83 e1 01             	and    ecx,0x1
c00010c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010c4:	0f 95 44 24 1c       	setne  BYTE PTR [esp+0x1c]
c00010c9:	85 4c 24 1c          	test   DWORD PTR [esp+0x1c],ecx
c00010cd:	74 14                	je     c00010e3 <sYSMALLOc+0x27c>
c00010cf:	39 7c 24 14          	cmp    DWORD PTR [esp+0x14],edi
c00010d3:	76 0e                	jbe    c00010e3 <sYSMALLOc+0x27c>
c00010d5:	83 e2 fe             	and    edx,0xfffffffe
c00010d8:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c00010de:	e9 89 00 00 00       	jmp    c000116c <sYSMALLOc+0x305>
c00010e3:	85 c9                	test   ecx,ecx
c00010e5:	0f 84 81 00 00 00    	je     c000116c <sYSMALLOc+0x305>
c00010eb:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00010ef:	74 0e                	je     c00010ff <sYSMALLOc+0x298>
c00010f1:	89 f8                	mov    eax,edi
c00010f3:	2b 44 24 14          	sub    eax,DWORD PTR [esp+0x14]
c00010f7:	01 c5                	add    ebp,eax
c00010f9:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c00010ff:	89 fa                	mov    edx,edi
c0001101:	83 e2 07             	and    edx,0x7
c0001104:	74 0c                	je     c0001112 <sYSMALLOc+0x2ab>
c0001106:	b8 08 00 00 00       	mov    eax,0x8
c000110b:	29 d0                	sub    eax,edx
c000110d:	8d 14 07             	lea    edx,[edi+eax*1]
c0001110:	eb 04                	jmp    c0001116 <sYSMALLOc+0x2af>
c0001112:	89 fa                	mov    edx,edi
c0001114:	31 c0                	xor    eax,eax
c0001116:	03 04 24             	add    eax,DWORD PTR [esp]
c0001119:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000111d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0001121:	8d 0c 06             	lea    ecx,[esi+eax*1]
c0001124:	83 ec 0c             	sub    esp,0xc
c0001127:	01 f9                	add    ecx,edi
c0001129:	01 cd                	add    ebp,ecx
c000112b:	29 c8                	sub    eax,ecx
c000112d:	23 6c 24 1c          	and    ebp,DWORD PTR [esp+0x1c]
c0001131:	01 c5                	add    ebp,eax
c0001133:	55                   	push   ebp
c0001134:	e8 b4 e0 00 00       	call   c000f1ed <sbrk_thunk>
c0001139:	83 c4 10             	add    esp,0x10
c000113c:	83 f8 ff             	cmp    eax,0xffffffff
c000113f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0001143:	75 17                	jne    c000115c <sYSMALLOc+0x2f5>
c0001145:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001149:	83 ec 0c             	sub    esp,0xc
c000114c:	6a 00                	push   0x0
c000114e:	e8 9a e0 00 00       	call   c000f1ed <sbrk_thunk>
c0001153:	83 c4 10             	add    esp,0x10
c0001156:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000115a:	eb 32                	jmp    c000118e <sYSMALLOc+0x327>
c000115c:	39 f8                	cmp    eax,edi
c000115e:	73 39                	jae    c0001199 <sYSMALLOc+0x332>
c0001160:	8d 04 37             	lea    eax,[edi+esi*1]
c0001163:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000116a:	eb 22                	jmp    c000118e <sYSMALLOc+0x327>
c000116c:	89 fa                	mov    edx,edi
c000116e:	83 f8 ff             	cmp    eax,0xffffffff
c0001171:	75 24                	jne    c0001197 <sYSMALLOc+0x330>
c0001173:	83 ec 0c             	sub    esp,0xc
c0001176:	6a 00                	push   0x0
c0001178:	e8 70 e0 00 00       	call   c000f1ed <sbrk_thunk>
c000117d:	83 c4 10             	add    esp,0x10
c0001180:	89 c2                	mov    edx,eax
c0001182:	29 fa                	sub    edx,edi
c0001184:	29 f2                	sub    edx,esi
c0001186:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000118c:	89 fa                	mov    edx,edi
c000118e:	83 f8 ff             	cmp    eax,0xffffffff
c0001191:	0f 84 be fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c0001197:	31 ed                	xor    ebp,ebp
c0001199:	29 d0                	sub    eax,edx
c000119b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000119e:	01 e8                	add    eax,ebp
c00011a0:	83 c8 01             	or     eax,0x1
c00011a3:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00011a6:	01 ab 68 03 00 00    	add    DWORD PTR [ebx+0x368],ebp
c00011ac:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00011b0:	0f 84 9f fe ff ff    	je     c0001055 <sYSMALLOc+0x1ee>
c00011b6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011ba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00011bd:	83 ee 0c             	sub    esi,0xc
c00011c0:	83 e6 f8             	and    esi,0xfffffff8
c00011c3:	89 f0                	mov    eax,esi
c00011c5:	83 c8 01             	or     eax,0x1
c00011c8:	83 fe 0f             	cmp    esi,0xf
c00011cb:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00011ce:	c7 44 37 04 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x4],0x5
c00011d6:	c7 44 37 08 05 00 00 00 	mov    DWORD PTR [edi+esi*1+0x8],0x5
c00011de:	0f 86 71 fe ff ff    	jbe    c0001055 <sYSMALLOc+0x1ee>
c00011e4:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c00011ea:	83 ec 0c             	sub    esp,0xc
c00011ed:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00011f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00011fb:	83 c0 08             	add    eax,0x8
c00011fe:	50                   	push   eax
c00011ff:	e8 4f fb ff ff       	call   c0000d53 <dlfree>
c0001204:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c000120a:	83 c4 10             	add    esp,0x10
c000120d:	e9 43 fe ff ff       	jmp    c0001055 <sYSMALLOc+0x1ee>
c0001212:	83 c4 2c             	add    esp,0x2c
c0001215:	5b                   	pop    ebx
c0001216:	5e                   	pop    esi
c0001217:	5f                   	pop    edi
c0001218:	5d                   	pop    ebp
c0001219:	c3                   	ret    

c000121a <dlmalloc>:
c000121a:	55                   	push   ebp
c000121b:	57                   	push   edi
c000121c:	56                   	push   esi
c000121d:	53                   	push   ebx
c000121e:	83 ec 1c             	sub    esp,0x1c
c0001221:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001225:	83 f8 df             	cmp    eax,0xffffffdf
c0001228:	0f 87 70 03 00 00    	ja     c000159e <dlmalloc+0x384>
c000122e:	83 c0 0b             	add    eax,0xb
c0001231:	be 10 00 00 00       	mov    esi,0x10
c0001236:	83 f8 0f             	cmp    eax,0xf
c0001239:	76 05                	jbe    c0001240 <dlmalloc+0x26>
c000123b:	83 e0 f8             	and    eax,0xfffffff8
c000123e:	89 c6                	mov    esi,eax
c0001240:	8b 3d 00 71 02 c0    	mov    edi,DWORD PTR ds:0xc0027100
c0001246:	f7 c7 01 00 00 00    	test   edi,0x1
c000124c:	75 17                	jne    c0001265 <dlmalloc+0x4b>
c000124e:	85 ff                	test   edi,edi
c0001250:	0f 85 05 03 00 00    	jne    c000155b <dlmalloc+0x341>
c0001256:	b8 00 71 02 c0       	mov    eax,0xc0027100
c000125b:	e8 0c fa ff ff       	call   c0000c6c <malloc_consolidate>
c0001260:	e9 f6 02 00 00       	jmp    c000155b <dlmalloc+0x341>
c0001265:	39 f7                	cmp    edi,esi
c0001267:	72 1f                	jb     c0001288 <dlmalloc+0x6e>
c0001269:	89 f2                	mov    edx,esi
c000126b:	c1 ea 03             	shr    edx,0x3
c000126e:	83 ea 02             	sub    edx,0x2
c0001271:	8b 04 95 04 71 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8efc]
c0001278:	85 c0                	test   eax,eax
c000127a:	74 0c                	je     c0001288 <dlmalloc+0x6e>
c000127c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000127f:	89 0c 95 04 71 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8efc],ecx
c0001286:	eb 30                	jmp    c00012b8 <dlmalloc+0x9e>
c0001288:	89 f0                	mov    eax,esi
c000128a:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001290:	77 2e                	ja     c00012c0 <dlmalloc+0xa6>
c0001292:	c1 e8 03             	shr    eax,0x3
c0001295:	8d 14 c5 34 71 02 c0 	lea    edx,[eax*8-0x3ffd8ecc]
c000129c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012a0:	8d 5a f8             	lea    ebx,[edx-0x8]
c00012a3:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00012a6:	39 c3                	cmp    ebx,eax
c00012a8:	74 2e                	je     c00012d8 <dlmalloc+0xbe>
c00012aa:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00012ad:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00012b2:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00012b5:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00012b8:	83 c0 08             	add    eax,0x8
c00012bb:	e9 e0 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c00012c0:	e8 23 f9 ff ff       	call   c0000be8 <largebin_index>
c00012c5:	83 e7 02             	and    edi,0x2
c00012c8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00012cc:	74 0a                	je     c00012d8 <dlmalloc+0xbe>
c00012ce:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00012d3:	e8 94 f9 ff ff       	call   c0000c6c <malloc_consolidate>
c00012d8:	8d 46 10             	lea    eax,[esi+0x10]
c00012db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00012df:	8b 1d 40 71 02 c0    	mov    ebx,DWORD PTR ds:0xc0027140
c00012e5:	81 fb 34 71 02 c0    	cmp    ebx,0xc0027134
c00012eb:	0f 84 13 01 00 00    	je     c0001404 <dlmalloc+0x1ea>
c00012f1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00012f4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00012f7:	83 e7 fc             	and    edi,0xfffffffc
c00012fa:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001300:	77 4c                	ja     c000134e <dlmalloc+0x134>
c0001302:	3d 34 71 02 c0       	cmp    eax,0xc0027134
c0001307:	75 45                	jne    c000134e <dlmalloc+0x134>
c0001309:	39 1d 30 71 02 c0    	cmp    DWORD PTR ds:0xc0027130,ebx
c000130f:	75 3d                	jne    c000134e <dlmalloc+0x134>
c0001311:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001315:	73 37                	jae    c000134e <dlmalloc+0x134>
c0001317:	8d 04 33             	lea    eax,[ebx+esi*1]
c000131a:	89 fa                	mov    edx,edi
c000131c:	a3 3c 71 02 c0       	mov    ds:0xc002713c,eax
c0001321:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001326:	a3 30 71 02 c0       	mov    ds:0xc0027130,eax
c000132b:	29 f2                	sub    edx,esi
c000132d:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c0001334:	c7 40 0c 34 71 02 c0 	mov    DWORD PTR [eax+0xc],0xc0027134
c000133b:	83 ce 01             	or     esi,0x1
c000133e:	89 d1                	mov    ecx,edx
c0001340:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001343:	83 c9 01             	or     ecx,0x1
c0001346:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001349:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000134c:	eb 15                	jmp    c0001363 <dlmalloc+0x149>
c000134e:	a3 40 71 02 c0       	mov    ds:0xc0027140,eax
c0001353:	39 fe                	cmp    esi,edi
c0001355:	c7 40 08 34 71 02 c0 	mov    DWORD PTR [eax+0x8],0xc0027134
c000135c:	75 0d                	jne    c000136b <dlmalloc+0x151>
c000135e:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001363:	8d 43 08             	lea    eax,[ebx+0x8]
c0001366:	e9 35 02 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000136b:	89 f8                	mov    eax,edi
c000136d:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001373:	77 19                	ja     c000138e <dlmalloc+0x174>
c0001375:	c1 e8 03             	shr    eax,0x3
c0001378:	8d 14 00             	lea    edx,[eax+eax*1]
c000137b:	83 c2 0d             	add    edx,0xd
c000137e:	8d 2c 95 f8 70 02 c0 	lea    ebp,[edx*4-0x3ffd8f08]
c0001385:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c000138c:	eb 46                	jmp    c00013d4 <dlmalloc+0x1ba>
c000138e:	e8 55 f8 ff ff       	call   c0000be8 <largebin_index>
c0001393:	8d 14 00             	lea    edx,[eax+eax*1]
c0001396:	83 c2 0d             	add    edx,0xd
c0001399:	8d 0c 95 00 71 02 c0 	lea    ecx,[edx*4-0x3ffd8f00]
c00013a0:	8b 14 95 00 71 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd8f00]
c00013a7:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00013aa:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00013ae:	89 d5                	mov    ebp,edx
c00013b0:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00013b4:	74 1e                	je     c00013d4 <dlmalloc+0x1ba>
c00013b6:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00013b9:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00013bc:	77 12                	ja     c00013d0 <dlmalloc+0x1b6>
c00013be:	83 cf 01             	or     edi,0x1
c00013c1:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00013c4:	76 05                	jbe    c00013cb <dlmalloc+0x1b1>
c00013c6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00013c9:	eb f6                	jmp    c00013c1 <dlmalloc+0x1a7>
c00013cb:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00013ce:	eb 04                	jmp    c00013d4 <dlmalloc+0x1ba>
c00013d0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00013d4:	89 c7                	mov    edi,eax
c00013d6:	88 c1                	mov    cl,al
c00013d8:	c1 ff 05             	sar    edi,0x5
c00013db:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00013df:	bf 01 00 00 00       	mov    edi,0x1
c00013e4:	d3 e7                	shl    edi,cl
c00013e6:	89 f8                	mov    eax,edi
c00013e8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00013ec:	09 04 bd 34 74 02 c0 	or     DWORD PTR [edi*4-0x3ffd8bcc],eax
c00013f3:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00013f6:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00013f9:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00013fc:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00013ff:	e9 db fe ff ff       	jmp    c00012df <dlmalloc+0xc5>
c0001404:	81 fe ff 00 00 00    	cmp    esi,0xff
c000140a:	76 78                	jbe    c0001484 <dlmalloc+0x26a>
c000140c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001410:	8d 04 c5 34 71 02 c0 	lea    eax,[eax*8-0x3ffd8ecc]
c0001417:	8d 48 f8             	lea    ecx,[eax-0x8]
c000141a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000141d:	39 ca                	cmp    edx,ecx
c000141f:	74 63                	je     c0001484 <dlmalloc+0x26a>
c0001421:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001424:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001427:	83 e3 fc             	and    ebx,0xfffffffc
c000142a:	39 de                	cmp    esi,ebx
c000142c:	77 52                	ja     c0001480 <dlmalloc+0x266>
c000142e:	89 df                	mov    edi,ebx
c0001430:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001433:	29 f7                	sub    edi,esi
c0001435:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001438:	01 d3                	add    ebx,edx
c000143a:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000143d:	83 ff 0f             	cmp    edi,0xf
c0001440:	8d 42 08             	lea    eax,[edx+0x8]
c0001443:	77 09                	ja     c000144e <dlmalloc+0x234>
c0001445:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001449:	e9 52 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000144e:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001451:	83 ce 01             	or     esi,0x1
c0001454:	89 0d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,ecx
c000145a:	89 0d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,ecx
c0001460:	c7 41 08 34 71 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0027134
c0001467:	c7 41 0c 34 71 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0027134
c000146e:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001471:	89 fa                	mov    edx,edi
c0001473:	83 ca 01             	or     edx,0x1
c0001476:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001479:	89 3b                	mov    DWORD PTR [ebx],edi
c000147b:	e9 20 01 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c0001480:	89 c2                	mov    edx,eax
c0001482:	eb 99                	jmp    c000141d <dlmalloc+0x203>
c0001484:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001488:	b8 01 00 00 00       	mov    eax,0x1
c000148d:	41                   	inc    ecx
c000148e:	89 cb                	mov    ebx,ecx
c0001490:	8d 14 cd 2c 71 02 c0 	lea    edx,[ecx*8-0x3ffd8ed4]
c0001497:	c1 eb 05             	shr    ebx,0x5
c000149a:	d3 e0                	shl    eax,cl
c000149c:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014a3:	39 f8                	cmp    eax,edi
c00014a5:	77 04                	ja     c00014ab <dlmalloc+0x291>
c00014a7:	85 c0                	test   eax,eax
c00014a9:	75 26                	jne    c00014d1 <dlmalloc+0x2b7>
c00014ab:	43                   	inc    ebx
c00014ac:	83 fb 02             	cmp    ebx,0x2
c00014af:	0f 87 a6 00 00 00    	ja     c000155b <dlmalloc+0x341>
c00014b5:	8b 3c 9d 34 74 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd8bcc]
c00014bc:	85 ff                	test   edi,edi
c00014be:	74 eb                	je     c00014ab <dlmalloc+0x291>
c00014c0:	89 d8                	mov    eax,ebx
c00014c2:	c1 e0 06             	shl    eax,0x6
c00014c5:	8d 14 85 2c 71 02 c0 	lea    edx,[eax*4-0x3ffd8ed4]
c00014cc:	b8 01 00 00 00       	mov    eax,0x1
c00014d1:	85 f8                	test   eax,edi
c00014d3:	75 07                	jne    c00014dc <dlmalloc+0x2c2>
c00014d5:	83 c2 08             	add    edx,0x8
c00014d8:	01 c0                	add    eax,eax
c00014da:	eb f5                	jmp    c00014d1 <dlmalloc+0x2b7>
c00014dc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00014df:	39 ca                	cmp    edx,ecx
c00014e1:	75 14                	jne    c00014f7 <dlmalloc+0x2dd>
c00014e3:	89 c1                	mov    ecx,eax
c00014e5:	83 c2 08             	add    edx,0x8
c00014e8:	f7 d1                	not    ecx
c00014ea:	01 c0                	add    eax,eax
c00014ec:	21 cf                	and    edi,ecx
c00014ee:	89 3c 9d 34 74 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8bcc],edi
c00014f5:	eb ac                	jmp    c00014a3 <dlmalloc+0x289>
c00014f7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00014fa:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00014fd:	83 e0 fc             	and    eax,0xfffffffc
c0001500:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001503:	89 c3                	mov    ebx,eax
c0001505:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001508:	29 f3                	sub    ebx,esi
c000150a:	8d 14 01             	lea    edx,[ecx+eax*1]
c000150d:	83 fb 0f             	cmp    ebx,0xf
c0001510:	8d 41 08             	lea    eax,[ecx+0x8]
c0001513:	77 09                	ja     c000151e <dlmalloc+0x304>
c0001515:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001519:	e9 82 00 00 00       	jmp    c00015a0 <dlmalloc+0x386>
c000151e:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001521:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001527:	89 3d 3c 71 02 c0    	mov    DWORD PTR ds:0xc002713c,edi
c000152d:	89 3d 40 71 02 c0    	mov    DWORD PTR ds:0xc0027140,edi
c0001533:	c7 47 08 34 71 02 c0 	mov    DWORD PTR [edi+0x8],0xc0027134
c000153a:	c7 47 0c 34 71 02 c0 	mov    DWORD PTR [edi+0xc],0xc0027134
c0001541:	77 06                	ja     c0001549 <dlmalloc+0x32f>
c0001543:	89 3d 30 71 02 c0    	mov    DWORD PTR ds:0xc0027130,edi
c0001549:	83 ce 01             	or     esi,0x1
c000154c:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000154f:	89 d9                	mov    ecx,ebx
c0001551:	83 c9 01             	or     ecx,0x1
c0001554:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001557:	89 1a                	mov    DWORD PTR [edx],ebx
c0001559:	eb 45                	jmp    c00015a0 <dlmalloc+0x386>
c000155b:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001560:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001563:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001566:	83 e2 fc             	and    edx,0xfffffffc
c0001569:	39 d1                	cmp    ecx,edx
c000156b:	77 1e                	ja     c000158b <dlmalloc+0x371>
c000156d:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001570:	89 f3                	mov    ebx,esi
c0001572:	89 0d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,ecx
c0001578:	83 cb 01             	or     ebx,0x1
c000157b:	29 f2                	sub    edx,esi
c000157d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001580:	83 ca 01             	or     edx,0x1
c0001583:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001586:	e9 2d fd ff ff       	jmp    c00012b8 <dlmalloc+0x9e>
c000158b:	83 c4 1c             	add    esp,0x1c
c000158e:	89 f0                	mov    eax,esi
c0001590:	5b                   	pop    ebx
c0001591:	ba 00 71 02 c0       	mov    edx,0xc0027100
c0001596:	5e                   	pop    esi
c0001597:	5f                   	pop    edi
c0001598:	5d                   	pop    ebp
c0001599:	e9 c9 f8 ff ff       	jmp    c0000e67 <sYSMALLOc>
c000159e:	31 c0                	xor    eax,eax
c00015a0:	83 c4 1c             	add    esp,0x1c
c00015a3:	5b                   	pop    ebx
c00015a4:	5e                   	pop    esi
c00015a5:	5f                   	pop    edi
c00015a6:	5d                   	pop    ebp
c00015a7:	c3                   	ret    

c00015a8 <iALLOc>:
c00015a8:	55                   	push   ebp
c00015a9:	89 c5                	mov    ebp,eax
c00015ab:	57                   	push   edi
c00015ac:	56                   	push   esi
c00015ad:	53                   	push   ebx
c00015ae:	83 ec 2c             	sub    esp,0x2c
c00015b1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00015b5:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00015b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00015bd:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c00015c4:	75 12                	jne    c00015d8 <iALLOc+0x30>
c00015c6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00015ca:	b8 00 71 02 c0       	mov    eax,0xc0027100
c00015cf:	e8 98 f6 ff ff       	call   c0000c6c <malloc_consolidate>
c00015d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00015d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015dd:	74 12                	je     c00015f1 <iALLOc+0x49>
c00015df:	85 ed                	test   ebp,ebp
c00015e1:	0f 84 64 01 00 00    	je     c000174b <iALLOc+0x1a3>
c00015e7:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00015ef:	eb 33                	jmp    c0001624 <iALLOc+0x7c>
c00015f1:	85 ed                	test   ebp,ebp
c00015f3:	75 14                	jne    c0001609 <iALLOc+0x61>
c00015f5:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00015fd:	83 c4 2c             	add    esp,0x2c
c0001600:	5b                   	pop    ebx
c0001601:	5e                   	pop    esi
c0001602:	5f                   	pop    edi
c0001603:	5d                   	pop    ebp
c0001604:	e9 11 fc ff ff       	jmp    c000121a <dlmalloc>
c0001609:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001610:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001618:	83 f8 0f             	cmp    eax,0xf
c000161b:	76 07                	jbe    c0001624 <iALLOc+0x7c>
c000161d:	83 e0 f8             	and    eax,0xfffffff8
c0001620:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001624:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001629:	75 09                	jne    c0001634 <iALLOc+0x8c>
c000162b:	89 d0                	mov    eax,edx
c000162d:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001630:	31 f6                	xor    esi,esi
c0001632:	eb 3b                	jmp    c000166f <iALLOc+0xc7>
c0001634:	8b 02                	mov    eax,DWORD PTR [edx]
c0001636:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000163e:	83 c0 0b             	add    eax,0xb
c0001641:	83 f8 0f             	cmp    eax,0xf
c0001644:	76 07                	jbe    c000164d <iALLOc+0xa5>
c0001646:	83 e0 f8             	and    eax,0xfffffff8
c0001649:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000164d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001651:	0f af f5             	imul   esi,ebp
c0001654:	eb 25                	jmp    c000167b <iALLOc+0xd3>
c0001656:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001658:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000165b:	bb 10 00 00 00       	mov    ebx,0x10
c0001660:	83 f9 0f             	cmp    ecx,0xf
c0001663:	76 05                	jbe    c000166a <iALLOc+0xc2>
c0001665:	83 e1 f8             	and    ecx,0xfffffff8
c0001668:	89 cb                	mov    ebx,ecx
c000166a:	01 de                	add    esi,ebx
c000166c:	83 c0 04             	add    eax,0x4
c000166f:	39 c7                	cmp    edi,eax
c0001671:	75 e3                	jne    c0001656 <iALLOc+0xae>
c0001673:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000167b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000167f:	8b 1d 54 74 02 c0    	mov    ebx,DWORD PTR ds:0xc0027454
c0001685:	83 ec 0c             	sub    esp,0xc
c0001688:	c7 05 54 74 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027454,0x0
c0001692:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001696:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000169a:	50                   	push   eax
c000169b:	e8 7a fb ff ff       	call   c000121a <dlmalloc>
c00016a0:	83 c4 10             	add    esp,0x10
c00016a3:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c00016a9:	85 c0                	test   eax,eax
c00016ab:	0f 84 92 00 00 00    	je     c0001743 <iALLOc+0x19b>
c00016b1:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00016b4:	8d 78 f8             	lea    edi,[eax-0x8]
c00016b7:	83 e3 fc             	and    ebx,0xfffffffc
c00016ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00016be:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00016c3:	74 1e                	je     c00016e3 <iALLOc+0x13b>
c00016c5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00016c9:	89 d9                	mov    ecx,ebx
c00016cb:	52                   	push   edx
c00016cc:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00016d0:	83 e9 04             	sub    ecx,0x4
c00016d3:	51                   	push   ecx
c00016d4:	6a 00                	push   0x0
c00016d6:	50                   	push   eax
c00016d7:	e8 14 ee ff ff       	call   c00004f0 <memset>
c00016dc:	83 c4 10             	add    esp,0x10
c00016df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00016e3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00016e8:	75 14                	jne    c00016fe <iALLOc+0x156>
c00016ea:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ed:	29 f3                	sub    ebx,esi
c00016ef:	8d 48 08             	lea    ecx,[eax+0x8]
c00016f2:	83 cb 01             	or     ebx,0x1
c00016f5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016f9:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00016fc:	89 f3                	mov    ebx,esi
c00016fe:	31 c0                	xor    eax,eax
c0001700:	4d                   	dec    ebp
c0001701:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001704:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001708:	39 c5                	cmp    ebp,eax
c000170a:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000170d:	74 2c                	je     c000173b <iALLOc+0x193>
c000170f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001713:	85 c9                	test   ecx,ecx
c0001715:	75 15                	jne    c000172c <iALLOc+0x184>
c0001717:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000171a:	8d 71 0b             	lea    esi,[ecx+0xb]
c000171d:	b9 10 00 00 00       	mov    ecx,0x10
c0001722:	83 fe 0f             	cmp    esi,0xf
c0001725:	76 05                	jbe    c000172c <iALLOc+0x184>
c0001727:	83 e6 f8             	and    esi,0xfffffff8
c000172a:	89 f1                	mov    ecx,esi
c000172c:	89 ce                	mov    esi,ecx
c000172e:	29 cb                	sub    ebx,ecx
c0001730:	83 ce 01             	or     esi,0x1
c0001733:	40                   	inc    eax
c0001734:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001737:	01 cf                	add    edi,ecx
c0001739:	eb c6                	jmp    c0001701 <iALLOc+0x159>
c000173b:	83 cb 01             	or     ebx,0x1
c000173e:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001741:	eb 08                	jmp    c000174b <iALLOc+0x1a3>
c0001743:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000174b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000174f:	83 c4 2c             	add    esp,0x2c
c0001752:	5b                   	pop    ebx
c0001753:	5e                   	pop    esi
c0001754:	5f                   	pop    edi
c0001755:	5d                   	pop    ebp
c0001756:	c3                   	ret    

c0001757 <dlrealloc>:
c0001757:	55                   	push   ebp
c0001758:	57                   	push   edi
c0001759:	56                   	push   esi
c000175a:	53                   	push   ebx
c000175b:	83 ec 1c             	sub    esp,0x1c
c000175e:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0001762:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001766:	85 db                	test   ebx,ebx
c0001768:	75 10                	jne    c000177a <dlrealloc+0x23>
c000176a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000176e:	83 c4 1c             	add    esp,0x1c
c0001771:	5b                   	pop    ebx
c0001772:	5e                   	pop    esi
c0001773:	5f                   	pop    edi
c0001774:	5d                   	pop    ebp
c0001775:	e9 a0 fa ff ff       	jmp    c000121a <dlmalloc>
c000177a:	83 f8 df             	cmp    eax,0xffffffdf
c000177d:	0f 87 a5 01 00 00    	ja     c0001928 <dlrealloc+0x1d1>
c0001783:	83 c0 0b             	add    eax,0xb
c0001786:	bd 10 00 00 00       	mov    ebp,0x10
c000178b:	83 f8 0f             	cmp    eax,0xf
c000178e:	76 05                	jbe    c0001795 <dlrealloc+0x3e>
c0001790:	83 e0 f8             	and    eax,0xfffffff8
c0001793:	89 c5                	mov    ebp,eax
c0001795:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001798:	89 c6                	mov    esi,eax
c000179a:	83 e6 fc             	and    esi,0xfffffffc
c000179d:	a8 02                	test   al,0x2
c000179f:	0f 85 4e 01 00 00    	jne    c00018f3 <dlrealloc+0x19c>
c00017a5:	8d 7b f8             	lea    edi,[ebx-0x8]
c00017a8:	39 f5                	cmp    ebp,esi
c00017aa:	0f 86 04 01 00 00    	jbe    c00018b4 <dlrealloc+0x15d>
c00017b0:	8d 14 37             	lea    edx,[edi+esi*1]
c00017b3:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00017b6:	39 15 2c 71 02 c0    	cmp    DWORD PTR ds:0xc002712c,edx
c00017bc:	75 33                	jne    c00017f1 <dlrealloc+0x9a>
c00017be:	83 e1 fc             	and    ecx,0xfffffffc
c00017c1:	01 f1                	add    ecx,esi
c00017c3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017c7:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00017ca:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00017ce:	77 49                	ja     c0001819 <dlrealloc+0xc2>
c00017d0:	01 ef                	add    edi,ebp
c00017d2:	83 e0 01             	and    eax,0x1
c00017d5:	09 e8                	or     eax,ebp
c00017d7:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00017da:	89 3d 2c 71 02 c0    	mov    DWORD PTR ds:0xc002712c,edi
c00017e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00017e4:	29 e8                	sub    eax,ebp
c00017e6:	83 c8 01             	or     eax,0x1
c00017e9:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00017ec:	e9 39 01 00 00       	jmp    c000192a <dlrealloc+0x1d3>
c00017f1:	89 c8                	mov    eax,ecx
c00017f3:	83 e0 fe             	and    eax,0xfffffffe
c00017f6:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00017fb:	75 1c                	jne    c0001819 <dlrealloc+0xc2>
c00017fd:	83 e1 fc             	and    ecx,0xfffffffc
c0001800:	01 f1                	add    ecx,esi
c0001802:	39 cd                	cmp    ebp,ecx
c0001804:	77 13                	ja     c0001819 <dlrealloc+0xc2>
c0001806:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001809:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000180c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000180f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c0001812:	89 ce                	mov    esi,ecx
c0001814:	e9 9b 00 00 00       	jmp    c00018b4 <dlrealloc+0x15d>
c0001819:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000181d:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001820:	83 ec 0c             	sub    esp,0xc
c0001823:	50                   	push   eax
c0001824:	e8 f1 f9 ff ff       	call   c000121a <dlmalloc>
c0001829:	83 c4 10             	add    esp,0x10
c000182c:	85 c0                	test   eax,eax
c000182e:	0f 84 f4 00 00 00    	je     c0001928 <dlrealloc+0x1d1>
c0001834:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001837:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000183b:	39 ca                	cmp    edx,ecx
c000183d:	75 0a                	jne    c0001849 <dlrealloc+0xf2>
c000183f:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001842:	83 e0 fc             	and    eax,0xfffffffc
c0001845:	01 c6                	add    esi,eax
c0001847:	eb 6b                	jmp    c00018b4 <dlrealloc+0x15d>
c0001849:	8d 4e fc             	lea    ecx,[esi-0x4]
c000184c:	83 f9 27             	cmp    ecx,0x27
c000184f:	76 08                	jbe    c0001859 <dlrealloc+0x102>
c0001851:	89 de                	mov    esi,ebx
c0001853:	89 c7                	mov    edi,eax
c0001855:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001857:	eb 43                	jmp    c000189c <dlrealloc+0x145>
c0001859:	8b 13                	mov    edx,DWORD PTR [ebx]
c000185b:	83 f9 13             	cmp    ecx,0x13
c000185e:	89 10                	mov    DWORD PTR [eax],edx
c0001860:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c0001863:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0001866:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001869:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000186c:	76 2e                	jbe    c000189c <dlrealloc+0x145>
c000186e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001871:	83 f9 1b             	cmp    ecx,0x1b
c0001874:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001877:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000187a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000187d:	76 1d                	jbe    c000189c <dlrealloc+0x145>
c000187f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001882:	83 f9 23             	cmp    ecx,0x23
c0001885:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001888:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000188b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000188e:	76 0c                	jbe    c000189c <dlrealloc+0x145>
c0001890:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001893:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001896:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001899:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000189c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00018a0:	83 ec 0c             	sub    esp,0xc
c00018a3:	53                   	push   ebx
c00018a4:	e8 aa f4 ff ff       	call   c0000d53 <dlfree>
c00018a9:	83 c4 10             	add    esp,0x10
c00018ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00018b0:	89 c3                	mov    ebx,eax
c00018b2:	eb 76                	jmp    c000192a <dlrealloc+0x1d3>
c00018b4:	89 f2                	mov    edx,esi
c00018b6:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00018b9:	29 ea                	sub    edx,ebp
c00018bb:	83 e1 01             	and    ecx,0x1
c00018be:	8d 04 37             	lea    eax,[edi+esi*1]
c00018c1:	83 fa 0f             	cmp    edx,0xf
c00018c4:	77 0b                	ja     c00018d1 <dlrealloc+0x17a>
c00018c6:	09 f1                	or     ecx,esi
c00018c8:	89 4b fc             	mov    DWORD PTR [ebx-0x4],ecx
c00018cb:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018cf:	eb 59                	jmp    c000192a <dlrealloc+0x1d3>
c00018d1:	01 ef                	add    edi,ebp
c00018d3:	83 ec 0c             	sub    esp,0xc
c00018d6:	09 cd                	or     ebp,ecx
c00018d8:	83 ca 01             	or     edx,0x1
c00018db:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00018de:	83 c7 08             	add    edi,0x8
c00018e1:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00018e4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00018e8:	57                   	push   edi
c00018e9:	e8 65 f4 ff ff       	call   c0000d53 <dlfree>
c00018ee:	83 c4 10             	add    esp,0x10
c00018f1:	eb 37                	jmp    c000192a <dlrealloc+0x1d3>
c00018f3:	8d 45 04             	lea    eax,[ebp+0x4]
c00018f6:	39 f0                	cmp    eax,esi
c00018f8:	76 30                	jbe    c000192a <dlrealloc+0x1d3>
c00018fa:	83 ec 0c             	sub    esp,0xc
c00018fd:	83 ed 07             	sub    ebp,0x7
c0001900:	55                   	push   ebp
c0001901:	e8 14 f9 ff ff       	call   c000121a <dlmalloc>
c0001906:	83 c4 10             	add    esp,0x10
c0001909:	89 c5                	mov    ebp,eax
c000190b:	85 c0                	test   eax,eax
c000190d:	74 19                	je     c0001928 <dlrealloc+0x1d1>
c000190f:	8d 4e f8             	lea    ecx,[esi-0x8]
c0001912:	89 c7                	mov    edi,eax
c0001914:	89 de                	mov    esi,ebx
c0001916:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001918:	83 ec 0c             	sub    esp,0xc
c000191b:	53                   	push   ebx
c000191c:	89 eb                	mov    ebx,ebp
c000191e:	e8 30 f4 ff ff       	call   c0000d53 <dlfree>
c0001923:	83 c4 10             	add    esp,0x10
c0001926:	eb 02                	jmp    c000192a <dlrealloc+0x1d3>
c0001928:	31 db                	xor    ebx,ebx
c000192a:	83 c4 1c             	add    esp,0x1c
c000192d:	89 d8                	mov    eax,ebx
c000192f:	5b                   	pop    ebx
c0001930:	5e                   	pop    esi
c0001931:	5f                   	pop    edi
c0001932:	5d                   	pop    ebp
c0001933:	c3                   	ret    

c0001934 <dlmemalign>:
c0001934:	55                   	push   ebp
c0001935:	57                   	push   edi
c0001936:	56                   	push   esi
c0001937:	53                   	push   ebx
c0001938:	83 ec 0c             	sub    esp,0xc
c000193b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000193f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001943:	83 fa 08             	cmp    edx,0x8
c0001946:	77 10                	ja     c0001958 <dlmemalign+0x24>
c0001948:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000194c:	83 c4 0c             	add    esp,0xc
c000194f:	5b                   	pop    ebx
c0001950:	5e                   	pop    esi
c0001951:	5f                   	pop    edi
c0001952:	5d                   	pop    ebp
c0001953:	e9 c2 f8 ff ff       	jmp    c000121a <dlmalloc>
c0001958:	bf 10 00 00 00       	mov    edi,0x10
c000195d:	83 fa 0f             	cmp    edx,0xf
c0001960:	76 13                	jbe    c0001975 <dlmemalign+0x41>
c0001962:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001965:	85 d1                	test   ecx,edx
c0001967:	75 04                	jne    c000196d <dlmemalign+0x39>
c0001969:	89 d7                	mov    edi,edx
c000196b:	eb 08                	jmp    c0001975 <dlmemalign+0x41>
c000196d:	39 d7                	cmp    edi,edx
c000196f:	73 04                	jae    c0001975 <dlmemalign+0x41>
c0001971:	01 ff                	add    edi,edi
c0001973:	eb f8                	jmp    c000196d <dlmemalign+0x39>
c0001975:	83 f8 df             	cmp    eax,0xffffffdf
c0001978:	76 07                	jbe    c0001981 <dlmemalign+0x4d>
c000197a:	31 c0                	xor    eax,eax
c000197c:	e9 ce 00 00 00       	jmp    c0001a4f <dlmemalign+0x11b>
c0001981:	83 c0 0b             	add    eax,0xb
c0001984:	bd 10 00 00 00       	mov    ebp,0x10
c0001989:	83 f8 0f             	cmp    eax,0xf
c000198c:	76 05                	jbe    c0001993 <dlmemalign+0x5f>
c000198e:	83 e0 f8             	and    eax,0xfffffff8
c0001991:	89 c5                	mov    ebp,eax
c0001993:	83 ec 0c             	sub    esp,0xc
c0001996:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000199a:	50                   	push   eax
c000199b:	e8 7a f8 ff ff       	call   c000121a <dlmalloc>
c00019a0:	83 c4 10             	add    esp,0x10
c00019a3:	89 c1                	mov    ecx,eax
c00019a5:	85 c0                	test   eax,eax
c00019a7:	74 d1                	je     c000197a <dlmemalign+0x46>
c00019a9:	31 d2                	xor    edx,edx
c00019ab:	8d 70 f8             	lea    esi,[eax-0x8]
c00019ae:	f7 f7                	div    edi
c00019b0:	85 d2                	test   edx,edx
c00019b2:	74 62                	je     c0001a16 <dlmemalign+0xe2>
c00019b4:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c00019b8:	89 f8                	mov    eax,edi
c00019ba:	f7 d8                	neg    eax
c00019bc:	21 c3                	and    ebx,eax
c00019be:	83 eb 08             	sub    ebx,0x8
c00019c1:	89 d8                	mov    eax,ebx
c00019c3:	29 f0                	sub    eax,esi
c00019c5:	83 f8 0f             	cmp    eax,0xf
c00019c8:	77 02                	ja     c00019cc <dlmemalign+0x98>
c00019ca:	01 fb                	add    ebx,edi
c00019cc:	89 d8                	mov    eax,ebx
c00019ce:	29 f0                	sub    eax,esi
c00019d0:	89 c6                	mov    esi,eax
c00019d2:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00019d5:	89 c2                	mov    edx,eax
c00019d7:	83 e2 fc             	and    edx,0xfffffffc
c00019da:	29 f2                	sub    edx,esi
c00019dc:	a8 02                	test   al,0x2
c00019de:	74 10                	je     c00019f0 <dlmemalign+0xbc>
c00019e0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00019e3:	83 ca 02             	or     edx,0x2
c00019e6:	8d 43 08             	lea    eax,[ebx+0x8]
c00019e9:	89 33                	mov    DWORD PTR [ebx],esi
c00019eb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00019ee:	eb 5f                	jmp    c0001a4f <dlmemalign+0x11b>
c00019f0:	83 ec 0c             	sub    esp,0xc
c00019f3:	89 d0                	mov    eax,edx
c00019f5:	83 c8 01             	or     eax,0x1
c00019f8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00019fb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001a00:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001a03:	83 e0 01             	and    eax,0x1
c0001a06:	09 f0                	or     eax,esi
c0001a08:	89 de                	mov    esi,ebx
c0001a0a:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001a0d:	51                   	push   ecx
c0001a0e:	e8 40 f3 ff ff       	call   c0000d53 <dlfree>
c0001a13:	83 c4 10             	add    esp,0x10
c0001a16:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a19:	a8 02                	test   al,0x2
c0001a1b:	75 2f                	jne    c0001a4c <dlmemalign+0x118>
c0001a1d:	83 e0 fc             	and    eax,0xfffffffc
c0001a20:	8d 55 10             	lea    edx,[ebp+0x10]
c0001a23:	39 c2                	cmp    edx,eax
c0001a25:	73 25                	jae    c0001a4c <dlmemalign+0x118>
c0001a27:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001a2a:	83 ec 0c             	sub    esp,0xc
c0001a2d:	29 e8                	sub    eax,ebp
c0001a2f:	83 c2 08             	add    edx,0x8
c0001a32:	83 c8 01             	or     eax,0x1
c0001a35:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c0001a38:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001a3b:	83 e0 01             	and    eax,0x1
c0001a3e:	09 c5                	or     ebp,eax
c0001a40:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001a43:	52                   	push   edx
c0001a44:	e8 0a f3 ff ff       	call   c0000d53 <dlfree>
c0001a49:	83 c4 10             	add    esp,0x10
c0001a4c:	8d 46 08             	lea    eax,[esi+0x8]
c0001a4f:	83 c4 0c             	add    esp,0xc
c0001a52:	5b                   	pop    ebx
c0001a53:	5e                   	pop    esi
c0001a54:	5f                   	pop    edi
c0001a55:	5d                   	pop    ebp
c0001a56:	c3                   	ret    

c0001a57 <dlcalloc>:
c0001a57:	53                   	push   ebx
c0001a58:	83 ec 14             	sub    esp,0x14
c0001a5b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001a5f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001a64:	50                   	push   eax
c0001a65:	e8 b0 f7 ff ff       	call   c000121a <dlmalloc>
c0001a6a:	83 c4 10             	add    esp,0x10
c0001a6d:	89 c3                	mov    ebx,eax
c0001a6f:	85 c0                	test   eax,eax
c0001a71:	74 6e                	je     c0001ae1 <dlcalloc+0x8a>
c0001a73:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c0001a76:	a8 02                	test   al,0x2
c0001a78:	75 67                	jne    c0001ae1 <dlcalloc+0x8a>
c0001a7a:	83 e0 fc             	and    eax,0xfffffffc
c0001a7d:	83 e8 04             	sub    eax,0x4
c0001a80:	83 f8 27             	cmp    eax,0x27
c0001a83:	76 0f                	jbe    c0001a94 <dlcalloc+0x3d>
c0001a85:	52                   	push   edx
c0001a86:	50                   	push   eax
c0001a87:	6a 00                	push   0x0
c0001a89:	53                   	push   ebx
c0001a8a:	e8 61 ea ff ff       	call   c00004f0 <memset>
c0001a8f:	83 c4 10             	add    esp,0x10
c0001a92:	eb 4d                	jmp    c0001ae1 <dlcalloc+0x8a>
c0001a94:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001a9a:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001aa1:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001aa8:	83 f8 13             	cmp    eax,0x13
c0001aab:	76 34                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001aad:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001ab4:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001abb:	83 f8 1b             	cmp    eax,0x1b
c0001abe:	76 21                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ac0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001ac7:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001ace:	83 f8 23             	cmp    eax,0x23
c0001ad1:	76 0e                	jbe    c0001ae1 <dlcalloc+0x8a>
c0001ad3:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001ada:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001ae1:	89 d8                	mov    eax,ebx
c0001ae3:	83 c4 08             	add    esp,0x8
c0001ae6:	5b                   	pop    ebx
c0001ae7:	c3                   	ret    

c0001ae8 <dlcfree>:
c0001ae8:	e9 66 f2 ff ff       	jmp    c0000d53 <dlfree>

c0001aed <dlindependent_calloc>:
c0001aed:	83 ec 28             	sub    esp,0x28
c0001af0:	b9 03 00 00 00       	mov    ecx,0x3
c0001af5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001af9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0001afd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001b01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001b05:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001b09:	e8 9a fa ff ff       	call   c00015a8 <iALLOc>
c0001b0e:	83 c4 2c             	add    esp,0x2c
c0001b11:	c3                   	ret    

c0001b12 <dlindependent_comalloc>:
c0001b12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b1a:	31 c9                	xor    ecx,ecx
c0001b1c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001b20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001b24:	e9 7f fa ff ff       	jmp    c00015a8 <iALLOc>

c0001b29 <dlvalloc>:
c0001b29:	83 ec 0c             	sub    esp,0xc
c0001b2c:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b33:	75 0a                	jne    c0001b3f <dlvalloc+0x16>
c0001b35:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b3a:	e8 2d f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b3f:	50                   	push   eax
c0001b40:	50                   	push   eax
c0001b41:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001b45:	ff 35 5c 74 02 c0    	push   DWORD PTR ds:0xc002745c
c0001b4b:	e8 e4 fd ff ff       	call   c0001934 <dlmemalign>
c0001b50:	83 c4 1c             	add    esp,0x1c
c0001b53:	c3                   	ret    

c0001b54 <dlpvalloc>:
c0001b54:	83 ec 0c             	sub    esp,0xc
c0001b57:	83 3d 00 71 02 c0 00 	cmp    DWORD PTR ds:0xc0027100,0x0
c0001b5e:	75 0a                	jne    c0001b6a <dlpvalloc+0x16>
c0001b60:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b65:	e8 02 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b6a:	a1 5c 74 02 c0       	mov    eax,ds:0xc002745c
c0001b6f:	89 c1                	mov    ecx,eax
c0001b71:	52                   	push   edx
c0001b72:	f7 d9                	neg    ecx
c0001b74:	52                   	push   edx
c0001b75:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001b79:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001b7d:	21 ca                	and    edx,ecx
c0001b7f:	52                   	push   edx
c0001b80:	50                   	push   eax
c0001b81:	e8 ae fd ff ff       	call   c0001934 <dlmemalign>
c0001b86:	83 c4 1c             	add    esp,0x1c
c0001b89:	c3                   	ret    

c0001b8a <dlmalloc_trim>:
c0001b8a:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001b8f:	e8 d8 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b94:	31 c0                	xor    eax,eax
c0001b96:	c3                   	ret    

c0001b97 <dlmalloc_usable_size>:
c0001b97:	53                   	push   ebx
c0001b98:	31 c0                	xor    eax,eax
c0001b9a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001b9e:	85 c9                	test   ecx,ecx
c0001ba0:	74 24                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001ba2:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001ba5:	f6 c2 02             	test   dl,0x2
c0001ba8:	74 08                	je     c0001bb2 <dlmalloc_usable_size+0x1b>
c0001baa:	83 e2 fc             	and    edx,0xfffffffc
c0001bad:	8d 42 f8             	lea    eax,[edx-0x8]
c0001bb0:	eb 14                	jmp    c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bb2:	89 d3                	mov    ebx,edx
c0001bb4:	31 c0                	xor    eax,eax
c0001bb6:	83 e3 fe             	and    ebx,0xfffffffe
c0001bb9:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001bbe:	74 06                	je     c0001bc6 <dlmalloc_usable_size+0x2f>
c0001bc0:	83 e2 fc             	and    edx,0xfffffffc
c0001bc3:	8d 42 fc             	lea    eax,[edx-0x4]
c0001bc6:	5b                   	pop    ebx
c0001bc7:	c3                   	ret    

c0001bc8 <dlmallinfo>:
c0001bc8:	55                   	push   ebp
c0001bc9:	57                   	push   edi
c0001bca:	56                   	push   esi
c0001bcb:	53                   	push   ebx
c0001bcc:	83 ec 08             	sub    esp,0x8
c0001bcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001bd3:	83 3d 2c 71 02 c0 00 	cmp    DWORD PTR ds:0xc002712c,0x0
c0001bda:	75 0a                	jne    c0001be6 <dlmallinfo+0x1e>
c0001bdc:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001be1:	e8 86 f0 ff ff       	call   c0000c6c <malloc_consolidate>
c0001be6:	a1 2c 71 02 c0       	mov    eax,ds:0xc002712c
c0001beb:	31 ed                	xor    ebp,ebp
c0001bed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001bf0:	31 c9                	xor    ecx,ecx
c0001bf2:	83 e0 fc             	and    eax,0xfffffffc
c0001bf5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001bf9:	31 c0                	xor    eax,eax
c0001bfb:	8b 14 85 04 71 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8efc]
c0001c02:	85 d2                	test   edx,edx
c0001c04:	74 0e                	je     c0001c14 <dlmallinfo+0x4c>
c0001c06:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001c09:	45                   	inc    ebp
c0001c0a:	83 e6 fc             	and    esi,0xfffffffc
c0001c0d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001c10:	01 f1                	add    ecx,esi
c0001c12:	eb ee                	jmp    c0001c02 <dlmallinfo+0x3a>
c0001c14:	40                   	inc    eax
c0001c15:	83 f8 0a             	cmp    eax,0xa
c0001c18:	75 e1                	jne    c0001bfb <dlmallinfo+0x33>
c0001c1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c1e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001c25:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001c28:	b8 34 71 02 c0       	mov    eax,0xc0027134
c0001c2d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001c30:	39 f0                	cmp    eax,esi
c0001c32:	74 10                	je     c0001c44 <dlmallinfo+0x7c>
c0001c34:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001c37:	ff 04 24             	inc    DWORD PTR [esp]
c0001c3a:	83 e7 fc             	and    edi,0xfffffffc
c0001c3d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001c40:	01 fa                	add    edx,edi
c0001c42:	eb ec                	jmp    c0001c30 <dlmallinfo+0x68>
c0001c44:	83 c0 08             	add    eax,0x8
c0001c47:	3d 2c 74 02 c0       	cmp    eax,0xc002742c
c0001c4c:	75 df                	jne    c0001c2d <dlmallinfo+0x65>
c0001c4e:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001c51:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001c54:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001c57:	a1 68 74 02 c0       	mov    eax,ds:0xc0027468
c0001c5c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001c5f:	89 03                	mov    DWORD PTR [ebx],eax
c0001c61:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001c64:	8b 35 50 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027450
c0001c6a:	29 d0                	sub    eax,edx
c0001c6c:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001c6f:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001c72:	8b 35 64 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027464
c0001c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001c7c:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001c7f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001c82:	8b 35 74 74 02 c0    	mov    esi,DWORD PTR ds:0xc0027474
c0001c88:	89 d8                	mov    eax,ebx
c0001c8a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001c8d:	83 c4 08             	add    esp,0x8
c0001c90:	5b                   	pop    ebx
c0001c91:	5e                   	pop    esi
c0001c92:	5f                   	pop    edi
c0001c93:	5d                   	pop    ebp
c0001c94:	c2 04 00             	ret    0x4

c0001c97 <dlmalloc_stats>:
c0001c97:	83 ec 30             	sub    esp,0x30
c0001c9a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001c9e:	50                   	push   eax
c0001c9f:	e8 24 ff ff ff       	call   c0001bc8 <dlmallinfo>
c0001ca4:	83 c4 30             	add    esp,0x30
c0001ca7:	c3                   	ret    

c0001ca8 <dlmallopt>:
c0001ca8:	56                   	push   esi
c0001ca9:	b8 00 71 02 c0       	mov    eax,0xc0027100
c0001cae:	53                   	push   ebx
c0001caf:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001cb3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001cb7:	e8 b0 ef ff ff       	call   c0000c6c <malloc_consolidate>
c0001cbc:	8d 46 04             	lea    eax,[esi+0x4]
c0001cbf:	83 f8 05             	cmp    eax,0x5
c0001cc2:	77 5d                	ja     c0001d21 <dlmallopt+0x79>
c0001cc4:	ff 24 85 a4 19 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde65c]
c0001ccb:	83 fb 50             	cmp    ebx,0x50
c0001cce:	77 51                	ja     c0001d21 <dlmallopt+0x79>
c0001cd0:	ba 08 00 00 00       	mov    edx,0x8
c0001cd5:	85 db                	test   ebx,ebx
c0001cd7:	74 12                	je     c0001ceb <dlmallopt+0x43>
c0001cd9:	83 c3 0b             	add    ebx,0xb
c0001cdc:	ba 10 00 00 00       	mov    edx,0x10
c0001ce1:	83 fb 0f             	cmp    ebx,0xf
c0001ce4:	76 05                	jbe    c0001ceb <dlmallopt+0x43>
c0001ce6:	89 da                	mov    edx,ebx
c0001ce8:	83 e2 f8             	and    edx,0xfffffff8
c0001ceb:	a1 00 71 02 c0       	mov    eax,ds:0xc0027100
c0001cf0:	83 e0 03             	and    eax,0x3
c0001cf3:	09 d0                	or     eax,edx
c0001cf5:	a3 00 71 02 c0       	mov    ds:0xc0027100,eax
c0001cfa:	eb 27                	jmp    c0001d23 <dlmallopt+0x7b>
c0001cfc:	89 1d 44 74 02 c0    	mov    DWORD PTR ds:0xc0027444,ebx
c0001d02:	eb 16                	jmp    c0001d1a <dlmallopt+0x72>
c0001d04:	89 1d 48 74 02 c0    	mov    DWORD PTR ds:0xc0027448,ebx
c0001d0a:	eb 0e                	jmp    c0001d1a <dlmallopt+0x72>
c0001d0c:	89 1d 4c 74 02 c0    	mov    DWORD PTR ds:0xc002744c,ebx
c0001d12:	eb 06                	jmp    c0001d1a <dlmallopt+0x72>
c0001d14:	89 1d 54 74 02 c0    	mov    DWORD PTR ds:0xc0027454,ebx
c0001d1a:	be 01 00 00 00       	mov    esi,0x1
c0001d1f:	eb 02                	jmp    c0001d23 <dlmallopt+0x7b>
c0001d21:	31 f6                	xor    esi,esi
c0001d23:	89 f0                	mov    eax,esi
c0001d25:	5b                   	pop    ebx
c0001d26:	5e                   	pop    esi
c0001d27:	c3                   	ret    

c0001d28 <isblank>:
c0001d28:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d2d:	74 09                	je     c0001d38 <isblank+0x10>
c0001d2f:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001d34:	75 0a                	jne    c0001d40 <isblank+0x18>
c0001d36:	66 90                	xchg   ax,ax
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <iscntrl>:
c0001d48:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001d4d:	7e 09                	jle    c0001d58 <iscntrl+0x10>
c0001d4f:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001d54:	75 0a                	jne    c0001d60 <iscntrl+0x18>
c0001d56:	66 90                	xchg   ax,ax
c0001d58:	b8 01 00 00 00       	mov    eax,0x1
c0001d5d:	c3                   	ret    
c0001d5e:	66 90                	xchg   ax,ax
c0001d60:	b8 00 00 00 00       	mov    eax,0x0
c0001d65:	c3                   	ret    
c0001d66:	66 90                	xchg   ax,ax

c0001d68 <isdigit>:
c0001d68:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001d6d:	7e 0d                	jle    c0001d7c <isdigit+0x14>
c0001d6f:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001d74:	7f 06                	jg     c0001d7c <isdigit+0x14>
c0001d76:	b8 01 00 00 00       	mov    eax,0x1
c0001d7b:	c3                   	ret    
c0001d7c:	b8 00 00 00 00       	mov    eax,0x0
c0001d81:	c3                   	ret    
c0001d82:	66 90                	xchg   ax,ax

c0001d84 <islower>:
c0001d84:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d89:	7e 0d                	jle    c0001d98 <islower+0x14>
c0001d8b:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001d90:	7f 06                	jg     c0001d98 <islower+0x14>
c0001d92:	b8 01 00 00 00       	mov    eax,0x1
c0001d97:	c3                   	ret    
c0001d98:	b8 00 00 00 00       	mov    eax,0x0
c0001d9d:	c3                   	ret    
c0001d9e:	66 90                	xchg   ax,ax

c0001da0 <isspace>:
c0001da0:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001da5:	7c 19                	jl     c0001dc0 <isspace+0x20>
c0001da7:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001dac:	7e 0a                	jle    c0001db8 <isspace+0x18>
c0001dae:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001db3:	75 0b                	jne    c0001dc0 <isspace+0x20>
c0001db5:	8d 76 00             	lea    esi,[esi+0x0]
c0001db8:	b8 01 00 00 00       	mov    eax,0x1
c0001dbd:	c3                   	ret    
c0001dbe:	66 90                	xchg   ax,ax
c0001dc0:	b8 00 00 00 00       	mov    eax,0x0
c0001dc5:	c3                   	ret    
c0001dc6:	66 90                	xchg   ax,ax

c0001dc8 <isupper>:
c0001dc8:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001dcd:	7e 0d                	jle    c0001ddc <isupper+0x14>
c0001dcf:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001dd4:	7f 06                	jg     c0001ddc <isupper+0x14>
c0001dd6:	b8 01 00 00 00       	mov    eax,0x1
c0001ddb:	c3                   	ret    
c0001ddc:	b8 00 00 00 00       	mov    eax,0x0
c0001de1:	c3                   	ret    
c0001de2:	66 90                	xchg   ax,ax

c0001de4 <isalpha>:
c0001de4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001de8:	e8 db ff ff ff       	call   c0001dc8 <isupper>
c0001ded:	83 c4 04             	add    esp,0x4
c0001df0:	85 c0                	test   eax,eax
c0001df2:	75 10                	jne    c0001e04 <isalpha+0x20>
c0001df4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001df8:	e8 87 ff ff ff       	call   c0001d84 <islower>
c0001dfd:	83 c4 04             	add    esp,0x4
c0001e00:	85 c0                	test   eax,eax
c0001e02:	74 08                	je     c0001e0c <isalpha+0x28>
c0001e04:	b8 01 00 00 00       	mov    eax,0x1
c0001e09:	c3                   	ret    
c0001e0a:	66 90                	xchg   ax,ax
c0001e0c:	b8 00 00 00 00       	mov    eax,0x0
c0001e11:	c3                   	ret    
c0001e12:	66 90                	xchg   ax,ax

c0001e14 <isalnum>:
c0001e14:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e18:	e8 c7 ff ff ff       	call   c0001de4 <isalpha>
c0001e1d:	83 c4 04             	add    esp,0x4
c0001e20:	85 c0                	test   eax,eax
c0001e22:	75 10                	jne    c0001e34 <isalnum+0x20>
c0001e24:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e28:	e8 3b ff ff ff       	call   c0001d68 <isdigit>
c0001e2d:	83 c4 04             	add    esp,0x4
c0001e30:	85 c0                	test   eax,eax
c0001e32:	74 08                	je     c0001e3c <isalnum+0x28>
c0001e34:	b8 01 00 00 00       	mov    eax,0x1
c0001e39:	c3                   	ret    
c0001e3a:	66 90                	xchg   ax,ax
c0001e3c:	b8 00 00 00 00       	mov    eax,0x0
c0001e41:	c3                   	ret    
c0001e42:	66 90                	xchg   ax,ax

c0001e44 <ispunct>:
c0001e44:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e48:	e8 c7 ff ff ff       	call   c0001e14 <isalnum>
c0001e4d:	83 c4 04             	add    esp,0x4
c0001e50:	85 c0                	test   eax,eax
c0001e52:	75 28                	jne    c0001e7c <ispunct+0x38>
c0001e54:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e58:	e8 43 ff ff ff       	call   c0001da0 <isspace>
c0001e5d:	83 c4 04             	add    esp,0x4
c0001e60:	85 c0                	test   eax,eax
c0001e62:	75 18                	jne    c0001e7c <ispunct+0x38>
c0001e64:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e68:	e8 db fe ff ff       	call   c0001d48 <iscntrl>
c0001e6d:	83 c4 04             	add    esp,0x4
c0001e70:	85 c0                	test   eax,eax
c0001e72:	75 08                	jne    c0001e7c <ispunct+0x38>
c0001e74:	b8 01 00 00 00       	mov    eax,0x1
c0001e79:	c3                   	ret    
c0001e7a:	66 90                	xchg   ax,ax
c0001e7c:	b8 00 00 00 00       	mov    eax,0x0
c0001e81:	c3                   	ret    
c0001e82:	66 90                	xchg   ax,ax

c0001e84 <isgraph>:
c0001e84:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e88:	e8 87 ff ff ff       	call   c0001e14 <isalnum>
c0001e8d:	83 c4 04             	add    esp,0x4
c0001e90:	85 c0                	test   eax,eax
c0001e92:	75 10                	jne    c0001ea4 <isgraph+0x20>
c0001e94:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001e98:	e8 a7 ff ff ff       	call   c0001e44 <ispunct>
c0001e9d:	83 c4 04             	add    esp,0x4
c0001ea0:	85 c0                	test   eax,eax
c0001ea2:	74 08                	je     c0001eac <isgraph+0x28>
c0001ea4:	b8 01 00 00 00       	mov    eax,0x1
c0001ea9:	c3                   	ret    
c0001eaa:	66 90                	xchg   ax,ax
c0001eac:	b8 00 00 00 00       	mov    eax,0x0
c0001eb1:	c3                   	ret    
c0001eb2:	66 90                	xchg   ax,ax

c0001eb4 <isprint>:
c0001eb4:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001eb8:	e8 c7 ff ff ff       	call   c0001e84 <isgraph>
c0001ebd:	83 c4 04             	add    esp,0x4
c0001ec0:	85 c0                	test   eax,eax
c0001ec2:	75 08                	jne    c0001ecc <isprint+0x18>
c0001ec4:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ec9:	75 09                	jne    c0001ed4 <isprint+0x20>
c0001ecb:	90                   	nop
c0001ecc:	b8 01 00 00 00       	mov    eax,0x1
c0001ed1:	c3                   	ret    
c0001ed2:	66 90                	xchg   ax,ax
c0001ed4:	b8 00 00 00 00       	mov    eax,0x0
c0001ed9:	c3                   	ret    
c0001eda:	66 90                	xchg   ax,ax

c0001edc <isxdigit>:
c0001edc:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001ee0:	e8 83 fe ff ff       	call   c0001d68 <isdigit>
c0001ee5:	83 c4 04             	add    esp,0x4
c0001ee8:	85 c0                	test   eax,eax
c0001eea:	75 20                	jne    c0001f0c <isxdigit+0x30>
c0001eec:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ef1:	7e 09                	jle    c0001efc <isxdigit+0x20>
c0001ef3:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ef8:	7e 12                	jle    c0001f0c <isxdigit+0x30>
c0001efa:	66 90                	xchg   ax,ax
c0001efc:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001f01:	7e 11                	jle    c0001f14 <isxdigit+0x38>
c0001f03:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001f08:	7f 0a                	jg     c0001f14 <isxdigit+0x38>
c0001f0a:	66 90                	xchg   ax,ax
c0001f0c:	b8 01 00 00 00       	mov    eax,0x1
c0001f11:	c3                   	ret    
c0001f12:	66 90                	xchg   ax,ax
c0001f14:	b8 00 00 00 00       	mov    eax,0x0
c0001f19:	c3                   	ret    
c0001f1a:	66 90                	xchg   ax,ax

c0001f1c <LWIP_PLATFORM_HTONS>:
c0001f1c:	83 ec 04             	sub    esp,0x4
c0001f1f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001f23:	66 89 04 24          	mov    WORD PTR [esp],ax
c0001f27:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f2b:	c1 e8 08             	shr    eax,0x8
c0001f2e:	89 c2                	mov    edx,eax
c0001f30:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0001f34:	c1 e0 08             	shl    eax,0x8
c0001f37:	09 d0                	or     eax,edx
c0001f39:	83 c4 04             	add    esp,0x4
c0001f3c:	c3                   	ret    
c0001f3d:	8d 76 00             	lea    esi,[esi+0x0]

c0001f40 <LWIP_PLATFORM_HTONL>:
c0001f40:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f44:	c1 e8 18             	shr    eax,0x18
c0001f47:	89 c2                	mov    edx,eax
c0001f49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f4d:	c1 e8 08             	shr    eax,0x8
c0001f50:	25 00 ff 00 00       	and    eax,0xff00
c0001f55:	09 c2                	or     edx,eax
c0001f57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f5b:	c1 e0 08             	shl    eax,0x8
c0001f5e:	25 00 00 ff 00       	and    eax,0xff0000
c0001f63:	09 c2                	or     edx,eax
c0001f65:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001f69:	c1 e0 18             	shl    eax,0x18
c0001f6c:	09 d0                	or     eax,edx
c0001f6e:	c3                   	ret    

c0001f6f <disk_status>:
c0001f6f:	31 c0                	xor    eax,eax
c0001f71:	c3                   	ret    

c0001f72 <disk_initialize>:
c0001f72:	31 c0                	xor    eax,eax
c0001f74:	c3                   	ret    

c0001f75 <disk_read>:
c0001f75:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f7a:	0f b6 04 85 60 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27a0]
c0001f82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f86:	e9 35 91 01 00       	jmp    c001b0c0 <fatWrapperReadDisk>

c0001f8b <disk_write>:
c0001f8b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001f90:	0f b6 04 85 60 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27a0]
c0001f98:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001f9c:	e9 5f 91 01 00       	jmp    c001b100 <fatWrapperWriteDisk>

c0001fa1 <disk_ioctl>:
c0001fa1:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001fa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001faa:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001faf:	0f b6 04 85 60 d8 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd27a0]
c0001fb7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001fbb:	e9 80 91 01 00       	jmp    c001b140 <fatWrapperIoctl>

c0001fc0 <ld_word>:
c0001fc0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fc4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fc7:	c1 e2 08             	shl    edx,0x8
c0001fca:	09 d0                	or     eax,edx
c0001fcc:	c3                   	ret    

c0001fcd <ld_dword>:
c0001fcd:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001fd1:	89 d1                	mov    ecx,edx
c0001fd3:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001fd7:	c1 e1 08             	shl    ecx,0x8
c0001fda:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001fdd:	09 ca                	or     edx,ecx
c0001fdf:	c1 e2 08             	shl    edx,0x8
c0001fe2:	09 d0                	or     eax,edx
c0001fe4:	c3                   	ret    

c0001fe5 <st_word>:
c0001fe5:	66 89 10             	mov    WORD PTR [eax],dx
c0001fe8:	c3                   	ret    

c0001fe9 <st_dword>:
c0001fe9:	89 10                	mov    DWORD PTR [eax],edx
c0001feb:	c3                   	ret    

c0001fec <mem_cpy>:
c0001fec:	85 c9                	test   ecx,ecx
c0001fee:	74 10                	je     c0002000 <mem_cpy+0x14>
c0001ff0:	57                   	push   edi
c0001ff1:	01 c1                	add    ecx,eax
c0001ff3:	56                   	push   esi
c0001ff4:	89 c7                	mov    edi,eax
c0001ff6:	89 d6                	mov    esi,edx
c0001ff8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ff9:	39 f9                	cmp    ecx,edi
c0001ffb:	75 fb                	jne    c0001ff8 <mem_cpy+0xc>
c0001ffd:	5e                   	pop    esi
c0001ffe:	5f                   	pop    edi
c0001fff:	c3                   	ret    
c0002000:	c3                   	ret    

c0002001 <mem_set>:
c0002001:	01 c1                	add    ecx,eax
c0002003:	40                   	inc    eax
c0002004:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0002007:	39 c8                	cmp    eax,ecx
c0002009:	75 f8                	jne    c0002003 <mem_set+0x2>
c000200b:	c3                   	ret    

c000200c <mem_cmp>:
c000200c:	57                   	push   edi
c000200d:	56                   	push   esi
c000200e:	89 c6                	mov    esi,eax
c0002010:	53                   	push   ebx
c0002011:	46                   	inc    esi
c0002012:	42                   	inc    edx
c0002013:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0002017:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c000201b:	29 fb                	sub    ebx,edi
c000201d:	89 cf                	mov    edi,ecx
c000201f:	29 f7                	sub    edi,esi
c0002021:	01 c7                	add    edi,eax
c0002023:	74 04                	je     c0002029 <mem_cmp+0x1d>
c0002025:	85 db                	test   ebx,ebx
c0002027:	74 e8                	je     c0002011 <mem_cmp+0x5>
c0002029:	89 d8                	mov    eax,ebx
c000202b:	5b                   	pop    ebx
c000202c:	5e                   	pop    esi
c000202d:	5f                   	pop    edi
c000202e:	c3                   	ret    

c000202f <chk_chr>:
c000202f:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0002032:	85 c9                	test   ecx,ecx
c0002034:	74 07                	je     c000203d <chk_chr+0xe>
c0002036:	39 d1                	cmp    ecx,edx
c0002038:	74 03                	je     c000203d <chk_chr+0xe>
c000203a:	40                   	inc    eax
c000203b:	eb f2                	jmp    c000202f <chk_chr>
c000203d:	89 c8                	mov    eax,ecx
c000203f:	c3                   	ret    

c0002040 <dbc_1st>:
c0002040:	31 c0                	xor    eax,eax
c0002042:	c3                   	ret    

c0002043 <dbc_2nd>:
c0002043:	31 c0                	xor    eax,eax
c0002045:	c3                   	ret    

c0002046 <tchar2uni>:
c0002046:	57                   	push   edi
c0002047:	56                   	push   esi
c0002048:	53                   	push   ebx
c0002049:	8b 18                	mov    ebx,DWORD PTR [eax]
c000204b:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000204d:	8d 73 01             	lea    esi,[ebx+0x1]
c0002050:	f6 c1 80             	test   cl,0x80
c0002053:	75 0a                	jne    c000205f <tchar2uni+0x19>
c0002055:	0f b6 d1             	movzx  edx,cl
c0002058:	89 f3                	mov    ebx,esi
c000205a:	e9 b2 00 00 00       	jmp    c0002111 <tchar2uni+0xcb>
c000205f:	89 ca                	mov    edx,ecx
c0002061:	81 e2 e0 00 00 00    	and    edx,0xe0
c0002067:	81 fa c0 00 00 00    	cmp    edx,0xc0
c000206d:	89 ca                	mov    edx,ecx
c000206f:	75 0a                	jne    c000207b <tchar2uni+0x35>
c0002071:	83 e2 1f             	and    edx,0x1f
c0002074:	b9 01 00 00 00       	mov    ecx,0x1
c0002079:	eb 37                	jmp    c00020b2 <tchar2uni+0x6c>
c000207b:	81 e2 f0 00 00 00    	and    edx,0xf0
c0002081:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0002087:	75 0c                	jne    c0002095 <tchar2uni+0x4f>
c0002089:	89 ca                	mov    edx,ecx
c000208b:	b9 02 00 00 00       	mov    ecx,0x2
c0002090:	83 e2 0f             	and    edx,0xf
c0002093:	eb 1d                	jmp    c00020b2 <tchar2uni+0x6c>
c0002095:	89 cf                	mov    edi,ecx
c0002097:	83 ca ff             	or     edx,0xffffffff
c000209a:	81 e7 f8 00 00 00    	and    edi,0xf8
c00020a0:	81 ff f0 00 00 00    	cmp    edi,0xf0
c00020a6:	75 70                	jne    c0002118 <tchar2uni+0xd2>
c00020a8:	89 ca                	mov    edx,ecx
c00020aa:	b9 03 00 00 00       	mov    ecx,0x3
c00020af:	83 e2 07             	and    edx,0x7
c00020b2:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c00020b6:	46                   	inc    esi
c00020b7:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c00020ba:	89 cf                	mov    edi,ecx
c00020bc:	81 e7 c0 00 00 00    	and    edi,0xc0
c00020c2:	83 c7 80             	add    edi,0xffffff80
c00020c5:	75 4e                	jne    c0002115 <tchar2uni+0xcf>
c00020c7:	c1 e2 06             	shl    edx,0x6
c00020ca:	83 e1 3f             	and    ecx,0x3f
c00020cd:	09 ca                	or     edx,ecx
c00020cf:	39 de                	cmp    esi,ebx
c00020d1:	75 e3                	jne    c00020b6 <tchar2uni+0x70>
c00020d3:	8d 4a 80             	lea    ecx,[edx-0x80]
c00020d6:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c00020dc:	77 37                	ja     c0002115 <tchar2uni+0xcf>
c00020de:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c00020e4:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c00020ea:	76 29                	jbe    c0002115 <tchar2uni+0xcf>
c00020ec:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00020f2:	76 1d                	jbe    c0002111 <tchar2uni+0xcb>
c00020f4:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c00020fa:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0002100:	c1 e1 06             	shl    ecx,0x6
c0002103:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0002109:	09 ca                	or     edx,ecx
c000210b:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0002111:	89 18                	mov    DWORD PTR [eax],ebx
c0002113:	eb 03                	jmp    c0002118 <tchar2uni+0xd2>
c0002115:	83 ca ff             	or     edx,0xffffffff
c0002118:	5b                   	pop    ebx
c0002119:	89 d0                	mov    eax,edx
c000211b:	5e                   	pop    esi
c000211c:	5f                   	pop    edi
c000211d:	c3                   	ret    

c000211e <put_utf>:
c000211e:	53                   	push   ebx
c000211f:	83 f8 7f             	cmp    eax,0x7f
c0002122:	89 c3                	mov    ebx,eax
c0002124:	b0 00                	mov    al,0x0
c0002126:	77 11                	ja     c0002139 <put_utf+0x1b>
c0002128:	85 c9                	test   ecx,ecx
c000212a:	0f 84 e5 00 00 00    	je     c0002215 <put_utf+0xf7>
c0002130:	88 1a                	mov    BYTE PTR [edx],bl
c0002132:	b0 01                	mov    al,0x1
c0002134:	e9 dc 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002139:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c000213f:	77 23                	ja     c0002164 <put_utf+0x46>
c0002141:	83 f9 01             	cmp    ecx,0x1
c0002144:	0f 86 cb 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c000214a:	89 d8                	mov    eax,ebx
c000214c:	83 e3 3f             	and    ebx,0x3f
c000214f:	c1 e8 06             	shr    eax,0x6
c0002152:	83 cb 80             	or     ebx,0xffffff80
c0002155:	83 c8 c0             	or     eax,0xffffffc0
c0002158:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c000215b:	88 02                	mov    BYTE PTR [edx],al
c000215d:	b0 02                	mov    al,0x2
c000215f:	e9 b1 00 00 00       	jmp    c0002215 <put_utf+0xf7>
c0002164:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c000216a:	77 40                	ja     c00021ac <put_utf+0x8e>
c000216c:	83 f9 02             	cmp    ecx,0x2
c000216f:	0f 86 a0 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002175:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c000217b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0002181:	0f 86 8e 00 00 00    	jbe    c0002215 <put_utf+0xf7>
c0002187:	89 d8                	mov    eax,ebx
c0002189:	c1 e8 0c             	shr    eax,0xc
c000218c:	83 c8 e0             	or     eax,0xffffffe0
c000218f:	88 02                	mov    BYTE PTR [edx],al
c0002191:	89 d8                	mov    eax,ebx
c0002193:	83 e3 3f             	and    ebx,0x3f
c0002196:	c1 e8 06             	shr    eax,0x6
c0002199:	83 cb 80             	or     ebx,0xffffff80
c000219c:	83 e0 3f             	and    eax,0x3f
c000219f:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c00021a2:	83 c8 80             	or     eax,0xffffff80
c00021a5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021a8:	b0 03                	mov    al,0x3
c00021aa:	eb 69                	jmp    c0002215 <put_utf+0xf7>
c00021ac:	83 f9 03             	cmp    ecx,0x3
c00021af:	76 64                	jbe    c0002215 <put_utf+0xf7>
c00021b1:	89 d9                	mov    ecx,ebx
c00021b3:	0f b7 c3             	movzx  eax,bx
c00021b6:	66 31 c9             	xor    cx,cx
c00021b9:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c00021bf:	81 c1 00 00 00 28    	add    ecx,0x28000000
c00021c5:	c1 e9 06             	shr    ecx,0x6
c00021c8:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c00021ce:	77 43                	ja     c0002213 <put_utf+0xf5>
c00021d0:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c00021d6:	77 3b                	ja     c0002213 <put_utf+0xf5>
c00021d8:	09 cb                	or     ebx,ecx
c00021da:	81 c3 00 00 01 00    	add    ebx,0x10000
c00021e0:	89 d8                	mov    eax,ebx
c00021e2:	c1 e8 12             	shr    eax,0x12
c00021e5:	83 c8 f0             	or     eax,0xfffffff0
c00021e8:	88 02                	mov    BYTE PTR [edx],al
c00021ea:	89 d8                	mov    eax,ebx
c00021ec:	c1 e8 0c             	shr    eax,0xc
c00021ef:	83 e0 3f             	and    eax,0x3f
c00021f2:	83 c8 80             	or     eax,0xffffff80
c00021f5:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c00021f8:	89 d8                	mov    eax,ebx
c00021fa:	83 e3 3f             	and    ebx,0x3f
c00021fd:	c1 e8 06             	shr    eax,0x6
c0002200:	83 cb 80             	or     ebx,0xffffff80
c0002203:	83 e0 3f             	and    eax,0x3f
c0002206:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002209:	83 c8 80             	or     eax,0xffffff80
c000220c:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c000220f:	b0 04                	mov    al,0x4
c0002211:	eb 02                	jmp    c0002215 <put_utf+0xf7>
c0002213:	31 c0                	xor    eax,eax
c0002215:	5b                   	pop    ebx
c0002216:	c3                   	ret    

c0002217 <clst2sect>:
c0002217:	8d 4a fe             	lea    ecx,[edx-0x2]
c000221a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000221d:	83 ea 02             	sub    edx,0x2
c0002220:	39 ca                	cmp    edx,ecx
c0002222:	76 0d                	jbe    c0002231 <clst2sect+0x1a>
c0002224:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0002228:	0f af d1             	imul   edx,ecx
c000222b:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c000222e:	89 d0                	mov    eax,edx
c0002230:	c3                   	ret    
c0002231:	31 c0                	xor    eax,eax
c0002233:	c3                   	ret    

c0002234 <pick_lfn>:
c0002234:	55                   	push   ebp
c0002235:	57                   	push   edi
c0002236:	89 c7                	mov    edi,eax
c0002238:	56                   	push   esi
c0002239:	8d 42 1a             	lea    eax,[edx+0x1a]
c000223c:	53                   	push   ebx
c000223d:	89 d3                	mov    ebx,edx
c000223f:	e8 7c fd ff ff       	call   c0001fc0 <ld_word>
c0002244:	66 85 c0             	test   ax,ax
c0002247:	74 04                	je     c000224d <pick_lfn+0x19>
c0002249:	31 c0                	xor    eax,eax
c000224b:	eb 62                	jmp    c00022af <pick_lfn+0x7b>
c000224d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002250:	bd 01 00 00 00       	mov    ebp,0x1
c0002255:	83 e1 bf             	and    ecx,0xffffffbf
c0002258:	31 f6                	xor    esi,esi
c000225a:	49                   	dec    ecx
c000225b:	6b c9 0d             	imul   ecx,ecx,0xd
c000225e:	0f b6 86 00 1b 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffde500]
c0002265:	01 d8                	add    eax,ebx
c0002267:	e8 54 fd ff ff       	call   c0001fc0 <ld_word>
c000226c:	66 85 ed             	test   bp,bp
c000226f:	74 11                	je     c0002282 <pick_lfn+0x4e>
c0002271:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0002277:	77 d0                	ja     c0002249 <pick_lfn+0x15>
c0002279:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c000227d:	89 c5                	mov    ebp,eax
c000227f:	41                   	inc    ecx
c0002280:	eb 0a                	jmp    c000228c <pick_lfn+0x58>
c0002282:	0f b7 c0             	movzx  eax,ax
c0002285:	3d ff ff 00 00       	cmp    eax,0xffff
c000228a:	75 bd                	jne    c0002249 <pick_lfn+0x15>
c000228c:	46                   	inc    esi
c000228d:	83 fe 0d             	cmp    esi,0xd
c0002290:	75 cc                	jne    c000225e <pick_lfn+0x2a>
c0002292:	f6 03 40             	test   BYTE PTR [ebx],0x40
c0002295:	74 13                	je     c00022aa <pick_lfn+0x76>
c0002297:	66 85 ed             	test   bp,bp
c000229a:	74 0e                	je     c00022aa <pick_lfn+0x76>
c000229c:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00022a2:	77 a5                	ja     c0002249 <pick_lfn+0x15>
c00022a4:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00022aa:	b8 01 00 00 00       	mov    eax,0x1
c00022af:	5b                   	pop    ebx
c00022b0:	5e                   	pop    esi
c00022b1:	5f                   	pop    edi
c00022b2:	5d                   	pop    ebp
c00022b3:	c3                   	ret    

c00022b4 <put_lfn>:
c00022b4:	55                   	push   ebp
c00022b5:	57                   	push   edi
c00022b6:	89 d7                	mov    edi,edx
c00022b8:	56                   	push   esi
c00022b9:	31 f6                	xor    esi,esi
c00022bb:	53                   	push   ebx
c00022bc:	83 ec 0c             	sub    esp,0xc
c00022bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00022c3:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00022c7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00022cb:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00022d1:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00022d4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00022d7:	31 d2                	xor    edx,edx
c00022d9:	e8 07 fd ff ff       	call   c0001fe5 <st_word>
c00022de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00022e5:	0f b6 d9             	movzx  ebx,cl
c00022e8:	4b                   	dec    ebx
c00022e9:	6b db 0d             	imul   ebx,ebx,0xd
c00022ec:	0f b7 c6             	movzx  eax,si
c00022ef:	3d ff ff 00 00       	cmp    eax,0xffff
c00022f4:	74 09                	je     c00022ff <put_lfn+0x4b>
c00022f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00022fa:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c00022fe:	43                   	inc    ebx
c00022ff:	0f b7 ee             	movzx  ebp,si
c0002302:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002305:	89 ea                	mov    edx,ebp
c0002307:	0f b6 80 00 1b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde500]
c000230e:	01 f8                	add    eax,edi
c0002310:	e8 d0 fc ff ff       	call   c0001fe5 <st_word>
c0002315:	85 ed                	test   ebp,ebp
c0002317:	75 05                	jne    c000231e <put_lfn+0x6a>
c0002319:	be ff ff 00 00       	mov    esi,0xffff
c000231e:	ff 04 24             	inc    DWORD PTR [esp]
c0002321:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c0002325:	75 c5                	jne    c00022ec <put_lfn+0x38>
c0002327:	81 fe ff ff 00 00    	cmp    esi,0xffff
c000232d:	74 0b                	je     c000233a <put_lfn+0x86>
c000232f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002333:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002338:	75 07                	jne    c0002341 <put_lfn+0x8d>
c000233a:	83 c9 40             	or     ecx,0x40
c000233d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002341:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0002345:	88 07                	mov    BYTE PTR [edi],al
c0002347:	83 c4 0c             	add    esp,0xc
c000234a:	5b                   	pop    ebx
c000234b:	5e                   	pop    esi
c000234c:	5f                   	pop    edi
c000234d:	5d                   	pop    ebp
c000234e:	c3                   	ret    

c000234f <gen_numname>:
c000234f:	57                   	push   edi
c0002350:	89 cf                	mov    edi,ecx
c0002352:	56                   	push   esi
c0002353:	b9 0b 00 00 00       	mov    ecx,0xb
c0002358:	53                   	push   ebx
c0002359:	89 c6                	mov    esi,eax
c000235b:	83 ec 10             	sub    esp,0x10
c000235e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002362:	e8 85 fc ff ff       	call   c0001fec <mem_cpy>
c0002367:	83 fb 05             	cmp    ebx,0x5
c000236a:	76 30                	jbe    c000239c <gen_numname+0x4d>
c000236c:	66 8b 07             	mov    ax,WORD PTR [edi]
c000236f:	66 85 c0             	test   ax,ax
c0002372:	74 28                	je     c000239c <gen_numname+0x4d>
c0002374:	83 c7 02             	add    edi,0x2
c0002377:	ba 10 00 00 00       	mov    edx,0x10
c000237c:	01 db                	add    ebx,ebx
c000237e:	89 c1                	mov    ecx,eax
c0002380:	c1 e0 10             	shl    eax,0x10
c0002383:	83 e1 01             	and    ecx,0x1
c0002386:	c1 e8 11             	shr    eax,0x11
c0002389:	01 cb                	add    ebx,ecx
c000238b:	0f ba e3 10          	bt     ebx,0x10
c000238f:	73 06                	jae    c0002397 <gen_numname+0x48>
c0002391:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002397:	4a                   	dec    edx
c0002398:	75 e2                	jne    c000237c <gen_numname+0x2d>
c000239a:	eb d0                	jmp    c000236c <gen_numname+0x1d>
c000239c:	b8 07 00 00 00       	mov    eax,0x7
c00023a1:	89 d9                	mov    ecx,ebx
c00023a3:	83 e1 0f             	and    ecx,0xf
c00023a6:	8d 79 30             	lea    edi,[ecx+0x30]
c00023a9:	89 fa                	mov    edx,edi
c00023ab:	83 ff 39             	cmp    edi,0x39
c00023ae:	76 03                	jbe    c00023b3 <gen_numname+0x64>
c00023b0:	8d 51 37             	lea    edx,[ecx+0x37]
c00023b3:	8d 48 ff             	lea    ecx,[eax-0x1]
c00023b6:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00023ba:	89 da                	mov    edx,ebx
c00023bc:	c1 ea 04             	shr    edx,0x4
c00023bf:	83 fb 0f             	cmp    ebx,0xf
c00023c2:	76 06                	jbe    c00023ca <gen_numname+0x7b>
c00023c4:	89 c8                	mov    eax,ecx
c00023c6:	89 d3                	mov    ebx,edx
c00023c8:	eb d7                	jmp    c00023a1 <gen_numname+0x52>
c00023ca:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00023cf:	31 d2                	xor    edx,edx
c00023d1:	8d 58 fe             	lea    ebx,[eax-0x2]
c00023d4:	8d 04 16             	lea    eax,[esi+edx*1]
c00023d7:	39 ca                	cmp    edx,ecx
c00023d9:	73 19                	jae    c00023f4 <gen_numname+0xa5>
c00023db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00023de:	83 f8 20             	cmp    eax,0x20
c00023e1:	74 11                	je     c00023f4 <gen_numname+0xa5>
c00023e3:	e8 58 fc ff ff       	call   c0002040 <dbc_1st>
c00023e8:	85 c0                	test   eax,eax
c00023ea:	74 05                	je     c00023f1 <gen_numname+0xa2>
c00023ec:	39 d3                	cmp    ebx,edx
c00023ee:	74 04                	je     c00023f4 <gen_numname+0xa5>
c00023f0:	42                   	inc    edx
c00023f1:	42                   	inc    edx
c00023f2:	eb e0                	jmp    c00023d4 <gen_numname+0x85>
c00023f4:	b0 20                	mov    al,0x20
c00023f6:	83 f9 07             	cmp    ecx,0x7
c00023f9:	77 05                	ja     c0002400 <gen_numname+0xb1>
c00023fb:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00023ff:	41                   	inc    ecx
c0002400:	42                   	inc    edx
c0002401:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002405:	83 fa 07             	cmp    edx,0x7
c0002408:	76 ea                	jbe    c00023f4 <gen_numname+0xa5>
c000240a:	83 c4 10             	add    esp,0x10
c000240d:	5b                   	pop    ebx
c000240e:	5e                   	pop    esi
c000240f:	5f                   	pop    edi
c0002410:	c3                   	ret    

c0002411 <sum_sfn>:
c0002411:	53                   	push   ebx
c0002412:	31 c9                	xor    ecx,ecx
c0002414:	31 db                	xor    ebx,ebx
c0002416:	0f b6 d1             	movzx  edx,cl
c0002419:	c1 e1 07             	shl    ecx,0x7
c000241c:	d1 ea                	shr    edx,1
c000241e:	09 ca                	or     edx,ecx
c0002420:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c0002423:	43                   	inc    ebx
c0002424:	01 ca                	add    edx,ecx
c0002426:	83 fb 0b             	cmp    ebx,0xb
c0002429:	88 d1                	mov    cl,dl
c000242b:	75 e9                	jne    c0002416 <sum_sfn+0x5>
c000242d:	88 d0                	mov    al,dl
c000242f:	5b                   	pop    ebx
c0002430:	c3                   	ret    

c0002431 <get_ldnumber>:
c0002431:	8b 10                	mov    edx,DWORD PTR [eax]
c0002433:	85 d2                	test   edx,edx
c0002435:	74 14                	je     c000244b <get_ldnumber+0x1a>
c0002437:	56                   	push   esi
c0002438:	53                   	push   ebx
c0002439:	89 d3                	mov    ebx,edx
c000243b:	43                   	inc    ebx
c000243c:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000243f:	80 f9 1f             	cmp    cl,0x1f
c0002442:	76 0d                	jbe    c0002451 <get_ldnumber+0x20>
c0002444:	80 f9 3a             	cmp    cl,0x3a
c0002447:	75 f2                	jne    c000243b <get_ldnumber+0xa>
c0002449:	eb 0a                	jmp    c0002455 <get_ldnumber+0x24>
c000244b:	83 c9 ff             	or     ecx,0xffffffff
c000244e:	89 c8                	mov    eax,ecx
c0002450:	c3                   	ret    
c0002451:	31 c9                	xor    ecx,ecx
c0002453:	eb 24                	jmp    c0002479 <get_ldnumber+0x48>
c0002455:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002458:	8d 4e d0             	lea    ecx,[esi-0x30]
c000245b:	80 f9 09             	cmp    cl,0x9
c000245e:	77 16                	ja     c0002476 <get_ldnumber+0x45>
c0002460:	83 c2 02             	add    edx,0x2
c0002463:	83 c9 ff             	or     ecx,0xffffffff
c0002466:	39 d3                	cmp    ebx,edx
c0002468:	75 0f                	jne    c0002479 <get_ldnumber+0x48>
c000246a:	89 f2                	mov    edx,esi
c000246c:	89 18                	mov    DWORD PTR [eax],ebx
c000246e:	0f be ca             	movsx  ecx,dl
c0002471:	83 e9 30             	sub    ecx,0x30
c0002474:	eb 03                	jmp    c0002479 <get_ldnumber+0x48>
c0002476:	83 c9 ff             	or     ecx,0xffffffff
c0002479:	89 c8                	mov    eax,ecx
c000247b:	5b                   	pop    ebx
c000247c:	5e                   	pop    esi
c000247d:	c3                   	ret    

c000247e <validate>:
c000247e:	56                   	push   esi
c000247f:	53                   	push   ebx
c0002480:	89 d6                	mov    esi,edx
c0002482:	51                   	push   ecx
c0002483:	85 c0                	test   eax,eax
c0002485:	75 09                	jne    c0002490 <validate+0x12>
c0002487:	b8 09 00 00 00       	mov    eax,0x9
c000248c:	31 c9                	xor    ecx,ecx
c000248e:	eb 2e                	jmp    c00024be <validate+0x40>
c0002490:	89 c3                	mov    ebx,eax
c0002492:	8b 00                	mov    eax,DWORD PTR [eax]
c0002494:	85 c0                	test   eax,eax
c0002496:	74 ef                	je     c0002487 <validate+0x9>
c0002498:	80 38 00             	cmp    BYTE PTR [eax],0x0
c000249b:	74 ea                	je     c0002487 <validate+0x9>
c000249d:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00024a0:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00024a4:	75 e1                	jne    c0002487 <validate+0x9>
c00024a6:	83 ec 0c             	sub    esp,0xc
c00024a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024ad:	50                   	push   eax
c00024ae:	e8 bc fa ff ff       	call   c0001f6f <disk_status>
c00024b3:	83 c4 10             	add    esp,0x10
c00024b6:	a8 01                	test   al,0x1
c00024b8:	75 cd                	jne    c0002487 <validate+0x9>
c00024ba:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00024bc:	31 c0                	xor    eax,eax
c00024be:	89 0e                	mov    DWORD PTR [esi],ecx
c00024c0:	5a                   	pop    edx
c00024c1:	5b                   	pop    ebx
c00024c2:	5e                   	pop    esi
c00024c3:	c3                   	ret    

c00024c4 <sync_window>:
c00024c4:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00024c8:	74 58                	je     c0002522 <sync_window+0x5e>
c00024ca:	56                   	push   esi
c00024cb:	53                   	push   ebx
c00024cc:	8d 70 34             	lea    esi,[eax+0x34]
c00024cf:	51                   	push   ecx
c00024d0:	89 c3                	mov    ebx,eax
c00024d2:	6a 01                	push   0x1
c00024d4:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00024d7:	56                   	push   esi
c00024d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00024dc:	50                   	push   eax
c00024dd:	e8 a9 fa ff ff       	call   c0001f8b <disk_write>
c00024e2:	83 c4 10             	add    esp,0x10
c00024e5:	ba 01 00 00 00       	mov    edx,0x1
c00024ea:	85 c0                	test   eax,eax
c00024ec:	75 2e                	jne    c000251c <sync_window+0x58>
c00024ee:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00024f1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00024f4:	89 c1                	mov    ecx,eax
c00024f6:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00024fa:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c00024fd:	39 d1                	cmp    ecx,edx
c00024ff:	73 19                	jae    c000251a <sync_window+0x56>
c0002501:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002505:	75 13                	jne    c000251a <sync_window+0x56>
c0002507:	6a 01                	push   0x1
c0002509:	01 d0                	add    eax,edx
c000250b:	50                   	push   eax
c000250c:	56                   	push   esi
c000250d:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002511:	50                   	push   eax
c0002512:	e8 74 fa ff ff       	call   c0001f8b <disk_write>
c0002517:	83 c4 10             	add    esp,0x10
c000251a:	31 d2                	xor    edx,edx
c000251c:	89 d0                	mov    eax,edx
c000251e:	5a                   	pop    edx
c000251f:	5b                   	pop    ebx
c0002520:	5e                   	pop    esi
c0002521:	c3                   	ret    
c0002522:	31 d2                	xor    edx,edx
c0002524:	89 d0                	mov    eax,edx
c0002526:	c3                   	ret    

c0002527 <move_window>:
c0002527:	57                   	push   edi
c0002528:	56                   	push   esi
c0002529:	31 f6                	xor    esi,esi
c000252b:	53                   	push   ebx
c000252c:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000252f:	74 32                	je     c0002563 <move_window+0x3c>
c0002531:	89 c3                	mov    ebx,eax
c0002533:	89 d7                	mov    edi,edx
c0002535:	e8 8a ff ff ff       	call   c00024c4 <sync_window>
c000253a:	89 c6                	mov    esi,eax
c000253c:	85 c0                	test   eax,eax
c000253e:	75 23                	jne    c0002563 <move_window+0x3c>
c0002540:	6a 01                	push   0x1
c0002542:	8d 43 34             	lea    eax,[ebx+0x34]
c0002545:	57                   	push   edi
c0002546:	50                   	push   eax
c0002547:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000254b:	50                   	push   eax
c000254c:	e8 24 fa ff ff       	call   c0001f75 <disk_read>
c0002551:	83 c4 10             	add    esp,0x10
c0002554:	85 c0                	test   eax,eax
c0002556:	74 08                	je     c0002560 <move_window+0x39>
c0002558:	be 01 00 00 00       	mov    esi,0x1
c000255d:	83 cf ff             	or     edi,0xffffffff
c0002560:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002563:	89 f0                	mov    eax,esi
c0002565:	5b                   	pop    ebx
c0002566:	5e                   	pop    esi
c0002567:	5f                   	pop    edi
c0002568:	c3                   	ret    

c0002569 <check_fs>:
c0002569:	53                   	push   ebx
c000256a:	89 c3                	mov    ebx,eax
c000256c:	83 ec 08             	sub    esp,0x8
c000256f:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002573:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c000257a:	e8 a8 ff ff ff       	call   c0002527 <move_window>
c000257f:	ba 04 00 00 00       	mov    edx,0x4
c0002584:	85 c0                	test   eax,eax
c0002586:	75 68                	jne    c00025f0 <check_fs+0x87>
c0002588:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c000258e:	e8 2d fa ff ff       	call   c0001fc0 <ld_word>
c0002593:	ba 03 00 00 00       	mov    edx,0x3
c0002598:	66 3d 55 aa          	cmp    ax,0xaa55
c000259c:	75 52                	jne    c00025f0 <check_fs+0x87>
c000259e:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00025a1:	8d 50 18             	lea    edx,[eax+0x18]
c00025a4:	80 fa 01             	cmp    dl,0x1
c00025a7:	76 09                	jbe    c00025b2 <check_fs+0x49>
c00025a9:	ba 02 00 00 00       	mov    edx,0x2
c00025ae:	3c eb                	cmp    al,0xeb
c00025b0:	75 3e                	jne    c00025f0 <check_fs+0x87>
c00025b2:	ba e4 47 02 c0       	mov    edx,0xc00247e4
c00025b7:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00025ba:	b9 03 00 00 00       	mov    ecx,0x3
c00025bf:	e8 48 fa ff ff       	call   c000200c <mem_cmp>
c00025c4:	31 d2                	xor    edx,edx
c00025c6:	85 c0                	test   eax,eax
c00025c8:	74 26                	je     c00025f0 <check_fs+0x87>
c00025ca:	ba bc 19 02 c0       	mov    edx,0xc00219bc
c00025cf:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00025d5:	b9 05 00 00 00       	mov    ecx,0x5
c00025da:	e8 2d fa ff ff       	call   c000200c <mem_cmp>
c00025df:	31 d2                	xor    edx,edx
c00025e1:	85 c0                	test   eax,eax
c00025e3:	74 0b                	je     c00025f0 <check_fs+0x87>
c00025e5:	31 d2                	xor    edx,edx
c00025e7:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c00025eb:	0f 95 c2             	setne  dl
c00025ee:	01 d2                	add    edx,edx
c00025f0:	89 d0                	mov    eax,edx
c00025f2:	83 c4 08             	add    esp,0x8
c00025f5:	5b                   	pop    ebx
c00025f6:	c3                   	ret    

c00025f7 <find_volume>:
c00025f7:	55                   	push   ebp
c00025f8:	57                   	push   edi
c00025f9:	56                   	push   esi
c00025fa:	89 c6                	mov    esi,eax
c00025fc:	53                   	push   ebx
c00025fd:	89 d3                	mov    ebx,edx
c00025ff:	83 ec 2c             	sub    esp,0x2c
c0002602:	31 d2                	xor    edx,edx
c0002604:	e8 60 ff ff ff       	call   c0002569 <check_fs>
c0002609:	83 f8 02             	cmp    eax,0x2
c000260c:	74 06                	je     c0002614 <find_volume+0x1d>
c000260e:	77 62                	ja     c0002672 <find_volume+0x7b>
c0002610:	85 db                	test   ebx,ebx
c0002612:	74 5e                	je     c0002672 <find_volume+0x7b>
c0002614:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002618:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000261e:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002624:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002628:	89 cf                	mov    edi,ecx
c000262a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000262e:	89 e8                	mov    eax,ebp
c0002630:	83 c5 10             	add    ebp,0x10
c0002633:	e8 95 f9 ff ff       	call   c0001fcd <ld_dword>
c0002638:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000263c:	89 01                	mov    DWORD PTR [ecx],eax
c000263e:	83 c1 04             	add    ecx,0x4
c0002641:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002645:	75 e3                	jne    c000262a <find_volume+0x33>
c0002647:	31 ed                	xor    ebp,ebp
c0002649:	85 db                	test   ebx,ebx
c000264b:	74 03                	je     c0002650 <find_volume+0x59>
c000264d:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002650:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002653:	b8 03 00 00 00       	mov    eax,0x3
c0002658:	85 d2                	test   edx,edx
c000265a:	74 0c                	je     c0002668 <find_volume+0x71>
c000265c:	89 f0                	mov    eax,esi
c000265e:	e8 06 ff ff ff       	call   c0002569 <check_fs>
c0002663:	83 f8 01             	cmp    eax,0x1
c0002666:	76 0a                	jbe    c0002672 <find_volume+0x7b>
c0002668:	85 db                	test   ebx,ebx
c000266a:	75 06                	jne    c0002672 <find_volume+0x7b>
c000266c:	45                   	inc    ebp
c000266d:	83 fd 03             	cmp    ebp,0x3
c0002670:	76 de                	jbe    c0002650 <find_volume+0x59>
c0002672:	83 c4 2c             	add    esp,0x2c
c0002675:	5b                   	pop    ebx
c0002676:	5e                   	pop    esi
c0002677:	5f                   	pop    edi
c0002678:	5d                   	pop    ebp
c0002679:	c3                   	ret    

c000267a <mount_volume>:
c000267a:	55                   	push   ebp
c000267b:	89 d5                	mov    ebp,edx
c000267d:	57                   	push   edi
c000267e:	89 cf                	mov    edi,ecx
c0002680:	56                   	push   esi
c0002681:	53                   	push   ebx
c0002682:	bb 0b 00 00 00       	mov    ebx,0xb
c0002687:	83 ec 1c             	sub    esp,0x1c
c000268a:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002690:	e8 9c fd ff ff       	call   c0002431 <get_ldnumber>
c0002695:	85 c0                	test   eax,eax
c0002697:	0f 88 c4 02 00 00    	js     c0002961 <mount_volume+0x2e7>
c000269d:	8b 34 85 a0 74 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8b60]
c00026a4:	89 c2                	mov    edx,eax
c00026a6:	bb 0c 00 00 00       	mov    ebx,0xc
c00026ab:	85 f6                	test   esi,esi
c00026ad:	0f 84 ae 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026b3:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00026b6:	83 e7 fe             	and    edi,0xfffffffe
c00026b9:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00026bc:	74 3a                	je     c00026f8 <mount_volume+0x7e>
c00026be:	89 04 24             	mov    DWORD PTR [esp],eax
c00026c1:	83 ec 0c             	sub    esp,0xc
c00026c4:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00026c8:	50                   	push   eax
c00026c9:	e8 a1 f8 ff ff       	call   c0001f6f <disk_status>
c00026ce:	83 c4 10             	add    esp,0x10
c00026d1:	a8 01                	test   al,0x1
c00026d3:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00026d6:	75 20                	jne    c00026f8 <mount_volume+0x7e>
c00026d8:	31 db                	xor    ebx,ebx
c00026da:	81 e7 fe 00 00 00    	and    edi,0xfe
c00026e0:	0f 84 7b 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026e6:	a8 04                	test   al,0x4
c00026e8:	0f 84 73 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c00026ee:	bb 0a 00 00 00       	mov    ebx,0xa
c00026f3:	e9 69 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c00026f8:	83 ec 0c             	sub    esp,0xc
c00026fb:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00026fe:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002701:	0f b6 c2             	movzx  eax,dl
c0002704:	bb 03 00 00 00       	mov    ebx,0x3
c0002709:	50                   	push   eax
c000270a:	e8 63 f8 ff ff       	call   c0001f72 <disk_initialize>
c000270f:	83 c4 10             	add    esp,0x10
c0002712:	a8 01                	test   al,0x1
c0002714:	0f 85 47 02 00 00    	jne    c0002961 <mount_volume+0x2e7>
c000271a:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002720:	74 04                	je     c0002726 <mount_volume+0xac>
c0002722:	a8 04                	test   al,0x4
c0002724:	75 c8                	jne    c00026ee <mount_volume+0x74>
c0002726:	31 d2                	xor    edx,edx
c0002728:	89 f0                	mov    eax,esi
c000272a:	bb 01 00 00 00       	mov    ebx,0x1
c000272f:	e8 c3 fe ff ff       	call   c00025f7 <find_volume>
c0002734:	83 f8 04             	cmp    eax,0x4
c0002737:	0f 84 24 02 00 00    	je     c0002961 <mount_volume+0x2e7>
c000273d:	83 f8 01             	cmp    eax,0x1
c0002740:	76 0a                	jbe    c000274c <mount_volume+0xd2>
c0002742:	bb 0d 00 00 00       	mov    ebx,0xd
c0002747:	e9 15 02 00 00       	jmp    c0002961 <mount_volume+0x2e7>
c000274c:	8d 46 3f             	lea    eax,[esi+0x3f]
c000274f:	e8 6c f8 ff ff       	call   c0001fc0 <ld_word>
c0002754:	66 3d 00 02          	cmp    ax,0x200
c0002758:	75 e8                	jne    c0002742 <mount_volume+0xc8>
c000275a:	8d 46 4a             	lea    eax,[esi+0x4a]
c000275d:	e8 5e f8 ff ff       	call   c0001fc0 <ld_word>
c0002762:	0f b7 c0             	movzx  eax,ax
c0002765:	89 04 24             	mov    DWORD PTR [esp],eax
c0002768:	85 c0                	test   eax,eax
c000276a:	75 0b                	jne    c0002777 <mount_volume+0xfd>
c000276c:	8d 46 58             	lea    eax,[esi+0x58]
c000276f:	e8 59 f8 ff ff       	call   c0001fcd <ld_dword>
c0002774:	89 04 24             	mov    DWORD PTR [esp],eax
c0002777:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c000277a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000277e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002781:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c0002784:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c0002787:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000278b:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000278e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002792:	48                   	dec    eax
c0002793:	3c 01                	cmp    al,0x1
c0002795:	77 ab                	ja     c0002742 <mount_volume+0xc8>
c0002797:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c000279b:	89 c3                	mov    ebx,eax
c000279d:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00027a1:	66 85 c0             	test   ax,ax
c00027a4:	74 9c                	je     c0002742 <mount_volume+0xc8>
c00027a6:	8d 40 ff             	lea    eax,[eax-0x1]
c00027a9:	85 d8                	test   eax,ebx
c00027ab:	75 95                	jne    c0002742 <mount_volume+0xc8>
c00027ad:	8d 46 45             	lea    eax,[esi+0x45]
c00027b0:	e8 0b f8 ff ff       	call   c0001fc0 <ld_word>
c00027b5:	89 c7                	mov    edi,eax
c00027b7:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00027bb:	a8 0f                	test   al,0xf
c00027bd:	75 83                	jne    c0002742 <mount_volume+0xc8>
c00027bf:	8d 46 47             	lea    eax,[esi+0x47]
c00027c2:	e8 f9 f7 ff ff       	call   c0001fc0 <ld_word>
c00027c7:	0f b7 e8             	movzx  ebp,ax
c00027ca:	85 ed                	test   ebp,ebp
c00027cc:	75 0a                	jne    c00027d8 <mount_volume+0x15e>
c00027ce:	8d 46 54             	lea    eax,[esi+0x54]
c00027d1:	e8 f7 f7 ff ff       	call   c0001fcd <ld_dword>
c00027d6:	89 c5                	mov    ebp,eax
c00027d8:	8d 46 42             	lea    eax,[esi+0x42]
c00027db:	e8 e0 f7 ff ff       	call   c0001fc0 <ld_word>
c00027e0:	0f b7 c8             	movzx  ecx,ax
c00027e3:	85 c9                	test   ecx,ecx
c00027e5:	0f 84 57 ff ff ff    	je     c0002742 <mount_volume+0xc8>
c00027eb:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00027f0:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c00027f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027f8:	0f b7 c7             	movzx  eax,di
c00027fb:	c1 e8 04             	shr    eax,0x4
c00027fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002802:	01 c8                	add    eax,ecx
c0002804:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002808:	39 c5                	cmp    ebp,eax
c000280a:	0f 82 32 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002810:	29 c5                	sub    ebp,eax
c0002812:	31 d2                	xor    edx,edx
c0002814:	89 e8                	mov    eax,ebp
c0002816:	f7 f3                	div    ebx
c0002818:	39 dd                	cmp    ebp,ebx
c000281a:	0f 82 22 ff ff ff    	jb     c0002742 <mount_volume+0xc8>
c0002820:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002825:	0f 87 17 ff ff ff    	ja     c0002742 <mount_volume+0xc8>
c000282b:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002830:	0f 86 1c 01 00 00    	jbe    c0002952 <mount_volume+0x2d8>
c0002836:	bb 03 00 00 00       	mov    ebx,0x3
c000283b:	8d 68 02             	lea    ebp,[eax+0x2]
c000283e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002842:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002846:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c000284a:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c000284d:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002850:	01 c8                	add    eax,ecx
c0002852:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002855:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c0002858:	83 fb 03             	cmp    ebx,0x3
c000285b:	75 23                	jne    c0002880 <mount_volume+0x206>
c000285d:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002860:	e8 5b f7 ff ff       	call   c0001fc0 <ld_word>
c0002865:	09 c7                	or     edi,eax
c0002867:	66 85 ff             	test   di,di
c000286a:	0f 85 d2 fe ff ff    	jne    c0002742 <mount_volume+0xc8>
c0002870:	8d 46 60             	lea    eax,[esi+0x60]
c0002873:	c1 e5 02             	shl    ebp,0x2
c0002876:	e8 52 f7 ff ff       	call   c0001fcd <ld_dword>
c000287b:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c000287e:	eb 24                	jmp    c00028a4 <mount_volume+0x22a>
c0002880:	66 85 ff             	test   di,di
c0002883:	0f 84 b9 fe ff ff    	je     c0002742 <mount_volume+0xc8>
c0002889:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000288d:	83 fb 02             	cmp    ebx,0x2
c0002890:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002893:	75 04                	jne    c0002899 <mount_volume+0x21f>
c0002895:	01 ed                	add    ebp,ebp
c0002897:	eb 0b                	jmp    c00028a4 <mount_volume+0x22a>
c0002899:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c000289d:	83 e5 01             	and    ebp,0x1
c00028a0:	d1 e8                	shr    eax,1
c00028a2:	01 c5                	add    ebp,eax
c00028a4:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00028aa:	c1 ed 09             	shr    ebp,0x9
c00028ad:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00028b0:	0f 87 8c fe ff ff    	ja     c0002742 <mount_volume+0xc8>
c00028b6:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00028bd:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00028c4:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00028c8:	83 fb 03             	cmp    ebx,0x3
c00028cb:	75 6e                	jne    c000293b <mount_volume+0x2c1>
c00028cd:	8d 46 64             	lea    eax,[esi+0x64]
c00028d0:	e8 eb f6 ff ff       	call   c0001fc0 <ld_word>
c00028d5:	66 48                	dec    ax
c00028d7:	75 62                	jne    c000293b <mount_volume+0x2c1>
c00028d9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00028dd:	89 f0                	mov    eax,esi
c00028df:	42                   	inc    edx
c00028e0:	e8 42 fc ff ff       	call   c0002527 <move_window>
c00028e5:	85 c0                	test   eax,eax
c00028e7:	75 52                	jne    c000293b <mount_volume+0x2c1>
c00028e9:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c00028ed:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c00028f3:	e8 c8 f6 ff ff       	call   c0001fc0 <ld_word>
c00028f8:	66 3d 55 aa          	cmp    ax,0xaa55
c00028fc:	75 3d                	jne    c000293b <mount_volume+0x2c1>
c00028fe:	8d 46 34             	lea    eax,[esi+0x34]
c0002901:	e8 c7 f6 ff ff       	call   c0001fcd <ld_dword>
c0002906:	3d 52 52 61 41       	cmp    eax,0x41615252
c000290b:	75 2e                	jne    c000293b <mount_volume+0x2c1>
c000290d:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002913:	e8 b5 f6 ff ff       	call   c0001fcd <ld_dword>
c0002918:	3d 72 72 41 61       	cmp    eax,0x61417272
c000291d:	75 1c                	jne    c000293b <mount_volume+0x2c1>
c000291f:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002925:	e8 a3 f6 ff ff       	call   c0001fcd <ld_dword>
c000292a:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000292d:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002933:	e8 95 f6 ff ff       	call   c0001fcd <ld_dword>
c0002938:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000293b:	66 a1 80 74 02 c0    	mov    ax,ds:0xc0027480
c0002941:	88 1e                	mov    BYTE PTR [esi],bl
c0002943:	40                   	inc    eax
c0002944:	31 db                	xor    ebx,ebx
c0002946:	66 a3 80 74 02 c0    	mov    ds:0xc0027480,ax
c000294c:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002950:	eb 0f                	jmp    c0002961 <mount_volume+0x2e7>
c0002952:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002957:	19 db                	sbb    ebx,ebx
c0002959:	83 c3 02             	add    ebx,0x2
c000295c:	e9 da fe ff ff       	jmp    c000283b <mount_volume+0x1c1>
c0002961:	83 c4 1c             	add    esp,0x1c
c0002964:	89 d8                	mov    eax,ebx
c0002966:	5b                   	pop    ebx
c0002967:	5e                   	pop    esi
c0002968:	5f                   	pop    edi
c0002969:	5d                   	pop    ebp
c000296a:	c3                   	ret    

c000296b <put_fat>:
c000296b:	55                   	push   ebp
c000296c:	bd 02 00 00 00       	mov    ebp,0x2
c0002971:	57                   	push   edi
c0002972:	56                   	push   esi
c0002973:	53                   	push   ebx
c0002974:	83 ec 1c             	sub    esp,0x1c
c0002977:	83 fa 01             	cmp    edx,0x1
c000297a:	0f 86 38 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002980:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c0002983:	0f 86 2f 01 00 00    	jbe    c0002ab8 <put_fat+0x14d>
c0002989:	89 c6                	mov    esi,eax
c000298b:	89 cf                	mov    edi,ecx
c000298d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0002990:	89 d3                	mov    ebx,edx
c0002992:	83 f8 02             	cmp    eax,0x2
c0002995:	0f 84 b1 00 00 00    	je     c0002a4c <put_fat+0xe1>
c000299b:	83 f8 03             	cmp    eax,0x3
c000299e:	0f 84 d5 00 00 00    	je     c0002a79 <put_fat+0x10e>
c00029a4:	48                   	dec    eax
c00029a5:	0f 85 0d 01 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ab:	89 d1                	mov    ecx,edx
c00029ad:	89 f0                	mov    eax,esi
c00029af:	d1 e9                	shr    ecx,1
c00029b1:	01 d1                	add    ecx,edx
c00029b3:	89 ca                	mov    edx,ecx
c00029b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00029b9:	c1 ea 09             	shr    edx,0x9
c00029bc:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00029bf:	e8 63 fb ff ff       	call   c0002527 <move_window>
c00029c4:	89 c5                	mov    ebp,eax
c00029c6:	85 c0                	test   eax,eax
c00029c8:	0f 85 ea 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c00029ce:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029d2:	8d 46 34             	lea    eax,[esi+0x34]
c00029d5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00029d9:	8d 41 01             	lea    eax,[ecx+0x1]
c00029dc:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00029e2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029e6:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c00029ea:	89 f8                	mov    eax,edi
c00029ec:	83 e3 01             	and    ebx,0x1
c00029ef:	74 11                	je     c0002a02 <put_fat+0x97>
c00029f1:	8a 11                	mov    dl,BYTE PTR [ecx]
c00029f3:	89 f8                	mov    eax,edi
c00029f5:	83 e2 0f             	and    edx,0xf
c00029f8:	c1 e0 04             	shl    eax,0x4
c00029fb:	25 f0 0f 00 00       	and    eax,0xff0
c0002a00:	09 d0                	or     eax,edx
c0002a02:	88 01                	mov    BYTE PTR [ecx],al
c0002a04:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a08:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a0c:	c1 ea 09             	shr    edx,0x9
c0002a0f:	89 f0                	mov    eax,esi
c0002a11:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a14:	e8 0e fb ff ff       	call   c0002527 <move_window>
c0002a19:	89 c5                	mov    ebp,eax
c0002a1b:	85 c0                	test   eax,eax
c0002a1d:	0f 85 95 00 00 00    	jne    c0002ab8 <put_fat+0x14d>
c0002a23:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a27:	25 ff 01 00 00       	and    eax,0x1ff
c0002a2c:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002a30:	85 db                	test   ebx,ebx
c0002a32:	74 07                	je     c0002a3b <put_fat+0xd0>
c0002a34:	c1 ef 04             	shr    edi,0x4
c0002a37:	89 f9                	mov    ecx,edi
c0002a39:	eb 0d                	jmp    c0002a48 <put_fat+0xdd>
c0002a3b:	8a 08                	mov    cl,BYTE PTR [eax]
c0002a3d:	c1 ef 08             	shr    edi,0x8
c0002a40:	83 e1 f0             	and    ecx,0xfffffff0
c0002a43:	83 e7 0f             	and    edi,0xf
c0002a46:	09 f9                	or     ecx,edi
c0002a48:	88 08                	mov    BYTE PTR [eax],cl
c0002a4a:	eb 27                	jmp    c0002a73 <put_fat+0x108>
c0002a4c:	c1 ea 08             	shr    edx,0x8
c0002a4f:	89 f0                	mov    eax,esi
c0002a51:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a54:	e8 ce fa ff ff       	call   c0002527 <move_window>
c0002a59:	89 c5                	mov    ebp,eax
c0002a5b:	85 c0                	test   eax,eax
c0002a5d:	75 59                	jne    c0002ab8 <put_fat+0x14d>
c0002a5f:	01 db                	add    ebx,ebx
c0002a61:	0f b7 d7             	movzx  edx,di
c0002a64:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002a6a:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002a6e:	e8 72 f5 ff ff       	call   c0001fe5 <st_word>
c0002a73:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002a77:	eb 3f                	jmp    c0002ab8 <put_fat+0x14d>
c0002a79:	c1 ea 07             	shr    edx,0x7
c0002a7c:	89 f0                	mov    eax,esi
c0002a7e:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002a81:	e8 a1 fa ff ff       	call   c0002527 <move_window>
c0002a86:	89 c5                	mov    ebp,eax
c0002a88:	85 c0                	test   eax,eax
c0002a8a:	75 2c                	jne    c0002ab8 <put_fat+0x14d>
c0002a8c:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002a92:	c1 e3 02             	shl    ebx,0x2
c0002a95:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002a9b:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c0002a9f:	89 d8                	mov    eax,ebx
c0002aa1:	e8 27 f5 ff ff       	call   c0001fcd <ld_dword>
c0002aa6:	25 00 00 00 f0       	and    eax,0xf0000000
c0002aab:	09 f8                	or     eax,edi
c0002aad:	89 c2                	mov    edx,eax
c0002aaf:	89 d8                	mov    eax,ebx
c0002ab1:	e8 33 f5 ff ff       	call   c0001fe9 <st_dword>
c0002ab6:	eb bb                	jmp    c0002a73 <put_fat+0x108>
c0002ab8:	83 c4 1c             	add    esp,0x1c
c0002abb:	89 e8                	mov    eax,ebp
c0002abd:	5b                   	pop    ebx
c0002abe:	5e                   	pop    esi
c0002abf:	5f                   	pop    edi
c0002ac0:	5d                   	pop    ebp
c0002ac1:	c3                   	ret    

c0002ac2 <dir_clear>:
c0002ac2:	55                   	push   ebp
c0002ac3:	57                   	push   edi
c0002ac4:	56                   	push   esi
c0002ac5:	89 c6                	mov    esi,eax
c0002ac7:	53                   	push   ebx
c0002ac8:	83 ec 1c             	sub    esp,0x1c
c0002acb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002acf:	e8 f0 f9 ff ff       	call   c00024c4 <sync_window>
c0002ad4:	85 c0                	test   eax,eax
c0002ad6:	0f 85 c0 00 00 00    	jne    c0002b9c <dir_clear+0xda>
c0002adc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ae0:	89 f0                	mov    eax,esi
c0002ae2:	e8 30 f7 ff ff       	call   c0002217 <clst2sect>
c0002ae7:	31 d2                	xor    edx,edx
c0002ae9:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002aec:	89 c5                	mov    ebp,eax
c0002aee:	b9 00 02 00 00       	mov    ecx,0x200
c0002af3:	8d 46 34             	lea    eax,[esi+0x34]
c0002af6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002afa:	e8 02 f5 ff ff       	call   c0002001 <mem_set>
c0002aff:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0002b03:	c1 e3 09             	shl    ebx,0x9
c0002b06:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002b0c:	76 1b                	jbe    c0002b29 <dir_clear+0x67>
c0002b0e:	bb 00 80 00 00       	mov    ebx,0x8000
c0002b13:	eb 14                	jmp    c0002b29 <dir_clear+0x67>
c0002b15:	83 ec 0c             	sub    esp,0xc
c0002b18:	53                   	push   ebx
c0002b19:	e8 ea 32 00 00       	call   c0005e08 <ff_memalloc>
c0002b1e:	83 c4 10             	add    esp,0x10
c0002b21:	89 c7                	mov    edi,eax
c0002b23:	85 c0                	test   eax,eax
c0002b25:	75 7c                	jne    c0002ba3 <dir_clear+0xe1>
c0002b27:	d1 eb                	shr    ebx,1
c0002b29:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002b2f:	77 e4                	ja     c0002b15 <dir_clear+0x53>
c0002b31:	31 db                	xor    ebx,ebx
c0002b33:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b37:	39 d8                	cmp    eax,ebx
c0002b39:	76 53                	jbe    c0002b8e <dir_clear+0xcc>
c0002b3b:	6a 01                	push   0x1
c0002b3d:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b40:	50                   	push   eax
c0002b41:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002b49:	50                   	push   eax
c0002b4a:	e8 3c f4 ff ff       	call   c0001f8b <disk_write>
c0002b4f:	83 c4 10             	add    esp,0x10
c0002b52:	85 c0                	test   eax,eax
c0002b54:	75 38                	jne    c0002b8e <dir_clear+0xcc>
c0002b56:	43                   	inc    ebx
c0002b57:	eb da                	jmp    c0002b33 <dir_clear+0x71>
c0002b59:	52                   	push   edx
c0002b5a:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002b5d:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002b61:	50                   	push   eax
c0002b62:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002b66:	57                   	push   edi
c0002b67:	50                   	push   eax
c0002b68:	e8 1e f4 ff ff       	call   c0001f8b <disk_write>
c0002b6d:	83 c4 10             	add    esp,0x10
c0002b70:	85 c0                	test   eax,eax
c0002b72:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002b76:	75 0a                	jne    c0002b82 <dir_clear+0xc0>
c0002b78:	01 d3                	add    ebx,edx
c0002b7a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b7e:	39 d8                	cmp    eax,ebx
c0002b80:	77 d7                	ja     c0002b59 <dir_clear+0x97>
c0002b82:	83 ec 0c             	sub    esp,0xc
c0002b85:	57                   	push   edi
c0002b86:	e8 95 32 00 00       	call   c0005e20 <ff_memfree>
c0002b8b:	83 c4 10             	add    esp,0x10
c0002b8e:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002b92:	39 d8                	cmp    eax,ebx
c0002b94:	0f 95 c0             	setne  al
c0002b97:	0f b6 c0             	movzx  eax,al
c0002b9a:	eb 19                	jmp    c0002bb5 <dir_clear+0xf3>
c0002b9c:	b8 01 00 00 00       	mov    eax,0x1
c0002ba1:	eb 12                	jmp    c0002bb5 <dir_clear+0xf3>
c0002ba3:	89 d9                	mov    ecx,ebx
c0002ba5:	31 d2                	xor    edx,edx
c0002ba7:	e8 55 f4 ff ff       	call   c0002001 <mem_set>
c0002bac:	89 da                	mov    edx,ebx
c0002bae:	31 db                	xor    ebx,ebx
c0002bb0:	c1 ea 09             	shr    edx,0x9
c0002bb3:	eb c5                	jmp    c0002b7a <dir_clear+0xb8>
c0002bb5:	83 c4 1c             	add    esp,0x1c
c0002bb8:	5b                   	pop    ebx
c0002bb9:	5e                   	pop    esi
c0002bba:	5f                   	pop    edi
c0002bbb:	5d                   	pop    ebp
c0002bbc:	c3                   	ret    

c0002bbd <create_name>:
c0002bbd:	55                   	push   ebp
c0002bbe:	57                   	push   edi
c0002bbf:	89 d7                	mov    edi,edx
c0002bc1:	56                   	push   esi
c0002bc2:	31 f6                	xor    esi,esi
c0002bc4:	53                   	push   ebx
c0002bc5:	83 ec 3c             	sub    esp,0x3c
c0002bc8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002bcc:	8b 02                	mov    eax,DWORD PTR [edx]
c0002bce:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002bd6:	8b 00                	mov    eax,DWORD PTR [eax]
c0002bd8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002bdb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002bdf:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002be3:	e8 5e f4 ff ff       	call   c0002046 <tchar2uni>
c0002be8:	89 c3                	mov    ebx,eax
c0002bea:	83 f8 ff             	cmp    eax,0xffffffff
c0002bed:	75 0a                	jne    c0002bf9 <create_name+0x3c>
c0002bef:	b8 06 00 00 00       	mov    eax,0x6
c0002bf4:	e9 93 02 00 00       	jmp    c0002e8c <create_name+0x2cf>
c0002bf9:	3d ff ff 00 00       	cmp    eax,0xffff
c0002bfe:	76 0c                	jbe    c0002c0c <create_name+0x4f>
c0002c00:	c1 e8 10             	shr    eax,0x10
c0002c03:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002c07:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002c0b:	46                   	inc    esi
c0002c0c:	0f b7 d3             	movzx  edx,bx
c0002c0f:	83 fa 1f             	cmp    edx,0x1f
c0002c12:	76 4a                	jbe    c0002c5e <create_name+0xa1>
c0002c14:	83 fa 5c             	cmp    edx,0x5c
c0002c17:	74 30                	je     c0002c49 <create_name+0x8c>
c0002c19:	83 fa 2f             	cmp    edx,0x2f
c0002c1c:	74 2b                	je     c0002c49 <create_name+0x8c>
c0002c1e:	83 fa 7f             	cmp    edx,0x7f
c0002c21:	77 0e                	ja     c0002c31 <create_name+0x74>
c0002c23:	b8 c2 19 02 c0       	mov    eax,0xc00219c2
c0002c28:	e8 02 f4 ff ff       	call   c000202f <chk_chr>
c0002c2d:	85 c0                	test   eax,eax
c0002c2f:	75 be                	jne    c0002bef <create_name+0x32>
c0002c31:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002c37:	77 b6                	ja     c0002bef <create_name+0x32>
c0002c39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c3d:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002c41:	46                   	inc    esi
c0002c42:	eb 9b                	jmp    c0002bdf <create_name+0x22>
c0002c44:	40                   	inc    eax
c0002c45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002c49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c4d:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002c50:	83 fa 2f             	cmp    edx,0x2f
c0002c53:	74 ef                	je     c0002c44 <create_name+0x87>
c0002c55:	83 fa 5c             	cmp    edx,0x5c
c0002c58:	74 ea                	je     c0002c44 <create_name+0x87>
c0002c5a:	31 db                	xor    ebx,ebx
c0002c5c:	eb 02                	jmp    c0002c60 <create_name+0xa3>
c0002c5e:	b3 04                	mov    bl,0x4
c0002c60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002c64:	89 07                	mov    DWORD PTR [edi],eax
c0002c66:	85 f6                	test   esi,esi
c0002c68:	74 16                	je     c0002c80 <create_name+0xc3>
c0002c6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c6e:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002c73:	83 f8 20             	cmp    eax,0x20
c0002c76:	74 05                	je     c0002c7d <create_name+0xc0>
c0002c78:	83 f8 2e             	cmp    eax,0x2e
c0002c7b:	75 03                	jne    c0002c80 <create_name+0xc3>
c0002c7d:	4e                   	dec    esi
c0002c7e:	eb e6                	jmp    c0002c66 <create_name+0xa9>
c0002c80:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c84:	31 ff                	xor    edi,edi
c0002c86:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002c8c:	85 f6                	test   esi,esi
c0002c8e:	0f 84 5b ff ff ff    	je     c0002bef <create_name+0x32>
c0002c94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002c98:	8d 57 01             	lea    edx,[edi+0x1]
c0002c9b:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002c9f:	83 f8 20             	cmp    eax,0x20
c0002ca2:	75 04                	jne    c0002ca8 <create_name+0xeb>
c0002ca4:	89 d7                	mov    edi,edx
c0002ca6:	eb ec                	jmp    c0002c94 <create_name+0xd7>
c0002ca8:	85 ff                	test   edi,edi
c0002caa:	75 05                	jne    c0002cb1 <create_name+0xf4>
c0002cac:	83 f8 2e             	cmp    eax,0x2e
c0002caf:	75 08                	jne    c0002cb9 <create_name+0xfc>
c0002cb1:	83 cb 03             	or     ebx,0x3
c0002cb4:	eb 03                	jmp    c0002cb9 <create_name+0xfc>
c0002cb6:	4e                   	dec    esi
c0002cb7:	74 0c                	je     c0002cc5 <create_name+0x108>
c0002cb9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cbd:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002cc3:	75 f1                	jne    c0002cb6 <create_name+0xf9>
c0002cc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002cc9:	b9 0b 00 00 00       	mov    ecx,0xb
c0002cce:	83 c0 20             	add    eax,0x20
c0002cd1:	ba 20 00 00 00       	mov    edx,0x20
c0002cd6:	31 ed                	xor    ebp,ebp
c0002cd8:	e8 24 f3 ff ff       	call   c0002001 <mem_set>
c0002cdd:	b9 08 00 00 00       	mov    ecx,0x8
c0002ce2:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002ce7:	8d 47 01             	lea    eax,[edi+0x1]
c0002cea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002cee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002cf2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	85 c0                	test   eax,eax
c0002cfa:	0f 84 25 01 00 00    	je     c0002e25 <create_name+0x268>
c0002d00:	83 f8 20             	cmp    eax,0x20
c0002d03:	74 0f                	je     c0002d14 <create_name+0x157>
c0002d05:	83 f8 2e             	cmp    eax,0x2e
c0002d08:	75 13                	jne    c0002d1d <create_name+0x160>
c0002d0a:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d0e:	0f 84 6a 01 00 00    	je     c0002e7e <create_name+0x2c1>
c0002d14:	83 cb 03             	or     ebx,0x3
c0002d17:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002d1b:	eb ca                	jmp    c0002ce7 <create_name+0x12a>
c0002d1d:	39 cd                	cmp    ebp,ecx
c0002d1f:	73 0b                	jae    c0002d2c <create_name+0x16f>
c0002d21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d25:	75 3f                	jne    c0002d66 <create_name+0x1a9>
c0002d27:	e9 52 01 00 00       	jmp    c0002e7e <create_name+0x2c1>
c0002d2c:	83 f9 0b             	cmp    ecx,0xb
c0002d2f:	75 0d                	jne    c0002d3e <create_name+0x181>
c0002d31:	83 cb 03             	or     ebx,0x3
c0002d34:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d39:	e9 e7 00 00 00       	jmp    c0002e25 <create_name+0x268>
c0002d3e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d42:	74 0d                	je     c0002d51 <create_name+0x194>
c0002d44:	83 cb 03             	or     ebx,0x3
c0002d47:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002d4b:	0f 87 d4 00 00 00    	ja     c0002e25 <create_name+0x268>
c0002d51:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002d56:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002d5a:	b9 0b 00 00 00       	mov    ecx,0xb
c0002d5f:	bd 08 00 00 00       	mov    ebp,0x8
c0002d64:	eb b1                	jmp    c0002d17 <create_name+0x15a>
c0002d66:	83 f8 7f             	cmp    eax,0x7f
c0002d69:	76 66                	jbe    c0002dd1 <create_name+0x214>
c0002d6b:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6f:	89 d9                	mov    ecx,ebx
c0002d71:	83 c9 02             	or     ecx,0x2
c0002d74:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002d78:	52                   	push   edx
c0002d79:	52                   	push   edx
c0002d7a:	68 b5 01 00 00       	push   0x1b5
c0002d7f:	50                   	push   eax
c0002d80:	e8 b3 30 00 00       	call   c0005e38 <ff_uni2oem>
c0002d85:	83 c4 10             	add    esp,0x10
c0002d88:	89 c7                	mov    edi,eax
c0002d8a:	a8 80                	test   al,0x80
c0002d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002d90:	74 0c                	je     c0002d9e <create_name+0x1e1>
c0002d92:	83 e7 7f             	and    edi,0x7f
c0002d95:	0f b6 bf 80 1a 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffde580]
c0002d9c:	eb 2a                	jmp    c0002dc8 <create_name+0x20b>
c0002d9e:	0f b7 c0             	movzx  eax,ax
c0002da1:	3d ff 00 00 00       	cmp    eax,0xff
c0002da6:	76 20                	jbe    c0002dc8 <create_name+0x20b>
c0002da8:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002dab:	39 ea                	cmp    edx,ebp
c0002dad:	77 0a                	ja     c0002db9 <create_name+0x1fc>
c0002daf:	83 cb 03             	or     ebx,0x3
c0002db2:	89 cd                	mov    ebp,ecx
c0002db4:	e9 5e ff ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002db9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002dbd:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002dc1:	45                   	inc    ebp
c0002dc2:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dc6:	eb 4d                	jmp    c0002e15 <create_name+0x258>
c0002dc8:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002dcc:	66 85 ff             	test   di,di
c0002dcf:	74 19                	je     c0002dea <create_name+0x22d>
c0002dd1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002dd5:	0f b7 d7             	movzx  edx,di
c0002dd8:	b8 cb 19 02 c0       	mov    eax,0xc00219cb
c0002ddd:	e8 4d f2 ff ff       	call   c000202f <chk_chr>
c0002de2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002de6:	85 c0                	test   eax,eax
c0002de8:	74 0a                	je     c0002df4 <create_name+0x237>
c0002dea:	83 cb 03             	or     ebx,0x3
c0002ded:	bf 5f 00 00 00       	mov    edi,0x5f
c0002df2:	eb 21                	jmp    c0002e15 <create_name+0x258>
c0002df4:	8d 47 bf             	lea    eax,[edi-0x41]
c0002df7:	66 83 f8 19          	cmp    ax,0x19
c0002dfb:	77 07                	ja     c0002e04 <create_name+0x247>
c0002dfd:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002e02:	eb 11                	jmp    c0002e15 <create_name+0x258>
c0002e04:	8d 47 9f             	lea    eax,[edi-0x61]
c0002e07:	66 83 f8 19          	cmp    ax,0x19
c0002e0b:	77 08                	ja     c0002e15 <create_name+0x258>
c0002e0d:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002e12:	83 ef 20             	sub    edi,0x20
c0002e15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002e19:	89 f8                	mov    eax,edi
c0002e1b:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002e1f:	45                   	inc    ebp
c0002e20:	e9 f2 fe ff ff       	jmp    c0002d17 <create_name+0x15a>
c0002e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e29:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002e2d:	75 04                	jne    c0002e33 <create_name+0x276>
c0002e2f:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002e33:	83 f9 08             	cmp    ecx,0x8
c0002e36:	75 05                	jne    c0002e3d <create_name+0x280>
c0002e38:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002e3d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e41:	83 e0 0c             	and    eax,0xc
c0002e44:	83 f8 0c             	cmp    eax,0xc
c0002e47:	74 0c                	je     c0002e55 <create_name+0x298>
c0002e49:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002e4d:	83 e0 03             	and    eax,0x3
c0002e50:	83 f8 03             	cmp    eax,0x3
c0002e53:	75 05                	jne    c0002e5a <create_name+0x29d>
c0002e55:	83 cb 02             	or     ebx,0x2
c0002e58:	eb 19                	jmp    c0002e73 <create_name+0x2b6>
c0002e5a:	f6 c3 02             	test   bl,0x2
c0002e5d:	75 14                	jne    c0002e73 <create_name+0x2b6>
c0002e5f:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002e64:	74 03                	je     c0002e69 <create_name+0x2ac>
c0002e66:	83 cb 10             	or     ebx,0x10
c0002e69:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002e6e:	74 03                	je     c0002e73 <create_name+0x2b6>
c0002e70:	83 cb 08             	or     ebx,0x8
c0002e73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002e77:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002e7a:	31 c0                	xor    eax,eax
c0002e7c:	eb 0e                	jmp    c0002e8c <create_name+0x2cf>
c0002e7e:	83 f9 0b             	cmp    ecx,0xb
c0002e81:	0f 85 ca fe ff ff    	jne    c0002d51 <create_name+0x194>
c0002e87:	e9 a5 fe ff ff       	jmp    c0002d31 <create_name+0x174>
c0002e8c:	83 c4 3c             	add    esp,0x3c
c0002e8f:	5b                   	pop    ebx
c0002e90:	5e                   	pop    esi
c0002e91:	5f                   	pop    edi
c0002e92:	5d                   	pop    ebp
c0002e93:	c3                   	ret    

c0002e94 <cmp_lfn>:
c0002e94:	55                   	push   ebp
c0002e95:	57                   	push   edi
c0002e96:	89 d7                	mov    edi,edx
c0002e98:	56                   	push   esi
c0002e99:	53                   	push   ebx
c0002e9a:	83 ec 1c             	sub    esp,0x1c
c0002e9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ea1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002ea4:	e8 17 f1 ff ff       	call   c0001fc0 <ld_word>
c0002ea9:	66 85 c0             	test   ax,ax
c0002eac:	74 07                	je     c0002eb5 <cmp_lfn+0x21>
c0002eae:	31 c0                	xor    eax,eax
c0002eb0:	e9 a1 00 00 00       	jmp    c0002f56 <cmp_lfn+0xc2>
c0002eb5:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002eb7:	bd 01 00 00 00       	mov    ebp,0x1
c0002ebc:	83 e3 3f             	and    ebx,0x3f
c0002ebf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ec7:	4b                   	dec    ebx
c0002ec8:	6b db 0d             	imul   ebx,ebx,0xd
c0002ecb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ecf:	0f b6 80 00 1b 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffde500]
c0002ed6:	01 f8                	add    eax,edi
c0002ed8:	e8 e3 f0 ff ff       	call   c0001fc0 <ld_word>
c0002edd:	66 85 ed             	test   bp,bp
c0002ee0:	89 c6                	mov    esi,eax
c0002ee2:	74 3c                	je     c0002f20 <cmp_lfn+0x8c>
c0002ee4:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002eea:	77 c2                	ja     c0002eae <cmp_lfn+0x1a>
c0002eec:	83 ec 0c             	sub    esp,0xc
c0002eef:	0f b7 c0             	movzx  eax,ax
c0002ef2:	50                   	push   eax
c0002ef3:	e8 58 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002ef8:	89 c5                	mov    ebp,eax
c0002efa:	8d 43 01             	lea    eax,[ebx+0x1]
c0002efd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002f01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002f05:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002f09:	89 04 24             	mov    DWORD PTR [esp],eax
c0002f0c:	e8 3f 30 00 00       	call   c0005f50 <ff_wtoupper>
c0002f11:	83 c4 10             	add    esp,0x10
c0002f14:	39 c5                	cmp    ebp,eax
c0002f16:	75 96                	jne    c0002eae <cmp_lfn+0x1a>
c0002f18:	89 f5                	mov    ebp,esi
c0002f1a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002f1e:	eb 0b                	jmp    c0002f2b <cmp_lfn+0x97>
c0002f20:	0f b7 c8             	movzx  ecx,ax
c0002f23:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002f29:	75 83                	jne    c0002eae <cmp_lfn+0x1a>
c0002f2b:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002f2f:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002f34:	75 95                	jne    c0002ecb <cmp_lfn+0x37>
c0002f36:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002f39:	74 16                	je     c0002f51 <cmp_lfn+0xbd>
c0002f3b:	66 85 ed             	test   bp,bp
c0002f3e:	74 11                	je     c0002f51 <cmp_lfn+0xbd>
c0002f40:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002f44:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002f49:	0f 94 c0             	sete   al
c0002f4c:	0f b6 c0             	movzx  eax,al
c0002f4f:	eb 05                	jmp    c0002f56 <cmp_lfn+0xc2>
c0002f51:	b8 01 00 00 00       	mov    eax,0x1
c0002f56:	83 c4 1c             	add    esp,0x1c
c0002f59:	5b                   	pop    ebx
c0002f5a:	5e                   	pop    esi
c0002f5b:	5f                   	pop    edi
c0002f5c:	5d                   	pop    ebp
c0002f5d:	c3                   	ret    

c0002f5e <sync_fs>:
c0002f5e:	56                   	push   esi
c0002f5f:	53                   	push   ebx
c0002f60:	53                   	push   ebx
c0002f61:	89 c3                	mov    ebx,eax
c0002f63:	e8 5c f5 ff ff       	call   c00024c4 <sync_window>
c0002f68:	85 c0                	test   eax,eax
c0002f6a:	0f 85 9a 00 00 00    	jne    c000300a <sync_fs+0xac>
c0002f70:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002f73:	75 7b                	jne    c0002ff0 <sync_fs+0x92>
c0002f75:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002f79:	75 75                	jne    c0002ff0 <sync_fs+0x92>
c0002f7b:	b9 00 02 00 00       	mov    ecx,0x200
c0002f80:	8d 73 34             	lea    esi,[ebx+0x34]
c0002f83:	31 d2                	xor    edx,edx
c0002f85:	89 f0                	mov    eax,esi
c0002f87:	e8 75 f0 ff ff       	call   c0002001 <mem_set>
c0002f8c:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002f92:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002f97:	e8 49 f0 ff ff       	call   c0001fe5 <st_word>
c0002f9c:	ba 52 52 61 41       	mov    edx,0x41615252
c0002fa1:	89 f0                	mov    eax,esi
c0002fa3:	e8 41 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fa8:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002fae:	ba 72 72 41 61       	mov    edx,0x61417272
c0002fb3:	e8 31 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fb8:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002fbb:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002fc1:	e8 23 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fc6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002fc9:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002fcf:	e8 15 f0 ff ff       	call   c0001fe9 <st_dword>
c0002fd4:	6a 01                	push   0x1
c0002fd6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002fd9:	40                   	inc    eax
c0002fda:	50                   	push   eax
c0002fdb:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002fde:	56                   	push   esi
c0002fdf:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002fe3:	50                   	push   eax
c0002fe4:	e8 a2 ef ff ff       	call   c0001f8b <disk_write>
c0002fe9:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002fed:	83 c4 10             	add    esp,0x10
c0002ff0:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002ff4:	51                   	push   ecx
c0002ff5:	6a 00                	push   0x0
c0002ff7:	6a 00                	push   0x0
c0002ff9:	50                   	push   eax
c0002ffa:	e8 a2 ef ff ff       	call   c0001fa1 <disk_ioctl>
c0002fff:	83 c4 10             	add    esp,0x10
c0003002:	85 c0                	test   eax,eax
c0003004:	0f 95 c0             	setne  al
c0003007:	0f b6 c0             	movzx  eax,al
c000300a:	5a                   	pop    edx
c000300b:	5b                   	pop    ebx
c000300c:	5e                   	pop    esi
c000300d:	c3                   	ret    

c000300e <create_partition>:
c000300e:	55                   	push   ebp
c000300f:	0f b6 c0             	movzx  eax,al
c0003012:	57                   	push   edi
c0003013:	56                   	push   esi
c0003014:	53                   	push   ebx
c0003015:	83 ec 40             	sub    esp,0x40
c0003018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000301c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0003020:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003024:	8d 44 24 30          	lea    eax,[esp+0x30]
c0003028:	50                   	push   eax
c0003029:	6a 01                	push   0x1
c000302b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000302f:	e8 6d ef ff ff       	call   c0001fa1 <disk_ioctl>
c0003034:	83 c4 10             	add    esp,0x10
c0003037:	85 c0                	test   eax,eax
c0003039:	0f 85 6a 01 00 00    	jne    c00031a9 <create_partition+0x19b>
c000303f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003043:	b9 05 00 00 00       	mov    ecx,0x5
c0003048:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000304c:	be 08 00 00 00       	mov    esi,0x8
c0003051:	89 f0                	mov    eax,esi
c0003053:	31 d2                	xor    edx,edx
c0003055:	0f b6 d8             	movzx  ebx,al
c0003058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000305c:	f7 f3                	div    ebx
c000305e:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0003063:	76 0a                	jbe    c000306f <create_partition+0x61>
c0003065:	d1 e6                	shl    esi,1
c0003067:	49                   	dec    ecx
c0003068:	75 e7                	jne    c0003051 <create_partition+0x43>
c000306a:	be ff ff ff ff       	mov    esi,0xffffffff
c000306f:	b9 00 02 00 00       	mov    ecx,0x200
c0003074:	31 d2                	xor    edx,edx
c0003076:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000307a:	e8 82 ef ff ff       	call   c0002001 <mem_set>
c000307f:	b9 64 00 00 00       	mov    ecx,0x64
c0003084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003088:	31 d2                	xor    edx,edx
c000308a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0003092:	f7 f1                	div    ecx
c0003094:	b9 3f 00 00 00       	mov    ecx,0x3f
c0003099:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000309d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030a1:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c00030a7:	89 f0                	mov    eax,esi
c00030a9:	0f b6 c0             	movzx  eax,al
c00030ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00030b0:	85 c9                	test   ecx,ecx
c00030b2:	75 34                	jne    c00030e8 <create_partition+0xda>
c00030b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00030b8:	ba 55 aa 00 00       	mov    edx,0xaa55
c00030bd:	05 fe 01 00 00       	add    eax,0x1fe
c00030c2:	e8 1e ef ff ff       	call   c0001fe5 <st_word>
c00030c7:	6a 01                	push   0x1
c00030c9:	6a 00                	push   0x0
c00030cb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00030cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00030d3:	e8 b3 ee ff ff       	call   c0001f8b <disk_write>
c00030d8:	83 c4 10             	add    esp,0x10
c00030db:	85 c0                	test   eax,eax
c00030dd:	0f 95 c0             	setne  al
c00030e0:	0f b6 c0             	movzx  eax,al
c00030e3:	e9 c6 00 00 00       	jmp    c00031ae <create_partition+0x1a0>
c00030e8:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00030ec:	76 c6                	jbe    c00030b4 <create_partition+0xa6>
c00030ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00030f2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00030f6:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c00030f9:	83 fe 64             	cmp    esi,0x64
c00030fc:	77 0d                	ja     c000310b <create_partition+0xfd>
c00030fe:	74 07                	je     c0003107 <create_partition+0xf9>
c0003100:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0003105:	eb 04                	jmp    c000310b <create_partition+0xfd>
c0003107:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c000310b:	31 c0                	xor    eax,eax
c000310d:	89 f2                	mov    edx,esi
c000310f:	01 ca                	add    edx,ecx
c0003111:	0f 92 c0             	setb   al
c0003114:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0003118:	77 04                	ja     c000311e <create_partition+0x110>
c000311a:	85 c0                	test   eax,eax
c000311c:	74 08                	je     c0003126 <create_partition+0x118>
c000311e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003122:	29 ce                	sub    esi,ecx
c0003124:	eb 04                	jmp    c000312a <create_partition+0x11c>
c0003126:	85 f6                	test   esi,esi
c0003128:	74 8a                	je     c00030b4 <create_partition+0xa6>
c000312a:	89 ca                	mov    edx,ecx
c000312c:	89 d8                	mov    eax,ebx
c000312e:	bf 3f 00 00 00       	mov    edi,0x3f
c0003133:	e8 b1 ee ff ff       	call   c0001fe9 <st_dword>
c0003138:	8d 43 04             	lea    eax,[ebx+0x4]
c000313b:	89 f2                	mov    edx,esi
c000313d:	83 c3 10             	add    ebx,0x10
c0003140:	e8 a4 ee ff ff       	call   c0001fe9 <st_dword>
c0003145:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0003149:	31 d2                	xor    edx,edx
c000314b:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c000314e:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0003152:	89 c8                	mov    eax,ecx
c0003154:	01 f1                	add    ecx,esi
c0003156:	f7 f7                	div    edi
c0003158:	89 d5                	mov    ebp,edx
c000315a:	31 d2                	xor    edx,edx
c000315c:	45                   	inc    ebp
c000315d:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003161:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0003164:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0003167:	89 c2                	mov    edx,eax
c0003169:	8d 41 ff             	lea    eax,[ecx-0x1]
c000316c:	c1 ea 02             	shr    edx,0x2
c000316f:	83 e2 c0             	and    edx,0xffffffc0
c0003172:	09 ea                	or     edx,ebp
c0003174:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0003177:	31 d2                	xor    edx,edx
c0003179:	f7 f7                	div    edi
c000317b:	89 d6                	mov    esi,edx
c000317d:	31 d2                	xor    edx,edx
c000317f:	46                   	inc    esi
c0003180:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0003184:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0003187:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c000318a:	89 c7                	mov    edi,eax
c000318c:	c1 ef 02             	shr    edi,0x2
c000318f:	83 e7 c0             	and    edi,0xffffffc0
c0003192:	09 fe                	or     esi,edi
c0003194:	89 f2                	mov    edx,esi
c0003196:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0003199:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c000319e:	0f 85 0c ff ff ff    	jne    c00030b0 <create_partition+0xa2>
c00031a4:	e9 0b ff ff ff       	jmp    c00030b4 <create_partition+0xa6>
c00031a9:	b8 01 00 00 00       	mov    eax,0x1
c00031ae:	83 c4 3c             	add    esp,0x3c
c00031b1:	5b                   	pop    ebx
c00031b2:	5e                   	pop    esi
c00031b3:	5f                   	pop    edi
c00031b4:	5d                   	pop    ebp
c00031b5:	c3                   	ret    

c00031b6 <get_fileinfo>:
c00031b6:	55                   	push   ebp
c00031b7:	57                   	push   edi
c00031b8:	56                   	push   esi
c00031b9:	53                   	push   ebx
c00031ba:	83 ec 1c             	sub    esp,0x1c
c00031bd:	8b 30                	mov    esi,DWORD PTR [eax]
c00031bf:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c00031c3:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00031c7:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c00031cb:	0f 84 d3 01 00 00    	je     c00033a4 <get_fileinfo+0x1ee>
c00031d1:	89 d3                	mov    ebx,edx
c00031d3:	89 c6                	mov    esi,eax
c00031d5:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c00031d9:	74 72                	je     c000324d <get_fileinfo+0x97>
c00031db:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00031e3:	31 ed                	xor    ebp,ebp
c00031e5:	31 ff                	xor    edi,edi
c00031e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00031eb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00031ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00031f2:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c00031f6:	89 c2                	mov    edx,eax
c00031f8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00031fc:	85 c0                	test   eax,eax
c00031fe:	74 41                	je     c0003241 <get_fileinfo+0x8b>
c0003200:	0f b7 c5             	movzx  eax,bp
c0003203:	85 c0                	test   eax,eax
c0003205:	75 0d                	jne    c0003214 <get_fileinfo+0x5e>
c0003207:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c000320d:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003212:	76 22                	jbe    c0003236 <get_fileinfo+0x80>
c0003214:	c1 e0 10             	shl    eax,0x10
c0003217:	b9 ff 00 00 00       	mov    ecx,0xff
c000321c:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003220:	29 f9                	sub    ecx,edi
c0003222:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0003226:	e8 f3 ee ff ff       	call   c000211e <put_utf>
c000322b:	0f b6 c0             	movzx  eax,al
c000322e:	85 c0                	test   eax,eax
c0003230:	74 0d                	je     c000323f <get_fileinfo+0x89>
c0003232:	01 c7                	add    edi,eax
c0003234:	31 d2                	xor    edx,edx
c0003236:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c000323b:	89 d5                	mov    ebp,edx
c000323d:	eb a8                	jmp    c00031e7 <get_fileinfo+0x31>
c000323f:	31 ff                	xor    edi,edi
c0003241:	66 85 ed             	test   bp,bp
c0003244:	74 02                	je     c0003248 <get_fileinfo+0x92>
c0003246:	31 ff                	xor    edi,edi
c0003248:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c000324d:	31 ff                	xor    edi,edi
c000324f:	31 c9                	xor    ecx,ecx
c0003251:	83 f9 0a             	cmp    ecx,0xa
c0003254:	0f 87 ac 00 00 00    	ja     c0003306 <get_fileinfo+0x150>
c000325a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000325d:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003260:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c0003264:	89 c2                	mov    edx,eax
c0003266:	83 f8 20             	cmp    eax,0x20
c0003269:	0f 84 90 00 00 00    	je     c00032ff <get_fileinfo+0x149>
c000326f:	83 f8 05             	cmp    eax,0x5
c0003272:	75 05                	jne    c0003279 <get_fileinfo+0xc3>
c0003274:	ba e5 00 00 00       	mov    edx,0xe5
c0003279:	83 ff 0b             	cmp    edi,0xb
c000327c:	77 0b                	ja     c0003289 <get_fileinfo+0xd3>
c000327e:	83 fd 09             	cmp    ebp,0x9
c0003281:	75 06                	jne    c0003289 <get_fileinfo+0xd3>
c0003283:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0003288:	47                   	inc    edi
c0003289:	0f b7 c2             	movzx  eax,dx
c000328c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003290:	e8 ab ed ff ff       	call   c0002040 <dbc_1st>
c0003295:	85 c0                	test   eax,eax
c0003297:	74 2f                	je     c00032c8 <get_fileinfo+0x112>
c0003299:	83 fd 08             	cmp    ebp,0x8
c000329c:	74 2a                	je     c00032c8 <get_fileinfo+0x112>
c000329e:	83 fd 0b             	cmp    ebp,0xb
c00032a1:	74 25                	je     c00032c8 <get_fileinfo+0x112>
c00032a3:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00032a6:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00032aa:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00032ae:	e8 90 ed ff ff       	call   c0002043 <dbc_2nd>
c00032b3:	85 c0                	test   eax,eax
c00032b5:	74 11                	je     c00032c8 <get_fileinfo+0x112>
c00032b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00032bb:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00032c0:	c1 e0 08             	shl    eax,0x8
c00032c3:	8d 69 02             	lea    ebp,[ecx+0x2]
c00032c6:	09 c2                	or     edx,eax
c00032c8:	0f b7 d2             	movzx  edx,dx
c00032cb:	50                   	push   eax
c00032cc:	50                   	push   eax
c00032cd:	68 b5 01 00 00       	push   0x1b5
c00032d2:	52                   	push   edx
c00032d3:	e8 00 2c 00 00       	call   c0005ed8 <ff_oem2uni>
c00032d8:	83 c4 10             	add    esp,0x10
c00032db:	0f b7 c0             	movzx  eax,ax
c00032de:	85 c0                	test   eax,eax
c00032e0:	75 04                	jne    c00032e6 <get_fileinfo+0x130>
c00032e2:	31 ff                	xor    edi,edi
c00032e4:	eb 20                	jmp    c0003306 <get_fileinfo+0x150>
c00032e6:	b9 0c 00 00 00       	mov    ecx,0xc
c00032eb:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c00032ef:	29 f9                	sub    ecx,edi
c00032f1:	e8 28 ee ff ff       	call   c000211e <put_utf>
c00032f6:	0f b6 c0             	movzx  eax,al
c00032f9:	85 c0                	test   eax,eax
c00032fb:	74 e5                	je     c00032e2 <get_fileinfo+0x12c>
c00032fd:	01 c7                	add    edi,eax
c00032ff:	89 e9                	mov    ecx,ebp
c0003301:	e9 4b ff ff ff       	jmp    c0003251 <get_fileinfo+0x9b>
c0003306:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000330b:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000330f:	75 5f                	jne    c0003370 <get_fileinfo+0x1ba>
c0003311:	85 ff                	test   edi,edi
c0003313:	75 0b                	jne    c0003320 <get_fileinfo+0x16a>
c0003315:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003319:	ba 01 00 00 00       	mov    edx,0x1
c000331e:	eb 3e                	jmp    c000335e <get_fileinfo+0x1a8>
c0003320:	bf 08 00 00 00       	mov    edi,0x8
c0003325:	31 d2                	xor    edx,edx
c0003327:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c000332d:	84 c0                	test   al,al
c000332f:	74 2d                	je     c000335e <get_fileinfo+0x1a8>
c0003331:	66 83 f8 2e          	cmp    ax,0x2e
c0003335:	74 1b                	je     c0003352 <get_fileinfo+0x19c>
c0003337:	8d 48 bf             	lea    ecx,[eax-0x41]
c000333a:	66 83 f9 19          	cmp    cx,0x19
c000333e:	77 17                	ja     c0003357 <get_fileinfo+0x1a1>
c0003340:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003343:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c0003346:	21 f9                	and    ecx,edi
c0003348:	80 e1 18             	and    cl,0x18
c000334b:	74 0a                	je     c0003357 <get_fileinfo+0x1a1>
c000334d:	83 c0 20             	add    eax,0x20
c0003350:	eb 05                	jmp    c0003357 <get_fileinfo+0x1a1>
c0003352:	bf 10 00 00 00       	mov    edi,0x10
c0003357:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000335b:	42                   	inc    edx
c000335c:	eb c9                	jmp    c0003327 <get_fileinfo+0x171>
c000335e:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003363:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003366:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000336a:	75 04                	jne    c0003370 <get_fileinfo+0x1ba>
c000336c:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003370:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003373:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0003376:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003379:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000337c:	83 c0 1c             	add    eax,0x1c
c000337f:	e8 49 ec ff ff       	call   c0001fcd <ld_dword>
c0003384:	89 03                	mov    DWORD PTR [ebx],eax
c0003386:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003389:	83 c0 16             	add    eax,0x16
c000338c:	e8 2f ec ff ff       	call   c0001fc0 <ld_word>
c0003391:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c0003395:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003398:	83 c0 18             	add    eax,0x18
c000339b:	e8 20 ec ff ff       	call   c0001fc0 <ld_word>
c00033a0:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00033a4:	83 c4 1c             	add    esp,0x1c
c00033a7:	5b                   	pop    ebx
c00033a8:	5e                   	pop    esi
c00033a9:	5f                   	pop    edi
c00033aa:	5d                   	pop    ebp
c00033ab:	c3                   	ret    

c00033ac <ld_clust.isra.0>:
c00033ac:	56                   	push   esi
c00033ad:	89 c6                	mov    esi,eax
c00033af:	53                   	push   ebx
c00033b0:	8d 42 1a             	lea    eax,[edx+0x1a]
c00033b3:	89 d3                	mov    ebx,edx
c00033b5:	e8 06 ec ff ff       	call   c0001fc0 <ld_word>
c00033ba:	0f b7 c8             	movzx  ecx,ax
c00033bd:	89 f0                	mov    eax,esi
c00033bf:	3c 03                	cmp    al,0x3
c00033c1:	75 0d                	jne    c00033d0 <ld_clust.isra.0+0x24>
c00033c3:	8d 43 14             	lea    eax,[ebx+0x14]
c00033c6:	e8 f5 eb ff ff       	call   c0001fc0 <ld_word>
c00033cb:	c1 e0 10             	shl    eax,0x10
c00033ce:	09 c1                	or     ecx,eax
c00033d0:	89 c8                	mov    eax,ecx
c00033d2:	5b                   	pop    ebx
c00033d3:	5e                   	pop    esi
c00033d4:	c3                   	ret    

c00033d5 <st_clust.isra.1>:
c00033d5:	56                   	push   esi
c00033d6:	89 c6                	mov    esi,eax
c00033d8:	53                   	push   ebx
c00033d9:	89 d3                	mov    ebx,edx
c00033db:	0f b7 d1             	movzx  edx,cx
c00033de:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00033e1:	e8 ff eb ff ff       	call   c0001fe5 <st_word>
c00033e6:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00033e9:	75 0f                	jne    c00033fa <st_clust.isra.1+0x25>
c00033eb:	c1 e9 10             	shr    ecx,0x10
c00033ee:	8d 43 14             	lea    eax,[ebx+0x14]
c00033f1:	89 ca                	mov    edx,ecx
c00033f3:	5b                   	pop    ebx
c00033f4:	5e                   	pop    esi
c00033f5:	e9 eb eb ff ff       	jmp    c0001fe5 <st_word>
c00033fa:	5b                   	pop    ebx
c00033fb:	5e                   	pop    esi
c00033fc:	c3                   	ret    

c00033fd <get_fat.isra.2>:
c00033fd:	b9 01 00 00 00       	mov    ecx,0x1
c0003402:	83 fa 01             	cmp    edx,0x1
c0003405:	0f 86 f3 00 00 00    	jbe    c00034fe <get_fat.isra.2+0x101>
c000340b:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c000340e:	0f 83 ea 00 00 00    	jae    c00034fe <get_fat.isra.2+0x101>
c0003414:	55                   	push   ebp
c0003415:	57                   	push   edi
c0003416:	89 c7                	mov    edi,eax
c0003418:	56                   	push   esi
c0003419:	89 d6                	mov    esi,edx
c000341b:	53                   	push   ebx
c000341c:	83 ec 0c             	sub    esp,0xc
c000341f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003422:	83 f8 02             	cmp    eax,0x2
c0003425:	74 78                	je     c000349f <get_fat.isra.2+0xa2>
c0003427:	83 f8 03             	cmp    eax,0x3
c000342a:	0f 84 96 00 00 00    	je     c00034c6 <get_fat.isra.2+0xc9>
c0003430:	48                   	dec    eax
c0003431:	0f 85 bd 00 00 00    	jne    c00034f4 <get_fat.isra.2+0xf7>
c0003437:	89 d3                	mov    ebx,edx
c0003439:	89 f8                	mov    eax,edi
c000343b:	d1 eb                	shr    ebx,1
c000343d:	01 d3                	add    ebx,edx
c000343f:	89 da                	mov    edx,ebx
c0003441:	c1 ea 09             	shr    edx,0x9
c0003444:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003447:	e8 db f0 ff ff       	call   c0002527 <move_window>
c000344c:	85 c0                	test   eax,eax
c000344e:	74 08                	je     c0003458 <get_fat.isra.2+0x5b>
c0003450:	83 c9 ff             	or     ecx,0xffffffff
c0003453:	e9 9c 00 00 00       	jmp    c00034f4 <get_fat.isra.2+0xf7>
c0003458:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000345b:	89 f8                	mov    eax,edi
c000345d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003463:	89 ea                	mov    edx,ebp
c0003465:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003469:	c1 ea 09             	shr    edx,0x9
c000346c:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000346f:	e8 b3 f0 ff ff       	call   c0002527 <move_window>
c0003474:	85 c0                	test   eax,eax
c0003476:	75 d8                	jne    c0003450 <get_fat.isra.2+0x53>
c0003478:	0f b6 c3             	movzx  eax,bl
c000347b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003481:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003486:	c1 e3 08             	shl    ebx,0x8
c0003489:	09 c3                	or     ebx,eax
c000348b:	89 d9                	mov    ecx,ebx
c000348d:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c0003493:	83 e6 01             	and    esi,0x1
c0003496:	74 5c                	je     c00034f4 <get_fat.isra.2+0xf7>
c0003498:	89 d9                	mov    ecx,ebx
c000349a:	c1 e9 04             	shr    ecx,0x4
c000349d:	eb 55                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c000349f:	c1 ea 08             	shr    edx,0x8
c00034a2:	89 f8                	mov    eax,edi
c00034a4:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034a7:	e8 7b f0 ff ff       	call   c0002527 <move_window>
c00034ac:	85 c0                	test   eax,eax
c00034ae:	75 a0                	jne    c0003450 <get_fat.isra.2+0x53>
c00034b0:	01 f6                	add    esi,esi
c00034b2:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00034b8:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034bc:	e8 ff ea ff ff       	call   c0001fc0 <ld_word>
c00034c1:	0f b7 c8             	movzx  ecx,ax
c00034c4:	eb 2e                	jmp    c00034f4 <get_fat.isra.2+0xf7>
c00034c6:	c1 ea 07             	shr    edx,0x7
c00034c9:	89 f8                	mov    eax,edi
c00034cb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00034ce:	e8 54 f0 ff ff       	call   c0002527 <move_window>
c00034d3:	85 c0                	test   eax,eax
c00034d5:	0f 85 75 ff ff ff    	jne    c0003450 <get_fat.isra.2+0x53>
c00034db:	c1 e6 02             	shl    esi,0x2
c00034de:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00034e4:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00034e8:	e8 e0 ea ff ff       	call   c0001fcd <ld_dword>
c00034ed:	25 ff ff ff 0f       	and    eax,0xfffffff
c00034f2:	89 c1                	mov    ecx,eax
c00034f4:	83 c4 0c             	add    esp,0xc
c00034f7:	89 c8                	mov    eax,ecx
c00034f9:	5b                   	pop    ebx
c00034fa:	5e                   	pop    esi
c00034fb:	5f                   	pop    edi
c00034fc:	5d                   	pop    ebp
c00034fd:	c3                   	ret    
c00034fe:	89 c8                	mov    eax,ecx
c0003500:	c3                   	ret    

c0003501 <dir_sdi>:
c0003501:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003507:	0f 87 b6 00 00 00    	ja     c00035c3 <dir_sdi+0xc2>
c000350d:	55                   	push   ebp
c000350e:	57                   	push   edi
c000350f:	56                   	push   esi
c0003510:	53                   	push   ebx
c0003511:	89 d3                	mov    ebx,edx
c0003513:	83 ec 1c             	sub    esp,0x1c
c0003516:	f6 c2 1f             	test   dl,0x1f
c0003519:	74 0a                	je     c0003525 <dir_sdi+0x24>
c000351b:	b8 02 00 00 00       	mov    eax,0x2
c0003520:	e9 96 00 00 00       	jmp    c00035bb <dir_sdi+0xba>
c0003525:	89 c6                	mov    esi,eax
c0003527:	8b 38                	mov    edi,DWORD PTR [eax]
c0003529:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000352c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000352f:	85 c9                	test   ecx,ecx
c0003531:	75 23                	jne    c0003556 <dir_sdi+0x55>
c0003533:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003536:	76 07                	jbe    c000353f <dir_sdi+0x3e>
c0003538:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000353b:	85 c0                	test   eax,eax
c000353d:	75 15                	jne    c0003554 <dir_sdi+0x53>
c000353f:	89 da                	mov    edx,ebx
c0003541:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003545:	c1 ea 05             	shr    edx,0x5
c0003548:	39 c2                	cmp    edx,eax
c000354a:	73 cf                	jae    c000351b <dir_sdi+0x1a>
c000354c:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000354f:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003552:	eb 3d                	jmp    c0003591 <dir_sdi+0x90>
c0003554:	89 c1                	mov    ecx,eax
c0003556:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000355a:	c1 e5 09             	shl    ebp,0x9
c000355d:	89 ca                	mov    edx,ecx
c000355f:	39 eb                	cmp    ebx,ebp
c0003561:	72 1c                	jb     c000357f <dir_sdi+0x7e>
c0003563:	8b 06                	mov    eax,DWORD PTR [esi]
c0003565:	e8 93 fe ff ff       	call   c00033fd <get_fat.isra.2>
c000356a:	89 c1                	mov    ecx,eax
c000356c:	83 f8 ff             	cmp    eax,0xffffffff
c000356f:	74 45                	je     c00035b6 <dir_sdi+0xb5>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	76 a5                	jbe    c000351b <dir_sdi+0x1a>
c0003576:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003579:	76 a0                	jbe    c000351b <dir_sdi+0x1a>
c000357b:	29 eb                	sub    ebx,ebp
c000357d:	eb de                	jmp    c000355d <dir_sdi+0x5c>
c000357f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003583:	89 f8                	mov    eax,edi
c0003585:	e8 8d ec ff ff       	call   c0002217 <clst2sect>
c000358a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000358e:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003591:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c0003594:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c0003597:	85 d2                	test   edx,edx
c0003599:	74 80                	je     c000351b <dir_sdi+0x1a>
c000359b:	89 d8                	mov    eax,ebx
c000359d:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00035a3:	c1 e8 09             	shr    eax,0x9
c00035a6:	01 d0                	add    eax,edx
c00035a8:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00035ab:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00035af:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00035b2:	31 c0                	xor    eax,eax
c00035b4:	eb 05                	jmp    c00035bb <dir_sdi+0xba>
c00035b6:	b8 01 00 00 00       	mov    eax,0x1
c00035bb:	83 c4 1c             	add    esp,0x1c
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    
c00035c3:	b8 02 00 00 00       	mov    eax,0x2
c00035c8:	c3                   	ret    

c00035c9 <create_chain>:
c00035c9:	55                   	push   ebp
c00035ca:	89 c5                	mov    ebp,eax
c00035cc:	57                   	push   edi
c00035cd:	89 d7                	mov    edi,edx
c00035cf:	56                   	push   esi
c00035d0:	53                   	push   ebx
c00035d1:	83 ec 1c             	sub    esp,0x1c
c00035d4:	85 d2                	test   edx,edx
c00035d6:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d8:	75 0e                	jne    c00035e8 <create_chain+0x1f>
c00035da:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00035dd:	85 c9                	test   ecx,ecx
c00035df:	74 34                	je     c0003615 <create_chain+0x4c>
c00035e1:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00035e4:	77 34                	ja     c000361a <create_chain+0x51>
c00035e6:	eb 2d                	jmp    c0003615 <create_chain+0x4c>
c00035e8:	89 f0                	mov    eax,esi
c00035ea:	e8 0e fe ff ff       	call   c00033fd <get_fat.isra.2>
c00035ef:	89 c3                	mov    ebx,eax
c00035f1:	83 f8 01             	cmp    eax,0x1
c00035f4:	77 0a                	ja     c0003600 <create_chain+0x37>
c00035f6:	bb 01 00 00 00       	mov    ebx,0x1
c00035fb:	e9 fe 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003600:	83 f8 ff             	cmp    eax,0xffffffff
c0003603:	0f 84 f2 00 00 00    	je     c00036fb <create_chain+0x132>
c0003609:	89 f9                	mov    ecx,edi
c000360b:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c000360e:	76 0a                	jbe    c000361a <create_chain+0x51>
c0003610:	e9 e9 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003615:	b9 01 00 00 00       	mov    ecx,0x1
c000361a:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c000361e:	75 07                	jne    c0003627 <create_chain+0x5e>
c0003620:	31 db                	xor    ebx,ebx
c0003622:	e9 d7 00 00 00       	jmp    c00036fe <create_chain+0x135>
c0003627:	39 f9                	cmp    ecx,edi
c0003629:	75 46                	jne    c0003671 <create_chain+0xa8>
c000362b:	8d 59 01             	lea    ebx,[ecx+0x1]
c000362e:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003631:	77 05                	ja     c0003638 <create_chain+0x6f>
c0003633:	bb 02 00 00 00       	mov    ebx,0x2
c0003638:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000363c:	89 da                	mov    edx,ebx
c000363e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003641:	e8 b7 fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003646:	83 f8 01             	cmp    eax,0x1
c0003649:	74 ab                	je     c00035f6 <create_chain+0x2d>
c000364b:	83 f8 ff             	cmp    eax,0xffffffff
c000364e:	0f 84 a7 00 00 00    	je     c00036fb <create_chain+0x132>
c0003654:	85 c0                	test   eax,eax
c0003656:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000365a:	74 11                	je     c000366d <create_chain+0xa4>
c000365c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c000365f:	83 f8 01             	cmp    eax,0x1
c0003662:	76 0d                	jbe    c0003671 <create_chain+0xa8>
c0003664:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003667:	73 08                	jae    c0003671 <create_chain+0xa8>
c0003669:	89 c1                	mov    ecx,eax
c000366b:	eb 04                	jmp    c0003671 <create_chain+0xa8>
c000366d:	85 db                	test   ebx,ebx
c000366f:	75 3d                	jne    c00036ae <create_chain+0xe5>
c0003671:	89 cb                	mov    ebx,ecx
c0003673:	43                   	inc    ebx
c0003674:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003677:	77 0a                	ja     c0003683 <create_chain+0xba>
c0003679:	83 f9 01             	cmp    ecx,0x1
c000367c:	76 a2                	jbe    c0003620 <create_chain+0x57>
c000367e:	bb 02 00 00 00       	mov    ebx,0x2
c0003683:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003687:	89 da                	mov    edx,ebx
c0003689:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000368c:	e8 6c fd ff ff       	call   c00033fd <get_fat.isra.2>
c0003691:	85 c0                	test   eax,eax
c0003693:	74 19                	je     c00036ae <create_chain+0xe5>
c0003695:	83 f8 01             	cmp    eax,0x1
c0003698:	0f 84 58 ff ff ff    	je     c00035f6 <create_chain+0x2d>
c000369e:	40                   	inc    eax
c000369f:	74 5a                	je     c00036fb <create_chain+0x132>
c00036a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00036a5:	39 cb                	cmp    ebx,ecx
c00036a7:	75 ca                	jne    c0003673 <create_chain+0xaa>
c00036a9:	e9 72 ff ff ff       	jmp    c0003620 <create_chain+0x57>
c00036ae:	83 c9 ff             	or     ecx,0xffffffff
c00036b1:	89 da                	mov    edx,ebx
c00036b3:	89 f0                	mov    eax,esi
c00036b5:	e8 b1 f2 ff ff       	call   c000296b <put_fat>
c00036ba:	85 c0                	test   eax,eax
c00036bc:	75 36                	jne    c00036f4 <create_chain+0x12b>
c00036be:	85 ff                	test   edi,edi
c00036c0:	75 16                	jne    c00036d8 <create_chain+0x10f>
c00036c2:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00036c5:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00036c8:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00036cb:	8d 57 fe             	lea    edx,[edi-0x2]
c00036ce:	39 d0                	cmp    eax,edx
c00036d0:	77 17                	ja     c00036e9 <create_chain+0x120>
c00036d2:	48                   	dec    eax
c00036d3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00036d6:	eb 11                	jmp    c00036e9 <create_chain+0x120>
c00036d8:	89 d9                	mov    ecx,ebx
c00036da:	89 fa                	mov    edx,edi
c00036dc:	89 f0                	mov    eax,esi
c00036de:	e8 88 f2 ff ff       	call   c000296b <put_fat>
c00036e3:	85 c0                	test   eax,eax
c00036e5:	74 db                	je     c00036c2 <create_chain+0xf9>
c00036e7:	eb 0b                	jmp    c00036f4 <create_chain+0x12b>
c00036e9:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c00036ec:	83 c8 01             	or     eax,0x1
c00036ef:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00036f2:	eb 0a                	jmp    c00036fe <create_chain+0x135>
c00036f4:	48                   	dec    eax
c00036f5:	0f 85 fb fe ff ff    	jne    c00035f6 <create_chain+0x2d>
c00036fb:	83 cb ff             	or     ebx,0xffffffff
c00036fe:	83 c4 1c             	add    esp,0x1c
c0003701:	89 d8                	mov    eax,ebx
c0003703:	5b                   	pop    ebx
c0003704:	5e                   	pop    esi
c0003705:	5f                   	pop    edi
c0003706:	5d                   	pop    ebp
c0003707:	c3                   	ret    

c0003708 <remove_chain>:
c0003708:	55                   	push   ebp
c0003709:	57                   	push   edi
c000370a:	56                   	push   esi
c000370b:	89 d6                	mov    esi,edx
c000370d:	53                   	push   ebx
c000370e:	83 ec 0c             	sub    esp,0xc
c0003711:	83 fa 01             	cmp    edx,0x1
c0003714:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003716:	76 6a                	jbe    c0003782 <remove_chain+0x7a>
c0003718:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c000371b:	76 65                	jbe    c0003782 <remove_chain+0x7a>
c000371d:	89 c5                	mov    ebp,eax
c000371f:	89 ca                	mov    edx,ecx
c0003721:	85 c9                	test   ecx,ecx
c0003723:	74 0e                	je     c0003733 <remove_chain+0x2b>
c0003725:	83 c9 ff             	or     ecx,0xffffffff
c0003728:	89 d8                	mov    eax,ebx
c000372a:	e8 3c f2 ff ff       	call   c000296b <put_fat>
c000372f:	85 c0                	test   eax,eax
c0003731:	75 5b                	jne    c000378e <remove_chain+0x86>
c0003733:	89 f2                	mov    edx,esi
c0003735:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003738:	e8 c0 fc ff ff       	call   c00033fd <get_fat.isra.2>
c000373d:	89 c7                	mov    edi,eax
c000373f:	85 c0                	test   eax,eax
c0003741:	75 04                	jne    c0003747 <remove_chain+0x3f>
c0003743:	31 c0                	xor    eax,eax
c0003745:	eb 47                	jmp    c000378e <remove_chain+0x86>
c0003747:	83 f8 01             	cmp    eax,0x1
c000374a:	74 36                	je     c0003782 <remove_chain+0x7a>
c000374c:	83 f8 ff             	cmp    eax,0xffffffff
c000374f:	74 38                	je     c0003789 <remove_chain+0x81>
c0003751:	31 c9                	xor    ecx,ecx
c0003753:	89 f2                	mov    edx,esi
c0003755:	89 d8                	mov    eax,ebx
c0003757:	e8 0f f2 ff ff       	call   c000296b <put_fat>
c000375c:	85 c0                	test   eax,eax
c000375e:	75 2e                	jne    c000378e <remove_chain+0x86>
c0003760:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003763:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003766:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003769:	39 c8                	cmp    eax,ecx
c000376b:	73 0d                	jae    c000377a <remove_chain+0x72>
c000376d:	40                   	inc    eax
c000376e:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003771:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c0003774:	83 c8 01             	or     eax,0x1
c0003777:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c000377a:	89 fe                	mov    esi,edi
c000377c:	39 fa                	cmp    edx,edi
c000377e:	77 b3                	ja     c0003733 <remove_chain+0x2b>
c0003780:	eb c1                	jmp    c0003743 <remove_chain+0x3b>
c0003782:	b8 02 00 00 00       	mov    eax,0x2
c0003787:	eb 05                	jmp    c000378e <remove_chain+0x86>
c0003789:	b8 01 00 00 00       	mov    eax,0x1
c000378e:	83 c4 0c             	add    esp,0xc
c0003791:	5b                   	pop    ebx
c0003792:	5e                   	pop    esi
c0003793:	5f                   	pop    edi
c0003794:	5d                   	pop    ebp
c0003795:	c3                   	ret    

c0003796 <dir_next>:
c0003796:	55                   	push   ebp
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	83 ec 1c             	sub    esp,0x1c
c000379d:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00037a0:	8b 28                	mov    ebp,DWORD PTR [eax]
c00037a2:	83 c7 20             	add    edi,0x20
c00037a5:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00037ab:	76 07                	jbe    c00037b4 <dir_next+0x1e>
c00037ad:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00037b4:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00037b7:	b9 04 00 00 00       	mov    ecx,0x4
c00037bc:	85 f6                	test   esi,esi
c00037be:	0f 84 cd 00 00 00    	je     c0003891 <dir_next+0xfb>
c00037c4:	89 c3                	mov    ebx,eax
c00037c6:	89 d1                	mov    ecx,edx
c00037c8:	89 f8                	mov    eax,edi
c00037ca:	25 ff 01 00 00       	and    eax,0x1ff
c00037cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037d3:	0f 85 a8 00 00 00    	jne    c0003881 <dir_next+0xeb>
c00037d9:	46                   	inc    esi
c00037da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00037dd:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00037e0:	85 d2                	test   edx,edx
c00037e2:	75 22                	jne    c0003806 <dir_next+0x70>
c00037e4:	89 fa                	mov    edx,edi
c00037e6:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00037ea:	c1 ea 05             	shr    edx,0x5
c00037ed:	39 c2                	cmp    edx,eax
c00037ef:	0f 82 8c 00 00 00    	jb     c0003881 <dir_next+0xeb>
c00037f5:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00037fc:	b9 04 00 00 00       	mov    ecx,0x4
c0003801:	e9 8b 00 00 00       	jmp    c0003891 <dir_next+0xfb>
c0003806:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c000380a:	89 fe                	mov    esi,edi
c000380c:	48                   	dec    eax
c000380d:	c1 ee 09             	shr    esi,0x9
c0003810:	85 f0                	test   eax,esi
c0003812:	75 6d                	jne    c0003881 <dir_next+0xeb>
c0003814:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003818:	89 e8                	mov    eax,ebp
c000381a:	e8 de fb ff ff       	call   c00033fd <get_fat.isra.2>
c000381f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003823:	89 c6                	mov    esi,eax
c0003825:	83 f8 01             	cmp    eax,0x1
c0003828:	77 07                	ja     c0003831 <dir_next+0x9b>
c000382a:	b9 02 00 00 00       	mov    ecx,0x2
c000382f:	eb 60                	jmp    c0003891 <dir_next+0xfb>
c0003831:	83 f8 ff             	cmp    eax,0xffffffff
c0003834:	75 07                	jne    c000383d <dir_next+0xa7>
c0003836:	b9 01 00 00 00       	mov    ecx,0x1
c000383b:	eb 54                	jmp    c0003891 <dir_next+0xfb>
c000383d:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003840:	77 30                	ja     c0003872 <dir_next+0xdc>
c0003842:	85 c9                	test   ecx,ecx
c0003844:	74 af                	je     c00037f5 <dir_next+0x5f>
c0003846:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003849:	89 d8                	mov    eax,ebx
c000384b:	e8 79 fd ff ff       	call   c00035c9 <create_chain>
c0003850:	b9 07 00 00 00       	mov    ecx,0x7
c0003855:	89 c6                	mov    esi,eax
c0003857:	85 c0                	test   eax,eax
c0003859:	74 36                	je     c0003891 <dir_next+0xfb>
c000385b:	83 f8 01             	cmp    eax,0x1
c000385e:	74 ca                	je     c000382a <dir_next+0x94>
c0003860:	83 f8 ff             	cmp    eax,0xffffffff
c0003863:	74 d1                	je     c0003836 <dir_next+0xa0>
c0003865:	89 c2                	mov    edx,eax
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 54 f2 ff ff       	call   c0002ac2 <dir_clear>
c000386e:	85 c0                	test   eax,eax
c0003870:	75 c4                	jne    c0003836 <dir_next+0xa0>
c0003872:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0003875:	89 f2                	mov    edx,esi
c0003877:	89 e8                	mov    eax,ebp
c0003879:	e8 99 e9 ff ff       	call   c0002217 <clst2sect>
c000387e:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003881:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003885:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003888:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c000388c:	31 c9                	xor    ecx,ecx
c000388e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003891:	83 c4 1c             	add    esp,0x1c
c0003894:	89 c8                	mov    eax,ecx
c0003896:	5b                   	pop    ebx
c0003897:	5e                   	pop    esi
c0003898:	5f                   	pop    edi
c0003899:	5d                   	pop    ebp
c000389a:	c3                   	ret    

c000389b <dir_alloc>:
c000389b:	55                   	push   ebp
c000389c:	89 c5                	mov    ebp,eax
c000389e:	57                   	push   edi
c000389f:	89 d7                	mov    edi,edx
c00038a1:	56                   	push   esi
c00038a2:	31 d2                	xor    edx,edx
c00038a4:	53                   	push   ebx
c00038a5:	83 ec 0c             	sub    esp,0xc
c00038a8:	8b 30                	mov    esi,DWORD PTR [eax]
c00038aa:	e8 52 fc ff ff       	call   c0003501 <dir_sdi>
c00038af:	85 c0                	test   eax,eax
c00038b1:	75 3b                	jne    c00038ee <dir_alloc+0x53>
c00038b3:	31 db                	xor    ebx,ebx
c00038b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00038b8:	89 f0                	mov    eax,esi
c00038ba:	e8 68 ec ff ff       	call   c0002527 <move_window>
c00038bf:	85 c0                	test   eax,eax
c00038c1:	75 2b                	jne    c00038ee <dir_alloc+0x53>
c00038c3:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00038c6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00038c9:	85 d2                	test   edx,edx
c00038cb:	74 08                	je     c00038d5 <dir_alloc+0x3a>
c00038cd:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00038d3:	75 07                	jne    c00038dc <dir_alloc+0x41>
c00038d5:	43                   	inc    ebx
c00038d6:	39 fb                	cmp    ebx,edi
c00038d8:	75 04                	jne    c00038de <dir_alloc+0x43>
c00038da:	eb 1c                	jmp    c00038f8 <dir_alloc+0x5d>
c00038dc:	31 db                	xor    ebx,ebx
c00038de:	ba 01 00 00 00       	mov    edx,0x1
c00038e3:	89 e8                	mov    eax,ebp
c00038e5:	e8 ac fe ff ff       	call   c0003796 <dir_next>
c00038ea:	85 c0                	test   eax,eax
c00038ec:	74 c7                	je     c00038b5 <dir_alloc+0x1a>
c00038ee:	83 f8 04             	cmp    eax,0x4
c00038f1:	75 05                	jne    c00038f8 <dir_alloc+0x5d>
c00038f3:	b8 07 00 00 00       	mov    eax,0x7
c00038f8:	83 c4 0c             	add    esp,0xc
c00038fb:	5b                   	pop    ebx
c00038fc:	5e                   	pop    esi
c00038fd:	5f                   	pop    edi
c00038fe:	5d                   	pop    ebp
c00038ff:	c3                   	ret    

c0003900 <dir_read>:
c0003900:	55                   	push   ebp
c0003901:	57                   	push   edi
c0003902:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003907:	56                   	push   esi
c0003908:	be 04 00 00 00       	mov    esi,0x4
c000390d:	53                   	push   ebx
c000390e:	89 c3                	mov    ebx,eax
c0003910:	83 ec 1c             	sub    esp,0x1c
c0003913:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003917:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003919:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c000391e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003921:	85 d2                	test   edx,edx
c0003923:	0f 84 e3 00 00 00    	je     c0003a0c <dir_read+0x10c>
c0003929:	89 e8                	mov    eax,ebp
c000392b:	e8 f7 eb ff ff       	call   c0002527 <move_window>
c0003930:	89 c6                	mov    esi,eax
c0003932:	85 c0                	test   eax,eax
c0003934:	0f 85 dd 00 00 00    	jne    c0003a17 <dir_read+0x117>
c000393a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000393d:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003940:	88 04 24             	mov    BYTE PTR [esp],al
c0003943:	85 c0                	test   eax,eax
c0003945:	0f 84 c7 00 00 00    	je     c0003a12 <dir_read+0x112>
c000394b:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c000394e:	83 e1 3f             	and    ecx,0x3f
c0003951:	83 f8 2e             	cmp    eax,0x2e
c0003954:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c0003957:	0f 84 95 00 00 00    	je     c00039f2 <dir_read+0xf2>
c000395d:	3d e5 00 00 00       	cmp    eax,0xe5
c0003962:	0f 84 8a 00 00 00    	je     c00039f2 <dir_read+0xf2>
c0003968:	0f b6 c9             	movzx  ecx,cl
c000396b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000396f:	83 e1 df             	and    ecx,0xffffffdf
c0003972:	83 f9 08             	cmp    ecx,0x8
c0003975:	0f 94 c1             	sete   cl
c0003978:	0f b6 c9             	movzx  ecx,cl
c000397b:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000397f:	75 71                	jne    c00039f2 <dir_read+0xf2>
c0003981:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c0003986:	75 4a                	jne    c00039d2 <dir_read+0xd2>
c0003988:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c000398c:	74 16                	je     c00039a4 <dir_read+0xa4>
c000398e:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003991:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c0003998:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000399c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000399f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00039a2:	eb 0e                	jmp    c00039b2 <dir_read+0xb2>
c00039a4:	89 f9                	mov    ecx,edi
c00039a6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039ab:	0f b6 c9             	movzx  ecx,cl
c00039ae:	39 c1                	cmp    ecx,eax
c00039b0:	75 45                	jne    c00039f7 <dir_read+0xf7>
c00039b2:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00039b6:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039bb:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00039be:	75 37                	jne    c00039f7 <dir_read+0xf7>
c00039c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00039c3:	e8 6c e8 ff ff       	call   c0002234 <pick_lfn>
c00039c8:	85 c0                	test   eax,eax
c00039ca:	74 2b                	je     c00039f7 <dir_read+0xf7>
c00039cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00039cf:	4f                   	dec    edi
c00039d0:	eb 25                	jmp    c00039f7 <dir_read+0xf7>
c00039d2:	89 f8                	mov    eax,edi
c00039d4:	84 c0                	test   al,al
c00039d6:	75 11                	jne    c00039e9 <dir_read+0xe9>
c00039d8:	89 d0                	mov    eax,edx
c00039da:	e8 32 ea ff ff       	call   c0002411 <sum_sfn>
c00039df:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00039e3:	75 04                	jne    c00039e9 <dir_read+0xe9>
c00039e5:	31 f6                	xor    esi,esi
c00039e7:	eb 35                	jmp    c0003a1e <dir_read+0x11e>
c00039e9:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039f0:	eb 2c                	jmp    c0003a1e <dir_read+0x11e>
c00039f2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039f7:	31 d2                	xor    edx,edx
c00039f9:	89 d8                	mov    eax,ebx
c00039fb:	e8 96 fd ff ff       	call   c0003796 <dir_next>
c0003a00:	89 c6                	mov    esi,eax
c0003a02:	85 c0                	test   eax,eax
c0003a04:	0f 84 14 ff ff ff    	je     c000391e <dir_read+0x1e>
c0003a0a:	eb 0b                	jmp    c0003a17 <dir_read+0x117>
c0003a0c:	85 f6                	test   esi,esi
c0003a0e:	74 d5                	je     c00039e5 <dir_read+0xe5>
c0003a10:	eb 05                	jmp    c0003a17 <dir_read+0x117>
c0003a12:	be 04 00 00 00       	mov    esi,0x4
c0003a17:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003a1e:	83 c4 1c             	add    esp,0x1c
c0003a21:	89 f0                	mov    eax,esi
c0003a23:	5b                   	pop    ebx
c0003a24:	5e                   	pop    esi
c0003a25:	5f                   	pop    edi
c0003a26:	5d                   	pop    ebp
c0003a27:	c3                   	ret    

c0003a28 <dir_remove>:
c0003a28:	57                   	push   edi
c0003a29:	56                   	push   esi
c0003a2a:	53                   	push   ebx
c0003a2b:	89 c3                	mov    ebx,eax
c0003a2d:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003a30:	8b 30                	mov    esi,DWORD PTR [eax]
c0003a32:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003a35:	83 fa ff             	cmp    edx,0xffffffff
c0003a38:	74 09                	je     c0003a43 <dir_remove+0x1b>
c0003a3a:	e8 c2 fa ff ff       	call   c0003501 <dir_sdi>
c0003a3f:	85 c0                	test   eax,eax
c0003a41:	75 34                	jne    c0003a77 <dir_remove+0x4f>
c0003a43:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a46:	89 f0                	mov    eax,esi
c0003a48:	e8 da ea ff ff       	call   c0002527 <move_window>
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	75 1c                	jne    c0003a6d <dir_remove+0x45>
c0003a51:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a54:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003a57:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003a5b:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003a5e:	73 17                	jae    c0003a77 <dir_remove+0x4f>
c0003a60:	31 d2                	xor    edx,edx
c0003a62:	89 d8                	mov    eax,ebx
c0003a64:	e8 2d fd ff ff       	call   c0003796 <dir_next>
c0003a69:	85 c0                	test   eax,eax
c0003a6b:	74 d6                	je     c0003a43 <dir_remove+0x1b>
c0003a6d:	83 f8 04             	cmp    eax,0x4
c0003a70:	75 05                	jne    c0003a77 <dir_remove+0x4f>
c0003a72:	b8 02 00 00 00       	mov    eax,0x2
c0003a77:	5b                   	pop    ebx
c0003a78:	5e                   	pop    esi
c0003a79:	5f                   	pop    edi
c0003a7a:	c3                   	ret    

c0003a7b <dir_find>:
c0003a7b:	55                   	push   ebp
c0003a7c:	31 d2                	xor    edx,edx
c0003a7e:	57                   	push   edi
c0003a7f:	56                   	push   esi
c0003a80:	53                   	push   ebx
c0003a81:	89 c3                	mov    ebx,eax
c0003a83:	83 ec 1c             	sub    esp,0x1c
c0003a86:	8b 00                	mov    eax,DWORD PTR [eax]
c0003a88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003a8c:	89 d8                	mov    eax,ebx
c0003a8e:	e8 6e fa ff ff       	call   c0003501 <dir_sdi>
c0003a93:	89 c6                	mov    esi,eax
c0003a95:	85 c0                	test   eax,eax
c0003a97:	0f 85 1d 01 00 00    	jne    c0003bba <dir_find+0x13f>
c0003a9d:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003aa4:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0003aa9:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003aae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003ab1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003ab5:	e8 6d ea ff ff       	call   c0002527 <move_window>
c0003aba:	89 c6                	mov    esi,eax
c0003abc:	85 c0                	test   eax,eax
c0003abe:	0f 85 f6 00 00 00    	jne    c0003bba <dir_find+0x13f>
c0003ac4:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c0003ac7:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c0003acb:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c0003acf:	85 c9                	test   ecx,ecx
c0003ad1:	0f 84 de 00 00 00    	je     c0003bb5 <dir_find+0x13a>
c0003ad7:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c0003ada:	89 d0                	mov    eax,edx
c0003adc:	83 e0 3f             	and    eax,0x3f
c0003adf:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c0003ae5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003ae8:	0f 84 a6 00 00 00    	je     c0003b94 <dir_find+0x119>
c0003aee:	80 e2 08             	and    dl,0x8
c0003af1:	0f b6 c0             	movzx  eax,al
c0003af4:	74 0b                	je     c0003b01 <dir_find+0x86>
c0003af6:	83 f8 0f             	cmp    eax,0xf
c0003af9:	0f 85 95 00 00 00    	jne    c0003b94 <dir_find+0x119>
c0003aff:	eb 05                	jmp    c0003b06 <dir_find+0x8b>
c0003b01:	83 f8 0f             	cmp    eax,0xf
c0003b04:	75 62                	jne    c0003b68 <dir_find+0xed>
c0003b06:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003b0a:	0f 85 90 00 00 00    	jne    c0003ba0 <dir_find+0x125>
c0003b10:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c0003b15:	74 17                	je     c0003b2e <dir_find+0xb3>
c0003b17:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003b1a:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003b22:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0003b26:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003b29:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003b2c:	eb 13                	jmp    c0003b41 <dir_find+0xc6>
c0003b2e:	89 f8                	mov    eax,edi
c0003b30:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b35:	0f b6 d0             	movzx  edx,al
c0003b38:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003b3d:	39 c2                	cmp    edx,eax
c0003b3f:	75 5f                	jne    c0003ba0 <dir_find+0x125>
c0003b41:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0003b45:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003b4a:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003b4d:	75 51                	jne    c0003ba0 <dir_find+0x125>
c0003b4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b53:	89 ea                	mov    edx,ebp
c0003b55:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003b58:	e8 37 f3 ff ff       	call   c0002e94 <cmp_lfn>
c0003b5d:	85 c0                	test   eax,eax
c0003b5f:	74 3f                	je     c0003ba0 <dir_find+0x125>
c0003b61:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0003b65:	4f                   	dec    edi
c0003b66:	eb 38                	jmp    c0003ba0 <dir_find+0x125>
c0003b68:	89 f8                	mov    eax,edi
c0003b6a:	84 c0                	test   al,al
c0003b6c:	75 0d                	jne    c0003b7b <dir_find+0x100>
c0003b6e:	89 e8                	mov    eax,ebp
c0003b70:	e8 9c e8 ff ff       	call   c0002411 <sum_sfn>
c0003b75:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003b79:	74 3f                	je     c0003bba <dir_find+0x13f>
c0003b7b:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003b7f:	75 13                	jne    c0003b94 <dir_find+0x119>
c0003b81:	8d 53 20             	lea    edx,[ebx+0x20]
c0003b84:	b9 0b 00 00 00       	mov    ecx,0xb
c0003b89:	89 e8                	mov    eax,ebp
c0003b8b:	e8 7c e4 ff ff       	call   c000200c <mem_cmp>
c0003b90:	85 c0                	test   eax,eax
c0003b92:	74 26                	je     c0003bba <dir_find+0x13f>
c0003b94:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003b9b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003ba0:	31 d2                	xor    edx,edx
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 ed fb ff ff       	call   c0003796 <dir_next>
c0003ba9:	89 c6                	mov    esi,eax
c0003bab:	85 c0                	test   eax,eax
c0003bad:	0f 84 fb fe ff ff    	je     c0003aae <dir_find+0x33>
c0003bb3:	eb 05                	jmp    c0003bba <dir_find+0x13f>
c0003bb5:	be 04 00 00 00       	mov    esi,0x4
c0003bba:	83 c4 1c             	add    esp,0x1c
c0003bbd:	89 f0                	mov    eax,esi
c0003bbf:	5b                   	pop    ebx
c0003bc0:	5e                   	pop    esi
c0003bc1:	5f                   	pop    edi
c0003bc2:	5d                   	pop    ebp
c0003bc3:	c3                   	ret    

c0003bc4 <follow_path>:
c0003bc4:	56                   	push   esi
c0003bc5:	53                   	push   ebx
c0003bc6:	89 c3                	mov    ebx,eax
c0003bc8:	83 ec 14             	sub    esp,0x14
c0003bcb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003bcf:	8b 30                	mov    esi,DWORD PTR [eax]
c0003bd1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003bd5:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0003bd8:	83 fa 5c             	cmp    edx,0x5c
c0003bdb:	75 07                	jne    c0003be4 <follow_path+0x20>
c0003bdd:	40                   	inc    eax
c0003bde:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003be2:	eb ed                	jmp    c0003bd1 <follow_path+0xd>
c0003be4:	83 fa 2f             	cmp    edx,0x2f
c0003be7:	74 f4                	je     c0003bdd <follow_path+0x19>
c0003be9:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003bf0:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003bf3:	77 3e                	ja     c0003c33 <follow_path+0x6f>
c0003bf5:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003bf9:	31 d2                	xor    edx,edx
c0003bfb:	89 d8                	mov    eax,ebx
c0003bfd:	e8 ff f8 ff ff       	call   c0003501 <dir_sdi>
c0003c02:	eb 4f                	jmp    c0003c53 <follow_path+0x8f>
c0003c04:	89 d8                	mov    eax,ebx
c0003c06:	e8 70 fe ff ff       	call   c0003a7b <dir_find>
c0003c0b:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003c0e:	85 c0                	test   eax,eax
c0003c10:	75 32                	jne    c0003c44 <follow_path+0x80>
c0003c12:	80 e2 04             	and    dl,0x4
c0003c15:	75 3c                	jne    c0003c53 <follow_path+0x8f>
c0003c17:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003c1b:	74 31                	je     c0003c4e <follow_path+0x8a>
c0003c1d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003c20:	25 ff 01 00 00       	and    eax,0x1ff
c0003c25:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003c29:	8a 06                	mov    al,BYTE PTR [esi]
c0003c2b:	e8 7c f7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003c30:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003c33:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003c37:	89 d8                	mov    eax,ebx
c0003c39:	e8 7f ef ff ff       	call   c0002bbd <create_name>
c0003c3e:	85 c0                	test   eax,eax
c0003c40:	74 c2                	je     c0003c04 <follow_path+0x40>
c0003c42:	eb 0f                	jmp    c0003c53 <follow_path+0x8f>
c0003c44:	83 f8 04             	cmp    eax,0x4
c0003c47:	75 0a                	jne    c0003c53 <follow_path+0x8f>
c0003c49:	80 e2 04             	and    dl,0x4
c0003c4c:	75 05                	jne    c0003c53 <follow_path+0x8f>
c0003c4e:	b8 05 00 00 00       	mov    eax,0x5
c0003c53:	83 c4 14             	add    esp,0x14
c0003c56:	5b                   	pop    ebx
c0003c57:	5e                   	pop    esi
c0003c58:	c3                   	ret    

c0003c59 <dir_register>:
c0003c59:	55                   	push   ebp
c0003c5a:	57                   	push   edi
c0003c5b:	56                   	push   esi
c0003c5c:	be 06 00 00 00       	mov    esi,0x6
c0003c61:	53                   	push   ebx
c0003c62:	83 ec 2c             	sub    esp,0x2c
c0003c65:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003c68:	80 e2 a0             	and    dl,0xa0
c0003c6b:	0f 85 66 01 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003c71:	8b 38                	mov    edi,DWORD PTR [eax]
c0003c73:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003c7b:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003c7e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c82:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003c87:	74 06                	je     c0003c8f <dir_register+0x36>
c0003c89:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003c8d:	eb ef                	jmp    c0003c7e <dir_register+0x25>
c0003c8f:	89 c3                	mov    ebx,eax
c0003c91:	b9 0c 00 00 00       	mov    ecx,0xc
c0003c96:	8d 40 20             	lea    eax,[eax+0x20]
c0003c99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003c9d:	89 c2                	mov    edx,eax
c0003c9f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003ca3:	e8 44 e3 ff ff       	call   c0001fec <mem_cpy>
c0003ca8:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003cad:	74 48                	je     c0003cf7 <dir_register+0x9e>
c0003caf:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003cb3:	bd 01 00 00 00       	mov    ebp,0x1
c0003cb8:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003cbb:	55                   	push   ebp
c0003cbc:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003cc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003cc4:	e8 86 e6 ff ff       	call   c000234f <gen_numname>
c0003cc9:	58                   	pop    eax
c0003cca:	89 d8                	mov    eax,ebx
c0003ccc:	e8 aa fd ff ff       	call   c0003a7b <dir_find>
c0003cd1:	89 c6                	mov    esi,eax
c0003cd3:	85 c0                	test   eax,eax
c0003cd5:	75 10                	jne    c0003ce7 <dir_register+0x8e>
c0003cd7:	45                   	inc    ebp
c0003cd8:	83 fd 64             	cmp    ebp,0x64
c0003cdb:	75 db                	jne    c0003cb8 <dir_register+0x5f>
c0003cdd:	be 07 00 00 00       	mov    esi,0x7
c0003ce2:	e9 f0 00 00 00       	jmp    c0003dd7 <dir_register+0x17e>
c0003ce7:	83 f8 04             	cmp    eax,0x4
c0003cea:	0f 85 e7 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003cf0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003cf4:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003cf7:	bd 01 00 00 00       	mov    ebp,0x1
c0003cfc:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003d01:	74 13                	je     c0003d16 <dir_register+0xbd>
c0003d03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003d07:	b9 0d 00 00 00       	mov    ecx,0xd
c0003d0c:	83 c0 0c             	add    eax,0xc
c0003d0f:	31 d2                	xor    edx,edx
c0003d11:	f7 f1                	div    ecx
c0003d13:	8d 68 01             	lea    ebp,[eax+0x1]
c0003d16:	89 ea                	mov    edx,ebp
c0003d18:	89 d8                	mov    eax,ebx
c0003d1a:	e8 7c fb ff ff       	call   c000389b <dir_alloc>
c0003d1f:	89 c6                	mov    esi,eax
c0003d21:	85 c0                	test   eax,eax
c0003d23:	0f 85 ae 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d29:	4d                   	dec    ebp
c0003d2a:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003d2e:	74 67                	je     c0003d97 <dir_register+0x13e>
c0003d30:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003d33:	89 e8                	mov    eax,ebp
c0003d35:	c1 e0 05             	shl    eax,0x5
c0003d38:	29 c2                	sub    edx,eax
c0003d3a:	89 d8                	mov    eax,ebx
c0003d3c:	e8 c0 f7 ff ff       	call   c0003501 <dir_sdi>
c0003d41:	89 c6                	mov    esi,eax
c0003d43:	85 c0                	test   eax,eax
c0003d45:	0f 85 8c 00 00 00    	jne    c0003dd7 <dir_register+0x17e>
c0003d4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003d4f:	e8 bd e6 ff ff       	call   c0002411 <sum_sfn>
c0003d54:	0f b6 e8             	movzx  ebp,al
c0003d57:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d5a:	89 f8                	mov    eax,edi
c0003d5c:	e8 c6 e7 ff ff       	call   c0002527 <move_window>
c0003d61:	89 c6                	mov    esi,eax
c0003d63:	85 c0                	test   eax,eax
c0003d65:	75 70                	jne    c0003dd7 <dir_register+0x17e>
c0003d67:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003d6c:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003d6f:	83 ec 0c             	sub    esp,0xc
c0003d72:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003d75:	55                   	push   ebp
c0003d76:	e8 39 e5 ff ff       	call   c00022b4 <put_lfn>
c0003d7b:	31 d2                	xor    edx,edx
c0003d7d:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003d81:	89 d8                	mov    eax,ebx
c0003d83:	e8 0e fa ff ff       	call   c0003796 <dir_next>
c0003d88:	83 c4 10             	add    esp,0x10
c0003d8b:	89 c6                	mov    esi,eax
c0003d8d:	85 c0                	test   eax,eax
c0003d8f:	75 46                	jne    c0003dd7 <dir_register+0x17e>
c0003d91:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003d95:	75 c0                	jne    c0003d57 <dir_register+0xfe>
c0003d97:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003d9a:	89 f8                	mov    eax,edi
c0003d9c:	e8 86 e7 ff ff       	call   c0002527 <move_window>
c0003da1:	89 c6                	mov    esi,eax
c0003da3:	85 c0                	test   eax,eax
c0003da5:	75 30                	jne    c0003dd7 <dir_register+0x17e>
c0003da7:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003daa:	b9 20 00 00 00       	mov    ecx,0x20
c0003daf:	31 d2                	xor    edx,edx
c0003db1:	e8 4b e2 ff ff       	call   c0002001 <mem_set>
c0003db6:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003db9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003dbd:	b9 0b 00 00 00       	mov    ecx,0xb
c0003dc2:	e8 25 e2 ff ff       	call   c0001fec <mem_cpy>
c0003dc7:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003dca:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003dcd:	83 e0 18             	and    eax,0x18
c0003dd0:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003dd3:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003dd7:	83 c4 2c             	add    esp,0x2c
c0003dda:	89 f0                	mov    eax,esi
c0003ddc:	5b                   	pop    ebx
c0003ddd:	5e                   	pop    esi
c0003dde:	5f                   	pop    edi
c0003ddf:	5d                   	pop    ebp
c0003de0:	c3                   	ret    

c0003de1 <f_mount>:
c0003de1:	53                   	push   ebx
c0003de2:	83 ec 18             	sub    esp,0x18
c0003de5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003de9:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ded:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003df1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003df5:	e8 37 e6 ff ff       	call   c0002431 <get_ldnumber>
c0003dfa:	89 c2                	mov    edx,eax
c0003dfc:	b8 0b 00 00 00       	mov    eax,0xb
c0003e01:	85 d2                	test   edx,edx
c0003e03:	78 39                	js     c0003e3e <f_mount+0x5d>
c0003e05:	8b 04 95 a0 74 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd8b60]
c0003e0c:	85 c0                	test   eax,eax
c0003e0e:	74 03                	je     c0003e13 <f_mount+0x32>
c0003e10:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e17:	85 c0                	test   eax,eax
c0003e19:	74 03                	je     c0003e1e <f_mount+0x3d>
c0003e1b:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003e1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003e22:	89 04 95 a0 74 02 c0 	mov    DWORD PTR [edx*4-0x3ffd8b60],eax
c0003e29:	31 c0                	xor    eax,eax
c0003e2b:	84 db                	test   bl,bl
c0003e2d:	74 0f                	je     c0003e3e <f_mount+0x5d>
c0003e2f:	31 c9                	xor    ecx,ecx
c0003e31:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003e35:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003e39:	e8 3c e8 ff ff       	call   c000267a <mount_volume>
c0003e3e:	83 c4 18             	add    esp,0x18
c0003e41:	5b                   	pop    ebx
c0003e42:	c3                   	ret    

c0003e43 <f_open>:
c0003e43:	55                   	push   ebp
c0003e44:	b8 09 00 00 00       	mov    eax,0x9
c0003e49:	57                   	push   edi
c0003e4a:	56                   	push   esi
c0003e4b:	53                   	push   ebx
c0003e4c:	83 ec 5c             	sub    esp,0x5c
c0003e4f:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003e53:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003e57:	85 db                	test   ebx,ebx
c0003e59:	0f 84 9f 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003e5f:	89 fd                	mov    ebp,edi
c0003e61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e65:	83 e5 3f             	and    ebp,0x3f
c0003e68:	89 e8                	mov    eax,ebp
c0003e6a:	89 ee                	mov    esi,ebp
c0003e6c:	0f b6 c8             	movzx  ecx,al
c0003e6f:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003e73:	e8 02 e8 ff ff       	call   c000267a <mount_volume>
c0003e78:	85 c0                	test   eax,eax
c0003e7a:	0f 85 78 02 00 00    	jne    c00040f8 <f_open+0x2b5>
c0003e80:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e84:	83 ec 0c             	sub    esp,0xc
c0003e87:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003e8b:	68 00 02 00 00       	push   0x200
c0003e90:	e8 73 1f 00 00       	call   c0005e08 <ff_memalloc>
c0003e95:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003e99:	83 c4 10             	add    esp,0x10
c0003e9c:	b8 11 00 00 00       	mov    eax,0x11
c0003ea1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003ea6:	0f 84 52 02 00 00    	je     c00040fe <f_open+0x2bb>
c0003eac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003eb0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eb4:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003eb8:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003ebb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ebf:	e8 00 fd ff ff       	call   c0003bc4 <follow_path>
c0003ec4:	85 c0                	test   eax,eax
c0003ec6:	75 0c                	jne    c0003ed4 <f_open+0x91>
c0003ec8:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ecd:	74 05                	je     c0003ed4 <f_open+0x91>
c0003ecf:	b8 06 00 00 00       	mov    eax,0x6
c0003ed4:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003eda:	0f 84 d5 00 00 00    	je     c0003fb5 <f_open+0x172>
c0003ee0:	85 c0                	test   eax,eax
c0003ee2:	74 21                	je     c0003f05 <f_open+0xc2>
c0003ee4:	83 f8 04             	cmp    eax,0x4
c0003ee7:	0f 85 f0 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003eed:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003ef1:	e8 63 fd ff ff       	call   c0003c59 <dir_register>
c0003ef6:	85 c0                	test   eax,eax
c0003ef8:	0f 85 df 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003efe:	83 cd 08             	or     ebp,0x8
c0003f01:	89 ee                	mov    esi,ebp
c0003f03:	eb 2c                	jmp    c0003f31 <f_open+0xee>
c0003f05:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003f09:	b8 07 00 00 00       	mov    eax,0x7
c0003f0e:	80 e2 11             	and    dl,0x11
c0003f11:	0f 85 c6 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f17:	b8 08 00 00 00       	mov    eax,0x8
c0003f1c:	f7 c7 04 00 00 00    	test   edi,0x4
c0003f22:	0f 85 b5 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f28:	83 e7 08             	and    edi,0x8
c0003f2b:	0f 84 b1 00 00 00    	je     c0003fe2 <f_open+0x19f>
c0003f31:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003f35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f39:	89 ea                	mov    edx,ebp
c0003f3b:	8a 00                	mov    al,BYTE PTR [eax]
c0003f3d:	e8 6a f4 ff ff       	call   c00033ac <ld_clust.isra.0>
c0003f42:	ba 00 00 21 50       	mov    edx,0x50210000
c0003f47:	89 c7                	mov    edi,eax
c0003f49:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003f4c:	e8 98 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f51:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f55:	31 c9                	xor    ecx,ecx
c0003f57:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003f5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f5f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003f63:	e8 6d f4 ff ff       	call   c00033d5 <st_clust.isra.1>
c0003f68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003f6c:	31 d2                	xor    edx,edx
c0003f6e:	83 c0 1c             	add    eax,0x1c
c0003f71:	e8 73 e0 ff ff       	call   c0001fe9 <st_dword>
c0003f76:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f7a:	85 ff                	test   edi,edi
c0003f7c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003f80:	74 60                	je     c0003fe2 <f_open+0x19f>
c0003f82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003f86:	31 c9                	xor    ecx,ecx
c0003f88:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003f8b:	89 fa                	mov    edx,edi
c0003f8d:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003f91:	e8 72 f7 ff ff       	call   c0003708 <remove_chain>
c0003f96:	85 c0                	test   eax,eax
c0003f98:	0f 85 3f 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003f9e:	89 ea                	mov    edx,ebp
c0003fa0:	4f                   	dec    edi
c0003fa1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003fa5:	e8 7d e5 ff ff       	call   c0002527 <move_window>
c0003faa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003fae:	85 c0                	test   eax,eax
c0003fb0:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003fb3:	eb 27                	jmp    c0003fdc <f_open+0x199>
c0003fb5:	85 c0                	test   eax,eax
c0003fb7:	0f 85 20 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fbd:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003fc1:	b8 04 00 00 00       	mov    eax,0x4
c0003fc6:	f6 c2 10             	test   dl,0x10
c0003fc9:	0f 85 0e 01 00 00    	jne    c00040dd <f_open+0x29a>
c0003fcf:	83 e7 02             	and    edi,0x2
c0003fd2:	74 0e                	je     c0003fe2 <f_open+0x19f>
c0003fd4:	b8 07 00 00 00       	mov    eax,0x7
c0003fd9:	80 e2 01             	and    dl,0x1
c0003fdc:	0f 85 fb 00 00 00    	jne    c00040dd <f_open+0x29a>
c0003fe2:	f7 c6 08 00 00 00    	test   esi,0x8
c0003fe8:	74 03                	je     c0003fed <f_open+0x1aa>
c0003fea:	83 ce 40             	or     esi,0x40
c0003fed:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003ff1:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ff5:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003ff8:	89 fa                	mov    edx,edi
c0003ffa:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003ffd:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004000:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0004003:	e8 a4 f3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004008:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000400b:	8d 47 1c             	lea    eax,[edi+0x1c]
c000400e:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004011:	e8 b7 df ff ff       	call   c0001fcd <ld_dword>
c0004016:	89 2b                	mov    DWORD PTR [ebx],ebp
c0004018:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000401b:	31 d2                	xor    edx,edx
c000401d:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0004021:	b9 00 02 00 00       	mov    ecx,0x200
c0004026:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000402a:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c000402e:	89 f0                	mov    eax,esi
c0004030:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0004037:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000403a:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0004041:	89 f8                	mov    eax,edi
c0004043:	e8 b9 df ff ff       	call   c0002001 <mem_set>
c0004048:	83 e6 20             	and    esi,0x20
c000404b:	75 07                	jne    c0004054 <f_open+0x211>
c000404d:	31 c0                	xor    eax,eax
c000404f:	e9 89 00 00 00       	jmp    c00040dd <f_open+0x29a>
c0004054:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0004057:	85 ed                	test   ebp,ebp
c0004059:	74 f2                	je     c000404d <f_open+0x20a>
c000405b:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c000405e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004062:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004065:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0004069:	c1 e6 09             	shl    esi,0x9
c000406c:	39 ee                	cmp    esi,ebp
c000406e:	73 1c                	jae    c000408c <f_open+0x249>
c0004070:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004072:	29 f5                	sub    ebp,esi
c0004074:	e8 84 f3 ff ff       	call   c00033fd <get_fat.isra.2>
c0004079:	89 c2                	mov    edx,eax
c000407b:	83 f8 01             	cmp    eax,0x1
c000407e:	76 10                	jbe    c0004090 <f_open+0x24d>
c0004080:	83 f8 ff             	cmp    eax,0xffffffff
c0004083:	75 e7                	jne    c000406c <f_open+0x229>
c0004085:	b8 01 00 00 00       	mov    eax,0x1
c000408a:	eb 09                	jmp    c0004095 <f_open+0x252>
c000408c:	31 c0                	xor    eax,eax
c000408e:	eb 05                	jmp    c0004095 <f_open+0x252>
c0004090:	b8 02 00 00 00       	mov    eax,0x2
c0004095:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0004098:	85 c0                	test   eax,eax
c000409a:	75 41                	jne    c00040dd <f_open+0x29a>
c000409c:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c00040a2:	74 a9                	je     c000404d <f_open+0x20a>
c00040a4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00040a8:	89 f0                	mov    eax,esi
c00040aa:	e8 68 e1 ff ff       	call   c0002217 <clst2sect>
c00040af:	89 c2                	mov    edx,eax
c00040b1:	b8 02 00 00 00       	mov    eax,0x2
c00040b6:	85 d2                	test   edx,edx
c00040b8:	74 23                	je     c00040dd <f_open+0x29a>
c00040ba:	c1 ed 09             	shr    ebp,0x9
c00040bd:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c00040c1:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00040c4:	6a 01                	push   0x1
c00040c6:	50                   	push   eax
c00040c7:	57                   	push   edi
c00040c8:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00040cc:	50                   	push   eax
c00040cd:	e8 a3 de ff ff       	call   c0001f75 <disk_read>
c00040d2:	83 c4 10             	add    esp,0x10
c00040d5:	85 c0                	test   eax,eax
c00040d7:	0f 95 c0             	setne  al
c00040da:	0f b6 c0             	movzx  eax,al
c00040dd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00040e1:	83 ec 0c             	sub    esp,0xc
c00040e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00040e8:	e8 33 1d 00 00       	call   c0005e20 <ff_memfree>
c00040ed:	83 c4 10             	add    esp,0x10
c00040f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00040f4:	85 c0                	test   eax,eax
c00040f6:	74 06                	je     c00040fe <f_open+0x2bb>
c00040f8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00040fe:	83 c4 5c             	add    esp,0x5c
c0004101:	5b                   	pop    ebx
c0004102:	5e                   	pop    esi
c0004103:	5f                   	pop    edi
c0004104:	5d                   	pop    ebp
c0004105:	c3                   	ret    

c0004106 <f_read>:
c0004106:	55                   	push   ebp
c0004107:	57                   	push   edi
c0004108:	56                   	push   esi
c0004109:	53                   	push   ebx
c000410a:	83 ec 2c             	sub    esp,0x2c
c000410d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004111:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004115:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000411b:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000411f:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004123:	89 d8                	mov    eax,ebx
c0004125:	e8 54 e3 ff ff       	call   c000247e <validate>
c000412a:	89 c5                	mov    ebp,eax
c000412c:	85 c0                	test   eax,eax
c000412e:	0f 85 c7 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004134:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004138:	85 ed                	test   ebp,ebp
c000413a:	0f 85 bb 01 00 00    	jne    c00042fb <f_read+0x1f5>
c0004140:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0004144:	0f 84 ac 01 00 00    	je     c00042f6 <f_read+0x1f0>
c000414a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000414d:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0004150:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0004154:	39 f0                	cmp    eax,esi
c0004156:	0f 86 b0 00 00 00    	jbe    c000420c <f_read+0x106>
c000415c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0004160:	e9 a7 00 00 00       	jmp    c000420c <f_read+0x106>
c0004165:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004168:	a9 ff 01 00 00       	test   eax,0x1ff
c000416d:	0f 85 56 01 00 00    	jne    c00042c9 <f_read+0x1c3>
c0004173:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004177:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c000417b:	89 c2                	mov    edx,eax
c000417d:	4f                   	dec    edi
c000417e:	c1 ea 09             	shr    edx,0x9
c0004181:	21 d7                	and    edi,edx
c0004183:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0004187:	0f 84 8f 00 00 00    	je     c000421c <f_read+0x116>
c000418d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004191:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004194:	89 c8                	mov    eax,ecx
c0004196:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000419a:	e8 78 e0 ff ff       	call   c0002217 <clst2sect>
c000419f:	85 c0                	test   eax,eax
c00041a1:	0f 84 8d 00 00 00    	je     c0004234 <f_read+0x12e>
c00041a7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00041ab:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c00041b3:	8d 3c 01             	lea    edi,[ecx+eax*1]
c00041b6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041ba:	0f 86 bf 00 00 00    	jbe    c000427f <f_read+0x179>
c00041c0:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00041c4:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041c8:	c1 ee 09             	shr    esi,0x9
c00041cb:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041cf:	01 f2                	add    edx,esi
c00041d1:	39 c2                	cmp    edx,eax
c00041d3:	76 06                	jbe    c00041db <f_read+0xd5>
c00041d5:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041d9:	89 c6                	mov    esi,eax
c00041db:	56                   	push   esi
c00041dc:	57                   	push   edi
c00041dd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041e1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041e5:	50                   	push   eax
c00041e6:	e8 8a dd ff ff       	call   c0001f75 <disk_read>
c00041eb:	83 c4 10             	add    esp,0x10
c00041ee:	85 c0                	test   eax,eax
c00041f0:	75 55                	jne    c0004247 <f_read+0x141>
c00041f2:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041f6:	75 65                	jne    c000425d <f_read+0x157>
c00041f8:	c1 e6 09             	shl    esi,0x9
c00041fb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00041ff:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c0004203:	01 30                	add    DWORD PTR [eax],esi
c0004205:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004209:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000420c:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004211:	0f 85 4e ff ff ff    	jne    c0004165 <f_read+0x5f>
c0004217:	e9 df 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c000421c:	85 c0                	test   eax,eax
c000421e:	75 05                	jne    c0004225 <f_read+0x11f>
c0004220:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004223:	eb 0a                	jmp    c000422f <f_read+0x129>
c0004225:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004228:	8b 03                	mov    eax,DWORD PTR [ebx]
c000422a:	e8 ce f1 ff ff       	call   c00033fd <get_fat.isra.2>
c000422f:	83 f8 01             	cmp    eax,0x1
c0004232:	77 0e                	ja     c0004242 <f_read+0x13c>
c0004234:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004238:	bd 02 00 00 00       	mov    ebp,0x2
c000423d:	e9 b9 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004242:	83 f8 ff             	cmp    eax,0xffffffff
c0004245:	75 0e                	jne    c0004255 <f_read+0x14f>
c0004247:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000424b:	bd 01 00 00 00       	mov    ebp,0x1
c0004250:	e9 a6 00 00 00       	jmp    c00042fb <f_read+0x1f5>
c0004255:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004258:	e9 30 ff ff ff       	jmp    c000418d <f_read+0x87>
c000425d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004260:	29 f8                	sub    eax,edi
c0004262:	39 f0                	cmp    eax,esi
c0004264:	73 92                	jae    c00041f8 <f_read+0xf2>
c0004266:	c1 e0 09             	shl    eax,0x9
c0004269:	8d 53 28             	lea    edx,[ebx+0x28]
c000426c:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004270:	b9 00 02 00 00       	mov    ecx,0x200
c0004275:	e8 72 dd ff ff       	call   c0001fec <mem_cpy>
c000427a:	e9 79 ff ff ff       	jmp    c00041f8 <f_read+0xf2>
c000427f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004282:	39 f8                	cmp    eax,edi
c0004284:	74 40                	je     c00042c6 <f_read+0x1c0>
c0004286:	8d 73 28             	lea    esi,[ebx+0x28]
c0004289:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000428d:	74 1e                	je     c00042ad <f_read+0x1a7>
c000428f:	6a 01                	push   0x1
c0004291:	50                   	push   eax
c0004292:	56                   	push   esi
c0004293:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004297:	50                   	push   eax
c0004298:	e8 ee dc ff ff       	call   c0001f8b <disk_write>
c000429d:	83 c4 10             	add    esp,0x10
c00042a0:	85 c0                	test   eax,eax
c00042a2:	75 a3                	jne    c0004247 <f_read+0x141>
c00042a4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042a7:	83 e0 7f             	and    eax,0x7f
c00042aa:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042ad:	6a 01                	push   0x1
c00042af:	57                   	push   edi
c00042b0:	56                   	push   esi
c00042b1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042b5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042b9:	50                   	push   eax
c00042ba:	e8 b6 dc ff ff       	call   c0001f75 <disk_read>
c00042bf:	83 c4 10             	add    esp,0x10
c00042c2:	85 c0                	test   eax,eax
c00042c4:	75 81                	jne    c0004247 <f_read+0x141>
c00042c6:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00042c9:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042cc:	ba 00 02 00 00       	mov    edx,0x200
c00042d1:	25 ff 01 00 00       	and    eax,0x1ff
c00042d6:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00042da:	29 c2                	sub    edx,eax
c00042dc:	39 d6                	cmp    esi,edx
c00042de:	76 02                	jbe    c00042e2 <f_read+0x1dc>
c00042e0:	89 d6                	mov    esi,edx
c00042e2:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00042e6:	89 f1                	mov    ecx,esi
c00042e8:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00042ec:	e8 fb dc ff ff       	call   c0001fec <mem_cpy>
c00042f1:	e9 05 ff ff ff       	jmp    c00041fb <f_read+0xf5>
c00042f6:	bd 07 00 00 00       	mov    ebp,0x7
c00042fb:	83 c4 2c             	add    esp,0x2c
c00042fe:	89 e8                	mov    eax,ebp
c0004300:	5b                   	pop    ebx
c0004301:	5e                   	pop    esi
c0004302:	5f                   	pop    edi
c0004303:	5d                   	pop    ebp
c0004304:	c3                   	ret    

c0004305 <f_write>:
c0004305:	55                   	push   ebp
c0004306:	57                   	push   edi
c0004307:	56                   	push   esi
c0004308:	53                   	push   ebx
c0004309:	83 ec 2c             	sub    esp,0x2c
c000430c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004310:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004314:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000431a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000431e:	89 d8                	mov    eax,ebx
c0004320:	e8 59 e1 ff ff       	call   c000247e <validate>
c0004325:	89 c5                	mov    ebp,eax
c0004327:	85 c0                	test   eax,eax
c0004329:	0f 85 14 02 00 00    	jne    c0004543 <f_write+0x23e>
c000432f:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004333:	85 ed                	test   ebp,ebp
c0004335:	0f 85 08 02 00 00    	jne    c0004543 <f_write+0x23e>
c000433b:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433f:	0f 84 f9 01 00 00    	je     c000453e <f_write+0x239>
c0004345:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004348:	89 c7                	mov    edi,eax
c000434a:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c000434e:	0f 83 ef 00 00 00    	jae    c0004443 <f_write+0x13e>
c0004354:	f7 d0                	not    eax
c0004356:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000435a:	e9 e4 00 00 00       	jmp    c0004443 <f_write+0x13e>
c000435f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004362:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0004368:	0f 85 9a 01 00 00    	jne    c0004508 <f_write+0x203>
c000436e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004372:	89 d1                	mov    ecx,edx
c0004374:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0004378:	c1 e9 09             	shr    ecx,0x9
c000437b:	48                   	dec    eax
c000437c:	21 c8                	and    eax,ecx
c000437e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004382:	0f 84 c8 00 00 00    	je     c0004450 <f_write+0x14b>
c0004388:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000438c:	0f 85 22 01 00 00    	jne    c00044b4 <f_write+0x1af>
c0004392:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004396:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004399:	89 c8                	mov    eax,ecx
c000439b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000439f:	e8 73 de ff ff       	call   c0002217 <clst2sect>
c00043a4:	85 c0                	test   eax,eax
c00043a6:	0f 84 d2 00 00 00    	je     c000447e <f_write+0x179>
c00043ac:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00043b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00043b4:	01 c7                	add    edi,eax
c00043b6:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00043be:	0f 86 1c 01 00 00    	jbe    c00044e0 <f_write+0x1db>
c00043c4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00043c8:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00043cc:	c1 ee 09             	shr    esi,0x9
c00043cf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00043d3:	01 f2                	add    edx,esi
c00043d5:	39 c2                	cmp    edx,eax
c00043d7:	76 06                	jbe    c00043df <f_write+0xda>
c00043d9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00043dd:	89 c6                	mov    esi,eax
c00043df:	56                   	push   esi
c00043e0:	57                   	push   edi
c00043e1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00043e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00043e9:	50                   	push   eax
c00043ea:	e8 9c db ff ff       	call   c0001f8b <disk_write>
c00043ef:	83 c4 10             	add    esp,0x10
c00043f2:	85 c0                	test   eax,eax
c00043f4:	0f 85 97 00 00 00    	jne    c0004491 <f_write+0x18c>
c00043fa:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00043fd:	29 fa                	sub    edx,edi
c00043ff:	39 f2                	cmp    edx,esi
c0004401:	73 1d                	jae    c0004420 <f_write+0x11b>
c0004403:	8d 43 28             	lea    eax,[ebx+0x28]
c0004406:	c1 e2 09             	shl    edx,0x9
c0004409:	b9 00 02 00 00       	mov    ecx,0x200
c000440e:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004412:	e8 d5 db ff ff       	call   c0001fec <mem_cpy>
c0004417:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000441a:	83 e0 7f             	and    eax,0x7f
c000441d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004420:	c1 e6 09             	shl    esi,0x9
c0004423:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004427:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000442b:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000442f:	01 30                	add    DWORD PTR [eax],esi
c0004431:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004434:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004437:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000443a:	39 f0                	cmp    eax,esi
c000443c:	73 02                	jae    c0004440 <f_write+0x13b>
c000443e:	89 f0                	mov    eax,esi
c0004440:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004443:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004448:	0f 85 11 ff ff ff    	jne    c000435f <f_write+0x5a>
c000444e:	eb 1b                	jmp    c000446b <f_write+0x166>
c0004450:	85 d2                	test   edx,edx
c0004452:	75 09                	jne    c000445d <f_write+0x158>
c0004454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004457:	85 c0                	test   eax,eax
c0004459:	75 1e                	jne    c0004479 <f_write+0x174>
c000445b:	eb 03                	jmp    c0004460 <f_write+0x15b>
c000445d:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004460:	89 d8                	mov    eax,ebx
c0004462:	e8 62 f1 ff ff       	call   c00035c9 <create_chain>
c0004467:	85 c0                	test   eax,eax
c0004469:	75 0e                	jne    c0004479 <f_write+0x174>
c000446b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000446e:	83 c8 40             	or     eax,0x40
c0004471:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004474:	e9 ca 00 00 00       	jmp    c0004543 <f_write+0x23e>
c0004479:	83 f8 01             	cmp    eax,0x1
c000447c:	75 0e                	jne    c000448c <f_write+0x187>
c000447e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004482:	bd 02 00 00 00       	mov    ebp,0x2
c0004487:	e9 b7 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000448c:	83 f8 ff             	cmp    eax,0xffffffff
c000448f:	75 0e                	jne    c000449f <f_write+0x19a>
c0004491:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004495:	bd 01 00 00 00       	mov    ebp,0x1
c000449a:	e9 a4 00 00 00       	jmp    c0004543 <f_write+0x23e>
c000449f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00044a2:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00044a6:	0f 85 dc fe ff ff    	jne    c0004388 <f_write+0x83>
c00044ac:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00044af:	e9 d4 fe ff ff       	jmp    c0004388 <f_write+0x83>
c00044b4:	6a 01                	push   0x1
c00044b6:	8d 43 28             	lea    eax,[ebx+0x28]
c00044b9:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00044bc:	50                   	push   eax
c00044bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044c5:	50                   	push   eax
c00044c6:	e8 c0 da ff ff       	call   c0001f8b <disk_write>
c00044cb:	83 c4 10             	add    esp,0x10
c00044ce:	85 c0                	test   eax,eax
c00044d0:	75 bf                	jne    c0004491 <f_write+0x18c>
c00044d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00044d5:	83 e0 7f             	and    eax,0x7f
c00044d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00044db:	e9 b2 fe ff ff       	jmp    c0004392 <f_write+0x8d>
c00044e0:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00044e3:	74 20                	je     c0004505 <f_write+0x200>
c00044e5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00044e8:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00044eb:	76 18                	jbe    c0004505 <f_write+0x200>
c00044ed:	6a 01                	push   0x1
c00044ef:	8d 43 28             	lea    eax,[ebx+0x28]
c00044f2:	57                   	push   edi
c00044f3:	50                   	push   eax
c00044f4:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00044f8:	50                   	push   eax
c00044f9:	e8 77 da ff ff       	call   c0001f75 <disk_read>
c00044fe:	83 c4 10             	add    esp,0x10
c0004501:	85 c0                	test   eax,eax
c0004503:	75 8c                	jne    c0004491 <f_write+0x18c>
c0004505:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c0004508:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000450b:	ba 00 02 00 00       	mov    edx,0x200
c0004510:	25 ff 01 00 00       	and    eax,0x1ff
c0004515:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004519:	29 c2                	sub    edx,eax
c000451b:	39 d6                	cmp    esi,edx
c000451d:	76 02                	jbe    c0004521 <f_write+0x21c>
c000451f:	89 d6                	mov    esi,edx
c0004521:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004525:	89 f1                	mov    ecx,esi
c0004527:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000452b:	e8 bc da ff ff       	call   c0001fec <mem_cpy>
c0004530:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004533:	83 c8 80             	or     eax,0xffffff80
c0004536:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004539:	e9 e5 fe ff ff       	jmp    c0004423 <f_write+0x11e>
c000453e:	bd 07 00 00 00       	mov    ebp,0x7
c0004543:	83 c4 2c             	add    esp,0x2c
c0004546:	89 e8                	mov    eax,ebp
c0004548:	5b                   	pop    ebx
c0004549:	5e                   	pop    esi
c000454a:	5f                   	pop    edi
c000454b:	5d                   	pop    ebp
c000454c:	c3                   	ret    

c000454d <f_sync>:
c000454d:	56                   	push   esi
c000454e:	53                   	push   ebx
c000454f:	83 ec 14             	sub    esp,0x14
c0004552:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004556:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 1d df ff ff       	call   c000247e <validate>
c0004561:	85 c0                	test   eax,eax
c0004563:	0f 85 a3 00 00 00    	jne    c000460c <f_sync+0xbf>
c0004569:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000456c:	f6 c2 40             	test   dl,0x40
c000456f:	0f 84 97 00 00 00    	je     c000460c <f_sync+0xbf>
c0004575:	80 e2 80             	and    dl,0x80
c0004578:	74 2e                	je     c00045a8 <f_sync+0x5b>
c000457a:	6a 01                	push   0x1
c000457c:	8d 43 28             	lea    eax,[ebx+0x28]
c000457f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004582:	50                   	push   eax
c0004583:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004587:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000458b:	50                   	push   eax
c000458c:	e8 fa d9 ff ff       	call   c0001f8b <disk_write>
c0004591:	83 c4 10             	add    esp,0x10
c0004594:	89 c2                	mov    edx,eax
c0004596:	b8 01 00 00 00       	mov    eax,0x1
c000459b:	85 d2                	test   edx,edx
c000459d:	75 6d                	jne    c000460c <f_sync+0xbf>
c000459f:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045a2:	83 e0 7f             	and    eax,0x7f
c00045a5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045a8:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00045ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045af:	e8 73 df ff ff       	call   c0002527 <move_window>
c00045b4:	85 c0                	test   eax,eax
c00045b6:	75 54                	jne    c000460c <f_sync+0xbf>
c00045b8:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00045bb:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00045be:	89 f2                	mov    edx,esi
c00045c0:	83 c8 20             	or     eax,0x20
c00045c3:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00045c6:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00045c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00045cb:	e8 05 ee ff ff       	call   c00033d5 <st_clust.isra.1>
c00045d0:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00045d3:	8d 46 1c             	lea    eax,[esi+0x1c]
c00045d6:	e8 0e da ff ff       	call   c0001fe9 <st_dword>
c00045db:	8d 46 16             	lea    eax,[esi+0x16]
c00045de:	ba 00 00 21 50       	mov    edx,0x50210000
c00045e3:	e8 01 da ff ff       	call   c0001fe9 <st_dword>
c00045e8:	31 d2                	xor    edx,edx
c00045ea:	8d 46 12             	lea    eax,[esi+0x12]
c00045ed:	e8 f3 d9 ff ff       	call   c0001fe5 <st_word>
c00045f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045f6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00045fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00045fe:	e8 5b e9 ff ff       	call   c0002f5e <sync_fs>
c0004603:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004606:	83 e2 bf             	and    edx,0xffffffbf
c0004609:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000460c:	83 c4 14             	add    esp,0x14
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <f_close>:
c0004612:	53                   	push   ebx
c0004613:	83 ec 24             	sub    esp,0x24
c0004616:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000461a:	53                   	push   ebx
c000461b:	e8 2d ff ff ff       	call   c000454d <f_sync>
c0004620:	83 c4 10             	add    esp,0x10
c0004623:	85 c0                	test   eax,eax
c0004625:	75 15                	jne    c000463c <f_close+0x2a>
c0004627:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000462b:	89 d8                	mov    eax,ebx
c000462d:	e8 4c de ff ff       	call   c000247e <validate>
c0004632:	85 c0                	test   eax,eax
c0004634:	75 06                	jne    c000463c <f_close+0x2a>
c0004636:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000463c:	83 c4 18             	add    esp,0x18
c000463f:	5b                   	pop    ebx
c0004640:	c3                   	ret    

c0004641 <f_lseek>:
c0004641:	55                   	push   ebp
c0004642:	57                   	push   edi
c0004643:	56                   	push   esi
c0004644:	53                   	push   ebx
c0004645:	83 ec 2c             	sub    esp,0x2c
c0004648:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000464c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004650:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004654:	89 d8                	mov    eax,ebx
c0004656:	e8 23 de ff ff       	call   c000247e <validate>
c000465b:	89 c5                	mov    ebp,eax
c000465d:	85 c0                	test   eax,eax
c000465f:	0f 85 83 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004665:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004669:	85 ed                	test   ebp,ebp
c000466b:	0f 85 77 01 00 00    	jne    c00047e8 <f_lseek+0x1a7>
c0004671:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004674:	39 f0                	cmp    eax,esi
c0004676:	73 08                	jae    c0004680 <f_lseek+0x3f>
c0004678:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000467c:	75 02                	jne    c0004680 <f_lseek+0x3f>
c000467e:	89 c6                	mov    esi,eax
c0004680:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004683:	85 f6                	test   esi,esi
c0004685:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000468c:	75 07                	jne    c0004695 <f_lseek+0x54>
c000468e:	31 f6                	xor    esi,esi
c0004690:	e9 e2 00 00 00       	jmp    c0004777 <f_lseek+0x136>
c0004695:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004699:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000469d:	c1 e7 09             	shl    edi,0x9
c00046a0:	85 c9                	test   ecx,ecx
c00046a2:	74 28                	je     c00046cc <f_lseek+0x8b>
c00046a4:	49                   	dec    ecx
c00046a5:	31 d2                	xor    edx,edx
c00046a7:	8d 46 ff             	lea    eax,[esi-0x1]
c00046aa:	f7 f7                	div    edi
c00046ac:	31 d2                	xor    edx,edx
c00046ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046b2:	89 c8                	mov    eax,ecx
c00046b4:	f7 f7                	div    edi
c00046b6:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00046ba:	72 10                	jb     c00046cc <f_lseek+0x8b>
c00046bc:	89 f8                	mov    eax,edi
c00046be:	f7 d8                	neg    eax
c00046c0:	21 c1                	and    ecx,eax
c00046c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00046c5:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00046c8:	29 ce                	sub    esi,ecx
c00046ca:	eb 3c                	jmp    c0004708 <f_lseek+0xc7>
c00046cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00046cf:	85 c0                	test   eax,eax
c00046d1:	75 32                	jne    c0004705 <f_lseek+0xc4>
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 ed ee ff ff       	call   c00035c9 <create_chain>
c00046dc:	83 f8 01             	cmp    eax,0x1
c00046df:	75 0e                	jne    c00046ef <f_lseek+0xae>
c00046e1:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00046e5:	bd 02 00 00 00       	mov    ebp,0x2
c00046ea:	e9 f9 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c00046ef:	83 f8 ff             	cmp    eax,0xffffffff
c00046f2:	75 0e                	jne    c0004702 <f_lseek+0xc1>
c00046f4:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00046f8:	bd 01 00 00 00       	mov    ebp,0x1
c00046fd:	e9 e6 00 00 00       	jmp    c00047e8 <f_lseek+0x1a7>
c0004702:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004705:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004708:	85 c0                	test   eax,eax
c000470a:	74 82                	je     c000468e <f_lseek+0x4d>
c000470c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000470f:	39 fe                	cmp    esi,edi
c0004711:	76 3d                	jbe    c0004750 <f_lseek+0x10f>
c0004713:	01 fa                	add    edx,edi
c0004715:	29 fe                	sub    esi,edi
c0004717:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c000471a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000471e:	89 c2                	mov    edx,eax
c0004720:	74 0d                	je     c000472f <f_lseek+0xee>
c0004722:	89 d8                	mov    eax,ebx
c0004724:	e8 a0 ee ff ff       	call   c00035c9 <create_chain>
c0004729:	85 c0                	test   eax,eax
c000472b:	75 09                	jne    c0004736 <f_lseek+0xf5>
c000472d:	eb 1f                	jmp    c000474e <f_lseek+0x10d>
c000472f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004731:	e8 c7 ec ff ff       	call   c00033fd <get_fat.isra.2>
c0004736:	83 f8 ff             	cmp    eax,0xffffffff
c0004739:	74 b9                	je     c00046f4 <f_lseek+0xb3>
c000473b:	83 f8 01             	cmp    eax,0x1
c000473e:	76 a1                	jbe    c00046e1 <f_lseek+0xa0>
c0004740:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004744:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004747:	76 98                	jbe    c00046e1 <f_lseek+0xa0>
c0004749:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000474c:	eb be                	jmp    c000470c <f_lseek+0xcb>
c000474e:	31 f6                	xor    esi,esi
c0004750:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004753:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004759:	0f 84 2f ff ff ff    	je     c000468e <f_lseek+0x4d>
c000475f:	89 c2                	mov    edx,eax
c0004761:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004765:	e8 ad da ff ff       	call   c0002217 <clst2sect>
c000476a:	85 c0                	test   eax,eax
c000476c:	0f 84 6f ff ff ff    	je     c00046e1 <f_lseek+0xa0>
c0004772:	c1 ee 09             	shr    esi,0x9
c0004775:	01 c6                	add    esi,eax
c0004777:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000477a:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000477d:	76 0c                	jbe    c000478b <f_lseek+0x14a>
c000477f:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004782:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004785:	83 ca 40             	or     edx,0x40
c0004788:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c000478b:	a9 ff 01 00 00       	test   eax,0x1ff
c0004790:	74 56                	je     c00047e8 <f_lseek+0x1a7>
c0004792:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004795:	39 f0                	cmp    eax,esi
c0004797:	74 4f                	je     c00047e8 <f_lseek+0x1a7>
c0004799:	8d 7b 28             	lea    edi,[ebx+0x28]
c000479c:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00047a0:	74 26                	je     c00047c8 <f_lseek+0x187>
c00047a2:	6a 01                	push   0x1
c00047a4:	50                   	push   eax
c00047a5:	57                   	push   edi
c00047a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047aa:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047ae:	50                   	push   eax
c00047af:	e8 d7 d7 ff ff       	call   c0001f8b <disk_write>
c00047b4:	83 c4 10             	add    esp,0x10
c00047b7:	85 c0                	test   eax,eax
c00047b9:	0f 85 35 ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047bf:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00047c2:	83 e0 7f             	and    eax,0x7f
c00047c5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00047c8:	6a 01                	push   0x1
c00047ca:	56                   	push   esi
c00047cb:	57                   	push   edi
c00047cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00047d0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00047d4:	50                   	push   eax
c00047d5:	e8 9b d7 ff ff       	call   c0001f75 <disk_read>
c00047da:	83 c4 10             	add    esp,0x10
c00047dd:	85 c0                	test   eax,eax
c00047df:	0f 85 0f ff ff ff    	jne    c00046f4 <f_lseek+0xb3>
c00047e5:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00047e8:	83 c4 2c             	add    esp,0x2c
c00047eb:	89 e8                	mov    eax,ebp
c00047ed:	5b                   	pop    ebx
c00047ee:	5e                   	pop    esi
c00047ef:	5f                   	pop    edi
c00047f0:	5d                   	pop    ebp
c00047f1:	c3                   	ret    

c00047f2 <f_opendir>:
c00047f2:	56                   	push   esi
c00047f3:	b8 09 00 00 00       	mov    eax,0x9
c00047f8:	53                   	push   ebx
c00047f9:	83 ec 24             	sub    esp,0x24
c00047fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004800:	85 db                	test   ebx,ebx
c0004802:	0f 84 af 00 00 00    	je     c00048b7 <f_opendir+0xc5>
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000480e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004812:	e8 63 de ff ff       	call   c000267a <mount_volume>
c0004817:	85 c0                	test   eax,eax
c0004819:	0f 85 92 00 00 00    	jne    c00048b1 <f_opendir+0xbf>
c000481f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004823:	83 ec 0c             	sub    esp,0xc
c0004826:	89 03                	mov    DWORD PTR [ebx],eax
c0004828:	68 00 02 00 00       	push   0x200
c000482d:	e8 d6 15 00 00       	call   c0005e08 <ff_memalloc>
c0004832:	83 c4 10             	add    esp,0x10
c0004835:	89 c6                	mov    esi,eax
c0004837:	b8 11 00 00 00       	mov    eax,0x11
c000483c:	85 f6                	test   esi,esi
c000483e:	74 77                	je     c00048b7 <f_opendir+0xc5>
c0004840:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004844:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0004848:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000484b:	89 d8                	mov    eax,ebx
c000484d:	e8 72 f3 ff ff       	call   c0003bc4 <follow_path>
c0004852:	85 c0                	test   eax,eax
c0004854:	75 37                	jne    c000488d <f_opendir+0x9b>
c0004856:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c000485a:	75 1c                	jne    c0004878 <f_opendir+0x86>
c000485c:	b8 05 00 00 00       	mov    eax,0x5
c0004861:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004865:	74 26                	je     c000488d <f_opendir+0x9b>
c0004867:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000486a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486e:	8a 00                	mov    al,BYTE PTR [eax]
c0004870:	e8 37 eb ff ff       	call   c00033ac <ld_clust.isra.0>
c0004875:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004878:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000487c:	31 d2                	xor    edx,edx
c000487e:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004882:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0004886:	89 d8                	mov    eax,ebx
c0004888:	e8 74 ec ff ff       	call   c0003501 <dir_sdi>
c000488d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004891:	83 ec 0c             	sub    esp,0xc
c0004894:	56                   	push   esi
c0004895:	e8 86 15 00 00       	call   c0005e20 <ff_memfree>
c000489a:	83 c4 10             	add    esp,0x10
c000489d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00048a1:	83 f8 04             	cmp    eax,0x4
c00048a4:	74 06                	je     c00048ac <f_opendir+0xba>
c00048a6:	85 c0                	test   eax,eax
c00048a8:	74 0d                	je     c00048b7 <f_opendir+0xc5>
c00048aa:	eb 05                	jmp    c00048b1 <f_opendir+0xbf>
c00048ac:	b8 05 00 00 00       	mov    eax,0x5
c00048b1:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048b7:	83 c4 24             	add    esp,0x24
c00048ba:	5b                   	pop    ebx
c00048bb:	5e                   	pop    esi
c00048bc:	c3                   	ret    

c00048bd <f_closedir>:
c00048bd:	53                   	push   ebx
c00048be:	83 ec 18             	sub    esp,0x18
c00048c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00048c5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00048c9:	89 d8                	mov    eax,ebx
c00048cb:	e8 ae db ff ff       	call   c000247e <validate>
c00048d0:	85 c0                	test   eax,eax
c00048d2:	75 06                	jne    c00048da <f_closedir+0x1d>
c00048d4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00048da:	83 c4 18             	add    esp,0x18
c00048dd:	5b                   	pop    ebx
c00048de:	c3                   	ret    

c00048df <f_readdir>:
c00048df:	57                   	push   edi
c00048e0:	56                   	push   esi
c00048e1:	53                   	push   ebx
c00048e2:	83 ec 20             	sub    esp,0x20
c00048e5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00048e9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00048ed:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048f1:	89 d8                	mov    eax,ebx
c00048f3:	e8 86 db ff ff       	call   c000247e <validate>
c00048f8:	85 c0                	test   eax,eax
c00048fa:	75 6e                	jne    c000496a <f_readdir+0x8b>
c00048fc:	85 ff                	test   edi,edi
c00048fe:	75 0b                	jne    c000490b <f_readdir+0x2c>
c0004900:	31 d2                	xor    edx,edx
c0004902:	89 d8                	mov    eax,ebx
c0004904:	e8 f8 eb ff ff       	call   c0003501 <dir_sdi>
c0004909:	eb 5f                	jmp    c000496a <f_readdir+0x8b>
c000490b:	83 ec 0c             	sub    esp,0xc
c000490e:	68 00 02 00 00       	push   0x200
c0004913:	e8 f0 14 00 00       	call   c0005e08 <ff_memalloc>
c0004918:	83 c4 10             	add    esp,0x10
c000491b:	89 c6                	mov    esi,eax
c000491d:	b8 11 00 00 00       	mov    eax,0x11
c0004922:	85 f6                	test   esi,esi
c0004924:	74 44                	je     c000496a <f_readdir+0x8b>
c0004926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000492a:	31 d2                	xor    edx,edx
c000492c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000492f:	89 d8                	mov    eax,ebx
c0004931:	e8 ca ef ff ff       	call   c0003900 <dir_read>
c0004936:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000493b:	75 19                	jne    c0004956 <f_readdir+0x77>
c000493d:	89 fa                	mov    edx,edi
c000493f:	89 d8                	mov    eax,ebx
c0004941:	e8 70 e8 ff ff       	call   c00031b6 <get_fileinfo>
c0004946:	31 d2                	xor    edx,edx
c0004948:	89 d8                	mov    eax,ebx
c000494a:	e8 47 ee ff ff       	call   c0003796 <dir_next>
c000494f:	83 f8 04             	cmp    eax,0x4
c0004952:	75 02                	jne    c0004956 <f_readdir+0x77>
c0004954:	31 c0                	xor    eax,eax
c0004956:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000495a:	83 ec 0c             	sub    esp,0xc
c000495d:	56                   	push   esi
c000495e:	e8 bd 14 00 00       	call   c0005e20 <ff_memfree>
c0004963:	83 c4 10             	add    esp,0x10
c0004966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000496a:	83 c4 20             	add    esp,0x20
c000496d:	5b                   	pop    ebx
c000496e:	5e                   	pop    esi
c000496f:	5f                   	pop    edi
c0004970:	c3                   	ret    

c0004971 <f_stat>:
c0004971:	57                   	push   edi
c0004972:	31 c9                	xor    ecx,ecx
c0004974:	56                   	push   esi
c0004975:	53                   	push   ebx
c0004976:	83 ec 30             	sub    esp,0x30
c0004979:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000497d:	89 e2                	mov    edx,esp
c000497f:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004983:	e8 f2 dc ff ff       	call   c000267a <mount_volume>
c0004988:	89 c3                	mov    ebx,eax
c000498a:	85 c0                	test   eax,eax
c000498c:	75 59                	jne    c00049e7 <f_stat+0x76>
c000498e:	83 ec 0c             	sub    esp,0xc
c0004991:	bb 11 00 00 00       	mov    ebx,0x11
c0004996:	68 00 02 00 00       	push   0x200
c000499b:	e8 68 14 00 00       	call   c0005e08 <ff_memalloc>
c00049a0:	83 c4 10             	add    esp,0x10
c00049a3:	89 c6                	mov    esi,eax
c00049a5:	85 c0                	test   eax,eax
c00049a7:	74 3e                	je     c00049e7 <f_stat+0x76>
c00049a9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049ac:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00049b0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00049b3:	89 e0                	mov    eax,esp
c00049b5:	e8 0a f2 ff ff       	call   c0003bc4 <follow_path>
c00049ba:	89 c3                	mov    ebx,eax
c00049bc:	85 c0                	test   eax,eax
c00049be:	75 1b                	jne    c00049db <f_stat+0x6a>
c00049c0:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00049c5:	75 0f                	jne    c00049d6 <f_stat+0x65>
c00049c7:	85 ff                	test   edi,edi
c00049c9:	74 10                	je     c00049db <f_stat+0x6a>
c00049cb:	89 fa                	mov    edx,edi
c00049cd:	89 e0                	mov    eax,esp
c00049cf:	e8 e2 e7 ff ff       	call   c00031b6 <get_fileinfo>
c00049d4:	eb 05                	jmp    c00049db <f_stat+0x6a>
c00049d6:	bb 06 00 00 00       	mov    ebx,0x6
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	56                   	push   esi
c00049df:	e8 3c 14 00 00       	call   c0005e20 <ff_memfree>
c00049e4:	83 c4 10             	add    esp,0x10
c00049e7:	83 c4 30             	add    esp,0x30
c00049ea:	89 d8                	mov    eax,ebx
c00049ec:	5b                   	pop    ebx
c00049ed:	5e                   	pop    esi
c00049ee:	5f                   	pop    edi
c00049ef:	c3                   	ret    

c00049f0 <f_getfree>:
c00049f0:	55                   	push   ebp
c00049f1:	31 c9                	xor    ecx,ecx
c00049f3:	57                   	push   edi
c00049f4:	56                   	push   esi
c00049f5:	53                   	push   ebx
c00049f6:	83 ec 2c             	sub    esp,0x2c
c00049f9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00049fd:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004a01:	e8 74 dc ff ff       	call   c000267a <mount_volume>
c0004a06:	89 c7                	mov    edi,eax
c0004a08:	85 c0                	test   eax,eax
c0004a0a:	0f 85 df 00 00 00    	jne    c0004aef <f_getfree+0xff>
c0004a10:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0004a14:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004a18:	89 30                	mov    DWORD PTR [eax],esi
c0004a1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004a1d:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004a20:	8d 55 fe             	lea    edx,[ebp-0x2]
c0004a23:	39 d0                	cmp    eax,edx
c0004a25:	77 0b                	ja     c0004a32 <f_getfree+0x42>
c0004a27:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004a2b:	89 01                	mov    DWORD PTR [ecx],eax
c0004a2d:	e9 bd 00 00 00       	jmp    c0004aef <f_getfree+0xff>
c0004a32:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004a35:	75 29                	jne    c0004a60 <f_getfree+0x70>
c0004a37:	bd 02 00 00 00       	mov    ebp,0x2
c0004a3c:	31 db                	xor    ebx,ebx
c0004a3e:	89 ea                	mov    edx,ebp
c0004a40:	89 f0                	mov    eax,esi
c0004a42:	e8 b6 e9 ff ff       	call   c00033fd <get_fat.isra.2>
c0004a47:	83 f8 ff             	cmp    eax,0xffffffff
c0004a4a:	74 7d                	je     c0004ac9 <f_getfree+0xd9>
c0004a4c:	83 f8 01             	cmp    eax,0x1
c0004a4f:	74 7f                	je     c0004ad0 <f_getfree+0xe0>
c0004a51:	83 d3 00             	adc    ebx,0x0
c0004a54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a58:	45                   	inc    ebp
c0004a59:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004a5c:	77 e0                	ja     c0004a3e <f_getfree+0x4e>
c0004a5e:	eb 79                	jmp    c0004ad9 <f_getfree+0xe9>
c0004a60:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004a63:	31 db                	xor    ebx,ebx
c0004a65:	31 f6                	xor    esi,esi
c0004a67:	85 f6                	test   esi,esi
c0004a69:	75 18                	jne    c0004a83 <f_getfree+0x93>
c0004a6b:	8d 42 01             	lea    eax,[edx+0x1]
c0004a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004a72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a76:	e8 ac da ff ff       	call   c0002527 <move_window>
c0004a7b:	85 c0                	test   eax,eax
c0004a7d:	75 58                	jne    c0004ad7 <f_getfree+0xe7>
c0004a7f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004a83:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004a87:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004a8b:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004a8f:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004a92:	75 13                	jne    c0004aa7 <f_getfree+0xb7>
c0004a94:	e8 27 d5 ff ff       	call   c0001fc0 <ld_word>
c0004a99:	0f b7 c0             	movzx  eax,ax
c0004a9c:	83 f8 01             	cmp    eax,0x1
c0004a9f:	83 d3 00             	adc    ebx,0x0
c0004aa2:	83 c6 02             	add    esi,0x2
c0004aa5:	eb 13                	jmp    c0004aba <f_getfree+0xca>
c0004aa7:	e8 21 d5 ff ff       	call   c0001fcd <ld_dword>
c0004aac:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004ab1:	83 f8 01             	cmp    eax,0x1
c0004ab4:	83 d3 00             	adc    ebx,0x0
c0004ab7:	83 c6 04             	add    esi,0x4
c0004aba:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004ac0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ac4:	4d                   	dec    ebp
c0004ac5:	75 a0                	jne    c0004a67 <f_getfree+0x77>
c0004ac7:	eb 10                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ac9:	bf 01 00 00 00       	mov    edi,0x1
c0004ace:	eb 09                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad0:	bf 02 00 00 00       	mov    edi,0x2
c0004ad5:	eb 02                	jmp    c0004ad9 <f_getfree+0xe9>
c0004ad7:	89 c7                	mov    edi,eax
c0004ad9:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004add:	89 18                	mov    DWORD PTR [eax],ebx
c0004adf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae3:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c0004ae6:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004ae9:	83 ca 01             	or     edx,0x1
c0004aec:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004aef:	83 c4 2c             	add    esp,0x2c
c0004af2:	89 f8                	mov    eax,edi
c0004af4:	5b                   	pop    ebx
c0004af5:	5e                   	pop    esi
c0004af6:	5f                   	pop    edi
c0004af7:	5d                   	pop    ebp
c0004af8:	c3                   	ret    

c0004af9 <f_truncate>:
c0004af9:	56                   	push   esi
c0004afa:	53                   	push   ebx
c0004afb:	83 ec 14             	sub    esp,0x14
c0004afe:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004b02:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b06:	89 d8                	mov    eax,ebx
c0004b08:	e8 71 d9 ff ff       	call   c000247e <validate>
c0004b0d:	89 c6                	mov    esi,eax
c0004b0f:	85 c0                	test   eax,eax
c0004b11:	0f 85 c4 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b17:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004b1b:	85 f6                	test   esi,esi
c0004b1d:	0f 85 b8 00 00 00    	jne    c0004bdb <f_truncate+0xe2>
c0004b23:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004b27:	0f 84 a9 00 00 00    	je     c0004bd6 <f_truncate+0xdd>
c0004b2d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004b30:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004b33:	0f 83 a2 00 00 00    	jae    c0004bdb <f_truncate+0xe2>
c0004b39:	85 c0                	test   eax,eax
c0004b3b:	75 15                	jne    c0004b52 <f_truncate+0x59>
c0004b3d:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004b40:	31 c9                	xor    ecx,ecx
c0004b42:	89 d8                	mov    eax,ebx
c0004b44:	e8 bf eb ff ff       	call   c0003708 <remove_chain>
c0004b49:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004b50:	eb 35                	jmp    c0004b87 <f_truncate+0x8e>
c0004b52:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004b55:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004b57:	e8 a1 e8 ff ff       	call   c00033fd <get_fat.isra.2>
c0004b5c:	89 c2                	mov    edx,eax
c0004b5e:	b8 01 00 00 00       	mov    eax,0x1
c0004b63:	83 fa ff             	cmp    edx,0xffffffff
c0004b66:	74 1f                	je     c0004b87 <f_truncate+0x8e>
c0004b68:	b8 02 00 00 00       	mov    eax,0x2
c0004b6d:	83 fa 01             	cmp    edx,0x1
c0004b70:	74 15                	je     c0004b87 <f_truncate+0x8e>
c0004b72:	31 c0                	xor    eax,eax
c0004b74:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004b78:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004b7b:	76 0a                	jbe    c0004b87 <f_truncate+0x8e>
c0004b7d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004b80:	89 d8                	mov    eax,ebx
c0004b82:	e8 81 eb ff ff       	call   c0003708 <remove_chain>
c0004b87:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004b8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004b8d:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004b90:	83 ca 40             	or     edx,0x40
c0004b93:	85 c0                	test   eax,eax
c0004b95:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004b98:	75 35                	jne    c0004bcf <f_truncate+0xd6>
c0004b9a:	80 e2 80             	and    dl,0x80
c0004b9d:	74 3c                	je     c0004bdb <f_truncate+0xe2>
c0004b9f:	6a 01                	push   0x1
c0004ba1:	8d 43 28             	lea    eax,[ebx+0x28]
c0004ba4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004ba7:	50                   	push   eax
c0004ba8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004bac:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004bb0:	50                   	push   eax
c0004bb1:	e8 d5 d3 ff ff       	call   c0001f8b <disk_write>
c0004bb6:	83 c4 10             	add    esp,0x10
c0004bb9:	85 c0                	test   eax,eax
c0004bbb:	75 0d                	jne    c0004bca <f_truncate+0xd1>
c0004bbd:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004bc0:	31 f6                	xor    esi,esi
c0004bc2:	83 e0 7f             	and    eax,0x7f
c0004bc5:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004bc8:	eb 11                	jmp    c0004bdb <f_truncate+0xe2>
c0004bca:	b8 01 00 00 00       	mov    eax,0x1
c0004bcf:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004bd2:	89 c6                	mov    esi,eax
c0004bd4:	eb 05                	jmp    c0004bdb <f_truncate+0xe2>
c0004bd6:	be 07 00 00 00       	mov    esi,0x7
c0004bdb:	89 f0                	mov    eax,esi
c0004bdd:	83 c4 14             	add    esp,0x14
c0004be0:	5b                   	pop    ebx
c0004be1:	5e                   	pop    esi
c0004be2:	c3                   	ret    

c0004be3 <f_unlink>:
c0004be3:	55                   	push   ebp
c0004be4:	b9 02 00 00 00       	mov    ecx,0x2
c0004be9:	57                   	push   edi
c0004bea:	56                   	push   esi
c0004beb:	53                   	push   ebx
c0004bec:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004bf2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004bf6:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004bfd:	e8 78 da ff ff       	call   c000267a <mount_volume>
c0004c02:	85 c0                	test   eax,eax
c0004c04:	0f 85 f0 00 00 00    	jne    c0004cfa <f_unlink+0x117>
c0004c0a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c0e:	83 ec 0c             	sub    esp,0xc
c0004c11:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004c15:	68 00 02 00 00       	push   0x200
c0004c1a:	e8 e9 11 00 00       	call   c0005e08 <ff_memalloc>
c0004c1f:	83 c4 10             	add    esp,0x10
c0004c22:	89 c3                	mov    ebx,eax
c0004c24:	b8 11 00 00 00       	mov    eax,0x11
c0004c29:	85 db                	test   ebx,ebx
c0004c2b:	0f 84 c9 00 00 00    	je     c0004cfa <f_unlink+0x117>
c0004c31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c35:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004c3c:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004c3f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c43:	e8 7c ef ff ff       	call   c0003bc4 <follow_path>
c0004c48:	85 c0                	test   eax,eax
c0004c4a:	0f 85 96 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c50:	b8 06 00 00 00       	mov    eax,0x6
c0004c55:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004c5a:	0f 85 86 00 00 00    	jne    c0004ce6 <f_unlink+0x103>
c0004c60:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004c65:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004c6b:	74 07                	je     c0004c74 <f_unlink+0x91>
c0004c6d:	b8 07 00 00 00       	mov    eax,0x7
c0004c72:	eb 72                	jmp    c0004ce6 <f_unlink+0x103>
c0004c74:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c78:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c7c:	8a 07                	mov    al,BYTE PTR [edi]
c0004c7e:	e8 29 e7 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004c83:	83 e5 10             	and    ebp,0x10
c0004c86:	89 c6                	mov    esi,eax
c0004c88:	75 0f                	jne    c0004c99 <f_unlink+0xb6>
c0004c8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c8e:	e8 95 ed ff ff       	call   c0003a28 <dir_remove>
c0004c93:	85 c0                	test   eax,eax
c0004c95:	74 2f                	je     c0004cc6 <f_unlink+0xe3>
c0004c97:	eb 4d                	jmp    c0004ce6 <f_unlink+0x103>
c0004c99:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004c9d:	31 d2                	xor    edx,edx
c0004c9f:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004ca3:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004ca7:	e8 55 e8 ff ff       	call   c0003501 <dir_sdi>
c0004cac:	85 c0                	test   eax,eax
c0004cae:	75 36                	jne    c0004ce6 <f_unlink+0x103>
c0004cb0:	31 d2                	xor    edx,edx
c0004cb2:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004cb6:	e8 45 ec ff ff       	call   c0003900 <dir_read>
c0004cbb:	85 c0                	test   eax,eax
c0004cbd:	74 ae                	je     c0004c6d <f_unlink+0x8a>
c0004cbf:	83 f8 04             	cmp    eax,0x4
c0004cc2:	75 22                	jne    c0004ce6 <f_unlink+0x103>
c0004cc4:	eb c4                	jmp    c0004c8a <f_unlink+0xa7>
c0004cc6:	85 f6                	test   esi,esi
c0004cc8:	75 0b                	jne    c0004cd5 <f_unlink+0xf2>
c0004cca:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cce:	e8 8b e2 ff ff       	call   c0002f5e <sync_fs>
c0004cd3:	eb 11                	jmp    c0004ce6 <f_unlink+0x103>
c0004cd5:	31 c9                	xor    ecx,ecx
c0004cd7:	89 f2                	mov    edx,esi
c0004cd9:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004cdd:	e8 26 ea ff ff       	call   c0003708 <remove_chain>
c0004ce2:	85 c0                	test   eax,eax
c0004ce4:	74 e4                	je     c0004cca <f_unlink+0xe7>
c0004ce6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cea:	83 ec 0c             	sub    esp,0xc
c0004ced:	53                   	push   ebx
c0004cee:	e8 2d 11 00 00       	call   c0005e20 <ff_memfree>
c0004cf3:	83 c4 10             	add    esp,0x10
c0004cf6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cfa:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004d00:	5b                   	pop    ebx
c0004d01:	5e                   	pop    esi
c0004d02:	5f                   	pop    edi
c0004d03:	5d                   	pop    ebp
c0004d04:	c3                   	ret    

c0004d05 <f_mkdir>:
c0004d05:	57                   	push   edi
c0004d06:	b9 02 00 00 00       	mov    ecx,0x2
c0004d0b:	56                   	push   esi
c0004d0c:	53                   	push   ebx
c0004d0d:	83 ec 50             	sub    esp,0x50
c0004d10:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 5d d9 ff ff       	call   c000267a <mount_volume>
c0004d1d:	89 c3                	mov    ebx,eax
c0004d1f:	85 c0                	test   eax,eax
c0004d21:	0f 85 70 01 00 00    	jne    c0004e97 <f_mkdir+0x192>
c0004d27:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d2b:	bb 11 00 00 00       	mov    ebx,0x11
c0004d30:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004d34:	83 ec 0c             	sub    esp,0xc
c0004d37:	68 00 02 00 00       	push   0x200
c0004d3c:	e8 c7 10 00 00       	call   c0005e08 <ff_memalloc>
c0004d41:	83 c4 10             	add    esp,0x10
c0004d44:	89 c7                	mov    edi,eax
c0004d46:	85 c0                	test   eax,eax
c0004d48:	0f 84 49 01 00 00    	je     c0004e97 <f_mkdir+0x192>
c0004d4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d52:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d56:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004d59:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d5d:	e8 62 ee ff ff       	call   c0003bc4 <follow_path>
c0004d62:	89 c3                	mov    ebx,eax
c0004d64:	85 c0                	test   eax,eax
c0004d66:	74 3e                	je     c0004da6 <f_mkdir+0xa1>
c0004d68:	83 f8 04             	cmp    eax,0x4
c0004d6b:	75 3e                	jne    c0004dab <f_mkdir+0xa6>
c0004d6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d71:	31 d2                	xor    edx,edx
c0004d73:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004d77:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d7b:	e8 49 e8 ff ff       	call   c00035c9 <create_chain>
c0004d80:	89 c6                	mov    esi,eax
c0004d82:	85 c0                	test   eax,eax
c0004d84:	74 0c                	je     c0004d92 <f_mkdir+0x8d>
c0004d86:	bb 02 00 00 00       	mov    ebx,0x2
c0004d8b:	83 f8 01             	cmp    eax,0x1
c0004d8e:	74 07                	je     c0004d97 <f_mkdir+0x92>
c0004d90:	eb 2a                	jmp    c0004dbc <f_mkdir+0xb7>
c0004d92:	bb 07 00 00 00       	mov    ebx,0x7
c0004d97:	31 c9                	xor    ecx,ecx
c0004d99:	89 f2                	mov    edx,esi
c0004d9b:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004d9f:	e8 64 e9 ff ff       	call   c0003708 <remove_chain>
c0004da4:	eb 05                	jmp    c0004dab <f_mkdir+0xa6>
c0004da6:	bb 08 00 00 00       	mov    ebx,0x8
c0004dab:	83 ec 0c             	sub    esp,0xc
c0004dae:	57                   	push   edi
c0004daf:	e8 6c 10 00 00       	call   c0005e20 <ff_memfree>
c0004db4:	83 c4 10             	add    esp,0x10
c0004db7:	e9 db 00 00 00       	jmp    c0004e97 <f_mkdir+0x192>
c0004dbc:	bb 01 00 00 00       	mov    ebx,0x1
c0004dc1:	83 f8 ff             	cmp    eax,0xffffffff
c0004dc4:	74 d1                	je     c0004d97 <f_mkdir+0x92>
c0004dc6:	89 f2                	mov    edx,esi
c0004dc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dcc:	e8 f1 dc ff ff       	call   c0002ac2 <dir_clear>
c0004dd1:	89 c3                	mov    ebx,eax
c0004dd3:	85 c0                	test   eax,eax
c0004dd5:	75 c0                	jne    c0004d97 <f_mkdir+0x92>
c0004dd7:	b9 0b 00 00 00       	mov    ecx,0xb
c0004ddc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004de0:	ba 20 00 00 00       	mov    edx,0x20
c0004de5:	83 c0 34             	add    eax,0x34
c0004de8:	e8 14 d2 ff ff       	call   c0002001 <mem_set>
c0004ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004df1:	ba 00 00 21 50       	mov    edx,0x50210000
c0004df6:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004dfa:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004dfe:	83 c0 4a             	add    eax,0x4a
c0004e01:	e8 e3 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e0a:	89 f1                	mov    ecx,esi
c0004e0c:	8d 50 34             	lea    edx,[eax+0x34]
c0004e0f:	e8 c1 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e18:	b9 20 00 00 00       	mov    ecx,0x20
c0004e1d:	8d 50 34             	lea    edx,[eax+0x34]
c0004e20:	83 c0 54             	add    eax,0x54
c0004e23:	e8 c4 d1 ff ff       	call   c0001fec <mem_cpy>
c0004e28:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e2c:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004e30:	8d 50 54             	lea    edx,[eax+0x54]
c0004e33:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004e37:	e8 99 e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e3c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e40:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e44:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e48:	e8 0c ee ff ff       	call   c0003c59 <dir_register>
c0004e4d:	89 c3                	mov    ebx,eax
c0004e4f:	85 c0                	test   eax,eax
c0004e51:	0f 85 40 ff ff ff    	jne    c0004d97 <f_mkdir+0x92>
c0004e57:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e5b:	ba 00 00 21 50       	mov    edx,0x50210000
c0004e60:	83 c0 16             	add    eax,0x16
c0004e63:	e8 81 d1 ff ff       	call   c0001fe9 <st_dword>
c0004e68:	89 f1                	mov    ecx,esi
c0004e6a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004e6e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e72:	e8 5e e5 ff ff       	call   c00033d5 <st_clust.isra.1>
c0004e77:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e7b:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004e7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e83:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e87:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e8b:	e8 ce e0 ff ff       	call   c0002f5e <sync_fs>
c0004e90:	89 c3                	mov    ebx,eax
c0004e92:	e9 14 ff ff ff       	jmp    c0004dab <f_mkdir+0xa6>
c0004e97:	83 c4 50             	add    esp,0x50
c0004e9a:	89 d8                	mov    eax,ebx
c0004e9c:	5b                   	pop    ebx
c0004e9d:	5e                   	pop    esi
c0004e9e:	5f                   	pop    edi
c0004e9f:	c3                   	ret    

c0004ea0 <f_rename>:
c0004ea0:	57                   	push   edi
c0004ea1:	56                   	push   esi
c0004ea2:	53                   	push   ebx
c0004ea3:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004ea9:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004eb0:	e8 7c d5 ff ff       	call   c0002431 <get_ldnumber>
c0004eb5:	b9 02 00 00 00       	mov    ecx,0x2
c0004eba:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004ebe:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004ec5:	e8 b0 d7 ff ff       	call   c000267a <mount_volume>
c0004eca:	85 c0                	test   eax,eax
c0004ecc:	0f 85 7c 01 00 00    	jne    c000504e <f_rename+0x1ae>
c0004ed2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ed6:	83 ec 0c             	sub    esp,0xc
c0004ed9:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004edd:	68 00 02 00 00       	push   0x200
c0004ee2:	e8 21 0f 00 00       	call   c0005e08 <ff_memalloc>
c0004ee7:	83 c4 10             	add    esp,0x10
c0004eea:	89 c6                	mov    esi,eax
c0004eec:	b8 11 00 00 00       	mov    eax,0x11
c0004ef1:	85 f6                	test   esi,esi
c0004ef3:	0f 84 55 01 00 00    	je     c000504e <f_rename+0x1ae>
c0004ef9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004efd:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004f04:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004f07:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004f0b:	e8 b4 ec ff ff       	call   c0003bc4 <follow_path>
c0004f10:	85 c0                	test   eax,eax
c0004f12:	0f 85 22 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f18:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004f1c:	b8 06 00 00 00       	mov    eax,0x6
c0004f21:	80 e2 a0             	and    dl,0xa0
c0004f24:	0f 85 10 01 00 00    	jne    c000503a <f_rename+0x19a>
c0004f2a:	b9 20 00 00 00       	mov    ecx,0x20
c0004f2f:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004f33:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f37:	e8 b0 d0 ff ff       	call   c0001fec <mem_cpy>
c0004f3c:	b9 30 00 00 00       	mov    ecx,0x30
c0004f41:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004f45:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f49:	e8 9e d0 ff ff       	call   c0001fec <mem_cpy>
c0004f4e:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004f55:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f59:	e8 66 ec ff ff       	call   c0003bc4 <follow_path>
c0004f5e:	85 c0                	test   eax,eax
c0004f60:	75 20                	jne    c0004f82 <f_rename+0xe2>
c0004f62:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004f66:	b8 08 00 00 00       	mov    eax,0x8
c0004f6b:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004f6f:	0f 85 c5 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f75:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004f79:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004f80:	eb 03                	jmp    c0004f85 <f_rename+0xe5>
c0004f82:	83 f8 04             	cmp    eax,0x4
c0004f85:	0f 85 af 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f8b:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004f8f:	e8 c5 ec ff ff       	call   c0003c59 <dir_register>
c0004f94:	85 c0                	test   eax,eax
c0004f96:	0f 85 9e 00 00 00    	jne    c000503a <f_rename+0x19a>
c0004f9c:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004fa3:	b9 13 00 00 00       	mov    ecx,0x13
c0004fa8:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004fab:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004faf:	e8 38 d0 ff ff       	call   c0001fec <mem_cpy>
c0004fb4:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004fb8:	a8 10                	test   al,0x10
c0004fba:	75 03                	jne    c0004fbf <f_rename+0x11f>
c0004fbc:	83 c8 20             	or     eax,0x20
c0004fbf:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004fc2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fc6:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fca:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004fce:	74 54                	je     c0005024 <f_rename+0x184>
c0004fd0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004fd4:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004fd8:	74 4a                	je     c0005024 <f_rename+0x184>
c0004fda:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004fde:	89 da                	mov    edx,ebx
c0004fe0:	8a 07                	mov    al,BYTE PTR [edi]
c0004fe2:	e8 c5 e3 ff ff       	call   c00033ac <ld_clust.isra.0>
c0004fe7:	89 c2                	mov    edx,eax
c0004fe9:	89 f8                	mov    eax,edi
c0004feb:	e8 27 d2 ff ff       	call   c0002217 <clst2sect>
c0004ff0:	89 c2                	mov    edx,eax
c0004ff2:	b8 02 00 00 00       	mov    eax,0x2
c0004ff7:	85 d2                	test   edx,edx
c0004ff9:	74 3f                	je     c000503a <f_rename+0x19a>
c0004ffb:	89 f8                	mov    eax,edi
c0004ffd:	e8 25 d5 ff ff       	call   c0002527 <move_window>
c0005002:	85 c0                	test   eax,eax
c0005004:	75 34                	jne    c000503a <f_rename+0x19a>
c0005006:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000500a:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c000500e:	75 14                	jne    c0005024 <f_rename+0x184>
c0005010:	8d 50 54             	lea    edx,[eax+0x54]
c0005013:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0005017:	e8 b9 e3 ff ff       	call   c00033d5 <st_clust.isra.1>
c000501c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005020:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005024:	8d 44 24 40          	lea    eax,[esp+0x40]
c0005028:	e8 fb e9 ff ff       	call   c0003a28 <dir_remove>
c000502d:	85 c0                	test   eax,eax
c000502f:	75 09                	jne    c000503a <f_rename+0x19a>
c0005031:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005035:	e8 24 df ff ff       	call   c0002f5e <sync_fs>
c000503a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000503e:	83 ec 0c             	sub    esp,0xc
c0005041:	56                   	push   esi
c0005042:	e8 d9 0d 00 00       	call   c0005e20 <ff_memfree>
c0005047:	83 c4 10             	add    esp,0x10
c000504a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000504e:	81 c4 a0 00 00 00    	add    esp,0xa0
c0005054:	5b                   	pop    ebx
c0005055:	5e                   	pop    esi
c0005056:	5f                   	pop    edi
c0005057:	c3                   	ret    

c0005058 <f_chmod>:
c0005058:	57                   	push   edi
c0005059:	b9 02 00 00 00       	mov    ecx,0x2
c000505e:	56                   	push   esi
c000505f:	53                   	push   ebx
c0005060:	83 ec 50             	sub    esp,0x50
c0005063:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0005067:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c000506b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000506f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005073:	e8 02 d6 ff ff       	call   c000267a <mount_volume>
c0005078:	85 c0                	test   eax,eax
c000507a:	0f 85 81 00 00 00    	jne    c0005101 <f_chmod+0xa9>
c0005080:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005084:	83 ec 0c             	sub    esp,0xc
c0005087:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000508b:	68 00 02 00 00       	push   0x200
c0005090:	e8 73 0d 00 00       	call   c0005e08 <ff_memalloc>
c0005095:	83 c4 10             	add    esp,0x10
c0005098:	89 c6                	mov    esi,eax
c000509a:	b8 11 00 00 00       	mov    eax,0x11
c000509f:	85 f6                	test   esi,esi
c00050a1:	74 5e                	je     c0005101 <f_chmod+0xa9>
c00050a3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050a7:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00050ab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00050ae:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b2:	e8 0d eb ff ff       	call   c0003bc4 <follow_path>
c00050b7:	85 c0                	test   eax,eax
c00050b9:	75 32                	jne    c00050ed <f_chmod+0x95>
c00050bb:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c00050bf:	b8 06 00 00 00       	mov    eax,0x6
c00050c4:	80 e2 a0             	and    dl,0xa0
c00050c7:	75 24                	jne    c00050ed <f_chmod+0x95>
c00050c9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cd:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c00050d0:	31 d7                	xor    edi,edx
c00050d2:	21 fb                	and    ebx,edi
c00050d4:	83 e3 27             	and    ebx,0x27
c00050d7:	31 d3                	xor    ebx,edx
c00050d9:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c00050dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050e4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050e8:	e8 71 de ff ff       	call   c0002f5e <sync_fs>
c00050ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00050f1:	83 ec 0c             	sub    esp,0xc
c00050f4:	56                   	push   esi
c00050f5:	e8 26 0d 00 00       	call   c0005e20 <ff_memfree>
c00050fa:	83 c4 10             	add    esp,0x10
c00050fd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005101:	83 c4 50             	add    esp,0x50
c0005104:	5b                   	pop    ebx
c0005105:	5e                   	pop    esi
c0005106:	5f                   	pop    edi
c0005107:	c3                   	ret    

c0005108 <f_utime>:
c0005108:	56                   	push   esi
c0005109:	b9 02 00 00 00       	mov    ecx,0x2
c000510e:	53                   	push   ebx
c000510f:	83 ec 54             	sub    esp,0x54
c0005112:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0005116:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000511a:	8d 44 24 60          	lea    eax,[esp+0x60]
c000511e:	e8 57 d5 ff ff       	call   c000267a <mount_volume>
c0005123:	85 c0                	test   eax,eax
c0005125:	0f 85 87 00 00 00    	jne    c00051b2 <f_utime+0xaa>
c000512b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000512f:	83 ec 0c             	sub    esp,0xc
c0005132:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005136:	68 00 02 00 00       	push   0x200
c000513b:	e8 c8 0c 00 00       	call   c0005e08 <ff_memalloc>
c0005140:	83 c4 10             	add    esp,0x10
c0005143:	89 c3                	mov    ebx,eax
c0005145:	b8 11 00 00 00       	mov    eax,0x11
c000514a:	85 db                	test   ebx,ebx
c000514c:	74 64                	je     c00051b2 <f_utime+0xaa>
c000514e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005152:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0005156:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0005159:	8d 44 24 20          	lea    eax,[esp+0x20]
c000515d:	e8 62 ea ff ff       	call   c0003bc4 <follow_path>
c0005162:	85 c0                	test   eax,eax
c0005164:	75 38                	jne    c000519e <f_utime+0x96>
c0005166:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c000516a:	b8 06 00 00 00       	mov    eax,0x6
c000516f:	80 e2 a0             	and    dl,0xa0
c0005172:	75 2a                	jne    c000519e <f_utime+0x96>
c0005174:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0005178:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c000517c:	c1 e2 10             	shl    edx,0x10
c000517f:	09 c2                	or     edx,eax
c0005181:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005185:	83 c0 16             	add    eax,0x16
c0005188:	e8 5c ce ff ff       	call   c0001fe9 <st_dword>
c000518d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005191:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005195:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005199:	e8 c0 dd ff ff       	call   c0002f5e <sync_fs>
c000519e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00051a2:	83 ec 0c             	sub    esp,0xc
c00051a5:	53                   	push   ebx
c00051a6:	e8 75 0c 00 00       	call   c0005e20 <ff_memfree>
c00051ab:	83 c4 10             	add    esp,0x10
c00051ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00051b2:	83 c4 54             	add    esp,0x54
c00051b5:	5b                   	pop    ebx
c00051b6:	5e                   	pop    esi
c00051b7:	c3                   	ret    

c00051b8 <f_getlabel>:
c00051b8:	55                   	push   ebp
c00051b9:	31 c9                	xor    ecx,ecx
c00051bb:	57                   	push   edi
c00051bc:	56                   	push   esi
c00051bd:	53                   	push   ebx
c00051be:	83 ec 5c             	sub    esp,0x5c
c00051c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00051c5:	8d 44 24 70          	lea    eax,[esp+0x70]
c00051c9:	e8 ac d4 ff ff       	call   c000267a <mount_volume>
c00051ce:	89 c6                	mov    esi,eax
c00051d0:	85 c0                	test   eax,eax
c00051d2:	0f 85 27 01 00 00    	jne    c00052ff <f_getlabel+0x147>
c00051d8:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c00051dd:	0f 84 d0 00 00 00    	je     c00052b3 <f_getlabel+0xfb>
c00051e3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00051e7:	31 d2                	xor    edx,edx
c00051e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051ed:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051f5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051f9:	e8 03 e3 ff ff       	call   c0003501 <dir_sdi>
c00051fe:	85 c0                	test   eax,eax
c0005200:	0f 85 a1 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c0005206:	ba 01 00 00 00       	mov    edx,0x1
c000520b:	8d 44 24 20          	lea    eax,[esp+0x20]
c000520f:	e8 ec e6 ff ff       	call   c0003900 <dir_read>
c0005214:	85 c0                	test   eax,eax
c0005216:	0f 85 8b 00 00 00    	jne    c00052a7 <f_getlabel+0xef>
c000521c:	31 db                	xor    ebx,ebx
c000521e:	31 c9                	xor    ecx,ecx
c0005220:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0005224:	8d 79 01             	lea    edi,[ecx+0x1]
c0005227:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c000522c:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005231:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005235:	e8 06 ce ff ff       	call   c0002040 <dbc_1st>
c000523a:	85 c0                	test   eax,eax
c000523c:	74 16                	je     c0005254 <f_getlabel+0x9c>
c000523e:	83 ff 0b             	cmp    edi,0xb
c0005241:	74 11                	je     c0005254 <f_getlabel+0x9c>
c0005243:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0005248:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000524c:	8d 79 02             	lea    edi,[ecx+0x2]
c000524f:	c1 e0 08             	shl    eax,0x8
c0005252:	09 c2                	or     edx,eax
c0005254:	0f b7 d2             	movzx  edx,dx
c0005257:	50                   	push   eax
c0005258:	50                   	push   eax
c0005259:	68 b5 01 00 00       	push   0x1b5
c000525e:	52                   	push   edx
c000525f:	e8 74 0c 00 00       	call   c0005ed8 <ff_oem2uni>
c0005264:	83 c4 10             	add    esp,0x10
c0005267:	0f b7 c0             	movzx  eax,ax
c000526a:	85 c0                	test   eax,eax
c000526c:	74 22                	je     c0005290 <f_getlabel+0xd8>
c000526e:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005272:	b9 04 00 00 00       	mov    ecx,0x4
c0005277:	01 da                	add    edx,ebx
c0005279:	e8 a0 ce ff ff       	call   c000211e <put_utf>
c000527e:	0f b6 c0             	movzx  eax,al
c0005281:	85 c0                	test   eax,eax
c0005283:	74 0b                	je     c0005290 <f_getlabel+0xd8>
c0005285:	01 c3                	add    ebx,eax
c0005287:	83 ff 0b             	cmp    edi,0xb
c000528a:	74 06                	je     c0005292 <f_getlabel+0xda>
c000528c:	89 f9                	mov    ecx,edi
c000528e:	eb 90                	jmp    c0005220 <f_getlabel+0x68>
c0005290:	31 db                	xor    ebx,ebx
c0005292:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0005296:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0005299:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c000529d:	74 14                	je     c00052b3 <f_getlabel+0xfb>
c000529f:	4b                   	dec    ebx
c00052a0:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00052a3:	74 f1                	je     c0005296 <f_getlabel+0xde>
c00052a5:	eb 0c                	jmp    c00052b3 <f_getlabel+0xfb>
c00052a7:	83 f8 04             	cmp    eax,0x4
c00052aa:	75 51                	jne    c00052fd <f_getlabel+0x145>
c00052ac:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00052b0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00052b3:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00052b8:	74 45                	je     c00052ff <f_getlabel+0x147>
c00052ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00052be:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00052c1:	e8 61 d2 ff ff       	call   c0002527 <move_window>
c00052c6:	89 c6                	mov    esi,eax
c00052c8:	85 c0                	test   eax,eax
c00052ca:	75 33                	jne    c00052ff <f_getlabel+0x147>
c00052cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00052d0:	b8 43 00 00 00       	mov    eax,0x43
c00052d5:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00052d8:	83 f9 03             	cmp    ecx,0x3
c00052db:	74 0f                	je     c00052ec <f_getlabel+0x134>
c00052dd:	31 c0                	xor    eax,eax
c00052df:	83 f9 04             	cmp    ecx,0x4
c00052e2:	0f 94 c0             	sete   al
c00052e5:	48                   	dec    eax
c00052e6:	83 e0 c3             	and    eax,0xffffffc3
c00052e9:	83 c0 64             	add    eax,0x64
c00052ec:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c00052f0:	e8 d8 cc ff ff       	call   c0001fcd <ld_dword>
c00052f5:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c00052f9:	89 07                	mov    DWORD PTR [edi],eax
c00052fb:	eb 02                	jmp    c00052ff <f_getlabel+0x147>
c00052fd:	89 c6                	mov    esi,eax
c00052ff:	83 c4 5c             	add    esp,0x5c
c0005302:	89 f0                	mov    eax,esi
c0005304:	5b                   	pop    ebx
c0005305:	5e                   	pop    esi
c0005306:	5f                   	pop    edi
c0005307:	5d                   	pop    ebp
c0005308:	c3                   	ret    

c0005309 <f_setlabel>:
c0005309:	57                   	push   edi
c000530a:	b9 02 00 00 00       	mov    ecx,0x2
c000530f:	56                   	push   esi
c0005310:	53                   	push   ebx
c0005311:	83 ec 50             	sub    esp,0x50
c0005314:	8d 54 24 04          	lea    edx,[esp+0x4]
c0005318:	8d 44 24 60          	lea    eax,[esp+0x60]
c000531c:	e8 59 d3 ff ff       	call   c000267a <mount_volume>
c0005321:	89 c6                	mov    esi,eax
c0005323:	85 c0                	test   eax,eax
c0005325:	0f 85 65 01 00 00    	jne    c0005490 <f_setlabel+0x187>
c000532b:	b9 0b 00 00 00       	mov    ecx,0xb
c0005330:	ba 20 00 00 00       	mov    edx,0x20
c0005335:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005339:	31 db                	xor    ebx,ebx
c000533b:	e8 c1 cc ff ff       	call   c0002001 <mem_set>
c0005340:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0005344:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005347:	76 5d                	jbe    c00053a6 <f_setlabel+0x9d>
c0005349:	8d 44 24 60          	lea    eax,[esp+0x60]
c000534d:	e8 f4 cc ff ff       	call   c0002046 <tchar2uni>
c0005352:	3d ff ff 00 00       	cmp    eax,0xffff
c0005357:	76 0a                	jbe    c0005363 <f_setlabel+0x5a>
c0005359:	be 06 00 00 00       	mov    esi,0x6
c000535e:	e9 2d 01 00 00       	jmp    c0005490 <f_setlabel+0x187>
c0005363:	83 ec 0c             	sub    esp,0xc
c0005366:	50                   	push   eax
c0005367:	e8 e4 0b 00 00       	call   c0005f50 <ff_wtoupper>
c000536c:	5a                   	pop    edx
c000536d:	59                   	pop    ecx
c000536e:	68 b5 01 00 00       	push   0x1b5
c0005373:	50                   	push   eax
c0005374:	e8 bf 0a 00 00       	call   c0005e38 <ff_uni2oem>
c0005379:	83 c4 10             	add    esp,0x10
c000537c:	0f b7 f0             	movzx  esi,ax
c000537f:	89 f7                	mov    edi,esi
c0005381:	85 f6                	test   esi,esi
c0005383:	74 d4                	je     c0005359 <f_setlabel+0x50>
c0005385:	89 f2                	mov    edx,esi
c0005387:	b8 50 1a 02 c0       	mov    eax,0xc0021a50
c000538c:	e8 9e cc ff ff       	call   c000202f <chk_chr>
c0005391:	85 c0                	test   eax,eax
c0005393:	75 c4                	jne    c0005359 <f_setlabel+0x50>
c0005395:	81 fe ff 00 00 00    	cmp    esi,0xff
c000539b:	0f 87 c9 00 00 00    	ja     c000546a <f_setlabel+0x161>
c00053a1:	e9 e0 00 00 00       	jmp    c0005486 <f_setlabel+0x17d>
c00053a6:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00053ab:	74 ac                	je     c0005359 <f_setlabel+0x50>
c00053ad:	85 db                	test   ebx,ebx
c00053af:	74 0e                	je     c00053bf <f_setlabel+0xb6>
c00053b1:	8d 43 ff             	lea    eax,[ebx-0x1]
c00053b4:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00053b9:	75 04                	jne    c00053bf <f_setlabel+0xb6>
c00053bb:	89 c3                	mov    ebx,eax
c00053bd:	eb ee                	jmp    c00053ad <f_setlabel+0xa4>
c00053bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00053c3:	31 d2                	xor    edx,edx
c00053c5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00053c9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00053d1:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053d5:	e8 27 e1 ff ff       	call   c0003501 <dir_sdi>
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 ac 00 00 00    	jne    c0005490 <f_setlabel+0x187>
c00053e4:	ba 01 00 00 00       	mov    edx,0x1
c00053e9:	8d 44 24 20          	lea    eax,[esp+0x20]
c00053ed:	e8 0e e5 ff ff       	call   c0003900 <dir_read>
c00053f2:	85 c0                	test   eax,eax
c00053f4:	75 18                	jne    c000540e <f_setlabel+0x105>
c00053f6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00053fa:	85 db                	test   ebx,ebx
c00053fc:	74 0b                	je     c0005409 <f_setlabel+0x100>
c00053fe:	b9 0b 00 00 00       	mov    ecx,0xb
c0005403:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005407:	eb 47                	jmp    c0005450 <f_setlabel+0x147>
c0005409:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c000540c:	eb 47                	jmp    c0005455 <f_setlabel+0x14c>
c000540e:	83 f8 04             	cmp    eax,0x4
c0005411:	75 53                	jne    c0005466 <f_setlabel+0x15d>
c0005413:	85 db                	test   ebx,ebx
c0005415:	74 79                	je     c0005490 <f_setlabel+0x187>
c0005417:	ba 01 00 00 00       	mov    edx,0x1
c000541c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005420:	e8 76 e4 ff ff       	call   c000389b <dir_alloc>
c0005425:	89 c6                	mov    esi,eax
c0005427:	85 c0                	test   eax,eax
c0005429:	75 65                	jne    c0005490 <f_setlabel+0x187>
c000542b:	b9 20 00 00 00       	mov    ecx,0x20
c0005430:	31 d2                	xor    edx,edx
c0005432:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005436:	e8 c6 cb ff ff       	call   c0002001 <mem_set>
c000543b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000543f:	b9 0b 00 00 00       	mov    ecx,0xb
c0005444:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005448:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000544c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005450:	e8 97 cb ff ff       	call   c0001fec <mem_cpy>
c0005455:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005459:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c000545d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005461:	e8 f8 da ff ff       	call   c0002f5e <sync_fs>
c0005466:	89 c6                	mov    esi,eax
c0005468:	eb 26                	jmp    c0005490 <f_setlabel+0x187>
c000546a:	83 fb 09             	cmp    ebx,0x9
c000546d:	0f 87 e6 fe ff ff    	ja     c0005359 <f_setlabel+0x50>
c0005473:	89 f0                	mov    eax,esi
c0005475:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005479:	43                   	inc    ebx
c000547a:	89 f8                	mov    eax,edi
c000547c:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005480:	43                   	inc    ebx
c0005481:	e9 ba fe ff ff       	jmp    c0005340 <f_setlabel+0x37>
c0005486:	83 fb 0a             	cmp    ebx,0xa
c0005489:	76 ef                	jbe    c000547a <f_setlabel+0x171>
c000548b:	e9 c9 fe ff ff       	jmp    c0005359 <f_setlabel+0x50>
c0005490:	83 c4 50             	add    esp,0x50
c0005493:	89 f0                	mov    eax,esi
c0005495:	5b                   	pop    ebx
c0005496:	5e                   	pop    esi
c0005497:	5f                   	pop    edi
c0005498:	c3                   	ret    

c0005499 <f_expand>:
c0005499:	55                   	push   ebp
c000549a:	57                   	push   edi
c000549b:	56                   	push   esi
c000549c:	53                   	push   ebx
c000549d:	83 ec 2c             	sub    esp,0x2c
c00054a0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00054a4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00054a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00054ac:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00054b0:	89 d8                	mov    eax,ebx
c00054b2:	e8 c7 cf ff ff       	call   c000247e <validate>
c00054b7:	89 c6                	mov    esi,eax
c00054b9:	85 c0                	test   eax,eax
c00054bb:	0f 85 3b 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054c1:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00054c5:	85 f6                	test   esi,esi
c00054c7:	0f 85 2f 01 00 00    	jne    c00055fc <f_expand+0x163>
c00054cd:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00054d2:	75 0a                	jne    c00054de <f_expand+0x45>
c00054d4:	be 07 00 00 00       	mov    esi,0x7
c00054d9:	e9 1e 01 00 00       	jmp    c00055fc <f_expand+0x163>
c00054de:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00054e2:	75 f0                	jne    c00054d4 <f_expand+0x3b>
c00054e4:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00054e8:	74 ea                	je     c00054d4 <f_expand+0x3b>
c00054ea:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00054ee:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00054f2:	c1 e1 09             	shl    ecx,0x9
c00054f5:	8d 41 ff             	lea    eax,[ecx-0x1]
c00054f8:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00054fc:	0f 95 c0             	setne  al
c00054ff:	31 d2                	xor    edx,edx
c0005501:	0f b6 c0             	movzx  eax,al
c0005504:	89 c7                	mov    edi,eax
c0005506:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000550a:	f7 f1                	div    ecx
c000550c:	01 f8                	add    eax,edi
c000550e:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005511:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005515:	83 ff 01             	cmp    edi,0x1
c0005518:	76 05                	jbe    c000551f <f_expand+0x86>
c000551a:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c000551d:	77 05                	ja     c0005524 <f_expand+0x8b>
c000551f:	bf 02 00 00 00       	mov    edi,0x2
c0005524:	89 3c 24             	mov    DWORD PTR [esp],edi
c0005527:	89 fd                	mov    ebp,edi
c0005529:	31 c9                	xor    ecx,ecx
c000552b:	89 ea                	mov    edx,ebp
c000552d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005531:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005533:	45                   	inc    ebp
c0005534:	e8 c4 de ff ff       	call   c00033fd <get_fat.isra.2>
c0005539:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000553d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005541:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005544:	77 05                	ja     c000554b <f_expand+0xb2>
c0005546:	bd 02 00 00 00       	mov    ebp,0x2
c000554b:	83 f8 01             	cmp    eax,0x1
c000554e:	74 20                	je     c0005570 <f_expand+0xd7>
c0005550:	83 f8 ff             	cmp    eax,0xffffffff
c0005553:	74 25                	je     c000557a <f_expand+0xe1>
c0005555:	85 c0                	test   eax,eax
c0005557:	75 09                	jne    c0005562 <f_expand+0xc9>
c0005559:	41                   	inc    ecx
c000555a:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000555e:	75 07                	jne    c0005567 <f_expand+0xce>
c0005560:	eb 1f                	jmp    c0005581 <f_expand+0xe8>
c0005562:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005565:	31 c9                	xor    ecx,ecx
c0005567:	39 fd                	cmp    ebp,edi
c0005569:	75 c0                	jne    c000552b <f_expand+0x92>
c000556b:	e9 64 ff ff ff       	jmp    c00054d4 <f_expand+0x3b>
c0005570:	be 02 00 00 00       	mov    esi,0x2
c0005575:	e9 82 00 00 00       	jmp    c00055fc <f_expand+0x163>
c000557a:	be 01 00 00 00       	mov    esi,0x1
c000557f:	eb 7b                	jmp    c00055fc <f_expand+0x163>
c0005581:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005586:	74 2b                	je     c00055b3 <f_expand+0x11a>
c0005588:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000558b:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000558f:	85 ed                	test   ebp,ebp
c0005591:	74 24                	je     c00055b7 <f_expand+0x11e>
c0005593:	83 c9 ff             	or     ecx,0xffffffff
c0005596:	83 fd 01             	cmp    ebp,0x1
c0005599:	74 03                	je     c000559e <f_expand+0x105>
c000559b:	8d 4f 01             	lea    ecx,[edi+0x1]
c000559e:	89 fa                	mov    edx,edi
c00055a0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00055a4:	e8 c2 d3 ff ff       	call   c000296b <put_fat>
c00055a9:	85 c0                	test   eax,eax
c00055ab:	75 4d                	jne    c00055fa <f_expand+0x161>
c00055ad:	89 f8                	mov    eax,edi
c00055af:	4d                   	dec    ebp
c00055b0:	47                   	inc    edi
c00055b1:	eb dc                	jmp    c000558f <f_expand+0xf6>
c00055b3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055b6:	48                   	dec    eax
c00055b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00055bb:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00055c0:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00055c3:	74 37                	je     c00055fc <f_expand+0x163>
c00055c5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00055c8:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00055cb:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055cf:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00055d2:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00055d5:	83 c8 40             	or     eax,0x40
c00055d8:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00055db:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00055de:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00055e1:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00055e4:	39 c8                	cmp    eax,ecx
c00055e6:	77 14                	ja     c00055fc <f_expand+0x163>
c00055e8:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00055ec:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00055ef:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00055f2:	83 c8 01             	or     eax,0x1
c00055f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00055f8:	eb 02                	jmp    c00055fc <f_expand+0x163>
c00055fa:	89 c6                	mov    esi,eax
c00055fc:	83 c4 2c             	add    esp,0x2c
c00055ff:	89 f0                	mov    eax,esi
c0005601:	5b                   	pop    ebx
c0005602:	5e                   	pop    esi
c0005603:	5f                   	pop    edi
c0005604:	5d                   	pop    ebp
c0005605:	c3                   	ret    

c0005606 <f_mkfs>:
c0005606:	55                   	push   ebp
c0005607:	57                   	push   edi
c0005608:	56                   	push   esi
c0005609:	be 0b 00 00 00       	mov    esi,0xb
c000560e:	53                   	push   ebx
c000560f:	83 ec 5c             	sub    esp,0x5c
c0005612:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0005616:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c000561a:	8d 44 24 70          	lea    eax,[esp+0x70]
c000561e:	e8 0e ce ff ff       	call   c0002431 <get_ldnumber>
c0005623:	85 c0                	test   eax,eax
c0005625:	0f 88 d1 07 00 00    	js     c0005dfc <f_mkfs+0x7f6>
c000562b:	8b 14 85 a0 74 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8b60]
c0005632:	85 d2                	test   edx,edx
c0005634:	74 03                	je     c0005639 <f_mkfs+0x33>
c0005636:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005639:	85 db                	test   ebx,ebx
c000563b:	75 05                	jne    c0005642 <f_mkfs+0x3c>
c000563d:	bb 40 1a 02 c0       	mov    ebx,0xc0021a40
c0005642:	83 ec 0c             	sub    esp,0xc
c0005645:	0f b6 c0             	movzx  eax,al
c0005648:	be 03 00 00 00       	mov    esi,0x3
c000564d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005651:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005655:	e8 18 c9 ff ff       	call   c0001f72 <disk_initialize>
c000565a:	83 c4 10             	add    esp,0x10
c000565d:	a8 01                	test   al,0x1
c000565f:	0f 85 97 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005665:	be 0a 00 00 00       	mov    esi,0xa
c000566a:	a8 04                	test   al,0x4
c000566c:	0f 85 8a 07 00 00    	jne    c0005dfc <f_mkfs+0x7f6>
c0005672:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005675:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005679:	85 c0                	test   eax,eax
c000567b:	75 20                	jne    c000569d <f_mkfs+0x97>
c000567d:	51                   	push   ecx
c000567e:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005682:	50                   	push   eax
c0005683:	6a 03                	push   0x3
c0005685:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005689:	e8 13 c9 ff ff       	call   c0001fa1 <disk_ioctl>
c000568e:	83 c4 10             	add    esp,0x10
c0005691:	85 c0                	test   eax,eax
c0005693:	74 08                	je     c000569d <f_mkfs+0x97>
c0005695:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c000569d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00056a1:	8d 42 ff             	lea    eax,[edx-0x1]
c00056a4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056a9:	77 04                	ja     c00056af <f_mkfs+0xa9>
c00056ab:	85 c2                	test   edx,eax
c00056ad:	74 08                	je     c00056b7 <f_mkfs+0xb1>
c00056af:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00056b7:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00056ba:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00056be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00056c2:	48                   	dec    eax
c00056c3:	3c 01                	cmp    al,0x1
c00056c5:	76 05                	jbe    c00056cc <f_mkfs+0xc6>
c00056c7:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056cc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00056cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00056d3:	48                   	dec    eax
c00056d4:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00056d9:	77 07                	ja     c00056e2 <f_mkfs+0xdc>
c00056db:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00056e0:	74 08                	je     c00056ea <f_mkfs+0xe4>
c00056e2:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c00056ea:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c00056ed:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c00056f3:	77 07                	ja     c00056fc <f_mkfs+0xf6>
c00056f5:	8d 47 ff             	lea    eax,[edi-0x1]
c00056f8:	85 f8                	test   eax,edi
c00056fa:	74 02                	je     c00056fe <f_mkfs+0xf8>
c00056fc:	31 ff                	xor    edi,edi
c00056fe:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c0005706:	77 0a                	ja     c0005712 <f_mkfs+0x10c>
c0005708:	be 11 00 00 00       	mov    esi,0x11
c000570d:	e9 ea 06 00 00       	jmp    c0005dfc <f_mkfs+0x7f6>
c0005712:	8b 33                	mov    esi,DWORD PTR [ebx]
c0005714:	85 ed                	test   ebp,ebp
c0005716:	89 eb                	mov    ebx,ebp
c0005718:	75 1e                	jne    c0005738 <f_mkfs+0x132>
c000571a:	83 ec 0c             	sub    esp,0xc
c000571d:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0005724:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005729:	50                   	push   eax
c000572a:	e8 d9 06 00 00       	call   c0005e08 <ff_memalloc>
c000572f:	83 c4 10             	add    esp,0x10
c0005732:	89 c3                	mov    ebx,eax
c0005734:	85 c0                	test   eax,eax
c0005736:	74 d0                	je     c0005708 <f_mkfs+0x102>
c0005738:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005740:	52                   	push   edx
c0005741:	8d 44 24 48          	lea    eax,[esp+0x48]
c0005745:	50                   	push   eax
c0005746:	6a 01                	push   0x1
c0005748:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000574c:	e8 50 c8 ff ff       	call   c0001fa1 <disk_ioctl>
c0005751:	83 c4 10             	add    esp,0x10
c0005754:	85 c0                	test   eax,eax
c0005756:	0f 85 49 06 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c000575c:	89 f0                	mov    eax,esi
c000575e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0005766:	83 e0 08             	and    eax,0x8
c0005769:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000576d:	75 18                	jne    c0005787 <f_mkfs+0x181>
c000576f:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005773:	83 f8 3f             	cmp    eax,0x3f
c0005776:	76 0f                	jbe    c0005787 <f_mkfs+0x181>
c0005778:	83 e8 3f             	sub    eax,0x3f
c000577b:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0005783:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0005787:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000578b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000578f:	83 f8 7f             	cmp    eax,0x7f
c0005792:	0f 86 5b 02 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005798:	b9 80 00 00 00       	mov    ecx,0x80
c000579d:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00057a3:	77 05                	ja     c00057aa <f_mkfs+0x1a4>
c00057a5:	c1 ef 09             	shr    edi,0x9
c00057a8:	89 f9                	mov    ecx,edi
c00057aa:	89 f0                	mov    eax,esi
c00057ac:	89 f7                	mov    edi,esi
c00057ae:	83 e0 01             	and    eax,0x1
c00057b1:	83 e7 02             	and    edi,0x2
c00057b4:	0f b6 c0             	movzx  eax,al
c00057b7:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00057bb:	74 0a                	je     c00057c7 <f_mkfs+0x1c1>
c00057bd:	85 c0                	test   eax,eax
c00057bf:	0f 84 4f 01 00 00    	je     c0005914 <f_mkfs+0x30e>
c00057c5:	eb 37                	jmp    c00057fe <f_mkfs+0x1f8>
c00057c7:	be 13 00 00 00       	mov    esi,0x13
c00057cc:	85 c0                	test   eax,eax
c00057ce:	75 2e                	jne    c00057fe <f_mkfs+0x1f8>
c00057d0:	e9 e7 05 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00057d5:	83 f8 02             	cmp    eax,0x2
c00057d8:	0f 85 0d 02 00 00    	jne    c00059eb <f_mkfs+0x3e5>
c00057de:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00057e4:	0f 86 e4 01 00 00    	jbe    c00059ce <f_mkfs+0x3c8>
c00057ea:	85 c9                	test   ecx,ecx
c00057ec:	0f 85 dc 05 00 00    	jne    c0005dce <f_mkfs+0x7c8>
c00057f2:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f5:	83 f9 40             	cmp    ecx,0x40
c00057f8:	0f 87 e0 05 00 00    	ja     c0005dde <f_mkfs+0x7d8>
c00057fe:	89 cf                	mov    edi,ecx
c0005800:	85 c9                	test   ecx,ecx
c0005802:	75 1c                	jne    c0005820 <f_mkfs+0x21a>
c0005804:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005808:	b8 20 1a 02 c0       	mov    eax,0xc0021a20
c000580d:	c1 ee 0c             	shr    esi,0xc
c0005810:	bf 01 00 00 00       	mov    edi,0x1
c0005815:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005818:	85 d2                	test   edx,edx
c000581a:	0f 85 63 01 00 00    	jne    c0005983 <f_mkfs+0x37d>
c0005820:	31 d2                	xor    edx,edx
c0005822:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005826:	f7 f7                	div    edi
c0005828:	3d f5 0f 00 00       	cmp    eax,0xff5
c000582d:	0f 86 62 01 00 00    	jbe    c0005995 <f_mkfs+0x38f>
c0005833:	83 c0 02             	add    eax,0x2
c0005836:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c000583b:	01 c0                	add    eax,eax
c000583d:	05 ff 01 00 00       	add    eax,0x1ff
c0005842:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c000584a:	c1 e8 09             	shr    eax,0x9
c000584d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005851:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005855:	c1 e0 05             	shl    eax,0x5
c0005858:	c1 e8 09             	shr    eax,0x9
c000585b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000585f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0005864:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0005868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000586c:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005870:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005878:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c000587d:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005881:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0005885:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0005889:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000588d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005891:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c0005895:	f7 d8                	neg    eax
c0005897:	21 c6                	and    esi,eax
c0005899:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000589e:	29 d6                	sub    esi,edx
c00058a0:	83 f8 03             	cmp    eax,0x3
c00058a3:	0f 85 ff 00 00 00    	jne    c00059a8 <f_mkfs+0x3a2>
c00058a9:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00058ad:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00058b1:	89 f8                	mov    eax,edi
c00058b3:	c1 e0 04             	shl    eax,0x4
c00058b6:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00058ba:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00058be:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00058c2:	0f 82 2b 01 00 00    	jb     c00059f3 <f_mkfs+0x3ed>
c00058c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00058cc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058d0:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00058d4:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00058d9:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00058dd:	29 d0                	sub    eax,edx
c00058df:	31 d2                	xor    edx,edx
c00058e1:	f7 f7                	div    edi
c00058e3:	89 c6                	mov    esi,eax
c00058e5:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058ea:	83 f8 03             	cmp    eax,0x3
c00058ed:	0f 85 e2 fe ff ff    	jne    c00057d5 <f_mkfs+0x1cf>
c00058f3:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00058f9:	0f 87 03 01 00 00    	ja     c0005a02 <f_mkfs+0x3fc>
c00058ff:	85 c9                	test   ecx,ecx
c0005901:	0f 85 ec 00 00 00    	jne    c00059f3 <f_mkfs+0x3ed>
c0005907:	83 ff 01             	cmp    edi,0x1
c000590a:	0f 86 e3 00 00 00    	jbe    c00059f3 <f_mkfs+0x3ed>
c0005910:	d1 ef                	shr    edi,1
c0005912:	89 f9                	mov    ecx,edi
c0005914:	89 ce                	mov    esi,ecx
c0005916:	85 c9                	test   ecx,ecx
c0005918:	75 25                	jne    c000593f <f_mkfs+0x339>
c000591a:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000591e:	b8 30 1a 02 c0       	mov    eax,0xc0021a30
c0005923:	c1 ee 11             	shr    esi,0x11
c0005926:	b9 01 00 00 00       	mov    ecx,0x1
c000592b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000592e:	85 d2                	test   edx,edx
c0005930:	74 0b                	je     c000593d <f_mkfs+0x337>
c0005932:	83 c0 02             	add    eax,0x2
c0005935:	39 f2                	cmp    edx,esi
c0005937:	77 04                	ja     c000593d <f_mkfs+0x337>
c0005939:	01 c9                	add    ecx,ecx
c000593b:	eb ee                	jmp    c000592b <f_mkfs+0x325>
c000593d:	31 f6                	xor    esi,esi
c000593f:	31 d2                	xor    edx,edx
c0005941:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005945:	f7 f1                	div    ecx
c0005947:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c000594e:	2d f6 ff 00 00       	sub    eax,0xfff6
c0005953:	c1 ea 09             	shr    edx,0x9
c0005956:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c000595b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000595f:	0f 87 8e 00 00 00    	ja     c00059f3 <f_mkfs+0x3ed>
c0005965:	89 cf                	mov    edi,ecx
c0005967:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000596f:	89 f1                	mov    ecx,esi
c0005971:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005979:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c000597e:	e9 dc fe ff ff       	jmp    c000585f <f_mkfs+0x259>
c0005983:	83 c0 02             	add    eax,0x2
c0005986:	39 f2                	cmp    edx,esi
c0005988:	0f 87 92 fe ff ff    	ja     c0005820 <f_mkfs+0x21a>
c000598e:	01 ff                	add    edi,edi
c0005990:	e9 80 fe ff ff       	jmp    c0005815 <f_mkfs+0x20f>
c0005995:	8d 04 40             	lea    eax,[eax+eax*2]
c0005998:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c000599d:	40                   	inc    eax
c000599e:	d1 e8                	shr    eax,1
c00059a0:	83 c0 03             	add    eax,0x3
c00059a3:	e9 95 fe ff ff       	jmp    c000583d <f_mkfs+0x237>
c00059a8:	31 d2                	xor    edx,edx
c00059aa:	89 f0                	mov    eax,esi
c00059ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059b0:	85 d2                	test   edx,edx
c00059b2:	74 09                	je     c00059bd <f_mkfs+0x3b7>
c00059b4:	4e                   	dec    esi
c00059b5:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00059b9:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00059bd:	89 f0                	mov    eax,esi
c00059bf:	31 d2                	xor    edx,edx
c00059c1:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00059c5:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00059c9:	e9 e3 fe ff ff       	jmp    c00058b1 <f_mkfs+0x2ab>
c00059ce:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059d4:	77 2c                	ja     c0005a02 <f_mkfs+0x3fc>
c00059d6:	85 c9                	test   ecx,ecx
c00059d8:	75 19                	jne    c00059f3 <f_mkfs+0x3ed>
c00059da:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00059dd:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00059e3:	0f 86 15 fe ff ff    	jbe    c00057fe <f_mkfs+0x1f8>
c00059e9:	eb 08                	jmp    c00059f3 <f_mkfs+0x3ed>
c00059eb:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00059f1:	76 0a                	jbe    c00059fd <f_mkfs+0x3f7>
c00059f3:	be 0e 00 00 00       	mov    esi,0xe
c00059f8:	e9 bf 03 00 00       	jmp    c0005dbc <f_mkfs+0x7b6>
c00059fd:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005a02:	31 d2                	xor    edx,edx
c0005a04:	b9 00 02 00 00       	mov    ecx,0x200
c0005a09:	89 d8                	mov    eax,ebx
c0005a0b:	e8 f1 c5 ff ff       	call   c0002001 <mem_set>
c0005a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0005a15:	ba d2 19 02 c0       	mov    edx,0xc00219d2
c0005a1a:	89 d8                	mov    eax,ebx
c0005a1c:	e8 cb c5 ff ff       	call   c0001fec <mem_cpy>
c0005a21:	8d 43 0b             	lea    eax,[ebx+0xb]
c0005a24:	ba 00 02 00 00       	mov    edx,0x200
c0005a29:	e8 b7 c5 ff ff       	call   c0001fe5 <st_word>
c0005a2e:	89 f8                	mov    eax,edi
c0005a30:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c0005a35:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c0005a38:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005a3b:	e8 a5 c5 ff ff       	call   c0001fe5 <st_word>
c0005a40:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c0005a44:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0005a47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a4c:	83 f8 03             	cmp    eax,0x3
c0005a4f:	75 08                	jne    c0005a59 <f_mkfs+0x453>
c0005a51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005a59:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005a5d:	8d 43 11             	lea    eax,[ebx+0x11]
c0005a60:	e8 80 c5 ff ff       	call   c0001fe5 <st_word>
c0005a65:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005a69:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005a6f:	77 0a                	ja     c0005a7b <f_mkfs+0x475>
c0005a71:	8d 43 13             	lea    eax,[ebx+0x13]
c0005a74:	e8 6c c5 ff ff       	call   c0001fe5 <st_word>
c0005a79:	eb 08                	jmp    c0005a83 <f_mkfs+0x47d>
c0005a7b:	8d 43 20             	lea    eax,[ebx+0x20]
c0005a7e:	e8 66 c5 ff ff       	call   c0001fe9 <st_dword>
c0005a83:	8d 43 18             	lea    eax,[ebx+0x18]
c0005a86:	ba 3f 00 00 00       	mov    edx,0x3f
c0005a8b:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c0005a8f:	e8 51 c5 ff ff       	call   c0001fe5 <st_word>
c0005a94:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0005a97:	ba ff 00 00 00       	mov    edx,0xff
c0005a9c:	e8 44 c5 ff ff       	call   c0001fe5 <st_word>
c0005aa1:	8d 43 1c             	lea    eax,[ebx+0x1c]
c0005aa4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005aa8:	e8 3c c5 ff ff       	call   c0001fe9 <st_dword>
c0005aad:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005ab2:	83 f8 03             	cmp    eax,0x3
c0005ab5:	75 57                	jne    c0005b0e <f_mkfs+0x508>
c0005ab7:	8d 43 43             	lea    eax,[ebx+0x43]
c0005aba:	ba 00 00 21 50       	mov    edx,0x50210000
c0005abf:	e8 25 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ac4:	8d 43 24             	lea    eax,[ebx+0x24]
c0005ac7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0005acb:	e8 19 c5 ff ff       	call   c0001fe9 <st_dword>
c0005ad0:	8d 43 2c             	lea    eax,[ebx+0x2c]
c0005ad3:	ba 02 00 00 00       	mov    edx,0x2
c0005ad8:	e8 0c c5 ff ff       	call   c0001fe9 <st_dword>
c0005add:	8d 43 30             	lea    eax,[ebx+0x30]
c0005ae0:	ba 01 00 00 00       	mov    edx,0x1
c0005ae5:	e8 fb c4 ff ff       	call   c0001fe5 <st_word>
c0005aea:	8d 43 32             	lea    eax,[ebx+0x32]
c0005aed:	ba 06 00 00 00       	mov    edx,0x6
c0005af2:	e8 ee c4 ff ff       	call   c0001fe5 <st_word>
c0005af7:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005afb:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005aff:	8d 43 47             	lea    eax,[ebx+0x47]
c0005b02:	b9 13 00 00 00       	mov    ecx,0x13
c0005b07:	ba de 19 02 c0       	mov    edx,0xc00219de
c0005b0c:	eb 2f                	jmp    c0005b3d <f_mkfs+0x537>
c0005b0e:	8d 43 27             	lea    eax,[ebx+0x27]
c0005b11:	ba 00 00 21 50       	mov    edx,0x50210000
c0005b16:	e8 ce c4 ff ff       	call   c0001fe9 <st_dword>
c0005b1b:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005b20:	8d 43 16             	lea    eax,[ebx+0x16]
c0005b23:	e8 bd c4 ff ff       	call   c0001fe5 <st_word>
c0005b28:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005b2c:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005b30:	8d 43 2b             	lea    eax,[ebx+0x2b]
c0005b33:	b9 13 00 00 00       	mov    ecx,0x13
c0005b38:	ba f2 19 02 c0       	mov    edx,0xc00219f2
c0005b3d:	e8 aa c4 ff ff       	call   c0001fec <mem_cpy>
c0005b42:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005b48:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005b4d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005b51:	e8 8f c4 ff ff       	call   c0001fe5 <st_word>
c0005b56:	6a 01                	push   0x1
c0005b58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005b5c:	53                   	push   ebx
c0005b5d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b61:	e8 25 c4 ff ff       	call   c0001f8b <disk_write>
c0005b66:	83 c4 10             	add    esp,0x10
c0005b69:	85 c0                	test   eax,eax
c0005b6b:	0f 85 34 02 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005b71:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b76:	83 f8 03             	cmp    eax,0x3
c0005b79:	0f 85 98 00 00 00    	jne    c0005c17 <f_mkfs+0x611>
c0005b7f:	6a 01                	push   0x1
c0005b81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005b85:	83 c0 06             	add    eax,0x6
c0005b88:	50                   	push   eax
c0005b89:	53                   	push   ebx
c0005b8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b8e:	e8 f8 c3 ff ff       	call   c0001f8b <disk_write>
c0005b93:	b9 00 02 00 00       	mov    ecx,0x200
c0005b98:	31 d2                	xor    edx,edx
c0005b9a:	89 d8                	mov    eax,ebx
c0005b9c:	e8 60 c4 ff ff       	call   c0002001 <mem_set>
c0005ba1:	ba 52 52 61 41       	mov    edx,0x41615252
c0005ba6:	89 d8                	mov    eax,ebx
c0005ba8:	e8 3c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bad:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c0005bb3:	ba 72 72 41 61       	mov    edx,0x61417272
c0005bb8:	e8 2c c4 ff ff       	call   c0001fe9 <st_dword>
c0005bbd:	8d 56 ff             	lea    edx,[esi-0x1]
c0005bc0:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c0005bc6:	e8 1e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bcb:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c0005bd1:	ba 02 00 00 00       	mov    edx,0x2
c0005bd6:	e8 0e c4 ff ff       	call   c0001fe9 <st_dword>
c0005bdb:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005be0:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0005be6:	e8 fa c3 ff ff       	call   c0001fe5 <st_word>
c0005beb:	6a 01                	push   0x1
c0005bed:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005bf1:	83 c0 07             	add    eax,0x7
c0005bf4:	50                   	push   eax
c0005bf5:	53                   	push   ebx
c0005bf6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005bfa:	e8 8c c3 ff ff       	call   c0001f8b <disk_write>
c0005bff:	83 c4 20             	add    esp,0x20
c0005c02:	6a 01                	push   0x1
c0005c04:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005c08:	40                   	inc    eax
c0005c09:	50                   	push   eax
c0005c0a:	53                   	push   ebx
c0005c0b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005c0f:	e8 77 c3 ff ff       	call   c0001f8b <disk_write>
c0005c14:	83 c4 10             	add    esp,0x10
c0005c17:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005c1b:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005c1f:	c1 e8 09             	shr    eax,0x9
c0005c22:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005c28:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005c2c:	31 d2                	xor    edx,edx
c0005c2e:	89 d8                	mov    eax,ebx
c0005c30:	e8 cc c3 ff ff       	call   c0002001 <mem_set>
c0005c35:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005c3a:	31 c9                	xor    ecx,ecx
c0005c3c:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005c44:	83 f8 01             	cmp    eax,0x1
c0005c47:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005c4b:	0f 94 c1             	sete   cl
c0005c4e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005c52:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005c56:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005c5e:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005c66:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005c6b:	75 21                	jne    c0005c8e <f_mkfs+0x688>
c0005c6d:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005c72:	89 d8                	mov    eax,ebx
c0005c74:	e8 70 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c79:	8d 43 04             	lea    eax,[ebx+0x4]
c0005c7c:	83 ca ff             	or     edx,0xffffffff
c0005c7f:	e8 65 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c84:	8d 43 08             	lea    eax,[ebx+0x8]
c0005c87:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005c8c:	eb 06                	jmp    c0005c94 <f_mkfs+0x68e>
c0005c8e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005c92:	89 d8                	mov    eax,ebx
c0005c94:	e8 50 c3 ff ff       	call   c0001fe9 <st_dword>
c0005c99:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ca1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005ca5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ca9:	39 ce                	cmp    esi,ecx
c0005cab:	76 02                	jbe    c0005caf <f_mkfs+0x6a9>
c0005cad:	89 ce                	mov    esi,ecx
c0005caf:	56                   	push   esi
c0005cb0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005cb4:	53                   	push   ebx
c0005cb5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005cb9:	e8 cd c2 ff ff       	call   c0001f8b <disk_write>
c0005cbe:	83 c4 10             	add    esp,0x10
c0005cc1:	85 c0                	test   eax,eax
c0005cc3:	0f 85 dc 00 00 00    	jne    c0005da5 <f_mkfs+0x79f>
c0005cc9:	31 d2                	xor    edx,edx
c0005ccb:	b9 00 02 00 00       	mov    ecx,0x200
c0005cd0:	89 d8                	mov    eax,ebx
c0005cd2:	e8 2a c3 ff ff       	call   c0002001 <mem_set>
c0005cd7:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005cdb:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005cdf:	75 c0                	jne    c0005ca1 <f_mkfs+0x69b>
c0005ce1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005ce5:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005ced:	40                   	inc    eax
c0005cee:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005cf2:	0f 87 6e ff ff ff    	ja     c0005c66 <f_mkfs+0x660>
c0005cf8:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005cfd:	83 f8 03             	cmp    eax,0x3
c0005d00:	74 04                	je     c0005d06 <f_mkfs+0x700>
c0005d02:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005d06:	89 fe                	mov    esi,edi
c0005d08:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005d0c:	76 04                	jbe    c0005d12 <f_mkfs+0x70c>
c0005d0e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005d12:	56                   	push   esi
c0005d13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005d17:	53                   	push   ebx
c0005d18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d1c:	e8 6a c2 ff ff       	call   c0001f8b <disk_write>
c0005d21:	83 c4 10             	add    esp,0x10
c0005d24:	85 c0                	test   eax,eax
c0005d26:	75 7d                	jne    c0005da5 <f_mkfs+0x79f>
c0005d28:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005d2c:	29 f7                	sub    edi,esi
c0005d2e:	75 d6                	jne    c0005d06 <f_mkfs+0x700>
c0005d30:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005d35:	b9 0c 00 00 00       	mov    ecx,0xc
c0005d3a:	83 f8 03             	cmp    eax,0x3
c0005d3d:	74 1e                	je     c0005d5d <f_mkfs+0x757>
c0005d3f:	b9 06 00 00 00       	mov    ecx,0x6
c0005d44:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005d4c:	77 0f                	ja     c0005d5d <f_mkfs+0x757>
c0005d4e:	b9 04 00 00 00       	mov    ecx,0x4
c0005d53:	83 f8 02             	cmp    eax,0x2
c0005d56:	74 05                	je     c0005d5d <f_mkfs+0x757>
c0005d58:	b9 01 00 00 00       	mov    ecx,0x1
c0005d5d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005d62:	75 2a                	jne    c0005d8e <f_mkfs+0x788>
c0005d64:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005d68:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005d70:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005d74:	83 ec 0c             	sub    esp,0xc
c0005d77:	53                   	push   ebx
c0005d78:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005d7c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005d80:	e8 89 d2 ff ff       	call   c000300e <create_partition>
c0005d85:	83 c4 10             	add    esp,0x10
c0005d88:	89 c6                	mov    esi,eax
c0005d8a:	85 c0                	test   eax,eax
c0005d8c:	75 2e                	jne    c0005dbc <f_mkfs+0x7b6>
c0005d8e:	31 f6                	xor    esi,esi
c0005d90:	50                   	push   eax
c0005d91:	6a 00                	push   0x0
c0005d93:	6a 00                	push   0x0
c0005d95:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005d99:	e8 03 c2 ff ff       	call   c0001fa1 <disk_ioctl>
c0005d9e:	83 c4 10             	add    esp,0x10
c0005da1:	85 c0                	test   eax,eax
c0005da3:	74 17                	je     c0005dbc <f_mkfs+0x7b6>
c0005da5:	85 ed                	test   ebp,ebp
c0005da7:	75 0c                	jne    c0005db5 <f_mkfs+0x7af>
c0005da9:	83 ec 0c             	sub    esp,0xc
c0005dac:	53                   	push   ebx
c0005dad:	e8 6e 00 00 00       	call   c0005e20 <ff_memfree>
c0005db2:	83 c4 10             	add    esp,0x10
c0005db5:	be 01 00 00 00       	mov    esi,0x1
c0005dba:	eb 40                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dbc:	85 ed                	test   ebp,ebp
c0005dbe:	75 3c                	jne    c0005dfc <f_mkfs+0x7f6>
c0005dc0:	83 ec 0c             	sub    esp,0xc
c0005dc3:	53                   	push   ebx
c0005dc4:	e8 57 00 00 00       	call   c0005e20 <ff_memfree>
c0005dc9:	83 c4 10             	add    esp,0x10
c0005dcc:	eb 2e                	jmp    c0005dfc <f_mkfs+0x7f6>
c0005dce:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005dd3:	0f 85 3b fb ff ff    	jne    c0005914 <f_mkfs+0x30e>
c0005dd9:	e9 15 fc ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dde:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005de3:	0f 85 31 fb ff ff    	jne    c000591a <f_mkfs+0x314>
c0005de9:	89 cf                	mov    edi,ecx
c0005deb:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005df1:	0f 86 29 fa ff ff    	jbe    c0005820 <f_mkfs+0x21a>
c0005df7:	e9 f7 fb ff ff       	jmp    c00059f3 <f_mkfs+0x3ed>
c0005dfc:	83 c4 5c             	add    esp,0x5c
c0005dff:	89 f0                	mov    eax,esi
c0005e01:	5b                   	pop    ebx
c0005e02:	5e                   	pop    esi
c0005e03:	5f                   	pop    edi
c0005e04:	5d                   	pop    ebp
c0005e05:	c3                   	ret    
c0005e06:	66 90                	xchg   ax,ax

c0005e08 <ff_memalloc>:
c0005e08:	83 ec 0c             	sub    esp,0xc
c0005e0b:	83 ec 0c             	sub    esp,0xc
c0005e0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e12:	e8 ec 94 00 00       	call   c000f303 <malloc>
c0005e17:	83 c4 10             	add    esp,0x10
c0005e1a:	83 c4 0c             	add    esp,0xc
c0005e1d:	c3                   	ret    
c0005e1e:	66 90                	xchg   ax,ax

c0005e20 <ff_memfree>:
c0005e20:	83 ec 0c             	sub    esp,0xc
c0005e23:	83 ec 0c             	sub    esp,0xc
c0005e26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005e2a:	e8 e4 94 00 00       	call   c000f313 <free>
c0005e2f:	83 c4 10             	add    esp,0x10
c0005e32:	90                   	nop
c0005e33:	83 c4 0c             	add    esp,0xc
c0005e36:	c3                   	ret    
c0005e37:	90                   	nop

c0005e38 <ff_uni2oem>:
c0005e38:	83 ec 14             	sub    esp,0x14
c0005e3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005e3f:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005e43:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e4a:	c7 44 24 0c 20 1e 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021e20
c0005e52:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005e57:	77 0b                	ja     c0005e64 <ff_uni2oem+0x2c>
c0005e59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005e5d:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e62:	eb 68                	jmp    c0005ecc <ff_uni2oem+0x94>
c0005e64:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005e6c:	77 5e                	ja     c0005ecc <ff_uni2oem+0x94>
c0005e6e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005e72:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005e77:	75 53                	jne    c0005ecc <ff_uni2oem+0x94>
c0005e79:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005e80:	eb 12                	jmp    c0005e94 <ff_uni2oem+0x5c>
c0005e82:	66 90                	xchg   ax,ax
c0005e84:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005e89:	83 c0 01             	add    eax,0x1
c0005e8c:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005e91:	8d 76 00             	lea    esi,[esi+0x0]
c0005e94:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005e99:	83 f8 7f             	cmp    eax,0x7f
c0005e9c:	77 1e                	ja     c0005ebc <ff_uni2oem+0x84>
c0005e9e:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005ea3:	01 c0                	add    eax,eax
c0005ea5:	89 c2                	mov    edx,eax
c0005ea7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005eab:	01 d0                	add    eax,edx
c0005ead:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005eb0:	0f b7 c0             	movzx  eax,ax
c0005eb3:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005eb7:	75 cb                	jne    c0005e84 <ff_uni2oem+0x4c>
c0005eb9:	8d 76 00             	lea    esi,[esi+0x0]
c0005ebc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ec1:	83 e8 80             	sub    eax,0xffffff80
c0005ec4:	0f b6 c0             	movzx  eax,al
c0005ec7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ecc:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ed1:	83 c4 14             	add    esp,0x14
c0005ed4:	c3                   	ret    
c0005ed5:	8d 76 00             	lea    esi,[esi+0x0]

c0005ed8 <ff_oem2uni>:
c0005ed8:	83 ec 18             	sub    esp,0x18
c0005edb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005edf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005ee3:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005ee8:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005eec:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005ef3:	c7 44 24 10 20 1e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021e20
c0005efb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f00:	83 f8 7f             	cmp    eax,0x7f
c0005f03:	77 0b                	ja     c0005f10 <ff_oem2uni+0x38>
c0005f05:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005f09:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f0e:	eb 34                	jmp    c0005f44 <ff_oem2uni+0x6c>
c0005f10:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005f14:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005f19:	75 29                	jne    c0005f44 <ff_oem2uni+0x6c>
c0005f1b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f20:	3d ff 00 00 00       	cmp    eax,0xff
c0005f25:	77 1d                	ja     c0005f44 <ff_oem2uni+0x6c>
c0005f27:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005f2c:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005f31:	01 c0                	add    eax,eax
c0005f33:	89 c2                	mov    edx,eax
c0005f35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005f39:	01 d0                	add    eax,edx
c0005f3b:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f3e:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005f43:	90                   	nop
c0005f44:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005f49:	83 c4 18             	add    esp,0x18
c0005f4c:	c3                   	ret    
c0005f4d:	8d 76 00             	lea    esi,[esi+0x0]

c0005f50 <ff_wtoupper>:
c0005f50:	83 ec 10             	sub    esp,0x10
c0005f53:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005f5b:	0f 87 ab 01 00 00    	ja     c000610c <ff_wtoupper+0x1bc>
c0005f61:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f65:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005f6a:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f6f:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005f74:	77 0a                	ja     c0005f80 <ff_wtoupper+0x30>
c0005f76:	b8 20 1c 02 c0       	mov    eax,0xc0021c20
c0005f7b:	eb 0b                	jmp    c0005f88 <ff_wtoupper+0x38>
c0005f7d:	8d 76 00             	lea    esi,[esi+0x0]
c0005f80:	b8 60 1b 02 c0       	mov    eax,0xc0021b60
c0005f85:	8d 76 00             	lea    esi,[esi+0x0]
c0005f88:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005f8c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005f90:	8d 50 02             	lea    edx,[eax+0x2]
c0005f93:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f97:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005f9a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005f9f:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fa4:	85 c0                	test   eax,eax
c0005fa6:	0f 84 54 01 00 00    	je     c0006100 <ff_wtoupper+0x1b0>
c0005fac:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005fb1:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005fb6:	39 c2                	cmp    edx,eax
c0005fb8:	0f 82 42 01 00 00    	jb     c0006100 <ff_wtoupper+0x1b0>
c0005fbe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005fc2:	8d 50 02             	lea    edx,[eax+0x2]
c0005fc5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005fc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005fcc:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005fd1:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005fd6:	c1 e8 08             	shr    eax,0x8
c0005fd9:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005fde:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005fe3:	0f b6 c0             	movzx  eax,al
c0005fe6:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005feb:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005ff0:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005ff5:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005ffa:	01 ca                	add    edx,ecx
c0005ffc:	39 d0                	cmp    eax,edx
c0005ffe:	0f 8d d8 00 00 00    	jge    c00060dc <ff_wtoupper+0x18c>
c0006004:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0006009:	83 f8 08             	cmp    eax,0x8
c000600c:	0f 87 ea 00 00 00    	ja     c00060fc <ff_wtoupper+0x1ac>
c0006012:	8b 04 85 20 1b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffde4e0]
c0006019:	ff e0                	jmp    eax
c000601b:	90                   	nop
c000601c:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0006021:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0006026:	29 c2                	sub    edx,eax
c0006028:	89 d0                	mov    eax,edx
c000602a:	01 c0                	add    eax,eax
c000602c:	89 c2                	mov    edx,eax
c000602e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006032:	01 d0                	add    eax,edx
c0006034:	66 8b 00             	mov    ax,WORD PTR [eax]
c0006037:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c000603c:	e9 97 00 00 00       	jmp    c00060d8 <ff_wtoupper+0x188>
c0006041:	8d 76 00             	lea    esi,[esi+0x0]
c0006044:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0006049:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000604d:	89 d1                	mov    ecx,edx
c000604f:	29 c1                	sub    ecx,eax
c0006051:	89 c8                	mov    eax,ecx
c0006053:	83 e0 01             	and    eax,0x1
c0006056:	89 c2                	mov    edx,eax
c0006058:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000605d:	29 d0                	sub    eax,edx
c000605f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006064:	eb 72                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006066:	66 90                	xchg   ax,ax
c0006068:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000606d:	83 e8 10             	sub    eax,0x10
c0006070:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006075:	eb 61                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006077:	90                   	nop
c0006078:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000607d:	83 e8 20             	sub    eax,0x20
c0006080:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006085:	eb 51                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006087:	90                   	nop
c0006088:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000608d:	83 e8 30             	sub    eax,0x30
c0006090:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0006095:	eb 41                	jmp    c00060d8 <ff_wtoupper+0x188>
c0006097:	90                   	nop
c0006098:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000609d:	83 e8 1a             	sub    eax,0x1a
c00060a0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060a5:	eb 31                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060a7:	90                   	nop
c00060a8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060ad:	83 c0 08             	add    eax,0x8
c00060b0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060b5:	eb 21                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060b7:	90                   	nop
c00060b8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060bd:	83 e8 50             	sub    eax,0x50
c00060c0:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060c5:	eb 11                	jmp    c00060d8 <ff_wtoupper+0x188>
c00060c7:	90                   	nop
c00060c8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00060cd:	2d 60 1c 00 00       	sub    eax,0x1c60
c00060d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00060d7:	90                   	nop
c00060d8:	eb 22                	jmp    c00060fc <ff_wtoupper+0x1ac>
c00060da:	66 90                	xchg   ax,ax
c00060dc:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00060e1:	85 c0                	test   eax,eax
c00060e3:	0f 85 a3 fe ff ff    	jne    c0005f8c <ff_wtoupper+0x3c>
c00060e9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00060ee:	01 c0                	add    eax,eax
c00060f0:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00060f4:	e9 93 fe ff ff       	jmp    c0005f8c <ff_wtoupper+0x3c>
c00060f9:	8d 76 00             	lea    esi,[esi+0x0]
c00060fc:	90                   	nop
c00060fd:	8d 76 00             	lea    esi,[esi+0x0]
c0006100:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0006105:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006109:	8d 76 00             	lea    esi,[esi+0x0]
c000610c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006110:	83 c4 10             	add    esp,0x10
c0006113:	c3                   	ret    

c0006114 <utf2ucs>:
c0006114:	57                   	push   edi
c0006115:	31 c9                	xor    ecx,ecx
c0006117:	56                   	push   esi
c0006118:	89 d7                	mov    edi,edx
c000611a:	53                   	push   ebx
c000611b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c000611f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0006123:	89 de                	mov    esi,ebx
c0006125:	c1 fe 08             	sar    esi,0x8
c0006128:	89 f2                	mov    edx,esi
c000612a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c000612d:	41                   	inc    ecx
c000612e:	85 db                	test   ebx,ebx
c0006130:	75 e9                	jne    c000611b <utf2ucs+0x7>
c0006132:	5b                   	pop    ebx
c0006133:	5e                   	pop    esi
c0006134:	5f                   	pop    edi
c0006135:	c3                   	ret    

c0006136 <ucs2utfn>:
c0006136:	83 e1 fe             	and    ecx,0xfffffffe
c0006139:	01 d1                	add    ecx,edx
c000613b:	39 d1                	cmp    ecx,edx
c000613d:	75 04                	jne    c0006143 <ucs2utfn+0xd>
c000613f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006142:	c3                   	ret    
c0006143:	57                   	push   edi
c0006144:	56                   	push   esi
c0006145:	53                   	push   ebx
c0006146:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0006149:	83 c2 02             	add    edx,0x2
c000614c:	89 de                	mov    esi,ebx
c000614e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0006152:	c1 e6 08             	shl    esi,0x8
c0006155:	09 f3                	or     ebx,esi
c0006157:	83 fb 3b             	cmp    ebx,0x3b
c000615a:	74 50                	je     c00061ac <ucs2utfn+0x76>
c000615c:	83 fb 7f             	cmp    ebx,0x7f
c000615f:	7f 05                	jg     c0006166 <ucs2utfn+0x30>
c0006161:	88 18                	mov    BYTE PTR [eax],bl
c0006163:	40                   	inc    eax
c0006164:	eb 42                	jmp    c00061a8 <ucs2utfn+0x72>
c0006166:	89 de                	mov    esi,ebx
c0006168:	89 df                	mov    edi,ebx
c000616a:	c1 fe 06             	sar    esi,0x6
c000616d:	83 e7 3f             	and    edi,0x3f
c0006170:	83 cf 80             	or     edi,0xffffff80
c0006173:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0006179:	7f 12                	jg     c000618d <ucs2utfn+0x57>
c000617b:	83 ce c0             	or     esi,0xffffffc0
c000617e:	83 c0 02             	add    eax,0x2
c0006181:	89 f3                	mov    ebx,esi
c0006183:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0006186:	89 fb                	mov    ebx,edi
c0006188:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c000618b:	eb 1b                	jmp    c00061a8 <ucs2utfn+0x72>
c000618d:	c1 fb 0c             	sar    ebx,0xc
c0006190:	83 e6 3f             	and    esi,0x3f
c0006193:	83 cb e0             	or     ebx,0xffffffe0
c0006196:	83 ce 80             	or     esi,0xffffff80
c0006199:	88 18                	mov    BYTE PTR [eax],bl
c000619b:	89 f3                	mov    ebx,esi
c000619d:	83 c0 03             	add    eax,0x3
c00061a0:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c00061a3:	89 fb                	mov    ebx,edi
c00061a5:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c00061a8:	39 d1                	cmp    ecx,edx
c00061aa:	75 9a                	jne    c0006146 <ucs2utfn+0x10>
c00061ac:	5b                   	pop    ebx
c00061ad:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00061b0:	5e                   	pop    esi
c00061b1:	5f                   	pop    edi
c00061b2:	c3                   	ret    

c00061b3 <isjoliet>:
c00061b3:	31 d2                	xor    edx,edx
c00061b5:	80 38 25             	cmp    BYTE PTR [eax],0x25
c00061b8:	75 26                	jne    c00061e0 <isjoliet+0x2d>
c00061ba:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c00061be:	75 20                	jne    c00061e0 <isjoliet+0x2d>
c00061c0:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c00061c4:	ba 02 00 00 00       	mov    edx,0x2
c00061c9:	83 f8 43             	cmp    eax,0x43
c00061cc:	74 12                	je     c00061e0 <isjoliet+0x2d>
c00061ce:	ba 03 00 00 00       	mov    edx,0x3
c00061d3:	83 f8 45             	cmp    eax,0x45
c00061d6:	74 08                	je     c00061e0 <isjoliet+0x2d>
c00061d8:	31 d2                	xor    edx,edx
c00061da:	83 f8 40             	cmp    eax,0x40
c00061dd:	0f 94 c2             	sete   dl
c00061e0:	89 d0                	mov    eax,edx
c00061e2:	c3                   	ret    

c00061e3 <htohl_32>:
c00061e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00061e5:	c3                   	ret    

c00061e6 <iso_733>:
c00061e6:	eb fb                	jmp    c00061e3 <htohl_32>

c00061e8 <bgrad_cache>:
c00061e8:	83 fa 0e             	cmp    edx,0xe
c00061eb:	77 16                	ja     c0006203 <bgrad_cache+0x1b>
c00061ed:	53                   	push   ebx
c00061ee:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c00061f1:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c00061f5:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c00061f8:	42                   	inc    edx
c00061f9:	83 fa 0f             	cmp    edx,0xf
c00061fc:	75 f3                	jne    c00061f1 <bgrad_cache+0x9>
c00061fe:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006201:	5b                   	pop    ebx
c0006202:	c3                   	ret    
c0006203:	c3                   	ret    

c0006204 <ucscompare>:
c0006204:	55                   	push   ebp
c0006205:	57                   	push   edi
c0006206:	89 c7                	mov    edi,eax
c0006208:	56                   	push   esi
c0006209:	89 d6                	mov    esi,edx
c000620b:	53                   	push   ebx
c000620c:	31 d2                	xor    edx,edx
c000620e:	83 ec 1c             	sub    esp,0x1c
c0006211:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0006215:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c000621a:	c1 e3 08             	shl    ebx,0x8
c000621d:	09 c3                	or     ebx,eax
c000621f:	39 ca                	cmp    edx,ecx
c0006221:	7d 42                	jge    c0006265 <ucscompare+0x61>
c0006223:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0006227:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c000622c:	c1 e0 08             	shl    eax,0x8
c000622f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0006233:	09 e8                	or     eax,ebp
c0006235:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006239:	83 f8 3b             	cmp    eax,0x3b
c000623c:	74 27                	je     c0006265 <ucscompare+0x61>
c000623e:	83 ec 0c             	sub    esp,0xc
c0006241:	50                   	push   eax
c0006242:	e8 09 a7 ff ff       	call   c0000950 <tolower>
c0006247:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000624a:	89 c5                	mov    ebp,eax
c000624c:	e8 ff a6 ff ff       	call   c0000950 <tolower>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	39 c5                	cmp    ebp,eax
c0006256:	75 20                	jne    c0006278 <ucscompare+0x74>
c0006258:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000625c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006260:	83 c2 02             	add    edx,0x2
c0006263:	eb ac                	jmp    c0006211 <ucscompare+0xd>
c0006265:	85 db                	test   ebx,ebx
c0006267:	0f 95 c2             	setne  dl
c000626a:	31 c0                	xor    eax,eax
c000626c:	83 fb 2f             	cmp    ebx,0x2f
c000626f:	0f 95 c0             	setne  al
c0006272:	21 d0                	and    eax,edx
c0006274:	f7 d8                	neg    eax
c0006276:	eb 03                	jmp    c000627b <ucscompare+0x77>
c0006278:	83 c8 ff             	or     eax,0xffffffff
c000627b:	83 c4 1c             	add    esp,0x1c
c000627e:	5b                   	pop    ebx
c000627f:	5e                   	pop    esi
c0006280:	5f                   	pop    edi
c0006281:	5d                   	pop    ebp
c0006282:	c3                   	ret    

c0006283 <fncompare>:
c0006283:	55                   	push   ebp
c0006284:	57                   	push   edi
c0006285:	89 c7                	mov    edi,eax
c0006287:	56                   	push   esi
c0006288:	89 ce                	mov    esi,ecx
c000628a:	53                   	push   ebx
c000628b:	31 db                	xor    ebx,ebx
c000628d:	83 ec 1c             	sub    esp,0x1c
c0006290:	39 d3                	cmp    ebx,edx
c0006292:	7d 45                	jge    c00062d9 <fncompare+0x56>
c0006294:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0006298:	83 f8 3b             	cmp    eax,0x3b
c000629b:	74 3c                	je     c00062d9 <fncompare+0x56>
c000629d:	83 f8 2e             	cmp    eax,0x2e
c00062a0:	75 0e                	jne    c00062b0 <fncompare+0x2d>
c00062a2:	8d 4a ff             	lea    ecx,[edx-0x1]
c00062a5:	39 d9                	cmp    ecx,ebx
c00062a7:	74 30                	je     c00062d9 <fncompare+0x56>
c00062a9:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00062ae:	74 29                	je     c00062d9 <fncompare+0x56>
c00062b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00062b4:	83 ec 0c             	sub    esp,0xc
c00062b7:	50                   	push   eax
c00062b8:	e8 93 a6 ff ff       	call   c0000950 <tolower>
c00062bd:	89 c5                	mov    ebp,eax
c00062bf:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00062c3:	89 04 24             	mov    DWORD PTR [esp],eax
c00062c6:	e8 85 a6 ff ff       	call   c0000950 <tolower>
c00062cb:	83 c4 10             	add    esp,0x10
c00062ce:	39 c5                	cmp    ebp,eax
c00062d0:	75 1e                	jne    c00062f0 <fncompare+0x6d>
c00062d2:	43                   	inc    ebx
c00062d3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00062d7:	eb b7                	jmp    c0006290 <fncompare+0xd>
c00062d9:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00062dd:	85 d2                	test   edx,edx
c00062df:	0f 95 c1             	setne  cl
c00062e2:	31 c0                	xor    eax,eax
c00062e4:	83 fa 2f             	cmp    edx,0x2f
c00062e7:	0f 95 c0             	setne  al
c00062ea:	21 c8                	and    eax,ecx
c00062ec:	f7 d8                	neg    eax
c00062ee:	eb 03                	jmp    c00062f3 <fncompare+0x70>
c00062f0:	83 c8 ff             	or     eax,0xffffffff
c00062f3:	83 c4 1c             	add    esp,0x1c
c00062f6:	5b                   	pop    ebx
c00062f7:	5e                   	pop    esi
c00062f8:	5f                   	pop    edi
c00062f9:	5d                   	pop    ebp
c00062fa:	c3                   	ret    

c00062fb <bclear_cache>:
c00062fb:	83 ec 18             	sub    esp,0x18
c00062fe:	68 20 1f 02 c0       	push   0xc0021f20
c0006303:	e8 54 57 01 00       	call   c001ba5c <iso_kprintf>
c0006308:	83 c4 10             	add    esp,0x10
c000630b:	31 c0                	xor    eax,eax
c000630d:	8b 14 85 20 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006314:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c000631a:	8b 14 85 80 70 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd8f80]
c0006321:	40                   	inc    eax
c0006322:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006328:	83 f8 10             	cmp    eax,0x10
c000632b:	75 e0                	jne    c000630d <bclear_cache+0x12>
c000632d:	83 c4 0c             	add    esp,0xc
c0006330:	c3                   	ret    

c0006331 <bclear>:
c0006331:	eb c8                	jmp    c00062fb <bclear_cache>

c0006333 <iso_break_all>:
c0006333:	83 ec 18             	sub    esp,0x18
c0006336:	68 2e 1f 02 c0       	push   0xc0021f2e
c000633b:	e8 1c 57 01 00       	call   c001ba5c <iso_kprintf>
c0006340:	83 c4 10             	add    esp,0x10
c0006343:	31 c0                	xor    eax,eax
c0006345:	c7 80 d0 75 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffd8a30],0x1
c000634f:	05 94 00 00 00       	add    eax,0x94
c0006354:	3d 40 09 00 00       	cmp    eax,0x940
c0006359:	75 ea                	jne    c0006345 <iso_break_all+0x12>
c000635b:	83 c4 0c             	add    esp,0xc
c000635e:	c3                   	ret    

c000635f <isoReadDiscSector>:
c000635f:	83 ec 0c             	sub    esp,0xc
c0006362:	0f be 05 60 70 02 c0 	movsx  eax,BYTE PTR ds:0xc0027060
c0006369:	50                   	push   eax
c000636a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000636e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006372:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006376:	e8 85 56 01 00       	call   c001ba00 <isoReadDiscSectorHelper>
c000637b:	83 c4 1c             	add    esp,0x1c
c000637e:	c3                   	ret    

c000637f <bread_cache>:
c000637f:	55                   	push   ebp
c0006380:	57                   	push   edi
c0006381:	89 d7                	mov    edi,edx
c0006383:	56                   	push   esi
c0006384:	ba 0f 00 00 00       	mov    edx,0xf
c0006389:	53                   	push   ebx
c000638a:	89 c6                	mov    esi,eax
c000638c:	83 ec 0c             	sub    esp,0xc
c000638f:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0006392:	39 38                	cmp    DWORD PTR [eax],edi
c0006394:	74 3c                	je     c00063d2 <bread_cache+0x53>
c0006396:	4a                   	dec    edx
c0006397:	83 fa ff             	cmp    edx,0xffffffff
c000639a:	75 f3                	jne    c000638f <bread_cache+0x10>
c000639c:	31 db                	xor    ebx,ebx
c000639e:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00063a1:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00063a4:	74 08                	je     c00063ae <bread_cache+0x2f>
c00063a6:	43                   	inc    ebx
c00063a7:	83 fb 10             	cmp    ebx,0x10
c00063aa:	75 f2                	jne    c000639e <bread_cache+0x1f>
c00063ac:	31 db                	xor    ebx,ebx
c00063ae:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00063b1:	50                   	push   eax
c00063b2:	6a 01                	push   0x1
c00063b4:	57                   	push   edi
c00063b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063b8:	83 c0 04             	add    eax,0x4
c00063bb:	50                   	push   eax
c00063bc:	e8 9e ff ff ff       	call   c000635f <isoReadDiscSector>
c00063c1:	83 c4 10             	add    esp,0x10
c00063c4:	83 c9 ff             	or     ecx,0xffffffff
c00063c7:	85 c0                	test   eax,eax
c00063c9:	78 13                	js     c00063de <bread_cache+0x5f>
c00063cb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00063ce:	89 da                	mov    edx,ebx
c00063d0:	89 38                	mov    DWORD PTR [eax],edi
c00063d2:	89 f0                	mov    eax,esi
c00063d4:	e8 0f fe ff ff       	call   c00061e8 <bgrad_cache>
c00063d9:	b9 0f 00 00 00       	mov    ecx,0xf
c00063de:	83 c4 0c             	add    esp,0xc
c00063e1:	89 c8                	mov    eax,ecx
c00063e3:	5b                   	pop    ebx
c00063e4:	5e                   	pop    esi
c00063e5:	5f                   	pop    edi
c00063e6:	5d                   	pop    ebp
c00063e7:	c3                   	ret    

c00063e8 <biread>:
c00063e8:	89 c2                	mov    edx,eax
c00063ea:	b8 80 70 02 c0       	mov    eax,0xc0027080
c00063ef:	eb 8e                	jmp    c000637f <bread_cache>

c00063f1 <bdread>:
c00063f1:	89 c2                	mov    edx,eax
c00063f3:	b8 20 70 02 c0       	mov    eax,0xc0027020
c00063f8:	eb 85                	jmp    c000637f <bread_cache>

c00063fa <strnicmp>:
c00063fa:	55                   	push   ebp
c00063fb:	57                   	push   edi
c00063fc:	31 ff                	xor    edi,edi
c00063fe:	56                   	push   esi
c00063ff:	53                   	push   ebx
c0006400:	83 ec 0c             	sub    esp,0xc
c0006403:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0006407:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c000640b:	74 43                	je     c0006450 <strnicmp+0x56>
c000640d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006411:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c0006415:	85 c0                	test   eax,eax
c0006417:	74 37                	je     c0006450 <strnicmp+0x56>
c0006419:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c000641d:	85 d2                	test   edx,edx
c000641f:	74 2f                	je     c0006450 <strnicmp+0x56>
c0006421:	39 d0                	cmp    eax,edx
c0006423:	8d 6f 01             	lea    ebp,[edi+0x1]
c0006426:	75 04                	jne    c000642c <strnicmp+0x32>
c0006428:	89 ef                	mov    edi,ebp
c000642a:	eb db                	jmp    c0006407 <strnicmp+0xd>
c000642c:	83 ec 0c             	sub    esp,0xc
c000642f:	50                   	push   eax
c0006430:	e8 1b a5 ff ff       	call   c0000950 <tolower>
c0006435:	89 c3                	mov    ebx,eax
c0006437:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c000643b:	89 ef                	mov    edi,ebp
c000643d:	89 04 24             	mov    DWORD PTR [esp],eax
c0006440:	e8 0b a5 ff ff       	call   c0000950 <tolower>
c0006445:	83 c4 10             	add    esp,0x10
c0006448:	29 c3                	sub    ebx,eax
c000644a:	89 d8                	mov    eax,ebx
c000644c:	74 b9                	je     c0006407 <strnicmp+0xd>
c000644e:	eb 02                	jmp    c0006452 <strnicmp+0x58>
c0006450:	31 c0                	xor    eax,eax
c0006452:	83 c4 0c             	add    esp,0xc
c0006455:	5b                   	pop    ebx
c0006456:	5e                   	pop    esi
c0006457:	5f                   	pop    edi
c0006458:	5d                   	pop    ebp
c0006459:	c3                   	ret    

c000645a <find_object>:
c000645a:	55                   	push   ebp
c000645b:	57                   	push   edi
c000645c:	89 c7                	mov    edi,eax
c000645e:	56                   	push   esi
c000645f:	53                   	push   ebx
c0006460:	89 d3                	mov    ebx,edx
c0006462:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006468:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000646f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0006473:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006477:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c000647e:	74 0b                	je     c000648b <find_object+0x31>
c0006480:	89 fa                	mov    edx,edi
c0006482:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006486:	e8 89 fc ff ff       	call   c0006114 <utf2ucs>
c000648b:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c000648e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006492:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0006497:	7e 11                	jle    c00064aa <find_object+0x50>
c0006499:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000649d:	e8 46 ff ff ff       	call   c00063e8 <biread>
c00064a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00064a6:	85 c0                	test   eax,eax
c00064a8:	79 07                	jns    c00064b1 <find_object+0x57>
c00064aa:	31 db                	xor    ebx,ebx
c00064ac:	e9 56 01 00 00       	jmp    c0006607 <find_object+0x1ad>
c00064b1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00064b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064bd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00064c1:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c00064c8:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00064cc:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00064cf:	85 f6                	test   esi,esi
c00064d1:	75 0e                	jne    c00064e1 <find_object+0x87>
c00064d3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00064d7:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00064df:	eb b1                	jmp    c0006492 <find_object+0x38>
c00064e1:	8b 2d b4 7e 02 c0    	mov    ebp,DWORD PTR ds:0xc0027eb4
c00064e7:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00064eb:	85 ed                	test   ebp,ebp
c00064ed:	89 c8                	mov    eax,ecx
c00064ef:	74 2b                	je     c000651c <find_object+0xc2>
c00064f1:	8d 43 21             	lea    eax,[ebx+0x21]
c00064f4:	8d 54 24 20          	lea    edx,[esp+0x20]
c00064f8:	e8 07 fd ff ff       	call   c0006204 <ucscompare>
c00064fd:	85 c0                	test   eax,eax
c00064ff:	0f 84 bf 00 00 00    	je     c00065c4 <find_object+0x16a>
c0006505:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006508:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c000650c:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c0006514:	0f 8e da 00 00 00    	jle    c00065f4 <find_object+0x19a>
c000651a:	eb b7                	jmp    c00064d3 <find_object+0x79>
c000651c:	29 ce                	sub    esi,ecx
c000651e:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c0006522:	a8 01                	test   al,0x1
c0006524:	74 05                	je     c000652b <find_object+0xd1>
c0006526:	83 ee 21             	sub    esi,0x21
c0006529:	eb 5a                	jmp    c0006585 <find_object+0x12b>
c000652b:	42                   	inc    edx
c000652c:	83 ee 22             	sub    esi,0x22
c000652f:	eb 54                	jmp    c0006585 <find_object+0x12b>
c0006531:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c0006534:	48                   	dec    eax
c0006535:	3c 01                	cmp    al,0x1
c0006537:	77 51                	ja     c000658a <find_object+0x130>
c0006539:	50                   	push   eax
c000653a:	6a 02                	push   0x2
c000653c:	68 3d 1f 02 c0       	push   0xc0021f3d
c0006541:	52                   	push   edx
c0006542:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0006546:	e8 95 a2 ff ff       	call   c00007e0 <strncmp>
c000654b:	83 c4 10             	add    esp,0x10
c000654e:	85 c0                	test   eax,eax
c0006550:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006554:	75 27                	jne    c000657d <find_object+0x123>
c0006556:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c000655a:	8d 68 fb             	lea    ebp,[eax-0x5]
c000655d:	50                   	push   eax
c000655e:	8d 42 05             	lea    eax,[edx+0x5]
c0006561:	55                   	push   ebp
c0006562:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0006566:	50                   	push   eax
c0006567:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000656b:	50                   	push   eax
c000656c:	e8 0f a1 ff ff       	call   c0000680 <strncpy>
c0006571:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c0006576:	83 c4 10             	add    esp,0x10
c0006579:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000657d:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006581:	29 c6                	sub    esi,eax
c0006583:	01 c2                	add    edx,eax
c0006585:	83 fe 03             	cmp    esi,0x3
c0006588:	7f a7                	jg     c0006531 <find_object+0xd7>
c000658a:	85 ed                	test   ebp,ebp
c000658c:	7e 40                	jle    c00065ce <find_object+0x174>
c000658e:	51                   	push   ecx
c000658f:	51                   	push   ecx
c0006590:	6a 2f                	push   0x2f
c0006592:	57                   	push   edi
c0006593:	e8 08 a2 ff ff       	call   c00007a0 <strchr>
c0006598:	83 c4 10             	add    esp,0x10
c000659b:	85 c0                	test   eax,eax
c000659d:	74 04                	je     c00065a3 <find_object+0x149>
c000659f:	29 f8                	sub    eax,edi
c00065a1:	eb 0c                	jmp    c00065af <find_object+0x155>
c00065a3:	83 ec 0c             	sub    esp,0xc
c00065a6:	57                   	push   edi
c00065a7:	e8 c4 9f ff ff       	call   c0000570 <strlen>
c00065ac:	83 c4 10             	add    esp,0x10
c00065af:	52                   	push   edx
c00065b0:	50                   	push   eax
c00065b1:	57                   	push   edi
c00065b2:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00065b6:	50                   	push   eax
c00065b7:	e8 3e fe ff ff       	call   c00063fa <strnicmp>
c00065bc:	83 c4 10             	add    esp,0x10
c00065bf:	e9 39 ff ff ff       	jmp    c00064fd <find_object+0xa3>
c00065c4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065c8:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00065cc:	eb 1e                	jmp    c00065ec <find_object+0x192>
c00065ce:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00065d2:	8d 43 21             	lea    eax,[ebx+0x21]
c00065d5:	89 f9                	mov    ecx,edi
c00065d7:	e8 a7 fc ff ff       	call   c0006283 <fncompare>
c00065dc:	85 c0                	test   eax,eax
c00065de:	0f 85 21 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065e4:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00065e8:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00065ec:	0f 85 13 ff ff ff    	jne    c0006505 <find_object+0xab>
c00065f2:	eb 13                	jmp    c0006607 <find_object+0x1ad>
c00065f4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00065f8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00065fc:	0f 8f b7 fe ff ff    	jg     c00064b9 <find_object+0x5f>
c0006602:	e9 cc fe ff ff       	jmp    c00064d3 <find_object+0x79>
c0006607:	81 c4 2c 01 00 00    	add    esp,0x12c
c000660d:	89 d8                	mov    eax,ebx
c000660f:	5b                   	pop    ebx
c0006610:	5e                   	pop    esi
c0006611:	5f                   	pop    edi
c0006612:	5d                   	pop    ebp
c0006613:	c3                   	ret    

c0006614 <find_object_path>:
c0006614:	55                   	push   ebp
c0006615:	57                   	push   edi
c0006616:	89 d7                	mov    edi,edx
c0006618:	56                   	push   esi
c0006619:	89 c6                	mov    esi,eax
c000661b:	53                   	push   ebx
c000661c:	89 cb                	mov    ebx,ecx
c000661e:	83 ec 0c             	sub    esp,0xc
c0006621:	50                   	push   eax
c0006622:	50                   	push   eax
c0006623:	6a 2f                	push   0x2f
c0006625:	56                   	push   esi
c0006626:	e8 75 a1 ff ff       	call   c00007a0 <strchr>
c000662b:	83 c4 10             	add    esp,0x10
c000662e:	89 c5                	mov    ebp,eax
c0006630:	85 c0                	test   eax,eax
c0006632:	74 3a                	je     c000666e <find_object_path+0x5a>
c0006634:	39 ee                	cmp    esi,ebp
c0006636:	74 31                	je     c0006669 <find_object_path+0x55>
c0006638:	8d 43 0a             	lea    eax,[ebx+0xa]
c000663b:	e8 a6 fb ff ff       	call   c00061e6 <iso_733>
c0006640:	89 c2                	mov    edx,eax
c0006642:	8d 43 02             	lea    eax,[ebx+0x2]
c0006645:	e8 9c fb ff ff       	call   c00061e6 <iso_733>
c000664a:	83 ec 0c             	sub    esp,0xc
c000664d:	89 c1                	mov    ecx,eax
c000664f:	52                   	push   edx
c0006650:	89 f0                	mov    eax,esi
c0006652:	ba 01 00 00 00       	mov    edx,0x1
c0006657:	e8 fe fd ff ff       	call   c000645a <find_object>
c000665c:	83 c4 10             	add    esp,0x10
c000665f:	89 c3                	mov    ebx,eax
c0006661:	85 c0                	test   eax,eax
c0006663:	75 04                	jne    c0006669 <find_object_path+0x55>
c0006665:	31 db                	xor    ebx,ebx
c0006667:	eb 36                	jmp    c000669f <find_object_path+0x8b>
c0006669:	8d 75 01             	lea    esi,[ebp+0x1]
c000666c:	eb b3                	jmp    c0006621 <find_object_path+0xd>
c000666e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006671:	74 28                	je     c000669b <find_object_path+0x87>
c0006673:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006676:	e8 6b fb ff ff       	call   c00061e6 <iso_733>
c000667b:	89 c2                	mov    edx,eax
c000667d:	8d 43 02             	lea    eax,[ebx+0x2]
c0006680:	e8 61 fb ff ff       	call   c00061e6 <iso_733>
c0006685:	83 ec 0c             	sub    esp,0xc
c0006688:	89 c1                	mov    ecx,eax
c000668a:	52                   	push   edx
c000668b:	89 f0                	mov    eax,esi
c000668d:	89 fa                	mov    edx,edi
c000668f:	e8 c6 fd ff ff       	call   c000645a <find_object>
c0006694:	83 c4 10             	add    esp,0x10
c0006697:	89 c3                	mov    ebx,eax
c0006699:	eb 04                	jmp    c000669f <find_object_path+0x8b>
c000669b:	85 ff                	test   edi,edi
c000669d:	74 c6                	je     c0006665 <find_object_path+0x51>
c000669f:	83 c4 0c             	add    esp,0xc
c00066a2:	89 d8                	mov    eax,ebx
c00066a4:	5b                   	pop    ebx
c00066a5:	5e                   	pop    esi
c00066a6:	5f                   	pop    edi
c00066a7:	5d                   	pop    ebp
c00066a8:	c3                   	ret    

c00066a9 <stricmp>:
c00066a9:	57                   	push   edi
c00066aa:	56                   	push   esi
c00066ab:	31 f6                	xor    esi,esi
c00066ad:	53                   	push   ebx
c00066ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00066b2:	83 ec 0c             	sub    esp,0xc
c00066b5:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00066b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00066bd:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00066c1:	50                   	push   eax
c00066c2:	e8 69 a2 ff ff       	call   c0000930 <toupper>
c00066c7:	89 04 24             	mov    DWORD PTR [esp],eax
c00066ca:	e8 81 a2 ff ff       	call   c0000950 <tolower>
c00066cf:	89 3c 24             	mov    DWORD PTR [esp],edi
c00066d2:	89 c3                	mov    ebx,eax
c00066d4:	e8 57 a2 ff ff       	call   c0000930 <toupper>
c00066d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00066dc:	e8 6f a2 ff ff       	call   c0000950 <tolower>
c00066e1:	83 c4 10             	add    esp,0x10
c00066e4:	39 c3                	cmp    ebx,eax
c00066e6:	75 05                	jne    c00066ed <stricmp+0x44>
c00066e8:	46                   	inc    esi
c00066e9:	85 db                	test   ebx,ebx
c00066eb:	75 c1                	jne    c00066ae <stricmp+0x5>
c00066ed:	29 c3                	sub    ebx,eax
c00066ef:	89 d8                	mov    eax,ebx
c00066f1:	5b                   	pop    ebx
c00066f2:	5e                   	pop    esi
c00066f3:	5f                   	pop    edi
c00066f4:	c3                   	ret    

c00066f5 <iso_open>:
c00066f5:	57                   	push   edi
c00066f6:	31 c0                	xor    eax,eax
c00066f8:	56                   	push   esi
c00066f9:	b9 80 7e 02 c0       	mov    ecx,0xc0027e80
c00066fe:	53                   	push   ebx
c00066ff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0006704:	0f 95 c0             	setne  al
c0006707:	89 c2                	mov    edx,eax
c0006709:	89 c6                	mov    esi,eax
c000670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000670f:	e8 00 ff ff ff       	call   c0006614 <find_object_path>
c0006714:	83 ca ff             	or     edx,0xffffffff
c0006717:	85 c0                	test   eax,eax
c0006719:	74 5e                	je     c0006779 <iso_open+0x84>
c000671b:	89 c1                	mov    ecx,eax
c000671d:	31 d2                	xor    edx,edx
c000671f:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c0006725:	83 bf 40 75 02 c0 00 	cmp    DWORD PTR [edi-0x3ffd8ac0],0x0
c000672c:	75 42                	jne    c0006770 <iso_open+0x7b>
c000672e:	8d 41 02             	lea    eax,[ecx+0x2]
c0006731:	c7 87 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffd8ac0],0xffffffff
c000673b:	e8 a6 fa ff ff       	call   c00061e6 <iso_733>
c0006740:	89 b7 44 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8abc],esi
c0006746:	89 87 40 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ac0],eax
c000674c:	c7 87 48 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8ab8],0x0
c0006756:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006759:	e8 88 fa ff ff       	call   c00061e6 <iso_733>
c000675e:	c7 87 d0 75 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffd8a30],0x0
c0006768:	89 87 4c 75 02 c0    	mov    DWORD PTR [edi-0x3ffd8ab4],eax
c000676e:	eb 09                	jmp    c0006779 <iso_open+0x84>
c0006770:	42                   	inc    edx
c0006771:	83 fa 10             	cmp    edx,0x10
c0006774:	75 a9                	jne    c000671f <iso_open+0x2a>
c0006776:	83 ca ff             	or     edx,0xffffffff
c0006779:	5b                   	pop    ebx
c000677a:	89 d0                	mov    eax,edx
c000677c:	5e                   	pop    esi
c000677d:	5f                   	pop    edi
c000677e:	c3                   	ret    

c000677f <iso_close>:
c000677f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006783:	83 f8 0f             	cmp    eax,0xf
c0006786:	7f 10                	jg     c0006798 <iso_close+0x19>
c0006788:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c000678e:	c7 80 40 75 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8ac0],0x0
c0006798:	e9 5e fb ff ff       	jmp    c00062fb <bclear_cache>

c000679d <iso_read>:
c000679d:	55                   	push   ebp
c000679e:	57                   	push   edi
c000679f:	56                   	push   esi
c00067a0:	53                   	push   ebx
c00067a1:	83 ec 1c             	sub    esp,0x1c
c00067a4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00067a8:	83 fd 0f             	cmp    ebp,0xf
c00067ab:	7e 0a                	jle    c00067b7 <iso_read+0x1a>
c00067ad:	83 c8 ff             	or     eax,0xffffffff
c00067b0:	89 c2                	mov    edx,eax
c00067b2:	e9 f4 00 00 00       	jmp    c00068ab <iso_read+0x10e>
c00067b7:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00067bd:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00067c4:	74 e7                	je     c00067ad <iso_read+0x10>
c00067c6:	8b 95 d0 75 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffd8a30]
c00067cc:	85 d2                	test   edx,edx
c00067ce:	75 dd                	jne    c00067ad <iso_read+0x10>
c00067d0:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00067d5:	0f 84 cd 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067db:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c00067e1:	8b 8d 4c 75 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffd8ab4]
c00067e7:	29 c1                	sub    ecx,eax
c00067e9:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00067ed:	76 04                	jbe    c00067f3 <iso_read+0x56>
c00067ef:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00067f3:	85 c9                	test   ecx,ecx
c00067f5:	0f 84 ad 00 00 00    	je     c00068a8 <iso_read+0x10b>
c00067fb:	89 c6                	mov    esi,eax
c00067fd:	bb 00 08 00 00       	mov    ebx,0x800
c0006802:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006808:	c1 e8 0b             	shr    eax,0xb
c000680b:	29 f3                	sub    ebx,esi
c000680d:	03 85 40 75 02 c0    	add    eax,DWORD PTR [ebp-0x3ffd8ac0]
c0006813:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006819:	7e 3f                	jle    c000685a <iso_read+0xbd>
c000681b:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006821:	75 37                	jne    c000685a <iso_read+0xbd>
c0006823:	be 20 00 00 00       	mov    esi,0x20
c0006828:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c000682e:	7f 05                	jg     c0006835 <iso_read+0x98>
c0006830:	89 ce                	mov    esi,ecx
c0006832:	c1 fe 0b             	sar    esi,0xb
c0006835:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006839:	89 f3                	mov    ebx,esi
c000683b:	c1 e3 0b             	shl    ebx,0xb
c000683e:	52                   	push   edx
c000683f:	56                   	push   esi
c0006840:	50                   	push   eax
c0006841:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0006845:	e8 15 fb ff ff       	call   c000635f <isoReadDiscSector>
c000684a:	83 c4 10             	add    esp,0x10
c000684d:	85 c0                	test   eax,eax
c000684f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006853:	7f 3e                	jg     c0006893 <iso_read+0xf6>
c0006855:	e9 53 ff ff ff       	jmp    c00067ad <iso_read+0x10>
c000685a:	39 cb                	cmp    ebx,ecx
c000685c:	7e 02                	jle    c0006860 <iso_read+0xc3>
c000685e:	89 cb                	mov    ebx,ecx
c0006860:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006864:	e8 88 fb ff ff       	call   c00063f1 <bdread>
c0006869:	85 c0                	test   eax,eax
c000686b:	0f 88 3c ff ff ff    	js     c00067ad <iso_read+0x10>
c0006871:	8b 0c 85 20 70 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd8fe0]
c0006878:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000687c:	8b 85 48 75 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffd8ab8]
c0006882:	25 ff 07 00 00       	and    eax,0x7ff
c0006887:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c000688b:	89 d9                	mov    ecx,ebx
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0006893:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c0006897:	01 9d 48 75 02 c0    	add    DWORD PTR [ebp-0x3ffd8ab8],ebx
c000689d:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00068a1:	01 da                	add    edx,ebx
c00068a3:	e9 28 ff ff ff       	jmp    c00067d0 <iso_read+0x33>
c00068a8:	89 d0                	mov    eax,edx
c00068aa:	99                   	cdq    
c00068ab:	83 c4 1c             	add    esp,0x1c
c00068ae:	5b                   	pop    ebx
c00068af:	5e                   	pop    esi
c00068b0:	5f                   	pop    edi
c00068b1:	5d                   	pop    ebp
c00068b2:	c3                   	ret    

c00068b3 <iso_seek>:
c00068b3:	55                   	push   ebp
c00068b4:	83 c8 ff             	or     eax,0xffffffff
c00068b7:	57                   	push   edi
c00068b8:	89 c2                	mov    edx,eax
c00068ba:	56                   	push   esi
c00068bb:	53                   	push   ebx
c00068bc:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00068c0:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00068c4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00068c8:	83 fe 0f             	cmp    esi,0xf
c00068cb:	7f 65                	jg     c0006932 <iso_seek+0x7f>
c00068cd:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00068d3:	8d 8d 40 75 02 c0    	lea    ecx,[ebp-0x3ffd8ac0]
c00068d9:	83 bd 40 75 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffd8ac0],0x0
c00068e0:	74 50                	je     c0006932 <iso_seek+0x7f>
c00068e2:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00068e9:	75 47                	jne    c0006932 <iso_seek+0x7f>
c00068eb:	83 fb 01             	cmp    ebx,0x1
c00068ee:	74 0e                	je     c00068fe <iso_seek+0x4b>
c00068f0:	83 fb 02             	cmp    ebx,0x2
c00068f3:	74 0e                	je     c0006903 <iso_seek+0x50>
c00068f5:	85 db                	test   ebx,ebx
c00068f7:	75 39                	jne    c0006932 <iso_seek+0x7f>
c00068f9:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c00068fc:	eb 0d                	jmp    c000690b <iso_seek+0x58>
c00068fe:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006901:	eb 08                	jmp    c000690b <iso_seek+0x58>
c0006903:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006906:	01 f8                	add    eax,edi
c0006908:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000690b:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006911:	8b 88 4c 75 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffd8ab4]
c0006917:	05 40 75 02 c0       	add    eax,0xc0027540
c000691c:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c000691f:	76 03                	jbe    c0006924 <iso_seek+0x71>
c0006921:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0006924:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c000692a:	8b 82 48 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab8]
c0006930:	31 d2                	xor    edx,edx
c0006932:	5b                   	pop    ebx
c0006933:	5e                   	pop    esi
c0006934:	5f                   	pop    edi
c0006935:	5d                   	pop    ebp
c0006936:	c3                   	ret    

c0006937 <iso_tell>:
c0006937:	83 c8 ff             	or     eax,0xffffffff
c000693a:	53                   	push   ebx
c000693b:	89 c2                	mov    edx,eax
c000693d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006941:	83 f9 0f             	cmp    ecx,0xf
c0006944:	7f 20                	jg     c0006966 <iso_tell+0x2f>
c0006946:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c000694c:	83 bb 40 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8ac0],0x0
c0006953:	74 11                	je     c0006966 <iso_tell+0x2f>
c0006955:	83 bb d0 75 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffd8a30],0x0
c000695c:	75 08                	jne    c0006966 <iso_tell+0x2f>
c000695e:	8b 83 48 75 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffd8ab8]
c0006964:	31 d2                	xor    edx,edx
c0006966:	5b                   	pop    ebx
c0006967:	c3                   	ret    

c0006968 <iso_total>:
c0006968:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000696c:	83 c8 ff             	or     eax,0xffffffff
c000696f:	83 fa 0f             	cmp    edx,0xf
c0006972:	7f 1e                	jg     c0006992 <iso_total+0x2a>
c0006974:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c000697a:	83 ba 40 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8ac0],0x0
c0006981:	74 0f                	je     c0006992 <iso_total+0x2a>
c0006983:	83 ba d0 75 02 c0 00 	cmp    DWORD PTR [edx-0x3ffd8a30],0x0
c000698a:	75 06                	jne    c0006992 <iso_total+0x2a>
c000698c:	8b 82 4c 75 02 c0    	mov    eax,DWORD PTR [edx-0x3ffd8ab4]
c0006992:	c3                   	ret    

c0006993 <fn_postprocess>:
c0006993:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006997:	89 d0                	mov    eax,edx
c0006999:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000699c:	83 f9 3b             	cmp    ecx,0x3b
c000699f:	74 07                	je     c00069a8 <fn_postprocess+0x15>
c00069a1:	85 c9                	test   ecx,ecx
c00069a3:	74 03                	je     c00069a8 <fn_postprocess+0x15>
c00069a5:	40                   	inc    eax
c00069a6:	eb f1                	jmp    c0006999 <fn_postprocess+0x6>
c00069a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00069ab:	39 d0                	cmp    eax,edx
c00069ad:	76 0a                	jbe    c00069b9 <fn_postprocess+0x26>
c00069af:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00069b3:	75 04                	jne    c00069b9 <fn_postprocess+0x26>
c00069b5:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00069b9:	c3                   	ret    

c00069ba <iso_readdir>:
c00069ba:	55                   	push   ebp
c00069bb:	57                   	push   edi
c00069bc:	56                   	push   esi
c00069bd:	53                   	push   ebx
c00069be:	83 ec 1c             	sub    esp,0x1c
c00069c1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00069c5:	83 fb 0f             	cmp    ebx,0xf
c00069c8:	7f 28                	jg     c00069f2 <iso_readdir+0x38>
c00069ca:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00069d0:	8d b8 40 75 02 c0    	lea    edi,[eax-0x3ffd8ac0]
c00069d6:	83 b8 40 75 02 c0 00 	cmp    DWORD PTR [eax-0x3ffd8ac0],0x0
c00069dd:	74 13                	je     c00069f2 <iso_readdir+0x38>
c00069df:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00069e3:	74 0d                	je     c00069f2 <iso_readdir+0x38>
c00069e5:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c00069ec:	0f 84 b1 00 00 00    	je     c0006aa3 <iso_readdir+0xe9>
c00069f2:	83 ec 0c             	sub    esp,0xc
c00069f5:	68 40 1f 02 c0       	push   0xc0021f40
c00069fa:	e8 5d 50 01 00       	call   c001ba5c <iso_kprintf>
c00069ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006a02:	e8 71 50 01 00       	call   c001ba78 <iso_kprintfd>
c0006a07:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a0d:	c7 04 24 45 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f45
c0006a14:	e8 43 50 01 00       	call   c001ba5c <iso_kprintf>
c0006a19:	5d                   	pop    ebp
c0006a1a:	ff b3 40 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8ac0]
c0006a20:	e8 53 50 01 00       	call   c001ba78 <iso_kprintfd>
c0006a25:	c7 04 24 4b 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f4b
c0006a2c:	e8 2b 50 01 00       	call   c001ba5c <iso_kprintf>
c0006a31:	58                   	pop    eax
c0006a32:	ff b3 44 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8abc]
c0006a38:	e8 3b 50 01 00       	call   c001ba78 <iso_kprintfd>
c0006a3d:	c7 04 24 51 1f 02 c0 	mov    DWORD PTR [esp],0xc0021f51
c0006a44:	e8 13 50 01 00       	call   c001ba5c <iso_kprintf>
c0006a49:	58                   	pop    eax
c0006a4a:	ff b3 d0 75 02 c0    	push   DWORD PTR [ebx-0x3ffd8a30]
c0006a50:	e8 23 50 01 00       	call   c001ba78 <iso_kprintfd>
c0006a55:	83 c4 10             	add    esp,0x10
c0006a58:	eb 42                	jmp    c0006a9c <iso_readdir+0xe2>
c0006a5a:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a5d:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006a64:	89 d1                	mov    ecx,edx
c0006a66:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006a6c:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006a70:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006a73:	75 35                	jne    c0006aaa <iso_readdir+0xf0>
c0006a75:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006a7b:	81 c2 00 08 00 00    	add    edx,0x800
c0006a81:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0006a84:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006a87:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c0006a8a:	73 1e                	jae    c0006aaa <iso_readdir+0xf0>
c0006a8c:	c1 ea 0b             	shr    edx,0xb
c0006a8f:	8b 07                	mov    eax,DWORD PTR [edi]
c0006a91:	01 d0                	add    eax,edx
c0006a93:	e8 50 f9 ff ff       	call   c00063e8 <biread>
c0006a98:	85 c0                	test   eax,eax
c0006a9a:	79 be                	jns    c0006a5a <iso_readdir+0xa0>
c0006a9c:	31 c0                	xor    eax,eax
c0006a9e:	e9 66 01 00 00       	jmp    c0006c09 <iso_readdir+0x24f>
c0006aa3:	31 f6                	xor    esi,esi
c0006aa5:	83 c8 ff             	or     eax,0xffffffff
c0006aa8:	eb da                	jmp    c0006a84 <iso_readdir+0xca>
c0006aaa:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c0006ab0:	8b ba 48 75 02 c0    	mov    edi,DWORD PTR [edx-0x3ffd8ab8]
c0006ab6:	81 c2 40 75 02 c0    	add    edx,0xc0027540
c0006abc:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c0006abf:	73 db                	jae    c0006a9c <iso_readdir+0xe2>
c0006ac1:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c0006ac5:	75 34                	jne    c0006afb <iso_readdir+0x141>
c0006ac7:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c0006acb:	75 2e                	jne    c0006afb <iso_readdir+0x141>
c0006acd:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0006ad0:	8b 34 85 80 70 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffd8f80]
c0006ad7:	01 f9                	add    ecx,edi
c0006ad9:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0006adc:	89 c8                	mov    eax,ecx
c0006ade:	25 ff 07 00 00       	and    eax,0x7ff
c0006ae3:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006ae8:	01 c8                	add    eax,ecx
c0006aea:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006aed:	25 ff 07 00 00       	and    eax,0x7ff
c0006af2:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c0006af6:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006af9:	74 a1                	je     c0006a9c <iso_readdir+0xe2>
c0006afb:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b01:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c0006b05:	8d 56 21             	lea    edx,[esi+0x21]
c0006b08:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006b0c:	8d a8 58 75 02 c0    	lea    ebp,[eax-0x3ffd8aa8]
c0006b12:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006b19:	74 0c                	je     c0006b27 <iso_readdir+0x16d>
c0006b1b:	89 e8                	mov    eax,ebp
c0006b1d:	e8 14 f6 ff ff       	call   c0006136 <ucs2utfn>
c0006b22:	e9 a6 00 00 00       	jmp    c0006bcd <iso_readdir+0x213>
c0006b27:	57                   	push   edi
c0006b28:	51                   	push   ecx
c0006b29:	52                   	push   edx
c0006b2a:	55                   	push   ebp
c0006b2b:	e8 50 9b ff ff       	call   c0000680 <strncpy>
c0006b30:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c0006b34:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006b3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006b3d:	c6 84 01 58 75 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffd8aa8],0x0
c0006b45:	e8 49 fe ff ff       	call   c0006993 <fn_postprocess>
c0006b4a:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006b4e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006b51:	83 c4 10             	add    esp,0x10
c0006b54:	29 d0                	sub    eax,edx
c0006b56:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006b5a:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006b5e:	74 05                	je     c0006b65 <iso_readdir+0x1ab>
c0006b60:	83 e8 21             	sub    eax,0x21
c0006b63:	eb 04                	jmp    c0006b69 <iso_readdir+0x1af>
c0006b65:	47                   	inc    edi
c0006b66:	83 e8 22             	sub    eax,0x22
c0006b69:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006b6d:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006b73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b77:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006b7c:	7e 4f                	jle    c0006bcd <iso_readdir+0x213>
c0006b7e:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006b81:	48                   	dec    eax
c0006b82:	3c 01                	cmp    al,0x1
c0006b84:	77 47                	ja     c0006bcd <iso_readdir+0x213>
c0006b86:	52                   	push   edx
c0006b87:	6a 02                	push   0x2
c0006b89:	68 3d 1f 02 c0       	push   0xc0021f3d
c0006b8e:	57                   	push   edi
c0006b8f:	e8 4c 9c ff ff       	call   c00007e0 <strncmp>
c0006b94:	83 c4 10             	add    esp,0x10
c0006b97:	85 c0                	test   eax,eax
c0006b99:	75 26                	jne    c0006bc1 <iso_readdir+0x207>
c0006b9b:	50                   	push   eax
c0006b9c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006ba0:	83 e8 05             	sub    eax,0x5
c0006ba3:	50                   	push   eax
c0006ba4:	8d 47 05             	lea    eax,[edi+0x5]
c0006ba7:	50                   	push   eax
c0006ba8:	55                   	push   ebp
c0006ba9:	e8 d2 9a ff ff       	call   c0000680 <strncpy>
c0006bae:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006bb2:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bb6:	83 c4 10             	add    esp,0x10
c0006bb9:	c6 84 08 53 75 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffd8aad],0x0
c0006bc1:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006bc5:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c0006bc9:	01 c7                	add    edi,eax
c0006bcb:	eb aa                	jmp    c0006b77 <iso_readdir+0x1bd>
c0006bcd:	83 c8 ff             	or     eax,0xffffffff
c0006bd0:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c0006bd4:	89 c2                	mov    edx,eax
c0006bd6:	75 0a                	jne    c0006be2 <iso_readdir+0x228>
c0006bd8:	8d 46 0a             	lea    eax,[esi+0xa]
c0006bdb:	e8 06 f6 ff ff       	call   c00061e6 <iso_733>
c0006be0:	31 d2                	xor    edx,edx
c0006be2:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006be8:	89 83 50 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8ab0],eax
c0006bee:	89 93 54 75 02 c0    	mov    DWORD PTR [ebx-0x3ffd8aac],edx
c0006bf4:	81 c3 40 75 02 c0    	add    ebx,0xc0027540
c0006bfa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006bfd:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006c00:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006c04:	05 50 75 02 c0       	add    eax,0xc0027550
c0006c09:	83 c4 1c             	add    esp,0x1c
c0006c0c:	5b                   	pop    ebx
c0006c0d:	5e                   	pop    esi
c0006c0e:	5f                   	pop    edi
c0006c0f:	5d                   	pop    ebp
c0006c10:	c3                   	ret    

c0006c11 <iso_reset>:
c0006c11:	83 ec 18             	sub    esp,0x18
c0006c14:	68 5a 1f 02 c0       	push   0xc0021f5a
c0006c19:	e8 3e 4e 01 00       	call   c001ba5c <iso_kprintf>
c0006c1e:	e8 10 f7 ff ff       	call   c0006333 <iso_break_all>
c0006c23:	e8 09 f7 ff ff       	call   c0006331 <bclear>
c0006c28:	31 c0                	xor    eax,eax
c0006c2a:	83 c4 1c             	add    esp,0x1c
c0006c2d:	c3                   	ret    

c0006c2e <init_percd>:
c0006c2e:	57                   	push   edi
c0006c2f:	56                   	push   esi
c0006c30:	53                   	push   ebx
c0006c31:	bb 01 00 00 00       	mov    ebx,0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	a2 60 70 02 c0       	mov    ds:0xc0027060,al
c0006c3f:	e8 cd ff ff ff       	call   c0006c11 <iso_reset>
c0006c44:	c7 05 b4 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb4,0x0
c0006c4e:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006c53:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006c57:	e8 8c f7 ff ff       	call   c00063e8 <biread>
c0006c5c:	89 c6                	mov    esi,eax
c0006c5e:	85 c0                	test   eax,eax
c0006c60:	0f 88 ba 00 00 00    	js     c0006d20 <init_percd+0xf2>
c0006c66:	8b 04 85 80 70 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd8f80]
c0006c6d:	83 c0 04             	add    eax,0x4
c0006c70:	52                   	push   edx
c0006c71:	6a 06                	push   0x6
c0006c73:	68 65 1f 02 c0       	push   0xc0021f65
c0006c78:	50                   	push   eax
c0006c79:	e8 02 97 ff ff       	call   c0000380 <memcmp>
c0006c7e:	83 c4 10             	add    esp,0x10
c0006c81:	85 c0                	test   eax,eax
c0006c83:	74 08                	je     c0006c8d <init_percd+0x5f>
c0006c85:	43                   	inc    ebx
c0006c86:	83 fb 04             	cmp    ebx,0x4
c0006c89:	75 c3                	jne    c0006c4e <init_percd+0x20>
c0006c8b:	eb 1a                	jmp    c0006ca7 <init_percd+0x79>
c0006c8d:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006c94:	83 c0 5c             	add    eax,0x5c
c0006c97:	e8 17 f5 ff ff       	call   c00061b3 <isjoliet>
c0006c9c:	a3 b4 7e 02 c0       	mov    ds:0xc0027eb4,eax
c0006ca1:	85 c0                	test   eax,eax
c0006ca3:	74 e0                	je     c0006c85 <init_percd+0x57>
c0006ca5:	eb 3e                	jmp    c0006ce5 <init_percd+0xb7>
c0006ca7:	83 3d b4 7e 02 c0 00 	cmp    DWORD PTR ds:0xc0027eb4,0x0
c0006cae:	75 35                	jne    c0006ce5 <init_percd+0xb7>
c0006cb0:	a1 ac 7e 02 c0       	mov    eax,ds:0xc0027eac
c0006cb5:	83 c0 10             	add    eax,0x10
c0006cb8:	e8 2b f7 ff ff       	call   c00063e8 <biread>
c0006cbd:	89 c6                	mov    esi,eax
c0006cbf:	85 c0                	test   eax,eax
c0006cc1:	78 5f                	js     c0006d22 <init_percd+0xf4>
c0006cc3:	83 cb ff             	or     ebx,0xffffffff
c0006cc6:	50                   	push   eax
c0006cc7:	8b 04 b5 80 70 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffd8f80]
c0006cce:	6a 06                	push   0x6
c0006cd0:	83 c0 04             	add    eax,0x4
c0006cd3:	68 6c 1f 02 c0       	push   0xc0021f6c
c0006cd8:	50                   	push   eax
c0006cd9:	e8 a2 96 ff ff       	call   c0000380 <memcmp>
c0006cde:	83 c4 10             	add    esp,0x10
c0006ce1:	85 c0                	test   eax,eax
c0006ce3:	75 3d                	jne    c0006d22 <init_percd+0xf4>
c0006ce5:	8b 34 b5 80 70 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffd8f80]
c0006cec:	bf 80 7e 02 c0       	mov    edi,0xc0027e80
c0006cf1:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006cf7:	b9 22 00 00 00       	mov    ecx,0x22
c0006cfc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006cfe:	b8 82 7e 02 c0       	mov    eax,0xc0027e82
c0006d03:	31 db                	xor    ebx,ebx
c0006d05:	e8 dc f4 ff ff       	call   c00061e6 <iso_733>
c0006d0a:	a3 a8 7e 02 c0       	mov    ds:0xc0027ea8,eax
c0006d0f:	b8 8a 7e 02 c0       	mov    eax,0xc0027e8a
c0006d14:	e8 cd f4 ff ff       	call   c00061e6 <iso_733>
c0006d19:	a3 a4 7e 02 c0       	mov    ds:0xc0027ea4,eax
c0006d1e:	eb 02                	jmp    c0006d22 <init_percd+0xf4>
c0006d20:	89 c3                	mov    ebx,eax
c0006d22:	89 d8                	mov    eax,ebx
c0006d24:	5b                   	pop    ebx
c0006d25:	5e                   	pop    esi
c0006d26:	5f                   	pop    edi
c0006d27:	c3                   	ret    

c0006d28 <iso_ioctl>:
c0006d28:	83 ec 18             	sub    esp,0x18
c0006d2b:	68 73 1f 02 c0       	push   0xc0021f73
c0006d30:	e8 27 4d 01 00       	call   c001ba5c <iso_kprintf>
c0006d35:	e8 d7 fe ff ff       	call   c0006c11 <iso_reset>
c0006d3a:	31 c0                	xor    eax,eax
c0006d3c:	83 c4 1c             	add    esp,0x1c
c0006d3f:	c3                   	ret    

c0006d40 <fs_iso9660_init>:
c0006d40:	53                   	push   ebx
c0006d41:	31 db                	xor    ebx,ebx
c0006d43:	83 ec 14             	sub    esp,0x14
c0006d46:	68 7e 1f 02 c0       	push   0xc0021f7e
c0006d4b:	e8 0c 4d 01 00       	call   c001ba5c <iso_kprintf>
c0006d50:	83 c4 0c             	add    esp,0xc
c0006d53:	68 40 09 00 00       	push   0x940
c0006d58:	6a 00                	push   0x0
c0006d5a:	68 40 75 02 c0       	push   0xc0027540
c0006d5f:	e8 8c 97 ff ff       	call   c00004f0 <memset>
c0006d64:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d6b:	c7 05 40 75 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0027540,0xffffffff
c0006d75:	e8 89 85 00 00       	call   c000f303 <malloc>
c0006d7a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006d81:	a3 b0 7e 02 c0       	mov    ds:0xc0027eb0,eax
c0006d86:	e8 78 85 00 00       	call   c000f303 <malloc>
c0006d8b:	83 c4 10             	add    esp,0x10
c0006d8e:	a3 20 75 02 c0       	mov    ds:0xc0027520,eax
c0006d93:	83 ec 0c             	sub    esp,0xc
c0006d96:	68 04 08 00 00       	push   0x804
c0006d9b:	e8 63 85 00 00       	call   c000f303 <malloc>
c0006da0:	89 04 9d 80 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8f80],eax
c0006da7:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dad:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006db4:	e8 4a 85 00 00       	call   c000f303 <malloc>
c0006db9:	83 c4 10             	add    esp,0x10
c0006dbc:	89 04 9d 20 70 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd8fe0],eax
c0006dc3:	43                   	inc    ebx
c0006dc4:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006dca:	83 fb 10             	cmp    ebx,0x10
c0006dcd:	75 c4                	jne    c0006d93 <fs_iso9660_init+0x53>
c0006dcf:	31 c0                	xor    eax,eax
c0006dd1:	83 c4 08             	add    esp,0x8
c0006dd4:	5b                   	pop    ebx
c0006dd5:	c3                   	ret    

c0006dd6 <fs_iso9660_shutdown>:
c0006dd6:	53                   	push   ebx
c0006dd7:	31 db                	xor    ebx,ebx
c0006dd9:	83 ec 08             	sub    esp,0x8
c0006ddc:	83 ec 0c             	sub    esp,0xc
c0006ddf:	ff 34 9d 80 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8f80]
c0006de6:	e8 28 85 00 00       	call   c000f313 <free>
c0006deb:	58                   	pop    eax
c0006dec:	ff 34 9d 20 70 02 c0 	push   DWORD PTR [ebx*4-0x3ffd8fe0]
c0006df3:	43                   	inc    ebx
c0006df4:	e8 1a 85 00 00       	call   c000f313 <free>
c0006df9:	83 c4 10             	add    esp,0x10
c0006dfc:	83 fb 10             	cmp    ebx,0x10
c0006dff:	75 db                	jne    c0006ddc <fs_iso9660_shutdown+0x6>
c0006e01:	a1 b0 7e 02 c0       	mov    eax,ds:0xc0027eb0
c0006e06:	85 c0                	test   eax,eax
c0006e08:	74 0c                	je     c0006e16 <fs_iso9660_shutdown+0x40>
c0006e0a:	83 ec 0c             	sub    esp,0xc
c0006e0d:	50                   	push   eax
c0006e0e:	e8 00 85 00 00       	call   c000f313 <free>
c0006e13:	83 c4 10             	add    esp,0x10
c0006e16:	a1 20 75 02 c0       	mov    eax,ds:0xc0027520
c0006e1b:	85 c0                	test   eax,eax
c0006e1d:	74 0c                	je     c0006e2b <fs_iso9660_shutdown+0x55>
c0006e1f:	83 ec 0c             	sub    esp,0xc
c0006e22:	50                   	push   eax
c0006e23:	e8 eb 84 00 00       	call   c000f313 <free>
c0006e28:	83 c4 10             	add    esp,0x10
c0006e2b:	c7 05 20 75 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027520,0x0
c0006e35:	c7 05 b0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027eb0,0x0
c0006e3f:	31 c0                	xor    eax,eax
c0006e41:	83 c4 08             	add    esp,0x8
c0006e44:	5b                   	pop    ebx
c0006e45:	c3                   	ret    

c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0006e46:	55                   	push   ebp
c0006e47:	57                   	push   edi
c0006e48:	56                   	push   esi
c0006e49:	be 90 1f 02 c0       	mov    esi,0xc0021f90
c0006e4e:	53                   	push   ebx
c0006e4f:	83 ec 20             	sub    esp,0x20
c0006e52:	a0 8f 1f 02 c0       	mov    al,ds:0xc0021f8f
c0006e57:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0006e5b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0006e5f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0006e63:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0006e67:	b8 10 00 00 00       	mov    eax,0x10
c0006e6c:	f7 c7 02 00 00 00    	test   edi,0x2
c0006e72:	75 60                	jne    c0006ed4 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c0006e74:	89 c1                	mov    ecx,eax
c0006e76:	c1 e9 02             	shr    ecx,0x2
c0006e79:	fc                   	cld    
c0006e7a:	31 d2                	xor    edx,edx
c0006e7c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0006e7e:	a8 02                	test   al,0x2
c0006e80:	74 0b                	je     c0006e8d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c0006e82:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006e85:	66 89 17             	mov    WORD PTR [edi],dx
c0006e88:	ba 02 00 00 00       	mov    edx,0x2
c0006e8d:	a8 01                	test   al,0x1
c0006e8f:	74 06                	je     c0006e97 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c0006e91:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c0006e94:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c0006e97:	89 ee                	mov    esi,ebp
c0006e99:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0006e9d:	eb 02                	jmp    c0006ea1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c0006e9f:	89 c6                	mov    esi,eax
c0006ea1:	31 d2                	xor    edx,edx
c0006ea3:	83 c1 01             	add    ecx,0x1
c0006ea6:	89 f0                	mov    eax,esi
c0006ea8:	f7 f3                	div    ebx
c0006eaa:	39 de                	cmp    esi,ebx
c0006eac:	73 f1                	jae    c0006e9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c0006eae:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0006eb1:	eb 02                	jmp    c0006eb5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c0006eb3:	89 c5                	mov    ebp,eax
c0006eb5:	31 d2                	xor    edx,edx
c0006eb7:	83 e9 01             	sub    ecx,0x1
c0006eba:	89 e8                	mov    eax,ebp
c0006ebc:	f7 f3                	div    ebx
c0006ebe:	39 dd                	cmp    ebp,ebx
c0006ec0:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c0006ec4:	88 11                	mov    BYTE PTR [ecx],dl
c0006ec6:	73 eb                	jae    c0006eb3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c0006ec8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0006ecc:	83 c4 20             	add    esp,0x20
c0006ecf:	5b                   	pop    ebx
c0006ed0:	5e                   	pop    esi
c0006ed1:	5f                   	pop    edi
c0006ed2:	5d                   	pop    ebp
c0006ed3:	c3                   	ret    
c0006ed4:	66 8b 16             	mov    dx,WORD PTR [esi]
c0006ed7:	83 c7 02             	add    edi,0x2
c0006eda:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c0006ede:	83 c6 02             	add    esi,0x2
c0006ee1:	83 e8 02             	sub    eax,0x2
c0006ee4:	eb 8e                	jmp    c0006e74 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c0006ee6 <Dbg::logc(char)>:
c0006ee6:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006eea:	f6 05 c4 cd 02 c0 10 	test   BYTE PTR ds:0xc002cdc4,0x10
c0006ef1:	75 12                	jne    c0006f05 <Dbg::logc(char)+0x1f>
c0006ef3:	ba fd 03 00 00       	mov    edx,0x3fd
c0006ef8:	ec                   	in     al,dx
c0006ef9:	a8 20                	test   al,0x20
c0006efb:	74 fb                	je     c0006ef8 <Dbg::logc(char)+0x12>
c0006efd:	ba f8 03 00 00       	mov    edx,0x3f8
c0006f02:	88 c8                	mov    al,cl
c0006f04:	ee                   	out    dx,al
c0006f05:	c3                   	ret    

c0006f06 <Dbg::logs(char*)>:
c0006f06:	53                   	push   ebx
c0006f07:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0006f0b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f0e:	85 c0                	test   eax,eax
c0006f10:	74 11                	je     c0006f23 <Dbg::logs(char*)+0x1d>
c0006f12:	83 c3 01             	add    ebx,0x1
c0006f15:	50                   	push   eax
c0006f16:	e8 cb ff ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006f1b:	58                   	pop    eax
c0006f1c:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f1f:	85 c0                	test   eax,eax
c0006f21:	75 ef                	jne    c0006f12 <Dbg::logs(char*)+0xc>
c0006f23:	5b                   	pop    ebx
c0006f24:	c3                   	ret    

c0006f25 <Dbg::logWriteInt(unsigned int)>:
c0006f25:	83 ec 10             	sub    esp,0x10
c0006f28:	6a 0a                	push   0xa
c0006f2a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f2e:	50                   	push   eax
c0006f2f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006f33:	50                   	push   eax
c0006f34:	e8 0d ff ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f39:	50                   	push   eax
c0006f3a:	e8 c7 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f3f:	83 c4 20             	add    esp,0x20
c0006f42:	c3                   	ret    

c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>:
c0006f43:	83 ec 10             	sub    esp,0x10
c0006f46:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006f4a:	50                   	push   eax
c0006f4b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0006f4f:	50                   	push   eax
c0006f50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006f54:	52                   	push   edx
c0006f55:	e8 ec fe ff ff       	call   c0006e46 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0006f5a:	50                   	push   eax
c0006f5b:	e8 a6 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0006f60:	83 c4 20             	add    esp,0x20
c0006f63:	c3                   	ret    

c0006f64 <Dbg::kprintf(char const*, ...)>:
c0006f64:	55                   	push   ebp
c0006f65:	57                   	push   edi
c0006f66:	56                   	push   esi
c0006f67:	53                   	push   ebx
c0006f68:	83 ec 0c             	sub    esp,0xc
c0006f6b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0006f6f:	f6 05 c4 cd 02 c0 10 	test   BYTE PTR ds:0xc002cdc4,0x10
c0006f76:	74 08                	je     c0006f80 <Dbg::kprintf(char const*, ...)+0x1c>
c0006f78:	83 c4 0c             	add    esp,0xc
c0006f7b:	5b                   	pop    ebx
c0006f7c:	5e                   	pop    esi
c0006f7d:	5f                   	pop    edi
c0006f7e:	5d                   	pop    ebp
c0006f7f:	c3                   	ret    
c0006f80:	8d 44 24 24          	lea    eax,[esp+0x24]
c0006f84:	31 ff                	xor    edi,edi
c0006f86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006f8a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0006f8d:	85 c0                	test   eax,eax
c0006f8f:	74 e7                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006f91:	8d 77 01             	lea    esi,[edi+0x1]
c0006f94:	83 f8 25             	cmp    eax,0x25
c0006f97:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006f9a:	75 47                	jne    c0006fe3 <Dbg::kprintf(char const*, ...)+0x7f>
c0006f9c:	83 c7 02             	add    edi,0x2
c0006f9f:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0006fa2:	8d 34 3b             	lea    esi,[ebx+edi*1]
c0006fa5:	83 e8 25             	sub    eax,0x25
c0006fa8:	0f b6 c0             	movzx  eax,al
c0006fab:	83 f8 53             	cmp    eax,0x53
c0006fae:	0f 87 ce 00 00 00    	ja     c0007082 <Dbg::kprintf(char const*, ...)+0x11e>
c0006fb4:	ff 24 85 a0 1f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffde060]
c0006fbb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006fbf:	89 c8                	mov    eax,ecx
c0006fc1:	83 c1 04             	add    ecx,0x4
c0006fc4:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fc8:	8b 28                	mov    ebp,DWORD PTR [eax]
c0006fca:	55                   	push   ebp
c0006fcb:	e8 55 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c0006fd0:	58                   	pop    eax
c0006fd1:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0006fd4:	85 c0                	test   eax,eax
c0006fd6:	74 a0                	je     c0006f78 <Dbg::kprintf(char const*, ...)+0x14>
c0006fd8:	8d 77 01             	lea    esi,[edi+0x1]
c0006fdb:	83 f8 25             	cmp    eax,0x25
c0006fde:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c0006fe1:	74 b9                	je     c0006f9c <Dbg::kprintf(char const*, ...)+0x38>
c0006fe3:	50                   	push   eax
c0006fe4:	89 f7                	mov    edi,esi
c0006fe6:	e8 fb fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0006feb:	89 ee                	mov    esi,ebp
c0006fed:	58                   	pop    eax
c0006fee:	eb e1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0006ff0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0006ff4:	89 c8                	mov    eax,ecx
c0006ff6:	83 c1 04             	add    ecx,0x4
c0006ff9:	8b 00                	mov    eax,DWORD PTR [eax]
c0006ffb:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0006fff:	50                   	push   eax
c0007000:	e8 01 ff ff ff       	call   c0006f06 <Dbg::logs(char*)>
c0007005:	58                   	pop    eax
c0007006:	eb c9                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007008:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000700c:	89 d0                	mov    eax,edx
c000700e:	83 c2 04             	add    edx,0x4
c0007011:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007015:	8b 00                	mov    eax,DWORD PTR [eax]
c0007017:	50                   	push   eax
c0007018:	e8 08 ff ff ff       	call   c0006f25 <Dbg::logWriteInt(unsigned int)>
c000701d:	58                   	pop    eax
c000701e:	eb b1                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007020:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007024:	89 d0                	mov    eax,edx
c0007026:	83 c2 04             	add    edx,0x4
c0007029:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000702c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007030:	50                   	push   eax
c0007031:	e8 b0 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007036:	58                   	pop    eax
c0007037:	eb 98                	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007039:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000703d:	89 c8                	mov    eax,ecx
c000703f:	83 c1 04             	add    ecx,0x4
c0007042:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0007046:	6a 10                	push   0x10
c0007048:	8b 08                	mov    ecx,DWORD PTR [eax]
c000704a:	51                   	push   ecx
c000704b:	e8 f3 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c0007050:	5d                   	pop    ebp
c0007051:	58                   	pop    eax
c0007052:	e9 7a ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007057:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000705b:	89 d0                	mov    eax,edx
c000705d:	83 c2 08             	add    edx,0x8
c0007060:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007064:	6a 10                	push   0x10
c0007066:	8b 00                	mov    eax,DWORD PTR [eax]
c0007068:	50                   	push   eax
c0007069:	e8 d5 fe ff ff       	call   c0006f43 <Dbg::logWriteIntBase(unsigned int, int)>
c000706e:	58                   	pop    eax
c000706f:	5a                   	pop    edx
c0007070:	e9 5c ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007075:	6a 25                	push   0x25
c0007077:	e8 6a fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c000707c:	5a                   	pop    edx
c000707d:	e9 4f ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c0007082:	6a 25                	push   0x25
c0007084:	e8 5d fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007089:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000708d:	50                   	push   eax
c000708e:	e8 53 fe ff ff       	call   c0006ee6 <Dbg::logc(char)>
c0007093:	5a                   	pop    edx
c0007094:	59                   	pop    ecx
c0007095:	e9 37 ff ff ff       	jmp    c0006fd1 <Dbg::kprintf(char const*, ...)+0x6d>
c000709a:	66 90                	xchg   ax,ax

c000709c <KiUbsanPrintDetails(char const*, void*)>:
c000709c:	83 ec 1c             	sub    esp,0x1c
c000709f:	83 ec 08             	sub    esp,0x8
c00070a2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00070a6:	68 f0 20 02 c0       	push   0xc00220f0
c00070ab:	e8 b4 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070b0:	83 c4 10             	add    esp,0x10
c00070b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00070b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00070bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00070c1:	83 ec 08             	sub    esp,0x8
c00070c4:	50                   	push   eax
c00070c5:	68 04 21 02 c0       	push   0xc0022104
c00070ca:	e8 95 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070cf:	83 c4 10             	add    esp,0x10
c00070d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00070d9:	83 ec 08             	sub    esp,0x8
c00070dc:	50                   	push   eax
c00070dd:	68 0e 21 02 c0       	push   0xc002210e
c00070e2:	e8 7d fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00070ee:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00070f1:	83 ec 08             	sub    esp,0x8
c00070f4:	50                   	push   eax
c00070f5:	68 18 21 02 c0       	push   0xc0022118
c00070fa:	e8 65 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00070ff:	83 c4 10             	add    esp,0x10
c0007102:	90                   	nop
c0007103:	83 c4 1c             	add    esp,0x1c
c0007106:	c3                   	ret    
c0007107:	90                   	nop

c0007108 <__ubsan_handle_type_mismatch_v1>:
c0007108:	83 ec 0c             	sub    esp,0xc
c000710b:	83 ec 08             	sub    esp,0x8
c000710e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007112:	68 5c 22 02 c0       	push   0xc002225c
c0007117:	e8 80 ff ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000711c:	83 c4 10             	add    esp,0x10
c000711f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0007124:	75 16                	jne    c000713c <__ubsan_handle_type_mismatch_v1+0x34>
c0007126:	83 ec 0c             	sub    esp,0xc
c0007129:	68 22 21 02 c0       	push   0xc0022122
c000712e:	e8 31 fe ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007133:	83 c4 10             	add    esp,0x10
c0007136:	e9 91 00 00 00       	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000713b:	90                   	nop
c000713c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007140:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0007143:	85 c0                	test   eax,eax
c0007145:	74 29                	je     c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007147:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000714b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000714e:	83 e8 01             	sub    eax,0x1
c0007151:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0007155:	75 19                	jne    c0007170 <__ubsan_handle_type_mismatch_v1+0x68>
c0007157:	83 ec 08             	sub    esp,0x8
c000715a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000715e:	68 7c 22 02 c0       	push   0xc002227c
c0007163:	e8 fc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007168:	83 c4 10             	add    esp,0x10
c000716b:	eb 5f                	jmp    c00071cc <__ubsan_handle_type_mismatch_v1+0xc4>
c000716d:	8d 76 00             	lea    esi,[esi+0x0]
c0007170:	83 ec 0c             	sub    esp,0xc
c0007173:	68 37 21 02 c0       	push   0xc0022137
c0007178:	e8 e7 fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000717d:	83 c4 10             	add    esp,0x10
c0007180:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007184:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c0007187:	0f b6 c0             	movzx  eax,al
c000718a:	83 ec 08             	sub    esp,0x8
c000718d:	50                   	push   eax
c000718e:	68 51 21 02 c0       	push   0xc0022151
c0007193:	e8 cc fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007198:	83 c4 10             	add    esp,0x10
c000719b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000719f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00071a2:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c00071a5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00071a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00071ad:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c00071b0:	0f b6 c0             	movzx  eax,al
c00071b3:	8b 04 85 00 52 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdae00]
c00071ba:	51                   	push   ecx
c00071bb:	52                   	push   edx
c00071bc:	50                   	push   eax
c00071bd:	68 a4 22 02 c0       	push   0xc00222a4
c00071c2:	e8 9d fd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00071c7:	83 c4 10             	add    esp,0x10
c00071ca:	66 90                	xchg   ax,ax
c00071cc:	83 ec 0c             	sub    esp,0xc
c00071cf:	68 5c 22 02 c0       	push   0xc002225c
c00071d4:	e8 71 84 00 00       	call   c000f64a <KePanic(char const*)>
c00071d9:	83 c4 10             	add    esp,0x10
c00071dc:	90                   	nop
c00071dd:	83 c4 0c             	add    esp,0xc
c00071e0:	c3                   	ret    
c00071e1:	8d 76 00             	lea    esi,[esi+0x0]

c00071e4 <__ubsan_handle_pointer_overflow>:
c00071e4:	83 ec 0c             	sub    esp,0xc
c00071e7:	83 ec 08             	sub    esp,0x8
c00071ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00071ee:	68 ec 22 02 c0       	push   0xc00222ec
c00071f3:	e8 a4 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00071f8:	83 c4 10             	add    esp,0x10
c00071fb:	83 ec 0c             	sub    esp,0xc
c00071fe:	68 ec 22 02 c0       	push   0xc00222ec
c0007203:	e8 42 84 00 00       	call   c000f64a <KePanic(char const*)>
c0007208:	83 c4 10             	add    esp,0x10
c000720b:	90                   	nop
c000720c:	83 c4 0c             	add    esp,0xc
c000720f:	c3                   	ret    

c0007210 <__ubsan_handle_out_of_bounds>:
c0007210:	83 ec 0c             	sub    esp,0xc
c0007213:	83 ec 08             	sub    esp,0x8
c0007216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000721a:	68 5c 21 02 c0       	push   0xc002215c
c000721f:	e8 78 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007224:	83 c4 10             	add    esp,0x10
c0007227:	83 ec 0c             	sub    esp,0xc
c000722a:	68 5c 21 02 c0       	push   0xc002215c
c000722f:	e8 16 84 00 00       	call   c000f64a <KePanic(char const*)>
c0007234:	83 c4 10             	add    esp,0x10
c0007237:	90                   	nop
c0007238:	83 c4 0c             	add    esp,0xc
c000723b:	c3                   	ret    

c000723c <__ubsan_handle_add_overflow>:
c000723c:	83 ec 0c             	sub    esp,0xc
c000723f:	83 ec 08             	sub    esp,0x8
c0007242:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007246:	68 79 21 02 c0       	push   0xc0022179
c000724b:	e8 4c fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007250:	83 c4 10             	add    esp,0x10
c0007253:	83 ec 0c             	sub    esp,0xc
c0007256:	68 79 21 02 c0       	push   0xc0022179
c000725b:	e8 ea 83 00 00       	call   c000f64a <KePanic(char const*)>
c0007260:	83 c4 10             	add    esp,0x10
c0007263:	90                   	nop
c0007264:	83 c4 0c             	add    esp,0xc
c0007267:	c3                   	ret    

c0007268 <__ubsan_handle_load_invalid_value>:
c0007268:	83 ec 0c             	sub    esp,0xc
c000726b:	83 ec 08             	sub    esp,0x8
c000726e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007272:	68 0c 23 02 c0       	push   0xc002230c
c0007277:	e8 20 fe ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000727c:	83 c4 10             	add    esp,0x10
c000727f:	83 ec 0c             	sub    esp,0xc
c0007282:	68 0c 23 02 c0       	push   0xc002230c
c0007287:	e8 be 83 00 00       	call   c000f64a <KePanic(char const*)>
c000728c:	83 c4 10             	add    esp,0x10
c000728f:	90                   	nop
c0007290:	83 c4 0c             	add    esp,0xc
c0007293:	c3                   	ret    

c0007294 <__ubsan_handle_divrem_overflow>:
c0007294:	83 ec 0c             	sub    esp,0xc
c0007297:	83 ec 08             	sub    esp,0x8
c000729a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000729e:	68 30 23 02 c0       	push   0xc0022330
c00072a3:	e8 f4 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	83 ec 0c             	sub    esp,0xc
c00072ae:	68 30 23 02 c0       	push   0xc0022330
c00072b3:	e8 92 83 00 00       	call   c000f64a <KePanic(char const*)>
c00072b8:	83 c4 10             	add    esp,0x10
c00072bb:	90                   	nop
c00072bc:	83 c4 0c             	add    esp,0xc
c00072bf:	c3                   	ret    

c00072c0 <__ubsan_handle_mul_overflow>:
c00072c0:	83 ec 0c             	sub    esp,0xc
c00072c3:	83 ec 08             	sub    esp,0x8
c00072c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072ca:	68 95 21 02 c0       	push   0xc0022195
c00072cf:	e8 c8 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c00072d4:	83 c4 10             	add    esp,0x10
c00072d7:	83 ec 0c             	sub    esp,0xc
c00072da:	68 95 21 02 c0       	push   0xc0022195
c00072df:	e8 66 83 00 00       	call   c000f64a <KePanic(char const*)>
c00072e4:	83 c4 10             	add    esp,0x10
c00072e7:	90                   	nop
c00072e8:	83 c4 0c             	add    esp,0xc
c00072eb:	c3                   	ret    

c00072ec <__ubsan_handle_sub_overflow>:
c00072ec:	83 ec 0c             	sub    esp,0xc
c00072ef:	83 ec 08             	sub    esp,0x8
c00072f2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00072f6:	68 b1 21 02 c0       	push   0xc00221b1
c00072fb:	e8 9c fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007300:	83 c4 10             	add    esp,0x10
c0007303:	83 ec 0c             	sub    esp,0xc
c0007306:	68 b1 21 02 c0       	push   0xc00221b1
c000730b:	e8 3a 83 00 00       	call   c000f64a <KePanic(char const*)>
c0007310:	83 c4 10             	add    esp,0x10
c0007313:	90                   	nop
c0007314:	83 c4 0c             	add    esp,0xc
c0007317:	c3                   	ret    

c0007318 <__ubsan_handle_shift_out_of_bounds>:
c0007318:	83 ec 0c             	sub    esp,0xc
c000731b:	83 ec 08             	sub    esp,0x8
c000731e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007322:	68 50 23 02 c0       	push   0xc0022350
c0007327:	e8 70 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c000732c:	83 c4 10             	add    esp,0x10
c000732f:	83 ec 0c             	sub    esp,0xc
c0007332:	68 50 23 02 c0       	push   0xc0022350
c0007337:	e8 0e 83 00 00       	call   c000f64a <KePanic(char const*)>
c000733c:	83 c4 10             	add    esp,0x10
c000733f:	90                   	nop
c0007340:	83 c4 0c             	add    esp,0xc
c0007343:	c3                   	ret    

c0007344 <__ubsan_handle_negate_overflow>:
c0007344:	83 ec 0c             	sub    esp,0xc
c0007347:	83 ec 08             	sub    esp,0x8
c000734a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000734e:	68 74 23 02 c0       	push   0xc0022374
c0007353:	e8 44 fd ff ff       	call   c000709c <KiUbsanPrintDetails(char const*, void*)>
c0007358:	83 c4 10             	add    esp,0x10
c000735b:	83 ec 0c             	sub    esp,0xc
c000735e:	68 74 23 02 c0       	push   0xc0022374
c0007363:	e8 e2 82 00 00       	call   c000f64a <KePanic(char const*)>
c0007368:	83 c4 10             	add    esp,0x10
c000736b:	90                   	nop
c000736c:	83 c4 0c             	add    esp,0xc
c000736f:	c3                   	ret    

c0007370 <KiIsHashInTable(unsigned short)>:
c0007370:	0f b7 d0             	movzx  edx,ax
c0007373:	83 e0 07             	and    eax,0x7
c0007376:	c1 fa 03             	sar    edx,0x3
c0007379:	88 c1                	mov    cl,al
c000737b:	0f b6 92 00 83 02 c0 	movzx  edx,BYTE PTR [edx-0x3ffd7d00]
c0007382:	d3 fa                	sar    edx,cl
c0007384:	89 d0                	mov    eax,edx
c0007386:	83 e0 01             	and    eax,0x1
c0007389:	c3                   	ret    

c000738a <KiSetHashInTable(unsigned short, bool)>:
c000738a:	56                   	push   esi
c000738b:	53                   	push   ebx
c000738c:	0f b7 d8             	movzx  ebx,ax
c000738f:	83 e0 07             	and    eax,0x7
c0007392:	c1 fb 03             	sar    ebx,0x3
c0007395:	89 c1                	mov    ecx,eax
c0007397:	0f b6 b3 00 83 02 c0 	movzx  esi,BYTE PTR [ebx-0x3ffd7d00]
c000739e:	b8 01 00 00 00       	mov    eax,0x1
c00073a3:	d3 e0                	shl    eax,cl
c00073a5:	84 d2                	test   dl,dl
c00073a7:	74 04                	je     c00073ad <KiSetHashInTable(unsigned short, bool)+0x23>
c00073a9:	09 f0                	or     eax,esi
c00073ab:	eb 04                	jmp    c00073b1 <KiSetHashInTable(unsigned short, bool)+0x27>
c00073ad:	f7 d0                	not    eax
c00073af:	21 f0                	and    eax,esi
c00073b1:	88 83 00 83 02 c0    	mov    BYTE PTR [ebx-0x3ffd7d00],al
c00073b7:	5b                   	pop    ebx
c00073b8:	5e                   	pop    esi
c00073b9:	c3                   	ret    

c00073ba <KiFlushSymlinkChanges()>:
c00073ba:	57                   	push   edi
c00073bb:	56                   	push   esi
c00073bc:	53                   	push   ebx
c00073bd:	83 ec 1c             	sub    esp,0x1c
c00073c0:	68 14 01 00 00       	push   0x114
c00073c5:	e8 39 7f 00 00       	call   c000f303 <malloc>
c00073ca:	83 c4 0c             	add    esp,0xc
c00073cd:	89 c3                	mov    ebx,eax
c00073cf:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c00073d5:	68 93 23 02 c0       	push   0xc0022393
c00073da:	50                   	push   eax
c00073db:	e8 52 0d 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00073e0:	83 c4 10             	add    esp,0x10
c00073e3:	85 db                	test   ebx,ebx
c00073e5:	75 10                	jne    c00073f7 <KiFlushSymlinkChanges()+0x3d>
c00073e7:	83 ec 0c             	sub    esp,0xc
c00073ea:	68 b1 23 02 c0       	push   0xc00223b1
c00073ef:	e8 56 82 00 00       	call   c000f64a <KePanic(char const*)>
c00073f4:	83 c4 10             	add    esp,0x10
c00073f7:	50                   	push   eax
c00073f8:	50                   	push   eax
c00073f9:	6a 06                	push   0x6
c00073fb:	53                   	push   ebx
c00073fc:	e8 4f 0d 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007401:	83 c4 10             	add    esp,0x10
c0007404:	85 c0                	test   eax,eax
c0007406:	74 10                	je     c0007418 <KiFlushSymlinkChanges()+0x5e>
c0007408:	83 ec 0c             	sub    esp,0xc
c000740b:	68 cb 23 02 c0       	push   0xc00223cb
c0007410:	e8 35 82 00 00       	call   c000f64a <KePanic(char const*)>
c0007415:	83 c4 10             	add    esp,0x10
c0007418:	31 f6                	xor    esi,esi
c000741a:	39 35 c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,esi
c0007420:	7e 70                	jle    c0007492 <KiFlushSymlinkChanges()+0xd8>
c0007422:	83 ec 0c             	sub    esp,0xc
c0007425:	8b 13                	mov    edx,DWORD PTR [ebx]
c0007427:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000742b:	89 f0                	mov    eax,esi
c000742d:	57                   	push   edi
c000742e:	c1 e0 08             	shl    eax,0x8
c0007431:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007436:	50                   	push   eax
c0007437:	6a 00                	push   0x0
c0007439:	68 00 01 00 00       	push   0x100
c000743e:	53                   	push   ebx
c000743f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0007442:	83 c4 20             	add    esp,0x20
c0007445:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000744d:	74 10                	je     c000745f <KiFlushSymlinkChanges()+0xa5>
c000744f:	83 ec 0c             	sub    esp,0xc
c0007452:	68 e5 23 02 c0       	push   0xc00223e5
c0007457:	e8 ee 81 00 00       	call   c000f64a <KePanic(char const*)>
c000745c:	83 c4 10             	add    esp,0x10
c000745f:	83 ec 0c             	sub    esp,0xc
c0007462:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007464:	8d 14 f5 e0 7e 02 c0 	lea    edx,[esi*8-0x3ffd8120]
c000746b:	57                   	push   edi
c000746c:	52                   	push   edx
c000746d:	6a 00                	push   0x0
c000746f:	6a 08                	push   0x8
c0007471:	53                   	push   ebx
c0007472:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007475:	83 c4 20             	add    esp,0x20
c0007478:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000747d:	74 10                	je     c000748f <KiFlushSymlinkChanges()+0xd5>
c000747f:	83 ec 0c             	sub    esp,0xc
c0007482:	68 ff 23 02 c0       	push   0xc00223ff
c0007487:	e8 be 81 00 00       	call   c000f64a <KePanic(char const*)>
c000748c:	83 c4 10             	add    esp,0x10
c000748f:	46                   	inc    esi
c0007490:	eb 88                	jmp    c000741a <KiFlushSymlinkChanges()+0x60>
c0007492:	83 ec 0c             	sub    esp,0xc
c0007495:	53                   	push   ebx
c0007496:	e8 13 0d 00 00       	call   c00081ae <File::close()>
c000749b:	83 c4 10             	add    esp,0x10
c000749e:	85 db                	test   ebx,ebx
c00074a0:	74 0c                	je     c00074ae <KiFlushSymlinkChanges()+0xf4>
c00074a2:	83 ec 0c             	sub    esp,0xc
c00074a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00074a7:	53                   	push   ebx
c00074a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00074ab:	83 c4 10             	add    esp,0x10
c00074ae:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00074b8:	83 c4 10             	add    esp,0x10
c00074bb:	5b                   	pop    ebx
c00074bc:	5e                   	pop    esi
c00074bd:	5f                   	pop    edi
c00074be:	c3                   	ret    

c00074bf <KiDeinitialiseSymlinks(void*)>:
c00074bf:	e9 f6 fe ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>

c00074c4 <KiGetSymlinkHash(char const*)>:
c00074c4:	53                   	push   ebx
c00074c5:	89 c3                	mov    ebx,eax
c00074c7:	83 ec 14             	sub    esp,0x14
c00074ca:	50                   	push   eax
c00074cb:	e8 a0 90 ff ff       	call   c0000570 <strlen>
c00074d0:	5a                   	pop    edx
c00074d1:	59                   	pop    ecx
c00074d2:	50                   	push   eax
c00074d3:	53                   	push   ebx
c00074d4:	e8 40 65 00 00       	call   c000da19 <KeCalculateCRC32(unsigned char*, int)>
c00074d9:	83 c4 18             	add    esp,0x18
c00074dc:	89 c2                	mov    edx,eax
c00074de:	5b                   	pop    ebx
c00074df:	c1 ea 10             	shr    edx,0x10
c00074e2:	31 d0                	xor    eax,edx
c00074e4:	c3                   	ret    

c00074e5 <KiCreateSymlinkID()>:
c00074e5:	55                   	push   ebp
c00074e6:	57                   	push   edi
c00074e7:	56                   	push   esi
c00074e8:	53                   	push   ebx
c00074e9:	31 db                	xor    ebx,ebx
c00074eb:	83 ec 1c             	sub    esp,0x1c
c00074ee:	e8 4b 8b 00 00       	call   c001003e <KeRand()>
c00074f3:	43                   	inc    ebx
c00074f4:	8b 2d 00 a3 02 c0    	mov    ebp,DWORD PTR ds:0xc002a300
c00074fa:	31 d2                	xor    edx,edx
c00074fc:	8d 4d 01             	lea    ecx,[ebp+0x1]
c00074ff:	0f a4 c2 1f          	shld   edx,eax,0x1f
c0007503:	89 0d 00 a3 02 c0    	mov    DWORD PTR ds:0xc002a300,ecx
c0007509:	c1 e0 1f             	shl    eax,0x1f
c000750c:	89 d7                	mov    edi,edx
c000750e:	89 c6                	mov    esi,eax
c0007510:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0007514:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000751c:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c0007522:	75 10                	jne    c0007534 <KiCreateSymlinkID()+0x4f>
c0007524:	83 ec 0c             	sub    esp,0xc
c0007527:	68 19 24 02 c0       	push   0xc0022419
c000752c:	e8 19 81 00 00       	call   c000f64a <KePanic(char const*)>
c0007531:	83 c4 10             	add    esp,0x10
c0007534:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0007538:	75 04                	jne    c000753e <KiCreateSymlinkID()+0x59>
c000753a:	39 f5                	cmp    ebp,esi
c000753c:	74 b0                	je     c00074ee <KiCreateSymlinkID()+0x9>
c000753e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007542:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007546:	31 f0                	xor    eax,esi
c0007548:	83 c4 1c             	add    esp,0x1c
c000754b:	31 fa                	xor    edx,edi
c000754d:	5b                   	pop    ebx
c000754e:	5e                   	pop    esi
c000754f:	5f                   	pop    edi
c0007550:	5d                   	pop    ebp
c0007551:	c3                   	ret    

c0007552 <KeRegisterSymlink(char const*, unsigned long long)>:
c0007552:	53                   	push   ebx
c0007553:	83 ec 0c             	sub    esp,0xc
c0007556:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000755a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000755e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0007562:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007567:	68 00 01 00 00       	push   0x100
c000756c:	89 0c c5 e4 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd811c],ecx
c0007573:	6a 00                	push   0x0
c0007575:	89 14 c5 e0 7e 02 c0 	mov    DWORD PTR [eax*8-0x3ffd8120],edx
c000757c:	c1 e0 08             	shl    eax,0x8
c000757f:	05 00 7f 02 c0       	add    eax,0xc0027f00
c0007584:	50                   	push   eax
c0007585:	e8 66 8f ff ff       	call   c00004f0 <memset>
c000758a:	58                   	pop    eax
c000758b:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c0007590:	5a                   	pop    edx
c0007591:	c1 e0 08             	shl    eax,0x8
c0007594:	53                   	push   ebx
c0007595:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000759a:	50                   	push   eax
c000759b:	e8 a0 90 ff ff       	call   c0000640 <strcpy>
c00075a0:	89 d8                	mov    eax,ebx
c00075a2:	e8 1d ff ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c00075a7:	ba 01 00 00 00       	mov    edx,0x1
c00075ac:	0f b7 c0             	movzx  eax,ax
c00075af:	e8 d6 fd ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c00075b4:	a1 c0 7e 02 c0       	mov    eax,ds:0xc0027ec0
c00075b9:	83 c4 10             	add    esp,0x10
c00075bc:	40                   	inc    eax
c00075bd:	a3 c0 7e 02 c0       	mov    ds:0xc0027ec0,eax
c00075c2:	83 f8 03             	cmp    eax,0x3
c00075c5:	7e 09                	jle    c00075d0 <KeRegisterSymlink(char const*, unsigned long long)+0x7e>
c00075c7:	83 c4 08             	add    esp,0x8
c00075ca:	5b                   	pop    ebx
c00075cb:	e9 ea fd ff ff       	jmp    c00073ba <KiFlushSymlinkChanges()>
c00075d0:	83 c4 08             	add    esp,0x8
c00075d3:	5b                   	pop    ebx
c00075d4:	c3                   	ret    

c00075d5 <KeInitialiseSymlinks()>:
c00075d5:	57                   	push   edi
c00075d6:	56                   	push   esi
c00075d7:	53                   	push   ebx
c00075d8:	81 ec 14 01 00 00    	sub    esp,0x114
c00075de:	c7 05 00 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a300,0x0
c00075e8:	68 00 20 00 00       	push   0x2000
c00075ed:	c7 05 c0 7e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0027ec0,0x0
c00075f7:	6a 00                	push   0x0
c00075f9:	68 00 83 02 c0       	push   0xc0028300
c00075fe:	e8 ed 8e ff ff       	call   c00004f0 <memset>
c0007603:	59                   	pop    ecx
c0007604:	5b                   	pop    ebx
c0007605:	6a 00                	push   0x0
c0007607:	68 bf 74 00 c0       	push   0xc00074bf
c000760c:	e8 f4 51 00 00       	call   c000c805 <KeRegisterAtexit(void (*)(void*), void*)>
c0007611:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0007618:	e8 e6 7c 00 00       	call   c000f303 <malloc>
c000761d:	83 c4 0c             	add    esp,0xc
c0007620:	89 c3                	mov    ebx,eax
c0007622:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0007628:	68 93 23 02 c0       	push   0xc0022393
c000762d:	50                   	push   eax
c000762e:	e8 ff 0a 00 00       	call   c0008132 <File::File(char const*, Process*)>
c0007633:	83 c4 10             	add    esp,0x10
c0007636:	85 db                	test   ebx,ebx
c0007638:	75 10                	jne    c000764a <KeInitialiseSymlinks()+0x75>
c000763a:	83 ec 0c             	sub    esp,0xc
c000763d:	68 22 24 02 c0       	push   0xc0022422
c0007642:	e8 03 80 00 00       	call   c000f64a <KePanic(char const*)>
c0007647:	83 c4 10             	add    esp,0x10
c000764a:	83 ec 0c             	sub    esp,0xc
c000764d:	53                   	push   ebx
c000764e:	e8 c1 0d 00 00       	call   c0008414 <File::exists()>
c0007653:	83 c4 10             	add    esp,0x10
c0007656:	84 c0                	test   al,al
c0007658:	75 3a                	jne    c0007694 <KeInitialiseSymlinks()+0xbf>
c000765a:	52                   	push   edx
c000765b:	52                   	push   edx
c000765c:	6a 12                	push   0x12
c000765e:	53                   	push   ebx
c000765f:	e8 ec 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007664:	83 c4 10             	add    esp,0x10
c0007667:	85 c0                	test   eax,eax
c0007669:	74 10                	je     c000767b <KeInitialiseSymlinks()+0xa6>
c000766b:	83 ec 0c             	sub    esp,0xc
c000766e:	68 3f 24 02 c0       	push   0xc002243f
c0007673:	e8 d2 7f 00 00       	call   c000f64a <KePanic(char const*)>
c0007678:	83 c4 10             	add    esp,0x10
c000767b:	83 ec 0c             	sub    esp,0xc
c000767e:	53                   	push   ebx
c000767f:	e8 2a 0b 00 00       	call   c00081ae <File::close()>
c0007684:	83 c4 10             	add    esp,0x10
c0007687:	85 db                	test   ebx,ebx
c0007689:	0f 84 9e 00 00 00    	je     c000772d <KeInitialiseSymlinks()+0x158>
c000768f:	e9 8d 00 00 00       	jmp    c0007721 <KeInitialiseSymlinks()+0x14c>
c0007694:	50                   	push   eax
c0007695:	50                   	push   eax
c0007696:	6a 01                	push   0x1
c0007698:	53                   	push   ebx
c0007699:	e8 b2 0a 00 00       	call   c0008150 <File::open(FileOpenMode)>
c000769e:	83 c4 10             	add    esp,0x10
c00076a1:	85 c0                	test   eax,eax
c00076a3:	74 10                	je     c00076b5 <KeInitialiseSymlinks()+0xe0>
c00076a5:	83 ec 0c             	sub    esp,0xc
c00076a8:	68 5c 24 02 c0       	push   0xc002245c
c00076ad:	e8 98 7f 00 00       	call   c000f64a <KePanic(char const*)>
c00076b2:	83 c4 10             	add    esp,0x10
c00076b5:	83 ec 0c             	sub    esp,0xc
c00076b8:	ff 05 00 a3 02 c0    	inc    DWORD PTR ds:0xc002a300
c00076be:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00076c2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076c4:	57                   	push   edi
c00076c5:	8d 74 24 20          	lea    esi,[esp+0x20]
c00076c9:	56                   	push   esi
c00076ca:	6a 00                	push   0x0
c00076cc:	68 00 01 00 00       	push   0x100
c00076d1:	53                   	push   ebx
c00076d2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076d5:	83 c4 20             	add    esp,0x20
c00076d8:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c00076e0:	75 33                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076e2:	83 ec 0c             	sub    esp,0xc
c00076e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00076e7:	57                   	push   edi
c00076e8:	8d 54 24 18          	lea    edx,[esp+0x18]
c00076ec:	52                   	push   edx
c00076ed:	6a 00                	push   0x0
c00076ef:	6a 08                	push   0x8
c00076f1:	53                   	push   ebx
c00076f2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00076f5:	83 c4 20             	add    esp,0x20
c00076f8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c00076fd:	75 16                	jne    c0007715 <KeInitialiseSymlinks()+0x140>
c00076ff:	89 f0                	mov    eax,esi
c0007701:	e8 be fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c0007706:	ba 01 00 00 00       	mov    edx,0x1
c000770b:	0f b7 c0             	movzx  eax,ax
c000770e:	e8 77 fc ff ff       	call   c000738a <KiSetHashInTable(unsigned short, bool)>
c0007713:	eb a0                	jmp    c00076b5 <KeInitialiseSymlinks()+0xe0>
c0007715:	83 ec 0c             	sub    esp,0xc
c0007718:	53                   	push   ebx
c0007719:	e8 90 0a 00 00       	call   c00081ae <File::close()>
c000771e:	83 c4 10             	add    esp,0x10
c0007721:	83 ec 0c             	sub    esp,0xc
c0007724:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007726:	53                   	push   ebx
c0007727:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000772a:	83 c4 10             	add    esp,0x10
c000772d:	81 c4 10 01 00 00    	add    esp,0x110
c0007733:	5b                   	pop    ebx
c0007734:	5e                   	pop    esi
c0007735:	5f                   	pop    edi
c0007736:	c3                   	ret    

c0007737 <KiIsSymlinkRegistered(char const*)>:
c0007737:	55                   	push   ebp
c0007738:	57                   	push   edi
c0007739:	56                   	push   esi
c000773a:	53                   	push   ebx
c000773b:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0007741:	8b b4 24 30 01 00 00 	mov    esi,DWORD PTR [esp+0x130]
c0007748:	89 f0                	mov    eax,esi
c000774a:	e8 75 fd ff ff       	call   c00074c4 <KiGetSymlinkHash(char const*)>
c000774f:	0f b7 c0             	movzx  eax,ax
c0007752:	e8 19 fc ff ff       	call   c0007370 <KiIsHashInTable(unsigned short)>
c0007757:	31 d2                	xor    edx,edx
c0007759:	88 c1                	mov    cl,al
c000775b:	31 c0                	xor    eax,eax
c000775d:	84 c9                	test   cl,cl
c000775f:	0f 84 31 01 00 00    	je     c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c0007765:	31 db                	xor    ebx,ebx
c0007767:	39 1d c0 7e 02 c0    	cmp    DWORD PTR ds:0xc0027ec0,ebx
c000776d:	7e 30                	jle    c000779f <KiIsSymlinkRegistered(char const*)+0x68>
c000776f:	89 d8                	mov    eax,ebx
c0007771:	51                   	push   ecx
c0007772:	c1 e0 08             	shl    eax,0x8
c0007775:	51                   	push   ecx
c0007776:	05 00 7f 02 c0       	add    eax,0xc0027f00
c000777b:	50                   	push   eax
c000777c:	56                   	push   esi
c000777d:	e8 ce 8f ff ff       	call   c0000750 <strcmp>
c0007782:	83 c4 10             	add    esp,0x10
c0007785:	85 c0                	test   eax,eax
c0007787:	75 13                	jne    c000779c <KiIsSymlinkRegistered(char const*)+0x65>
c0007789:	8b 04 dd e0 7e 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffd8120]
c0007790:	8b 14 dd e4 7e 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffd811c]
c0007797:	e9 fa 00 00 00       	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000779c:	43                   	inc    ebx
c000779d:	eb c8                	jmp    c0007767 <KiIsSymlinkRegistered(char const*)+0x30>
c000779f:	83 ec 0c             	sub    esp,0xc
c00077a2:	68 14 01 00 00       	push   0x114
c00077a7:	e8 57 7b 00 00       	call   c000f303 <malloc>
c00077ac:	83 c4 0c             	add    esp,0xc
c00077af:	89 c3                	mov    ebx,eax
c00077b1:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c00077b7:	68 93 23 02 c0       	push   0xc0022393
c00077bc:	50                   	push   eax
c00077bd:	e8 70 09 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00077c2:	83 c4 10             	add    esp,0x10
c00077c5:	85 db                	test   ebx,ebx
c00077c7:	75 12                	jne    c00077db <KiIsSymlinkRegistered(char const*)+0xa4>
c00077c9:	83 ec 0c             	sub    esp,0xc
c00077cc:	68 77 24 02 c0       	push   0xc0022477
c00077d1:	e8 74 7e 00 00       	call   c000f64a <KePanic(char const*)>
c00077d6:	83 c4 10             	add    esp,0x10
c00077d9:	eb 10                	jmp    c00077eb <KiIsSymlinkRegistered(char const*)+0xb4>
c00077db:	83 ec 0c             	sub    esp,0xc
c00077de:	53                   	push   ebx
c00077df:	e8 30 0c 00 00       	call   c0008414 <File::exists()>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	84 c0                	test   al,al
c00077e9:	74 de                	je     c00077c9 <KiIsSymlinkRegistered(char const*)+0x92>
c00077eb:	52                   	push   edx
c00077ec:	52                   	push   edx
c00077ed:	6a 01                	push   0x1
c00077ef:	53                   	push   ebx
c00077f0:	e8 5b 09 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00077f5:	83 c4 10             	add    esp,0x10
c00077f8:	85 c0                	test   eax,eax
c00077fa:	74 10                	je     c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c00077fc:	83 ec 0c             	sub    esp,0xc
c00077ff:	68 92 24 02 c0       	push   0xc0022492
c0007804:	e8 41 7e 00 00       	call   c000f64a <KePanic(char const*)>
c0007809:	83 c4 10             	add    esp,0x10
c000780c:	83 ec 0c             	sub    esp,0xc
c000780f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007811:	8d 6c 24 10          	lea    ebp,[esp+0x10]
c0007815:	55                   	push   ebp
c0007816:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000781a:	57                   	push   edi
c000781b:	6a 00                	push   0x0
c000781d:	68 00 01 00 00       	push   0x100
c0007822:	53                   	push   ebx
c0007823:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007826:	83 c4 20             	add    esp,0x20
c0007829:	81 7c 24 04 00 01 00 00 	cmp    DWORD PTR [esp+0x4],0x100
c0007831:	75 4b                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007833:	83 ec 0c             	sub    esp,0xc
c0007836:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007838:	55                   	push   ebp
c0007839:	8d 54 24 18          	lea    edx,[esp+0x18]
c000783d:	52                   	push   edx
c000783e:	6a 00                	push   0x0
c0007840:	6a 08                	push   0x8
c0007842:	53                   	push   ebx
c0007843:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007846:	83 c4 20             	add    esp,0x20
c0007849:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000784e:	75 2e                	jne    c000787e <KiIsSymlinkRegistered(char const*)+0x147>
c0007850:	50                   	push   eax
c0007851:	50                   	push   eax
c0007852:	57                   	push   edi
c0007853:	56                   	push   esi
c0007854:	e8 f7 8e ff ff       	call   c0000750 <strcmp>
c0007859:	83 c4 10             	add    esp,0x10
c000785c:	85 c0                	test   eax,eax
c000785e:	75 ac                	jne    c000780c <KiIsSymlinkRegistered(char const*)+0xd5>
c0007860:	83 ec 0c             	sub    esp,0xc
c0007863:	53                   	push   ebx
c0007864:	e8 45 09 00 00       	call   c00081ae <File::close()>
c0007869:	8b 03                	mov    eax,DWORD PTR [ebx]
c000786b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000786e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007871:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007875:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007879:	83 c4 10             	add    esp,0x10
c000787c:	eb 18                	jmp    c0007896 <KiIsSymlinkRegistered(char const*)+0x15f>
c000787e:	83 ec 0c             	sub    esp,0xc
c0007881:	53                   	push   ebx
c0007882:	e8 27 09 00 00       	call   c00081ae <File::close()>
c0007887:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007889:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000788c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000788f:	83 c4 10             	add    esp,0x10
c0007892:	31 c0                	xor    eax,eax
c0007894:	31 d2                	xor    edx,edx
c0007896:	81 c4 1c 01 00 00    	add    esp,0x11c
c000789c:	5b                   	pop    ebx
c000789d:	5e                   	pop    esi
c000789e:	5f                   	pop    edi
c000789f:	5d                   	pop    ebp
c00078a0:	c3                   	ret    

c00078a1 <KeDereferenceSymlink(char const*, char*)>:
c00078a1:	55                   	push   ebp
c00078a2:	57                   	push   edi
c00078a3:	56                   	push   esi
c00078a4:	53                   	push   ebx
c00078a5:	83 ec 48             	sub    esp,0x48
c00078a8:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00078ac:	56                   	push   esi
c00078ad:	e8 85 fe ff ff       	call   c0007737 <KiIsSymlinkRegistered(char const*)>
c00078b2:	83 c4 10             	add    esp,0x10
c00078b5:	89 c7                	mov    edi,eax
c00078b7:	89 d0                	mov    eax,edx
c00078b9:	09 f8                	or     eax,edi
c00078bb:	75 07                	jne    c00078c4 <KeDereferenceSymlink(char const*, char*)+0x23>
c00078bd:	31 c0                	xor    eax,eax
c00078bf:	e9 7c 01 00 00       	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c00078c4:	83 ec 0c             	sub    esp,0xc
c00078c7:	89 d5                	mov    ebp,edx
c00078c9:	68 14 01 00 00       	push   0x114
c00078ce:	e8 30 7a 00 00       	call   c000f303 <malloc>
c00078d3:	83 c4 0c             	add    esp,0xc
c00078d6:	89 c3                	mov    ebx,eax
c00078d8:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c00078de:	56                   	push   esi
c00078df:	50                   	push   eax
c00078e0:	e8 4d 08 00 00       	call   c0008132 <File::File(char const*, Process*)>
c00078e5:	83 c4 10             	add    esp,0x10
c00078e8:	85 db                	test   ebx,ebx
c00078ea:	0f 84 32 01 00 00    	je     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00078f0:	56                   	push   esi
c00078f1:	56                   	push   esi
c00078f2:	6a 01                	push   0x1
c00078f4:	53                   	push   ebx
c00078f5:	e8 56 08 00 00       	call   c0008150 <File::open(FileOpenMode)>
c00078fa:	83 c4 10             	add    esp,0x10
c00078fd:	85 c0                	test   eax,eax
c00078ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007901:	74 09                	je     c000790c <KeDereferenceSymlink(char const*, char*)+0x6b>
c0007903:	83 ec 0c             	sub    esp,0xc
c0007906:	53                   	push   ebx
c0007907:	e9 10 01 00 00       	jmp    c0007a1c <KeDereferenceSymlink(char const*, char*)+0x17b>
c000790c:	83 ec 0c             	sub    esp,0xc
c000790f:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007913:	56                   	push   esi
c0007914:	8d 54 24 37          	lea    edx,[esp+0x37]
c0007918:	52                   	push   edx
c0007919:	6a 00                	push   0x0
c000791b:	6a 08                	push   0x8
c000791d:	53                   	push   ebx
c000791e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0007921:	83 c4 20             	add    esp,0x20
c0007924:	85 c0                	test   eax,eax
c0007926:	0f 85 e2 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000792c:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c0007931:	0f 85 d7 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007937:	83 ec 0c             	sub    esp,0xc
c000793a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000793c:	56                   	push   esi
c000793d:	8d 54 24 20          	lea    edx,[esp+0x20]
c0007941:	52                   	push   edx
c0007942:	6a 00                	push   0x0
c0007944:	6a 08                	push   0x8
c0007946:	53                   	push   ebx
c0007947:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000794a:	83 c4 20             	add    esp,0x20
c000794d:	85 c0                	test   eax,eax
c000794f:	0f 85 b9 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007955:	83 7c 24 0c 08       	cmp    DWORD PTR [esp+0xc],0x8
c000795a:	0f 85 ae 00 00 00    	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007960:	39 6c 24 14          	cmp    DWORD PTR [esp+0x14],ebp
c0007964:	0f 85 53 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c000796a:	39 7c 24 10          	cmp    DWORD PTR [esp+0x10],edi
c000796e:	0f 85 49 ff ff ff    	jne    c00078bd <KeDereferenceSymlink(char const*, char*)+0x1c>
c0007974:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000797c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0007984:	51                   	push   ecx
c0007985:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0007989:	50                   	push   eax
c000798a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000798e:	50                   	push   eax
c000798f:	53                   	push   ebx
c0007990:	e8 bd 0a 00 00       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0007995:	83 c4 10             	add    esp,0x10
c0007998:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000799d:	75 6f                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c000799f:	31 c9                	xor    ecx,ecx
c00079a1:	bf 0f 00 00 00       	mov    edi,0xf
c00079a6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00079aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00079ae:	39 c7                	cmp    edi,eax
c00079b0:	89 cf                	mov    edi,ecx
c00079b2:	19 d7                	sbb    edi,edx
c00079b4:	73 58                	jae    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079b6:	83 c0 f0             	add    eax,0xfffffff0
c00079b9:	bf ff 00 00 00       	mov    edi,0xff
c00079be:	83 d2 ff             	adc    edx,0xffffffff
c00079c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00079c5:	39 c7                	cmp    edi,eax
c00079c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00079cb:	19 d1                	sbb    ecx,edx
c00079cd:	72 53                	jb     c0007a22 <KeDereferenceSymlink(char const*, char*)+0x181>
c00079cf:	40                   	inc    eax
c00079d0:	52                   	push   edx
c00079d1:	50                   	push   eax
c00079d2:	6a 00                	push   0x0
c00079d4:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c00079d8:	e8 13 8b ff ff       	call   c00004f0 <memset>
c00079dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00079df:	89 34 24             	mov    DWORD PTR [esp],esi
c00079e2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00079e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00079ee:	53                   	push   ebx
c00079ef:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00079f2:	83 c4 20             	add    esp,0x20
c00079f5:	85 c0                	test   eax,eax
c00079f7:	75 15                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c00079f9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079fd:	89 c7                	mov    edi,eax
c00079ff:	c1 ff 1f             	sar    edi,0x1f
c0007a02:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0007a06:	75 06                	jne    c0007a0e <KeDereferenceSymlink(char const*, char*)+0x16d>
c0007a08:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0007a0c:	74 19                	je     c0007a27 <KeDereferenceSymlink(char const*, char*)+0x186>
c0007a0e:	83 ec 0c             	sub    esp,0xc
c0007a11:	53                   	push   ebx
c0007a12:	e8 97 07 00 00       	call   c00081ae <File::close()>
c0007a17:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a19:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a1f:	83 c4 10             	add    esp,0x10
c0007a22:	83 c8 ff             	or     eax,0xffffffff
c0007a25:	eb 19                	jmp    c0007a40 <KeDereferenceSymlink(char const*, char*)+0x19f>
c0007a27:	83 ec 0c             	sub    esp,0xc
c0007a2a:	53                   	push   ebx
c0007a2b:	e8 7e 07 00 00       	call   c00081ae <File::close()>
c0007a30:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a35:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007a38:	83 c4 10             	add    esp,0x10
c0007a3b:	b8 01 00 00 00       	mov    eax,0x1
c0007a40:	83 c4 3c             	add    esp,0x3c
c0007a43:	5b                   	pop    ebx
c0007a44:	5e                   	pop    esi
c0007a45:	5f                   	pop    edi
c0007a46:	5d                   	pop    ebp
c0007a47:	c3                   	ret    

c0007a48 <KeCreateSymlink(char const*, char const*)>:
c0007a48:	55                   	push   ebp
c0007a49:	57                   	push   edi
c0007a4a:	56                   	push   esi
c0007a4b:	53                   	push   ebx
c0007a4c:	83 ec 38             	sub    esp,0x38
c0007a4f:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0007a53:	68 14 01 00 00       	push   0x114
c0007a58:	e8 a6 78 00 00       	call   c000f303 <malloc>
c0007a5d:	6a 00                	push   0x0
c0007a5f:	89 c3                	mov    ebx,eax
c0007a61:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0007a67:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a6b:	50                   	push   eax
c0007a6c:	e8 c3 05 00 00       	call   c0008034 <File::File(char const*, Process*, bool)>
c0007a71:	83 c4 20             	add    esp,0x20
c0007a74:	b8 01 00 00 00       	mov    eax,0x1
c0007a79:	85 db                	test   ebx,ebx
c0007a7b:	0f 84 fb 00 00 00    	je     c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007a81:	52                   	push   edx
c0007a82:	52                   	push   edx
c0007a83:	6a 12                	push   0x12
c0007a85:	53                   	push   ebx
c0007a86:	e8 c5 06 00 00       	call   c0008150 <File::open(FileOpenMode)>
c0007a8b:	83 c4 10             	add    esp,0x10
c0007a8e:	85 c0                	test   eax,eax
c0007a90:	74 0b                	je     c0007a9d <KeCreateSymlink(char const*, char const*)+0x55>
c0007a92:	83 ec 0c             	sub    esp,0xc
c0007a95:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007a97:	53                   	push   ebx
c0007a98:	e9 d4 00 00 00       	jmp    c0007b71 <KeCreateSymlink(char const*, char const*)+0x129>
c0007a9d:	8d 7c 24 17          	lea    edi,[esp+0x17]
c0007aa1:	be ad 24 02 c0       	mov    esi,0xc00224ad
c0007aa6:	b9 09 00 00 00       	mov    ecx,0x9
c0007aab:	fc                   	cld    
c0007aac:	83 ec 0c             	sub    esp,0xc
c0007aaf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007ab1:	8d 74 24 10          	lea    esi,[esp+0x10]
c0007ab5:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007ab7:	56                   	push   esi
c0007ab8:	8d 54 24 27          	lea    edx,[esp+0x27]
c0007abc:	52                   	push   edx
c0007abd:	6a 00                	push   0x0
c0007abf:	6a 08                	push   0x8
c0007ac1:	53                   	push   ebx
c0007ac2:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007ac5:	83 c4 20             	add    esp,0x20
c0007ac8:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007acd:	0f 85 90 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007ad3:	85 c0                	test   eax,eax
c0007ad5:	0f 85 88 00 00 00    	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007adb:	e8 05 fa ff ff       	call   c00074e5 <KiCreateSymlinkID()>
c0007ae0:	83 ec 0c             	sub    esp,0xc
c0007ae3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0007ae7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0007aeb:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007aed:	56                   	push   esi
c0007aee:	8d 54 24 18          	lea    edx,[esp+0x18]
c0007af2:	52                   	push   edx
c0007af3:	6a 00                	push   0x0
c0007af5:	6a 08                	push   0x8
c0007af7:	53                   	push   ebx
c0007af8:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0007afb:	83 c4 20             	add    esp,0x20
c0007afe:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c0007b03:	75 5e                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b05:	85 c0                	test   eax,eax
c0007b07:	75 5a                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b09:	83 ec 0c             	sub    esp,0xc
c0007b0c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b0e:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0007b11:	55                   	push   ebp
c0007b12:	e8 59 8a ff ff       	call   c0000570 <strlen>
c0007b17:	89 34 24             	mov    DWORD PTR [esp],esi
c0007b1a:	31 d2                	xor    edx,edx
c0007b1c:	55                   	push   ebp
c0007b1d:	52                   	push   edx
c0007b1e:	50                   	push   eax
c0007b1f:	53                   	push   ebx
c0007b20:	ff d7                	call   edi
c0007b22:	83 c4 14             	add    esp,0x14
c0007b25:	89 c6                	mov    esi,eax
c0007b27:	55                   	push   ebp
c0007b28:	e8 43 8a ff ff       	call   c0000570 <strlen>
c0007b2d:	83 c4 10             	add    esp,0x10
c0007b30:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c0007b34:	75 2d                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b36:	85 f6                	test   esi,esi
c0007b38:	75 29                	jne    c0007b63 <KeCreateSymlink(char const*, char const*)+0x11b>
c0007b3a:	50                   	push   eax
c0007b3b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b3f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007b43:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0007b47:	e8 06 fa ff ff       	call   c0007552 <KeRegisterSymlink(char const*, unsigned long long)>
c0007b4c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b4f:	e8 5a 06 00 00       	call   c00081ae <File::close()>
c0007b54:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b59:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b5c:	83 c4 10             	add    esp,0x10
c0007b5f:	31 c0                	xor    eax,eax
c0007b61:	eb 19                	jmp    c0007b7c <KeCreateSymlink(char const*, char const*)+0x134>
c0007b63:	83 ec 0c             	sub    esp,0xc
c0007b66:	53                   	push   ebx
c0007b67:	e8 42 06 00 00       	call   c00081ae <File::close()>
c0007b6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0007b6e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007b71:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0007b74:	83 c4 10             	add    esp,0x10
c0007b77:	b8 01 00 00 00       	mov    eax,0x1
c0007b7c:	83 c4 2c             	add    esp,0x2c
c0007b7f:	5b                   	pop    ebx
c0007b80:	5e                   	pop    esi
c0007b81:	5f                   	pop    edi
c0007b82:	5d                   	pop    ebp
c0007b83:	c3                   	ret    

c0007b84 <File::read(unsigned long long, void*, int*)>:
c0007b84:	53                   	push   ebx
c0007b85:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007b89:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007b8d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007b94:	83 f8 19             	cmp    eax,0x19
c0007b97:	77 35                	ja     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007b99:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007ba0:	85 c0                	test   eax,eax
c0007ba2:	74 2a                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007ba4:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007baa:	85 c0                	test   eax,eax
c0007bac:	74 20                	je     c0007bce <File::read(unsigned long long, void*, int*)+0x4a>
c0007bae:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007bb2:	74 21                	je     c0007bd5 <File::read(unsigned long long, void*, int*)+0x51>
c0007bb4:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007bb6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007bba:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007bc0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007bc4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007bc8:	5b                   	pop    ebx
c0007bc9:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0007bcc:	ff e0                	jmp    eax
c0007bce:	b8 0b 00 00 00       	mov    eax,0xb
c0007bd3:	eb 05                	jmp    c0007bda <File::read(unsigned long long, void*, int*)+0x56>
c0007bd5:	b8 05 00 00 00       	mov    eax,0x5
c0007bda:	5b                   	pop    ebx
c0007bdb:	c3                   	ret    

c0007bdc <File::write(unsigned long long, void*, int*)>:
c0007bdc:	53                   	push   ebx
c0007bdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007be1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007be5:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007bec:	83 f8 19             	cmp    eax,0x19
c0007bef:	77 35                	ja     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bf1:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007bf8:	85 c0                	test   eax,eax
c0007bfa:	74 2a                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007bfc:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c02:	85 c0                	test   eax,eax
c0007c04:	74 20                	je     c0007c26 <File::write(unsigned long long, void*, int*)+0x4a>
c0007c06:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c0a:	74 21                	je     c0007c2d <File::write(unsigned long long, void*, int*)+0x51>
c0007c0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c0e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c12:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c18:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c1c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c20:	5b                   	pop    ebx
c0007c21:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0007c24:	ff e0                	jmp    eax
c0007c26:	b8 0b 00 00 00       	mov    eax,0xb
c0007c2b:	eb 05                	jmp    c0007c32 <File::write(unsigned long long, void*, int*)+0x56>
c0007c2d:	b8 05 00 00 00       	mov    eax,0x5
c0007c32:	5b                   	pop    ebx
c0007c33:	c3                   	ret    

c0007c34 <Directory::read(unsigned long long, void*, int*)>:
c0007c34:	53                   	push   ebx
c0007c35:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007c39:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0007c3d:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0007c44:	83 f8 19             	cmp    eax,0x19
c0007c47:	77 35                	ja     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c49:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0007c50:	85 c0                	test   eax,eax
c0007c52:	74 2a                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c54:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0007c5a:	85 c0                	test   eax,eax
c0007c5c:	74 20                	je     c0007c7e <Directory::read(unsigned long long, void*, int*)+0x4a>
c0007c5e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0007c62:	74 21                	je     c0007c85 <Directory::read(unsigned long long, void*, int*)+0x51>
c0007c64:	8b 08                	mov    ecx,DWORD PTR [eax]
c0007c66:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0007c6a:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0007c70:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007c74:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0007c78:	5b                   	pop    ebx
c0007c79:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c0007c7c:	ff e0                	jmp    eax
c0007c7e:	b8 0b 00 00 00       	mov    eax,0xb
c0007c83:	eb 05                	jmp    c0007c8a <Directory::read(unsigned long long, void*, int*)+0x56>
c0007c85:	b8 05 00 00 00       	mov    eax,0x5
c0007c8a:	5b                   	pop    ebx
c0007c8b:	c3                   	ret    

c0007c8c <Directory::write(unsigned long long, void*, int*)>:
c0007c8c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c90:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0007c97:	b8 0b 00 00 00       	mov    eax,0xb
c0007c9c:	83 fa 19             	cmp    edx,0x19
c0007c9f:	77 18                	ja     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007ca1:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0007ca8:	85 d2                	test   edx,edx
c0007caa:	74 0d                	je     c0007cb9 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0007cac:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c0007cb3:	19 c0                	sbb    eax,eax
c0007cb5:	83 e0 0a             	and    eax,0xa
c0007cb8:	40                   	inc    eax
c0007cb9:	c3                   	ret    

c0007cba <File::isAtty()>:
c0007cba:	31 c0                	xor    eax,eax
c0007cbc:	c3                   	ret    
c0007cbd:	90                   	nop

c0007cbe <Directory::isAtty()>:
c0007cbe:	31 c0                	xor    eax,eax
c0007cc0:	c3                   	ret    
c0007cc1:	90                   	nop

c0007cc2 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0007cc2:	b8 0a 00 00 00       	mov    eax,0xa
c0007cc7:	c3                   	ret    

c0007cc8 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0007cc8:	b8 0a 00 00 00       	mov    eax,0xa
c0007ccd:	c3                   	ret    

c0007cce <Filesystem::allocateSwapfile(char const*, int)>:
c0007cce:	31 c0                	xor    eax,eax
c0007cd0:	31 d2                	xor    edx,edx
c0007cd2:	c3                   	ret    
c0007cd3:	90                   	nop

c0007cd4 <File::~File()>:
c0007cd4:	83 ec 0c             	sub    esp,0xc
c0007cd7:	ba 84 25 02 c0       	mov    edx,0xc0022584
c0007cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce0:	89 10                	mov    DWORD PTR [eax],edx
c0007ce2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ce6:	83 ec 0c             	sub    esp,0xc
c0007ce9:	50                   	push   eax
c0007cea:	e8 ef aa 00 00       	call   c00127de <UnixFile::~UnixFile()>
c0007cef:	83 c4 10             	add    esp,0x10
c0007cf2:	90                   	nop
c0007cf3:	83 c4 0c             	add    esp,0xc
c0007cf6:	c3                   	ret    
c0007cf7:	90                   	nop

c0007cf8 <File::~File()>:
c0007cf8:	83 ec 0c             	sub    esp,0xc
c0007cfb:	83 ec 0c             	sub    esp,0xc
c0007cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d02:	e8 cd ff ff ff       	call   c0007cd4 <File::~File()>
c0007d07:	83 c4 10             	add    esp,0x10
c0007d0a:	83 ec 08             	sub    esp,0x8
c0007d0d:	68 14 01 00 00       	push   0x114
c0007d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d16:	e8 70 4c 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c0007d1b:	83 c4 10             	add    esp,0x10
c0007d1e:	83 c4 0c             	add    esp,0xc
c0007d21:	c3                   	ret    

c0007d22 <Directory::~Directory()>:
c0007d22:	83 ec 0c             	sub    esp,0xc
c0007d25:	ba a0 25 02 c0       	mov    edx,0xc00225a0
c0007d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d2e:	89 10                	mov    DWORD PTR [eax],edx
c0007d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d34:	83 ec 0c             	sub    esp,0xc
c0007d37:	50                   	push   eax
c0007d38:	e8 a1 aa 00 00       	call   c00127de <UnixFile::~UnixFile()>
c0007d3d:	83 c4 10             	add    esp,0x10
c0007d40:	90                   	nop
c0007d41:	83 c4 0c             	add    esp,0xc
c0007d44:	c3                   	ret    
c0007d45:	90                   	nop

c0007d46 <Directory::~Directory()>:
c0007d46:	83 ec 0c             	sub    esp,0xc
c0007d49:	83 ec 0c             	sub    esp,0xc
c0007d4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d50:	e8 cd ff ff ff       	call   c0007d22 <Directory::~Directory()>
c0007d55:	83 c4 10             	add    esp,0x10
c0007d58:	83 ec 08             	sub    esp,0x8
c0007d5b:	68 14 01 00 00       	push   0x114
c0007d60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007d64:	e8 22 4c 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c0007d69:	83 c4 10             	add    esp,0x10
c0007d6c:	83 c4 0c             	add    esp,0xc
c0007d6f:	c3                   	ret    

c0007d70 <Filesystem::Filesystem()>:
c0007d70:	ba 18 25 02 c0       	mov    edx,0xc0022518
c0007d75:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d79:	89 10                	mov    DWORD PTR [eax],edx
c0007d7b:	8b 15 04 a3 02 c0    	mov    edx,DWORD PTR ds:0xc002a304
c0007d81:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d85:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0007d88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d8c:	a3 04 a3 02 c0       	mov    ds:0xc002a304,eax
c0007d91:	90                   	nop
c0007d92:	c3                   	ret    
c0007d93:	90                   	nop

c0007d94 <Filesystem::~Filesystem()>:
c0007d94:	ba 18 25 02 c0       	mov    edx,0xc0022518
c0007d99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007d9d:	89 10                	mov    DWORD PTR [eax],edx
c0007d9f:	90                   	nop
c0007da0:	c3                   	ret    
c0007da1:	90                   	nop

c0007da2 <Filesystem::~Filesystem()>:
c0007da2:	83 ec 0c             	sub    esp,0xc
c0007da5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0007da9:	e8 e6 ff ff ff       	call   c0007d94 <Filesystem::~Filesystem()>
c0007dae:	83 c4 04             	add    esp,0x4
c0007db1:	83 ec 08             	sub    esp,0x8
c0007db4:	6a 08                	push   0x8
c0007db6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007dba:	e8 cc 4b 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c0007dbf:	83 c4 10             	add    esp,0x10
c0007dc2:	83 c4 0c             	add    esp,0xc
c0007dc5:	c3                   	ret    

c0007dc6 <Fs::getcwd(Process*, char*, int)>:
c0007dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007dca:	31 c0                	xor    eax,eax
c0007dcc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0007dcf:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0007dd3:	7d 15                	jge    c0007dea <Fs::getcwd(Process*, char*, int)+0x24>
c0007dd5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007dd9:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0007de0:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0007de3:	84 c9                	test   cl,cl
c0007de5:	74 06                	je     c0007ded <Fs::getcwd(Process*, char*, int)+0x27>
c0007de7:	40                   	inc    eax
c0007de8:	eb e2                	jmp    c0007dcc <Fs::getcwd(Process*, char*, int)+0x6>
c0007dea:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0007ded:	31 c0                	xor    eax,eax
c0007def:	c3                   	ret    

c0007df0 <Fs::initVFS()>:
c0007df0:	83 ec 18             	sub    esp,0x18
c0007df3:	6a 08                	push   0x8
c0007df5:	e8 09 75 00 00       	call   c000f303 <malloc>
c0007dfa:	89 04 24             	mov    DWORD PTR [esp],eax
c0007dfd:	e8 5a 34 01 00       	call   c001b25c <FAT::FAT()>
c0007e02:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007e09:	e8 f5 74 00 00       	call   c000f303 <malloc>
c0007e0e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007e11:	e8 72 43 01 00       	call   c001c188 <ISO9660::ISO9660()>
c0007e16:	83 c4 1c             	add    esp,0x1c
c0007e19:	c3                   	ret    

c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>:
c0007e1a:	55                   	push   ebp
c0007e1b:	57                   	push   edi
c0007e1c:	56                   	push   esi
c0007e1d:	53                   	push   ebx
c0007e1e:	81 ec 10 04 00 00    	sub    esp,0x410
c0007e24:	8b ac 24 28 04 00 00 	mov    ebp,DWORD PTR [esp+0x428]
c0007e2b:	8b b4 24 24 04 00 00 	mov    esi,DWORD PTR [esp+0x424]
c0007e32:	0f b6 9c 24 30 04 00 00 	movzx  ebx,BYTE PTR [esp+0x430]
c0007e3a:	68 00 04 00 00       	push   0x400
c0007e3f:	6a 00                	push   0x0
c0007e41:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0007e45:	57                   	push   edi
c0007e46:	e8 a5 86 ff ff       	call   c00004f0 <memset>
c0007e4b:	83 c4 10             	add    esp,0x10
c0007e4e:	80 7d 01 3a          	cmp    BYTE PTR [ebp+0x1],0x3a
c0007e52:	75 0b                	jne    c0007e5f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x45>
c0007e54:	50                   	push   eax
c0007e55:	50                   	push   eax
c0007e56:	55                   	push   ebp
c0007e57:	57                   	push   edi
c0007e58:	e8 e3 87 ff ff       	call   c0000640 <strcpy>
c0007e5d:	eb 51                	jmp    c0007eb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x96>
c0007e5f:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0007e63:	83 f8 5c             	cmp    eax,0x5c
c0007e66:	74 05                	je     c0007e6d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x53>
c0007e68:	83 f8 2f             	cmp    eax,0x2f
c0007e6b:	75 1e                	jne    c0007e8b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x71>
c0007e6d:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0007e74:	8a 00                	mov    al,BYTE PTR [eax]
c0007e76:	3c 60                	cmp    al,0x60
c0007e78:	7e 03                	jle    c0007e7d <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x63>
c0007e7a:	83 e8 20             	sub    eax,0x20
c0007e7d:	88 04 24             	mov    BYTE PTR [esp],al
c0007e80:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007e87:	50                   	push   eax
c0007e88:	50                   	push   eax
c0007e89:	eb 1e                	jmp    c0007ea9 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x8f>
c0007e8b:	50                   	push   eax
c0007e8c:	50                   	push   eax
c0007e8d:	ff b4 24 30 04 00 00 	push   DWORD PTR [esp+0x430]
c0007e94:	57                   	push   edi
c0007e95:	e8 a6 87 ff ff       	call   c0000640 <strcpy>
c0007e9a:	58                   	pop    eax
c0007e9b:	5a                   	pop    edx
c0007e9c:	68 a2 40 02 c0       	push   0xc00240a2
c0007ea1:	57                   	push   edi
c0007ea2:	e8 99 89 ff ff       	call   c0000840 <strcat>
c0007ea7:	59                   	pop    ecx
c0007ea8:	58                   	pop    eax
c0007ea9:	55                   	push   ebp
c0007eaa:	57                   	push   edi
c0007eab:	e8 90 89 ff ff       	call   c0000840 <strcat>
c0007eb0:	83 c4 10             	add    esp,0x10
c0007eb3:	8a 04 24             	mov    al,BYTE PTR [esp]
c0007eb6:	3c 60                	cmp    al,0x60
c0007eb8:	7e 03                	jle    c0007ebd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xa3>
c0007eba:	83 e8 20             	sub    eax,0x20
c0007ebd:	88 04 24             	mov    BYTE PTR [esp],al
c0007ec0:	88 06                	mov    BYTE PTR [esi],al
c0007ec2:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0007ec9:	66 c7 46 01 3a 2f    	mov    WORD PTR [esi+0x1],0x2f3a
c0007ecf:	c6 46 03 00          	mov    BYTE PTR [esi+0x3],0x0
c0007ed3:	bf 03 00 00 00       	mov    edi,0x3
c0007ed8:	b8 03 00 00 00       	mov    eax,0x3
c0007edd:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c0007ee1:	89 e9                	mov    ecx,ebp
c0007ee3:	85 ed                	test   ebp,ebp
c0007ee5:	0f 84 97 00 00 00    	je     c0007f82 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x168>
c0007eeb:	8d 57 01             	lea    edx,[edi+0x1]
c0007eee:	83 fd 5c             	cmp    ebp,0x5c
c0007ef1:	74 05                	je     c0007ef8 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xde>
c0007ef3:	83 fd 2f             	cmp    ebp,0x2f
c0007ef6:	75 12                	jne    c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007ef8:	89 c5                	mov    ebp,eax
c0007efa:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007eff:	74 09                	je     c0007f0a <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xf0>
c0007f01:	40                   	inc    eax
c0007f02:	c6 04 2e 2f          	mov    BYTE PTR [esi+ebp*1],0x2f
c0007f06:	89 d7                	mov    edi,edx
c0007f08:	eb d3                	jmp    c0007edd <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xc3>
c0007f0a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0007f0f:	0f be e9             	movsx  ebp,cl
c0007f12:	75 5e                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f14:	83 fd 2e             	cmp    ebp,0x2e
c0007f17:	75 59                	jne    c0007f72 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x158>
c0007f19:	80 3c 14 2e          	cmp    BYTE PTR [esp+edx*1],0x2e
c0007f1d:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c0007f22:	74 18                	je     c0007f3c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x122>
c0007f24:	83 fd 2e             	cmp    ebp,0x2e
c0007f27:	74 53                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f29:	89 fa                	mov    edx,edi
c0007f2b:	42                   	inc    edx
c0007f2c:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f30:	83 f9 2f             	cmp    ecx,0x2f
c0007f33:	74 f6                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f35:	83 f9 5c             	cmp    ecx,0x5c
c0007f38:	74 f1                	je     c0007f2b <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x111>
c0007f3a:	eb ca                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f3c:	83 fd 2e             	cmp    ebp,0x2e
c0007f3f:	74 3b                	je     c0007f7c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x162>
c0007f41:	83 f8 03             	cmp    eax,0x3
c0007f44:	74 c0                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f46:	42                   	inc    edx
c0007f47:	0f be 0c 14          	movsx  ecx,BYTE PTR [esp+edx*1]
c0007f4b:	83 f9 5c             	cmp    ecx,0x5c
c0007f4e:	74 f6                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f50:	83 f9 2f             	cmp    ecx,0x2f
c0007f53:	74 f1                	je     c0007f46 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x12c>
c0007f55:	48                   	dec    eax
c0007f56:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f5a:	75 06                	jne    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f5c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f60:	eb f3                	jmp    c0007f55 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x13b>
c0007f62:	80 3c 06 2f          	cmp    BYTE PTR [esi+eax*1],0x2f
c0007f66:	74 07                	je     c0007f6f <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x155>
c0007f68:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f6c:	48                   	dec    eax
c0007f6d:	eb f3                	jmp    c0007f62 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x148>
c0007f6f:	40                   	inc    eax
c0007f70:	eb 94                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f72:	83 fd 5c             	cmp    ebp,0x5c
c0007f75:	74 8f                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f77:	83 fd 2f             	cmp    ebp,0x2f
c0007f7a:	74 8a                	je     c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f7c:	88 0c 06             	mov    BYTE PTR [esi+eax*1],cl
c0007f7f:	40                   	inc    eax
c0007f80:	eb 84                	jmp    c0007f06 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0xec>
c0007f82:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0007f86:	83 ec 0c             	sub    esp,0xc
c0007f89:	56                   	push   esi
c0007f8a:	e8 e1 85 ff ff       	call   c0000570 <strlen>
c0007f8f:	83 c4 10             	add    esp,0x10
c0007f92:	80 7c 06 ff 2e       	cmp    BYTE PTR [esi+eax*1-0x1],0x2e
c0007f97:	74 17                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007f99:	83 ec 0c             	sub    esp,0xc
c0007f9c:	56                   	push   esi
c0007f9d:	e8 ce 85 ff ff       	call   c0000570 <strlen>
c0007fa2:	83 c4 10             	add    esp,0x10
c0007fa5:	80 7c 06 ff 2f       	cmp    BYTE PTR [esi+eax*1-0x1],0x2f
c0007faa:	74 04                	je     c0007fb0 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x196>
c0007fac:	31 ff                	xor    edi,edi
c0007fae:	eb 5c                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0007fb0:	83 ec 0c             	sub    esp,0xc
c0007fb3:	56                   	push   esi
c0007fb4:	e8 b7 85 ff ff       	call   c0000570 <strlen>
c0007fb9:	83 c4 10             	add    esp,0x10
c0007fbc:	80 7c 06 fe 3a       	cmp    BYTE PTR [esi+eax*1-0x2],0x3a
c0007fc1:	74 e9                	je     c0007fac <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x192>
c0007fc3:	83 ec 0c             	sub    esp,0xc
c0007fc6:	56                   	push   esi
c0007fc7:	e8 a4 85 ff ff       	call   c0000570 <strlen>
c0007fcc:	83 c4 10             	add    esp,0x10
c0007fcf:	c6 44 06 ff 00       	mov    BYTE PTR [esi+eax*1-0x1],0x0
c0007fd4:	eb b0                	jmp    c0007f86 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x16c>
c0007fd6:	52                   	push   edx
c0007fd7:	52                   	push   edx
c0007fd8:	56                   	push   esi
c0007fd9:	8d 6c 24 0c          	lea    ebp,[esp+0xc]
c0007fdd:	55                   	push   ebp
c0007fde:	e8 5d 86 ff ff       	call   c0000640 <strcpy>
c0007fe3:	59                   	pop    ecx
c0007fe4:	58                   	pop    eax
c0007fe5:	56                   	push   esi
c0007fe6:	55                   	push   ebp
c0007fe7:	e8 b5 f8 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0007fec:	83 c4 10             	add    esp,0x10
c0007fef:	48                   	dec    eax
c0007ff0:	75 37                	jne    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0007ff2:	50                   	push   eax
c0007ff3:	56                   	push   esi
c0007ff4:	55                   	push   ebp
c0007ff5:	68 b6 24 02 c0       	push   0xc00224b6
c0007ffa:	e8 65 ef ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0007fff:	83 c4 10             	add    esp,0x10
c0008002:	8d 47 01             	lea    eax,[edi+0x1]
c0008005:	83 ff 14             	cmp    edi,0x14
c0008008:	74 08                	je     c0008012 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f8>
c000800a:	89 c7                	mov    edi,eax
c000800c:	85 db                	test   ebx,ebx
c000800e:	75 c6                	jne    c0007fd6 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1bc>
c0008010:	eb 17                	jmp    c0008029 <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x20f>
c0008012:	83 ec 0c             	sub    esp,0xc
c0008015:	bf 15 00 00 00       	mov    edi,0x15
c000801a:	68 d1 24 02 c0       	push   0xc00224d1
c000801f:	e8 26 76 00 00       	call   c000f64a <KePanic(char const*)>
c0008024:	83 c4 10             	add    esp,0x10
c0008027:	eb e3                	jmp    c000800c <Fs::standardiseFiles(char*, char const*, char const*, bool)+0x1f2>
c0008029:	81 c4 0c 04 00 00    	add    esp,0x40c
c000802f:	5b                   	pop    ebx
c0008030:	5e                   	pop    esi
c0008031:	5f                   	pop    edi
c0008032:	5d                   	pop    ebp
c0008033:	c3                   	ret    

c0008034 <File::File(char const*, Process*, bool)>:
c0008034:	83 ec 1c             	sub    esp,0x1c
c0008037:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000803b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000803f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008043:	83 ec 08             	sub    esp,0x8
c0008046:	6a 00                	push   0x0
c0008048:	50                   	push   eax
c0008049:	e8 aa a5 00 00       	call   c00125f8 <UnixFile::UnixFile(int)>
c000804e:	83 c4 10             	add    esp,0x10
c0008051:	ba 84 25 02 c0       	mov    edx,0xc0022584
c0008056:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000805a:	89 10                	mov    DWORD PTR [eax],edx
c000805c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0008061:	85 c0                	test   eax,eax
c0008063:	74 0f                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008065:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c000806a:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c000806e:	74 04                	je     c0008074 <File::File(char const*, Process*, bool)+0x40>
c0008070:	b0 01                	mov    al,0x1
c0008072:	eb 02                	jmp    c0008076 <File::File(char const*, Process*, bool)+0x42>
c0008074:	b0 00                	mov    al,0x0
c0008076:	0f b6 c0             	movzx  eax,al
c0008079:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807d:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c0008083:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008087:	83 c2 0d             	add    edx,0xd
c000808a:	50                   	push   eax
c000808b:	51                   	push   ecx
c000808c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0008090:	52                   	push   edx
c0008091:	e8 84 fd ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0008096:	83 c4 10             	add    esp,0x10
c0008099:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000809d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00080a0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00080a4:	83 c2 0d             	add    edx,0xd
c00080a7:	83 ec 04             	sub    esp,0x4
c00080aa:	50                   	push   eax
c00080ab:	52                   	push   edx
c00080ac:	68 f7 24 02 c0       	push   0xc00224f7
c00080b1:	e8 ae ee ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00080b6:	83 c4 10             	add    esp,0x10
c00080b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080bd:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00080c0:	83 e8 41             	sub    eax,0x41
c00080c3:	88 c2                	mov    dl,al
c00080c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080c9:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00080cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080d3:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00080d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080db:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080e1:	0f b6 c0             	movzx  eax,al
c00080e4:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00080eb:	85 c0                	test   eax,eax
c00080ed:	74 3e                	je     c000812d <File::File(char const*, Process*, bool)+0xf9>
c00080ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00080f3:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00080f9:	0f b6 c0             	movzx  eax,al
c00080fc:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008103:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0008109:	85 c0                	test   eax,eax
c000810b:	75 20                	jne    c000812d <File::File(char const*, Process*, bool)+0xf9>
c000810d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008111:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008117:	0f b6 c0             	movzx  eax,al
c000811a:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008121:	83 ec 0c             	sub    esp,0xc
c0008124:	50                   	push   eax
c0008125:	e8 fc 1e 00 00       	call   c000a026 <LogicalDisk::mount()>
c000812a:	83 c4 10             	add    esp,0x10
c000812d:	90                   	nop
c000812e:	83 c4 1c             	add    esp,0x1c
c0008131:	c3                   	ret    

c0008132 <File::File(char const*, Process*)>:
c0008132:	83 ec 0c             	sub    esp,0xc
c0008135:	6a 01                	push   0x1
c0008137:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000813f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008143:	e8 ec fe ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0008148:	83 c4 10             	add    esp,0x10
c000814b:	90                   	nop
c000814c:	83 c4 0c             	add    esp,0xc
c000814f:	c3                   	ret    

c0008150 <File::open(FileOpenMode)>:
c0008150:	53                   	push   ebx
c0008151:	b8 0b 00 00 00       	mov    eax,0xb
c0008156:	83 ec 08             	sub    esp,0x8
c0008159:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000815d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0008164:	83 fa 19             	cmp    edx,0x19
c0008167:	77 40                	ja     c00081a9 <File::open(FileOpenMode)+0x59>
c0008169:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008170:	85 d2                	test   edx,edx
c0008172:	74 35                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c0008174:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000817a:	85 d2                	test   edx,edx
c000817c:	74 2b                	je     c00081a9 <File::open(FileOpenMode)+0x59>
c000817e:	b8 06 00 00 00       	mov    eax,0x6
c0008183:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008187:	75 20                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c0008189:	8b 02                	mov    eax,DWORD PTR [edx]
c000818b:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008191:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008195:	51                   	push   ecx
c0008196:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008199:	51                   	push   ecx
c000819a:	52                   	push   edx
c000819b:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000819e:	83 c4 10             	add    esp,0x10
c00081a1:	85 c0                	test   eax,eax
c00081a3:	75 04                	jne    c00081a9 <File::open(FileOpenMode)+0x59>
c00081a5:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c00081a9:	83 c4 08             	add    esp,0x8
c00081ac:	5b                   	pop    ebx
c00081ad:	c3                   	ret    

c00081ae <File::close()>:
c00081ae:	53                   	push   ebx
c00081af:	b8 0b 00 00 00       	mov    eax,0xb
c00081b4:	83 ec 08             	sub    esp,0x8
c00081b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00081bb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00081c2:	83 f9 19             	cmp    ecx,0x19
c00081c5:	77 41                	ja     c0008208 <File::close()+0x5a>
c00081c7:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c00081ce:	85 db                	test   ebx,ebx
c00081d0:	74 36                	je     c0008208 <File::close()+0x5a>
c00081d2:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c00081d9:	74 2d                	je     c0008208 <File::close()+0x5a>
c00081db:	b8 05 00 00 00       	mov    eax,0x5
c00081e0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00081e4:	74 22                	je     c0008208 <File::close()+0x5a>
c00081e6:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c00081ea:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c00081f1:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00081f7:	53                   	push   ebx
c00081f8:	53                   	push   ebx
c00081f9:	8b 08                	mov    ecx,DWORD PTR [eax]
c00081fb:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008201:	50                   	push   eax
c0008202:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c0008205:	83 c4 10             	add    esp,0x10
c0008208:	83 c4 08             	add    esp,0x8
c000820b:	5b                   	pop    ebx
c000820c:	c3                   	ret    
c000820d:	90                   	nop

c000820e <File::seek(unsigned long long)>:
c000820e:	56                   	push   esi
c000820f:	53                   	push   ebx
c0008210:	b8 0b 00 00 00       	mov    eax,0xb
c0008215:	51                   	push   ecx
c0008216:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000821a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000821e:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0008225:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0008229:	83 fa 19             	cmp    edx,0x19
c000822c:	77 31                	ja     c000825f <File::seek(unsigned long long)+0x51>
c000822e:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c0008235:	85 d2                	test   edx,edx
c0008237:	74 26                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008239:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000823f:	85 d2                	test   edx,edx
c0008241:	74 1c                	je     c000825f <File::seek(unsigned long long)+0x51>
c0008243:	b8 05 00 00 00       	mov    eax,0x5
c0008248:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000824c:	74 11                	je     c000825f <File::seek(unsigned long long)+0x51>
c000824e:	8b 02                	mov    eax,DWORD PTR [edx]
c0008250:	53                   	push   ebx
c0008251:	51                   	push   ecx
c0008252:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0008258:	52                   	push   edx
c0008259:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000825c:	83 c4 10             	add    esp,0x10
c000825f:	5a                   	pop    edx
c0008260:	5b                   	pop    ebx
c0008261:	5e                   	pop    esi
c0008262:	c3                   	ret    
c0008263:	90                   	nop

c0008264 <File::truncate(unsigned long long)>:
c0008264:	56                   	push   esi
c0008265:	53                   	push   ebx
c0008266:	b8 0b 00 00 00       	mov    eax,0xb
c000826b:	51                   	push   ecx
c000826c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008270:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008274:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000827b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000827f:	83 fa 19             	cmp    edx,0x19
c0008282:	77 31                	ja     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008284:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c000828b:	85 d2                	test   edx,edx
c000828d:	74 26                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c000828f:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008295:	85 d2                	test   edx,edx
c0008297:	74 1c                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c0008299:	b8 05 00 00 00       	mov    eax,0x5
c000829e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00082a2:	74 11                	je     c00082b5 <File::truncate(unsigned long long)+0x51>
c00082a4:	8b 02                	mov    eax,DWORD PTR [edx]
c00082a6:	53                   	push   ebx
c00082a7:	51                   	push   ecx
c00082a8:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00082ae:	52                   	push   edx
c00082af:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00082b2:	83 c4 10             	add    esp,0x10
c00082b5:	5a                   	pop    edx
c00082b6:	5b                   	pop    ebx
c00082b7:	5e                   	pop    esi
c00082b8:	c3                   	ret    
c00082b9:	90                   	nop

c00082ba <File::tell(unsigned long long*)>:
c00082ba:	83 ec 0c             	sub    esp,0xc
c00082bd:	b8 0b 00 00 00       	mov    eax,0xb
c00082c2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00082c6:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00082cd:	83 fa 19             	cmp    edx,0x19
c00082d0:	77 34                	ja     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082d2:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00082d9:	85 d2                	test   edx,edx
c00082db:	74 29                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082dd:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c00082e3:	85 d2                	test   edx,edx
c00082e5:	74 1f                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082e7:	b8 05 00 00 00       	mov    eax,0x5
c00082ec:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00082f0:	74 14                	je     c0008306 <File::tell(unsigned long long*)+0x4c>
c00082f2:	50                   	push   eax
c00082f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00082f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00082f9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00082ff:	52                   	push   edx
c0008300:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0008303:	83 c4 10             	add    esp,0x10
c0008306:	83 c4 0c             	add    esp,0xc
c0008309:	c3                   	ret    

c000830a <File::rewind()>:
c000830a:	83 ec 10             	sub    esp,0x10
c000830d:	6a 00                	push   0x0
c000830f:	6a 00                	push   0x0
c0008311:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008315:	e8 f4 fe ff ff       	call   c000820e <File::seek(unsigned long long)>
c000831a:	83 c4 1c             	add    esp,0x1c
c000831d:	c3                   	ret    

c000831e <File::unlink()>:
c000831e:	83 ec 0c             	sub    esp,0xc
c0008321:	b8 0b 00 00 00       	mov    eax,0xb
c0008326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000832a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008331:	83 f9 19             	cmp    ecx,0x19
c0008334:	77 2f                	ja     c0008365 <File::unlink()+0x47>
c0008336:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000833d:	85 c9                	test   ecx,ecx
c000833f:	74 24                	je     c0008365 <File::unlink()+0x47>
c0008341:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008347:	85 c9                	test   ecx,ecx
c0008349:	74 1a                	je     c0008365 <File::unlink()+0x47>
c000834b:	b8 06 00 00 00       	mov    eax,0x6
c0008350:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008354:	75 0f                	jne    c0008365 <File::unlink()+0x47>
c0008356:	83 c2 0d             	add    edx,0xd
c0008359:	50                   	push   eax
c000835a:	50                   	push   eax
c000835b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000835d:	52                   	push   edx
c000835e:	51                   	push   ecx
c000835f:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0008362:	83 c4 10             	add    esp,0x10
c0008365:	83 c4 0c             	add    esp,0xc
c0008368:	c3                   	ret    
c0008369:	90                   	nop

c000836a <File::rename(char const*)>:
c000836a:	83 ec 0c             	sub    esp,0xc
c000836d:	b8 0b 00 00 00       	mov    eax,0xb
c0008372:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008376:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000837d:	83 f9 19             	cmp    ecx,0x19
c0008380:	77 32                	ja     c00083b4 <File::rename(char const*)+0x4a>
c0008382:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008389:	85 c9                	test   ecx,ecx
c000838b:	74 27                	je     c00083b4 <File::rename(char const*)+0x4a>
c000838d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008393:	85 c9                	test   ecx,ecx
c0008395:	74 1d                	je     c00083b4 <File::rename(char const*)+0x4a>
c0008397:	b8 06 00 00 00       	mov    eax,0x6
c000839c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083a0:	75 12                	jne    c00083b4 <File::rename(char const*)+0x4a>
c00083a2:	83 c2 0d             	add    edx,0xd
c00083a5:	50                   	push   eax
c00083a6:	8b 01                	mov    eax,DWORD PTR [ecx]
c00083a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083ac:	52                   	push   edx
c00083ad:	51                   	push   ecx
c00083ae:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00083b1:	83 c4 10             	add    esp,0x10
c00083b4:	83 c4 0c             	add    esp,0xc
c00083b7:	c3                   	ret    

c00083b8 <File::chfatattr(unsigned char, unsigned char)>:
c00083b8:	57                   	push   edi
c00083b9:	b8 0b 00 00 00       	mov    eax,0xb
c00083be:	56                   	push   esi
c00083bf:	53                   	push   ebx
c00083c0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00083c4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00083c8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00083cf:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00083d3:	83 f9 19             	cmp    ecx,0x19
c00083d6:	77 37                	ja     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083d8:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00083df:	85 c9                	test   ecx,ecx
c00083e1:	74 2c                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083e3:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00083e9:	85 c9                	test   ecx,ecx
c00083eb:	74 22                	je     c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083ed:	b8 06 00 00 00       	mov    eax,0x6
c00083f2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00083f6:	75 17                	jne    c000840f <File::chfatattr(unsigned char, unsigned char)+0x57>
c00083f8:	8b 39                	mov    edi,DWORD PTR [ecx]
c00083fa:	89 f0                	mov    eax,esi
c00083fc:	83 c2 0d             	add    edx,0xd
c00083ff:	0f b6 f0             	movzx  esi,al
c0008402:	0f b6 db             	movzx  ebx,bl
c0008405:	56                   	push   esi
c0008406:	53                   	push   ebx
c0008407:	52                   	push   edx
c0008408:	51                   	push   ecx
c0008409:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000840c:	83 c4 10             	add    esp,0x10
c000840f:	5b                   	pop    ebx
c0008410:	5e                   	pop    esi
c0008411:	5f                   	pop    edi
c0008412:	c3                   	ret    
c0008413:	90                   	nop

c0008414 <File::exists()>:
c0008414:	83 ec 0c             	sub    esp,0xc
c0008417:	31 c0                	xor    eax,eax
c0008419:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000841d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008424:	83 f9 19             	cmp    ecx,0x19
c0008427:	77 24                	ja     c000844d <File::exists()+0x39>
c0008429:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008430:	85 c9                	test   ecx,ecx
c0008432:	74 19                	je     c000844d <File::exists()+0x39>
c0008434:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000843a:	85 c9                	test   ecx,ecx
c000843c:	74 0f                	je     c000844d <File::exists()+0x39>
c000843e:	83 c2 0d             	add    edx,0xd
c0008441:	50                   	push   eax
c0008442:	50                   	push   eax
c0008443:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008445:	52                   	push   edx
c0008446:	51                   	push   ecx
c0008447:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000844a:	83 c4 10             	add    esp,0x10
c000844d:	83 c4 0c             	add    esp,0xc
c0008450:	c3                   	ret    
c0008451:	90                   	nop

c0008452 <File::stat(unsigned long long*, bool*)>:
c0008452:	56                   	push   esi
c0008453:	53                   	push   ebx
c0008454:	50                   	push   eax
c0008455:	b8 0b 00 00 00       	mov    eax,0xb
c000845a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000845e:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008462:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008469:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000846d:	83 f9 19             	cmp    ecx,0x19
c0008470:	77 3d                	ja     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008472:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008479:	85 c9                	test   ecx,ecx
c000847b:	74 32                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c000847d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008483:	85 c9                	test   ecx,ecx
c0008485:	74 28                	je     c00084af <File::stat(unsigned long long*, bool*)+0x5d>
c0008487:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008489:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000848d:	74 13                	je     c00084a2 <File::stat(unsigned long long*, bool*)+0x50>
c000848f:	83 ec 04             	sub    esp,0x4
c0008492:	56                   	push   esi
c0008493:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008499:	51                   	push   ecx
c000849a:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000849d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00084a0:	eb 0a                	jmp    c00084ac <File::stat(unsigned long long*, bool*)+0x5a>
c00084a2:	53                   	push   ebx
c00084a3:	83 c2 0d             	add    edx,0xd
c00084a6:	56                   	push   esi
c00084a7:	52                   	push   edx
c00084a8:	51                   	push   ecx
c00084a9:	ff 50 34             	call   DWORD PTR [eax+0x34]
c00084ac:	83 c4 10             	add    esp,0x10
c00084af:	5a                   	pop    edx
c00084b0:	5b                   	pop    ebx
c00084b1:	5e                   	pop    esi
c00084b2:	c3                   	ret    

c00084b3 <Fs::setcwd(Process*, char*)>:
c00084b3:	55                   	push   ebp
c00084b4:	57                   	push   edi
c00084b5:	56                   	push   esi
c00084b6:	53                   	push   ebx
c00084b7:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00084bd:	8b ac 24 30 02 00 00 	mov    ebp,DWORD PTR [esp+0x230]
c00084c4:	6a 00                	push   0x0
c00084c6:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00084cc:	57                   	push   edi
c00084cd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00084d4:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00084d8:	56                   	push   esi
c00084d9:	e8 3c f9 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00084de:	89 34 24             	mov    DWORD PTR [esp],esi
c00084e1:	e8 8a 80 ff ff       	call   c0000570 <strlen>
c00084e6:	83 c4 10             	add    esp,0x10
c00084e9:	83 f8 02             	cmp    eax,0x2
c00084ec:	77 15                	ja     c0008503 <Fs::setcwd(Process*, char*)+0x50>
c00084ee:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c00084f3:	83 eb 41             	sub    ebx,0x41
c00084f6:	8b 04 9d 80 a7 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5880]
c00084fd:	85 c0                	test   eax,eax
c00084ff:	75 1c                	jne    c000851d <Fs::setcwd(Process*, char*)+0x6a>
c0008501:	eb 2f                	jmp    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008503:	83 ec 0c             	sub    esp,0xc
c0008506:	56                   	push   esi
c0008507:	e8 64 80 ff ff       	call   c0000570 <strlen>
c000850c:	83 c4 10             	add    esp,0x10
c000850f:	83 f8 03             	cmp    eax,0x3
c0008512:	75 57                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c0008514:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c0008519:	75 50                	jne    c000856b <Fs::setcwd(Process*, char*)+0xb8>
c000851b:	eb d1                	jmp    c00084ee <Fs::setcwd(Process*, char*)+0x3b>
c000851d:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c0008524:	75 0c                	jne    c0008532 <Fs::setcwd(Process*, char*)+0x7f>
c0008526:	83 ec 0c             	sub    esp,0xc
c0008529:	50                   	push   eax
c000852a:	e8 f7 1a 00 00       	call   c000a026 <LogicalDisk::mount()>
c000852f:	83 c4 10             	add    esp,0x10
c0008532:	b8 03 00 00 00       	mov    eax,0x3
c0008537:	83 fb 19             	cmp    ebx,0x19
c000853a:	0f 87 c6 00 00 00    	ja     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008540:	8b 14 9d 80 a7 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd5880]
c0008547:	b8 05 00 00 00       	mov    eax,0x5
c000854c:	85 d2                	test   edx,edx
c000854e:	0f 84 b2 00 00 00    	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c0008554:	b8 06 00 00 00       	mov    eax,0x6
c0008559:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c0008560:	0f 85 92 00 00 00    	jne    c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c0008566:	e9 9b 00 00 00       	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c000856b:	83 ec 0c             	sub    esp,0xc
c000856e:	68 14 01 00 00       	push   0x114
c0008573:	e8 8b 6d 00 00       	call   c000f303 <malloc>
c0008578:	83 c4 0c             	add    esp,0xc
c000857b:	89 c3                	mov    ebx,eax
c000857d:	55                   	push   ebp
c000857e:	56                   	push   esi
c000857f:	50                   	push   eax
c0008580:	e8 ad fb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0008585:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000858a:	83 c4 0c             	add    esp,0xc
c000858d:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0008591:	50                   	push   eax
c0008592:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008596:	50                   	push   eax
c0008597:	53                   	push   ebx
c0008598:	e8 b5 fe ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000859d:	83 c4 10             	add    esp,0x10
c00085a0:	83 f8 02             	cmp    eax,0x2
c00085a3:	74 27                	je     c00085cc <Fs::setcwd(Process*, char*)+0x119>
c00085a5:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00085aa:	75 1c                	jne    c00085c8 <Fs::setcwd(Process*, char*)+0x115>
c00085ac:	b8 02 00 00 00       	mov    eax,0x2
c00085b1:	85 db                	test   ebx,ebx
c00085b3:	74 51                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085b5:	83 ec 0c             	sub    esp,0xc
c00085b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085ba:	53                   	push   ebx
c00085bb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085be:	83 c4 10             	add    esp,0x10
c00085c1:	b8 02 00 00 00       	mov    eax,0x2
c00085c6:	eb 3e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085c8:	85 c0                	test   eax,eax
c00085ca:	74 1c                	je     c00085e8 <Fs::setcwd(Process*, char*)+0x135>
c00085cc:	b8 01 00 00 00       	mov    eax,0x1
c00085d1:	85 db                	test   ebx,ebx
c00085d3:	74 31                	je     c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085d5:	83 ec 0c             	sub    esp,0xc
c00085d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085da:	53                   	push   ebx
c00085db:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085de:	83 c4 10             	add    esp,0x10
c00085e1:	b8 01 00 00 00       	mov    eax,0x1
c00085e6:	eb 1e                	jmp    c0008606 <Fs::setcwd(Process*, char*)+0x153>
c00085e8:	85 db                	test   ebx,ebx
c00085ea:	74 0c                	je     c00085f8 <Fs::setcwd(Process*, char*)+0x145>
c00085ec:	83 ec 0c             	sub    esp,0xc
c00085ef:	8b 03                	mov    eax,DWORD PTR [ebx]
c00085f1:	53                   	push   ebx
c00085f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00085f5:	83 c4 10             	add    esp,0x10
c00085f8:	50                   	push   eax
c00085f9:	50                   	push   eax
c00085fa:	56                   	push   esi
c00085fb:	57                   	push   edi
c00085fc:	e8 3f 80 ff ff       	call   c0000640 <strcpy>
c0008601:	83 c4 10             	add    esp,0x10
c0008604:	31 c0                	xor    eax,eax
c0008606:	81 c4 1c 02 00 00    	add    esp,0x21c
c000860c:	5b                   	pop    ebx
c000860d:	5e                   	pop    esi
c000860e:	5f                   	pop    edi
c000860f:	5d                   	pop    ebp
c0008610:	c3                   	ret    
c0008611:	90                   	nop

c0008612 <Directory::Directory(char const*, Process*)>:
c0008612:	83 ec 0c             	sub    esp,0xc
c0008615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008619:	83 ec 08             	sub    esp,0x8
c000861c:	6a 00                	push   0x0
c000861e:	50                   	push   eax
c000861f:	e8 d4 9f 00 00       	call   c00125f8 <UnixFile::UnixFile(int)>
c0008624:	83 c4 10             	add    esp,0x10
c0008627:	ba a0 25 02 c0       	mov    edx,0xc00225a0
c000862c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008630:	89 10                	mov    DWORD PTR [eax],edx
c0008632:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0008637:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000863b:	0f 95 c0             	setne  al
c000863e:	0f b6 c0             	movzx  eax,al
c0008641:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008645:	8d 8a 0c 01 00 00    	lea    ecx,[edx+0x10c]
c000864b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000864f:	83 c2 0d             	add    edx,0xd
c0008652:	50                   	push   eax
c0008653:	51                   	push   ecx
c0008654:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008658:	52                   	push   edx
c0008659:	e8 bc f7 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c000865e:	83 c4 10             	add    esp,0x10
c0008661:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008665:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0008668:	83 e8 41             	sub    eax,0x41
c000866b:	88 c2                	mov    dl,al
c000866d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008671:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0008677:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000867b:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000867f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008683:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c0008689:	0f b6 c0             	movzx  eax,al
c000868c:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0008693:	85 c0                	test   eax,eax
c0008695:	74 3e                	je     c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c0008697:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000869b:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086a1:	0f b6 c0             	movzx  eax,al
c00086a4:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086ab:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c00086b1:	85 c0                	test   eax,eax
c00086b3:	75 20                	jne    c00086d5 <Directory::Directory(char const*, Process*)+0xc3>
c00086b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00086b9:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c00086bf:	0f b6 c0             	movzx  eax,al
c00086c2:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c00086c9:	83 ec 0c             	sub    esp,0xc
c00086cc:	50                   	push   eax
c00086cd:	e8 54 19 00 00       	call   c000a026 <LogicalDisk::mount()>
c00086d2:	83 c4 10             	add    esp,0x10
c00086d5:	90                   	nop
c00086d6:	83 c4 0c             	add    esp,0xc
c00086d9:	c3                   	ret    

c00086da <Directory::open()>:
c00086da:	53                   	push   ebx
c00086db:	b8 0b 00 00 00       	mov    eax,0xb
c00086e0:	83 ec 08             	sub    esp,0x8
c00086e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00086ee:	83 fa 19             	cmp    edx,0x19
c00086f1:	77 3d                	ja     c0008730 <Directory::open()+0x56>
c00086f3:	8b 14 95 80 a7 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd5880]
c00086fa:	85 d2                	test   edx,edx
c00086fc:	74 32                	je     c0008730 <Directory::open()+0x56>
c00086fe:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c0008704:	85 d2                	test   edx,edx
c0008706:	74 28                	je     c0008730 <Directory::open()+0x56>
c0008708:	b8 06 00 00 00       	mov    eax,0x6
c000870d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0008711:	75 1d                	jne    c0008730 <Directory::open()+0x56>
c0008713:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0008719:	50                   	push   eax
c000871a:	8b 02                	mov    eax,DWORD PTR [edx]
c000871c:	51                   	push   ecx
c000871d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0008720:	51                   	push   ecx
c0008721:	52                   	push   edx
c0008722:	ff 50 50             	call   DWORD PTR [eax+0x50]
c0008725:	83 c4 10             	add    esp,0x10
c0008728:	85 c0                	test   eax,eax
c000872a:	75 04                	jne    c0008730 <Directory::open()+0x56>
c000872c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0008730:	83 c4 08             	add    esp,0x8
c0008733:	5b                   	pop    ebx
c0008734:	c3                   	ret    
c0008735:	90                   	nop

c0008736 <Directory::close()>:
c0008736:	53                   	push   ebx
c0008737:	b8 0b 00 00 00       	mov    eax,0xb
c000873c:	83 ec 08             	sub    esp,0x8
c000873f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008743:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000874a:	83 f9 19             	cmp    ecx,0x19
c000874d:	77 41                	ja     c0008790 <Directory::close()+0x5a>
c000874f:	8b 1c 8d 80 a7 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd5880]
c0008756:	85 db                	test   ebx,ebx
c0008758:	74 36                	je     c0008790 <Directory::close()+0x5a>
c000875a:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c0008761:	74 2d                	je     c0008790 <Directory::close()+0x5a>
c0008763:	b8 05 00 00 00       	mov    eax,0x5
c0008768:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000876c:	74 22                	je     c0008790 <Directory::close()+0x5a>
c000876e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c0008772:	8b 04 8d 80 a7 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd5880]
c0008779:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000877f:	53                   	push   ebx
c0008780:	53                   	push   ebx
c0008781:	8b 08                	mov    ecx,DWORD PTR [eax]
c0008783:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0008789:	50                   	push   eax
c000878a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000878d:	83 c4 10             	add    esp,0x10
c0008790:	83 c4 08             	add    esp,0x8
c0008793:	5b                   	pop    ebx
c0008794:	c3                   	ret    
c0008795:	90                   	nop

c0008796 <Directory::unlink()>:
c0008796:	83 ec 0c             	sub    esp,0xc
c0008799:	b8 0b 00 00 00       	mov    eax,0xb
c000879e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087a9:	83 f9 19             	cmp    ecx,0x19
c00087ac:	77 2f                	ja     c00087dd <Directory::unlink()+0x47>
c00087ae:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00087b5:	85 c9                	test   ecx,ecx
c00087b7:	74 24                	je     c00087dd <Directory::unlink()+0x47>
c00087b9:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00087bf:	85 c9                	test   ecx,ecx
c00087c1:	74 1a                	je     c00087dd <Directory::unlink()+0x47>
c00087c3:	b8 06 00 00 00       	mov    eax,0x6
c00087c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00087cc:	75 0f                	jne    c00087dd <Directory::unlink()+0x47>
c00087ce:	83 c2 0d             	add    edx,0xd
c00087d1:	50                   	push   eax
c00087d2:	50                   	push   eax
c00087d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00087d5:	52                   	push   edx
c00087d6:	51                   	push   ecx
c00087d7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00087da:	83 c4 10             	add    esp,0x10
c00087dd:	83 c4 0c             	add    esp,0xc
c00087e0:	c3                   	ret    
c00087e1:	90                   	nop

c00087e2 <Directory::rename(char const*)>:
c00087e2:	83 ec 0c             	sub    esp,0xc
c00087e5:	b8 0b 00 00 00       	mov    eax,0xb
c00087ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00087ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00087f5:	83 f9 19             	cmp    ecx,0x19
c00087f8:	77 32                	ja     c000882c <Directory::rename(char const*)+0x4a>
c00087fa:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0008801:	85 c9                	test   ecx,ecx
c0008803:	74 27                	je     c000882c <Directory::rename(char const*)+0x4a>
c0008805:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000880b:	85 c9                	test   ecx,ecx
c000880d:	74 1d                	je     c000882c <Directory::rename(char const*)+0x4a>
c000880f:	b8 06 00 00 00       	mov    eax,0x6
c0008814:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0008818:	75 12                	jne    c000882c <Directory::rename(char const*)+0x4a>
c000881a:	83 c2 0d             	add    edx,0xd
c000881d:	50                   	push   eax
c000881e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008820:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008824:	52                   	push   edx
c0008825:	51                   	push   ecx
c0008826:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0008829:	83 c4 10             	add    esp,0x10
c000882c:	83 c4 0c             	add    esp,0xc
c000882f:	c3                   	ret    

c0008830 <Directory::exists()>:
c0008830:	83 ec 0c             	sub    esp,0xc
c0008833:	31 c0                	xor    eax,eax
c0008835:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008839:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008840:	83 f9 19             	cmp    ecx,0x19
c0008843:	77 24                	ja     c0008869 <Directory::exists()+0x39>
c0008845:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000884c:	85 c9                	test   ecx,ecx
c000884e:	74 19                	je     c0008869 <Directory::exists()+0x39>
c0008850:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c0008856:	85 c9                	test   ecx,ecx
c0008858:	74 0f                	je     c0008869 <Directory::exists()+0x39>
c000885a:	83 c2 0d             	add    edx,0xd
c000885d:	50                   	push   eax
c000885e:	50                   	push   eax
c000885f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008861:	52                   	push   edx
c0008862:	51                   	push   ecx
c0008863:	ff 50 48             	call   DWORD PTR [eax+0x48]
c0008866:	83 c4 10             	add    esp,0x10
c0008869:	83 c4 0c             	add    esp,0xc
c000886c:	c3                   	ret    
c000886d:	90                   	nop

c000886e <Directory::read(dirent*)>:
c000886e:	83 ec 1c             	sub    esp,0x1c
c0008871:	b8 0b 00 00 00       	mov    eax,0xb
c0008876:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000887a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0008881:	83 f9 19             	cmp    ecx,0x19
c0008884:	77 30                	ja     c00088b6 <Directory::read(dirent*)+0x48>
c0008886:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c000888d:	85 c9                	test   ecx,ecx
c000888f:	74 25                	je     c00088b6 <Directory::read(dirent*)+0x48>
c0008891:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c0008898:	74 1c                	je     c00088b6 <Directory::read(dirent*)+0x48>
c000889a:	83 ec 0c             	sub    esp,0xc
c000889d:	8b 02                	mov    eax,DWORD PTR [edx]
c000889f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c00088a3:	51                   	push   ecx
c00088a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00088a8:	6a 00                	push   0x0
c00088aa:	68 10 01 00 00       	push   0x110
c00088af:	52                   	push   edx
c00088b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00088b3:	83 c4 20             	add    esp,0x20
c00088b6:	83 c4 1c             	add    esp,0x1c
c00088b9:	c3                   	ret    

c00088ba <Directory::create()>:
c00088ba:	83 ec 0c             	sub    esp,0xc
c00088bd:	b8 0b 00 00 00       	mov    eax,0xb
c00088c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00088c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00088cd:	83 f9 19             	cmp    ecx,0x19
c00088d0:	77 2f                	ja     c0008901 <Directory::create()+0x47>
c00088d2:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c00088d9:	85 c9                	test   ecx,ecx
c00088db:	74 24                	je     c0008901 <Directory::create()+0x47>
c00088dd:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c00088e3:	85 c9                	test   ecx,ecx
c00088e5:	74 1a                	je     c0008901 <Directory::create()+0x47>
c00088e7:	b8 06 00 00 00       	mov    eax,0x6
c00088ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00088f0:	75 0f                	jne    c0008901 <Directory::create()+0x47>
c00088f2:	83 c2 0d             	add    edx,0xd
c00088f5:	50                   	push   eax
c00088f6:	50                   	push   eax
c00088f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00088f9:	52                   	push   edx
c00088fa:	51                   	push   ecx
c00088fb:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00088fe:	83 c4 10             	add    esp,0x10
c0008901:	83 c4 0c             	add    esp,0xc
c0008904:	c3                   	ret    
c0008905:	90                   	nop

c0008906 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0008906:	b8 0a 00 00 00       	mov    eax,0xa
c000890b:	c3                   	ret    

c000890c <Bus::Bus(char const*)>:
c000890c:	83 ec 0c             	sub    esp,0xc
c000890f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008913:	83 ec 08             	sub    esp,0x8
c0008916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000891a:	50                   	push   eax
c000891b:	e8 d4 08 00 00       	call   c00091f4 <Device::Device(char const*)>
c0008920:	83 c4 10             	add    esp,0x10
c0008923:	ba bc 25 02 c0       	mov    edx,0xc00225bc
c0008928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892c:	89 10                	mov    DWORD PTR [eax],edx
c000892e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008932:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000893c:	90                   	nop
c000893d:	83 c4 0c             	add    esp,0xc
c0008940:	c3                   	ret    
c0008941:	90                   	nop
c0008942:	66 90                	xchg   ax,ax

c0008944 <Bus::~Bus()>:
c0008944:	83 ec 0c             	sub    esp,0xc
c0008947:	ba bc 25 02 c0       	mov    edx,0xc00225bc
c000894c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008950:	89 10                	mov    DWORD PTR [eax],edx
c0008952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008956:	83 ec 0c             	sub    esp,0xc
c0008959:	50                   	push   eax
c000895a:	e8 35 06 00 00       	call   c0008f94 <Device::~Device()>
c000895f:	83 c4 10             	add    esp,0x10
c0008962:	90                   	nop
c0008963:	83 c4 0c             	add    esp,0xc
c0008966:	c3                   	ret    
c0008967:	90                   	nop

c0008968 <Bus::~Bus()>:
c0008968:	83 ec 0c             	sub    esp,0xc
c000896b:	83 ec 0c             	sub    esp,0xc
c000896e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008972:	e8 cd ff ff ff       	call   c0008944 <Bus::~Bus()>
c0008977:	83 c4 10             	add    esp,0x10
c000897a:	83 ec 08             	sub    esp,0x8
c000897d:	68 58 01 00 00       	push   0x158
c0008982:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008986:	e8 00 40 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c000898b:	83 c4 10             	add    esp,0x10
c000898e:	83 c4 0c             	add    esp,0xc
c0008991:	c3                   	ret    

c0008992 <KeBeepThread(void*)>:
c0008992:	83 ec 0c             	sub    esp,0xc
c0008995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008999:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c00089a0:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c00089a7:	75 01                	jne    c00089aa <KeBeepThread(void*)+0x18>
c00089a9:	fb                   	sti    
c00089aa:	83 ec 0c             	sub    esp,0xc
c00089ad:	6b c0 0a             	imul   eax,eax,0xa
c00089b0:	50                   	push   eax
c00089b1:	e8 b6 da 00 00       	call   c001646c <milliTenthSleep(unsigned int)>
c00089b6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00089bd:	e8 05 0b 01 00       	call   c00194c7 <HalMakeBeep(int)>
c00089c2:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c00089ca:	83 c4 1c             	add    esp,0x1c
c00089cd:	e9 72 d9 00 00       	jmp    c0016344 <blockTask(TaskState)>

c00089d2 <KeBeep(int, int, bool)>:
c00089d2:	56                   	push   esi
c00089d3:	53                   	push   ebx
c00089d4:	83 ec 10             	sub    esp,0x10
c00089d7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00089db:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00089df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e3:	e8 df 0a 01 00       	call   c00194c7 <HalMakeBeep(int)>
c00089e8:	83 c4 10             	add    esp,0x10
c00089eb:	89 f0                	mov    eax,esi
c00089ed:	84 c0                	test   al,al
c00089ef:	74 1e                	je     c0008a0f <KeBeep(int, int, bool)+0x3d>
c00089f1:	83 ec 0c             	sub    esp,0xc
c00089f4:	6b db 0a             	imul   ebx,ebx,0xa
c00089f7:	53                   	push   ebx
c00089f8:	e8 6f da 00 00       	call   c001646c <milliTenthSleep(unsigned int)>
c00089fd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0008a05:	83 c4 14             	add    esp,0x14
c0008a08:	5b                   	pop    ebx
c0008a09:	5e                   	pop    esi
c0008a0a:	e9 b8 0a 01 00       	jmp    c00194c7 <HalMakeBeep(int)>
c0008a0f:	68 e6 00 00 00       	push   0xe6
c0008a14:	53                   	push   ebx
c0008a15:	68 92 89 00 c0       	push   0xc0008992
c0008a1a:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0008a20:	e8 07 d6 00 00       	call   c001602c <Process::createThread(void (*)(void*), void*, int)>
c0008a25:	83 c4 14             	add    esp,0x14
c0008a28:	5b                   	pop    ebx
c0008a29:	5e                   	pop    esi
c0008a2a:	c3                   	ret    
c0008a2b:	90                   	nop

c0008a2c <KeLoadClockSettings()>:
c0008a2c:	57                   	push   edi
c0008a2d:	56                   	push   esi
c0008a2e:	53                   	push   ebx
c0008a2f:	81 ec 6c 02 00 00    	sub    esp,0x26c
c0008a35:	c6 44 24 14 00       	mov    BYTE PTR [esp+0x14],0x0
c0008a3a:	68 e0 25 02 c0       	push   0xc00225e0
c0008a3f:	e8 9c 3f 00 00       	call   c000c9e0 <CmOpen(char const*)>
c0008a44:	59                   	pop    ecx
c0008a45:	89 c3                	mov    ebx,eax
c0008a47:	5e                   	pop    esi
c0008a48:	68 05 26 02 c0       	push   0xc0022605
c0008a4d:	50                   	push   eax
c0008a4e:	e8 8d 4b 00 00       	call   c000d5e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0008a53:	5f                   	pop    edi
c0008a54:	89 c6                	mov    esi,eax
c0008a56:	5a                   	pop    edx
c0008a57:	50                   	push   eax
c0008a58:	68 1a 26 02 c0       	push   0xc002261a
c0008a5d:	e8 02 e5 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a62:	83 c4 10             	add    esp,0x10
c0008a65:	85 f6                	test   esi,esi
c0008a67:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0008a6b:	7e 0c                	jle    c0008a79 <KeLoadClockSettings()+0x4d>
c0008a6d:	52                   	push   edx
c0008a6e:	57                   	push   edi
c0008a6f:	56                   	push   esi
c0008a70:	53                   	push   ebx
c0008a71:	e8 da 40 00 00       	call   c000cb50 <CmGetString(Reghive_Tag*, int, char*)>
c0008a76:	83 c4 10             	add    esp,0x10
c0008a79:	83 ec 0c             	sub    esp,0xc
c0008a7c:	53                   	push   ebx
c0008a7d:	e8 7c 40 00 00       	call   c000cafe <CmClose(Reghive_Tag*)>
c0008a82:	83 c4 0c             	add    esp,0xc
c0008a85:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0008a8a:	50                   	push   eax
c0008a8b:	57                   	push   edi
c0008a8c:	68 28 26 02 c0       	push   0xc0022628
c0008a91:	e8 ce e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008a96:	8a 4c 24 18          	mov    cl,BYTE PTR [esp+0x18]
c0008a9a:	c6 05 08 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a308,0x0
c0008aa1:	8d 41 d5             	lea    eax,[ecx-0x2b]
c0008aa4:	83 c4 10             	add    esp,0x10
c0008aa7:	a8 fd                	test   al,0xfd
c0008aa9:	75 50                	jne    c0008afb <KeLoadClockSettings()+0xcf>
c0008aab:	0f be 5c 24 0a       	movsx  ebx,BYTE PTR [esp+0xa]
c0008ab0:	0f be 54 24 0b       	movsx  edx,BYTE PTR [esp+0xb]
c0008ab5:	83 fb 2e             	cmp    ebx,0x2e
c0008ab8:	75 07                	jne    c0008ac1 <KeLoadClockSettings()+0x95>
c0008aba:	b0 01                	mov    al,0x1
c0008abc:	83 fa 35             	cmp    edx,0x35
c0008abf:	74 0f                	je     c0008ad0 <KeLoadClockSettings()+0xa4>
c0008ac1:	31 c0                	xor    eax,eax
c0008ac3:	83 fa 2e             	cmp    edx,0x2e
c0008ac6:	75 08                	jne    c0008ad0 <KeLoadClockSettings()+0xa4>
c0008ac8:	80 7c 24 0c 35       	cmp    BYTE PTR [esp+0xc],0x35
c0008acd:	0f 94 c0             	sete   al
c0008ad0:	a2 09 a3 02 c0       	mov    ds:0xc002a309,al
c0008ad5:	0f be 44 24 09       	movsx  eax,BYTE PTR [esp+0x9]
c0008ada:	83 e8 30             	sub    eax,0x30
c0008add:	83 fa 2e             	cmp    edx,0x2e
c0008ae0:	75 07                	jne    c0008ae9 <KeLoadClockSettings()+0xbd>
c0008ae2:	6b c0 0a             	imul   eax,eax,0xa
c0008ae5:	8d 44 03 d0          	lea    eax,[ebx+eax*1-0x30]
c0008ae9:	a3 0c a3 02 c0       	mov    ds:0xc002a30c,eax
c0008aee:	80 f9 2d             	cmp    cl,0x2d
c0008af1:	75 19                	jne    c0008b0c <KeLoadClockSettings()+0xe0>
c0008af3:	f7 1d 0c a3 02 c0    	neg    DWORD PTR ds:0xc002a30c
c0008af9:	eb 11                	jmp    c0008b0c <KeLoadClockSettings()+0xe0>
c0008afb:	c6 05 09 a3 02 c0 00 	mov    BYTE PTR ds:0xc002a309,0x0
c0008b02:	c7 05 0c a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a30c,0x0
c0008b0c:	50                   	push   eax
c0008b0d:	0f b6 05 09 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a309
c0008b14:	8d 04 80             	lea    eax,[eax+eax*4]
c0008b17:	50                   	push   eax
c0008b18:	ff 35 0c a3 02 c0    	push   DWORD PTR ds:0xc002a30c
c0008b1e:	68 3f 26 02 c0       	push   0xc002263f
c0008b23:	e8 3c e4 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008b28:	81 c4 70 02 00 00    	add    esp,0x270
c0008b2e:	5b                   	pop    ebx
c0008b2f:	5e                   	pop    esi
c0008b30:	5f                   	pop    edi
c0008b31:	c3                   	ret    

c0008b32 <Clock::Clock(char const*)>:
c0008b32:	83 ec 0c             	sub    esp,0xc
c0008b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b39:	83 ec 08             	sub    esp,0x8
c0008b3c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b40:	50                   	push   eax
c0008b41:	e8 ae 06 00 00       	call   c00091f4 <Device::Device(char const*)>
c0008b46:	83 c4 10             	add    esp,0x10
c0008b49:	ba 68 26 02 c0       	mov    edx,0xc0022668
c0008b4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b52:	89 10                	mov    DWORD PTR [eax],edx
c0008b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b58:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0008b62:	90                   	nop
c0008b63:	83 c4 0c             	add    esp,0xc
c0008b66:	c3                   	ret    
c0008b67:	90                   	nop

c0008b68 <Clock::~Clock()>:
c0008b68:	83 ec 0c             	sub    esp,0xc
c0008b6b:	ba 68 26 02 c0       	mov    edx,0xc0022668
c0008b70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b74:	89 10                	mov    DWORD PTR [eax],edx
c0008b76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008b7a:	83 ec 0c             	sub    esp,0xc
c0008b7d:	50                   	push   eax
c0008b7e:	e8 11 04 00 00       	call   c0008f94 <Device::~Device()>
c0008b83:	83 c4 10             	add    esp,0x10
c0008b86:	90                   	nop
c0008b87:	83 c4 0c             	add    esp,0xc
c0008b8a:	c3                   	ret    
c0008b8b:	90                   	nop

c0008b8c <Clock::~Clock()>:
c0008b8c:	83 ec 0c             	sub    esp,0xc
c0008b8f:	83 ec 0c             	sub    esp,0xc
c0008b92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008b96:	e8 cd ff ff ff       	call   c0008b68 <Clock::~Clock()>
c0008b9b:	83 c4 10             	add    esp,0x10
c0008b9e:	83 ec 08             	sub    esp,0x8
c0008ba1:	68 58 01 00 00       	push   0x158
c0008ba6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008baa:	e8 dc 3d 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c0008baf:	83 c4 10             	add    esp,0x10
c0008bb2:	83 c4 0c             	add    esp,0xc
c0008bb5:	c3                   	ret    

c0008bb6 <Clock::timeInSecondsLocal()>:
c0008bb6:	53                   	push   ebx
c0008bb7:	83 ec 14             	sub    esp,0x14
c0008bba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bbe:	8b 10                	mov    edx,DWORD PTR [eax]
c0008bc0:	50                   	push   eax
c0008bc1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0008bc4:	0f b6 0d 08 a3 02 c0 	movzx  ecx,BYTE PTR ds:0xc002a308
c0008bcb:	03 0d 0c a3 02 c0    	add    ecx,DWORD PTR ds:0xc002a30c
c0008bd1:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0008bd7:	89 cb                	mov    ebx,ecx
c0008bd9:	c1 fb 1f             	sar    ebx,0x1f
c0008bdc:	01 c8                	add    eax,ecx
c0008bde:	11 da                	adc    edx,ebx
c0008be0:	83 c4 10             	add    esp,0x10
c0008be3:	31 c9                	xor    ecx,ecx
c0008be5:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008bec:	74 05                	je     c0008bf3 <Clock::timeInSecondsLocal()+0x3d>
c0008bee:	b9 08 07 00 00       	mov    ecx,0x708
c0008bf3:	31 db                	xor    ebx,ebx
c0008bf5:	01 c8                	add    eax,ecx
c0008bf7:	11 da                	adc    edx,ebx
c0008bf9:	83 c4 08             	add    esp,0x8
c0008bfc:	5b                   	pop    ebx
c0008bfd:	c3                   	ret    

c0008bfe <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0008bfe:	57                   	push   edi
c0008bff:	56                   	push   esi
c0008c00:	53                   	push   ebx
c0008c01:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0008c05:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008c09:	8b 01                	mov    eax,DWORD PTR [ecx]
c0008c0b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008c0f:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0008c12:	0f b6 05 08 a3 02 c0 	movzx  eax,BYTE PTR ds:0xc002a308
c0008c19:	03 05 0c a3 02 c0    	add    eax,DWORD PTR ds:0xc002a30c
c0008c1f:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0008c25:	99                   	cdq    
c0008c26:	29 c6                	sub    esi,eax
c0008c28:	19 d7                	sbb    edi,edx
c0008c2a:	89 f0                	mov    eax,esi
c0008c2c:	89 fa                	mov    edx,edi
c0008c2e:	31 f6                	xor    esi,esi
c0008c30:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008c37:	74 05                	je     c0008c3e <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0008c39:	be 08 07 00 00       	mov    esi,0x708
c0008c3e:	31 ff                	xor    edi,edi
c0008c40:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0008c44:	29 f0                	sub    eax,esi
c0008c46:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0008c4a:	19 fa                	sbb    edx,edi
c0008c4c:	89 d8                	mov    eax,ebx
c0008c4e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0008c52:	5b                   	pop    ebx
c0008c53:	5e                   	pop    esi
c0008c54:	5f                   	pop    edi
c0008c55:	ff e0                	jmp    eax

c0008c57 <KeDatetimeToSeconds(datetime_t)>:
c0008c57:	55                   	push   ebp
c0008c58:	57                   	push   edi
c0008c59:	56                   	push   esi
c0008c5a:	53                   	push   ebx
c0008c5b:	83 ec 0c             	sub    esp,0xc
c0008c5e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0008c62:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008c66:	89 d6                	mov    esi,edx
c0008c68:	0f b6 c7             	movzx  eax,bh
c0008c6b:	c1 ee 10             	shr    esi,0x10
c0008c6e:	6b e8 3c             	imul   ebp,eax,0x3c
c0008c71:	81 ee 6c 07 00 00    	sub    esi,0x76c
c0008c77:	0f b6 ce             	movzx  ecx,dh
c0008c7a:	89 df                	mov    edi,ebx
c0008c7c:	49                   	dec    ecx
c0008c7d:	c1 ef 10             	shr    edi,0x10
c0008c80:	0f b6 db             	movzx  ebx,bl
c0008c83:	89 f8                	mov    eax,edi
c0008c85:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c0008c8b:	0f b6 f8             	movzx  edi,al
c0008c8e:	0f b6 d2             	movzx  edx,dl
c0008c91:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0008c95:	01 d8                	add    eax,ebx
c0008c97:	0f b7 de             	movzx  ebx,si
c0008c9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0008c9d:	c1 f8 1f             	sar    eax,0x1f
c0008ca0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008ca4:	0f b6 c1             	movzx  eax,cl
c0008ca7:	8b 0c 85 a0 26 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd960]
c0008cae:	83 f8 01             	cmp    eax,0x1
c0008cb1:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0008cb5:	76 27                	jbe    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cb7:	83 e6 03             	and    esi,0x3
c0008cba:	75 22                	jne    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cbc:	31 d2                	xor    edx,edx
c0008cbe:	be 64 00 00 00       	mov    esi,0x64
c0008cc3:	89 d8                	mov    eax,ebx
c0008cc5:	f7 f6                	div    esi
c0008cc7:	85 d2                	test   edx,edx
c0008cc9:	75 12                	jne    c0008cdd <KeDatetimeToSeconds(datetime_t)+0x86>
c0008ccb:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0008cd1:	be 90 01 00 00       	mov    esi,0x190
c0008cd6:	99                   	cdq    
c0008cd7:	f7 fe                	idiv   esi
c0008cd9:	85 d2                	test   edx,edx
c0008cdb:	75 01                	jne    c0008cde <KeDatetimeToSeconds(datetime_t)+0x87>
c0008cdd:	41                   	inc    ecx
c0008cde:	83 fb 46             	cmp    ebx,0x46
c0008ce1:	76 48                	jbe    c0008d2b <KeDatetimeToSeconds(datetime_t)+0xd4>
c0008ce3:	be 46 00 00 00       	mov    esi,0x46
c0008ce8:	bf 64 00 00 00       	mov    edi,0x64
c0008ced:	bd 90 01 00 00       	mov    ebp,0x190
c0008cf2:	b8 6d 01 00 00       	mov    eax,0x16d
c0008cf7:	f7 c6 03 00 00 00    	test   esi,0x3
c0008cfd:	75 23                	jne    c0008d22 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008cff:	89 f0                	mov    eax,esi
c0008d01:	99                   	cdq    
c0008d02:	f7 ff                	idiv   edi
c0008d04:	b8 6e 01 00 00       	mov    eax,0x16e
c0008d09:	85 d2                	test   edx,edx
c0008d0b:	75 15                	jne    c0008d22 <KeDatetimeToSeconds(datetime_t)+0xcb>
c0008d0d:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0008d13:	99                   	cdq    
c0008d14:	f7 fd                	idiv   ebp
c0008d16:	83 fa 01             	cmp    edx,0x1
c0008d19:	19 c0                	sbb    eax,eax
c0008d1b:	f7 d0                	not    eax
c0008d1d:	05 6e 01 00 00       	add    eax,0x16e
c0008d22:	01 c1                	add    ecx,eax
c0008d24:	46                   	inc    esi
c0008d25:	39 de                	cmp    esi,ebx
c0008d27:	7c c9                	jl     c0008cf2 <KeDatetimeToSeconds(datetime_t)+0x9b>
c0008d29:	eb 34                	jmp    c0008d5f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d2b:	74 32                	je     c0008d5f <KeDatetimeToSeconds(datetime_t)+0x108>
c0008d2d:	b8 45 00 00 00       	mov    eax,0x45
c0008d32:	89 c2                	mov    edx,eax
c0008d34:	83 e2 03             	and    edx,0x3
c0008d37:	39 d8                	cmp    eax,ebx
c0008d39:	7e 0f                	jle    c0008d4a <KeDatetimeToSeconds(datetime_t)+0xf3>
c0008d3b:	83 fa 01             	cmp    edx,0x1
c0008d3e:	19 d2                	sbb    edx,edx
c0008d40:	48                   	dec    eax
c0008d41:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0008d48:	eb e8                	jmp    c0008d32 <KeDatetimeToSeconds(datetime_t)+0xdb>
c0008d4a:	b8 6d 01 00 00       	mov    eax,0x16d
c0008d4f:	85 d2                	test   edx,edx
c0008d51:	75 0a                	jne    c0008d5d <KeDatetimeToSeconds(datetime_t)+0x106>
c0008d53:	83 fb 01             	cmp    ebx,0x1
c0008d56:	19 c0                	sbb    eax,eax
c0008d58:	05 6e 01 00 00       	add    eax,0x16e
c0008d5d:	29 c1                	sub    ecx,eax
c0008d5f:	b8 80 51 01 00       	mov    eax,0x15180
c0008d64:	f7 e9                	imul   ecx
c0008d66:	03 04 24             	add    eax,DWORD PTR [esp]
c0008d69:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008d6d:	83 c4 0c             	add    esp,0xc
c0008d70:	5b                   	pop    ebx
c0008d71:	5e                   	pop    esi
c0008d72:	5f                   	pop    edi
c0008d73:	5d                   	pop    ebp
c0008d74:	c3                   	ret    
c0008d75:	90                   	nop

c0008d76 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0008d76:	57                   	push   edi
c0008d77:	56                   	push   esi
c0008d78:	53                   	push   ebx
c0008d79:	83 ec 10             	sub    esp,0x10
c0008d7c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008d80:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008d84:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008d88:	e8 ca fe ff ff       	call   c0008c57 <KeDatetimeToSeconds(datetime_t)>
c0008d8d:	59                   	pop    ecx
c0008d8e:	5e                   	pop    esi
c0008d8f:	0f b6 35 08 a3 02 c0 	movzx  esi,BYTE PTR ds:0xc002a308
c0008d96:	03 35 0c a3 02 c0    	add    esi,DWORD PTR ds:0xc002a30c
c0008d9c:	69 f6 10 0e 00 00    	imul   esi,esi,0xe10
c0008da2:	89 f7                	mov    edi,esi
c0008da4:	c1 ff 1f             	sar    edi,0x1f
c0008da7:	29 f0                	sub    eax,esi
c0008da9:	19 fa                	sbb    edx,edi
c0008dab:	31 f6                	xor    esi,esi
c0008dad:	80 3d 09 a3 02 c0 00 	cmp    BYTE PTR ds:0xc002a309,0x0
c0008db4:	74 05                	je     c0008dbb <Clock::setTimeInDatetimeLocal(datetime_t)+0x45>
c0008db6:	be 08 07 00 00       	mov    esi,0x708
c0008dbb:	31 ff                	xor    edi,edi
c0008dbd:	29 f0                	sub    eax,esi
c0008dbf:	19 fa                	sbb    edx,edi
c0008dc1:	83 ec 0c             	sub    esp,0xc
c0008dc4:	89 d7                	mov    edi,edx
c0008dc6:	89 fe                	mov    esi,edi
c0008dc8:	31 ff                	xor    edi,edi
c0008dca:	57                   	push   edi
c0008dcb:	31 ff                	xor    edi,edi
c0008dcd:	56                   	push   esi
c0008dce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008dd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0008dd6:	57                   	push   edi
c0008dd7:	50                   	push   eax
c0008dd8:	68 50 26 02 c0       	push   0xc0022650
c0008ddd:	e8 82 e1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0008de2:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0008de4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008de8:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0008dec:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008df0:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0008df4:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c0008df8:	8b 41 2c             	mov    eax,DWORD PTR [ecx+0x2c]
c0008dfb:	83 c4 30             	add    esp,0x30
c0008dfe:	5b                   	pop    ebx
c0008dff:	5e                   	pop    esi
c0008e00:	5f                   	pop    edi
c0008e01:	ff e0                	jmp    eax

c0008e03 <KeSecondsToDatetime(unsigned long long)>:
c0008e03:	55                   	push   ebp
c0008e04:	57                   	push   edi
c0008e05:	56                   	push   esi
c0008e06:	53                   	push   ebx
c0008e07:	83 ec 1c             	sub    esp,0x1c
c0008e0a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0008e0e:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0008e12:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0008e16:	6a 00                	push   0x0
c0008e18:	68 80 51 01 00       	push   0x15180
c0008e1d:	55                   	push   ebp
c0008e1e:	57                   	push   edi
c0008e1f:	e8 90 7d 01 00       	call   c0020bb4 <__udivdi3>
c0008e24:	83 c4 10             	add    esp,0x10
c0008e27:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0008e2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e31:	6a 00                	push   0x0
c0008e33:	68 80 51 01 00       	push   0x15180
c0008e38:	55                   	push   ebp
c0008e39:	57                   	push   edi
c0008e3a:	bf 10 0e 00 00       	mov    edi,0xe10
c0008e3f:	e8 70 7e 01 00       	call   c0020cb4 <__umoddi3>
c0008e44:	83 c4 10             	add    esp,0x10
c0008e47:	99                   	cdq    
c0008e48:	f7 ff                	idiv   edi
c0008e4a:	bf 3c 00 00 00       	mov    edi,0x3c
c0008e4f:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0008e52:	89 d0                	mov    eax,edx
c0008e54:	99                   	cdq    
c0008e55:	f7 ff                	idiv   edi
c0008e57:	85 db                	test   ebx,ebx
c0008e59:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0008e5c:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0008e5f:	79 11                	jns    c0008e72 <KeSecondsToDatetime(unsigned long long)+0x6f>
c0008e61:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008e65:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0008e6b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e70:	eb 07                	jmp    c0008e79 <KeSecondsToDatetime(unsigned long long)+0x76>
c0008e72:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0008e77:	89 d8                	mov    eax,ebx
c0008e79:	bf b4 05 00 00       	mov    edi,0x5b4
c0008e7e:	99                   	cdq    
c0008e7f:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0008e84:	f7 f9                	idiv   ecx
c0008e86:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0008e8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e8f:	31 d2                	xor    edx,edx
c0008e91:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0008e99:	01 c3                	add    ebx,eax
c0008e9b:	89 d8                	mov    eax,ebx
c0008e9d:	f7 f1                	div    ecx
c0008e9f:	31 d2                	xor    edx,edx
c0008ea1:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0008ea4:	89 d8                	mov    eax,ebx
c0008ea6:	f7 f7                	div    edi
c0008ea8:	31 d2                	xor    edx,edx
c0008eaa:	29 c1                	sub    ecx,eax
c0008eac:	89 d8                	mov    eax,ebx
c0008eae:	f7 f5                	div    ebp
c0008eb0:	bd 6d 01 00 00       	mov    ebp,0x16d
c0008eb5:	29 c1                	sub    ecx,eax
c0008eb7:	31 d2                	xor    edx,edx
c0008eb9:	89 c8                	mov    eax,ecx
c0008ebb:	f7 f5                	div    ebp
c0008ebd:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0008ec2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008ec6:	31 d2                	xor    edx,edx
c0008ec8:	89 c8                	mov    eax,ecx
c0008eca:	f7 f5                	div    ebp
c0008ecc:	31 d2                	xor    edx,edx
c0008ece:	01 c3                	add    ebx,eax
c0008ed0:	89 c8                	mov    eax,ecx
c0008ed2:	f7 f7                	div    edi
c0008ed4:	bf 99 00 00 00       	mov    edi,0x99
c0008ed9:	29 c3                	sub    ebx,eax
c0008edb:	31 d2                	xor    edx,edx
c0008edd:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0008ee5:	29 c3                	sub    ebx,eax
c0008ee7:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0008eea:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0008eed:	bb 05 00 00 00       	mov    ebx,0x5
c0008ef2:	83 c1 02             	add    ecx,0x2
c0008ef5:	89 c8                	mov    eax,ecx
c0008ef7:	f7 f7                	div    edi
c0008ef9:	31 d2                	xor    edx,edx
c0008efb:	89 c7                	mov    edi,eax
c0008efd:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0008f03:	83 c0 02             	add    eax,0x2
c0008f06:	f7 f3                	div    ebx
c0008f08:	89 eb                	mov    ebx,ebp
c0008f0a:	29 c3                	sub    ebx,eax
c0008f0c:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0008f12:	88 1e                	mov    BYTE PTR [esi],bl
c0008f14:	19 c0                	sbb    eax,eax
c0008f16:	31 c9                	xor    ecx,ecx
c0008f18:	83 e0 0c             	and    eax,0xc
c0008f1b:	8d 54 38 f6          	lea    edx,[eax+edi*1-0xa]
c0008f1f:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0008f27:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0008f2b:	83 fa 01             	cmp    edx,0x1
c0008f2e:	0f 96 c1             	setbe  cl
c0008f31:	42                   	inc    edx
c0008f32:	8d 44 08 46          	lea    eax,[eax+ecx*1+0x46]
c0008f36:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0008f39:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0008f3d:	83 c4 1c             	add    esp,0x1c
c0008f40:	89 f0                	mov    eax,esi
c0008f42:	5b                   	pop    ebx
c0008f43:	5e                   	pop    esi
c0008f44:	5f                   	pop    edi
c0008f45:	5d                   	pop    ebp
c0008f46:	c2 04 00             	ret    0x4
c0008f49:	90                   	nop

c0008f4a <Clock::timeInDatetimeLocal()>:
c0008f4a:	53                   	push   ebx
c0008f4b:	83 ec 14             	sub    esp,0x14
c0008f4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008f52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f56:	e8 5b fc ff ff       	call   c0008bb6 <Clock::timeInSecondsLocal()>
c0008f5b:	83 c4 0c             	add    esp,0xc
c0008f5e:	52                   	push   edx
c0008f5f:	50                   	push   eax
c0008f60:	53                   	push   ebx
c0008f61:	e8 9d fe ff ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c0008f66:	89 d8                	mov    eax,ebx
c0008f68:	83 c4 14             	add    esp,0x14
c0008f6b:	5b                   	pop    ebx
c0008f6c:	c2 04 00             	ret    0x4
c0008f6f:	90                   	nop

c0008f70 <Device::hibernate()>:
c0008f70:	c3                   	ret    
c0008f71:	90                   	nop

c0008f72 <Device::wake()>:
c0008f72:	c3                   	ret    
c0008f73:	90                   	nop

c0008f74 <Device::detect()>:
c0008f74:	c3                   	ret    
c0008f75:	90                   	nop

c0008f76 <Device::disableLegacy()>:
c0008f76:	c3                   	ret    
c0008f77:	90                   	nop

c0008f78 <Device::powerSaving(PowerSavingLevel)>:
c0008f78:	c3                   	ret    
c0008f79:	90                   	nop

c0008f7a <DriverlessDevice::close(int, int, void*)>:
c0008f7a:	31 c0                	xor    eax,eax
c0008f7c:	c3                   	ret    
c0008f7d:	90                   	nop

c0008f7e <DriverlessDevice::detect()>:
c0008f7e:	c3                   	ret    
c0008f7f:	90                   	nop

c0008f80 <DriverlessDevice::open(int, int, void*)>:
c0008f80:	83 ec 18             	sub    esp,0x18
c0008f83:	68 d0 26 02 c0       	push   0xc00226d0
c0008f88:	e8 bd 66 00 00       	call   c000f64a <KePanic(char const*)>
c0008f8d:	83 c8 ff             	or     eax,0xffffffff
c0008f90:	83 c4 1c             	add    esp,0x1c
c0008f93:	c3                   	ret    

c0008f94 <Device::~Device()>:
c0008f94:	ba 74 27 02 c0       	mov    edx,0xc0022774
c0008f99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f9d:	89 10                	mov    DWORD PTR [eax],edx
c0008f9f:	90                   	nop
c0008fa0:	c3                   	ret    
c0008fa1:	90                   	nop

c0008fa2 <Device::~Device()>:
c0008fa2:	83 ec 0c             	sub    esp,0xc
c0008fa5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008fa9:	e8 e6 ff ff ff       	call   c0008f94 <Device::~Device()>
c0008fae:	83 c4 04             	add    esp,0x4
c0008fb1:	83 ec 08             	sub    esp,0x8
c0008fb4:	68 58 01 00 00       	push   0x158
c0008fb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008fbd:	e8 c9 39 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c0008fc2:	83 c4 10             	add    esp,0x10
c0008fc5:	83 c4 0c             	add    esp,0xc
c0008fc8:	c3                   	ret    
c0008fc9:	90                   	nop

c0008fca <Device::findAndLoadDriver()>:
c0008fca:	c7 44 24 04 ee 26 02 c0 	mov    DWORD PTR [esp+0x4],0xc00226ee
c0008fd2:	e9 8d df ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c0008fd7:	90                   	nop

c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>:
c0008fd8:	57                   	push   edi
c0008fd9:	b9 09 00 00 00       	mov    ecx,0x9
c0008fde:	56                   	push   esi
c0008fdf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0008fe3:	8d 74 24 10          	lea    esi,[esp+0x10]
c0008fe7:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0008ff1:	81 c7 18 01 00 00    	add    edi,0x118
c0008ff7:	fc                   	cld    
c0008ff8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0008ffa:	5e                   	pop    esi
c0008ffb:	5f                   	pop    edi
c0008ffc:	c3                   	ret    
c0008ffd:	90                   	nop

c0008ffe <Device::preOpenACPI(void*, char*, char*)>:
c0008ffe:	57                   	push   edi
c0008fff:	b9 1e 00 00 00       	mov    ecx,0x1e
c0009004:	56                   	push   esi
c0009005:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009009:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000900d:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c0009017:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000901d:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c0009023:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0009027:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0009029:	b9 0e 00 00 00       	mov    ecx,0xe
c000902e:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c0009034:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009038:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000903a:	5e                   	pop    esi
c000903b:	5f                   	pop    edi
c000903c:	c3                   	ret    
c000903d:	90                   	nop

c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000903e:	53                   	push   ebx
c000903f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009043:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009047:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000904b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000904f:	0f b6 c0             	movzx  eax,al
c0009052:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0009056:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000905a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000905e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009062:	5b                   	pop    ebx
c0009063:	e9 27 08 01 00       	jmp    c001988f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c0009068 <Device::getParent()>:
c0009068:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000906c:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c0009072:	c3                   	ret    
c0009073:	90                   	nop

c0009074 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0009074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009078:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000907c:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0009081:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009085:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009089:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000908d:	e9 5f 09 01 00       	jmp    c00199f1 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c0009092 <Device::addChild(Device*)>:
c0009092:	53                   	push   ebx
c0009093:	83 ec 08             	sub    esp,0x8
c0009096:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000909a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000909e:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c00090a4:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c00090aa:	8b 13                	mov    edx,DWORD PTR [ebx]
c00090ac:	85 d2                	test   edx,edx
c00090ae:	74 04                	je     c00090b4 <Device::addChild(Device*)+0x22>
c00090b0:	89 d3                	mov    ebx,edx
c00090b2:	eb f6                	jmp    c00090aa <Device::addChild(Device*)+0x18>
c00090b4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00090b7:	83 ec 0c             	sub    esp,0xc
c00090ba:	6a 08                	push   0x8
c00090bc:	e8 42 62 00 00       	call   c000f303 <malloc>
c00090c1:	89 03                	mov    DWORD PTR [ebx],eax
c00090c3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00090c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00090d0:	83 c4 18             	add    esp,0x18
c00090d3:	5b                   	pop    ebx
c00090d4:	c3                   	ret    
c00090d5:	90                   	nop

c00090d6 <Device::removeAllChildren()>:
c00090d6:	56                   	push   esi
c00090d7:	53                   	push   ebx
c00090d8:	52                   	push   edx
c00090d9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00090dd:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00090e3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00090e6:	74 17                	je     c00090ff <Device::removeAllChildren()+0x29>
c00090e8:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00090eb:	85 c0                	test   eax,eax
c00090ed:	74 0c                	je     c00090fb <Device::removeAllChildren()+0x25>
c00090ef:	83 ec 0c             	sub    esp,0xc
c00090f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00090f4:	50                   	push   eax
c00090f5:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00090f8:	83 c4 10             	add    esp,0x10
c00090fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00090fd:	eb e4                	jmp    c00090e3 <Device::removeAllChildren()+0xd>
c00090ff:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009105:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000910b:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0009111:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009118:	58                   	pop    eax
c0009119:	5b                   	pop    ebx
c000911a:	5e                   	pop    esi
c000911b:	c3                   	ret    

c000911c <Device::hibernateAll()>:
c000911c:	53                   	push   ebx
c000911d:	83 ec 14             	sub    esp,0x14
c0009120:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009124:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009126:	53                   	push   ebx
c0009127:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000912a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009136:	74 0f                	je     c0009147 <Device::hibernateAll()+0x2b>
c0009138:	83 ec 0c             	sub    esp,0xc
c000913b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000913e:	e8 d9 ff ff ff       	call   c000911c <Device::hibernateAll()>
c0009143:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009145:	eb e9                	jmp    c0009130 <Device::hibernateAll()+0x14>
c0009147:	83 c4 08             	add    esp,0x8
c000914a:	5b                   	pop    ebx
c000914b:	c3                   	ret    

c000914c <Device::wakeAll()>:
c000914c:	53                   	push   ebx
c000914d:	83 ec 14             	sub    esp,0x14
c0009150:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009154:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009156:	53                   	push   ebx
c0009157:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000915a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009160:	83 c4 10             	add    esp,0x10
c0009163:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009166:	74 0f                	je     c0009177 <Device::wakeAll()+0x2b>
c0009168:	83 ec 0c             	sub    esp,0xc
c000916b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000916e:	e8 d9 ff ff ff       	call   c000914c <Device::wakeAll()>
c0009173:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0009175:	eb e9                	jmp    c0009160 <Device::wakeAll()+0x14>
c0009177:	83 c4 08             	add    esp,0x8
c000917a:	5b                   	pop    ebx
c000917b:	c3                   	ret    

c000917c <Device::detectAll()>:
c000917c:	53                   	push   ebx
c000917d:	83 ec 14             	sub    esp,0x14
c0009180:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009184:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009186:	53                   	push   ebx
c0009187:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000918a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009190:	83 c4 10             	add    esp,0x10
c0009193:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0009196:	74 0f                	je     c00091a7 <Device::detectAll()+0x2b>
c0009198:	83 ec 0c             	sub    esp,0xc
c000919b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000919e:	e8 d9 ff ff ff       	call   c000917c <Device::detectAll()>
c00091a3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091a5:	eb e9                	jmp    c0009190 <Device::detectAll()+0x14>
c00091a7:	83 c4 08             	add    esp,0x8
c00091aa:	5b                   	pop    ebx
c00091ab:	c3                   	ret    

c00091ac <Device::disableLegacyAll()>:
c00091ac:	c3                   	ret    
c00091ad:	90                   	nop

c00091ae <Device::loadDriversForAll()>:
c00091ae:	c3                   	ret    
c00091af:	90                   	nop

c00091b0 <Device::powerSavingAll(PowerSavingLevel)>:
c00091b0:	56                   	push   esi
c00091b1:	53                   	push   ebx
c00091b2:	83 ec 0c             	sub    esp,0xc
c00091b5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00091b9:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00091bd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00091bf:	56                   	push   esi
c00091c0:	53                   	push   ebx
c00091c1:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00091c4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00091ca:	83 c4 10             	add    esp,0x10
c00091cd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00091d0:	74 0f                	je     c00091e1 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00091d2:	52                   	push   edx
c00091d3:	52                   	push   edx
c00091d4:	56                   	push   esi
c00091d5:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00091d8:	e8 d3 ff ff ff       	call   c00091b0 <Device::powerSavingAll(PowerSavingLevel)>
c00091dd:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00091df:	eb e9                	jmp    c00091ca <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00091e1:	58                   	pop    eax
c00091e2:	5b                   	pop    ebx
c00091e3:	5e                   	pop    esi
c00091e4:	c3                   	ret    
c00091e5:	90                   	nop

c00091e6 <Device::setName(char const*)>:
c00091e6:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c00091ee:	e9 4d 74 ff ff       	jmp    c0000640 <strcpy>
c00091f3:	90                   	nop

c00091f4 <Device::Device(char const*)>:
c00091f4:	83 ec 1c             	sub    esp,0x1c
c00091f7:	ba 74 27 02 c0       	mov    edx,0xc0022774
c00091fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009200:	89 10                	mov    DWORD PTR [eax],edx
c0009202:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009206:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0009210:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009214:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000921e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009222:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000922c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009230:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000923a:	83 ec 08             	sub    esp,0x8
c000923d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009241:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009245:	e8 9c ff ff ff       	call   c00091e6 <Device::setName(char const*)>
c000924a:	83 c4 10             	add    esp,0x10
c000924d:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0009255:	83 ec 0c             	sub    esp,0xc
c0009258:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000925c:	e8 a2 60 00 00       	call   c000f303 <malloc>
c0009261:	83 c4 10             	add    esp,0x10
c0009264:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000926a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009271:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009275:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000927b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000927f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009285:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000928b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000928f:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0009295:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000929c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092a0:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00092a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092ab:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00092b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092b6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00092c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092c4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00092ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092d2:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00092dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00092e0:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c00092ea:	90                   	nop
c00092eb:	83 c4 1c             	add    esp,0x1c
c00092ee:	c3                   	ret    
c00092ef:	90                   	nop

c00092f0 <Device::getName()>:
c00092f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00092f4:	05 d0 00 00 00       	add    eax,0xd0
c00092f9:	c3                   	ret    

c00092fa <Device::closeAll()>:
c00092fa:	53                   	push   ebx
c00092fb:	83 ec 08             	sub    esp,0x8
c00092fe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009302:	53                   	push   ebx
c0009303:	e8 e8 ff ff ff       	call   c00092f0 <Device::getName()>
c0009308:	52                   	push   edx
c0009309:	50                   	push   eax
c000930a:	68 28 27 02 c0       	push   0xc0022728
c000930f:	e8 50 dc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0009314:	8b 03                	mov    eax,DWORD PTR [ebx]
c0009316:	6a 00                	push   0x0
c0009318:	6a 00                	push   0x0
c000931a:	6a 00                	push   0x0
c000931c:	53                   	push   ebx
c000931d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0009320:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0009326:	83 c4 20             	add    esp,0x20
c0009329:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000932c:	74 12                	je     c0009340 <Device::closeAll()+0x46>
c000932e:	83 ec 0c             	sub    esp,0xc
c0009331:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009334:	e8 c1 ff ff ff       	call   c00092fa <Device::closeAll()>
c0009339:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	eb e9                	jmp    c0009329 <Device::closeAll()+0x2f>
c0009340:	83 c4 08             	add    esp,0x8
c0009343:	5b                   	pop    ebx
c0009344:	c3                   	ret    
c0009345:	90                   	nop

c0009346 <DriverlessDevice::DriverlessDevice(char const*)>:
c0009346:	83 ec 0c             	sub    esp,0xc
c0009349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000934d:	83 ec 08             	sub    esp,0x8
c0009350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009354:	50                   	push   eax
c0009355:	e8 9a fe ff ff       	call   c00091f4 <Device::Device(char const*)>
c000935a:	83 c4 10             	add    esp,0x10
c000935d:	ba a0 27 02 c0       	mov    edx,0xc00227a0
c0009362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009366:	89 10                	mov    DWORD PTR [eax],edx
c0009368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000936c:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0009376:	90                   	nop
c0009377:	83 c4 0c             	add    esp,0xc
c000937a:	c3                   	ret    
c000937b:	90                   	nop

c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000937c:	57                   	push   edi
c000937d:	56                   	push   esi
c000937e:	53                   	push   ebx
c000937f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009383:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0009387:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000938b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0009391:	75 0c                	jne    c000939f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c0009393:	52                   	push   edx
c0009394:	52                   	push   edx
c0009395:	53                   	push   ebx
c0009396:	56                   	push   esi
c0009397:	e8 90 7a 01 00       	call   c0020e2c <LinkedList<Device>::addElement(Device*)>
c000939c:	83 c4 10             	add    esp,0x10
c000939f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00093a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00093a8:	74 12                	je     c00093bc <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00093aa:	50                   	push   eax
c00093ab:	57                   	push   edi
c00093ac:	56                   	push   esi
c00093ad:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00093b0:	e8 c7 ff ff ff       	call   c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093b5:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00093b7:	83 c4 10             	add    esp,0x10
c00093ba:	eb e9                	jmp    c00093a5 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00093bc:	5b                   	pop    ebx
c00093bd:	5e                   	pop    esi
c00093be:	5f                   	pop    edi
c00093bf:	c3                   	ret    

c00093c0 <getDevicesOfType(DeviceType)>:
c00093c0:	53                   	push   ebx
c00093c1:	83 ec 14             	sub    esp,0x14
c00093c4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00093c8:	53                   	push   ebx
c00093c9:	e8 3a 7b 01 00       	call   c0020f08 <LinkedList<Device>::LinkedList()>
c00093ce:	83 c4 0c             	add    esp,0xc
c00093d1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00093d5:	53                   	push   ebx
c00093d6:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c00093dc:	e8 9b ff ff ff       	call   c000937c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00093e1:	89 d8                	mov    eax,ebx
c00093e3:	83 c4 18             	add    esp,0x18
c00093e6:	5b                   	pop    ebx
c00093e7:	c2 04 00             	ret    0x4
c00093ea:	66 90                	xchg   ax,ax

c00093ec <HardDiskController::HardDiskController(char const*)>:
c00093ec:	83 ec 0c             	sub    esp,0xc
c00093ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00093f3:	83 ec 08             	sub    esp,0x8
c00093f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00093fa:	50                   	push   eax
c00093fb:	e8 f4 fd ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009400:	83 c4 10             	add    esp,0x10
c0009403:	ba cc 27 02 c0       	mov    edx,0xc00227cc
c0009408:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000940c:	89 10                	mov    DWORD PTR [eax],edx
c000940e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009412:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000941c:	90                   	nop
c000941d:	83 c4 0c             	add    esp,0xc
c0009420:	c3                   	ret    
c0009421:	90                   	nop
c0009422:	66 90                	xchg   ax,ax

c0009424 <HardDiskController::~HardDiskController()>:
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	ba cc 27 02 c0       	mov    edx,0xc00227cc
c000942c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009430:	89 10                	mov    DWORD PTR [eax],edx
c0009432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009436:	83 ec 0c             	sub    esp,0xc
c0009439:	50                   	push   eax
c000943a:	e8 55 fb ff ff       	call   c0008f94 <Device::~Device()>
c000943f:	83 c4 10             	add    esp,0x10
c0009442:	90                   	nop
c0009443:	83 c4 0c             	add    esp,0xc
c0009446:	c3                   	ret    
c0009447:	90                   	nop

c0009448 <HardDiskController::~HardDiskController()>:
c0009448:	83 ec 0c             	sub    esp,0xc
c000944b:	83 ec 0c             	sub    esp,0xc
c000944e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009452:	e8 cd ff ff ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	83 ec 08             	sub    esp,0x8
c000945d:	68 58 01 00 00       	push   0x158
c0009462:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009466:	e8 20 35 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c000946b:	83 c4 10             	add    esp,0x10
c000946e:	83 c4 0c             	add    esp,0xc
c0009471:	c3                   	ret    

c0009472 <PhysicalDisk::eject()>:
c0009472:	83 c8 ff             	or     eax,0xffffffff
c0009475:	c3                   	ret    

c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c0009476:	83 ec 0c             	sub    esp,0xc
c0009479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947d:	83 ec 08             	sub    esp,0x8
c0009480:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009484:	50                   	push   eax
c0009485:	e8 6a fd ff ff       	call   c00091f4 <Device::Device(char const*)>
c000948a:	83 c4 10             	add    esp,0x10
c000948d:	ba f8 27 02 c0       	mov    edx,0xc00227f8
c0009492:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009496:	89 10                	mov    DWORD PTR [eax],edx
c0009498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000949c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00094a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094a7:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00094ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094b2:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00094bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094c0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00094c4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00094ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00094ce:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00094d8:	90                   	nop
c00094d9:	83 c4 0c             	add    esp,0xc
c00094dc:	c3                   	ret    
c00094dd:	90                   	nop

c00094de <PhysicalDisk::startCache()>:
c00094de:	56                   	push   esi
c00094df:	53                   	push   ebx
c00094e0:	83 ec 10             	sub    esp,0x10
c00094e3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00094e7:	6a 44                	push   0x44
c00094e9:	e8 15 5e 00 00       	call   c000f303 <malloc>
c00094ee:	89 c6                	mov    esi,eax
c00094f0:	58                   	pop    eax
c00094f1:	5a                   	pop    edx
c00094f2:	53                   	push   ebx
c00094f3:	56                   	push   esi
c00094f4:	e8 a7 13 00 00       	call   c000a8a0 <VCache::VCache(PhysicalDisk*)>
c00094f9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00094ff:	83 c4 14             	add    esp,0x14
c0009502:	5b                   	pop    ebx
c0009503:	5e                   	pop    esi
c0009504:	c3                   	ret    
c0009505:	90                   	nop

c0009506 <PhysicalDisk::~PhysicalDisk()>:
c0009506:	83 ec 0c             	sub    esp,0xc
c0009509:	ba f8 27 02 c0       	mov    edx,0xc00227f8
c000950e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009512:	89 10                	mov    DWORD PTR [eax],edx
c0009514:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009518:	83 ec 0c             	sub    esp,0xc
c000951b:	50                   	push   eax
c000951c:	e8 73 fa ff ff       	call   c0008f94 <Device::~Device()>
c0009521:	83 c4 10             	add    esp,0x10
c0009524:	90                   	nop
c0009525:	83 c4 0c             	add    esp,0xc
c0009528:	c3                   	ret    
c0009529:	90                   	nop

c000952a <PhysicalDisk::~PhysicalDisk()>:
c000952a:	83 ec 0c             	sub    esp,0xc
c000952d:	83 ec 0c             	sub    esp,0xc
c0009530:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009534:	e8 cd ff ff ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0009539:	83 c4 10             	add    esp,0x10
c000953c:	83 ec 08             	sub    esp,0x8
c000953f:	68 6c 01 00 00       	push   0x16c
c0009544:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009548:	e8 3e 34 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c000954d:	83 c4 10             	add    esp,0x10
c0009550:	83 c4 0c             	add    esp,0xc
c0009553:	c3                   	ret    

c0009554 <startGUI(void*)>:
c0009554:	55                   	push   ebp
c0009555:	89 e5                	mov    ebp,esp
c0009557:	53                   	push   ebx
c0009558:	83 ec 04             	sub    esp,0x4
c000955b:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0009563:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0009568:	85 c0                	test   eax,eax
c000956a:	75 01                	jne    c000956d <startGUI(void*)+0x19>
c000956c:	fb                   	sti    
c000956d:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009573:	83 ec 08             	sub    esp,0x8
c0009576:	6a 01                	push   0x1
c0009578:	68 28 28 02 c0       	push   0xc0022828
c000957d:	e8 e3 c1 00 00       	call   c0015765 <Thr::loadDLL(char const*, bool)>
c0009582:	83 c4 10             	add    esp,0x10
c0009585:	83 ec 08             	sub    esp,0x8
c0009588:	53                   	push   ebx
c0009589:	50                   	push   eax
c000958a:	e8 28 c4 00 00       	call   c00159b7 <Thr::executeDLL(unsigned long, void*)>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c0009598:	83 ec 08             	sub    esp,0x8
c000959b:	6a 01                	push   0x1
c000959d:	68 42 28 02 c0       	push   0xc0022842
c00095a2:	e8 be c1 00 00       	call   c0015765 <Thr::loadDLL(char const*, bool)>
c00095a7:	83 c4 10             	add    esp,0x10
c00095aa:	83 ec 08             	sub    esp,0x8
c00095ad:	53                   	push   ebx
c00095ae:	50                   	push   eax
c00095af:	e8 03 c4 00 00       	call   c00159b7 <Thr::executeDLL(unsigned long, void*)>
c00095b4:	83 c4 10             	add    esp,0x10
c00095b7:	eb fe                	jmp    c00095b7 <startGUI(void*)+0x63>

c00095b9 <startGUIVESA(void*)>:
c00095b9:	55                   	push   ebp
c00095ba:	89 e5                	mov    ebp,esp
c00095bc:	53                   	push   ebx
c00095bd:	83 ec 04             	sub    esp,0x4
c00095c0:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00095c8:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00095cd:	85 c0                	test   eax,eax
c00095cf:	75 01                	jne    c00095d2 <startGUIVESA(void*)+0x19>
c00095d1:	fb                   	sti    
c00095d2:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095d8:	83 ec 08             	sub    esp,0x8
c00095db:	6a 01                	push   0x1
c00095dd:	68 60 28 02 c0       	push   0xc0022860
c00095e2:	e8 7e c1 00 00       	call   c0015765 <Thr::loadDLL(char const*, bool)>
c00095e7:	83 c4 10             	add    esp,0x10
c00095ea:	83 ec 08             	sub    esp,0x8
c00095ed:	53                   	push   ebx
c00095ee:	50                   	push   eax
c00095ef:	e8 c3 c3 00 00       	call   c00159b7 <Thr::executeDLL(unsigned long, void*)>
c00095f4:	83 c4 10             	add    esp,0x10
c00095f7:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c00095fd:	83 ec 08             	sub    esp,0x8
c0009600:	6a 01                	push   0x1
c0009602:	68 42 28 02 c0       	push   0xc0022842
c0009607:	e8 59 c1 00 00       	call   c0015765 <Thr::loadDLL(char const*, bool)>
c000960c:	83 c4 10             	add    esp,0x10
c000960f:	83 ec 08             	sub    esp,0x8
c0009612:	53                   	push   ebx
c0009613:	50                   	push   eax
c0009614:	e8 9e c3 00 00       	call   c00159b7 <Thr::executeDLL(unsigned long, void*)>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	eb fe                	jmp    c000961c <startGUIVESA(void*)+0x63>

c000961e <sendKeyToTerminal(unsigned char)>:
c000961e:	55                   	push   ebp
c000961f:	89 e5                	mov    ebp,esp
c0009621:	83 ec 28             	sub    esp,0x28
c0009624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009627:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000962a:	a1 54 ce 02 c0       	mov    eax,ds:0xc002ce54
c000962f:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0009633:	83 ec 08             	sub    esp,0x8
c0009636:	52                   	push   edx
c0009637:	50                   	push   eax
c0009638:	e8 2f 8b 00 00       	call   c001216c <VgaText::receiveKey(unsigned char)>
c000963d:	83 c4 10             	add    esp,0x10
c0009640:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009644:	83 f8 0a             	cmp    eax,0xa
c0009647:	74 16                	je     c000965f <sendKeyToTerminal(unsigned char)+0x41>
c0009649:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000964d:	83 f8 03             	cmp    eax,0x3
c0009650:	74 0d                	je     c000965f <sendKeyToTerminal(unsigned char)+0x41>
c0009652:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0009656:	83 f8 1c             	cmp    eax,0x1c
c0009659:	0f 85 92 00 00 00    	jne    c00096f1 <sendKeyToTerminal(unsigned char)+0xd3>
c000965f:	fa                   	cli    
c0009660:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0009665:	83 c0 01             	add    eax,0x1
c0009668:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000966d:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0009672:	83 c0 01             	add    eax,0x1
c0009675:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c000967a:	a1 20 a3 02 c0       	mov    eax,ds:0xc002a320
c000967f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0009682:	c7 05 20 a3 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a320,0x0
c000968c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0009690:	74 1f                	je     c00096b1 <sendKeyToTerminal(unsigned char)+0x93>
c0009692:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009695:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0009698:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000969b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000969e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00096a1:	83 ec 0c             	sub    esp,0xc
c00096a4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00096a7:	e8 e8 ce 00 00       	call   c0016594 <unblockTask(ThreadControlBlock*)>
c00096ac:	83 c4 10             	add    esp,0x10
c00096af:	eb db                	jmp    c000968c <sendKeyToTerminal(unsigned char)+0x6e>
c00096b1:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00096b6:	83 e8 01             	sub    eax,0x1
c00096b9:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00096be:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00096c3:	85 c0                	test   eax,eax
c00096c5:	75 18                	jne    c00096df <sendKeyToTerminal(unsigned char)+0xc1>
c00096c7:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c00096cc:	85 c0                	test   eax,eax
c00096ce:	74 0f                	je     c00096df <sendKeyToTerminal(unsigned char)+0xc1>
c00096d0:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c00096da:	e8 a5 cb 00 00       	call   c0016284 <schedule()>
c00096df:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00096e7:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00096ec:	85 c0                	test   eax,eax
c00096ee:	75 01                	jne    c00096f1 <sendKeyToTerminal(unsigned char)+0xd3>
c00096f0:	fb                   	sti    
c00096f1:	90                   	nop
c00096f2:	c9                   	leave  
c00096f3:	c3                   	ret    

c00096f4 <sendKeyboardToken(KeyboardToken)>:
c00096f4:	55                   	push   ebp
c00096f5:	89 e5                	mov    ebp,esp
c00096f7:	83 ec 18             	sub    esp,0x18
c00096fa:	e8 7b 68 00 00       	call   c000ff7a <KeUserIOReceived()>
c00096ff:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0009702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009705:	0f b7 c0             	movzx  eax,ax
c0009708:	83 f2 01             	xor    edx,0x1
c000970b:	88 90 40 a3 02 c0    	mov    BYTE PTR [eax-0x3ffd5cc0],dl
c0009711:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009716:	85 c0                	test   eax,eax
c0009718:	74 24                	je     c000973e <sendKeyboardToken(KeyboardToken)+0x4a>
c000971a:	8b 0d 28 a3 02 c0    	mov    ecx,DWORD PTR ds:0xc002a328
c0009720:	83 ec 04             	sub    esp,0x4
c0009723:	68 40 a3 02 c0       	push   0xc002a340
c0009728:	83 ec 08             	sub    esp,0x8
c000972b:	89 e2                	mov    edx,esp
c000972d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009730:	89 02                	mov    DWORD PTR [edx],eax
c0009732:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009735:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009739:	ff d1                	call   ecx
c000973b:	83 c4 10             	add    esp,0x10
c000973e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0009742:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0009745:	0f b6 c0             	movzx  eax,al
c0009748:	85 c0                	test   eax,eax
c000974a:	0f 84 da 00 00 00    	je     c000982a <sendKeyboardToken(KeyboardToken)+0x136>
c0009750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009753:	0f b7 c0             	movzx  eax,ax
c0009756:	3d 18 03 00 00       	cmp    eax,0x318
c000975b:	75 06                	jne    c0009763 <sendKeyboardToken(KeyboardToken)+0x6f>
c000975d:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0009763:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009766:	0f b7 c0             	movzx  eax,ax
c0009769:	3d 19 03 00 00       	cmp    eax,0x319
c000976e:	75 06                	jne    c0009776 <sendKeyboardToken(KeyboardToken)+0x82>
c0009770:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0009776:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009779:	0f b7 c0             	movzx  eax,ax
c000977c:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009781:	75 06                	jne    c0009789 <sendKeyboardToken(KeyboardToken)+0x95>
c0009783:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0009789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000978c:	0f b7 c0             	movzx  eax,ax
c000978f:	3d 1b 03 00 00       	cmp    eax,0x31b
c0009794:	75 06                	jne    c000979c <sendKeyboardToken(KeyboardToken)+0xa8>
c0009796:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000979c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000979f:	0f b7 c0             	movzx  eax,ax
c00097a2:	3d 1c 03 00 00       	cmp    eax,0x31c
c00097a7:	75 06                	jne    c00097af <sendKeyboardToken(KeyboardToken)+0xbb>
c00097a9:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c00097af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097b2:	0f b7 c0             	movzx  eax,ax
c00097b5:	3d 1d 03 00 00       	cmp    eax,0x31d
c00097ba:	75 06                	jne    c00097c2 <sendKeyboardToken(KeyboardToken)+0xce>
c00097bc:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00097c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097c5:	0f b7 c0             	movzx  eax,ax
c00097c8:	3d 1e 03 00 00       	cmp    eax,0x31e
c00097cd:	75 06                	jne    c00097d5 <sendKeyboardToken(KeyboardToken)+0xe1>
c00097cf:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c00097d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097d8:	0f b7 c0             	movzx  eax,ax
c00097db:	3d 1f 03 00 00       	cmp    eax,0x31f
c00097e0:	75 06                	jne    c00097e8 <sendKeyboardToken(KeyboardToken)+0xf4>
c00097e2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c00097e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097eb:	0f b7 c0             	movzx  eax,ax
c00097ee:	3d 20 03 00 00       	cmp    eax,0x320
c00097f3:	75 06                	jne    c00097fb <sendKeyboardToken(KeyboardToken)+0x107>
c00097f5:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c00097fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00097fe:	0f b7 c0             	movzx  eax,ax
c0009801:	3d 21 03 00 00       	cmp    eax,0x321
c0009806:	75 06                	jne    c000980e <sendKeyboardToken(KeyboardToken)+0x11a>
c0009808:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000980e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009811:	0f b7 c0             	movzx  eax,ax
c0009814:	3d 22 03 00 00       	cmp    eax,0x322
c0009819:	0f 85 f1 00 00 00    	jne    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c000981f:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0009825:	e9 e6 00 00 00       	jmp    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c000982a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000982d:	0f b7 c0             	movzx  eax,ax
c0009830:	3d 18 03 00 00       	cmp    eax,0x318
c0009835:	75 0a                	jne    c0009841 <sendKeyboardToken(KeyboardToken)+0x14d>
c0009837:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000983d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009844:	0f b7 c0             	movzx  eax,ax
c0009847:	3d 19 03 00 00       	cmp    eax,0x319
c000984c:	75 0a                	jne    c0009858 <sendKeyboardToken(KeyboardToken)+0x164>
c000984e:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0009854:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000985b:	0f b7 c0             	movzx  eax,ax
c000985e:	3d 1a 03 00 00       	cmp    eax,0x31a
c0009863:	75 0a                	jne    c000986f <sendKeyboardToken(KeyboardToken)+0x17b>
c0009865:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000986b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000986f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009872:	0f b7 c0             	movzx  eax,ax
c0009875:	3d 1b 03 00 00       	cmp    eax,0x31b
c000987a:	75 0a                	jne    c0009886 <sendKeyboardToken(KeyboardToken)+0x192>
c000987c:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0009882:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009889:	0f b7 c0             	movzx  eax,ax
c000988c:	3d 1c 03 00 00       	cmp    eax,0x31c
c0009891:	75 0a                	jne    c000989d <sendKeyboardToken(KeyboardToken)+0x1a9>
c0009893:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0009899:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000989d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098a0:	0f b7 c0             	movzx  eax,ax
c00098a3:	3d 1d 03 00 00       	cmp    eax,0x31d
c00098a8:	75 0a                	jne    c00098b4 <sendKeyboardToken(KeyboardToken)+0x1c0>
c00098aa:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00098b0:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098b7:	0f b7 c0             	movzx  eax,ax
c00098ba:	3d 1e 03 00 00       	cmp    eax,0x31e
c00098bf:	75 0a                	jne    c00098cb <sendKeyboardToken(KeyboardToken)+0x1d7>
c00098c1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00098c7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098ce:	0f b7 c0             	movzx  eax,ax
c00098d1:	3d 1f 03 00 00       	cmp    eax,0x31f
c00098d6:	75 0a                	jne    c00098e2 <sendKeyboardToken(KeyboardToken)+0x1ee>
c00098d8:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00098de:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098e5:	0f b7 c0             	movzx  eax,ax
c00098e8:	3d 20 03 00 00       	cmp    eax,0x320
c00098ed:	75 0a                	jne    c00098f9 <sendKeyboardToken(KeyboardToken)+0x205>
c00098ef:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c00098f5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00098f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00098fc:	0f b7 c0             	movzx  eax,ax
c00098ff:	3d 21 03 00 00       	cmp    eax,0x321
c0009904:	75 0a                	jne    c0009910 <sendKeyboardToken(KeyboardToken)+0x21c>
c0009906:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000990c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0009910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009913:	0f b7 c0             	movzx  eax,ax
c0009916:	3d 00 02 00 00       	cmp    eax,0x200
c000991b:	75 2f                	jne    c000994c <sendKeyboardToken(KeyboardToken)+0x258>
c000991d:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c0009922:	83 f0 01             	xor    eax,0x1
c0009925:	0f b6 c0             	movzx  eax,al
c0009928:	85 c0                	test   eax,eax
c000992a:	74 20                	je     c000994c <sendKeyboardToken(KeyboardToken)+0x258>
c000992c:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0009931:	6a 01                	push   0x1
c0009933:	6a 00                	push   0x0
c0009935:	68 54 95 00 c0       	push   0xc0009554
c000993a:	50                   	push   eax
c000993b:	e8 ec c6 00 00       	call   c001602c <Process::createThread(void (*)(void*), void*, int)>
c0009940:	83 c4 10             	add    esp,0x10
c0009943:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c000994a:	eb 3a                	jmp    c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c000994c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000994f:	0f b7 c0             	movzx  eax,ax
c0009952:	3d 01 02 00 00       	cmp    eax,0x201
c0009957:	75 2d                	jne    c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c0009959:	a0 40 a7 02 c0       	mov    al,ds:0xc002a740
c000995e:	83 f0 01             	xor    eax,0x1
c0009961:	0f b6 c0             	movzx  eax,al
c0009964:	85 c0                	test   eax,eax
c0009966:	74 1e                	je     c0009986 <sendKeyboardToken(KeyboardToken)+0x292>
c0009968:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c000996d:	6a 01                	push   0x1
c000996f:	6a 00                	push   0x0
c0009971:	68 b9 95 00 c0       	push   0xc00095b9
c0009976:	50                   	push   eax
c0009977:	e8 b0 c6 00 00       	call   c001602c <Process::createThread(void (*)(void*), void*, int)>
c000997c:	83 c4 10             	add    esp,0x10
c000997f:	c6 05 40 a7 02 c0 01 	mov    BYTE PTR ds:0xc002a740,0x1
c0009986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009989:	0f b7 c0             	movzx  eax,ax
c000998c:	3d 25 03 00 00       	cmp    eax,0x325
c0009991:	75 06                	jne    c0009999 <sendKeyboardToken(KeyboardToken)+0x2a5>
c0009993:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0009999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000999c:	0f b7 c0             	movzx  eax,ax
c000999f:	3d 24 03 00 00       	cmp    eax,0x324
c00099a4:	75 06                	jne    c00099ac <sendKeyboardToken(KeyboardToken)+0x2b8>
c00099a6:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00099ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099af:	0f b7 c0             	movzx  eax,ax
c00099b2:	3d 23 03 00 00       	cmp    eax,0x323
c00099b7:	75 06                	jne    c00099bf <sendKeyboardToken(KeyboardToken)+0x2cb>
c00099b9:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00099bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099c2:	0f b7 c0             	movzx  eax,ax
c00099c5:	3d 26 03 00 00       	cmp    eax,0x326
c00099ca:	75 06                	jne    c00099d2 <sendKeyboardToken(KeyboardToken)+0x2de>
c00099cc:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00099d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099d5:	0f b7 c0             	movzx  eax,ax
c00099d8:	3d 27 03 00 00       	cmp    eax,0x327
c00099dd:	75 06                	jne    c00099e5 <sendKeyboardToken(KeyboardToken)+0x2f1>
c00099df:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00099e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00099e8:	0f b7 c0             	movzx  eax,ax
c00099eb:	3d 22 03 00 00       	cmp    eax,0x322
c00099f0:	75 06                	jne    c00099f8 <sendKeyboardToken(KeyboardToken)+0x304>
c00099f2:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00099f8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00099fc:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00099ff:	83 f0 01             	xor    eax,0x1
c0009a02:	0f b6 c0             	movzx  eax,al
c0009a05:	85 c0                	test   eax,eax
c0009a07:	74 7c                	je     c0009a85 <sendKeyboardToken(KeyboardToken)+0x391>
c0009a09:	a0 41 a4 02 c0       	mov    al,ds:0xc002a441
c0009a0e:	0f b6 c0             	movzx  eax,al
c0009a11:	85 c0                	test   eax,eax
c0009a13:	74 43                	je     c0009a58 <sendKeyboardToken(KeyboardToken)+0x364>
c0009a15:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a19:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c0009a1d:	85 c0                	test   eax,eax
c0009a1f:	74 2b                	je     c0009a4c <sendKeyboardToken(KeyboardToken)+0x358>
c0009a21:	8b 15 44 a7 02 c0    	mov    edx,DWORD PTR ds:0xc002a744
c0009a27:	89 d0                	mov    eax,edx
c0009a29:	c1 e0 02             	shl    eax,0x2
c0009a2c:	01 d0                	add    eax,edx
c0009a2e:	01 c0                	add    eax,eax
c0009a30:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a38:	0f b7 c0             	movzx  eax,ax
c0009a3b:	8d 50 d0             	lea    edx,[eax-0x30]
c0009a3e:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a43:	01 d0                	add    eax,edx
c0009a45:	a3 44 a7 02 c0       	mov    ds:0xc002a744,eax
c0009a4a:	eb 71                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a4c:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a56:	eb 65                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a58:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a5d:	85 c0                	test   eax,eax
c0009a5f:	74 18                	je     c0009a79 <sendKeyboardToken(KeyboardToken)+0x385>
c0009a61:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a66:	0f b6 c0             	movzx  eax,al
c0009a69:	83 ec 0c             	sub    esp,0xc
c0009a6c:	50                   	push   eax
c0009a6d:	e8 ac fb ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009a72:	83 c4 10             	add    esp,0x10
c0009a75:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009a79:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009a83:	eb 38                	jmp    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009a88:	0f b7 c0             	movzx  eax,ax
c0009a8b:	3d 01 01 00 00       	cmp    eax,0x101
c0009a90:	75 2b                	jne    c0009abd <sendKeyboardToken(KeyboardToken)+0x3c9>
c0009a92:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009a97:	85 c0                	test   eax,eax
c0009a99:	74 18                	je     c0009ab3 <sendKeyboardToken(KeyboardToken)+0x3bf>
c0009a9b:	a1 44 a7 02 c0       	mov    eax,ds:0xc002a744
c0009aa0:	0f b6 c0             	movzx  eax,al
c0009aa3:	83 ec 0c             	sub    esp,0xc
c0009aa6:	50                   	push   eax
c0009aa7:	e8 72 fb ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009aac:	83 c4 10             	add    esp,0x10
c0009aaf:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0009ab3:	c7 05 44 a7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002a744,0x0
c0009abd:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009ac0:	83 f0 01             	xor    eax,0x1
c0009ac3:	0f b6 c0             	movzx  eax,al
c0009ac6:	85 c0                	test   eax,eax
c0009ac8:	74 5a                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009aca:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009acd:	83 f0 01             	xor    eax,0x1
c0009ad0:	0f b6 c0             	movzx  eax,al
c0009ad3:	85 c0                	test   eax,eax
c0009ad5:	74 4d                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ad7:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009adc:	83 f0 01             	xor    eax,0x1
c0009adf:	0f b6 c0             	movzx  eax,al
c0009ae2:	85 c0                	test   eax,eax
c0009ae4:	74 3e                	je     c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009ae9:	0f b7 c0             	movzx  eax,ax
c0009aec:	83 f8 1f             	cmp    eax,0x1f
c0009aef:	76 0b                	jbe    c0009afc <sendKeyboardToken(KeyboardToken)+0x408>
c0009af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009af4:	0f b7 c0             	movzx  eax,ax
c0009af7:	83 f8 7e             	cmp    eax,0x7e
c0009afa:	76 16                	jbe    c0009b12 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009afc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009aff:	0f b7 c0             	movzx  eax,ax
c0009b02:	83 f8 0a             	cmp    eax,0xa
c0009b05:	74 0b                	je     c0009b12 <sendKeyboardToken(KeyboardToken)+0x41e>
c0009b07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b0a:	0f b7 c0             	movzx  eax,ax
c0009b0d:	83 f8 08             	cmp    eax,0x8
c0009b10:	75 12                	jne    c0009b24 <sendKeyboardToken(KeyboardToken)+0x430>
c0009b12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b15:	0f b6 c0             	movzx  eax,al
c0009b18:	83 ec 0c             	sub    esp,0xc
c0009b1b:	50                   	push   eax
c0009b1c:	e8 fd fa ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009b21:	83 c4 10             	add    esp,0x10
c0009b24:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0009b27:	83 f0 01             	xor    eax,0x1
c0009b2a:	0f b6 c0             	movzx  eax,al
c0009b2d:	85 c0                	test   eax,eax
c0009b2f:	74 5d                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b31:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b34:	83 f0 01             	xor    eax,0x1
c0009b37:	0f b6 c0             	movzx  eax,al
c0009b3a:	85 c0                	test   eax,eax
c0009b3c:	74 50                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b3e:	a0 40 a4 02 c0       	mov    al,ds:0xc002a440
c0009b43:	0f b6 c0             	movzx  eax,al
c0009b46:	85 c0                	test   eax,eax
c0009b48:	74 44                	je     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b4d:	0f b7 c0             	movzx  eax,ax
c0009b50:	83 f8 3f             	cmp    eax,0x3f
c0009b53:	76 39                	jbe    c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b58:	0f b7 c0             	movzx  eax,ax
c0009b5b:	83 f8 7f             	cmp    eax,0x7f
c0009b5e:	77 2e                	ja     c0009b8e <sendKeyboardToken(KeyboardToken)+0x49a>
c0009b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b63:	88 c2                	mov    dl,al
c0009b65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b68:	0f b7 c0             	movzx  eax,ax
c0009b6b:	83 f8 5f             	cmp    eax,0x5f
c0009b6e:	76 04                	jbe    c0009b74 <sendKeyboardToken(KeyboardToken)+0x480>
c0009b70:	b0 20                	mov    al,0x20
c0009b72:	eb 02                	jmp    c0009b76 <sendKeyboardToken(KeyboardToken)+0x482>
c0009b74:	b0 00                	mov    al,0x0
c0009b76:	89 d1                	mov    ecx,edx
c0009b78:	29 c1                	sub    ecx,eax
c0009b7a:	89 c8                	mov    eax,ecx
c0009b7c:	83 e8 40             	sub    eax,0x40
c0009b7f:	0f b6 c0             	movzx  eax,al
c0009b82:	83 ec 0c             	sub    esp,0xc
c0009b85:	50                   	push   eax
c0009b86:	e8 93 fa ff ff       	call   c000961e <sendKeyToTerminal(unsigned char)>
c0009b8b:	83 c4 10             	add    esp,0x10
c0009b8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009b91:	0f b7 c0             	movzx  eax,ax
c0009b94:	3d 00 03 00 00       	cmp    eax,0x300
c0009b99:	75 12                	jne    c0009bad <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009b9b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0009b9e:	83 f0 01             	xor    eax,0x1
c0009ba1:	0f b6 c0             	movzx  eax,al
c0009ba4:	85 c0                	test   eax,eax
c0009ba6:	74 05                	je     c0009bad <sendKeyboardToken(KeyboardToken)+0x4b9>
c0009ba8:	e8 b4 7c 00 00       	call   c0011861 <doTerminalCycle()>
c0009bad:	90                   	nop
c0009bae:	c9                   	leave  
c0009baf:	c3                   	ret    

c0009bb0 <clearInternalKeybuffer(VgaText*)>:
c0009bb0:	55                   	push   ebp
c0009bb1:	89 e5                	mov    ebp,esp
c0009bb3:	83 ec 08             	sub    esp,0x8
c0009bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009bb9:	05 02 01 00 00       	add    eax,0x102
c0009bbe:	83 ec 0c             	sub    esp,0xc
c0009bc1:	50                   	push   eax
c0009bc2:	e8 a9 69 ff ff       	call   c0000570 <strlen>
c0009bc7:	83 c4 10             	add    esp,0x10
c0009bca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009bcd:	81 c2 02 01 00 00    	add    edx,0x102
c0009bd3:	83 ec 04             	sub    esp,0x4
c0009bd6:	50                   	push   eax
c0009bd7:	6a 00                	push   0x0
c0009bd9:	52                   	push   edx
c0009bda:	e8 11 69 ff ff       	call   c00004f0 <memset>
c0009bdf:	83 c4 10             	add    esp,0x10
c0009be2:	90                   	nop
c0009be3:	c9                   	leave  
c0009be4:	c3                   	ret    

c0009be5 <readKeyboard(VgaText*, char*, unsigned long)>:
c0009be5:	55                   	push   ebp
c0009be6:	89 e5                	mov    ebp,esp
c0009be8:	83 ec 18             	sub    esp,0x18
c0009beb:	a1 28 a3 02 c0       	mov    eax,ds:0xc002a328
c0009bf0:	85 c0                	test   eax,eax
c0009bf2:	74 2a                	je     c0009c1e <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0009bf4:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c0009bfa:	8b 0d 28 a3 02 c0    	mov    ecx,DWORD PTR ds:0xc002a328
c0009c00:	83 ec 04             	sub    esp,0x4
c0009c03:	68 40 a3 02 c0       	push   0xc002a340
c0009c08:	83 ec 08             	sub    esp,0x8
c0009c0b:	89 e2                	mov    edx,esp
c0009c0d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0009c10:	89 02                	mov    DWORD PTR [edx],eax
c0009c12:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0009c15:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0009c19:	ff d1                	call   ecx
c0009c1b:	83 c4 10             	add    esp,0x10
c0009c1e:	fb                   	sti    
c0009c1f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0009c26:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0009c2a:	0f 84 08 01 00 00    	je     c0009d38 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c0009c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c33:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c39:	0f be c0             	movsx  eax,al
c0009c3c:	85 c0                	test   eax,eax
c0009c3e:	75 27                	jne    c0009c67 <readKeyboard(VgaText*, char*, unsigned long)+0x82>
c0009c40:	fa                   	cli    
c0009c41:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0009c46:	83 c0 01             	add    eax,0x1
c0009c49:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0009c4e:	e8 31 c6 00 00       	call   c0016284 <schedule()>
c0009c53:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0009c5b:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0009c60:	85 c0                	test   eax,eax
c0009c62:	75 cc                	jne    c0009c30 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c64:	fb                   	sti    
c0009c65:	eb c9                	jmp    c0009c30 <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c0009c67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0009c6a:	8d 50 01             	lea    edx,[eax+0x1]
c0009c6d:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0009c70:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009c73:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c0009c79:	88 10                	mov    BYTE PTR [eax],dl
c0009c7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009c7e:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c0009c84:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0009c87:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009c8b:	83 f8 03             	cmp    eax,0x3
c0009c8e:	75 1e                	jne    c0009cae <readKeyboard(VgaText*, char*, unsigned long)+0xc9>
c0009c90:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c95:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c97:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c9a:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009ca0:	83 ec 08             	sub    esp,0x8
c0009ca3:	6a 02                	push   0x2
c0009ca5:	50                   	push   eax
c0009ca6:	e8 e8 6a 00 00       	call   c0010793 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cab:	83 c4 10             	add    esp,0x10
c0009cae:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009cb2:	83 f8 1c             	cmp    eax,0x1c
c0009cb5:	75 1e                	jne    c0009cd5 <readKeyboard(VgaText*, char*, unsigned long)+0xf0>
c0009cb7:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009cbc:	8b 00                	mov    eax,DWORD PTR [eax]
c0009cbe:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009cc1:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c0009cc7:	83 ec 08             	sub    esp,0x8
c0009cca:	6a 09                	push   0x9
c0009ccc:	50                   	push   eax
c0009ccd:	e8 c1 6a 00 00       	call   c0010793 <KeRaiseSignal(SigHandlerBlock*, int)>
c0009cd2:	83 c4 10             	add    esp,0x10
c0009cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009cd8:	05 02 01 00 00       	add    eax,0x102
c0009cdd:	83 ec 0c             	sub    esp,0xc
c0009ce0:	50                   	push   eax
c0009ce1:	e8 8a 68 ff ff       	call   c0000570 <strlen>
c0009ce6:	83 c4 10             	add    esp,0x10
c0009ce9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cec:	81 c2 02 01 00 00    	add    edx,0x102
c0009cf2:	8d 4a 01             	lea    ecx,[edx+0x1]
c0009cf5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0009cf8:	81 c2 02 01 00 00    	add    edx,0x102
c0009cfe:	83 ec 04             	sub    esp,0x4
c0009d01:	50                   	push   eax
c0009d02:	51                   	push   ecx
c0009d03:	52                   	push   edx
c0009d04:	e8 c7 66 ff ff       	call   c00003d0 <memmove>
c0009d09:	83 c4 10             	add    esp,0x10
c0009d0c:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c0009d10:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c0009d14:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d18:	83 f8 0a             	cmp    eax,0xa
c0009d1b:	74 16                	je     c0009d33 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009d1d:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d21:	83 f8 03             	cmp    eax,0x3
c0009d24:	74 0d                	je     c0009d33 <readKeyboard(VgaText*, char*, unsigned long)+0x14e>
c0009d26:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c0009d2a:	83 f8 1c             	cmp    eax,0x1c
c0009d2d:	0f 85 f3 fe ff ff    	jne    c0009c26 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c0009d33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d36:	eb 03                	jmp    c0009d3b <readKeyboard(VgaText*, char*, unsigned long)+0x156>
c0009d38:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0009d3b:	c9                   	leave  
c0009d3c:	c3                   	ret    
c0009d3d:	90                   	nop

c0009d3e <Keyboard::Keyboard(char const*)>:
c0009d3e:	83 ec 0c             	sub    esp,0xc
c0009d41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d45:	83 ec 08             	sub    esp,0x8
c0009d48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009d4c:	50                   	push   eax
c0009d4d:	e8 a2 f4 ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009d52:	83 c4 10             	add    esp,0x10
c0009d55:	ba 84 28 02 c0       	mov    edx,0xc0022884
c0009d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d5e:	89 10                	mov    DWORD PTR [eax],edx
c0009d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d64:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0009d6e:	c6 05 24 a3 02 c0 01 	mov    BYTE PTR ds:0xc002a324,0x1
c0009d75:	90                   	nop
c0009d76:	83 c4 0c             	add    esp,0xc
c0009d79:	c3                   	ret    

c0009d7a <Keyboard::~Keyboard()>:
c0009d7a:	83 ec 0c             	sub    esp,0xc
c0009d7d:	ba 84 28 02 c0       	mov    edx,0xc0022884
c0009d82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d86:	89 10                	mov    DWORD PTR [eax],edx
c0009d88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009d8c:	83 ec 0c             	sub    esp,0xc
c0009d8f:	50                   	push   eax
c0009d90:	e8 ff f1 ff ff       	call   c0008f94 <Device::~Device()>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	90                   	nop
c0009d99:	83 c4 0c             	add    esp,0xc
c0009d9c:	c3                   	ret    
c0009d9d:	90                   	nop

c0009d9e <Keyboard::~Keyboard()>:
c0009d9e:	83 ec 0c             	sub    esp,0xc
c0009da1:	83 ec 0c             	sub    esp,0xc
c0009da4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009da8:	e8 cd ff ff ff       	call   c0009d7a <Keyboard::~Keyboard()>
c0009dad:	83 c4 10             	add    esp,0x10
c0009db0:	83 ec 08             	sub    esp,0x8
c0009db3:	68 5c 01 00 00       	push   0x15c
c0009db8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dbc:	e8 ca 2b 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c0009dc1:	83 c4 10             	add    esp,0x10
c0009dc4:	83 c4 0c             	add    esp,0xc
c0009dc7:	c3                   	ret    

c0009dc8 <LogicalDisk::close(int, int, void*)>:
c0009dc8:	83 c8 ff             	or     eax,0xffffffff
c0009dcb:	c3                   	ret    

c0009dcc <LogicalDisk::~LogicalDisk()>:
c0009dcc:	83 ec 0c             	sub    esp,0xc
c0009dcf:	ba fc 28 02 c0       	mov    edx,0xc00228fc
c0009dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dd8:	89 10                	mov    DWORD PTR [eax],edx
c0009dda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009dde:	83 ec 0c             	sub    esp,0xc
c0009de1:	50                   	push   eax
c0009de2:	e8 ad f1 ff ff       	call   c0008f94 <Device::~Device()>
c0009de7:	83 c4 10             	add    esp,0x10
c0009dea:	90                   	nop
c0009deb:	83 c4 0c             	add    esp,0xc
c0009dee:	c3                   	ret    
c0009def:	90                   	nop

c0009df0 <LogicalDisk::~LogicalDisk()>:
c0009df0:	83 ec 0c             	sub    esp,0xc
c0009df3:	83 ec 0c             	sub    esp,0xc
c0009df6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009dfa:	e8 cd ff ff ff       	call   c0009dcc <LogicalDisk::~LogicalDisk()>
c0009dff:	83 c4 10             	add    esp,0x10
c0009e02:	83 ec 08             	sub    esp,0x8
c0009e05:	68 78 01 00 00       	push   0x178
c0009e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e0e:	e8 78 2b 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c0009e13:	83 c4 10             	add    esp,0x10
c0009e16:	83 c4 0c             	add    esp,0xc
c0009e19:	c3                   	ret    

c0009e1a <LogicalDisk::open(int, int, void*)>:
c0009e1a:	83 ec 18             	sub    esp,0x18
c0009e1d:	68 b0 28 02 c0       	push   0xc00228b0
c0009e22:	e8 23 58 00 00       	call   c000f64a <KePanic(char const*)>
c0009e27:	83 c8 ff             	or     eax,0xffffffff
c0009e2a:	83 c4 1c             	add    esp,0x1c
c0009e2d:	c3                   	ret    

c0009e2e <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0009e2e:	53                   	push   ebx
c0009e2f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009e33:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0009e3b:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0009e41:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0009e47:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0009e4d:	77 10                	ja     c0009e5f <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0009e4f:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0009e55:	89 d3                	mov    ebx,edx
c0009e57:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0009e5d:	72 05                	jb     c0009e64 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0009e5f:	83 c8 ff             	or     eax,0xffffffff
c0009e62:	89 c2                	mov    edx,eax
c0009e64:	5b                   	pop    ebx
c0009e65:	c3                   	ret    

c0009e66 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0009e66:	56                   	push   esi
c0009e67:	83 c8 ff             	or     eax,0xffffffff
c0009e6a:	53                   	push   ebx
c0009e6b:	89 c2                	mov    edx,eax
c0009e6d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009e71:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0009e75:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0009e79:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0009e7f:	77 27                	ja     c0009ea8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e81:	89 d8                	mov    eax,ebx
c0009e83:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0009e89:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0009e8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0009e94:	89 c2                	mov    edx,eax
c0009e96:	73 10                	jae    c0009ea8 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0009e98:	89 c8                	mov    eax,ecx
c0009e9a:	89 da                	mov    edx,ebx
c0009e9c:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0009ea2:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0009ea8:	5b                   	pop    ebx
c0009ea9:	5e                   	pop    esi
c0009eaa:	c3                   	ret    
c0009eab:	90                   	nop

c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0009eac:	83 ec 1c             	sub    esp,0x1c
c0009eaf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0009eb3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009eb7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ebb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ebf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ec3:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ec6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009eca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009ece:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ed2:	83 ec 08             	sub    esp,0x8
c0009ed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ed9:	50                   	push   eax
c0009eda:	e8 15 f3 ff ff       	call   c00091f4 <Device::Device(char const*)>
c0009edf:	83 c4 10             	add    esp,0x10
c0009ee2:	ba fc 28 02 c0       	mov    edx,0xc00228fc
c0009ee7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009eeb:	89 10                	mov    DWORD PTR [eax],edx
c0009eed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009ef1:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009ef8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009efc:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c0009f03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f07:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0009f0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f12:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0009f1c:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f20:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009f24:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009f28:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c0009f2e:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0009f34:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0009f38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009f3b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009f3f:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0009f45:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0009f4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f4f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0009f53:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0009f59:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009f5d:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c0009f67:	90                   	nop
c0009f68:	83 c4 1c             	add    esp,0x1c
c0009f6b:	c3                   	ret    

c0009f6c <LogicalDisk::assignDriveLetter()>:
c0009f6c:	55                   	push   ebp
c0009f6d:	57                   	push   edi
c0009f6e:	56                   	push   esi
c0009f6f:	53                   	push   ebx
c0009f70:	83 ec 14             	sub    esp,0x14
c0009f73:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f77:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0009f7d:	b0 41                	mov    al,0x41
c0009f7f:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c0009f85:	84 d2                	test   dl,dl
c0009f87:	75 02                	jne    c0009f8b <LogicalDisk::assignDriveLetter()+0x1f>
c0009f89:	b0 43                	mov    al,0x43
c0009f8b:	8b 3d 60 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a760
c0009f91:	0f b6 ca             	movzx  ecx,dl
c0009f94:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0009f98:	0f be e8             	movsx  ebp,al
c0009f9b:	8b 3d 64 a7 02 c0    	mov    edi,DWORD PTR ds:0xc002a764
c0009fa1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0009fa5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0009fa9:	3c 43                	cmp    al,0x43
c0009fab:	75 10                	jne    c0009fbd <LogicalDisk::assignDriveLetter()+0x51>
c0009fad:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0009fb4:	75 5a                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fb6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0009fbb:	75 53                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fbd:	8d 75 bf             	lea    esi,[ebp-0x41]
c0009fc0:	ba 01 00 00 00       	mov    edx,0x1
c0009fc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0009fc8:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c0009fcb:	d3 e2                	shl    edx,cl
c0009fcd:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009fd1:	89 d7                	mov    edi,edx
c0009fd3:	89 d6                	mov    esi,edx
c0009fd5:	c1 ff 1f             	sar    edi,0x1f
c0009fd8:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c0009fdc:	21 f9                	and    ecx,edi
c0009fde:	09 d1                	or     ecx,edx
c0009fe0:	75 2e                	jne    c000a010 <LogicalDisk::assignDriveLetter()+0xa4>
c0009fe2:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0009fe6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009fea:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c0009ff0:	09 f2                	or     edx,esi
c0009ff2:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0009ff5:	89 15 60 a7 02 c0    	mov    DWORD PTR ds:0xc002a760,edx
c0009ffb:	89 1c b5 80 a7 02 c0 	mov    DWORD PTR [esi*4-0x3ffd5880],ebx
c000a002:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a006:	09 fa                	or     edx,edi
c000a008:	89 15 64 a7 02 c0    	mov    DWORD PTR ds:0xc002a764,edx
c000a00e:	eb 0d                	jmp    c000a01d <LogicalDisk::assignDriveLetter()+0xb1>
c000a010:	8d 50 01             	lea    edx,[eax+0x1]
c000a013:	45                   	inc    ebp
c000a014:	88 d0                	mov    al,dl
c000a016:	80 fa 5b             	cmp    dl,0x5b
c000a019:	75 8e                	jne    c0009fa9 <LogicalDisk::assignDriveLetter()+0x3d>
c000a01b:	31 c0                	xor    eax,eax
c000a01d:	83 c4 14             	add    esp,0x14
c000a020:	5b                   	pop    ebx
c000a021:	5e                   	pop    esi
c000a022:	5f                   	pop    edi
c000a023:	5d                   	pop    ebp
c000a024:	c3                   	ret    
c000a025:	90                   	nop

c000a026 <LogicalDisk::mount()>:
c000a026:	56                   	push   esi
c000a027:	53                   	push   ebx
c000a028:	53                   	push   ebx
c000a029:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a02d:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c000a033:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000a03d:	85 db                	test   ebx,ebx
c000a03f:	74 27                	je     c000a068 <LogicalDisk::mount()+0x42>
c000a041:	51                   	push   ecx
c000a042:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000a049:	8b 13                	mov    edx,DWORD PTR [ebx]
c000a04b:	83 e8 41             	sub    eax,0x41
c000a04e:	50                   	push   eax
c000a04f:	56                   	push   esi
c000a050:	53                   	push   ebx
c000a051:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000a054:	83 c4 10             	add    esp,0x10
c000a057:	84 c0                	test   al,al
c000a059:	74 08                	je     c000a063 <LogicalDisk::mount()+0x3d>
c000a05b:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000a061:	eb 07                	jmp    c000a06a <LogicalDisk::mount()+0x44>
c000a063:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000a066:	eb d5                	jmp    c000a03d <LogicalDisk::mount()+0x17>
c000a068:	31 c0                	xor    eax,eax
c000a06a:	5a                   	pop    edx
c000a06b:	5b                   	pop    ebx
c000a06c:	5e                   	pop    esi
c000a06d:	c3                   	ret    

c000a06e <LogicalDisk::unmount()>:
c000a06e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a072:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000a07c:	c3                   	ret    
c000a07d:	90                   	nop

c000a07e <LogicalDisk::eject()>:
c000a07e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a082:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a088:	8b 10                	mov    edx,DWORD PTR [eax]
c000a08a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a08e:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000a091:	90                   	nop

c000a092 <LogicalDisk::unassignDriveLetter()>:
c000a092:	57                   	push   edi
c000a093:	56                   	push   esi
c000a094:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a098:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000a09f:	85 c9                	test   ecx,ecx
c000a0a1:	75 0f                	jne    c000a0b2 <LogicalDisk::unassignDriveLetter()+0x20>
c000a0a3:	c7 44 24 0c d4 28 02 c0 	mov    DWORD PTR [esp+0xc],0xc00228d4
c000a0ab:	5e                   	pop    esi
c000a0ac:	5f                   	pop    edi
c000a0ad:	e9 98 55 00 00       	jmp    c000f64a <KePanic(char const*)>
c000a0b2:	83 e9 41             	sub    ecx,0x41
c000a0b5:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000a0bc:	b8 01 00 00 00       	mov    eax,0x1
c000a0c1:	c7 04 8d 80 a7 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd5880],0x0
c000a0cc:	d3 e0                	shl    eax,cl
c000a0ce:	89 c7                	mov    edi,eax
c000a0d0:	f7 d0                	not    eax
c000a0d2:	c1 ff 1f             	sar    edi,0x1f
c000a0d5:	21 05 60 a7 02 c0    	and    DWORD PTR ds:0xc002a760,eax
c000a0db:	89 fe                	mov    esi,edi
c000a0dd:	f7 d6                	not    esi
c000a0df:	21 35 64 a7 02 c0    	and    DWORD PTR ds:0xc002a764,esi
c000a0e5:	5e                   	pop    esi
c000a0e6:	5f                   	pop    edi
c000a0e7:	c3                   	ret    

c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>:
c000a0e8:	57                   	push   edi
c000a0e9:	56                   	push   esi
c000a0ea:	53                   	push   ebx
c000a0eb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a0ef:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a0f3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a0f7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a0fb:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a101:	77 41                	ja     c000a144 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000a103:	99                   	cdq    
c000a104:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a10a:	01 c8                	add    eax,ecx
c000a10c:	11 da                	adc    edx,ebx
c000a10e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a114:	19 d7                	sbb    edi,edx
c000a116:	72 33                	jb     c000a14b <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000a118:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a11e:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a124:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a128:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a12c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a132:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a138:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a13c:	5b                   	pop    ebx
c000a13d:	5e                   	pop    esi
c000a13e:	5f                   	pop    edi
c000a13f:	e9 76 0b 00 00       	jmp    c000acba <VCache::read(unsigned long long, int, void*)>
c000a144:	b8 05 00 00 00       	mov    eax,0x5
c000a149:	eb 05                	jmp    c000a150 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000a14b:	b8 07 00 00 00       	mov    eax,0x7
c000a150:	5b                   	pop    ebx
c000a151:	5e                   	pop    esi
c000a152:	5f                   	pop    edi
c000a153:	c3                   	ret    

c000a154 <LogicalDisk::write(unsigned long long, int, void*)>:
c000a154:	57                   	push   edi
c000a155:	56                   	push   esi
c000a156:	53                   	push   ebx
c000a157:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000a15b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a15f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000a163:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a167:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000a16d:	77 41                	ja     c000a1b0 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000a16f:	99                   	cdq    
c000a170:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000a176:	01 c8                	add    eax,ecx
c000a178:	11 da                	adc    edx,ebx
c000a17a:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000a180:	19 d7                	sbb    edi,edx
c000a182:	72 33                	jb     c000a1b7 <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000a184:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000a18a:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000a190:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a194:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000a198:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000a19e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a1a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a1a8:	5b                   	pop    ebx
c000a1a9:	5e                   	pop    esi
c000a1aa:	5f                   	pop    edi
c000a1ab:	e9 3c 09 00 00       	jmp    c000aaec <VCache::write(unsigned long long, int, void*)>
c000a1b0:	b8 05 00 00 00       	mov    eax,0x5
c000a1b5:	eb 05                	jmp    c000a1bc <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000a1b7:	b8 07 00 00 00       	mov    eax,0x7
c000a1bc:	5b                   	pop    ebx
c000a1bd:	5e                   	pop    esi
c000a1be:	5f                   	pop    edi
c000a1bf:	c3                   	ret    

c000a1c0 <Mouse::Mouse(char const*)>:
c000a1c0:	83 ec 0c             	sub    esp,0xc
c000a1c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1c7:	83 ec 08             	sub    esp,0x8
c000a1ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a1ce:	50                   	push   eax
c000a1cf:	e8 20 f0 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a1d4:	83 c4 10             	add    esp,0x10
c000a1d7:	ba 28 29 02 c0       	mov    edx,0xc0022928
c000a1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e0:	89 10                	mov    DWORD PTR [eax],edx
c000a1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a1e6:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000a1f0:	90                   	nop
c000a1f1:	83 c4 0c             	add    esp,0xc
c000a1f4:	c3                   	ret    
c000a1f5:	90                   	nop
c000a1f6:	66 90                	xchg   ax,ax

c000a1f8 <Mouse::~Mouse()>:
c000a1f8:	83 ec 0c             	sub    esp,0xc
c000a1fb:	ba 28 29 02 c0       	mov    edx,0xc0022928
c000a200:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a204:	89 10                	mov    DWORD PTR [eax],edx
c000a206:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a20a:	83 ec 0c             	sub    esp,0xc
c000a20d:	50                   	push   eax
c000a20e:	e8 81 ed ff ff       	call   c0008f94 <Device::~Device()>
c000a213:	83 c4 10             	add    esp,0x10
c000a216:	90                   	nop
c000a217:	83 c4 0c             	add    esp,0xc
c000a21a:	c3                   	ret    
c000a21b:	90                   	nop

c000a21c <Mouse::~Mouse()>:
c000a21c:	83 ec 0c             	sub    esp,0xc
c000a21f:	83 ec 0c             	sub    esp,0xc
c000a222:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a226:	e8 cd ff ff ff       	call   c000a1f8 <Mouse::~Mouse()>
c000a22b:	83 c4 10             	add    esp,0x10
c000a22e:	83 ec 08             	sub    esp,0x8
c000a231:	68 58 01 00 00       	push   0x158
c000a236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a23a:	e8 4c 27 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c000a23f:	83 c4 10             	add    esp,0x10
c000a242:	83 c4 0c             	add    esp,0xc
c000a245:	c3                   	ret    

c000a246 <NIC::getMAC()>:
c000a246:	31 c0                	xor    eax,eax
c000a248:	31 d2                	xor    edx,edx
c000a24a:	c3                   	ret    
c000a24b:	90                   	nop

c000a24c <NIC::write(int, unsigned char*, int*)>:
c000a24c:	b8 01 00 00 00       	mov    eax,0x1
c000a251:	c3                   	ret    

c000a252 <NIC::NIC(char const*)>:
c000a252:	83 ec 0c             	sub    esp,0xc
c000a255:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a259:	83 ec 08             	sub    esp,0x8
c000a25c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a260:	50                   	push   eax
c000a261:	e8 8e ef ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a266:	83 c4 10             	add    esp,0x10
c000a269:	ba 54 29 02 c0       	mov    edx,0xc0022954
c000a26e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a272:	89 10                	mov    DWORD PTR [eax],edx
c000a274:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a278:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000a282:	90                   	nop
c000a283:	83 c4 0c             	add    esp,0xc
c000a286:	c3                   	ret    
c000a287:	90                   	nop

c000a288 <NIC::~NIC()>:
c000a288:	83 ec 0c             	sub    esp,0xc
c000a28b:	ba 54 29 02 c0       	mov    edx,0xc0022954
c000a290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a294:	89 10                	mov    DWORD PTR [eax],edx
c000a296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a29a:	83 ec 0c             	sub    esp,0xc
c000a29d:	50                   	push   eax
c000a29e:	e8 f1 ec ff ff       	call   c0008f94 <Device::~Device()>
c000a2a3:	83 c4 10             	add    esp,0x10
c000a2a6:	90                   	nop
c000a2a7:	83 c4 0c             	add    esp,0xc
c000a2aa:	c3                   	ret    
c000a2ab:	90                   	nop

c000a2ac <NIC::~NIC()>:
c000a2ac:	83 ec 0c             	sub    esp,0xc
c000a2af:	83 ec 0c             	sub    esp,0xc
c000a2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2b6:	e8 cd ff ff ff       	call   c000a288 <NIC::~NIC()>
c000a2bb:	83 c4 10             	add    esp,0x10
c000a2be:	83 ec 08             	sub    esp,0x8
c000a2c1:	68 58 01 00 00       	push   0x158
c000a2c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2ca:	e8 bc 26 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c000a2cf:	83 c4 10             	add    esp,0x10
c000a2d2:	83 c4 0c             	add    esp,0xc
c000a2d5:	c3                   	ret    

c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000a2d6:	55                   	push   ebp
c000a2d7:	57                   	push   edi
c000a2d8:	56                   	push   esi
c000a2d9:	53                   	push   ebx
c000a2da:	81 ec 28 01 00 00    	sub    esp,0x128
c000a2e0:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000a2e7:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000a2ee:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000a2f5:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000a2fc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a300:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000a304:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a30b:	e8 e0 ef ff ff       	call   c00092f0 <Device::getName()>
c000a310:	5a                   	pop    edx
c000a311:	59                   	pop    ecx
c000a312:	50                   	push   eax
c000a313:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000a317:	55                   	push   ebp
c000a318:	e8 23 63 ff ff       	call   c0000640 <strcpy>
c000a31d:	5b                   	pop    ebx
c000a31e:	58                   	pop    eax
c000a31f:	68 80 29 02 c0       	push   0xc0022980
c000a324:	55                   	push   ebp
c000a325:	e8 16 65 ff ff       	call   c0000840 <strcat>
c000a32a:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000a331:	e8 cd 4f 00 00       	call   c000f303 <malloc>
c000a336:	83 c4 0c             	add    esp,0xc
c000a339:	89 c3                	mov    ebx,eax
c000a33b:	57                   	push   edi
c000a33c:	56                   	push   esi
c000a33d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a341:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a345:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000a34c:	55                   	push   ebp
c000a34d:	50                   	push   eax
c000a34e:	e8 59 fb ff ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000a353:	83 c4 14             	add    esp,0x14
c000a356:	53                   	push   ebx
c000a357:	e8 10 fc ff ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c000a35c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a35f:	e8 c2 fc ff ff       	call   c000a026 <LogicalDisk::mount()>
c000a364:	58                   	pop    eax
c000a365:	5a                   	pop    edx
c000a366:	53                   	push   ebx
c000a367:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000a36e:	e8 1f ed ff ff       	call   c0009092 <Device::addChild(Device*)>
c000a373:	81 c4 2c 01 00 00    	add    esp,0x12c
c000a379:	5b                   	pop    ebx
c000a37a:	5e                   	pop    esi
c000a37b:	5f                   	pop    edi
c000a37c:	5d                   	pop    ebp
c000a37d:	c3                   	ret    

c000a37e <createPartitionsForDisk(PhysicalDisk*)>:
c000a37e:	55                   	push   ebp
c000a37f:	57                   	push   edi
c000a380:	56                   	push   esi
c000a381:	53                   	push   ebx
c000a382:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000a388:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000a38f:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000a395:	3d 00 02 00 00       	cmp    eax,0x200
c000a39a:	74 27                	je     c000a3c3 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000a39c:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000a3a2:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000a3a8:	83 ec 10             	sub    esp,0x10
c000a3ab:	0f a4 f7 0a          	shld   edi,esi,0xa
c000a3af:	99                   	cdq    
c000a3b0:	c1 e6 0a             	shl    esi,0xa
c000a3b3:	52                   	push   edx
c000a3b4:	89 fd                	mov    ebp,edi
c000a3b6:	50                   	push   eax
c000a3b7:	55                   	push   ebp
c000a3b8:	56                   	push   esi
c000a3b9:	e8 f6 67 01 00       	call   c0020bb4 <__udivdi3>
c000a3be:	e9 b9 00 00 00       	jmp    c000a47c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a3c3:	83 ec 0c             	sub    esp,0xc
c000a3c6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a3c8:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000a3cc:	56                   	push   esi
c000a3cd:	6a 01                	push   0x1
c000a3cf:	6a 00                	push   0x0
c000a3d1:	6a 00                	push   0x0
c000a3d3:	53                   	push   ebx
c000a3d4:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000a3d7:	83 c4 20             	add    esp,0x20
c000a3da:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000a3e2:	75 0a                	jne    c000a3ee <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000a3e4:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000a3ec:	74 2c                	je     c000a41a <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000a3ee:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a3f4:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a3fa:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a400:	83 ec 10             	sub    esp,0x10
c000a403:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a407:	89 f7                	mov    edi,esi
c000a409:	c1 e0 0a             	shl    eax,0xa
c000a40c:	c1 ff 1f             	sar    edi,0x1f
c000a40f:	57                   	push   edi
c000a410:	56                   	push   esi
c000a411:	52                   	push   edx
c000a412:	50                   	push   eax
c000a413:	e8 9c 67 01 00       	call   c0020bb4 <__udivdi3>
c000a418:	eb 62                	jmp    c000a47c <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000a41a:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000a421:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000a428:	89 cf                	mov    edi,ecx
c000a42a:	83 e2 7f             	and    edx,0x7f
c000a42d:	83 e7 7f             	and    edi,0x7f
c000a430:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000a437:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000a43a:	83 e0 7f             	and    eax,0x7f
c000a43d:	8d 14 01             	lea    edx,[ecx+eax*1]
c000a440:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000a447:	83 e0 7f             	and    eax,0x7f
c000a44a:	01 d0                	add    eax,edx
c000a44c:	89 c5                	mov    ebp,eax
c000a44e:	84 c0                	test   al,al
c000a450:	74 41                	je     c000a493 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000a452:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a458:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a45e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a464:	83 ec 10             	sub    esp,0x10
c000a467:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a46b:	89 f7                	mov    edi,esi
c000a46d:	c1 e0 0a             	shl    eax,0xa
c000a470:	c1 ff 1f             	sar    edi,0x1f
c000a473:	57                   	push   edi
c000a474:	56                   	push   esi
c000a475:	52                   	push   edx
c000a476:	50                   	push   eax
c000a477:	e8 38 67 01 00       	call   c0020bb4 <__udivdi3>
c000a47c:	83 c4 14             	add    esp,0x14
c000a47f:	52                   	push   edx
c000a480:	50                   	push   eax
c000a481:	6a 00                	push   0x0
c000a483:	6a 00                	push   0x0
c000a485:	53                   	push   ebx
c000a486:	e8 4b fe ff ff       	call   c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a48b:	83 c4 20             	add    esp,0x20
c000a48e:	e9 73 01 00 00       	jmp    c000a606 <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000a493:	89 f0                	mov    eax,esi
c000a495:	31 c9                	xor    ecx,ecx
c000a497:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000a49e:	75 02                	jne    c000a4a2 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000a4a0:	89 cd                	mov    ebp,ecx
c000a4a2:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000a4a9:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000a4b0:	c1 e2 08             	shl    edx,0x8
c000a4b3:	c1 e6 10             	shl    esi,0x10
c000a4b6:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000a4be:	09 f2                	or     edx,esi
c000a4c0:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000a4c8:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000a4cf:	83 c0 10             	add    eax,0x10
c000a4d2:	09 f2                	or     edx,esi
c000a4d4:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000a4db:	c1 e6 18             	shl    esi,0x18
c000a4de:	09 f2                	or     edx,esi
c000a4e0:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000a4e7:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000a4eb:	c1 e6 10             	shl    esi,0x10
c000a4ee:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000a4f5:	c1 e2 08             	shl    edx,0x8
c000a4f8:	09 f2                	or     edx,esi
c000a4fa:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000a501:	09 f2                	or     edx,esi
c000a503:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000a50a:	c1 e6 18             	shl    esi,0x18
c000a50d:	09 f2                	or     edx,esi
c000a50f:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000a513:	41                   	inc    ecx
c000a514:	83 f9 04             	cmp    ecx,0x4
c000a517:	0f 85 7a ff ff ff    	jne    c000a497 <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000a51d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a521:	83 f0 01             	xor    eax,0x1
c000a524:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000a528:	75 4f                	jne    c000a579 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a52a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a52e:	83 f0 01             	xor    eax,0x1
c000a531:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000a535:	75 42                	jne    c000a579 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000a537:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000a53f:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000a547:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000a54d:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000a553:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000a559:	0f a4 c2 0a          	shld   edx,eax,0xa
c000a55d:	89 f7                	mov    edi,esi
c000a55f:	c1 e0 0a             	shl    eax,0xa
c000a562:	c1 ff 1f             	sar    edi,0x1f
c000a565:	57                   	push   edi
c000a566:	56                   	push   esi
c000a567:	52                   	push   edx
c000a568:	50                   	push   eax
c000a569:	e8 46 66 01 00       	call   c0020bb4 <__udivdi3>
c000a56e:	83 c4 10             	add    esp,0x10
c000a571:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a575:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a579:	89 e8                	mov    eax,ebp
c000a57b:	0f b6 e8             	movzx  ebp,al
c000a57e:	85 ed                	test   ebp,ebp
c000a580:	74 50                	je     c000a5d2 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000a582:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a586:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000a58a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a58e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000a592:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a596:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a59a:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a59e:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000a5ae:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000a5b2:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000a5b6:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5ba:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5be:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a5c2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000a5c6:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000a5ca:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000a5ce:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000a5d2:	31 ed                	xor    ebp,ebp
c000a5d4:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000a5d8:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000a5dc:	89 f8                	mov    eax,edi
c000a5de:	09 f0                	or     eax,esi
c000a5e0:	74 1e                	je     c000a600 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5e2:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000a5e6:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000a5ea:	89 d1                	mov    ecx,edx
c000a5ec:	09 c1                	or     ecx,eax
c000a5ee:	74 10                	je     c000a600 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000a5f0:	83 ec 0c             	sub    esp,0xc
c000a5f3:	57                   	push   edi
c000a5f4:	56                   	push   esi
c000a5f5:	52                   	push   edx
c000a5f6:	50                   	push   eax
c000a5f7:	53                   	push   ebx
c000a5f8:	e8 d9 fc ff ff       	call   c000a2d6 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000a5fd:	83 c4 20             	add    esp,0x20
c000a600:	45                   	inc    ebp
c000a601:	83 fd 04             	cmp    ebp,0x4
c000a604:	75 ce                	jne    c000a5d4 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000a606:	81 c4 5c 02 00 00    	add    esp,0x25c
c000a60c:	5b                   	pop    ebx
c000a60d:	5e                   	pop    esi
c000a60e:	5f                   	pop    edi
c000a60f:	5d                   	pop    ebp
c000a610:	c3                   	ret    
c000a611:	66 90                	xchg   ax,ax
c000a613:	90                   	nop

c000a614 <Serial::Serial(char const*)>:
c000a614:	83 ec 0c             	sub    esp,0xc
c000a617:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a61b:	83 ec 08             	sub    esp,0x8
c000a61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a622:	50                   	push   eax
c000a623:	e8 cc eb ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a628:	83 c4 10             	add    esp,0x10
c000a62b:	ba 94 29 02 c0       	mov    edx,0xc0022994
c000a630:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a634:	89 10                	mov    DWORD PTR [eax],edx
c000a636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a63a:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000a644:	90                   	nop
c000a645:	83 c4 0c             	add    esp,0xc
c000a648:	c3                   	ret    
c000a649:	90                   	nop
c000a64a:	66 90                	xchg   ax,ax

c000a64c <Serial::~Serial()>:
c000a64c:	83 ec 0c             	sub    esp,0xc
c000a64f:	ba 94 29 02 c0       	mov    edx,0xc0022994
c000a654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a658:	89 10                	mov    DWORD PTR [eax],edx
c000a65a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a65e:	83 ec 0c             	sub    esp,0xc
c000a661:	50                   	push   eax
c000a662:	e8 2d e9 ff ff       	call   c0008f94 <Device::~Device()>
c000a667:	83 c4 10             	add    esp,0x10
c000a66a:	90                   	nop
c000a66b:	83 c4 0c             	add    esp,0xc
c000a66e:	c3                   	ret    
c000a66f:	90                   	nop

c000a670 <Serial::~Serial()>:
c000a670:	83 ec 0c             	sub    esp,0xc
c000a673:	83 ec 0c             	sub    esp,0xc
c000a676:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a67a:	e8 cd ff ff ff       	call   c000a64c <Serial::~Serial()>
c000a67f:	83 c4 10             	add    esp,0x10
c000a682:	83 ec 08             	sub    esp,0x8
c000a685:	68 58 01 00 00       	push   0x158
c000a68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a68e:	e8 f8 22 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c000a693:	83 c4 10             	add    esp,0x10
c000a696:	83 c4 0c             	add    esp,0xc
c000a699:	c3                   	ret    
c000a69a:	66 90                	xchg   ax,ax

c000a69c <Timer::Timer(char const*)>:
c000a69c:	83 ec 0c             	sub    esp,0xc
c000a69f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6a3:	83 ec 08             	sub    esp,0x8
c000a6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a6aa:	50                   	push   eax
c000a6ab:	e8 44 eb ff ff       	call   c00091f4 <Device::Device(char const*)>
c000a6b0:	83 c4 10             	add    esp,0x10
c000a6b3:	ba 4c 2a 02 c0       	mov    edx,0xc0022a4c
c000a6b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6bc:	89 10                	mov    DWORD PTR [eax],edx
c000a6be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6c2:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000a6cc:	90                   	nop
c000a6cd:	83 c4 0c             	add    esp,0xc
c000a6d0:	c3                   	ret    
c000a6d1:	90                   	nop
c000a6d2:	66 90                	xchg   ax,ax

c000a6d4 <Timer::~Timer()>:
c000a6d4:	83 ec 0c             	sub    esp,0xc
c000a6d7:	ba 4c 2a 02 c0       	mov    edx,0xc0022a4c
c000a6dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e0:	89 10                	mov    DWORD PTR [eax],edx
c000a6e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a6e6:	83 ec 0c             	sub    esp,0xc
c000a6e9:	50                   	push   eax
c000a6ea:	e8 a5 e8 ff ff       	call   c0008f94 <Device::~Device()>
c000a6ef:	83 c4 10             	add    esp,0x10
c000a6f2:	90                   	nop
c000a6f3:	83 c4 0c             	add    esp,0xc
c000a6f6:	c3                   	ret    
c000a6f7:	90                   	nop

c000a6f8 <Timer::~Timer()>:
c000a6f8:	83 ec 0c             	sub    esp,0xc
c000a6fb:	83 ec 0c             	sub    esp,0xc
c000a6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a702:	e8 cd ff ff ff       	call   c000a6d4 <Timer::~Timer()>
c000a707:	83 c4 10             	add    esp,0x10
c000a70a:	83 ec 08             	sub    esp,0x8
c000a70d:	68 5c 01 00 00       	push   0x15c
c000a712:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a716:	e8 70 22 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c000a71b:	83 c4 10             	add    esp,0x10
c000a71e:	83 c4 0c             	add    esp,0xc
c000a721:	c3                   	ret    

c000a722 <Timer::read()>:
c000a722:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a726:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000a72c:	c3                   	ret    

c000a72d <setupTimer(int)>:
c000a72d:	53                   	push   ebx
c000a72e:	83 ec 14             	sub    esp,0x14
c000a731:	68 5c 01 00 00       	push   0x15c
c000a736:	e8 c8 4b 00 00       	call   c000f303 <malloc>
c000a73b:	89 04 24             	mov    DWORD PTR [esp],eax
c000a73e:	89 c3                	mov    ebx,eax
c000a740:	e8 f3 5c 01 00       	call   c0020438 <PIT::PIT()>
c000a745:	58                   	pop    eax
c000a746:	5a                   	pop    edx
c000a747:	53                   	push   ebx
c000a748:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c000a74e:	e8 3f e9 ff ff       	call   c0009092 <Device::addChild(Device*)>
c000a753:	8b 03                	mov    eax,DWORD PTR [ebx]
c000a755:	6a 00                	push   0x0
c000a757:	6a 00                	push   0x0
c000a759:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000a75d:	53                   	push   ebx
c000a75e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000a761:	89 d8                	mov    eax,ebx
c000a763:	83 c4 28             	add    esp,0x28
c000a766:	5b                   	pop    ebx
c000a767:	c3                   	ret    

c000a768 <timerHandler(unsigned int)>:
c000a768:	57                   	push   edi
c000a769:	56                   	push   esi
c000a76a:	53                   	push   ebx
c000a76b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000a76f:	83 ec 0c             	sub    esp,0xc
c000a772:	01 35 ec a7 02 c0    	add    DWORD PTR ds:0xc002a7ec,esi
c000a778:	68 23 2a 02 c0       	push   0xc0022a23
c000a77d:	e8 e2 c7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	80 3d 75 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad75,0x0
c000a78c:	75 12                	jne    c000a7a0 <timerHandler(unsigned int)+0x38>
c000a78e:	c7 44 24 10 2b 2a 02 c0 	mov    DWORD PTR [esp+0x10],0xc0022a2b
c000a796:	5b                   	pop    ebx
c000a797:	5e                   	pop    esi
c000a798:	5f                   	pop    edi
c000a799:	e9 c6 c7 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c000a79e:	66 90                	xchg   ax,ax
c000a7a0:	fa                   	cli    
c000a7a1:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c000a7a7:	83 ec 0c             	sub    esp,0xc
c000a7aa:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a7af:	e8 98 67 01 00       	call   c0020f4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a7b4:	83 c4 10             	add    esp,0x10
c000a7b7:	84 c0                	test   al,al
c000a7b9:	0f 85 a1 00 00 00    	jne    c000a860 <timerHandler(unsigned int)+0xf8>
c000a7bf:	83 ec 0c             	sub    esp,0xc
c000a7c2:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a7c7:	e8 9c 67 01 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7cc:	83 c4 10             	add    esp,0x10
c000a7cf:	89 c7                	mov    edi,eax
c000a7d1:	8d 76 00             	lea    esi,[esi+0x0]
c000a7d4:	83 ec 0c             	sub    esp,0xc
c000a7d7:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a7dc:	e8 87 67 01 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a7e1:	c7 04 24 e0 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6e0
c000a7e8:	89 c3                	mov    ebx,eax
c000a7ea:	e8 81 67 01 00       	call   c0020f70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000a7ef:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000a7f2:	83 c4 10             	add    esp,0x10
c000a7f5:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c000a7fb:	77 23                	ja     c000a820 <timerHandler(unsigned int)+0xb8>
c000a7fd:	83 ec 0c             	sub    esp,0xc
c000a800:	53                   	push   ebx
c000a801:	e8 8e bd 00 00       	call   c0016594 <unblockTask(ThreadControlBlock*)>
c000a806:	83 c4 10             	add    esp,0x10
c000a809:	39 df                	cmp    edi,ebx
c000a80b:	75 27                	jne    c000a834 <timerHandler(unsigned int)+0xcc>
c000a80d:	83 ec 0c             	sub    esp,0xc
c000a810:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a815:	e8 4e 67 01 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a81a:	89 c7                	mov    edi,eax
c000a81c:	eb 12                	jmp    c000a830 <timerHandler(unsigned int)+0xc8>
c000a81e:	66 90                	xchg   ax,ax
c000a820:	50                   	push   eax
c000a821:	50                   	push   eax
c000a822:	53                   	push   ebx
c000a823:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a828:	e8 ff 67 01 00       	call   c002102c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000a82d:	8d 76 00             	lea    esi,[esi+0x0]
c000a830:	83 c4 10             	add    esp,0x10
c000a833:	90                   	nop
c000a834:	83 ec 0c             	sub    esp,0xc
c000a837:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a83c:	e8 0b 67 01 00       	call   c0020f4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000a841:	83 c4 10             	add    esp,0x10
c000a844:	84 c0                	test   al,al
c000a846:	75 18                	jne    c000a860 <timerHandler(unsigned int)+0xf8>
c000a848:	83 ec 0c             	sub    esp,0xc
c000a84b:	68 e0 d6 02 c0       	push   0xc002d6e0
c000a850:	e8 13 67 01 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000a855:	83 c4 10             	add    esp,0x10
c000a858:	39 f8                	cmp    eax,edi
c000a85a:	0f 85 74 ff ff ff    	jne    c000a7d4 <timerHandler(unsigned int)+0x6c>
c000a860:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000a866:	8b 42 34             	mov    eax,DWORD PTR [edx+0x34]
c000a869:	85 c0                	test   eax,eax
c000a86b:	74 1b                	je     c000a888 <timerHandler(unsigned int)+0x120>
c000a86d:	80 3d 74 ad 02 c0 00 	cmp    BYTE PTR ds:0xc002ad74,0x0
c000a874:	74 12                	je     c000a888 <timerHandler(unsigned int)+0x120>
c000a876:	89 c1                	mov    ecx,eax
c000a878:	29 f1                	sub    ecx,esi
c000a87a:	39 f0                	cmp    eax,esi
c000a87c:	89 4a 34             	mov    DWORD PTR [edx+0x34],ecx
c000a87f:	77 07                	ja     c000a888 <timerHandler(unsigned int)+0x120>
c000a881:	e8 fe b9 00 00       	call   c0016284 <schedule()>
c000a886:	66 90                	xchg   ax,ax
c000a888:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000a88f:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000a896:	75 04                	jne    c000a89c <timerHandler(unsigned int)+0x134>
c000a898:	fb                   	sti    
c000a899:	8d 76 00             	lea    esi,[esi+0x0]
c000a89c:	5b                   	pop    ebx
c000a89d:	5e                   	pop    esi
c000a89e:	5f                   	pop    edi
c000a89f:	c3                   	ret    

c000a8a0 <VCache::VCache(PhysicalDisk*)>:
c000a8a0:	53                   	push   ebx
c000a8a1:	83 ec 18             	sub    esp,0x18
c000a8a4:	ba bc 2a 02 c0       	mov    edx,0xc0022abc
c000a8a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ad:	89 10                	mov    DWORD PTR [eax],edx
c000a8af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8b3:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000a8ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8be:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000a8c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8c9:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000a8d0:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000a8d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8db:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000a8e2:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000a8e9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8ed:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000a8f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a8f8:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a8fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a900:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000a907:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000a90e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a912:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a91a:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000a91e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a922:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000a926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a92a:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000a931:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000a939:	83 ec 0c             	sub    esp,0xc
c000a93c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000a940:	e8 be 49 00 00       	call   c000f303 <malloc>
c000a945:	83 c4 10             	add    esp,0x10
c000a948:	89 c3                	mov    ebx,eax
c000a94a:	83 ec 0c             	sub    esp,0xc
c000a94d:	53                   	push   ebx
c000a94e:	e8 dd 4c 00 00       	call   c000f630 <Mutex::Mutex()>
c000a953:	83 c4 10             	add    esp,0x10
c000a956:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a95a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000a95d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a961:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000a965:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000a968:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a96c:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000a973:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a977:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a97d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a981:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a984:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a988:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000a98e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a994:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a998:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000a99b:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000a99e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9a2:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000a9a6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9aa:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000a9b0:	05 00 01 00 00       	add    eax,0x100
c000a9b5:	c1 e0 04             	shl    eax,0x4
c000a9b8:	83 ec 0c             	sub    esp,0xc
c000a9bb:	50                   	push   eax
c000a9bc:	e8 42 49 00 00       	call   c000f303 <malloc>
c000a9c1:	83 c4 10             	add    esp,0x10
c000a9c4:	89 c2                	mov    edx,eax
c000a9c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9ca:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000a9cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9d1:	c7 40 40 08 00 00 00 	mov    DWORD PTR [eax+0x40],0x8
c000a9d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000a9dc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000a9e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a9e4:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000a9ea:	89 d0                	mov    eax,edx
c000a9ec:	c1 e0 02             	shl    eax,0x2
c000a9ef:	01 d0                	add    eax,edx
c000a9f1:	c1 e0 04             	shl    eax,0x4
c000a9f4:	83 ec 0c             	sub    esp,0xc
c000a9f7:	50                   	push   eax
c000a9f8:	e8 06 49 00 00       	call   c000f303 <malloc>
c000a9fd:	83 c4 10             	add    esp,0x10
c000aa00:	89 c2                	mov    edx,eax
c000aa02:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000aa06:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000aa09:	90                   	nop
c000aa0a:	83 c4 18             	add    esp,0x18
c000aa0d:	5b                   	pop    ebx
c000aa0e:	c3                   	ret    
c000aa0f:	90                   	nop

c000aa10 <VCache::invalidateReadBuffer()>:
c000aa10:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa14:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000aa1a:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000aa1e:	c3                   	ret    
c000aa1f:	90                   	nop

c000aa20 <VCache::writeWriteBuffer()>:
c000aa20:	53                   	push   ebx
c000aa21:	83 ec 08             	sub    esp,0x8
c000aa24:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000aa28:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000aa2c:	74 1e                	je     c000aa4c <VCache::writeWriteBuffer()+0x2c>
c000aa2e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000aa31:	83 ec 0c             	sub    esp,0xc
c000aa34:	8b 10                	mov    edx,DWORD PTR [eax]
c000aa36:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000aa39:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000aa3c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000aa3f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000aa42:	50                   	push   eax
c000aa43:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000aa46:	83 c4 20             	add    esp,0x20
c000aa49:	8d 76 00             	lea    esi,[esi+0x0]
c000aa4c:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000aa53:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000aa5a:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000aa5e:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000aa65:	83 c4 08             	add    esp,0x8
c000aa68:	5b                   	pop    ebx
c000aa69:	c3                   	ret    
c000aa6a:	66 90                	xchg   ax,ax

c000aa6c <VCache::~VCache()>:
c000aa6c:	83 ec 0c             	sub    esp,0xc
c000aa6f:	ba bc 2a 02 c0       	mov    edx,0xc0022abc
c000aa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa78:	89 10                	mov    DWORD PTR [eax],edx
c000aa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa7e:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000aa81:	0f b6 c0             	movzx  eax,al
c000aa84:	85 c0                	test   eax,eax
c000aa86:	74 10                	je     c000aa98 <VCache::~VCache()+0x2c>
c000aa88:	83 ec 0c             	sub    esp,0xc
c000aa8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa8f:	e8 8c ff ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000aa94:	83 c4 10             	add    esp,0x10
c000aa97:	90                   	nop
c000aa98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000aa9f:	83 ec 0c             	sub    esp,0xc
c000aaa2:	50                   	push   eax
c000aaa3:	e8 6b 48 00 00       	call   c000f313 <free>
c000aaa8:	83 c4 10             	add    esp,0x10
c000aaab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaaf:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000aab2:	83 ec 0c             	sub    esp,0xc
c000aab5:	50                   	push   eax
c000aab6:	e8 58 48 00 00       	call   c000f313 <free>
c000aabb:	83 c4 10             	add    esp,0x10
c000aabe:	90                   	nop
c000aabf:	83 c4 0c             	add    esp,0xc
c000aac2:	c3                   	ret    
c000aac3:	90                   	nop

c000aac4 <VCache::~VCache()>:
c000aac4:	83 ec 0c             	sub    esp,0xc
c000aac7:	83 ec 0c             	sub    esp,0xc
c000aaca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aace:	e8 99 ff ff ff       	call   c000aa6c <VCache::~VCache()>
c000aad3:	83 c4 10             	add    esp,0x10
c000aad6:	83 ec 08             	sub    esp,0x8
c000aad9:	6a 44                	push   0x44
c000aadb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aadf:	e8 a7 1e 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c000aae4:	83 c4 10             	add    esp,0x10
c000aae7:	83 c4 0c             	add    esp,0xc
c000aaea:	c3                   	ret    
c000aaeb:	90                   	nop

c000aaec <VCache::write(unsigned long long, int, void*)>:
c000aaec:	55                   	push   ebp
c000aaed:	57                   	push   edi
c000aaee:	56                   	push   esi
c000aaef:	53                   	push   ebx
c000aaf0:	83 ec 1c             	sub    esp,0x1c
c000aaf3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000aaf7:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000aafb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000aaff:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000ab03:	e8 dc b4 00 00       	call   c0015fe4 <KeDisablePreemption()>
c000ab08:	b9 00 10 00 00       	mov    ecx,0x1000
c000ab0d:	50                   	push   eax
c000ab0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ab11:	0f af c3             	imul   eax,ebx
c000ab14:	05 ff 0f 00 00       	add    eax,0xfff
c000ab19:	99                   	cdq    
c000ab1a:	f7 f9                	idiv   ecx
c000ab1c:	50                   	push   eax
c000ab1d:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ab21:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ab27:	e8 82 8c 00 00       	call   c00137ae <VAS::canLockPages(unsigned long, int)>
c000ab2c:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c000ab30:	83 c4 10             	add    esp,0x10
c000ab33:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ab38:	74 2a                	je     c000ab64 <VCache::write(unsigned long long, int, void*)+0x78>
c000ab3a:	b9 00 10 00 00       	mov    ecx,0x1000
c000ab3f:	50                   	push   eax
c000ab40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ab43:	0f af c3             	imul   eax,ebx
c000ab46:	05 ff 0f 00 00       	add    eax,0xfff
c000ab4b:	99                   	cdq    
c000ab4c:	f7 f9                	idiv   ecx
c000ab4e:	50                   	push   eax
c000ab4f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ab53:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ab59:	e8 4a 90 00 00       	call   c0013ba8 <VAS::lockPages(unsigned long, int)>
c000ab5e:	83 c4 10             	add    esp,0x10
c000ab61:	8d 76 00             	lea    esi,[esi+0x0]
c000ab64:	80 7d 3c 00          	cmp    BYTE PTR [ebp+0x3c],0x0
c000ab68:	74 0e                	je     c000ab78 <VCache::write(unsigned long long, int, void*)+0x8c>
c000ab6a:	83 ec 0c             	sub    esp,0xc
c000ab6d:	55                   	push   ebp
c000ab6e:	e8 9d fe ff ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c000ab73:	83 c4 10             	add    esp,0x10
c000ab76:	66 90                	xchg   ax,ax
c000ab78:	80 7d 2c 00          	cmp    BYTE PTR [ebp+0x2c],0x0
c000ab7c:	74 72                	je     c000abf0 <VCache::write(unsigned long long, int, void*)+0x104>
c000ab7e:	8b 4d 24             	mov    ecx,DWORD PTR [ebp+0x24]
c000ab81:	89 c8                	mov    eax,ecx
c000ab83:	99                   	cdq    
c000ab84:	03 45 1c             	add    eax,DWORD PTR [ebp+0x1c]
c000ab87:	13 55 20             	adc    edx,DWORD PTR [ebp+0x20]
c000ab8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ab96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ab9a:	31 f0                	xor    eax,esi
c000ab9c:	31 fa                	xor    edx,edi
c000ab9e:	09 d0                	or     eax,edx
c000aba0:	75 42                	jne    c000abe4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000aba2:	83 fb 01             	cmp    ebx,0x1
c000aba5:	75 3d                	jne    c000abe4 <VCache::write(unsigned long long, int, void*)+0xf8>
c000aba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abaa:	89 cf                	mov    edi,ecx
c000abac:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000abb2:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000abb6:	0f af f8             	imul   edi,eax
c000abb9:	89 c1                	mov    ecx,eax
c000abbb:	03 7d 28             	add    edi,DWORD PTR [ebp+0x28]
c000abbe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000abc0:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000abc3:	40                   	inc    eax
c000abc4:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c000abc7:	83 f8 50             	cmp    eax,0x50
c000abca:	0f 85 a8 00 00 00    	jne    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000abd0:	83 ec 0c             	sub    esp,0xc
c000abd3:	55                   	push   ebp
c000abd4:	e8 47 fe ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000abd9:	83 c4 10             	add    esp,0x10
c000abdc:	e9 97 00 00 00       	jmp    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000abe1:	8d 76 00             	lea    esi,[esi+0x0]
c000abe4:	83 ec 0c             	sub    esp,0xc
c000abe7:	55                   	push   ebp
c000abe8:	e8 33 fe ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000abed:	83 c4 10             	add    esp,0x10
c000abf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000abf3:	83 fb 4f             	cmp    ebx,0x4f
c000abf6:	7f 20                	jg     c000ac18 <VCache::write(unsigned long long, int, void*)+0x12c>
c000abf8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c000abfb:	89 7d 20             	mov    DWORD PTR [ebp+0x20],edi
c000abfe:	89 5d 24             	mov    DWORD PTR [ebp+0x24],ebx
c000ac01:	c6 45 2c 01          	mov    BYTE PTR [ebp+0x2c],0x1
c000ac05:	8b 7d 28             	mov    edi,DWORD PTR [ebp+0x28]
c000ac08:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000ac0e:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000ac12:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ac14:	eb 62                	jmp    c000ac78 <VCache::write(unsigned long long, int, void*)+0x18c>
c000ac16:	66 90                	xchg   ax,ax
c000ac18:	83 ec 0c             	sub    esp,0xc
c000ac1b:	8b 10                	mov    edx,DWORD PTR [eax]
c000ac1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac21:	53                   	push   ebx
c000ac22:	57                   	push   edi
c000ac23:	56                   	push   esi
c000ac24:	50                   	push   eax
c000ac25:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000ac28:	83 c4 20             	add    esp,0x20
c000ac2b:	89 c6                	mov    esi,eax
c000ac2d:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ac32:	74 28                	je     c000ac5c <VCache::write(unsigned long long, int, void*)+0x170>
c000ac34:	b9 00 10 00 00       	mov    ecx,0x1000
c000ac39:	52                   	push   edx
c000ac3a:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000ac3e:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000ac44:	99                   	cdq    
c000ac45:	f7 f9                	idiv   ecx
c000ac47:	50                   	push   eax
c000ac48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ac4c:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ac52:	e8 93 8b 00 00       	call   c00137ea <VAS::unlockPages(unsigned long, int)>
c000ac57:	83 c4 10             	add    esp,0x10
c000ac5a:	66 90                	xchg   ax,ax
c000ac5c:	e8 ab b3 00 00       	call   c001600c <KeRestorePreemption()>
c000ac61:	85 f6                	test   esi,esi
c000ac63:	74 4b                	je     c000acb0 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ac65:	83 ec 0c             	sub    esp,0xc
c000ac68:	68 74 2a 02 c0       	push   0xc0022a74
c000ac6d:	e8 f2 c2 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000ac72:	83 c4 10             	add    esp,0x10
c000ac75:	eb 39                	jmp    c000acb0 <VCache::write(unsigned long long, int, void*)+0x1c4>
c000ac77:	90                   	nop
c000ac78:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000ac7d:	74 29                	je     c000aca8 <VCache::write(unsigned long long, int, void*)+0x1bc>
c000ac7f:	b9 00 10 00 00       	mov    ecx,0x1000
c000ac84:	50                   	push   eax
c000ac85:	0f af 5d 0c          	imul   ebx,DWORD PTR [ebp+0xc]
c000ac89:	8d 83 ff 0f 00 00    	lea    eax,[ebx+0xfff]
c000ac8f:	99                   	cdq    
c000ac90:	f7 f9                	idiv   ecx
c000ac92:	50                   	push   eax
c000ac93:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c000ac97:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ac9d:	e8 48 8b 00 00       	call   c00137ea <VAS::unlockPages(unsigned long, int)>
c000aca2:	83 c4 10             	add    esp,0x10
c000aca5:	8d 76 00             	lea    esi,[esi+0x0]
c000aca8:	e8 5f b3 00 00       	call   c001600c <KeRestorePreemption()>
c000acad:	31 f6                	xor    esi,esi
c000acaf:	90                   	nop
c000acb0:	83 c4 1c             	add    esp,0x1c
c000acb3:	89 f0                	mov    eax,esi
c000acb5:	5b                   	pop    ebx
c000acb6:	5e                   	pop    esi
c000acb7:	5f                   	pop    edi
c000acb8:	5d                   	pop    ebp
c000acb9:	c3                   	ret    

c000acba <VCache::read(unsigned long long, int, void*)>:
c000acba:	55                   	push   ebp
c000acbb:	57                   	push   edi
c000acbc:	bf 00 10 00 00       	mov    edi,0x1000
c000acc1:	56                   	push   esi
c000acc2:	53                   	push   ebx
c000acc3:	83 ec 2c             	sub    esp,0x2c
c000acc6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000acca:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c000acce:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acd2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000acd6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acda:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c000acde:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000ace2:	e8 fd b2 00 00       	call   c0015fe4 <KeDisablePreemption()>
c000ace7:	50                   	push   eax
c000ace8:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000aceb:	0f af c6             	imul   eax,esi
c000acee:	05 ff 0f 00 00       	add    eax,0xfff
c000acf3:	99                   	cdq    
c000acf4:	f7 ff                	idiv   edi
c000acf6:	50                   	push   eax
c000acf7:	55                   	push   ebp
c000acf8:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000acfe:	e8 ab 8a 00 00       	call   c00137ae <VAS::canLockPages(unsigned long, int)>
c000ad03:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c000ad07:	83 c4 10             	add    esp,0x10
c000ad0a:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000ad0f:	74 1f                	je     c000ad30 <VCache::read(unsigned long long, int, void*)+0x76>
c000ad11:	50                   	push   eax
c000ad12:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ad15:	0f af c6             	imul   eax,esi
c000ad18:	05 ff 0f 00 00       	add    eax,0xfff
c000ad1d:	99                   	cdq    
c000ad1e:	f7 ff                	idiv   edi
c000ad20:	50                   	push   eax
c000ad21:	55                   	push   ebp
c000ad22:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ad28:	e8 7b 8e 00 00       	call   c0013ba8 <VAS::lockPages(unsigned long, int)>
c000ad2d:	83 c4 10             	add    esp,0x10
c000ad30:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000ad34:	74 0e                	je     c000ad44 <VCache::read(unsigned long long, int, void*)+0x8a>
c000ad36:	83 ec 0c             	sub    esp,0xc
c000ad39:	53                   	push   ebx
c000ad3a:	e8 e1 fc ff ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c000ad3f:	83 c4 10             	add    esp,0x10
c000ad42:	66 90                	xchg   ax,ax
c000ad44:	83 fe 01             	cmp    esi,0x1
c000ad47:	0f 85 ef 00 00 00    	jne    c000ae3c <VCache::read(unsigned long long, int, void*)+0x182>
c000ad4d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000ad50:	80 b9 68 01 00 00 00 	cmp    BYTE PTR [ecx+0x168],0x0
c000ad57:	0f 85 df 00 00 00    	jne    c000ae3c <VCache::read(unsigned long long, int, void*)+0x182>
c000ad5d:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ad60:	89 fe                	mov    esi,edi
c000ad62:	f7 de                	neg    esi
c000ad64:	89 f0                	mov    eax,esi
c000ad66:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c000ad6a:	c1 f8 1f             	sar    eax,0x1f
c000ad6d:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000ad71:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ad75:	89 f0                	mov    eax,esi
c000ad77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ad7b:	23 74 24 0c          	and    esi,DWORD PTR [esp+0xc]
c000ad7f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000ad83:	89 f2                	mov    edx,esi
c000ad85:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c000ad8a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000ad8e:	74 0c                	je     c000ad9c <VCache::read(unsigned long long, int, void*)+0xe2>
c000ad90:	39 53 34             	cmp    DWORD PTR [ebx+0x34],edx
c000ad93:	75 07                	jne    c000ad9c <VCache::read(unsigned long long, int, void*)+0xe2>
c000ad95:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000ad98:	74 4e                	je     c000ade8 <VCache::read(unsigned long long, int, void*)+0x12e>
c000ad9a:	66 90                	xchg   ax,ax
c000ad9c:	83 ec 0c             	sub    esp,0xc
c000ad9f:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000ada3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000ada6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ada9:	8b 31                	mov    esi,DWORD PTR [ecx]
c000adab:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000adae:	57                   	push   edi
c000adaf:	52                   	push   edx
c000adb0:	50                   	push   eax
c000adb1:	51                   	push   ecx
c000adb2:	ff 56 28             	call   DWORD PTR [esi+0x28]
c000adb5:	83 c4 20             	add    esp,0x20
c000adb8:	89 c7                	mov    edi,eax
c000adba:	85 c0                	test   eax,eax
c000adbc:	74 2a                	je     c000ade8 <VCache::read(unsigned long long, int, void*)+0x12e>
c000adbe:	83 ec 0c             	sub    esp,0xc
c000adc1:	68 8c 2a 02 c0       	push   0xc0022a8c
c000adc6:	e8 99 c1 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000adcb:	83 c4 10             	add    esp,0x10
c000adce:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000add3:	0f 84 b3 00 00 00    	je     c000ae8c <VCache::read(unsigned long long, int, void*)+0x1d2>
c000add9:	51                   	push   ecx
c000adda:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000addd:	05 ff 0f 00 00       	add    eax,0xfff
c000ade2:	e9 8d 00 00 00       	jmp    c000ae74 <VCache::read(unsigned long long, int, void*)+0x1ba>
c000ade7:	90                   	nop
c000ade8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000adeb:	89 ef                	mov    edi,ebp
c000aded:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000adf3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000adf6:	8d 70 ff             	lea    esi,[eax-0x1]
c000adf9:	23 74 24 08          	and    esi,DWORD PTR [esp+0x8]
c000adfd:	0f af f1             	imul   esi,ecx
c000ae00:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000ae03:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ae05:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ae0a:	74 24                	je     c000ae30 <VCache::read(unsigned long long, int, void*)+0x176>
c000ae0c:	b9 00 10 00 00       	mov    ecx,0x1000
c000ae11:	52                   	push   edx
c000ae12:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000ae15:	05 ff 0f 00 00       	add    eax,0xfff
c000ae1a:	99                   	cdq    
c000ae1b:	f7 f9                	idiv   ecx
c000ae1d:	50                   	push   eax
c000ae1e:	55                   	push   ebp
c000ae1f:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ae25:	e8 c0 89 00 00       	call   c00137ea <VAS::unlockPages(unsigned long, int)>
c000ae2a:	83 c4 10             	add    esp,0x10
c000ae2d:	8d 76 00             	lea    esi,[esi+0x0]
c000ae30:	e8 d7 b1 00 00       	call   c001600c <KeRestorePreemption()>
c000ae35:	31 ff                	xor    edi,edi
c000ae37:	eb 5b                	jmp    c000ae94 <VCache::read(unsigned long long, int, void*)+0x1da>
c000ae39:	8d 76 00             	lea    esi,[esi+0x0]
c000ae3c:	83 ec 0c             	sub    esp,0xc
c000ae3f:	53                   	push   ebx
c000ae40:	e8 cb fb ff ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c000ae45:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000ae48:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae4a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae4d:	56                   	push   esi
c000ae4e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ae52:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ae56:	50                   	push   eax
c000ae57:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000ae5a:	83 c4 20             	add    esp,0x20
c000ae5d:	89 c7                	mov    edi,eax
c000ae5f:	80 7c 24 14 00       	cmp    BYTE PTR [esp+0x14],0x0
c000ae64:	74 26                	je     c000ae8c <VCache::read(unsigned long long, int, void*)+0x1d2>
c000ae66:	50                   	push   eax
c000ae67:	0f af 73 0c          	imul   esi,DWORD PTR [ebx+0xc]
c000ae6b:	8d 86 ff 0f 00 00    	lea    eax,[esi+0xfff]
c000ae71:	8d 76 00             	lea    esi,[esi+0x0]
c000ae74:	b9 00 10 00 00       	mov    ecx,0x1000
c000ae79:	99                   	cdq    
c000ae7a:	f7 f9                	idiv   ecx
c000ae7c:	50                   	push   eax
c000ae7d:	55                   	push   ebp
c000ae7e:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000ae84:	e8 61 89 00 00       	call   c00137ea <VAS::unlockPages(unsigned long, int)>
c000ae89:	83 c4 10             	add    esp,0x10
c000ae8c:	e8 7b b1 00 00       	call   c001600c <KeRestorePreemption()>
c000ae91:	8d 76 00             	lea    esi,[esi+0x0]
c000ae94:	83 c4 2c             	add    esp,0x2c
c000ae97:	89 f8                	mov    eax,edi
c000ae99:	5b                   	pop    ebx
c000ae9a:	5e                   	pop    esi
c000ae9b:	5f                   	pop    edi
c000ae9c:	5d                   	pop    ebp
c000ae9d:	c3                   	ret    

c000ae9e <Video::putrect(int, int, int, int, unsigned int)>:
c000ae9e:	55                   	push   ebp
c000ae9f:	57                   	push   edi
c000aea0:	56                   	push   esi
c000aea1:	53                   	push   ebx
c000aea2:	83 ec 1c             	sub    esp,0x1c
c000aea5:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000aea9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000aead:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000aeb1:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000aeb5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000aeb9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aebd:	01 df                	add    edi,ebx
c000aebf:	39 fb                	cmp    ebx,edi
c000aec1:	7d 1f                	jge    c000aee2 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000aec3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000aec7:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000aecb:	7d 12                	jge    c000aedf <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000aecd:	8b 16                	mov    edx,DWORD PTR [esi]
c000aecf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aed3:	53                   	push   ebx
c000aed4:	55                   	push   ebp
c000aed5:	45                   	inc    ebp
c000aed6:	56                   	push   esi
c000aed7:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000aeda:	83 c4 10             	add    esp,0x10
c000aedd:	eb e8                	jmp    c000aec7 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000aedf:	43                   	inc    ebx
c000aee0:	eb dd                	jmp    c000aebf <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000aee2:	83 c4 1c             	add    esp,0x1c
c000aee5:	5b                   	pop    ebx
c000aee6:	5e                   	pop    esi
c000aee7:	5f                   	pop    edi
c000aee8:	5d                   	pop    ebp
c000aee9:	c3                   	ret    

c000aeea <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000aeea:	55                   	push   ebp
c000aeeb:	57                   	push   edi
c000aeec:	31 ff                	xor    edi,edi
c000aeee:	56                   	push   esi
c000aeef:	53                   	push   ebx
c000aef0:	83 ec 1c             	sub    esp,0x1c
c000aef3:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000aef7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000aefb:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000af02:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000af07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000af0b:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000af0f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000af13:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000af16:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000af1a:	01 f9                	add    ecx,edi
c000af1c:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000af20:	7d 2f                	jge    c000af51 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000af22:	31 f6                	xor    esi,esi
c000af24:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000af28:	01 f2                	add    edx,esi
c000af2a:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000af2e:	7d 1a                	jge    c000af4a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000af30:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000af33:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000af36:	46                   	inc    esi
c000af37:	51                   	push   ecx
c000af38:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000af3c:	52                   	push   edx
c000af3d:	55                   	push   ebp
c000af3e:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000af41:	83 c4 10             	add    esp,0x10
c000af44:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000af48:	eb da                	jmp    c000af24 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000af4a:	47                   	inc    edi
c000af4b:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000af4f:	eb c5                	jmp    c000af16 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000af51:	83 c4 1c             	add    esp,0x1c
c000af54:	5b                   	pop    ebx
c000af55:	5e                   	pop    esi
c000af56:	5f                   	pop    edi
c000af57:	5d                   	pop    ebp
c000af58:	c3                   	ret    
c000af59:	90                   	nop

c000af5a <Video::blit(unsigned int*, int, int, int, int)>:
c000af5a:	55                   	push   ebp
c000af5b:	57                   	push   edi
c000af5c:	56                   	push   esi
c000af5d:	53                   	push   ebx
c000af5e:	83 ec 1c             	sub    esp,0x1c
c000af61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000af65:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000af69:	85 c0                	test   eax,eax
c000af6b:	79 02                	jns    c000af6f <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000af6d:	31 c0                	xor    eax,eax
c000af6f:	c1 e0 02             	shl    eax,0x2
c000af72:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000af76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000af7a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000af7e:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000af82:	39 d8                	cmp    eax,ebx
c000af84:	7e 49                	jle    c000afcf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000af86:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000af8c:	7c 41                	jl     c000afcf <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000af8e:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000af92:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000af96:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000af9a:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000af9e:	39 f9                	cmp    ecx,edi
c000afa0:	7e 22                	jle    c000afc4 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000afa2:	83 c5 04             	add    ebp,0x4
c000afa5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000afab:	7c 14                	jl     c000afc1 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000afad:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000afaf:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000afb2:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000afb6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000afba:	56                   	push   esi
c000afbb:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000afbe:	83 c4 10             	add    esp,0x10
c000afc1:	47                   	inc    edi
c000afc2:	eb d2                	jmp    c000af96 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000afc4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000afc8:	43                   	inc    ebx
c000afc9:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000afcd:	eb ab                	jmp    c000af7a <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000afcf:	83 c4 1c             	add    esp,0x1c
c000afd2:	5b                   	pop    ebx
c000afd3:	5e                   	pop    esi
c000afd4:	5f                   	pop    edi
c000afd5:	5d                   	pop    ebp
c000afd6:	c3                   	ret    
c000afd7:	90                   	nop

c000afd8 <Video::clearScreen(unsigned int)>:
c000afd8:	57                   	push   edi
c000afd9:	56                   	push   esi
c000afda:	53                   	push   ebx
c000afdb:	31 db                	xor    ebx,ebx
c000afdd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000afe1:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000afe7:	7e 1f                	jle    c000b008 <Video::clearScreen(unsigned int)+0x30>
c000afe9:	31 ff                	xor    edi,edi
c000afeb:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000aff1:	7e 12                	jle    c000b005 <Video::clearScreen(unsigned int)+0x2d>
c000aff3:	8b 06                	mov    eax,DWORD PTR [esi]
c000aff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aff9:	53                   	push   ebx
c000affa:	57                   	push   edi
c000affb:	47                   	inc    edi
c000affc:	56                   	push   esi
c000affd:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b000:	83 c4 10             	add    esp,0x10
c000b003:	eb e6                	jmp    c000afeb <Video::clearScreen(unsigned int)+0x13>
c000b005:	43                   	inc    ebx
c000b006:	eb d9                	jmp    c000afe1 <Video::clearScreen(unsigned int)+0x9>
c000b008:	5b                   	pop    ebx
c000b009:	5e                   	pop    esi
c000b00a:	5f                   	pop    edi
c000b00b:	c3                   	ret    

c000b00c <Video::putpixel(int, int, unsigned int)>:
c000b00c:	c7 44 24 04 c4 2a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022ac4
c000b014:	e9 31 46 00 00       	jmp    c000f64a <KePanic(char const*)>
c000b019:	90                   	nop

c000b01a <Video::readPixelApprox(int, int)>:
c000b01a:	83 ec 18             	sub    esp,0x18
c000b01d:	68 e5 2a 02 c0       	push   0xc0022ae5
c000b022:	e8 23 46 00 00       	call   c000f64a <KePanic(char const*)>
c000b027:	31 c0                	xor    eax,eax
c000b029:	83 c4 1c             	add    esp,0x1c
c000b02c:	c3                   	ret    
c000b02d:	90                   	nop

c000b02e <Video::Video(char const*)>:
c000b02e:	83 ec 0c             	sub    esp,0xc
c000b031:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b035:	83 ec 08             	sub    esp,0x8
c000b038:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b03c:	50                   	push   eax
c000b03d:	e8 b2 e1 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000b042:	83 c4 10             	add    esp,0x10
c000b045:	ba 88 2b 02 c0       	mov    edx,0xc0022b88
c000b04a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b04e:	89 10                	mov    DWORD PTR [eax],edx
c000b050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b054:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000b05e:	90                   	nop
c000b05f:	83 c4 0c             	add    esp,0xc
c000b062:	c3                   	ret    
c000b063:	90                   	nop

c000b064 <Video::~Video()>:
c000b064:	83 ec 0c             	sub    esp,0xc
c000b067:	ba 88 2b 02 c0       	mov    edx,0xc0022b88
c000b06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b070:	89 10                	mov    DWORD PTR [eax],edx
c000b072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b076:	83 ec 0c             	sub    esp,0xc
c000b079:	50                   	push   eax
c000b07a:	e8 15 df ff ff       	call   c0008f94 <Device::~Device()>
c000b07f:	83 c4 10             	add    esp,0x10
c000b082:	90                   	nop
c000b083:	83 c4 0c             	add    esp,0xc
c000b086:	c3                   	ret    
c000b087:	90                   	nop

c000b088 <Video::~Video()>:
c000b088:	83 ec 0c             	sub    esp,0xc
c000b08b:	83 ec 0c             	sub    esp,0xc
c000b08e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b092:	e8 cd ff ff ff       	call   c000b064 <Video::~Video()>
c000b097:	83 c4 10             	add    esp,0x10
c000b09a:	83 ec 08             	sub    esp,0x8
c000b09d:	68 64 01 00 00       	push   0x164
c000b0a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b0a6:	e8 e0 18 00 00       	call   c000c98b <operator delete(void*, unsigned long)>
c000b0ab:	83 c4 10             	add    esp,0x10
c000b0ae:	83 c4 0c             	add    esp,0xc
c000b0b1:	c3                   	ret    

c000b0b2 <Video::isMonochrome()>:
c000b0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0b6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000b0bc:	c3                   	ret    
c000b0bd:	90                   	nop

c000b0be <Video::getWidth()>:
c000b0be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000b0c8:	c3                   	ret    
c000b0c9:	90                   	nop

c000b0ca <Video::getHeight()>:
c000b0ca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b0ce:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000b0d4:	c3                   	ret    
c000b0d5:	90                   	nop

c000b0d6 <Video::drawCursor(int, int, unsigned int*, int)>:
c000b0d6:	55                   	push   ebp
c000b0d7:	57                   	push   edi
c000b0d8:	56                   	push   esi
c000b0d9:	53                   	push   ebx
c000b0da:	83 ec 2c             	sub    esp,0x2c
c000b0dd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b0e1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000b0e5:	83 f8 01             	cmp    eax,0x1
c000b0e8:	19 c9                	sbb    ecx,ecx
c000b0ea:	31 db                	xor    ebx,ebx
c000b0ec:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000b0f0:	89 cd                	mov    ebp,ecx
c000b0f2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000b0fa:	f7 d5                	not    ebp
c000b0fc:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000b102:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b106:	01 d8                	add    eax,ebx
c000b108:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b10c:	56                   	push   esi
c000b10d:	e8 b8 ff ff ff       	call   c000b0ca <Video::getHeight()>
c000b112:	59                   	pop    ecx
c000b113:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b117:	7e 70                	jle    c000b189 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000b119:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b11d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000b121:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000b124:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b128:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b12c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000b133:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b137:	89 f8                	mov    eax,edi
c000b139:	83 c0 20             	add    eax,0x20
c000b13c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b140:	56                   	push   esi
c000b141:	e8 78 ff ff ff       	call   c000b0be <Video::getWidth()>
c000b146:	5a                   	pop    edx
c000b147:	39 c7                	cmp    edi,eax
c000b149:	7d 34                	jge    c000b17f <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000b14b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000b150:	74 05                	je     c000b157 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000b152:	8b 06                	mov    eax,DWORD PTR [esi]
c000b154:	55                   	push   ebp
c000b155:	eb 0d                	jmp    c000b164 <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000b157:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000b15c:	74 12                	je     c000b170 <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000b15e:	8b 06                	mov    eax,DWORD PTR [esi]
c000b160:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b164:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b168:	57                   	push   edi
c000b169:	56                   	push   esi
c000b16a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b16d:	83 c4 10             	add    esp,0x10
c000b170:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000b174:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000b178:	47                   	inc    edi
c000b179:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000b17d:	75 c1                	jne    c000b140 <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000b17f:	43                   	inc    ebx
c000b180:	83 fb 20             	cmp    ebx,0x20
c000b183:	0f 85 79 ff ff ff    	jne    c000b102 <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000b189:	83 c4 2c             	add    esp,0x2c
c000b18c:	5b                   	pop    ebx
c000b18d:	5e                   	pop    esi
c000b18e:	5f                   	pop    edi
c000b18f:	5d                   	pop    ebp
c000b190:	c3                   	ret    
c000b191:	90                   	nop

c000b192 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000b192:	55                   	push   ebp
c000b193:	57                   	push   edi
c000b194:	56                   	push   esi
c000b195:	53                   	push   ebx
c000b196:	83 ec 48             	sub    esp,0x48
c000b199:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000b19d:	0f b6 53 0c          	movzx  edx,BYTE PTR [ebx+0xc]
c000b1a1:	0f b6 43 0d          	movzx  eax,BYTE PTR [ebx+0xd]
c000b1a5:	c1 e0 08             	shl    eax,0x8
c000b1a8:	01 d0                	add    eax,edx
c000b1aa:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000b1ae:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1b2:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000b1b6:	c1 e0 08             	shl    eax,0x8
c000b1b9:	01 d0                	add    eax,edx
c000b1bb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b1bf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b1c3:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000b1c8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b1cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000b1d0:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000b1d7:	50                   	push   eax
c000b1d8:	e8 26 41 00 00       	call   c000f303 <malloc>
c000b1dd:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1e1:	83 c4 10             	add    esp,0x10
c000b1e4:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000b1e9:	75 10                	jne    c000b1fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x69>
c000b1eb:	83 ec 0c             	sub    esp,0xc
c000b1ee:	68 10 2b 02 c0       	push   0xc0022b10
c000b1f3:	e8 52 44 00 00       	call   c000f64a <KePanic(char const*)>
c000b1f8:	83 c4 10             	add    esp,0x10
c000b1fb:	51                   	push   ecx
c000b1fc:	51                   	push   ecx
c000b1fd:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b201:	50                   	push   eax
c000b202:	68 20 2b 02 c0       	push   0xc0022b20
c000b207:	e8 58 bd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b20c:	8a 43 11             	mov    al,BYTE PTR [ebx+0x11]
c000b20f:	83 e0 20             	and    eax,0x20
c000b212:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c000b216:	85 c0                	test   eax,eax
c000b218:	5e                   	pop    esi
c000b219:	0f 94 c0             	sete   al
c000b21c:	5f                   	pop    edi
c000b21d:	0f b6 c0             	movzx  eax,al
c000b220:	be 12 00 00 00       	mov    esi,0x12
c000b225:	50                   	push   eax
c000b226:	68 2a 2b 02 c0       	push   0xc0022b2a
c000b22b:	e8 34 bd ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b230:	0f b6 53 01          	movzx  edx,BYTE PTR [ebx+0x1]
c000b234:	83 c4 10             	add    esp,0x10
c000b237:	89 d0                	mov    eax,edx
c000b239:	85 d2                	test   edx,edx
c000b23b:	74 11                	je     c000b24e <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000b23d:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c000b241:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000b245:	c1 fe 03             	sar    esi,0x3
c000b248:	0f af f1             	imul   esi,ecx
c000b24b:	83 c6 12             	add    esi,0x12
c000b24e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000b253:	74 07                	je     c000b25c <Video::tgaParse(unsigned char*, int, int*, int*)+0xca>
c000b255:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000b25a:	75 12                	jne    c000b26e <Video::tgaParse(unsigned char*, int, int*, int*)+0xdc>
c000b25c:	83 ec 0c             	sub    esp,0xc
c000b25f:	68 38 2b 02 c0       	push   0xc0022b38
c000b264:	e8 fb bc ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b269:	e9 a0 02 00 00       	jmp    c000b50e <Video::tgaParse(unsigned char*, int, int*, int*)+0x37c>
c000b26e:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000b272:	83 f9 02             	cmp    ecx,0x2
c000b275:	74 0e                	je     c000b285 <Video::tgaParse(unsigned char*, int, int*, int*)+0xf3>
c000b277:	83 f9 0a             	cmp    ecx,0xa
c000b27a:	0f 84 c8 00 00 00    	je     c000b348 <Video::tgaParse(unsigned char*, int, int*, int*)+0x1b6>
c000b280:	e9 72 02 00 00       	jmp    c000b4f7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x365>
c000b285:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b28a:	75 0e                	jne    c000b29a <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b28c:	84 c0                	test   al,al
c000b28e:	75 0a                	jne    c000b29a <Video::tgaParse(unsigned char*, int, int*, int*)+0x108>
c000b290:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b293:	83 e8 18             	sub    eax,0x18
c000b296:	a8 f7                	test   al,0xf7
c000b298:	74 0d                	je     c000b2a7 <Video::tgaParse(unsigned char*, int, int*, int*)+0x115>
c000b29a:	83 ec 0c             	sub    esp,0xc
c000b29d:	68 4d 2b 02 c0       	push   0xc0022b4d
c000b2a2:	e9 58 02 00 00       	jmp    c000b4ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b2a7:	0f b6 54 24 1f       	movzx  edx,BYTE PTR [esp+0x1f]
c000b2ac:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b2b4:	31 c0                	xor    eax,eax
c000b2b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b2ba:	89 c7                	mov    edi,eax
c000b2bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b2c4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000b2c9:	75 15                	jne    c000b2e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b2cb:	99                   	cdq    
c000b2cc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b2d0:	85 d2                	test   edx,edx
c000b2d2:	75 0c                	jne    c000b2e0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000b2d4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000b2d8:	29 c7                	sub    edi,eax
c000b2da:	4f                   	dec    edi
c000b2db:	0f af 7c 24 08       	imul   edi,DWORD PTR [esp+0x8]
c000b2e0:	31 d2                	xor    edx,edx
c000b2e2:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b2e6:	75 08                	jne    c000b2f0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000b2e8:	0f b6 54 33 03       	movzx  edx,BYTE PTR [ebx+esi*1+0x3]
c000b2ed:	c1 e2 18             	shl    edx,0x18
c000b2f0:	0f b6 4c 33 02       	movzx  ecx,BYTE PTR [ebx+esi*1+0x2]
c000b2f5:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000b2f9:	c1 e1 10             	shl    ecx,0x10
c000b2fc:	8d 47 01             	lea    eax,[edi+0x1]
c000b2ff:	89 cd                	mov    ebp,ecx
c000b301:	0f b6 4c 33 01       	movzx  ecx,BYTE PTR [ebx+esi*1+0x1]
c000b306:	c1 e1 08             	shl    ecx,0x8
c000b309:	09 e9                	or     ecx,ebp
c000b30b:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b30f:	09 e9                	or     ecx,ebp
c000b311:	09 d1                	or     ecx,edx
c000b313:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000b317:	89 0c ba             	mov    DWORD PTR [edx+edi*4],ecx
c000b31a:	0f b6 53 10          	movzx  edx,BYTE PTR [ebx+0x10]
c000b31e:	c1 fa 03             	sar    edx,0x3
c000b321:	01 d6                	add    esi,edx
c000b323:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b327:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000b32b:	7e 04                	jle    c000b331 <Video::tgaParse(unsigned char*, int, int*, int*)+0x19f>
c000b32d:	89 c7                	mov    edi,eax
c000b32f:	eb 93                	jmp    c000b2c4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000b331:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b335:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000b339:	39 54 24 10          	cmp    DWORD PTR [esp+0x10],edx
c000b33d:	0f 8f 77 ff ff ff    	jg     c000b2ba <Video::tgaParse(unsigned char*, int, int*, int*)+0x128>
c000b343:	e9 d3 01 00 00       	jmp    c000b51b <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b348:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000b34d:	75 0e                	jne    c000b35d <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b34f:	85 d2                	test   edx,edx
c000b351:	75 0a                	jne    c000b35d <Video::tgaParse(unsigned char*, int, int*, int*)+0x1cb>
c000b353:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000b356:	83 e8 18             	sub    eax,0x18
c000b359:	a8 f7                	test   al,0xf7
c000b35b:	74 0d                	je     c000b36a <Video::tgaParse(unsigned char*, int, int*, int*)+0x1d8>
c000b35d:	83 ec 0c             	sub    esp,0xc
c000b360:	68 5b 2b 02 c0       	push   0xc0022b5b
c000b365:	e9 95 01 00 00       	jmp    c000b4ff <Video::tgaParse(unsigned char*, int, int*, int*)+0x36d>
c000b36a:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000b372:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000b37a:	31 c9                	xor    ecx,ecx
c000b37c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b380:	39 7c 24 20          	cmp    DWORD PTR [esp+0x20],edi
c000b384:	0f 8e 91 01 00 00    	jle    c000b51b <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b38a:	3b 74 24 58          	cmp    esi,DWORD PTR [esp+0x58]
c000b38e:	0f 8d 87 01 00 00    	jge    c000b51b <Video::tgaParse(unsigned char*, int, int*, int*)+0x389>
c000b394:	8d 46 01             	lea    eax,[esi+0x1]
c000b397:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b39b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b39f:	83 fd 7f             	cmp    ebp,0x7f
c000b3a2:	89 e8                	mov    eax,ebp
c000b3a4:	0f 8e 9d 00 00 00    	jle    c000b447 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2b5>
c000b3aa:	83 e0 7f             	and    eax,0x7f
c000b3ad:	31 d2                	xor    edx,edx
c000b3af:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b3b3:	40                   	inc    eax
c000b3b4:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b3b8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3bc:	75 0a                	jne    c000b3c8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x236>
c000b3be:	0f b6 6c 33 04       	movzx  ebp,BYTE PTR [ebx+esi*1+0x4]
c000b3c3:	89 ea                	mov    edx,ebp
c000b3c5:	c1 e2 18             	shl    edx,0x18
c000b3c8:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c000b3cd:	c1 e0 10             	shl    eax,0x10
c000b3d0:	89 c7                	mov    edi,eax
c000b3d2:	0f b6 44 33 02       	movzx  eax,BYTE PTR [ebx+esi*1+0x2]
c000b3d7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b3db:	c1 e0 08             	shl    eax,0x8
c000b3de:	0f b6 2c 33          	movzx  ebp,BYTE PTR [ebx+esi*1]
c000b3e2:	09 f8                	or     eax,edi
c000b3e4:	31 f6                	xor    esi,esi
c000b3e6:	09 c5                	or     ebp,eax
c000b3e8:	0f b6 7c 24 1f       	movzx  edi,BYTE PTR [esp+0x1f]
c000b3ed:	09 d5                	or     ebp,edx
c000b3ef:	85 ff                	test   edi,edi
c000b3f1:	75 1d                	jne    c000b410 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b3f3:	89 c8                	mov    eax,ecx
c000b3f5:	99                   	cdq    
c000b3f6:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b3fa:	85 d2                	test   edx,edx
c000b3fc:	75 12                	jne    c000b410 <Video::tgaParse(unsigned char*, int, int*, int*)+0x27e>
c000b3fe:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b402:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b406:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b40a:	49                   	dec    ecx
c000b40b:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b410:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b414:	8d 51 01             	lea    edx,[ecx+0x1]
c000b417:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000b41a:	39 74 24 24          	cmp    DWORD PTR [esp+0x24],esi
c000b41e:	8d 46 01             	lea    eax,[esi+0x1]
c000b421:	7e 06                	jle    c000b429 <Video::tgaParse(unsigned char*, int, int*, int*)+0x297>
c000b423:	89 c6                	mov    esi,eax
c000b425:	89 d1                	mov    ecx,edx
c000b427:	eb c6                	jmp    c000b3ef <Video::tgaParse(unsigned char*, int, int*, int*)+0x25d>
c000b429:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b42d:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b431:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b435:	c1 f8 03             	sar    eax,0x3
c000b438:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b43c:	89 d1                	mov    ecx,edx
c000b43e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000b442:	e9 35 ff ff ff       	jmp    c000b37c <Video::tgaParse(unsigned char*, int, int*, int*)+0x1ea>
c000b447:	8d 45 01             	lea    eax,[ebp+0x1]
c000b44a:	31 f6                	xor    esi,esi
c000b44c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b450:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000b455:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b459:	83 7c 24 2c 00       	cmp    DWORD PTR [esp+0x2c],0x0
c000b45e:	75 1d                	jne    c000b47d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b460:	89 c8                	mov    eax,ecx
c000b462:	99                   	cdq    
c000b463:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000b467:	85 d2                	test   edx,edx
c000b469:	75 12                	jne    c000b47d <Video::tgaParse(unsigned char*, int, int*, int*)+0x2eb>
c000b46b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b46f:	2b 4c 24 14          	sub    ecx,DWORD PTR [esp+0x14]
c000b473:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c000b477:	49                   	dec    ecx
c000b478:	0f af 4c 24 08       	imul   ecx,DWORD PTR [esp+0x8]
c000b47d:	c7 44 24 24 00 00 00 ff 	mov    DWORD PTR [esp+0x24],0xff000000
c000b485:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000b489:	75 10                	jne    c000b49b <Video::tgaParse(unsigned char*, int, int*, int*)+0x309>
c000b48b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b48f:	0f b6 7c 03 03       	movzx  edi,BYTE PTR [ebx+eax*1+0x3]
c000b494:	c1 e7 18             	shl    edi,0x18
c000b497:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000b49b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b49f:	8d 51 01             	lea    edx,[ecx+0x1]
c000b4a2:	0f b6 44 03 02       	movzx  eax,BYTE PTR [ebx+eax*1+0x2]
c000b4a7:	c1 e0 10             	shl    eax,0x10
c000b4aa:	89 c7                	mov    edi,eax
c000b4ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b4b0:	0f b6 44 03 01       	movzx  eax,BYTE PTR [ebx+eax*1+0x1]
c000b4b5:	c1 e0 08             	shl    eax,0x8
c000b4b8:	09 f8                	or     eax,edi
c000b4ba:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b4be:	0f b6 3c 3b          	movzx  edi,BYTE PTR [ebx+edi*1]
c000b4c2:	09 f8                	or     eax,edi
c000b4c4:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000b4c8:	0b 44 24 24          	or     eax,DWORD PTR [esp+0x24]
c000b4cc:	89 04 8f             	mov    DWORD PTR [edi+ecx*4],eax
c000b4cf:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000b4d3:	c1 f8 03             	sar    eax,0x3
c000b4d6:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c000b4da:	8d 46 01             	lea    eax,[esi+0x1]
c000b4dd:	39 f5                	cmp    ebp,esi
c000b4df:	7e 09                	jle    c000b4ea <Video::tgaParse(unsigned char*, int, int*, int*)+0x358>
c000b4e1:	89 c6                	mov    esi,eax
c000b4e3:	89 d1                	mov    ecx,edx
c000b4e5:	e9 6f ff ff ff       	jmp    c000b459 <Video::tgaParse(unsigned char*, int, int*, int*)+0x2c7>
c000b4ea:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b4ee:	01 74 24 18          	add    DWORD PTR [esp+0x18],esi
c000b4f2:	e9 45 ff ff ff       	jmp    c000b43c <Video::tgaParse(unsigned char*, int, int*, int*)+0x2aa>
c000b4f7:	52                   	push   edx
c000b4f8:	52                   	push   edx
c000b4f9:	51                   	push   ecx
c000b4fa:	68 6a 2b 02 c0       	push   0xc0022b6a
c000b4ff:	e8 60 ba ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000b504:	58                   	pop    eax
c000b505:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b509:	e8 05 3e 00 00       	call   c000f313 <free>
c000b50e:	83 c4 10             	add    esp,0x10
c000b511:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000b519:	eb 14                	jmp    c000b52f <Video::tgaParse(unsigned char*, int, int*, int*)+0x39d>
c000b51b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b51f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000b523:	89 18                	mov    DWORD PTR [eax],ebx
c000b525:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b529:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b52d:	89 18                	mov    DWORD PTR [eax],ebx
c000b52f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b533:	83 c4 3c             	add    esp,0x3c
c000b536:	5b                   	pop    ebx
c000b537:	5e                   	pop    esi
c000b538:	5f                   	pop    edi
c000b539:	5d                   	pop    ebp
c000b53a:	c3                   	ret    
c000b53b:	90                   	nop

c000b53c <Video::putTGA(int, int, unsigned char*, int)>:
c000b53c:	55                   	push   ebp
c000b53d:	57                   	push   edi
c000b53e:	56                   	push   esi
c000b53f:	53                   	push   ebx
c000b540:	83 ec 28             	sub    esp,0x28
c000b543:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000b547:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b54b:	50                   	push   eax
c000b54c:	8d 44 24 18          	lea    eax,[esp+0x18]
c000b550:	50                   	push   eax
c000b551:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b555:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000b559:	57                   	push   edi
c000b55a:	e8 33 fc ff ff       	call   c000b192 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000b55f:	83 c4 20             	add    esp,0x20
c000b562:	85 c0                	test   eax,eax
c000b564:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000b568:	74 3a                	je     c000b5a4 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b56a:	89 c6                	mov    esi,eax
c000b56c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b570:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b574:	39 d8                	cmp    eax,ebx
c000b576:	7e 2c                	jle    c000b5a4 <Video::putTGA(int, int, unsigned char*, int)+0x68>
c000b578:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000b57c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b580:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b584:	39 e8                	cmp    eax,ebp
c000b586:	7e 19                	jle    c000b5a1 <Video::putTGA(int, int, unsigned char*, int)+0x65>
c000b588:	83 c6 04             	add    esi,0x4
c000b58b:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000b58e:	85 c0                	test   eax,eax
c000b590:	79 0c                	jns    c000b59e <Video::putTGA(int, int, unsigned char*, int)+0x62>
c000b592:	8b 17                	mov    edx,DWORD PTR [edi]
c000b594:	50                   	push   eax
c000b595:	53                   	push   ebx
c000b596:	55                   	push   ebp
c000b597:	57                   	push   edi
c000b598:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b59b:	83 c4 10             	add    esp,0x10
c000b59e:	45                   	inc    ebp
c000b59f:	eb db                	jmp    c000b57c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000b5a1:	43                   	inc    ebx
c000b5a2:	eb c8                	jmp    c000b56c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000b5a4:	83 c4 1c             	add    esp,0x1c
c000b5a7:	5b                   	pop    ebx
c000b5a8:	5e                   	pop    esi
c000b5a9:	5f                   	pop    edi
c000b5aa:	5d                   	pop    ebp
c000b5ab:	c3                   	ret    

c000b5ac <ACPI::close(int, int, void*)>:
c000b5ac:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000b5b1:	c3                   	ret    
c000b5b2:	66 90                	xchg   ax,ax

c000b5b4 <loadACPITables(unsigned char*)>:
c000b5b4:	57                   	push   edi
c000b5b5:	56                   	push   esi
c000b5b6:	53                   	push   ebx
c000b5b7:	83 ec 60             	sub    esp,0x60
c000b5ba:	83 7c 24 70 00       	cmp    DWORD PTR [esp+0x70],0x0
c000b5bf:	0f 84 43 02 00 00    	je     c000b808 <loadACPITables(unsigned char*)+0x254>
c000b5c5:	a0 20 aa 02 c0       	mov    al,ds:0xc002aa20
c000b5ca:	0f b6 c0             	movzx  eax,al
c000b5cd:	85 c0                	test   eax,eax
c000b5cf:	74 7b                	je     c000b64c <loadACPITables(unsigned char*)+0x98>
c000b5d1:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b5d5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000b5d9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000b5dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b5e0:	83 e8 24             	sub    eax,0x24
c000b5e3:	c1 e8 03             	shr    eax,0x3
c000b5e6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b5ea:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000b5f2:	66 90                	xchg   ax,ax
c000b5f4:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b5f8:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000b5fc:	0f 8d ba 00 00 00    	jge    c000b6bc <loadACPITables(unsigned char*)+0x108>
c000b602:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b606:	83 c0 24             	add    eax,0x24
c000b609:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000b60d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000b611:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b615:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000b619:	c1 e0 03             	shl    eax,0x3
c000b61c:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000b620:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b624:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000b627:	8b 00                	mov    eax,DWORD PTR [eax]
c000b629:	89 c1                	mov    ecx,eax
c000b62b:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b630:	8d 50 01             	lea    edx,[eax+0x1]
c000b633:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b639:	89 ca                	mov    edx,ecx
c000b63b:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b642:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000b647:	eb ab                	jmp    c000b5f4 <loadACPITables(unsigned char*)+0x40>
c000b649:	8d 76 00             	lea    esi,[esi+0x0]
c000b64c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b650:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b654:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b658:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b65b:	83 e8 24             	sub    eax,0x24
c000b65e:	c1 e8 02             	shr    eax,0x2
c000b661:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b665:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000b66d:	8d 76 00             	lea    esi,[esi+0x0]
c000b670:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b674:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000b678:	7d 42                	jge    c000b6bc <loadACPITables(unsigned char*)+0x108>
c000b67a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000b67e:	83 c0 24             	add    eax,0x24
c000b681:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b685:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b689:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000b68d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000b691:	c1 e0 02             	shl    eax,0x2
c000b694:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000b698:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b69c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b69e:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b6a3:	8d 50 01             	lea    edx,[eax+0x1]
c000b6a6:	89 15 00 a8 02 c0    	mov    DWORD PTR ds:0xc002a800,edx
c000b6ac:	89 ca                	mov    edx,ecx
c000b6ae:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b6b5:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000b6ba:	eb b4                	jmp    c000b670 <loadACPITables(unsigned char*)+0xbc>
c000b6bc:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000b6c4:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b6c9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000b6cd:	0f 8d 39 01 00 00    	jge    c000b80c <loadACPITables(unsigned char*)+0x258>
c000b6d3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b6d7:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b6de:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b6e2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6e6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000b6ea:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b6ee:	25 ff 0f 00 00       	and    eax,0xfff
c000b6f3:	89 c6                	mov    esi,eax
c000b6f5:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c000b6fb:	83 ec 0c             	sub    esp,0xc
c000b6fe:	6a 01                	push   0x1
c000b700:	e8 54 73 00 00       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c000b705:	83 c4 10             	add    esp,0x10
c000b708:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b70c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b712:	83 ec 0c             	sub    esp,0xc
c000b715:	6a 01                	push   0x1
c000b717:	6a 01                	push   0x1
c000b719:	50                   	push   eax
c000b71a:	52                   	push   edx
c000b71b:	53                   	push   ebx
c000b71c:	e8 05 7c 00 00       	call   c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b721:	83 c4 20             	add    esp,0x20
c000b724:	09 f0                	or     eax,esi
c000b726:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b72a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b72e:	c1 e0 03             	shl    eax,0x3
c000b731:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b736:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000b73a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b73e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000b742:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000b74a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b74e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b752:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b756:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b75a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b75e:	89 c6                	mov    esi,eax
c000b760:	89 d7                	mov    edi,edx
c000b762:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b764:	89 c8                	mov    eax,ecx
c000b766:	89 fa                	mov    edx,edi
c000b768:	89 f3                	mov    ebx,esi
c000b76a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000b76e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b772:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b776:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b77a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000b77d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b781:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000b785:	05 00 10 00 00       	add    eax,0x1000
c000b78a:	c1 e8 0c             	shr    eax,0xc
c000b78d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b791:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b795:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b799:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000b79d:	25 ff 0f 00 00       	and    eax,0xfff
c000b7a2:	89 c6                	mov    esi,eax
c000b7a4:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c000b7aa:	83 ec 0c             	sub    esp,0xc
c000b7ad:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000b7b1:	e8 a3 72 00 00       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c000b7b6:	83 c4 10             	add    esp,0x10
c000b7b9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000b7bd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b7c3:	83 ec 0c             	sub    esp,0xc
c000b7c6:	6a 01                	push   0x1
c000b7c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b7cc:	50                   	push   eax
c000b7cd:	52                   	push   edx
c000b7ce:	53                   	push   ebx
c000b7cf:	e8 52 7b 00 00       	call   c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b7d4:	83 c4 20             	add    esp,0x20
c000b7d7:	09 f0                	or     eax,esi
c000b7d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b7dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000b7e1:	83 ec 0c             	sub    esp,0xc
c000b7e4:	50                   	push   eax
c000b7e5:	e8 77 75 00 00       	call   c0012d61 <Virt::freeKernelVirtualPages(unsigned long)>
c000b7ea:	83 c4 10             	add    esp,0x10
c000b7ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000b7f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000b7f5:	89 14 c5 24 a8 02 c0 	mov    DWORD PTR [eax*8-0x3ffd57dc],edx
c000b7fc:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000b801:	e9 be fe ff ff       	jmp    c000b6c4 <loadACPITables(unsigned char*)+0x110>
c000b806:	66 90                	xchg   ax,ax
c000b808:	90                   	nop
c000b809:	8d 76 00             	lea    esi,[esi+0x0]
c000b80c:	83 c4 60             	add    esp,0x60
c000b80f:	5b                   	pop    ebx
c000b810:	5e                   	pop    esi
c000b811:	5f                   	pop    edi
c000b812:	c3                   	ret    
c000b813:	90                   	nop

c000b814 <findRSDT(unsigned char*)>:
c000b814:	57                   	push   edi
c000b815:	56                   	push   esi
c000b816:	53                   	push   ebx
c000b817:	83 ec 50             	sub    esp,0x50
c000b81a:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b81f:	85 c0                	test   eax,eax
c000b821:	75 0d                	jne    c000b830 <findRSDT(unsigned char*)+0x1c>
c000b823:	b8 00 00 00 00       	mov    eax,0x0
c000b828:	e9 2b 01 00 00       	jmp    c000b958 <findRSDT(unsigned char*)+0x144>
c000b82d:	8d 76 00             	lea    esi,[esi+0x0]
c000b830:	89 e0                	mov    eax,esp
c000b832:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000b836:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000b83a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b83e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000b846:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b84a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000b84e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000b852:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000b856:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000b85a:	89 c6                	mov    esi,eax
c000b85c:	89 d7                	mov    edi,edx
c000b85e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b860:	89 c8                	mov    eax,ecx
c000b862:	89 fa                	mov    edx,edi
c000b864:	89 f3                	mov    ebx,esi
c000b866:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000b86a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000b86e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000b872:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000b876:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000b87a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000b882:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b886:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000b88a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b892:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b896:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b89a:	25 ff 0f 00 00       	and    eax,0xfff
c000b89f:	89 c6                	mov    esi,eax
c000b8a1:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c000b8a7:	83 ec 0c             	sub    esp,0xc
c000b8aa:	6a 02                	push   0x2
c000b8ac:	e8 a8 71 00 00       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c000b8b1:	83 c4 10             	add    esp,0x10
c000b8b4:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000b8b8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b8be:	83 ec 0c             	sub    esp,0xc
c000b8c1:	6a 01                	push   0x1
c000b8c3:	6a 02                	push   0x2
c000b8c5:	50                   	push   eax
c000b8c6:	52                   	push   edx
c000b8c7:	53                   	push   ebx
c000b8c8:	e8 59 7a 00 00       	call   c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b8cd:	83 c4 20             	add    esp,0x20
c000b8d0:	09 f0                	or     eax,esi
c000b8d2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000b8d6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b8da:	25 ff 0f 00 00       	and    eax,0xfff
c000b8df:	89 c6                	mov    esi,eax
c000b8e1:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c000b8e7:	83 ec 0c             	sub    esp,0xc
c000b8ea:	6a 02                	push   0x2
c000b8ec:	e8 68 71 00 00       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c000b8f1:	83 c4 10             	add    esp,0x10
c000b8f4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000b8f8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000b8fe:	83 ec 0c             	sub    esp,0xc
c000b901:	6a 01                	push   0x1
c000b903:	6a 02                	push   0x2
c000b905:	50                   	push   eax
c000b906:	52                   	push   edx
c000b907:	53                   	push   ebx
c000b908:	e8 19 7a 00 00       	call   c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000b90d:	83 c4 20             	add    esp,0x20
c000b910:	09 f0                	or     eax,esi
c000b912:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000b916:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b91b:	85 c0                	test   eax,eax
c000b91d:	75 11                	jne    c000b930 <findRSDT(unsigned char*)+0x11c>
c000b91f:	c6 05 20 aa 02 c0 00 	mov    BYTE PTR ds:0xc002aa20,0x0
c000b926:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000b92a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b92e:	eb 24                	jmp    c000b954 <findRSDT(unsigned char*)+0x140>
c000b930:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000b935:	83 f8 02             	cmp    eax,0x2
c000b938:	75 12                	jne    c000b94c <findRSDT(unsigned char*)+0x138>
c000b93a:	c6 05 20 aa 02 c0 01 	mov    BYTE PTR ds:0xc002aa20,0x1
c000b941:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000b945:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000b949:	eb 09                	jmp    c000b954 <findRSDT(unsigned char*)+0x140>
c000b94b:	90                   	nop
c000b94c:	b8 00 00 00 00       	mov    eax,0x0
c000b951:	eb 05                	jmp    c000b958 <findRSDT(unsigned char*)+0x144>
c000b953:	90                   	nop
c000b954:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000b958:	83 c4 50             	add    esp,0x50
c000b95b:	5b                   	pop    ebx
c000b95c:	5e                   	pop    esi
c000b95d:	5f                   	pop    edi
c000b95e:	c3                   	ret    
c000b95f:	90                   	nop

c000b960 <findDataTable(unsigned char*, char*)>:
c000b960:	83 ec 1c             	sub    esp,0x1c
c000b963:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c000b968:	75 0a                	jne    c000b974 <findDataTable(unsigned char*, char*)+0x14>
c000b96a:	b8 00 00 00 00       	mov    eax,0x0
c000b96f:	eb 5f                	jmp    c000b9d0 <findDataTable(unsigned char*, char*)+0x70>
c000b971:	8d 76 00             	lea    esi,[esi+0x0]
c000b974:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000b97c:	a1 00 a8 02 c0       	mov    eax,ds:0xc002a800
c000b981:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000b985:	7d 41                	jge    c000b9c8 <findDataTable(unsigned char*, char*)+0x68>
c000b987:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b98b:	c1 e0 03             	shl    eax,0x3
c000b98e:	05 20 a8 02 c0       	add    eax,0xc002a820
c000b993:	83 ec 04             	sub    esp,0x4
c000b996:	6a 04                	push   0x4
c000b998:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000b99c:	50                   	push   eax
c000b99d:	e8 de 49 ff ff       	call   c0000380 <memcmp>
c000b9a2:	83 c4 10             	add    esp,0x10
c000b9a5:	85 c0                	test   eax,eax
c000b9a7:	0f 94 c0             	sete   al
c000b9aa:	0f b6 c0             	movzx  eax,al
c000b9ad:	85 c0                	test   eax,eax
c000b9af:	74 0f                	je     c000b9c0 <findDataTable(unsigned char*, char*)+0x60>
c000b9b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b9b5:	8b 04 c5 24 a8 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd57dc]
c000b9bc:	eb 12                	jmp    c000b9d0 <findDataTable(unsigned char*, char*)+0x70>
c000b9be:	66 90                	xchg   ax,ax
c000b9c0:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000b9c5:	eb b5                	jmp    c000b97c <findDataTable(unsigned char*, char*)+0x1c>
c000b9c7:	90                   	nop
c000b9c8:	b8 00 00 00 00       	mov    eax,0x0
c000b9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000b9d0:	83 c4 1c             	add    esp,0x1c
c000b9d3:	c3                   	ret    

c000b9d4 <scanMADT()>:
c000b9d4:	53                   	push   ebx
c000b9d5:	83 ec 38             	sub    esp,0x38
c000b9d8:	c7 05 28 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa28,0x0
c000b9e2:	c7 05 24 aa 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002aa24,0x0
c000b9ec:	e8 cb d0 00 00       	call   c0018abc <HalFindRSDP()>
c000b9f1:	a3 28 aa 02 c0       	mov    ds:0xc002aa28,eax
c000b9f6:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000b9fb:	85 c0                	test   eax,eax
c000b9fd:	0f 84 11 04 00 00    	je     c000be14 <scanMADT()+0x440>
c000ba03:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000ba08:	83 ec 0c             	sub    esp,0xc
c000ba0b:	50                   	push   eax
c000ba0c:	e8 03 fe ff ff       	call   c000b814 <findRSDT(unsigned char*)>
c000ba11:	83 c4 10             	add    esp,0x10
c000ba14:	a3 24 aa 02 c0       	mov    ds:0xc002aa24,eax
c000ba19:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba1e:	85 c0                	test   eax,eax
c000ba20:	0f 84 f2 03 00 00    	je     c000be18 <scanMADT()+0x444>
c000ba26:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba2b:	83 ec 0c             	sub    esp,0xc
c000ba2e:	50                   	push   eax
c000ba2f:	e8 80 fb ff ff       	call   c000b5b4 <loadACPITables(unsigned char*)>
c000ba34:	83 c4 10             	add    esp,0x10
c000ba37:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000ba3c:	83 ec 08             	sub    esp,0x8
c000ba3f:	68 cc 2b 02 c0       	push   0xc0022bcc
c000ba44:	50                   	push   eax
c000ba45:	e8 16 ff ff ff       	call   c000b960 <findDataTable(unsigned char*, char*)>
c000ba4a:	83 c4 10             	add    esp,0x10
c000ba4d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ba51:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000ba56:	0f 84 c0 03 00 00    	je     c000be1c <scanMADT()+0x448>
c000ba5c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000ba64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ba68:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ba6b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000ba6f:	0f 87 af 03 00 00    	ja     c000be24 <scanMADT()+0x450>
c000ba75:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000ba7d:	0f 87 a1 03 00 00    	ja     c000be24 <scanMADT()+0x450>
c000ba83:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba87:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ba8b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000ba8f:	8d 50 01             	lea    edx,[eax+0x1]
c000ba92:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ba96:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ba9a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000ba9e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000baa2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baa6:	8d 50 01             	lea    edx,[eax+0x1]
c000baa9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000baad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bab1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bab5:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000bab9:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000babe:	83 f8 02             	cmp    eax,0x2
c000bac1:	0f 86 59 03 00 00    	jbe    c000be20 <scanMADT()+0x44c>
c000bac7:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bacc:	85 c0                	test   eax,eax
c000bace:	75 58                	jne    c000bb28 <scanMADT()+0x154>
c000bad0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bad4:	8d 50 01             	lea    edx,[eax+0x1]
c000bad7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000badb:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000bae1:	0f b6 d2             	movzx  edx,dl
c000bae4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bae8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000baec:	88 82 60 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53a0],al
c000baf2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000baf6:	8d 50 01             	lea    edx,[eax+0x1]
c000baf9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bafd:	8a 15 20 ac 02 c0    	mov    dl,BYTE PTR ds:0xc002ac20
c000bb03:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bb06:	88 0d 20 ac 02 c0    	mov    BYTE PTR ds:0xc002ac20,cl
c000bb0c:	0f b6 d2             	movzx  edx,dl
c000bb0f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bb13:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bb17:	88 82 40 ac 02 c0    	mov    BYTE PTR [edx-0x3ffd53c0],al
c000bb1d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bb22:	e9 d9 02 00 00       	jmp    c000be00 <scanMADT()+0x42c>
c000bb27:	90                   	nop
c000bb28:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bb2d:	83 f8 01             	cmp    eax,0x1
c000bb30:	0f 85 1a 01 00 00    	jne    c000bc50 <scanMADT()+0x27c>
c000bb36:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb3a:	8d 50 01             	lea    edx,[eax+0x1]
c000bb3d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bb41:	8a 15 e0 aa 02 c0    	mov    dl,BYTE PTR ds:0xc002aae0
c000bb47:	0f b6 d2             	movzx  edx,dl
c000bb4a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000bb4e:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000bb52:	88 82 00 ab 02 c0    	mov    BYTE PTR [edx-0x3ffd5500],al
c000bb58:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000bb5d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bb61:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb65:	01 d0                	add    eax,edx
c000bb67:	83 c0 2c             	add    eax,0x2c
c000bb6a:	8a 00                	mov    al,BYTE PTR [eax]
c000bb6c:	0f b6 d0             	movzx  edx,al
c000bb6f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb73:	8d 48 01             	lea    ecx,[eax+0x1]
c000bb76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb7a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bb7e:	0f b6 c0             	movzx  eax,al
c000bb81:	c1 e0 08             	shl    eax,0x8
c000bb84:	89 d1                	mov    ecx,edx
c000bb86:	09 c1                	or     ecx,eax
c000bb88:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bb8c:	8d 50 02             	lea    edx,[eax+0x2]
c000bb8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bb93:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bb97:	0f b6 c0             	movzx  eax,al
c000bb9a:	c1 e0 10             	shl    eax,0x10
c000bb9d:	09 c1                	or     ecx,eax
c000bb9f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bba3:	8d 50 03             	lea    edx,[eax+0x3]
c000bba6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbaa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bbae:	0f b6 c0             	movzx  eax,al
c000bbb1:	c1 e0 18             	shl    eax,0x18
c000bbb4:	09 c1                	or     ecx,eax
c000bbb6:	89 ca                	mov    edx,ecx
c000bbb8:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bbbd:	0f b6 c0             	movzx  eax,al
c000bbc0:	89 14 85 20 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd54e0],edx
c000bbc7:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bbcc:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bbd0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbd4:	01 d0                	add    eax,edx
c000bbd6:	83 c0 2c             	add    eax,0x2c
c000bbd9:	8a 00                	mov    al,BYTE PTR [eax]
c000bbdb:	0f b6 d0             	movzx  edx,al
c000bbde:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbe2:	8d 48 01             	lea    ecx,[eax+0x1]
c000bbe5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bbe9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bbed:	0f b6 c0             	movzx  eax,al
c000bbf0:	c1 e0 08             	shl    eax,0x8
c000bbf3:	89 d1                	mov    ecx,edx
c000bbf5:	09 c1                	or     ecx,eax
c000bbf7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bbfb:	8d 50 02             	lea    edx,[eax+0x2]
c000bbfe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc02:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bc06:	0f b6 c0             	movzx  eax,al
c000bc09:	c1 e0 10             	shl    eax,0x10
c000bc0c:	09 c1                	or     ecx,eax
c000bc0e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc12:	8d 50 03             	lea    edx,[eax+0x3]
c000bc15:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bc19:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bc1d:	0f b6 c0             	movzx  eax,al
c000bc20:	c1 e0 18             	shl    eax,0x18
c000bc23:	09 c1                	or     ecx,eax
c000bc25:	89 ca                	mov    edx,ecx
c000bc27:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bc2c:	0f b6 c0             	movzx  eax,al
c000bc2f:	89 14 85 a0 ab 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5460],edx
c000bc36:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bc3b:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c000bc40:	83 c0 01             	add    eax,0x1
c000bc43:	a2 e0 aa 02 c0       	mov    ds:0xc002aae0,al
c000bc48:	e9 b3 01 00 00       	jmp    c000be00 <scanMADT()+0x42c>
c000bc4d:	8d 76 00             	lea    esi,[esi+0x0]
c000bc50:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bc55:	83 f8 02             	cmp    eax,0x2
c000bc58:	0f 85 ea 00 00 00    	jne    c000bd48 <scanMADT()+0x374>
c000bc5e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc62:	8d 50 01             	lea    edx,[eax+0x1]
c000bc65:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc69:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc6d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc71:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000bc75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc79:	8d 50 01             	lea    edx,[eax+0x1]
c000bc7c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc80:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc84:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bc88:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000bc8c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bc90:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bc94:	01 d0                	add    eax,edx
c000bc96:	83 c0 2c             	add    eax,0x2c
c000bc99:	8a 00                	mov    al,BYTE PTR [eax]
c000bc9b:	0f b6 d0             	movzx  edx,al
c000bc9e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bca2:	8d 48 01             	lea    ecx,[eax+0x1]
c000bca5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bca9:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bcad:	0f b6 c0             	movzx  eax,al
c000bcb0:	c1 e0 08             	shl    eax,0x8
c000bcb3:	89 d1                	mov    ecx,edx
c000bcb5:	09 c1                	or     ecx,eax
c000bcb7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcbb:	8d 50 02             	lea    edx,[eax+0x2]
c000bcbe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bcc2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bcc6:	0f b6 c0             	movzx  eax,al
c000bcc9:	c1 e0 10             	shl    eax,0x10
c000bccc:	09 c1                	or     ecx,eax
c000bcce:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcd2:	8d 50 03             	lea    edx,[eax+0x3]
c000bcd5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bcd9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000bcdd:	0f b6 c0             	movzx  eax,al
c000bce0:	c1 e0 18             	shl    eax,0x18
c000bce3:	09 c8                	or     eax,ecx
c000bce5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000bce9:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000bcee:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bcf2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bcf6:	01 d0                	add    eax,edx
c000bcf8:	83 c0 2c             	add    eax,0x2c
c000bcfb:	8a 00                	mov    al,BYTE PTR [eax]
c000bcfd:	0f b6 c0             	movzx  eax,al
c000bd00:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000bd04:	8d 4a 01             	lea    ecx,[edx+0x1]
c000bd07:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd0b:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000bd0f:	0f b6 d2             	movzx  edx,dl
c000bd12:	c1 e2 08             	shl    edx,0x8
c000bd15:	09 d0                	or     eax,edx
c000bd17:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000bd1c:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bd21:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000bd26:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bd2a:	88 90 28 52 02 c0    	mov    BYTE PTR [eax-0x3ffdadd8],dl
c000bd30:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000bd35:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000bd3a:	66 89 84 12 c0 aa 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd5540],ax
c000bd42:	e9 b9 00 00 00       	jmp    c000be00 <scanMADT()+0x42c>
c000bd47:	90                   	nop
c000bd48:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bd4d:	83 f8 04             	cmp    eax,0x4
c000bd50:	0f 85 9a 00 00 00    	jne    c000bdf0 <scanMADT()+0x41c>
c000bd56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd5a:	8d 50 01             	lea    edx,[eax+0x1]
c000bd5d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bd61:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd65:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bd69:	0f b6 c0             	movzx  eax,al
c000bd6c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bd70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bd74:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd78:	01 d0                	add    eax,edx
c000bd7a:	83 c0 2c             	add    eax,0x2c
c000bd7d:	8a 00                	mov    al,BYTE PTR [eax]
c000bd7f:	0f b6 d0             	movzx  edx,al
c000bd82:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bd86:	8d 48 01             	lea    ecx,[eax+0x1]
c000bd89:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bd8d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000bd91:	0f b6 c0             	movzx  eax,al
c000bd94:	c1 e0 08             	shl    eax,0x8
c000bd97:	09 d0                	or     eax,edx
c000bd99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bd9d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000bda2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000bda6:	8d 50 01             	lea    edx,[eax+0x1]
c000bda9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bdad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000bdb1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000bdb5:	0f b6 c0             	movzx  eax,al
c000bdb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000bdbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bdc0:	c1 e0 08             	shl    eax,0x8
c000bdc3:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000bdc7:	89 c1                	mov    ecx,eax
c000bdc9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bdcd:	c1 e0 18             	shl    eax,0x18
c000bdd0:	89 c3                	mov    ebx,eax
c000bdd2:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c000bdd7:	8d 50 01             	lea    edx,[eax+0x1]
c000bdda:	89 15 2c aa 02 c0    	mov    DWORD PTR ds:0xc002aa2c,edx
c000bde0:	09 d9                	or     ecx,ebx
c000bde2:	89 ca                	mov    edx,ecx
c000bde4:	89 14 85 40 aa 02 c0 	mov    DWORD PTR [eax*4-0x3ffd55c0],edx
c000bdeb:	eb 13                	jmp    c000be00 <scanMADT()+0x42c>
c000bded:	8d 76 00             	lea    esi,[esi+0x0]
c000bdf0:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000bdf5:	83 f8 05             	cmp    eax,0x5
c000bdf8:	75 06                	jne    c000be00 <scanMADT()+0x42c>
c000bdfa:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000bdff:	90                   	nop
c000be00:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000be05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000be09:	01 d0                	add    eax,edx
c000be0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be0f:	e9 50 fc ff ff       	jmp    c000ba64 <scanMADT()+0x90>
c000be14:	90                   	nop
c000be15:	eb 0d                	jmp    c000be24 <scanMADT()+0x450>
c000be17:	90                   	nop
c000be18:	90                   	nop
c000be19:	eb 09                	jmp    c000be24 <scanMADT()+0x450>
c000be1b:	90                   	nop
c000be1c:	90                   	nop
c000be1d:	eb 05                	jmp    c000be24 <scanMADT()+0x450>
c000be1f:	90                   	nop
c000be20:	90                   	nop
c000be21:	8d 76 00             	lea    esi,[esi+0x0]
c000be24:	83 c4 38             	add    esp,0x38
c000be27:	5b                   	pop    ebx
c000be28:	c3                   	ret    
c000be29:	90                   	nop
c000be2a:	66 90                	xchg   ax,ax

c000be2c <ACPI::ACPI()>:
c000be2c:	83 ec 0c             	sub    esp,0xc
c000be2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be33:	83 ec 08             	sub    esp,0x8
c000be36:	68 d1 2b 02 c0       	push   0xc0022bd1
c000be3b:	50                   	push   eax
c000be3c:	e8 b3 d3 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000be41:	83 c4 10             	add    esp,0x10
c000be44:	ba cc 2d 02 c0       	mov    edx,0xc0022dcc
c000be49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be4d:	89 10                	mov    DWORD PTR [eax],edx
c000be4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be53:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000be5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be5e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000be68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be6c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000be76:	e8 59 fb ff ff       	call   c000b9d4 <scanMADT()>
c000be7b:	90                   	nop
c000be7c:	83 c4 0c             	add    esp,0xc
c000be7f:	c3                   	ret    

c000be80 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000be80:	83 ec 2c             	sub    esp,0x2c
c000be83:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000be87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000be8b:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000be8f:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000be93:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000be98:	88 d0                	mov    al,dl
c000be9a:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000be9e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000bea3:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000beab:	90                   	nop
c000beac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000beb0:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000beb6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000beba:	0f 8d b0 00 00 00    	jge    c000bf70 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000bec0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bec4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bec8:	83 c2 2a             	add    edx,0x2a
c000becb:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000becf:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000bed4:	0f b7 c0             	movzx  eax,ax
c000bed7:	39 c2                	cmp    edx,eax
c000bed9:	0f 85 85 00 00 00    	jne    c000bf64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000bedf:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bee3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bee7:	83 c2 2a             	add    edx,0x2a
c000beea:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000beee:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000bef3:	0f b6 c0             	movzx  eax,al
c000bef6:	39 c2                	cmp    edx,eax
c000bef8:	75 6a                	jne    c000bf64 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000befa:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000beff:	85 c0                	test   eax,eax
c000bf01:	74 3d                	je     c000bf40 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000bf03:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf0b:	83 c2 2a             	add    edx,0x2a
c000bf0e:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000bf12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000bf19:	39 c2                	cmp    edx,eax
c000bf1b:	74 13                	je     c000bf30 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000bf1d:	83 ec 0c             	sub    esp,0xc
c000bf20:	68 4c 2d 02 c0       	push   0xc0022d4c
c000bf25:	e8 20 37 00 00       	call   c000f64a <KePanic(char const*)>
c000bf2a:	83 c4 10             	add    esp,0x10
c000bf2d:	8d 76 00             	lea    esi,[esi+0x0]
c000bf30:	83 ec 0c             	sub    esp,0xc
c000bf33:	68 d6 2b 02 c0       	push   0xc0022bd6
c000bf38:	e8 0d 37 00 00       	call   c000f64a <KePanic(char const*)>
c000bf3d:	83 c4 10             	add    esp,0x10
c000bf40:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000bf44:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000bf48:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf4c:	83 c2 2a             	add    edx,0x2a
c000bf4f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000bf53:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf55:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000bf58:	89 01                	mov    DWORD PTR [ecx],eax
c000bf5a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000bf5d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000bf62:	66 90                	xchg   ax,ax
c000bf64:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000bf69:	e9 3e ff ff ff       	jmp    c000beac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000bf6e:	66 90                	xchg   ax,ax
c000bf70:	90                   	nop
c000bf71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bf75:	83 c4 2c             	add    esp,0x2c
c000bf78:	c2 04 00             	ret    0x4
c000bf7b:	90                   	nop

c000bf7c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000bf7c:	83 ec 1c             	sub    esp,0x1c
c000bf7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000bf83:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000bf87:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000bf8b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000bf90:	88 c8                	mov    al,cl
c000bf92:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000bf96:	88 d0                	mov    al,dl
c000bf98:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000bf9c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfa0:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bfa6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfaa:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000bfad:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000bfb1:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000bfb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfb9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000bfbf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bfc3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000bfc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000bfca:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000bfcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfd3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bfd9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000bfdd:	83 c0 01             	add    eax,0x1
c000bfe0:	88 c1                	mov    cl,al
c000bfe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bfe6:	83 c2 2a             	add    edx,0x2a
c000bfe9:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000bfed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bff1:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000bff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bffb:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000bffe:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000c002:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000c006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c00a:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c010:	8d 50 01             	lea    edx,[eax+0x1]
c000c013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c017:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000c01d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c021:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000c027:	3d 00 02 00 00       	cmp    eax,0x200
c000c02c:	75 12                	jne    c000c040 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000c02e:	83 ec 0c             	sub    esp,0xc
c000c031:	68 e5 2b 02 c0       	push   0xc0022be5
c000c036:	e8 0f 36 00 00       	call   c000f64a <KePanic(char const*)>
c000c03b:	83 c4 10             	add    esp,0x10
c000c03e:	66 90                	xchg   ax,ax
c000c040:	90                   	nop
c000c041:	83 c4 1c             	add    esp,0x1c
c000c044:	c3                   	ret    
c000c045:	90                   	nop
c000c046:	66 90                	xchg   ax,ax

c000c048 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000c048:	b8 00 00 00 00       	mov    eax,0x0
c000c04d:	c3                   	ret    
c000c04e:	66 90                	xchg   ax,ax

c000c050 <ACPI::detectPCI()>:
c000c050:	53                   	push   ebx
c000c051:	83 ec 28             	sub    esp,0x28
c000c054:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000c059:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000c05e:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c063:	83 ec 08             	sub    esp,0x8
c000c066:	68 02 2c 02 c0       	push   0xc0022c02
c000c06b:	50                   	push   eax
c000c06c:	e8 ef f8 ff ff       	call   c000b960 <findDataTable(unsigned char*, char*)>
c000c071:	83 c4 10             	add    esp,0x10
c000c074:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c078:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000c07d:	74 0d                	je     c000c08c <ACPI::detectPCI()+0x3c>
c000c07f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c084:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c089:	8d 76 00             	lea    esi,[esi+0x0]
c000c08c:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000c094:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c098:	8a 00                	mov    al,BYTE PTR [eax]
c000c09a:	0f b6 c0             	movzx  eax,al
c000c09d:	83 f8 01             	cmp    eax,0x1
c000c0a0:	75 0e                	jne    c000c0b0 <ACPI::detectPCI()+0x60>
c000c0a2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0a7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c0ac:	eb 2e                	jmp    c000c0dc <ACPI::detectPCI()+0x8c>
c000c0ae:	66 90                	xchg   ax,ax
c000c0b0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c0b4:	8a 00                	mov    al,BYTE PTR [eax]
c000c0b6:	0f b6 c0             	movzx  eax,al
c000c0b9:	83 f8 02             	cmp    eax,0x2
c000c0bc:	75 1e                	jne    c000c0dc <ACPI::detectPCI()+0x8c>
c000c0be:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0c3:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c0c8:	85 c0                	test   eax,eax
c000c0ca:	74 10                	je     c000c0dc <ACPI::detectPCI()+0x8c>
c000c0cc:	83 ec 0c             	sub    esp,0xc
c000c0cf:	68 7c 2d 02 c0       	push   0xc0022d7c
c000c0d4:	e8 71 35 00 00       	call   c000f64a <KePanic(char const*)>
c000c0d9:	83 c4 10             	add    esp,0x10
c000c0dc:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000c0e0:	83 f0 01             	xor    eax,0x1
c000c0e3:	0f b6 c0             	movzx  eax,al
c000c0e6:	85 c0                	test   eax,eax
c000c0e8:	74 46                	je     c000c130 <ACPI::detectPCI()+0xe0>
c000c0ea:	e8 41 40 ff ff       	call   c0000130 <manualPCIProbe>
c000c0ef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c0f3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000c0f8:	75 0e                	jne    c000c108 <ACPI::detectPCI()+0xb8>
c000c0fa:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c0ff:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000c104:	eb 2a                	jmp    c000c130 <ACPI::detectPCI()+0xe0>
c000c106:	66 90                	xchg   ax,ax
c000c108:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000c10d:	75 21                	jne    c000c130 <ACPI::detectPCI()+0xe0>
c000c10f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000c114:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000c119:	85 c0                	test   eax,eax
c000c11b:	74 13                	je     c000c130 <ACPI::detectPCI()+0xe0>
c000c11d:	83 ec 0c             	sub    esp,0xc
c000c120:	68 7c 2d 02 c0       	push   0xc0022d7c
c000c125:	e8 20 35 00 00       	call   c000f64a <KePanic(char const*)>
c000c12a:	83 c4 10             	add    esp,0x10
c000c12d:	8d 76 00             	lea    esi,[esi+0x0]
c000c130:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000c135:	85 c0                	test   eax,eax
c000c137:	0f 84 87 00 00 00    	je     c000c1c4 <ACPI::detectPCI()+0x174>
c000c13d:	83 ec 0c             	sub    esp,0xc
c000c140:	68 07 2c 02 c0       	push   0xc0022c07
c000c145:	e8 81 07 00 00       	call   c000c8cb <KeSetBootMessage(char const*)>
c000c14a:	83 c4 10             	add    esp,0x10
c000c14d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000c155:	83 ec 0c             	sub    esp,0xc
c000c158:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c15c:	e8 a2 31 00 00       	call   c000f303 <malloc>
c000c161:	83 c4 10             	add    esp,0x10
c000c164:	89 c3                	mov    ebx,eax
c000c166:	83 ec 0c             	sub    esp,0xc
c000c169:	53                   	push   ebx
c000c16a:	e8 f5 06 01 00       	call   c001c864 <PCI::PCI()>
c000c16f:	83 c4 10             	add    esp,0x10
c000c172:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000c176:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c17a:	83 ec 08             	sub    esp,0x8
c000c17d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c181:	50                   	push   eax
c000c182:	e8 0b cf ff ff       	call   c0009092 <Device::addChild(Device*)>
c000c187:	83 c4 10             	add    esp,0x10
c000c18a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c18e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c190:	83 c0 08             	add    eax,0x8
c000c193:	8b 00                	mov    eax,DWORD PTR [eax]
c000c195:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000c19a:	85 d2                	test   edx,edx
c000c19c:	74 0a                	je     c000c1a8 <ACPI::detectPCI()+0x158>
c000c19e:	ba 01 00 00 00       	mov    edx,0x1
c000c1a3:	eb 0b                	jmp    c000c1b0 <ACPI::detectPCI()+0x160>
c000c1a5:	8d 76 00             	lea    esi,[esi+0x0]
c000c1a8:	ba 02 00 00 00       	mov    edx,0x2
c000c1ad:	8d 76 00             	lea    esi,[esi+0x0]
c000c1b0:	6a 00                	push   0x0
c000c1b2:	6a 00                	push   0x0
c000c1b4:	52                   	push   edx
c000c1b5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c1b9:	ff d0                	call   eax
c000c1bb:	83 c4 10             	add    esp,0x10
c000c1be:	e9 91 00 00 00       	jmp    c000c254 <ACPI::detectPCI()+0x204>
c000c1c3:	90                   	nop
c000c1c4:	83 ec 0c             	sub    esp,0xc
c000c1c7:	68 1f 2c 02 c0       	push   0xc0022c1f
c000c1cc:	e8 fa 06 00 00       	call   c000c8cb <KeSetBootMessage(char const*)>
c000c1d1:	83 c4 10             	add    esp,0x10
c000c1d4:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000c1db:	83 ec 0c             	sub    esp,0xc
c000c1de:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c1e2:	e8 1c 31 00 00       	call   c000f303 <malloc>
c000c1e7:	83 c4 10             	add    esp,0x10
c000c1ea:	89 c3                	mov    ebx,eax
c000c1ec:	83 ec 0c             	sub    esp,0xc
c000c1ef:	53                   	push   ebx
c000c1f0:	e8 75 12 01 00       	call   c001d46a <IDE::IDE()>
c000c1f5:	83 c4 10             	add    esp,0x10
c000c1f8:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000c1fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c200:	83 ec 08             	sub    esp,0x8
c000c203:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c207:	50                   	push   eax
c000c208:	e8 85 ce ff ff       	call   c0009092 <Device::addChild(Device*)>
c000c20d:	83 c4 10             	add    esp,0x10
c000c210:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c214:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000c21e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c222:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000c22b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c22f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000c238:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c23c:	8b 00                	mov    eax,DWORD PTR [eax]
c000c23e:	83 c0 08             	add    eax,0x8
c000c241:	8b 00                	mov    eax,DWORD PTR [eax]
c000c243:	6a 00                	push   0x0
c000c245:	6a 00                	push   0x0
c000c247:	6a 00                	push   0x0
c000c249:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24d:	ff d0                	call   eax
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	66 90                	xchg   ax,ax
c000c254:	90                   	nop
c000c255:	83 c4 28             	add    esp,0x28
c000c258:	5b                   	pop    ebx
c000c259:	c3                   	ret    
c000c25a:	66 90                	xchg   ax,ax

c000c25c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000c25c:	83 ec 0c             	sub    esp,0xc
c000c25f:	83 ec 0c             	sub    esp,0xc
c000c262:	68 34 2c 02 c0       	push   0xc0022c34
c000c267:	e8 de 33 00 00       	call   c000f64a <KePanic(char const*)>
c000c26c:	83 c4 10             	add    esp,0x10
c000c26f:	90                   	nop
c000c270:	83 c4 0c             	add    esp,0xc
c000c273:	c3                   	ret    

c000c274 <ACPI::open(int, int, void*)>:
c000c274:	57                   	push   edi
c000c275:	56                   	push   esi
c000c276:	53                   	push   ebx
c000c277:	81 ec 70 01 00 00    	sub    esp,0x170
c000c27d:	83 ec 0c             	sub    esp,0xc
c000c280:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c287:	e8 c4 fd ff ff       	call   c000c050 <ACPI::detectPCI()>
c000c28c:	83 c4 10             	add    esp,0x10
c000c28f:	83 ec 0c             	sub    esp,0xc
c000c292:	68 a4 2d 02 c0       	push   0xc0022da4
c000c297:	e8 2f 06 00 00       	call   c000c8cb <KeSetBootMessage(char const*)>
c000c29c:	83 c4 10             	add    esp,0x10
c000c29f:	b8 4c 05 00 00       	mov    eax,0x54c
c000c2a4:	8a 00                	mov    al,BYTE PTR [eax]
c000c2a6:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000c2ad:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c2b5:	83 f8 01             	cmp    eax,0x1
c000c2b8:	75 12                	jne    c000c2cc <ACPI::open(int, int, void*)+0x58>
c000c2ba:	83 ec 0c             	sub    esp,0xc
c000c2bd:	68 45 2c 02 c0       	push   0xc0022c45
c000c2c2:	e8 24 8a 00 00       	call   c0014ceb <Thr::loadKernelSymbolTable(char const*)>
c000c2c7:	83 c4 10             	add    esp,0x10
c000c2ca:	eb 34                	jmp    c000c300 <ACPI::open(int, int, void*)+0x8c>
c000c2cc:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000c2d4:	3d bb 00 00 00       	cmp    eax,0xbb
c000c2d9:	75 15                	jne    c000c2f0 <ACPI::open(int, int, void*)+0x7c>
c000c2db:	83 ec 0c             	sub    esp,0xc
c000c2de:	68 63 2c 02 c0       	push   0xc0022c63
c000c2e3:	e8 03 8a 00 00       	call   c0014ceb <Thr::loadKernelSymbolTable(char const*)>
c000c2e8:	83 c4 10             	add    esp,0x10
c000c2eb:	eb 13                	jmp    c000c300 <ACPI::open(int, int, void*)+0x8c>
c000c2ed:	8d 76 00             	lea    esi,[esi+0x0]
c000c2f0:	83 ec 0c             	sub    esp,0xc
c000c2f3:	68 81 2c 02 c0       	push   0xc0022c81
c000c2f8:	e8 4d 33 00 00       	call   c000f64a <KePanic(char const*)>
c000c2fd:	83 c4 10             	add    esp,0x10
c000c300:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000c308:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000c313:	83 ec 0c             	sub    esp,0xc
c000c316:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c31d:	e8 e1 2f 00 00       	call   c000f303 <malloc>
c000c322:	83 c4 10             	add    esp,0x10
c000c325:	89 c3                	mov    ebx,eax
c000c327:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c000c32c:	83 ec 04             	sub    esp,0x4
c000c32f:	50                   	push   eax
c000c330:	68 9b 2c 02 c0       	push   0xc0022c9b
c000c335:	53                   	push   ebx
c000c336:	e8 f7 bd ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c33b:	83 c4 10             	add    esp,0x10
c000c33e:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000c345:	83 ec 08             	sub    esp,0x8
c000c348:	6a 01                	push   0x1
c000c34a:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c351:	e8 fa bd ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000c356:	83 c4 10             	add    esp,0x10
c000c359:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000c360:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000c368:	75 16                	jne    c000c380 <ACPI::open(int, int, void*)+0x10c>
c000c36a:	83 ec 0c             	sub    esp,0xc
c000c36d:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c374:	e8 35 be ff ff       	call   c00081ae <File::close()>
c000c379:	83 c4 10             	add    esp,0x10
c000c37c:	eb 0a                	jmp    c000c388 <ACPI::open(int, int, void*)+0x114>
c000c37e:	66 90                	xchg   ax,ax
c000c380:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000c388:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000c390:	74 1e                	je     c000c3b0 <ACPI::open(int, int, void*)+0x13c>
c000c392:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000c399:	8b 00                	mov    eax,DWORD PTR [eax]
c000c39b:	83 c0 08             	add    eax,0x8
c000c39e:	8b 00                	mov    eax,DWORD PTR [eax]
c000c3a0:	83 ec 0c             	sub    esp,0xc
c000c3a3:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000c3aa:	ff d0                	call   eax
c000c3ac:	83 c4 10             	add    esp,0x10
c000c3af:	90                   	nop
c000c3b0:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000c3b7:	83 f0 01             	xor    eax,0x1
c000c3ba:	0f b6 c0             	movzx  eax,al
c000c3bd:	85 c0                	test   eax,eax
c000c3bf:	74 2f                	je     c000c3f0 <ACPI::open(int, int, void*)+0x17c>
c000c3c1:	83 ec 0c             	sub    esp,0xc
c000c3c4:	68 b9 2c 02 c0       	push   0xc0022cb9
c000c3c9:	e8 fd 04 00 00       	call   c000c8cb <KeSetBootMessage(char const*)>
c000c3ce:	83 c4 10             	add    esp,0x10
c000c3d1:	c7 84 24 60 01 00 00 0c 00 00 00 	mov    DWORD PTR [esp+0x160],0xc
c000c3dc:	83 ec 0c             	sub    esp,0xc
c000c3df:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000c3e6:	e8 9d 68 00 00       	call   c0012c88 <Virt::setupPageSwapping(int)>
c000c3eb:	83 c4 10             	add    esp,0x10
c000c3ee:	66 90                	xchg   ax,ax
c000c3f0:	83 ec 0c             	sub    esp,0xc
c000c3f3:	68 d4 2c 02 c0       	push   0xc0022cd4
c000c3f8:	e8 ce 04 00 00       	call   c000c8cb <KeSetBootMessage(char const*)>
c000c3fd:	83 c4 10             	add    esp,0x10
c000c400:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000c407:	83 ec 08             	sub    esp,0x8
c000c40a:	6a 13                	push   0x13
c000c40c:	50                   	push   eax
c000c40d:	e8 ae cf ff ff       	call   c00093c0 <getDevicesOfType(DeviceType)>
c000c412:	83 c4 0c             	add    esp,0xc
c000c415:	8d 76 00             	lea    esi,[esi+0x0]
c000c418:	83 ec 0c             	sub    esp,0xc
c000c41b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c422:	50                   	push   eax
c000c423:	e8 34 4d 01 00       	call   c002115c <LinkedList<Device>::isEmpty()>
c000c428:	83 c4 10             	add    esp,0x10
c000c42b:	83 f0 01             	xor    eax,0x1
c000c42e:	0f b6 c0             	movzx  eax,al
c000c431:	85 c0                	test   eax,eax
c000c433:	0f 84 47 01 00 00    	je     c000c580 <ACPI::open(int, int, void*)+0x30c>
c000c439:	83 ec 0c             	sub    esp,0xc
c000c43c:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c443:	50                   	push   eax
c000c444:	e8 2f 4d 01 00       	call   c0021178 <LinkedList<Device>::getFirstElement()>
c000c449:	83 c4 10             	add    esp,0x10
c000c44c:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000c453:	83 ec 0c             	sub    esp,0xc
c000c456:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c45d:	50                   	push   eax
c000c45e:	e8 1d 4d 01 00       	call   c0021180 <LinkedList<Device>::removeFirst()>
c000c463:	83 c4 10             	add    esp,0x10
c000c466:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000c46d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000c474:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000c47b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000c47f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000c485:	ba 09 00 00 00       	mov    edx,0x9
c000c48a:	fc                   	cld    
c000c48b:	89 c7                	mov    edi,eax
c000c48d:	89 de                	mov    esi,ebx
c000c48f:	89 d1                	mov    ecx,edx
c000c491:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c493:	83 ec 08             	sub    esp,0x8
c000c496:	8d 44 24 38          	lea    eax,[esp+0x38]
c000c49a:	50                   	push   eax
c000c49b:	83 ec 24             	sub    esp,0x24
c000c49e:	89 e0                	mov    eax,esp
c000c4a0:	89 c3                	mov    ebx,eax
c000c4a2:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000c4a6:	ba 09 00 00 00       	mov    edx,0x9
c000c4ab:	89 df                	mov    edi,ebx
c000c4ad:	89 c6                	mov    esi,eax
c000c4af:	89 d1                	mov    ecx,edx
c000c4b1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c4b3:	e8 96 08 01 00       	call   c001cd4e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000c4b8:	83 c4 30             	add    esp,0x30
c000c4bb:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000c4c2:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000c4ca:	0f 84 48 ff ff ff    	je     c000c418 <ACPI::open(int, int, void*)+0x1a4>
c000c4d0:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000c4db:	83 ec 0c             	sub    esp,0xc
c000c4de:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000c4e5:	e8 19 2e 00 00       	call   c000f303 <malloc>
c000c4ea:	83 c4 10             	add    esp,0x10
c000c4ed:	89 c3                	mov    ebx,eax
c000c4ef:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c000c4f4:	83 ec 04             	sub    esp,0x4
c000c4f7:	50                   	push   eax
c000c4f8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c4ff:	53                   	push   ebx
c000c500:	e8 2d bc ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c505:	83 c4 10             	add    esp,0x10
c000c508:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000c50f:	83 ec 0c             	sub    esp,0xc
c000c512:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c519:	e8 f6 be ff ff       	call   c0008414 <File::exists()>
c000c51e:	83 c4 10             	add    esp,0x10
c000c521:	0f b6 c0             	movzx  eax,al
c000c524:	85 c0                	test   eax,eax
c000c526:	74 28                	je     c000c550 <ACPI::open(int, int, void*)+0x2dc>
c000c528:	83 ec 08             	sub    esp,0x8
c000c52b:	6a 01                	push   0x1
c000c52d:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c534:	e8 2c 92 00 00       	call   c0015765 <Thr::loadDLL(char const*, bool)>
c000c539:	83 c4 10             	add    esp,0x10
c000c53c:	83 ec 08             	sub    esp,0x8
c000c53f:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000c546:	50                   	push   eax
c000c547:	e8 6b 94 00 00       	call   c00159b7 <Thr::executeDLL(unsigned long, void*)>
c000c54c:	83 c4 10             	add    esp,0x10
c000c54f:	90                   	nop
c000c550:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000c558:	0f 84 ba fe ff ff    	je     c000c418 <ACPI::open(int, int, void*)+0x1a4>
c000c55e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000c565:	8b 00                	mov    eax,DWORD PTR [eax]
c000c567:	83 c0 08             	add    eax,0x8
c000c56a:	8b 00                	mov    eax,DWORD PTR [eax]
c000c56c:	83 ec 0c             	sub    esp,0xc
c000c56f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000c576:	ff d0                	call   eax
c000c578:	83 c4 10             	add    esp,0x10
c000c57b:	e9 98 fe ff ff       	jmp    c000c418 <ACPI::open(int, int, void*)+0x1a4>
c000c580:	83 ec 0c             	sub    esp,0xc
c000c583:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000c58a:	50                   	push   eax
c000c58b:	e8 c8 4b 01 00       	call   c0021158 <LinkedList<Device>::~LinkedList()>
c000c590:	83 c4 10             	add    esp,0x10
c000c593:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000c599:	83 ec 08             	sub    esp,0x8
c000c59c:	6a 01                	push   0x1
c000c59e:	68 ee 2c 02 c0       	push   0xc0022cee
c000c5a3:	e8 bd 91 00 00       	call   c0015765 <Thr::loadDLL(char const*, bool)>
c000c5a8:	83 c4 10             	add    esp,0x10
c000c5ab:	83 ec 08             	sub    esp,0x8
c000c5ae:	53                   	push   ebx
c000c5af:	50                   	push   eax
c000c5b0:	e8 02 94 00 00       	call   c00159b7 <Thr::executeDLL(unsigned long, void*)>
c000c5b5:	83 c4 10             	add    esp,0x10
c000c5b8:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c5bd:	85 c0                	test   eax,eax
c000c5bf:	0f 84 27 01 00 00    	je     c000c6ec <ACPI::open(int, int, void*)+0x478>
c000c5c5:	a1 28 aa 02 c0       	mov    eax,ds:0xc002aa28
c000c5ca:	85 c0                	test   eax,eax
c000c5cc:	0f 84 1a 01 00 00    	je     c000c6ec <ACPI::open(int, int, void*)+0x478>
c000c5d2:	83 ec 0c             	sub    esp,0xc
c000c5d5:	68 0b 2d 02 c0       	push   0xc0022d0b
c000c5da:	e8 ec 02 00 00       	call   c000c8cb <KeSetBootMessage(char const*)>
c000c5df:	83 c4 10             	add    esp,0x10
c000c5e2:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000c5ed:	83 ec 0c             	sub    esp,0xc
c000c5f0:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000c5f7:	e8 07 2d 00 00       	call   c000f303 <malloc>
c000c5fc:	83 c4 10             	add    esp,0x10
c000c5ff:	89 c3                	mov    ebx,eax
c000c601:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c000c606:	83 ec 04             	sub    esp,0x4
c000c609:	50                   	push   eax
c000c60a:	68 28 2d 02 c0       	push   0xc0022d28
c000c60f:	53                   	push   ebx
c000c610:	e8 1d bb ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000c615:	83 c4 10             	add    esp,0x10
c000c618:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000c61f:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c627:	74 1f                	je     c000c648 <ACPI::open(int, int, void*)+0x3d4>
c000c629:	83 ec 0c             	sub    esp,0xc
c000c62c:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c633:	e8 dc bd ff ff       	call   c0008414 <File::exists()>
c000c638:	83 c4 10             	add    esp,0x10
c000c63b:	0f b6 c0             	movzx  eax,al
c000c63e:	85 c0                	test   eax,eax
c000c640:	74 06                	je     c000c648 <ACPI::open(int, int, void*)+0x3d4>
c000c642:	b0 01                	mov    al,0x1
c000c644:	eb 06                	jmp    c000c64c <ACPI::open(int, int, void*)+0x3d8>
c000c646:	66 90                	xchg   ax,ax
c000c648:	b0 00                	mov    al,0x0
c000c64a:	66 90                	xchg   ax,ax
c000c64c:	0f b6 c0             	movzx  eax,al
c000c64f:	85 c0                	test   eax,eax
c000c651:	74 25                	je     c000c678 <ACPI::open(int, int, void*)+0x404>
c000c653:	83 ec 08             	sub    esp,0x8
c000c656:	6a 01                	push   0x1
c000c658:	68 28 2d 02 c0       	push   0xc0022d28
c000c65d:	e8 03 91 00 00       	call   c0015765 <Thr::loadDLL(char const*, bool)>
c000c662:	83 c4 10             	add    esp,0x10
c000c665:	83 ec 08             	sub    esp,0x8
c000c668:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000c66f:	50                   	push   eax
c000c670:	e8 42 93 00 00       	call   c00159b7 <Thr::executeDLL(unsigned long, void*)>
c000c675:	83 c4 10             	add    esp,0x10
c000c678:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c680:	74 2a                	je     c000c6ac <ACPI::open(int, int, void*)+0x438>
c000c682:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000c68a:	74 20                	je     c000c6ac <ACPI::open(int, int, void*)+0x438>
c000c68c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000c693:	8b 00                	mov    eax,DWORD PTR [eax]
c000c695:	83 c0 08             	add    eax,0x8
c000c698:	8b 00                	mov    eax,DWORD PTR [eax]
c000c69a:	83 ec 0c             	sub    esp,0xc
c000c69d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000c6a4:	ff d0                	call   eax
c000c6a6:	83 c4 10             	add    esp,0x10
c000c6a9:	8d 76 00             	lea    esi,[esi+0x0]
c000c6ac:	a1 24 aa 02 c0       	mov    eax,ds:0xc002aa24
c000c6b1:	83 ec 08             	sub    esp,0x8
c000c6b4:	68 45 2d 02 c0       	push   0xc0022d45
c000c6b9:	50                   	push   eax
c000c6ba:	e8 a1 f2 ff ff       	call   c000b960 <findDataTable(unsigned char*, char*)>
c000c6bf:	83 c4 10             	add    esp,0x10
c000c6c2:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000c6c9:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000c6d1:	74 19                	je     c000c6ec <ACPI::open(int, int, void*)+0x478>
c000c6d3:	83 ec 08             	sub    esp,0x8
c000c6d6:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000c6dd:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000c6e4:	e8 73 fb ff ff       	call   c000c25c <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000c6e9:	83 c4 10             	add    esp,0x10
c000c6ec:	b8 00 00 00 00       	mov    eax,0x0
c000c6f1:	81 c4 70 01 00 00    	add    esp,0x170
c000c6f7:	5b                   	pop    ebx
c000c6f8:	5e                   	pop    esi
c000c6f9:	5f                   	pop    edi
c000c6fa:	c3                   	ret    
c000c6fb:	90                   	nop

c000c6fc <KeAssertionFailed(char*, char const*, char const*, int)>:
c000c6fc:	81 ec 2c 02 00 00    	sub    esp,0x22c
c000c702:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c000c709:	89 c2                	mov    edx,eax
c000c70b:	c1 fa 1f             	sar    edx,0x1f
c000c70e:	83 ec 04             	sub    esp,0x4
c000c711:	8d 4c 24 04          	lea    ecx,[esp+0x4]
c000c715:	51                   	push   ecx
c000c716:	52                   	push   edx
c000c717:	50                   	push   eax
c000c718:	e8 db 29 00 00       	call   c000f0f8 <KeItoa(long long, char*)>
c000c71d:	83 c4 10             	add    esp,0x10
c000c720:	83 ec 08             	sub    esp,0x8
c000c723:	68 f0 2d 02 c0       	push   0xc0022df0
c000c728:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c72c:	50                   	push   eax
c000c72d:	e8 0e 3f ff ff       	call   c0000640 <strcpy>
c000c732:	83 c4 10             	add    esp,0x10
c000c735:	83 ec 08             	sub    esp,0x8
c000c738:	ff b4 24 38 02 00 00 	push   DWORD PTR [esp+0x238]
c000c73f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c743:	50                   	push   eax
c000c744:	e8 f7 40 ff ff       	call   c0000840 <strcat>
c000c749:	83 c4 10             	add    esp,0x10
c000c74c:	83 ec 08             	sub    esp,0x8
c000c74f:	68 fe 2d 02 c0       	push   0xc0022dfe
c000c754:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c758:	50                   	push   eax
c000c759:	e8 e2 40 ff ff       	call   c0000840 <strcat>
c000c75e:	83 c4 10             	add    esp,0x10
c000c761:	83 ec 08             	sub    esp,0x8
c000c764:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000c76b:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c76f:	50                   	push   eax
c000c770:	e8 cb 40 ff ff       	call   c0000840 <strcat>
c000c775:	83 c4 10             	add    esp,0x10
c000c778:	83 ec 08             	sub    esp,0x8
c000c77b:	68 01 2e 02 c0       	push   0xc0022e01
c000c780:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c784:	50                   	push   eax
c000c785:	e8 b6 40 ff ff       	call   c0000840 <strcat>
c000c78a:	83 c4 10             	add    esp,0x10
c000c78d:	83 ec 08             	sub    esp,0x8
c000c790:	ff b4 24 40 02 00 00 	push   DWORD PTR [esp+0x240]
c000c797:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c79b:	50                   	push   eax
c000c79c:	e8 9f 40 ff ff       	call   c0000840 <strcat>
c000c7a1:	83 c4 10             	add    esp,0x10
c000c7a4:	83 ec 08             	sub    esp,0x8
c000c7a7:	68 01 2e 02 c0       	push   0xc0022e01
c000c7ac:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c7b0:	50                   	push   eax
c000c7b1:	e8 8a 40 ff ff       	call   c0000840 <strcat>
c000c7b6:	83 c4 10             	add    esp,0x10
c000c7b9:	83 ec 08             	sub    esp,0x8
c000c7bc:	8d 44 24 08          	lea    eax,[esp+0x8]
c000c7c0:	50                   	push   eax
c000c7c1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c7c5:	50                   	push   eax
c000c7c6:	e8 75 40 ff ff       	call   c0000840 <strcat>
c000c7cb:	83 c4 10             	add    esp,0x10
c000c7ce:	83 ec 0c             	sub    esp,0xc
c000c7d1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000c7d5:	50                   	push   eax
c000c7d6:	e8 6f 2e 00 00       	call   c000f64a <KePanic(char const*)>
c000c7db:	83 c4 10             	add    esp,0x10
c000c7de:	90                   	nop
c000c7df:	81 c4 2c 02 00 00    	add    esp,0x22c
c000c7e5:	c3                   	ret    

c000c7e6 <KeInitialiseAtexit()>:
c000c7e6:	83 ec 10             	sub    esp,0x10
c000c7e9:	c7 05 80 ac 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ac80,0x0
c000c7f3:	6a 60                	push   0x60
c000c7f5:	6a 00                	push   0x0
c000c7f7:	68 00 ad 02 c0       	push   0xc002ad00
c000c7fc:	e8 ef 3c ff ff       	call   c00004f0 <memset>
c000c801:	83 c4 1c             	add    esp,0x1c
c000c804:	c3                   	ret    

c000c805 <KeRegisterAtexit(void (*)(void*), void*)>:
c000c805:	a1 80 ac 02 c0       	mov    eax,ds:0xc002ac80
c000c80a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000c80e:	89 14 85 00 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5300],edx
c000c815:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000c819:	89 14 85 a0 ac 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5360],edx
c000c820:	40                   	inc    eax
c000c821:	a3 80 ac 02 c0       	mov    ds:0xc002ac80,eax
c000c826:	83 f8 17             	cmp    eax,0x17
c000c829:	7e 0d                	jle    c000c838 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c000c82b:	c7 44 24 04 03 2e 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022e03
c000c833:	e9 12 2e 00 00       	jmp    c000f64a <KePanic(char const*)>
c000c838:	c3                   	ret    

c000c839 <KeExecuteAtexit()>:
c000c839:	53                   	push   ebx
c000c83a:	31 db                	xor    ebx,ebx
c000c83c:	83 ec 08             	sub    esp,0x8
c000c83f:	39 1d 80 ac 02 c0    	cmp    DWORD PTR ds:0xc002ac80,ebx
c000c845:	7e 50                	jle    c000c897 <KeExecuteAtexit()+0x5e>
c000c847:	8b 04 9d 00 ad 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5300]
c000c84e:	85 c0                	test   eax,eax
c000c850:	74 42                	je     c000c894 <KeExecuteAtexit()+0x5b>
c000c852:	51                   	push   ecx
c000c853:	50                   	push   eax
c000c854:	53                   	push   ebx
c000c855:	68 1c 2e 02 c0       	push   0xc0022e1c
c000c85a:	e8 05 a7 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c85f:	58                   	pop    eax
c000c860:	ff 34 9d a0 ac 02 c0 	push   DWORD PTR [ebx*4-0x3ffd5360]
c000c867:	ff 14 9d 00 ad 02 c0 	call   DWORD PTR [ebx*4-0x3ffd5300]
c000c86e:	c7 04 24 3e 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e3e
c000c875:	e8 ea a6 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c87a:	c7 04 24 cf 31 02 c0 	mov    DWORD PTR [esp],0xc00231cf
c000c881:	c7 04 9d 00 ad 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd5300],0x0
c000c88c:	e8 d3 a6 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c891:	83 c4 10             	add    esp,0x10
c000c894:	43                   	inc    ebx
c000c895:	eb a8                	jmp    c000c83f <KeExecuteAtexit()+0x6>
c000c897:	83 c4 08             	add    esp,0x8
c000c89a:	5b                   	pop    ebx
c000c89b:	c3                   	ret    

c000c89c <KeDisplaySplashScreen()>:
c000c89c:	53                   	push   ebx
c000c89d:	bb 01 00 00 00       	mov    ebx,0x1
c000c8a2:	83 ec 08             	sub    esp,0x8
c000c8a5:	43                   	inc    ebx
c000c8a6:	0f be 83 41 2e 02 c0 	movsx  eax,BYTE PTR [ebx-0x3ffdd1bf]
c000c8ad:	85 c0                	test   eax,eax
c000c8af:	74 15                	je     c000c8c6 <KeDisplaySplashScreen()+0x2a>
c000c8b1:	83 ec 0c             	sub    esp,0xc
c000c8b4:	6a 01                	push   0x1
c000c8b6:	53                   	push   ebx
c000c8b7:	6a 00                	push   0x0
c000c8b9:	6a 0f                	push   0xf
c000c8bb:	50                   	push   eax
c000c8bc:	e8 83 db 00 00       	call   c001a444 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000c8c1:	83 c4 20             	add    esp,0x20
c000c8c4:	eb df                	jmp    c000c8a5 <KeDisplaySplashScreen()+0x9>
c000c8c6:	83 c4 08             	add    esp,0x8
c000c8c9:	5b                   	pop    ebx
c000c8ca:	c3                   	ret    

c000c8cb <KeSetBootMessage(char const*)>:
c000c8cb:	57                   	push   edi
c000c8cc:	56                   	push   esi
c000c8cd:	53                   	push   ebx
c000c8ce:	81 ec a4 00 00 00    	sub    esp,0xa4
c000c8d4:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000c8db:	68 9e 00 00 00       	push   0x9e
c000c8e0:	6a 00                	push   0x0
c000c8e2:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000c8e6:	56                   	push   esi
c000c8e7:	e8 04 3c ff ff       	call   c00004f0 <memset>
c000c8ec:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c8ef:	e8 7c 3c ff ff       	call   c0000570 <strlen>
c000c8f4:	ba 50 00 00 00       	mov    edx,0x50
c000c8f9:	83 c4 10             	add    esp,0x10
c000c8fc:	29 c2                	sub    edx,eax
c000c8fe:	31 c9                	xor    ecx,ecx
c000c900:	83 e2 fe             	and    edx,0xfffffffe
c000c903:	01 f2                	add    edx,esi
c000c905:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000c90a:	84 c0                	test   al,al
c000c90c:	74 0a                	je     c000c918 <KeSetBootMessage(char const*)+0x4d>
c000c90e:	80 cc 07             	or     ah,0x7
c000c911:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000c915:	41                   	inc    ecx
c000c916:	eb ed                	jmp    c000c905 <KeSetBootMessage(char const*)+0x3a>
c000c918:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000c91d:	b9 9e 00 00 00       	mov    ecx,0x9e
c000c922:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c924:	50                   	push   eax
c000c925:	50                   	push   eax
c000c926:	53                   	push   ebx
c000c927:	68 56 2e 02 c0       	push   0xc0022e56
c000c92c:	e8 33 a6 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c931:	81 c4 b0 00 00 00    	add    esp,0xb0
c000c937:	5b                   	pop    ebx
c000c938:	5e                   	pop    esi
c000c939:	5f                   	pop    edi
c000c93a:	c3                   	ret    

c000c93b <__cxa_atexit>:
c000c93b:	31 c0                	xor    eax,eax
c000c93d:	c3                   	ret    

c000c93e <__cxa_finalize>:
c000c93e:	c3                   	ret    

c000c93f <__stack_chk_fail>:
c000c93f:	55                   	push   ebp
c000c940:	89 e5                	mov    ebp,esp
c000c942:	83 ec 10             	sub    esp,0x10
c000c945:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c948:	68 64 2e 02 c0       	push   0xc0022e64
c000c94d:	e8 12 a6 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c952:	58                   	pop    eax
c000c953:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c956:	5a                   	pop    edx
c000c957:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000c95a:	68 64 2e 02 c0       	push   0xc0022e64
c000c95f:	e8 00 a6 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c964:	c7 04 24 6c 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e6c
c000c96b:	e8 da 2c 00 00       	call   c000f64a <KePanic(char const*)>
c000c970:	83 c4 10             	add    esp,0x10
c000c973:	c9                   	leave  
c000c974:	c3                   	ret    

c000c975 <__cxa_pure_virtual>:
c000c975:	83 ec 18             	sub    esp,0x18
c000c978:	68 84 2e 02 c0       	push   0xc0022e84
c000c97d:	e8 c8 2c 00 00       	call   c000f64a <KePanic(char const*)>
c000c982:	83 c4 1c             	add    esp,0x1c
c000c985:	c3                   	ret    

c000c986 <operator new[](unsigned long)>:
c000c986:	e9 78 29 00 00       	jmp    c000f303 <malloc>

c000c98b <operator delete(void*, unsigned long)>:
c000c98b:	e9 93 29 00 00       	jmp    c000f323 <rfree>

c000c990 <operator delete[](void*)>:
c000c990:	e9 8e 29 00 00       	jmp    c000f323 <rfree>

c000c995 <operator delete[](void*, unsigned long)>:
c000c995:	e9 89 29 00 00       	jmp    c000f323 <rfree>
c000c99a:	66 90                	xchg   ax,ax

c000c99c <CUnlockScheduler>:
c000c99c:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000c9a4:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000c9a9:	85 c0                	test   eax,eax
c000c9ab:	75 03                	jne    c000c9b0 <CUnlockScheduler+0x14>
c000c9ad:	fb                   	sti    
c000c9ae:	66 90                	xchg   ax,ax
c000c9b0:	90                   	nop
c000c9b1:	c3                   	ret    
c000c9b2:	66 90                	xchg   ax,ax

c000c9b4 <CLockScheduler>:
c000c9b4:	fa                   	cli    
c000c9b5:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000c9ba:	83 c0 01             	add    eax,0x1
c000c9bd:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000c9c2:	90                   	nop
c000c9c3:	c3                   	ret    

c000c9c4 <CPrintf>:
c000c9c4:	83 ec 0c             	sub    esp,0xc
c000c9c7:	83 ec 08             	sub    esp,0x8
c000c9ca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c9ce:	68 97 2e 02 c0       	push   0xc0022e97
c000c9d3:	e8 8c a5 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000c9d8:	83 c4 10             	add    esp,0x10
c000c9db:	90                   	nop
c000c9dc:	83 c4 0c             	add    esp,0xc
c000c9df:	c3                   	ret    

c000c9e0 <CmOpen(char const*)>:
c000c9e0:	57                   	push   edi
c000c9e1:	56                   	push   esi
c000c9e2:	53                   	push   ebx
c000c9e3:	83 ec 1c             	sub    esp,0x1c
c000c9e6:	6a 30                	push   0x30
c000c9e8:	e8 16 29 00 00       	call   c000f303 <malloc>
c000c9ed:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000c9f4:	89 c3                	mov    ebx,eax
c000c9f6:	e8 08 29 00 00       	call   c000f303 <malloc>
c000c9fb:	83 c4 0c             	add    esp,0xc
c000c9fe:	89 c6                	mov    esi,eax
c000ca00:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c000ca06:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ca0a:	50                   	push   eax
c000ca0b:	e8 22 b7 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000ca10:	83 c4 0c             	add    esp,0xc
c000ca13:	89 33                	mov    DWORD PTR [ebx],esi
c000ca15:	8d 44 24 07          	lea    eax,[esp+0x7]
c000ca19:	50                   	push   eax
c000ca1a:	8d 44 24 10          	lea    eax,[esp+0x10]
c000ca1e:	50                   	push   eax
c000ca1f:	56                   	push   esi
c000ca20:	e8 2d ba ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c000ca25:	5a                   	pop    edx
c000ca26:	59                   	pop    ecx
c000ca27:	6a 01                	push   0x1
c000ca29:	ff 33                	push   DWORD PTR [ebx]
c000ca2b:	e8 20 b7 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000ca30:	5e                   	pop    esi
c000ca31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca35:	e8 c9 28 00 00       	call   c000f303 <malloc>
c000ca3a:	5a                   	pop    edx
c000ca3b:	89 c7                	mov    edi,eax
c000ca3d:	8d 74 24 10          	lea    esi,[esp+0x10]
c000ca41:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca43:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca45:	56                   	push   esi
c000ca46:	57                   	push   edi
c000ca47:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca4b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca4f:	50                   	push   eax
c000ca50:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000ca53:	83 c4 14             	add    esp,0x14
c000ca56:	ff 33                	push   DWORD PTR [ebx]
c000ca58:	e8 51 b7 ff ff       	call   c00081ae <File::close()>
c000ca5d:	59                   	pop    ecx
c000ca5e:	58                   	pop    eax
c000ca5f:	6a 13                	push   0x13
c000ca61:	ff 33                	push   DWORD PTR [ebx]
c000ca63:	e8 e8 b6 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000ca68:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ca6a:	8b 10                	mov    edx,DWORD PTR [eax]
c000ca6c:	89 34 24             	mov    DWORD PTR [esp],esi
c000ca6f:	57                   	push   edi
c000ca70:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca74:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ca78:	50                   	push   eax
c000ca79:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ca7c:	83 c4 14             	add    esp,0x14
c000ca7f:	57                   	push   edi
c000ca80:	e8 8e 28 00 00       	call   c000f313 <free>
c000ca85:	83 c4 10             	add    esp,0x10
c000ca88:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ca8b:	75 10                	jne    c000ca9d <CmOpen(char const*)+0xbd>
c000ca8d:	83 ec 0c             	sub    esp,0xc
c000ca90:	68 9a 2e 02 c0       	push   0xc0022e9a
c000ca95:	e8 b0 2b 00 00       	call   c000f64a <KePanic(char const*)>
c000ca9a:	83 c4 10             	add    esp,0x10
c000ca9d:	8d 7b 05             	lea    edi,[ebx+0x5]
c000caa0:	50                   	push   eax
c000caa1:	6a 00                	push   0x0
c000caa3:	6a 00                	push   0x0
c000caa5:	ff 33                	push   DWORD PTR [ebx]
c000caa7:	e8 62 b7 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000caac:	8b 03                	mov    eax,DWORD PTR [ebx]
c000caae:	8b 10                	mov    edx,DWORD PTR [eax]
c000cab0:	89 34 24             	mov    DWORD PTR [esp],esi
c000cab3:	57                   	push   edi
c000cab4:	6a 00                	push   0x0
c000cab6:	6a 2b                	push   0x2b
c000cab8:	50                   	push   eax
c000cab9:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cabc:	83 c4 1c             	add    esp,0x1c
c000cabf:	6a 00                	push   0x0
c000cac1:	6a 00                	push   0x0
c000cac3:	ff 33                	push   DWORD PTR [ebx]
c000cac5:	e8 44 b7 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000caca:	83 c4 0c             	add    esp,0xc
c000cacd:	6a 08                	push   0x8
c000cacf:	68 ab 2e 02 c0       	push   0xc0022eab
c000cad4:	57                   	push   edi
c000cad5:	e8 a6 38 ff ff       	call   c0000380 <memcmp>
c000cada:	83 c4 10             	add    esp,0x10
c000cadd:	85 c0                	test   eax,eax
c000cadf:	74 10                	je     c000caf1 <CmOpen(char const*)+0x111>
c000cae1:	83 ec 0c             	sub    esp,0xc
c000cae4:	68 b4 2e 02 c0       	push   0xc0022eb4
c000cae9:	e8 5c 2b 00 00       	call   c000f64a <KePanic(char const*)>
c000caee:	83 c4 10             	add    esp,0x10
c000caf1:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c000caf5:	89 d8                	mov    eax,ebx
c000caf7:	83 c4 10             	add    esp,0x10
c000cafa:	5b                   	pop    ebx
c000cafb:	5e                   	pop    esi
c000cafc:	5f                   	pop    edi
c000cafd:	c3                   	ret    

c000cafe <CmClose(Reghive_Tag*)>:
c000cafe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb02:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000cb06:	74 0b                	je     c000cb13 <CmClose(Reghive_Tag*)+0x15>
c000cb08:	8b 00                	mov    eax,DWORD PTR [eax]
c000cb0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb0e:	e9 9b b6 ff ff       	jmp    c00081ae <File::close()>
c000cb13:	c3                   	ret    

c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c000cb14:	53                   	push   ebx
c000cb15:	83 ec 18             	sub    esp,0x18
c000cb18:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cb1c:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000cb20:	74 29                	je     c000cb4b <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000cb22:	50                   	push   eax
c000cb23:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000cb28:	99                   	cdq    
c000cb29:	52                   	push   edx
c000cb2a:	50                   	push   eax
c000cb2b:	ff 33                	push   DWORD PTR [ebx]
c000cb2d:	e8 dc b6 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cb32:	5a                   	pop    edx
c000cb33:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cb35:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cb39:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb3b:	51                   	push   ecx
c000cb3c:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000cb40:	6a 00                	push   0x0
c000cb42:	6a 2b                	push   0x2b
c000cb44:	50                   	push   eax
c000cb45:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb48:	83 c4 20             	add    esp,0x20
c000cb4b:	83 c4 18             	add    esp,0x18
c000cb4e:	5b                   	pop    ebx
c000cb4f:	c3                   	ret    

c000cb50 <CmGetString(Reghive_Tag*, int, char*)>:
c000cb50:	55                   	push   ebp
c000cb51:	57                   	push   edi
c000cb52:	56                   	push   esi
c000cb53:	53                   	push   ebx
c000cb54:	31 db                	xor    ebx,ebx
c000cb56:	83 ec 70             	sub    esp,0x70
c000cb59:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c000cb60:	8d 44 24 0e          	lea    eax,[esp+0xe]
c000cb64:	50                   	push   eax
c000cb65:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c000cb6c:	55                   	push   ebp
c000cb6d:	e8 a2 ff ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cb72:	83 c4 10             	add    esp,0x10
c000cb75:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c000cb7a:	c1 e0 08             	shl    eax,0x8
c000cb7d:	89 c2                	mov    edx,eax
c000cb7f:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c000cb84:	09 d0                	or     eax,edx
c000cb86:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c000cb8b:	c1 e0 08             	shl    eax,0x8
c000cb8e:	09 d0                	or     eax,edx
c000cb90:	74 25                	je     c000cbb7 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c000cb92:	6b fb 0d             	imul   edi,ebx,0xd
c000cb95:	52                   	push   edx
c000cb96:	8d 54 24 39          	lea    edx,[esp+0x39]
c000cb9a:	52                   	push   edx
c000cb9b:	50                   	push   eax
c000cb9c:	55                   	push   ebp
c000cb9d:	e8 72 ff ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cba2:	8d 74 24 49          	lea    esi,[esp+0x49]
c000cba6:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c000cbad:	b9 27 00 00 00       	mov    ecx,0x27
c000cbb2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000cbb4:	83 c4 10             	add    esp,0x10
c000cbb7:	83 c3 03             	add    ebx,0x3
c000cbba:	83 fb 15             	cmp    ebx,0x15
c000cbbd:	75 b6                	jne    c000cb75 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c000cbbf:	83 c4 6c             	add    esp,0x6c
c000cbc2:	5b                   	pop    ebx
c000cbc3:	5e                   	pop    esi
c000cbc4:	5f                   	pop    edi
c000cbc5:	5d                   	pop    ebp
c000cbc6:	c3                   	ret    

c000cbc7 <CmEnterDirectory(Reghive_Tag*, int)>:
c000cbc7:	83 ec 40             	sub    esp,0x40
c000cbca:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cbce:	50                   	push   eax
c000cbcf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbd3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cbd7:	e8 38 ff ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cbdc:	83 c4 10             	add    esp,0x10
c000cbdf:	83 c8 ff             	or     eax,0xffffffff
c000cbe2:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c000cbe7:	75 19                	jne    c000cc02 <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c000cbe9:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c000cbee:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c000cbf3:	c1 e0 08             	shl    eax,0x8
c000cbf6:	09 c2                	or     edx,eax
c000cbf8:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c000cbfd:	c1 e0 10             	shl    eax,0x10
c000cc00:	09 d0                	or     eax,edx
c000cc02:	83 c4 3c             	add    esp,0x3c
c000cc05:	c3                   	ret    

c000cc06 <CmGetNext(Reghive_Tag*, int)>:
c000cc06:	83 ec 40             	sub    esp,0x40
c000cc09:	8d 44 24 09          	lea    eax,[esp+0x9]
c000cc0d:	50                   	push   eax
c000cc0e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cc12:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cc16:	e8 f9 fe ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cc1b:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c000cc20:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c000cc25:	c1 e0 08             	shl    eax,0x8
c000cc28:	09 c2                	or     edx,eax
c000cc2a:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000cc2f:	83 c4 4c             	add    esp,0x4c
c000cc32:	c1 e0 10             	shl    eax,0x10
c000cc35:	09 d0                	or     eax,edx
c000cc37:	c3                   	ret    

c000cc38 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c000cc38:	53                   	push   ebx
c000cc39:	83 ec 18             	sub    esp,0x18
c000cc3c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000cc40:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000cc44:	74 29                	je     c000cc6f <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c000cc46:	50                   	push   eax
c000cc47:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c000cc4c:	99                   	cdq    
c000cc4d:	52                   	push   edx
c000cc4e:	50                   	push   eax
c000cc4f:	ff 33                	push   DWORD PTR [ebx]
c000cc51:	e8 b8 b5 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cc56:	5a                   	pop    edx
c000cc57:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cc59:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cc5d:	8b 10                	mov    edx,DWORD PTR [eax]
c000cc5f:	51                   	push   ecx
c000cc60:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c000cc64:	6a 00                	push   0x0
c000cc66:	6a 2b                	push   0x2b
c000cc68:	50                   	push   eax
c000cc69:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cc6c:	83 c4 20             	add    esp,0x20
c000cc6f:	83 c4 18             	add    esp,0x18
c000cc72:	5b                   	pop    ebx
c000cc73:	c3                   	ret    

c000cc74 <CmFreeExtent(Reghive_Tag*, int)>:
c000cc74:	53                   	push   ebx
c000cc75:	83 ec 3c             	sub    esp,0x3c
c000cc78:	6a 2b                	push   0x2b
c000cc7a:	6a 00                	push   0x0
c000cc7c:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000cc80:	53                   	push   ebx
c000cc81:	e8 6a 38 ff ff       	call   c00004f0 <memset>
c000cc86:	83 c4 0c             	add    esp,0xc
c000cc89:	53                   	push   ebx
c000cc8a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cc8e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000cc92:	e8 a1 ff ff ff       	call   c000cc38 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cc97:	83 c4 48             	add    esp,0x48
c000cc9a:	5b                   	pop    ebx
c000cc9b:	c3                   	ret    

c000cc9c <CmUpdateHeader(Reghive_Tag*)>:
c000cc9c:	83 ec 0c             	sub    esp,0xc
c000cc9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cca3:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c000cca7:	74 10                	je     c000ccb9 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c000cca9:	52                   	push   edx
c000ccaa:	8d 50 05             	lea    edx,[eax+0x5]
c000ccad:	52                   	push   edx
c000ccae:	6a 00                	push   0x0
c000ccb0:	50                   	push   eax
c000ccb1:	e8 82 ff ff ff       	call   c000cc38 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ccb6:	83 c4 10             	add    esp,0x10
c000ccb9:	83 c4 0c             	add    esp,0xc
c000ccbc:	c3                   	ret    

c000ccbd <CmExpand(Reghive_Tag*, int)>:
c000ccbd:	57                   	push   edi
c000ccbe:	56                   	push   esi
c000ccbf:	83 ce ff             	or     esi,0xffffffff
c000ccc2:	53                   	push   ebx
c000ccc3:	83 ec 30             	sub    esp,0x30
c000ccc6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000ccca:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c000ccce:	74 5f                	je     c000cd2f <CmExpand(Reghive_Tag*, int)+0x72>
c000ccd0:	31 d2                	xor    edx,edx
c000ccd2:	31 f6                	xor    esi,esi
c000ccd4:	50                   	push   eax
c000ccd5:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c000ccd9:	52                   	push   edx
c000ccda:	50                   	push   eax
c000ccdb:	ff 33                	push   DWORD PTR [ebx]
c000ccdd:	e8 2c b5 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cce2:	83 c4 0c             	add    esp,0xc
c000cce5:	6a 2b                	push   0x2b
c000cce7:	6a 00                	push   0x0
c000cce9:	8d 7c 24 11          	lea    edi,[esp+0x11]
c000cced:	57                   	push   edi
c000ccee:	e8 fd 37 ff ff       	call   c00004f0 <memset>
c000ccf3:	83 c4 10             	add    esp,0x10
c000ccf6:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000ccfa:	7d 1b                	jge    c000cd17 <CmExpand(Reghive_Tag*, int)+0x5a>
c000ccfc:	83 ec 0c             	sub    esp,0xc
c000ccff:	8b 03                	mov    eax,DWORD PTR [ebx]
c000cd01:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c000cd05:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd07:	46                   	inc    esi
c000cd08:	51                   	push   ecx
c000cd09:	57                   	push   edi
c000cd0a:	6a 00                	push   0x0
c000cd0c:	6a 2b                	push   0x2b
c000cd0e:	50                   	push   eax
c000cd0f:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000cd12:	83 c4 20             	add    esp,0x20
c000cd15:	eb df                	jmp    c000ccf6 <CmExpand(Reghive_Tag*, int)+0x39>
c000cd17:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000cd1b:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c000cd1e:	83 ec 0c             	sub    esp,0xc
c000cd21:	01 f2                	add    edx,esi
c000cd23:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c000cd26:	53                   	push   ebx
c000cd27:	e8 70 ff ff ff       	call   c000cc9c <CmUpdateHeader(Reghive_Tag*)>
c000cd2c:	83 c4 10             	add    esp,0x10
c000cd2f:	83 c4 30             	add    esp,0x30
c000cd32:	89 f0                	mov    eax,esi
c000cd34:	5b                   	pop    ebx
c000cd35:	5e                   	pop    esi
c000cd36:	5f                   	pop    edi
c000cd37:	c3                   	ret    

c000cd38 <CmFindUnusedExtent(Reghive_Tag*)>:
c000cd38:	55                   	push   ebp
c000cd39:	57                   	push   edi
c000cd3a:	56                   	push   esi
c000cd3b:	53                   	push   ebx
c000cd3c:	83 cb ff             	or     ebx,0xffffffff
c000cd3f:	83 ec 1c             	sub    esp,0x1c
c000cd42:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000cd46:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c000cd4a:	74 68                	je     c000cdb4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cd4c:	be 2b 00 00 00       	mov    esi,0x2b
c000cd51:	51                   	push   ecx
c000cd52:	31 ff                	xor    edi,edi
c000cd54:	6a 00                	push   0x0
c000cd56:	31 db                	xor    ebx,ebx
c000cd58:	6a 00                	push   0x0
c000cd5a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cd5d:	e8 ac b4 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cd62:	83 c4 10             	add    esp,0x10
c000cd65:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c000cd68:	76 3b                	jbe    c000cda5 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c000cd6a:	83 ec 0c             	sub    esp,0xc
c000cd6d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cd70:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000cd74:	8b 10                	mov    edx,DWORD PTR [eax]
c000cd76:	51                   	push   ecx
c000cd77:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c000cd7b:	51                   	push   ecx
c000cd7c:	6a 00                	push   0x0
c000cd7e:	6a 01                	push   0x1
c000cd80:	50                   	push   eax
c000cd81:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cd84:	83 c4 20             	add    esp,0x20
c000cd87:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c000cd8c:	74 26                	je     c000cdb4 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c000cd8e:	43                   	inc    ebx
c000cd8f:	52                   	push   edx
c000cd90:	57                   	push   edi
c000cd91:	56                   	push   esi
c000cd92:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cd95:	e8 74 b4 ff ff       	call   c000820e <File::seek(unsigned long long)>
c000cd9a:	83 c6 2b             	add    esi,0x2b
c000cd9d:	83 d7 00             	adc    edi,0x0
c000cda0:	83 c4 10             	add    esp,0x10
c000cda3:	eb c0                	jmp    c000cd65 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c000cda5:	50                   	push   eax
c000cda6:	50                   	push   eax
c000cda7:	6a 40                	push   0x40
c000cda9:	55                   	push   ebp
c000cdaa:	e8 0e ff ff ff       	call   c000ccbd <CmExpand(Reghive_Tag*, int)>
c000cdaf:	83 c4 10             	add    esp,0x10
c000cdb2:	89 c3                	mov    ebx,eax
c000cdb4:	83 c4 1c             	add    esp,0x1c
c000cdb7:	89 d8                	mov    eax,ebx
c000cdb9:	5b                   	pop    ebx
c000cdba:	5e                   	pop    esi
c000cdbb:	5f                   	pop    edi
c000cdbc:	5d                   	pop    ebp
c000cdbd:	c3                   	ret    

c000cdbe <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c000cdbe:	55                   	push   ebp
c000cdbf:	57                   	push   edi
c000cdc0:	56                   	push   esi
c000cdc1:	53                   	push   ebx
c000cdc2:	81 ec 88 00 00 00    	sub    esp,0x88
c000cdc8:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c000cdcf:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cdd6:	e8 5d ff ff ff       	call   c000cd38 <CmFindUnusedExtent(Reghive_Tag*)>
c000cddb:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000cddf:	83 c4 0c             	add    esp,0xc
c000cde2:	6a 2b                	push   0x2b
c000cde4:	6a 00                	push   0x0
c000cde6:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c000cdea:	55                   	push   ebp
c000cdeb:	e8 00 37 ff ff       	call   c00004f0 <memset>
c000cdf0:	83 c4 10             	add    esp,0x10
c000cdf3:	85 db                	test   ebx,ebx
c000cdf5:	74 12                	je     c000ce09 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c000cdf7:	51                   	push   ecx
c000cdf8:	55                   	push   ebp
c000cdf9:	53                   	push   ebx
c000cdfa:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ce01:	e8 0e fd ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000ce06:	83 c4 10             	add    esp,0x10
c000ce09:	8d 7c 24 45          	lea    edi,[esp+0x45]
c000ce0d:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000ce14:	b9 2b 00 00 00       	mov    ecx,0x2b
c000ce19:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ce1b:	85 db                	test   ebx,ebx
c000ce1d:	74 49                	je     c000ce68 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c000ce1f:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c000ce24:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c000ce29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ce2d:	c1 e0 08             	shl    eax,0x8
c000ce30:	81 e2 ff ff ff 00    	and    edx,0xffffff
c000ce36:	09 c8                	or     eax,ecx
c000ce38:	74 11                	je     c000ce4b <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c000ce3a:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c000ce3e:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c000ce42:	c1 e8 10             	shr    eax,0x10
c000ce45:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000ce49:	eb 0f                	jmp    c000ce5a <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c000ce4b:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000ce50:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000ce55:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000ce5a:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000ce5e:	c1 ea 08             	shr    edx,0x8
c000ce61:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c000ce66:	eb 0f                	jmp    c000ce77 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c000ce68:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c000ce6d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c000ce72:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c000ce77:	52                   	push   edx
c000ce78:	8d 44 24 49          	lea    eax,[esp+0x49]
c000ce7c:	50                   	push   eax
c000ce7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce81:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ce88:	e8 ab fd ff ff       	call   c000cc38 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000ce8d:	83 c4 10             	add    esp,0x10
c000ce90:	85 db                	test   ebx,ebx
c000ce92:	74 12                	je     c000cea6 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c000ce94:	50                   	push   eax
c000ce95:	55                   	push   ebp
c000ce96:	53                   	push   ebx
c000ce97:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000ce9e:	e8 95 fd ff ff       	call   c000cc38 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ceaa:	83 c4 7c             	add    esp,0x7c
c000cead:	5b                   	pop    ebx
c000ceae:	5e                   	pop    esi
c000ceaf:	5f                   	pop    edi
c000ceb0:	5d                   	pop    ebp
c000ceb1:	c3                   	ret    

c000ceb2 <CmSetString(Reghive_Tag*, int, char const*)>:
c000ceb2:	55                   	push   ebp
c000ceb3:	57                   	push   edi
c000ceb4:	56                   	push   esi
c000ceb5:	53                   	push   ebx
c000ceb6:	bb 27 00 00 00       	mov    ebx,0x27
c000cebb:	81 ec 88 00 00 00    	sub    esp,0x88
c000cec1:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c000cec8:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c000cecf:	e8 9c 36 ff ff       	call   c0000570 <strlen>
c000ced4:	8d 48 26             	lea    ecx,[eax+0x26]
c000ced7:	89 c8                	mov    eax,ecx
c000ced9:	99                   	cdq    
c000ceda:	f7 fb                	idiv   ebx
c000cedc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cee0:	83 c4 10             	add    esp,0x10
c000cee3:	81 f9 37 01 00 00    	cmp    ecx,0x137
c000cee9:	7e 10                	jle    c000cefb <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c000ceeb:	83 ec 0c             	sub    esp,0xc
c000ceee:	68 c5 2e 02 c0       	push   0xc0022ec5
c000cef3:	e8 52 27 00 00       	call   c000f64a <KePanic(char const*)>
c000cef8:	83 c4 10             	add    esp,0x10
c000cefb:	31 ff                	xor    edi,edi
c000cefd:	50                   	push   eax
c000cefe:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c000cf02:	53                   	push   ebx
c000cf03:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cf0a:	56                   	push   esi
c000cf0b:	e8 04 fc ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cf10:	83 c4 10             	add    esp,0x10
c000cf13:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c000cf17:	89 d0                	mov    eax,edx
c000cf19:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c000cf1d:	c1 e0 08             	shl    eax,0x8
c000cf20:	09 c2                	or     edx,eax
c000cf22:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c000cf26:	c1 e2 08             	shl    edx,0x8
c000cf29:	09 c2                	or     edx,eax
c000cf2b:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c000cf2f:	7e 76                	jle    c000cfa7 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c000cf31:	85 d2                	test   edx,edx
c000cf33:	75 25                	jne    c000cf5a <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c000cf35:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c000cf3a:	8d 44 24 45          	lea    eax,[esp+0x45]
c000cf3e:	50                   	push   eax
c000cf3f:	6a 00                	push   0x0
c000cf41:	6a 00                	push   0x0
c000cf43:	56                   	push   esi
c000cf44:	e8 75 fe ff ff       	call   c000cdbe <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000cf49:	83 c4 10             	add    esp,0x10
c000cf4c:	89 c2                	mov    edx,eax
c000cf4e:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c000cf51:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c000cf54:	c1 f8 10             	sar    eax,0x10
c000cf57:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c000cf5a:	55                   	push   ebp
c000cf5b:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c000cf5f:	55                   	push   ebp
c000cf60:	52                   	push   edx
c000cf61:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf65:	56                   	push   esi
c000cf66:	e8 a9 fb ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000cf6b:	83 c4 0c             	add    esp,0xc
c000cf6e:	6a 27                	push   0x27
c000cf70:	6a 00                	push   0x0
c000cf72:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cf76:	51                   	push   ecx
c000cf77:	e8 74 35 ff ff       	call   c00004f0 <memset>
c000cf7c:	83 c4 0c             	add    esp,0xc
c000cf7f:	6b c7 27             	imul   eax,edi,0x27
c000cf82:	6a 27                	push   0x27
c000cf84:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c000cf8b:	50                   	push   eax
c000cf8c:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c000cf90:	51                   	push   ecx
c000cf91:	e8 ea 36 ff ff       	call   c0000680 <strncpy>
c000cf96:	83 c4 0c             	add    esp,0xc
c000cf99:	55                   	push   ebp
c000cf9a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cf9e:	52                   	push   edx
c000cf9f:	56                   	push   esi
c000cfa0:	e8 93 fc ff ff       	call   c000cc38 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cfa5:	eb 19                	jmp    c000cfc0 <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c000cfa7:	85 d2                	test   edx,edx
c000cfa9:	74 18                	je     c000cfc3 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c000cfab:	51                   	push   ecx
c000cfac:	51                   	push   ecx
c000cfad:	52                   	push   edx
c000cfae:	56                   	push   esi
c000cfaf:	e8 c0 fc ff ff       	call   c000cc74 <CmFreeExtent(Reghive_Tag*, int)>
c000cfb4:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c000cfb8:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c000cfbc:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c000cfc0:	83 c4 10             	add    esp,0x10
c000cfc3:	47                   	inc    edi
c000cfc4:	83 c3 03             	add    ebx,0x3
c000cfc7:	83 ff 07             	cmp    edi,0x7
c000cfca:	0f 85 43 ff ff ff    	jne    c000cf13 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c000cfd0:	50                   	push   eax
c000cfd1:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c000cfd5:	50                   	push   eax
c000cfd6:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c000cfdd:	56                   	push   esi
c000cfde:	e8 55 fc ff ff       	call   c000cc38 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000cfe3:	81 c4 8c 00 00 00    	add    esp,0x8c
c000cfe9:	5b                   	pop    ebx
c000cfea:	5e                   	pop    esi
c000cfeb:	5f                   	pop    edi
c000cfec:	5d                   	pop    ebp
c000cfed:	c3                   	ret    

c000cfee <CmGetMatch(char*, char*, bool, bool*)>:
c000cfee:	56                   	push   esi
c000cfef:	53                   	push   ebx
c000cff0:	50                   	push   eax
c000cff1:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000cff5:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cffa:	74 25                	je     c000d021 <CmGetMatch(char*, char*, bool, bool*)+0x33>
c000cffc:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000cfff:	31 db                	xor    ebx,ebx
c000d001:	50                   	push   eax
c000d002:	50                   	push   eax
c000d003:	8d 04 9d 40 52 02 c0 	lea    eax,[ebx*4-0x3ffdadc0]
c000d00a:	50                   	push   eax
c000d00b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d00f:	e8 3c 37 ff ff       	call   c0000750 <strcmp>
c000d014:	83 c4 10             	add    esp,0x10
c000d017:	85 c0                	test   eax,eax
c000d019:	74 2e                	je     c000d049 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d01b:	43                   	inc    ebx
c000d01c:	83 fb 3f             	cmp    ebx,0x3f
c000d01f:	75 e0                	jne    c000d001 <CmGetMatch(char*, char*, bool, bool*)+0x13>
c000d021:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d024:	31 db                	xor    ebx,ebx
c000d026:	8d 04 9d 40 52 02 c0 	lea    eax,[ebx*4-0x3ffdadc0]
c000d02d:	51                   	push   ecx
c000d02e:	51                   	push   ecx
c000d02f:	50                   	push   eax
c000d030:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d034:	e8 17 37 ff ff       	call   c0000750 <strcmp>
c000d039:	83 c4 10             	add    esp,0x10
c000d03c:	85 c0                	test   eax,eax
c000d03e:	74 09                	je     c000d049 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c000d040:	43                   	inc    ebx
c000d041:	83 fb 3f             	cmp    ebx,0x3f
c000d044:	75 e0                	jne    c000d026 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c000d046:	83 cb ff             	or     ebx,0xffffffff
c000d049:	89 d8                	mov    eax,ebx
c000d04b:	5a                   	pop    edx
c000d04c:	5b                   	pop    ebx
c000d04d:	5e                   	pop    esi
c000d04e:	c3                   	ret    

c000d04f <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c000d04f:	55                   	push   ebp
c000d050:	31 c0                	xor    eax,eax
c000d052:	57                   	push   edi
c000d053:	56                   	push   esi
c000d054:	53                   	push   ebx
c000d055:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d059:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000d05d:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c000d05f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000d063:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c000d066:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d06a:	83 fd 1f             	cmp    ebp,0x1f
c000d06d:	7f 0b                	jg     c000d07a <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c000d06f:	0f b6 c2             	movzx  eax,dl
c000d072:	d3 e0                	shl    eax,cl
c000d074:	09 07                	or     DWORD PTR [edi],eax
c000d076:	b0 01                	mov    al,0x1
c000d078:	01 33                	add    DWORD PTR [ebx],esi
c000d07a:	5b                   	pop    ebx
c000d07b:	5e                   	pop    esi
c000d07c:	5f                   	pop    edi
c000d07d:	5d                   	pop    ebp
c000d07e:	c3                   	ret    

c000d07f <CmGetShift(unsigned int*, int*, int, bool*)>:
c000d07f:	57                   	push   edi
c000d080:	56                   	push   esi
c000d081:	53                   	push   ebx
c000d082:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d086:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000d08a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000d08e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d092:	39 0b                	cmp    DWORD PTR [ebx],ecx
c000d094:	7c 17                	jl     c000d0ad <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c000d096:	8b 17                	mov    edx,DWORD PTR [edi]
c000d098:	b8 01 00 00 00       	mov    eax,0x1
c000d09d:	d3 e0                	shl    eax,cl
c000d09f:	48                   	dec    eax
c000d0a0:	21 d0                	and    eax,edx
c000d0a2:	d3 ea                	shr    edx,cl
c000d0a4:	89 17                	mov    DWORD PTR [edi],edx
c000d0a6:	29 0b                	sub    DWORD PTR [ebx],ecx
c000d0a8:	c6 06 01             	mov    BYTE PTR [esi],0x1
c000d0ab:	eb 05                	jmp    c000d0b2 <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c000d0ad:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000d0b0:	31 c0                	xor    eax,eax
c000d0b2:	5b                   	pop    ebx
c000d0b3:	5e                   	pop    esi
c000d0b4:	5f                   	pop    edi
c000d0b5:	c3                   	ret    

c000d0b6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c000d0b6:	83 ec 40             	sub    esp,0x40
c000d0b9:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d0bd:	50                   	push   eax
c000d0be:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0c2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d0c6:	e8 49 fa ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d0cb:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000d0cf:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c000d0d3:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c000d0d7:	89 10                	mov    DWORD PTR [eax],edx
c000d0d9:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000d0dc:	83 c4 4c             	add    esp,0x4c
c000d0df:	c3                   	ret    

c000d0e0 <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c000d0e0:	55                   	push   ebp
c000d0e1:	57                   	push   edi
c000d0e2:	56                   	push   esi
c000d0e3:	53                   	push   ebx
c000d0e4:	83 ec 40             	sub    esp,0x40
c000d0e7:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c000d0eb:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c000d0ef:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000d0f3:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c000d0f7:	53                   	push   ebx
c000d0f8:	56                   	push   esi
c000d0f9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d0fd:	e8 12 fa ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d102:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c000d106:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c000d10a:	83 c4 0c             	add    esp,0xc
c000d10d:	53                   	push   ebx
c000d10e:	56                   	push   esi
c000d10f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d113:	e8 20 fb ff ff       	call   c000cc38 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d118:	83 c4 4c             	add    esp,0x4c
c000d11b:	5b                   	pop    ebx
c000d11c:	5e                   	pop    esi
c000d11d:	5f                   	pop    edi
c000d11e:	5d                   	pop    ebp
c000d11f:	c3                   	ret    

c000d120 <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c000d120:	55                   	push   ebp
c000d121:	57                   	push   edi
c000d122:	56                   	push   esi
c000d123:	31 f6                	xor    esi,esi
c000d125:	53                   	push   ebx
c000d126:	31 db                	xor    ebx,ebx
c000d128:	83 ec 40             	sub    esp,0x40
c000d12b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d133:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d13b:	6a 12                	push   0x12
c000d13d:	68 ee 00 00 00       	push   0xee
c000d142:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d146:	e8 a5 33 ff ff       	call   c00004f0 <memset>
c000d14b:	83 c4 10             	add    esp,0x10
c000d14e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000d152:	6a 08                	push   0x8
c000d154:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d158:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c000d15c:	50                   	push   eax
c000d15d:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000d161:	55                   	push   ebp
c000d162:	57                   	push   edi
c000d163:	e8 e7 fe ff ff       	call   c000d04f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d168:	83 c4 10             	add    esp,0x10
c000d16b:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d16f:	50                   	push   eax
c000d170:	6a 06                	push   0x6
c000d172:	55                   	push   ebp
c000d173:	57                   	push   edi
c000d174:	e8 06 ff ff ff       	call   c000d07f <CmGetShift(unsigned int*, int*, int, bool*)>
c000d179:	83 c4 10             	add    esp,0x10
c000d17c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d181:	74 07                	je     c000d18a <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c000d183:	46                   	inc    esi
c000d184:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c000d188:	eb e1                	jmp    c000d16b <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c000d18a:	43                   	inc    ebx
c000d18b:	83 fb 12             	cmp    ebx,0x12
c000d18e:	75 c2                	jne    c000d152 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c000d190:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000d194:	31 db                	xor    ebx,ebx
c000d196:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000d199:	50                   	push   eax
c000d19a:	50                   	push   eax
c000d19b:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c000d1a0:	43                   	inc    ebx
c000d1a1:	8d 04 85 40 52 02 c0 	lea    eax,[eax*4-0x3ffdadc0]
c000d1a8:	50                   	push   eax
c000d1a9:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c000d1ad:	e8 8e 36 ff ff       	call   c0000840 <strcat>
c000d1b2:	83 c4 10             	add    esp,0x10
c000d1b5:	83 fb 18             	cmp    ebx,0x18
c000d1b8:	75 df                	jne    c000d199 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c000d1ba:	83 c4 3c             	add    esp,0x3c
c000d1bd:	31 c0                	xor    eax,eax
c000d1bf:	5b                   	pop    ebx
c000d1c0:	5e                   	pop    esi
c000d1c1:	5f                   	pop    edi
c000d1c2:	5d                   	pop    ebp
c000d1c3:	c3                   	ret    

c000d1c4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c000d1c4:	83 ec 40             	sub    esp,0x40
c000d1c7:	8d 44 24 09          	lea    eax,[esp+0x9]
c000d1cb:	50                   	push   eax
c000d1cc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d1d0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d1d4:	e8 3b f9 ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d1d9:	58                   	pop    eax
c000d1da:	5a                   	pop    edx
c000d1db:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000d1df:	8d 44 24 15          	lea    eax,[esp+0x15]
c000d1e3:	50                   	push   eax
c000d1e4:	e8 37 ff ff ff       	call   c000d120 <CmConvertFromInternalFilename(unsigned char const*, char*)>
c000d1e9:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c000d1ee:	83 c4 4c             	add    esp,0x4c
c000d1f1:	c3                   	ret    

c000d1f2 <CmConvertToInternalFilename(char const*, unsigned char*)>:
c000d1f2:	55                   	push   ebp
c000d1f3:	57                   	push   edi
c000d1f4:	56                   	push   esi
c000d1f5:	53                   	push   ebx
c000d1f6:	31 db                	xor    ebx,ebx
c000d1f8:	83 ec 70             	sub    esp,0x70
c000d1fb:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c000d202:	6a 30                	push   0x30
c000d204:	6a 00                	push   0x0
c000d206:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000d20a:	56                   	push   esi
c000d20b:	e8 e0 32 ff ff       	call   c00004f0 <memset>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	83 ec 0c             	sub    esp,0xc
c000d216:	57                   	push   edi
c000d217:	e8 54 33 ff ff       	call   c0000570 <strlen>
c000d21c:	83 c4 10             	add    esp,0x10
c000d21f:	39 d8                	cmp    eax,ebx
c000d221:	76 16                	jbe    c000d239 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c000d223:	83 ec 0c             	sub    esp,0xc
c000d226:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c000d22a:	50                   	push   eax
c000d22b:	e8 00 37 ff ff       	call   c0000930 <toupper>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c000d236:	43                   	inc    ebx
c000d237:	eb da                	jmp    c000d213 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c000d239:	31 f6                	xor    esi,esi
c000d23b:	52                   	push   edx
c000d23c:	31 ff                	xor    edi,edi
c000d23e:	6a 18                	push   0x18
c000d240:	6a 3f                	push   0x3f
c000d242:	8d 44 24 24          	lea    eax,[esp+0x24]
c000d246:	50                   	push   eax
c000d247:	e8 a4 32 ff ff       	call   c00004f0 <memset>
c000d24c:	83 c4 10             	add    esp,0x10
c000d24f:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c000d253:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c000d257:	84 c0                	test   al,al
c000d259:	0f 84 b0 00 00 00    	je     c000d30f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d25f:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c000d263:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c000d268:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c000d26c:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c000d271:	8d 6e 01             	lea    ebp,[esi+0x1]
c000d274:	83 ec 0c             	sub    esp,0xc
c000d277:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c000d27b:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c000d27f:	53                   	push   ebx
c000d280:	e8 eb 32 ff ff       	call   c0000570 <strlen>
c000d285:	83 c4 10             	add    esp,0x10
c000d288:	85 c0                	test   eax,eax
c000d28a:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d28e:	74 0b                	je     c000d29b <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c000d290:	50                   	push   eax
c000d291:	6a 01                	push   0x1
c000d293:	53                   	push   ebx
c000d294:	8d 44 24 20          	lea    eax,[esp+0x20]
c000d298:	50                   	push   eax
c000d299:	eb 0a                	jmp    c000d2a5 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c000d29b:	50                   	push   eax
c000d29c:	6a 00                	push   0x0
c000d29e:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000d2a2:	50                   	push   eax
c000d2a3:	6a 00                	push   0x0
c000d2a5:	e8 44 fd ff ff       	call   c000cfee <CmGetMatch(char*, char*, bool, bool*)>
c000d2aa:	83 c4 10             	add    esp,0x10
c000d2ad:	83 f8 ff             	cmp    eax,0xffffffff
c000d2b0:	75 1a                	jne    c000d2cc <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c000d2b2:	83 ec 0c             	sub    esp,0xc
c000d2b5:	68 da 2e 02 c0       	push   0xc0022eda
c000d2ba:	e8 8b 23 00 00       	call   c000f64a <KePanic(char const*)>
c000d2bf:	83 c4 10             	add    esp,0x10
c000d2c2:	b8 02 00 00 00       	mov    eax,0x2
c000d2c7:	e9 bc 00 00 00       	jmp    c000d388 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d2cc:	83 ff 18             	cmp    edi,0x18
c000d2cf:	75 1a                	jne    c000d2eb <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c000d2d1:	83 ec 0c             	sub    esp,0xc
c000d2d4:	68 ef 2e 02 c0       	push   0xc0022eef
c000d2d9:	e8 6c 23 00 00       	call   c000f64a <KePanic(char const*)>
c000d2de:	83 c4 10             	add    esp,0x10
c000d2e1:	b8 01 00 00 00       	mov    eax,0x1
c000d2e6:	e9 9d 00 00 00       	jmp    c000d388 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d2eb:	47                   	inc    edi
c000d2ec:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d2f1:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c000d2f5:	74 02                	je     c000d2f9 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c000d2f7:	89 ee                	mov    esi,ebp
c000d2f9:	83 ec 0c             	sub    esp,0xc
c000d2fc:	53                   	push   ebx
c000d2fd:	e8 6e 32 ff ff       	call   c0000570 <strlen>
c000d302:	83 c4 10             	add    esp,0x10
c000d305:	85 c0                	test   eax,eax
c000d307:	74 06                	je     c000d30f <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c000d309:	46                   	inc    esi
c000d30a:	e9 40 ff ff ff       	jmp    c000d24f <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c000d30f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d317:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d31f:	31 f6                	xor    esi,esi
c000d321:	50                   	push   eax
c000d322:	31 ff                	xor    edi,edi
c000d324:	6a 12                	push   0x12
c000d326:	68 ee 00 00 00       	push   0xee
c000d32b:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c000d332:	e8 b9 31 ff ff       	call   c00004f0 <memset>
c000d337:	83 c4 10             	add    esp,0x10
c000d33a:	83 fe 17             	cmp    esi,0x17
c000d33d:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c000d341:	7e 26                	jle    c000d369 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c000d343:	8d 44 24 0f          	lea    eax,[esp+0xf]
c000d347:	50                   	push   eax
c000d348:	6a 08                	push   0x8
c000d34a:	55                   	push   ebp
c000d34b:	53                   	push   ebx
c000d34c:	e8 2e fd ff ff       	call   c000d07f <CmGetShift(unsigned int*, int*, int, bool*)>
c000d351:	83 c4 10             	add    esp,0x10
c000d354:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000d359:	74 26                	je     c000d381 <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c000d35b:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c000d362:	4e                   	dec    esi
c000d363:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c000d366:	47                   	inc    edi
c000d367:	eb 1c                	jmp    c000d385 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d369:	6a 06                	push   0x6
c000d36b:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c000d370:	50                   	push   eax
c000d371:	55                   	push   ebp
c000d372:	53                   	push   ebx
c000d373:	e8 d7 fc ff ff       	call   c000d04f <CmAddShift(unsigned int*, int*, unsigned char, int)>
c000d378:	83 c4 10             	add    esp,0x10
c000d37b:	84 c0                	test   al,al
c000d37d:	75 06                	jne    c000d385 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c000d37f:	eb c2                	jmp    c000d343 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c000d381:	31 c0                	xor    eax,eax
c000d383:	eb 03                	jmp    c000d388 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c000d385:	46                   	inc    esi
c000d386:	eb b2                	jmp    c000d33a <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c000d388:	83 c4 6c             	add    esp,0x6c
c000d38b:	5b                   	pop    ebx
c000d38c:	5e                   	pop    esi
c000d38d:	5f                   	pop    edi
c000d38e:	5d                   	pop    ebp
c000d38f:	c3                   	ret    

c000d390 <CmCreateString(Reghive_Tag*, int, char const*)>:
c000d390:	53                   	push   ebx
c000d391:	83 ec 3c             	sub    esp,0x3c
c000d394:	6a 2b                	push   0x2b
c000d396:	6a 00                	push   0x0
c000d398:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d39c:	53                   	push   ebx
c000d39d:	e8 4e 31 ff ff       	call   c00004f0 <memset>
c000d3a2:	58                   	pop    eax
c000d3a3:	5a                   	pop    edx
c000d3a4:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d3a8:	50                   	push   eax
c000d3a9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d3ad:	e8 40 fe ff ff       	call   c000d1f2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d3b2:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c000d3b7:	83 c4 0c             	add    esp,0xc
c000d3ba:	6a 15                	push   0x15
c000d3bc:	6a 00                	push   0x0
c000d3be:	8d 44 24 27          	lea    eax,[esp+0x27]
c000d3c2:	50                   	push   eax
c000d3c3:	e8 28 31 ff ff       	call   c00004f0 <memset>
c000d3c8:	53                   	push   ebx
c000d3c9:	6a 00                	push   0x0
c000d3cb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d3cf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d3d3:	e8 e6 f9 ff ff       	call   c000cdbe <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d3d8:	83 c4 58             	add    esp,0x58
c000d3db:	5b                   	pop    ebx
c000d3dc:	c3                   	ret    

c000d3dd <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c000d3dd:	56                   	push   esi
c000d3de:	53                   	push   ebx
c000d3df:	83 ec 48             	sub    esp,0x48
c000d3e2:	6a 12                	push   0x12
c000d3e4:	68 ff 00 00 00       	push   0xff
c000d3e9:	8d 74 24 0f          	lea    esi,[esp+0xf]
c000d3ed:	56                   	push   esi
c000d3ee:	e8 fd 30 ff ff       	call   c00004f0 <memset>
c000d3f3:	5a                   	pop    edx
c000d3f4:	59                   	pop    ecx
c000d3f5:	56                   	push   esi
c000d3f6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d3fa:	e8 f3 fd ff ff       	call   c000d1f2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d3ff:	83 c4 10             	add    esp,0x10
c000d402:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d406:	85 db                	test   ebx,ebx
c000d408:	74 42                	je     c000d44c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c000d40a:	50                   	push   eax
c000d40b:	8d 44 24 19          	lea    eax,[esp+0x19]
c000d40f:	50                   	push   eax
c000d410:	53                   	push   ebx
c000d411:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d415:	e8 fa f6 ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d41a:	83 c4 0c             	add    esp,0xc
c000d41d:	6a 12                	push   0x12
c000d41f:	8d 44 24 21          	lea    eax,[esp+0x21]
c000d423:	50                   	push   eax
c000d424:	56                   	push   esi
c000d425:	e8 56 2f ff ff       	call   c0000380 <memcmp>
c000d42a:	83 c4 10             	add    esp,0x10
c000d42d:	85 c0                	test   eax,eax
c000d42f:	74 1e                	je     c000d44f <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c000d431:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c000d436:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c000d43b:	c1 e3 08             	shl    ebx,0x8
c000d43e:	09 d8                	or     eax,ebx
c000d440:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c000d445:	c1 e3 10             	shl    ebx,0x10
c000d448:	09 c3                	or     ebx,eax
c000d44a:	eb ba                	jmp    c000d406 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c000d44c:	83 cb ff             	or     ebx,0xffffffff
c000d44f:	89 d8                	mov    eax,ebx
c000d451:	83 c4 44             	add    esp,0x44
c000d454:	5b                   	pop    ebx
c000d455:	5e                   	pop    esi
c000d456:	c3                   	ret    

c000d457 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c000d457:	57                   	push   edi
c000d458:	56                   	push   esi
c000d459:	53                   	push   ebx
c000d45a:	83 ec 34             	sub    esp,0x34
c000d45d:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c000d461:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c000d465:	6a 2b                	push   0x2b
c000d467:	6a 00                	push   0x0
c000d469:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c000d46d:	53                   	push   ebx
c000d46e:	e8 7d 30 ff ff       	call   c00004f0 <memset>
c000d473:	58                   	pop    eax
c000d474:	5a                   	pop    edx
c000d475:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d479:	50                   	push   eax
c000d47a:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000d47e:	e8 6f fd ff ff       	call   c000d1f2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d483:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000d487:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c000d48b:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c000d48f:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c000d493:	53                   	push   ebx
c000d494:	6a 00                	push   0x0
c000d496:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d49a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000d49e:	e8 1b f9 ff ff       	call   c000cdbe <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d4a3:	83 c4 50             	add    esp,0x50
c000d4a6:	5b                   	pop    ebx
c000d4a7:	5e                   	pop    esi
c000d4a8:	5f                   	pop    edi
c000d4a9:	c3                   	ret    

c000d4aa <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c000d4aa:	55                   	push   ebp
c000d4ab:	57                   	push   edi
c000d4ac:	56                   	push   esi
c000d4ad:	53                   	push   ebx
c000d4ae:	83 ec 40             	sub    esp,0x40
c000d4b1:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c000d4b5:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c000d4b9:	6a 2b                	push   0x2b
c000d4bb:	6a 00                	push   0x0
c000d4bd:	8d 74 24 11          	lea    esi,[esp+0x11]
c000d4c1:	56                   	push   esi
c000d4c2:	e8 29 30 ff ff       	call   c00004f0 <memset>
c000d4c7:	5f                   	pop    edi
c000d4c8:	89 ef                	mov    edi,ebp
c000d4ca:	58                   	pop    eax
c000d4cb:	8d 44 24 11          	lea    eax,[esp+0x11]
c000d4cf:	50                   	push   eax
c000d4d0:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000d4d4:	e8 19 fd ff ff       	call   c000d1f2 <CmConvertToInternalFilename(char const*, unsigned char*)>
c000d4d9:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c000d4de:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c000d4e3:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c000d4e8:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c000d4ed:	83 c4 10             	add    esp,0x10
c000d4f0:	85 ed                	test   ebp,ebp
c000d4f2:	74 14                	je     c000d508 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d4f4:	51                   	push   ecx
c000d4f5:	51                   	push   ecx
c000d4f6:	57                   	push   edi
c000d4f7:	53                   	push   ebx
c000d4f8:	e8 09 f7 ff ff       	call   c000cc06 <CmGetNext(Reghive_Tag*, int)>
c000d4fd:	83 c4 10             	add    esp,0x10
c000d500:	85 c0                	test   eax,eax
c000d502:	74 04                	je     c000d508 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c000d504:	89 c7                	mov    edi,eax
c000d506:	eb e8                	jmp    c000d4f0 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c000d508:	56                   	push   esi
c000d509:	6a 00                	push   0x0
c000d50b:	57                   	push   edi
c000d50c:	53                   	push   ebx
c000d50d:	e8 ac f8 ff ff       	call   c000cdbe <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c000d512:	83 c4 0c             	add    esp,0xc
c000d515:	89 c7                	mov    edi,eax
c000d517:	56                   	push   esi
c000d518:	50                   	push   eax
c000d519:	53                   	push   ebx
c000d51a:	e8 f5 f5 ff ff       	call   c000cb14 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c000d51f:	58                   	pop    eax
c000d520:	5a                   	pop    edx
c000d521:	6a 6c                	push   0x6c
c000d523:	6a 00                	push   0x0
c000d525:	6a 00                	push   0x0
c000d527:	68 00 2f 02 c0       	push   0xc0022f00
c000d52c:	57                   	push   edi
c000d52d:	53                   	push   ebx
c000d52e:	e8 24 ff ff ff       	call   c000d457 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c000d533:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c000d537:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c000d53b:	c1 e8 10             	shr    eax,0x10
c000d53e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c000d542:	83 c4 1c             	add    esp,0x1c
c000d545:	56                   	push   esi
c000d546:	57                   	push   edi
c000d547:	53                   	push   ebx
c000d548:	e8 eb f6 ff ff       	call   c000cc38 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c000d54d:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c000d552:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000d557:	c1 e0 08             	shl    eax,0x8
c000d55a:	09 c2                	or     edx,eax
c000d55c:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c000d561:	83 c4 4c             	add    esp,0x4c
c000d564:	c1 e0 10             	shl    eax,0x10
c000d567:	5b                   	pop    ebx
c000d568:	09 d0                	or     eax,edx
c000d56a:	5e                   	pop    esi
c000d56b:	5f                   	pop    edi
c000d56c:	5d                   	pop    ebp
c000d56d:	c3                   	ret    

c000d56e <zStrtok(char*, char const*)>:
c000d56e:	55                   	push   ebp
c000d56f:	57                   	push   edi
c000d570:	56                   	push   esi
c000d571:	53                   	push   ebx
c000d572:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000d576:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000d57a:	85 db                	test   ebx,ebx
c000d57c:	74 2f                	je     c000d5ad <zStrtok(char*, char const*)+0x3f>
c000d57e:	85 c0                	test   eax,eax
c000d580:	75 09                	jne    c000d58b <zStrtok(char*, char const*)+0x1d>
c000d582:	a1 60 ad 02 c0       	mov    eax,ds:0xc002ad60
c000d587:	85 c0                	test   eax,eax
c000d589:	74 50                	je     c000d5db <zStrtok(char*, char const*)+0x6d>
c000d58b:	31 c9                	xor    ecx,ecx
c000d58d:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c000d591:	74 03                	je     c000d596 <zStrtok(char*, char const*)+0x28>
c000d593:	41                   	inc    ecx
c000d594:	eb f7                	jmp    c000d58d <zStrtok(char*, char const*)+0x1f>
c000d596:	31 d2                	xor    edx,edx
c000d598:	39 ca                	cmp    edx,ecx
c000d59a:	74 15                	je     c000d5b1 <zStrtok(char*, char const*)+0x43>
c000d59c:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c000d5a0:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c000d5a3:	8d 3c 10             	lea    edi,[eax+edx*1]
c000d5a6:	39 ee                	cmp    esi,ebp
c000d5a8:	74 13                	je     c000d5bd <zStrtok(char*, char const*)+0x4f>
c000d5aa:	42                   	inc    edx
c000d5ab:	eb eb                	jmp    c000d598 <zStrtok(char*, char const*)+0x2a>
c000d5ad:	31 c0                	xor    eax,eax
c000d5af:	eb 2a                	jmp    c000d5db <zStrtok(char*, char const*)+0x6d>
c000d5b1:	c7 05 60 ad 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ad60,0x0
c000d5bb:	eb 1e                	jmp    c000d5db <zStrtok(char*, char const*)+0x6d>
c000d5bd:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c000d5c0:	39 ce                	cmp    esi,ecx
c000d5c2:	75 0a                	jne    c000d5ce <zStrtok(char*, char const*)+0x60>
c000d5c4:	40                   	inc    eax
c000d5c5:	a3 60 ad 02 c0       	mov    ds:0xc002ad60,eax
c000d5ca:	89 d8                	mov    eax,ebx
c000d5cc:	eb 0d                	jmp    c000d5db <zStrtok(char*, char const*)+0x6d>
c000d5ce:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c000d5d2:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000d5d5:	89 15 60 ad 02 c0    	mov    DWORD PTR ds:0xc002ad60,edx
c000d5db:	5b                   	pop    ebx
c000d5dc:	5e                   	pop    esi
c000d5dd:	5f                   	pop    edi
c000d5de:	5d                   	pop    ebp
c000d5df:	c3                   	ret    

c000d5e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c000d5e0:	57                   	push   edi
c000d5e1:	56                   	push   esi
c000d5e2:	53                   	push   ebx
c000d5e3:	81 ec 08 01 00 00    	sub    esp,0x108
c000d5e9:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c000d5f0:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c000d5f7:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000d5fb:	53                   	push   ebx
c000d5fc:	e8 3f 30 ff ff       	call   c0000640 <strcpy>
c000d601:	59                   	pop    ecx
c000d602:	5e                   	pop    esi
c000d603:	68 a2 40 02 c0       	push   0xc00240a2
c000d608:	53                   	push   ebx
c000d609:	bb 01 00 00 00       	mov    ebx,0x1
c000d60e:	e8 5b ff ff ff       	call   c000d56e <zStrtok(char*, char const*)>
c000d613:	83 c4 10             	add    esp,0x10
c000d616:	85 c0                	test   eax,eax
c000d618:	74 3b                	je     c000d655 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d61a:	52                   	push   edx
c000d61b:	50                   	push   eax
c000d61c:	6a 01                	push   0x1
c000d61e:	57                   	push   edi
c000d61f:	e8 b9 fd ff ff       	call   c000d3dd <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c000d624:	59                   	pop    ecx
c000d625:	89 c3                	mov    ebx,eax
c000d627:	5e                   	pop    esi
c000d628:	68 a2 40 02 c0       	push   0xc00240a2
c000d62d:	6a 00                	push   0x0
c000d62f:	e8 3a ff ff ff       	call   c000d56e <zStrtok(char*, char const*)>
c000d634:	83 c4 10             	add    esp,0x10
c000d637:	89 c6                	mov    esi,eax
c000d639:	85 c0                	test   eax,eax
c000d63b:	74 18                	je     c000d655 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d63d:	52                   	push   edx
c000d63e:	52                   	push   edx
c000d63f:	53                   	push   ebx
c000d640:	57                   	push   edi
c000d641:	e8 81 f5 ff ff       	call   c000cbc7 <CmEnterDirectory(Reghive_Tag*, int)>
c000d646:	83 c4 10             	add    esp,0x10
c000d649:	89 c3                	mov    ebx,eax
c000d64b:	83 f8 ff             	cmp    eax,0xffffffff
c000d64e:	74 05                	je     c000d655 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c000d650:	50                   	push   eax
c000d651:	56                   	push   esi
c000d652:	53                   	push   ebx
c000d653:	eb c9                	jmp    c000d61e <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c000d655:	81 c4 00 01 00 00    	add    esp,0x100
c000d65b:	89 d8                	mov    eax,ebx
c000d65d:	5b                   	pop    ebx
c000d65e:	5e                   	pop    esi
c000d65f:	5f                   	pop    edi
c000d660:	c3                   	ret    

c000d661 <CmDisplayTree(Reghive_Tag*, int, int)>:
c000d661:	55                   	push   ebp
c000d662:	57                   	push   edi
c000d663:	56                   	push   esi
c000d664:	53                   	push   ebx
c000d665:	83 ec 5c             	sub    esp,0x5c
c000d668:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c000d66c:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000d670:	85 db                	test   ebx,ebx
c000d672:	0f 8e 84 00 00 00    	jle    c000d6fc <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c000d678:	31 ed                	xor    ebp,ebp
c000d67a:	57                   	push   edi
c000d67b:	6a 32                	push   0x32
c000d67d:	6a 00                	push   0x0
c000d67f:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c000d683:	57                   	push   edi
c000d684:	e8 67 2e ff ff       	call   c00004f0 <memset>
c000d689:	83 c4 0c             	add    esp,0xc
c000d68c:	57                   	push   edi
c000d68d:	53                   	push   ebx
c000d68e:	56                   	push   esi
c000d68f:	e8 30 fb ff ff       	call   c000d1c4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c000d694:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d698:	83 c4 10             	add    esp,0x10
c000d69b:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c000d69f:	7d 13                	jge    c000d6b4 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c000d6a1:	83 ec 0c             	sub    esp,0xc
c000d6a4:	45                   	inc    ebp
c000d6a5:	68 94 45 02 c0       	push   0xc0024594
c000d6aa:	e8 b5 98 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d6af:	83 c4 10             	add    esp,0x10
c000d6b2:	eb e7                	jmp    c000d69b <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c000d6b4:	51                   	push   ecx
c000d6b5:	57                   	push   edi
c000d6b6:	53                   	push   ebx
c000d6b7:	68 06 2f 02 c0       	push   0xc0022f06
c000d6bc:	e8 a3 98 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000d6c1:	83 c4 10             	add    esp,0x10
c000d6c4:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c000d6c9:	75 1e                	jne    c000d6e9 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c000d6cb:	52                   	push   edx
c000d6cc:	52                   	push   edx
c000d6cd:	53                   	push   ebx
c000d6ce:	56                   	push   esi
c000d6cf:	e8 f3 f4 ff ff       	call   c000cbc7 <CmEnterDirectory(Reghive_Tag*, int)>
c000d6d4:	83 c4 0c             	add    esp,0xc
c000d6d7:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000d6db:	8d 51 04             	lea    edx,[ecx+0x4]
c000d6de:	52                   	push   edx
c000d6df:	50                   	push   eax
c000d6e0:	56                   	push   esi
c000d6e1:	e8 7b ff ff ff       	call   c000d661 <CmDisplayTree(Reghive_Tag*, int, int)>
c000d6e6:	83 c4 10             	add    esp,0x10
c000d6e9:	50                   	push   eax
c000d6ea:	50                   	push   eax
c000d6eb:	53                   	push   ebx
c000d6ec:	56                   	push   esi
c000d6ed:	e8 14 f5 ff ff       	call   c000cc06 <CmGetNext(Reghive_Tag*, int)>
c000d6f2:	83 c4 10             	add    esp,0x10
c000d6f5:	89 c3                	mov    ebx,eax
c000d6f7:	e9 74 ff ff ff       	jmp    c000d670 <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c000d6fc:	83 c4 5c             	add    esp,0x5c
c000d6ff:	5b                   	pop    ebx
c000d700:	5e                   	pop    esi
c000d701:	5f                   	pop    edi
c000d702:	5d                   	pop    ebp
c000d703:	c3                   	ret    

c000d704 <CmSplitFinalSlashInPlace(char*)>:
c000d704:	53                   	push   ebx
c000d705:	83 ec 14             	sub    esp,0x14
c000d708:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000d70c:	53                   	push   ebx
c000d70d:	e8 5e 2e ff ff       	call   c0000570 <strlen>
c000d712:	83 c4 10             	add    esp,0x10
c000d715:	48                   	dec    eax
c000d716:	85 c0                	test   eax,eax
c000d718:	74 15                	je     c000d72f <CmSplitFinalSlashInPlace(char*)+0x2b>
c000d71a:	8d 14 03             	lea    edx,[ebx+eax*1]
c000d71d:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000d721:	75 09                	jne    c000d72c <CmSplitFinalSlashInPlace(char*)+0x28>
c000d723:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000d726:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c000d72a:	eb 05                	jmp    c000d731 <CmSplitFinalSlashInPlace(char*)+0x2d>
c000d72c:	48                   	dec    eax
c000d72d:	eb e7                	jmp    c000d716 <CmSplitFinalSlashInPlace(char*)+0x12>
c000d72f:	31 c0                	xor    eax,eax
c000d731:	83 c4 08             	add    esp,0x8
c000d734:	5b                   	pop    ebx
c000d735:	c3                   	ret    
c000d736:	66 90                	xchg   ax,ax

c000d738 <Krnl::handlePowerButton()>:
c000d738:	83 ec 0c             	sub    esp,0xc
c000d73b:	e8 45 28 00 00       	call   c000ff85 <KeHandlePowerButton()>
c000d740:	90                   	nop
c000d741:	83 c4 0c             	add    esp,0xc
c000d744:	c3                   	ret    
c000d745:	8d 76 00             	lea    esi,[esi+0x0]

c000d748 <Krnl::handleSleepButton()>:
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	e8 4d 28 00 00       	call   c000ff9d <KeHandleSleepButton()>
c000d750:	90                   	nop
c000d751:	83 c4 0c             	add    esp,0xc
c000d754:	c3                   	ret    
c000d755:	90                   	nop

c000d756 <Computer::close(int, int, void*)>:
c000d756:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d75b:	c3                   	ret    

c000d75c <Computer::open(int, int, void*)>:
c000d75c:	56                   	push   esi
c000d75d:	53                   	push   ebx
c000d75e:	83 ec 04             	sub    esp,0x4
c000d761:	f6 05 c4 cd 02 c0 04 	test   BYTE PTR ds:0xc002cdc4,0x4
c000d768:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d76c:	0f 94 05 20 59 02 c0 	sete   BYTE PTR ds:0xc0025920
c000d773:	39 1d 70 ad 02 c0    	cmp    DWORD PTR ds:0xc002ad70,ebx
c000d779:	74 10                	je     c000d78b <Computer::open(int, int, void*)+0x2f>
c000d77b:	83 ec 0c             	sub    esp,0xc
c000d77e:	68 10 2f 02 c0       	push   0xc0022f10
c000d783:	e8 c2 1e 00 00       	call   c000f64a <KePanic(char const*)>
c000d788:	83 c4 10             	add    esp,0x10
c000d78b:	83 ec 0c             	sub    esp,0xc
c000d78e:	68 c8 2f 02 c0       	push   0xc0022fc8
c000d793:	e8 33 f1 ff ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c000d798:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c000d79f:	e8 5f 1b 00 00       	call   c000f303 <malloc>
c000d7a4:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7a7:	89 c6                	mov    esi,eax
c000d7a9:	e8 7e e6 ff ff       	call   c000be2c <ACPI::ACPI()>
c000d7ae:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c000d7b4:	58                   	pop    eax
c000d7b5:	5a                   	pop    edx
c000d7b6:	56                   	push   esi
c000d7b7:	53                   	push   ebx
c000d7b8:	e8 d5 b8 ff ff       	call   c0009092 <Device::addChild(Device*)>
c000d7bd:	c7 04 24 e0 2f 02 c0 	mov    DWORD PTR [esp],0xc0022fe0
c000d7c4:	e8 02 f1 ff ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c000d7c9:	e8 29 b2 00 00       	call   c00189f7 <HalEnableNMI()>
c000d7ce:	e8 59 a4 00 00       	call   c0017c2c <HalDetectFeatures()>
c000d7d3:	c7 04 24 78 11 00 00 	mov    DWORD PTR [esp],0x1178
c000d7da:	e8 24 1b 00 00       	call   c000f303 <malloc>
c000d7df:	89 04 24             	mov    DWORD PTR [esp],eax
c000d7e2:	89 c6                	mov    esi,eax
c000d7e4:	e8 49 bd 00 00       	call   c0019532 <CPU::CPU()>
c000d7e9:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000d7ef:	59                   	pop    ecx
c000d7f0:	58                   	pop    eax
c000d7f1:	56                   	push   esi
c000d7f2:	53                   	push   ebx
c000d7f3:	e8 9a b8 ff ff       	call   c0009092 <Device::addChild(Device*)>
c000d7f8:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000d7fc:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d802:	8b 10                	mov    edx,DWORD PTR [eax]
c000d804:	51                   	push   ecx
c000d805:	6a 00                	push   0x0
c000d807:	6a 00                	push   0x0
c000d809:	50                   	push   eax
c000d80a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d80d:	83 c4 14             	add    esp,0x14
c000d810:	68 3c 2f 02 c0       	push   0xc0022f3c
c000d815:	e8 b1 f0 ff ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c000d81a:	e8 6e b9 00 00       	call   c001918d <HalInitialiseCoprocessor()>
c000d81f:	c7 04 24 fa 2f 02 c0 	mov    DWORD PTR [esp],0xc0022ffa
c000d826:	e8 a0 f0 ff ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c000d82b:	c7 04 24 42 d8 00 c0 	mov    DWORD PTR [esp],0xc000d842
c000d832:	e8 29 89 00 00       	call   c0016160 <setupMultitasking(void (*)())>
c000d837:	83 c4 14             	add    esp,0x14
c000d83a:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d83f:	5b                   	pop    ebx
c000d840:	5e                   	pop    esi
c000d841:	c3                   	ret    

c000d842 <KeFirstTask()>:
c000d842:	53                   	push   ebx
c000d843:	83 ec 14             	sub    esp,0x14
c000d846:	fb                   	sti    
c000d847:	68 15 30 02 c0       	push   0xc0023015
c000d84c:	e8 7a f0 ff ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c000d851:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c000d858:	e8 a6 1a 00 00       	call   c000f303 <malloc>
c000d85d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000d864:	89 c3                	mov    ebx,eax
c000d866:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c000d86b:	50                   	push   eax
c000d86c:	68 2e 30 02 c0       	push   0xc002302e
c000d871:	6a 01                	push   0x1
c000d873:	53                   	push   ebx
c000d874:	e8 73 85 00 00       	call   c0015dec <Process::Process(bool, char const*, Process*, char**)>
c000d879:	83 c4 20             	add    esp,0x20
c000d87c:	68 ff 00 00 00       	push   0xff
c000d881:	6a 00                	push   0x0
c000d883:	68 41 e5 00 c0       	push   0xc000e541
c000d888:	53                   	push   ebx
c000d889:	e8 9e 87 00 00       	call   c001602c <Process::createThread(void (*)(void*), void*, int)>
c000d88e:	8b 15 f8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6f8
c000d894:	6a 7a                	push   0x7a
c000d896:	6a 00                	push   0x0
c000d898:	68 1c 69 01 c0       	push   0xc001691c
c000d89d:	52                   	push   edx
c000d89e:	e8 89 87 00 00       	call   c001602c <Process::createThread(void (*)(void*), void*, int)>
c000d8a3:	83 c4 14             	add    esp,0x14
c000d8a6:	a3 b0 d6 02 c0       	mov    ds:0xc002d6b0,eax
c000d8ab:	68 60 2f 02 c0       	push   0xc0022f60
c000d8b0:	e8 16 f0 ff ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c000d8b5:	c6 05 75 ad 02 c0 01 	mov    BYTE PTR ds:0xc002ad75,0x1
c000d8bc:	e8 e8 27 00 00       	call   c00100a9 <KeInitRand()>
c000d8c1:	e8 24 94 00 00       	call   c0016cea <Vm::initialise8086()>
c000d8c6:	e8 25 a5 ff ff       	call   c0007df0 <Fs::initVFS()>
c000d8cb:	c7 04 24 d4 2c 02 c0 	mov    DWORD PTR [esp],0xc0022cd4
c000d8d2:	e8 f4 ef ff ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c000d8d7:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d8dc:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d8e2:	8b 10                	mov    edx,DWORD PTR [eax]
c000d8e4:	6a 00                	push   0x0
c000d8e6:	6a 00                	push   0x0
c000d8e8:	6a 00                	push   0x0
c000d8ea:	50                   	push   eax
c000d8eb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000d8ee:	83 c4 14             	add    esp,0x14
c000d8f1:	68 60 2f 02 c0       	push   0xc0022f60
c000d8f6:	e8 d0 ef ff ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c000d8fb:	e8 d5 9c ff ff       	call   c00075d5 <KeInitialiseSymlinks()>
c000d900:	e8 f5 05 00 00       	call   c000defa <KeLoadSystemEnv()>
c000d905:	e8 ab 26 00 00       	call   c000ffb5 <KeSetupPowerManager()>
c000d90a:	c7 04 24 84 2f 02 c0 	mov    DWORD PTR [esp],0xc0022f84
c000d911:	e8 b5 ef ff ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c000d916:	59                   	pop    ecx
c000d917:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d91c:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c000d922:	53                   	push   ebx
c000d923:	e8 86 b8 ff ff       	call   c00091ae <Device::loadDriversForAll()>
c000d928:	c7 04 24 3b 30 02 c0 	mov    DWORD PTR [esp],0xc002303b
c000d92f:	e8 97 ef ff ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c000d934:	58                   	pop    eax
c000d935:	8b 1d 70 ad 02 c0    	mov    ebx,DWORD PTR ds:0xc002ad70
c000d93b:	5a                   	pop    edx
c000d93c:	6a 01                	push   0x1
c000d93e:	68 4c 30 02 c0       	push   0xc002304c
c000d943:	e8 1d 7e 00 00       	call   c0015765 <Thr::loadDLL(char const*, bool)>
c000d948:	59                   	pop    ecx
c000d949:	5a                   	pop    edx
c000d94a:	53                   	push   ebx
c000d94b:	50                   	push   eax
c000d94c:	e8 66 80 00 00       	call   c00159b7 <Thr::executeDLL(unsigned long, void*)>
c000d951:	83 c4 10             	add    esp,0x10
c000d954:	83 ec 0c             	sub    esp,0xc
c000d957:	6a 02                	push   0x2
c000d959:	e8 e6 89 00 00       	call   c0016344 <blockTask(TaskState)>
c000d95e:	83 c4 10             	add    esp,0x10
c000d961:	eb f1                	jmp    c000d954 <KeFirstTask()+0x112>
c000d963:	90                   	nop

c000d964 <Computer::Computer()>:
c000d964:	83 ec 0c             	sub    esp,0xc
c000d967:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d96b:	83 ec 08             	sub    esp,0x8
c000d96e:	68 68 30 02 c0       	push   0xc0023068
c000d973:	50                   	push   eax
c000d974:	e8 7b b8 ff ff       	call   c00091f4 <Device::Device(char const*)>
c000d979:	83 c4 10             	add    esp,0x10
c000d97c:	ba 7c 30 02 c0       	mov    edx,0xc002307c
c000d981:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d985:	89 10                	mov    DWORD PTR [eax],edx
c000d987:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d98b:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000d995:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d999:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000d9a3:	90                   	nop
c000d9a4:	83 c4 0c             	add    esp,0xc
c000d9a7:	c3                   	ret    

c000d9a8 <KePrepareShutdown()>:
c000d9a8:	83 ec 0c             	sub    esp,0xc
c000d9ab:	e8 89 ee ff ff       	call   c000c839 <KeExecuteAtexit()>
c000d9b0:	83 ec 0c             	sub    esp,0xc
c000d9b3:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000d9b8:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c000d9be:	50                   	push   eax
c000d9bf:	e8 36 b9 ff ff       	call   c00092fa <Device::closeAll()>
c000d9c4:	83 c4 1c             	add    esp,0x1c
c000d9c7:	c3                   	ret    

c000d9c8 <KeShutdown()>:
c000d9c8:	83 ec 0c             	sub    esp,0xc
c000d9cb:	e8 d8 ff ff ff       	call   c000d9a8 <KePrepareShutdown()>
c000d9d0:	a1 6c ad 02 c0       	mov    eax,ds:0xc002ad6c
c000d9d5:	85 c0                	test   eax,eax
c000d9d7:	74 02                	je     c000d9db <KeShutdown()+0x13>
c000d9d9:	ff d0                	call   eax
c000d9db:	83 ec 0c             	sub    esp,0xc
c000d9de:	68 a4 2f 02 c0       	push   0xc0022fa4
c000d9e3:	e8 62 1c 00 00       	call   c000f64a <KePanic(char const*)>
c000d9e8:	83 c4 1c             	add    esp,0x1c
c000d9eb:	c3                   	ret    

c000d9ec <KeSleep()>:
c000d9ec:	a1 64 ad 02 c0       	mov    eax,ds:0xc002ad64
c000d9f1:	85 c0                	test   eax,eax
c000d9f3:	74 02                	je     c000d9f7 <KeSleep()+0xb>
c000d9f5:	ff e0                	jmp    eax
c000d9f7:	c3                   	ret    

c000d9f8 <KeRestart()>:
c000d9f8:	83 ec 0c             	sub    esp,0xc
c000d9fb:	e8 a8 ff ff ff       	call   c000d9a8 <KePrepareShutdown()>
c000da00:	a1 68 ad 02 c0       	mov    eax,ds:0xc002ad68
c000da05:	85 c0                	test   eax,eax
c000da07:	74 02                	je     c000da0b <KeRestart()+0x13>
c000da09:	ff d0                	call   eax
c000da0b:	e4 64                	in     al,0x64
c000da0d:	a8 02                	test   al,0x2
c000da0f:	75 fa                	jne    c000da0b <KeRestart()+0x13>
c000da11:	b0 fe                	mov    al,0xfe
c000da13:	e6 64                	out    0x64,al
c000da15:	83 c4 0c             	add    esp,0xc
c000da18:	c3                   	ret    

c000da19 <KeCalculateCRC32(unsigned char*, int)>:
c000da19:	53                   	push   ebx
c000da1a:	83 c8 ff             	or     eax,0xffffffff
c000da1d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000da21:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000da25:	01 cb                	add    ebx,ecx
c000da27:	39 d9                	cmp    ecx,ebx
c000da29:	74 15                	je     c000da40 <KeCalculateCRC32(unsigned char*, int)+0x27>
c000da2b:	41                   	inc    ecx
c000da2c:	8a 51 ff             	mov    dl,BYTE PTR [ecx-0x1]
c000da2f:	31 c2                	xor    edx,eax
c000da31:	c1 e8 08             	shr    eax,0x8
c000da34:	0f b6 d2             	movzx  edx,dl
c000da37:	33 04 95 40 53 02 c0 	xor    eax,DWORD PTR [edx*4-0x3ffdacc0]
c000da3e:	eb e7                	jmp    c000da27 <KeCalculateCRC32(unsigned char*, int)+0xe>
c000da40:	f7 d0                	not    eax
c000da42:	5b                   	pop    ebx
c000da43:	c3                   	ret    

c000da44 <EnvVarContainer::getEnv(char const*)>:
c000da44:	57                   	push   edi
c000da45:	56                   	push   esi
c000da46:	53                   	push   ebx
c000da47:	31 db                	xor    ebx,ebx
c000da49:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da4d:	39 1e                	cmp    DWORD PTR [esi],ebx
c000da4f:	7e 2b                	jle    c000da7c <EnvVarContainer::getEnv(char const*)+0x38>
c000da51:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000da58:	50                   	push   eax
c000da59:	50                   	push   eax
c000da5a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000da5d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000da60:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000da64:	e8 e7 2c ff ff       	call   c0000750 <strcmp>
c000da69:	83 c4 10             	add    esp,0x10
c000da6c:	85 c0                	test   eax,eax
c000da6e:	75 09                	jne    c000da79 <EnvVarContainer::getEnv(char const*)+0x35>
c000da70:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000da73:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000da77:	eb 05                	jmp    c000da7e <EnvVarContainer::getEnv(char const*)+0x3a>
c000da79:	43                   	inc    ebx
c000da7a:	eb d1                	jmp    c000da4d <EnvVarContainer::getEnv(char const*)+0x9>
c000da7c:	31 c0                	xor    eax,eax
c000da7e:	5b                   	pop    ebx
c000da7f:	5e                   	pop    esi
c000da80:	5f                   	pop    edi
c000da81:	c3                   	ret    

c000da82 <EnvVarContainer::setEnv(char const*, char const*)>:
c000da82:	55                   	push   ebp
c000da83:	57                   	push   edi
c000da84:	56                   	push   esi
c000da85:	53                   	push   ebx
c000da86:	83 ec 28             	sub    esp,0x28
c000da89:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000da8d:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000da91:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000da95:	56                   	push   esi
c000da96:	e8 d5 2a ff ff       	call   c0000570 <strlen>
c000da9b:	40                   	inc    eax
c000da9c:	89 04 24             	mov    DWORD PTR [esp],eax
c000da9f:	e8 5f 18 00 00       	call   c000f303 <malloc>
c000daa4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000daa7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000daab:	e8 c0 2a ff ff       	call   c0000570 <strlen>
c000dab0:	40                   	inc    eax
c000dab1:	89 04 24             	mov    DWORD PTR [esp],eax
c000dab4:	e8 4a 18 00 00       	call   c000f303 <malloc>
c000dab9:	89 34 24             	mov    DWORD PTR [esp],esi
c000dabc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dac0:	e8 ab 2a ff ff       	call   c0000570 <strlen>
c000dac5:	83 c4 0c             	add    esp,0xc
c000dac8:	40                   	inc    eax
c000dac9:	50                   	push   eax
c000daca:	6a 00                	push   0x0
c000dacc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dad0:	e8 1b 2a ff ff       	call   c00004f0 <memset>
c000dad5:	89 34 24             	mov    DWORD PTR [esp],esi
c000dad8:	e8 93 2a ff ff       	call   c0000570 <strlen>
c000dadd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000dae1:	8d 48 01             	lea    ecx,[eax+0x1]
c000dae4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dae6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dae9:	89 de                	mov    esi,ebx
c000daeb:	e8 80 2a ff ff       	call   c0000570 <strlen>
c000daf0:	83 c4 0c             	add    esp,0xc
c000daf3:	40                   	inc    eax
c000daf4:	50                   	push   eax
c000daf5:	6a 00                	push   0x0
c000daf7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dafb:	e8 f0 29 ff ff       	call   c00004f0 <memset>
c000db00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000db03:	e8 68 2a ff ff       	call   c0000570 <strlen>
c000db08:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000db0c:	8d 48 01             	lea    ecx,[eax+0x1]
c000db0f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db11:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000db14:	40                   	inc    eax
c000db15:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000db18:	c1 e0 03             	shl    eax,0x3
c000db1b:	5a                   	pop    edx
c000db1c:	59                   	pop    ecx
c000db1d:	50                   	push   eax
c000db1e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000db21:	e8 c9 17 00 00       	call   c000f2ef <realloc>
c000db26:	8d 74 24 18          	lea    esi,[esp+0x18]
c000db2a:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000db2d:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000db30:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000db34:	b9 08 00 00 00       	mov    ecx,0x8
c000db39:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000db3b:	83 c4 2c             	add    esp,0x2c
c000db3e:	5b                   	pop    ebx
c000db3f:	5e                   	pop    esi
c000db40:	5f                   	pop    edi
c000db41:	5d                   	pop    ebp
c000db42:	c3                   	ret    
c000db43:	90                   	nop

c000db44 <EnvVarContainer::deleteEnv(char const*)>:
c000db44:	c3                   	ret    
c000db45:	90                   	nop

c000db46 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000db46:	55                   	push   ebp
c000db47:	57                   	push   edi
c000db48:	56                   	push   esi
c000db49:	53                   	push   ebx
c000db4a:	81 ec 38 01 00 00    	sub    esp,0x138
c000db50:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000db57:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000db5e:	68 14 01 00 00       	push   0x114
c000db63:	e8 9b 17 00 00       	call   c000f303 <malloc>
c000db68:	83 c4 0c             	add    esp,0xc
c000db6b:	89 c3                	mov    ebx,eax
c000db6d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000db70:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000db77:	50                   	push   eax
c000db78:	e8 b5 a5 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c000db7d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000db80:	e8 8f a8 ff ff       	call   c0008414 <File::exists()>
c000db85:	83 c4 10             	add    esp,0x10
c000db88:	84 c0                	test   al,al
c000db8a:	75 31                	jne    c000dbbd <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000db8c:	50                   	push   eax
c000db8d:	50                   	push   eax
c000db8e:	6a 12                	push   0x12
c000db90:	53                   	push   ebx
c000db91:	e8 ba a5 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000db96:	8b 03                	mov    eax,DWORD PTR [ebx]
c000db98:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000db9b:	89 34 24             	mov    DWORD PTR [esp],esi
c000db9e:	e8 cd 29 ff ff       	call   c0000570 <strlen>
c000dba3:	5a                   	pop    edx
c000dba4:	31 d2                	xor    edx,edx
c000dba6:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000dbaa:	51                   	push   ecx
c000dbab:	56                   	push   esi
c000dbac:	52                   	push   edx
c000dbad:	50                   	push   eax
c000dbae:	53                   	push   ebx
c000dbaf:	ff d7                	call   edi
c000dbb1:	83 c4 14             	add    esp,0x14
c000dbb4:	53                   	push   ebx
c000dbb5:	e8 f4 a5 ff ff       	call   c00081ae <File::close()>
c000dbba:	83 c4 10             	add    esp,0x10
c000dbbd:	56                   	push   esi
c000dbbe:	31 f6                	xor    esi,esi
c000dbc0:	68 00 01 00 00       	push   0x100
c000dbc5:	6a 00                	push   0x0
c000dbc7:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dbcb:	50                   	push   eax
c000dbcc:	e8 1f 29 ff ff       	call   c00004f0 <memset>
c000dbd1:	5f                   	pop    edi
c000dbd2:	58                   	pop    eax
c000dbd3:	6a 01                	push   0x1
c000dbd5:	53                   	push   ebx
c000dbd6:	e8 75 a5 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c000dbdb:	83 c4 10             	add    esp,0x10
c000dbde:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dbe6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000dbee:	83 ec 0c             	sub    esp,0xc
c000dbf1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dbf3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000dbf7:	51                   	push   ecx
c000dbf8:	8d 54 24 23          	lea    edx,[esp+0x23]
c000dbfc:	52                   	push   edx
c000dbfd:	6a 00                	push   0x0
c000dbff:	6a 01                	push   0x1
c000dc01:	53                   	push   ebx
c000dc02:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000dc05:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c000dc0a:	83 c4 20             	add    esp,0x20
c000dc0d:	89 c2                	mov    edx,eax
c000dc0f:	85 c0                	test   eax,eax
c000dc11:	0f 84 36 01 00 00    	je     c000dd4d <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c000dc17:	83 f8 0d             	cmp    eax,0xd
c000dc1a:	0f 84 22 01 00 00    	je     c000dd42 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dc20:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000dc25:	0f 84 f0 00 00 00    	je     c000dd1b <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c000dc2b:	83 f8 0a             	cmp    eax,0xa
c000dc2e:	74 13                	je     c000dc43 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000dc30:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000dc35:	74 0c                	je     c000dc43 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c000dc37:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000dc3d:	0f 8e f6 00 00 00    	jle    c000dd39 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c000dc43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000dc47:	83 ec 0c             	sub    esp,0xc
c000dc4a:	8d 78 01             	lea    edi,[eax+0x1]
c000dc4d:	57                   	push   edi
c000dc4e:	e8 b0 16 00 00       	call   c000f303 <malloc>
c000dc53:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000dc57:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dc5b:	8d 56 04             	lea    edx,[esi+0x4]
c000dc5e:	89 14 24             	mov    DWORD PTR [esp],edx
c000dc61:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dc65:	e8 99 16 00 00       	call   c000f303 <malloc>
c000dc6a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000dc6e:	83 c4 0c             	add    esp,0xc
c000dc71:	57                   	push   edi
c000dc72:	6a 00                	push   0x0
c000dc74:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dc78:	e8 73 28 ff ff       	call   c00004f0 <memset>
c000dc7d:	8d 74 24 30          	lea    esi,[esp+0x30]
c000dc81:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000dc85:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000dc89:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dc8b:	83 c4 0c             	add    esp,0xc
c000dc8e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000dc92:	52                   	push   edx
c000dc93:	6a 00                	push   0x0
c000dc95:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000dc99:	e8 52 28 ff ff       	call   c00004f0 <memset>
c000dc9e:	8d 74 24 30          	lea    esi,[esp+0x30]
c000dca2:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000dca6:	89 34 24             	mov    DWORD PTR [esp],esi
c000dca9:	e8 c2 28 ff ff       	call   c0000570 <strlen>
c000dcae:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000dcb2:	89 c1                	mov    ecx,eax
c000dcb4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcb6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000dcb9:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000dcbc:	40                   	inc    eax
c000dcbd:	83 c4 10             	add    esp,0x10
c000dcc0:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000dcc3:	85 d2                	test   edx,edx
c000dcc5:	75 0c                	jne    c000dcd3 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c000dcc7:	83 ec 0c             	sub    esp,0xc
c000dcca:	6a 08                	push   0x8
c000dccc:	e8 32 16 00 00       	call   c000f303 <malloc>
c000dcd1:	eb 0c                	jmp    c000dcdf <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c000dcd3:	c1 e0 03             	shl    eax,0x3
c000dcd6:	51                   	push   ecx
c000dcd7:	51                   	push   ecx
c000dcd8:	50                   	push   eax
c000dcd9:	52                   	push   edx
c000dcda:	e8 10 16 00 00       	call   c000f2ef <realloc>
c000dcdf:	83 c4 10             	add    esp,0x10
c000dce2:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000dce5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000dce8:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000dceb:	8d 74 24 18          	lea    esi,[esp+0x18]
c000dcef:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000dcf3:	b9 08 00 00 00       	mov    ecx,0x8
c000dcf8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dcfa:	31 f6                	xor    esi,esi
c000dcfc:	50                   	push   eax
c000dcfd:	68 00 01 00 00       	push   0x100
c000dd02:	6a 00                	push   0x0
c000dd04:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000dd08:	50                   	push   eax
c000dd09:	e8 e2 27 ff ff       	call   c00004f0 <memset>
c000dd0e:	83 c4 10             	add    esp,0x10
c000dd11:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd19:	eb 27                	jmp    c000dd42 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dd1b:	83 f8 3d             	cmp    eax,0x3d
c000dd1e:	74 1e                	je     c000dd3e <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c000dd20:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000dd26:	7f 07                	jg     c000dd2f <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c000dd28:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c000dd2c:	46                   	inc    esi
c000dd2d:	eb 13                	jmp    c000dd42 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dd2f:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c000dd37:	eb 09                	jmp    c000dd42 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c000dd39:	83 f8 3d             	cmp    eax,0x3d
c000dd3c:	75 ea                	jne    c000dd28 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c000dd3e:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000dd42:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000dd47:	0f 85 99 fe ff ff    	jne    c000dbe6 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000dd4d:	83 ec 0c             	sub    esp,0xc
c000dd50:	53                   	push   ebx
c000dd51:	e8 58 a4 ff ff       	call   c00081ae <File::close()>
c000dd56:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd58:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dd5b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000dd5e:	81 c4 3c 01 00 00    	add    esp,0x13c
c000dd64:	5b                   	pop    ebx
c000dd65:	5e                   	pop    esi
c000dd66:	5f                   	pop    edi
c000dd67:	5d                   	pop    ebp
c000dd68:	c3                   	ret    
c000dd69:	90                   	nop

c000dd6a <EnvVarContainer::__loadSystem()>:
c000dd6a:	83 ec 10             	sub    esp,0x10
c000dd6d:	68 40 57 02 c0       	push   0xc0025740
c000dd72:	68 a0 30 02 c0       	push   0xc00230a0
c000dd77:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dd7b:	e8 c6 fd ff ff       	call   c000db46 <EnvVarContainer::loadFrom(char const*, char const*)>
c000dd80:	83 c4 1c             	add    esp,0x1c
c000dd83:	c3                   	ret    

c000dd84 <EnvVarContainer::__loadUser()>:
c000dd84:	c3                   	ret    
c000dd85:	90                   	nop

c000dd86 <EnvVarContainer::EnvVarContainer(Process*)>:
c000dd86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd8a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000dd90:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd94:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dd98:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000dd9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dd9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000dda6:	90                   	nop
c000dda7:	c3                   	ret    

c000dda8 <EnvVarContainer::~EnvVarContainer()>:
c000dda8:	83 ec 0c             	sub    esp,0xc
c000ddab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddaf:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddb2:	85 c0                	test   eax,eax
c000ddb4:	74 1d                	je     c000ddd3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ddb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddba:	8b 00                	mov    eax,DWORD PTR [eax]
c000ddbc:	85 c0                	test   eax,eax
c000ddbe:	74 13                	je     c000ddd3 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000ddc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ddc4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddc7:	83 ec 0c             	sub    esp,0xc
c000ddca:	50                   	push   eax
c000ddcb:	e8 43 15 00 00       	call   c000f313 <free>
c000ddd0:	83 c4 10             	add    esp,0x10
c000ddd3:	90                   	nop
c000ddd4:	83 c4 0c             	add    esp,0xc
c000ddd7:	c3                   	ret    

c000ddd8 <KeGetEnv(Process*, char const*)>:
c000ddd8:	53                   	push   ebx
c000ddd9:	83 ec 08             	sub    esp,0x8
c000dddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dde0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000dde4:	39 05 f8 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6f8,eax
c000ddea:	74 04                	je     c000ddf0 <KeGetEnv(Process*, char const*)+0x18>
c000ddec:	85 c0                	test   eax,eax
c000ddee:	75 0b                	jne    c000ddfb <KeGetEnv(Process*, char const*)+0x23>
c000ddf0:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000ddf5:	85 c0                	test   eax,eax
c000ddf7:	75 19                	jne    c000de12 <KeGetEnv(Process*, char const*)+0x3a>
c000ddf9:	eb 27                	jmp    c000de22 <KeGetEnv(Process*, char const*)+0x4a>
c000ddfb:	52                   	push   edx
c000ddfc:	52                   	push   edx
c000ddfd:	53                   	push   ebx
c000ddfe:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000de04:	e8 3b fc ff ff       	call   c000da44 <EnvVarContainer::getEnv(char const*)>
c000de09:	83 c4 10             	add    esp,0x10
c000de0c:	85 c0                	test   eax,eax
c000de0e:	75 28                	jne    c000de38 <KeGetEnv(Process*, char const*)+0x60>
c000de10:	eb de                	jmp    c000ddf0 <KeGetEnv(Process*, char const*)+0x18>
c000de12:	52                   	push   edx
c000de13:	52                   	push   edx
c000de14:	53                   	push   ebx
c000de15:	50                   	push   eax
c000de16:	e8 29 fc ff ff       	call   c000da44 <EnvVarContainer::getEnv(char const*)>
c000de1b:	83 c4 10             	add    esp,0x10
c000de1e:	85 c0                	test   eax,eax
c000de20:	75 16                	jne    c000de38 <KeGetEnv(Process*, char const*)+0x60>
c000de22:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000de26:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000de2b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de2f:	83 c4 08             	add    esp,0x8
c000de32:	5b                   	pop    ebx
c000de33:	e9 0c fc ff ff       	jmp    c000da44 <EnvVarContainer::getEnv(char const*)>
c000de38:	83 c4 08             	add    esp,0x8
c000de3b:	5b                   	pop    ebx
c000de3c:	c3                   	ret    

c000de3d <KeSetEnvSystem(char const*, char const*)>:
c000de3d:	83 ec 10             	sub    esp,0x10
c000de40:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de44:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de48:	ff 35 7c ad 02 c0    	push   DWORD PTR ds:0xc002ad7c
c000de4e:	e8 2f fc ff ff       	call   c000da82 <EnvVarContainer::setEnv(char const*, char const*)>
c000de53:	83 c4 1c             	add    esp,0x1c
c000de56:	c3                   	ret    

c000de57 <KeSetEnvUser(char const*, char const*)>:
c000de57:	a1 78 ad 02 c0       	mov    eax,ds:0xc002ad78
c000de5c:	85 c0                	test   eax,eax
c000de5e:	74 15                	je     c000de75 <KeSetEnvUser(char const*, char const*)+0x1e>
c000de60:	83 ec 10             	sub    esp,0x10
c000de63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de67:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000de6b:	50                   	push   eax
c000de6c:	e8 11 fc ff ff       	call   c000da82 <EnvVarContainer::setEnv(char const*, char const*)>
c000de71:	83 c4 1c             	add    esp,0x1c
c000de74:	c3                   	ret    
c000de75:	c3                   	ret    

c000de76 <KeSetEnvProcess(Process*, char const*, char const*)>:
c000de76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000de7a:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000de80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000de84:	e9 f9 fb ff ff       	jmp    c000da82 <EnvVarContainer::setEnv(char const*, char const*)>

c000de89 <KeDeleteEnvSystem(char const*)>:
c000de89:	c3                   	ret    

c000de8a <KeDeleteEnvUser(char const*)>:
c000de8a:	c3                   	ret    

c000de8b <KeDeleteEnvProcess(Process*, char const*)>:
c000de8b:	c3                   	ret    

c000de8c <KeNewProcessEnv(Process*)>:
c000de8c:	83 ec 28             	sub    esp,0x28
c000de8f:	6a 0c                	push   0xc
c000de91:	e8 6d 14 00 00       	call   c000f303 <malloc>
c000de96:	5a                   	pop    edx
c000de97:	59                   	pop    ecx
c000de98:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000de9c:	50                   	push   eax
c000de9d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dea1:	e8 e0 fe ff ff       	call   c000dd86 <EnvVarContainer::EnvVarContainer(Process*)>
c000dea6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000deaa:	83 c4 2c             	add    esp,0x2c
c000dead:	c3                   	ret    

c000deae <KeCopyProcessEnv(Process*, Process*)>:
c000deae:	57                   	push   edi
c000deaf:	56                   	push   esi
c000deb0:	53                   	push   ebx
c000deb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000deb5:	83 ec 0c             	sub    esp,0xc
c000deb8:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000debe:	6a 0c                	push   0xc
c000dec0:	e8 3e 14 00 00       	call   c000f303 <malloc>
c000dec5:	89 c3                	mov    ebx,eax
c000dec7:	58                   	pop    eax
c000dec8:	5a                   	pop    edx
c000dec9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000decd:	53                   	push   ebx
c000dece:	e8 b3 fe ff ff       	call   c000dd86 <EnvVarContainer::EnvVarContainer(Process*)>
c000ded3:	8b 07                	mov    eax,DWORD PTR [edi]
c000ded5:	89 03                	mov    DWORD PTR [ebx],eax
c000ded7:	c1 e0 03             	shl    eax,0x3
c000deda:	89 04 24             	mov    DWORD PTR [esp],eax
c000dedd:	e8 21 14 00 00       	call   c000f303 <malloc>
c000dee2:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000dee5:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000dee7:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000deea:	c1 e1 03             	shl    ecx,0x3
c000deed:	89 c7                	mov    edi,eax
c000deef:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000def1:	83 c4 10             	add    esp,0x10
c000def4:	89 d8                	mov    eax,ebx
c000def6:	5b                   	pop    ebx
c000def7:	5e                   	pop    esi
c000def8:	5f                   	pop    edi
c000def9:	c3                   	ret    

c000defa <KeLoadSystemEnv()>:
c000defa:	53                   	push   ebx
c000defb:	83 ec 14             	sub    esp,0x14
c000defe:	6a 0c                	push   0xc
c000df00:	e8 fe 13 00 00       	call   c000f303 <malloc>
c000df05:	89 c3                	mov    ebx,eax
c000df07:	58                   	pop    eax
c000df08:	5a                   	pop    edx
c000df09:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c000df0f:	53                   	push   ebx
c000df10:	e8 71 fe ff ff       	call   c000dd86 <EnvVarContainer::EnvVarContainer(Process*)>
c000df15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000df18:	89 1d 7c ad 02 c0    	mov    DWORD PTR ds:0xc002ad7c,ebx
c000df1e:	e8 47 fe ff ff       	call   c000dd6a <EnvVarContainer::__loadSystem()>
c000df23:	83 c4 18             	add    esp,0x18
c000df26:	5b                   	pop    ebx
c000df27:	c3                   	ret    

c000df28 <KeLoadUserEnv()>:
c000df28:	53                   	push   ebx
c000df29:	83 ec 14             	sub    esp,0x14
c000df2c:	6a 0c                	push   0xc
c000df2e:	e8 d0 13 00 00       	call   c000f303 <malloc>
c000df33:	89 c3                	mov    ebx,eax
c000df35:	58                   	pop    eax
c000df36:	5a                   	pop    edx
c000df37:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c000df3d:	53                   	push   ebx
c000df3e:	e8 43 fe ff ff       	call   c000dd86 <EnvVarContainer::EnvVarContainer(Process*)>
c000df43:	89 1d 78 ad 02 c0    	mov    DWORD PTR ds:0xc002ad78,ebx
c000df49:	83 c4 18             	add    esp,0x18
c000df4c:	5b                   	pop    ebx
c000df4d:	c3                   	ret    

c000df4e <KeFlushEnv()>:
c000df4e:	c3                   	ret    

c000df4f <KeGetProcessTotalEnvCount(Process*)>:
c000df4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000df53:	8b 15 78 ad 02 c0    	mov    edx,DWORD PTR ds:0xc002ad78
c000df59:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000df5f:	a1 7c ad 02 c0       	mov    eax,ds:0xc002ad7c
c000df64:	8b 00                	mov    eax,DWORD PTR [eax]
c000df66:	03 01                	add    eax,DWORD PTR [ecx]
c000df68:	85 d2                	test   edx,edx
c000df6a:	74 02                	je     c000df6e <KeGetProcessTotalEnvCount(Process*)+0x1f>
c000df6c:	03 02                	add    eax,DWORD PTR [edx]
c000df6e:	c3                   	ret    

c000df6f <KeGetProcessEnvPair(Process*, int)>:
c000df6f:	57                   	push   edi
c000df70:	56                   	push   esi
c000df71:	8b 35 78 ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad78
c000df77:	53                   	push   ebx
c000df78:	85 f6                	test   esi,esi
c000df7a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000df7e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000df82:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c000df88:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000df8c:	8b 01                	mov    eax,DWORD PTR [ecx]
c000df8e:	75 16                	jne    c000dfa6 <KeGetProcessEnvPair(Process*, int)+0x37>
c000df90:	39 c2                	cmp    edx,eax
c000df92:	7c 16                	jl     c000dfaa <KeGetProcessEnvPair(Process*, int)+0x3b>
c000df94:	8b 0d 7c ad 02 c0    	mov    ecx,DWORD PTR ds:0xc002ad7c
c000df9a:	8b 31                	mov    esi,DWORD PTR [ecx]
c000df9c:	01 c6                	add    esi,eax
c000df9e:	39 d6                	cmp    esi,edx
c000dfa0:	7e 3c                	jle    c000dfde <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dfa2:	29 c2                	sub    edx,eax
c000dfa4:	eb 04                	jmp    c000dfaa <KeGetProcessEnvPair(Process*, int)+0x3b>
c000dfa6:	39 c2                	cmp    edx,eax
c000dfa8:	7d 05                	jge    c000dfaf <KeGetProcessEnvPair(Process*, int)+0x40>
c000dfaa:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000dfad:	eb 20                	jmp    c000dfcf <KeGetProcessEnvPair(Process*, int)+0x60>
c000dfaf:	8b 3e                	mov    edi,DWORD PTR [esi]
c000dfb1:	8d 0c 07             	lea    ecx,[edi+eax*1]
c000dfb4:	39 d1                	cmp    ecx,edx
c000dfb6:	7e 04                	jle    c000dfbc <KeGetProcessEnvPair(Process*, int)+0x4d>
c000dfb8:	29 c2                	sub    edx,eax
c000dfba:	eb 10                	jmp    c000dfcc <KeGetProcessEnvPair(Process*, int)+0x5d>
c000dfbc:	8b 35 7c ad 02 c0    	mov    esi,DWORD PTR ds:0xc002ad7c
c000dfc2:	03 0e                	add    ecx,DWORD PTR [esi]
c000dfc4:	39 d1                	cmp    ecx,edx
c000dfc6:	7e 16                	jle    c000dfde <KeGetProcessEnvPair(Process*, int)+0x6f>
c000dfc8:	29 c2                	sub    edx,eax
c000dfca:	29 fa                	sub    edx,edi
c000dfcc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000dfcf:	8d 14 d0             	lea    edx,[eax+edx*8]
c000dfd2:	8b 02                	mov    eax,DWORD PTR [edx]
c000dfd4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000dfd7:	89 03                	mov    DWORD PTR [ebx],eax
c000dfd9:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000dfdc:	eb 1d                	jmp    c000dffb <KeGetProcessEnvPair(Process*, int)+0x8c>
c000dfde:	83 ec 0c             	sub    esp,0xc
c000dfe1:	68 c2 30 02 c0       	push   0xc00230c2
c000dfe6:	e8 5f 16 00 00       	call   c000f64a <KePanic(char const*)>
c000dfeb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000dff1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000dff8:	83 c4 10             	add    esp,0x10
c000dffb:	89 d8                	mov    eax,ebx
c000dffd:	5b                   	pop    ebx
c000dffe:	5e                   	pop    esi
c000dfff:	5f                   	pop    edi
c000e000:	c2 04 00             	ret    0x4
c000e003:	90                   	nop

c000e004 <KeSetupInterrupts()>:
c000e004:	83 ec 10             	sub    esp,0x10
c000e007:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e00f:	90                   	nop
c000e010:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c000e018:	7f 5a                	jg     c000e074 <KeSetupInterrupts()+0x70>
c000e01a:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000e022:	66 90                	xchg   ax,ax
c000e024:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c000e029:	7f 41                	jg     c000e06c <KeSetupInterrupts()+0x68>
c000e02b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e02f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e036:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e03a:	01 d0                	add    eax,edx
c000e03c:	c7 04 85 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd4280],0x0
c000e047:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e04b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e052:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e056:	01 d0                	add    eax,edx
c000e058:	c7 04 85 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax*4-0x3ffd5280],0x0
c000e063:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c000e068:	eb ba                	jmp    c000e024 <KeSetupInterrupts()+0x20>
c000e06a:	66 90                	xchg   ax,ax
c000e06c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000e071:	eb 9d                	jmp    c000e010 <KeSetupInterrupts()+0xc>
c000e073:	90                   	nop
c000e074:	90                   	nop
c000e075:	83 c4 10             	add    esp,0x10
c000e078:	c3                   	ret    
c000e079:	8d 76 00             	lea    esi,[esi+0x0]

c000e07c <int_handler>:
c000e07c:	83 ec 2c             	sub    esp,0x2c
c000e07f:	90                   	nop
c000e080:	a0 c8 cd 02 c0       	mov    al,ds:0xc002cdc8
c000e085:	0f b6 c0             	movzx  eax,al
c000e088:	85 c0                	test   eax,eax
c000e08a:	74 04                	je     c000e090 <int_handler+0x14>
c000e08c:	fa                   	cli    
c000e08d:	f4                   	hlt    
c000e08e:	eb f0                	jmp    c000e080 <int_handler+0x4>
c000e090:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e094:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e097:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e09b:	83 7c 24 18 1f       	cmp    DWORD PTR [esp+0x18],0x1f
c000e0a0:	7e 1a                	jle    c000e0bc <int_handler+0x40>
c000e0a2:	83 7c 24 18 37       	cmp    DWORD PTR [esp+0x18],0x37
c000e0a7:	7f 13                	jg     c000e0bc <int_handler+0x40>
c000e0a9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e0ad:	83 e8 20             	sub    eax,0x20
c000e0b0:	83 ec 0c             	sub    esp,0xc
c000e0b3:	50                   	push   eax
c000e0b4:	e8 4b b4 00 00       	call   c0019504 <HalEndOfInterrupt(int)>
c000e0b9:	83 c4 10             	add    esp,0x10
c000e0bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e0c0:	c1 e0 04             	shl    eax,0x4
c000e0c3:	05 80 bd 02 c0       	add    eax,0xc002bd80
c000e0c8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e0cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e0d0:	c1 e0 04             	shl    eax,0x4
c000e0d3:	05 80 ad 02 c0       	add    eax,0xc002ad80
c000e0d8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0dc:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000e0e4:	83 7c 24 1c 03       	cmp    DWORD PTR [esp+0x1c],0x3
c000e0e9:	0f 8f ad 00 00 00    	jg     c000e19c <int_handler+0x120>
c000e0ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e0f3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e0fa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e0fe:	01 d0                	add    eax,edx
c000e100:	8b 00                	mov    eax,DWORD PTR [eax]
c000e102:	85 c0                	test   eax,eax
c000e104:	0f 84 86 00 00 00    	je     c000e190 <int_handler+0x114>
c000e10a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e10e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c000e111:	83 f8 60             	cmp    eax,0x60
c000e114:	75 46                	jne    c000e15c <int_handler+0xe0>
c000e116:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e11a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e121:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e125:	01 d0                	add    eax,edx
c000e127:	8b 00                	mov    eax,DWORD PTR [eax]
c000e129:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e12d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e134:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e138:	01 ca                	add    edx,ecx
c000e13a:	8b 12                	mov    edx,DWORD PTR [edx]
c000e13c:	83 ec 08             	sub    esp,0x8
c000e13f:	52                   	push   edx
c000e140:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e144:	ff d0                	call   eax
c000e146:	83 c4 10             	add    esp,0x10
c000e149:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e14d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e151:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e155:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e159:	eb 4d                	jmp    c000e1a8 <int_handler+0x12c>
c000e15b:	90                   	nop
c000e15c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e160:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000e167:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e16b:	01 d0                	add    eax,edx
c000e16d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e16f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e173:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c000e17a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e17e:	01 ca                	add    edx,ecx
c000e180:	8b 12                	mov    edx,DWORD PTR [edx]
c000e182:	83 ec 08             	sub    esp,0x8
c000e185:	52                   	push   edx
c000e186:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000e18a:	ff d0                	call   eax
c000e18c:	83 c4 10             	add    esp,0x10
c000e18f:	90                   	nop
c000e190:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000e195:	e9 4a ff ff ff       	jmp    c000e0e4 <int_handler+0x68>
c000e19a:	66 90                	xchg   ax,ax
c000e19c:	b8 00 00 00 00       	mov    eax,0x0
c000e1a1:	ba 00 00 00 00       	mov    edx,0x0
c000e1a6:	66 90                	xchg   ax,ax
c000e1a8:	83 c4 2c             	add    esp,0x2c
c000e1ab:	c3                   	ret    

c000e1ac <KeDisplayProgramFault(char const*)>:
c000e1ac:	83 ec 0c             	sub    esp,0xc
c000e1af:	83 ec 0c             	sub    esp,0xc
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	e8 a9 8d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e1bb:	83 c4 10             	add    esp,0x10
c000e1be:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e1c3:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1c5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e1c8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e1ce:	85 c0                	test   eax,eax
c000e1d0:	74 22                	je     c000e1f4 <KeDisplayProgramFault(char const*)+0x48>
c000e1d2:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000e1d7:	8b 00                	mov    eax,DWORD PTR [eax]
c000e1d9:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000e1dc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000e1e2:	6a 04                	push   0x4
c000e1e4:	6a 0f                	push   0xf
c000e1e6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e1ea:	50                   	push   eax
c000e1eb:	e8 a2 3c 00 00       	call   c0011e92 <VgaText::puts(char const*, VgaColour, VgaColour)>
c000e1f0:	83 c4 10             	add    esp,0x10
c000e1f3:	90                   	nop
c000e1f4:	90                   	nop
c000e1f5:	83 c4 0c             	add    esp,0xc
c000e1f8:	c3                   	ret    
c000e1f9:	8d 76 00             	lea    esi,[esi+0x0]

c000e1fc <KeGeneralProtectionFault(void*, void*)>:
c000e1fc:	83 ec 0c             	sub    esp,0xc
c000e1ff:	83 ec 08             	sub    esp,0x8
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 97 a8 00 00       	call   c0018aa6 <HalHandleGeneralProtectionFault(void*, void*)>
c000e20f:	83 c4 10             	add    esp,0x10
c000e212:	0f b6 c0             	movzx  eax,al
c000e215:	85 c0                	test   eax,eax
c000e217:	75 2f                	jne    c000e248 <KeGeneralProtectionFault(void*, void*)+0x4c>
c000e219:	83 ec 0c             	sub    esp,0xc
c000e21c:	68 dc 30 02 c0       	push   0xc00230dc
c000e221:	e8 86 ff ff ff       	call   c000e1ac <KeDisplayProgramFault(char const*)>
c000e226:	83 c4 10             	add    esp,0x10
c000e229:	83 ec 0c             	sub    esp,0xc
c000e22c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e230:	e8 0b aa 00 00       	call   c0018c40 <HalDisplayDebugInfo(void*)>
c000e235:	83 c4 10             	add    esp,0x10
c000e238:	83 ec 0c             	sub    esp,0xc
c000e23b:	6a 00                	push   0x0
c000e23d:	e8 02 89 00 00       	call   c0016b44 <Thr::terminateFromIRQ(int)>
c000e242:	83 c4 10             	add    esp,0x10
c000e245:	eb 05                	jmp    c000e24c <KeGeneralProtectionFault(void*, void*)+0x50>
c000e247:	90                   	nop
c000e248:	90                   	nop
c000e249:	8d 76 00             	lea    esi,[esi+0x0]
c000e24c:	83 c4 0c             	add    esp,0xc
c000e24f:	c3                   	ret    

c000e250 <KePageFault(void*, void*)>:
c000e250:	83 ec 0c             	sub    esp,0xc
c000e253:	83 ec 0c             	sub    esp,0xc
c000e256:	68 f5 30 02 c0       	push   0xc00230f5
c000e25b:	e8 04 8d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000e260:	83 c4 10             	add    esp,0x10
c000e263:	83 ec 08             	sub    esp,0x8
c000e266:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e26a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e26e:	e8 de a8 00 00       	call   c0018b51 <HalHandlePageFault(void*, void*)>
c000e273:	83 c4 10             	add    esp,0x10
c000e276:	0f b6 c0             	movzx  eax,al
c000e279:	85 c0                	test   eax,eax
c000e27b:	75 2f                	jne    c000e2ac <KePageFault(void*, void*)+0x5c>
c000e27d:	83 ec 0c             	sub    esp,0xc
c000e280:	68 02 31 02 c0       	push   0xc0023102
c000e285:	e8 22 ff ff ff       	call   c000e1ac <KeDisplayProgramFault(char const*)>
c000e28a:	83 c4 10             	add    esp,0x10
c000e28d:	83 ec 0c             	sub    esp,0xc
c000e290:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e294:	e8 a7 a9 00 00       	call   c0018c40 <HalDisplayDebugInfo(void*)>
c000e299:	83 c4 10             	add    esp,0x10
c000e29c:	83 ec 0c             	sub    esp,0xc
c000e29f:	6a 00                	push   0x0
c000e2a1:	e8 9e 88 00 00       	call   c0016b44 <Thr::terminateFromIRQ(int)>
c000e2a6:	83 c4 10             	add    esp,0x10
c000e2a9:	eb 05                	jmp    c000e2b0 <KePageFault(void*, void*)+0x60>
c000e2ab:	90                   	nop
c000e2ac:	90                   	nop
c000e2ad:	8d 76 00             	lea    esi,[esi+0x0]
c000e2b0:	83 c4 0c             	add    esp,0xc
c000e2b3:	c3                   	ret    

c000e2b4 <KeNonMaskableInterrupt(void*, void*)>:
c000e2b4:	83 ec 0c             	sub    esp,0xc
c000e2b7:	e8 12 ad 00 00       	call   c0018fce <HalReceivedNMI()>
c000e2bc:	90                   	nop
c000e2bd:	83 c4 0c             	add    esp,0xc
c000e2c0:	c3                   	ret    
c000e2c1:	8d 76 00             	lea    esi,[esi+0x0]

c000e2c4 <KeOtherFault(void*, void*)>:
c000e2c4:	83 ec 0c             	sub    esp,0xc
c000e2c7:	83 ec 0c             	sub    esp,0xc
c000e2ca:	68 10 31 02 c0       	push   0xc0023110
c000e2cf:	e8 d8 fe ff ff       	call   c000e1ac <KeDisplayProgramFault(char const*)>
c000e2d4:	83 c4 10             	add    esp,0x10
c000e2d7:	83 ec 0c             	sub    esp,0xc
c000e2da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2de:	e8 5d a9 00 00       	call   c0018c40 <HalDisplayDebugInfo(void*)>
c000e2e3:	83 c4 10             	add    esp,0x10
c000e2e6:	83 ec 0c             	sub    esp,0xc
c000e2e9:	6a 00                	push   0x0
c000e2eb:	e8 54 88 00 00       	call   c0016b44 <Thr::terminateFromIRQ(int)>
c000e2f0:	83 c4 10             	add    esp,0x10
c000e2f3:	90                   	nop
c000e2f4:	83 c4 0c             	add    esp,0xc
c000e2f7:	c3                   	ret    

c000e2f8 <KeOpcodeFault(void*, void*)>:
c000e2f8:	55                   	push   ebp
c000e2f9:	89 e5                	mov    ebp,esp
c000e2fb:	83 ec 08             	sub    esp,0x8
c000e2fe:	83 ec 08             	sub    esp,0x8
c000e301:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c000e304:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e307:	e8 f2 a8 00 00       	call   c0018bfe <HalHandleOpcodeFault(void*, void*)>
c000e30c:	83 c4 10             	add    esp,0x10
c000e30f:	0f b6 c0             	movzx  eax,al
c000e312:	85 c0                	test   eax,eax
c000e314:	75 2e                	jne    c000e344 <KeOpcodeFault(void*, void*)+0x4c>
c000e316:	83 ec 0c             	sub    esp,0xc
c000e319:	68 38 31 02 c0       	push   0xc0023138
c000e31e:	e8 89 fe ff ff       	call   c000e1ac <KeDisplayProgramFault(char const*)>
c000e323:	83 c4 10             	add    esp,0x10
c000e326:	83 ec 0c             	sub    esp,0xc
c000e329:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000e32c:	e8 0f a9 00 00       	call   c0018c40 <HalDisplayDebugInfo(void*)>
c000e331:	83 c4 10             	add    esp,0x10
c000e334:	83 ec 0c             	sub    esp,0xc
c000e337:	6a 00                	push   0x0
c000e339:	e8 06 88 00 00       	call   c0016b44 <Thr::terminateFromIRQ(int)>
c000e33e:	83 c4 10             	add    esp,0x10
c000e341:	eb 05                	jmp    c000e348 <KeOpcodeFault(void*, void*)+0x50>
c000e343:	90                   	nop
c000e344:	90                   	nop
c000e345:	8d 76 00             	lea    esi,[esi+0x0]
c000e348:	c9                   	leave  
c000e349:	c3                   	ret    
c000e34a:	66 90                	xchg   ax,ax

c000e34c <KeDoubleFault(void*, void*)>:
c000e34c:	55                   	push   ebp
c000e34d:	89 e5                	mov    ebp,esp
c000e34f:	83 ec 08             	sub    esp,0x8
c000e352:	83 ec 0c             	sub    esp,0xc
c000e355:	68 45 31 02 c0       	push   0xc0023145
c000e35a:	e8 eb 12 00 00       	call   c000f64a <KePanic(char const*)>
c000e35f:	83 c4 10             	add    esp,0x10
c000e362:	90                   	nop
c000e363:	c9                   	leave  
c000e364:	c3                   	ret    
c000e365:	90                   	nop

c000e366 <GDTEntry::setBase(unsigned int)>:
c000e366:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e36a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e36e:	89 c1                	mov    ecx,eax
c000e370:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000e374:	c1 e9 10             	shr    ecx,0x10
c000e377:	c1 e8 18             	shr    eax,0x18
c000e37a:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000e37d:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000e380:	c3                   	ret    
c000e381:	90                   	nop

c000e382 <GDTEntry::setLimit(unsigned int)>:
c000e382:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000e386:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e38a:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000e38d:	66 89 01             	mov    WORD PTR [ecx],ax
c000e390:	83 e2 f0             	and    edx,0xfffffff0
c000e393:	c1 e8 10             	shr    eax,0x10
c000e396:	83 e0 0f             	and    eax,0xf
c000e399:	09 d0                	or     eax,edx
c000e39b:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000e39e:	c3                   	ret    
c000e39f:	90                   	nop

c000e3a0 <GDT::GDT()>:
c000e3a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3a4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e3aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3ae:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000e3b4:	90                   	nop
c000e3b5:	c3                   	ret    

c000e3b6 <GDT::addEntry(GDTEntry)>:
c000e3b6:	53                   	push   ebx
c000e3b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e3bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e3bf:	8b 02                	mov    eax,DWORD PTR [edx]
c000e3c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e3c5:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c000e3c9:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000e3cd:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3d0:	c1 e0 03             	shl    eax,0x3
c000e3d3:	89 0a                	mov    DWORD PTR [edx],ecx
c000e3d5:	5b                   	pop    ebx
c000e3d6:	c3                   	ret    
c000e3d7:	90                   	nop

c000e3d8 <GDT::getNumberOfEntries()>:
c000e3d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3dc:	8b 00                	mov    eax,DWORD PTR [eax]
c000e3de:	c3                   	ret    
c000e3df:	90                   	nop

c000e3e0 <GDT::flush()>:
c000e3e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e3e4:	8b 10                	mov    edx,DWORD PTR [eax]
c000e3e6:	83 c0 04             	add    eax,0x4
c000e3e9:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000e3f0:	a3 82 cd 02 c0       	mov    ds:0xc002cd82,eax
c000e3f5:	66 89 15 80 cd 02 c0 	mov    WORD PTR ds:0xc002cd80,dx
c000e3fc:	e9 59 1f ff ff       	jmp    c000035a <loadGDT>
c000e401:	90                   	nop

c000e402 <GDT::setup()>:
c000e402:	57                   	push   edi
c000e403:	56                   	push   esi
c000e404:	53                   	push   ebx
c000e405:	83 ec 30             	sub    esp,0x30
c000e408:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e40c:	6a 00                	push   0x0
c000e40e:	8d 74 24 14          	lea    esi,[esp+0x14]
c000e412:	56                   	push   esi
c000e413:	e8 4e ff ff ff       	call   c000e366 <GDTEntry::setBase(unsigned int)>
c000e418:	6a 00                	push   0x0
c000e41a:	56                   	push   esi
c000e41b:	e8 62 ff ff ff       	call   c000e382 <GDTEntry::setLimit(unsigned int)>
c000e420:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c000e428:	6a 00                	push   0x0
c000e42a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000e42e:	56                   	push   esi
c000e42f:	e8 32 ff ff ff       	call   c000e366 <GDTEntry::setBase(unsigned int)>
c000e434:	68 ff ff ff 00       	push   0xffffff
c000e439:	56                   	push   esi
c000e43a:	e8 43 ff ff ff       	call   c000e382 <GDTEntry::setLimit(unsigned int)>
c000e43f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e443:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e447:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000e44b:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000e44f:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000e454:	0d 00 9a c0 00       	or     eax,0xc09a00
c000e459:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e45d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e461:	89 f8                	mov    eax,edi
c000e463:	89 fa                	mov    edx,edi
c000e465:	80 e4 f7             	and    ah,0xf7
c000e468:	80 ce 60             	or     dh,0x60
c000e46b:	89 c7                	mov    edi,eax
c000e46d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e471:	80 cc 60             	or     ah,0x60
c000e474:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e478:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e47c:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000e480:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e484:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e488:	83 c4 20             	add    esp,0x20
c000e48b:	6a 00                	push   0x0
c000e48d:	8d 44 24 24          	lea    eax,[esp+0x24]
c000e491:	50                   	push   eax
c000e492:	e8 cf fe ff ff       	call   c000e366 <GDTEntry::setBase(unsigned int)>
c000e497:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c000e49b:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000e49f:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000e4a3:	83 e0 3f             	and    eax,0x3f
c000e4a6:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c000e4aa:	6a 00                	push   0x0
c000e4ac:	8d 44 24 34          	lea    eax,[esp+0x34]
c000e4b0:	50                   	push   eax
c000e4b1:	e8 b0 fe ff ff       	call   c000e366 <GDTEntry::setBase(unsigned int)>
c000e4b6:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c000e4ba:	83 e0 3f             	and    eax,0x3f
c000e4bd:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000e4c1:	83 c4 0c             	add    esp,0xc
c000e4c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e4cc:	53                   	push   ebx
c000e4cd:	e8 e4 fe ff ff       	call   c000e3b6 <GDT::addEntry(GDTEntry)>
c000e4d2:	83 c4 0c             	add    esp,0xc
c000e4d5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e4d9:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e4dd:	53                   	push   ebx
c000e4de:	e8 d3 fe ff ff       	call   c000e3b6 <GDT::addEntry(GDTEntry)>
c000e4e3:	83 c4 0c             	add    esp,0xc
c000e4e6:	57                   	push   edi
c000e4e7:	56                   	push   esi
c000e4e8:	53                   	push   ebx
c000e4e9:	e8 c8 fe ff ff       	call   c000e3b6 <GDT::addEntry(GDTEntry)>
c000e4ee:	83 c4 0c             	add    esp,0xc
c000e4f1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e4f5:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000e4f9:	53                   	push   ebx
c000e4fa:	e8 b7 fe ff ff       	call   c000e3b6 <GDT::addEntry(GDTEntry)>
c000e4ff:	83 c4 0c             	add    esp,0xc
c000e502:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e506:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e50a:	53                   	push   ebx
c000e50b:	e8 a6 fe ff ff       	call   c000e3b6 <GDT::addEntry(GDTEntry)>
c000e510:	83 c4 0c             	add    esp,0xc
c000e513:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e517:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e51b:	53                   	push   ebx
c000e51c:	e8 95 fe ff ff       	call   c000e3b6 <GDT::addEntry(GDTEntry)>
c000e521:	83 c4 0c             	add    esp,0xc
c000e524:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e528:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e52c:	53                   	push   ebx
c000e52d:	e8 84 fe ff ff       	call   c000e3b6 <GDT::addEntry(GDTEntry)>
c000e532:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e535:	e8 a6 fe ff ff       	call   c000e3e0 <GDT::flush()>
c000e53a:	83 c4 40             	add    esp,0x40
c000e53d:	5b                   	pop    ebx
c000e53e:	5e                   	pop    esi
c000e53f:	5f                   	pop    edi
c000e540:	c3                   	ret    

c000e541 <idleFunction(void*)>:
c000e541:	83 ec 0c             	sub    esp,0xc
c000e544:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000e54b:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000e552:	75 01                	jne    c000e555 <idleFunction(void*)+0x14>
c000e554:	fb                   	sti    
c000e555:	e8 0f ab 00 00       	call   c0019069 <HalSystemIdle()>
c000e55a:	e8 27 2d 01 00       	call   c0021286 <idleCommon()>
c000e55f:	eb f4                	jmp    c000e555 <idleFunction(void*)+0x14>
c000e561:	66 90                	xchg   ax,ax
c000e563:	90                   	nop

c000e564 <IDTEntry::IDTEntry(bool)>:
c000e564:	53                   	push   ebx
c000e565:	83 ec 04             	sub    esp,0x4
c000e568:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e56c:	88 04 24             	mov    BYTE PTR [esp],al
c000e56f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e573:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000e579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e57d:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000e581:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e585:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e588:	83 e2 f0             	and    edx,0xfffffff0
c000e58b:	83 ca 0e             	or     edx,0xe
c000e58e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e591:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e595:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e598:	83 e2 ef             	and    edx,0xffffffef
c000e59b:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e59e:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000e5a2:	85 c0                	test   eax,eax
c000e5a4:	74 06                	je     c000e5ac <IDTEntry::IDTEntry(bool)+0x48>
c000e5a6:	b2 03                	mov    dl,0x3
c000e5a8:	eb 06                	jmp    c000e5b0 <IDTEntry::IDTEntry(bool)+0x4c>
c000e5aa:	66 90                	xchg   ax,ax
c000e5ac:	b2 00                	mov    dl,0x0
c000e5ae:	66 90                	xchg   ax,ax
c000e5b0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5b4:	83 e2 03             	and    edx,0x3
c000e5b7:	89 d3                	mov    ebx,edx
c000e5b9:	c1 e3 05             	shl    ebx,0x5
c000e5bc:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e5bf:	83 e2 9f             	and    edx,0xffffff9f
c000e5c2:	88 d1                	mov    cl,dl
c000e5c4:	88 da                	mov    dl,bl
c000e5c6:	09 ca                	or     edx,ecx
c000e5c8:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e5cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5cf:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000e5d2:	83 ca 80             	or     edx,0xffffff80
c000e5d5:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000e5d8:	90                   	nop
c000e5d9:	83 c4 04             	add    esp,0x4
c000e5dc:	5b                   	pop    ebx
c000e5dd:	c3                   	ret    

c000e5de <IDTEntry::setOffset(unsigned int)>:
c000e5de:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e5e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e5e6:	66 89 02             	mov    WORD PTR [edx],ax
c000e5e9:	c1 e8 10             	shr    eax,0x10
c000e5ec:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000e5f0:	c3                   	ret    
c000e5f1:	90                   	nop
c000e5f2:	66 90                	xchg   ax,ax

c000e5f4 <IDT::IDT()>:
c000e5f4:	90                   	nop
c000e5f5:	c3                   	ret    

c000e5f6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000e5f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e5fa:	83 c0 30             	add    eax,0x30
c000e5fd:	c3                   	ret    

c000e5fe <IDT::addEntry(IDTEntry, int)>:
c000e5fe:	53                   	push   ebx
c000e5ff:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e603:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000e607:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e60b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60f:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000e612:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000e616:	5b                   	pop    ebx
c000e617:	c3                   	ret    

c000e618 <IDT::addEntry(int, void (*)(), bool)>:
c000e618:	53                   	push   ebx
c000e619:	83 ec 10             	sub    esp,0x10
c000e61c:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000e621:	50                   	push   eax
c000e622:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000e626:	53                   	push   ebx
c000e627:	e8 38 ff ff ff       	call   c000e564 <IDTEntry::IDTEntry(bool)>
c000e62c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e630:	53                   	push   ebx
c000e631:	e8 a8 ff ff ff       	call   c000e5de <IDTEntry::setOffset(unsigned int)>
c000e636:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e63a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e63e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000e642:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e646:	e8 b3 ff ff ff       	call   c000e5fe <IDT::addEntry(IDTEntry, int)>
c000e64b:	83 c4 30             	add    esp,0x30
c000e64e:	5b                   	pop    ebx
c000e64f:	c3                   	ret    

c000e650 <IDT::flush()>:
c000e650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e654:	66 c7 05 88 cd 02 c0 ff 07 	mov    WORD PTR ds:0xc002cd88,0x7ff
c000e65d:	a3 8a cd 02 c0       	mov    ds:0xc002cd8a,eax
c000e662:	0f 01 1d 88 cd 02 c0 	lidtd  ds:0xc002cd88
c000e669:	c3                   	ret    

c000e66a <IDT::setup()>:
c000e66a:	57                   	push   edi
c000e66b:	56                   	push   esi
c000e66c:	53                   	push   ebx
c000e66d:	83 ec 10             	sub    esp,0x10
c000e670:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000e674:	6a 00                	push   0x0
c000e676:	68 30 05 02 c0       	push   0xc0020530
c000e67b:	6a 00                	push   0x0
c000e67d:	53                   	push   ebx
c000e67e:	e8 95 ff ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e683:	6a 00                	push   0x0
c000e685:	68 40 05 02 c0       	push   0xc0020540
c000e68a:	6a 01                	push   0x1
c000e68c:	53                   	push   ebx
c000e68d:	e8 86 ff ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e692:	83 c4 20             	add    esp,0x20
c000e695:	6a 00                	push   0x0
c000e697:	68 4a 05 02 c0       	push   0xc002054a
c000e69c:	6a 02                	push   0x2
c000e69e:	53                   	push   ebx
c000e69f:	e8 74 ff ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e6a4:	6a 00                	push   0x0
c000e6a6:	68 54 05 02 c0       	push   0xc0020554
c000e6ab:	6a 03                	push   0x3
c000e6ad:	53                   	push   ebx
c000e6ae:	e8 65 ff ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e6b3:	83 c4 20             	add    esp,0x20
c000e6b6:	6a 00                	push   0x0
c000e6b8:	68 5e 05 02 c0       	push   0xc002055e
c000e6bd:	6a 04                	push   0x4
c000e6bf:	53                   	push   ebx
c000e6c0:	e8 53 ff ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e6c5:	6a 00                	push   0x0
c000e6c7:	68 68 05 02 c0       	push   0xc0020568
c000e6cc:	6a 05                	push   0x5
c000e6ce:	53                   	push   ebx
c000e6cf:	e8 44 ff ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e6d4:	83 c4 20             	add    esp,0x20
c000e6d7:	6a 00                	push   0x0
c000e6d9:	68 72 05 02 c0       	push   0xc0020572
c000e6de:	6a 06                	push   0x6
c000e6e0:	53                   	push   ebx
c000e6e1:	e8 32 ff ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e6e6:	6a 00                	push   0x0
c000e6e8:	68 7c 05 02 c0       	push   0xc002057c
c000e6ed:	6a 07                	push   0x7
c000e6ef:	53                   	push   ebx
c000e6f0:	e8 23 ff ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e6f5:	83 c4 20             	add    esp,0x20
c000e6f8:	6a 00                	push   0x0
c000e6fa:	68 86 05 02 c0       	push   0xc0020586
c000e6ff:	6a 08                	push   0x8
c000e701:	53                   	push   ebx
c000e702:	e8 11 ff ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e707:	6a 00                	push   0x0
c000e709:	68 8e 05 02 c0       	push   0xc002058e
c000e70e:	6a 09                	push   0x9
c000e710:	53                   	push   ebx
c000e711:	e8 02 ff ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e716:	83 c4 20             	add    esp,0x20
c000e719:	6a 00                	push   0x0
c000e71b:	68 98 05 02 c0       	push   0xc0020598
c000e720:	6a 0a                	push   0xa
c000e722:	53                   	push   ebx
c000e723:	e8 f0 fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e728:	6a 00                	push   0x0
c000e72a:	68 a0 05 02 c0       	push   0xc00205a0
c000e72f:	6a 0b                	push   0xb
c000e731:	53                   	push   ebx
c000e732:	e8 e1 fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e737:	83 c4 20             	add    esp,0x20
c000e73a:	6a 00                	push   0x0
c000e73c:	68 a8 05 02 c0       	push   0xc00205a8
c000e741:	6a 0c                	push   0xc
c000e743:	53                   	push   ebx
c000e744:	e8 cf fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e749:	6a 00                	push   0x0
c000e74b:	68 b0 05 02 c0       	push   0xc00205b0
c000e750:	6a 0d                	push   0xd
c000e752:	53                   	push   ebx
c000e753:	e8 c0 fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e758:	83 c4 20             	add    esp,0x20
c000e75b:	6a 00                	push   0x0
c000e75d:	68 ca 05 02 c0       	push   0xc00205ca
c000e762:	6a 0e                	push   0xe
c000e764:	53                   	push   ebx
c000e765:	e8 ae fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e76a:	6a 00                	push   0x0
c000e76c:	68 d2 05 02 c0       	push   0xc00205d2
c000e771:	6a 0f                	push   0xf
c000e773:	53                   	push   ebx
c000e774:	e8 9f fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e779:	83 c4 20             	add    esp,0x20
c000e77c:	6a 00                	push   0x0
c000e77e:	68 dc 05 02 c0       	push   0xc00205dc
c000e783:	6a 10                	push   0x10
c000e785:	53                   	push   ebx
c000e786:	e8 8d fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e78b:	6a 00                	push   0x0
c000e78d:	68 e6 05 02 c0       	push   0xc00205e6
c000e792:	6a 11                	push   0x11
c000e794:	53                   	push   ebx
c000e795:	e8 7e fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e79a:	83 c4 20             	add    esp,0x20
c000e79d:	6a 00                	push   0x0
c000e79f:	68 f0 05 02 c0       	push   0xc00205f0
c000e7a4:	6a 12                	push   0x12
c000e7a6:	53                   	push   ebx
c000e7a7:	e8 6c fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e7ac:	6a 01                	push   0x1
c000e7ae:	68 8a 06 02 c0       	push   0xc002068a
c000e7b3:	6a 60                	push   0x60
c000e7b5:	53                   	push   ebx
c000e7b6:	e8 5d fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e7bb:	83 c4 20             	add    esp,0x20
c000e7be:	6a 00                	push   0x0
c000e7c0:	68 91 06 02 c0       	push   0xc0020691
c000e7c5:	6a 20                	push   0x20
c000e7c7:	53                   	push   ebx
c000e7c8:	e8 4b fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e7cd:	6a 00                	push   0x0
c000e7cf:	68 7c 06 02 c0       	push   0xc002067c
c000e7d4:	6a 21                	push   0x21
c000e7d6:	53                   	push   ebx
c000e7d7:	e8 3c fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e7dc:	83 c4 20             	add    esp,0x20
c000e7df:	6a 00                	push   0x0
c000e7e1:	68 83 06 02 c0       	push   0xc0020683
c000e7e6:	6a 22                	push   0x22
c000e7e8:	53                   	push   ebx
c000e7e9:	e8 2a fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e7ee:	6a 00                	push   0x0
c000e7f0:	68 fa 05 02 c0       	push   0xc00205fa
c000e7f5:	6a 23                	push   0x23
c000e7f7:	53                   	push   ebx
c000e7f8:	e8 1b fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e7fd:	83 c4 20             	add    esp,0x20
c000e800:	6a 00                	push   0x0
c000e802:	68 04 06 02 c0       	push   0xc0020604
c000e807:	6a 24                	push   0x24
c000e809:	53                   	push   ebx
c000e80a:	e8 09 fe ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e80f:	6a 00                	push   0x0
c000e811:	68 0e 06 02 c0       	push   0xc002060e
c000e816:	6a 25                	push   0x25
c000e818:	53                   	push   ebx
c000e819:	e8 fa fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e81e:	83 c4 20             	add    esp,0x20
c000e821:	6a 00                	push   0x0
c000e823:	68 18 06 02 c0       	push   0xc0020618
c000e828:	6a 26                	push   0x26
c000e82a:	53                   	push   ebx
c000e82b:	e8 e8 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e830:	6a 00                	push   0x0
c000e832:	68 22 06 02 c0       	push   0xc0020622
c000e837:	6a 27                	push   0x27
c000e839:	53                   	push   ebx
c000e83a:	e8 d9 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e83f:	83 c4 20             	add    esp,0x20
c000e842:	6a 00                	push   0x0
c000e844:	68 2c 06 02 c0       	push   0xc002062c
c000e849:	6a 28                	push   0x28
c000e84b:	53                   	push   ebx
c000e84c:	e8 c7 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e851:	6a 00                	push   0x0
c000e853:	68 36 06 02 c0       	push   0xc0020636
c000e858:	6a 29                	push   0x29
c000e85a:	53                   	push   ebx
c000e85b:	e8 b8 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e860:	83 c4 20             	add    esp,0x20
c000e863:	6a 00                	push   0x0
c000e865:	68 40 06 02 c0       	push   0xc0020640
c000e86a:	6a 2a                	push   0x2a
c000e86c:	53                   	push   ebx
c000e86d:	e8 a6 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e872:	6a 00                	push   0x0
c000e874:	68 4a 06 02 c0       	push   0xc002064a
c000e879:	6a 2b                	push   0x2b
c000e87b:	53                   	push   ebx
c000e87c:	e8 97 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e881:	83 c4 20             	add    esp,0x20
c000e884:	6a 00                	push   0x0
c000e886:	68 54 06 02 c0       	push   0xc0020654
c000e88b:	6a 2c                	push   0x2c
c000e88d:	53                   	push   ebx
c000e88e:	e8 85 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e893:	6a 00                	push   0x0
c000e895:	68 5e 06 02 c0       	push   0xc002065e
c000e89a:	6a 2d                	push   0x2d
c000e89c:	53                   	push   ebx
c000e89d:	e8 76 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e8a2:	83 c4 20             	add    esp,0x20
c000e8a5:	6a 00                	push   0x0
c000e8a7:	68 68 06 02 c0       	push   0xc0020668
c000e8ac:	6a 2e                	push   0x2e
c000e8ae:	53                   	push   ebx
c000e8af:	e8 64 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e8b4:	6a 00                	push   0x0
c000e8b6:	68 72 06 02 c0       	push   0xc0020672
c000e8bb:	6a 2f                	push   0x2f
c000e8bd:	53                   	push   ebx
c000e8be:	e8 55 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e8c3:	83 c4 20             	add    esp,0x20
c000e8c6:	6a 00                	push   0x0
c000e8c8:	68 cc 07 02 c0       	push   0xc00207cc
c000e8cd:	6a 30                	push   0x30
c000e8cf:	53                   	push   ebx
c000e8d0:	e8 43 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e8d5:	6a 00                	push   0x0
c000e8d7:	68 d6 07 02 c0       	push   0xc00207d6
c000e8dc:	6a 31                	push   0x31
c000e8de:	53                   	push   ebx
c000e8df:	e8 34 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e8e4:	83 c4 20             	add    esp,0x20
c000e8e7:	6a 00                	push   0x0
c000e8e9:	68 e0 07 02 c0       	push   0xc00207e0
c000e8ee:	6a 32                	push   0x32
c000e8f0:	53                   	push   ebx
c000e8f1:	e8 22 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e8f6:	6a 00                	push   0x0
c000e8f8:	68 ea 07 02 c0       	push   0xc00207ea
c000e8fd:	6a 33                	push   0x33
c000e8ff:	53                   	push   ebx
c000e900:	e8 13 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e905:	83 c4 20             	add    esp,0x20
c000e908:	6a 00                	push   0x0
c000e90a:	68 f4 07 02 c0       	push   0xc00207f4
c000e90f:	6a 34                	push   0x34
c000e911:	53                   	push   ebx
c000e912:	e8 01 fd ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e917:	6a 00                	push   0x0
c000e919:	68 fe 07 02 c0       	push   0xc00207fe
c000e91e:	6a 35                	push   0x35
c000e920:	53                   	push   ebx
c000e921:	e8 f2 fc ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e926:	83 c4 20             	add    esp,0x20
c000e929:	6a 00                	push   0x0
c000e92b:	68 08 08 02 c0       	push   0xc0020808
c000e930:	6a 36                	push   0x36
c000e932:	53                   	push   ebx
c000e933:	e8 e0 fc ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e938:	6a 00                	push   0x0
c000e93a:	68 12 08 02 c0       	push   0xc0020812
c000e93f:	6a 37                	push   0x37
c000e941:	53                   	push   ebx
c000e942:	e8 d1 fc ff ff       	call   c000e618 <IDT::addEntry(int, void (*)(), bool)>
c000e947:	83 c4 1c             	add    esp,0x1c
c000e94a:	6a 03                	push   0x3
c000e94c:	6a 02                	push   0x2
c000e94e:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000e954:	e8 e7 48 00 00       	call   c0013240 <VAS::allocatePages(int, int)>
c000e959:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000e960:	89 c6                	mov    esi,eax
c000e962:	e8 9c 09 00 00       	call   c000f303 <malloc>
c000e967:	81 c6 00 20 00 00    	add    esi,0x2000
c000e96d:	89 04 24             	mov    DWORD PTR [esp],eax
c000e970:	89 c7                	mov    edi,eax
c000e972:	e8 85 39 00 00       	call   c00122fc <TSS::TSS()>
c000e977:	83 c4 0c             	add    esp,0xc
c000e97a:	68 86 05 02 c0       	push   0xc0020586
c000e97f:	56                   	push   esi
c000e980:	57                   	push   edi
c000e981:	e8 ba 39 00 00       	call   c0012340 <TSS::setup(unsigned long, unsigned long)>
c000e986:	89 c6                	mov    esi,eax
c000e988:	58                   	pop    eax
c000e989:	5a                   	pop    edx
c000e98a:	6a 00                	push   0x0
c000e98c:	8d 44 24 14          	lea    eax,[esp+0x14]
c000e990:	50                   	push   eax
c000e991:	e8 ce fb ff ff       	call   c000e564 <IDTEntry::IDTEntry(bool)>
c000e996:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e99a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000e99f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000e9a6:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000e9ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e9b0:	80 ce 05             	or     dh,0x5
c000e9b3:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000e9b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e9ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e9be:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000e9c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000e9c4:	e8 87 fc ff ff       	call   c000e650 <IDT::flush()>
c000e9c9:	83 c4 20             	add    esp,0x20
c000e9cc:	5b                   	pop    ebx
c000e9cd:	5e                   	pop    esi
c000e9ce:	5f                   	pop    edi
c000e9cf:	c3                   	ret    

c000e9d0 <CPU::current()>:
c000e9d0:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000e9d5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e9db:	c3                   	ret    

c000e9dc <operator new(unsigned long)>:
c000e9dc:	e9 22 09 00 00       	jmp    c000f303 <malloc>

c000e9e1 <operator delete(void*)>:
c000e9e1:	e9 3d 09 00 00       	jmp    c000f323 <rfree>

c000e9e6 <disableIRQs()>:
c000e9e6:	fa                   	cli    
c000e9e7:	c3                   	ret    

c000e9e8 <enableIRQs()>:
c000e9e8:	fb                   	sti    
c000e9e9:	c3                   	ret    

c000e9ea <lockScheduler()>:
c000e9ea:	fa                   	cli    
c000e9eb:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c000e9f1:	c3                   	ret    

c000e9f2 <unlockScheduler()>:
c000e9f2:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000e9f9:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000ea00:	75 01                	jne    c000ea03 <unlockScheduler()+0x11>
c000ea02:	fb                   	sti    
c000ea03:	c3                   	ret    

c000ea04 <lockStuff()>:
c000ea04:	fa                   	cli    
c000ea05:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c000ea0b:	ff 05 cc d6 02 c0    	inc    DWORD PTR ds:0xc002d6cc
c000ea11:	c3                   	ret    

c000ea12 <unlockStuff()>:
c000ea12:	83 ec 0c             	sub    esp,0xc
c000ea15:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c000ea1a:	48                   	dec    eax
c000ea1b:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c000ea20:	75 18                	jne    c000ea3a <unlockStuff()+0x28>
c000ea22:	83 3d c8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c8,0x0
c000ea29:	74 0f                	je     c000ea3a <unlockStuff()+0x28>
c000ea2b:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c000ea35:	e8 4a 78 00 00       	call   c0016284 <schedule()>
c000ea3a:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000ea41:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000ea48:	75 01                	jne    c000ea4b <unlockStuff()+0x39>
c000ea4a:	fb                   	sti    
c000ea4b:	83 c4 0c             	add    esp,0xc
c000ea4e:	c3                   	ret    

c000ea4f <Virt::getAKernelVAS()>:
c000ea4f:	a1 f0 ce 02 c0       	mov    eax,ds:0xc002cef0
c000ea54:	c3                   	ret    

c000ea55 <__not_memcpy>:
c000ea55:	57                   	push   edi
c000ea56:	56                   	push   esi
c000ea57:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ea5f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ea63:	89 c7                	mov    edi,eax
c000ea65:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ea67:	5e                   	pop    esi
c000ea68:	5f                   	pop    edi
c000ea69:	c3                   	ret    

c000ea6a <KeFormatDate(char*, int, int, int, int, bool)>:
c000ea6a:	55                   	push   ebp
c000ea6b:	b9 0a 00 00 00       	mov    ecx,0xa
c000ea70:	57                   	push   edi
c000ea71:	56                   	push   esi
c000ea72:	53                   	push   ebx
c000ea73:	bb e8 03 00 00       	mov    ebx,0x3e8
c000ea78:	81 ec ac 00 00 00    	sub    esp,0xac
c000ea7e:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000ea85:	c6 44 24 20 00       	mov    BYTE PTR [esp+0x20],0x0
c000ea8a:	99                   	cdq    
c000ea8b:	f7 f9                	idiv   ecx
c000ea8d:	89 d5                	mov    ebp,edx
c000ea8f:	99                   	cdq    
c000ea90:	f7 f9                	idiv   ecx
c000ea92:	8d 42 30             	lea    eax,[edx+0x30]
c000ea95:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000ea99:	8d 45 30             	lea    eax,[ebp+0x30]
c000ea9c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c000eaa0:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000eaa7:	99                   	cdq    
c000eaa8:	f7 fb                	idiv   ebx
c000eaaa:	bb 64 00 00 00       	mov    ebx,0x64
c000eaaf:	99                   	cdq    
c000eab0:	f7 f9                	idiv   ecx
c000eab2:	8d 42 30             	lea    eax,[edx+0x30]
c000eab5:	88 44 24 06          	mov    BYTE PTR [esp+0x6],al
c000eab9:	8b 84 24 d0 00 00 00 	mov    eax,DWORD PTR [esp+0xd0]
c000eac0:	99                   	cdq    
c000eac1:	f7 fb                	idiv   ebx
c000eac3:	31 db                	xor    ebx,ebx
c000eac5:	99                   	cdq    
c000eac6:	f7 f9                	idiv   ecx
c000eac8:	8d 42 30             	lea    eax,[edx+0x30]
c000eacb:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000eacf:	0f b6 84 24 d4 00 00 00 	movzx  eax,BYTE PTR [esp+0xd4]
c000ead7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000eadb:	0f be 8b a4 cd 02 c0 	movsx  ecx,BYTE PTR [ebx-0x3ffd325c]
c000eae2:	83 f9 59             	cmp    ecx,0x59
c000eae5:	74 1c                	je     c000eb03 <KeFormatDate(char*, int, int, int, int, bool)+0x99>
c000eae7:	8b ac 24 cc 00 00 00 	mov    ebp,DWORD PTR [esp+0xcc]
c000eaee:	83 f9 4d             	cmp    ecx,0x4d
c000eaf1:	0f 84 e3 00 00 00    	je     c000ebda <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000eaf7:	8b ac 24 c8 00 00 00 	mov    ebp,DWORD PTR [esp+0xc8]
c000eafe:	e9 d7 00 00 00       	jmp    c000ebda <KeFormatDate(char*, int, int, int, int, bool)+0x170>
c000eb03:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000eb08:	74 27                	je     c000eb31 <KeFormatDate(char*, int, int, int, int, bool)+0xc7>
c000eb0a:	8a 44 24 06          	mov    al,BYTE PTR [esp+0x6]
c000eb0e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eb13:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000eb17:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000eb1b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000eb1f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000eb23:	88 44 24 1d          	mov    BYTE PTR [esp+0x1d],al
c000eb27:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000eb2b:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c000eb2f:	eb 15                	jmp    c000eb46 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000eb31:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000eb35:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000eb39:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c000eb3d:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c000eb41:	c6 44 24 1d 00       	mov    BYTE PTR [esp+0x1d],0x0
c000eb46:	50                   	push   eax
c000eb47:	50                   	push   eax
c000eb48:	8d 7c 24 23          	lea    edi,[esp+0x23]
c000eb4c:	57                   	push   edi
c000eb4d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c000eb51:	56                   	push   esi
c000eb52:	e8 e9 1c ff ff       	call   c0000840 <strcat>
c000eb57:	83 c4 10             	add    esp,0x10
c000eb5a:	83 fb 02             	cmp    ebx,0x2
c000eb5d:	74 1a                	je     c000eb79 <KeFormatDate(char*, int, int, int, int, bool)+0x10f>
c000eb5f:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000eb64:	a1 a8 cd 02 c0       	mov    eax,ds:0xc002cda8
c000eb69:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c000eb6d:	55                   	push   ebp
c000eb6e:	55                   	push   ebp
c000eb6f:	57                   	push   edi
c000eb70:	56                   	push   esi
c000eb71:	e8 ca 1c ff ff       	call   c0000840 <strcat>
c000eb76:	83 c4 10             	add    esp,0x10
c000eb79:	43                   	inc    ebx
c000eb7a:	83 fb 03             	cmp    ebx,0x3
c000eb7d:	0f 85 58 ff ff ff    	jne    c000eadb <KeFormatDate(char*, int, int, int, int, bool)+0x71>
c000eb83:	51                   	push   ecx
c000eb84:	ff b4 24 c8 00 00 00 	push   DWORD PTR [esp+0xc8]
c000eb8b:	6a 00                	push   0x0
c000eb8d:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000eb94:	e8 57 19 ff ff       	call   c00004f0 <memset>
c000eb99:	89 34 24             	mov    DWORD PTR [esp],esi
c000eb9c:	e8 cf 19 ff ff       	call   c0000570 <strlen>
c000eba1:	83 c4 10             	add    esp,0x10
c000eba4:	40                   	inc    eax
c000eba5:	39 84 24 c4 00 00 00 	cmp    DWORD PTR [esp+0xc4],eax
c000ebac:	72 17                	jb     c000ebc5 <KeFormatDate(char*, int, int, int, int, bool)+0x15b>
c000ebae:	52                   	push   edx
c000ebaf:	52                   	push   edx
c000ebb0:	56                   	push   esi
c000ebb1:	ff b4 24 cc 00 00 00 	push   DWORD PTR [esp+0xcc]
c000ebb8:	e8 83 1a ff ff       	call   c0000640 <strcpy>
c000ebbd:	83 c4 10             	add    esp,0x10
c000ebc0:	e9 8a 00 00 00       	jmp    c000ec4f <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000ebc5:	8b 84 24 c4 00 00 00 	mov    eax,DWORD PTR [esp+0xc4]
c000ebcc:	8b bc 24 c0 00 00 00 	mov    edi,DWORD PTR [esp+0xc0]
c000ebd3:	8d 48 ff             	lea    ecx,[eax-0x1]
c000ebd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ebd8:	eb 75                	jmp    c000ec4f <KeFormatDate(char*, int, int, int, int, bool)+0x1e5>
c000ebda:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000ebde:	89 ef                	mov    edi,ebp
c000ebe0:	50                   	push   eax
c000ebe1:	c1 ff 1f             	sar    edi,0x1f
c000ebe4:	50                   	push   eax
c000ebe5:	57                   	push   edi
c000ebe6:	55                   	push   ebp
c000ebe7:	e8 70 04 00 00       	call   c000f05c <KeGetDigitsInNumber(long long)>
c000ebec:	83 c4 10             	add    esp,0x10
c000ebef:	48                   	dec    eax
c000ebf0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ebf4:	75 1c                	jne    c000ec12 <KeFormatDate(char*, int, int, int, int, bool)+0x1a8>
c000ebf6:	83 f9 44             	cmp    ecx,0x44
c000ebf9:	75 09                	jne    c000ec04 <KeFormatDate(char*, int, int, int, int, bool)+0x19a>
c000ebfb:	80 3d c0 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cdc0,0x0
c000ec02:	eb 0c                	jmp    c000ec10 <KeFormatDate(char*, int, int, int, int, bool)+0x1a6>
c000ec04:	83 f9 4d             	cmp    ecx,0x4d
c000ec07:	75 2b                	jne    c000ec34 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000ec09:	80 3d c1 cd 02 c0 00 	cmp    BYTE PTR ds:0xc002cdc1,0x0
c000ec10:	74 22                	je     c000ec34 <KeFormatDate(char*, int, int, int, int, bool)+0x1ca>
c000ec12:	89 e8                	mov    eax,ebp
c000ec14:	b9 0a 00 00 00       	mov    ecx,0xa
c000ec19:	99                   	cdq    
c000ec1a:	f7 f9                	idiv   ecx
c000ec1c:	89 d5                	mov    ebp,edx
c000ec1e:	99                   	cdq    
c000ec1f:	f7 f9                	idiv   ecx
c000ec21:	83 c2 30             	add    edx,0x30
c000ec24:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000ec28:	8d 55 30             	lea    edx,[ebp+0x30]
c000ec2b:	88 54 24 1c          	mov    BYTE PTR [esp+0x1c],dl
c000ec2f:	e9 0d ff ff ff       	jmp    c000eb41 <KeFormatDate(char*, int, int, int, int, bool)+0xd7>
c000ec34:	89 e8                	mov    eax,ebp
c000ec36:	b9 0a 00 00 00       	mov    ecx,0xa
c000ec3b:	99                   	cdq    
c000ec3c:	c6 44 24 1c 00       	mov    BYTE PTR [esp+0x1c],0x0
c000ec41:	f7 f9                	idiv   ecx
c000ec43:	83 c2 30             	add    edx,0x30
c000ec46:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c000ec4a:	e9 f7 fe ff ff       	jmp    c000eb46 <KeFormatDate(char*, int, int, int, int, bool)+0xdc>
c000ec4f:	81 c4 ac 00 00 00    	add    esp,0xac
c000ec55:	5b                   	pop    ebx
c000ec56:	5e                   	pop    esi
c000ec57:	5f                   	pop    edi
c000ec58:	5d                   	pop    ebp
c000ec59:	c3                   	ret    

c000ec5a <KeFormatShortDate(char*, int, int, int, int)>:
c000ec5a:	83 ec 14             	sub    esp,0x14
c000ec5d:	6a 00                	push   0x0
c000ec5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec67:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec6f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec73:	e8 f2 fd ff ff       	call   c000ea6a <KeFormatDate(char*, int, int, int, int, bool)>
c000ec78:	83 c4 2c             	add    esp,0x2c
c000ec7b:	c3                   	ret    

c000ec7c <KeFormatLongDate(char*, int, int, int, int)>:
c000ec7c:	83 ec 14             	sub    esp,0x14
c000ec7f:	6a 01                	push   0x1
c000ec81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ec95:	e8 d0 fd ff ff       	call   c000ea6a <KeFormatDate(char*, int, int, int, int, bool)>
c000ec9a:	83 c4 2c             	add    esp,0x2c
c000ec9d:	c3                   	ret    

c000ec9e <KeSetLocale(klocale_t)>:
c000ec9e:	57                   	push   edi
c000ec9f:	b9 09 00 00 00       	mov    ecx,0x9
c000eca4:	56                   	push   esi
c000eca5:	bf a0 cd 02 c0       	mov    edi,0xc002cda0
c000ecaa:	fc                   	cld    
c000ecab:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ecaf:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ecb1:	5e                   	pop    esi
c000ecb2:	5f                   	pop    edi
c000ecb3:	c3                   	ret    

c000ecb4 <KeInitialiseLocale()>:
c000ecb4:	57                   	push   edi
c000ecb5:	56                   	push   esi
c000ecb6:	83 ec 3c             	sub    esp,0x3c
c000ecb9:	c7 44 24 14 24 00 00 00 	mov    DWORD PTR [esp+0x14],0x24
c000ecc1:	c7 44 24 1c 2f 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2f
c000ecc9:	c7 44 24 20 2e 00 00 00 	mov    DWORD PTR [esp+0x20],0x2e
c000ecd1:	c7 44 24 24 2c 00 00 00 	mov    DWORD PTR [esp+0x24],0x2c
c000ecd9:	66 c7 44 24 28 02 03 	mov    WORD PTR [esp+0x28],0x302
c000ece0:	c7 44 24 2c 2d 00 00 00 	mov    DWORD PTR [esp+0x2c],0x2d
c000ece8:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c000ecf0:	66 c7 44 24 34 00 00 	mov    WORD PTR [esp+0x34],0x0
c000ecf7:	68 52 31 02 c0       	push   0xc0023152
c000ecfc:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ed00:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c000ed04:	50                   	push   eax
c000ed05:	e8 36 19 ff ff       	call   c0000640 <strcpy>
c000ed0a:	83 ec 20             	sub    esp,0x20
c000ed0d:	b9 09 00 00 00       	mov    ecx,0x9
c000ed12:	fc                   	cld    
c000ed13:	89 e7                	mov    edi,esp
c000ed15:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ed17:	e8 82 ff ff ff       	call   c000ec9e <KeSetLocale(klocale_t)>
c000ed1c:	83 c4 64             	add    esp,0x64
c000ed1f:	5e                   	pop    esi
c000ed20:	5f                   	pop    edi
c000ed21:	c3                   	ret    

c000ed22 <KeFormatCurrency(char*, int, long long, long long)>:
c000ed22:	c3                   	ret    

c000ed23 <KeFormatCurrency(char*, int, double)>:
c000ed23:	c3                   	ret    

c000ed24 <KeFormatNumber(char*, long long, long long)>:
c000ed24:	c3                   	ret    

c000ed25 <KeFormatNumber(char*, double)>:
c000ed25:	c3                   	ret    
c000ed26:	66 90                	xchg   ax,ax

c000ed28 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>:
c000ed28:	55                   	push   ebp
c000ed29:	57                   	push   edi
c000ed2a:	56                   	push   esi
c000ed2b:	53                   	push   ebx
c000ed2c:	83 ec 5c             	sub    esp,0x5c
c000ed2f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed33:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ed37:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000ed3b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ed3f:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000ed43:	bb 8f 1f 02 c0       	mov    ebx,0xc0021f8f
c000ed48:	bd 11 00 00 00       	mov    ebp,0x11
c000ed4d:	89 d0                	mov    eax,edx
c000ed4f:	83 e0 01             	and    eax,0x1
c000ed52:	74 10                	je     c000ed64 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x3c>
c000ed54:	8a 03                	mov    al,BYTE PTR [ebx]
c000ed56:	88 02                	mov    BYTE PTR [edx],al
c000ed58:	8d 52 01             	lea    edx,[edx+0x1]
c000ed5b:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000ed5e:	83 ed 01             	sub    ebp,0x1
c000ed61:	8d 76 00             	lea    esi,[esi+0x0]
c000ed64:	89 d0                	mov    eax,edx
c000ed66:	83 e0 02             	and    eax,0x2
c000ed69:	74 11                	je     c000ed7c <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x54>
c000ed6b:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000ed6e:	66 89 02             	mov    WORD PTR [edx],ax
c000ed71:	8d 52 02             	lea    edx,[edx+0x2]
c000ed74:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000ed77:	83 ed 02             	sub    ebp,0x2
c000ed7a:	66 90                	xchg   ax,ax
c000ed7c:	89 e8                	mov    eax,ebp
c000ed7e:	c1 e8 02             	shr    eax,0x2
c000ed81:	fc                   	cld    
c000ed82:	89 d7                	mov    edi,edx
c000ed84:	89 de                	mov    esi,ebx
c000ed86:	89 c1                	mov    ecx,eax
c000ed88:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ed8a:	89 f3                	mov    ebx,esi
c000ed8c:	89 fa                	mov    edx,edi
c000ed8e:	b9 00 00 00 00       	mov    ecx,0x0
c000ed93:	89 e8                	mov    eax,ebp
c000ed95:	83 e0 02             	and    eax,0x2
c000ed98:	74 0e                	je     c000eda8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x80>
c000ed9a:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000ed9e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000eda2:	8d 41 02             	lea    eax,[ecx+0x2]
c000eda5:	89 c1                	mov    ecx,eax
c000eda7:	90                   	nop
c000eda8:	89 e8                	mov    eax,ebp
c000edaa:	83 e0 01             	and    eax,0x1
c000edad:	74 09                	je     c000edb8 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x90>
c000edaf:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000edb2:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000edb5:	8d 76 00             	lea    esi,[esi+0x0]
c000edb8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000edbc:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000edc0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000edc4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000edc8:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000edcc:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000edd0:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000edd5:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000edd9:	89 c2                	mov    edx,eax
c000eddb:	c1 fa 1f             	sar    edx,0x1f
c000edde:	52                   	push   edx
c000eddf:	50                   	push   eax
c000ede0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ede4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ede8:	e8 c7 1d 01 00       	call   c0020bb4 <__udivdi3>
c000eded:	83 c4 10             	add    esp,0x10
c000edf0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000edf4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000edf8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000edfc:	80 f4 00             	xor    ah,0x0
c000edff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ee03:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ee07:	80 f4 00             	xor    ah,0x0
c000ee0a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000ee0e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000ee12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000ee16:	89 f8                	mov    eax,edi
c000ee18:	09 f0                	or     eax,esi
c000ee1a:	74 04                	je     c000ee20 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xf8>
c000ee1c:	eb b2                	jmp    c000edd0 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0xa8>
c000ee1e:	66 90                	xchg   ax,ax
c000ee20:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ee24:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000ee27:	90                   	nop
c000ee28:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000ee2c:	89 c1                	mov    ecx,eax
c000ee2e:	89 c3                	mov    ebx,eax
c000ee30:	c1 fb 1f             	sar    ebx,0x1f
c000ee33:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee37:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee3b:	53                   	push   ebx
c000ee3c:	51                   	push   ecx
c000ee3d:	52                   	push   edx
c000ee3e:	50                   	push   eax
c000ee3f:	e8 70 1e 01 00       	call   c0020cb4 <__umoddi3>
c000ee44:	83 c4 10             	add    esp,0x10
c000ee47:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000ee4c:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000ee50:	01 c8                	add    eax,ecx
c000ee52:	8a 10                	mov    dl,BYTE PTR [eax]
c000ee54:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ee58:	88 10                	mov    BYTE PTR [eax],dl
c000ee5a:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000ee5e:	89 c2                	mov    edx,eax
c000ee60:	c1 fa 1f             	sar    edx,0x1f
c000ee63:	52                   	push   edx
c000ee64:	50                   	push   eax
c000ee65:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ee69:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ee6d:	e8 42 1d 01 00       	call   c0020bb4 <__udivdi3>
c000ee72:	83 c4 10             	add    esp,0x10
c000ee75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ee7d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee81:	80 f4 00             	xor    ah,0x0
c000ee84:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ee88:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ee8c:	80 f4 00             	xor    ah,0x0
c000ee8f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000ee93:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ee97:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000ee9b:	89 f8                	mov    eax,edi
c000ee9d:	09 f0                	or     eax,esi
c000ee9f:	74 03                	je     c000eea4 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x17c>
c000eea1:	eb 85                	jmp    c000ee28 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)+0x100>
c000eea3:	90                   	nop
c000eea4:	90                   	nop
c000eea5:	83 c4 5c             	add    esp,0x5c
c000eea8:	5b                   	pop    ebx
c000eea9:	5e                   	pop    esi
c000eeaa:	5f                   	pop    edi
c000eeab:	5d                   	pop    ebp
c000eeac:	c3                   	ret    
c000eead:	8d 76 00             	lea    esi,[esi+0x0]

c000eeb0 <KeBasedSignedIntegerToString(long long, char*, int)>:
c000eeb0:	55                   	push   ebp
c000eeb1:	57                   	push   edi
c000eeb2:	56                   	push   esi
c000eeb3:	53                   	push   ebx
c000eeb4:	83 ec 5c             	sub    esp,0x5c
c000eeb7:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000eebb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eebf:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c000eec3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000eec7:	8d 54 24 2f          	lea    edx,[esp+0x2f]
c000eecb:	bb 8f 1f 02 c0       	mov    ebx,0xc0021f8f
c000eed0:	bd 11 00 00 00       	mov    ebp,0x11
c000eed5:	89 d0                	mov    eax,edx
c000eed7:	83 e0 01             	and    eax,0x1
c000eeda:	74 10                	je     c000eeec <KeBasedSignedIntegerToString(long long, char*, int)+0x3c>
c000eedc:	8a 03                	mov    al,BYTE PTR [ebx]
c000eede:	88 02                	mov    BYTE PTR [edx],al
c000eee0:	8d 52 01             	lea    edx,[edx+0x1]
c000eee3:	8d 5b 01             	lea    ebx,[ebx+0x1]
c000eee6:	83 ed 01             	sub    ebp,0x1
c000eee9:	8d 76 00             	lea    esi,[esi+0x0]
c000eeec:	89 d0                	mov    eax,edx
c000eeee:	83 e0 02             	and    eax,0x2
c000eef1:	74 11                	je     c000ef04 <KeBasedSignedIntegerToString(long long, char*, int)+0x54>
c000eef3:	66 8b 03             	mov    ax,WORD PTR [ebx]
c000eef6:	66 89 02             	mov    WORD PTR [edx],ax
c000eef9:	8d 52 02             	lea    edx,[edx+0x2]
c000eefc:	8d 5b 02             	lea    ebx,[ebx+0x2]
c000eeff:	83 ed 02             	sub    ebp,0x2
c000ef02:	66 90                	xchg   ax,ax
c000ef04:	89 e8                	mov    eax,ebp
c000ef06:	c1 e8 02             	shr    eax,0x2
c000ef09:	fc                   	cld    
c000ef0a:	89 d7                	mov    edi,edx
c000ef0c:	89 de                	mov    esi,ebx
c000ef0e:	89 c1                	mov    ecx,eax
c000ef10:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef12:	89 f3                	mov    ebx,esi
c000ef14:	89 fa                	mov    edx,edi
c000ef16:	b9 00 00 00 00       	mov    ecx,0x0
c000ef1b:	89 e8                	mov    eax,ebp
c000ef1d:	83 e0 02             	and    eax,0x2
c000ef20:	74 0e                	je     c000ef30 <KeBasedSignedIntegerToString(long long, char*, int)+0x80>
c000ef22:	66 8b 04 0b          	mov    ax,WORD PTR [ebx+ecx*1]
c000ef26:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c000ef2a:	8d 41 02             	lea    eax,[ecx+0x2]
c000ef2d:	89 c1                	mov    ecx,eax
c000ef2f:	90                   	nop
c000ef30:	89 e8                	mov    eax,ebp
c000ef32:	83 e0 01             	and    eax,0x1
c000ef35:	74 09                	je     c000ef40 <KeBasedSignedIntegerToString(long long, char*, int)+0x90>
c000ef37:	8a 04 0b             	mov    al,BYTE PTR [ebx+ecx*1]
c000ef3a:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c000ef3d:	8d 76 00             	lea    esi,[esi+0x0]
c000ef40:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000ef44:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ef48:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c000ef4d:	79 1d                	jns    c000ef6c <KeBasedSignedIntegerToString(long long, char*, int)+0xbc>
c000ef4f:	f7 5c 24 18          	neg    DWORD PTR [esp+0x18]
c000ef53:	83 54 24 1c 00       	adc    DWORD PTR [esp+0x1c],0x0
c000ef58:	f7 5c 24 1c          	neg    DWORD PTR [esp+0x1c]
c000ef5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000ef60:	8d 50 01             	lea    edx,[eax+0x1]
c000ef63:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000ef67:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
c000ef6a:	66 90                	xchg   ax,ax
c000ef6c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef70:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef74:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef78:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000ef7c:	83 44 24 4c 01       	add    DWORD PTR [esp+0x4c],0x1
c000ef81:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000ef85:	89 c2                	mov    edx,eax
c000ef87:	c1 fa 1f             	sar    edx,0x1f
c000ef8a:	52                   	push   edx
c000ef8b:	50                   	push   eax
c000ef8c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ef90:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ef94:	e8 1b 1c 01 00       	call   c0020bb4 <__udivdi3>
c000ef99:	83 c4 10             	add    esp,0x10
c000ef9c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000efa0:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000efa4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efa8:	80 f4 00             	xor    ah,0x0
c000efab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000efaf:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000efb3:	80 f4 00             	xor    ah,0x0
c000efb6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000efba:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000efbe:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000efc2:	89 f8                	mov    eax,edi
c000efc4:	09 f0                	or     eax,esi
c000efc6:	74 04                	je     c000efcc <KeBasedSignedIntegerToString(long long, char*, int)+0x11c>
c000efc8:	eb b2                	jmp    c000ef7c <KeBasedSignedIntegerToString(long long, char*, int)+0xcc>
c000efca:	66 90                	xchg   ax,ax
c000efcc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000efd0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000efd3:	90                   	nop
c000efd4:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000efd8:	89 c1                	mov    ecx,eax
c000efda:	89 c3                	mov    ebx,eax
c000efdc:	c1 fb 1f             	sar    ebx,0x1f
c000efdf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000efe3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000efe7:	53                   	push   ebx
c000efe8:	51                   	push   ecx
c000efe9:	52                   	push   edx
c000efea:	50                   	push   eax
c000efeb:	e8 44 1a 01 00       	call   c0020a34 <__moddi3>
c000eff0:	83 c4 10             	add    esp,0x10
c000eff3:	83 6c 24 4c 01       	sub    DWORD PTR [esp+0x4c],0x1
c000eff8:	8d 4c 24 2f          	lea    ecx,[esp+0x2f]
c000effc:	01 c8                	add    eax,ecx
c000effe:	8a 10                	mov    dl,BYTE PTR [eax]
c000f000:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f004:	88 10                	mov    BYTE PTR [eax],dl
c000f006:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c000f00a:	89 c2                	mov    edx,eax
c000f00c:	c1 fa 1f             	sar    edx,0x1f
c000f00f:	52                   	push   edx
c000f010:	50                   	push   eax
c000f011:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f015:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f019:	e8 ca 18 01 00       	call   c00208e8 <__divdi3>
c000f01e:	83 c4 10             	add    esp,0x10
c000f021:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f025:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f029:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f02d:	80 f4 00             	xor    ah,0x0
c000f030:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f034:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f038:	80 f4 00             	xor    ah,0x0
c000f03b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f03f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000f043:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f047:	89 f8                	mov    eax,edi
c000f049:	09 f0                	or     eax,esi
c000f04b:	74 03                	je     c000f050 <KeBasedSignedIntegerToString(long long, char*, int)+0x1a0>
c000f04d:	eb 85                	jmp    c000efd4 <KeBasedSignedIntegerToString(long long, char*, int)+0x124>
c000f04f:	90                   	nop
c000f050:	90                   	nop
c000f051:	83 c4 5c             	add    esp,0x5c
c000f054:	5b                   	pop    ebx
c000f055:	5e                   	pop    esi
c000f056:	5f                   	pop    edi
c000f057:	5d                   	pop    ebp
c000f058:	c3                   	ret    
c000f059:	8d 76 00             	lea    esi,[esi+0x0]

c000f05c <KeGetDigitsInNumber(long long)>:
c000f05c:	56                   	push   esi
c000f05d:	53                   	push   ebx
c000f05e:	83 ec 24             	sub    esp,0x24
c000f061:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f065:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f069:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f06d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f071:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000f079:	8d 76 00             	lea    esi,[esi+0x0]
c000f07c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f080:	80 f4 00             	xor    ah,0x0
c000f083:	89 c3                	mov    ebx,eax
c000f085:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f089:	80 f4 00             	xor    ah,0x0
c000f08c:	89 c6                	mov    esi,eax
c000f08e:	89 f0                	mov    eax,esi
c000f090:	09 d8                	or     eax,ebx
c000f092:	74 28                	je     c000f0bc <KeGetDigitsInNumber(long long)+0x60>
c000f094:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f098:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f09c:	6a 00                	push   0x0
c000f09e:	6a 0a                	push   0xa
c000f0a0:	52                   	push   edx
c000f0a1:	50                   	push   eax
c000f0a2:	e8 41 18 01 00       	call   c00208e8 <__divdi3>
c000f0a7:	83 c4 10             	add    esp,0x10
c000f0aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f0ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f0b2:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000f0b7:	eb c3                	jmp    c000f07c <KeGetDigitsInNumber(long long)+0x20>
c000f0b9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000f0c0:	83 c4 24             	add    esp,0x24
c000f0c3:	5b                   	pop    ebx
c000f0c4:	5e                   	pop    esi
c000f0c5:	c3                   	ret    
c000f0c6:	66 90                	xchg   ax,ax

c000f0c8 <KeItoa(unsigned long long, char*)>:
c000f0c8:	83 ec 1c             	sub    esp,0x1c
c000f0cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f0d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f0d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f0db:	6a 0a                	push   0xa
c000f0dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f0e1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f0e9:	e8 3a fc ff ff       	call   c000ed28 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f0ee:	83 c4 10             	add    esp,0x10
c000f0f1:	90                   	nop
c000f0f2:	83 c4 1c             	add    esp,0x1c
c000f0f5:	c3                   	ret    
c000f0f6:	66 90                	xchg   ax,ax

c000f0f8 <KeItoa(long long, char*)>:
c000f0f8:	83 ec 1c             	sub    esp,0x1c
c000f0fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f0ff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f103:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f107:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f10b:	6a 0a                	push   0xa
c000f10d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f115:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f119:	e8 92 fd ff ff       	call   c000eeb0 <KeBasedSignedIntegerToString(long long, char*, int)>
c000f11e:	83 c4 10             	add    esp,0x10
c000f121:	90                   	nop
c000f122:	83 c4 1c             	add    esp,0x1c
c000f125:	c3                   	ret    
c000f126:	66 90                	xchg   ax,ax

c000f128 <KeXtoa(unsigned long long, char*)>:
c000f128:	83 ec 1c             	sub    esp,0x1c
c000f12b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f12f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000f133:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f137:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f13b:	6a 10                	push   0x10
c000f13d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f141:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f145:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f149:	e8 da fb ff ff       	call   c000ed28 <KeBasedUnsignedIntegerToString(unsigned long long, char*, int)>
c000f14e:	83 c4 10             	add    esp,0x10
c000f151:	90                   	nop
c000f152:	83 c4 1c             	add    esp,0x1c
c000f155:	c3                   	ret    

c000f156 <sbrk>:
c000f156:	55                   	push   ebp
c000f157:	57                   	push   edi
c000f158:	56                   	push   esi
c000f159:	53                   	push   ebx
c000f15a:	83 ec 1c             	sub    esp,0x1c
c000f15d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f161:	85 c0                	test   eax,eax
c000f163:	74 61                	je     c000f1c6 <sbrk+0x70>
c000f165:	78 66                	js     c000f1cd <sbrk+0x77>
c000f167:	8b 15 90 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025790
c000f16d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f171:	05 ff 0f 00 00       	add    eax,0xfff
c000f176:	89 c5                	mov    ebp,eax
c000f178:	78 6b                	js     c000f1e5 <sbrk+0x8f>
c000f17a:	c1 fd 0c             	sar    ebp,0xc
c000f17d:	bb 00 00 00 00       	mov    ebx,0x0
c000f182:	8b 35 f0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002cef0
c000f188:	8b 3d 90 57 02 c0    	mov    edi,DWORD PTR ds:0xc0025790
c000f18e:	e8 ab 06 00 00       	call   c000f83e <Phys::allocatePage()>
c000f193:	68 01 04 00 00       	push   0x401
c000f198:	57                   	push   edi
c000f199:	50                   	push   eax
c000f19a:	56                   	push   esi
c000f19b:	e8 9c 3f 00 00       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f1a0:	81 05 90 57 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0025790,0x1000
c000f1aa:	83 c3 01             	add    ebx,0x1
c000f1ad:	83 c4 10             	add    esp,0x10
c000f1b0:	39 dd                	cmp    ebp,ebx
c000f1b2:	75 ce                	jne    c000f182 <sbrk+0x2c>
c000f1b4:	0f 20 d8             	mov    eax,cr3
c000f1b7:	0f 22 d8             	mov    cr3,eax
c000f1ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f1be:	83 c4 1c             	add    esp,0x1c
c000f1c1:	5b                   	pop    ebx
c000f1c2:	5e                   	pop    esi
c000f1c3:	5f                   	pop    edi
c000f1c4:	5d                   	pop    ebp
c000f1c5:	c3                   	ret    
c000f1c6:	a1 90 57 02 c0       	mov    eax,ds:0xc0025790
c000f1cb:	eb f1                	jmp    c000f1be <sbrk+0x68>
c000f1cd:	83 ec 08             	sub    esp,0x8
c000f1d0:	50                   	push   eax
c000f1d1:	68 58 31 02 c0       	push   0xc0023158
c000f1d6:	e8 89 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f1db:	83 c4 10             	add    esp,0x10
c000f1de:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f1e3:	eb d9                	jmp    c000f1be <sbrk+0x68>
c000f1e5:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c000f1eb:	eb 8d                	jmp    c000f17a <sbrk+0x24>

c000f1ed <sbrk_thunk>:
c000f1ed:	83 ec 0c             	sub    esp,0xc
c000f1f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f1f4:	3d ff bf 00 00       	cmp    eax,0xbfff
c000f1f9:	7f 10                	jg     c000f20b <sbrk_thunk+0x1e>
c000f1fb:	83 ec 0c             	sub    esp,0xc
c000f1fe:	50                   	push   eax
c000f1ff:	e8 52 ff ff ff       	call   c000f156 <sbrk>
c000f204:	83 c4 10             	add    esp,0x10
c000f207:	83 c4 0c             	add    esp,0xc
c000f20a:	c3                   	ret    
c000f20b:	83 ec 08             	sub    esp,0x8
c000f20e:	50                   	push   eax
c000f20f:	68 88 31 02 c0       	push   0xc0023188
c000f214:	e8 4b 7d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f219:	83 c4 10             	add    esp,0x10
c000f21c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f221:	eb e4                	jmp    c000f207 <sbrk_thunk+0x1a>

c000f223 <mmap>:
c000f223:	55                   	push   ebp
c000f224:	57                   	push   edi
c000f225:	56                   	push   esi
c000f226:	53                   	push   ebx
c000f227:	83 ec 18             	sub    esp,0x18
c000f22a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f22e:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f234:	89 fb                	mov    ebx,edi
c000f236:	c1 eb 0c             	shr    ebx,0xc
c000f239:	53                   	push   ebx
c000f23a:	e8 1a 38 00 00       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c000f23f:	89 c5                	mov    ebp,eax
c000f241:	83 c4 10             	add    esp,0x10
c000f244:	85 db                	test   ebx,ebx
c000f246:	7e 2f                	jle    c000f277 <mmap+0x54>
c000f248:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c000f24e:	01 c7                	add    edi,eax
c000f250:	89 c3                	mov    ebx,eax
c000f252:	8b 35 f0 ce 02 c0    	mov    esi,DWORD PTR ds:0xc002cef0
c000f258:	e8 e1 05 00 00       	call   c000f83e <Phys::allocatePage()>
c000f25d:	68 01 04 00 00       	push   0x401
c000f262:	53                   	push   ebx
c000f263:	50                   	push   eax
c000f264:	56                   	push   esi
c000f265:	e8 d2 3e 00 00       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f26a:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f270:	83 c4 10             	add    esp,0x10
c000f273:	39 fb                	cmp    ebx,edi
c000f275:	75 db                	jne    c000f252 <mmap+0x2f>
c000f277:	89 e8                	mov    eax,ebp
c000f279:	83 c4 0c             	add    esp,0xc
c000f27c:	5b                   	pop    ebx
c000f27d:	5e                   	pop    esi
c000f27e:	5f                   	pop    edi
c000f27f:	5d                   	pop    ebp
c000f280:	c3                   	ret    

c000f281 <munmap>:
c000f281:	83 ec 18             	sub    esp,0x18
c000f284:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f288:	e8 d4 3a 00 00       	call   c0012d61 <Virt::freeKernelVirtualPages(unsigned long)>
c000f28d:	b8 00 00 00 00       	mov    eax,0x0
c000f292:	83 c4 1c             	add    esp,0x1c
c000f295:	c3                   	ret    

c000f296 <liballoc_lock()>:
c000f296:	fa                   	cli    
c000f297:	83 05 d0 d6 02 c0 01 	add    DWORD PTR ds:0xc002d6d0,0x1
c000f29e:	b8 00 00 00 00       	mov    eax,0x0
c000f2a3:	c3                   	ret    

c000f2a4 <liballoc_unlock()>:
c000f2a4:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f2ac:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000f2b3:	75 01                	jne    c000f2b6 <liballoc_unlock()+0x12>
c000f2b5:	fb                   	sti    
c000f2b6:	b8 00 00 00 00       	mov    eax,0x0
c000f2bb:	c3                   	ret    

c000f2bc <liballoc_alloc(int)>:
c000f2bc:	83 ec 10             	sub    esp,0x10
c000f2bf:	6a 01                	push   0x1
c000f2c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2c5:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000f2cb:	e8 70 3f 00 00       	call   c0013240 <VAS::allocatePages(int, int)>
c000f2d0:	83 c4 1c             	add    esp,0x1c
c000f2d3:	c3                   	ret    

c000f2d4 <liballoc_free(void*, int)>:
c000f2d4:	83 ec 14             	sub    esp,0x14
c000f2d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f2db:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c000f2e1:	e8 b8 3b 00 00       	call   c0012e9e <VAS::freeAllocatedPages(unsigned long)>
c000f2e6:	b8 00 00 00 00       	mov    eax,0x0
c000f2eb:	83 c4 1c             	add    esp,0x1c
c000f2ee:	c3                   	ret    

c000f2ef <realloc>:
c000f2ef:	83 ec 14             	sub    esp,0x14
c000f2f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f2fa:	e8 58 24 ff ff       	call   c0001757 <dlrealloc>
c000f2ff:	83 c4 1c             	add    esp,0x1c
c000f302:	c3                   	ret    

c000f303 <malloc>:
c000f303:	83 ec 18             	sub    esp,0x18
c000f306:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f30a:	e8 0b 1f ff ff       	call   c000121a <dlmalloc>
c000f30f:	83 c4 1c             	add    esp,0x1c
c000f312:	c3                   	ret    

c000f313 <free>:
c000f313:	83 ec 18             	sub    esp,0x18
c000f316:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f31a:	e8 34 1a ff ff       	call   c0000d53 <dlfree>
c000f31f:	83 c4 1c             	add    esp,0x1c
c000f322:	c3                   	ret    

c000f323 <rfree>:
c000f323:	83 ec 18             	sub    esp,0x18
c000f326:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f32a:	e8 24 1a ff ff       	call   c0000d53 <dlfree>
c000f32f:	83 c4 1c             	add    esp,0x1c
c000f332:	c3                   	ret    

c000f333 <calloc>:
c000f333:	56                   	push   esi
c000f334:	53                   	push   ebx
c000f335:	83 ec 10             	sub    esp,0x10
c000f338:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f341:	53                   	push   ebx
c000f342:	e8 bc ff ff ff       	call   c000f303 <malloc>
c000f347:	89 c6                	mov    esi,eax
c000f349:	83 c4 0c             	add    esp,0xc
c000f34c:	53                   	push   ebx
c000f34d:	6a 00                	push   0x0
c000f34f:	50                   	push   eax
c000f350:	e8 9b 11 ff ff       	call   c00004f0 <memset>
c000f355:	89 f0                	mov    eax,esi
c000f357:	83 c4 14             	add    esp,0x14
c000f35a:	5b                   	pop    ebx
c000f35b:	5e                   	pop    esi
c000f35c:	c3                   	ret    
c000f35d:	66 90                	xchg   ax,ax
c000f35f:	90                   	nop

c000f360 <KeMailboxTryPost(Mailbox*, void*)>:
c000f360:	83 ec 10             	sub    esp,0x10
c000f363:	fa                   	cli    
c000f364:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f369:	83 c0 01             	add    eax,0x1
c000f36c:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000f371:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f376:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f37a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f37d:	85 c0                	test   eax,eax
c000f37f:	75 23                	jne    c000f3a4 <KeMailboxTryPost(Mailbox*, void*)+0x44>
c000f381:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f385:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f389:	89 10                	mov    DWORD PTR [eax],edx
c000f38b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f38f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f392:	8d 50 01             	lea    edx,[eax+0x1]
c000f395:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f399:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f39c:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f3a1:	8d 76 00             	lea    esi,[esi+0x0]
c000f3a4:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f3ac:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f3b1:	85 c0                	test   eax,eax
c000f3b3:	75 03                	jne    c000f3b8 <KeMailboxTryPost(Mailbox*, void*)+0x58>
c000f3b5:	fb                   	sti    
c000f3b6:	66 90                	xchg   ax,ax
c000f3b8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f3bc:	83 c4 10             	add    esp,0x10
c000f3bf:	c3                   	ret    

c000f3c0 <KeMailboxTryGet(Mailbox*, void**)>:
c000f3c0:	83 ec 10             	sub    esp,0x10
c000f3c3:	fa                   	cli    
c000f3c4:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f3c9:	83 c0 01             	add    eax,0x1
c000f3cc:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000f3d1:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f3d6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f3da:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f3dd:	83 f8 01             	cmp    eax,0x1
c000f3e0:	75 22                	jne    c000f404 <KeMailboxTryGet(Mailbox*, void**)+0x44>
c000f3e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f3e6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f3e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f3ec:	89 10                	mov    DWORD PTR [eax],edx
c000f3ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f3f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f3f5:	8d 50 ff             	lea    edx,[eax-0x1]
c000f3f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f3fc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000f3ff:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c000f404:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f40c:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f411:	85 c0                	test   eax,eax
c000f413:	75 03                	jne    c000f418 <KeMailboxTryGet(Mailbox*, void**)+0x58>
c000f415:	fb                   	sti    
c000f416:	66 90                	xchg   ax,ax
c000f418:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f41c:	83 c4 10             	add    esp,0x10
c000f41f:	c3                   	ret    

c000f420 <KeMailboxCreate()>:
c000f420:	83 ec 1c             	sub    esp,0x1c
c000f423:	83 ec 0c             	sub    esp,0xc
c000f426:	6a 08                	push   0x8
c000f428:	e8 d6 fe ff ff       	call   c000f303 <malloc>
c000f42d:	83 c4 10             	add    esp,0x10
c000f430:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f434:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f438:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f43e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f442:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000f449:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f44d:	83 c4 1c             	add    esp,0x1c
c000f450:	c3                   	ret    
c000f451:	8d 76 00             	lea    esi,[esi+0x0]

c000f454 <KeMailboxPost(Mailbox*, void*)>:
c000f454:	83 ec 1c             	sub    esp,0x1c
c000f457:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f45c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f460:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f464:	e8 f7 fe ff ff       	call   c000f360 <KeMailboxTryPost(Mailbox*, void*)>
c000f469:	83 c4 08             	add    esp,0x8
c000f46c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f470:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f474:	83 f0 01             	xor    eax,0x1
c000f477:	0f b6 c0             	movzx  eax,al
c000f47a:	85 c0                	test   eax,eax
c000f47c:	74 26                	je     c000f4a4 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f47e:	fa                   	cli    
c000f47f:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f484:	83 c0 01             	add    eax,0x1
c000f487:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000f48c:	e8 f3 6d 00 00       	call   c0016284 <schedule()>
c000f491:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f499:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f49e:	85 c0                	test   eax,eax
c000f4a0:	75 02                	jne    c000f4a4 <KeMailboxPost(Mailbox*, void*)+0x50>
c000f4a2:	fb                   	sti    
c000f4a3:	90                   	nop
c000f4a4:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f4a9:	85 c0                	test   eax,eax
c000f4ab:	75 03                	jne    c000f4b0 <KeMailboxPost(Mailbox*, void*)+0x5c>
c000f4ad:	eb ad                	jmp    c000f45c <KeMailboxPost(Mailbox*, void*)+0x8>
c000f4af:	90                   	nop
c000f4b0:	90                   	nop
c000f4b1:	83 c4 1c             	add    esp,0x1c
c000f4b4:	c3                   	ret    
c000f4b5:	8d 76 00             	lea    esi,[esi+0x0]

c000f4b8 <KeMailboxGet(Mailbox*, void**)>:
c000f4b8:	83 ec 1c             	sub    esp,0x1c
c000f4bb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c000f4c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f4c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000f4c8:	e8 f3 fe ff ff       	call   c000f3c0 <KeMailboxTryGet(Mailbox*, void**)>
c000f4cd:	83 c4 08             	add    esp,0x8
c000f4d0:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f4d4:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000f4d8:	83 f0 01             	xor    eax,0x1
c000f4db:	0f b6 c0             	movzx  eax,al
c000f4de:	85 c0                	test   eax,eax
c000f4e0:	74 26                	je     c000f508 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f4e2:	fa                   	cli    
c000f4e3:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f4e8:	83 c0 01             	add    eax,0x1
c000f4eb:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c000f4f0:	e8 8f 6d 00 00       	call   c0016284 <schedule()>
c000f4f5:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f4fd:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f502:	85 c0                	test   eax,eax
c000f504:	75 02                	jne    c000f508 <KeMailboxGet(Mailbox*, void**)+0x50>
c000f506:	fb                   	sti    
c000f507:	90                   	nop
c000f508:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000f50d:	85 c0                	test   eax,eax
c000f50f:	75 03                	jne    c000f514 <KeMailboxGet(Mailbox*, void**)+0x5c>
c000f511:	eb ad                	jmp    c000f4c0 <KeMailboxGet(Mailbox*, void**)+0x8>
c000f513:	90                   	nop
c000f514:	90                   	nop
c000f515:	83 c4 1c             	add    esp,0x1c
c000f518:	c3                   	ret    
c000f519:	8d 76 00             	lea    esi,[esi+0x0]

c000f51c <KeMailboxDestroy(Mailbox*)>:
c000f51c:	83 ec 0c             	sub    esp,0xc
c000f51f:	83 ec 0c             	sub    esp,0xc
c000f522:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f526:	e8 e8 fd ff ff       	call   c000f313 <free>
c000f52b:	83 c4 10             	add    esp,0x10
c000f52e:	90                   	nop
c000f52f:	83 c4 0c             	add    esp,0xc
c000f532:	c3                   	ret    

c000f533 <KeEntryPoint>:
c000f533:	57                   	push   edi
c000f534:	bf f9 03 00 00       	mov    edi,0x3f9
c000f539:	56                   	push   esi
c000f53a:	89 fa                	mov    edx,edi
c000f53c:	53                   	push   ebx
c000f53d:	31 f6                	xor    esi,esi
c000f53f:	83 ec 2c             	sub    esp,0x2c
c000f542:	a1 00 05 00 00       	mov    eax,ds:0x500
c000f547:	a3 c4 cd 02 c0       	mov    ds:0xc002cdc4,eax
c000f54c:	89 f0                	mov    eax,esi
c000f54e:	ee                   	out    dx,al
c000f54f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000f554:	b0 80                	mov    al,0x80
c000f556:	89 da                	mov    edx,ebx
c000f558:	ee                   	out    dx,al
c000f559:	b1 03                	mov    cl,0x3
c000f55b:	ba f8 03 00 00       	mov    edx,0x3f8
c000f560:	88 c8                	mov    al,cl
c000f562:	ee                   	out    dx,al
c000f563:	89 f0                	mov    eax,esi
c000f565:	89 fa                	mov    edx,edi
c000f567:	ee                   	out    dx,al
c000f568:	88 c8                	mov    al,cl
c000f56a:	89 da                	mov    edx,ebx
c000f56c:	ee                   	out    dx,al
c000f56d:	b0 c7                	mov    al,0xc7
c000f56f:	ba fa 03 00 00       	mov    edx,0x3fa
c000f574:	ee                   	out    dx,al
c000f575:	b0 0b                	mov    al,0xb
c000f577:	ba fc 03 00 00       	mov    edx,0x3fc
c000f57c:	ee                   	out    dx,al
c000f57d:	68 97 31 02 c0       	push   0xc0023197
c000f582:	e8 dd 79 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f587:	e8 10 d3 ff ff       	call   c000c89c <KeDisplaySplashScreen()>
c000f58c:	a1 24 05 00 00       	mov    eax,ds:0x524
c000f591:	05 ff 0f 00 00       	add    eax,0xfff
c000f596:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f59b:	89 04 24             	mov    DWORD PTR [esp],eax
c000f59e:	e8 2c 04 00 00       	call   c000f9cf <Phys::physicalMemorySetup(unsigned int)>
c000f5a3:	e8 8f 36 00 00       	call   c0012c37 <Virt::virtualMemorySetup()>
c000f5a8:	e8 39 d2 ff ff       	call   c000c7e6 <KeInitialiseAtexit()>
c000f5ad:	c7 04 24 ae 31 02 c0 	mov    DWORD PTR [esp],0xc00231ae
c000f5b4:	e8 ab 79 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f5b9:	58                   	pop    eax
c000f5ba:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000f5be:	53                   	push   ebx
c000f5bf:	e8 5a 39 00 00       	call   c0012f1e <VAS::VAS()>
c000f5c4:	c7 04 24 be 31 02 c0 	mov    DWORD PTR [esp],0xc00231be
c000f5cb:	89 1d f0 ce 02 c0    	mov    DWORD PTR ds:0xc002cef0,ebx
c000f5d1:	e8 8e 79 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f5d6:	e8 f3 17 01 00       	call   c0020dce <_init>
c000f5db:	c7 04 24 d2 31 02 c0 	mov    DWORD PTR [esp],0xc00231d2
c000f5e2:	e8 7d 79 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f5e7:	c7 04 24 6c 01 00 00 	mov    DWORD PTR [esp],0x16c
c000f5ee:	e8 10 fd ff ff       	call   c000f303 <malloc>
c000f5f3:	89 04 24             	mov    DWORD PTR [esp],eax
c000f5f6:	89 c6                	mov    esi,eax
c000f5f8:	e8 67 e3 ff ff       	call   c000d964 <Computer::Computer()>
c000f5fd:	5a                   	pop    edx
c000f5fe:	89 35 70 ad 02 c0    	mov    DWORD PTR ds:0xc002ad70,esi
c000f604:	59                   	pop    ecx
c000f605:	56                   	push   esi
c000f606:	68 e1 31 02 c0       	push   0xc00231e1
c000f60b:	e8 54 79 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f610:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c000f615:	8b 10                	mov    edx,DWORD PTR [eax]
c000f617:	53                   	push   ebx
c000f618:	6a 00                	push   0x0
c000f61a:	6a 00                	push   0x0
c000f61c:	50                   	push   eax
c000f61d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000f620:	83 c4 14             	add    esp,0x14
c000f623:	53                   	push   ebx
c000f624:	e8 ab 39 00 00       	call   c0012fd4 <VAS::~VAS()>
c000f629:	83 c4 30             	add    esp,0x30
c000f62c:	5b                   	pop    ebx
c000f62d:	5e                   	pop    esi
c000f62e:	5f                   	pop    edi
c000f62f:	c3                   	ret    

c000f630 <Mutex::Mutex()>:
c000f630:	83 ec 0c             	sub    esp,0xc
c000f633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f637:	83 ec 08             	sub    esp,0x8
c000f63a:	6a 01                	push   0x1
c000f63c:	50                   	push   eax
c000f63d:	e8 56 0c 00 00       	call   c0010298 <Semaphore::Semaphore(int)>
c000f642:	83 c4 10             	add    esp,0x10
c000f645:	90                   	nop
c000f646:	83 c4 0c             	add    esp,0xc
c000f649:	c3                   	ret    

c000f64a <KePanic(char const*)>:
c000f64a:	c6 05 c8 cd 02 c0 01 	mov    BYTE PTR ds:0xc002cdc8,0x1
c000f651:	e9 bb 9b 00 00       	jmp    c0019211 <HalPanic(char const*)>

c000f656 <Phys::allocateDMA(unsigned long)>:
c000f656:	55                   	push   ebp
c000f657:	31 ed                	xor    ebp,ebp
c000f659:	57                   	push   edi
c000f65a:	56                   	push   esi
c000f65b:	53                   	push   ebx
c000f65c:	31 db                	xor    ebx,ebx
c000f65e:	83 ec 1c             	sub    esp,0x1c
c000f661:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f665:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000f66d:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c000f673:	31 c0                	xor    eax,eax
c000f675:	c1 ef 0c             	shr    edi,0xc
c000f678:	eb 1b                	jmp    c000f695 <Phys::allocateDMA(unsigned long)+0x3f>
c000f67a:	85 c0                	test   eax,eax
c000f67c:	75 06                	jne    c000f684 <Phys::allocateDMA(unsigned long)+0x2e>
c000f67e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f682:	89 dd                	mov    ebp,ebx
c000f684:	8d 70 01             	lea    esi,[eax+0x1]
c000f687:	39 f7                	cmp    edi,esi
c000f689:	74 37                	je     c000f6c2 <Phys::allocateDMA(unsigned long)+0x6c>
c000f68b:	89 f0                	mov    eax,esi
c000f68d:	83 c3 01             	add    ebx,0x1
c000f690:	83 fb 0f             	cmp    ebx,0xf
c000f693:	7f 13                	jg     c000f6a8 <Phys::allocateDMA(unsigned long)+0x52>
c000f695:	80 bb e4 cd 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffd321c],0x0
c000f69c:	74 dc                	je     c000f67a <Phys::allocateDMA(unsigned long)+0x24>
c000f69e:	31 c0                	xor    eax,eax
c000f6a0:	83 c3 01             	add    ebx,0x1
c000f6a3:	83 fb 0f             	cmp    ebx,0xf
c000f6a6:	7e ed                	jle    c000f695 <Phys::allocateDMA(unsigned long)+0x3f>
c000f6a8:	83 ec 0c             	sub    esp,0xc
c000f6ab:	68 f8 31 02 c0       	push   0xc00231f8
c000f6b0:	e8 95 ff ff ff       	call   c000f64a <KePanic(char const*)>
c000f6b5:	83 c4 10             	add    esp,0x10
c000f6b8:	31 c0                	xor    eax,eax
c000f6ba:	83 c4 1c             	add    esp,0x1c
c000f6bd:	5b                   	pop    ebx
c000f6be:	5e                   	pop    esi
c000f6bf:	5f                   	pop    edi
c000f6c0:	5d                   	pop    ebp
c000f6c1:	c3                   	ret    
c000f6c2:	89 e9                	mov    ecx,ebp
c000f6c4:	c1 f9 04             	sar    ecx,0x4
c000f6c7:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000f6cb:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000f6cf:	89 ca                	mov    edx,ecx
c000f6d1:	83 ea 01             	sub    edx,0x1
c000f6d4:	79 03                	jns    c000f6d9 <Phys::allocateDMA(unsigned long)+0x83>
c000f6d6:	8d 51 0e             	lea    edx,[ecx+0xe]
c000f6d9:	c1 fa 04             	sar    edx,0x4
c000f6dc:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000f6e0:	74 08                	je     c000f6ea <Phys::allocateDMA(unsigned long)+0x94>
c000f6e2:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000f6e6:	31 c0                	xor    eax,eax
c000f6e8:	eb b6                	jmp    c000f6a0 <Phys::allocateDMA(unsigned long)+0x4a>
c000f6ea:	85 f6                	test   esi,esi
c000f6ec:	74 17                	je     c000f705 <Phys::allocateDMA(unsigned long)+0xaf>
c000f6ee:	8d 95 e4 cd 02 c0    	lea    edx,[ebp-0x3ffd321c]
c000f6f4:	8d 84 05 e5 cd 02 c0 	lea    eax,[ebp+eax*1-0x3ffd321b]
c000f6fb:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000f6fe:	83 c2 01             	add    edx,0x1
c000f701:	39 d0                	cmp    eax,edx
c000f703:	75 f6                	jne    c000f6fb <Phys::allocateDMA(unsigned long)+0xa5>
c000f705:	a1 dc cd 02 c0       	mov    eax,ds:0xc002cddc
c000f70a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f70e:	01 f8                	add    eax,edi
c000f710:	85 d2                	test   edx,edx
c000f712:	a3 dc cd 02 c0       	mov    ds:0xc002cddc,eax
c000f717:	74 17                	je     c000f730 <Phys::allocateDMA(unsigned long)+0xda>
c000f719:	83 ec 0c             	sub    esp,0xc
c000f71c:	68 f8 31 02 c0       	push   0xc00231f8
c000f721:	e8 24 ff ff ff       	call   c000f64a <KePanic(char const*)>
c000f726:	83 c4 10             	add    esp,0x10
c000f729:	89 f0                	mov    eax,esi
c000f72b:	e9 5d ff ff ff       	jmp    c000f68d <Phys::allocateDMA(unsigned long)+0x37>
c000f730:	c1 e5 0c             	shl    ebp,0xc
c000f733:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c000f739:	e9 7c ff ff ff       	jmp    c000f6ba <Phys::allocateDMA(unsigned long)+0x64>

c000f73e <Phys::freeDMA(unsigned long, unsigned long)>:
c000f73e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f742:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f748:	a1 dc cd 02 c0       	mov    eax,ds:0xc002cddc
c000f74d:	c1 ea 0c             	shr    edx,0xc
c000f750:	29 d0                	sub    eax,edx
c000f752:	a3 dc cd 02 c0       	mov    ds:0xc002cddc,eax
c000f757:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f75b:	05 00 00 ff 3d       	add    eax,0x3dff0000
c000f760:	c1 e8 0c             	shr    eax,0xc
c000f763:	85 d2                	test   edx,edx
c000f765:	74 11                	je     c000f778 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c000f767:	05 e4 cd 02 c0       	add    eax,0xc002cde4
c000f76c:	01 c2                	add    edx,eax
c000f76e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000f771:	83 c0 01             	add    eax,0x1
c000f774:	39 d0                	cmp    eax,edx
c000f776:	75 f6                	jne    c000f76e <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c000f778:	c3                   	ret    

c000f779 <Phys::setPageState(unsigned long, bool)>:
c000f779:	57                   	push   edi
c000f77a:	56                   	push   esi
c000f77b:	8b 35 94 57 02 c0    	mov    esi,DWORD PTR ds:0xc0025794
c000f781:	53                   	push   ebx
c000f782:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c000f787:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f78b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000f78f:	0f b6 c0             	movzx  eax,al
c000f792:	89 ca                	mov    edx,ecx
c000f794:	83 e1 07             	and    ecx,0x7
c000f797:	c1 ea 03             	shr    edx,0x3
c000f79a:	d3 c3                	rol    ebx,cl
c000f79c:	01 d6                	add    esi,edx
c000f79e:	d3 e0                	shl    eax,cl
c000f7a0:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c000f7a3:	21 fb                	and    ebx,edi
c000f7a5:	88 1e                	mov    BYTE PTR [esi],bl
c000f7a7:	8b 1d 94 57 02 c0    	mov    ebx,DWORD PTR ds:0xc0025794
c000f7ad:	01 da                	add    edx,ebx
c000f7af:	8a 0a                	mov    cl,BYTE PTR [edx]
c000f7b1:	09 c8                	or     eax,ecx
c000f7b3:	88 02                	mov    BYTE PTR [edx],al
c000f7b5:	5b                   	pop    ebx
c000f7b6:	5e                   	pop    esi
c000f7b7:	5f                   	pop    edi
c000f7b8:	c3                   	ret    

c000f7b9 <Phys::getPageState(unsigned long)>:
c000f7b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f7bd:	8b 15 94 57 02 c0    	mov    edx,DWORD PTR ds:0xc0025794
c000f7c3:	89 c8                	mov    eax,ecx
c000f7c5:	83 e1 07             	and    ecx,0x7
c000f7c8:	c1 e8 03             	shr    eax,0x3
c000f7cb:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000f7cf:	d3 f8                	sar    eax,cl
c000f7d1:	83 e0 01             	and    eax,0x1
c000f7d4:	c3                   	ret    

c000f7d5 <Phys::freePage(unsigned long)>:
c000f7d5:	53                   	push   ebx
c000f7d6:	83 ec 08             	sub    esp,0x8
c000f7d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f7dd:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c000f7e3:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000f7e9:	76 41                	jbe    c000f82c <Phys::freePage(unsigned long)+0x57>
c000f7eb:	c1 e8 0c             	shr    eax,0xc
c000f7ee:	50                   	push   eax
c000f7ef:	89 c3                	mov    ebx,eax
c000f7f1:	e8 c3 ff ff ff       	call   c000f7b9 <Phys::getPageState(unsigned long)>
c000f7f6:	5a                   	pop    edx
c000f7f7:	84 c0                	test   al,al
c000f7f9:	74 20                	je     c000f81b <Phys::freePage(unsigned long)+0x46>
c000f7fb:	83 ec 08             	sub    esp,0x8
c000f7fe:	a1 dc cd 02 c0       	mov    eax,ds:0xc002cddc
c000f803:	6a 00                	push   0x0
c000f805:	83 e8 01             	sub    eax,0x1
c000f808:	53                   	push   ebx
c000f809:	a3 dc cd 02 c0       	mov    ds:0xc002cddc,eax
c000f80e:	e8 66 ff ff ff       	call   c000f779 <Phys::setPageState(unsigned long, bool)>
c000f813:	83 c4 10             	add    esp,0x10
c000f816:	83 c4 08             	add    esp,0x8
c000f819:	5b                   	pop    ebx
c000f81a:	c3                   	ret    
c000f81b:	c7 44 24 10 fd 32 02 c0 	mov    DWORD PTR [esp+0x10],0xc00232fd
c000f823:	83 c4 08             	add    esp,0x8
c000f826:	5b                   	pop    ebx
c000f827:	e9 1e fe ff ff       	jmp    c000f64a <KePanic(char const*)>
c000f82c:	68 00 10 00 00       	push   0x1000
c000f831:	50                   	push   eax
c000f832:	e8 07 ff ff ff       	call   c000f73e <Phys::freeDMA(unsigned long, unsigned long)>
c000f837:	59                   	pop    ecx
c000f838:	5b                   	pop    ebx
c000f839:	83 c4 08             	add    esp,0x8
c000f83c:	5b                   	pop    ebx
c000f83d:	c3                   	ret    

c000f83e <Phys::allocatePage()>:
c000f83e:	56                   	push   esi
c000f83f:	53                   	push   ebx
c000f840:	83 ec 14             	sub    esp,0x14
c000f843:	8b 35 d0 cd 02 c0    	mov    esi,DWORD PTR ds:0xc002cdd0
c000f849:	89 f3                	mov    ebx,esi
c000f84b:	eb 0a                	jmp    c000f857 <Phys::allocatePage()+0x19>
c000f84d:	89 1d d0 cd 02 c0    	mov    DWORD PTR ds:0xc002cdd0,ebx
c000f853:	39 de                	cmp    esi,ebx
c000f855:	74 26                	je     c000f87d <Phys::allocatePage()+0x3f>
c000f857:	53                   	push   ebx
c000f858:	e8 5c ff ff ff       	call   c000f7b9 <Phys::getPageState(unsigned long)>
c000f85d:	59                   	pop    ecx
c000f85e:	84 c0                	test   al,al
c000f860:	74 67                	je     c000f8c9 <Phys::allocatePage()+0x8b>
c000f862:	83 c3 01             	add    ebx,0x1
c000f865:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000f86b:	75 e0                	jne    c000f84d <Phys::allocatePage()+0xf>
c000f86d:	31 db                	xor    ebx,ebx
c000f86f:	c7 05 d0 cd 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002cdd0,0x0
c000f879:	39 de                	cmp    esi,ebx
c000f87b:	75 da                	jne    c000f857 <Phys::allocatePage()+0x19>
c000f87d:	83 ec 0c             	sub    esp,0xc
c000f880:	a0 f4 cd 02 c0       	mov    al,ds:0xc002cdf4
c000f885:	83 f0 01             	xor    eax,0x1
c000f888:	a2 f4 cd 02 c0       	mov    ds:0xc002cdf4,al
c000f88d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000f892:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000f895:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c000f89b:	51                   	push   ecx
c000f89c:	e8 e3 43 00 00       	call   c0013c84 <VAS::scanForEviction()>
c000f8a1:	83 c4 10             	add    esp,0x10
c000f8a4:	85 c0                	test   eax,eax
c000f8a6:	75 48                	jne    c000f8f0 <Phys::allocatePage()+0xb2>
c000f8a8:	83 ec 0c             	sub    esp,0xc
c000f8ab:	68 20 32 02 c0       	push   0xc0023220
c000f8b0:	e8 95 fd ff ff       	call   c000f64a <KePanic(char const*)>
c000f8b5:	83 c4 10             	add    esp,0x10
c000f8b8:	8b 1d d0 cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cdd0
c000f8be:	53                   	push   ebx
c000f8bf:	e8 f5 fe ff ff       	call   c000f7b9 <Phys::getPageState(unsigned long)>
c000f8c4:	59                   	pop    ecx
c000f8c5:	84 c0                	test   al,al
c000f8c7:	75 99                	jne    c000f862 <Phys::allocatePage()+0x24>
c000f8c9:	6a 01                	push   0x1
c000f8cb:	53                   	push   ebx
c000f8cc:	e8 a8 fe ff ff       	call   c000f779 <Phys::setPageState(unsigned long, bool)>
c000f8d1:	8b 1d dc cd 02 c0    	mov    ebx,DWORD PTR ds:0xc002cddc
c000f8d7:	a1 d0 cd 02 c0       	mov    eax,ds:0xc002cdd0
c000f8dc:	83 c3 01             	add    ebx,0x1
c000f8df:	5e                   	pop    esi
c000f8e0:	89 1d dc cd 02 c0    	mov    DWORD PTR ds:0xc002cddc,ebx
c000f8e6:	c1 e0 0c             	shl    eax,0xc
c000f8e9:	5a                   	pop    edx
c000f8ea:	83 c4 14             	add    esp,0x14
c000f8ed:	5b                   	pop    ebx
c000f8ee:	5e                   	pop    esi
c000f8ef:	c3                   	ret    
c000f8f0:	83 ec 08             	sub    esp,0x8
c000f8f3:	8b 15 dc cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cddc
c000f8f9:	6a 01                	push   0x1
c000f8fb:	83 c2 01             	add    edx,0x1
c000f8fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f902:	89 15 dc cd 02 c0    	mov    DWORD PTR ds:0xc002cddc,edx
c000f908:	89 c2                	mov    edx,eax
c000f90a:	c1 ea 0c             	shr    edx,0xc
c000f90d:	52                   	push   edx
c000f90e:	e8 66 fe ff ff       	call   c000f779 <Phys::setPageState(unsigned long, bool)>
c000f913:	83 c4 10             	add    esp,0x10
c000f916:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f91a:	eb ce                	jmp    c000f8ea <Phys::allocatePage()+0xac>

c000f91c <Phys::allocateContiguousPages(int)>:
c000f91c:	57                   	push   edi
c000f91d:	56                   	push   esi
c000f91e:	53                   	push   ebx
c000f91f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000f923:	fa                   	cli    
c000f924:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c000f92a:	83 ec 0c             	sub    esp,0xc
c000f92d:	83 c2 01             	add    edx,0x1
c000f930:	68 50 32 02 c0       	push   0xc0023250
c000f935:	89 15 d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,edx
c000f93b:	31 db                	xor    ebx,ebx
c000f93d:	e8 22 76 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000f942:	83 c4 10             	add    esp,0x10
c000f945:	85 db                	test   ebx,ebx
c000f947:	75 11                	jne    c000f95a <Phys::allocateContiguousPages(int)+0x3e>
c000f949:	e8 f0 fe ff ff       	call   c000f83e <Phys::allocatePage()>
c000f94e:	83 ff 01             	cmp    edi,0x1
c000f951:	89 c6                	mov    esi,eax
c000f953:	74 21                	je     c000f976 <Phys::allocateContiguousPages(int)+0x5a>
c000f955:	bb 01 00 00 00       	mov    ebx,0x1
c000f95a:	e8 df fe ff ff       	call   c000f83e <Phys::allocatePage()>
c000f95f:	89 da                	mov    edx,ebx
c000f961:	c1 e2 0c             	shl    edx,0xc
c000f964:	01 f2                	add    edx,esi
c000f966:	39 c2                	cmp    edx,eax
c000f968:	74 24                	je     c000f98e <Phys::allocateContiguousPages(int)+0x72>
c000f96a:	bb 01 00 00 00       	mov    ebx,0x1
c000f96f:	89 c6                	mov    esi,eax
c000f971:	83 ff 01             	cmp    edi,0x1
c000f974:	75 e4                	jne    c000f95a <Phys::allocateContiguousPages(int)+0x3e>
c000f976:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c000f97e:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c000f983:	85 c0                	test   eax,eax
c000f985:	75 01                	jne    c000f988 <Phys::allocateContiguousPages(int)+0x6c>
c000f987:	fb                   	sti    
c000f988:	89 f0                	mov    eax,esi
c000f98a:	5b                   	pop    ebx
c000f98b:	5e                   	pop    esi
c000f98c:	5f                   	pop    edi
c000f98d:	c3                   	ret    
c000f98e:	83 c3 01             	add    ebx,0x1
c000f991:	39 fb                	cmp    ebx,edi
c000f993:	75 b0                	jne    c000f945 <Phys::allocateContiguousPages(int)+0x29>
c000f995:	eb df                	jmp    c000f976 <Phys::allocateContiguousPages(int)+0x5a>

c000f997 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c000f997:	56                   	push   esi
c000f998:	53                   	push   ebx
c000f999:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f99d:	39 1d d4 cd 02 c0    	cmp    DWORD PTR ds:0xc002cdd4,ebx
c000f9a3:	73 06                	jae    c000f9ab <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c000f9a5:	89 1d d4 cd 02 c0    	mov    DWORD PTR ds:0xc002cdd4,ebx
c000f9ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9af:	c1 eb 0c             	shr    ebx,0xc
c000f9b2:	c1 e8 0c             	shr    eax,0xc
c000f9b5:	39 d8                	cmp    eax,ebx
c000f9b7:	73 13                	jae    c000f9cc <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c000f9b9:	6a 00                	push   0x0
c000f9bb:	8d 70 01             	lea    esi,[eax+0x1]
c000f9be:	50                   	push   eax
c000f9bf:	e8 b5 fd ff ff       	call   c000f779 <Phys::setPageState(unsigned long, bool)>
c000f9c4:	5a                   	pop    edx
c000f9c5:	89 f0                	mov    eax,esi
c000f9c7:	59                   	pop    ecx
c000f9c8:	39 f3                	cmp    ebx,esi
c000f9ca:	75 ed                	jne    c000f9b9 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c000f9cc:	5b                   	pop    ebx
c000f9cd:	5e                   	pop    esi
c000f9ce:	c3                   	ret    

c000f9cf <Phys::physicalMemorySetup(unsigned int)>:
c000f9cf:	55                   	push   ebp
c000f9d0:	57                   	push   edi
c000f9d1:	56                   	push   esi
c000f9d2:	53                   	push   ebx
c000f9d3:	83 ec 40             	sub    esp,0x40
c000f9d6:	6a 10                	push   0x10
c000f9d8:	6a 00                	push   0x0
c000f9da:	68 e4 cd 02 c0       	push   0xc002cde4
c000f9df:	e8 0c 0b ff ff       	call   c00004f0 <memset>
c000f9e4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000f9e8:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f9ed:	05 00 10 00 00       	add    eax,0x1000
c000f9f2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000f9f6:	5b                   	pop    ebx
c000f9f7:	31 db                	xor    ebx,ebx
c000f9f9:	5e                   	pop    esi
c000f9fa:	50                   	push   eax
c000f9fb:	68 13 33 02 c0       	push   0xc0023313
c000fa00:	e8 5f 75 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fa05:	83 c4 10             	add    esp,0x10
c000fa08:	83 ec 08             	sub    esp,0x8
c000fa0b:	6a 01                	push   0x1
c000fa0d:	53                   	push   ebx
c000fa0e:	83 c3 01             	add    ebx,0x1
c000fa11:	e8 63 fd ff ff       	call   c000f779 <Phys::setPageState(unsigned long, bool)>
c000fa16:	83 c4 10             	add    esp,0x10
c000fa19:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000fa1f:	75 e7                	jne    c000fa08 <Phys::physicalMemorySetup(unsigned int)+0x39>
c000fa21:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c000fa28:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c000fa2f:	c1 e0 08             	shl    eax,0x8
c000fa32:	09 c2                	or     edx,eax
c000fa34:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000fa38:	0f 84 98 01 00 00    	je     c000fbd6 <Phys::physicalMemorySetup(unsigned int)+0x207>
c000fa3e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000fa42:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000fa4a:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c000fa4f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fa53:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000fa5b:	eb 1c                	jmp    c000fa79 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c000fa5d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fa61:	83 c3 18             	add    ebx,0x18
c000fa64:	83 c6 01             	add    esi,0x1
c000fa67:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000fa6b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fa6f:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000fa73:	0f 84 6d 01 00 00    	je     c000fbe6 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000fa79:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000fa7c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000fa7f:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000fa82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fa86:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fa8a:	8b 33                	mov    esi,DWORD PTR [ebx]
c000fa8c:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c000fa8f:	01 f0                	add    eax,esi
c000fa91:	55                   	push   ebp
c000fa92:	11 fa                	adc    edx,edi
c000fa94:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa98:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000fa9c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000faa0:	51                   	push   ecx
c000faa1:	56                   	push   esi
c000faa2:	68 b0 32 02 c0       	push   0xc00232b0
c000faa7:	e8 b8 74 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000faac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000fab0:	83 c4 10             	add    esp,0x10
c000fab3:	09 f8                	or     eax,edi
c000fab5:	0f 85 2b 01 00 00    	jne    c000fbe6 <Phys::physicalMemorySetup(unsigned int)+0x217>
c000fabb:	83 fd 01             	cmp    ebp,0x1
c000fabe:	75 9d                	jne    c000fa5d <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000fac0:	ba 00 00 08 00       	mov    edx,0x80000
c000fac5:	89 c1                	mov    ecx,eax
c000fac7:	39 f2                	cmp    edx,esi
c000fac9:	19 f9                	sbb    ecx,edi
c000facb:	0f 82 ab 00 00 00    	jb     c000fb7c <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000fad1:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c000fad5:	89 c1                	mov    ecx,eax
c000fad7:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c000fadb:	0f 83 9b 00 00 00    	jae    c000fb7c <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000fae1:	ba 00 00 0a 00       	mov    edx,0xa0000
c000fae6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000faea:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000faee:	39 fa                	cmp    edx,edi
c000faf0:	19 e8                	sbb    eax,ebp
c000faf2:	0f 82 b0 01 00 00    	jb     c000fca8 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c000faf8:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000fafc:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000fb00:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c000fb06:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fb0b:	83 d5 ff             	adc    ebp,0xffffffff
c000fb0e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000fb12:	31 c0                	xor    eax,eax
c000fb14:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000fb18:	39 fa                	cmp    edx,edi
c000fb1a:	89 c1                	mov    ecx,eax
c000fb1c:	19 e9                	sbb    ecx,ebp
c000fb1e:	0f 83 39 ff ff ff    	jae    c000fa5d <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000fb24:	be 00 00 08 00       	mov    esi,0x80000
c000fb29:	83 ec 04             	sub    esp,0x4
c000fb2c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000fb30:	57                   	push   edi
c000fb31:	56                   	push   esi
c000fb32:	68 d4 32 02 c0       	push   0xc00232d4
c000fb37:	e8 28 74 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fb3c:	5d                   	pop    ebp
c000fb3d:	58                   	pop    eax
c000fb3e:	57                   	push   edi
c000fb3f:	56                   	push   esi
c000fb40:	e8 52 fe ff ff       	call   c000f997 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000fb45:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000fb49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fb4d:	83 c4 0c             	add    esp,0xc
c000fb50:	0f ac d0 0c          	shrd   eax,edx,0xc
c000fb54:	8b 15 e0 cd 02 c0    	mov    edx,DWORD PTR ds:0xc002cde0
c000fb5a:	01 d0                	add    eax,edx
c000fb5c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000fb63:	a3 e0 cd 02 c0       	mov    ds:0xc002cde0,eax
c000fb68:	52                   	push   edx
c000fb69:	50                   	push   eax
c000fb6a:	68 39 33 02 c0       	push   0xc0023339
c000fb6f:	e8 f0 73 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c000fb74:	83 c4 10             	add    esp,0x10
c000fb77:	e9 e1 fe ff ff       	jmp    c000fa5d <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000fb7c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c000fb80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fb84:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fb88:	39 ea                	cmp    edx,ebp
c000fb8a:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c000fb8e:	0f 82 c9 fe ff ff    	jb     c000fa5d <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000fb94:	ba ff 1f 00 00       	mov    edx,0x1fff
c000fb99:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c000fb9d:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c000fba1:	0f 83 b6 fe ff ff    	jae    c000fa5d <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000fba7:	39 ee                	cmp    esi,ebp
c000fba9:	89 f8                	mov    eax,edi
c000fbab:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000fbaf:	0f 83 74 ff ff ff    	jae    c000fb29 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000fbb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fbb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000fbbd:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000fbc1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000fbc5:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c000fbc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbcd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fbd1:	e9 53 ff ff ff       	jmp    c000fb29 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c000fbd6:	83 ec 0c             	sub    esp,0xc
c000fbd9:	68 2b 33 02 c0       	push   0xc002332b
c000fbde:	e8 67 fa ff ff       	call   c000f64a <KePanic(char const*)>
c000fbe3:	83 c4 10             	add    esp,0x10
c000fbe6:	83 ec 08             	sub    esp,0x8
c000fbe9:	bb 60 00 00 00       	mov    ebx,0x60
c000fbee:	6a 00                	push   0x0
c000fbf0:	6a 06                	push   0x6
c000fbf2:	e8 82 fb ff ff       	call   c000f779 <Phys::setPageState(unsigned long, bool)>
c000fbf7:	58                   	pop    eax
c000fbf8:	5a                   	pop    edx
c000fbf9:	6a 00                	push   0x0
c000fbfb:	6a 07                	push   0x7
c000fbfd:	e8 77 fb ff ff       	call   c000f779 <Phys::setPageState(unsigned long, bool)>
c000fc02:	8b 0d e0 cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cde0
c000fc08:	83 c4 10             	add    esp,0x10
c000fc0b:	83 c1 02             	add    ecx,0x2
c000fc0e:	89 0d e0 cd 02 c0    	mov    DWORD PTR ds:0xc002cde0,ecx
c000fc14:	83 ec 08             	sub    esp,0x8
c000fc17:	6a 00                	push   0x0
c000fc19:	53                   	push   ebx
c000fc1a:	83 c3 01             	add    ebx,0x1
c000fc1d:	e8 57 fb ff ff       	call   c000f779 <Phys::setPageState(unsigned long, bool)>
c000fc22:	83 c4 10             	add    esp,0x10
c000fc25:	81 fb 80 00 00 00    	cmp    ebx,0x80
c000fc2b:	75 e7                	jne    c000fc14 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000fc2d:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c000fc32:	bb 40 01 00 00       	mov    ebx,0x140
c000fc37:	83 c0 20             	add    eax,0x20
c000fc3a:	a3 e0 cd 02 c0       	mov    ds:0xc002cde0,eax
c000fc3f:	eb 26                	jmp    c000fc67 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000fc41:	83 ec 08             	sub    esp,0x8
c000fc44:	6a 00                	push   0x0
c000fc46:	53                   	push   ebx
c000fc47:	83 c3 01             	add    ebx,0x1
c000fc4a:	e8 2a fb ff ff       	call   c000f779 <Phys::setPageState(unsigned long, bool)>
c000fc4f:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c000fc54:	83 c4 10             	add    esp,0x10
c000fc57:	83 c0 01             	add    eax,0x1
c000fc5a:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000fc60:	a3 e0 cd 02 c0       	mov    ds:0xc002cde0,eax
c000fc65:	74 07                	je     c000fc6e <Phys::physicalMemorySetup(unsigned int)+0x29f>
c000fc67:	3d ff 03 00 00       	cmp    eax,0x3ff
c000fc6c:	7e d3                	jle    c000fc41 <Phys::physicalMemorySetup(unsigned int)+0x272>
c000fc6e:	bb d0 01 00 00       	mov    ebx,0x1d0
c000fc73:	3d ff 07 00 00       	cmp    eax,0x7ff
c000fc78:	7f 26                	jg     c000fca0 <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c000fc7a:	83 ec 08             	sub    esp,0x8
c000fc7d:	6a 00                	push   0x0
c000fc7f:	53                   	push   ebx
c000fc80:	83 c3 01             	add    ebx,0x1
c000fc83:	e8 f1 fa ff ff       	call   c000f779 <Phys::setPageState(unsigned long, bool)>
c000fc88:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c000fc8d:	83 c4 10             	add    esp,0x10
c000fc90:	83 c0 01             	add    eax,0x1
c000fc93:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000fc99:	a3 e0 cd 02 c0       	mov    ds:0xc002cde0,eax
c000fc9e:	75 d3                	jne    c000fc73 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c000fca0:	83 c4 3c             	add    esp,0x3c
c000fca3:	5b                   	pop    ebx
c000fca4:	5e                   	pop    esi
c000fca5:	5f                   	pop    edi
c000fca6:	5d                   	pop    ebp
c000fca7:	c3                   	ret    
c000fca8:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000fcb0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000fcb8:	e9 3b fe ff ff       	jmp    c000faf8 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000fcbd:	90                   	nop

c000fcbe <Pipe::isAtty()>:
c000fcbe:	31 c0                	xor    eax,eax
c000fcc0:	c3                   	ret    
c000fcc1:	90                   	nop

c000fcc2 <Pipe::~Pipe()>:
c000fcc2:	83 ec 0c             	sub    esp,0xc
c000fcc5:	ba 98 33 02 c0       	mov    edx,0xc0023398
c000fcca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcce:	89 10                	mov    DWORD PTR [eax],edx
c000fcd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fcd4:	83 ec 0c             	sub    esp,0xc
c000fcd7:	50                   	push   eax
c000fcd8:	e8 01 2b 00 00       	call   c00127de <UnixFile::~UnixFile()>
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	90                   	nop
c000fce1:	83 c4 0c             	add    esp,0xc
c000fce4:	c3                   	ret    
c000fce5:	90                   	nop

c000fce6 <Pipe::~Pipe()>:
c000fce6:	83 ec 0c             	sub    esp,0xc
c000fce9:	83 ec 0c             	sub    esp,0xc
c000fcec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fcf0:	e8 cd ff ff ff       	call   c000fcc2 <Pipe::~Pipe()>
c000fcf5:	83 c4 10             	add    esp,0x10
c000fcf8:	83 ec 08             	sub    esp,0x8
c000fcfb:	6a 20                	push   0x20
c000fcfd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fd01:	e8 85 cc ff ff       	call   c000c98b <operator delete(void*, unsigned long)>
c000fd06:	83 c4 10             	add    esp,0x10
c000fd09:	83 c4 0c             	add    esp,0xc
c000fd0c:	c3                   	ret    
c000fd0d:	90                   	nop

c000fd0e <Pipe::write(unsigned long long, void*, int*)>:
c000fd0e:	55                   	push   ebp
c000fd0f:	57                   	push   edi
c000fd10:	56                   	push   esi
c000fd11:	53                   	push   ebx
c000fd12:	83 ec 1c             	sub    esp,0x1c
c000fd15:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000fd19:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000fd1d:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000fd20:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c000fd24:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fd2b:	89 d8                	mov    eax,ebx
c000fd2d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000fd30:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000fd34:	89 d6                	mov    esi,edx
c000fd36:	89 d7                	mov    edi,edx
c000fd38:	c1 ff 1f             	sar    edi,0x1f
c000fd3b:	03 34 24             	add    esi,DWORD PTR [esp]
c000fd3e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c000fd42:	c1 f8 1f             	sar    eax,0x1f
c000fd45:	39 f3                	cmp    ebx,esi
c000fd47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fd4b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fd4f:	19 f8                	sbb    eax,edi
c000fd51:	b8 01 00 00 00       	mov    eax,0x1
c000fd56:	72 6e                	jb     c000fdc6 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000fd58:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c000fd5b:	01 d0                	add    eax,edx
c000fd5d:	99                   	cdq    
c000fd5e:	f7 fb                	idiv   ebx
c000fd60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fd64:	29 d3                	sub    ebx,edx
c000fd66:	89 d7                	mov    edi,edx
c000fd68:	89 de                	mov    esi,ebx
c000fd6a:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fd6d:	c1 fb 1f             	sar    ebx,0x1f
c000fd70:	39 f2                	cmp    edx,esi
c000fd72:	19 d8                	sbb    eax,ebx
c000fd74:	b8 00 00 00 00       	mov    eax,0x0
c000fd79:	72 04                	jb     c000fd7f <Pipe::write(unsigned long long, void*, int*)+0x71>
c000fd7b:	89 d0                	mov    eax,edx
c000fd7d:	29 f0                	sub    eax,esi
c000fd7f:	89 d3                	mov    ebx,edx
c000fd81:	29 c3                	sub    ebx,eax
c000fd83:	74 0b                	je     c000fd90 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000fd85:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000fd88:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000fd8c:	89 d9                	mov    ecx,ebx
c000fd8e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd90:	85 c0                	test   eax,eax
c000fd92:	74 0d                	je     c000fda1 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000fd94:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000fd98:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c000fd9b:	89 de                	mov    esi,ebx
c000fd9d:	89 c1                	mov    ecx,eax
c000fd9f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fda1:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000fda4:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fda9:	75 10                	jne    c000fdbb <Pipe::write(unsigned long long, void*, int*)+0xad>
c000fdab:	83 ec 0c             	sub    esp,0xc
c000fdae:	68 55 33 02 c0       	push   0xc0023355
c000fdb3:	e8 92 f8 ff ff       	call   c000f64a <KePanic(char const*)>
c000fdb8:	83 c4 10             	add    esp,0x10
c000fdbb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000fdbf:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000fdc2:	89 08                	mov    DWORD PTR [eax],ecx
c000fdc4:	31 c0                	xor    eax,eax
c000fdc6:	83 c4 1c             	add    esp,0x1c
c000fdc9:	5b                   	pop    ebx
c000fdca:	5e                   	pop    esi
c000fdcb:	5f                   	pop    edi
c000fdcc:	5d                   	pop    ebp
c000fdcd:	c3                   	ret    

c000fdce <Pipe::read(unsigned long long, void*, int*)>:
c000fdce:	55                   	push   ebp
c000fdcf:	57                   	push   edi
c000fdd0:	56                   	push   esi
c000fdd1:	53                   	push   ebx
c000fdd2:	83 ec 1c             	sub    esp,0x1c
c000fdd5:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000fdd9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000fddd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000fde1:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000fde4:	89 c8                	mov    eax,ecx
c000fde6:	99                   	cdq    
c000fde7:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c000fdeb:	74 27                	je     c000fe14 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000fded:	39 f9                	cmp    ecx,edi
c000fdef:	89 d1                	mov    ecx,edx
c000fdf1:	19 f1                	sbb    ecx,esi
c000fdf3:	73 1f                	jae    c000fe14 <Pipe::read(unsigned long long, void*, int*)+0x46>
c000fdf5:	fa                   	cli    
c000fdf6:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c000fdfc:	e8 83 64 00 00       	call   c0016284 <schedule()>
c000fe01:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000fe08:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000fe0f:	75 d0                	jne    c000fde1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe11:	fb                   	sti    
c000fe12:	eb cd                	jmp    c000fde1 <Pipe::read(unsigned long long, void*, int*)+0x13>
c000fe14:	39 f8                	cmp    eax,edi
c000fe16:	89 d1                	mov    ecx,edx
c000fe18:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fe1b:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000fe1f:	19 f1                	sbb    ecx,esi
c000fe21:	73 07                	jae    c000fe2a <Pipe::read(unsigned long long, void*, int*)+0x5c>
c000fe23:	89 04 24             	mov    DWORD PTR [esp],eax
c000fe26:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000fe2a:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000fe2d:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000fe30:	29 f7                	sub    edi,esi
c000fe32:	89 f8                	mov    eax,edi
c000fe34:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000fe38:	99                   	cdq    
c000fe39:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000fe3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe40:	19 d0                	sbb    eax,edx
c000fe42:	73 07                	jae    c000fe4b <Pipe::read(unsigned long long, void*, int*)+0x7d>
c000fe44:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000fe47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fe4b:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000fe4e:	89 ea                	mov    edx,ebp
c000fe50:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c000fe54:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000fe59:	74 0d                	je     c000fe68 <Pipe::read(unsigned long long, void*, int*)+0x9a>
c000fe5b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000fe5e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000fe62:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe66:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe68:	85 d2                	test   edx,edx
c000fe6a:	74 11                	je     c000fe7d <Pipe::read(unsigned long long, void*, int*)+0xaf>
c000fe6c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fe70:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c000fe73:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000fe77:	89 d1                	mov    ecx,edx
c000fe79:	89 c7                	mov    edi,eax
c000fe7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fe7d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000fe80:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c000fe83:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c000fe86:	99                   	cdq    
c000fe87:	89 f7                	mov    edi,esi
c000fe89:	03 04 24             	add    eax,DWORD PTR [esp]
c000fe8c:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000fe90:	c1 ff 1f             	sar    edi,0x1f
c000fe93:	57                   	push   edi
c000fe94:	56                   	push   esi
c000fe95:	52                   	push   edx
c000fe96:	50                   	push   eax
c000fe97:	e8 18 0e 01 00       	call   c0020cb4 <__umoddi3>
c000fe9c:	83 c4 10             	add    esp,0x10
c000fe9f:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000fea2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000fea7:	75 10                	jne    c000feb9 <Pipe::read(unsigned long long, void*, int*)+0xeb>
c000fea9:	83 ec 0c             	sub    esp,0xc
c000feac:	68 72 33 02 c0       	push   0xc0023372
c000feb1:	e8 94 f7 ff ff       	call   c000f64a <KePanic(char const*)>
c000feb6:	83 c4 10             	add    esp,0x10
c000feb9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000febd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000fec0:	89 10                	mov    DWORD PTR [eax],edx
c000fec2:	83 c4 1c             	add    esp,0x1c
c000fec5:	31 c0                	xor    eax,eax
c000fec7:	5b                   	pop    ebx
c000fec8:	5e                   	pop    esi
c000fec9:	5f                   	pop    edi
c000feca:	5d                   	pop    ebp
c000fecb:	c3                   	ret    

c000fecc <Pipe::Pipe(int)>:
c000fecc:	83 ec 0c             	sub    esp,0xc
c000fecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fed3:	83 ec 08             	sub    esp,0x8
c000fed6:	6a 00                	push   0x0
c000fed8:	50                   	push   eax
c000fed9:	e8 1a 27 00 00       	call   c00125f8 <UnixFile::UnixFile(int)>
c000fede:	83 c4 10             	add    esp,0x10
c000fee1:	ba 98 33 02 c0       	mov    edx,0xc0023398
c000fee6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000feea:	89 10                	mov    DWORD PTR [eax],edx
c000feec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fef0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000fef4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000fef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fefb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000ff02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff06:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c000ff0d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff11:	83 ec 0c             	sub    esp,0xc
c000ff14:	50                   	push   eax
c000ff15:	e8 e9 f3 ff ff       	call   c000f303 <malloc>
c000ff1a:	83 c4 10             	add    esp,0x10
c000ff1d:	89 c2                	mov    edx,eax
c000ff1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff23:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000ff26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff2a:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000ff2e:	90                   	nop
c000ff2f:	83 c4 0c             	add    esp,0xc
c000ff32:	c3                   	ret    

c000ff33 <KePowerThread(void*)>:
c000ff33:	83 ec 0c             	sub    esp,0xc
c000ff36:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c000ff3d:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c000ff44:	75 01                	jne    c000ff47 <KePowerThread(void*)+0x14>
c000ff46:	fb                   	sti    
c000ff47:	83 ec 0c             	sub    esp,0xc
c000ff4a:	c6 05 00 ce 02 c0 00 	mov    BYTE PTR ds:0xc002ce00,0x0
c000ff51:	6a 0a                	push   0xa
c000ff53:	e8 28 65 00 00       	call   c0016480 <sleep(unsigned int)>
c000ff58:	83 05 44 ce 02 c0 0a 	add    DWORD PTR ds:0xc002ce44,0xa
c000ff5f:	83 c4 10             	add    esp,0x10
c000ff62:	eb e3                	jmp    c000ff47 <KePowerThread(void*)+0x14>

c000ff64 <KeChangePowerSettings(PowerSettings)>:
c000ff64:	57                   	push   edi
c000ff65:	b9 09 00 00 00       	mov    ecx,0x9
c000ff6a:	56                   	push   esi
c000ff6b:	bf 20 ce 02 c0       	mov    edi,0xc002ce20
c000ff70:	fc                   	cld    
c000ff71:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ff75:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ff77:	5e                   	pop    esi
c000ff78:	5f                   	pop    edi
c000ff79:	c3                   	ret    

c000ff7a <KeUserIOReceived()>:
c000ff7a:	c7 05 44 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce44,0x0
c000ff84:	c3                   	ret    

c000ff85 <KeHandlePowerButton()>:
c000ff85:	a1 20 ce 02 c0       	mov    eax,ds:0xc002ce20
c000ff8a:	83 f8 02             	cmp    eax,0x2
c000ff8d:	75 05                	jne    c000ff94 <KeHandlePowerButton()+0xf>
c000ff8f:	e9 34 da ff ff       	jmp    c000d9c8 <KeShutdown()>
c000ff94:	48                   	dec    eax
c000ff95:	75 05                	jne    c000ff9c <KeHandlePowerButton()+0x17>
c000ff97:	e9 50 da ff ff       	jmp    c000d9ec <KeSleep()>
c000ff9c:	c3                   	ret    

c000ff9d <KeHandleSleepButton()>:
c000ff9d:	a1 24 ce 02 c0       	mov    eax,ds:0xc002ce24
c000ffa2:	83 f8 02             	cmp    eax,0x2
c000ffa5:	75 05                	jne    c000ffac <KeHandleSleepButton()+0xf>
c000ffa7:	e9 1c da ff ff       	jmp    c000d9c8 <KeShutdown()>
c000ffac:	48                   	dec    eax
c000ffad:	75 05                	jne    c000ffb4 <KeHandleSleepButton()+0x17>
c000ffaf:	e9 38 da ff ff       	jmp    c000d9ec <KeSleep()>
c000ffb4:	c3                   	ret    

c000ffb5 <KeSetupPowerManager()>:
c000ffb5:	83 ec 0c             	sub    esp,0xc
c000ffb8:	c7 05 44 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce44,0x0
c000ffc2:	68 f0 00 00 00       	push   0xf0
c000ffc7:	c6 05 00 ce 02 c0 00 	mov    BYTE PTR ds:0xc002ce00,0x0
c000ffce:	6a 00                	push   0x0
c000ffd0:	68 33 ff 00 c0       	push   0xc000ff33
c000ffd5:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c000ffdb:	e8 4c 60 00 00       	call   c001602c <Process::createThread(void (*)(void*), void*, int)>
c000ffe0:	c7 05 20 ce 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002ce20,0x2
c000ffea:	c7 05 24 ce 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002ce24,0x1
c000fff4:	c7 05 28 ce 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002ce28,0x3
c000fffe:	c7 05 2c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce2c,0x0
c0010008:	c7 05 38 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce38,0x0
c0010012:	c7 05 30 ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce30,0x0
c001001c:	c7 05 3c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce3c,0x0
c0010026:	c7 05 34 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce34,0x3c
c0010030:	c7 05 40 ce 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc002ce40,0x3c
c001003a:	83 c4 1c             	add    esp,0x1c
c001003d:	c3                   	ret    

c001003e <KeRand()>:
c001003e:	69 05 48 ce 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc002ce48,0x2875
c0010048:	69 0d 4c ce 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc002ce4c,0xa2e7b175
c0010052:	53                   	push   ebx
c0010053:	01 c1                	add    ecx,eax
c0010055:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c001005a:	f7 25 48 ce 02 c0    	mul    DWORD PTR ds:0xc002ce48
c0010060:	01 ca                	add    edx,ecx
c0010062:	05 ef 04 b5 00       	add    eax,0xb504ef
c0010067:	83 d2 00             	adc    edx,0x0
c001006a:	a3 48 ce 02 c0       	mov    ds:0xc002ce48,eax
c001006f:	0f b7 da             	movzx  ebx,dx
c0010072:	89 da                	mov    edx,ebx
c0010074:	89 1d 4c ce 02 c0    	mov    DWORD PTR ds:0xc002ce4c,ebx
c001007a:	0f ac d0 0e          	shrd   eax,edx,0xe
c001007e:	5b                   	pop    ebx
c001007f:	c3                   	ret    

c0010080 <KeSeedRand(unsigned int)>:
c0010080:	53                   	push   ebx
c0010081:	83 ec 08             	sub    esp,0x8
c0010084:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010088:	e8 74 94 00 00       	call   c0019501 <HalGetRand()>
c001008d:	c7 05 4c ce 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ce4c,0x0
c0010097:	31 d8                	xor    eax,ebx
c0010099:	a3 48 ce 02 c0       	mov    ds:0xc002ce48,eax
c001009e:	e8 9b ff ff ff       	call   c001003e <KeRand()>
c00100a3:	83 c4 08             	add    esp,0x8
c00100a6:	5b                   	pop    ebx
c00100a7:	eb 95                	jmp    c001003e <KeRand()>

c00100a9 <KeInitRand()>:
c00100a9:	83 ec 0c             	sub    esp,0xc
c00100ac:	e8 74 92 00 00       	call   c0019325 <HalQueryPerformanceCounter()>
c00100b1:	0f 20 da             	mov    edx,cr3
c00100b4:	0f 22 da             	mov    cr3,edx
c00100b7:	0f 20 da             	mov    edx,cr3
c00100ba:	0f 22 da             	mov    cr3,edx
c00100bd:	0f 20 da             	mov    edx,cr3
c00100c0:	0f 22 da             	mov    cr3,edx
c00100c3:	0f 20 da             	mov    edx,cr3
c00100c6:	0f 22 da             	mov    cr3,edx
c00100c9:	83 ec 0c             	sub    esp,0xc
c00100cc:	35 03 8a 95 38       	xor    eax,0x38958a03
c00100d1:	50                   	push   eax
c00100d2:	e8 a9 ff ff ff       	call   c0010080 <KeSeedRand(unsigned int)>
c00100d7:	83 c4 1c             	add    esp,0x1c
c00100da:	c3                   	ret    
c00100db:	90                   	nop

c00100dc <KeResolveCompatibilitySymbol(char*)>:
c00100dc:	83 ec 0c             	sub    esp,0xc
c00100df:	83 ec 08             	sub    esp,0x8
c00100e2:	68 ac 33 02 c0       	push   0xc00233ac
c00100e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00100eb:	e8 60 06 ff ff       	call   c0000750 <strcmp>
c00100f0:	83 c4 10             	add    esp,0x10
c00100f3:	85 c0                	test   eax,eax
c00100f5:	0f 94 c0             	sete   al
c00100f8:	0f b6 c0             	movzx  eax,al
c00100fb:	85 c0                	test   eax,eax
c00100fd:	74 0d                	je     c001010c <KeResolveCompatibilitySymbol(char*)+0x30>
c00100ff:	b8 70 ad 02 c0       	mov    eax,0xc002ad70
c0010104:	e9 8b 01 00 00       	jmp    c0010294 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010109:	8d 76 00             	lea    esi,[esi+0x0]
c001010c:	83 ec 08             	sub    esp,0x8
c001010f:	68 b5 33 02 c0       	push   0xc00233b5
c0010114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010118:	e8 33 06 ff ff       	call   c0000750 <strcmp>
c001011d:	83 c4 10             	add    esp,0x10
c0010120:	85 c0                	test   eax,eax
c0010122:	0f 94 c0             	sete   al
c0010125:	0f b6 c0             	movzx  eax,al
c0010128:	85 c0                	test   eax,eax
c001012a:	74 0c                	je     c0010138 <KeResolveCompatibilitySymbol(char*)+0x5c>
c001012c:	b8 b4 0b 02 c0       	mov    eax,0xc0020bb4
c0010131:	e9 5e 01 00 00       	jmp    c0010294 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010136:	66 90                	xchg   ax,ax
c0010138:	83 ec 08             	sub    esp,0x8
c001013b:	68 bf 33 02 c0       	push   0xc00233bf
c0010140:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010144:	e8 07 06 ff ff       	call   c0000750 <strcmp>
c0010149:	83 c4 10             	add    esp,0x10
c001014c:	85 c0                	test   eax,eax
c001014e:	0f 94 c0             	sete   al
c0010151:	0f b6 c0             	movzx  eax,al
c0010154:	85 c0                	test   eax,eax
c0010156:	74 0c                	je     c0010164 <KeResolveCompatibilitySymbol(char*)+0x88>
c0010158:	b8 e8 08 02 c0       	mov    eax,0xc00208e8
c001015d:	e9 32 01 00 00       	jmp    c0010294 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010162:	66 90                	xchg   ax,ax
c0010164:	83 ec 08             	sub    esp,0x8
c0010167:	68 c8 33 02 c0       	push   0xc00233c8
c001016c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010170:	e8 db 05 ff ff       	call   c0000750 <strcmp>
c0010175:	83 c4 10             	add    esp,0x10
c0010178:	85 c0                	test   eax,eax
c001017a:	0f 94 c0             	sete   al
c001017d:	0f b6 c0             	movzx  eax,al
c0010180:	85 c0                	test   eax,eax
c0010182:	74 0c                	je     c0010190 <KeResolveCompatibilitySymbol(char*)+0xb4>
c0010184:	b8 4a f6 00 c0       	mov    eax,0xc000f64a
c0010189:	e9 06 01 00 00       	jmp    c0010294 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001018e:	66 90                	xchg   ax,ax
c0010190:	83 ec 08             	sub    esp,0x8
c0010193:	68 db 33 02 c0       	push   0xc00233db
c0010198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001019c:	e8 af 05 ff ff       	call   c0000750 <strcmp>
c00101a1:	83 c4 10             	add    esp,0x10
c00101a4:	85 c0                	test   eax,eax
c00101a6:	0f 94 c0             	sete   al
c00101a9:	0f b6 c0             	movzx  eax,al
c00101ac:	85 c0                	test   eax,eax
c00101ae:	74 0c                	je     c00101bc <KeResolveCompatibilitySymbol(char*)+0xe0>
c00101b0:	b8 cb c8 00 c0       	mov    eax,0xc000c8cb
c00101b5:	e9 da 00 00 00       	jmp    c0010294 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00101ba:	66 90                	xchg   ax,ax
c00101bc:	83 ec 08             	sub    esp,0x8
c00101bf:	68 f8 33 02 c0       	push   0xc00233f8
c00101c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101c8:	e8 83 05 ff ff       	call   c0000750 <strcmp>
c00101cd:	83 c4 10             	add    esp,0x10
c00101d0:	85 c0                	test   eax,eax
c00101d2:	0f 94 c0             	sete   al
c00101d5:	0f b6 c0             	movzx  eax,al
c00101d8:	85 c0                	test   eax,eax
c00101da:	74 0c                	je     c00101e8 <KeResolveCompatibilitySymbol(char*)+0x10c>
c00101dc:	b8 b4 0c 02 c0       	mov    eax,0xc0020cb4
c00101e1:	e9 ae 00 00 00       	jmp    c0010294 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00101e6:	66 90                	xchg   ax,ax
c00101e8:	83 ec 08             	sub    esp,0x8
c00101eb:	68 02 34 02 c0       	push   0xc0023402
c00101f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00101f4:	e8 57 05 ff ff       	call   c0000750 <strcmp>
c00101f9:	83 c4 10             	add    esp,0x10
c00101fc:	85 c0                	test   eax,eax
c00101fe:	0f 94 c0             	sete   al
c0010201:	0f b6 c0             	movzx  eax,al
c0010204:	85 c0                	test   eax,eax
c0010206:	74 0c                	je     c0010214 <KeResolveCompatibilitySymbol(char*)+0x138>
c0010208:	b8 34 0a 02 c0       	mov    eax,0xc0020a34
c001020d:	e9 82 00 00 00       	jmp    c0010294 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010212:	66 90                	xchg   ax,ax
c0010214:	83 ec 08             	sub    esp,0x8
c0010217:	68 0b 34 02 c0       	push   0xc002340b
c001021c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010220:	e8 2b 05 ff ff       	call   c0000750 <strcmp>
c0010225:	83 c4 10             	add    esp,0x10
c0010228:	85 c0                	test   eax,eax
c001022a:	0f 94 c0             	sete   al
c001022d:	0f b6 c0             	movzx  eax,al
c0010230:	85 c0                	test   eax,eax
c0010232:	74 08                	je     c001023c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010234:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c0010239:	eb 59                	jmp    c0010294 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001023b:	90                   	nop
c001023c:	83 ec 08             	sub    esp,0x8
c001023f:	68 23 34 02 c0       	push   0xc0023423
c0010244:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010248:	e8 03 05 ff ff       	call   c0000750 <strcmp>
c001024d:	83 c4 10             	add    esp,0x10
c0010250:	85 c0                	test   eax,eax
c0010252:	0f 94 c0             	sete   al
c0010255:	0f b6 c0             	movzx  eax,al
c0010258:	85 c0                	test   eax,eax
c001025a:	74 08                	je     c0010264 <KeResolveCompatibilitySymbol(char*)+0x188>
c001025c:	b8 74 ad 02 c0       	mov    eax,0xc002ad74
c0010261:	eb 31                	jmp    c0010294 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0010263:	90                   	nop
c0010264:	83 ec 08             	sub    esp,0x8
c0010267:	68 30 34 02 c0       	push   0xc0023430
c001026c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010270:	e8 db 04 ff ff       	call   c0000750 <strcmp>
c0010275:	83 c4 10             	add    esp,0x10
c0010278:	85 c0                	test   eax,eax
c001027a:	0f 94 c0             	sete   al
c001027d:	0f b6 c0             	movzx  eax,al
c0010280:	85 c0                	test   eax,eax
c0010282:	74 08                	je     c001028c <KeResolveCompatibilitySymbol(char*)+0x1b0>
c0010284:	b8 75 ad 02 c0       	mov    eax,0xc002ad75
c0010289:	eb 09                	jmp    c0010294 <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001028b:	90                   	nop
c001028c:	b8 00 00 00 00       	mov    eax,0x0
c0010291:	8d 76 00             	lea    esi,[esi+0x0]
c0010294:	83 c4 0c             	add    esp,0xc
c0010297:	c3                   	ret    

c0010298 <Semaphore::Semaphore(int)>:
c0010298:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001029c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00102a0:	89 10                	mov    DWORD PTR [eax],edx
c00102a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102a6:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00102ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00102b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00102bc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00102c3:	90                   	nop
c00102c4:	c3                   	ret    
c00102c5:	90                   	nop
c00102c6:	66 90                	xchg   ax,ax

c00102c8 <Semaphore::tryAcquire()>:
c00102c8:	83 ec 0c             	sub    esp,0xc
c00102cb:	fa                   	cli    
c00102cc:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00102d1:	83 c0 01             	add    eax,0x1
c00102d4:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c00102d9:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00102de:	83 c0 01             	add    eax,0x1
c00102e1:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00102e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ea:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00102ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102f1:	8b 00                	mov    eax,DWORD PTR [eax]
c00102f3:	39 c2                	cmp    edx,eax
c00102f5:	7d 59                	jge    c0010350 <Semaphore::tryAcquire()+0x88>
c00102f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00102fe:	8d 50 01             	lea    edx,[eax+0x1]
c0010301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010305:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010308:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c001030d:	83 e8 01             	sub    eax,0x1
c0010310:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0010315:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c001031a:	85 c0                	test   eax,eax
c001031c:	75 1a                	jne    c0010338 <Semaphore::tryAcquire()+0x70>
c001031e:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c0010323:	85 c0                	test   eax,eax
c0010325:	74 11                	je     c0010338 <Semaphore::tryAcquire()+0x70>
c0010327:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c0010331:	e8 4e 5f 00 00       	call   c0016284 <schedule()>
c0010336:	66 90                	xchg   ax,ax
c0010338:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0010340:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0010345:	85 c0                	test   eax,eax
c0010347:	75 03                	jne    c001034c <Semaphore::tryAcquire()+0x84>
c0010349:	fb                   	sti    
c001034a:	66 90                	xchg   ax,ax
c001034c:	b0 01                	mov    al,0x1
c001034e:	eb 48                	jmp    c0010398 <Semaphore::tryAcquire()+0xd0>
c0010350:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0010355:	83 e8 01             	sub    eax,0x1
c0010358:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c001035d:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0010362:	85 c0                	test   eax,eax
c0010364:	75 1a                	jne    c0010380 <Semaphore::tryAcquire()+0xb8>
c0010366:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c001036b:	85 c0                	test   eax,eax
c001036d:	74 11                	je     c0010380 <Semaphore::tryAcquire()+0xb8>
c001036f:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c0010379:	e8 06 5f 00 00       	call   c0016284 <schedule()>
c001037e:	66 90                	xchg   ax,ax
c0010380:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0010388:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001038d:	85 c0                	test   eax,eax
c001038f:	75 03                	jne    c0010394 <Semaphore::tryAcquire()+0xcc>
c0010391:	fb                   	sti    
c0010392:	66 90                	xchg   ax,ax
c0010394:	b0 00                	mov    al,0x0
c0010396:	66 90                	xchg   ax,ax
c0010398:	83 c4 0c             	add    esp,0xc
c001039b:	c3                   	ret    

c001039c <Semaphore::assertLocked(char const*)>:
c001039c:	83 ec 0c             	sub    esp,0xc
c001039f:	fa                   	cli    
c00103a0:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00103a5:	83 c0 01             	add    eax,0x1
c00103a8:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c00103ad:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00103b2:	83 c0 01             	add    eax,0x1
c00103b5:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00103ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103be:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00103c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00103c5:	8b 00                	mov    eax,DWORD PTR [eax]
c00103c7:	39 c2                	cmp    edx,eax
c00103c9:	7d 11                	jge    c00103dc <Semaphore::assertLocked(char const*)+0x40>
c00103cb:	83 ec 0c             	sub    esp,0xc
c00103ce:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00103d2:	e8 73 f2 ff ff       	call   c000f64a <KePanic(char const*)>
c00103d7:	83 c4 10             	add    esp,0x10
c00103da:	66 90                	xchg   ax,ax
c00103dc:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00103e1:	83 e8 01             	sub    eax,0x1
c00103e4:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00103e9:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00103ee:	85 c0                	test   eax,eax
c00103f0:	75 1a                	jne    c001040c <Semaphore::assertLocked(char const*)+0x70>
c00103f2:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c00103f7:	85 c0                	test   eax,eax
c00103f9:	74 11                	je     c001040c <Semaphore::assertLocked(char const*)+0x70>
c00103fb:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c0010405:	e8 7a 5e 00 00       	call   c0016284 <schedule()>
c001040a:	66 90                	xchg   ax,ax
c001040c:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0010414:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0010419:	85 c0                	test   eax,eax
c001041b:	75 03                	jne    c0010420 <Semaphore::assertLocked(char const*)+0x84>
c001041d:	fb                   	sti    
c001041e:	66 90                	xchg   ax,ax
c0010420:	90                   	nop
c0010421:	83 c4 0c             	add    esp,0xc
c0010424:	c3                   	ret    
c0010425:	90                   	nop
c0010426:	66 90                	xchg   ax,ax

c0010428 <Semaphore::acquire(int)>:
c0010428:	83 ec 1c             	sub    esp,0x1c
c001042b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0010430:	0f 84 9a 00 00 00    	je     c00104d0 <Semaphore::acquire(int)+0xa8>
c0010436:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001043e:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0010443:	90                   	nop
c0010444:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0010449:	85 c0                	test   eax,eax
c001044b:	74 77                	je     c00104c4 <Semaphore::acquire(int)+0x9c>
c001044d:	83 ec 0c             	sub    esp,0xc
c0010450:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010454:	e8 6f fe ff ff       	call   c00102c8 <Semaphore::tryAcquire()>
c0010459:	83 c4 10             	add    esp,0x10
c001045c:	83 f0 01             	xor    eax,0x1
c001045f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0010463:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0010467:	83 f0 01             	xor    eax,0x1
c001046a:	0f b6 c0             	movzx  eax,al
c001046d:	85 c0                	test   eax,eax
c001046f:	75 4f                	jne    c00104c0 <Semaphore::acquire(int)+0x98>
c0010471:	83 7c 24 24 28       	cmp    DWORD PTR [esp+0x24],0x28
c0010476:	7f 2c                	jg     c00104a4 <Semaphore::acquire(int)+0x7c>
c0010478:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001047c:	89 d0                	mov    eax,edx
c001047e:	c1 e0 02             	shl    eax,0x2
c0010481:	01 d0                	add    eax,edx
c0010483:	01 c0                	add    eax,eax
c0010485:	83 ec 0c             	sub    esp,0xc
c0010488:	50                   	push   eax
c0010489:	e8 de 5f 00 00       	call   c001646c <milliTenthSleep(unsigned int)>
c001048e:	83 c4 10             	add    esp,0x10
c0010491:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010495:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0010499:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00104a1:	eb a1                	jmp    c0010444 <Semaphore::acquire(int)+0x1c>
c00104a3:	90                   	nop
c00104a4:	83 ec 0c             	sub    esp,0xc
c00104a7:	68 90 01 00 00       	push   0x190
c00104ac:	e8 bb 5f 00 00       	call   c001646c <milliTenthSleep(unsigned int)>
c00104b1:	83 c4 10             	add    esp,0x10
c00104b4:	83 44 24 0c 28       	add    DWORD PTR [esp+0xc],0x28
c00104b9:	83 6c 24 24 28       	sub    DWORD PTR [esp+0x24],0x28
c00104be:	eb 84                	jmp    c0010444 <Semaphore::acquire(int)+0x1c>
c00104c0:	90                   	nop
c00104c1:	8d 76 00             	lea    esi,[esi+0x0]
c00104c4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00104c8:	e9 fb 00 00 00       	jmp    c00105c8 <Semaphore::acquire(int)+0x1a0>
c00104cd:	8d 76 00             	lea    esi,[esi+0x0]
c00104d0:	fa                   	cli    
c00104d1:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00104d6:	83 c0 01             	add    eax,0x1
c00104d9:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c00104de:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00104e3:	83 c0 01             	add    eax,0x1
c00104e6:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00104eb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104ef:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00104f2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00104f6:	8b 00                	mov    eax,DWORD PTR [eax]
c00104f8:	39 c2                	cmp    edx,eax
c00104fa:	7d 14                	jge    c0010510 <Semaphore::acquire(int)+0xe8>
c00104fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010500:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010503:	8d 50 01             	lea    edx,[eax+0x1]
c0010506:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001050a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001050d:	eb 6d                	jmp    c001057c <Semaphore::acquire(int)+0x154>
c001050f:	90                   	nop
c0010510:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010515:	8b 00                	mov    eax,DWORD PTR [eax]
c0010517:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001051e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010522:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010525:	85 c0                	test   eax,eax
c0010527:	75 13                	jne    c001053c <Semaphore::acquire(int)+0x114>
c0010529:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001052e:	8b 10                	mov    edx,DWORD PTR [eax]
c0010530:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010534:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0010537:	eb 17                	jmp    c0010550 <Semaphore::acquire(int)+0x128>
c0010539:	8d 76 00             	lea    esi,[esi+0x0]
c001053c:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0010541:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010545:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0010548:	8b 12                	mov    edx,DWORD PTR [edx]
c001054a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001054d:	8d 76 00             	lea    esi,[esi+0x0]
c0010550:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0010555:	8b 10                	mov    edx,DWORD PTR [eax]
c0010557:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001055b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001055e:	83 ec 0c             	sub    esp,0xc
c0010561:	68 40 34 02 c0       	push   0xc0023440
c0010566:	e8 f9 69 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001056b:	83 c4 10             	add    esp,0x10
c001056e:	83 ec 0c             	sub    esp,0xc
c0010571:	6a 05                	push   0x5
c0010573:	e8 cc 5d 00 00       	call   c0016344 <blockTask(TaskState)>
c0010578:	83 c4 10             	add    esp,0x10
c001057b:	90                   	nop
c001057c:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0010581:	83 e8 01             	sub    eax,0x1
c0010584:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0010589:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c001058e:	85 c0                	test   eax,eax
c0010590:	75 1a                	jne    c00105ac <Semaphore::acquire(int)+0x184>
c0010592:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c0010597:	85 c0                	test   eax,eax
c0010599:	74 11                	je     c00105ac <Semaphore::acquire(int)+0x184>
c001059b:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c00105a5:	e8 da 5c 00 00       	call   c0016284 <schedule()>
c00105aa:	66 90                	xchg   ax,ax
c00105ac:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00105b4:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00105b9:	85 c0                	test   eax,eax
c00105bb:	75 03                	jne    c00105c0 <Semaphore::acquire(int)+0x198>
c00105bd:	fb                   	sti    
c00105be:	66 90                	xchg   ax,ax
c00105c0:	b8 00 00 00 00       	mov    eax,0x0
c00105c5:	8d 76 00             	lea    esi,[esi+0x0]
c00105c8:	83 c4 1c             	add    esp,0x1c
c00105cb:	c3                   	ret    

c00105cc <Semaphore::acquire()>:
c00105cc:	83 ec 0c             	sub    esp,0xc
c00105cf:	83 ec 08             	sub    esp,0x8
c00105d2:	6a 00                	push   0x0
c00105d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00105d8:	e8 4b fe ff ff       	call   c0010428 <Semaphore::acquire(int)>
c00105dd:	83 c4 10             	add    esp,0x10
c00105e0:	90                   	nop
c00105e1:	83 c4 0c             	add    esp,0xc
c00105e4:	c3                   	ret    
c00105e5:	90                   	nop
c00105e6:	66 90                	xchg   ax,ax

c00105e8 <Semaphore::release()>:
c00105e8:	83 ec 1c             	sub    esp,0x1c
c00105eb:	fa                   	cli    
c00105ec:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00105f1:	83 c0 01             	add    eax,0x1
c00105f4:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c00105f9:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00105fe:	83 c0 01             	add    eax,0x1
c0010601:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0010606:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001060a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001060d:	85 c0                	test   eax,eax
c001060f:	74 2b                	je     c001063c <Semaphore::release()+0x54>
c0010611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010615:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010618:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001061c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010620:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010623:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010627:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001062a:	83 ec 0c             	sub    esp,0xc
c001062d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010631:	e8 5e 5f 00 00       	call   c0016594 <unblockTask(ThreadControlBlock*)>
c0010636:	83 c4 10             	add    esp,0x10
c0010639:	eb 15                	jmp    c0010650 <Semaphore::release()+0x68>
c001063b:	90                   	nop
c001063c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0010640:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0010643:	8d 50 ff             	lea    edx,[eax-0x1]
c0010646:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001064a:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001064d:	8d 76 00             	lea    esi,[esi+0x0]
c0010650:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0010655:	83 e8 01             	sub    eax,0x1
c0010658:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c001065d:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0010662:	85 c0                	test   eax,eax
c0010664:	75 1a                	jne    c0010680 <Semaphore::release()+0x98>
c0010666:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c001066b:	85 c0                	test   eax,eax
c001066d:	74 11                	je     c0010680 <Semaphore::release()+0x98>
c001066f:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c0010679:	e8 06 5c 00 00       	call   c0016284 <schedule()>
c001067e:	66 90                	xchg   ax,ax
c0010680:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0010688:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001068d:	85 c0                	test   eax,eax
c001068f:	75 03                	jne    c0010694 <Semaphore::release()+0xac>
c0010691:	fb                   	sti    
c0010692:	66 90                	xchg   ax,ax
c0010694:	90                   	nop
c0010695:	83 c4 1c             	add    esp,0x1c
c0010698:	c3                   	ret    

c0010699 <KiSigKill(int)>:
c0010699:	83 ec 0c             	sub    esp,0xc
c001069c:	6a 00                	push   0x0
c001069e:	6a 00                	push   0x0
c00106a0:	6a ff                	push   0xffffffff
c00106a2:	6a 01                	push   0x1
c00106a4:	e8 a9 59 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106a9:	83 c4 1c             	add    esp,0x1c
c00106ac:	c3                   	ret    

c00106ad <KiDefaultSignalHandlerIgnore(int)>:
c00106ad:	c3                   	ret    

c00106ae <KiDefaultSignalHandlerPause(int)>:
c00106ae:	57                   	push   edi
c00106af:	b9 07 00 00 00       	mov    ecx,0x7
c00106b4:	56                   	push   esi
c00106b5:	be 9b 34 02 c0       	mov    esi,0xc002349b
c00106ba:	83 ec 24             	sub    esp,0x24
c00106bd:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00106c1:	fc                   	cld    
c00106c2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00106c4:	8d 44 24 04          	lea    eax,[esp+0x4]
c00106c8:	50                   	push   eax
c00106c9:	6a 00                	push   0x0
c00106cb:	6a 00                	push   0x0
c00106cd:	6a 27                	push   0x27
c00106cf:	e8 7e 59 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c00106d4:	83 c4 34             	add    esp,0x34
c00106d7:	5e                   	pop    esi
c00106d8:	5f                   	pop    edi
c00106d9:	c3                   	ret    

c00106da <KiDefaultSignalHandlerResume(int)>:
c00106da:	57                   	push   edi
c00106db:	b9 1d 00 00 00       	mov    ecx,0x1d
c00106e0:	56                   	push   esi
c00106e1:	be b7 34 02 c0       	mov    esi,0xc00234b7
c00106e6:	83 ec 24             	sub    esp,0x24
c00106e9:	8d 7c 24 03          	lea    edi,[esp+0x3]
c00106ed:	fc                   	cld    
c00106ee:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00106f0:	8d 44 24 03          	lea    eax,[esp+0x3]
c00106f4:	50                   	push   eax
c00106f5:	6a 00                	push   0x0
c00106f7:	6a 00                	push   0x0
c00106f9:	6a 27                	push   0x27
c00106fb:	e8 52 59 01 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0010700:	83 c4 34             	add    esp,0x34
c0010703:	5e                   	pop    esi
c0010704:	5f                   	pop    edi
c0010705:	c3                   	ret    

c0010706 <KeDeinitSignals(SigHandlerBlock*)>:
c0010706:	e9 08 ec ff ff       	jmp    c000f313 <free>

c001070b <KeInitSignals()>:
c001070b:	53                   	push   ebx
c001070c:	83 ec 14             	sub    esp,0x14
c001070f:	68 c8 00 00 00       	push   0xc8
c0010714:	e8 ea eb ff ff       	call   c000f303 <malloc>
c0010719:	83 c4 0c             	add    esp,0xc
c001071c:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c0010726:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c0010730:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c0010737:	89 c3                	mov    ebx,eax
c0010739:	6a 20                	push   0x20
c001073b:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c0010741:	6a 00                	push   0x0
c0010743:	50                   	push   eax
c0010744:	e8 a7 fd fe ff       	call   c00004f0 <memset>
c0010749:	83 c4 0c             	add    esp,0xc
c001074c:	6a 44                	push   0x44
c001074e:	6a 00                	push   0x0
c0010750:	53                   	push   ebx
c0010751:	e8 9a fd fe ff       	call   c00004f0 <memset>
c0010756:	89 d8                	mov    eax,ebx
c0010758:	83 c4 18             	add    esp,0x18
c001075b:	5b                   	pop    ebx
c001075c:	c3                   	ret    

c001075d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c001075d:	53                   	push   ebx
c001075e:	b8 01 00 00 00       	mov    eax,0x1
c0010763:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010767:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001076b:	83 f9 10             	cmp    ecx,0x10
c001076e:	7f 21                	jg     c0010791 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c0010770:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c0010773:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010777:	89 03                	mov    DWORD PTR [ebx],eax
c0010779:	b8 01 00 00 00       	mov    eax,0x1
c001077e:	d3 e0                	shl    eax,cl
c0010780:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0010784:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0010787:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c001078f:	31 c0                	xor    eax,eax
c0010791:	5b                   	pop    ebx
c0010792:	c3                   	ret    

c0010793 <KeRaiseSignal(SigHandlerBlock*, int)>:
c0010793:	55                   	push   ebp
c0010794:	57                   	push   edi
c0010795:	bf 08 00 00 00       	mov    edi,0x8
c001079a:	56                   	push   esi
c001079b:	53                   	push   ebx
c001079c:	83 ec 18             	sub    esp,0x18
c001079f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00107a3:	68 d4 34 02 c0       	push   0xc00234d4
c00107a8:	e8 b7 67 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00107ad:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00107b4:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c00107ba:	83 c4 10             	add    esp,0x10
c00107bd:	31 c9                	xor    ecx,ecx
c00107bf:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00107c3:	99                   	cdq    
c00107c4:	f7 ff                	idiv   edi
c00107c6:	8d 42 24             	lea    eax,[edx+0x24]
c00107c9:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c00107cd:	85 f6                	test   esi,esi
c00107cf:	75 1a                	jne    c00107eb <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c00107d1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00107d5:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c00107d9:	50                   	push   eax
c00107da:	50                   	push   eax
c00107db:	52                   	push   edx
c00107dc:	68 e5 34 02 c0       	push   0xc00234e5
c00107e1:	e8 7e 67 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00107e6:	83 c4 10             	add    esp,0x10
c00107e9:	eb 1b                	jmp    c0010806 <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c00107eb:	41                   	inc    ecx
c00107ec:	83 f9 08             	cmp    ecx,0x8
c00107ef:	75 ce                	jne    c00107bf <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c00107f1:	83 ec 0c             	sub    esp,0xc
c00107f4:	be 01 00 00 00       	mov    esi,0x1
c00107f9:	68 06 35 02 c0       	push   0xc0023506
c00107fe:	e8 61 67 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0010803:	83 c4 10             	add    esp,0x10
c0010806:	83 c4 0c             	add    esp,0xc
c0010809:	89 f0                	mov    eax,esi
c001080b:	5b                   	pop    ebx
c001080c:	5e                   	pop    esi
c001080d:	5f                   	pop    edi
c001080e:	5d                   	pop    ebp
c001080f:	c3                   	ret    

c0010810 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0010810:	55                   	push   ebp
c0010811:	57                   	push   edi
c0010812:	56                   	push   esi
c0010813:	53                   	push   ebx
c0010814:	51                   	push   ecx
c0010815:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010819:	85 db                	test   ebx,ebx
c001081b:	0f 84 bc 00 00 00    	je     c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010821:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c0010828:	0f 84 af 00 00 00    	je     c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c001082e:	31 c9                	xor    ecx,ecx
c0010830:	bf 08 00 00 00       	mov    edi,0x8
c0010835:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c001083b:	8d 04 0e             	lea    eax,[esi+ecx*1]
c001083e:	99                   	cdq    
c001083f:	f7 ff                	idiv   edi
c0010841:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c0010848:	85 ed                	test   ebp,ebp
c001084a:	0f 84 9e 00 00 00    	je     c00108ee <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c0010850:	89 e9                	mov    ecx,ebp
c0010852:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c0010858:	bf 01 00 00 00       	mov    edi,0x1
c001085d:	89 04 24             	mov    DWORD PTR [esp],eax
c0010860:	d3 e7                	shl    edi,cl
c0010862:	31 c9                	xor    ecx,ecx
c0010864:	b8 01 00 00 00       	mov    eax,0x1
c0010869:	d3 e0                	shl    eax,cl
c001086b:	85 04 24             	test   DWORD PTR [esp],eax
c001086e:	74 06                	je     c0010876 <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c0010870:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c0010874:	75 67                	jne    c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010876:	41                   	inc    ecx
c0010877:	83 f9 11             	cmp    ecx,0x11
c001087a:	75 e8                	jne    c0010864 <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c001087c:	46                   	inc    esi
c001087d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010880:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c0010886:	09 f8                	or     eax,edi
c0010888:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c0010893:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0010899:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c00108a0:	31 c0                	xor    eax,eax
c00108a2:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c00108aa:	74 09                	je     c00108b5 <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c00108ac:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c00108b3:	eb 06                	jmp    c00108bb <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c00108b5:	40                   	inc    eax
c00108b6:	83 f8 08             	cmp    eax,0x8
c00108b9:	75 e7                	jne    c00108a2 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c00108bb:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c00108be:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00108c2:	83 fd 09             	cmp    ebp,0x9
c00108c5:	89 2a                	mov    DWORD PTR [edx],ebp
c00108c7:	75 07                	jne    c00108d0 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c00108c9:	b8 99 06 01 c0       	mov    eax,0xc0010699
c00108ce:	eb 31                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00108d0:	83 f8 01             	cmp    eax,0x1
c00108d3:	75 0c                	jne    c00108e1 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c00108d5:	f7 d7                	not    edi
c00108d7:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c00108dd:	31 c0                	xor    eax,eax
c00108df:	eb 20                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00108e1:	85 c0                	test   eax,eax
c00108e3:	75 1c                	jne    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00108e5:	8b 04 ad a0 57 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffda860]
c00108ec:	eb 13                	jmp    c0010901 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c00108ee:	46                   	inc    esi
c00108ef:	41                   	inc    ecx
c00108f0:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c00108f6:	83 f9 08             	cmp    ecx,0x8
c00108f9:	0f 85 36 ff ff ff    	jne    c0010835 <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c00108ff:	eb dc                	jmp    c00108dd <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0010901:	5a                   	pop    edx
c0010902:	5b                   	pop    ebx
c0010903:	5e                   	pop    esi
c0010904:	5f                   	pop    edi
c0010905:	5d                   	pop    ebp
c0010906:	c3                   	ret    

c0010907 <KiCheckSignalZ>:
c0010907:	83 ec 10             	sub    esp,0x10
c001090a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001090e:	50                   	push   eax
c001090f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010914:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010917:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001091d:	e8 ee fe ff ff       	call   c0010810 <KeCheckSignal(SigHandlerBlock*, int*)>
c0010922:	5a                   	pop    edx
c0010923:	31 d2                	xor    edx,edx
c0010925:	59                   	pop    ecx
c0010926:	85 c0                	test   eax,eax
c0010928:	74 19                	je     c0010943 <KiCheckSignalZ+0x3c>
c001092a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010930:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0010933:	89 02                	mov    DWORD PTR [edx],eax
c0010935:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c001093c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010940:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0010943:	89 d0                	mov    eax,edx
c0010945:	83 c4 10             	add    esp,0x10
c0010948:	c3                   	ret    

c0010949 <KeCompleteSignal(SigHandlerBlock*, int)>:
c0010949:	56                   	push   esi
c001094a:	53                   	push   ebx
c001094b:	bb 01 00 00 00       	mov    ebx,0x1
c0010950:	52                   	push   edx
c0010951:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010955:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010959:	d3 e3                	shl    ebx,cl
c001095b:	83 f9 10             	cmp    ecx,0x10
c001095e:	7f 08                	jg     c0010968 <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c0010960:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c0010966:	75 10                	jne    c0010978 <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c0010968:	83 ec 0c             	sub    esp,0xc
c001096b:	68 17 35 02 c0       	push   0xc0023517
c0010970:	e8 d5 ec ff ff       	call   c000f64a <KePanic(char const*)>
c0010975:	83 c4 10             	add    esp,0x10
c0010978:	f7 d3                	not    ebx
c001097a:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0010980:	58                   	pop    eax
c0010981:	5b                   	pop    ebx
c0010982:	5e                   	pop    esi
c0010983:	c3                   	ret    

c0010984 <KiFinishSignalZ>:
c0010984:	53                   	push   ebx
c0010985:	83 ec 10             	sub    esp,0x10
c0010988:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001098c:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001098f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010994:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010997:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001099d:	e8 a7 ff ff ff       	call   c0010949 <KeCompleteSignal(SigHandlerBlock*, int)>
c00109a2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00109a8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00109af:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00109b6:	83 c4 18             	add    esp,0x18
c00109b9:	5b                   	pop    ebx
c00109ba:	c3                   	ret    

c00109bb <SysSeekDir(regs*)>:
c00109bb:	31 c0                	xor    eax,eax
c00109bd:	31 d2                	xor    edx,edx
c00109bf:	c3                   	ret    

c00109c0 <SysTellDir(regs*)>:
c00109c0:	31 c0                	xor    eax,eax
c00109c2:	31 d2                	xor    edx,edx
c00109c4:	c3                   	ret    

c00109c5 <SysVerify(regs*)>:
c00109c5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00109c9:	31 d2                	xor    edx,edx
c00109cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109ce:	c3                   	ret    

c00109cf <SysGetArgc(regs*)>:
c00109cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00109d4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00109d7:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c00109dd:	89 c2                	mov    edx,eax
c00109df:	c1 fa 1f             	sar    edx,0x1f
c00109e2:	c3                   	ret    

c00109e3 <SysTTYName(regs*)>:
c00109e3:	b8 01 00 00 00       	mov    eax,0x1
c00109e8:	31 d2                	xor    edx,edx
c00109ea:	c3                   	ret    

c00109eb <SysFormatDisk(regs*)>:
c00109eb:	56                   	push   esi
c00109ec:	53                   	push   ebx
c00109ed:	83 ec 04             	sub    esp,0x4
c00109f0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00109f4:	8b 1d 04 a3 02 c0    	mov    ebx,DWORD PTR ds:0xc002a304
c00109fa:	eb 28                	jmp    c0010a24 <SysFormatDisk(regs*)+0x39>
c00109fc:	83 ec 0c             	sub    esp,0xc
c00109ff:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010a02:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010a05:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010a07:	51                   	push   ecx
c0010a08:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010a0b:	51                   	push   ecx
c0010a0c:	50                   	push   eax
c0010a0d:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c0010a14:	50                   	push   eax
c0010a15:	53                   	push   ebx
c0010a16:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c0010a19:	83 c4 20             	add    esp,0x20
c0010a1c:	83 f8 08             	cmp    eax,0x8
c0010a1f:	75 14                	jne    c0010a35 <SysFormatDisk(regs*)+0x4a>
c0010a21:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010a24:	85 db                	test   ebx,ebx
c0010a26:	75 d4                	jne    c00109fc <SysFormatDisk(regs*)+0x11>
c0010a28:	83 c4 04             	add    esp,0x4
c0010a2b:	b8 03 00 00 00       	mov    eax,0x3
c0010a30:	31 d2                	xor    edx,edx
c0010a32:	5b                   	pop    ebx
c0010a33:	5e                   	pop    esi
c0010a34:	c3                   	ret    
c0010a35:	85 c0                	test   eax,eax
c0010a37:	74 1f                	je     c0010a58 <SysFormatDisk(regs*)+0x6d>
c0010a39:	83 f8 09             	cmp    eax,0x9
c0010a3c:	74 0d                	je     c0010a4b <SysFormatDisk(regs*)+0x60>
c0010a3e:	83 c4 04             	add    esp,0x4
c0010a41:	b8 02 00 00 00       	mov    eax,0x2
c0010a46:	31 d2                	xor    edx,edx
c0010a48:	5b                   	pop    ebx
c0010a49:	5e                   	pop    esi
c0010a4a:	c3                   	ret    
c0010a4b:	83 c4 04             	add    esp,0x4
c0010a4e:	b8 01 00 00 00       	mov    eax,0x1
c0010a53:	31 d2                	xor    edx,edx
c0010a55:	5b                   	pop    ebx
c0010a56:	5e                   	pop    esi
c0010a57:	c3                   	ret    
c0010a58:	83 c4 04             	add    esp,0x4
c0010a5b:	31 c0                	xor    eax,eax
c0010a5d:	31 d2                	xor    edx,edx
c0010a5f:	5b                   	pop    ebx
c0010a60:	5e                   	pop    esi
c0010a61:	c3                   	ret    

c0010a62 <SysSetDiskVolumeLabel(regs*)>:
c0010a62:	56                   	push   esi
c0010a63:	53                   	push   ebx
c0010a64:	83 ec 04             	sub    esp,0x4
c0010a67:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010a6b:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010a6e:	83 f8 19             	cmp    eax,0x19
c0010a71:	77 33                	ja     c0010aa6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010a73:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c0010a7a:	85 c9                	test   ecx,ecx
c0010a7c:	74 28                	je     c0010aa6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010a7e:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010a81:	85 db                	test   ebx,ebx
c0010a83:	74 21                	je     c0010aa6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010a85:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0010a8b:	85 d2                	test   edx,edx
c0010a8d:	74 17                	je     c0010aa6 <SysSetDiskVolumeLabel(regs*)+0x44>
c0010a8f:	8b 32                	mov    esi,DWORD PTR [edx]
c0010a91:	53                   	push   ebx
c0010a92:	50                   	push   eax
c0010a93:	51                   	push   ecx
c0010a94:	52                   	push   edx
c0010a95:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0010a98:	83 c4 10             	add    esp,0x10
c0010a9b:	89 c2                	mov    edx,eax
c0010a9d:	83 c4 04             	add    esp,0x4
c0010aa0:	c1 fa 1f             	sar    edx,0x1f
c0010aa3:	5b                   	pop    ebx
c0010aa4:	5e                   	pop    esi
c0010aa5:	c3                   	ret    
c0010aa6:	83 c4 04             	add    esp,0x4
c0010aa9:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010aae:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ab3:	5b                   	pop    ebx
c0010ab4:	5e                   	pop    esi
c0010ab5:	c3                   	ret    

c0010ab6 <SysGetDiskVolumeLabel(regs*)>:
c0010ab6:	57                   	push   edi
c0010ab7:	56                   	push   esi
c0010ab8:	53                   	push   ebx
c0010ab9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010abd:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010ac0:	83 fa 19             	cmp    edx,0x19
c0010ac3:	77 3c                	ja     c0010b01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ac5:	8b 0c 95 80 a7 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd5880]
c0010acc:	85 c9                	test   ecx,ecx
c0010ace:	74 31                	je     c0010b01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ad0:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010ad3:	85 db                	test   ebx,ebx
c0010ad5:	74 2a                	je     c0010b01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ad7:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010ada:	85 f6                	test   esi,esi
c0010adc:	74 23                	je     c0010b01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ade:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0010ae4:	85 c0                	test   eax,eax
c0010ae6:	74 19                	je     c0010b01 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0010ae8:	83 ec 0c             	sub    esp,0xc
c0010aeb:	8b 38                	mov    edi,DWORD PTR [eax]
c0010aed:	56                   	push   esi
c0010aee:	53                   	push   ebx
c0010aef:	52                   	push   edx
c0010af0:	51                   	push   ecx
c0010af1:	50                   	push   eax
c0010af2:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0010af5:	83 c4 20             	add    esp,0x20
c0010af8:	89 c2                	mov    edx,eax
c0010afa:	5b                   	pop    ebx
c0010afb:	c1 fa 1f             	sar    edx,0x1f
c0010afe:	5e                   	pop    esi
c0010aff:	5f                   	pop    edi
c0010b00:	c3                   	ret    
c0010b01:	5b                   	pop    ebx
c0010b02:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010b07:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010b0c:	5e                   	pop    esi
c0010b0d:	5f                   	pop    edi
c0010b0e:	c3                   	ret    

c0010b0f <SysRealpath(regs*)>:
c0010b0f:	83 ec 0c             	sub    esp,0xc
c0010b12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010b16:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010b19:	85 d2                	test   edx,edx
c0010b1b:	74 07                	je     c0010b24 <SysRealpath(regs*)+0x15>
c0010b1d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010b20:	85 c0                	test   eax,eax
c0010b22:	75 0b                	jne    c0010b2f <SysRealpath(regs*)+0x20>
c0010b24:	b8 01 00 00 00       	mov    eax,0x1
c0010b29:	31 d2                	xor    edx,edx
c0010b2b:	83 c4 0c             	add    esp,0xc
c0010b2e:	c3                   	ret    
c0010b2f:	6a 00                	push   0x0
c0010b31:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010b37:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010b3a:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010b40:	51                   	push   ecx
c0010b41:	52                   	push   edx
c0010b42:	50                   	push   eax
c0010b43:	e8 d2 72 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010b48:	83 c4 10             	add    esp,0x10
c0010b4b:	31 c0                	xor    eax,eax
c0010b4d:	31 d2                	xor    edx,edx
c0010b4f:	83 c4 0c             	add    esp,0xc
c0010b52:	c3                   	ret    

c0010b53 <SysReadDir(regs*)>:
c0010b53:	53                   	push   ebx
c0010b54:	83 ec 18             	sub    esp,0x18
c0010b57:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b5b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010b5e:	83 f8 02             	cmp    eax,0x2
c0010b61:	76 61                	jbe    c0010bc4 <SysReadDir(regs*)+0x71>
c0010b63:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0010b6a:	77 49                	ja     c0010bb5 <SysReadDir(regs*)+0x62>
c0010b6c:	83 ec 0c             	sub    esp,0xc
c0010b6f:	50                   	push   eax
c0010b70:	e8 78 1d 00 00       	call   c00128ed <KeGetFileFromDescriptor(int)>
c0010b75:	83 c4 10             	add    esp,0x10
c0010b78:	85 c0                	test   eax,eax
c0010b7a:	74 39                	je     c0010bb5 <SysReadDir(regs*)+0x62>
c0010b7c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010b84:	83 ec 0c             	sub    esp,0xc
c0010b87:	8b 10                	mov    edx,DWORD PTR [eax]
c0010b89:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0010b8d:	51                   	push   ecx
c0010b8e:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010b91:	51                   	push   ecx
c0010b92:	6a 00                	push   0x0
c0010b94:	68 10 01 00 00       	push   0x110
c0010b99:	50                   	push   eax
c0010b9a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010b9d:	83 c4 20             	add    esp,0x20
c0010ba0:	85 c0                	test   eax,eax
c0010ba2:	74 29                	je     c0010bcd <SysReadDir(regs*)+0x7a>
c0010ba4:	83 f8 07             	cmp    eax,0x7
c0010ba7:	74 1b                	je     c0010bc4 <SysReadDir(regs*)+0x71>
c0010ba9:	b8 02 00 00 00       	mov    eax,0x2
c0010bae:	31 d2                	xor    edx,edx
c0010bb0:	83 c4 18             	add    esp,0x18
c0010bb3:	5b                   	pop    ebx
c0010bb4:	c3                   	ret    
c0010bb5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010bba:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010bbf:	83 c4 18             	add    esp,0x18
c0010bc2:	5b                   	pop    ebx
c0010bc3:	c3                   	ret    
c0010bc4:	b8 01 00 00 00       	mov    eax,0x1
c0010bc9:	31 d2                	xor    edx,edx
c0010bcb:	eb e3                	jmp    c0010bb0 <SysReadDir(regs*)+0x5d>
c0010bcd:	31 c0                	xor    eax,eax
c0010bcf:	31 d2                	xor    edx,edx
c0010bd1:	eb dd                	jmp    c0010bb0 <SysReadDir(regs*)+0x5d>

c0010bd3 <SysIsATTY(regs*)>:
c0010bd3:	83 ec 0c             	sub    esp,0xc
c0010bd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010bda:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010bdd:	83 f8 02             	cmp    eax,0x2
c0010be0:	76 07                	jbe    c0010be9 <SysIsATTY(regs*)+0x16>
c0010be2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0010be7:	75 26                	jne    c0010c0f <SysIsATTY(regs*)+0x3c>
c0010be9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bee:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010bf1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0010bf7:	85 c0                	test   eax,eax
c0010bf9:	74 24                	je     c0010c1f <SysIsATTY(regs*)+0x4c>
c0010bfb:	83 ec 0c             	sub    esp,0xc
c0010bfe:	8b 10                	mov    edx,DWORD PTR [eax]
c0010c00:	50                   	push   eax
c0010c01:	ff 12                	call   DWORD PTR [edx]
c0010c03:	31 d2                	xor    edx,edx
c0010c05:	0f b6 c0             	movzx  eax,al
c0010c08:	83 c4 10             	add    esp,0x10
c0010c0b:	83 c4 0c             	add    esp,0xc
c0010c0e:	c3                   	ret    
c0010c0f:	83 ec 0c             	sub    esp,0xc
c0010c12:	50                   	push   eax
c0010c13:	e8 d5 1c 00 00       	call   c00128ed <KeGetFileFromDescriptor(int)>
c0010c18:	83 c4 10             	add    esp,0x10
c0010c1b:	85 c0                	test   eax,eax
c0010c1d:	75 dc                	jne    c0010bfb <SysIsATTY(regs*)+0x28>
c0010c1f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c24:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c29:	83 c4 0c             	add    esp,0xc
c0010c2c:	c3                   	ret    

c0010c2d <SysSeek(regs*)>:
c0010c2d:	53                   	push   ebx
c0010c2e:	83 ec 08             	sub    esp,0x8
c0010c31:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c35:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c38:	8d 50 fd             	lea    edx,[eax-0x3]
c0010c3b:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010c41:	77 39                	ja     c0010c7c <SysSeek(regs*)+0x4f>
c0010c43:	83 ec 0c             	sub    esp,0xc
c0010c46:	50                   	push   eax
c0010c47:	e8 a1 1c 00 00       	call   c00128ed <KeGetFileFromDescriptor(int)>
c0010c4c:	83 c4 10             	add    esp,0x10
c0010c4f:	85 c0                	test   eax,eax
c0010c51:	74 29                	je     c0010c7c <SysSeek(regs*)+0x4f>
c0010c53:	83 ec 04             	sub    esp,0x4
c0010c56:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010c59:	31 db                	xor    ebx,ebx
c0010c5b:	53                   	push   ebx
c0010c5c:	51                   	push   ecx
c0010c5d:	50                   	push   eax
c0010c5e:	e8 ab 75 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0010c63:	83 c4 10             	add    esp,0x10
c0010c66:	85 c0                	test   eax,eax
c0010c68:	0f 95 c0             	setne  al
c0010c6b:	31 d2                	xor    edx,edx
c0010c6d:	0f b6 c0             	movzx  eax,al
c0010c70:	f7 d8                	neg    eax
c0010c72:	83 d2 00             	adc    edx,0x0
c0010c75:	83 c4 08             	add    esp,0x8
c0010c78:	f7 da                	neg    edx
c0010c7a:	5b                   	pop    ebx
c0010c7b:	c3                   	ret    
c0010c7c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010c81:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010c86:	83 c4 08             	add    esp,0x8
c0010c89:	5b                   	pop    ebx
c0010c8a:	c3                   	ret    

c0010c8b <SysTell(regs*)>:
c0010c8b:	53                   	push   ebx
c0010c8c:	83 ec 08             	sub    esp,0x8
c0010c8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c93:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c96:	83 f8 02             	cmp    eax,0x2
c0010c99:	76 56                	jbe    c0010cf1 <SysTell(regs*)+0x66>
c0010c9b:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ca0:	76 19                	jbe    c0010cbb <SysTell(regs*)+0x30>
c0010ca2:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010ca5:	31 d2                	xor    edx,edx
c0010ca7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010cad:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010cb4:	31 c0                	xor    eax,eax
c0010cb6:	83 c4 08             	add    esp,0x8
c0010cb9:	5b                   	pop    ebx
c0010cba:	c3                   	ret    
c0010cbb:	83 ec 0c             	sub    esp,0xc
c0010cbe:	50                   	push   eax
c0010cbf:	e8 29 1c 00 00       	call   c00128ed <KeGetFileFromDescriptor(int)>
c0010cc4:	83 c4 10             	add    esp,0x10
c0010cc7:	85 c0                	test   eax,eax
c0010cc9:	74 26                	je     c0010cf1 <SysTell(regs*)+0x66>
c0010ccb:	83 ec 08             	sub    esp,0x8
c0010cce:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010cd1:	52                   	push   edx
c0010cd2:	50                   	push   eax
c0010cd3:	e8 e2 75 ff ff       	call   c00082ba <File::tell(unsigned long long*)>
c0010cd8:	83 c4 10             	add    esp,0x10
c0010cdb:	85 c0                	test   eax,eax
c0010cdd:	0f 95 c0             	setne  al
c0010ce0:	31 d2                	xor    edx,edx
c0010ce2:	0f b6 c0             	movzx  eax,al
c0010ce5:	f7 d8                	neg    eax
c0010ce7:	83 d2 00             	adc    edx,0x0
c0010cea:	83 c4 08             	add    esp,0x8
c0010ced:	f7 da                	neg    edx
c0010cef:	5b                   	pop    ebx
c0010cf0:	c3                   	ret    
c0010cf1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010cf6:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010cfb:	83 c4 08             	add    esp,0x8
c0010cfe:	5b                   	pop    ebx
c0010cff:	c3                   	ret    

c0010d00 <SysSize(regs*)>:
c0010d00:	53                   	push   ebx
c0010d01:	83 ec 18             	sub    esp,0x18
c0010d04:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d08:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d0b:	83 f8 02             	cmp    eax,0x2
c0010d0e:	76 5b                	jbe    c0010d6b <SysSize(regs*)+0x6b>
c0010d10:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010d15:	76 19                	jbe    c0010d30 <SysSize(regs*)+0x30>
c0010d17:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010d1a:	31 d2                	xor    edx,edx
c0010d1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010d22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010d29:	31 c0                	xor    eax,eax
c0010d2b:	83 c4 18             	add    esp,0x18
c0010d2e:	5b                   	pop    ebx
c0010d2f:	c3                   	ret    
c0010d30:	83 ec 0c             	sub    esp,0xc
c0010d33:	50                   	push   eax
c0010d34:	e8 b4 1b 00 00       	call   c00128ed <KeGetFileFromDescriptor(int)>
c0010d39:	83 c4 10             	add    esp,0x10
c0010d3c:	85 c0                	test   eax,eax
c0010d3e:	74 2b                	je     c0010d6b <SysSize(regs*)+0x6b>
c0010d40:	83 ec 04             	sub    esp,0x4
c0010d43:	8d 54 24 13          	lea    edx,[esp+0x13]
c0010d47:	52                   	push   edx
c0010d48:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010d4b:	52                   	push   edx
c0010d4c:	50                   	push   eax
c0010d4d:	e8 00 77 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0010d52:	83 c4 10             	add    esp,0x10
c0010d55:	85 c0                	test   eax,eax
c0010d57:	0f 95 c0             	setne  al
c0010d5a:	31 d2                	xor    edx,edx
c0010d5c:	0f b6 c0             	movzx  eax,al
c0010d5f:	f7 d8                	neg    eax
c0010d61:	83 d2 00             	adc    edx,0x0
c0010d64:	83 c4 18             	add    esp,0x18
c0010d67:	f7 da                	neg    edx
c0010d69:	5b                   	pop    ebx
c0010d6a:	c3                   	ret    
c0010d6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010d70:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010d75:	83 c4 18             	add    esp,0x18
c0010d78:	5b                   	pop    ebx
c0010d79:	c3                   	ret    

c0010d7a <SysSizeFromFilename(regs*)>:
c0010d7a:	55                   	push   ebp
c0010d7b:	57                   	push   edi
c0010d7c:	56                   	push   esi
c0010d7d:	53                   	push   ebx
c0010d7e:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010d84:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010d8b:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010d8e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010d91:	85 f6                	test   esi,esi
c0010d93:	74 34                	je     c0010dc9 <SysSizeFromFilename(regs*)+0x4f>
c0010d95:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010d9b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d9e:	83 f8 02             	cmp    eax,0x2
c0010da1:	76 2d                	jbe    c0010dd0 <SysSizeFromFilename(regs*)+0x56>
c0010da3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010da8:	76 3b                	jbe    c0010de5 <SysSizeFromFilename(regs*)+0x6b>
c0010daa:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010dad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010db3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010dba:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010dc0:	31 c0                	xor    eax,eax
c0010dc2:	5b                   	pop    ebx
c0010dc3:	31 d2                	xor    edx,edx
c0010dc5:	5e                   	pop    esi
c0010dc6:	5f                   	pop    edi
c0010dc7:	5d                   	pop    ebp
c0010dc8:	c3                   	ret    
c0010dc9:	89 f8                	mov    eax,edi
c0010dcb:	83 f8 02             	cmp    eax,0x2
c0010dce:	77 d3                	ja     c0010da3 <SysSizeFromFilename(regs*)+0x29>
c0010dd0:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010dd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010ddb:	5b                   	pop    ebx
c0010ddc:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010de1:	5e                   	pop    esi
c0010de2:	5f                   	pop    edi
c0010de3:	5d                   	pop    ebp
c0010de4:	c3                   	ret    
c0010de5:	83 ec 0c             	sub    esp,0xc
c0010de8:	68 14 01 00 00       	push   0x114
c0010ded:	e8 11 e5 ff ff       	call   c000f303 <malloc>
c0010df2:	6a 01                	push   0x1
c0010df4:	89 c5                	mov    ebp,eax
c0010df6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dfb:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010dfe:	50                   	push   eax
c0010dff:	57                   	push   edi
c0010e00:	55                   	push   ebp
c0010e01:	e8 2e 72 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010e06:	83 c4 20             	add    esp,0x20
c0010e09:	85 ed                	test   ebp,ebp
c0010e0b:	74 c3                	je     c0010dd0 <SysSizeFromFilename(regs*)+0x56>
c0010e0d:	83 ec 04             	sub    esp,0x4
c0010e10:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010e14:	50                   	push   eax
c0010e15:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010e18:	51                   	push   ecx
c0010e19:	55                   	push   ebp
c0010e1a:	e8 33 76 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0010e1f:	89 c3                	mov    ebx,eax
c0010e21:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e24:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010e27:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010e2a:	83 c4 10             	add    esp,0x10
c0010e2d:	85 db                	test   ebx,ebx
c0010e2f:	75 9f                	jne    c0010dd0 <SysSizeFromFilename(regs*)+0x56>
c0010e31:	6a 00                	push   0x0
c0010e33:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e38:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e3b:	05 0c 01 00 00       	add    eax,0x10c
c0010e40:	50                   	push   eax
c0010e41:	57                   	push   edi
c0010e42:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0010e49:	53                   	push   ebx
c0010e4a:	e8 cb 6f ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010e4f:	58                   	pop    eax
c0010e50:	5a                   	pop    edx
c0010e51:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010e55:	50                   	push   eax
c0010e56:	53                   	push   ebx
c0010e57:	e8 45 6a ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0010e5c:	83 c4 10             	add    esp,0x10
c0010e5f:	83 f8 01             	cmp    eax,0x1
c0010e62:	74 1a                	je     c0010e7e <SysSizeFromFilename(regs*)+0x104>
c0010e64:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010e69:	74 26                	je     c0010e91 <SysSizeFromFilename(regs*)+0x117>
c0010e6b:	85 f6                	test   esi,esi
c0010e6d:	0f 84 47 ff ff ff    	je     c0010dba <SysSizeFromFilename(regs*)+0x40>
c0010e73:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0010e79:	e9 3c ff ff ff       	jmp    c0010dba <SysSizeFromFilename(regs*)+0x40>
c0010e7e:	85 f6                	test   esi,esi
c0010e80:	0f 84 34 ff ff ff    	je     c0010dba <SysSizeFromFilename(regs*)+0x40>
c0010e86:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010e8c:	e9 29 ff ff ff       	jmp    c0010dba <SysSizeFromFilename(regs*)+0x40>
c0010e91:	85 f6                	test   esi,esi
c0010e93:	0f 84 21 ff ff ff    	je     c0010dba <SysSizeFromFilename(regs*)+0x40>
c0010e99:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010e9f:	e9 16 ff ff ff       	jmp    c0010dba <SysSizeFromFilename(regs*)+0x40>

c0010ea4 <SysSizeFromFilenameNoSymlink(regs*)>:
c0010ea4:	55                   	push   ebp
c0010ea5:	57                   	push   edi
c0010ea6:	56                   	push   esi
c0010ea7:	53                   	push   ebx
c0010ea8:	81 ec 4c 02 00 00    	sub    esp,0x24c
c0010eae:	8b 9c 24 60 02 00 00 	mov    ebx,DWORD PTR [esp+0x260]
c0010eb5:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010eb8:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010ebb:	85 f6                	test   esi,esi
c0010ebd:	74 34                	je     c0010ef3 <SysSizeFromFilenameNoSymlink(regs*)+0x4f>
c0010ebf:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010ec5:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ec8:	83 f8 02             	cmp    eax,0x2
c0010ecb:	76 2d                	jbe    c0010efa <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0010ecd:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010ed2:	76 3b                	jbe    c0010f0f <SysSizeFromFilenameNoSymlink(regs*)+0x6b>
c0010ed4:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010ed7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010edd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ee4:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010eea:	31 c0                	xor    eax,eax
c0010eec:	5b                   	pop    ebx
c0010eed:	31 d2                	xor    edx,edx
c0010eef:	5e                   	pop    esi
c0010ef0:	5f                   	pop    edi
c0010ef1:	5d                   	pop    ebp
c0010ef2:	c3                   	ret    
c0010ef3:	89 f8                	mov    eax,edi
c0010ef5:	83 f8 02             	cmp    eax,0x2
c0010ef8:	77 d3                	ja     c0010ecd <SysSizeFromFilenameNoSymlink(regs*)+0x29>
c0010efa:	81 c4 4c 02 00 00    	add    esp,0x24c
c0010f00:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f05:	5b                   	pop    ebx
c0010f06:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f0b:	5e                   	pop    esi
c0010f0c:	5f                   	pop    edi
c0010f0d:	5d                   	pop    ebp
c0010f0e:	c3                   	ret    
c0010f0f:	83 ec 0c             	sub    esp,0xc
c0010f12:	68 14 01 00 00       	push   0x114
c0010f17:	e8 e7 e3 ff ff       	call   c000f303 <malloc>
c0010f1c:	6a 00                	push   0x0
c0010f1e:	89 c5                	mov    ebp,eax
c0010f20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f25:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f28:	50                   	push   eax
c0010f29:	57                   	push   edi
c0010f2a:	55                   	push   ebp
c0010f2b:	e8 04 71 ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0010f30:	83 c4 20             	add    esp,0x20
c0010f33:	85 ed                	test   ebp,ebp
c0010f35:	74 c3                	je     c0010efa <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0010f37:	83 ec 04             	sub    esp,0x4
c0010f3a:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010f3e:	50                   	push   eax
c0010f3f:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010f42:	51                   	push   ecx
c0010f43:	55                   	push   ebp
c0010f44:	e8 09 75 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c0010f49:	89 c3                	mov    ebx,eax
c0010f4b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010f4e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0010f51:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f54:	83 c4 10             	add    esp,0x10
c0010f57:	85 db                	test   ebx,ebx
c0010f59:	75 9f                	jne    c0010efa <SysSizeFromFilenameNoSymlink(regs*)+0x56>
c0010f5b:	6a 00                	push   0x0
c0010f5d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010f62:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010f65:	05 0c 01 00 00       	add    eax,0x10c
c0010f6a:	50                   	push   eax
c0010f6b:	57                   	push   edi
c0010f6c:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0010f73:	53                   	push   ebx
c0010f74:	e8 a1 6e ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0010f79:	58                   	pop    eax
c0010f7a:	5a                   	pop    edx
c0010f7b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0010f7f:	50                   	push   eax
c0010f80:	53                   	push   ebx
c0010f81:	e8 1b 69 ff ff       	call   c00078a1 <KeDereferenceSymlink(char const*, char*)>
c0010f86:	83 c4 10             	add    esp,0x10
c0010f89:	83 f8 01             	cmp    eax,0x1
c0010f8c:	74 1a                	je     c0010fa8 <SysSizeFromFilenameNoSymlink(regs*)+0x104>
c0010f8e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010f93:	74 26                	je     c0010fbb <SysSizeFromFilenameNoSymlink(regs*)+0x117>
c0010f95:	85 f6                	test   esi,esi
c0010f97:	0f 84 47 ff ff ff    	je     c0010ee4 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010f9d:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0010fa3:	e9 3c ff ff ff       	jmp    c0010ee4 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010fa8:	85 f6                	test   esi,esi
c0010faa:	0f 84 34 ff ff ff    	je     c0010ee4 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010fb0:	c7 06 02 00 00 00    	mov    DWORD PTR [esi],0x2
c0010fb6:	e9 29 ff ff ff       	jmp    c0010ee4 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010fbb:	85 f6                	test   esi,esi
c0010fbd:	0f 84 21 ff ff ff    	je     c0010ee4 <SysSizeFromFilenameNoSymlink(regs*)+0x40>
c0010fc3:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0010fc9:	e9 16 ff ff ff       	jmp    c0010ee4 <SysSizeFromFilenameNoSymlink(regs*)+0x40>

c0010fce <SysClose(regs*)>:
c0010fce:	53                   	push   ebx
c0010fcf:	83 ec 08             	sub    esp,0x8
c0010fd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fd6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010fd9:	83 f8 02             	cmp    eax,0x2
c0010fdc:	76 41                	jbe    c001101f <SysClose(regs*)+0x51>
c0010fde:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0010fe4:	83 fa 01             	cmp    edx,0x1
c0010fe7:	76 2d                	jbe    c0011016 <SysClose(regs*)+0x48>
c0010fe9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010fee:	77 2f                	ja     c001101f <SysClose(regs*)+0x51>
c0010ff0:	83 ec 0c             	sub    esp,0xc
c0010ff3:	50                   	push   eax
c0010ff4:	e8 f4 18 00 00       	call   c00128ed <KeGetFileFromDescriptor(int)>
c0010ff9:	83 c4 10             	add    esp,0x10
c0010ffc:	89 c3                	mov    ebx,eax
c0010ffe:	85 c0                	test   eax,eax
c0011000:	74 1d                	je     c001101f <SysClose(regs*)+0x51>
c0011002:	83 ec 0c             	sub    esp,0xc
c0011005:	50                   	push   eax
c0011006:	e8 a3 71 ff ff       	call   c00081ae <File::close()>
c001100b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001100d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011010:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011013:	83 c4 10             	add    esp,0x10
c0011016:	31 c0                	xor    eax,eax
c0011018:	31 d2                	xor    edx,edx
c001101a:	83 c4 08             	add    esp,0x8
c001101d:	5b                   	pop    ebx
c001101e:	c3                   	ret    
c001101f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011024:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011029:	83 c4 08             	add    esp,0x8
c001102c:	5b                   	pop    ebx
c001102d:	c3                   	ret    

c001102e <SysOpenDir(regs*)>:
c001102e:	56                   	push   esi
c001102f:	53                   	push   ebx
c0011030:	83 ec 04             	sub    esp,0x4
c0011033:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011037:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001103a:	85 c9                	test   ecx,ecx
c001103c:	74 5d                	je     c001109b <SysOpenDir(regs*)+0x6d>
c001103e:	83 ec 0c             	sub    esp,0xc
c0011041:	68 14 01 00 00       	push   0x114
c0011046:	e8 b8 e2 ff ff       	call   c000f303 <malloc>
c001104b:	83 c4 0c             	add    esp,0xc
c001104e:	89 c6                	mov    esi,eax
c0011050:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011055:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011058:	50                   	push   eax
c0011059:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001105c:	52                   	push   edx
c001105d:	56                   	push   esi
c001105e:	e8 af 75 ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c0011063:	83 c4 10             	add    esp,0x10
c0011066:	85 f6                	test   esi,esi
c0011068:	74 31                	je     c001109b <SysOpenDir(regs*)+0x6d>
c001106a:	83 ec 0c             	sub    esp,0xc
c001106d:	56                   	push   esi
c001106e:	e8 67 76 ff ff       	call   c00086da <Directory::open()>
c0011073:	83 c4 10             	add    esp,0x10
c0011076:	85 c0                	test   eax,eax
c0011078:	75 21                	jne    c001109b <SysOpenDir(regs*)+0x6d>
c001107a:	83 ec 0c             	sub    esp,0xc
c001107d:	56                   	push   esi
c001107e:	e8 6d 15 00 00       	call   c00125f0 <UnixFile::getFileDescriptor()>
c0011083:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011086:	83 c4 10             	add    esp,0x10
c0011089:	89 02                	mov    DWORD PTR [edx],eax
c001108b:	c1 f8 1f             	sar    eax,0x1f
c001108e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011091:	83 c4 04             	add    esp,0x4
c0011094:	31 c0                	xor    eax,eax
c0011096:	31 d2                	xor    edx,edx
c0011098:	5b                   	pop    ebx
c0011099:	5e                   	pop    esi
c001109a:	c3                   	ret    
c001109b:	83 c4 04             	add    esp,0x4
c001109e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00110a3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110a8:	5b                   	pop    ebx
c00110a9:	5e                   	pop    esi
c00110aa:	c3                   	ret    

c00110ab <SysMakeDir(regs*)>:
c00110ab:	56                   	push   esi
c00110ac:	53                   	push   ebx
c00110ad:	83 ec 10             	sub    esp,0x10
c00110b0:	68 14 01 00 00       	push   0x114
c00110b5:	e8 49 e2 ff ff       	call   c000f303 <malloc>
c00110ba:	83 c4 0c             	add    esp,0xc
c00110bd:	89 c3                	mov    ebx,eax
c00110bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110c4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110c7:	50                   	push   eax
c00110c8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00110cc:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c00110cf:	52                   	push   edx
c00110d0:	53                   	push   ebx
c00110d1:	e8 3c 75 ff ff       	call   c0008612 <Directory::Directory(char const*, Process*)>
c00110d6:	83 c4 10             	add    esp,0x10
c00110d9:	85 db                	test   ebx,ebx
c00110db:	74 2c                	je     c0011109 <SysMakeDir(regs*)+0x5e>
c00110dd:	83 ec 0c             	sub    esp,0xc
c00110e0:	53                   	push   ebx
c00110e1:	e8 d4 77 ff ff       	call   c00088ba <Directory::create()>
c00110e6:	89 c6                	mov    esi,eax
c00110e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00110ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110ed:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00110f0:	83 c4 10             	add    esp,0x10
c00110f3:	31 c0                	xor    eax,eax
c00110f5:	85 f6                	test   esi,esi
c00110f7:	0f 95 c0             	setne  al
c00110fa:	31 d2                	xor    edx,edx
c00110fc:	f7 d8                	neg    eax
c00110fe:	83 d2 00             	adc    edx,0x0
c0011101:	83 c4 04             	add    esp,0x4
c0011104:	f7 da                	neg    edx
c0011106:	5b                   	pop    ebx
c0011107:	5e                   	pop    esi
c0011108:	c3                   	ret    
c0011109:	83 c4 04             	add    esp,0x4
c001110c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011111:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011116:	5b                   	pop    ebx
c0011117:	5e                   	pop    esi
c0011118:	c3                   	ret    

c0011119 <SysCloseDir(regs*)>:
c0011119:	53                   	push   ebx
c001111a:	83 ec 08             	sub    esp,0x8
c001111d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011121:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011124:	8d 50 fd             	lea    edx,[eax-0x3]
c0011127:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c001112d:	77 2f                	ja     c001115e <SysCloseDir(regs*)+0x45>
c001112f:	83 ec 0c             	sub    esp,0xc
c0011132:	50                   	push   eax
c0011133:	e8 b5 17 00 00       	call   c00128ed <KeGetFileFromDescriptor(int)>
c0011138:	83 c4 10             	add    esp,0x10
c001113b:	89 c3                	mov    ebx,eax
c001113d:	85 c0                	test   eax,eax
c001113f:	74 1d                	je     c001115e <SysCloseDir(regs*)+0x45>
c0011141:	83 ec 0c             	sub    esp,0xc
c0011144:	50                   	push   eax
c0011145:	e8 ec 75 ff ff       	call   c0008736 <Directory::close()>
c001114a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001114c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001114f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011152:	83 c4 10             	add    esp,0x10
c0011155:	31 c0                	xor    eax,eax
c0011157:	31 d2                	xor    edx,edx
c0011159:	83 c4 08             	add    esp,0x8
c001115c:	5b                   	pop    ebx
c001115d:	c3                   	ret    
c001115e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011163:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011168:	83 c4 08             	add    esp,0x8
c001116b:	5b                   	pop    ebx
c001116c:	c3                   	ret    

c001116d <SysWait(regs*)>:
c001116d:	83 ec 10             	sub    esp,0x10
c0011170:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011174:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011177:	52                   	push   edx
c0011178:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c001117b:	51                   	push   ecx
c001117c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001117f:	50                   	push   eax
c0011180:	e8 fb 51 00 00       	call   c0016380 <waitTask(int, int*, int)>
c0011185:	83 c4 1c             	add    esp,0x1c
c0011188:	89 c2                	mov    edx,eax
c001118a:	c1 fa 1f             	sar    edx,0x1f
c001118d:	c3                   	ret    

c001118e <SysNotImpl(regs*)>:
c001118e:	83 ec 18             	sub    esp,0x18
c0011191:	68 28 35 02 c0       	push   0xc0023528
c0011196:	e8 af e4 ff ff       	call   c000f64a <KePanic(char const*)>
c001119b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111a0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111a5:	83 c4 1c             	add    esp,0x1c
c00111a8:	c3                   	ret    

c00111a9 <SysPanic(regs*)>:
c00111a9:	83 ec 18             	sub    esp,0x18
c00111ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00111b0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00111b3:	50                   	push   eax
c00111b4:	e8 91 e4 ff ff       	call   c000f64a <KePanic(char const*)>
c00111b9:	b8 01 00 00 00       	mov    eax,0x1
c00111be:	31 d2                	xor    edx,edx
c00111c0:	83 c4 1c             	add    esp,0x1c
c00111c3:	c3                   	ret    

c00111c4 <SysRmdir(regs*)>:
c00111c4:	56                   	push   esi
c00111c5:	53                   	push   ebx
c00111c6:	83 ec 20             	sub    esp,0x20
c00111c9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00111cd:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00111d0:	68 14 01 00 00       	push   0x114
c00111d5:	e8 29 e1 ff ff       	call   c000f303 <malloc>
c00111da:	6a 00                	push   0x0
c00111dc:	89 c3                	mov    ebx,eax
c00111de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00111e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00111e6:	50                   	push   eax
c00111e7:	56                   	push   esi
c00111e8:	53                   	push   ebx
c00111e9:	e8 46 6e ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c00111ee:	83 c4 14             	add    esp,0x14
c00111f1:	53                   	push   ebx
c00111f2:	e8 27 71 ff ff       	call   c000831e <File::unlink()>
c00111f7:	83 c4 10             	add    esp,0x10
c00111fa:	85 db                	test   ebx,ebx
c00111fc:	74 14                	je     c0011212 <SysRmdir(regs*)+0x4e>
c00111fe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011202:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011204:	83 ec 0c             	sub    esp,0xc
c0011207:	53                   	push   ebx
c0011208:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001120b:	83 c4 10             	add    esp,0x10
c001120e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011212:	85 c0                	test   eax,eax
c0011214:	0f 95 c0             	setne  al
c0011217:	31 d2                	xor    edx,edx
c0011219:	0f b6 c0             	movzx  eax,al
c001121c:	f7 d8                	neg    eax
c001121e:	83 d2 00             	adc    edx,0x0
c0011221:	83 c4 14             	add    esp,0x14
c0011224:	f7 da                	neg    edx
c0011226:	5b                   	pop    ebx
c0011227:	5e                   	pop    esi
c0011228:	c3                   	ret    

c0011229 <SysUnlink(regs*)>:
c0011229:	56                   	push   esi
c001122a:	53                   	push   ebx
c001122b:	83 ec 20             	sub    esp,0x20
c001122e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011232:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011235:	68 14 01 00 00       	push   0x114
c001123a:	e8 c4 e0 ff ff       	call   c000f303 <malloc>
c001123f:	6a 00                	push   0x0
c0011241:	89 c3                	mov    ebx,eax
c0011243:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011248:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001124b:	50                   	push   eax
c001124c:	56                   	push   esi
c001124d:	53                   	push   ebx
c001124e:	e8 e1 6d ff ff       	call   c0008034 <File::File(char const*, Process*, bool)>
c0011253:	83 c4 14             	add    esp,0x14
c0011256:	53                   	push   ebx
c0011257:	e8 c2 70 ff ff       	call   c000831e <File::unlink()>
c001125c:	83 c4 10             	add    esp,0x10
c001125f:	85 db                	test   ebx,ebx
c0011261:	74 14                	je     c0011277 <SysUnlink(regs*)+0x4e>
c0011263:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011267:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011269:	83 ec 0c             	sub    esp,0xc
c001126c:	53                   	push   ebx
c001126d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011270:	83 c4 10             	add    esp,0x10
c0011273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011277:	85 c0                	test   eax,eax
c0011279:	0f 95 c0             	setne  al
c001127c:	31 d2                	xor    edx,edx
c001127e:	0f b6 c0             	movzx  eax,al
c0011281:	f7 d8                	neg    eax
c0011283:	83 d2 00             	adc    edx,0x0
c0011286:	83 c4 14             	add    esp,0x14
c0011289:	f7 da                	neg    edx
c001128b:	5b                   	pop    ebx
c001128c:	5e                   	pop    esi
c001128d:	c3                   	ret    

c001128e <SysGetArgv(regs*)>:
c001128e:	83 ec 0c             	sub    esp,0xc
c0011291:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0011295:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0011298:	85 c0                	test   eax,eax
c001129a:	78 2c                	js     c00112c8 <SysGetArgv(regs*)+0x3a>
c001129c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00112a2:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00112a5:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00112ab:	7d 1b                	jge    c00112c8 <SysGetArgv(regs*)+0x3a>
c00112ad:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00112b4:	85 c0                	test   eax,eax
c00112b6:	74 18                	je     c00112d0 <SysGetArgv(regs*)+0x42>
c00112b8:	83 ec 08             	sub    esp,0x8
c00112bb:	50                   	push   eax
c00112bc:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00112bf:	50                   	push   eax
c00112c0:	e8 7b f3 fe ff       	call   c0000640 <strcpy>
c00112c5:	83 c4 10             	add    esp,0x10
c00112c8:	31 c0                	xor    eax,eax
c00112ca:	31 d2                	xor    edx,edx
c00112cc:	83 c4 0c             	add    esp,0xc
c00112cf:	c3                   	ret    
c00112d0:	b8 01 00 00 00       	mov    eax,0x1
c00112d5:	31 d2                	xor    edx,edx
c00112d7:	83 c4 0c             	add    esp,0xc
c00112da:	c3                   	ret    

c00112db <SysUSleep(regs*)>:
c00112db:	83 ec 1c             	sub    esp,0x1c
c00112de:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00112e2:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00112e5:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00112e8:	6a 00                	push   0x0
c00112ea:	6a 64                	push   0x64
c00112ec:	52                   	push   edx
c00112ed:	50                   	push   eax
c00112ee:	e8 c1 f8 00 00       	call   c0020bb4 <__udivdi3>
c00112f3:	83 c4 14             	add    esp,0x14
c00112f6:	50                   	push   eax
c00112f7:	e8 70 51 00 00       	call   c001646c <milliTenthSleep(unsigned int)>
c00112fc:	31 c0                	xor    eax,eax
c00112fe:	31 d2                	xor    edx,edx
c0011300:	83 c4 1c             	add    esp,0x1c
c0011303:	c3                   	ret    

c0011304 <SysSpawn(regs*)>:
c0011304:	56                   	push   esi
c0011305:	53                   	push   ebx
c0011306:	83 ec 04             	sub    esp,0x4
c0011309:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001130d:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0011310:	85 f6                	test   esi,esi
c0011312:	75 0a                	jne    c001131e <SysSpawn(regs*)+0x1a>
c0011314:	83 c4 04             	add    esp,0x4
c0011317:	31 c0                	xor    eax,eax
c0011319:	31 d2                	xor    edx,edx
c001131b:	5b                   	pop    ebx
c001131c:	5e                   	pop    esi
c001131d:	c3                   	ret    
c001131e:	83 ec 0c             	sub    esp,0xc
c0011321:	68 24 07 00 00       	push   0x724
c0011326:	e8 d8 df ff ff       	call   c000f303 <malloc>
c001132b:	83 c4 10             	add    esp,0x10
c001132e:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011331:	89 c6                	mov    esi,eax
c0011333:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011336:	85 c9                	test   ecx,ecx
c0011338:	74 39                	je     c0011373 <SysSpawn(regs*)+0x6f>
c001133a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001133f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011342:	52                   	push   edx
c0011343:	50                   	push   eax
c0011344:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011347:	50                   	push   eax
c0011348:	56                   	push   esi
c0011349:	e8 76 48 00 00       	call   c0015bc4 <Process::Process(char const*, Process*, char**)>
c001134e:	83 c4 10             	add    esp,0x10
c0011351:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0011358:	75 ba                	jne    c0011314 <SysSpawn(regs*)+0x10>
c001135a:	83 ec 0c             	sub    esp,0xc
c001135d:	56                   	push   esi
c001135e:	e8 dd 4d 00 00       	call   c0016140 <Process::createUserThread()>
c0011363:	8b 06                	mov    eax,DWORD PTR [esi]
c0011365:	83 c4 10             	add    esp,0x10
c0011368:	89 c2                	mov    edx,eax
c001136a:	83 c4 04             	add    esp,0x4
c001136d:	c1 fa 1f             	sar    edx,0x1f
c0011370:	5b                   	pop    ebx
c0011371:	5e                   	pop    esi
c0011372:	c3                   	ret    
c0011373:	31 c0                	xor    eax,eax
c0011375:	eb cb                	jmp    c0011342 <SysSpawn(regs*)+0x3e>

c0011377 <SysGetEnv(regs*)>:
c0011377:	57                   	push   edi
c0011378:	56                   	push   esi
c0011379:	53                   	push   ebx
c001137a:	83 ec 1c             	sub    esp,0x1c
c001137d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011381:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011386:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011389:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001138c:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c001138f:	51                   	push   ecx
c0011390:	e8 ba cb ff ff       	call   c000df4f <KeGetProcessTotalEnvCount(Process*)>
c0011395:	83 c4 10             	add    esp,0x10
c0011398:	39 c7                	cmp    edi,eax
c001139a:	7c 14                	jl     c00113b0 <SysGetEnv(regs*)+0x39>
c001139c:	85 f6                	test   esi,esi
c001139e:	75 0b                	jne    c00113ab <SysGetEnv(regs*)+0x34>
c00113a0:	83 c4 10             	add    esp,0x10
c00113a3:	31 c0                	xor    eax,eax
c00113a5:	5b                   	pop    ebx
c00113a6:	31 d2                	xor    edx,edx
c00113a8:	5e                   	pop    esi
c00113a9:	5f                   	pop    edi
c00113aa:	c3                   	ret    
c00113ab:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00113ae:	eb f0                	jmp    c00113a0 <SysGetEnv(regs*)+0x29>
c00113b0:	8d 44 24 08          	lea    eax,[esp+0x8]
c00113b4:	83 ec 04             	sub    esp,0x4
c00113b7:	57                   	push   edi
c00113b8:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00113be:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00113c1:	57                   	push   edi
c00113c2:	50                   	push   eax
c00113c3:	e8 a7 cb ff ff       	call   c000df6f <KeGetProcessEnvPair(Process*, int)>
c00113c8:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00113cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00113cf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00113d3:	83 c4 0c             	add    esp,0xc
c00113d6:	85 d2                	test   edx,edx
c00113d8:	75 23                	jne    c00113fd <SysGetEnv(regs*)+0x86>
c00113da:	83 ec 0c             	sub    esp,0xc
c00113dd:	50                   	push   eax
c00113de:	e8 8d f1 fe ff       	call   c0000570 <strlen>
c00113e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113e6:	89 c3                	mov    ebx,eax
c00113e8:	e8 83 f1 fe ff       	call   c0000570 <strlen>
c00113ed:	83 c4 10             	add    esp,0x10
c00113f0:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00113f4:	83 c4 10             	add    esp,0x10
c00113f7:	31 d2                	xor    edx,edx
c00113f9:	5b                   	pop    ebx
c00113fa:	5e                   	pop    esi
c00113fb:	5f                   	pop    edi
c00113fc:	c3                   	ret    
c00113fd:	83 ec 08             	sub    esp,0x8
c0011400:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0011403:	50                   	push   eax
c0011404:	56                   	push   esi
c0011405:	e8 36 f2 fe ff       	call   c0000640 <strcpy>
c001140a:	58                   	pop    eax
c001140b:	5a                   	pop    edx
c001140c:	68 42 35 02 c0       	push   0xc0023542
c0011411:	56                   	push   esi
c0011412:	e8 29 f4 fe ff       	call   c0000840 <strcat>
c0011417:	59                   	pop    ecx
c0011418:	5b                   	pop    ebx
c0011419:	57                   	push   edi
c001141a:	56                   	push   esi
c001141b:	e8 20 f4 fe ff       	call   c0000840 <strcat>
c0011420:	83 c4 10             	add    esp,0x10
c0011423:	e9 78 ff ff ff       	jmp    c00113a0 <SysGetEnv(regs*)+0x29>

c0011428 <SysSetFatAttrib(regs*)>:
c0011428:	57                   	push   edi
c0011429:	56                   	push   esi
c001142a:	53                   	push   ebx
c001142b:	83 ec 1c             	sub    esp,0x1c
c001142e:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0011432:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011435:	68 14 01 00 00       	push   0x114
c001143a:	e8 c4 de ff ff       	call   c000f303 <malloc>
c001143f:	83 c4 0c             	add    esp,0xc
c0011442:	89 c3                	mov    ebx,eax
c0011444:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011449:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001144c:	50                   	push   eax
c001144d:	57                   	push   edi
c001144e:	53                   	push   ebx
c001144f:	e8 de 6c ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0011454:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011457:	83 c4 0c             	add    esp,0xc
c001145a:	0f b6 d4             	movzx  edx,ah
c001145d:	0f b6 c0             	movzx  eax,al
c0011460:	52                   	push   edx
c0011461:	50                   	push   eax
c0011462:	53                   	push   ebx
c0011463:	e8 50 6f ff ff       	call   c00083b8 <File::chfatattr(unsigned char, unsigned char)>
c0011468:	83 c4 10             	add    esp,0x10
c001146b:	85 db                	test   ebx,ebx
c001146d:	74 14                	je     c0011483 <SysSetFatAttrib(regs*)+0x5b>
c001146f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011473:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011475:	83 ec 0c             	sub    esp,0xc
c0011478:	53                   	push   ebx
c0011479:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001147c:	83 c4 10             	add    esp,0x10
c001147f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011483:	85 c0                	test   eax,eax
c0011485:	0f 95 c0             	setne  al
c0011488:	31 d2                	xor    edx,edx
c001148a:	0f b6 c0             	movzx  eax,al
c001148d:	f7 d8                	neg    eax
c001148f:	83 d2 00             	adc    edx,0x0
c0011492:	83 c4 10             	add    esp,0x10
c0011495:	f7 da                	neg    edx
c0011497:	5b                   	pop    ebx
c0011498:	5e                   	pop    esi
c0011499:	5f                   	pop    edi
c001149a:	c3                   	ret    

c001149b <SysShutdown(regs*)>:
c001149b:	83 ec 1c             	sub    esp,0x1c
c001149e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00114a2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00114a5:	85 c9                	test   ecx,ecx
c00114a7:	74 18                	je     c00114c1 <SysShutdown(regs*)+0x26>
c00114a9:	83 f9 01             	cmp    ecx,0x1
c00114ac:	74 26                	je     c00114d4 <SysShutdown(regs*)+0x39>
c00114ae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114b3:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114b8:	83 f9 02             	cmp    ecx,0x2
c00114bb:	74 24                	je     c00114e1 <SysShutdown(regs*)+0x46>
c00114bd:	83 c4 1c             	add    esp,0x1c
c00114c0:	c3                   	ret    
c00114c1:	e8 02 c5 ff ff       	call   c000d9c8 <KeShutdown()>
c00114c6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114cb:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114d0:	83 c4 1c             	add    esp,0x1c
c00114d3:	c3                   	ret    
c00114d4:	e8 13 c5 ff ff       	call   c000d9ec <KeSleep()>
c00114d9:	31 c0                	xor    eax,eax
c00114db:	31 d2                	xor    edx,edx
c00114dd:	83 c4 1c             	add    esp,0x1c
c00114e0:	c3                   	ret    
c00114e1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00114e5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00114e9:	e8 0a c5 ff ff       	call   c000d9f8 <KeRestart()>
c00114ee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00114f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00114f6:	eb c5                	jmp    c00114bd <SysShutdown(regs*)+0x22>

c00114f8 <SysPipe(regs*)>:
c00114f8:	57                   	push   edi
c00114f9:	56                   	push   esi
c00114fa:	53                   	push   ebx
c00114fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00114ff:	83 ec 0c             	sub    esp,0xc
c0011502:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0011505:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011508:	6a 20                	push   0x20
c001150a:	e8 f4 dd ff ff       	call   c000f303 <malloc>
c001150f:	89 c3                	mov    ebx,eax
c0011511:	58                   	pop    eax
c0011512:	5a                   	pop    edx
c0011513:	68 00 50 00 00       	push   0x5000
c0011518:	53                   	push   ebx
c0011519:	e8 ae e9 ff ff       	call   c000fecc <Pipe::Pipe(int)>
c001151e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011521:	e8 ca 10 00 00       	call   c00125f0 <UnixFile::getFileDescriptor()>
c0011526:	89 07                	mov    DWORD PTR [edi],eax
c0011528:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001152b:	e8 c0 10 00 00       	call   c00125f0 <UnixFile::getFileDescriptor()>
c0011530:	83 c4 10             	add    esp,0x10
c0011533:	89 06                	mov    DWORD PTR [esi],eax
c0011535:	31 d2                	xor    edx,edx
c0011537:	5b                   	pop    ebx
c0011538:	31 c0                	xor    eax,eax
c001153a:	5e                   	pop    esi
c001153b:	5f                   	pop    edi
c001153c:	c3                   	ret    

c001153d <SysGetUnixTime(regs*)>:
c001153d:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0011542:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0011548:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001154c:	e9 65 76 ff ff       	jmp    c0008bb6 <Clock::timeInSecondsLocal()>

c0011551 <string_ends_with(char const*, char const*)>:
c0011551:	57                   	push   edi
c0011552:	56                   	push   esi
c0011553:	53                   	push   ebx
c0011554:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011558:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001155c:	83 ec 0c             	sub    esp,0xc
c001155f:	53                   	push   ebx
c0011560:	e8 0b f0 fe ff       	call   c0000570 <strlen>
c0011565:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011568:	89 c6                	mov    esi,eax
c001156a:	e8 01 f0 fe ff       	call   c0000570 <strlen>
c001156f:	83 c4 10             	add    esp,0x10
c0011572:	39 c6                	cmp    esi,eax
c0011574:	7d 06                	jge    c001157c <string_ends_with(char const*, char const*)+0x2b>
c0011576:	5b                   	pop    ebx
c0011577:	31 c0                	xor    eax,eax
c0011579:	5e                   	pop    esi
c001157a:	5f                   	pop    edi
c001157b:	c3                   	ret    
c001157c:	83 ec 08             	sub    esp,0x8
c001157f:	29 c6                	sub    esi,eax
c0011581:	57                   	push   edi
c0011582:	01 f3                	add    ebx,esi
c0011584:	53                   	push   ebx
c0011585:	e8 c6 f1 fe ff       	call   c0000750 <strcmp>
c001158a:	83 c4 10             	add    esp,0x10
c001158d:	85 c0                	test   eax,eax
c001158f:	5b                   	pop    ebx
c0011590:	0f 94 c0             	sete   al
c0011593:	5e                   	pop    esi
c0011594:	0f b6 c0             	movzx  eax,al
c0011597:	5f                   	pop    edi
c0011598:	c3                   	ret    

c0011599 <SysOpen(regs*)>:
c0011599:	56                   	push   esi
c001159a:	53                   	push   ebx
c001159b:	81 ec 04 01 00 00    	sub    esp,0x104
c00115a1:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c00115a8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00115ab:	85 c0                	test   eax,eax
c00115ad:	0f 84 bc 01 00 00    	je     c001176f <SysOpen(regs*)+0x1d6>
c00115b3:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00115b6:	85 c0                	test   eax,eax
c00115b8:	0f 84 b1 01 00 00    	je     c001176f <SysOpen(regs*)+0x1d6>
c00115be:	6a 00                	push   0x0
c00115c0:	68 44 35 02 c0       	push   0xc0023544
c00115c5:	50                   	push   eax
c00115c6:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00115ca:	56                   	push   esi
c00115cb:	e8 4a 68 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c00115d0:	89 34 24             	mov    DWORD PTR [esp],esi
c00115d3:	e8 98 ef fe ff       	call   c0000570 <strlen>
c00115d8:	83 c4 10             	add    esp,0x10
c00115db:	83 e8 01             	sub    eax,0x1
c00115de:	74 21                	je     c0011601 <SysOpen(regs*)+0x68>
c00115e0:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00115e4:	eb 12                	jmp    c00115f8 <SysOpen(regs*)+0x5f>
c00115e6:	83 fa 3a             	cmp    edx,0x3a
c00115e9:	74 12                	je     c00115fd <SysOpen(regs*)+0x64>
c00115eb:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00115ef:	83 e8 01             	sub    eax,0x1
c00115f2:	74 0d                	je     c0011601 <SysOpen(regs*)+0x68>
c00115f4:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00115f8:	83 fa 2e             	cmp    edx,0x2e
c00115fb:	75 e9                	jne    c00115e6 <SysOpen(regs*)+0x4d>
c00115fd:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0011601:	83 ec 08             	sub    esp,0x8
c0011604:	68 48 35 02 c0       	push   0xc0023548
c0011609:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001160c:	50                   	push   eax
c001160d:	e8 3f ff ff ff       	call   c0011551 <string_ends_with(char const*, char const*)>
c0011612:	83 c4 10             	add    esp,0x10
c0011615:	85 c0                	test   eax,eax
c0011617:	74 1d                	je     c0011636 <SysOpen(regs*)+0x9d>
c0011619:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001161c:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0011622:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011629:	81 c4 04 01 00 00    	add    esp,0x104
c001162f:	31 c0                	xor    eax,eax
c0011631:	31 d2                	xor    edx,edx
c0011633:	5b                   	pop    ebx
c0011634:	5e                   	pop    esi
c0011635:	c3                   	ret    
c0011636:	83 ec 08             	sub    esp,0x8
c0011639:	68 4d 35 02 c0       	push   0xc002354d
c001163e:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011641:	50                   	push   eax
c0011642:	e8 0a ff ff ff       	call   c0011551 <string_ends_with(char const*, char const*)>
c0011647:	83 c4 10             	add    esp,0x10
c001164a:	85 c0                	test   eax,eax
c001164c:	75 cb                	jne    c0011619 <SysOpen(regs*)+0x80>
c001164e:	83 ec 08             	sub    esp,0x8
c0011651:	68 49 35 02 c0       	push   0xc0023549
c0011656:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011659:	50                   	push   eax
c001165a:	e8 f1 f0 fe ff       	call   c0000750 <strcmp>
c001165f:	83 c4 10             	add    esp,0x10
c0011662:	85 c0                	test   eax,eax
c0011664:	74 b3                	je     c0011619 <SysOpen(regs*)+0x80>
c0011666:	83 ec 08             	sub    esp,0x8
c0011669:	68 48 35 02 c0       	push   0xc0023548
c001166e:	56                   	push   esi
c001166f:	e8 dd fe ff ff       	call   c0011551 <string_ends_with(char const*, char const*)>
c0011674:	83 c4 10             	add    esp,0x10
c0011677:	85 c0                	test   eax,eax
c0011679:	75 9e                	jne    c0011619 <SysOpen(regs*)+0x80>
c001167b:	83 ec 08             	sub    esp,0x8
c001167e:	68 52 35 02 c0       	push   0xc0023552
c0011683:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011686:	50                   	push   eax
c0011687:	e8 c5 fe ff ff       	call   c0011551 <string_ends_with(char const*, char const*)>
c001168c:	83 c4 10             	add    esp,0x10
c001168f:	85 c0                	test   eax,eax
c0011691:	0f 85 eb 00 00 00    	jne    c0011782 <SysOpen(regs*)+0x1e9>
c0011697:	83 ec 08             	sub    esp,0x8
c001169a:	68 57 35 02 c0       	push   0xc0023557
c001169f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00116a2:	50                   	push   eax
c00116a3:	e8 a9 fe ff ff       	call   c0011551 <string_ends_with(char const*, char const*)>
c00116a8:	83 c4 10             	add    esp,0x10
c00116ab:	85 c0                	test   eax,eax
c00116ad:	0f 85 cf 00 00 00    	jne    c0011782 <SysOpen(regs*)+0x1e9>
c00116b3:	83 ec 08             	sub    esp,0x8
c00116b6:	68 53 35 02 c0       	push   0xc0023553
c00116bb:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c00116be:	51                   	push   ecx
c00116bf:	e8 8c f0 fe ff       	call   c0000750 <strcmp>
c00116c4:	83 c4 10             	add    esp,0x10
c00116c7:	85 c0                	test   eax,eax
c00116c9:	0f 84 b3 00 00 00    	je     c0011782 <SysOpen(regs*)+0x1e9>
c00116cf:	83 ec 08             	sub    esp,0x8
c00116d2:	68 52 35 02 c0       	push   0xc0023552
c00116d7:	56                   	push   esi
c00116d8:	e8 74 fe ff ff       	call   c0011551 <string_ends_with(char const*, char const*)>
c00116dd:	83 c4 10             	add    esp,0x10
c00116e0:	85 c0                	test   eax,eax
c00116e2:	0f 85 9a 00 00 00    	jne    c0011782 <SysOpen(regs*)+0x1e9>
c00116e8:	83 ec 0c             	sub    esp,0xc
c00116eb:	68 14 01 00 00       	push   0x114
c00116f0:	e8 0e dc ff ff       	call   c000f303 <malloc>
c00116f5:	83 c4 0c             	add    esp,0xc
c00116f8:	89 c6                	mov    esi,eax
c00116fa:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116ff:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011702:	50                   	push   eax
c0011703:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011706:	52                   	push   edx
c0011707:	56                   	push   esi
c0011708:	e8 25 6a ff ff       	call   c0008132 <File::File(char const*, Process*)>
c001170d:	83 c4 10             	add    esp,0x10
c0011710:	85 f6                	test   esi,esi
c0011712:	74 5b                	je     c001176f <SysOpen(regs*)+0x1d6>
c0011714:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011717:	0f b6 c2             	movzx  eax,dl
c001171a:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001171d:	89 d0                	mov    eax,edx
c001171f:	83 e0 01             	and    eax,0x1
c0011722:	f6 c2 02             	test   dl,0x2
c0011725:	74 03                	je     c001172a <SysOpen(regs*)+0x191>
c0011727:	83 c8 02             	or     eax,0x2
c001172a:	f6 c2 04             	test   dl,0x4
c001172d:	74 03                	je     c0011732 <SysOpen(regs*)+0x199>
c001172f:	83 c8 04             	or     eax,0x4
c0011732:	f6 c2 08             	test   dl,0x8
c0011735:	74 03                	je     c001173a <SysOpen(regs*)+0x1a1>
c0011737:	83 c8 0a             	or     eax,0xa
c001173a:	80 e2 10             	and    dl,0x10
c001173d:	74 03                	je     c0011742 <SysOpen(regs*)+0x1a9>
c001173f:	83 c8 12             	or     eax,0x12
c0011742:	83 ec 08             	sub    esp,0x8
c0011745:	50                   	push   eax
c0011746:	56                   	push   esi
c0011747:	e8 04 6a ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001174c:	83 c4 10             	add    esp,0x10
c001174f:	85 c0                	test   eax,eax
c0011751:	75 1c                	jne    c001176f <SysOpen(regs*)+0x1d6>
c0011753:	83 ec 0c             	sub    esp,0xc
c0011756:	56                   	push   esi
c0011757:	e8 94 0e 00 00       	call   c00125f0 <UnixFile::getFileDescriptor()>
c001175c:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001175f:	83 c4 10             	add    esp,0x10
c0011762:	89 02                	mov    DWORD PTR [edx],eax
c0011764:	c1 f8 1f             	sar    eax,0x1f
c0011767:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001176a:	e9 ba fe ff ff       	jmp    c0011629 <SysOpen(regs*)+0x90>
c001176f:	81 c4 04 01 00 00    	add    esp,0x104
c0011775:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001177a:	ba ff ff ff ff       	mov    edx,0xffffffff
c001177f:	5b                   	pop    ebx
c0011780:	5e                   	pop    esi
c0011781:	c3                   	ret    
c0011782:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011785:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001178b:	e9 92 fe ff ff       	jmp    c0011622 <SysOpen(regs*)+0x89>

c0011790 <KeSystemCall(regs*, void*)>:
c0011790:	53                   	push   ebx
c0011791:	83 ec 08             	sub    esp,0x8
c0011794:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011798:	68 fa 02 00 00       	push   0x2fa
c001179d:	68 84 35 02 c0       	push   0xc0023584
c00117a2:	68 5c 35 02 c0       	push   0xc002355c
c00117a7:	68 dc 19 02 c0       	push   0xc00219dc
c00117ac:	e8 4b af ff ff       	call   c000c6fc <KeAssertionFailed(char*, char const*, char const*, int)>
c00117b1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00117b4:	83 c4 10             	add    esp,0x10
c00117b7:	83 f8 40             	cmp    eax,0x40
c00117ba:	77 16                	ja     c00117d2 <KeSystemCall(regs*, void*)+0x42>
c00117bc:	8b 14 85 00 58 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffda800]
c00117c3:	85 d2                	test   edx,edx
c00117c5:	74 0b                	je     c00117d2 <KeSystemCall(regs*, void*)+0x42>
c00117c7:	83 ec 0c             	sub    esp,0xc
c00117ca:	53                   	push   ebx
c00117cb:	ff d2                	call   edx
c00117cd:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00117d0:	eb 0d                	jmp    c00117df <KeSystemCall(regs*, void*)+0x4f>
c00117d2:	52                   	push   edx
c00117d3:	52                   	push   edx
c00117d4:	50                   	push   eax
c00117d5:	68 6e 35 02 c0       	push   0xc002356e
c00117da:	e8 85 57 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00117df:	83 c4 10             	add    esp,0x10
c00117e2:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00117e7:	31 d2                	xor    edx,edx
c00117e9:	83 c4 08             	add    esp,0x8
c00117ec:	5b                   	pop    ebx
c00117ed:	c3                   	ret    

c00117ee <VgaText::isAtty()>:
c00117ee:	b0 01                	mov    al,0x1
c00117f0:	c3                   	ret    
c00117f1:	90                   	nop

c00117f2 <VgaText::~VgaText()>:
c00117f2:	83 ec 0c             	sub    esp,0xc
c00117f5:	ba e8 35 02 c0       	mov    edx,0xc00235e8
c00117fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117fe:	89 10                	mov    DWORD PTR [eax],edx
c0011800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011804:	83 ec 0c             	sub    esp,0xc
c0011807:	50                   	push   eax
c0011808:	e8 d1 0f 00 00       	call   c00127de <UnixFile::~UnixFile()>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	90                   	nop
c0011811:	83 c4 0c             	add    esp,0xc
c0011814:	c3                   	ret    
c0011815:	90                   	nop

c0011816 <VgaText::~VgaText()>:
c0011816:	83 ec 0c             	sub    esp,0xc
c0011819:	83 ec 0c             	sub    esp,0xc
c001181c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011820:	e8 cd ff ff ff       	call   c00117f2 <VgaText::~VgaText()>
c0011825:	83 c4 10             	add    esp,0x10
c0011828:	83 ec 08             	sub    esp,0x8
c001182b:	68 84 01 00 00       	push   0x184
c0011830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011834:	e8 52 b1 ff ff       	call   c000c98b <operator delete(void*, unsigned long)>
c0011839:	83 c4 10             	add    esp,0x10
c001183c:	83 c4 0c             	add    esp,0xc
c001183f:	c3                   	ret    

c0011840 <VgaText::read(unsigned long long, void*, int*)>:
c0011840:	83 ec 10             	sub    esp,0x10
c0011843:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011847:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001184b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001184f:	e8 91 83 ff ff       	call   c0009be5 <readKeyboard(VgaText*, char*, unsigned long)>
c0011854:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011858:	89 02                	mov    DWORD PTR [edx],eax
c001185a:	31 c0                	xor    eax,eax
c001185c:	83 c4 1c             	add    esp,0x1c
c001185f:	c3                   	ret    

c0011860 <setTerminalScrollLock(bool)>:
c0011860:	c3                   	ret    

c0011861 <doTerminalCycle()>:
c0011861:	c3                   	ret    

c0011862 <addToTerminalCycle(VgaText*)>:
c0011862:	c3                   	ret    

c0011863 <scrollTerminalScrollLock(int)>:
c0011863:	c3                   	ret    

c0011864 <VgaText::updateTitle()>:
c0011864:	c3                   	ret    
c0011865:	90                   	nop

c0011866 <VgaText::load()>:
c0011866:	c3                   	ret    
c0011867:	90                   	nop

c0011868 <VgaText::updateCursor()>:
c0011868:	83 ec 14             	sub    esp,0x14
c001186b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001186f:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011872:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011875:	e8 2e 8c 00 00       	call   c001a4a8 <HalConsoleCursorUpdate(int, int)>
c001187a:	83 c4 1c             	add    esp,0x1c
c001187d:	c3                   	ret    

c001187e <VgaText::doANSI_SGR(int)>:
c001187e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011882:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011886:	85 d2                	test   edx,edx
c0011888:	75 0b                	jne    c0011895 <VgaText::doANSI_SGR(int)+0x17>
c001188a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c001188d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011890:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011893:	eb 59                	jmp    c00118ee <VgaText::doANSI_SGR(int)+0x70>
c0011895:	83 fa 07             	cmp    edx,0x7
c0011898:	75 0b                	jne    c00118a5 <VgaText::doANSI_SGR(int)+0x27>
c001189a:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001189d:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00118a0:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00118a3:	eb 49                	jmp    c00118ee <VgaText::doANSI_SGR(int)+0x70>
c00118a5:	83 fa 1b             	cmp    edx,0x1b
c00118a8:	74 e0                	je     c001188a <VgaText::doANSI_SGR(int)+0xc>
c00118aa:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00118ad:	83 f9 07             	cmp    ecx,0x7
c00118b0:	77 09                	ja     c00118bb <VgaText::doANSI_SGR(int)+0x3d>
c00118b2:	8b 14 8d 40 59 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda6c0]
c00118b9:	eb 20                	jmp    c00118db <VgaText::doANSI_SGR(int)+0x5d>
c00118bb:	8d 4a d8             	lea    ecx,[edx-0x28]
c00118be:	83 f9 07             	cmp    ecx,0x7
c00118c1:	77 09                	ja     c00118cc <VgaText::doANSI_SGR(int)+0x4e>
c00118c3:	8b 14 8d 40 59 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffda6c0]
c00118ca:	eb 22                	jmp    c00118ee <VgaText::doANSI_SGR(int)+0x70>
c00118cc:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00118cf:	83 f9 07             	cmp    ecx,0x7
c00118d2:	77 0b                	ja     c00118df <VgaText::doANSI_SGR(int)+0x61>
c00118d4:	8b 14 95 f8 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda808]
c00118db:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00118de:	c3                   	ret    
c00118df:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00118e2:	83 f9 07             	cmp    ecx,0x7
c00118e5:	77 0a                	ja     c00118f1 <VgaText::doANSI_SGR(int)+0x73>
c00118e7:	8b 14 95 d0 57 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffda830]
c00118ee:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00118f1:	c3                   	ret    

c00118f2 <VgaText::setDefaultBgColour(VgaColour)>:
c00118f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00118f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00118fa:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00118fd:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0011900:	c3                   	ret    
c0011901:	90                   	nop

c0011902 <VgaText::setDefaultFgColour(VgaColour)>:
c0011902:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011906:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001190a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001190d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0011910:	c3                   	ret    
c0011911:	90                   	nop

c0011912 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0011912:	53                   	push   ebx
c0011913:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011917:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001191b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001191f:	51                   	push   ecx
c0011920:	e8 cd ff ff ff       	call   c00118f2 <VgaText::setDefaultBgColour(VgaColour)>
c0011925:	58                   	pop    eax
c0011926:	5a                   	pop    edx
c0011927:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001192b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001192f:	5b                   	pop    ebx
c0011930:	eb d0                	jmp    c0011902 <VgaText::setDefaultFgColour(VgaColour)>

c0011932 <VgaText::setTitleTextColour(VgaColour)>:
c0011932:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011936:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001193a:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c001193d:	c3                   	ret    

c001193e <VgaText::setTitleColour(VgaColour)>:
c001193e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011942:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011946:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011949:	c3                   	ret    

c001194a <VgaText::setTitle(char*)>:
c001194a:	c3                   	ret    
c001194b:	90                   	nop

c001194c <VgaText::combineColours(unsigned char, unsigned char)>:
c001194c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011950:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0011955:	83 e0 0f             	and    eax,0xf
c0011958:	c1 e2 04             	shl    edx,0x4
c001195b:	09 d0                	or     eax,edx
c001195d:	c3                   	ret    

c001195e <VgaText::scrollScreen()>:
c001195e:	55                   	push   ebp
c001195f:	57                   	push   edi
c0011960:	56                   	push   esi
c0011961:	be 01 00 00 00       	mov    esi,0x1
c0011966:	53                   	push   ebx
c0011967:	83 ec 0c             	sub    esp,0xc
c001196a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001196e:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0011971:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0011977:	31 ff                	xor    edi,edi
c0011979:	01 e9                	add    ecx,ebp
c001197b:	8a 01                	mov    al,BYTE PTR [ecx]
c001197d:	83 fe 18             	cmp    esi,0x18
c0011980:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0011986:	75 20                	jne    c00119a8 <VgaText::scrollScreen()+0x4a>
c0011988:	f7 c7 01 00 00 00    	test   edi,0x1
c001198e:	74 15                	je     c00119a5 <VgaText::scrollScreen()+0x47>
c0011990:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0011994:	50                   	push   eax
c0011995:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0011999:	50                   	push   eax
c001199a:	e8 ad ff ff ff       	call   c001194c <VgaText::combineColours(unsigned char, unsigned char)>
c001199f:	5a                   	pop    edx
c00119a0:	5a                   	pop    edx
c00119a1:	88 01                	mov    BYTE PTR [ecx],al
c00119a3:	eb 03                	jmp    c00119a8 <VgaText::scrollScreen()+0x4a>
c00119a5:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c00119a8:	47                   	inc    edi
c00119a9:	41                   	inc    ecx
c00119aa:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00119b0:	75 c9                	jne    c001197b <VgaText::scrollScreen()+0x1d>
c00119b2:	46                   	inc    esi
c00119b3:	83 fe 19             	cmp    esi,0x19
c00119b6:	75 b9                	jne    c0011971 <VgaText::scrollScreen()+0x13>
c00119b8:	39 1d 54 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce54,ebx
c00119be:	75 1f                	jne    c00119df <VgaText::scrollScreen()+0x81>
c00119c0:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00119c4:	74 05                	je     c00119cb <VgaText::scrollScreen()+0x6d>
c00119c6:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00119c9:	eb 14                	jmp    c00119df <VgaText::scrollScreen()+0x81>
c00119cb:	50                   	push   eax
c00119cc:	50                   	push   eax
c00119cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00119d1:	50                   	push   eax
c00119d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00119d6:	50                   	push   eax
c00119d7:	e8 60 89 00 00       	call   c001a33c <HalConsoleScroll(int, int)>
c00119dc:	83 c4 10             	add    esp,0x10
c00119df:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00119e3:	83 c4 0c             	add    esp,0xc
c00119e6:	5b                   	pop    ebx
c00119e7:	5e                   	pop    esi
c00119e8:	5f                   	pop    edi
c00119e9:	5d                   	pop    ebp
c00119ea:	e9 79 fe ff ff       	jmp    c0011868 <VgaText::updateCursor()>
c00119ef:	90                   	nop

c00119f0 <VgaText::combineCharAndColour(char, unsigned char)>:
c00119f0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00119f5:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00119fa:	c1 e0 08             	shl    eax,0x8
c00119fd:	09 d0                	or     eax,edx
c00119ff:	c3                   	ret    

c0011a00 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0011a00:	55                   	push   ebp
c0011a01:	57                   	push   edi
c0011a02:	56                   	push   esi
c0011a03:	53                   	push   ebx
c0011a04:	83 ec 1c             	sub    esp,0x1c
c0011a07:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011a0b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011a0f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011a13:	8b 6f 0c             	mov    ebp,DWORD PTR [edi+0xc]
c0011a16:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011a1a:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0011a1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011a22:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0011a26:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0011a2a:	85 ed                	test   ebp,ebp
c0011a2c:	75 14                	jne    c0011a42 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x42>
c0011a2e:	c7 44 24 30 91 35 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023591
c0011a36:	83 c4 1c             	add    esp,0x1c
c0011a39:	5b                   	pop    ebx
c0011a3a:	5e                   	pop    esi
c0011a3b:	5f                   	pop    edi
c0011a3c:	5d                   	pop    ebp
c0011a3d:	e9 08 dc ff ff       	jmp    c000f64a <KePanic(char const*)>
c0011a42:	50                   	push   eax
c0011a43:	50                   	push   eax
c0011a44:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011a49:	50                   	push   eax
c0011a4a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011a4f:	50                   	push   eax
c0011a50:	e8 f7 fe ff ff       	call   c001194c <VgaText::combineColours(unsigned char, unsigned char)>
c0011a55:	5a                   	pop    edx
c0011a56:	0f be c9             	movsx  ecx,cl
c0011a59:	5a                   	pop    edx
c0011a5a:	0f b6 c0             	movzx  eax,al
c0011a5d:	50                   	push   eax
c0011a5e:	51                   	push   ecx
c0011a5f:	e8 8c ff ff ff       	call   c00119f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0011a64:	6b d6 50             	imul   edx,esi,0x50
c0011a67:	83 c4 10             	add    esp,0x10
c0011a6a:	01 da                	add    edx,ebx
c0011a6c:	0f b7 d2             	movzx  edx,dx
c0011a6f:	66 89 44 55 00       	mov    WORD PTR [ebp+edx*2+0x0],ax
c0011a74:	39 3d 54 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce54,edi
c0011a7a:	75 28                	jne    c0011aa4 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0xa4>
c0011a7c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011a80:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0011a84:	89 5c 24 3c          	mov    DWORD PTR [esp+0x3c],ebx
c0011a88:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0011a8c:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c0011a90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011a94:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0011a98:	83 c4 1c             	add    esp,0x1c
c0011a9b:	5b                   	pop    ebx
c0011a9c:	5e                   	pop    esi
c0011a9d:	5f                   	pop    edi
c0011a9e:	5d                   	pop    ebp
c0011a9f:	e9 a0 89 00 00       	jmp    c001a444 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011aa4:	83 c4 1c             	add    esp,0x1c
c0011aa7:	5b                   	pop    ebx
c0011aa8:	5e                   	pop    esi
c0011aa9:	5f                   	pop    edi
c0011aaa:	5d                   	pop    ebp
c0011aab:	c3                   	ret    

c0011aac <VgaText::getCursorX()>:
c0011aac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ab0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0011ab3:	c3                   	ret    

c0011ab4 <VgaText::getCursorY()>:
c0011ab4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ab8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0011abb:	c3                   	ret    

c0011abc <VgaText::setCursor(int, int)>:
c0011abc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011ac0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0011ac4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0011ac7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011acb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0011ace:	e9 95 fd ff ff       	jmp    c0011868 <VgaText::updateCursor()>

c0011ad3 <setActiveTerminal(VgaText*)>:
c0011ad3:	53                   	push   ebx
c0011ad4:	83 ec 08             	sub    esp,0x8
c0011ad7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011adb:	85 db                	test   ebx,ebx
c0011add:	75 11                	jne    c0011af0 <setActiveTerminal(VgaText*)+0x1d>
c0011adf:	c7 44 24 10 a1 35 02 c0 	mov    DWORD PTR [esp+0x10],0xc00235a1
c0011ae7:	83 c4 08             	add    esp,0x8
c0011aea:	5b                   	pop    ebx
c0011aeb:	e9 5a db ff ff       	jmp    c000f64a <KePanic(char const*)>
c0011af0:	a1 54 ce 02 c0       	mov    eax,ds:0xc002ce54
c0011af5:	85 c0                	test   eax,eax
c0011af7:	74 0c                	je     c0011b05 <setActiveTerminal(VgaText*)+0x32>
c0011af9:	83 ec 0c             	sub    esp,0xc
c0011afc:	50                   	push   eax
c0011afd:	e8 66 fd ff ff       	call   c0011868 <VgaText::updateCursor()>
c0011b02:	83 c4 10             	add    esp,0x10
c0011b05:	89 1d 54 ce 02 c0    	mov    DWORD PTR ds:0xc002ce54,ebx
c0011b0b:	50                   	push   eax
c0011b0c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011b0f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011b12:	53                   	push   ebx
c0011b13:	e8 a4 ff ff ff       	call   c0011abc <VgaText::setCursor(int, int)>
c0011b18:	83 c4 18             	add    esp,0x18
c0011b1b:	5b                   	pop    ebx
c0011b1c:	c3                   	ret    
c0011b1d:	90                   	nop

c0011b1e <VgaText::clearScreen()>:
c0011b1e:	57                   	push   edi
c0011b1f:	56                   	push   esi
c0011b20:	31 f6                	xor    esi,esi
c0011b22:	53                   	push   ebx
c0011b23:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011b27:	52                   	push   edx
c0011b28:	6a 00                	push   0x0
c0011b2a:	6a 00                	push   0x0
c0011b2c:	53                   	push   ebx
c0011b2d:	e8 8a ff ff ff       	call   c0011abc <VgaText::setCursor(int, int)>
c0011b32:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0011b39:	83 c4 10             	add    esp,0x10
c0011b3c:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0011b3f:	7e 20                	jle    c0011b61 <VgaText::clearScreen()+0x43>
c0011b41:	31 ff                	xor    edi,edi
c0011b43:	50                   	push   eax
c0011b44:	50                   	push   eax
c0011b45:	56                   	push   esi
c0011b46:	57                   	push   edi
c0011b47:	47                   	inc    edi
c0011b48:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011b4b:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011b4e:	6a 20                	push   0x20
c0011b50:	53                   	push   ebx
c0011b51:	e8 aa fe ff ff       	call   c0011a00 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011b56:	83 c4 20             	add    esp,0x20
c0011b59:	83 ff 50             	cmp    edi,0x50
c0011b5c:	75 e5                	jne    c0011b43 <VgaText::clearScreen()+0x25>
c0011b5e:	46                   	inc    esi
c0011b5f:	eb db                	jmp    c0011b3c <VgaText::clearScreen()+0x1e>
c0011b61:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0011b68:	5b                   	pop    ebx
c0011b69:	5e                   	pop    esi
c0011b6a:	5f                   	pop    edi
c0011b6b:	c3                   	ret    

c0011b6c <VgaText::setCursorX(int)>:
c0011b6c:	83 ec 10             	sub    esp,0x10
c0011b6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b73:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0011b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011b7a:	50                   	push   eax
c0011b7b:	e8 3c ff ff ff       	call   c0011abc <VgaText::setCursor(int, int)>
c0011b80:	83 c4 1c             	add    esp,0x1c
c0011b83:	c3                   	ret    

c0011b84 <VgaText::setCursorY(int)>:
c0011b84:	83 ec 10             	sub    esp,0x10
c0011b87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011b8b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011b8f:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0011b92:	50                   	push   eax
c0011b93:	e8 24 ff ff ff       	call   c0011abc <VgaText::setCursor(int, int)>
c0011b98:	83 c4 1c             	add    esp,0x1c
c0011b9b:	c3                   	ret    

c0011b9c <VgaText::incrementCursor(bool)>:
c0011b9c:	56                   	push   esi
c0011b9d:	53                   	push   ebx
c0011b9e:	51                   	push   ecx
c0011b9f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011ba3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011ba7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0011baa:	40                   	inc    eax
c0011bab:	83 f8 50             	cmp    eax,0x50
c0011bae:	74 05                	je     c0011bb5 <VgaText::incrementCursor(bool)+0x19>
c0011bb0:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0011bb3:	eb 24                	jmp    c0011bd9 <VgaText::incrementCursor(bool)+0x3d>
c0011bb5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011bb8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011bbf:	8d 50 01             	lea    edx,[eax+0x1]
c0011bc2:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011bc5:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011bc8:	75 0f                	jne    c0011bd9 <VgaText::incrementCursor(bool)+0x3d>
c0011bca:	83 ec 0c             	sub    esp,0xc
c0011bcd:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011bd0:	53                   	push   ebx
c0011bd1:	e8 88 fd ff ff       	call   c001195e <VgaText::scrollScreen()>
c0011bd6:	83 c4 10             	add    esp,0x10
c0011bd9:	89 f0                	mov    eax,esi
c0011bdb:	84 c0                	test   al,al
c0011bdd:	74 0c                	je     c0011beb <VgaText::incrementCursor(bool)+0x4f>
c0011bdf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011be3:	5a                   	pop    edx
c0011be4:	5b                   	pop    ebx
c0011be5:	5e                   	pop    esi
c0011be6:	e9 7d fc ff ff       	jmp    c0011868 <VgaText::updateCursor()>
c0011beb:	58                   	pop    eax
c0011bec:	5b                   	pop    ebx
c0011bed:	5e                   	pop    esi
c0011bee:	c3                   	ret    
c0011bef:	90                   	nop

c0011bf0 <VgaText::decrementCursor(bool)>:
c0011bf0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0011bf4:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011bf8:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0011bfb:	85 c0                	test   eax,eax
c0011bfd:	74 04                	je     c0011c03 <VgaText::decrementCursor(bool)+0x13>
c0011bff:	48                   	dec    eax
c0011c00:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0011c03:	84 c9                	test   cl,cl
c0011c05:	74 09                	je     c0011c10 <VgaText::decrementCursor(bool)+0x20>
c0011c07:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0011c0b:	e9 58 fc ff ff       	jmp    c0011868 <VgaText::updateCursor()>
c0011c10:	c3                   	ret    
c0011c11:	90                   	nop

c0011c12 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0011c12:	53                   	push   ebx
c0011c13:	83 ec 08             	sub    esp,0x8
c0011c16:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c0011c1b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c1f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0011c23:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0011c27:	83 f8 07             	cmp    eax,0x7
c0011c2a:	75 21                	jne    c0011c4d <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c0011c2c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0011c34:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0011c3c:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0011c44:	83 c4 08             	add    esp,0x8
c0011c47:	5b                   	pop    ebx
c0011c48:	e9 85 6d ff ff       	jmp    c00089d2 <KeBeep(int, int, bool)>
c0011c4d:	83 f8 0d             	cmp    eax,0xd
c0011c50:	75 09                	jne    c0011c5b <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c0011c52:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011c59:	eb 2d                	jmp    c0011c88 <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c0011c5b:	83 f8 0a             	cmp    eax,0xa
c0011c5e:	75 31                	jne    c0011c91 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c0011c60:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011c63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0011c6a:	8d 50 01             	lea    edx,[eax+0x1]
c0011c6d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0011c70:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0011c73:	75 0f                	jne    c0011c84 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c0011c75:	83 ec 0c             	sub    esp,0xc
c0011c78:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0011c7b:	53                   	push   ebx
c0011c7c:	e8 dd fc ff ff       	call   c001195e <VgaText::scrollScreen()>
c0011c81:	83 c4 10             	add    esp,0x10
c0011c84:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0011c88:	83 c4 08             	add    esp,0x8
c0011c8b:	5b                   	pop    ebx
c0011c8c:	e9 d7 fb ff ff       	jmp    c0011868 <VgaText::updateCursor()>
c0011c91:	83 f8 08             	cmp    eax,0x8
c0011c94:	75 25                	jne    c0011cbb <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c0011c96:	50                   	push   eax
c0011c97:	50                   	push   eax
c0011c98:	6a 01                	push   0x1
c0011c9a:	53                   	push   ebx
c0011c9b:	e8 50 ff ff ff       	call   c0011bf0 <VgaText::decrementCursor(bool)>
c0011ca0:	5a                   	pop    edx
c0011ca1:	59                   	pop    ecx
c0011ca2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011ca5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011ca8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011cab:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011cae:	6a 20                	push   0x20
c0011cb0:	53                   	push   ebx
c0011cb1:	e8 4a fd ff ff       	call   c0011a00 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011cb6:	83 c4 28             	add    esp,0x28
c0011cb9:	5b                   	pop    ebx
c0011cba:	c3                   	ret    
c0011cbb:	83 ec 08             	sub    esp,0x8
c0011cbe:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0011cc1:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0011cc4:	51                   	push   ecx
c0011cc5:	52                   	push   edx
c0011cc6:	50                   	push   eax
c0011cc7:	53                   	push   ebx
c0011cc8:	e8 33 fd ff ff       	call   c0011a00 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011ccd:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0011cd1:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0011cd9:	83 c4 28             	add    esp,0x28
c0011cdc:	5b                   	pop    ebx
c0011cdd:	e9 ba fe ff ff       	jmp    c0011b9c <VgaText::incrementCursor(bool)>

c0011ce2 <VgaText::putchar(char)>:
c0011ce2:	57                   	push   edi
c0011ce3:	56                   	push   esi
c0011ce4:	53                   	push   ebx
c0011ce5:	83 ec 10             	sub    esp,0x10
c0011ce8:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011cec:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cf0:	89 f8                	mov    eax,edi
c0011cf2:	0f be c0             	movsx  eax,al
c0011cf5:	83 f8 5b             	cmp    eax,0x5b
c0011cf8:	75 18                	jne    c0011d12 <VgaText::putchar(char)+0x30>
c0011cfa:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0011cfe:	74 20                	je     c0011d20 <VgaText::putchar(char)+0x3e>
c0011d00:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0011d06:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0011d0d:	e9 c1 00 00 00       	jmp    c0011dd3 <VgaText::putchar(char)+0xf1>
c0011d12:	83 f8 1b             	cmp    eax,0x1b
c0011d15:	75 09                	jne    c0011d20 <VgaText::putchar(char)+0x3e>
c0011d17:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0011d1b:	e9 b3 00 00 00       	jmp    c0011dd3 <VgaText::putchar(char)+0xf1>
c0011d20:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0011d23:	84 c9                	test   cl,cl
c0011d25:	0f 84 98 00 00 00    	je     c0011dc3 <VgaText::putchar(char)+0xe1>
c0011d2b:	8d 77 c0             	lea    esi,[edi-0x40]
c0011d2e:	89 f2                	mov    edx,esi
c0011d30:	80 fa 3e             	cmp    dl,0x3e
c0011d33:	77 78                	ja     c0011dad <VgaText::putchar(char)+0xcb>
c0011d35:	83 f8 6d             	cmp    eax,0x6d
c0011d38:	75 47                	jne    c0011d81 <VgaText::putchar(char)+0x9f>
c0011d3a:	31 f6                	xor    esi,esi
c0011d3c:	31 d2                	xor    edx,edx
c0011d3e:	31 c0                	xor    eax,eax
c0011d40:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0011d43:	7e 2d                	jle    c0011d72 <VgaText::putchar(char)+0x90>
c0011d45:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0011d4a:	83 fa 3b             	cmp    edx,0x3b
c0011d4d:	75 17                	jne    c0011d66 <VgaText::putchar(char)+0x84>
c0011d4f:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0011d53:	50                   	push   eax
c0011d54:	53                   	push   ebx
c0011d55:	e8 24 fb ff ff       	call   c001187e <VgaText::doANSI_SGR(int)>
c0011d5a:	59                   	pop    ecx
c0011d5b:	31 d2                	xor    edx,edx
c0011d5d:	5f                   	pop    edi
c0011d5e:	31 c0                	xor    eax,eax
c0011d60:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011d64:	eb 09                	jmp    c0011d6f <VgaText::putchar(char)+0x8d>
c0011d66:	6b c0 0a             	imul   eax,eax,0xa
c0011d69:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0011d6d:	88 ca                	mov    dl,cl
c0011d6f:	46                   	inc    esi
c0011d70:	eb ce                	jmp    c0011d40 <VgaText::putchar(char)+0x5e>
c0011d72:	84 d2                	test   dl,dl
c0011d74:	74 2f                	je     c0011da5 <VgaText::putchar(char)+0xc3>
c0011d76:	50                   	push   eax
c0011d77:	53                   	push   ebx
c0011d78:	e8 01 fb ff ff       	call   c001187e <VgaText::doANSI_SGR(int)>
c0011d7d:	58                   	pop    eax
c0011d7e:	5a                   	pop    edx
c0011d7f:	eb 24                	jmp    c0011da5 <VgaText::putchar(char)+0xc3>
c0011d81:	83 f8 4a             	cmp    eax,0x4a
c0011d84:	75 1f                	jne    c0011da5 <VgaText::putchar(char)+0xc3>
c0011d86:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0011d8a:	75 19                	jne    c0011da5 <VgaText::putchar(char)+0xc3>
c0011d8c:	83 ec 0c             	sub    esp,0xc
c0011d8f:	53                   	push   ebx
c0011d90:	e8 89 fd ff ff       	call   c0011b1e <VgaText::clearScreen()>
c0011d95:	83 c4 0c             	add    esp,0xc
c0011d98:	6a 00                	push   0x0
c0011d9a:	6a 00                	push   0x0
c0011d9c:	53                   	push   ebx
c0011d9d:	e8 1a fd ff ff       	call   c0011abc <VgaText::setCursor(int, int)>
c0011da2:	83 c4 10             	add    esp,0x10
c0011da5:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0011dab:	eb 26                	jmp    c0011dd3 <VgaText::putchar(char)+0xf1>
c0011dad:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0011db0:	83 f8 0e             	cmp    eax,0xe
c0011db3:	7f 1e                	jg     c0011dd3 <VgaText::putchar(char)+0xf1>
c0011db5:	8d 48 01             	lea    ecx,[eax+0x1]
c0011db8:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0011dbb:	89 f9                	mov    ecx,edi
c0011dbd:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0011dc1:	eb 10                	jmp    c0011dd3 <VgaText::putchar(char)+0xf1>
c0011dc3:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0011dc6:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0011dc9:	50                   	push   eax
c0011dca:	53                   	push   ebx
c0011dcb:	e8 42 fe ff ff       	call   c0011c12 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011dd0:	83 c4 10             	add    esp,0x10
c0011dd3:	83 c4 10             	add    esp,0x10
c0011dd6:	5b                   	pop    ebx
c0011dd7:	5e                   	pop    esi
c0011dd8:	5f                   	pop    edi
c0011dd9:	c3                   	ret    

c0011dda <VgaText::putx(unsigned int)>:
c0011dda:	57                   	push   edi
c0011ddb:	b9 11 00 00 00       	mov    ecx,0x11
c0011de0:	56                   	push   esi
c0011de1:	be 8f 1f 02 c0       	mov    esi,0xc0021f8f
c0011de6:	53                   	push   ebx
c0011de7:	83 ec 20             	sub    esp,0x20
c0011dea:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011dee:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011df2:	fc                   	cld    
c0011df3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011df5:	be 08 00 00 00       	mov    esi,0x8
c0011dfa:	50                   	push   eax
c0011dfb:	50                   	push   eax
c0011dfc:	89 d8                	mov    eax,ebx
c0011dfe:	c1 e3 04             	shl    ebx,0x4
c0011e01:	c1 e8 1c             	shr    eax,0x1c
c0011e04:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0011e09:	50                   	push   eax
c0011e0a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011e0e:	e8 cf fe ff ff       	call   c0011ce2 <VgaText::putchar(char)>
c0011e13:	83 c4 10             	add    esp,0x10
c0011e16:	4e                   	dec    esi
c0011e17:	75 e1                	jne    c0011dfa <VgaText::putx(unsigned int)+0x20>
c0011e19:	83 c4 20             	add    esp,0x20
c0011e1c:	5b                   	pop    ebx
c0011e1d:	5e                   	pop    esi
c0011e1e:	5f                   	pop    edi
c0011e1f:	c3                   	ret    

c0011e20 <VgaText::puts(char const*)>:
c0011e20:	53                   	push   ebx
c0011e21:	83 ec 08             	sub    esp,0x8
c0011e24:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011e28:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011e2b:	85 c0                	test   eax,eax
c0011e2d:	74 12                	je     c0011e41 <VgaText::puts(char const*)+0x21>
c0011e2f:	43                   	inc    ebx
c0011e30:	51                   	push   ecx
c0011e31:	51                   	push   ecx
c0011e32:	50                   	push   eax
c0011e33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e37:	e8 a6 fe ff ff       	call   c0011ce2 <VgaText::putchar(char)>
c0011e3c:	83 c4 10             	add    esp,0x10
c0011e3f:	eb e7                	jmp    c0011e28 <VgaText::puts(char const*)+0x8>
c0011e41:	83 c4 08             	add    esp,0x8
c0011e44:	5b                   	pop    ebx
c0011e45:	c3                   	ret    

c0011e46 <VgaText::write(unsigned long long, void*, int*)>:
c0011e46:	55                   	push   ebp
c0011e47:	57                   	push   edi
c0011e48:	56                   	push   esi
c0011e49:	53                   	push   ebx
c0011e4a:	83 ec 0c             	sub    esp,0xc
c0011e4d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011e51:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011e55:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011e59:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011e60:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011e63:	39 eb                	cmp    ebx,ebp
c0011e65:	74 13                	je     c0011e7a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011e67:	43                   	inc    ebx
c0011e68:	50                   	push   eax
c0011e69:	50                   	push   eax
c0011e6a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011e6e:	50                   	push   eax
c0011e6f:	56                   	push   esi
c0011e70:	e8 6d fe ff ff       	call   c0011ce2 <VgaText::putchar(char)>
c0011e75:	83 c4 10             	add    esp,0x10
c0011e78:	eb e9                	jmp    c0011e63 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0011e7a:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011e81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011e85:	89 38                	mov    DWORD PTR [eax],edi
c0011e87:	83 c4 0c             	add    esp,0xc
c0011e8a:	31 c0                	xor    eax,eax
c0011e8c:	5b                   	pop    ebx
c0011e8d:	5e                   	pop    esi
c0011e8e:	5f                   	pop    edi
c0011e8f:	5d                   	pop    ebp
c0011e90:	c3                   	ret    
c0011e91:	90                   	nop

c0011e92 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0011e92:	55                   	push   ebp
c0011e93:	57                   	push   edi
c0011e94:	56                   	push   esi
c0011e95:	53                   	push   ebx
c0011e96:	83 ec 1c             	sub    esp,0x1c
c0011e99:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0011e9d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0011ea1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011ea5:	8b 5f 0c             	mov    ebx,DWORD PTR [edi+0xc]
c0011ea8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0011eac:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0011eb0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011eb4:	85 db                	test   ebx,ebx
c0011eb6:	75 14                	jne    c0011ecc <VgaText::puts(char const*, VgaColour, VgaColour)+0x3a>
c0011eb8:	c7 44 24 30 af 35 02 c0 	mov    DWORD PTR [esp+0x30],0xc00235af
c0011ec0:	83 c4 1c             	add    esp,0x1c
c0011ec3:	5b                   	pop    ebx
c0011ec4:	5e                   	pop    esi
c0011ec5:	5f                   	pop    edi
c0011ec6:	5d                   	pop    ebp
c0011ec7:	e9 7e d7 ff ff       	jmp    c000f64a <KePanic(char const*)>
c0011ecc:	c6 87 81 00 00 00 01 	mov    BYTE PTR [edi+0x81],0x1
c0011ed3:	50                   	push   eax
c0011ed4:	50                   	push   eax
c0011ed5:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011eda:	50                   	push   eax
c0011edb:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0011ee0:	50                   	push   eax
c0011ee1:	e8 66 fa ff ff       	call   c001194c <VgaText::combineColours(unsigned char, unsigned char)>
c0011ee6:	6b 4f 18 50          	imul   ecx,DWORD PTR [edi+0x18],0x50
c0011eea:	83 c4 10             	add    esp,0x10
c0011eed:	03 4f 14             	add    ecx,DWORD PTR [edi+0x14]
c0011ef0:	0f b6 e8             	movzx  ebp,al
c0011ef3:	0f b7 c9             	movzx  ecx,cx
c0011ef6:	01 c9                	add    ecx,ecx
c0011ef8:	01 cb                	add    ebx,ecx
c0011efa:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011efd:	85 c0                	test   eax,eax
c0011eff:	0f 84 ef 00 00 00    	je     c0011ff4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x162>
c0011f05:	83 f8 0d             	cmp    eax,0xd
c0011f08:	75 0c                	jne    c0011f16 <VgaText::puts(char const*, VgaColour, VgaColour)+0x84>
c0011f0a:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0011f11:	e9 d8 00 00 00       	jmp    c0011fee <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011f16:	83 f8 0a             	cmp    eax,0xa
c0011f19:	75 44                	jne    c0011f5f <VgaText::puts(char const*, VgaColour, VgaColour)+0xcd>
c0011f1b:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0011f1e:	c7 47 14 00 00 00 00 	mov    DWORD PTR [edi+0x14],0x0
c0011f25:	8d 48 01             	lea    ecx,[eax+0x1]
c0011f28:	89 4f 18             	mov    DWORD PTR [edi+0x18],ecx
c0011f2b:	3b 4f 10             	cmp    ecx,DWORD PTR [edi+0x10]
c0011f2e:	75 0f                	jne    c0011f3f <VgaText::puts(char const*, VgaColour, VgaColour)+0xad>
c0011f30:	83 ec 0c             	sub    esp,0xc
c0011f33:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0011f36:	57                   	push   edi
c0011f37:	e8 22 fa ff ff       	call   c001195e <VgaText::scrollScreen()>
c0011f3c:	83 c4 10             	add    esp,0x10
c0011f3f:	83 ec 0c             	sub    esp,0xc
c0011f42:	57                   	push   edi
c0011f43:	e8 20 f9 ff ff       	call   c0011868 <VgaText::updateCursor()>
c0011f48:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0011f4c:	83 c4 10             	add    esp,0x10
c0011f4f:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0011f52:	0f b7 db             	movzx  ebx,bx
c0011f55:	01 db                	add    ebx,ebx
c0011f57:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0011f5a:	e9 8f 00 00 00       	jmp    c0011fee <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011f5f:	83 f8 08             	cmp    eax,0x8
c0011f62:	75 34                	jne    c0011f98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x106>
c0011f64:	51                   	push   ecx
c0011f65:	51                   	push   ecx
c0011f66:	6a 01                	push   0x1
c0011f68:	57                   	push   edi
c0011f69:	e8 82 fc ff ff       	call   c0011bf0 <VgaText::decrementCursor(bool)>
c0011f6e:	5b                   	pop    ebx
c0011f6f:	58                   	pop    eax
c0011f70:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0011f73:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0011f76:	ff 77 30             	push   DWORD PTR [edi+0x30]
c0011f79:	ff 77 34             	push   DWORD PTR [edi+0x34]
c0011f7c:	6a 20                	push   0x20
c0011f7e:	57                   	push   edi
c0011f7f:	e8 7c fa ff ff       	call   c0011a00 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011f84:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0011f88:	83 c4 20             	add    esp,0x20
c0011f8b:	03 5f 14             	add    ebx,DWORD PTR [edi+0x14]
c0011f8e:	0f b7 db             	movzx  ebx,bx
c0011f91:	01 db                	add    ebx,ebx
c0011f93:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0011f96:	eb 56                	jmp    c0011fee <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011f98:	52                   	push   edx
c0011f99:	52                   	push   edx
c0011f9a:	55                   	push   ebp
c0011f9b:	50                   	push   eax
c0011f9c:	e8 4f fa ff ff       	call   c00119f0 <VgaText::combineCharAndColour(char, unsigned char)>
c0011fa1:	83 c4 10             	add    esp,0x10
c0011fa4:	66 89 03             	mov    WORD PTR [ebx],ax
c0011fa7:	39 3d 54 ce 02 c0    	cmp    DWORD PTR ds:0xc002ce54,edi
c0011fad:	75 1d                	jne    c0011fcc <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0011faf:	83 ec 0c             	sub    esp,0xc
c0011fb2:	ff 77 18             	push   DWORD PTR [edi+0x18]
c0011fb5:	ff 77 14             	push   DWORD PTR [edi+0x14]
c0011fb8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011fbc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011fc0:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0011fc3:	50                   	push   eax
c0011fc4:	e8 7b 84 00 00       	call   c001a444 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0011fc9:	83 c4 20             	add    esp,0x20
c0011fcc:	83 c3 02             	add    ebx,0x2
c0011fcf:	50                   	push   eax
c0011fd0:	50                   	push   eax
c0011fd1:	6a 00                	push   0x0
c0011fd3:	57                   	push   edi
c0011fd4:	e8 c3 fb ff ff       	call   c0011b9c <VgaText::incrementCursor(bool)>
c0011fd9:	83 c4 10             	add    esp,0x10
c0011fdc:	83 7f 14 00          	cmp    DWORD PTR [edi+0x14],0x0
c0011fe0:	75 0c                	jne    c0011fee <VgaText::puts(char const*, VgaColour, VgaColour)+0x15c>
c0011fe2:	6b 5f 18 50          	imul   ebx,DWORD PTR [edi+0x18],0x50
c0011fe6:	0f b7 db             	movzx  ebx,bx
c0011fe9:	01 db                	add    ebx,ebx
c0011feb:	03 5f 0c             	add    ebx,DWORD PTR [edi+0xc]
c0011fee:	46                   	inc    esi
c0011fef:	e9 06 ff ff ff       	jmp    c0011efa <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0011ff4:	83 ec 0c             	sub    esp,0xc
c0011ff7:	57                   	push   edi
c0011ff8:	e8 6b f8 ff ff       	call   c0011868 <VgaText::updateCursor()>
c0011ffd:	c6 87 81 00 00 00 00 	mov    BYTE PTR [edi+0x81],0x0
c0012004:	83 c4 2c             	add    esp,0x2c
c0012007:	5b                   	pop    ebx
c0012008:	5e                   	pop    esi
c0012009:	5f                   	pop    edi
c001200a:	5d                   	pop    ebp
c001200b:	c3                   	ret    

c001200c <VgaText::VgaText(char const*)>:
c001200c:	56                   	push   esi
c001200d:	53                   	push   ebx
c001200e:	83 ec 04             	sub    esp,0x4
c0012011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012015:	83 ec 08             	sub    esp,0x8
c0012018:	6a 00                	push   0x0
c001201a:	50                   	push   eax
c001201b:	e8 d8 05 00 00       	call   c00125f8 <UnixFile::UnixFile(int)>
c0012020:	83 c4 10             	add    esp,0x10
c0012023:	ba e8 35 02 c0       	mov    edx,0xc00235e8
c0012028:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001202c:	89 10                	mov    DWORD PTR [eax],edx
c001202e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012032:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0012039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001203d:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0012044:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012048:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c001204c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012050:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0012054:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012058:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c001205f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012063:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c001206a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001206e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0012075:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012079:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0012080:	83 ec 0c             	sub    esp,0xc
c0012083:	68 bf 35 02 c0       	push   0xc00235bf
c0012088:	e8 d7 4e ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001208d:	83 c4 10             	add    esp,0x10
c0012090:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012094:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c001209b:	83 ec 0c             	sub    esp,0xc
c001209e:	6a 01                	push   0x1
c00120a0:	e8 b4 09 00 00       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c00120a5:	83 c4 10             	add    esp,0x10
c00120a8:	89 c2                	mov    edx,eax
c00120aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120ae:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00120b1:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c00120b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120bb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120be:	89 c6                	mov    esi,eax
c00120c0:	e8 79 d7 ff ff       	call   c000f83e <Phys::allocatePage()>
c00120c5:	68 05 0c 00 00       	push   0xc05
c00120ca:	56                   	push   esi
c00120cb:	50                   	push   eax
c00120cc:	53                   	push   ebx
c00120cd:	e8 6a 10 00 00       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c00120d2:	83 c4 10             	add    esp,0x10
c00120d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120d9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00120dc:	83 ec 04             	sub    esp,0x4
c00120df:	68 a0 0f 00 00       	push   0xfa0
c00120e4:	6a 00                	push   0x0
c00120e6:	50                   	push   eax
c00120e7:	e8 04 e4 fe ff       	call   c00004f0 <memset>
c00120ec:	83 c4 10             	add    esp,0x10
c00120ef:	83 ec 04             	sub    esp,0x4
c00120f2:	6a 00                	push   0x0
c00120f4:	6a 07                	push   0x7
c00120f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120fa:	e8 13 f8 ff ff       	call   c0011912 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00120ff:	83 c4 10             	add    esp,0x10
c0012102:	83 ec 04             	sub    esp,0x4
c0012105:	6a 00                	push   0x0
c0012107:	6a 00                	push   0x0
c0012109:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001210d:	e8 aa f9 ff ff       	call   c0011abc <VgaText::setCursor(int, int)>
c0012112:	83 c4 10             	add    esp,0x10
c0012115:	83 ec 0c             	sub    esp,0xc
c0012118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001211c:	e8 fd f9 ff ff       	call   c0011b1e <VgaText::clearScreen()>
c0012121:	83 c4 10             	add    esp,0x10
c0012124:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012128:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c001212c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012130:	05 82 00 00 00       	add    eax,0x82
c0012135:	83 ec 04             	sub    esp,0x4
c0012138:	68 80 00 00 00       	push   0x80
c001213d:	6a 00                	push   0x0
c001213f:	50                   	push   eax
c0012140:	e8 ab e3 fe ff       	call   c00004f0 <memset>
c0012145:	83 c4 10             	add    esp,0x10
c0012148:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001214c:	05 02 01 00 00       	add    eax,0x102
c0012151:	83 ec 04             	sub    esp,0x4
c0012154:	68 80 00 00 00       	push   0x80
c0012159:	6a 00                	push   0x0
c001215b:	50                   	push   eax
c001215c:	e8 8f e3 fe ff       	call   c00004f0 <memset>
c0012161:	83 c4 10             	add    esp,0x10
c0012164:	90                   	nop
c0012165:	83 c4 04             	add    esp,0x4
c0012168:	5b                   	pop    ebx
c0012169:	5e                   	pop    esi
c001216a:	c3                   	ret    
c001216b:	90                   	nop

c001216c <VgaText::receiveKey(unsigned char)>:
c001216c:	55                   	push   ebp
c001216d:	57                   	push   edi
c001216e:	56                   	push   esi
c001216f:	53                   	push   ebx
c0012170:	83 ec 2c             	sub    esp,0x2c
c0012173:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0012177:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001217b:	89 ef                	mov    edi,ebp
c001217d:	81 e7 ff 00 00 00    	and    edi,0xff
c0012183:	0f 84 66 01 00 00    	je     c00122ef <VgaText::receiveKey(unsigned char)+0x183>
c0012189:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c001218f:	83 ff 08             	cmp    edi,0x8
c0012192:	75 73                	jne    c0012207 <VgaText::receiveKey(unsigned char)+0x9b>
c0012194:	83 ec 0c             	sub    esp,0xc
c0012197:	56                   	push   esi
c0012198:	e8 d3 e3 fe ff       	call   c0000570 <strlen>
c001219d:	83 c4 10             	add    esp,0x10
c00121a0:	85 c0                	test   eax,eax
c00121a2:	0f 84 02 01 00 00    	je     c00122aa <VgaText::receiveKey(unsigned char)+0x13e>
c00121a8:	50                   	push   eax
c00121a9:	50                   	push   eax
c00121aa:	6a 08                	push   0x8
c00121ac:	53                   	push   ebx
c00121ad:	e8 30 fb ff ff       	call   c0011ce2 <VgaText::putchar(char)>
c00121b2:	89 34 24             	mov    DWORD PTR [esp],esi
c00121b5:	e8 b6 e3 fe ff       	call   c0000570 <strlen>
c00121ba:	83 c4 10             	add    esp,0x10
c00121bd:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c00121c5:	83 fa 0d             	cmp    edx,0xd
c00121c8:	89 d0                	mov    eax,edx
c00121ca:	0f 95 c1             	setne  cl
c00121cd:	83 fa 1f             	cmp    edx,0x1f
c00121d0:	0f 9e c2             	setle  dl
c00121d3:	0f b6 d2             	movzx  edx,dl
c00121d6:	85 ca                	test   edx,ecx
c00121d8:	74 17                	je     c00121f1 <VgaText::receiveKey(unsigned char)+0x85>
c00121da:	83 e8 08             	sub    eax,0x8
c00121dd:	3c 02                	cmp    al,0x2
c00121df:	76 10                	jbe    c00121f1 <VgaText::receiveKey(unsigned char)+0x85>
c00121e1:	55                   	push   ebp
c00121e2:	55                   	push   ebp
c00121e3:	68 d2 35 02 c0       	push   0xc00235d2
c00121e8:	53                   	push   ebx
c00121e9:	e8 32 fc ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c00121ee:	83 c4 10             	add    esp,0x10
c00121f1:	83 ec 0c             	sub    esp,0xc
c00121f4:	56                   	push   esi
c00121f5:	e8 76 e3 fe ff       	call   c0000570 <strlen>
c00121fa:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0012202:	e9 a0 00 00 00       	jmp    c00122a7 <VgaText::receiveKey(unsigned char)+0x13b>
c0012207:	83 ec 0c             	sub    esp,0xc
c001220a:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0012210:	50                   	push   eax
c0012211:	e8 5a e3 fe ff       	call   c0000570 <strlen>
c0012216:	89 34 24             	mov    DWORD PTR [esp],esi
c0012219:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001221d:	e8 4e e3 fe ff       	call   c0000570 <strlen>
c0012222:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012226:	83 c4 10             	add    esp,0x10
c0012229:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c001222d:	3d 80 00 00 00       	cmp    eax,0x80
c0012232:	0f 87 b7 00 00 00    	ja     c00122ef <VgaText::receiveKey(unsigned char)+0x183>
c0012238:	8d 45 ff             	lea    eax,[ebp-0x1]
c001223b:	8d 55 f7             	lea    edx,[ebp-0x9]
c001223e:	3c 1e                	cmp    al,0x1e
c0012240:	0f 96 c0             	setbe  al
c0012243:	80 fa 01             	cmp    dl,0x1
c0012246:	0f 97 c2             	seta   dl
c0012249:	0f b6 d2             	movzx  edx,dl
c001224c:	85 c2                	test   edx,eax
c001224e:	74 2e                	je     c001227e <VgaText::receiveKey(unsigned char)+0x112>
c0012250:	83 ff 0d             	cmp    edi,0xd
c0012253:	74 29                	je     c001227e <VgaText::receiveKey(unsigned char)+0x112>
c0012255:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012258:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001225b:	68 d8 35 02 c0       	push   0xc00235d8
c0012260:	53                   	push   ebx
c0012261:	e8 2c fc ff ff       	call   c0011e92 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0012266:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0012269:	8d 45 40             	lea    eax,[ebp+0x40]
c001226c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c001226f:	0f b6 c0             	movzx  eax,al
c0012272:	50                   	push   eax
c0012273:	53                   	push   ebx
c0012274:	e8 99 f9 ff ff       	call   c0011c12 <VgaText::putchar(char, VgaColour, VgaColour)>
c0012279:	83 c4 20             	add    esp,0x20
c001227c:	eb 11                	jmp    c001228f <VgaText::receiveKey(unsigned char)+0x123>
c001227e:	89 e8                	mov    eax,ebp
c0012280:	51                   	push   ecx
c0012281:	0f be c0             	movsx  eax,al
c0012284:	51                   	push   ecx
c0012285:	50                   	push   eax
c0012286:	53                   	push   ebx
c0012287:	e8 56 fa ff ff       	call   c0011ce2 <VgaText::putchar(char)>
c001228c:	83 c4 10             	add    esp,0x10
c001228f:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0012294:	89 e8                	mov    eax,ebp
c0012296:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c001229a:	52                   	push   edx
c001229b:	52                   	push   edx
c001229c:	8d 44 24 26          	lea    eax,[esp+0x26]
c00122a0:	50                   	push   eax
c00122a1:	56                   	push   esi
c00122a2:	e8 99 e5 fe ff       	call   c0000840 <strcat>
c00122a7:	83 c4 10             	add    esp,0x10
c00122aa:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c00122b0:	b0 01                	mov    al,0x1
c00122b2:	83 ff 1c             	cmp    edi,0x1c
c00122b5:	77 0e                	ja     c00122c5 <VgaText::receiveKey(unsigned char)+0x159>
c00122b7:	b8 08 04 00 10       	mov    eax,0x10000408
c00122bc:	89 f9                	mov    ecx,edi
c00122be:	d3 e8                	shr    eax,cl
c00122c0:	f7 d0                	not    eax
c00122c2:	83 e0 01             	and    eax,0x1
c00122c5:	84 c0                	test   al,al
c00122c7:	74 04                	je     c00122cd <VgaText::receiveKey(unsigned char)+0x161>
c00122c9:	84 d2                	test   dl,dl
c00122cb:	74 22                	je     c00122ef <VgaText::receiveKey(unsigned char)+0x183>
c00122cd:	81 c3 02 01 00 00    	add    ebx,0x102
c00122d3:	50                   	push   eax
c00122d4:	50                   	push   eax
c00122d5:	56                   	push   esi
c00122d6:	53                   	push   ebx
c00122d7:	e8 64 e5 fe ff       	call   c0000840 <strcat>
c00122dc:	83 c4 0c             	add    esp,0xc
c00122df:	68 80 00 00 00       	push   0x80
c00122e4:	6a 00                	push   0x0
c00122e6:	56                   	push   esi
c00122e7:	e8 04 e2 fe ff       	call   c00004f0 <memset>
c00122ec:	83 c4 10             	add    esp,0x10
c00122ef:	83 c4 2c             	add    esp,0x2c
c00122f2:	5b                   	pop    ebx
c00122f3:	5e                   	pop    esi
c00122f4:	5f                   	pop    edi
c00122f5:	5d                   	pop    ebp
c00122f6:	c3                   	ret    
c00122f7:	90                   	nop

c00122f8 <VgaText::doUpdate()>:
c00122f8:	c3                   	ret    
c00122f9:	66 90                	xchg   ax,ax
c00122fb:	90                   	nop

c00122fc <TSS::TSS()>:
c00122fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012300:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012307:	90                   	nop
c0012308:	c3                   	ret    
c0012309:	90                   	nop
c001230a:	66 90                	xchg   ax,ax

c001230c <TSS::setESP(unsigned long)>:
c001230c:	55                   	push   ebp
c001230d:	89 e5                	mov    ebp,esp
c001230f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012312:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012315:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012318:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001231b:	90                   	nop
c001231c:	5d                   	pop    ebp
c001231d:	c3                   	ret    
c001231e:	66 90                	xchg   ax,ax

c0012320 <TSS::flush()>:
c0012320:	55                   	push   ebp
c0012321:	89 e5                	mov    ebp,esp
c0012323:	83 ec 10             	sub    esp,0x10
c0012326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012329:	8b 00                	mov    eax,DWORD PTR [eax]
c001232b:	83 c8 03             	or     eax,0x3
c001232e:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0012332:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0012336:	66 89 d0             	mov    ax,dx
c0012339:	0f 00 d8             	ltr    ax
c001233c:	90                   	nop
c001233d:	c9                   	leave  
c001233e:	c3                   	ret    
c001233f:	90                   	nop

c0012340 <TSS::setup(unsigned long, unsigned long)>:
c0012340:	55                   	push   ebp
c0012341:	89 e5                	mov    ebp,esp
c0012343:	83 ec 18             	sub    esp,0x18
c0012346:	83 ec 0c             	sub    esp,0xc
c0012349:	6a 68                	push   0x68
c001234b:	e8 b3 cf ff ff       	call   c000f303 <malloc>
c0012350:	83 c4 10             	add    esp,0x10
c0012353:	89 c2                	mov    edx,eax
c0012355:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012358:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001235b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001235e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012361:	83 ec 08             	sub    esp,0x8
c0012364:	50                   	push   eax
c0012365:	68 fc 35 02 c0       	push   0xc00235fc
c001236a:	e8 f5 4b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001236f:	83 c4 10             	add    esp,0x10
c0012372:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012375:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012378:	83 ec 04             	sub    esp,0x4
c001237b:	6a 68                	push   0x68
c001237d:	6a 00                	push   0x0
c001237f:	50                   	push   eax
c0012380:	e8 6b e1 fe ff       	call   c00004f0 <memset>
c0012385:	83 c4 10             	add    esp,0x10
c0012388:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001238b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001238e:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0012394:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012397:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001239a:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00123a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123a6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00123a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00123ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123af:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123b2:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c00123b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123bb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123be:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c00123c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123ca:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c00123d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123d3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123d6:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c00123dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123e2:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c00123e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123eb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123ee:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c00123f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00123f7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00123fa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00123fd:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0012400:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012403:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012406:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0012409:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001240c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001240f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012412:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0012419:	83 ec 0c             	sub    esp,0xc
c001241c:	68 13 36 02 c0       	push   0xc0023613
c0012421:	e8 3e 4b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012426:	83 c4 10             	add    esp,0x10
c0012429:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001242c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001242f:	0f 20 da             	mov    edx,cr3
c0012432:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0012435:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0012438:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c001243b:	83 ec 0c             	sub    esp,0xc
c001243e:	68 16 36 02 c0       	push   0xc0023616
c0012443:	e8 1c 4b ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012448:	83 c4 10             	add    esp,0x10
c001244b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001244e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0012451:	83 ec 08             	sub    esp,0x8
c0012454:	50                   	push   eax
c0012455:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012458:	50                   	push   eax
c0012459:	e8 08 bf ff ff       	call   c000e366 <GDTEntry::setBase(unsigned int)>
c001245e:	83 c4 10             	add    esp,0x10
c0012461:	83 ec 08             	sub    esp,0x8
c0012464:	6a 68                	push   0x68
c0012466:	8d 45 ec             	lea    eax,[ebp-0x14]
c0012469:	50                   	push   eax
c001246a:	e8 13 bf ff ff       	call   c000e382 <GDTEntry::setLimit(unsigned int)>
c001246f:	83 c4 10             	add    esp,0x10
c0012472:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0012476:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012479:	83 e0 0f             	and    eax,0xf
c001247c:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c001247f:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0012482:	83 c8 40             	or     eax,0x40
c0012485:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0012488:	83 ec 0c             	sub    esp,0xc
c001248b:	68 19 36 02 c0       	push   0xc0023619
c0012490:	e8 cf 4a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012495:	83 c4 10             	add    esp,0x10
c0012498:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001249d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124a3:	83 ec 08             	sub    esp,0x8
c00124a6:	50                   	push   eax
c00124a7:	68 1c 36 02 c0       	push   0xc002361c
c00124ac:	e8 b3 4a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00124b1:	83 c4 10             	add    esp,0x10
c00124b4:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00124b9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124bf:	05 64 01 00 00       	add    eax,0x164
c00124c4:	83 ec 04             	sub    esp,0x4
c00124c7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00124ca:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00124cd:	50                   	push   eax
c00124ce:	e8 e3 be ff ff       	call   c000e3b6 <GDT::addEntry(GDTEntry)>
c00124d3:	83 c4 10             	add    esp,0x10
c00124d6:	89 c2                	mov    edx,eax
c00124d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00124db:	89 10                	mov    DWORD PTR [eax],edx
c00124dd:	83 ec 0c             	sub    esp,0xc
c00124e0:	68 31 36 02 c0       	push   0xc0023631
c00124e5:	e8 7a 4a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00124ea:	83 c4 10             	add    esp,0x10
c00124ed:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00124f2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00124f8:	05 64 01 00 00       	add    eax,0x164
c00124fd:	83 ec 0c             	sub    esp,0xc
c0012500:	50                   	push   eax
c0012501:	e8 da be ff ff       	call   c000e3e0 <GDT::flush()>
c0012506:	83 c4 10             	add    esp,0x10
c0012509:	83 ec 0c             	sub    esp,0xc
c001250c:	68 34 36 02 c0       	push   0xc0023634
c0012511:	e8 4e 4a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012516:	83 c4 10             	add    esp,0x10
c0012519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001251c:	8b 00                	mov    eax,DWORD PTR [eax]
c001251e:	c9                   	leave  
c001251f:	c3                   	ret    

c0012520 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0012520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012524:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012528:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001252b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0012530:	75 08                	jne    c001253a <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0012532:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0012538:	eb 38                	jmp    c0012572 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001253a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001253f:	75 17                	jne    c0012558 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0012541:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012546:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012549:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001254f:	8b 10                	mov    edx,DWORD PTR [eax]
c0012551:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012555:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0012558:	89 c1                	mov    ecx,eax
c001255a:	83 e1 fd             	and    ecx,0xfffffffd
c001255d:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0012563:	74 cd                	je     c0012532 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012565:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001256a:	83 e0 ef             	and    eax,0xffffffef
c001256d:	83 f8 08             	cmp    eax,0x8
c0012570:	76 c0                	jbe    c0012532 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0012572:	31 c0                	xor    eax,eax
c0012574:	c3                   	ret    
c0012575:	90                   	nop

c0012576 <ReservedFilename::isAtty()>:
c0012576:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001257a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001257d:	31 c0                	xor    eax,eax
c001257f:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0012585:	74 09                	je     c0012590 <ReservedFilename::isAtty()+0x1a>
c0012587:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c001258d:	0f 94 c0             	sete   al
c0012590:	c3                   	ret    
c0012591:	90                   	nop

c0012592 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0012592:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012596:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001259a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001259d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00125a1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00125a6:	75 08                	jne    c00125b0 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00125a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00125ae:	eb 3d                	jmp    c00125ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00125b0:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00125b5:	75 17                	jne    c00125ce <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00125b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00125bc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00125bf:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00125c5:	8b 10                	mov    edx,DWORD PTR [eax]
c00125c7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00125cb:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00125ce:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00125d3:	75 04                	jne    c00125d9 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00125d5:	89 0a                	mov    DWORD PTR [edx],ecx
c00125d7:	eb 14                	jmp    c00125ed <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00125d9:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00125de:	74 c8                	je     c00125a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00125e0:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00125e5:	83 e0 ef             	and    eax,0xffffffef
c00125e8:	83 f8 08             	cmp    eax,0x8
c00125eb:	76 bb                	jbe    c00125a8 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00125ed:	31 c0                	xor    eax,eax
c00125ef:	c3                   	ret    

c00125f0 <UnixFile::getFileDescriptor()>:
c00125f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00125f7:	c3                   	ret    

c00125f8 <UnixFile::UnixFile(int)>:
c00125f8:	53                   	push   ebx
c00125f9:	83 ec 28             	sub    esp,0x28
c00125fc:	ba 84 36 02 c0       	mov    edx,0xc0023684
c0012601:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012605:	89 10                	mov    DWORD PTR [eax],edx
c0012607:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c001260f:	0f 8f 90 01 00 00    	jg     c00127a5 <UnixFile::UnixFile(int)+0x1ad>
c0012615:	a1 80 59 02 c0       	mov    eax,ds:0xc0025980
c001261a:	8d 50 01             	lea    edx,[eax+0x1]
c001261d:	89 15 80 59 02 c0    	mov    DWORD PTR ds:0xc0025980,edx
c0012623:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012627:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001262a:	83 ec 08             	sub    esp,0x8
c001262d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012631:	68 d8 ce 02 c0       	push   0xc002ced8
c0012636:	e8 b3 ec 00 00       	call   c00212ee <LinkedList<UnixFile>::addElement(UnixFile*)>
c001263b:	83 c4 10             	add    esp,0x10
c001263e:	a0 d4 ce 02 c0       	mov    al,ds:0xc002ced4
c0012643:	83 f0 01             	xor    eax,0x1
c0012646:	0f b6 c0             	movzx  eax,al
c0012649:	85 c0                	test   eax,eax
c001264b:	0f 84 55 01 00 00    	je     c00127a6 <UnixFile::UnixFile(int)+0x1ae>
c0012651:	c6 05 d4 ce 02 c0 01 	mov    BYTE PTR ds:0xc002ced4,0x1
c0012658:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0012660:	83 ec 0c             	sub    esp,0xc
c0012663:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012667:	e8 97 cc ff ff       	call   c000f303 <malloc>
c001266c:	83 c4 10             	add    esp,0x10
c001266f:	89 c3                	mov    ebx,eax
c0012671:	83 ec 08             	sub    esp,0x8
c0012674:	68 03 ff ff 0f       	push   0xfffff03
c0012679:	53                   	push   ebx
c001267a:	e8 2d 01 00 00       	call   c00127ac <ReservedFilename::ReservedFilename(int)>
c001267f:	83 c4 10             	add    esp,0x10
c0012682:	89 1d cc ce 02 c0    	mov    DWORD PTR ds:0xc002cecc,ebx
c0012688:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0012690:	83 ec 0c             	sub    esp,0xc
c0012693:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012697:	e8 67 cc ff ff       	call   c000f303 <malloc>
c001269c:	83 c4 10             	add    esp,0x10
c001269f:	89 c3                	mov    ebx,eax
c00126a1:	83 ec 08             	sub    esp,0x8
c00126a4:	68 01 ff ff 0f       	push   0xfffff01
c00126a9:	53                   	push   ebx
c00126aa:	e8 fd 00 00 00       	call   c00127ac <ReservedFilename::ReservedFilename(int)>
c00126af:	83 c4 10             	add    esp,0x10
c00126b2:	89 1d d0 ce 02 c0    	mov    DWORD PTR ds:0xc002ced0,ebx
c00126b8:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00126c0:	83 ec 0c             	sub    esp,0xc
c00126c3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00126c7:	e8 37 cc ff ff       	call   c000f303 <malloc>
c00126cc:	83 c4 10             	add    esp,0x10
c00126cf:	89 c3                	mov    ebx,eax
c00126d1:	83 ec 08             	sub    esp,0x8
c00126d4:	68 00 ff ff 0f       	push   0xfffff00
c00126d9:	53                   	push   ebx
c00126da:	e8 cd 00 00 00       	call   c00127ac <ReservedFilename::ReservedFilename(int)>
c00126df:	83 c4 10             	add    esp,0x10
c00126e2:	89 1d c4 ce 02 c0    	mov    DWORD PTR ds:0xc002cec4,ebx
c00126e8:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00126f0:	83 ec 0c             	sub    esp,0xc
c00126f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00126f7:	e8 07 cc ff ff       	call   c000f303 <malloc>
c00126fc:	83 c4 10             	add    esp,0x10
c00126ff:	89 c3                	mov    ebx,eax
c0012701:	83 ec 08             	sub    esp,0x8
c0012704:	68 02 ff ff 0f       	push   0xfffff02
c0012709:	53                   	push   ebx
c001270a:	e8 9d 00 00 00       	call   c00127ac <ReservedFilename::ReservedFilename(int)>
c001270f:	83 c4 10             	add    esp,0x10
c0012712:	89 1d c8 ce 02 c0    	mov    DWORD PTR ds:0xc002cec8,ebx
c0012718:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012720:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0012725:	7f 7f                	jg     c00127a6 <UnixFile::UnixFile(int)+0x1ae>
c0012727:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c001272f:	83 ec 0c             	sub    esp,0xc
c0012732:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012736:	e8 c8 cb ff ff       	call   c000f303 <malloc>
c001273b:	83 c4 10             	add    esp,0x10
c001273e:	89 c3                	mov    ebx,eax
c0012740:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012744:	05 10 ff ff 0f       	add    eax,0xfffff10
c0012749:	83 ec 08             	sub    esp,0x8
c001274c:	50                   	push   eax
c001274d:	53                   	push   ebx
c001274e:	e8 59 00 00 00       	call   c00127ac <ReservedFilename::ReservedFilename(int)>
c0012753:	83 c4 10             	add    esp,0x10
c0012756:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001275a:	89 1c 85 a0 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd3160],ebx
c0012761:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0012769:	83 ec 0c             	sub    esp,0xc
c001276c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012770:	e8 8e cb ff ff       	call   c000f303 <malloc>
c0012775:	83 c4 10             	add    esp,0x10
c0012778:	89 c3                	mov    ebx,eax
c001277a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001277e:	05 20 ff ff 0f       	add    eax,0xfffff20
c0012783:	83 ec 08             	sub    esp,0x8
c0012786:	50                   	push   eax
c0012787:	53                   	push   ebx
c0012788:	e8 1f 00 00 00       	call   c00127ac <ReservedFilename::ReservedFilename(int)>
c001278d:	83 c4 10             	add    esp,0x10
c0012790:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012794:	89 1c 85 60 ce 02 c0 	mov    DWORD PTR [eax*4-0x3ffd31a0],ebx
c001279b:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00127a0:	e9 7b ff ff ff       	jmp    c0012720 <UnixFile::UnixFile(int)+0x128>
c00127a5:	90                   	nop
c00127a6:	83 c4 28             	add    esp,0x28
c00127a9:	5b                   	pop    ebx
c00127aa:	c3                   	ret    
c00127ab:	90                   	nop

c00127ac <ReservedFilename::ReservedFilename(int)>:
c00127ac:	83 ec 0c             	sub    esp,0xc
c00127af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127b3:	83 ec 08             	sub    esp,0x8
c00127b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00127ba:	50                   	push   eax
c00127bb:	e8 38 fe ff ff       	call   c00125f8 <UnixFile::UnixFile(int)>
c00127c0:	83 c4 10             	add    esp,0x10
c00127c3:	ba a0 36 02 c0       	mov    edx,0xc00236a0
c00127c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127cc:	89 10                	mov    DWORD PTR [eax],edx
c00127ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00127d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00127d6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00127d9:	90                   	nop
c00127da:	83 c4 0c             	add    esp,0xc
c00127dd:	c3                   	ret    

c00127de <UnixFile::~UnixFile()>:
c00127de:	83 ec 1c             	sub    esp,0x1c
c00127e1:	ba 84 36 02 c0       	mov    edx,0xc0023684
c00127e6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127ea:	89 10                	mov    DWORD PTR [eax],edx
c00127ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00127f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00127f3:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00127f8:	7f 76                	jg     c0012870 <UnixFile::~UnixFile()+0x92>
c00127fa:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012802:	83 ec 0c             	sub    esp,0xc
c0012805:	68 d8 ce 02 c0       	push   0xc002ced8
c001280a:	e8 b3 eb 00 00       	call   c00213c2 <LinkedList<UnixFile>::getFirstElement()>
c001280f:	83 c4 10             	add    esp,0x10
c0012812:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012816:	83 ec 0c             	sub    esp,0xc
c0012819:	68 d8 ce 02 c0       	push   0xc002ced8
c001281e:	e8 a7 eb 00 00       	call   c00213ca <LinkedList<UnixFile>::removeFirst()>
c0012823:	83 c4 10             	add    esp,0x10
c0012826:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001282a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001282e:	74 43                	je     c0012873 <UnixFile::~UnixFile()+0x95>
c0012830:	83 ec 08             	sub    esp,0x8
c0012833:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012837:	68 d8 ce 02 c0       	push   0xc002ced8
c001283c:	e8 ad ea 00 00       	call   c00212ee <LinkedList<UnixFile>::addElement(UnixFile*)>
c0012841:	83 c4 10             	add    esp,0x10
c0012844:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012848:	8d 50 01             	lea    edx,[eax+0x1]
c001284b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001284f:	3d 20 a1 07 00       	cmp    eax,0x7a120
c0012854:	0f 94 c0             	sete   al
c0012857:	0f b6 c0             	movzx  eax,al
c001285a:	85 c0                	test   eax,eax
c001285c:	74 a4                	je     c0012802 <UnixFile::~UnixFile()+0x24>
c001285e:	83 ec 0c             	sub    esp,0xc
c0012861:	68 38 36 02 c0       	push   0xc0023638
c0012866:	e8 df cd ff ff       	call   c000f64a <KePanic(char const*)>
c001286b:	83 c4 10             	add    esp,0x10
c001286e:	eb 92                	jmp    c0012802 <UnixFile::~UnixFile()+0x24>
c0012870:	90                   	nop
c0012871:	eb 01                	jmp    c0012874 <UnixFile::~UnixFile()+0x96>
c0012873:	90                   	nop
c0012874:	90                   	nop
c0012875:	83 c4 1c             	add    esp,0x1c
c0012878:	c3                   	ret    
c0012879:	90                   	nop

c001287a <UnixFile::~UnixFile()>:
c001287a:	83 ec 0c             	sub    esp,0xc
c001287d:	83 ec 0c             	sub    esp,0xc
c0012880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012884:	e8 55 ff ff ff       	call   c00127de <UnixFile::~UnixFile()>
c0012889:	83 c4 10             	add    esp,0x10
c001288c:	83 ec 08             	sub    esp,0x8
c001288f:	6a 0c                	push   0xc
c0012891:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012895:	e8 f1 a0 ff ff       	call   c000c98b <operator delete(void*, unsigned long)>
c001289a:	83 c4 10             	add    esp,0x10
c001289d:	83 c4 0c             	add    esp,0xc
c00128a0:	c3                   	ret    
c00128a1:	90                   	nop

c00128a2 <ReservedFilename::~ReservedFilename()>:
c00128a2:	83 ec 0c             	sub    esp,0xc
c00128a5:	ba a0 36 02 c0       	mov    edx,0xc00236a0
c00128aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128ae:	89 10                	mov    DWORD PTR [eax],edx
c00128b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00128b4:	83 ec 0c             	sub    esp,0xc
c00128b7:	50                   	push   eax
c00128b8:	e8 21 ff ff ff       	call   c00127de <UnixFile::~UnixFile()>
c00128bd:	83 c4 10             	add    esp,0x10
c00128c0:	90                   	nop
c00128c1:	83 c4 0c             	add    esp,0xc
c00128c4:	c3                   	ret    
c00128c5:	90                   	nop

c00128c6 <ReservedFilename::~ReservedFilename()>:
c00128c6:	83 ec 0c             	sub    esp,0xc
c00128c9:	83 ec 0c             	sub    esp,0xc
c00128cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128d0:	e8 cd ff ff ff       	call   c00128a2 <ReservedFilename::~ReservedFilename()>
c00128d5:	83 c4 10             	add    esp,0x10
c00128d8:	83 ec 08             	sub    esp,0x8
c00128db:	6a 0c                	push   0xc
c00128dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128e1:	e8 a5 a0 ff ff       	call   c000c98b <operator delete(void*, unsigned long)>
c00128e6:	83 c4 10             	add    esp,0x10
c00128e9:	83 c4 0c             	add    esp,0xc
c00128ec:	c3                   	ret    

c00128ed <KeGetFileFromDescriptor(int)>:
c00128ed:	53                   	push   ebx
c00128ee:	83 ec 10             	sub    esp,0x10
c00128f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00128f5:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00128fb:	53                   	push   ebx
c00128fc:	68 58 36 02 c0       	push   0xc0023658
c0012901:	e8 5e 46 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0012906:	83 c4 10             	add    esp,0x10
c0012909:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c001290f:	7f 30                	jg     c0012941 <KeGetFileFromDescriptor(int)+0x54>
c0012911:	83 ec 0c             	sub    esp,0xc
c0012914:	68 d8 ce 02 c0       	push   0xc002ced8
c0012919:	e8 a4 ea 00 00       	call   c00213c2 <LinkedList<UnixFile>::getFirstElement()>
c001291e:	83 c4 10             	add    esp,0x10
c0012921:	8d 50 ff             	lea    edx,[eax-0x1]
c0012924:	83 fa fd             	cmp    edx,0xfffffffd
c0012927:	76 04                	jbe    c001292d <KeGetFileFromDescriptor(int)+0x40>
c0012929:	31 c0                	xor    eax,eax
c001292b:	eb 6e                	jmp    c001299b <KeGetFileFromDescriptor(int)+0xae>
c001292d:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0012930:	74 69                	je     c001299b <KeGetFileFromDescriptor(int)+0xae>
c0012932:	52                   	push   edx
c0012933:	52                   	push   edx
c0012934:	50                   	push   eax
c0012935:	68 d8 ce 02 c0       	push   0xc002ced8
c001293a:	e8 2d eb 00 00       	call   c002146c <LinkedList<UnixFile>::getNext(UnixFile*)>
c001293f:	eb dd                	jmp    c001291e <KeGetFileFromDescriptor(int)+0x31>
c0012941:	a1 cc ce 02 c0       	mov    eax,ds:0xc002cecc
c0012946:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c001294c:	74 4d                	je     c001299b <KeGetFileFromDescriptor(int)+0xae>
c001294e:	a1 d0 ce 02 c0       	mov    eax,ds:0xc002ced0
c0012953:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0012959:	74 40                	je     c001299b <KeGetFileFromDescriptor(int)+0xae>
c001295b:	a1 c8 ce 02 c0       	mov    eax,ds:0xc002cec8
c0012960:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0012966:	74 33                	je     c001299b <KeGetFileFromDescriptor(int)+0xae>
c0012968:	a1 c4 ce 02 c0       	mov    eax,ds:0xc002cec4
c001296d:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0012973:	74 26                	je     c001299b <KeGetFileFromDescriptor(int)+0xae>
c0012975:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c001297b:	83 f8 08             	cmp    eax,0x8
c001297e:	77 09                	ja     c0012989 <KeGetFileFromDescriptor(int)+0x9c>
c0012980:	8b 04 85 a0 ce 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd3160]
c0012987:	eb 12                	jmp    c001299b <KeGetFileFromDescriptor(int)+0xae>
c0012989:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001298f:	83 fb 08             	cmp    ebx,0x8
c0012992:	77 95                	ja     c0012929 <KeGetFileFromDescriptor(int)+0x3c>
c0012994:	8b 04 9d 60 ce 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd31a0]
c001299b:	83 c4 08             	add    esp,0x8
c001299e:	5b                   	pop    ebx
c001299f:	c3                   	ret    

c00129a0 <__static_initialization_and_destruction_0(int, int)>:
c00129a0:	83 ec 0c             	sub    esp,0xc
c00129a3:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00129a8:	75 34                	jne    c00129de <__static_initialization_and_destruction_0(int, int)+0x3e>
c00129aa:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00129b2:	75 2a                	jne    c00129de <__static_initialization_and_destruction_0(int, int)+0x3e>
c00129b4:	83 ec 0c             	sub    esp,0xc
c00129b7:	68 d8 ce 02 c0       	push   0xc002ced8
c00129bc:	e8 eb e8 00 00       	call   c00212ac <LinkedList<UnixFile>::LinkedList()>
c00129c1:	83 c4 10             	add    esp,0x10
c00129c4:	83 ec 04             	sub    esp,0x4
c00129c7:	68 e4 51 02 c0       	push   0xc00251e4
c00129cc:	68 d8 ce 02 c0       	push   0xc002ced8
c00129d1:	68 aa 12 02 c0       	push   0xc00212aa
c00129d6:	e8 60 9f ff ff       	call   c000c93b <__cxa_atexit>
c00129db:	83 c4 10             	add    esp,0x10
c00129de:	90                   	nop
c00129df:	83 c4 0c             	add    esp,0xc
c00129e2:	c3                   	ret    

c00129e3 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00129e3:	83 ec 0c             	sub    esp,0xc
c00129e6:	83 ec 08             	sub    esp,0x8
c00129e9:	68 ff ff 00 00       	push   0xffff
c00129ee:	6a 01                	push   0x1
c00129f0:	e8 ab ff ff ff       	call   c00129a0 <__static_initialization_and_destruction_0(int, int)>
c00129f5:	83 c4 10             	add    esp,0x10
c00129f8:	83 c4 0c             	add    esp,0xc
c00129fb:	c3                   	ret    

c00129fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00129fc:	53                   	push   ebx
c00129fd:	8b 15 88 59 02 c0    	mov    edx,DWORD PTR ds:0xc0025988
c0012a03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012a07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012a0b:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c0012a11:	89 d8                	mov    eax,ebx
c0012a13:	d1 e8                	shr    eax,1
c0012a15:	01 d0                	add    eax,edx
c0012a17:	80 e3 01             	and    bl,0x1
c0012a1a:	8a 10                	mov    dl,BYTE PTR [eax]
c0012a1c:	75 09                	jne    c0012a27 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c0012a1e:	83 e2 f0             	and    edx,0xfffffff0
c0012a21:	09 ca                	or     edx,ecx
c0012a23:	88 10                	mov    BYTE PTR [eax],dl
c0012a25:	5b                   	pop    ebx
c0012a26:	c3                   	ret    
c0012a27:	83 e2 0f             	and    edx,0xf
c0012a2a:	0f b6 c9             	movzx  ecx,cl
c0012a2d:	c1 e1 04             	shl    ecx,0x4
c0012a30:	09 ca                	or     edx,ecx
c0012a32:	88 10                	mov    BYTE PTR [eax],dl
c0012a34:	5b                   	pop    ebx
c0012a35:	c3                   	ret    

c0012a36 <Virt::getPageState(unsigned long)>:
c0012a36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012a3a:	8b 0d 88 59 02 c0    	mov    ecx,DWORD PTR ds:0xc0025988
c0012a40:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0012a46:	89 d0                	mov    eax,edx
c0012a48:	d1 e8                	shr    eax,1
c0012a4a:	80 e2 01             	and    dl,0x1
c0012a4d:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0012a50:	74 03                	je     c0012a55 <Virt::getPageState(unsigned long)+0x1f>
c0012a52:	c1 e8 04             	shr    eax,0x4
c0012a55:	83 e0 0f             	and    eax,0xf
c0012a58:	c3                   	ret    

c0012a59 <Virt::allocateKernelVirtualPages(int)>:
c0012a59:	55                   	push   ebp
c0012a5a:	31 ed                	xor    ebp,ebp
c0012a5c:	57                   	push   edi
c0012a5d:	31 ff                	xor    edi,edi
c0012a5f:	56                   	push   esi
c0012a60:	53                   	push   ebx
c0012a61:	31 db                	xor    ebx,ebx
c0012a63:	83 ec 0c             	sub    esp,0xc
c0012a66:	8b 35 84 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025984
c0012a6c:	56                   	push   esi
c0012a6d:	e8 c4 ff ff ff       	call   c0012a36 <Virt::getPageState(unsigned long)>
c0012a72:	5a                   	pop    edx
c0012a73:	84 c0                	test   al,al
c0012a75:	75 41                	jne    c0012ab8 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0012a77:	85 db                	test   ebx,ebx
c0012a79:	75 02                	jne    c0012a7d <Virt::allocateKernelVirtualPages(int)+0x24>
c0012a7b:	89 f5                	mov    ebp,esi
c0012a7d:	83 c3 01             	add    ebx,0x1
c0012a80:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012a84:	74 5f                	je     c0012ae5 <Virt::allocateKernelVirtualPages(int)+0x8c>
c0012a86:	83 c6 01             	add    esi,0x1
c0012a89:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0012a8f:	76 34                	jbe    c0012ac5 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0012a91:	c7 05 84 59 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0025984,0xc8000
c0012a9b:	f7 c7 01 00 00 00    	test   edi,0x1
c0012aa1:	75 2a                	jne    c0012acd <Virt::allocateKernelVirtualPages(int)+0x74>
c0012aa3:	be 00 80 0c 00       	mov    esi,0xc8000
c0012aa8:	bf 01 00 00 00       	mov    edi,0x1
c0012aad:	56                   	push   esi
c0012aae:	e8 83 ff ff ff       	call   c0012a36 <Virt::getPageState(unsigned long)>
c0012ab3:	5a                   	pop    edx
c0012ab4:	84 c0                	test   al,al
c0012ab6:	74 bf                	je     c0012a77 <Virt::allocateKernelVirtualPages(int)+0x1e>
c0012ab8:	31 db                	xor    ebx,ebx
c0012aba:	83 c6 01             	add    esi,0x1
c0012abd:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0012ac3:	77 cc                	ja     c0012a91 <Virt::allocateKernelVirtualPages(int)+0x38>
c0012ac5:	89 35 84 59 02 c0    	mov    DWORD PTR ds:0xc0025984,esi
c0012acb:	eb 9f                	jmp    c0012a6c <Virt::allocateKernelVirtualPages(int)+0x13>
c0012acd:	83 ec 0c             	sub    esp,0xc
c0012ad0:	68 b4 36 02 c0       	push   0xc00236b4
c0012ad5:	e8 70 cb ff ff       	call   c000f64a <KePanic(char const*)>
c0012ada:	8b 35 84 59 02 c0    	mov    esi,DWORD PTR ds:0xc0025984
c0012ae0:	83 c4 10             	add    esp,0x10
c0012ae3:	eb 87                	jmp    c0012a6c <Virt::allocateKernelVirtualPages(int)+0x13>
c0012ae5:	89 2d 84 59 02 c0    	mov    DWORD PTR ds:0xc0025984,ebp
c0012aeb:	83 fb 01             	cmp    ebx,0x1
c0012aee:	74 6f                	je     c0012b5f <Virt::allocateKernelVirtualPages(int)+0x106>
c0012af0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012af4:	85 c9                	test   ecx,ecx
c0012af6:	74 49                	je     c0012b41 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012af8:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0012afc:	89 e8                	mov    eax,ebp
c0012afe:	31 db                	xor    ebx,ebx
c0012b00:	8d 79 ff             	lea    edi,[ecx-0x1]
c0012b03:	eb 18                	jmp    c0012b1d <Virt::allocateKernelVirtualPages(int)+0xc4>
c0012b05:	6a 01                	push   0x1
c0012b07:	83 c3 01             	add    ebx,0x1
c0012b0a:	50                   	push   eax
c0012b0b:	e8 ec fe ff ff       	call   c00129fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012b10:	58                   	pop    eax
c0012b11:	5a                   	pop    edx
c0012b12:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012b16:	74 29                	je     c0012b41 <Virt::allocateKernelVirtualPages(int)+0xe8>
c0012b18:	a1 84 59 02 c0       	mov    eax,ds:0xc0025984
c0012b1d:	8d 50 01             	lea    edx,[eax+0x1]
c0012b20:	85 db                	test   ebx,ebx
c0012b22:	89 15 84 59 02 c0    	mov    DWORD PTR ds:0xc0025984,edx
c0012b28:	74 24                	je     c0012b4e <Virt::allocateKernelVirtualPages(int)+0xf5>
c0012b2a:	39 df                	cmp    edi,ebx
c0012b2c:	75 d7                	jne    c0012b05 <Virt::allocateKernelVirtualPages(int)+0xac>
c0012b2e:	6a 03                	push   0x3
c0012b30:	83 c3 01             	add    ebx,0x1
c0012b33:	50                   	push   eax
c0012b34:	e8 c3 fe ff ff       	call   c00129fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012b39:	59                   	pop    ecx
c0012b3a:	5e                   	pop    esi
c0012b3b:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0012b3f:	75 d7                	jne    c0012b18 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0012b41:	83 c4 0c             	add    esp,0xc
c0012b44:	89 e8                	mov    eax,ebp
c0012b46:	5b                   	pop    ebx
c0012b47:	c1 e0 0c             	shl    eax,0xc
c0012b4a:	5e                   	pop    esi
c0012b4b:	5f                   	pop    edi
c0012b4c:	5d                   	pop    ebp
c0012b4d:	c3                   	ret    
c0012b4e:	6a 02                	push   0x2
c0012b50:	bb 01 00 00 00       	mov    ebx,0x1
c0012b55:	50                   	push   eax
c0012b56:	e8 a1 fe ff ff       	call   c00129fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012b5b:	58                   	pop    eax
c0012b5c:	5a                   	pop    edx
c0012b5d:	eb b9                	jmp    c0012b18 <Virt::allocateKernelVirtualPages(int)+0xbf>
c0012b5f:	6a 04                	push   0x4
c0012b61:	8d 45 01             	lea    eax,[ebp+0x1]
c0012b64:	55                   	push   ebp
c0012b65:	a3 84 59 02 c0       	mov    ds:0xc0025984,eax
c0012b6a:	e8 8d fe ff ff       	call   c00129fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012b6f:	5b                   	pop    ebx
c0012b70:	89 e8                	mov    eax,ebp
c0012b72:	5e                   	pop    esi
c0012b73:	c1 e0 0c             	shl    eax,0xc
c0012b76:	83 c4 0c             	add    esp,0xc
c0012b79:	5b                   	pop    ebx
c0012b7a:	5e                   	pop    esi
c0012b7b:	5f                   	pop    edi
c0012b7c:	5d                   	pop    ebp
c0012b7d:	c3                   	ret    

c0012b7e <Virt::freeSwapfilePage(unsigned long)>:
c0012b7e:	53                   	push   ebx
c0012b7f:	8b 15 ec ce 02 c0    	mov    edx,DWORD PTR ds:0xc002ceec
c0012b85:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012b89:	b8 01 00 00 00       	mov    eax,0x1
c0012b8e:	89 cb                	mov    ebx,ecx
c0012b90:	d3 e0                	shl    eax,cl
c0012b92:	c1 eb 05             	shr    ebx,0x5
c0012b95:	f7 d0                	not    eax
c0012b97:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c0012b9a:	21 c1                	and    ecx,eax
c0012b9c:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0012b9f:	5b                   	pop    ebx
c0012ba0:	c3                   	ret    

c0012ba1 <Virt::swapIDToSector(unsigned long)>:
c0012ba1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ba5:	8b 15 8c 59 02 c0    	mov    edx,DWORD PTR ds:0xc002598c
c0012bab:	8b 0d 94 59 02 c0    	mov    ecx,DWORD PTR ds:0xc0025994
c0012bb1:	0f af c2             	imul   eax,edx
c0012bb4:	01 c8                	add    eax,ecx
c0012bb6:	c3                   	ret    

c0012bb7 <Virt::allocateSwapfilePage()>:
c0012bb7:	55                   	push   ebp
c0012bb8:	31 d2                	xor    edx,edx
c0012bba:	57                   	push   edi
c0012bbb:	56                   	push   esi
c0012bbc:	53                   	push   ebx
c0012bbd:	83 ec 0c             	sub    esp,0xc
c0012bc0:	8b 0d 8c 59 02 c0    	mov    ecx,DWORD PTR ds:0xc002598c
c0012bc6:	a1 90 59 02 c0       	mov    eax,ds:0xc0025990
c0012bcb:	f7 f1                	div    ecx
c0012bcd:	39 0d 90 59 02 c0    	cmp    DWORD PTR ds:0xc0025990,ecx
c0012bd3:	72 2f                	jb     c0012c04 <Virt::allocateSwapfilePage()+0x4d>
c0012bd5:	8b 35 ec ce 02 c0    	mov    esi,DWORD PTR ds:0xc002ceec
c0012bdb:	8b 16                	mov    edx,DWORD PTR [esi]
c0012bdd:	f6 c2 01             	test   dl,0x1
c0012be0:	74 3e                	je     c0012c20 <Virt::allocateSwapfilePage()+0x69>
c0012be2:	31 c9                	xor    ecx,ecx
c0012be4:	bf 01 00 00 00       	mov    edi,0x1
c0012be9:	eb 12                	jmp    c0012bfd <Virt::allocateSwapfilePage()+0x46>
c0012beb:	89 fd                	mov    ebp,edi
c0012bed:	89 ca                	mov    edx,ecx
c0012bef:	d3 e5                	shl    ebp,cl
c0012bf1:	c1 ea 05             	shr    edx,0x5
c0012bf4:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0012bf7:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012bf9:	85 ea                	test   edx,ebp
c0012bfb:	74 2c                	je     c0012c29 <Virt::allocateSwapfilePage()+0x72>
c0012bfd:	83 c1 01             	add    ecx,0x1
c0012c00:	39 c8                	cmp    eax,ecx
c0012c02:	77 e7                	ja     c0012beb <Virt::allocateSwapfilePage()+0x34>
c0012c04:	83 ec 0c             	sub    esp,0xc
c0012c07:	68 37 3c 02 c0       	push   0xc0023c37
c0012c0c:	e8 39 ca ff ff       	call   c000f64a <KePanic(char const*)>
c0012c11:	83 c4 10             	add    esp,0x10
c0012c14:	31 c9                	xor    ecx,ecx
c0012c16:	83 c4 0c             	add    esp,0xc
c0012c19:	89 c8                	mov    eax,ecx
c0012c1b:	5b                   	pop    ebx
c0012c1c:	5e                   	pop    esi
c0012c1d:	5f                   	pop    edi
c0012c1e:	5d                   	pop    ebp
c0012c1f:	c3                   	ret    
c0012c20:	89 f3                	mov    ebx,esi
c0012c22:	bd 01 00 00 00       	mov    ebp,0x1
c0012c27:	31 c9                	xor    ecx,ecx
c0012c29:	09 ea                	or     edx,ebp
c0012c2b:	89 c8                	mov    eax,ecx
c0012c2d:	89 13                	mov    DWORD PTR [ebx],edx
c0012c2f:	83 c4 0c             	add    esp,0xc
c0012c32:	5b                   	pop    ebx
c0012c33:	5e                   	pop    esi
c0012c34:	5f                   	pop    edi
c0012c35:	5d                   	pop    ebp
c0012c36:	c3                   	ret    

c0012c37 <Virt::virtualMemorySetup()>:
c0012c37:	53                   	push   ebx
c0012c38:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012c3d:	6a 0f                	push   0xf
c0012c3f:	53                   	push   ebx
c0012c40:	83 c3 01             	add    ebx,0x1
c0012c43:	e8 b4 fd ff ff       	call   c00129fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012c48:	58                   	pop    eax
c0012c49:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012c4f:	5a                   	pop    edx
c0012c50:	75 eb                	jne    c0012c3d <Virt::virtualMemorySetup()+0x6>
c0012c52:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0012c57:	6a 00                	push   0x0
c0012c59:	53                   	push   ebx
c0012c5a:	83 c3 01             	add    ebx,0x1
c0012c5d:	e8 9a fd ff ff       	call   c00129fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012c62:	59                   	pop    ecx
c0012c63:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0012c69:	58                   	pop    eax
c0012c6a:	75 eb                	jne    c0012c57 <Virt::virtualMemorySetup()+0x20>
c0012c6c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0012c71:	6a 0f                	push   0xf
c0012c73:	53                   	push   ebx
c0012c74:	83 c3 01             	add    ebx,0x1
c0012c77:	e8 80 fd ff ff       	call   c00129fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012c7c:	58                   	pop    eax
c0012c7d:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0012c83:	5a                   	pop    edx
c0012c84:	75 eb                	jne    c0012c71 <Virt::virtualMemorySetup()+0x3a>
c0012c86:	5b                   	pop    ebx
c0012c87:	c3                   	ret    

c0012c88 <Virt::setupPageSwapping(int)>:
c0012c88:	53                   	push   ebx
c0012c89:	83 ec 0c             	sub    esp,0xc
c0012c8c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012c90:	a1 88 a7 02 c0       	mov    eax,ds:0xc002a788
c0012c95:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c0012c9b:	8b 10                	mov    edx,DWORD PTR [eax]
c0012c9d:	53                   	push   ebx
c0012c9e:	c1 e3 0b             	shl    ebx,0xb
c0012ca1:	68 4e 3c 02 c0       	push   0xc0023c4e
c0012ca6:	50                   	push   eax
c0012ca7:	ff 52 60             	call   DWORD PTR [edx+0x60]
c0012caa:	89 1d 90 59 02 c0    	mov    DWORD PTR ds:0xc0025990,ebx
c0012cb0:	c6 05 98 59 02 c0 43 	mov    BYTE PTR ds:0xc0025998,0x43
c0012cb7:	c1 eb 08             	shr    ebx,0x8
c0012cba:	a3 94 59 02 c0       	mov    ds:0xc0025994,eax
c0012cbf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cc2:	c7 05 8c 59 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002598c,0x8
c0012ccc:	e8 32 c6 ff ff       	call   c000f303 <malloc>
c0012cd1:	83 c4 0c             	add    esp,0xc
c0012cd4:	89 c1                	mov    ecx,eax
c0012cd6:	a3 ec ce 02 c0       	mov    ds:0xc002ceec,eax
c0012cdb:	31 d2                	xor    edx,edx
c0012cdd:	a1 90 59 02 c0       	mov    eax,ds:0xc0025990
c0012ce2:	f7 35 8c 59 02 c0    	div    DWORD PTR ds:0xc002598c
c0012ce8:	c1 e8 05             	shr    eax,0x5
c0012ceb:	50                   	push   eax
c0012cec:	6a 00                	push   0x0
c0012cee:	51                   	push   ecx
c0012cef:	e8 fc d7 fe ff       	call   c00004f0 <memset>
c0012cf4:	83 c4 18             	add    esp,0x18
c0012cf7:	5b                   	pop    ebx
c0012cf8:	c3                   	ret    
c0012cf9:	90                   	nop

c0012cfa <VAS::setCPUSpecific(unsigned long)>:
c0012cfa:	c3                   	ret    
c0012cfb:	90                   	nop

c0012cfc <VAS::VAS(VAS*)>:
c0012cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012d07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d0b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012d12:	90                   	nop
c0012d13:	c3                   	ret    

c0012d14 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0012d14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012d18:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c0012d1d:	89 c2                	mov    edx,eax
c0012d1f:	c1 e8 0a             	shr    eax,0xa
c0012d22:	c1 ea 16             	shr    edx,0x16
c0012d25:	83 f9 01             	cmp    ecx,0x1
c0012d28:	19 c9                	sbb    ecx,ecx
c0012d2a:	c1 e2 0c             	shl    edx,0xc
c0012d2d:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0012d33:	25 fc 0f 00 00       	and    eax,0xffc
c0012d38:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0012d3f:	01 d0                	add    eax,edx
c0012d41:	c3                   	ret    

c0012d42 <VAS::getPageTableEntry(unsigned long)>:
c0012d42:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012d46:	89 ca                	mov    edx,ecx
c0012d48:	c1 e9 0a             	shr    ecx,0xa
c0012d4b:	c1 ea 16             	shr    edx,0x16
c0012d4e:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0012d54:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0012d5a:	c1 e0 0c             	shl    eax,0xc
c0012d5d:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012d60:	c3                   	ret    

c0012d61 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012d61:	55                   	push   ebp
c0012d62:	57                   	push   edi
c0012d63:	bf 01 00 00 00       	mov    edi,0x1
c0012d68:	56                   	push   esi
c0012d69:	53                   	push   ebx
c0012d6a:	83 ec 1c             	sub    esp,0x1c
c0012d6d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0012d71:	c1 ee 0c             	shr    esi,0xc
c0012d74:	eb 48                	jmp    c0012dbe <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0012d76:	83 ec 08             	sub    esp,0x8
c0012d79:	a1 f0 ce 02 c0       	mov    eax,ds:0xc002cef0
c0012d7e:	55                   	push   ebp
c0012d7f:	50                   	push   eax
c0012d80:	e8 bd ff ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c0012d85:	83 c4 10             	add    esp,0x10
c0012d88:	8b 10                	mov    edx,DWORD PTR [eax]
c0012d8a:	f6 c6 04             	test   dh,0x4
c0012d8d:	75 70                	jne    c0012dff <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012d8f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012d95:	83 fb 04             	cmp    ebx,0x4
c0012d98:	0f 84 8a 00 00 00    	je     c0012e28 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012d9e:	83 fb 02             	cmp    ebx,0x2
c0012da1:	0f 84 9a 00 00 00    	je     c0012e41 <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0012da7:	83 fb 03             	cmp    ebx,0x3
c0012daa:	0f 84 be 00 00 00    	je     c0012e6e <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c0012db0:	83 fb 01             	cmp    ebx,0x1
c0012db3:	0f 84 a2 00 00 00    	je     c0012e5b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012db9:	83 c6 01             	add    esi,0x1
c0012dbc:	31 ff                	xor    edi,edi
c0012dbe:	56                   	push   esi
c0012dbf:	89 f5                	mov    ebp,esi
c0012dc1:	e8 70 fc ff ff       	call   c0012a36 <Virt::getPageState(unsigned long)>
c0012dc6:	c1 e5 0c             	shl    ebp,0xc
c0012dc9:	0f b6 d8             	movzx  ebx,al
c0012dcc:	5a                   	pop    edx
c0012dcd:	85 db                	test   ebx,ebx
c0012dcf:	75 a5                	jne    c0012d76 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c0012dd1:	83 ec 0c             	sub    esp,0xc
c0012dd4:	68 65 3c 02 c0       	push   0xc0023c65
c0012dd9:	e8 6c c8 ff ff       	call   c000f64a <KePanic(char const*)>
c0012dde:	5a                   	pop    edx
c0012ddf:	59                   	pop    ecx
c0012de0:	55                   	push   ebp
c0012de1:	8b 2d f0 ce 02 c0    	mov    ebp,DWORD PTR ds:0xc002cef0
c0012de7:	55                   	push   ebp
c0012de8:	e8 55 ff ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c0012ded:	83 c4 10             	add    esp,0x10
c0012df0:	8b 10                	mov    edx,DWORD PTR [eax]
c0012df2:	f6 c6 04             	test   dh,0x4
c0012df5:	75 08                	jne    c0012dff <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0012df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012dfd:	eb ba                	jmp    c0012db9 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012dff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012e03:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0012e09:	83 ec 0c             	sub    esp,0xc
c0012e0c:	52                   	push   edx
c0012e0d:	e8 c3 c9 ff ff       	call   c000f7d5 <Phys::freePage(unsigned long)>
c0012e12:	83 c4 10             	add    esp,0x10
c0012e15:	83 fb 04             	cmp    ebx,0x4
c0012e18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012e1c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0012e22:	0f 85 76 ff ff ff    	jne    c0012d9e <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c0012e28:	83 e7 01             	and    edi,0x1
c0012e2b:	75 46                	jne    c0012e73 <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c0012e2d:	c7 44 24 30 d4 36 02 c0 	mov    DWORD PTR [esp+0x30],0xc00236d4
c0012e35:	83 c4 1c             	add    esp,0x1c
c0012e38:	5b                   	pop    ebx
c0012e39:	5e                   	pop    esi
c0012e3a:	5f                   	pop    edi
c0012e3b:	5d                   	pop    ebp
c0012e3c:	e9 09 c8 ff ff       	jmp    c000f64a <KePanic(char const*)>
c0012e41:	83 e7 01             	and    edi,0x1
c0012e44:	75 15                	jne    c0012e5b <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0012e46:	83 ec 0c             	sub    esp,0xc
c0012e49:	68 81 3c 02 c0       	push   0xc0023c81
c0012e4e:	e8 f7 c7 ff ff       	call   c000f64a <KePanic(char const*)>
c0012e53:	83 c4 10             	add    esp,0x10
c0012e56:	e9 5e ff ff ff       	jmp    c0012db9 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012e5b:	83 ec 08             	sub    esp,0x8
c0012e5e:	6a 00                	push   0x0
c0012e60:	56                   	push   esi
c0012e61:	e8 96 fb ff ff       	call   c00129fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012e66:	83 c4 10             	add    esp,0x10
c0012e69:	e9 4b ff ff ff       	jmp    c0012db9 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0012e6e:	83 e7 01             	and    edi,0x1
c0012e71:	75 16                	jne    c0012e89 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0012e73:	83 ec 08             	sub    esp,0x8
c0012e76:	6a 00                	push   0x0
c0012e78:	56                   	push   esi
c0012e79:	e8 7e fb ff ff       	call   c00129fc <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012e7e:	83 c4 10             	add    esp,0x10
c0012e81:	83 c4 1c             	add    esp,0x1c
c0012e84:	5b                   	pop    ebx
c0012e85:	5e                   	pop    esi
c0012e86:	5f                   	pop    edi
c0012e87:	5d                   	pop    ebp
c0012e88:	c3                   	ret    
c0012e89:	c7 44 24 30 9d 3c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0023c9d
c0012e91:	83 c4 1c             	add    esp,0x1c
c0012e94:	5b                   	pop    ebx
c0012e95:	5e                   	pop    esi
c0012e96:	5f                   	pop    edi
c0012e97:	5d                   	pop    ebp
c0012e98:	e9 ad c7 ff ff       	jmp    c000f64a <KePanic(char const*)>
c0012e9d:	90                   	nop

c0012e9e <VAS::freeAllocatedPages(unsigned long)>:
c0012e9e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ea2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ea6:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012eaa:	74 09                	je     c0012eb5 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012eac:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eb0:	e9 ac fe ff ff       	jmp    c0012d61 <Virt::freeKernelVirtualPages(unsigned long)>
c0012eb5:	c7 44 24 04 f8 36 02 c0 	mov    DWORD PTR [esp+0x4],0xc00236f8
c0012ebd:	e9 a2 40 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0012ec2 <VAS::virtualToPhysical(unsigned long)>:
c0012ec2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012ec6:	50                   	push   eax
c0012ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ecb:	52                   	push   edx
c0012ecc:	e8 71 fe ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c0012ed1:	59                   	pop    ecx
c0012ed2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ed4:	5a                   	pop    edx
c0012ed5:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012eda:	c3                   	ret    
c0012edb:	90                   	nop

c0012edc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0012edc:	55                   	push   ebp
c0012edd:	57                   	push   edi
c0012ede:	56                   	push   esi
c0012edf:	53                   	push   ebx
c0012ee0:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012ee4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012ee8:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012eec:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012ef0:	85 db                	test   ebx,ebx
c0012ef2:	7e 24                	jle    c0012f18 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0012ef4:	c1 e3 0c             	shl    ebx,0xc
c0012ef7:	01 f3                	add    ebx,esi
c0012ef9:	56                   	push   esi
c0012efa:	81 c6 00 10 00 00    	add    esi,0x1000
c0012f00:	55                   	push   ebp
c0012f01:	e8 3c fe ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c0012f06:	5a                   	pop    edx
c0012f07:	59                   	pop    ecx
c0012f08:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f0a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012f0e:	21 f9                	and    ecx,edi
c0012f10:	09 d1                	or     ecx,edx
c0012f12:	39 f3                	cmp    ebx,esi
c0012f14:	89 08                	mov    DWORD PTR [eax],ecx
c0012f16:	75 e1                	jne    c0012ef9 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0012f18:	5b                   	pop    ebx
c0012f19:	5e                   	pop    esi
c0012f1a:	5f                   	pop    edi
c0012f1b:	5d                   	pop    ebp
c0012f1c:	c3                   	ret    
c0012f1d:	90                   	nop

c0012f1e <VAS::VAS()>:
c0012f1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012f29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f2d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012f34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f38:	a3 f0 ce 02 c0       	mov    ds:0xc002cef0,eax
c0012f3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f41:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0012f45:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f49:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0012f4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012f50:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0012f57:	ba 7d 60 02 c0       	mov    edx,0xc002607d
c0012f5c:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0012f61:	29 c2                	sub    edx,eax
c0012f63:	89 d0                	mov    eax,edx
c0012f65:	05 ff 0f 00 00       	add    eax,0xfff
c0012f6a:	c1 e8 0c             	shr    eax,0xc
c0012f6d:	89 c2                	mov    edx,eax
c0012f6f:	b8 00 60 02 c0       	mov    eax,0xc0026000
c0012f74:	6a 04                	push   0x4
c0012f76:	6a ff                	push   0xffffffff
c0012f78:	52                   	push   edx
c0012f79:	50                   	push   eax
c0012f7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012f7e:	e8 59 ff ff ff       	call   c0012edc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012f83:	83 c4 14             	add    esp,0x14
c0012f86:	90                   	nop
c0012f87:	c3                   	ret    

c0012f88 <VAS::setToWriteCombining(unsigned long, int)>:
c0012f88:	a1 84 d7 02 c0       	mov    eax,ds:0xc002d784
c0012f8d:	50                   	push   eax
c0012f8e:	6a ff                	push   0xffffffff
c0012f90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012f94:	52                   	push   edx
c0012f95:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0012f99:	51                   	push   ecx
c0012f9a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0012f9e:	50                   	push   eax
c0012f9f:	e8 38 ff ff ff       	call   c0012edc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0012fa4:	83 c4 14             	add    esp,0x14
c0012fa7:	c3                   	ret    

c0012fa8 <VAS::mapOtherVASIn(bool, VAS*)>:
c0012fa8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012fac:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0012faf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012fb3:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0012fb6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0012fbb:	83 f8 01             	cmp    eax,0x1
c0012fbe:	19 c0                	sbb    eax,eax
c0012fc0:	83 ca 03             	or     edx,0x3
c0012fc3:	83 e0 fc             	and    eax,0xfffffffc
c0012fc6:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0012fcd:	0f 20 d8             	mov    eax,cr3
c0012fd0:	0f 22 d8             	mov    cr3,eax
c0012fd3:	c3                   	ret    

c0012fd4 <VAS::~VAS()>:
c0012fd4:	83 ec 2c             	sub    esp,0x2c
c0012fd7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012fdf:	fa                   	cli    
c0012fe0:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0012fe5:	83 c0 01             	add    eax,0x1
c0012fe8:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0012fed:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012ff2:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ff4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012ff7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0012ffd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0013001:	6a 01                	push   0x1
c0013003:	50                   	push   eax
c0013004:	e8 9f ff ff ff       	call   c0012fa8 <VAS::mapOtherVASIn(bool, VAS*)>
c0013009:	83 c4 0c             	add    esp,0xc
c001300c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0013014:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c001301c:	0f 8f d8 00 00 00    	jg     c00130fa <VAS::~VAS()+0x126>
c0013022:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013026:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013029:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001302d:	c1 e2 02             	shl    edx,0x2
c0013030:	01 d0                	add    eax,edx
c0013032:	8b 00                	mov    eax,DWORD PTR [eax]
c0013034:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013038:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001303c:	83 e0 01             	and    eax,0x1
c001303f:	0f 84 ab 00 00 00    	je     c00130f0 <VAS::~VAS()+0x11c>
c0013045:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001304d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0013055:	7f 74                	jg     c00130cb <VAS::~VAS()+0xf7>
c0013057:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001305b:	c1 e0 0a             	shl    eax,0xa
c001305e:	89 c2                	mov    edx,eax
c0013060:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013064:	01 d0                	add    eax,edx
c0013066:	c1 e0 0c             	shl    eax,0xc
c0013069:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001306d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0013072:	8b 00                	mov    eax,DWORD PTR [eax]
c0013074:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013077:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c001307d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0013081:	6a 01                	push   0x1
c0013083:	50                   	push   eax
c0013084:	e8 8b fc ff ff       	call   c0012d14 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0013089:	83 c4 0c             	add    esp,0xc
c001308c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013090:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013094:	8b 00                	mov    eax,DWORD PTR [eax]
c0013096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001309a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001309e:	25 01 04 00 00       	and    eax,0x401
c00130a3:	3d 01 04 00 00       	cmp    eax,0x401
c00130a8:	75 1a                	jne    c00130c4 <VAS::~VAS()+0xf0>
c00130aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00130ae:	25 00 f0 ff ff       	and    eax,0xfffff000
c00130b3:	83 ec 0c             	sub    esp,0xc
c00130b6:	50                   	push   eax
c00130b7:	e8 19 c7 ff ff       	call   c000f7d5 <Phys::freePage(unsigned long)>
c00130bc:	83 c4 10             	add    esp,0x10
c00130bf:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00130c4:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c00130c9:	eb 82                	jmp    c001304d <VAS::~VAS()+0x79>
c00130cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130cf:	25 00 04 00 00       	and    eax,0x400
c00130d4:	74 1a                	je     c00130f0 <VAS::~VAS()+0x11c>
c00130d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130da:	25 00 f0 ff ff       	and    eax,0xfffff000
c00130df:	83 ec 0c             	sub    esp,0xc
c00130e2:	50                   	push   eax
c00130e3:	e8 ed c6 ff ff       	call   c000f7d5 <Phys::freePage(unsigned long)>
c00130e8:	83 c4 10             	add    esp,0x10
c00130eb:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c00130f0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c00130f5:	e9 1a ff ff ff       	jmp    c0013014 <VAS::~VAS()+0x40>
c00130fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130fe:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013101:	83 ec 0c             	sub    esp,0xc
c0013104:	50                   	push   eax
c0013105:	e8 57 fc ff ff       	call   c0012d61 <Virt::freeKernelVirtualPages(unsigned long)>
c001310a:	83 c4 10             	add    esp,0x10
c001310d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013111:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013114:	83 ec 0c             	sub    esp,0xc
c0013117:	50                   	push   eax
c0013118:	e8 b8 c6 ff ff       	call   c000f7d5 <Phys::freePage(unsigned long)>
c001311d:	83 c4 10             	add    esp,0x10
c0013120:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013125:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c001312d:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013132:	85 c0                	test   eax,eax
c0013134:	75 01                	jne    c0013137 <VAS::~VAS()+0x163>
c0013136:	fb                   	sti    
c0013137:	90                   	nop
c0013138:	83 c4 2c             	add    esp,0x2c
c001313b:	c3                   	ret    

c001313c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001313c:	55                   	push   ebp
c001313d:	57                   	push   edi
c001313e:	56                   	push   esi
c001313f:	53                   	push   ebx
c0013140:	83 ec 1c             	sub    esp,0x1c
c0013143:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0013147:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001314b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0013151:	77 08                	ja     c001315b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0013153:	0f 20 d8             	mov    eax,cr3
c0013156:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0013159:	75 49                	jne    c00131a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c001315b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001315f:	09 d8                	or     eax,ebx
c0013161:	a9 ff 0f 00 00       	test   eax,0xfff
c0013166:	75 59                	jne    c00131c1 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0013168:	89 de                	mov    esi,ebx
c001316a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001316d:	c1 ee 16             	shr    esi,0x16
c0013170:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0013177:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001317b:	74 56                	je     c00131d3 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c001317d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0013181:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013185:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c001318b:	c1 eb 0a             	shr    ebx,0xa
c001318e:	c1 e6 0c             	shl    esi,0xc
c0013191:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0013197:	09 d0                	or     eax,edx
c0013199:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c001319c:	83 c4 1c             	add    esp,0x1c
c001319f:	5b                   	pop    ebx
c00131a0:	5e                   	pop    esi
c00131a1:	5f                   	pop    edi
c00131a2:	5d                   	pop    ebp
c00131a3:	c3                   	ret    
c00131a4:	83 ec 0c             	sub    esp,0xc
c00131a7:	68 1c 37 02 c0       	push   0xc002371c
c00131ac:	e8 b3 3d ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00131b1:	83 c4 10             	add    esp,0x10
c00131b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00131b8:	09 d8                	or     eax,ebx
c00131ba:	a9 ff 0f 00 00       	test   eax,0xfff
c00131bf:	74 a7                	je     c0013168 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00131c1:	83 ec 0c             	sub    esp,0xc
c00131c4:	68 84 37 02 c0       	push   0xc0023784
c00131c9:	e8 7c c4 ff ff       	call   c000f64a <KePanic(char const*)>
c00131ce:	83 c4 10             	add    esp,0x10
c00131d1:	eb 95                	jmp    c0013168 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00131d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131d7:	e8 62 c6 ff ff       	call   c000f83e <Phys::allocatePage()>
c00131dc:	83 ec 0c             	sub    esp,0xc
c00131df:	89 c5                	mov    ebp,eax
c00131e1:	8b 0d f0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cef0
c00131e7:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00131eb:	6a 01                	push   0x1
c00131ed:	e8 67 f8 ff ff       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c00131f2:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00131f9:	6a 01                	push   0x1
c00131fb:	50                   	push   eax
c00131fc:	55                   	push   ebp
c00131fd:	81 cd 07 04 00 00    	or     ebp,0x407
c0013203:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0013207:	51                   	push   ecx
c0013208:	e8 19 01 00 00       	call   c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001320d:	83 c4 1c             	add    esp,0x1c
c0013210:	68 00 10 00 00       	push   0x1000
c0013215:	6a 00                	push   0x0
c0013217:	50                   	push   eax
c0013218:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001321c:	e8 cf d2 fe ff       	call   c00004f0 <memset>
c0013221:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013225:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0013228:	e8 34 fb ff ff       	call   c0012d61 <Virt::freeKernelVirtualPages(unsigned long)>
c001322d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013231:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013234:	83 c4 10             	add    esp,0x10
c0013237:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c001323a:	e9 3e ff ff ff       	jmp    c001317d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c001323f:	90                   	nop

c0013240 <VAS::allocatePages(int, int)>:
c0013240:	55                   	push   ebp
c0013241:	57                   	push   edi
c0013242:	56                   	push   esi
c0013243:	53                   	push   ebx
c0013244:	83 ec 1c             	sub    esp,0x1c
c0013247:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001324b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001324f:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0013253:	75 71                	jne    c00132c6 <VAS::allocatePages(int, int)+0x86>
c0013255:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0013258:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001325c:	85 c0                	test   eax,eax
c001325e:	74 4d                	je     c00132ad <VAS::allocatePages(int, int)+0x6d>
c0013260:	89 dd                	mov    ebp,ebx
c0013262:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013266:	c1 e5 0c             	shl    ebp,0xc
c0013269:	01 c5                	add    ebp,eax
c001326b:	85 db                	test   ebx,ebx
c001326d:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0013270:	7e 29                	jle    c001329b <VAS::allocatePages(int, int)+0x5b>
c0013272:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0013276:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001327a:	81 cf 00 04 00 00    	or     edi,0x400
c0013280:	e8 b9 c5 ff ff       	call   c000f83e <Phys::allocatePage()>
c0013285:	57                   	push   edi
c0013286:	53                   	push   ebx
c0013287:	81 c3 00 10 00 00    	add    ebx,0x1000
c001328d:	50                   	push   eax
c001328e:	56                   	push   esi
c001328f:	e8 a8 fe ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013294:	83 c4 10             	add    esp,0x10
c0013297:	39 dd                	cmp    ebp,ebx
c0013299:	75 e5                	jne    c0013280 <VAS::allocatePages(int, int)+0x40>
c001329b:	0f 20 d8             	mov    eax,cr3
c001329e:	0f 22 d8             	mov    cr3,eax
c00132a1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132a5:	83 c4 1c             	add    esp,0x1c
c00132a8:	5b                   	pop    ebx
c00132a9:	5e                   	pop    esi
c00132aa:	5f                   	pop    edi
c00132ab:	5d                   	pop    ebp
c00132ac:	c3                   	ret    
c00132ad:	83 ec 0c             	sub    esp,0xc
c00132b0:	68 a8 37 02 c0       	push   0xc00237a8
c00132b5:	e8 90 c3 ff ff       	call   c000f64a <KePanic(char const*)>
c00132ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00132bd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132c1:	83 c4 10             	add    esp,0x10
c00132c4:	eb 9a                	jmp    c0013260 <VAS::allocatePages(int, int)+0x20>
c00132c6:	83 ec 0c             	sub    esp,0xc
c00132c9:	53                   	push   ebx
c00132ca:	e8 8a f7 ff ff       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c00132cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00132d3:	83 c4 10             	add    esp,0x10
c00132d6:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c00132db:	77 37                	ja     c0013314 <VAS::allocatePages(int, int)+0xd4>
c00132dd:	85 db                	test   ebx,ebx
c00132df:	7e ba                	jle    c001329b <VAS::allocatePages(int, int)+0x5b>
c00132e1:	c1 e3 0c             	shl    ebx,0xc
c00132e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00132e8:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00132ec:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c00132ef:	81 cf 00 04 00 00    	or     edi,0x400
c00132f5:	89 c3                	mov    ebx,eax
c00132f7:	e8 42 c5 ff ff       	call   c000f83e <Phys::allocatePage()>
c00132fc:	57                   	push   edi
c00132fd:	53                   	push   ebx
c00132fe:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013304:	50                   	push   eax
c0013305:	56                   	push   esi
c0013306:	e8 31 fe ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c001330b:	83 c4 10             	add    esp,0x10
c001330e:	39 dd                	cmp    ebp,ebx
c0013310:	75 e5                	jne    c00132f7 <VAS::allocatePages(int, int)+0xb7>
c0013312:	eb 87                	jmp    c001329b <VAS::allocatePages(int, int)+0x5b>
c0013314:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0013318:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001331d:	09 c2                	or     edx,eax
c001331f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0013323:	eb b8                	jmp    c00132dd <VAS::allocatePages(int, int)+0x9d>
c0013325:	90                   	nop

c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0013326:	55                   	push   ebp
c0013327:	57                   	push   edi
c0013328:	56                   	push   esi
c0013329:	53                   	push   ebx
c001332a:	83 ec 0c             	sub    esp,0xc
c001332d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013331:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013335:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0013339:	85 db                	test   ebx,ebx
c001333b:	7e 2f                	jle    c001336c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c001333d:	c1 e3 0c             	shl    ebx,0xc
c0013340:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013344:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0013348:	01 d3                	add    ebx,edx
c001334a:	55                   	push   ebp
c001334b:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001334f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013353:	29 c2                	sub    edx,eax
c0013355:	01 f2                	add    edx,esi
c0013357:	52                   	push   edx
c0013358:	56                   	push   esi
c0013359:	81 c6 00 10 00 00    	add    esi,0x1000
c001335f:	57                   	push   edi
c0013360:	e8 d7 fd ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013365:	83 c4 10             	add    esp,0x10
c0013368:	39 de                	cmp    esi,ebx
c001336a:	75 de                	jne    c001334a <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c001336c:	0f 20 d8             	mov    eax,cr3
c001336f:	0f 22 d8             	mov    cr3,eax
c0013372:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013376:	83 c4 0c             	add    esp,0xc
c0013379:	5b                   	pop    ebx
c001337a:	5e                   	pop    esi
c001337b:	5f                   	pop    edi
c001337c:	5d                   	pop    ebp
c001337d:	c3                   	ret    

c001337e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c001337e:	55                   	push   ebp
c001337f:	57                   	push   edi
c0013380:	56                   	push   esi
c0013381:	53                   	push   ebx
c0013382:	83 ec 1c             	sub    esp,0x1c
c0013385:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013389:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001338d:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0013391:	09 f8                	or     eax,edi
c0013393:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0013397:	a9 ff 0f 00 00       	test   eax,0xfff
c001339c:	75 4f                	jne    c00133ed <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c001339e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00133a2:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00133a5:	c1 eb 16             	shr    ebx,0x16
c00133a8:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c00133af:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c00133b3:	74 52                	je     c0013407 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c00133b5:	0f b6 f2             	movzx  esi,dl
c00133b8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00133bc:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00133c0:	c1 e8 0a             	shr    eax,0xa
c00133c3:	83 fe 01             	cmp    esi,0x1
c00133c6:	19 d2                	sbb    edx,edx
c00133c8:	c1 e3 0c             	shl    ebx,0xc
c00133cb:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c00133d1:	25 fc 0f 00 00       	and    eax,0xffc
c00133d6:	01 d8                	add    eax,ebx
c00133d8:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00133dc:	09 d9                	or     ecx,ebx
c00133de:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c00133e5:	83 c4 1c             	add    esp,0x1c
c00133e8:	5b                   	pop    ebx
c00133e9:	5e                   	pop    esi
c00133ea:	5f                   	pop    edi
c00133eb:	5d                   	pop    ebp
c00133ec:	c3                   	ret    
c00133ed:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00133f1:	83 ec 0c             	sub    esp,0xc
c00133f4:	68 d4 37 02 c0       	push   0xc00237d4
c00133f9:	e8 4c c2 ff ff       	call   c000f64a <KePanic(char const*)>
c00133fe:	83 c4 10             	add    esp,0x10
c0013401:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013405:	eb 97                	jmp    c001339e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0013407:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001340b:	e8 2e c4 ff ff       	call   c000f83e <Phys::allocatePage()>
c0013410:	83 ec 0c             	sub    esp,0xc
c0013413:	89 c5                	mov    ebp,eax
c0013415:	8b 0d f0 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cef0
c001341b:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001341f:	6a 01                	push   0x1
c0013421:	e8 33 f6 ff ff       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c0013426:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001342d:	6a 01                	push   0x1
c001342f:	50                   	push   eax
c0013430:	55                   	push   ebp
c0013431:	81 cd 07 04 00 00    	or     ebp,0x407
c0013437:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001343b:	51                   	push   ecx
c001343c:	e8 e5 fe ff ff       	call   c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013441:	83 c4 1c             	add    esp,0x1c
c0013444:	68 00 10 00 00       	push   0x1000
c0013449:	6a 00                	push   0x0
c001344b:	50                   	push   eax
c001344c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013450:	e8 9b d0 fe ff       	call   c00004f0 <memset>
c0013455:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0013459:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001345c:	e8 00 f9 ff ff       	call   c0012d61 <Virt::freeKernelVirtualPages(unsigned long)>
c0013461:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0013464:	83 c4 10             	add    esp,0x10
c0013467:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c001346a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001346e:	e9 42 ff ff ff       	jmp    c00133b5 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c0013473:	90                   	nop

c0013474 <VAS::VAS(bool)>:
c0013474:	53                   	push   ebx
c0013475:	83 ec 28             	sub    esp,0x28
c0013478:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001347c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0013480:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013484:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001348b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001348f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013496:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001349a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001349e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c00134a1:	e8 98 c3 ff ff       	call   c000f83e <Phys::allocatePage()>
c00134a6:	89 c2                	mov    edx,eax
c00134a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134ac:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00134af:	8b 1d f0 ce 02 c0    	mov    ebx,DWORD PTR ds:0xc002cef0
c00134b5:	83 ec 0c             	sub    esp,0xc
c00134b8:	6a 01                	push   0x1
c00134ba:	e8 9a f5 ff ff       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c00134bf:	83 c4 10             	add    esp,0x10
c00134c2:	89 c2                	mov    edx,eax
c00134c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134c8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00134cb:	83 ec 0c             	sub    esp,0xc
c00134ce:	6a 03                	push   0x3
c00134d0:	6a 01                	push   0x1
c00134d2:	52                   	push   edx
c00134d3:	50                   	push   eax
c00134d4:	53                   	push   ebx
c00134d5:	e8 4c fe ff ff       	call   c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00134da:	83 c4 20             	add    esp,0x20
c00134dd:	89 c2                	mov    edx,eax
c00134df:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134e3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00134e6:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00134ee:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00134f6:	7f 1d                	jg     c0013515 <VAS::VAS(bool)+0xa1>
c00134f8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00134fc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00134ff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013503:	c1 e2 02             	shl    edx,0x2
c0013506:	01 d0                	add    eax,edx
c0013508:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001350e:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0013513:	eb d9                	jmp    c00134ee <VAS::VAS(bool)+0x7a>
c0013515:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c001351d:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0013525:	7f 59                	jg     c0013580 <VAS::VAS(bool)+0x10c>
c0013527:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001352b:	2d 00 02 00 00       	sub    eax,0x200
c0013530:	c1 e0 0c             	shl    eax,0xc
c0013533:	89 c2                	mov    edx,eax
c0013535:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c001353a:	89 d1                	mov    ecx,edx
c001353c:	09 c1                	or     ecx,eax
c001353e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013542:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0013545:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013549:	c1 e2 02             	shl    edx,0x2
c001354c:	01 d0                	add    eax,edx
c001354e:	83 c9 05             	or     ecx,0x5
c0013551:	89 ca                	mov    edx,ecx
c0013553:	89 10                	mov    DWORD PTR [eax],edx
c0013555:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013559:	2d 40 03 00 00       	sub    eax,0x340
c001355e:	83 f8 7f             	cmp    eax,0x7f
c0013561:	77 16                	ja     c0013579 <VAS::VAS(bool)+0x105>
c0013563:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013567:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001356a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001356e:	c1 e2 02             	shl    edx,0x2
c0013571:	01 d0                	add    eax,edx
c0013573:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0013579:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c001357e:	eb 9d                	jmp    c001351d <VAS::VAS(bool)+0xa9>
c0013580:	8b 15 88 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d788
c0013586:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001358a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001358d:	05 20 0c 00 00       	add    eax,0xc20
c0013592:	81 ca 03 40 00 00    	or     edx,0x4003
c0013598:	89 10                	mov    DWORD PTR [eax],edx
c001359a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001359e:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00135a1:	a1 88 d7 02 c0       	mov    eax,ds:0xc002d788
c00135a6:	09 c2                	or     edx,eax
c00135a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00135ac:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00135af:	05 fc 0f 00 00       	add    eax,0xffc
c00135b4:	83 ca 03             	or     edx,0x3
c00135b7:	89 10                	mov    DWORD PTR [eax],edx
c00135b9:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00135be:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00135c4:	83 ec 0c             	sub    esp,0xc
c00135c7:	50                   	push   eax
c00135c8:	e8 23 5d ff ff       	call   c00092f0 <Device::getName()>
c00135cd:	83 c4 10             	add    esp,0x10
c00135d0:	83 ec 08             	sub    esp,0x8
c00135d3:	68 b7 3c 02 c0       	push   0xc0023cb7
c00135d8:	50                   	push   eax
c00135d9:	e8 72 d1 fe ff       	call   c0000750 <strcmp>
c00135de:	83 c4 10             	add    esp,0x10
c00135e1:	85 c0                	test   eax,eax
c00135e3:	0f 94 c0             	sete   al
c00135e6:	0f b6 c0             	movzx  eax,al
c00135e9:	85 c0                	test   eax,eax
c00135eb:	74 68                	je     c0013655 <VAS::VAS(bool)+0x1e1>
c00135ed:	fa                   	cli    
c00135ee:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00135f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00135f9:	05 68 09 00 00       	add    eax,0x968
c00135fe:	83 ec 0c             	sub    esp,0xc
c0013601:	50                   	push   eax
c0013602:	e8 ef af ff ff       	call   c000e5f6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0013607:	83 c4 10             	add    esp,0x10
c001360a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001360f:	89 c3                	mov    ebx,eax
c0013611:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0013616:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001361c:	05 68 09 00 00       	add    eax,0x968
c0013621:	83 ec 0c             	sub    esp,0xc
c0013624:	50                   	push   eax
c0013625:	e8 cc af ff ff       	call   c000e5f6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001362a:	83 c4 10             	add    esp,0x10
c001362d:	83 ec 08             	sub    esp,0x8
c0013630:	50                   	push   eax
c0013631:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013635:	e8 08 f7 ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c001363a:	83 c4 10             	add    esp,0x10
c001363d:	8b 00                	mov    eax,DWORD PTR [eax]
c001363f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013644:	6a 11                	push   0x11
c0013646:	53                   	push   ebx
c0013647:	50                   	push   eax
c0013648:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001364c:	e8 eb fa ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013651:	83 c4 10             	add    esp,0x10
c0013654:	fb                   	sti    
c0013655:	90                   	nop
c0013656:	83 c4 28             	add    esp,0x28
c0013659:	5b                   	pop    ebx
c001365a:	c3                   	ret    
c001365b:	90                   	nop

c001365c <VAS::evict(unsigned long)>:
c001365c:	55                   	push   ebp
c001365d:	57                   	push   edi
c001365e:	56                   	push   esi
c001365f:	53                   	push   ebx
c0013660:	83 ec 24             	sub    esp,0x24
c0013663:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013667:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001366b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001366f:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013674:	50                   	push   eax
c0013675:	68 c5 3c 02 c0       	push   0xc0023cc5
c001367a:	e8 e5 38 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001367f:	e8 33 f5 ff ff       	call   c0012bb7 <Virt::allocateSwapfilePage()>
c0013684:	83 c4 10             	add    esp,0x10
c0013687:	89 c7                	mov    edi,eax
c0013689:	a1 8c 59 02 c0       	mov    eax,ds:0xc002598c
c001368e:	85 c0                	test   eax,eax
c0013690:	7e 40                	jle    c00136d2 <VAS::evict(unsigned long)+0x76>
c0013692:	89 ee                	mov    esi,ebp
c0013694:	31 db                	xor    ebx,ebx
c0013696:	83 ec 0c             	sub    esp,0xc
c0013699:	57                   	push   edi
c001369a:	e8 02 f5 ff ff       	call   c0012ba1 <Virt::swapIDToSector(unsigned long)>
c001369f:	89 34 24             	mov    DWORD PTR [esp],esi
c00136a2:	01 d8                	add    eax,ebx
c00136a4:	6a 01                	push   0x1
c00136a6:	31 d2                	xor    edx,edx
c00136a8:	83 c3 01             	add    ebx,0x1
c00136ab:	52                   	push   edx
c00136ac:	81 c6 00 02 00 00    	add    esi,0x200
c00136b2:	50                   	push   eax
c00136b3:	0f be 05 98 59 02 c0 	movsx  eax,BYTE PTR ds:0xc0025998
c00136ba:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c00136c1:	50                   	push   eax
c00136c2:	e8 8d 6a ff ff       	call   c000a154 <LogicalDisk::write(unsigned long long, int, void*)>
c00136c7:	83 c4 20             	add    esp,0x20
c00136ca:	39 1d 8c 59 02 c0    	cmp    DWORD PTR ds:0xc002598c,ebx
c00136d0:	7f c4                	jg     c0013696 <VAS::evict(unsigned long)+0x3a>
c00136d2:	83 ec 08             	sub    esp,0x8
c00136d5:	c1 e7 0c             	shl    edi,0xc
c00136d8:	55                   	push   ebp
c00136d9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00136dd:	50                   	push   eax
c00136de:	e8 5f f6 ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c00136e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00136e5:	89 d3                	mov    ebx,edx
c00136e7:	81 e2 fe 07 00 00    	and    edx,0x7fe
c00136ed:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00136f3:	09 d7                	or     edi,edx
c00136f5:	89 38                	mov    DWORD PTR [eax],edi
c00136f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136fa:	8b 15 e8 ce 02 c0    	mov    edx,DWORD PTR ds:0xc002cee8
c0013700:	83 c2 01             	add    edx,0x1
c0013703:	89 15 e8 ce 02 c0    	mov    DWORD PTR ds:0xc002cee8,edx
c0013709:	e8 c7 c0 ff ff       	call   c000f7d5 <Phys::freePage(unsigned long)>
c001370e:	0f 20 d8             	mov    eax,cr3
c0013711:	0f 22 d8             	mov    cr3,eax
c0013714:	8b 0d e8 ce 02 c0    	mov    ecx,DWORD PTR ds:0xc002cee8
c001371a:	51                   	push   ecx
c001371b:	55                   	push   ebp
c001371c:	53                   	push   ebx
c001371d:	68 f8 37 02 c0       	push   0xc00237f8
c0013722:	e8 3d 38 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013727:	83 c4 18             	add    esp,0x18
c001372a:	a1 e4 ce 02 c0       	mov    eax,ds:0xc002cee4
c001372f:	50                   	push   eax
c0013730:	8d 50 01             	lea    edx,[eax+0x1]
c0013733:	68 da 3c 02 c0       	push   0xc0023cda
c0013738:	89 15 e4 ce 02 c0    	mov    DWORD PTR ds:0xc002cee4,edx
c001373e:	e8 21 38 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013743:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013748:	c7 44 24 40 ec 3c 02 c0 	mov    DWORD PTR [esp+0x40],0xc0023cec
c0013750:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0013754:	83 c4 2c             	add    esp,0x2c
c0013757:	5b                   	pop    ebx
c0013758:	5e                   	pop    esi
c0013759:	5f                   	pop    edi
c001375a:	5d                   	pop    ebp
c001375b:	e9 04 38 ff ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>

c0013760 <VAS::canLockPage(unsigned long)>:
c0013760:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013764:	50                   	push   eax
c0013765:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013769:	52                   	push   edx
c001376a:	e8 d3 f5 ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c001376f:	59                   	pop    ecx
c0013770:	8b 00                	mov    eax,DWORD PTR [eax]
c0013772:	5a                   	pop    edx
c0013773:	c1 e8 0b             	shr    eax,0xb
c0013776:	83 e0 01             	and    eax,0x1
c0013779:	c3                   	ret    

c001377a <VAS::unlockPage(unsigned long)>:
c001377a:	83 ec 0c             	sub    esp,0xc
c001377d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013781:	50                   	push   eax
c0013782:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0013786:	52                   	push   edx
c0013787:	e8 b6 f5 ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c001378c:	59                   	pop    ecx
c001378d:	5a                   	pop    edx
c001378e:	8b 10                	mov    edx,DWORD PTR [eax]
c0013790:	f6 c6 08             	test   dh,0x8
c0013793:	75 09                	jne    c001379e <VAS::unlockPage(unsigned long)+0x24>
c0013795:	80 ce 08             	or     dh,0x8
c0013798:	89 10                	mov    DWORD PTR [eax],edx
c001379a:	83 c4 0c             	add    esp,0xc
c001379d:	c3                   	ret    
c001379e:	c7 44 24 10 2c 38 02 c0 	mov    DWORD PTR [esp+0x10],0xc002382c
c00137a6:	83 c4 0c             	add    esp,0xc
c00137a9:	e9 9c be ff ff       	jmp    c000f64a <KePanic(char const*)>

c00137ae <VAS::canLockPages(unsigned long, int)>:
c00137ae:	55                   	push   ebp
c00137af:	57                   	push   edi
c00137b0:	56                   	push   esi
c00137b1:	53                   	push   ebx
c00137b2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00137b6:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00137ba:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00137be:	85 ff                	test   edi,edi
c00137c0:	7e 23                	jle    c00137e5 <VAS::canLockPages(unsigned long, int)+0x37>
c00137c2:	31 f6                	xor    esi,esi
c00137c4:	eb 0d                	jmp    c00137d3 <VAS::canLockPages(unsigned long, int)+0x25>
c00137c6:	81 c3 00 10 00 00    	add    ebx,0x1000
c00137cc:	83 c6 01             	add    esi,0x1
c00137cf:	39 f7                	cmp    edi,esi
c00137d1:	74 0d                	je     c00137e0 <VAS::canLockPages(unsigned long, int)+0x32>
c00137d3:	53                   	push   ebx
c00137d4:	55                   	push   ebp
c00137d5:	e8 86 ff ff ff       	call   c0013760 <VAS::canLockPage(unsigned long)>
c00137da:	5a                   	pop    edx
c00137db:	84 c0                	test   al,al
c00137dd:	59                   	pop    ecx
c00137de:	75 e6                	jne    c00137c6 <VAS::canLockPages(unsigned long, int)+0x18>
c00137e0:	5b                   	pop    ebx
c00137e1:	5e                   	pop    esi
c00137e2:	5f                   	pop    edi
c00137e3:	5d                   	pop    ebp
c00137e4:	c3                   	ret    
c00137e5:	b0 01                	mov    al,0x1
c00137e7:	eb f7                	jmp    c00137e0 <VAS::canLockPages(unsigned long, int)+0x32>
c00137e9:	90                   	nop

c00137ea <VAS::unlockPages(unsigned long, int)>:
c00137ea:	55                   	push   ebp
c00137eb:	57                   	push   edi
c00137ec:	56                   	push   esi
c00137ed:	53                   	push   ebx
c00137ee:	83 ec 0c             	sub    esp,0xc
c00137f1:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00137f5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00137f9:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c00137fd:	85 ff                	test   edi,edi
c00137ff:	7e 1c                	jle    c001381d <VAS::unlockPages(unsigned long, int)+0x33>
c0013801:	31 f6                	xor    esi,esi
c0013803:	83 ec 08             	sub    esp,0x8
c0013806:	83 c6 01             	add    esi,0x1
c0013809:	53                   	push   ebx
c001380a:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013810:	55                   	push   ebp
c0013811:	e8 64 ff ff ff       	call   c001377a <VAS::unlockPage(unsigned long)>
c0013816:	83 c4 10             	add    esp,0x10
c0013819:	39 f7                	cmp    edi,esi
c001381b:	75 e6                	jne    c0013803 <VAS::unlockPages(unsigned long, int)+0x19>
c001381d:	83 c4 0c             	add    esp,0xc
c0013820:	5b                   	pop    ebx
c0013821:	5e                   	pop    esi
c0013822:	5f                   	pop    edi
c0013823:	5d                   	pop    ebp
c0013824:	c3                   	ret    
c0013825:	90                   	nop

c0013826 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0013826:	55                   	push   ebp
c0013827:	57                   	push   edi
c0013828:	56                   	push   esi
c0013829:	53                   	push   ebx
c001382a:	81 ec 0c 10 00 00    	sub    esp,0x100c
c0013830:	8b b4 24 24 10 00 00 	mov    esi,DWORD PTR [esp+0x1024]
c0013837:	89 f3                	mov    ebx,esi
c0013839:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001383f:	53                   	push   ebx
c0013840:	8b 84 24 24 10 00 00 	mov    eax,DWORD PTR [esp+0x1024]
c0013847:	50                   	push   eax
c0013848:	e8 f5 f4 ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c001384d:	5a                   	pop    edx
c001384e:	89 c5                	mov    ebp,eax
c0013850:	59                   	pop    ecx
c0013851:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c0013857:	0f 87 cb 00 00 00    	ja     c0013928 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c001385d:	83 ec 08             	sub    esp,0x8
c0013860:	56                   	push   esi
c0013861:	68 5c 38 02 c0       	push   0xc002385c
c0013866:	e8 f9 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001386b:	5e                   	pop    esi
c001386c:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0013871:	5f                   	pop    edi
c0013872:	50                   	push   eax
c0013873:	68 8c 38 02 c0       	push   0xc002388c
c0013878:	e8 e7 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001387d:	58                   	pop    eax
c001387e:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c0013884:	5a                   	pop    edx
c0013885:	51                   	push   ecx
c0013886:	68 b0 38 02 c0       	push   0xc00238b0
c001388b:	e8 d4 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013890:	83 c4 10             	add    esp,0x10
c0013893:	85 db                	test   ebx,ebx
c0013895:	74 5b                	je     c00138f2 <VAS::tryLoadBackOffDisk(unsigned long)+0xcc>
c0013897:	85 ed                	test   ebp,ebp
c0013899:	74 21                	je     c00138bc <VAS::tryLoadBackOffDisk(unsigned long)+0x96>
c001389b:	8b 75 00             	mov    esi,DWORD PTR [ebp+0x0]
c001389e:	f7 c6 00 02 00 00    	test   esi,0x200
c00138a4:	0f 85 c5 00 00 00    	jne    c001396f <VAS::tryLoadBackOffDisk(unsigned long)+0x149>
c00138aa:	89 f0                	mov    eax,esi
c00138ac:	25 01 04 00 00       	and    eax,0x401
c00138b1:	3d 00 04 00 00       	cmp    eax,0x400
c00138b6:	0f 84 39 01 00 00    	je     c00139f5 <VAS::tryLoadBackOffDisk(unsigned long)+0x1cf>
c00138bc:	83 ec 08             	sub    esp,0x8
c00138bf:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00138c4:	50                   	push   eax
c00138c5:	68 a4 3a 02 c0       	push   0xc0023aa4
c00138ca:	e8 95 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00138cf:	5a                   	pop    edx
c00138d0:	8b 1d d0 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6d0
c00138d6:	59                   	pop    ecx
c00138d7:	53                   	push   ebx
c00138d8:	68 c8 3a 02 c0       	push   0xc0023ac8
c00138dd:	e8 82 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00138e2:	83 c4 10             	add    esp,0x10
c00138e5:	31 c0                	xor    eax,eax
c00138e7:	81 c4 0c 10 00 00    	add    esp,0x100c
c00138ed:	5b                   	pop    ebx
c00138ee:	5e                   	pop    esi
c00138ef:	5f                   	pop    edi
c00138f0:	5d                   	pop    ebp
c00138f1:	c3                   	ret    
c00138f2:	83 ec 08             	sub    esp,0x8
c00138f5:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c00138fa:	50                   	push   eax
c00138fb:	68 d4 38 02 c0       	push   0xc00238d4
c0013900:	e8 5f 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013905:	58                   	pop    eax
c0013906:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c001390c:	5a                   	pop    edx
c001390d:	51                   	push   ecx
c001390e:	68 f8 38 02 c0       	push   0xc00238f8
c0013913:	e8 4c 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013918:	83 c4 10             	add    esp,0x10
c001391b:	31 c0                	xor    eax,eax
c001391d:	81 c4 0c 10 00 00    	add    esp,0x100c
c0013923:	5b                   	pop    ebx
c0013924:	5e                   	pop    esi
c0013925:	5f                   	pop    edi
c0013926:	5d                   	pop    ebp
c0013927:	c3                   	ret    
c0013928:	83 ec 0c             	sub    esp,0xc
c001392b:	68 01 3d 02 c0       	push   0xc0023d01
c0013930:	e8 15 bd ff ff       	call   c000f64a <KePanic(char const*)>
c0013935:	5f                   	pop    edi
c0013936:	58                   	pop    eax
c0013937:	56                   	push   esi
c0013938:	68 5c 38 02 c0       	push   0xc002385c
c001393d:	e8 22 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013942:	58                   	pop    eax
c0013943:	8b 0d ac d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6ac
c0013949:	5a                   	pop    edx
c001394a:	51                   	push   ecx
c001394b:	68 8c 38 02 c0       	push   0xc002388c
c0013950:	e8 0f 36 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013955:	5e                   	pop    esi
c0013956:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001395b:	5f                   	pop    edi
c001395c:	50                   	push   eax
c001395d:	68 b0 38 02 c0       	push   0xc00238b0
c0013962:	e8 fd 35 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013967:	83 c4 10             	add    esp,0x10
c001396a:	e9 28 ff ff ff       	jmp    c0013897 <VAS::tryLoadBackOffDisk(unsigned long)+0x71>
c001396f:	83 ec 0c             	sub    esp,0xc
c0013972:	68 1c 39 02 c0       	push   0xc002391c
c0013977:	e8 e8 35 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001397c:	e8 bd be ff ff       	call   c000f83e <Phys::allocatePage()>
c0013981:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013984:	83 ca 01             	or     edx,0x1
c0013987:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c001398a:	0f 20 da             	mov    edx,cr3
c001398d:	0f 22 da             	mov    cr3,edx
c0013990:	ba 00 10 00 00       	mov    edx,0x1000
c0013995:	89 de                	mov    esi,ebx
c0013997:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001399b:	89 d1                	mov    ecx,edx
c001399d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001399f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00139a2:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c00139a8:	09 c8                	or     eax,ecx
c00139aa:	83 c8 02             	or     eax,0x2
c00139ad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00139b0:	0f 20 d8             	mov    eax,cr3
c00139b3:	0f 22 d8             	mov    cr3,eax
c00139b6:	8d 74 24 10          	lea    esi,[esp+0x10]
c00139ba:	89 df                	mov    edi,ebx
c00139bc:	89 d1                	mov    ecx,edx
c00139be:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00139c0:	8b 35 ac d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6ac
c00139c6:	59                   	pop    ecx
c00139c7:	5b                   	pop    ebx
c00139c8:	56                   	push   esi
c00139c9:	68 3c 39 02 c0       	push   0xc002393c
c00139ce:	e8 91 35 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00139d3:	5f                   	pop    edi
c00139d4:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00139d9:	5d                   	pop    ebp
c00139da:	50                   	push   eax
c00139db:	68 60 39 02 c0       	push   0xc0023960
c00139e0:	e8 7f 35 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00139e5:	83 c4 10             	add    esp,0x10
c00139e8:	b0 01                	mov    al,0x1
c00139ea:	81 c4 0c 10 00 00    	add    esp,0x100c
c00139f0:	5b                   	pop    ebx
c00139f1:	5e                   	pop    esi
c00139f2:	5f                   	pop    edi
c00139f3:	5d                   	pop    ebp
c00139f4:	c3                   	ret    
c00139f5:	83 ec 08             	sub    esp,0x8
c00139f8:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00139fd:	c1 ee 0c             	shr    esi,0xc
c0013a00:	50                   	push   eax
c0013a01:	68 84 39 02 c0       	push   0xc0023984
c0013a06:	e8 59 35 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013a0b:	e8 2e be ff ff       	call   c000f83e <Phys::allocatePage()>
c0013a10:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c0013a16:	89 c7                	mov    edi,eax
c0013a18:	58                   	pop    eax
c0013a19:	5a                   	pop    edx
c0013a1a:	51                   	push   ecx
c0013a1b:	68 a8 39 02 c0       	push   0xc00239a8
c0013a20:	e8 3f 35 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013a25:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0013a28:	83 c4 10             	add    esp,0x10
c0013a2b:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0013a31:	09 fa                	or     edx,edi
c0013a33:	81 ca 01 08 00 00    	or     edx,0x801
c0013a39:	89 55 00             	mov    DWORD PTR [ebp+0x0],edx
c0013a3c:	8b 3d 8c 59 02 c0    	mov    edi,DWORD PTR ds:0xc002598c
c0013a42:	85 ff                	test   edi,edi
c0013a44:	7e 65                	jle    c0013aab <VAS::tryLoadBackOffDisk(unsigned long)+0x285>
c0013a46:	89 dd                	mov    ebp,ebx
c0013a48:	31 ff                	xor    edi,edi
c0013a4a:	83 ec 08             	sub    esp,0x8
c0013a4d:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013a52:	50                   	push   eax
c0013a53:	68 5c 3a 02 c0       	push   0xc0023a5c
c0013a58:	e8 07 35 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013a5d:	89 34 24             	mov    DWORD PTR [esp],esi
c0013a60:	e8 3c f1 ff ff       	call   c0012ba1 <Virt::swapIDToSector(unsigned long)>
c0013a65:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0013a68:	01 f8                	add    eax,edi
c0013a6a:	6a 01                	push   0x1
c0013a6c:	31 d2                	xor    edx,edx
c0013a6e:	83 c7 01             	add    edi,0x1
c0013a71:	52                   	push   edx
c0013a72:	81 c5 00 02 00 00    	add    ebp,0x200
c0013a78:	50                   	push   eax
c0013a79:	0f be 05 98 59 02 c0 	movsx  eax,BYTE PTR ds:0xc0025998
c0013a80:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c0013a87:	50                   	push   eax
c0013a88:	e8 5b 66 ff ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c0013a8d:	83 c4 18             	add    esp,0x18
c0013a90:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013a95:	50                   	push   eax
c0013a96:	68 80 3a 02 c0       	push   0xc0023a80
c0013a9b:	e8 c4 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013aa0:	83 c4 10             	add    esp,0x10
c0013aa3:	39 3d 8c 59 02 c0    	cmp    DWORD PTR ds:0xc002598c,edi
c0013aa9:	7f 9f                	jg     c0013a4a <VAS::tryLoadBackOffDisk(unsigned long)+0x224>
c0013aab:	83 ec 08             	sub    esp,0x8
c0013aae:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013ab3:	50                   	push   eax
c0013ab4:	68 cc 39 02 c0       	push   0xc00239cc
c0013ab9:	e8 a6 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013abe:	83 c4 0c             	add    esp,0xc
c0013ac1:	a1 e8 ce 02 c0       	mov    eax,ds:0xc002cee8
c0013ac6:	83 e8 01             	sub    eax,0x1
c0013ac9:	50                   	push   eax
c0013aca:	a3 e8 ce 02 c0       	mov    ds:0xc002cee8,eax
c0013acf:	53                   	push   ebx
c0013ad0:	68 13 3d 02 c0       	push   0xc0023d13
c0013ad5:	e8 8a 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013ada:	89 34 24             	mov    DWORD PTR [esp],esi
c0013add:	e8 9c f0 ff ff       	call   c0012b7e <Virt::freeSwapfilePage(unsigned long)>
c0013ae2:	58                   	pop    eax
c0013ae3:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c0013ae9:	5a                   	pop    edx
c0013aea:	51                   	push   ecx
c0013aeb:	68 f0 39 02 c0       	push   0xc00239f0
c0013af0:	e8 6f 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013af5:	0f 20 d8             	mov    eax,cr3
c0013af8:	0f 22 d8             	mov    cr3,eax
c0013afb:	c7 04 24 28 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d28
c0013b02:	e8 5d 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013b07:	5b                   	pop    ebx
c0013b08:	8b 3d ac d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6ac
c0013b0e:	5e                   	pop    esi
c0013b0f:	57                   	push   edi
c0013b10:	68 14 3a 02 c0       	push   0xc0023a14
c0013b15:	e8 4a 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013b1a:	5d                   	pop    ebp
c0013b1b:	58                   	pop    eax
c0013b1c:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013b21:	50                   	push   eax
c0013b22:	68 38 3a 02 c0       	push   0xc0023a38
c0013b27:	e8 38 34 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013b2c:	83 c4 10             	add    esp,0x10
c0013b2f:	b0 01                	mov    al,0x1
c0013b31:	e9 b1 fd ff ff       	jmp    c00138e7 <VAS::tryLoadBackOffDisk(unsigned long)+0xc1>

c0013b36 <VAS::lockPage(unsigned long)>:
c0013b36:	56                   	push   esi
c0013b37:	53                   	push   ebx
c0013b38:	83 ec 04             	sub    esp,0x4
c0013b3b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013b3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b43:	50                   	push   eax
c0013b44:	56                   	push   esi
c0013b45:	e8 f8 f1 ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c0013b4a:	5a                   	pop    edx
c0013b4b:	89 c3                	mov    ebx,eax
c0013b4d:	59                   	pop    ecx
c0013b4e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013b50:	a8 01                	test   al,0x1
c0013b52:	74 10                	je     c0013b64 <VAS::lockPage(unsigned long)+0x2e>
c0013b54:	f6 c4 08             	test   ah,0x8
c0013b57:	74 28                	je     c0013b81 <VAS::lockPage(unsigned long)+0x4b>
c0013b59:	80 e4 f7             	and    ah,0xf7
c0013b5c:	89 03                	mov    DWORD PTR [ebx],eax
c0013b5e:	83 c4 04             	add    esp,0x4
c0013b61:	5b                   	pop    ebx
c0013b62:	5e                   	pop    esi
c0013b63:	c3                   	ret    
c0013b64:	83 ec 08             	sub    esp,0x8
c0013b67:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013b6c:	50                   	push   eax
c0013b6d:	56                   	push   esi
c0013b6e:	e8 b3 fc ff ff       	call   c0013826 <VAS::tryLoadBackOffDisk(unsigned long)>
c0013b73:	83 c4 10             	add    esp,0x10
c0013b76:	84 c0                	test   al,al
c0013b78:	74 19                	je     c0013b93 <VAS::lockPage(unsigned long)+0x5d>
c0013b7a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013b7c:	f6 c4 08             	test   ah,0x8
c0013b7f:	75 d8                	jne    c0013b59 <VAS::lockPage(unsigned long)+0x23>
c0013b81:	c7 44 24 10 2c 38 02 c0 	mov    DWORD PTR [esp+0x10],0xc002382c
c0013b89:	83 c4 04             	add    esp,0x4
c0013b8c:	5b                   	pop    ebx
c0013b8d:	5e                   	pop    esi
c0013b8e:	e9 b7 ba ff ff       	jmp    c000f64a <KePanic(char const*)>
c0013b93:	83 ec 0c             	sub    esp,0xc
c0013b96:	68 ec 3a 02 c0       	push   0xc0023aec
c0013b9b:	e8 aa ba ff ff       	call   c000f64a <KePanic(char const*)>
c0013ba0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ba2:	83 c4 10             	add    esp,0x10
c0013ba5:	eb ad                	jmp    c0013b54 <VAS::lockPage(unsigned long)+0x1e>
c0013ba7:	90                   	nop

c0013ba8 <VAS::lockPages(unsigned long, int)>:
c0013ba8:	55                   	push   ebp
c0013ba9:	57                   	push   edi
c0013baa:	56                   	push   esi
c0013bab:	53                   	push   ebx
c0013bac:	83 ec 0c             	sub    esp,0xc
c0013baf:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013bb3:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0013bb7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013bbb:	85 ff                	test   edi,edi
c0013bbd:	7e 1c                	jle    c0013bdb <VAS::lockPages(unsigned long, int)+0x33>
c0013bbf:	31 f6                	xor    esi,esi
c0013bc1:	83 ec 08             	sub    esp,0x8
c0013bc4:	83 c6 01             	add    esi,0x1
c0013bc7:	53                   	push   ebx
c0013bc8:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013bce:	55                   	push   ebp
c0013bcf:	e8 62 ff ff ff       	call   c0013b36 <VAS::lockPage(unsigned long)>
c0013bd4:	83 c4 10             	add    esp,0x10
c0013bd7:	39 f7                	cmp    edi,esi
c0013bd9:	75 e6                	jne    c0013bc1 <VAS::lockPages(unsigned long, int)+0x19>
c0013bdb:	83 c4 0c             	add    esp,0xc
c0013bde:	5b                   	pop    ebx
c0013bdf:	5e                   	pop    esi
c0013be0:	5f                   	pop    edi
c0013be1:	5d                   	pop    ebp
c0013be2:	c3                   	ret    
c0013be3:	90                   	nop

c0013be4 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c0013be4:	55                   	push   ebp
c0013be5:	57                   	push   edi
c0013be6:	56                   	push   esi
c0013be7:	53                   	push   ebx
c0013be8:	83 ec 28             	sub    esp,0x28
c0013beb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0013bef:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0013bf3:	50                   	push   eax
c0013bf4:	e8 60 ee ff ff       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c0013bf9:	83 c4 0c             	add    esp,0xc
c0013bfc:	89 c5                	mov    ebp,eax
c0013bfe:	6a 07                	push   0x7
c0013c00:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013c04:	52                   	push   edx
c0013c05:	56                   	push   esi
c0013c06:	e8 35 f6 ff ff       	call   c0013240 <VAS::allocatePages(int, int)>
c0013c0b:	83 c4 10             	add    esp,0x10
c0013c0e:	89 c7                	mov    edi,eax
c0013c10:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0013c14:	85 c9                	test   ecx,ecx
c0013c16:	74 2f                	je     c0013c47 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c0013c18:	31 db                	xor    ebx,ebx
c0013c1a:	e8 1f bc ff ff       	call   c000f83e <Phys::allocatePage()>
c0013c1f:	83 c3 01             	add    ebx,0x1
c0013c22:	6a 03                	push   0x3
c0013c24:	55                   	push   ebp
c0013c25:	50                   	push   eax
c0013c26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013c2a:	56                   	push   esi
c0013c2b:	e8 0c f5 ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c30:	6a 07                	push   0x7
c0013c32:	57                   	push   edi
c0013c33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0013c37:	50                   	push   eax
c0013c38:	56                   	push   esi
c0013c39:	e8 fe f4 ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c0013c3e:	83 c4 20             	add    esp,0x20
c0013c41:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c0013c45:	75 d3                	jne    c0013c1a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c0013c47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0013c4b:	89 28                	mov    DWORD PTR [eax],ebp
c0013c4d:	83 c4 1c             	add    esp,0x1c
c0013c50:	89 f8                	mov    eax,edi
c0013c52:	5b                   	pop    ebx
c0013c53:	5e                   	pop    esi
c0013c54:	5f                   	pop    edi
c0013c55:	5d                   	pop    ebp
c0013c56:	c3                   	ret    
c0013c57:	90                   	nop

c0013c58 <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c0013c58:	53                   	push   ebx
c0013c59:	83 ec 14             	sub    esp,0x14
c0013c5c:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0013c60:	68 1c 3b 02 c0       	push   0xc0023b1c
c0013c65:	e8 fa 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013c6a:	c7 04 24 7c 3b 02 c0 	mov    DWORD PTR [esp],0xc0023b7c
c0013c71:	e8 ee 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013c76:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013c7a:	83 c4 18             	add    esp,0x18
c0013c7d:	5b                   	pop    ebx
c0013c7e:	e9 de f0 ff ff       	jmp    c0012d61 <Virt::freeKernelVirtualPages(unsigned long)>
c0013c83:	90                   	nop

c0013c84 <VAS::scanForEviction()>:
c0013c84:	57                   	push   edi
c0013c85:	56                   	push   esi
c0013c86:	31 f6                	xor    esi,esi
c0013c88:	53                   	push   ebx
c0013c89:	83 ec 18             	sub    esp,0x18
c0013c8c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0013c90:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0013c95:	50                   	push   eax
c0013c96:	68 f8 3b 02 c0       	push   0xc0023bf8
c0013c9b:	e8 c4 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013ca0:	c7 04 24 2f 3d 02 c0 	mov    DWORD PTR [esp],0xc0023d2f
c0013ca7:	e8 b8 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013cac:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013caf:	83 c4 10             	add    esp,0x10
c0013cb2:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0013cb8:	75 0e                	jne    c0013cc8 <VAS::scanForEviction()+0x44>
c0013cba:	89 da                	mov    edx,ebx
c0013cbc:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013cbf:	c1 ea 16             	shr    edx,0x16
c0013cc2:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013cc6:	74 5b                	je     c0013d23 <VAS::scanForEviction()+0x9f>
c0013cc8:	83 ec 08             	sub    esp,0x8
c0013ccb:	53                   	push   ebx
c0013ccc:	57                   	push   edi
c0013ccd:	e8 70 f0 ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c0013cd2:	83 c4 10             	add    esp,0x10
c0013cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0013cd7:	89 d1                	mov    ecx,edx
c0013cd9:	c1 e9 0c             	shr    ecx,0xc
c0013cdc:	74 10                	je     c0013cee <VAS::scanForEviction()+0x6a>
c0013cde:	89 d1                	mov    ecx,edx
c0013ce0:	81 e1 01 08 00 00    	and    ecx,0x801
c0013ce6:	81 f9 01 08 00 00    	cmp    ecx,0x801
c0013cec:	74 40                	je     c0013d2e <VAS::scanForEviction()+0xaa>
c0013cee:	81 c3 00 10 00 00    	add    ebx,0x1000
c0013cf4:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c0013cfa:	76 2d                	jbe    c0013d29 <VAS::scanForEviction()+0xa5>
c0013cfc:	83 c6 01             	add    esi,0x1
c0013cff:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c0013d06:	83 fe 03             	cmp    esi,0x3
c0013d09:	74 32                	je     c0013d3d <VAS::scanForEviction()+0xb9>
c0013d0b:	31 db                	xor    ebx,ebx
c0013d0d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0013d13:	75 b3                	jne    c0013cc8 <VAS::scanForEviction()+0x44>
c0013d15:	89 da                	mov    edx,ebx
c0013d17:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0013d1a:	c1 ea 16             	shr    edx,0x16
c0013d1d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0013d21:	75 a5                	jne    c0013cc8 <VAS::scanForEviction()+0x44>
c0013d23:	81 c3 00 00 40 00    	add    ebx,0x400000
c0013d29:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0013d2c:	eb 84                	jmp    c0013cb2 <VAS::scanForEviction()+0x2e>
c0013d2e:	f6 c2 20             	test   dl,0x20
c0013d31:	74 13                	je     c0013d46 <VAS::scanForEviction()+0xc2>
c0013d33:	83 e2 df             	and    edx,0xffffffdf
c0013d36:	89 10                	mov    DWORD PTR [eax],edx
c0013d38:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c0013d3b:	eb b1                	jmp    c0013cee <VAS::scanForEviction()+0x6a>
c0013d3d:	83 c4 10             	add    esp,0x10
c0013d40:	31 c0                	xor    eax,eax
c0013d42:	5b                   	pop    ebx
c0013d43:	5e                   	pop    esi
c0013d44:	5f                   	pop    edi
c0013d45:	c3                   	ret    
c0013d46:	83 ec 08             	sub    esp,0x8
c0013d49:	89 d0                	mov    eax,edx
c0013d4b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0013d50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013d54:	53                   	push   ebx
c0013d55:	68 4b 3d 02 c0       	push   0xc0023d4b
c0013d5a:	e8 05 32 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013d5f:	58                   	pop    eax
c0013d60:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013d63:	5a                   	pop    edx
c0013d64:	51                   	push   ecx
c0013d65:	57                   	push   edi
c0013d66:	e8 f1 f8 ff ff       	call   c001365c <VAS::evict(unsigned long)>
c0013d6b:	5b                   	pop    ebx
c0013d6c:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0013d6f:	5e                   	pop    esi
c0013d70:	50                   	push   eax
c0013d71:	68 5f 3d 02 c0       	push   0xc0023d5f
c0013d76:	e8 e9 31 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013d7b:	58                   	pop    eax
c0013d7c:	5a                   	pop    edx
c0013d7d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013d81:	50                   	push   eax
c0013d82:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0013d86:	68 72 3d 02 c0       	push   0xc0023d72
c0013d8b:	e8 d4 31 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013d90:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c0013d93:	81 c1 00 10 00 00    	add    ecx,0x1000
c0013d99:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c0013d9c:	8b 3d d0 d6 02 c0    	mov    edi,DWORD PTR ds:0xc002d6d0
c0013da2:	5b                   	pop    ebx
c0013da3:	5e                   	pop    esi
c0013da4:	57                   	push   edi
c0013da5:	68 18 3c 02 c0       	push   0xc0023c18
c0013daa:	e8 b5 31 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013daf:	83 c4 10             	add    esp,0x10
c0013db2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0013db6:	83 c4 10             	add    esp,0x10
c0013db9:	5b                   	pop    ebx
c0013dba:	5e                   	pop    esi
c0013dbb:	5f                   	pop    edi
c0013dbc:	c3                   	ret    

c0013dbd <mapVASFirstTime>:
c0013dbd:	55                   	push   ebp
c0013dbe:	57                   	push   edi
c0013dbf:	56                   	push   esi
c0013dc0:	53                   	push   ebx
c0013dc1:	83 ec 0c             	sub    esp,0xc
c0013dc4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013dc9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0013dcc:	83 fa 01             	cmp    edx,0x1
c0013dcf:	0f 84 cb 00 00 00    	je     c0013ea0 <mapVASFirstTime+0xe3>
c0013dd5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013dd8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c0013ddb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0013de0:	c1 e5 15             	shl    ebp,0x15
c0013de3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c0013de8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c0013dee:	29 eb                	sub    ebx,ebp
c0013df0:	29 ef                	sub    edi,ebp
c0013df2:	e8 47 ba ff ff       	call   c000f83e <Phys::allocatePage()>
c0013df7:	83 ec 0c             	sub    esp,0xc
c0013dfa:	68 03 04 00 00       	push   0x403
c0013dff:	6a 01                	push   0x1
c0013e01:	53                   	push   ebx
c0013e02:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013e08:	50                   	push   eax
c0013e09:	56                   	push   esi
c0013e0a:	e8 17 f5 ff ff       	call   c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013e0f:	83 c4 20             	add    esp,0x20
c0013e12:	39 fb                	cmp    ebx,edi
c0013e14:	75 dc                	jne    c0013df2 <mapVASFirstTime+0x35>
c0013e16:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c0013e1b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c0013e20:	29 eb                	sub    ebx,ebp
c0013e22:	29 ef                	sub    edi,ebp
c0013e24:	e8 15 ba ff ff       	call   c000f83e <Phys::allocatePage()>
c0013e29:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c0013e2d:	83 fa 01             	cmp    edx,0x1
c0013e30:	19 d2                	sbb    edx,edx
c0013e32:	83 ec 0c             	sub    esp,0xc
c0013e35:	83 e2 04             	and    edx,0x4
c0013e38:	81 c2 03 04 00 00    	add    edx,0x403
c0013e3e:	52                   	push   edx
c0013e3f:	6a 01                	push   0x1
c0013e41:	53                   	push   ebx
c0013e42:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0013e48:	50                   	push   eax
c0013e49:	56                   	push   esi
c0013e4a:	e8 d7 f4 ff ff       	call   c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013e4f:	83 c4 20             	add    esp,0x20
c0013e52:	39 df                	cmp    edi,ebx
c0013e54:	75 ce                	jne    c0013e24 <mapVASFirstTime+0x67>
c0013e56:	83 ec 0c             	sub    esp,0xc
c0013e59:	bb 7c 70 02 c0       	mov    ebx,0xc002707c
c0013e5e:	6a 04                	push   0x4
c0013e60:	81 eb 00 60 02 c0    	sub    ebx,0xc0026000
c0013e66:	6a ff                	push   0xffffffff
c0013e68:	c1 eb 0c             	shr    ebx,0xc
c0013e6b:	53                   	push   ebx
c0013e6c:	68 00 60 02 c0       	push   0xc0026000
c0013e71:	56                   	push   esi
c0013e72:	e8 65 f0 ff ff       	call   c0012edc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013e77:	83 c4 14             	add    esp,0x14
c0013e7a:	a1 f0 ce 02 c0       	mov    eax,ds:0xc002cef0
c0013e7f:	6a 04                	push   0x4
c0013e81:	6a ff                	push   0xffffffff
c0013e83:	53                   	push   ebx
c0013e84:	68 00 60 02 c0       	push   0xc0026000
c0013e89:	50                   	push   eax
c0013e8a:	e8 4d f0 ff ff       	call   c0012edc <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0013e8f:	0f 20 d8             	mov    eax,cr3
c0013e92:	0f 22 d8             	mov    cr3,eax
c0013e95:	83 c4 20             	add    esp,0x20
c0013e98:	83 c4 0c             	add    esp,0xc
c0013e9b:	5b                   	pop    ebx
c0013e9c:	5e                   	pop    esi
c0013e9d:	5f                   	pop    edi
c0013e9e:	5d                   	pop    ebp
c0013e9f:	c3                   	ret    
c0013ea0:	83 ec 0c             	sub    esp,0xc
c0013ea3:	68 7f 3d 02 c0       	push   0xc0023d7f
c0013ea8:	e8 b7 30 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013ead:	83 c4 10             	add    esp,0x10
c0013eb0:	83 c4 0c             	add    esp,0xc
c0013eb3:	5b                   	pop    ebx
c0013eb4:	5e                   	pop    esi
c0013eb5:	5f                   	pop    edi
c0013eb6:	5d                   	pop    ebp
c0013eb7:	c3                   	ret    

c0013eb8 <SysEject(regs*)>:
c0013eb8:	83 ec 0c             	sub    esp,0xc
c0013ebb:	83 ca ff             	or     edx,0xffffffff
c0013ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ec2:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013ec5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013eca:	83 e9 41             	sub    ecx,0x41
c0013ecd:	83 f9 19             	cmp    ecx,0x19
c0013ed0:	77 18                	ja     c0013eea <SysEject(regs*)+0x32>
c0013ed2:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c0013ed9:	85 c9                	test   ecx,ecx
c0013edb:	74 0d                	je     c0013eea <SysEject(regs*)+0x32>
c0013edd:	83 ec 0c             	sub    esp,0xc
c0013ee0:	51                   	push   ecx
c0013ee1:	e8 98 61 ff ff       	call   c000a07e <LogicalDisk::eject()>
c0013ee6:	83 c4 10             	add    esp,0x10
c0013ee9:	99                   	cdq    
c0013eea:	83 c4 0c             	add    esp,0xc
c0013eed:	c3                   	ret    

c0013eee <SysExit(regs*)>:
c0013eee:	83 ec 18             	sub    esp,0x18
c0013ef1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013ef5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013ef8:	e8 37 2b 00 00       	call   c0016a34 <terminateTask(int)>
c0013efd:	83 c8 ff             	or     eax,0xffffffff
c0013f00:	83 c4 1c             	add    esp,0x1c
c0013f03:	89 c2                	mov    edx,eax
c0013f05:	c3                   	ret    

c0013f06 <SysGetCwd(regs*)>:
c0013f06:	83 ec 10             	sub    esp,0x10
c0013f09:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013f0d:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0013f10:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013f13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f18:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013f1b:	e8 a6 3e ff ff       	call   c0007dc6 <Fs::getcwd(Process*, char*, int)>
c0013f20:	83 c4 1c             	add    esp,0x1c
c0013f23:	99                   	cdq    
c0013f24:	c3                   	ret    

c0013f25 <SysGetPID(regs*)>:
c0013f25:	83 ec 14             	sub    esp,0x14
c0013f28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f2d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f30:	ff 30                	push   DWORD PTR [eax]
c0013f32:	68 98 3d 02 c0       	push   0xc0023d98
c0013f37:	e8 28 30 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0013f3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013f44:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f46:	83 c4 1c             	add    esp,0x1c
c0013f49:	99                   	cdq    
c0013f4a:	c3                   	ret    

c0013f4b <SysGetRAMData(regs*)>:
c0013f4b:	8b 0d e0 cd 02 c0    	mov    ecx,DWORD PTR ds:0xc002cde0
c0013f51:	a1 e8 ce 02 c0       	mov    eax,ds:0xc002cee8
c0013f56:	03 05 dc cd 02 c0    	add    eax,DWORD PTR ds:0xc002cddc
c0013f5c:	69 c0 c8 00 00 00    	imul   eax,eax,0xc8
c0013f62:	99                   	cdq    
c0013f63:	f7 f9                	idiv   ecx
c0013f65:	c1 e0 18             	shl    eax,0x18
c0013f68:	09 c8                	or     eax,ecx
c0013f6a:	99                   	cdq    
c0013f6b:	c3                   	ret    

c0013f6c <SysGetVGAPtr(regs*)>:
c0013f6c:	55                   	push   ebp
c0013f6d:	57                   	push   edi
c0013f6e:	56                   	push   esi
c0013f6f:	53                   	push   ebx
c0013f70:	83 ec 0c             	sub    esp,0xc
c0013f73:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013f77:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0013f7a:	83 f8 ff             	cmp    eax,0xffffffff
c0013f7d:	74 1b                	je     c0013f9a <SysGetVGAPtr(regs*)+0x2e>
c0013f7f:	83 ec 0c             	sub    esp,0xc
c0013f82:	50                   	push   eax
c0013f83:	e8 5c 25 00 00       	call   c00164e4 <Thr::processFromPID(int)>
c0013f88:	83 c4 10             	add    esp,0x10
c0013f8b:	89 c1                	mov    ecx,eax
c0013f8d:	31 d2                	xor    edx,edx
c0013f8f:	b8 01 00 00 00       	mov    eax,0x1
c0013f94:	85 c9                	test   ecx,ecx
c0013f96:	75 0a                	jne    c0013fa2 <SysGetVGAPtr(regs*)+0x36>
c0013f98:	eb 61                	jmp    c0013ffb <SysGetVGAPtr(regs*)+0x8f>
c0013f9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f9f:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c0013fa2:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013fa8:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013fac:	74 0c                	je     c0013fba <SysGetVGAPtr(regs*)+0x4e>
c0013fae:	83 ec 0c             	sub    esp,0xc
c0013fb1:	55                   	push   ebp
c0013fb2:	e8 1c db ff ff       	call   c0011ad3 <setActiveTerminal(VgaText*)>
c0013fb7:	83 c4 10             	add    esp,0x10
c0013fba:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013fbd:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013fc0:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013fc5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013fc7:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013fca:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fcd:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013fd3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fd6:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013fd9:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013fdf:	50                   	push   eax
c0013fe0:	50                   	push   eax
c0013fe1:	68 a7 3d 02 c0       	push   0xc0023da7
c0013fe6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013fe9:	05 a8 0f 00 00       	add    eax,0xfa8
c0013fee:	50                   	push   eax
c0013fef:	e8 4c c6 fe ff       	call   c0000640 <strcpy>
c0013ff4:	83 c4 10             	add    esp,0x10
c0013ff7:	31 c0                	xor    eax,eax
c0013ff9:	31 d2                	xor    edx,edx
c0013ffb:	83 c4 0c             	add    esp,0xc
c0013ffe:	5b                   	pop    ebx
c0013fff:	5e                   	pop    esi
c0014000:	5f                   	pop    edi
c0014001:	5d                   	pop    ebp
c0014002:	c3                   	ret    
c0014003:	90                   	nop

c0014004 <SysKill(regs*)>:
c0014004:	53                   	push   ebx
c0014005:	83 ec 08             	sub    esp,0x8
c0014008:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001400c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0014010:	75 16                	jne    c0014028 <SysKill(regs*)+0x24>
c0014012:	83 ec 0c             	sub    esp,0xc
c0014015:	68 b1 3d 02 c0       	push   0xc0023db1
c001401a:	e8 2b b6 ff ff       	call   c000f64a <KePanic(char const*)>
c001401f:	83 c4 10             	add    esp,0x10
c0014022:	e9 89 00 00 00       	jmp    c00140b0 <SysKill(regs*)+0xac>
c0014027:	90                   	nop
c0014028:	83 ec 0c             	sub    esp,0xc
c001402b:	68 ec d6 02 c0       	push   0xc002d6ec
c0014030:	e8 33 cf 00 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014035:	8d 76 00             	lea    esi,[esi+0x0]
c0014038:	83 c4 10             	add    esp,0x10
c001403b:	85 c0                	test   eax,eax
c001403d:	74 19                	je     c0014058 <SysKill(regs*)+0x54>
c001403f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014042:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014045:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014047:	74 33                	je     c001407c <SysKill(regs*)+0x78>
c0014049:	52                   	push   edx
c001404a:	52                   	push   edx
c001404b:	50                   	push   eax
c001404c:	68 ec d6 02 c0       	push   0xc002d6ec
c0014051:	e8 1e d4 00 00       	call   c0021474 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0014056:	eb e0                	jmp    c0014038 <SysKill(regs*)+0x34>
c0014058:	83 ec 0c             	sub    esp,0xc
c001405b:	68 e0 d6 02 c0       	push   0xc002d6e0
c0014060:	e8 03 cf 00 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0014065:	8d 76 00             	lea    esi,[esi+0x0]
c0014068:	83 c4 10             	add    esp,0x10
c001406b:	85 c0                	test   eax,eax
c001406d:	74 41                	je     c00140b0 <SysKill(regs*)+0xac>
c001406f:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0014072:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0014075:	39 0a                	cmp    DWORD PTR [edx],ecx
c0014077:	75 27                	jne    c00140a0 <SysKill(regs*)+0x9c>
c0014079:	8d 76 00             	lea    esi,[esi+0x0]
c001407c:	51                   	push   ecx
c001407d:	51                   	push   ecx
c001407e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014081:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014086:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014089:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c001408f:	e8 ff c6 ff ff       	call   c0010793 <KeRaiseSignal(SigHandlerBlock*, int)>
c0014094:	83 c4 10             	add    esp,0x10
c0014097:	31 c0                	xor    eax,eax
c0014099:	31 d2                	xor    edx,edx
c001409b:	eb 1b                	jmp    c00140b8 <SysKill(regs*)+0xb4>
c001409d:	8d 76 00             	lea    esi,[esi+0x0]
c00140a0:	52                   	push   edx
c00140a1:	52                   	push   edx
c00140a2:	50                   	push   eax
c00140a3:	68 e0 d6 02 c0       	push   0xc002d6e0
c00140a8:	e8 c7 d3 00 00       	call   c0021474 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00140ad:	eb b9                	jmp    c0014068 <SysKill(regs*)+0x64>
c00140af:	90                   	nop
c00140b0:	83 c8 ff             	or     eax,0xffffffff
c00140b3:	89 c2                	mov    edx,eax
c00140b5:	8d 76 00             	lea    esi,[esi+0x0]
c00140b8:	83 c4 08             	add    esp,0x8
c00140bb:	5b                   	pop    ebx
c00140bc:	c3                   	ret    

c00140bd <SysLoadDLL(regs*)>:
c00140bd:	56                   	push   esi
c00140be:	53                   	push   ebx
c00140bf:	31 d2                	xor    edx,edx
c00140c1:	51                   	push   ecx
c00140c2:	b8 01 00 00 00       	mov    eax,0x1
c00140c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00140cb:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00140cf:	0f 84 8c 00 00 00    	je     c0014161 <SysLoadDLL(regs*)+0xa4>
c00140d5:	83 ec 0c             	sub    esp,0xc
c00140d8:	68 14 01 00 00       	push   0x114
c00140dd:	e8 21 b2 ff ff       	call   c000f303 <malloc>
c00140e2:	83 c4 0c             	add    esp,0xc
c00140e5:	89 c3                	mov    ebx,eax
c00140e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140ec:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00140ef:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00140f2:	53                   	push   ebx
c00140f3:	e8 3a 40 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00140f8:	83 c4 10             	add    esp,0x10
c00140fb:	31 d2                	xor    edx,edx
c00140fd:	b8 02 00 00 00       	mov    eax,0x2
c0014102:	85 db                	test   ebx,ebx
c0014104:	74 5b                	je     c0014161 <SysLoadDLL(regs*)+0xa4>
c0014106:	83 ec 0c             	sub    esp,0xc
c0014109:	53                   	push   ebx
c001410a:	e8 05 43 ff ff       	call   c0008414 <File::exists()>
c001410f:	83 c4 10             	add    esp,0x10
c0014112:	84 c0                	test   al,al
c0014114:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014116:	75 11                	jne    c0014129 <SysLoadDLL(regs*)+0x6c>
c0014118:	83 ec 0c             	sub    esp,0xc
c001411b:	53                   	push   ebx
c001411c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001411f:	83 c4 10             	add    esp,0x10
c0014122:	b8 03 00 00 00       	mov    eax,0x3
c0014127:	eb 36                	jmp    c001415f <SysLoadDLL(regs*)+0xa2>
c0014129:	83 ec 0c             	sub    esp,0xc
c001412c:	53                   	push   ebx
c001412d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014130:	58                   	pop    eax
c0014131:	5a                   	pop    edx
c0014132:	6a 00                	push   0x0
c0014134:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014137:	e8 29 16 00 00       	call   c0015765 <Thr::loadDLL(char const*, bool)>
c001413c:	83 c4 10             	add    esp,0x10
c001413f:	89 c1                	mov    ecx,eax
c0014141:	31 d2                	xor    edx,edx
c0014143:	b8 04 00 00 00       	mov    eax,0x4
c0014148:	85 c9                	test   ecx,ecx
c001414a:	74 15                	je     c0014161 <SysLoadDLL(regs*)+0xa4>
c001414c:	53                   	push   ebx
c001414d:	53                   	push   ebx
c001414e:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c0014154:	51                   	push   ecx
c0014155:	e8 5d 18 00 00       	call   c00159b7 <Thr::executeDLL(unsigned long, void*)>
c001415a:	83 c4 10             	add    esp,0x10
c001415d:	31 c0                	xor    eax,eax
c001415f:	31 d2                	xor    edx,edx
c0014161:	59                   	pop    ecx
c0014162:	5b                   	pop    ebx
c0014163:	5e                   	pop    esi
c0014164:	c3                   	ret    

c0014165 <SysRead(regs*)>:
c0014165:	57                   	push   edi
c0014166:	56                   	push   esi
c0014167:	53                   	push   ebx
c0014168:	83 ec 10             	sub    esp,0x10
c001416b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001416f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014172:	83 f8 02             	cmp    eax,0x2
c0014175:	77 10                	ja     c0014187 <SysRead(regs*)+0x22>
c0014177:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001417c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001417f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0014185:	eb 0e                	jmp    c0014195 <SysRead(regs*)+0x30>
c0014187:	83 ec 0c             	sub    esp,0xc
c001418a:	50                   	push   eax
c001418b:	e8 5d e7 ff ff       	call   c00128ed <KeGetFileFromDescriptor(int)>
c0014190:	83 c4 10             	add    esp,0x10
c0014193:	89 c1                	mov    ecx,eax
c0014195:	83 c8 ff             	or     eax,0xffffffff
c0014198:	85 c9                	test   ecx,ecx
c001419a:	89 c2                	mov    edx,eax
c001419c:	74 28                	je     c00141c6 <SysRead(regs*)+0x61>
c001419e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00141a6:	31 ff                	xor    edi,edi
c00141a8:	83 ec 0c             	sub    esp,0xc
c00141ab:	8b 01                	mov    eax,DWORD PTR [ecx]
c00141ad:	8d 54 24 18          	lea    edx,[esp+0x18]
c00141b1:	52                   	push   edx
c00141b2:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00141b5:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00141b8:	57                   	push   edi
c00141b9:	56                   	push   esi
c00141ba:	51                   	push   ecx
c00141bb:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00141be:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00141c2:	83 c4 20             	add    esp,0x20
c00141c5:	99                   	cdq    
c00141c6:	83 c4 10             	add    esp,0x10
c00141c9:	5b                   	pop    ebx
c00141ca:	5e                   	pop    esi
c00141cb:	5f                   	pop    edi
c00141cc:	c3                   	ret    

c00141cd <SysRegisterSignal(regs*)>:
c00141cd:	83 ec 18             	sub    esp,0x18
c00141d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141d4:	6a 00                	push   0x0
c00141d6:	6a 00                	push   0x0
c00141d8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00141db:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00141de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00141e3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00141e6:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00141ec:	e8 6c c5 ff ff       	call   c001075d <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c00141f1:	83 c4 2c             	add    esp,0x2c
c00141f4:	99                   	cdq    
c00141f5:	c3                   	ret    

c00141f6 <SysRegistryGetTypeFromPath(regs*)>:
c00141f6:	53                   	push   ebx
c00141f7:	81 ec 40 01 00 00    	sub    esp,0x140
c00141fd:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0014204:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014207:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001420a:	e8 d1 93 ff ff       	call   c000d5e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001420f:	83 c4 10             	add    esp,0x10
c0014212:	89 c1                	mov    ecx,eax
c0014214:	85 c0                	test   eax,eax
c0014216:	74 15                	je     c001422d <SysRegistryGetTypeFromPath(regs*)+0x37>
c0014218:	50                   	push   eax
c0014219:	8d 44 24 08          	lea    eax,[esp+0x8]
c001421d:	50                   	push   eax
c001421e:	51                   	push   ecx
c001421f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014222:	e8 9d 8f ff ff       	call   c000d1c4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0014227:	83 c4 10             	add    esp,0x10
c001422a:	99                   	cdq    
c001422b:	eb 05                	jmp    c0014232 <SysRegistryGetTypeFromPath(regs*)+0x3c>
c001422d:	83 c8 ff             	or     eax,0xffffffff
c0014230:	89 c2                	mov    edx,eax
c0014232:	81 c4 38 01 00 00    	add    esp,0x138
c0014238:	5b                   	pop    ebx
c0014239:	c3                   	ret    

c001423a <SysRegistryReadExtent(regs*)>:
c001423a:	83 ec 1c             	sub    esp,0x1c
c001423d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014241:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0014244:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0014247:	85 c0                	test   eax,eax
c0014249:	79 1f                	jns    c001426a <SysRegistryReadExtent(regs*)+0x30>
c001424b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0014250:	52                   	push   edx
c0014251:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014255:	52                   	push   edx
c0014256:	50                   	push   eax
c0014257:	51                   	push   ecx
c0014258:	e8 59 8e ff ff       	call   c000d0b6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c001425d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014261:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014265:	83 c4 10             	add    esp,0x10
c0014268:	eb 14                	jmp    c001427e <SysRegistryReadExtent(regs*)+0x44>
c001426a:	83 ec 04             	sub    esp,0x4
c001426d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0014270:	50                   	push   eax
c0014271:	51                   	push   ecx
c0014272:	e8 d9 88 ff ff       	call   c000cb50 <CmGetString(Reghive_Tag*, int, char*)>
c0014277:	83 c4 10             	add    esp,0x10
c001427a:	31 c0                	xor    eax,eax
c001427c:	31 d2                	xor    edx,edx
c001427e:	83 c4 1c             	add    esp,0x1c
c0014281:	c3                   	ret    

c0014282 <SysRegistryPathToExtentLookup(regs*)>:
c0014282:	83 ec 14             	sub    esp,0x14
c0014285:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014289:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001428c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001428f:	e8 4c 93 ff ff       	call   c000d5e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014294:	83 c4 1c             	add    esp,0x1c
c0014297:	99                   	cdq    
c0014298:	c3                   	ret    

c0014299 <SysRegistryEnterDirectory(regs*)>:
c0014299:	83 ec 14             	sub    esp,0x14
c001429c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142a0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00142a3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00142a6:	e8 1c 89 ff ff       	call   c000cbc7 <CmEnterDirectory(Reghive_Tag*, int)>
c00142ab:	83 c4 1c             	add    esp,0x1c
c00142ae:	99                   	cdq    
c00142af:	c3                   	ret    

c00142b0 <SysRegistryGetNext(regs*)>:
c00142b0:	83 ec 14             	sub    esp,0x14
c00142b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00142b7:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00142ba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00142bd:	e8 44 89 ff ff       	call   c000cc06 <CmGetNext(Reghive_Tag*, int)>
c00142c2:	83 c4 1c             	add    esp,0x1c
c00142c5:	99                   	cdq    
c00142c6:	c3                   	ret    

c00142c7 <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c00142c7:	57                   	push   edi
c00142c8:	56                   	push   esi
c00142c9:	53                   	push   ebx
c00142ca:	81 ec 34 01 00 00    	sub    esp,0x134
c00142d0:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00142d7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c00142db:	57                   	push   edi
c00142dc:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00142df:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00142e2:	e8 dd 8e ff ff       	call   c000d1c4 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00142e7:	89 c3                	mov    ebx,eax
c00142e9:	58                   	pop    eax
c00142ea:	5a                   	pop    edx
c00142eb:	57                   	push   edi
c00142ec:	ff 76 24             	push   DWORD PTR [esi+0x24]
c00142ef:	e8 4c c3 fe ff       	call   c0000640 <strcpy>
c00142f4:	89 d8                	mov    eax,ebx
c00142f6:	81 c4 40 01 00 00    	add    esp,0x140
c00142fc:	99                   	cdq    
c00142fd:	5b                   	pop    ebx
c00142fe:	5e                   	pop    esi
c00142ff:	5f                   	pop    edi
c0014300:	c3                   	ret    

c0014301 <SysRegistryOpen(regs*)>:
c0014301:	83 ec 18             	sub    esp,0x18
c0014304:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0014308:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001430b:	e8 d0 86 ff ff       	call   c000c9e0 <CmOpen(char const*)>
c0014310:	83 c4 1c             	add    esp,0x1c
c0014313:	99                   	cdq    
c0014314:	c3                   	ret    

c0014315 <SysRegistryClose(regs*)>:
c0014315:	83 ec 18             	sub    esp,0x18
c0014318:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001431c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001431f:	e8 da 87 ff ff       	call   c000cafe <CmClose(Reghive_Tag*)>
c0014324:	31 c0                	xor    eax,eax
c0014326:	31 d2                	xor    edx,edx
c0014328:	83 c4 1c             	add    esp,0x1c
c001432b:	c3                   	ret    

c001432c <SysRegistryEasyReadString(regs*)>:
c001432c:	57                   	push   edi
c001432d:	56                   	push   esi
c001432e:	53                   	push   ebx
c001432f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014333:	83 ec 0c             	sub    esp,0xc
c0014336:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014339:	e8 a2 86 ff ff       	call   c000c9e0 <CmOpen(char const*)>
c001433e:	5a                   	pop    edx
c001433f:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0014342:	59                   	pop    ecx
c0014343:	89 c3                	mov    ebx,eax
c0014345:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014348:	50                   	push   eax
c0014349:	e8 92 92 ff ff       	call   c000d5e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c001434e:	83 c4 10             	add    esp,0x10
c0014351:	89 c1                	mov    ecx,eax
c0014353:	b8 01 00 00 00       	mov    eax,0x1
c0014358:	85 c9                	test   ecx,ecx
c001435a:	7e 16                	jle    c0014372 <SysRegistryEasyReadString(regs*)+0x46>
c001435c:	50                   	push   eax
c001435d:	57                   	push   edi
c001435e:	51                   	push   ecx
c001435f:	53                   	push   ebx
c0014360:	e8 eb 87 ff ff       	call   c000cb50 <CmGetString(Reghive_Tag*, int, char*)>
c0014365:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014368:	e8 91 87 ff ff       	call   c000cafe <CmClose(Reghive_Tag*)>
c001436d:	83 c4 10             	add    esp,0x10
c0014370:	31 c0                	xor    eax,eax
c0014372:	5b                   	pop    ebx
c0014373:	31 d2                	xor    edx,edx
c0014375:	5e                   	pop    esi
c0014376:	5f                   	pop    edi
c0014377:	c3                   	ret    

c0014378 <SysRegistryEasyReadInteger(regs*)>:
c0014378:	56                   	push   esi
c0014379:	53                   	push   ebx
c001437a:	83 ec 10             	sub    esp,0x10
c001437d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014381:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0014384:	e8 57 86 ff ff       	call   c000c9e0 <CmOpen(char const*)>
c0014389:	5a                   	pop    edx
c001438a:	89 c3                	mov    ebx,eax
c001438c:	59                   	pop    ecx
c001438d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0014390:	50                   	push   eax
c0014391:	e8 4a 92 ff ff       	call   c000d5e0 <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0014396:	83 c4 10             	add    esp,0x10
c0014399:	89 c1                	mov    ecx,eax
c001439b:	b8 01 00 00 00       	mov    eax,0x1
c00143a0:	85 c9                	test   ecx,ecx
c00143a2:	7e 18                	jle    c00143bc <SysRegistryEasyReadInteger(regs*)+0x44>
c00143a4:	50                   	push   eax
c00143a5:	ff 76 28             	push   DWORD PTR [esi+0x28]
c00143a8:	51                   	push   ecx
c00143a9:	53                   	push   ebx
c00143aa:	e8 07 8d ff ff       	call   c000d0b6 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c00143af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00143b2:	e8 47 87 ff ff       	call   c000cafe <CmClose(Reghive_Tag*)>
c00143b7:	83 c4 10             	add    esp,0x10
c00143ba:	31 c0                	xor    eax,eax
c00143bc:	59                   	pop    ecx
c00143bd:	31 d2                	xor    edx,edx
c00143bf:	5b                   	pop    ebx
c00143c0:	5e                   	pop    esi
c00143c1:	c3                   	ret    

c00143c2 <SysSbrk(regs*)>:
c00143c2:	56                   	push   esi
c00143c3:	53                   	push   ebx
c00143c4:	50                   	push   eax
c00143c5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143ca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00143ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143d1:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00143d4:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00143da:	85 db                	test   ebx,ebx
c00143dc:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00143df:	74 02                	je     c00143e3 <SysSbrk(regs*)+0x21>
c00143e1:	79 06                	jns    c00143e9 <SysSbrk(regs*)+0x27>
c00143e3:	89 f0                	mov    eax,esi
c00143e5:	31 d2                	xor    edx,edx
c00143e7:	eb 2a                	jmp    c0014413 <SysSbrk(regs*)+0x51>
c00143e9:	83 c8 ff             	or     eax,0xffffffff
c00143ec:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00143f2:	89 c2                	mov    edx,eax
c00143f4:	77 1d                	ja     c0014413 <SysSbrk(regs*)+0x51>
c00143f6:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00143fc:	50                   	push   eax
c00143fd:	c1 ea 0c             	shr    edx,0xc
c0014400:	68 07 0c 00 00       	push   0xc07
c0014405:	52                   	push   edx
c0014406:	51                   	push   ecx
c0014407:	e8 34 ee ff ff       	call   c0013240 <VAS::allocatePages(int, int)>
c001440c:	89 f0                	mov    eax,esi
c001440e:	31 d2                	xor    edx,edx
c0014410:	83 c4 10             	add    esp,0x10
c0014413:	59                   	pop    ecx
c0014414:	5b                   	pop    ebx
c0014415:	5e                   	pop    esi
c0014416:	c3                   	ret    

c0014417 <SysSetCwd(regs*)>:
c0014417:	83 ec 14             	sub    esp,0x14
c001441a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001441e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0014421:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014426:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0014429:	e8 85 40 ff ff       	call   c00084b3 <Fs::setcwd(Process*, char*)>
c001442e:	83 c4 1c             	add    esp,0x1c
c0014431:	99                   	cdq    
c0014432:	c3                   	ret    

c0014433 <SysSetTime(regs*)>:
c0014433:	55                   	push   ebp
c0014434:	31 d2                	xor    edx,edx
c0014436:	57                   	push   edi
c0014437:	56                   	push   esi
c0014438:	be 18 00 00 00       	mov    esi,0x18
c001443d:	53                   	push   ebx
c001443e:	bb 3c 00 00 00       	mov    ebx,0x3c
c0014443:	83 ec 20             	sub    esp,0x20
c0014446:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001444a:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001444d:	f7 f3                	div    ebx
c001444f:	89 d7                	mov    edi,edx
c0014451:	31 d2                	xor    edx,edx
c0014453:	f7 f3                	div    ebx
c0014455:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0014458:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001445c:	bb 10 0e 00 00       	mov    ebx,0xe10
c0014461:	31 d2                	xor    edx,edx
c0014463:	f7 f3                	div    ebx
c0014465:	31 d2                	xor    edx,edx
c0014467:	f7 f6                	div    esi
c0014469:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001446c:	89 d5                	mov    ebp,edx
c001446e:	89 c3                	mov    ebx,eax
c0014470:	be 0c 00 00 00       	mov    esi,0xc
c0014475:	83 e3 1f             	and    ebx,0x1f
c0014478:	c1 e8 05             	shr    eax,0x5
c001447b:	43                   	inc    ebx
c001447c:	31 d2                	xor    edx,edx
c001447e:	f7 f6                	div    esi
c0014480:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014484:	57                   	push   edi
c0014485:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014489:	55                   	push   ebp
c001448a:	0f b7 71 24          	movzx  esi,WORD PTR [ecx+0x24]
c001448e:	56                   	push   esi
c001448f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014493:	53                   	push   ebx
c0014494:	68 d2 3d 02 c0       	push   0xc0023dd2
c0014499:	e8 c6 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001449e:	83 c4 1c             	add    esp,0x1c
c00144a1:	57                   	push   edi
c00144a2:	c1 e7 10             	shl    edi,0x10
c00144a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00144a9:	55                   	push   ebp
c00144aa:	56                   	push   esi
c00144ab:	c1 e6 10             	shl    esi,0x10
c00144ae:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00144b2:	53                   	push   ebx
c00144b3:	68 f4 3d 02 c0       	push   0xc0023df4
c00144b8:	e8 a7 2a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00144bd:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00144c2:	31 d2                	xor    edx,edx
c00144c4:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00144ca:	31 c0                	xor    eax,eax
c00144cc:	88 d8                	mov    al,bl
c00144ce:	8a 64 24 2c          	mov    ah,BYTE PTR [esp+0x2c]
c00144d2:	0f b7 d8             	movzx  ebx,ax
c00144d5:	09 f3                	or     ebx,esi
c00144d7:	89 d8                	mov    eax,ebx
c00144d9:	89 eb                	mov    ebx,ebp
c00144db:	88 5c 24 2c          	mov    BYTE PTR [esp+0x2c],bl
c00144df:	88 da                	mov    dl,bl
c00144e1:	8a 74 24 28          	mov    dh,BYTE PTR [esp+0x28]
c00144e5:	83 c4 1c             	add    esp,0x1c
c00144e8:	89 d6                	mov    esi,edx
c00144ea:	81 e6 ff ff 00 ff    	and    esi,0xff00ffff
c00144f0:	09 fe                	or     esi,edi
c00144f2:	56                   	push   esi
c00144f3:	50                   	push   eax
c00144f4:	51                   	push   ecx
c00144f5:	e8 7c 48 ff ff       	call   c0008d76 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00144fa:	83 c4 2c             	add    esp,0x2c
c00144fd:	83 f0 01             	xor    eax,0x1
c0014500:	5b                   	pop    ebx
c0014501:	0f b6 c0             	movzx  eax,al
c0014504:	5e                   	pop    esi
c0014505:	31 d2                	xor    edx,edx
c0014507:	5f                   	pop    edi
c0014508:	5d                   	pop    ebp
c0014509:	c3                   	ret    

c001450a <SysSymlink(regs*)>:
c001450a:	56                   	push   esi
c001450b:	83 c8 ff             	or     eax,0xffffffff
c001450e:	53                   	push   ebx
c001450f:	89 c2                	mov    edx,eax
c0014511:	81 ec 34 02 00 00    	sub    esp,0x234
c0014517:	8b 9c 24 40 02 00 00 	mov    ebx,DWORD PTR [esp+0x240]
c001451e:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0014522:	74 50                	je     c0014574 <SysSymlink(regs*)+0x6a>
c0014524:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0014527:	85 c9                	test   ecx,ecx
c0014529:	74 49                	je     c0014574 <SysSymlink(regs*)+0x6a>
c001452b:	6a 01                	push   0x1
c001452d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014532:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014535:	05 0c 01 00 00       	add    eax,0x10c
c001453a:	50                   	push   eax
c001453b:	51                   	push   ecx
c001453c:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0014540:	56                   	push   esi
c0014541:	e8 d4 38 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014546:	6a 01                	push   0x1
c0014548:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001454d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014550:	05 0c 01 00 00       	add    eax,0x10c
c0014555:	50                   	push   eax
c0014556:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014559:	8d 9c 24 34 01 00 00 	lea    ebx,[esp+0x134]
c0014560:	53                   	push   ebx
c0014561:	e8 b4 38 ff ff       	call   c0007e1a <Fs::standardiseFiles(char*, char const*, char const*, bool)>
c0014566:	83 c4 18             	add    esp,0x18
c0014569:	56                   	push   esi
c001456a:	53                   	push   ebx
c001456b:	e8 d8 34 ff ff       	call   c0007a48 <KeCreateSymlink(char const*, char const*)>
c0014570:	83 c4 10             	add    esp,0x10
c0014573:	99                   	cdq    
c0014574:	81 c4 34 02 00 00    	add    esp,0x234
c001457a:	5b                   	pop    ebx
c001457b:	5e                   	pop    esi
c001457c:	c3                   	ret    

c001457d <SysTimezone(regs*)>:
c001457d:	83 ec 0c             	sub    esp,0xc
c0014580:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014584:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0014588:	75 17                	jne    c00145a1 <SysTimezone(regs*)+0x24>
c001458a:	83 ec 0c             	sub    esp,0xc
c001458d:	68 16 3e 02 c0       	push   0xc0023e16
c0014592:	e8 cd 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014597:	83 c8 ff             	or     eax,0xffffffff
c001459a:	83 c4 10             	add    esp,0x10
c001459d:	89 c2                	mov    edx,eax
c001459f:	eb 17                	jmp    c00145b8 <SysTimezone(regs*)+0x3b>
c00145a1:	83 ec 0c             	sub    esp,0xc
c00145a4:	68 2b 3e 02 c0       	push   0xc0023e2b
c00145a9:	e8 b6 29 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00145ae:	83 c4 10             	add    esp,0x10
c00145b1:	b8 01 00 00 00       	mov    eax,0x1
c00145b6:	31 d2                	xor    edx,edx
c00145b8:	83 c4 0c             	add    esp,0xc
c00145bb:	c3                   	ret    

c00145bc <SysTruncate(regs*)>:
c00145bc:	55                   	push   ebp
c00145bd:	57                   	push   edi
c00145be:	31 ff                	xor    edi,edi
c00145c0:	56                   	push   esi
c00145c1:	53                   	push   ebx
c00145c2:	83 ec 0c             	sub    esp,0xc
c00145c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00145c9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00145cc:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c00145cf:	89 ce                	mov    esi,ecx
c00145d1:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c00145d5:	0f 84 9a 00 00 00    	je     c0014675 <SysTruncate(regs*)+0xb9>
c00145db:	83 ec 0c             	sub    esp,0xc
c00145de:	68 14 01 00 00       	push   0x114
c00145e3:	e8 1b ad ff ff       	call   c000f303 <malloc>
c00145e8:	83 c4 0c             	add    esp,0xc
c00145eb:	89 c3                	mov    ebx,eax
c00145ed:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00145f2:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00145f5:	55                   	push   ebp
c00145f6:	53                   	push   ebx
c00145f7:	e8 36 3b ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00145fc:	83 c4 10             	add    esp,0x10
c00145ff:	31 d2                	xor    edx,edx
c0014601:	b8 03 00 00 00       	mov    eax,0x3
c0014606:	85 db                	test   ebx,ebx
c0014608:	0f 84 a2 00 00 00    	je     c00146b0 <SysTruncate(regs*)+0xf4>
c001460e:	51                   	push   ecx
c001460f:	51                   	push   ecx
c0014610:	6a 02                	push   0x2
c0014612:	53                   	push   ebx
c0014613:	e8 38 3b ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0014618:	83 c4 10             	add    esp,0x10
c001461b:	85 c0                	test   eax,eax
c001461d:	74 13                	je     c0014632 <SysTruncate(regs*)+0x76>
c001461f:	83 ec 0c             	sub    esp,0xc
c0014622:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014624:	53                   	push   ebx
c0014625:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014628:	83 c4 10             	add    esp,0x10
c001462b:	b8 04 00 00 00       	mov    eax,0x4
c0014630:	eb 7c                	jmp    c00146ae <SysTruncate(regs*)+0xf2>
c0014632:	52                   	push   edx
c0014633:	57                   	push   edi
c0014634:	56                   	push   esi
c0014635:	53                   	push   ebx
c0014636:	e8 29 3c ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c001463b:	83 c4 10             	add    esp,0x10
c001463e:	85 c0                	test   eax,eax
c0014640:	74 1b                	je     c001465d <SysTruncate(regs*)+0xa1>
c0014642:	83 ec 0c             	sub    esp,0xc
c0014645:	53                   	push   ebx
c0014646:	e8 63 3b ff ff       	call   c00081ae <File::close()>
c001464b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001464d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014650:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014653:	83 c4 10             	add    esp,0x10
c0014656:	b8 05 00 00 00       	mov    eax,0x5
c001465b:	eb 51                	jmp    c00146ae <SysTruncate(regs*)+0xf2>
c001465d:	83 ec 0c             	sub    esp,0xc
c0014660:	53                   	push   ebx
c0014661:	e8 48 3b ff ff       	call   c00081ae <File::close()>
c0014666:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014668:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001466b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001466e:	83 c4 10             	add    esp,0x10
c0014671:	31 c0                	xor    eax,eax
c0014673:	eb 39                	jmp    c00146ae <SysTruncate(regs*)+0xf2>
c0014675:	31 d2                	xor    edx,edx
c0014677:	b8 01 00 00 00       	mov    eax,0x1
c001467c:	83 fd 02             	cmp    ebp,0x2
c001467f:	7e 2f                	jle    c00146b0 <SysTruncate(regs*)+0xf4>
c0014681:	83 ec 0c             	sub    esp,0xc
c0014684:	51                   	push   ecx
c0014685:	e8 63 e2 ff ff       	call   c00128ed <KeGetFileFromDescriptor(int)>
c001468a:	83 c4 10             	add    esp,0x10
c001468d:	89 c1                	mov    ecx,eax
c001468f:	31 d2                	xor    edx,edx
c0014691:	b8 02 00 00 00       	mov    eax,0x2
c0014696:	85 c9                	test   ecx,ecx
c0014698:	74 16                	je     c00146b0 <SysTruncate(regs*)+0xf4>
c001469a:	50                   	push   eax
c001469b:	57                   	push   edi
c001469c:	56                   	push   esi
c001469d:	51                   	push   ecx
c001469e:	e8 c1 3b ff ff       	call   c0008264 <File::truncate(unsigned long long)>
c00146a3:	83 c4 10             	add    esp,0x10
c00146a6:	85 c0                	test   eax,eax
c00146a8:	0f 95 c0             	setne  al
c00146ab:	0f b6 c0             	movzx  eax,al
c00146ae:	31 d2                	xor    edx,edx
c00146b0:	83 c4 0c             	add    esp,0xc
c00146b3:	5b                   	pop    ebx
c00146b4:	5e                   	pop    esi
c00146b5:	5f                   	pop    edi
c00146b6:	5d                   	pop    ebp
c00146b7:	c3                   	ret    

c00146b8 <SysWrite(regs*)>:
c00146b8:	57                   	push   edi
c00146b9:	56                   	push   esi
c00146ba:	53                   	push   ebx
c00146bb:	83 ec 10             	sub    esp,0x10
c00146be:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00146c2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00146c5:	83 f8 02             	cmp    eax,0x2
c00146c8:	77 10                	ja     c00146da <SysWrite(regs*)+0x22>
c00146ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00146d2:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c00146d8:	eb 0e                	jmp    c00146e8 <SysWrite(regs*)+0x30>
c00146da:	83 ec 0c             	sub    esp,0xc
c00146dd:	50                   	push   eax
c00146de:	e8 0a e2 ff ff       	call   c00128ed <KeGetFileFromDescriptor(int)>
c00146e3:	83 c4 10             	add    esp,0x10
c00146e6:	89 c1                	mov    ecx,eax
c00146e8:	83 c8 ff             	or     eax,0xffffffff
c00146eb:	85 c9                	test   ecx,ecx
c00146ed:	89 c2                	mov    edx,eax
c00146ef:	74 28                	je     c0014719 <SysWrite(regs*)+0x61>
c00146f1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00146f9:	31 ff                	xor    edi,edi
c00146fb:	83 ec 0c             	sub    esp,0xc
c00146fe:	8b 01                	mov    eax,DWORD PTR [ecx]
c0014700:	8d 54 24 18          	lea    edx,[esp+0x18]
c0014704:	52                   	push   edx
c0014705:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014708:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001470b:	57                   	push   edi
c001470c:	56                   	push   esi
c001470d:	51                   	push   ecx
c001470e:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014711:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014715:	83 c4 20             	add    esp,0x20
c0014718:	99                   	cdq    
c0014719:	83 c4 10             	add    esp,0x10
c001471c:	5b                   	pop    ebx
c001471d:	5e                   	pop    esi
c001471e:	5f                   	pop    edi
c001471f:	c3                   	ret    

c0014720 <SysWsbe(regs*)>:
c0014720:	55                   	push   ebp
c0014721:	57                   	push   edi
c0014722:	56                   	push   esi
c0014723:	53                   	push   ebx
c0014724:	83 ec 3c             	sub    esp,0x3c
c0014727:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001472b:	81 7b 20 96 78 34 a5 	cmp    DWORD PTR [ebx+0x20],0xa5347896
c0014732:	75 2d                	jne    c0014761 <SysWsbe(regs*)+0x41>
c0014734:	81 7b 28 f7 7f 77 4f 	cmp    DWORD PTR [ebx+0x28],0x4f777ff7
c001473b:	75 24                	jne    c0014761 <SysWsbe(regs*)+0x41>
c001473d:	81 7b 24 55 55 23 11 	cmp    DWORD PTR [ebx+0x24],0x11235555
c0014744:	75 1b                	jne    c0014761 <SysWsbe(regs*)+0x41>
c0014746:	6a 01                	push   0x1
c0014748:	6a 00                	push   0x0
c001474a:	68 b9 95 00 c0       	push   0xc00095b9
c001474f:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0014755:	e8 d2 18 00 00       	call   c001602c <Process::createThread(void (*)(void*), void*, int)>
c001475a:	83 c4 10             	add    esp,0x10
c001475d:	31 c0                	xor    eax,eax
c001475f:	eb 52                	jmp    c00147b3 <SysWsbe(regs*)+0x93>
c0014761:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0014765:	be 6a 3e 02 c0       	mov    esi,0xc0023e6a
c001476a:	b9 0b 00 00 00       	mov    ecx,0xb
c001476f:	fc                   	cld    
c0014770:	83 ec 0c             	sub    esp,0xc
c0014773:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014775:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0014779:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001477e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014781:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014787:	8b 06                	mov    eax,DWORD PTR [esi]
c0014789:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c001478c:	57                   	push   edi
c001478d:	e8 de bd fe ff       	call   c0000570 <strlen>
c0014792:	5a                   	pop    edx
c0014793:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014797:	52                   	push   edx
c0014798:	31 d2                	xor    edx,edx
c001479a:	57                   	push   edi
c001479b:	52                   	push   edx
c001479c:	50                   	push   eax
c001479d:	56                   	push   esi
c001479e:	ff d5                	call   ebp
c00147a0:	83 c4 14             	add    esp,0x14
c00147a3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00147a6:	e8 89 22 00 00       	call   c0016a34 <terminateTask(int)>
c00147ab:	83 c4 10             	add    esp,0x10
c00147ae:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00147b3:	83 c4 3c             	add    esp,0x3c
c00147b6:	31 d2                	xor    edx,edx
c00147b8:	5b                   	pop    ebx
c00147b9:	5e                   	pop    esi
c00147ba:	5f                   	pop    edi
c00147bb:	5d                   	pop    ebp
c00147bc:	c3                   	ret    

c00147bd <SysYield(regs*)>:
c00147bd:	83 ec 0c             	sub    esp,0xc
c00147c0:	fa                   	cli    
c00147c1:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c00147c7:	e8 b8 1a 00 00       	call   c0016284 <schedule()>
c00147cc:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c00147d3:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c00147da:	75 01                	jne    c00147dd <SysYield(regs*)+0x20>
c00147dc:	fb                   	sti    
c00147dd:	31 c0                	xor    eax,eax
c00147df:	31 d2                	xor    edx,edx
c00147e1:	83 c4 0c             	add    esp,0xc
c00147e4:	c3                   	ret    

c00147e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00147e5:	55                   	push   ebp
c00147e6:	57                   	push   edi
c00147e7:	56                   	push   esi
c00147e8:	53                   	push   ebx
c00147e9:	81 ec 2c 10 00 00    	sub    esp,0x102c
c00147ef:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c00147f7:	0f 95 c0             	setne  al
c00147fa:	31 d2                	xor    edx,edx
c00147fc:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0014804:	0f 94 c2             	sete   dl
c0014807:	85 c2                	test   edx,eax
c0014809:	74 34                	je     c001483f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c001480b:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0014816:	74 27                	je     c001483f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014818:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c001481f:	05 00 10 00 00       	add    eax,0x1000
c0014824:	89 c1                	mov    ecx,eax
c0014826:	25 00 f0 ff ff       	and    eax,0xfffff000
c001482b:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0014831:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0014838:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c001483f:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0014846:	83 ec 0c             	sub    esp,0xc
c0014849:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c001484f:	6a 01                	push   0x1
c0014851:	e8 03 e2 ff ff       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c0014856:	83 c4 10             	add    esp,0x10
c0014859:	89 c3                	mov    ebx,eax
c001485b:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0014861:	0f 86 26 01 00 00    	jbe    c001498d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a8>
c0014867:	c1 ee 0c             	shr    esi,0xc
c001486a:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014871:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0014875:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001487d:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0014884:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014888:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c001488f:	29 ef                	sub    edi,ebp
c0014891:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0014895:	0f 83 f9 00 00 00    	jae    c0014994 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1af>
c001489b:	81 ff 00 10 00 00    	cmp    edi,0x1000
c00148a1:	76 05                	jbe    c00148a8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c00148a3:	bf 00 10 00 00       	mov    edi,0x1000
c00148a8:	83 ec 0c             	sub    esp,0xc
c00148ab:	31 d2                	xor    edx,edx
c00148ad:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c00148b4:	8b 08                	mov    ecx,DWORD PTR [eax]
c00148b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c00148ba:	50                   	push   eax
c00148bb:	8d 74 24 30          	lea    esi,[esp+0x30]
c00148bf:	56                   	push   esi
c00148c0:	52                   	push   edx
c00148c1:	57                   	push   edi
c00148c2:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c00148c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148cc:	83 c4 20             	add    esp,0x20
c00148cf:	85 c0                	test   eax,eax
c00148d1:	75 06                	jne    c00148d9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c00148d3:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00148d7:	74 13                	je     c00148ec <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c00148d9:	83 ec 0c             	sub    esp,0xc
c00148dc:	53                   	push   ebx
c00148dd:	e8 7f e4 ff ff       	call   c0012d61 <Virt::freeKernelVirtualPages(unsigned long)>
c00148e2:	83 c4 10             	add    esp,0x10
c00148e5:	31 c0                	xor    eax,eax
c00148e7:	e9 80 01 00 00       	jmp    c0014a6c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c00148ec:	fa                   	cli    
c00148ed:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c00148f3:	e8 46 af ff ff       	call   c000f83e <Phys::allocatePage()>
c00148f8:	6a 07                	push   0x7
c00148fa:	89 c7                	mov    edi,eax
c00148fc:	53                   	push   ebx
c00148fd:	50                   	push   eax
c00148fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014903:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014906:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001490c:	e8 2b e8 ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c0014911:	83 c4 0c             	add    esp,0xc
c0014914:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001491b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014921:	6a 00                	push   0x0
c0014923:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014928:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001492b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014931:	e8 72 e6 ff ff       	call   c0012fa8 <VAS::mapOtherVASIn(bool, VAS*)>
c0014936:	58                   	pop    eax
c0014937:	5a                   	pop    edx
c0014938:	68 07 0c 00 00       	push   0xc07
c001493d:	55                   	push   ebp
c001493e:	57                   	push   edi
c001493f:	89 df                	mov    edi,ebx
c0014941:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014948:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001494e:	6a 00                	push   0x0
c0014950:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014955:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014958:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001495e:	e8 1b ea ff ff       	call   c001337e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014963:	b9 00 10 00 00       	mov    ecx,0x1000
c0014968:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001496a:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0014971:	83 c4 20             	add    esp,0x20
c0014974:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c001497b:	75 01                	jne    c001497e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x199>
c001497d:	fb                   	sti    
c001497e:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014984:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014988:	e9 f0 fe ff ff       	jmp    c001487d <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c001498d:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0014994:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001499b:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00149a1:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00149a7:	0f 86 b1 00 00 00    	jbe    c0014a5e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c00149ad:	fa                   	cli    
c00149ae:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c00149b4:	c1 ee 0c             	shr    esi,0xc
c00149b7:	51                   	push   ecx
c00149b8:	31 ff                	xor    edi,edi
c00149ba:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c00149c1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149c7:	6a 00                	push   0x0
c00149c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00149ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00149d1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00149d7:	e8 cc e5 ff ff       	call   c0012fa8 <VAS::mapOtherVASIn(bool, VAS*)>
c00149dc:	83 c4 10             	add    esp,0x10
c00149df:	e8 5a ae ff ff       	call   c000f83e <Phys::allocatePage()>
c00149e4:	47                   	inc    edi
c00149e5:	6a 07                	push   0x7
c00149e7:	53                   	push   ebx
c00149e8:	50                   	push   eax
c00149e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00149ed:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00149f3:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00149f6:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c00149fc:	e8 3b e7 ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c0014a01:	58                   	pop    eax
c0014a02:	5a                   	pop    edx
c0014a03:	68 07 0c 00 00       	push   0xc07
c0014a08:	55                   	push   ebp
c0014a09:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014a0f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014a13:	50                   	push   eax
c0014a14:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014a1b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a21:	6a 00                	push   0x0
c0014a23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014a28:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014a2b:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014a31:	e8 48 e9 ff ff       	call   c001337e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0014a36:	83 c4 1c             	add    esp,0x1c
c0014a39:	68 00 10 00 00       	push   0x1000
c0014a3e:	6a 00                	push   0x0
c0014a40:	53                   	push   ebx
c0014a41:	e8 aa ba fe ff       	call   c00004f0 <memset>
c0014a46:	83 c4 10             	add    esp,0x10
c0014a49:	39 fe                	cmp    esi,edi
c0014a4b:	77 92                	ja     c00149df <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1fa>
c0014a4d:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0014a54:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0014a5b:	75 01                	jne    c0014a5e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c0014a5d:	fb                   	sti    
c0014a5e:	83 ec 0c             	sub    esp,0xc
c0014a61:	53                   	push   ebx
c0014a62:	e8 fa e2 ff ff       	call   c0012d61 <Virt::freeKernelVirtualPages(unsigned long)>
c0014a67:	83 c4 10             	add    esp,0x10
c0014a6a:	b0 01                	mov    al,0x1
c0014a6c:	81 c4 2c 10 00 00    	add    esp,0x102c
c0014a72:	5b                   	pop    ebx
c0014a73:	5e                   	pop    esi
c0014a74:	5f                   	pop    edi
c0014a75:	5d                   	pop    ebp
c0014a76:	c3                   	ret    

c0014a77 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0014a77:	55                   	push   ebp
c0014a78:	57                   	push   edi
c0014a79:	56                   	push   esi
c0014a7a:	53                   	push   ebx
c0014a7b:	83 ec 48             	sub    esp,0x48
c0014a7e:	68 14 01 00 00       	push   0x114
c0014a83:	e8 7b a8 ff ff       	call   c000f303 <malloc>
c0014a88:	83 c4 0c             	add    esp,0xc
c0014a8b:	89 c6                	mov    esi,eax
c0014a8d:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014a91:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0014a95:	50                   	push   eax
c0014a96:	e8 97 36 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014a9b:	58                   	pop    eax
c0014a9c:	5a                   	pop    edx
c0014a9d:	6a 01                	push   0x1
c0014a9f:	56                   	push   esi
c0014aa0:	e8 ab 36 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0014aa5:	83 c4 10             	add    esp,0x10
c0014aa8:	85 c0                	test   eax,eax
c0014aaa:	0f 85 43 01 00 00    	jne    c0014bf3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014ab0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0014ab8:	83 ec 0c             	sub    esp,0xc
c0014abb:	6a 34                	push   0x34
c0014abd:	e8 41 a8 ff ff       	call   c000f303 <malloc>
c0014ac2:	89 c3                	mov    ebx,eax
c0014ac4:	58                   	pop    eax
c0014ac5:	8b 06                	mov    eax,DWORD PTR [esi]
c0014ac7:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014acb:	57                   	push   edi
c0014acc:	53                   	push   ebx
c0014acd:	6a 00                	push   0x0
c0014acf:	6a 34                	push   0x34
c0014ad1:	56                   	push   esi
c0014ad2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014ad5:	83 c4 20             	add    esp,0x20
c0014ad8:	85 c0                	test   eax,eax
c0014ada:	0f 85 13 01 00 00    	jne    c0014bf3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014ae0:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0014ae6:	0f 85 07 01 00 00    	jne    c0014bf3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014aec:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014aef:	85 c0                	test   eax,eax
c0014af1:	0f 84 fc 00 00 00    	je     c0014bf3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014af7:	31 d2                	xor    edx,edx
c0014af9:	55                   	push   ebp
c0014afa:	52                   	push   edx
c0014afb:	50                   	push   eax
c0014afc:	56                   	push   esi
c0014afd:	e8 0c 37 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014b02:	83 c4 10             	add    esp,0x10
c0014b05:	85 c0                	test   eax,eax
c0014b07:	0f 85 e6 00 00 00    	jne    c0014bf3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b0d:	83 ec 0c             	sub    esp,0xc
c0014b10:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014b13:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014b17:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014b1b:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b1f:	0f af c2             	imul   eax,edx
c0014b22:	50                   	push   eax
c0014b23:	e8 db a7 ff ff       	call   c000f303 <malloc>
c0014b28:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b2a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014b2e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b31:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014b35:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0014b39:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014b3d:	0f af c2             	imul   eax,edx
c0014b40:	99                   	cdq    
c0014b41:	52                   	push   edx
c0014b42:	50                   	push   eax
c0014b43:	56                   	push   esi
c0014b44:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014b47:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0014b4a:	83 c4 20             	add    esp,0x20
c0014b4d:	85 c0                	test   eax,eax
c0014b4f:	0f 84 9e 00 00 00    	je     c0014bf3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b55:	31 d2                	xor    edx,edx
c0014b57:	51                   	push   ecx
c0014b58:	52                   	push   edx
c0014b59:	50                   	push   eax
c0014b5a:	56                   	push   esi
c0014b5b:	e8 ae 36 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014b60:	83 c4 10             	add    esp,0x10
c0014b63:	85 c0                	test   eax,eax
c0014b65:	0f 85 88 00 00 00    	jne    c0014bf3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014b6b:	83 ec 0c             	sub    esp,0xc
c0014b6e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b72:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b76:	31 ed                	xor    ebp,ebp
c0014b78:	0f af c2             	imul   eax,edx
c0014b7b:	50                   	push   eax
c0014b7c:	e8 82 a7 ff ff       	call   c000f303 <malloc>
c0014b81:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0014b83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014b87:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014b8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014b8e:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014b92:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0014b96:	0f af c2             	imul   eax,edx
c0014b99:	99                   	cdq    
c0014b9a:	52                   	push   edx
c0014b9b:	50                   	push   eax
c0014b9c:	56                   	push   esi
c0014b9d:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ba0:	83 c4 20             	add    esp,0x20
c0014ba3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014bab:	0f b7 fd             	movzx  edi,bp
c0014bae:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014bb2:	73 7d                	jae    c0014c31 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014bb4:	c1 e7 05             	shl    edi,0x5
c0014bb7:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014bbb:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014bbe:	75 6b                	jne    c0014c2b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014bc0:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014bc3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014bc7:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0014bca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014bce:	52                   	push   edx
c0014bcf:	31 d2                	xor    edx,edx
c0014bd1:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014bd4:	52                   	push   edx
c0014bd5:	50                   	push   eax
c0014bd6:	56                   	push   esi
c0014bd7:	e8 32 36 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014bdc:	83 c4 10             	add    esp,0x10
c0014bdf:	85 c0                	test   eax,eax
c0014be1:	74 17                	je     c0014bfa <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014be3:	83 ec 0c             	sub    esp,0xc
c0014be6:	68 96 3e 02 c0       	push   0xc0023e96
c0014beb:	e8 74 23 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014bf0:	83 c4 10             	add    esp,0x10
c0014bf3:	31 c0                	xor    eax,eax
c0014bf5:	e9 87 00 00 00       	jmp    c0014c81 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c0014bfa:	83 ec 0c             	sub    esp,0xc
c0014bfd:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014c00:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014c03:	50                   	push   eax
c0014c04:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014c08:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014c0c:	56                   	push   esi
c0014c0d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014c11:	e8 cf fb ff ff       	call   c00147e5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0014c16:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0014c1a:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014c1e:	83 c4 20             	add    esp,0x20
c0014c21:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0014c25:	73 04                	jae    c0014c2b <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014c27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014c2b:	45                   	inc    ebp
c0014c2c:	e9 7a ff ff ff       	jmp    c0014bab <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0014c31:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0014c35:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0014c39:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014c3d:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0014c43:	83 ec 0c             	sub    esp,0xc
c0014c46:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0014c4c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0014c51:	05 00 10 00 00       	add    eax,0x1000
c0014c56:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0014c59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014c5d:	e8 b1 a6 ff ff       	call   c000f313 <free>
c0014c62:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014c65:	e8 a9 a6 ff ff       	call   c000f313 <free>
c0014c6a:	58                   	pop    eax
c0014c6b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014c6f:	e8 9f a6 ff ff       	call   c000f313 <free>
c0014c74:	89 34 24             	mov    DWORD PTR [esp],esi
c0014c77:	e8 32 35 ff ff       	call   c00081ae <File::close()>
c0014c7c:	83 c4 10             	add    esp,0x10
c0014c7f:	b0 01                	mov    al,0x1
c0014c81:	83 c4 3c             	add    esp,0x3c
c0014c84:	5b                   	pop    ebx
c0014c85:	5e                   	pop    esi
c0014c86:	5f                   	pop    edi
c0014c87:	5d                   	pop    ebp
c0014c88:	c3                   	ret    

c0014c89 <Thr::runtimeReferenceHelper()>:
c0014c89:	83 ec 18             	sub    esp,0x18
c0014c8c:	68 9e 3e 02 c0       	push   0xc0023e9e
c0014c91:	e8 ce 22 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0014c96:	fa                   	cli    
c0014c97:	83 c4 10             	add    esp,0x10
c0014c9a:	eb fe                	jmp    c0014c9a <Thr::runtimeReferenceHelper()+0x11>

c0014c9c <Thr::getAddressOfKernelSymbol(char const*)>:
c0014c9c:	57                   	push   edi
c0014c9d:	56                   	push   esi
c0014c9e:	53                   	push   ebx
c0014c9f:	31 db                	xor    ebx,ebx
c0014ca1:	39 1d a0 d6 02 c0    	cmp    DWORD PTR ds:0xc002d6a0,ebx
c0014ca7:	7e 3c                	jle    c0014ce5 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0014ca9:	8b 34 9d 20 d6 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd29e0]
c0014cb0:	31 ff                	xor    edi,edi
c0014cb2:	39 3c 9d 20 d5 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd2ae0],edi
c0014cb9:	7e 27                	jle    c0014ce2 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014cbb:	50                   	push   eax
c0014cbc:	50                   	push   eax
c0014cbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014cc1:	8b 06                	mov    eax,DWORD PTR [esi]
c0014cc3:	03 04 9d a0 d5 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd2a60]
c0014cca:	50                   	push   eax
c0014ccb:	e8 80 ba fe ff       	call   c0000750 <strcmp>
c0014cd0:	83 c4 10             	add    esp,0x10
c0014cd3:	85 c0                	test   eax,eax
c0014cd5:	75 05                	jne    c0014cdc <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0014cd7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0014cda:	eb 0b                	jmp    c0014ce7 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014cdc:	83 c6 10             	add    esi,0x10
c0014cdf:	47                   	inc    edi
c0014ce0:	eb d0                	jmp    c0014cb2 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014ce2:	43                   	inc    ebx
c0014ce3:	eb bc                	jmp    c0014ca1 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0014ce5:	31 c0                	xor    eax,eax
c0014ce7:	5b                   	pop    ebx
c0014ce8:	5e                   	pop    esi
c0014ce9:	5f                   	pop    edi
c0014cea:	c3                   	ret    

c0014ceb <Thr::loadKernelSymbolTable(char const*)>:
c0014ceb:	55                   	push   ebp
c0014cec:	57                   	push   edi
c0014ced:	56                   	push   esi
c0014cee:	53                   	push   ebx
c0014cef:	83 ec 68             	sub    esp,0x68
c0014cf2:	8b 35 f8 d6 02 c0    	mov    esi,DWORD PTR ds:0xc002d6f8
c0014cf8:	68 14 01 00 00       	push   0x114
c0014cfd:	e8 01 a6 ff ff       	call   c000f303 <malloc>
c0014d02:	83 c4 0c             	add    esp,0xc
c0014d05:	89 c3                	mov    ebx,eax
c0014d07:	56                   	push   esi
c0014d08:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014d0c:	50                   	push   eax
c0014d0d:	e8 20 34 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014d12:	5e                   	pop    esi
c0014d13:	5f                   	pop    edi
c0014d14:	6a 01                	push   0x1
c0014d16:	53                   	push   ebx
c0014d17:	e8 34 34 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0014d1c:	83 c4 10             	add    esp,0x10
c0014d1f:	85 c0                	test   eax,eax
c0014d21:	74 0a                	je     c0014d2d <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014d23:	83 ec 0c             	sub    esp,0xc
c0014d26:	68 c0 3e 02 c0       	push   0xc0023ec0
c0014d2b:	eb 34                	jmp    c0014d61 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0014d2d:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0014d35:	83 ec 0c             	sub    esp,0xc
c0014d38:	6a 34                	push   0x34
c0014d3a:	e8 c4 a5 ff ff       	call   c000f303 <malloc>
c0014d3f:	59                   	pop    ecx
c0014d40:	89 c7                	mov    edi,eax
c0014d42:	8d 74 24 34          	lea    esi,[esp+0x34]
c0014d46:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014d48:	56                   	push   esi
c0014d49:	57                   	push   edi
c0014d4a:	6a 00                	push   0x0
c0014d4c:	6a 34                	push   0x34
c0014d4e:	53                   	push   ebx
c0014d4f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014d52:	83 c4 20             	add    esp,0x20
c0014d55:	85 c0                	test   eax,eax
c0014d57:	74 17                	je     c0014d70 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0014d59:	83 ec 0c             	sub    esp,0xc
c0014d5c:	68 d7 3e 02 c0       	push   0xc0023ed7
c0014d61:	e8 e4 a8 ff ff       	call   c000f64a <KePanic(char const*)>
c0014d66:	83 c4 10             	add    esp,0x10
c0014d69:	31 c0                	xor    eax,eax
c0014d6b:	e9 31 02 00 00       	jmp    c0014fa1 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0014d70:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0014d76:	75 e1                	jne    c0014d59 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d78:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0014d7b:	85 c0                	test   eax,eax
c0014d7d:	74 da                	je     c0014d59 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d7f:	52                   	push   edx
c0014d80:	31 d2                	xor    edx,edx
c0014d82:	52                   	push   edx
c0014d83:	50                   	push   eax
c0014d84:	53                   	push   ebx
c0014d85:	e8 84 34 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014d8a:	83 c4 10             	add    esp,0x10
c0014d8d:	85 c0                	test   eax,eax
c0014d8f:	75 c8                	jne    c0014d59 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014d91:	83 ec 0c             	sub    esp,0xc
c0014d94:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014d98:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014d9c:	31 ed                	xor    ebp,ebp
c0014d9e:	0f af c2             	imul   eax,edx
c0014da1:	50                   	push   eax
c0014da2:	e8 5c a5 ff ff       	call   c000f303 <malloc>
c0014da7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014da9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014dad:	89 34 24             	mov    DWORD PTR [esp],esi
c0014db0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014db4:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0014db8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014dbc:	0f af c2             	imul   eax,edx
c0014dbf:	99                   	cdq    
c0014dc0:	52                   	push   edx
c0014dc1:	50                   	push   eax
c0014dc2:	53                   	push   ebx
c0014dc3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014dc6:	83 c4 20             	add    esp,0x20
c0014dc9:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014dd1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0014dd9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014de1:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014de9:	0f b7 f5             	movzx  esi,bp
c0014dec:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014df0:	0f 83 a7 00 00 00    	jae    c0014e9d <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c0014df6:	6b f6 28             	imul   esi,esi,0x28
c0014df9:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014dfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014e00:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014e04:	50                   	push   eax
c0014e05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014e09:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014e0d:	8b 16                	mov    edx,DWORD PTR [esi]
c0014e0f:	6b c0 28             	imul   eax,eax,0x28
c0014e12:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c0014e16:	89 d0                	mov    eax,edx
c0014e18:	31 d2                	xor    edx,edx
c0014e1a:	52                   	push   edx
c0014e1b:	50                   	push   eax
c0014e1c:	53                   	push   ebx
c0014e1d:	e8 ec 33 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014e22:	83 c4 0c             	add    esp,0xc
c0014e25:	6a 20                	push   0x20
c0014e27:	6a 00                	push   0x0
c0014e29:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e2d:	52                   	push   edx
c0014e2e:	e8 bd b6 fe ff       	call   c00004f0 <memset>
c0014e33:	58                   	pop    eax
c0014e34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014e36:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0014e3a:	51                   	push   ecx
c0014e3b:	8d 54 24 40          	lea    edx,[esp+0x40]
c0014e3f:	52                   	push   edx
c0014e40:	6a 00                	push   0x0
c0014e42:	6a 1f                	push   0x1f
c0014e44:	53                   	push   ebx
c0014e45:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014e48:	83 c4 18             	add    esp,0x18
c0014e4b:	68 ee 3e 02 c0       	push   0xc0023eee
c0014e50:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0014e54:	52                   	push   edx
c0014e55:	e8 f6 b8 fe ff       	call   c0000750 <strcmp>
c0014e5a:	83 c4 10             	add    esp,0x10
c0014e5d:	85 c0                	test   eax,eax
c0014e5f:	75 0f                	jne    c0014e70 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0014e61:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e64:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014e68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014e70:	50                   	push   eax
c0014e71:	50                   	push   eax
c0014e72:	68 f6 3e 02 c0       	push   0xc0023ef6
c0014e77:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0014e7b:	50                   	push   eax
c0014e7c:	e8 cf b8 fe ff       	call   c0000750 <strcmp>
c0014e81:	83 c4 10             	add    esp,0x10
c0014e84:	85 c0                	test   eax,eax
c0014e86:	75 0f                	jne    c0014e97 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0014e88:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014e8b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014e8f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014e93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014e97:	45                   	inc    ebp
c0014e98:	e9 4c ff ff ff       	jmp    c0014de9 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014e9d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014ea2:	75 10                	jne    c0014eb4 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014ea4:	83 ec 0c             	sub    esp,0xc
c0014ea7:	68 fe 3e 02 c0       	push   0xc0023efe
c0014eac:	e8 99 a7 ff ff       	call   c000f64a <KePanic(char const*)>
c0014eb1:	83 c4 10             	add    esp,0x10
c0014eb4:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0014eb9:	75 10                	jne    c0014ecb <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014ebb:	83 ec 0c             	sub    esp,0xc
c0014ebe:	68 fe 3e 02 c0       	push   0xc0023efe
c0014ec3:	e8 82 a7 ff ff       	call   c000f64a <KePanic(char const*)>
c0014ec8:	83 c4 10             	add    esp,0x10
c0014ecb:	31 d2                	xor    edx,edx
c0014ecd:	50                   	push   eax
c0014ece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ed2:	52                   	push   edx
c0014ed3:	50                   	push   eax
c0014ed4:	53                   	push   ebx
c0014ed5:	e8 34 33 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014eda:	5a                   	pop    edx
c0014edb:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014edf:	e8 1f a4 ff ff       	call   c000f303 <malloc>
c0014ee4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014ee8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014eec:	31 c9                	xor    ecx,ecx
c0014eee:	5e                   	pop    esi
c0014eef:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014ef1:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c0014ef5:	55                   	push   ebp
c0014ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014efa:	51                   	push   ecx
c0014efb:	52                   	push   edx
c0014efc:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014f00:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014f04:	53                   	push   ebx
c0014f05:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f08:	83 c4 14             	add    esp,0x14
c0014f0b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014f0f:	e8 ef a3 ff ff       	call   c000f303 <malloc>
c0014f14:	89 c6                	mov    esi,eax
c0014f16:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014f18:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f1b:	56                   	push   esi
c0014f1c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014f20:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014f24:	51                   	push   ecx
c0014f25:	52                   	push   edx
c0014f26:	53                   	push   ebx
c0014f27:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014f2a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014f2e:	8b 15 a0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6a0
c0014f34:	83 c4 1c             	add    esp,0x1c
c0014f37:	c1 e8 04             	shr    eax,0x4
c0014f3a:	89 04 95 20 d5 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2ae0],eax
c0014f41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014f45:	31 d2                	xor    edx,edx
c0014f47:	52                   	push   edx
c0014f48:	50                   	push   eax
c0014f49:	53                   	push   ebx
c0014f4a:	e8 bf 32 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0014f4f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0014f51:	31 d2                	xor    edx,edx
c0014f53:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014f56:	56                   	push   esi
c0014f57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014f5b:	52                   	push   edx
c0014f5c:	50                   	push   eax
c0014f5d:	53                   	push   ebx
c0014f5e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014f61:	83 c4 14             	add    esp,0x14
c0014f64:	53                   	push   ebx
c0014f65:	e8 44 32 ff ff       	call   c00081ae <File::close()>
c0014f6a:	5d                   	pop    ebp
c0014f6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f6f:	e8 9f a3 ff ff       	call   c000f313 <free>
c0014f74:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014f77:	e8 97 a3 ff ff       	call   c000f313 <free>
c0014f7c:	a1 a0 d6 02 c0       	mov    eax,ds:0xc002d6a0
c0014f81:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0014f85:	8d 50 01             	lea    edx,[eax+0x1]
c0014f88:	89 0c 85 20 d6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd29e0],ecx
c0014f8f:	89 34 85 a0 d5 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2a60],esi
c0014f96:	89 15 a0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6a0,edx
c0014f9c:	83 c4 10             	add    esp,0x10
c0014f9f:	b0 01                	mov    al,0x1
c0014fa1:	83 c4 5c             	add    esp,0x5c
c0014fa4:	5b                   	pop    ebx
c0014fa5:	5e                   	pop    esi
c0014fa6:	5f                   	pop    edi
c0014fa7:	5d                   	pop    ebp
c0014fa8:	c3                   	ret    

c0014fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0014fa9:	55                   	push   ebp
c0014faa:	57                   	push   edi
c0014fab:	56                   	push   esi
c0014fac:	53                   	push   ebx
c0014fad:	81 ec 68 03 00 00    	sub    esp,0x368
c0014fb3:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0014fba:	8b 1d f8 d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6f8
c0014fc0:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014fc4:	68 14 01 00 00       	push   0x114
c0014fc9:	e8 35 a3 ff ff       	call   c000f303 <malloc>
c0014fce:	83 c4 0c             	add    esp,0xc
c0014fd1:	89 c5                	mov    ebp,eax
c0014fd3:	53                   	push   ebx
c0014fd4:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014fdb:	50                   	push   eax
c0014fdc:	e8 51 31 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0014fe1:	5e                   	pop    esi
c0014fe2:	5f                   	pop    edi
c0014fe3:	6a 01                	push   0x1
c0014fe5:	55                   	push   ebp
c0014fe6:	e8 65 31 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0014feb:	83 c4 10             	add    esp,0x10
c0014fee:	85 c0                	test   eax,eax
c0014ff0:	0f 85 aa 06 00 00    	jne    c00156a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ff6:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014ffe:	83 ec 0c             	sub    esp,0xc
c0015001:	6a 34                	push   0x34
c0015003:	e8 fb a2 ff ff       	call   c000f303 <malloc>
c0015008:	5b                   	pop    ebx
c0015009:	89 c7                	mov    edi,eax
c001500b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001500f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015012:	53                   	push   ebx
c0015013:	57                   	push   edi
c0015014:	6a 00                	push   0x0
c0015016:	6a 34                	push   0x34
c0015018:	55                   	push   ebp
c0015019:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001501c:	83 c4 20             	add    esp,0x20
c001501f:	85 c0                	test   eax,eax
c0015021:	0f 85 79 06 00 00    	jne    c00156a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015027:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001502d:	0f 85 6d 06 00 00    	jne    c00156a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015033:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0015036:	85 c0                	test   eax,eax
c0015038:	0f 84 62 06 00 00    	je     c00156a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001503e:	31 d2                	xor    edx,edx
c0015040:	51                   	push   ecx
c0015041:	52                   	push   edx
c0015042:	50                   	push   eax
c0015043:	55                   	push   ebp
c0015044:	e8 c5 31 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015049:	83 c4 10             	add    esp,0x10
c001504c:	85 c0                	test   eax,eax
c001504e:	0f 85 4c 06 00 00    	jne    c00156a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0015054:	83 ec 0c             	sub    esp,0xc
c0015057:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001505a:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001505e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015062:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015066:	0f af c2             	imul   eax,edx
c0015069:	50                   	push   eax
c001506a:	e8 94 a2 ff ff       	call   c000f303 <malloc>
c001506f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015072:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015076:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015079:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001507d:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0015081:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0015085:	0f af c2             	imul   eax,edx
c0015088:	99                   	cdq    
c0015089:	52                   	push   edx
c001508a:	50                   	push   eax
c001508b:	55                   	push   ebp
c001508c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001508f:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0015092:	83 c4 20             	add    esp,0x20
c0015095:	85 c0                	test   eax,eax
c0015097:	0f 84 03 06 00 00    	je     c00156a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001509d:	52                   	push   edx
c001509e:	31 d2                	xor    edx,edx
c00150a0:	52                   	push   edx
c00150a1:	50                   	push   eax
c00150a2:	55                   	push   ebp
c00150a3:	e8 66 31 ff ff       	call   c000820e <File::seek(unsigned long long)>
c00150a8:	83 c4 10             	add    esp,0x10
c00150ab:	85 c0                	test   eax,eax
c00150ad:	0f 85 ed 05 00 00    	jne    c00156a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00150b3:	83 ec 0c             	sub    esp,0xc
c00150b6:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00150ba:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00150be:	31 f6                	xor    esi,esi
c00150c0:	0f af c2             	imul   eax,edx
c00150c3:	50                   	push   eax
c00150c4:	e8 3a a2 ff ff       	call   c000f303 <malloc>
c00150c9:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00150cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00150d0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00150d3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00150d7:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00150db:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00150df:	0f af c2             	imul   eax,edx
c00150e2:	99                   	cdq    
c00150e3:	52                   	push   edx
c00150e4:	50                   	push   eax
c00150e5:	55                   	push   ebp
c00150e6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00150e9:	83 c4 20             	add    esp,0x20
c00150ec:	0f b7 de             	movzx  ebx,si
c00150ef:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c00150f3:	0f 83 87 00 00 00    	jae    c0015180 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c00150f9:	c1 e3 05             	shl    ebx,0x5
c00150fc:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0015100:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0015103:	75 75                	jne    c001517a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0015105:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0015108:	31 d2                	xor    edx,edx
c001510a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001510e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0015111:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015115:	50                   	push   eax
c0015116:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0015119:	52                   	push   edx
c001511a:	50                   	push   eax
c001511b:	55                   	push   ebp
c001511c:	e8 ed 30 ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015121:	83 c4 10             	add    esp,0x10
c0015124:	85 c0                	test   eax,eax
c0015126:	0f 85 74 05 00 00    	jne    c00156a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001512c:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0015133:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0015136:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c001513a:	31 d2                	xor    edx,edx
c001513c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0015140:	83 ec 0c             	sub    esp,0xc
c0015143:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0015147:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001514e:	50                   	push   eax
c001514f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015153:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015157:	52                   	push   edx
c0015158:	50                   	push   eax
c0015159:	55                   	push   ebp
c001515a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001515d:	83 c4 1c             	add    esp,0x1c
c0015160:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0015163:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0015166:	50                   	push   eax
c0015167:	6a 00                	push   0x0
c0015169:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001516d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0015171:	50                   	push   eax
c0015172:	e8 79 b3 fe ff       	call   c00004f0 <memset>
c0015177:	83 c4 10             	add    esp,0x10
c001517a:	46                   	inc    esi
c001517b:	e9 6c ff ff ff       	jmp    c00150ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0015180:	53                   	push   ebx
c0015181:	31 db                	xor    ebx,ebx
c0015183:	68 00 01 00 00       	push   0x100
c0015188:	6a 00                	push   0x0
c001518a:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001518e:	50                   	push   eax
c001518f:	e8 5c b3 fe ff       	call   c00004f0 <memset>
c0015194:	83 c4 0c             	add    esp,0xc
c0015197:	68 00 01 00 00       	push   0x100
c001519c:	6a 00                	push   0x0
c001519e:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00151a5:	50                   	push   eax
c00151a6:	e8 45 b3 fe ff       	call   c00004f0 <memset>
c00151ab:	83 c4 10             	add    esp,0x10
c00151ae:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00151b6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00151be:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00151c6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00151ce:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00151d6:	0f b7 f3             	movzx  esi,bx
c00151d9:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c00151dd:	0f 83 2d 01 00 00    	jae    c0015310 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00151e3:	6b f6 28             	imul   esi,esi,0x28
c00151e6:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c00151ea:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00151ed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00151f1:	52                   	push   edx
c00151f2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00151f6:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c00151fa:	8b 06                	mov    eax,DWORD PTR [esi]
c00151fc:	6b d2 28             	imul   edx,edx,0x28
c00151ff:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0015203:	31 d2                	xor    edx,edx
c0015205:	52                   	push   edx
c0015206:	50                   	push   eax
c0015207:	55                   	push   ebp
c0015208:	e8 01 30 ff ff       	call   c000820e <File::seek(unsigned long long)>
c001520d:	83 c4 0c             	add    esp,0xc
c0015210:	6a 20                	push   0x20
c0015212:	6a 00                	push   0x0
c0015214:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001521b:	51                   	push   ecx
c001521c:	e8 cf b2 fe ff       	call   c00004f0 <memset>
c0015221:	59                   	pop    ecx
c0015222:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015225:	8d 54 24 58          	lea    edx,[esp+0x58]
c0015229:	52                   	push   edx
c001522a:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0015231:	51                   	push   ecx
c0015232:	6a 00                	push   0x0
c0015234:	6a 1f                	push   0x1f
c0015236:	55                   	push   ebp
c0015237:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001523a:	83 c4 1c             	add    esp,0x1c
c001523d:	6a 09                	push   0x9
c001523f:	68 18 3f 02 c0       	push   0xc0023f18
c0015244:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001524b:	51                   	push   ecx
c001524c:	e8 2f b1 fe ff       	call   c0000380 <memcmp>
c0015251:	83 c4 10             	add    esp,0x10
c0015254:	85 c0                	test   eax,eax
c0015256:	75 21                	jne    c0015279 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0015258:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001525c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015260:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0015264:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015268:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001526b:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0015272:	89 d0                	mov    eax,edx
c0015274:	40                   	inc    eax
c0015275:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015279:	50                   	push   eax
c001527a:	6a 09                	push   0x9
c001527c:	68 22 3f 02 c0       	push   0xc0023f22
c0015281:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0015288:	50                   	push   eax
c0015289:	e8 f2 b0 fe ff       	call   c0000380 <memcmp>
c001528e:	83 c4 10             	add    esp,0x10
c0015291:	85 c0                	test   eax,eax
c0015293:	75 21                	jne    c00152b6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0015295:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015299:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001529d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00152a1:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c00152a5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152a8:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00152af:	89 d0                	mov    eax,edx
c00152b1:	40                   	inc    eax
c00152b2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00152b6:	50                   	push   eax
c00152b7:	50                   	push   eax
c00152b8:	68 ee 3e 02 c0       	push   0xc0023eee
c00152bd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152c4:	50                   	push   eax
c00152c5:	e8 86 b4 fe ff       	call   c0000750 <strcmp>
c00152ca:	83 c4 10             	add    esp,0x10
c00152cd:	85 c0                	test   eax,eax
c00152cf:	75 0f                	jne    c00152e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00152d1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152d4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00152d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00152dc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00152e0:	50                   	push   eax
c00152e1:	50                   	push   eax
c00152e2:	68 f6 3e 02 c0       	push   0xc0023ef6
c00152e7:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00152ee:	50                   	push   eax
c00152ef:	e8 5c b4 fe ff       	call   c0000750 <strcmp>
c00152f4:	83 c4 10             	add    esp,0x10
c00152f7:	85 c0                	test   eax,eax
c00152f9:	75 0f                	jne    c001530a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c00152fb:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00152fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015302:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0015306:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001530a:	43                   	inc    ebx
c001530b:	e9 c6 fe ff ff       	jmp    c00151d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0015310:	31 d2                	xor    edx,edx
c0015312:	50                   	push   eax
c0015313:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015317:	52                   	push   edx
c0015318:	50                   	push   eax
c0015319:	55                   	push   ebp
c001531a:	e8 ef 2e ff ff       	call   c000820e <File::seek(unsigned long long)>
c001531f:	58                   	pop    eax
c0015320:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0015324:	e8 da 9f ff ff       	call   c000f303 <malloc>
c0015329:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001532c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0015330:	31 d2                	xor    edx,edx
c0015332:	58                   	pop    eax
c0015333:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0015337:	53                   	push   ebx
c0015338:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001533c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015340:	52                   	push   edx
c0015341:	50                   	push   eax
c0015342:	55                   	push   ebp
c0015343:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0015346:	83 c4 14             	add    esp,0x14
c0015349:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001534d:	e8 b1 9f ff ff       	call   c000f303 <malloc>
c0015352:	31 d2                	xor    edx,edx
c0015354:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0015358:	83 c4 0c             	add    esp,0xc
c001535b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001535f:	52                   	push   edx
c0015360:	50                   	push   eax
c0015361:	55                   	push   ebp
c0015362:	e8 a7 2e ff ff       	call   c000820e <File::seek(unsigned long long)>
c0015367:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001536a:	31 d2                	xor    edx,edx
c001536c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001536f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015373:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0015377:	52                   	push   edx
c0015378:	50                   	push   eax
c0015379:	55                   	push   ebp
c001537a:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001537d:	83 c4 20             	add    esp,0x20
c0015380:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0015385:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001538d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015391:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015395:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0015399:	0f 84 05 03 00 00    	je     c00156a4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c001539f:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00153a6:	31 d2                	xor    edx,edx
c00153a8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00153ac:	c1 e8 03             	shr    eax,0x3
c00153af:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00153b3:	51                   	push   ecx
c00153b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00153b8:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00153bc:	52                   	push   edx
c00153bd:	50                   	push   eax
c00153be:	55                   	push   ebp
c00153bf:	e8 4a 2e ff ff       	call   c000820e <File::seek(unsigned long long)>
c00153c4:	5b                   	pop    ebx
c00153c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00153c9:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00153d0:	e8 2e 9f ff ff       	call   c000f303 <malloc>
c00153d5:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00153d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00153dc:	31 d2                	xor    edx,edx
c00153de:	5e                   	pop    esi
c00153df:	8d 44 24 58          	lea    eax,[esp+0x58]
c00153e3:	50                   	push   eax
c00153e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153e8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00153ec:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c00153f3:	52                   	push   edx
c00153f4:	50                   	push   eax
c00153f5:	55                   	push   ebp
c00153f6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00153f9:	83 c4 20             	add    esp,0x20
c00153fc:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015404:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0015408:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c001540c:	0f 8d 76 02 00 00    	jge    c0015688 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0015412:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0015416:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001541a:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c001541f:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0015422:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0015426:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001542a:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c001542e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0015432:	c1 e8 08             	shr    eax,0x8
c0015435:	89 c6                	mov    esi,eax
c0015437:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001543b:	c1 e6 04             	shl    esi,0x4
c001543e:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0015442:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0015445:	85 db                	test   ebx,ebx
c0015447:	0f 85 b3 00 00 00    	jne    c0015500 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001544d:	83 ec 0c             	sub    esp,0xc
c0015450:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015454:	03 06                	add    eax,DWORD PTR [esi]
c0015456:	50                   	push   eax
c0015457:	e8 40 f8 ff ff       	call   c0014c9c <Thr::getAddressOfKernelSymbol(char const*)>
c001545c:	83 c4 10             	add    esp,0x10
c001545f:	89 c3                	mov    ebx,eax
c0015461:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0015466:	85 c0                	test   eax,eax
c0015468:	0f 85 92 00 00 00    	jne    c0015500 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c001546e:	83 ec 0c             	sub    esp,0xc
c0015471:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015475:	03 06                	add    eax,DWORD PTR [esi]
c0015477:	50                   	push   eax
c0015478:	e8 5f ac ff ff       	call   c00100dc <KeResolveCompatibilitySymbol(char*)>
c001547d:	83 c4 10             	add    esp,0x10
c0015480:	89 c3                	mov    ebx,eax
c0015482:	85 c0                	test   eax,eax
c0015484:	75 7a                	jne    c0015500 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0015486:	51                   	push   ecx
c0015487:	51                   	push   ecx
c0015488:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001548c:	03 06                	add    eax,DWORD PTR [esi]
c001548e:	50                   	push   eax
c001548f:	68 2c 3f 02 c0       	push   0xc0023f2c
c0015494:	e8 cb 1a ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015499:	58                   	pop    eax
c001549a:	5a                   	pop    edx
c001549b:	68 46 3f 02 c0       	push   0xc0023f46
c00154a0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154a7:	50                   	push   eax
c00154a8:	e8 93 b1 fe ff       	call   c0000640 <strcpy>
c00154ad:	59                   	pop    ecx
c00154ae:	58                   	pop    eax
c00154af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00154b3:	03 06                	add    eax,DWORD PTR [esi]
c00154b5:	50                   	push   eax
c00154b6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154bd:	50                   	push   eax
c00154be:	e8 7d b3 fe ff       	call   c0000840 <strcat>
c00154c3:	58                   	pop    eax
c00154c4:	5a                   	pop    edx
c00154c5:	68 e0 3f 02 c0       	push   0xc0023fe0
c00154ca:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154d1:	50                   	push   eax
c00154d2:	e8 69 b3 fe ff       	call   c0000840 <strcat>
c00154d7:	83 c4 10             	add    esp,0x10
c00154da:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00154df:	0f 84 5d 01 00 00    	je     c0015642 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00154e5:	83 ec 0c             	sub    esp,0xc
c00154e8:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00154ef:	50                   	push   eax
c00154f0:	e8 55 a1 ff ff       	call   c000f64a <KePanic(char const*)>
c00154f5:	83 c4 10             	add    esp,0x10
c00154f8:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00154fc:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0015500:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0015505:	83 f8 01             	cmp    eax,0x1
c0015508:	0f 85 8f 00 00 00    	jne    c001559d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c001550e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0015515:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0015519:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c001551d:	01 ce                	add    esi,ecx
c001551f:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0015527:	0f 94 c0             	sete   al
c001552a:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0015532:	0f 94 c2             	sete   dl
c0015535:	09 c2                	or     edx,eax
c0015537:	8b 06                	mov    eax,DWORD PTR [esi]
c0015539:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c001553e:	0f b6 d2             	movzx  edx,dl
c0015541:	74 41                	je     c0015584 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0015543:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0015546:	85 d2                	test   edx,edx
c0015548:	75 15                	jne    c001555f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c001554a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001554e:	66 83 f8 0c          	cmp    ax,0xc
c0015552:	76 05                	jbe    c0015559 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0015554:	b8 0c 00 00 00       	mov    eax,0xc
c0015559:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c001555d:	76 37                	jbe    c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001555f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0015563:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0015568:	0f 84 d4 00 00 00    	je     c0015642 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c001556e:	83 ec 0c             	sub    esp,0xc
c0015571:	68 5d 3f 02 c0       	push   0xc0023f5d
c0015576:	e8 cf a0 ff ff       	call   c000f64a <KePanic(char const*)>
c001557b:	83 c4 10             	add    esp,0x10
c001557e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0015582:	eb 12                	jmp    c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015584:	01 c1                	add    ecx,eax
c0015586:	85 d2                	test   edx,edx
c0015588:	75 0c                	jne    c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c001558a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001558e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0015592:	77 02                	ja     c0015596 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0015594:	01 d9                	add    ecx,ebx
c0015596:	89 0e                	mov    DWORD PTR [esi],ecx
c0015598:	e9 e2 00 00 00       	jmp    c001567f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c001559d:	83 f8 02             	cmp    eax,0x2
c00155a0:	75 77                	jne    c0015619 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c00155a2:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00155a9:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c00155ad:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c00155b1:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c00155b9:	74 21                	je     c00155dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00155bb:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c00155c3:	74 17                	je     c00155dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c00155c5:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c00155c9:	b8 0a 00 00 00       	mov    eax,0xa
c00155ce:	83 fa 0e             	cmp    edx,0xe
c00155d1:	77 03                	ja     c00155d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c00155d3:	8d 42 fc             	lea    eax,[edx-0x4]
c00155d6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00155da:	76 17                	jbe    c00155f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c00155dc:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00155e1:	74 5f                	je     c0015642 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c00155e3:	83 ec 0c             	sub    esp,0xc
c00155e6:	68 79 3f 02 c0       	push   0xc0023f79
c00155eb:	e8 5a a0 ff ff       	call   c000f64a <KePanic(char const*)>
c00155f0:	83 c4 10             	add    esp,0x10
c00155f3:	8b 06                	mov    eax,DWORD PTR [esi]
c00155f5:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c00155fa:	74 13                	je     c001560f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c00155fc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015600:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0015607:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c001560b:	01 d0                	add    eax,edx
c001560d:	eb 04                	jmp    c0015613 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001560f:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0015613:	01 c3                	add    ebx,eax
c0015615:	89 1e                	mov    DWORD PTR [esi],ebx
c0015617:	eb 66                	jmp    c001567f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015619:	52                   	push   edx
c001561a:	52                   	push   edx
c001561b:	50                   	push   eax
c001561c:	68 95 3f 02 c0       	push   0xc0023f95
c0015621:	e8 3e 19 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015626:	83 c4 10             	add    esp,0x10
c0015629:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001562e:	74 12                	je     c0015642 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0015630:	83 ec 0c             	sub    esp,0xc
c0015633:	68 a0 3f 02 c0       	push   0xc0023fa0
c0015638:	e8 0d a0 ff ff       	call   c000f64a <KePanic(char const*)>
c001563d:	83 c4 10             	add    esp,0x10
c0015640:	eb 3d                	jmp    c001567f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0015642:	83 ec 0c             	sub    esp,0xc
c0015645:	55                   	push   ebp
c0015646:	e8 63 2b ff ff       	call   c00081ae <File::close()>
c001564b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001564e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015651:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015654:	59                   	pop    ecx
c0015655:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015659:	e8 b5 9c ff ff       	call   c000f313 <free>
c001565e:	5b                   	pop    ebx
c001565f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015663:	e8 ab 9c ff ff       	call   c000f313 <free>
c0015668:	89 3c 24             	mov    DWORD PTR [esp],edi
c001566b:	e8 a3 9c ff ff       	call   c000f313 <free>
c0015670:	5e                   	pop    esi
c0015671:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015675:	e8 99 9c ff ff       	call   c000f313 <free>
c001567a:	83 c4 10             	add    esp,0x10
c001567d:	eb 21                	jmp    c00156a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001567f:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0015683:	e9 7c fd ff ff       	jmp    c0015404 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0015688:	83 ec 0c             	sub    esp,0xc
c001568b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001568f:	e8 7f 9c ff ff       	call   c000f313 <free>
c0015694:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0015698:	83 c4 10             	add    esp,0x10
c001569b:	e9 f1 fc ff ff       	jmp    c0015391 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c00156a0:	31 c0                	xor    eax,eax
c00156a2:	eb 33                	jmp    c00156d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c00156a4:	83 ec 0c             	sub    esp,0xc
c00156a7:	55                   	push   ebp
c00156a8:	e8 01 2b ff ff       	call   c00081ae <File::close()>
c00156ad:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00156b0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00156b3:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00156b6:	58                   	pop    eax
c00156b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00156bb:	e8 53 9c ff ff       	call   c000f313 <free>
c00156c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00156c3:	e8 4b 9c ff ff       	call   c000f313 <free>
c00156c8:	5a                   	pop    edx
c00156c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00156cd:	e8 41 9c ff ff       	call   c000f313 <free>
c00156d2:	83 c4 10             	add    esp,0x10
c00156d5:	b0 01                	mov    al,0x1
c00156d7:	81 c4 5c 03 00 00    	add    esp,0x35c
c00156dd:	5b                   	pop    ebx
c00156de:	5e                   	pop    esi
c00156df:	5f                   	pop    edi
c00156e0:	5d                   	pop    ebp
c00156e1:	c3                   	ret    

c00156e2 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00156e2:	56                   	push   esi
c00156e3:	31 d2                	xor    edx,edx
c00156e5:	53                   	push   ebx
c00156e6:	8b 1d 00 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf00
c00156ec:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00156f0:	39 d3                	cmp    ebx,edx
c00156f2:	7e 1b                	jle    c001570f <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c00156f4:	8b 04 95 20 d1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2ee0]
c00156fb:	39 c8                	cmp    eax,ecx
c00156fd:	77 0d                	ja     c001570c <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c00156ff:	8b 34 95 20 cf 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd30e0]
c0015706:	01 c6                	add    esi,eax
c0015708:	39 ce                	cmp    esi,ecx
c001570a:	77 05                	ja     c0015711 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001570c:	42                   	inc    edx
c001570d:	eb e1                	jmp    c00156f0 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001570f:	31 c0                	xor    eax,eax
c0015711:	5b                   	pop    ebx
c0015712:	5e                   	pop    esi
c0015713:	c3                   	ret    

c0015714 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015714:	53                   	push   ebx
c0015715:	31 c0                	xor    eax,eax
c0015717:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001571b:	8b 1d 00 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf00
c0015721:	39 c3                	cmp    ebx,eax
c0015723:	7e 22                	jle    c0015747 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0015725:	8b 14 85 20 d1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2ee0]
c001572c:	39 ca                	cmp    edx,ecx
c001572e:	77 14                	ja     c0015744 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0015730:	03 14 85 20 cf 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd30e0]
c0015737:	39 ca                	cmp    edx,ecx
c0015739:	76 09                	jbe    c0015744 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001573b:	8b 04 85 20 d3 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2ce0]
c0015742:	eb 05                	jmp    c0015749 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0015744:	40                   	inc    eax
c0015745:	eb da                	jmp    c0015721 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0015747:	31 c0                	xor    eax,eax
c0015749:	5b                   	pop    ebx
c001574a:	c3                   	ret    

c001574b <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001574b:	53                   	push   ebx
c001574c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015750:	53                   	push   ebx
c0015751:	e8 8c ff ff ff       	call   c00156e2 <Thr::getDriverBaseFromAddress(unsigned long)>
c0015756:	5a                   	pop    edx
c0015757:	31 d2                	xor    edx,edx
c0015759:	85 c0                	test   eax,eax
c001575b:	74 04                	je     c0015761 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001575d:	89 da                	mov    edx,ebx
c001575f:	29 c2                	sub    edx,eax
c0015761:	89 d0                	mov    eax,edx
c0015763:	5b                   	pop    ebx
c0015764:	c3                   	ret    

c0015765 <Thr::loadDLL(char const*, bool)>:
c0015765:	55                   	push   ebp
c0015766:	57                   	push   edi
c0015767:	56                   	push   esi
c0015768:	53                   	push   ebx
c0015769:	81 ec 34 01 00 00    	sub    esp,0x134
c001576f:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0015776:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001577d:	56                   	push   esi
c001577e:	68 b8 3f 02 c0       	push   0xc0023fb8
c0015783:	e8 dc 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015788:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001578f:	e8 6f 9b ff ff       	call   c000f303 <malloc>
c0015794:	83 c4 0c             	add    esp,0xc
c0015797:	89 c3                	mov    ebx,eax
c0015799:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c001579f:	56                   	push   esi
c00157a0:	50                   	push   eax
c00157a1:	e8 8c 29 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c00157a6:	83 c4 10             	add    esp,0x10
c00157a9:	85 db                	test   ebx,ebx
c00157ab:	75 3c                	jne    c00157e9 <Thr::loadDLL(char const*, bool)+0x84>
c00157ad:	89 f8                	mov    eax,edi
c00157af:	84 c0                	test   al,al
c00157b1:	0f 84 f3 01 00 00    	je     c00159aa <Thr::loadDLL(char const*, bool)+0x245>
c00157b7:	55                   	push   ebp
c00157b8:	55                   	push   ebp
c00157b9:	68 c9 3f 02 c0       	push   0xc0023fc9
c00157be:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00157c2:	55                   	push   ebp
c00157c3:	e8 78 ae fe ff       	call   c0000640 <strcpy>
c00157c8:	58                   	pop    eax
c00157c9:	5a                   	pop    edx
c00157ca:	56                   	push   esi
c00157cb:	55                   	push   ebp
c00157cc:	e8 6f b0 fe ff       	call   c0000840 <strcat>
c00157d1:	59                   	pop    ecx
c00157d2:	58                   	pop    eax
c00157d3:	68 e0 3f 02 c0       	push   0xc0023fe0
c00157d8:	55                   	push   ebp
c00157d9:	e8 62 b0 fe ff       	call   c0000840 <strcat>
c00157de:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00157e1:	e8 64 9e ff ff       	call   c000f64a <KePanic(char const*)>
c00157e6:	83 c4 10             	add    esp,0x10
c00157e9:	51                   	push   ecx
c00157ea:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c00157ee:	50                   	push   eax
c00157ef:	8d 44 24 20          	lea    eax,[esp+0x20]
c00157f3:	50                   	push   eax
c00157f4:	53                   	push   ebx
c00157f5:	e8 58 2c ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c00157fa:	83 c4 10             	add    esp,0x10
c00157fd:	89 c5                	mov    ebp,eax
c00157ff:	85 db                	test   ebx,ebx
c0015801:	74 0c                	je     c001580f <Thr::loadDLL(char const*, bool)+0xaa>
c0015803:	83 ec 0c             	sub    esp,0xc
c0015806:	8b 03                	mov    eax,DWORD PTR [ebx]
c0015808:	53                   	push   ebx
c0015809:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001580c:	83 c4 10             	add    esp,0x10
c001580f:	83 ec 0c             	sub    esp,0xc
c0015812:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c0015817:	50                   	push   eax
c0015818:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001581c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015820:	55                   	push   ebp
c0015821:	68 e2 3f 02 c0       	push   0xc0023fe2
c0015826:	e8 39 17 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001582b:	83 c4 20             	add    esp,0x20
c001582e:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015833:	75 0a                	jne    c001583f <Thr::loadDLL(char const*, bool)+0xda>
c0015835:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015839:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001583d:	75 3c                	jne    c001587b <Thr::loadDLL(char const*, bool)+0x116>
c001583f:	89 f8                	mov    eax,edi
c0015841:	84 c0                	test   al,al
c0015843:	0f 84 49 01 00 00    	je     c0015992 <Thr::loadDLL(char const*, bool)+0x22d>
c0015849:	51                   	push   ecx
c001584a:	51                   	push   ecx
c001584b:	68 03 40 02 c0       	push   0xc0024003
c0015850:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0015854:	53                   	push   ebx
c0015855:	e8 e6 ad fe ff       	call   c0000640 <strcpy>
c001585a:	5d                   	pop    ebp
c001585b:	58                   	pop    eax
c001585c:	56                   	push   esi
c001585d:	53                   	push   ebx
c001585e:	e8 dd af fe ff       	call   c0000840 <strcat>
c0015863:	58                   	pop    eax
c0015864:	5a                   	pop    edx
c0015865:	68 e0 3f 02 c0       	push   0xc0023fe0
c001586a:	53                   	push   ebx
c001586b:	e8 d0 af fe ff       	call   c0000840 <strcat>
c0015870:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015873:	e8 d2 9d ff ff       	call   c000f64a <KePanic(char const*)>
c0015878:	83 c4 10             	add    esp,0x10
c001587b:	52                   	push   edx
c001587c:	6a 03                	push   0x3
c001587e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015882:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015886:	05 ff 0f 00 00       	add    eax,0xfff
c001588b:	83 d2 00             	adc    edx,0x0
c001588e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0015892:	50                   	push   eax
c0015893:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c0015899:	e8 a2 d9 ff ff       	call   c0013240 <VAS::allocatePages(int, int)>
c001589e:	59                   	pop    ecx
c001589f:	89 c3                	mov    ebx,eax
c00158a1:	5d                   	pop    ebp
c00158a2:	50                   	push   eax
c00158a3:	68 1e 33 02 c0       	push   0xc002331e
c00158a8:	e8 b7 16 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00158ad:	89 34 24             	mov    DWORD PTR [esp],esi
c00158b0:	e8 bb ac fe ff       	call   c0000570 <strlen>
c00158b5:	8b 2d 00 cf 02 c0    	mov    ebp,DWORD PTR ds:0xc002cf00
c00158bb:	40                   	inc    eax
c00158bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00158bf:	e8 3f 9a ff ff       	call   c000f303 <malloc>
c00158c4:	89 04 ad 20 d3 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd2ce0],eax
c00158cb:	58                   	pop    eax
c00158cc:	a1 00 cf 02 c0       	mov    eax,ds:0xc002cf00
c00158d1:	5a                   	pop    edx
c00158d2:	56                   	push   esi
c00158d3:	ff 34 85 20 d3 02 c0 	push   DWORD PTR [eax*4-0x3ffd2ce0]
c00158da:	e8 61 ad fe ff       	call   c0000640 <strcpy>
c00158df:	a1 00 cf 02 c0       	mov    eax,ds:0xc002cf00
c00158e4:	8d 50 01             	lea    edx,[eax+0x1]
c00158e7:	89 1c 85 20 d1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2ee0],ebx
c00158ee:	89 15 00 cf 02 c0    	mov    DWORD PTR ds:0xc002cf00,edx
c00158f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00158f8:	83 c4 0c             	add    esp,0xc
c00158fb:	89 14 85 20 cf 02 c0 	mov    DWORD PTR [eax*4-0x3ffd30e0],edx
c0015902:	6a 01                	push   0x1
c0015904:	53                   	push   ebx
c0015905:	56                   	push   esi
c0015906:	e8 9e f6 ff ff       	call   c0014fa9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001590b:	83 c4 10             	add    esp,0x10
c001590e:	0f b6 c0             	movzx  eax,al
c0015911:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015915:	85 c0                	test   eax,eax
c0015917:	0f 85 89 00 00 00    	jne    c00159a6 <Thr::loadDLL(char const*, bool)+0x241>
c001591d:	89 f8                	mov    eax,edi
c001591f:	84 c0                	test   al,al
c0015921:	74 73                	je     c0015996 <Thr::loadDLL(char const*, bool)+0x231>
c0015923:	83 ec 0c             	sub    esp,0xc
c0015926:	68 1c 40 02 c0       	push   0xc002401c
c001592b:	e8 1a 9d ff ff       	call   c000f64a <KePanic(char const*)>
c0015930:	83 c4 10             	add    esp,0x10
c0015933:	eb 61                	jmp    c0015996 <Thr::loadDLL(char const*, bool)+0x231>
c0015935:	50                   	push   eax
c0015936:	50                   	push   eax
c0015937:	89 e8                	mov    eax,ebp
c0015939:	c1 e0 0c             	shl    eax,0xc
c001593c:	01 d8                	add    eax,ebx
c001593e:	50                   	push   eax
c001593f:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c0015945:	e8 f8 d3 ff ff       	call   c0012d42 <VAS::getPageTableEntry(unsigned long)>
c001594a:	83 c4 10             	add    esp,0x10
c001594d:	8b 00                	mov    eax,DWORD PTR [eax]
c001594f:	a8 60                	test   al,0x60
c0015951:	75 11                	jne    c0015964 <Thr::loadDLL(char const*, bool)+0x1ff>
c0015953:	83 ec 0c             	sub    esp,0xc
c0015956:	25 00 f0 ff ff       	and    eax,0xfffff000
c001595b:	50                   	push   eax
c001595c:	e8 74 9e ff ff       	call   c000f7d5 <Phys::freePage(unsigned long)>
c0015961:	83 c4 10             	add    esp,0x10
c0015964:	45                   	inc    ebp
c0015965:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015969:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001596d:	05 ff 0f 00 00       	add    eax,0xfff
c0015972:	bf 00 00 00 00       	mov    edi,0x0
c0015977:	83 d2 00             	adc    edx,0x0
c001597a:	0f ac d0 0c          	shrd   eax,edx,0xc
c001597e:	c1 ea 0c             	shr    edx,0xc
c0015981:	39 c5                	cmp    ebp,eax
c0015983:	89 d1                	mov    ecx,edx
c0015985:	89 f8                	mov    eax,edi
c0015987:	19 c8                	sbb    eax,ecx
c0015989:	72 aa                	jb     c0015935 <Thr::loadDLL(char const*, bool)+0x1d0>
c001598b:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0015990:	75 18                	jne    c00159aa <Thr::loadDLL(char const*, bool)+0x245>
c0015992:	31 db                	xor    ebx,ebx
c0015994:	eb 14                	jmp    c00159aa <Thr::loadDLL(char const*, bool)+0x245>
c0015996:	83 ec 0c             	sub    esp,0xc
c0015999:	68 3b 40 02 c0       	push   0xc002403b
c001599e:	e8 a7 9c ff ff       	call   c000f64a <KePanic(char const*)>
c00159a3:	83 c4 10             	add    esp,0x10
c00159a6:	31 ed                	xor    ebp,ebp
c00159a8:	eb bb                	jmp    c0015965 <Thr::loadDLL(char const*, bool)+0x200>
c00159aa:	81 c4 2c 01 00 00    	add    esp,0x12c
c00159b0:	89 d8                	mov    eax,ebx
c00159b2:	5b                   	pop    ebx
c00159b3:	5e                   	pop    esi
c00159b4:	5f                   	pop    edi
c00159b5:	5d                   	pop    ebp
c00159b6:	c3                   	ret    

c00159b7 <Thr::executeDLL(unsigned long, void*)>:
c00159b7:	56                   	push   esi
c00159b8:	53                   	push   ebx
c00159b9:	52                   	push   edx
c00159ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159be:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00159c2:	85 db                	test   ebx,ebx
c00159c4:	75 10                	jne    c00159d6 <Thr::executeDLL(unsigned long, void*)+0x1f>
c00159c6:	83 ec 0c             	sub    esp,0xc
c00159c9:	68 57 40 02 c0       	push   0xc0024057
c00159ce:	e8 77 9c ff ff       	call   c000f64a <KePanic(char const*)>
c00159d3:	83 c4 10             	add    esp,0x10
c00159d6:	50                   	push   eax
c00159d7:	50                   	push   eax
c00159d8:	53                   	push   ebx
c00159d9:	68 81 40 02 c0       	push   0xc0024081
c00159de:	e8 81 15 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00159e3:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00159e7:	89 d8                	mov    eax,ebx
c00159e9:	83 c4 14             	add    esp,0x14
c00159ec:	5b                   	pop    ebx
c00159ed:	5e                   	pop    esi
c00159ee:	ff e0                	jmp    eax

c00159f0 <KeProcessExec(Process*, char const*)>:
c00159f0:	56                   	push   esi
c00159f1:	53                   	push   ebx
c00159f2:	83 ec 04             	sub    esp,0x4
c00159f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00159f9:	8b b3 12 05 00 00    	mov    esi,DWORD PTR [ebx+0x512]
c00159ff:	85 f6                	test   esi,esi
c0015a01:	74 16                	je     c0015a19 <KeProcessExec(Process*, char const*)+0x29>
c0015a03:	83 ec 0c             	sub    esp,0xc
c0015a06:	56                   	push   esi
c0015a07:	e8 c8 d5 ff ff       	call   c0012fd4 <VAS::~VAS()>
c0015a0c:	58                   	pop    eax
c0015a0d:	5a                   	pop    edx
c0015a0e:	6a 14                	push   0x14
c0015a10:	56                   	push   esi
c0015a11:	e8 75 6f ff ff       	call   c000c98b <operator delete(void*, unsigned long)>
c0015a16:	83 c4 10             	add    esp,0x10
c0015a19:	83 ec 0c             	sub    esp,0xc
c0015a1c:	6a 14                	push   0x14
c0015a1e:	e8 e0 98 ff ff       	call   c000f303 <malloc>
c0015a23:	89 c6                	mov    esi,eax
c0015a25:	58                   	pop    eax
c0015a26:	5a                   	pop    edx
c0015a27:	6a 00                	push   0x0
c0015a29:	56                   	push   esi
c0015a2a:	e8 45 da ff ff       	call   c0013474 <VAS::VAS(bool)>
c0015a2f:	89 b3 12 05 00 00    	mov    DWORD PTR [ebx+0x512],esi
c0015a35:	59                   	pop    ecx
c0015a36:	5e                   	pop    esi
c0015a37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a3b:	50                   	push   eax
c0015a3c:	53                   	push   ebx
c0015a3d:	e8 35 f0 ff ff       	call   c0014a77 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015a42:	83 c4 14             	add    esp,0x14
c0015a45:	31 c0                	xor    eax,eax
c0015a47:	5b                   	pop    ebx
c0015a48:	5e                   	pop    esi
c0015a49:	c3                   	ret    
c0015a4a:	66 90                	xchg   ax,ax

c0015a4c <userModeEntryPoint(void*)>:
c0015a4c:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0015a54:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0015a59:	85 c0                	test   eax,eax
c0015a5b:	75 03                	jne    c0015a60 <userModeEntryPoint(void*)+0x14>
c0015a5d:	fb                   	sti    
c0015a5e:	66 90                	xchg   ax,ax
c0015a60:	fb                   	sti    
c0015a61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a66:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015a69:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015a6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015a73:	e9 c7 a7 fe ff       	jmp    c000023f <goToUsermode>

c0015a78 <changeTSS>:
c0015a78:	83 ec 14             	sub    esp,0x14
c0015a7b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015a80:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015a83:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0015a88:	c1 e2 15             	shl    edx,0x15
c0015a8b:	29 d0                	sub    eax,edx
c0015a8d:	50                   	push   eax
c0015a8e:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0015a93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015a99:	05 68 11 00 00       	add    eax,0x1168
c0015a9e:	50                   	push   eax
c0015a9f:	e8 68 c8 ff ff       	call   c001230c <TSS::setESP(unsigned long)>
c0015aa4:	83 c4 1c             	add    esp,0x1c
c0015aa7:	c3                   	ret    

c0015aa8 <switchToThread(ThreadControlBlock*)>:
c0015aa8:	57                   	push   edi
c0015aa9:	8b 0d cc d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6cc
c0015aaf:	56                   	push   esi
c0015ab0:	85 c9                	test   ecx,ecx
c0015ab2:	53                   	push   ebx
c0015ab3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015ab7:	0f 85 8b 00 00 00    	jne    c0015b48 <switchToThread(ThreadControlBlock*)+0xa0>
c0015abd:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c0015ac1:	81 fa ff 00 00 00    	cmp    edx,0xff
c0015ac7:	74 7b                	je     c0015b44 <switchToThread(ThreadControlBlock*)+0x9c>
c0015ac9:	b8 00 04 00 00       	mov    eax,0x400
c0015ace:	29 d0                	sub    eax,edx
c0015ad0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0015ad3:	d1 f8                	sar    eax,1
c0015ad5:	01 d0                	add    eax,edx
c0015ad7:	90                   	nop
c0015ad8:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0015adb:	e8 45 38 00 00       	call   c0019325 <HalQueryPerformanceCounter()>
c0015ae0:	a3 10 d7 02 c0       	mov    ds:0xc002d710,eax
c0015ae5:	89 15 14 d7 02 c0    	mov    DWORD PTR ds:0xc002d714,edx
c0015aeb:	89 c6                	mov    esi,eax
c0015aed:	89 d7                	mov    edi,edx
c0015aef:	2b 35 00 d7 02 c0    	sub    esi,DWORD PTR ds:0xc002d700
c0015af5:	a3 00 d7 02 c0       	mov    ds:0xc002d700,eax
c0015afa:	1b 3d 04 d7 02 c0    	sbb    edi,DWORD PTR ds:0xc002d704
c0015b00:	89 35 08 d7 02 c0    	mov    DWORD PTR ds:0xc002d708,esi
c0015b06:	89 3d 0c d7 02 c0    	mov    DWORD PTR ds:0xc002d70c,edi
c0015b0c:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015b12:	89 15 04 d7 02 c0    	mov    DWORD PTR ds:0xc002d704,edx
c0015b18:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0015b1b:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015b1e:	01 c6                	add    esi,eax
c0015b20:	11 d7                	adc    edi,edx
c0015b22:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015b25:	83 ec 0c             	sub    esp,0xc
c0015b28:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0015b2b:	53                   	push   ebx
c0015b2c:	e8 46 a7 fe ff       	call   c0000277 <switchToThreadASM>
c0015b31:	0f 20 c0             	mov    eax,cr0
c0015b34:	83 c8 08             	or     eax,0x8
c0015b37:	0f 22 c0             	mov    cr0,eax
c0015b3a:	83 c4 10             	add    esp,0x10
c0015b3d:	5b                   	pop    ebx
c0015b3e:	5e                   	pop    esi
c0015b3f:	5f                   	pop    edi
c0015b40:	c3                   	ret    
c0015b41:	8d 76 00             	lea    esi,[esi+0x0]
c0015b44:	31 c0                	xor    eax,eax
c0015b46:	eb 90                	jmp    c0015ad8 <switchToThread(ThreadControlBlock*)+0x30>
c0015b48:	5b                   	pop    ebx
c0015b49:	c7 05 c8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x1
c0015b53:	5e                   	pop    esi
c0015b54:	5f                   	pop    edi
c0015b55:	c3                   	ret    
c0015b56:	66 90                	xchg   ax,ax

c0015b58 <Process::addArgs(char**)>:
c0015b58:	57                   	push   edi
c0015b59:	56                   	push   esi
c0015b5a:	53                   	push   ebx
c0015b5b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015b5f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015b63:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015b6d:	85 ff                	test   edi,edi
c0015b6f:	74 4f                	je     c0015bc0 <Process::addArgs(char**)+0x68>
c0015b71:	8b 07                	mov    eax,DWORD PTR [edi]
c0015b73:	85 c0                	test   eax,eax
c0015b75:	74 49                	je     c0015bc0 <Process::addArgs(char**)+0x68>
c0015b77:	31 db                	xor    ebx,ebx
c0015b79:	8d 76 00             	lea    esi,[esi+0x0]
c0015b7c:	83 ec 0c             	sub    esp,0xc
c0015b7f:	50                   	push   eax
c0015b80:	e8 eb a9 fe ff       	call   c0000570 <strlen>
c0015b85:	83 c0 01             	add    eax,0x1
c0015b88:	89 04 24             	mov    DWORD PTR [esp],eax
c0015b8b:	e8 73 97 ff ff       	call   c000f303 <malloc>
c0015b90:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0015b97:	5a                   	pop    edx
c0015b98:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0015b9b:	59                   	pop    ecx
c0015b9c:	83 c3 01             	add    ebx,0x1
c0015b9f:	52                   	push   edx
c0015ba0:	50                   	push   eax
c0015ba1:	e8 9a aa fe ff       	call   c0000640 <strcpy>
c0015ba6:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c0015bac:	83 c4 10             	add    esp,0x10
c0015baf:	83 c1 01             	add    ecx,0x1
c0015bb2:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c0015bb8:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0015bbb:	85 c0                	test   eax,eax
c0015bbd:	75 bd                	jne    c0015b7c <Process::addArgs(char**)+0x24>
c0015bbf:	90                   	nop
c0015bc0:	5b                   	pop    ebx
c0015bc1:	5e                   	pop    esi
c0015bc2:	5f                   	pop    edi
c0015bc3:	c3                   	ret    

c0015bc4 <Process::Process(char const*, Process*, char**)>:
c0015bc4:	56                   	push   esi
c0015bc5:	53                   	push   ebx
c0015bc6:	83 ec 14             	sub    esp,0x14
c0015bc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bcd:	05 0c 02 00 00       	add    eax,0x20c
c0015bd2:	bb 07 00 00 00       	mov    ebx,0x7
c0015bd7:	89 c6                	mov    esi,eax
c0015bd9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bdc:	85 db                	test   ebx,ebx
c0015bde:	78 14                	js     c0015bf4 <Process::Process(char const*, Process*, char**)+0x30>
c0015be0:	83 ec 0c             	sub    esp,0xc
c0015be3:	56                   	push   esi
c0015be4:	e8 97 b8 00 00       	call   c0021480 <ThreadControlBlock::ThreadControlBlock()>
c0015be9:	83 c4 10             	add    esp,0x10
c0015bec:	83 c6 5f             	add    esi,0x5f
c0015bef:	83 eb 01             	sub    ebx,0x1
c0015bf2:	eb e8                	jmp    c0015bdc <Process::Process(char const*, Process*, char**)+0x18>
c0015bf4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015bf8:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015bff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c03:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015c0a:	83 ec 0c             	sub    esp,0xc
c0015c0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015c11:	e8 76 82 ff ff       	call   c000de8c <KeNewProcessEnv(Process*)>
c0015c16:	83 c4 10             	add    esp,0x10
c0015c19:	89 c2                	mov    edx,eax
c0015c1b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c1f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c29:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015c32:	a1 9c 59 02 c0       	mov    eax,ds:0xc002599c
c0015c37:	8d 50 01             	lea    edx,[eax+0x1]
c0015c3a:	89 15 9c 59 02 c0    	mov    DWORD PTR ds:0xc002599c,edx
c0015c40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015c44:	89 02                	mov    DWORD PTR [edx],eax
c0015c46:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015c4e:	83 ec 0c             	sub    esp,0xc
c0015c51:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015c55:	e8 a9 96 ff ff       	call   c000f303 <malloc>
c0015c5a:	83 c4 10             	add    esp,0x10
c0015c5d:	89 c3                	mov    ebx,eax
c0015c5f:	83 ec 08             	sub    esp,0x8
c0015c62:	6a 00                	push   0x0
c0015c64:	53                   	push   ebx
c0015c65:	e8 0a d8 ff ff       	call   c0013474 <VAS::VAS(bool)>
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c71:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015c77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c7b:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015c85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c89:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015c8d:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015c93:	e8 73 aa ff ff       	call   c001070b <KeInitSignals()>
c0015c98:	89 c2                	mov    edx,eax
c0015c9a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015c9e:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015ca4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ca8:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cae:	85 c0                	test   eax,eax
c0015cb0:	74 42                	je     c0015cf4 <Process::Process(char const*, Process*, char**)+0x130>
c0015cb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cb6:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cbc:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015cc2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cc6:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015ccc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015cd0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015cd6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015cdc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015ce0:	05 0c 01 00 00       	add    eax,0x10c
c0015ce5:	83 ec 08             	sub    esp,0x8
c0015ce8:	52                   	push   edx
c0015ce9:	50                   	push   eax
c0015cea:	e8 51 a9 fe ff       	call   c0000640 <strcpy>
c0015cef:	83 c4 10             	add    esp,0x10
c0015cf2:	eb 7c                	jmp    c0015d70 <Process::Process(char const*, Process*, char**)+0x1ac>
c0015cf4:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c0015cfc:	83 ec 0c             	sub    esp,0xc
c0015cff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0015d03:	e8 fb 95 ff ff       	call   c000f303 <malloc>
c0015d08:	83 c4 10             	add    esp,0x10
c0015d0b:	89 c3                	mov    ebx,eax
c0015d0d:	83 ec 08             	sub    esp,0x8
c0015d10:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d14:	53                   	push   ebx
c0015d15:	e8 f2 c2 ff ff       	call   c001200c <VgaText::VgaText(char const*)>
c0015d1a:	83 c4 10             	add    esp,0x10
c0015d1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d21:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015d27:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d2b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d31:	83 ec 0c             	sub    esp,0xc
c0015d34:	50                   	push   eax
c0015d35:	e8 28 bb ff ff       	call   c0011862 <addToTerminalCycle(VgaText*)>
c0015d3a:	83 c4 10             	add    esp,0x10
c0015d3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d41:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015d47:	83 ec 0c             	sub    esp,0xc
c0015d4a:	50                   	push   eax
c0015d4b:	e8 83 bd ff ff       	call   c0011ad3 <setActiveTerminal(VgaText*)>
c0015d50:	83 c4 10             	add    esp,0x10
c0015d53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d57:	05 0c 01 00 00       	add    eax,0x10c
c0015d5c:	83 ec 08             	sub    esp,0x8
c0015d5f:	68 a0 40 02 c0       	push   0xc00240a0
c0015d64:	50                   	push   eax
c0015d65:	e8 d6 a8 fe ff       	call   c0000640 <strcpy>
c0015d6a:	83 c4 10             	add    esp,0x10
c0015d6d:	8d 76 00             	lea    esi,[esi+0x0]
c0015d70:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d74:	83 c0 0c             	add    eax,0xc
c0015d77:	83 ec 08             	sub    esp,0x8
c0015d7a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d7e:	50                   	push   eax
c0015d7f:	e8 bc a8 fe ff       	call   c0000640 <strcpy>
c0015d84:	83 c4 10             	add    esp,0x10
c0015d87:	83 ec 08             	sub    esp,0x8
c0015d8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0015d8e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d92:	e8 c1 fd ff ff       	call   c0015b58 <Process::addArgs(char**)>
c0015d97:	83 c4 10             	add    esp,0x10
c0015d9a:	83 ec 08             	sub    esp,0x8
c0015d9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015da1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015da5:	e8 cd ec ff ff       	call   c0014a77 <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015daa:	83 c4 10             	add    esp,0x10
c0015dad:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015db1:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015db5:	83 f0 01             	xor    eax,0x1
c0015db8:	88 c2                	mov    dl,al
c0015dba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dbe:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0015dc4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015dc8:	8b 10                	mov    edx,DWORD PTR [eax]
c0015dca:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0015dcf:	52                   	push   edx
c0015dd0:	50                   	push   eax
c0015dd1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dd5:	68 f8 40 02 c0       	push   0xc00240f8
c0015dda:	e8 85 11 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0015ddf:	83 c4 10             	add    esp,0x10
c0015de2:	90                   	nop
c0015de3:	83 c4 14             	add    esp,0x14
c0015de6:	5b                   	pop    ebx
c0015de7:	5e                   	pop    esi
c0015de8:	c3                   	ret    
c0015de9:	90                   	nop
c0015dea:	66 90                	xchg   ax,ax

c0015dec <Process::Process(bool, char const*, Process*, char**)>:
c0015dec:	56                   	push   esi
c0015ded:	53                   	push   ebx
c0015dee:	83 ec 24             	sub    esp,0x24
c0015df1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0015df5:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015df9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015dfd:	05 0c 02 00 00       	add    eax,0x20c
c0015e02:	bb 07 00 00 00       	mov    ebx,0x7
c0015e07:	89 c6                	mov    esi,eax
c0015e09:	8d 76 00             	lea    esi,[esi+0x0]
c0015e0c:	85 db                	test   ebx,ebx
c0015e0e:	78 14                	js     c0015e24 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0015e10:	83 ec 0c             	sub    esp,0xc
c0015e13:	56                   	push   esi
c0015e14:	e8 67 b6 00 00       	call   c0021480 <ThreadControlBlock::ThreadControlBlock()>
c0015e19:	83 c4 10             	add    esp,0x10
c0015e1c:	83 c6 5f             	add    esi,0x5f
c0015e1f:	83 eb 01             	sub    ebx,0x1
c0015e22:	eb e8                	jmp    c0015e0c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0015e24:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e28:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015e2f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e33:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015e3a:	83 ec 0c             	sub    esp,0xc
c0015e3d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015e41:	e8 46 80 ff ff       	call   c000de8c <KeNewProcessEnv(Process*)>
c0015e46:	83 c4 10             	add    esp,0x10
c0015e49:	89 c2                	mov    edx,eax
c0015e4b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e4f:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015e55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015e59:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015e62:	a1 9c 59 02 c0       	mov    eax,ds:0xc002599c
c0015e67:	8d 50 01             	lea    edx,[eax+0x1]
c0015e6a:	89 15 9c 59 02 c0    	mov    DWORD PTR ds:0xc002599c,edx
c0015e70:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015e74:	89 02                	mov    DWORD PTR [edx],eax
c0015e76:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015e7e:	83 ec 0c             	sub    esp,0xc
c0015e81:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0015e85:	e8 79 94 ff ff       	call   c000f303 <malloc>
c0015e8a:	83 c4 10             	add    esp,0x10
c0015e8d:	89 c3                	mov    ebx,eax
c0015e8f:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015e94:	83 ec 08             	sub    esp,0x8
c0015e97:	50                   	push   eax
c0015e98:	53                   	push   ebx
c0015e99:	e8 d6 d5 ff ff       	call   c0013474 <VAS::VAS(bool)>
c0015e9e:	83 c4 10             	add    esp,0x10
c0015ea1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ea5:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015eab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015eaf:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015eb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ebd:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015ec1:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015ec7:	e8 3f a8 ff ff       	call   c001070b <KeInitSignals()>
c0015ecc:	89 c2                	mov    edx,eax
c0015ece:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015ed2:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015ed8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015edc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ee2:	85 c0                	test   eax,eax
c0015ee4:	74 42                	je     c0015f28 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c0015ee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015eea:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015ef0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0015ef6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015efa:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0015f00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f04:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0015f0a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0015f10:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f14:	05 0c 01 00 00       	add    eax,0x10c
c0015f19:	83 ec 08             	sub    esp,0x8
c0015f1c:	52                   	push   edx
c0015f1d:	50                   	push   eax
c0015f1e:	e8 1d a7 fe ff       	call   c0000640 <strcpy>
c0015f23:	83 c4 10             	add    esp,0x10
c0015f26:	eb 7c                	jmp    c0015fa4 <Process::Process(bool, char const*, Process*, char**)+0x1b8>
c0015f28:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015f30:	83 ec 0c             	sub    esp,0xc
c0015f33:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0015f37:	e8 c7 93 ff ff       	call   c000f303 <malloc>
c0015f3c:	83 c4 10             	add    esp,0x10
c0015f3f:	89 c3                	mov    ebx,eax
c0015f41:	83 ec 08             	sub    esp,0x8
c0015f44:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015f48:	53                   	push   ebx
c0015f49:	e8 be c0 ff ff       	call   c001200c <VgaText::VgaText(char const*)>
c0015f4e:	83 c4 10             	add    esp,0x10
c0015f51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f55:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015f5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f5f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f65:	83 ec 0c             	sub    esp,0xc
c0015f68:	50                   	push   eax
c0015f69:	e8 f4 b8 ff ff       	call   c0011862 <addToTerminalCycle(VgaText*)>
c0015f6e:	83 c4 10             	add    esp,0x10
c0015f71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f75:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015f7b:	83 ec 0c             	sub    esp,0xc
c0015f7e:	50                   	push   eax
c0015f7f:	e8 4f bb ff ff       	call   c0011ad3 <setActiveTerminal(VgaText*)>
c0015f84:	83 c4 10             	add    esp,0x10
c0015f87:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015f8b:	05 0c 01 00 00       	add    eax,0x10c
c0015f90:	83 ec 08             	sub    esp,0x8
c0015f93:	68 a0 40 02 c0       	push   0xc00240a0
c0015f98:	50                   	push   eax
c0015f99:	e8 a2 a6 fe ff       	call   c0000640 <strcpy>
c0015f9e:	83 c4 10             	add    esp,0x10
c0015fa1:	8d 76 00             	lea    esi,[esi+0x0]
c0015fa4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015fa8:	83 c0 0c             	add    eax,0xc
c0015fab:	83 ec 08             	sub    esp,0x8
c0015fae:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015fb2:	50                   	push   eax
c0015fb3:	e8 88 a6 fe ff       	call   c0000640 <strcpy>
c0015fb8:	83 c4 10             	add    esp,0x10
c0015fbb:	83 ec 08             	sub    esp,0x8
c0015fbe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015fc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015fc6:	e8 8d fb ff ff       	call   c0015b58 <Process::addArgs(char**)>
c0015fcb:	83 c4 10             	add    esp,0x10
c0015fce:	90                   	nop
c0015fcf:	83 c4 24             	add    esp,0x24
c0015fd2:	5b                   	pop    ebx
c0015fd3:	5e                   	pop    esi
c0015fd4:	c3                   	ret    
c0015fd5:	8d 76 00             	lea    esi,[esi+0x0]

c0015fd8 <taskStartupFunction>:
c0015fd8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015fdd:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0015fe0:	c3                   	ret    
c0015fe1:	8d 76 00             	lea    esi,[esi+0x0]

c0015fe4 <KeDisablePreemption()>:
c0015fe4:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0015fe9:	85 c0                	test   eax,eax
c0015feb:	75 13                	jne    c0016000 <KeDisablePreemption()+0x1c>
c0015fed:	8a 15 74 ad 02 c0    	mov    dl,BYTE PTR ds:0xc002ad74
c0015ff3:	c6 05 74 ad 02 c0 00 	mov    BYTE PTR ds:0xc002ad74,0x0
c0015ffa:	88 15 a8 d6 02 c0    	mov    BYTE PTR ds:0xc002d6a8,dl
c0016000:	83 c0 01             	add    eax,0x1
c0016003:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0016008:	c3                   	ret    
c0016009:	8d 76 00             	lea    esi,[esi+0x0]

c001600c <KeRestorePreemption()>:
c001600c:	a1 ac d6 02 c0       	mov    eax,ds:0xc002d6ac
c0016011:	83 e8 01             	sub    eax,0x1
c0016014:	a3 ac d6 02 c0       	mov    ds:0xc002d6ac,eax
c0016019:	75 0d                	jne    c0016028 <KeRestorePreemption()+0x1c>
c001601b:	a0 a8 d6 02 c0       	mov    al,ds:0xc002d6a8
c0016020:	a2 74 ad 02 c0       	mov    ds:0xc002ad74,al
c0016025:	8d 76 00             	lea    esi,[esi+0x0]
c0016028:	c3                   	ret    
c0016029:	90                   	nop
c001602a:	66 90                	xchg   ax,ax

c001602c <Process::createThread(void (*)(void*), void*, int)>:
c001602c:	57                   	push   edi
c001602d:	31 c9                	xor    ecx,ecx
c001602f:	56                   	push   esi
c0016030:	53                   	push   ebx
c0016031:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016035:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c001603c:	89 f2                	mov    edx,esi
c001603e:	66 90                	xchg   ax,ax
c0016040:	0f b7 c2             	movzx  eax,dx
c0016043:	80 e2 01             	and    dl,0x1
c0016046:	74 14                	je     c001605c <Process::createThread(void (*)(void*), void*, int)+0x30>
c0016048:	d1 f8                	sar    eax,1
c001604a:	83 c1 01             	add    ecx,0x1
c001604d:	89 c2                	mov    edx,eax
c001604f:	83 f9 10             	cmp    ecx,0x10
c0016052:	75 ec                	jne    c0016040 <Process::createThread(void (*)(void*), void*, int)+0x14>
c0016054:	31 db                	xor    ebx,ebx
c0016056:	89 d8                	mov    eax,ebx
c0016058:	5b                   	pop    ebx
c0016059:	5e                   	pop    esi
c001605a:	5f                   	pop    edi
c001605b:	c3                   	ret    
c001605c:	b8 01 00 00 00       	mov    eax,0x1
c0016061:	d3 e0                	shl    eax,cl
c0016063:	09 c6                	or     esi,eax
c0016065:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0016068:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001606f:	01 c0                	add    eax,eax
c0016071:	01 c8                	add    eax,ecx
c0016073:	8d 04 80             	lea    eax,[eax+eax*4]
c0016076:	01 d8                	add    eax,ebx
c0016078:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001607f:	75 0b                	jne    c001608c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0016081:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001608b:	90                   	nop
c001608c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0016092:	83 ec 0c             	sub    esp,0xc
c0016095:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0016098:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001609b:	01 c0                	add    eax,eax
c001609d:	01 c8                	add    eax,ecx
c001609f:	8d 3c 80             	lea    edi,[eax+eax*4]
c00160a2:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00160a5:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00160ab:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c00160b1:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00160b5:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00160bb:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00160c1:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00160c7:	89 ca                	mov    edx,ecx
c00160c9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c00160d0:	c7 80 40 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x240],0x0
c00160da:	f7 da                	neg    edx
c00160dc:	c1 e2 15             	shl    edx,0x15
c00160df:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c00160e5:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c00160eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00160ef:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00160f9:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00160ff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016103:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0016109:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0016113:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001611d:	68 00 01 00 00       	push   0x100
c0016122:	e8 dc 91 ff ff       	call   c000f303 <malloc>
c0016127:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001612a:	58                   	pop    eax
c001612b:	5a                   	pop    edx
c001612c:	53                   	push   ebx
c001612d:	68 ec d6 02 c0       	push   0xc002d6ec
c0016132:	e8 f5 ae 00 00       	call   c002102c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016137:	83 c4 10             	add    esp,0x10
c001613a:	89 d8                	mov    eax,ebx
c001613c:	5b                   	pop    ebx
c001613d:	5e                   	pop    esi
c001613e:	5f                   	pop    edi
c001613f:	c3                   	ret    

c0016140 <Process::createUserThread()>:
c0016140:	83 ec 0c             	sub    esp,0xc
c0016143:	68 80 00 00 00       	push   0x80
c0016148:	6a 00                	push   0x0
c001614a:	68 4c 5a 01 c0       	push   0xc0015a4c
c001614f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016153:	50                   	push   eax
c0016154:	e8 d3 fe ff ff       	call   c001602c <Process::createThread(void (*)(void*), void*, int)>
c0016159:	83 c4 1c             	add    esp,0x1c
c001615c:	c3                   	ret    
c001615d:	8d 76 00             	lea    esi,[esi+0x0]

c0016160 <setupMultitasking(void (*)())>:
c0016160:	56                   	push   esi
c0016161:	53                   	push   ebx
c0016162:	83 ec 04             	sub    esp,0x4
c0016165:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016169:	eb 11                	jmp    c001617c <setupMultitasking(void (*)())+0x1c>
c001616b:	90                   	nop
c001616c:	83 ec 0c             	sub    esp,0xc
c001616f:	68 ec d6 02 c0       	push   0xc002d6ec
c0016174:	e8 f7 ad 00 00       	call   c0020f70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016179:	83 c4 10             	add    esp,0x10
c001617c:	83 ec 0c             	sub    esp,0xc
c001617f:	68 ec d6 02 c0       	push   0xc002d6ec
c0016184:	e8 c3 ad 00 00       	call   c0020f4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016189:	83 c4 10             	add    esp,0x10
c001618c:	84 c0                	test   al,al
c001618e:	74 dc                	je     c001616c <setupMultitasking(void (*)())+0xc>
c0016190:	83 ec 0c             	sub    esp,0xc
c0016193:	68 24 07 00 00       	push   0x724
c0016198:	e8 66 91 ff ff       	call   c000f303 <malloc>
c001619d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00161a4:	89 c3                	mov    ebx,eax
c00161a6:	6a 00                	push   0x0
c00161a8:	68 a4 40 02 c0       	push   0xc00240a4
c00161ad:	6a 01                	push   0x1
c00161af:	50                   	push   eax
c00161b0:	e8 37 fc ff ff       	call   c0015dec <Process::Process(bool, char const*, Process*, char**)>
c00161b5:	83 c4 14             	add    esp,0x14
c00161b8:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00161be:	89 1d f8 d6 02 c0    	mov    DWORD PTR ds:0xc002d6f8,ebx
c00161c4:	50                   	push   eax
c00161c5:	e8 09 b9 ff ff       	call   c0011ad3 <setActiveTerminal(VgaText*)>
c00161ca:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c00161d1:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00161db:	83 c8 01             	or     eax,0x1
c00161de:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c00161e5:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00161eb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00161ee:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c00161f8:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c00161fe:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0016204:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001620e:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0016218:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0016222:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0016228:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0016232:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0016238:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0016242:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0016249:	e8 b5 90 ff ff       	call   c000f303 <malloc>
c001624e:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0016254:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001625a:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0016260:	5a                   	pop    edx
c0016261:	59                   	pop    ecx
c0016262:	68 a0 40 02 c0       	push   0xc00240a0
c0016267:	50                   	push   eax
c0016268:	e8 d3 a3 fe ff       	call   c0000640 <strcpy>
c001626d:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0016274:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0016278:	83 c4 14             	add    esp,0x14
c001627b:	5b                   	pop    ebx
c001627c:	5e                   	pop    esi
c001627d:	e9 e7 9f fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0016282:	66 90                	xchg   ax,ax

c0016284 <schedule()>:
c0016284:	8b 15 cc d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6cc
c001628a:	85 d2                	test   edx,edx
c001628c:	74 0e                	je     c001629c <schedule()+0x18>
c001628e:	c7 05 c8 d6 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x1
c0016298:	c3                   	ret    
c0016299:	8d 76 00             	lea    esi,[esi+0x0]
c001629c:	53                   	push   ebx
c001629d:	83 ec 14             	sub    esp,0x14
c00162a0:	68 ec d6 02 c0       	push   0xc002d6ec
c00162a5:	e8 a2 ac 00 00       	call   c0020f4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00162aa:	83 c4 10             	add    esp,0x10
c00162ad:	84 c0                	test   al,al
c00162af:	75 3f                	jne    c00162f0 <schedule()+0x6c>
c00162b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00162b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00162b9:	83 fa 01             	cmp    edx,0x1
c00162bc:	74 3a                	je     c00162f8 <schedule()+0x74>
c00162be:	66 90                	xchg   ax,ax
c00162c0:	83 ec 0c             	sub    esp,0xc
c00162c3:	68 ec d6 02 c0       	push   0xc002d6ec
c00162c8:	e8 9b ac 00 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00162cd:	c7 04 24 ec d6 02 c0 	mov    DWORD PTR [esp],0xc002d6ec
c00162d4:	89 c3                	mov    ebx,eax
c00162d6:	e8 95 ac 00 00       	call   c0020f70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00162db:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00162e2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00162e5:	e8 be f7 ff ff       	call   c0015aa8 <switchToThread(ThreadControlBlock*)>
c00162ea:	83 c4 10             	add    esp,0x10
c00162ed:	8d 76 00             	lea    esi,[esi+0x0]
c00162f0:	83 c4 08             	add    esp,0x8
c00162f3:	5b                   	pop    ebx
c00162f4:	c3                   	ret    
c00162f5:	8d 76 00             	lea    esi,[esi+0x0]
c00162f8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00162ff:	83 ec 08             	sub    esp,0x8
c0016302:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016307:	50                   	push   eax
c0016308:	68 ec d6 02 c0       	push   0xc002d6ec
c001630d:	e8 1a ad 00 00       	call   c002102c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016312:	83 c4 10             	add    esp,0x10
c0016315:	eb a9                	jmp    c00162c0 <schedule()+0x3c>
c0016317:	90                   	nop

c0016318 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0016318:	83 ec 0c             	sub    esp,0xc
c001631b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016320:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016324:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016327:	e8 58 ff ff ff       	call   c0016284 <schedule()>
c001632c:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016334:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016339:	85 c0                	test   eax,eax
c001633b:	75 03                	jne    c0016340 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x28>
c001633d:	fb                   	sti    
c001633e:	66 90                	xchg   ax,ax
c0016340:	83 c4 0c             	add    esp,0xc
c0016343:	c3                   	ret    

c0016344 <blockTask(TaskState)>:
c0016344:	83 ec 0c             	sub    esp,0xc
c0016347:	fa                   	cli    
c0016348:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001634d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016351:	83 c0 01             	add    eax,0x1
c0016354:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0016359:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001635e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0016361:	e8 1e ff ff ff       	call   c0016284 <schedule()>
c0016366:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c001636e:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c0016374:	85 d2                	test   edx,edx
c0016376:	75 04                	jne    c001637c <blockTask(TaskState)+0x38>
c0016378:	fb                   	sti    
c0016379:	8d 76 00             	lea    esi,[esi+0x0]
c001637c:	83 c4 0c             	add    esp,0xc
c001637f:	c3                   	ret    

c0016380 <waitTask(int, int*, int)>:
c0016380:	83 ec 18             	sub    esp,0x18
c0016383:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016388:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001638c:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c001638f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0016393:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016398:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001639b:	6a 07                	push   0x7
c001639d:	e8 a2 ff ff ff       	call   c0016344 <blockTask(TaskState)>
c00163a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163a7:	83 c4 10             	add    esp,0x10
c00163aa:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00163ad:	85 d2                	test   edx,edx
c00163af:	74 0b                	je     c00163bc <waitTask(int, int*, int)+0x3c>
c00163b1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00163b4:	89 02                	mov    DWORD PTR [edx],eax
c00163b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00163bb:	90                   	nop
c00163bc:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00163bf:	83 c4 0c             	add    esp,0xc
c00163c2:	c3                   	ret    
c00163c3:	90                   	nop

c00163c4 <milliTenthSleepUntil(unsigned int)>:
c00163c4:	83 ec 0c             	sub    esp,0xc
c00163c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00163cb:	39 05 ec a7 02 c0    	cmp    DWORD PTR ds:0xc002a7ec,eax
c00163d1:	76 05                	jbe    c00163d8 <milliTenthSleepUntil(unsigned int)+0x14>
c00163d3:	90                   	nop
c00163d4:	83 c4 0c             	add    esp,0xc
c00163d7:	c3                   	ret    
c00163d8:	fa                   	cli    
c00163d9:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c00163df:	83 ec 08             	sub    esp,0x8
c00163e2:	83 c1 01             	add    ecx,0x1
c00163e5:	8b 15 cc d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6cc
c00163eb:	89 0d d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,ecx
c00163f1:	83 c2 01             	add    edx,0x1
c00163f4:	89 15 cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,edx
c00163fa:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016400:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0016403:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016409:	51                   	push   ecx
c001640a:	68 e0 d6 02 c0       	push   0xc002d6e0
c001640f:	e8 18 ac 00 00       	call   c002102c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016414:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001641b:	e8 24 ff ff ff       	call   c0016344 <blockTask(TaskState)>
c0016420:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0016425:	83 c4 10             	add    esp,0x10
c0016428:	83 e8 01             	sub    eax,0x1
c001642b:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0016430:	85 c0                	test   eax,eax
c0016432:	75 0c                	jne    c0016440 <milliTenthSleepUntil(unsigned int)+0x7c>
c0016434:	8b 15 c8 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6c8
c001643a:	85 d2                	test   edx,edx
c001643c:	75 1a                	jne    c0016458 <milliTenthSleepUntil(unsigned int)+0x94>
c001643e:	66 90                	xchg   ax,ax
c0016440:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016448:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001644d:	85 c0                	test   eax,eax
c001644f:	75 83                	jne    c00163d4 <milliTenthSleepUntil(unsigned int)+0x10>
c0016451:	fb                   	sti    
c0016452:	83 c4 0c             	add    esp,0xc
c0016455:	c3                   	ret    
c0016456:	66 90                	xchg   ax,ax
c0016458:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c0016462:	e8 1d fe ff ff       	call   c0016284 <schedule()>
c0016467:	eb d7                	jmp    c0016440 <milliTenthSleepUntil(unsigned int)+0x7c>
c0016469:	8d 76 00             	lea    esi,[esi+0x0]

c001646c <milliTenthSleep(unsigned int)>:
c001646c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016470:	a1 ec a7 02 c0       	mov    eax,ds:0xc002a7ec
c0016475:	01 c2                	add    edx,eax
c0016477:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001647b:	e9 44 ff ff ff       	jmp    c00163c4 <milliTenthSleepUntil(unsigned int)>

c0016480 <sleep(unsigned int)>:
c0016480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016484:	8d 04 80             	lea    eax,[eax+eax*4]
c0016487:	8d 04 80             	lea    eax,[eax+eax*4]
c001648a:	8d 04 80             	lea    eax,[eax+eax*4]
c001648d:	8d 04 80             	lea    eax,[eax+eax*4]
c0016490:	c1 e0 04             	shl    eax,0x4
c0016493:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016497:	eb d3                	jmp    c001646c <milliTenthSleep(unsigned int)>
c0016499:	8d 76 00             	lea    esi,[esi+0x0]

c001649c <taskReturned>:
c001649c:	83 ec 18             	sub    esp,0x18
c001649f:	68 2c 41 02 c0       	push   0xc002412c
c00164a4:	e8 a1 91 ff ff       	call   c000f64a <KePanic(char const*)>
c00164a9:	83 c4 10             	add    esp,0x10
c00164ac:	83 ec 0c             	sub    esp,0xc
c00164af:	6a 02                	push   0x2
c00164b1:	e8 8e fe ff ff       	call   c0016344 <blockTask(TaskState)>
c00164b6:	fa                   	cli    
c00164b7:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00164bc:	83 c0 01             	add    eax,0x1
c00164bf:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c00164c4:	e8 bb fd ff ff       	call   c0016284 <schedule()>
c00164c9:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00164d1:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c00164d7:	83 c4 10             	add    esp,0x10
c00164da:	85 d2                	test   edx,edx
c00164dc:	75 ce                	jne    c00164ac <taskReturned+0x10>
c00164de:	fb                   	sti    
c00164df:	eb cb                	jmp    c00164ac <taskReturned+0x10>
c00164e1:	8d 76 00             	lea    esi,[esi+0x0]

c00164e4 <Thr::processFromPID(int)>:
c00164e4:	57                   	push   edi
c00164e5:	56                   	push   esi
c00164e6:	53                   	push   ebx
c00164e7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00164eb:	fa                   	cli    
c00164ec:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c00164f1:	83 ec 0c             	sub    esp,0xc
c00164f4:	83 c0 01             	add    eax,0x1
c00164f7:	68 ec d6 02 c0       	push   0xc002d6ec
c00164fc:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0016501:	e8 62 aa 00 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016506:	83 c4 10             	add    esp,0x10
c0016509:	89 c7                	mov    edi,eax
c001650b:	eb 17                	jmp    c0016524 <Thr::processFromPID(int)+0x40>
c001650d:	8d 76 00             	lea    esi,[esi+0x0]
c0016510:	83 ec 0c             	sub    esp,0xc
c0016513:	68 ec d6 02 c0       	push   0xc002d6ec
c0016518:	e8 4b aa 00 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001651d:	83 c4 10             	add    esp,0x10
c0016520:	39 f8                	cmp    eax,edi
c0016522:	74 50                	je     c0016574 <Thr::processFromPID(int)+0x90>
c0016524:	83 ec 0c             	sub    esp,0xc
c0016527:	68 ec d6 02 c0       	push   0xc002d6ec
c001652c:	e8 37 aa 00 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016531:	c7 04 24 ec d6 02 c0 	mov    DWORD PTR [esp],0xc002d6ec
c0016538:	89 c3                	mov    ebx,eax
c001653a:	e8 31 aa 00 00       	call   c0020f70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001653f:	59                   	pop    ecx
c0016540:	58                   	pop    eax
c0016541:	53                   	push   ebx
c0016542:	68 ec d6 02 c0       	push   0xc002d6ec
c0016547:	e8 e0 aa 00 00       	call   c002102c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001654c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001654f:	83 c4 10             	add    esp,0x10
c0016552:	39 30                	cmp    DWORD PTR [eax],esi
c0016554:	75 ba                	jne    c0016510 <Thr::processFromPID(int)+0x2c>
c0016556:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c001655e:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c0016564:	85 d2                	test   edx,edx
c0016566:	74 08                	je     c0016570 <Thr::processFromPID(int)+0x8c>
c0016568:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001656b:	5b                   	pop    ebx
c001656c:	5e                   	pop    esi
c001656d:	5f                   	pop    edi
c001656e:	c3                   	ret    
c001656f:	90                   	nop
c0016570:	fb                   	sti    
c0016571:	eb f5                	jmp    c0016568 <Thr::processFromPID(int)+0x84>
c0016573:	90                   	nop
c0016574:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c001657c:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016581:	85 c0                	test   eax,eax
c0016583:	75 07                	jne    c001658c <Thr::processFromPID(int)+0xa8>
c0016585:	fb                   	sti    
c0016586:	31 c0                	xor    eax,eax
c0016588:	5b                   	pop    ebx
c0016589:	5e                   	pop    esi
c001658a:	5f                   	pop    edi
c001658b:	c3                   	ret    
c001658c:	5b                   	pop    ebx
c001658d:	31 c0                	xor    eax,eax
c001658f:	5e                   	pop    esi
c0016590:	5f                   	pop    edi
c0016591:	c3                   	ret    
c0016592:	66 90                	xchg   ax,ax

c0016594 <unblockTask(ThreadControlBlock*)>:
c0016594:	53                   	push   ebx
c0016595:	83 ec 08             	sub    esp,0x8
c0016598:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001659c:	fa                   	cli    
c001659d:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c00165a3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165a6:	83 c2 01             	add    edx,0x1
c00165a9:	85 c0                	test   eax,eax
c00165ab:	89 15 d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,edx
c00165b1:	74 6d                	je     c0016620 <unblockTask(ThreadControlBlock*)+0x8c>
c00165b3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00165b6:	83 f8 01             	cmp    eax,0x1
c00165b9:	74 39                	je     c00165f4 <unblockTask(ThreadControlBlock*)+0x60>
c00165bb:	83 ec 0c             	sub    esp,0xc
c00165be:	68 ec d6 02 c0       	push   0xc002d6ec
c00165c3:	e8 a0 a9 00 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00165c8:	83 c4 10             	add    esp,0x10
c00165cb:	85 c0                	test   eax,eax
c00165cd:	75 1d                	jne    c00165ec <unblockTask(ThreadControlBlock*)+0x58>
c00165cf:	eb 63                	jmp    c0016634 <unblockTask(ThreadControlBlock*)+0xa0>
c00165d1:	8d 76 00             	lea    esi,[esi+0x0]
c00165d4:	83 ec 08             	sub    esp,0x8
c00165d7:	50                   	push   eax
c00165d8:	68 ec d6 02 c0       	push   0xc002d6ec
c00165dd:	e8 92 ae 00 00       	call   c0021474 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c00165e2:	83 c4 10             	add    esp,0x10
c00165e5:	85 c0                	test   eax,eax
c00165e7:	74 4b                	je     c0016634 <unblockTask(ThreadControlBlock*)+0xa0>
c00165e9:	8d 76 00             	lea    esi,[esi+0x0]
c00165ec:	39 c3                	cmp    ebx,eax
c00165ee:	75 e4                	jne    c00165d4 <unblockTask(ThreadControlBlock*)+0x40>
c00165f0:	eb 12                	jmp    c0016604 <unblockTask(ThreadControlBlock*)+0x70>
c00165f2:	66 90                	xchg   ax,ax
c00165f4:	83 ec 0c             	sub    esp,0xc
c00165f7:	68 c2 40 02 c0       	push   0xc00240c2
c00165fc:	e8 63 09 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016601:	83 c4 10             	add    esp,0x10
c0016604:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c001660c:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016611:	85 c0                	test   eax,eax
c0016613:	75 03                	jne    c0016618 <unblockTask(ThreadControlBlock*)+0x84>
c0016615:	fb                   	sti    
c0016616:	66 90                	xchg   ax,ax
c0016618:	83 c4 08             	add    esp,0x8
c001661b:	5b                   	pop    ebx
c001661c:	c3                   	ret    
c001661d:	8d 76 00             	lea    esi,[esi+0x0]
c0016620:	83 ec 0c             	sub    esp,0xc
c0016623:	68 ab 40 02 c0       	push   0xc00240ab
c0016628:	e8 37 09 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001662d:	83 c4 10             	add    esp,0x10
c0016630:	eb d2                	jmp    c0016604 <unblockTask(ThreadControlBlock*)+0x70>
c0016632:	66 90                	xchg   ax,ax
c0016634:	83 ec 08             	sub    esp,0x8
c0016637:	53                   	push   ebx
c0016638:	68 ec d6 02 c0       	push   0xc002d6ec
c001663d:	e8 ea a9 00 00       	call   c002102c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016642:	83 c4 10             	add    esp,0x10
c0016645:	eb bd                	jmp    c0016604 <unblockTask(ThreadControlBlock*)+0x70>
c0016647:	90                   	nop

c0016648 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0016648:	55                   	push   ebp
c0016649:	57                   	push   edi
c001664a:	56                   	push   esi
c001664b:	53                   	push   ebx
c001664c:	83 ec 1c             	sub    esp,0x1c
c001664f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016653:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016656:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c001665c:	85 ed                	test   ebp,ebp
c001665e:	7e 28                	jle    c0016688 <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016660:	31 f6                	xor    esi,esi
c0016662:	66 90                	xchg   ax,ax
c0016664:	83 ec 0c             	sub    esp,0xc
c0016667:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c001666e:	83 c6 01             	add    esi,0x1
c0016671:	57                   	push   edi
c0016672:	e8 9c 8c ff ff       	call   c000f313 <free>
c0016677:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001667a:	83 c4 10             	add    esp,0x10
c001667d:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016683:	7f df                	jg     c0016664 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016685:	8d 76 00             	lea    esi,[esi+0x0]
c0016688:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016692:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0016697:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001669a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001669d:	d3 c0                	rol    eax,cl
c001669f:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c00166a6:	21 c8                	and    eax,ecx
c00166a8:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c00166af:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166b2:	89 f7                	mov    edi,esi
c00166b4:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c00166bc:	0f 85 72 01 00 00    	jne    c0016834 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00166c2:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c00166c8:	85 ed                	test   ebp,ebp
c00166ca:	74 1c                	je     c00166e8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c00166cc:	83 ec 0c             	sub    esp,0xc
c00166cf:	55                   	push   ebp
c00166d0:	e8 d3 76 ff ff       	call   c000dda8 <EnvVarContainer::~EnvVarContainer()>
c00166d5:	59                   	pop    ecx
c00166d6:	5e                   	pop    esi
c00166d7:	6a 0c                	push   0xc
c00166d9:	55                   	push   ebp
c00166da:	e8 ac 62 ff ff       	call   c000c98b <operator delete(void*, unsigned long)>
c00166df:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c00166e2:	83 c4 10             	add    esp,0x10
c00166e5:	89 f7                	mov    edi,esi
c00166e7:	90                   	nop
c00166e8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00166ee:	85 c0                	test   eax,eax
c00166f0:	0f 84 b2 00 00 00    	je     c00167a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00166f6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00166f9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00166fd:	31 c9                	xor    ecx,ecx
c00166ff:	eb 17                	jmp    c0016718 <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c0016701:	8d 76 00             	lea    esi,[esi+0x0]
c0016704:	83 c1 01             	add    ecx,0x1
c0016707:	83 f9 10             	cmp    ecx,0x10
c001670a:	0f 84 98 00 00 00    	je     c00167a8 <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c0016710:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016716:	66 90                	xchg   ax,ax
c0016718:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c001671f:	d3 fa                	sar    edx,cl
c0016721:	80 e2 01             	and    dl,0x1
c0016724:	74 de                	je     c0016704 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016726:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0016729:	01 d2                	add    edx,edx
c001672b:	01 ca                	add    edx,ecx
c001672d:	8d 14 92             	lea    edx,[edx+edx*4]
c0016730:	01 d0                	add    eax,edx
c0016732:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0016738:	83 fd 07             	cmp    ebp,0x7
c001673b:	75 c7                	jne    c0016704 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001673d:	05 40 02 00 00       	add    eax,0x240
c0016742:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0016745:	83 fd ff             	cmp    ebp,0xffffffff
c0016748:	0f 8c ee 00 00 00    	jl     c001683c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c001674e:	0f 84 ac 01 00 00    	je     c0016900 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016754:	85 ed                	test   ebp,ebp
c0016756:	0f 84 90 01 00 00    	je     c00168ec <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c001675c:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001675e:	75 a4                	jne    c0016704 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016760:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0016766:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001676a:	01 d0                	add    eax,edx
c001676c:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016770:	83 ec 0c             	sub    esp,0xc
c0016773:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0016779:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001677c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016782:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0016789:	50                   	push   eax
c001678a:	e8 05 fe ff ff       	call   c0016594 <unblockTask(ThreadControlBlock*)>
c001678f:	83 c4 10             	add    esp,0x10
c0016792:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016795:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016799:	89 f7                	mov    edi,esi
c001679b:	83 c1 01             	add    ecx,0x1
c001679e:	83 f9 10             	cmp    ecx,0x10
c00167a1:	0f 85 69 ff ff ff    	jne    c0016710 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c00167a7:	90                   	nop
c00167a8:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c00167ae:	85 c0                	test   eax,eax
c00167b0:	74 62                	je     c0016814 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167b2:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c00167b8:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c00167be:	74 54                	je     c0016814 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c00167c0:	83 ec 0c             	sub    esp,0xc
c00167c3:	68 ec d6 02 c0       	push   0xc002d6ec
c00167c8:	e8 9b a7 00 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00167cd:	c7 04 24 ec d6 02 c0 	mov    DWORD PTR [esp],0xc002d6ec
c00167d4:	89 c7                	mov    edi,eax
c00167d6:	e8 71 a7 00 00       	call   c0020f4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00167db:	83 c4 10             	add    esp,0x10
c00167de:	84 c0                	test   al,al
c00167e0:	0f 84 ce 00 00 00    	je     c00168b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c00167e6:	66 90                	xchg   ax,ax
c00167e8:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00167eb:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00167f1:	85 d2                	test   edx,edx
c00167f3:	74 0f                	je     c0016804 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00167f5:	83 ec 0c             	sub    esp,0xc
c00167f8:	8b 02                	mov    eax,DWORD PTR [edx]
c00167fa:	52                   	push   edx
c00167fb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00167fe:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016801:	83 c4 10             	add    esp,0x10
c0016804:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c001680e:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0016811:	8d 76 00             	lea    esi,[esi+0x0]
c0016814:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c001681a:	85 db                	test   ebx,ebx
c001681c:	74 16                	je     c0016834 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c001681e:	83 ec 0c             	sub    esp,0xc
c0016821:	53                   	push   ebx
c0016822:	e8 ad c7 ff ff       	call   c0012fd4 <VAS::~VAS()>
c0016827:	58                   	pop    eax
c0016828:	5a                   	pop    edx
c0016829:	6a 14                	push   0x14
c001682b:	53                   	push   ebx
c001682c:	e8 5a 61 ff ff       	call   c000c98b <operator delete(void*, unsigned long)>
c0016831:	83 c4 10             	add    esp,0x10
c0016834:	83 c4 1c             	add    esp,0x1c
c0016837:	5b                   	pop    ebx
c0016838:	5e                   	pop    esi
c0016839:	5f                   	pop    edi
c001683a:	5d                   	pop    ebp
c001683b:	c3                   	ret    
c001683c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016840:	83 ec 0c             	sub    esp,0xc
c0016843:	68 60 41 02 c0       	push   0xc0024160
c0016848:	e8 fd 8d ff ff       	call   c000f64a <KePanic(char const*)>
c001684d:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016850:	83 c4 10             	add    esp,0x10
c0016853:	89 f7                	mov    edi,esi
c0016855:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016859:	e9 a6 fe ff ff       	jmp    c0016704 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c001685e:	66 90                	xchg   ax,ax
c0016860:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0016866:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c001686c:	75 1e                	jne    c001688c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001686e:	83 ec 0c             	sub    esp,0xc
c0016871:	68 c8 41 02 c0       	push   0xc00241c8
c0016876:	e8 e9 06 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001687b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016882:	e8 bd fa ff ff       	call   c0016344 <blockTask(TaskState)>
c0016887:	83 c4 10             	add    esp,0x10
c001688a:	66 90                	xchg   ax,ax
c001688c:	83 ec 08             	sub    esp,0x8
c001688f:	56                   	push   esi
c0016890:	68 ec d6 02 c0       	push   0xc002d6ec
c0016895:	e8 92 a7 00 00       	call   c002102c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001689a:	c7 04 24 ec d6 02 c0 	mov    DWORD PTR [esp],0xc002d6ec
c00168a1:	e8 c2 a6 00 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168a6:	83 c4 10             	add    esp,0x10
c00168a9:	39 f8                	cmp    eax,edi
c00168ab:	0f 84 37 ff ff ff    	je     c00167e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c00168b1:	8d 76 00             	lea    esi,[esi+0x0]
c00168b4:	83 ec 0c             	sub    esp,0xc
c00168b7:	68 ec d6 02 c0       	push   0xc002d6ec
c00168bc:	e8 a7 a6 00 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00168c1:	c7 04 24 ec d6 02 c0 	mov    DWORD PTR [esp],0xc002d6ec
c00168c8:	89 c6                	mov    esi,eax
c00168ca:	e8 a1 a6 00 00       	call   c0020f70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00168cf:	83 c4 10             	add    esp,0x10
c00168d2:	39 f3                	cmp    ebx,esi
c00168d4:	74 b6                	je     c001688c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168d6:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c00168d9:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00168dc:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c00168e2:	75 a8                	jne    c001688c <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c00168e4:	e9 77 ff ff ff       	jmp    c0016860 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c00168e9:	8d 76 00             	lea    esi,[esi+0x0]
c00168ec:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00168f0:	83 ec 0c             	sub    esp,0xc
c00168f3:	68 94 41 02 c0       	push   0xc0024194
c00168f8:	e9 4b ff ff ff       	jmp    c0016848 <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00168fd:	8d 76 00             	lea    esi,[esi+0x0]
c0016900:	8b 36                	mov    esi,DWORD PTR [esi]
c0016902:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0016906:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0016909:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001690c:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0016912:	01 d7                	add    edi,edx
c0016914:	89 f8                	mov    eax,edi
c0016916:	e9 51 fe ff ff       	jmp    c001676c <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c001691b:	90                   	nop

c001691c <cleanerTaskFunction(void*)>:
c001691c:	53                   	push   ebx
c001691d:	83 ec 08             	sub    esp,0x8
c0016920:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016928:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001692d:	85 c0                	test   eax,eax
c001692f:	75 03                	jne    c0016934 <cleanerTaskFunction(void*)+0x18>
c0016931:	fb                   	sti    
c0016932:	66 90                	xchg   ax,ax
c0016934:	fa                   	cli    
c0016935:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001693a:	83 c0 01             	add    eax,0x1
c001693d:	80 3d b4 d6 02 c0 00 	cmp    BYTE PTR ds:0xc002d6b4,0x0
c0016944:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0016949:	0f 85 c9 00 00 00    	jne    c0016a18 <cleanerTaskFunction(void*)+0xfc>
c001694f:	83 ec 0c             	sub    esp,0xc
c0016952:	6a 02                	push   0x2
c0016954:	e8 bf f9 ff ff       	call   c0016318 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016959:	83 c4 10             	add    esp,0x10
c001695c:	c6 05 b4 d6 02 c0 00 	mov    BYTE PTR ds:0xc002d6b4,0x0
c0016963:	fa                   	cli    
c0016964:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c001696a:	8b 1d cc d6 02 c0    	mov    ebx,DWORD PTR ds:0xc002d6cc
c0016970:	83 c1 01             	add    ecx,0x1
c0016973:	83 c3 01             	add    ebx,0x1
c0016976:	89 0d d0 d6 02 c0    	mov    DWORD PTR ds:0xc002d6d0,ecx
c001697c:	89 1d cc d6 02 c0    	mov    DWORD PTR ds:0xc002d6cc,ebx
c0016982:	fa                   	cli    
c0016983:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016988:	83 c0 01             	add    eax,0x1
c001698b:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0016990:	eb 2a                	jmp    c00169bc <cleanerTaskFunction(void*)+0xa0>
c0016992:	66 90                	xchg   ax,ax
c0016994:	83 ec 0c             	sub    esp,0xc
c0016997:	68 d4 d6 02 c0       	push   0xc002d6d4
c001699c:	e8 c7 a5 00 00       	call   c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169a1:	c7 04 24 d4 d6 02 c0 	mov    DWORD PTR [esp],0xc002d6d4
c00169a8:	89 c3                	mov    ebx,eax
c00169aa:	e8 c1 a5 00 00       	call   c0020f70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169b2:	e8 91 fc ff ff       	call   c0016648 <cleanupTerminatedTask(ThreadControlBlock*)>
c00169b7:	83 c4 10             	add    esp,0x10
c00169ba:	66 90                	xchg   ax,ax
c00169bc:	83 ec 0c             	sub    esp,0xc
c00169bf:	68 d4 d6 02 c0       	push   0xc002d6d4
c00169c4:	e8 83 a5 00 00       	call   c0020f4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169c9:	83 c4 10             	add    esp,0x10
c00169cc:	84 c0                	test   al,al
c00169ce:	74 c4                	je     c0016994 <cleanerTaskFunction(void*)+0x78>
c00169d0:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c00169d8:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c00169de:	85 d2                	test   edx,edx
c00169e0:	75 02                	jne    c00169e4 <cleanerTaskFunction(void*)+0xc8>
c00169e2:	fb                   	sti    
c00169e3:	90                   	nop
c00169e4:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c00169e9:	83 e8 01             	sub    eax,0x1
c00169ec:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c00169f1:	0f 85 29 ff ff ff    	jne    c0016920 <cleanerTaskFunction(void*)+0x4>
c00169f7:	a1 c8 d6 02 c0       	mov    eax,ds:0xc002d6c8
c00169fc:	85 c0                	test   eax,eax
c00169fe:	0f 84 1c ff ff ff    	je     c0016920 <cleanerTaskFunction(void*)+0x4>
c0016a04:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c0016a0e:	e8 71 f8 ff ff       	call   c0016284 <schedule()>
c0016a13:	e9 08 ff ff ff       	jmp    c0016920 <cleanerTaskFunction(void*)+0x4>
c0016a18:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016a20:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016a25:	85 c0                	test   eax,eax
c0016a27:	0f 85 2f ff ff ff    	jne    c001695c <cleanerTaskFunction(void*)+0x40>
c0016a2d:	fb                   	sti    
c0016a2e:	e9 29 ff ff ff       	jmp    c001695c <cleanerTaskFunction(void*)+0x40>
c0016a33:	90                   	nop

c0016a34 <terminateTask(int)>:
c0016a34:	83 ec 14             	sub    esp,0x14
c0016a37:	fa                   	cli    
c0016a38:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016a3d:	83 c0 01             	add    eax,0x1
c0016a40:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0016a45:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0016a4a:	83 c0 01             	add    eax,0x1
c0016a4d:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0016a52:	fa                   	cli    
c0016a53:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016a58:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016a5c:	83 c0 01             	add    eax,0x1
c0016a5f:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0016a64:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a69:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016a6c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a71:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0016a74:	50                   	push   eax
c0016a75:	68 d4 d6 02 c0       	push   0xc002d6d4
c0016a7a:	e8 ad a5 00 00       	call   c002102c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a7f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a84:	83 c4 10             	add    esp,0x10
c0016a87:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016a8e:	a1 b0 d6 02 c0       	mov    eax,ds:0xc002d6b0
c0016a93:	85 c0                	test   eax,eax
c0016a95:	0f 84 81 00 00 00    	je     c0016b1c <terminateTask(int)+0xe8>
c0016a9b:	83 ec 0c             	sub    esp,0xc
c0016a9e:	c6 05 b4 d6 02 c0 01 	mov    BYTE PTR ds:0xc002d6b4,0x1
c0016aa5:	50                   	push   eax
c0016aa6:	e8 e9 fa ff ff       	call   c0016594 <unblockTask(ThreadControlBlock*)>
c0016aab:	83 c4 10             	add    esp,0x10
c0016aae:	66 90                	xchg   ax,ax
c0016ab0:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016ab8:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016abd:	85 c0                	test   eax,eax
c0016abf:	75 03                	jne    c0016ac4 <terminateTask(int)+0x90>
c0016ac1:	fb                   	sti    
c0016ac2:	66 90                	xchg   ax,ax
c0016ac4:	a1 cc d6 02 c0       	mov    eax,ds:0xc002d6cc
c0016ac9:	83 e8 01             	sub    eax,0x1
c0016acc:	a3 cc d6 02 c0       	mov    ds:0xc002d6cc,eax
c0016ad1:	75 09                	jne    c0016adc <terminateTask(int)+0xa8>
c0016ad3:	83 3d c8 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6c8,0x0
c0016ada:	75 54                	jne    c0016b30 <terminateTask(int)+0xfc>
c0016adc:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016ae4:	8b 0d d0 d6 02 c0    	mov    ecx,DWORD PTR ds:0xc002d6d0
c0016aea:	85 c9                	test   ecx,ecx
c0016aec:	75 06                	jne    c0016af4 <terminateTask(int)+0xc0>
c0016aee:	66 90                	xchg   ax,ax
c0016af0:	fb                   	sti    
c0016af1:	8d 76 00             	lea    esi,[esi+0x0]
c0016af4:	fa                   	cli    
c0016af5:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c0016afa:	83 c0 01             	add    eax,0x1
c0016afd:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c0016b02:	e8 7d f7 ff ff       	call   c0016284 <schedule()>
c0016b07:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c0016b0f:	8b 15 d0 d6 02 c0    	mov    edx,DWORD PTR ds:0xc002d6d0
c0016b15:	85 d2                	test   edx,edx
c0016b17:	75 db                	jne    c0016af4 <terminateTask(int)+0xc0>
c0016b19:	eb d5                	jmp    c0016af0 <terminateTask(int)+0xbc>
c0016b1b:	90                   	nop
c0016b1c:	83 ec 0c             	sub    esp,0xc
c0016b1f:	68 d9 40 02 c0       	push   0xc00240d9
c0016b24:	e8 3b 04 ff ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016b29:	83 c4 10             	add    esp,0x10
c0016b2c:	eb 82                	jmp    c0016ab0 <terminateTask(int)+0x7c>
c0016b2e:	66 90                	xchg   ax,ax
c0016b30:	c7 05 c8 d6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d6c8,0x0
c0016b3a:	e8 45 f7 ff ff       	call   c0016284 <schedule()>
c0016b3f:	eb 9b                	jmp    c0016adc <terminateTask(int)+0xa8>
c0016b41:	8d 76 00             	lea    esi,[esi+0x0]

c0016b44 <Thr::terminateFromIRQ(int)>:
c0016b44:	83 ec 18             	sub    esp,0x18
c0016b47:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016b4b:	50                   	push   eax
c0016b4c:	e8 e3 fe ff ff       	call   c0016a34 <terminateTask(int)>
c0016b51:	8d 76 00             	lea    esi,[esi+0x0]

c0016b54 <__static_initialization_and_destruction_0(int, int)>:
c0016b54:	83 ec 0c             	sub    esp,0xc
c0016b57:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016b5c:	0f 85 8e 00 00 00    	jne    c0016bf0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b62:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016b6a:	0f 85 80 00 00 00    	jne    c0016bf0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0016b70:	83 ec 0c             	sub    esp,0xc
c0016b73:	68 ec d6 02 c0       	push   0xc002d6ec
c0016b78:	e8 4f a9 00 00       	call   c00214cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016b7d:	83 c4 10             	add    esp,0x10
c0016b80:	83 ec 04             	sub    esp,0x4
c0016b83:	68 e4 51 02 c0       	push   0xc00251e4
c0016b88:	68 ec d6 02 c0       	push   0xc002d6ec
c0016b8d:	68 7c 14 02 c0       	push   0xc002147c
c0016b92:	e8 a4 5d ff ff       	call   c000c93b <__cxa_atexit>
c0016b97:	83 c4 10             	add    esp,0x10
c0016b9a:	83 ec 0c             	sub    esp,0xc
c0016b9d:	68 e0 d6 02 c0       	push   0xc002d6e0
c0016ba2:	e8 25 a9 00 00       	call   c00214cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016ba7:	83 c4 10             	add    esp,0x10
c0016baa:	83 ec 04             	sub    esp,0x4
c0016bad:	68 e4 51 02 c0       	push   0xc00251e4
c0016bb2:	68 e0 d6 02 c0       	push   0xc002d6e0
c0016bb7:	68 7c 14 02 c0       	push   0xc002147c
c0016bbc:	e8 7a 5d ff ff       	call   c000c93b <__cxa_atexit>
c0016bc1:	83 c4 10             	add    esp,0x10
c0016bc4:	83 ec 0c             	sub    esp,0xc
c0016bc7:	68 d4 d6 02 c0       	push   0xc002d6d4
c0016bcc:	e8 fb a8 00 00       	call   c00214cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016bd1:	83 c4 10             	add    esp,0x10
c0016bd4:	83 ec 04             	sub    esp,0x4
c0016bd7:	68 e4 51 02 c0       	push   0xc00251e4
c0016bdc:	68 d4 d6 02 c0       	push   0xc002d6d4
c0016be1:	68 7c 14 02 c0       	push   0xc002147c
c0016be6:	e8 50 5d ff ff       	call   c000c93b <__cxa_atexit>
c0016beb:	83 c4 10             	add    esp,0x10
c0016bee:	66 90                	xchg   ax,ax
c0016bf0:	90                   	nop
c0016bf1:	83 c4 0c             	add    esp,0xc
c0016bf4:	c3                   	ret    
c0016bf5:	8d 76 00             	lea    esi,[esi+0x0]

c0016bf8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016bf8:	83 ec 0c             	sub    esp,0xc
c0016bfb:	83 ec 08             	sub    esp,0x8
c0016bfe:	68 ff ff 00 00       	push   0xffff
c0016c03:	6a 01                	push   0x1
c0016c05:	e8 4a ff ff ff       	call   c0016b54 <__static_initialization_and_destruction_0(int, int)>
c0016c0a:	83 c4 10             	add    esp,0x10
c0016c0d:	83 c4 0c             	add    esp,0xc
c0016c10:	c3                   	ret    

c0016c11 <Vm::inbv(unsigned short)>:
c0016c11:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c15:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c1a:	75 06                	jne    c0016c22 <Vm::inbv(unsigned short)+0x11>
c0016c1c:	a0 30 d7 02 c0       	mov    al,ds:0xc002d730
c0016c21:	c3                   	ret    
c0016c22:	ec                   	in     al,dx
c0016c23:	c3                   	ret    

c0016c24 <Vm::outbv(unsigned short, unsigned char)>:
c0016c24:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016c28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c2c:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016c31:	75 25                	jne    c0016c58 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0016c33:	8b 0d 30 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d730
c0016c39:	8d 51 01             	lea    edx,[ecx+0x1]
c0016c3c:	88 81 40 d7 02 c0    	mov    BYTE PTR [ecx-0x3ffd28c0],al
c0016c42:	89 15 30 d7 02 c0    	mov    DWORD PTR ds:0xc002d730,edx
c0016c48:	83 fa 20             	cmp    edx,0x20
c0016c4b:	75 0c                	jne    c0016c59 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016c4d:	c7 05 30 d7 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002d730,0x1f
c0016c57:	c3                   	ret    
c0016c58:	ee                   	out    dx,al
c0016c59:	c3                   	ret    

c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>:
c0016c5a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c5f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c64:	c1 e0 04             	shl    eax,0x4
c0016c67:	01 d0                	add    eax,edx
c0016c69:	c3                   	ret    

c0016c6a <Vm::getSegment(unsigned int)>:
c0016c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c6e:	c1 e8 10             	shr    eax,0x10
c0016c71:	c3                   	ret    

c0016c72 <Vm::getOffset(unsigned int)>:
c0016c72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016c76:	c3                   	ret    

c0016c77 <Vm::mainloop2()>:
c0016c77:	83 ec 18             	sub    esp,0x18
c0016c7a:	fa                   	cli    
c0016c7b:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0016c81:	6a 02                	push   0x2
c0016c83:	c6 05 29 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d729,0x1
c0016c8a:	e8 89 f6 ff ff       	call   c0016318 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016c8f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016c94:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0016c98:	52                   	push   edx
c0016c99:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0016c9d:	52                   	push   edx
c0016c9e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0016ca2:	52                   	push   edx
c0016ca3:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0016ca7:	50                   	push   eax
c0016ca8:	e8 62 95 fe ff       	call   c000020f <goToVM86>
c0016cad:	83 c4 2c             	add    esp,0x2c
c0016cb0:	c3                   	ret    

c0016cb1 <Vm::mainVm8086Loop(void*)>:
c0016cb1:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016cb8:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016cbf:	75 01                	jne    c0016cc2 <Vm::mainVm8086Loop(void*)+0x11>
c0016cc1:	fb                   	sti    
c0016cc2:	eb b3                	jmp    c0016c77 <Vm::mainloop2()>

c0016cc4 <Vm::mainloop3(unsigned long)>:
c0016cc4:	83 ec 18             	sub    esp,0x18
c0016cc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ccb:	fa                   	cli    
c0016ccc:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0016cd2:	6a 02                	push   0x2
c0016cd4:	c6 05 28 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d728,0x1
c0016cdb:	a3 24 d7 02 c0       	mov    ds:0xc002d724,eax
c0016ce0:	e8 33 f6 ff ff       	call   c0016318 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0016ce5:	83 c4 1c             	add    esp,0x1c
c0016ce8:	eb 8d                	jmp    c0016c77 <Vm::mainloop2()>

c0016cea <Vm::initialise8086()>:
c0016cea:	83 ec 0c             	sub    esp,0xc
c0016ced:	68 80 00 00 00       	push   0x80
c0016cf2:	6a 00                	push   0x0
c0016cf4:	68 b1 6c 01 c0       	push   0xc0016cb1
c0016cf9:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0016cff:	e8 28 f3 ff ff       	call   c001602c <Process::createThread(void (*)(void*), void*, int)>
c0016d04:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016d0b:	a3 2c d7 02 c0       	mov    ds:0xc002d72c,eax
c0016d10:	68 10 01 00 00       	push   0x110
c0016d15:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0016d1a:	6a 00                	push   0x0
c0016d1c:	6a 00                	push   0x0
c0016d1e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0016d24:	e8 fd c5 ff ff       	call   c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016d29:	83 c4 2c             	add    esp,0x2c
c0016d2c:	c3                   	ret    

c0016d2d <Vm::resetConventionalMemory8086()>:
c0016d2d:	c3                   	ret    

c0016d2e <Vm::finish8086()>:
c0016d2e:	53                   	push   ebx
c0016d2f:	83 ec 08             	sub    esp,0x8
c0016d32:	fa                   	cli    
c0016d33:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0016d39:	80 3d 28 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d728,0x0
c0016d40:	75 18                	jne    c0016d5a <Vm::finish8086()+0x2c>
c0016d42:	e8 3d f5 ff ff       	call   c0016284 <schedule()>
c0016d47:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016d4e:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016d55:	75 db                	jne    c0016d32 <Vm::finish8086()+0x4>
c0016d57:	fb                   	sti    
c0016d58:	eb d8                	jmp    c0016d32 <Vm::finish8086()+0x4>
c0016d5a:	83 ec 0c             	sub    esp,0xc
c0016d5d:	8b 1d 24 d7 02 c0    	mov    ebx,DWORD PTR ds:0xc002d724
c0016d63:	ff 35 2c d7 02 c0    	push   DWORD PTR ds:0xc002d72c
c0016d69:	c6 05 28 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d728,0x0
c0016d70:	e8 1f f8 ff ff       	call   c0016594 <unblockTask(ThreadControlBlock*)>
c0016d75:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016d7c:	83 c4 10             	add    esp,0x10
c0016d7f:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016d86:	75 01                	jne    c0016d89 <Vm::finish8086()+0x5b>
c0016d88:	fb                   	sti    
c0016d89:	89 d8                	mov    eax,ebx
c0016d8b:	83 c4 08             	add    esp,0x8
c0016d8e:	5b                   	pop    ebx
c0016d8f:	c3                   	ret    

c0016d90 <Vm::getOutput8086(unsigned char*)>:
c0016d90:	57                   	push   edi
c0016d91:	8b 0d 30 d7 02 c0    	mov    ecx,DWORD PTR ds:0xc002d730
c0016d97:	56                   	push   esi
c0016d98:	be 40 d7 02 c0       	mov    esi,0xc002d740
c0016d9d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0016da1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016da3:	a1 30 d7 02 c0       	mov    eax,ds:0xc002d730
c0016da8:	5e                   	pop    esi
c0016da9:	c7 05 30 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d730,0x0
c0016db3:	5f                   	pop    edi
c0016db4:	c3                   	ret    

c0016db5 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016db5:	55                   	push   ebp
c0016db6:	57                   	push   edi
c0016db7:	56                   	push   esi
c0016db8:	53                   	push   ebx
c0016db9:	83 ec 2c             	sub    esp,0x2c
c0016dbc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0016dc0:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016dc4:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016dc8:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c0016dcc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016dd0:	80 3d 20 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d720,0x0
c0016dd7:	75 5d                	jne    c0016e36 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016dd9:	83 ec 0c             	sub    esp,0xc
c0016ddc:	68 14 01 00 00       	push   0x114
c0016de1:	e8 1d 85 ff ff       	call   c000f303 <malloc>
c0016de6:	83 c4 0c             	add    esp,0xc
c0016de9:	89 c7                	mov    edi,eax
c0016deb:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0016df1:	68 f0 41 02 c0       	push   0xc00241f0
c0016df6:	50                   	push   eax
c0016df7:	e8 36 13 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0016dfc:	58                   	pop    eax
c0016dfd:	5a                   	pop    edx
c0016dfe:	6a 12                	push   0x12
c0016e00:	57                   	push   edi
c0016e01:	e8 4a 13 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0016e06:	59                   	pop    ecx
c0016e07:	8b 07                	mov    eax,DWORD PTR [edi]
c0016e09:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0016e0d:	51                   	push   ecx
c0016e0e:	6a 00                	push   0x0
c0016e10:	6a 00                	push   0x0
c0016e12:	68 00 00 11 00       	push   0x110000
c0016e17:	57                   	push   edi
c0016e18:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016e1b:	83 c4 14             	add    esp,0x14
c0016e1e:	57                   	push   edi
c0016e1f:	e8 8a 13 ff ff       	call   c00081ae <File::close()>
c0016e24:	8b 07                	mov    eax,DWORD PTR [edi]
c0016e26:	89 3c 24             	mov    DWORD PTR [esp],edi
c0016e29:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016e2c:	c6 05 20 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d720,0x1
c0016e33:	83 c4 10             	add    esp,0x10
c0016e36:	fa                   	cli    
c0016e37:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0016e3d:	80 3d 29 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d729,0x0
c0016e44:	75 18                	jne    c0016e5e <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa9>
c0016e46:	e8 39 f4 ff ff       	call   c0016284 <schedule()>
c0016e4b:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016e52:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016e59:	75 db                	jne    c0016e36 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016e5b:	fb                   	sti    
c0016e5c:	eb d8                	jmp    c0016e36 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016e5e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016e62:	a1 2c d7 02 c0       	mov    eax,ds:0xc002d72c
c0016e67:	c7 05 30 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d730,0x0
c0016e71:	66 89 70 55          	mov    WORD PTR [eax+0x55],si
c0016e75:	66 89 58 57          	mov    WORD PTR [eax+0x57],bx
c0016e79:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016e7d:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c0016e81:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016e85:	0f b7 f6             	movzx  esi,si
c0016e88:	0f b7 db             	movzx  ebx,bx
c0016e8b:	50                   	push   eax
c0016e8c:	6a 20                	push   0x20
c0016e8e:	6a 00                	push   0x0
c0016e90:	68 40 d7 02 c0       	push   0xc002d740
c0016e95:	e8 56 96 fe ff       	call   c00004f0 <memset>
c0016e9a:	5a                   	pop    edx
c0016e9b:	59                   	pop    ecx
c0016e9c:	56                   	push   esi
c0016e9d:	53                   	push   ebx
c0016e9e:	e8 b7 fd ff ff       	call   c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0016ea3:	83 c4 10             	add    esp,0x10
c0016ea6:	89 c7                	mov    edi,eax
c0016ea8:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016eac:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0016eb0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016eb2:	c6 05 29 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d729,0x0
c0016eb9:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016ec0:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016ec7:	75 01                	jne    c0016eca <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x115>
c0016ec9:	fb                   	sti    
c0016eca:	83 ec 0c             	sub    esp,0xc
c0016ecd:	ff 35 2c d7 02 c0    	push   DWORD PTR ds:0xc002d72c
c0016ed3:	e8 bc f6 ff ff       	call   c0016594 <unblockTask(ThreadControlBlock*)>
c0016ed8:	83 c4 3c             	add    esp,0x3c
c0016edb:	b0 01                	mov    al,0x1
c0016edd:	5b                   	pop    ebx
c0016ede:	5e                   	pop    esi
c0016edf:	5f                   	pop    edi
c0016ee0:	5d                   	pop    ebp
c0016ee1:	c3                   	ret    

c0016ee2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016ee2:	55                   	push   ebp
c0016ee3:	57                   	push   edi
c0016ee4:	56                   	push   esi
c0016ee5:	53                   	push   ebx
c0016ee6:	83 ec 2c             	sub    esp,0x2c
c0016ee9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016eed:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016ef1:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016ef5:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016ef9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016efd:	80 3d 20 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d720,0x0
c0016f04:	75 5d                	jne    c0016f63 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x81>
c0016f06:	83 ec 0c             	sub    esp,0xc
c0016f09:	68 14 01 00 00       	push   0x114
c0016f0e:	e8 f0 83 ff ff       	call   c000f303 <malloc>
c0016f13:	83 c4 0c             	add    esp,0xc
c0016f16:	89 c6                	mov    esi,eax
c0016f18:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0016f1e:	68 f0 41 02 c0       	push   0xc00241f0
c0016f23:	50                   	push   eax
c0016f24:	e8 09 12 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0016f29:	58                   	pop    eax
c0016f2a:	5a                   	pop    edx
c0016f2b:	6a 12                	push   0x12
c0016f2d:	56                   	push   esi
c0016f2e:	e8 1d 12 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c0016f33:	59                   	pop    ecx
c0016f34:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f36:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016f3a:	52                   	push   edx
c0016f3b:	6a 00                	push   0x0
c0016f3d:	6a 00                	push   0x0
c0016f3f:	68 00 00 11 00       	push   0x110000
c0016f44:	56                   	push   esi
c0016f45:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0016f48:	83 c4 14             	add    esp,0x14
c0016f4b:	56                   	push   esi
c0016f4c:	e8 5d 12 ff ff       	call   c00081ae <File::close()>
c0016f51:	8b 06                	mov    eax,DWORD PTR [esi]
c0016f53:	89 34 24             	mov    DWORD PTR [esp],esi
c0016f56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f59:	c6 05 20 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d720,0x1
c0016f60:	83 c4 10             	add    esp,0x10
c0016f63:	50                   	push   eax
c0016f64:	50                   	push   eax
c0016f65:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016f69:	68 0b 42 02 c0       	push   0xc002420b
c0016f6e:	e8 f1 ff fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0016f73:	83 c4 10             	add    esp,0x10
c0016f76:	fa                   	cli    
c0016f77:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0016f7d:	0f b6 35 29 d7 02 c0 	movzx  esi,BYTE PTR ds:0xc002d729
c0016f84:	89 f0                	mov    eax,esi
c0016f86:	84 c0                	test   al,al
c0016f88:	75 18                	jne    c0016fa2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c0016f8a:	e8 f5 f2 ff ff       	call   c0016284 <schedule()>
c0016f8f:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0016f96:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0016f9d:	75 d7                	jne    c0016f76 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016f9f:	fb                   	sti    
c0016fa0:	eb d4                	jmp    c0016f76 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x94>
c0016fa2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016fa6:	a1 2c d7 02 c0       	mov    eax,ds:0xc002d72c
c0016fab:	c7 05 30 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d730,0x0
c0016fb5:	66 89 48 5b          	mov    WORD PTR [eax+0x5b],cx
c0016fb9:	66 89 58 59          	mov    WORD PTR [eax+0x59],bx
c0016fbd:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c0016fc1:	66 89 68 57          	mov    WORD PTR [eax+0x57],bp
c0016fc5:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0016fc9:	50                   	push   eax
c0016fca:	6a 20                	push   0x20
c0016fcc:	6a 00                	push   0x0
c0016fce:	68 40 d7 02 c0       	push   0xc002d740
c0016fd3:	e8 18 95 fe ff       	call   c00004f0 <memset>
c0016fd8:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016fdf:	e8 1f 83 ff ff       	call   c000f303 <malloc>
c0016fe4:	83 c4 0c             	add    esp,0xc
c0016fe7:	89 c3                	mov    ebx,eax
c0016fe9:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c0016fef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ff3:	50                   	push   eax
c0016ff4:	e8 39 11 ff ff       	call   c0008132 <File::File(char const*, Process*)>
c0016ff9:	83 c4 10             	add    esp,0x10
c0016ffc:	85 db                	test   ebx,ebx
c0016ffe:	75 0a                	jne    c001700a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x128>
c0017000:	83 ec 0c             	sub    esp,0xc
c0017003:	68 2d 42 02 c0       	push   0xc002422d
c0017008:	eb 2b                	jmp    c0017035 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x153>
c001700a:	50                   	push   eax
c001700b:	8d 44 24 17          	lea    eax,[esp+0x17]
c001700f:	50                   	push   eax
c0017010:	8d 44 24 20          	lea    eax,[esp+0x20]
c0017014:	50                   	push   eax
c0017015:	53                   	push   ebx
c0017016:	e8 37 14 ff ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001701b:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c001701f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0017023:	83 c4 10             	add    esp,0x10
c0017026:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001702b:	74 28                	je     c0017055 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x173>
c001702d:	83 ec 0c             	sub    esp,0xc
c0017030:	68 41 42 02 c0       	push   0xc0024241
c0017035:	e8 10 86 ff ff       	call   c000f64a <KePanic(char const*)>
c001703a:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c0017041:	83 c4 10             	add    esp,0x10
c0017044:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c001704b:	75 01                	jne    c001704e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c001704d:	fb                   	sti    
c001704e:	31 f6                	xor    esi,esi
c0017050:	e9 91 00 00 00       	jmp    c00170e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c0017055:	51                   	push   ecx
c0017056:	51                   	push   ecx
c0017057:	6a 01                	push   0x1
c0017059:	53                   	push   ebx
c001705a:	e8 f1 10 ff ff       	call   c0008150 <File::open(FileOpenMode)>
c001705f:	83 c4 10             	add    esp,0x10
c0017062:	85 c0                	test   eax,eax
c0017064:	74 27                	je     c001708d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1ab>
c0017066:	83 ec 0c             	sub    esp,0xc
c0017069:	68 5a 42 02 c0       	push   0xc002425a
c001706e:	e8 d7 85 ff ff       	call   c000f64a <KePanic(char const*)>
c0017073:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001707a:	83 c4 10             	add    esp,0x10
c001707d:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c0017084:	75 c8                	jne    c001704e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x16c>
c0017086:	fb                   	sti    
c0017087:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001708b:	eb 59                	jmp    c00170e6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x204>
c001708d:	0f b7 ff             	movzx  edi,di
c0017090:	50                   	push   eax
c0017091:	50                   	push   eax
c0017092:	0f b7 c5             	movzx  eax,bp
c0017095:	57                   	push   edi
c0017096:	50                   	push   eax
c0017097:	e8 be fb ff ff       	call   c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>
c001709c:	5a                   	pop    edx
c001709d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001709f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c00170a3:	51                   	push   ecx
c00170a4:	50                   	push   eax
c00170a5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170a9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00170ad:	53                   	push   ebx
c00170ae:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00170b1:	83 c4 14             	add    esp,0x14
c00170b4:	53                   	push   ebx
c00170b5:	e8 f4 10 ff ff       	call   c00081ae <File::close()>
c00170ba:	c6 05 29 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d729,0x0
c00170c1:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c00170c8:	83 c4 10             	add    esp,0x10
c00170cb:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c00170d2:	75 01                	jne    c00170d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x1f3>
c00170d4:	fb                   	sti    
c00170d5:	83 ec 0c             	sub    esp,0xc
c00170d8:	ff 35 2c d7 02 c0    	push   DWORD PTR ds:0xc002d72c
c00170de:	e8 b1 f4 ff ff       	call   c0016594 <unblockTask(ThreadControlBlock*)>
c00170e3:	83 c4 10             	add    esp,0x10
c00170e6:	83 c4 2c             	add    esp,0x2c
c00170e9:	89 f0                	mov    eax,esi
c00170eb:	5b                   	pop    ebx
c00170ec:	5e                   	pop    esi
c00170ed:	5f                   	pop    edi
c00170ee:	5d                   	pop    ebp
c00170ef:	c3                   	ret    

c00170f0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00170f0:	57                   	push   edi
c00170f1:	56                   	push   esi
c00170f2:	53                   	push   ebx
c00170f3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00170f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170fb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00170ff:	83 e8 06             	sub    eax,0x6
c0017102:	0f b7 c0             	movzx  eax,ax
c0017105:	50                   	push   eax
c0017106:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001710b:	50                   	push   eax
c001710c:	e8 49 fb ff ff       	call   c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>
c0017111:	5a                   	pop    edx
c0017112:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0017115:	59                   	pop    ecx
c0017116:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0017119:	8d 51 fa             	lea    edx,[ecx-0x6]
c001711c:	81 e2 ff ff 00 00    	and    edx,0xffff
c0017122:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0017125:	8d 56 02             	lea    edx,[esi+0x2]
c0017128:	66 89 10             	mov    WORD PTR [eax],dx
c001712b:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c001712f:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0017133:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0017136:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c001713a:	0f b6 f1             	movzx  esi,cl
c001713d:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017141:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017147:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c001714b:	0f b6 d5             	movzx  edx,ch
c001714e:	74 0a                	je     c001715a <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0017150:	c1 e2 08             	shl    edx,0x8
c0017153:	09 f2                	or     edx,esi
c0017155:	80 ce 02             	or     dh,0x2
c0017158:	eb 08                	jmp    c0017162 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c001715a:	c1 e2 08             	shl    edx,0x8
c001715d:	09 f2                	or     edx,esi
c001715f:	80 e6 fd             	and    dh,0xfd
c0017162:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0017166:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001716b:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001716f:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0017177:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c001717a:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0017182:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0017185:	5b                   	pop    ebx
c0017186:	5e                   	pop    esi
c0017187:	5f                   	pop    edi
c0017188:	c3                   	ret    

c0017189 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0017189:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001718e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0017193:	c1 e0 04             	shl    eax,0x4
c0017196:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0017199:	c3                   	ret    

c001719a <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001719a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001719f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171a4:	c1 e0 04             	shl    eax,0x4
c00171a7:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c00171ab:	c3                   	ret    

c00171ac <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c00171ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171b1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171b6:	c1 e0 04             	shl    eax,0x4
c00171b9:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c00171bc:	c3                   	ret    

c00171bd <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c00171bd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171c2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171c7:	c1 e0 04             	shl    eax,0x4
c00171ca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171ce:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c00171d1:	c3                   	ret    

c00171d2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c00171d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171dc:	c1 e0 04             	shl    eax,0x4
c00171df:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171e3:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00171e7:	c3                   	ret    

c00171e8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00171e8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00171ed:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00171f2:	c1 e0 04             	shl    eax,0x4
c00171f5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00171f9:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00171fc:	c3                   	ret    

c00171fd <Vm::faultHandler(regs*)>:
c00171fd:	55                   	push   ebp
c00171fe:	57                   	push   edi
c00171ff:	56                   	push   esi
c0017200:	53                   	push   ebx
c0017201:	83 ec 2c             	sub    esp,0x2c
c0017204:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017208:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001720b:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c001720f:	0f b7 f8             	movzx  edi,ax
c0017212:	52                   	push   edx
c0017213:	0f b7 c0             	movzx  eax,ax
c0017216:	50                   	push   eax
c0017217:	e8 3e fa ff ff       	call   c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>
c001721c:	5a                   	pop    edx
c001721d:	59                   	pop    ecx
c001721e:	89 c1                	mov    ecx,eax
c0017220:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017223:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017227:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c001722c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017230:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0017233:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017237:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c001723c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017240:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017244:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017248:	e8 0d fa ff ff       	call   c0016c5a <Vm::realToLinear(unsigned short, unsigned short)>
c001724d:	5e                   	pop    esi
c001724e:	be 06 00 00 00       	mov    esi,0x6
c0017253:	5d                   	pop    ebp
c0017254:	31 ed                	xor    ebp,ebp
c0017256:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001725b:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c001725e:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0017264:	0f 84 74 02 00 00    	je     c00174de <Vm::faultHandler(regs*)+0x2e1>
c001726a:	0f 87 94 00 00 00    	ja     c0017304 <Vm::faultHandler(regs*)+0x107>
c0017270:	83 fa 66             	cmp    edx,0x66
c0017273:	0f 84 e2 01 00 00    	je     c001745b <Vm::faultHandler(regs*)+0x25e>
c0017279:	77 47                	ja     c00172c2 <Vm::faultHandler(regs*)+0xc5>
c001727b:	83 fa 36             	cmp    edx,0x36
c001727e:	0f 84 ca 01 00 00    	je     c001744e <Vm::faultHandler(regs*)+0x251>
c0017284:	77 1a                	ja     c00172a0 <Vm::faultHandler(regs*)+0xa3>
c0017286:	83 fa 26             	cmp    edx,0x26
c0017289:	0f 84 98 01 00 00    	je     c0017427 <Vm::faultHandler(regs*)+0x22a>
c001728f:	83 fa 2e             	cmp    edx,0x2e
c0017292:	0f 85 21 06 00 00    	jne    c00178b9 <Vm::faultHandler(regs*)+0x6bc>
c0017298:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001729b:	31 f6                	xor    esi,esi
c001729d:	41                   	inc    ecx
c001729e:	eb bb                	jmp    c001725b <Vm::faultHandler(regs*)+0x5e>
c00172a0:	83 fa 64             	cmp    edx,0x64
c00172a3:	0f 84 8b 01 00 00    	je     c0017434 <Vm::faultHandler(regs*)+0x237>
c00172a9:	0f 87 92 01 00 00    	ja     c0017441 <Vm::faultHandler(regs*)+0x244>
c00172af:	83 fa 3e             	cmp    edx,0x3e
c00172b2:	0f 85 01 06 00 00    	jne    c00178b9 <Vm::faultHandler(regs*)+0x6bc>
c00172b8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172bb:	be 01 00 00 00       	mov    esi,0x1
c00172c0:	eb db                	jmp    c001729d <Vm::faultHandler(regs*)+0xa0>
c00172c2:	83 fa 6d             	cmp    edx,0x6d
c00172c5:	0f 84 34 03 00 00    	je     c00175ff <Vm::faultHandler(regs*)+0x402>
c00172cb:	77 17                	ja     c00172e4 <Vm::faultHandler(regs*)+0xe7>
c00172cd:	83 fa 67             	cmp    edx,0x67
c00172d0:	0f 84 92 01 00 00    	je     c0017468 <Vm::faultHandler(regs*)+0x26b>
c00172d6:	83 fa 6c             	cmp    edx,0x6c
c00172d9:	0f 84 b1 02 00 00    	je     c0017590 <Vm::faultHandler(regs*)+0x393>
c00172df:	e9 d5 05 00 00       	jmp    c00178b9 <Vm::faultHandler(regs*)+0x6bc>
c00172e4:	83 fa 6f             	cmp    edx,0x6f
c00172e7:	0f 84 3d 04 00 00    	je     c001772a <Vm::faultHandler(regs*)+0x52d>
c00172ed:	0f 82 9f 03 00 00    	jb     c0017692 <Vm::faultHandler(regs*)+0x495>
c00172f3:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c00172f9:	0f 84 76 01 00 00    	je     c0017475 <Vm::faultHandler(regs*)+0x278>
c00172ff:	e9 b5 05 00 00       	jmp    c00178b9 <Vm::faultHandler(regs*)+0x6bc>
c0017304:	81 fa ec 00 00 00    	cmp    edx,0xec
c001730a:	0f 84 51 05 00 00    	je     c0017861 <Vm::faultHandler(regs*)+0x664>
c0017310:	0f 87 a9 00 00 00    	ja     c00173bf <Vm::faultHandler(regs*)+0x1c2>
c0017316:	81 fa e4 00 00 00    	cmp    edx,0xe4
c001731c:	0f 84 d0 04 00 00    	je     c00177f2 <Vm::faultHandler(regs*)+0x5f5>
c0017322:	77 78                	ja     c001739c <Vm::faultHandler(regs*)+0x19f>
c0017324:	81 fa cd 00 00 00    	cmp    edx,0xcd
c001732a:	0f 84 0e 02 00 00    	je     c001753e <Vm::faultHandler(regs*)+0x341>
c0017330:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0017336:	0f 85 7d 05 00 00    	jne    c00178b9 <Vm::faultHandler(regs*)+0x6bc>
c001733c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0017340:	89 d1                	mov    ecx,edx
c0017342:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0017345:	c1 e1 08             	shl    ecx,0x8
c0017348:	09 ca                	or     edx,ecx
c001734a:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c001734d:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0017351:	89 d1                	mov    ecx,edx
c0017353:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0017357:	c1 e1 08             	shl    ecx,0x8
c001735a:	09 ca                	or     edx,ecx
c001735c:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c001735f:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0017363:	89 d1                	mov    ecx,edx
c0017365:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0017369:	c1 e1 08             	shl    ecx,0x8
c001736c:	09 ca                	or     edx,ecx
c001736e:	81 ca 00 02 02 00    	or     edx,0x20200
c0017374:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017377:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c001737b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017381:	d1 e8                	shr    eax,1
c0017383:	83 e0 01             	and    eax,0x1
c0017386:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017389:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001738c:	83 c0 06             	add    eax,0x6
c001738f:	25 ff ff 00 00       	and    eax,0xffff
c0017394:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017397:	e9 19 05 00 00       	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b8>
c001739c:	81 fa e6 00 00 00    	cmp    edx,0xe6
c00173a2:	0f 84 8f 04 00 00    	je     c0017837 <Vm::faultHandler(regs*)+0x63a>
c00173a8:	0f 82 60 04 00 00    	jb     c001780e <Vm::faultHandler(regs*)+0x611>
c00173ae:	81 fa e7 00 00 00    	cmp    edx,0xe7
c00173b4:	0f 84 94 04 00 00    	je     c001784e <Vm::faultHandler(regs*)+0x651>
c00173ba:	e9 fa 04 00 00       	jmp    c00178b9 <Vm::faultHandler(regs*)+0x6bc>
c00173bf:	81 fa ef 00 00 00    	cmp    edx,0xef
c00173c5:	0f 84 d7 04 00 00    	je     c00178a2 <Vm::faultHandler(regs*)+0x6a5>
c00173cb:	77 2e                	ja     c00173fb <Vm::faultHandler(regs*)+0x1fe>
c00173cd:	81 fa ed 00 00 00    	cmp    edx,0xed
c00173d3:	0f 84 a4 04 00 00    	je     c001787d <Vm::faultHandler(regs*)+0x680>
c00173d9:	81 fa ee 00 00 00    	cmp    edx,0xee
c00173df:	0f 85 d4 04 00 00    	jne    c00178b9 <Vm::faultHandler(regs*)+0x6bc>
c00173e5:	50                   	push   eax
c00173e6:	50                   	push   eax
c00173e7:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c00173eb:	50                   	push   eax
c00173ec:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00173f0:	50                   	push   eax
c00173f1:	e8 2e f8 ff ff       	call   c0016c24 <Vm::outbv(unsigned short, unsigned char)>
c00173f6:	e9 9f 04 00 00       	jmp    c001789a <Vm::faultHandler(regs*)+0x69d>
c00173fb:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0017401:	0f 84 6d 01 00 00    	je     c0017574 <Vm::faultHandler(regs*)+0x377>
c0017407:	81 fa fb 00 00 00    	cmp    edx,0xfb
c001740d:	0f 84 6f 01 00 00    	je     c0017582 <Vm::faultHandler(regs*)+0x385>
c0017413:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0017419:	0f 85 9a 04 00 00    	jne    c00178b9 <Vm::faultHandler(regs*)+0x6bc>
c001741f:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017422:	e9 76 fe ff ff       	jmp    c001729d <Vm::faultHandler(regs*)+0xa0>
c0017427:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001742a:	be 02 00 00 00       	mov    esi,0x2
c001742f:	e9 69 fe ff ff       	jmp    c001729d <Vm::faultHandler(regs*)+0xa0>
c0017434:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017437:	be 03 00 00 00       	mov    esi,0x3
c001743c:	e9 5c fe ff ff       	jmp    c001729d <Vm::faultHandler(regs*)+0xa0>
c0017441:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017444:	be 04 00 00 00       	mov    esi,0x4
c0017449:	e9 4f fe ff ff       	jmp    c001729d <Vm::faultHandler(regs*)+0xa0>
c001744e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0017451:	be 05 00 00 00       	mov    esi,0x5
c0017456:	e9 42 fe ff ff       	jmp    c001729d <Vm::faultHandler(regs*)+0xa0>
c001745b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001745e:	bd 01 00 00 00       	mov    ebp,0x1
c0017463:	e9 35 fe ff ff       	jmp    c001729d <Vm::faultHandler(regs*)+0xa0>
c0017468:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001746b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0017470:	e9 28 fe ff ff       	jmp    c001729d <Vm::faultHandler(regs*)+0xa0>
c0017475:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017478:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001747c:	83 e5 01             	and    ebp,0x1
c001747f:	74 30                	je     c00174b1 <Vm::faultHandler(regs*)+0x2b4>
c0017481:	83 e9 04             	sub    ecx,0x4
c0017484:	81 e2 ff 0d 00 00    	and    edx,0xdff
c001748a:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0017490:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0017493:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0017496:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001749c:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174a0:	0f 84 0c 04 00 00    	je     c00178b2 <Vm::faultHandler(regs*)+0x6b5>
c00174a6:	80 ce 02             	or     dh,0x2
c00174a9:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00174ac:	e9 01 04 00 00       	jmp    c00178b2 <Vm::faultHandler(regs*)+0x6b5>
c00174b1:	83 e9 02             	sub    ecx,0x2
c00174b4:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00174ba:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00174bd:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174c1:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00174c7:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00174cb:	74 05                	je     c00174d2 <Vm::faultHandler(regs*)+0x2d5>
c00174cd:	80 ce 02             	or     dh,0x2
c00174d0:	eb 03                	jmp    c00174d5 <Vm::faultHandler(regs*)+0x2d8>
c00174d2:	80 e6 fd             	and    dh,0xfd
c00174d5:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00174d9:	e9 d4 03 00 00       	jmp    c00178b2 <Vm::faultHandler(regs*)+0x6b5>
c00174de:	83 e5 01             	and    ebp,0x1
c00174e1:	74 2a                	je     c001750d <Vm::faultHandler(regs*)+0x310>
c00174e3:	8b 10                	mov    edx,DWORD PTR [eax]
c00174e5:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00174eb:	81 ca 00 02 02 00    	or     edx,0x20200
c00174f1:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00174f4:	8b 00                	mov    eax,DWORD PTR [eax]
c00174f6:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00174fc:	c1 e8 09             	shr    eax,0x9
c00174ff:	83 e0 01             	and    eax,0x1
c0017502:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0017505:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0017508:	83 c0 04             	add    eax,0x4
c001750b:	eb 24                	jmp    c0017531 <Vm::faultHandler(regs*)+0x334>
c001750d:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0017510:	81 ca 00 02 02 00    	or     edx,0x20200
c0017516:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0017519:	0f b7 00             	movzx  eax,WORD PTR [eax]
c001751c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0017522:	c1 e8 09             	shr    eax,0x9
c0017525:	83 e0 01             	and    eax,0x1
c0017528:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001752b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001752e:	83 c0 02             	add    eax,0x2
c0017531:	25 ff ff 00 00       	and    eax,0xffff
c0017536:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0017539:	e9 74 03 00 00       	jmp    c00178b2 <Vm::faultHandler(regs*)+0x6b5>
c001753e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017542:	3d ee 00 00 00       	cmp    eax,0xee
c0017547:	75 10                	jne    c0017559 <Vm::faultHandler(regs*)+0x35c>
c0017549:	83 ec 0c             	sub    esp,0xc
c001754c:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c001754f:	e8 70 f7 ff ff       	call   c0016cc4 <Vm::mainloop3(unsigned long)>
c0017554:	e9 44 03 00 00       	jmp    c001789d <Vm::faultHandler(regs*)+0x6a0>
c0017559:	83 ec 0c             	sub    esp,0xc
c001755c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017560:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017564:	51                   	push   ecx
c0017565:	50                   	push   eax
c0017566:	53                   	push   ebx
c0017567:	e8 84 fb ff ff       	call   c00170f0 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001756c:	83 c4 20             	add    esp,0x20
c001756f:	e9 41 03 00 00       	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b8>
c0017574:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017579:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001757d:	e9 30 03 00 00       	jmp    c00178b2 <Vm::faultHandler(regs*)+0x6b5>
c0017582:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017587:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c001758b:	e9 22 03 00 00       	jmp    c00178b2 <Vm::faultHandler(regs*)+0x6b5>
c0017590:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017593:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0017598:	74 2b                	je     c00175c5 <Vm::faultHandler(regs*)+0x3c8>
c001759a:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00175a1:	76 22                	jbe    c00175c5 <Vm::faultHandler(regs*)+0x3c8>
c00175a3:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00175a7:	50                   	push   eax
c00175a8:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00175ac:	50                   	push   eax
c00175ad:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00175b1:	50                   	push   eax
c00175b2:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00175b6:	50                   	push   eax
c00175b7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00175bb:	50                   	push   eax
c00175bc:	6a 6c                	push   0x6c
c00175be:	6a 6c                	push   0x6c
c00175c0:	e9 bd 01 00 00       	jmp    c0017782 <Vm::faultHandler(regs*)+0x585>
c00175c5:	83 ec 0c             	sub    esp,0xc
c00175c8:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00175cc:	0f b7 f6             	movzx  esi,si
c00175cf:	50                   	push   eax
c00175d0:	e8 3c f6 ff ff       	call   c0016c11 <Vm::inbv(unsigned short)>
c00175d5:	83 c4 0c             	add    esp,0xc
c00175d8:	0f b6 c0             	movzx  eax,al
c00175db:	50                   	push   eax
c00175dc:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c00175e0:	50                   	push   eax
c00175e1:	56                   	push   esi
c00175e2:	e8 d6 fb ff ff       	call   c00171bd <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c00175e7:	83 c4 10             	add    esp,0x10
c00175ea:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00175ed:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00175f1:	74 03                	je     c00175f6 <Vm::faultHandler(regs*)+0x3f9>
c00175f3:	48                   	dec    eax
c00175f4:	eb 01                	jmp    c00175f7 <Vm::faultHandler(regs*)+0x3fa>
c00175f6:	40                   	inc    eax
c00175f7:	0f b7 c0             	movzx  eax,ax
c00175fa:	e9 8b 00 00 00       	jmp    c001768a <Vm::faultHandler(regs*)+0x48d>
c00175ff:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017602:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017605:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001760a:	74 29                	je     c0017635 <Vm::faultHandler(regs*)+0x438>
c001760c:	3d ff ff 00 00       	cmp    eax,0xffff
c0017611:	76 22                	jbe    c0017635 <Vm::faultHandler(regs*)+0x438>
c0017613:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017617:	50                   	push   eax
c0017618:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001761c:	50                   	push   eax
c001761d:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017621:	50                   	push   eax
c0017622:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017626:	50                   	push   eax
c0017627:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001762b:	50                   	push   eax
c001762c:	6a 6d                	push   0x6d
c001762e:	6a 6d                	push   0x6d
c0017630:	e9 4d 01 00 00       	jmp    c0017782 <Vm::faultHandler(regs*)+0x585>
c0017635:	0f b7 c8             	movzx  ecx,ax
c0017638:	0f b7 f6             	movzx  esi,si
c001763b:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c001763e:	83 e5 01             	and    ebp,0x1
c0017641:	74 20                	je     c0017663 <Vm::faultHandler(regs*)+0x466>
c0017643:	ed                   	in     eax,dx
c0017644:	55                   	push   ebp
c0017645:	50                   	push   eax
c0017646:	51                   	push   ecx
c0017647:	56                   	push   esi
c0017648:	e8 9b fb ff ff       	call   c00171e8 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001764d:	83 c4 10             	add    esp,0x10
c0017650:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017653:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017657:	74 05                	je     c001765e <Vm::faultHandler(regs*)+0x461>
c0017659:	83 e8 04             	sub    eax,0x4
c001765c:	eb 27                	jmp    c0017685 <Vm::faultHandler(regs*)+0x488>
c001765e:	83 c0 04             	add    eax,0x4
c0017661:	eb 22                	jmp    c0017685 <Vm::faultHandler(regs*)+0x488>
c0017663:	66 ed                	in     ax,dx
c0017665:	0f b7 c0             	movzx  eax,ax
c0017668:	57                   	push   edi
c0017669:	50                   	push   eax
c001766a:	51                   	push   ecx
c001766b:	56                   	push   esi
c001766c:	e8 61 fb ff ff       	call   c00171d2 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017671:	83 c4 10             	add    esp,0x10
c0017674:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017677:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001767b:	74 05                	je     c0017682 <Vm::faultHandler(regs*)+0x485>
c001767d:	83 e8 02             	sub    eax,0x2
c0017680:	eb 03                	jmp    c0017685 <Vm::faultHandler(regs*)+0x488>
c0017682:	83 c0 02             	add    eax,0x2
c0017685:	25 ff ff 00 00       	and    eax,0xffff
c001768a:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c001768d:	e9 20 02 00 00       	jmp    c00178b2 <Vm::faultHandler(regs*)+0x6b5>
c0017692:	8d 46 ff             	lea    eax,[esi-0x1]
c0017695:	0f b6 f0             	movzx  esi,al
c0017698:	83 fe 05             	cmp    esi,0x5
c001769b:	77 23                	ja     c00176c0 <Vm::faultHandler(regs*)+0x4c3>
c001769d:	ff 24 b5 d0 42 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdbd30]
c00176a4:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00176a9:	eb 15                	jmp    c00176c0 <Vm::faultHandler(regs*)+0x4c3>
c00176ab:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00176af:	eb 0f                	jmp    c00176c0 <Vm::faultHandler(regs*)+0x4c3>
c00176b1:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00176b5:	eb 09                	jmp    c00176c0 <Vm::faultHandler(regs*)+0x4c3>
c00176b7:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00176bb:	eb 03                	jmp    c00176c0 <Vm::faultHandler(regs*)+0x4c3>
c00176bd:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00176c0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00176c3:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00176c8:	74 29                	je     c00176f3 <Vm::faultHandler(regs*)+0x4f6>
c00176ca:	3d ff ff 00 00       	cmp    eax,0xffff
c00176cf:	76 22                	jbe    c00176f3 <Vm::faultHandler(regs*)+0x4f6>
c00176d1:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00176d5:	50                   	push   eax
c00176d6:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00176da:	50                   	push   eax
c00176db:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00176df:	50                   	push   eax
c00176e0:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00176e4:	50                   	push   eax
c00176e5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00176e9:	50                   	push   eax
c00176ea:	6a 6e                	push   0x6e
c00176ec:	6a 6e                	push   0x6e
c00176ee:	e9 8f 00 00 00       	jmp    c0017782 <Vm::faultHandler(regs*)+0x585>
c00176f3:	0f b7 c0             	movzx  eax,ax
c00176f6:	52                   	push   edx
c00176f7:	52                   	push   edx
c00176f8:	50                   	push   eax
c00176f9:	57                   	push   edi
c00176fa:	e8 8a fa ff ff       	call   c0017189 <Vm::readByteFromReal(unsigned short, unsigned short)>
c00176ff:	59                   	pop    ecx
c0017700:	0f b6 c0             	movzx  eax,al
c0017703:	5e                   	pop    esi
c0017704:	50                   	push   eax
c0017705:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017709:	50                   	push   eax
c001770a:	e8 15 f5 ff ff       	call   c0016c24 <Vm::outbv(unsigned short, unsigned char)>
c001770f:	83 c4 10             	add    esp,0x10
c0017712:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017715:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017719:	74 03                	je     c001771e <Vm::faultHandler(regs*)+0x521>
c001771b:	48                   	dec    eax
c001771c:	eb 01                	jmp    c001771f <Vm::faultHandler(regs*)+0x522>
c001771e:	40                   	inc    eax
c001771f:	0f b7 c0             	movzx  eax,ax
c0017722:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017725:	e9 88 01 00 00       	jmp    c00178b2 <Vm::faultHandler(regs*)+0x6b5>
c001772a:	8d 46 ff             	lea    eax,[esi-0x1]
c001772d:	0f b6 f0             	movzx  esi,al
c0017730:	83 fe 05             	cmp    esi,0x5
c0017733:	77 1e                	ja     c0017753 <Vm::faultHandler(regs*)+0x556>
c0017735:	ff 24 b5 e8 42 02 c0 	jmp    DWORD PTR [esi*4-0x3ffdbd18]
c001773c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017740:	eb 11                	jmp    c0017753 <Vm::faultHandler(regs*)+0x556>
c0017742:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017745:	eb 0c                	jmp    c0017753 <Vm::faultHandler(regs*)+0x556>
c0017747:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001774a:	eb 07                	jmp    c0017753 <Vm::faultHandler(regs*)+0x556>
c001774c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001774f:	eb 02                	jmp    c0017753 <Vm::faultHandler(regs*)+0x556>
c0017751:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017753:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017756:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001775b:	74 37                	je     c0017794 <Vm::faultHandler(regs*)+0x597>
c001775d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017763:	76 2f                	jbe    c0017794 <Vm::faultHandler(regs*)+0x597>
c0017765:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0017769:	50                   	push   eax
c001776a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001776e:	50                   	push   eax
c001776f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017773:	50                   	push   eax
c0017774:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017778:	50                   	push   eax
c0017779:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001777d:	50                   	push   eax
c001777e:	6a 6f                	push   0x6f
c0017780:	6a 6f                	push   0x6f
c0017782:	68 73 42 02 c0       	push   0xc0024273
c0017787:	e8 d8 f7 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001778c:	83 c4 20             	add    esp,0x20
c001778f:	e9 83 01 00 00       	jmp    c0017917 <Vm::faultHandler(regs*)+0x71a>
c0017794:	0f b7 d7             	movzx  edx,di
c0017797:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c001779a:	0f b7 c6             	movzx  eax,si
c001779d:	81 e1 00 04 00 00    	and    ecx,0x400
c00177a3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00177a6:	83 e5 01             	and    ebp,0x1
c00177a9:	74 1d                	je     c00177c8 <Vm::faultHandler(regs*)+0x5cb>
c00177ab:	55                   	push   ebp
c00177ac:	55                   	push   ebp
c00177ad:	50                   	push   eax
c00177ae:	52                   	push   edx
c00177af:	e8 f8 f9 ff ff       	call   c00171ac <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00177b4:	83 c4 10             	add    esp,0x10
c00177b7:	89 fa                	mov    edx,edi
c00177b9:	ef                   	out    dx,eax
c00177ba:	85 c9                	test   ecx,ecx
c00177bc:	74 05                	je     c00177c3 <Vm::faultHandler(regs*)+0x5c6>
c00177be:	83 ee 04             	sub    esi,0x4
c00177c1:	eb 21                	jmp    c00177e4 <Vm::faultHandler(regs*)+0x5e7>
c00177c3:	83 c6 04             	add    esi,0x4
c00177c6:	eb 1c                	jmp    c00177e4 <Vm::faultHandler(regs*)+0x5e7>
c00177c8:	55                   	push   ebp
c00177c9:	55                   	push   ebp
c00177ca:	50                   	push   eax
c00177cb:	52                   	push   edx
c00177cc:	e8 c9 f9 ff ff       	call   c001719a <Vm::readWordFromReal(unsigned short, unsigned short)>
c00177d1:	83 c4 10             	add    esp,0x10
c00177d4:	89 fa                	mov    edx,edi
c00177d6:	66 ef                	out    dx,ax
c00177d8:	85 c9                	test   ecx,ecx
c00177da:	74 05                	je     c00177e1 <Vm::faultHandler(regs*)+0x5e4>
c00177dc:	83 ee 02             	sub    esi,0x2
c00177df:	eb 03                	jmp    c00177e4 <Vm::faultHandler(regs*)+0x5e7>
c00177e1:	83 c6 02             	add    esi,0x2
c00177e4:	81 e6 ff ff 00 00    	and    esi,0xffff
c00177ea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c00177ed:	e9 c0 00 00 00       	jmp    c00178b2 <Vm::faultHandler(regs*)+0x6b5>
c00177f2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00177f9:	83 ec 0c             	sub    esp,0xc
c00177fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017800:	50                   	push   eax
c0017801:	e8 0b f4 ff ff       	call   c0016c11 <Vm::inbv(unsigned short)>
c0017806:	0f b6 c0             	movzx  eax,al
c0017809:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001780c:	eb 3a                	jmp    c0017848 <Vm::faultHandler(regs*)+0x64b>
c001780e:	83 e5 01             	and    ebp,0x1
c0017811:	74 07                	je     c001781a <Vm::faultHandler(regs*)+0x61d>
c0017813:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017817:	ed                   	in     eax,dx
c0017818:	eb 14                	jmp    c001782e <Vm::faultHandler(regs*)+0x631>
c001781a:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c001781d:	66 31 f6             	xor    si,si
c0017820:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017823:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017827:	66 ed                	in     ax,dx
c0017829:	0f b7 c0             	movzx  eax,ax
c001782c:	09 f0                	or     eax,esi
c001782e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017831:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017835:	eb 7e                	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b8>
c0017837:	52                   	push   edx
c0017838:	52                   	push   edx
c0017839:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001783d:	50                   	push   eax
c001783e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017842:	50                   	push   eax
c0017843:	e8 dc f3 ff ff       	call   c0016c24 <Vm::outbv(unsigned short, unsigned char)>
c0017848:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001784c:	eb 4f                	jmp    c001789d <Vm::faultHandler(regs*)+0x6a0>
c001784e:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017851:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017855:	83 e5 01             	and    ebp,0x1
c0017858:	74 03                	je     c001785d <Vm::faultHandler(regs*)+0x660>
c001785a:	ef                   	out    dx,eax
c001785b:	eb d4                	jmp    c0017831 <Vm::faultHandler(regs*)+0x634>
c001785d:	66 ef                	out    dx,ax
c001785f:	eb d0                	jmp    c0017831 <Vm::faultHandler(regs*)+0x634>
c0017861:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0017868:	83 ec 0c             	sub    esp,0xc
c001786b:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001786f:	50                   	push   eax
c0017870:	e8 9c f3 ff ff       	call   c0016c11 <Vm::inbv(unsigned short)>
c0017875:	0f b6 c0             	movzx  eax,al
c0017878:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001787b:	eb 1d                	jmp    c001789a <Vm::faultHandler(regs*)+0x69d>
c001787d:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017880:	83 e5 01             	and    ebp,0x1
c0017883:	74 03                	je     c0017888 <Vm::faultHandler(regs*)+0x68b>
c0017885:	ed                   	in     eax,dx
c0017886:	eb 0d                	jmp    c0017895 <Vm::faultHandler(regs*)+0x698>
c0017888:	66 ed                	in     ax,dx
c001788a:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c001788d:	0f b7 c0             	movzx  eax,ax
c0017890:	66 31 d2             	xor    dx,dx
c0017893:	09 d0                	or     eax,edx
c0017895:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017898:	eb 18                	jmp    c00178b2 <Vm::faultHandler(regs*)+0x6b5>
c001789a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001789d:	83 c4 10             	add    esp,0x10
c00178a0:	eb 13                	jmp    c00178b5 <Vm::faultHandler(regs*)+0x6b8>
c00178a2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00178a5:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00178a8:	83 e5 01             	and    ebp,0x1
c00178ab:	74 03                	je     c00178b0 <Vm::faultHandler(regs*)+0x6b3>
c00178ad:	ef                   	out    dx,eax
c00178ae:	eb 02                	jmp    c00178b2 <Vm::faultHandler(regs*)+0x6b5>
c00178b0:	66 ef                	out    dx,ax
c00178b2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00178b5:	b0 01                	mov    al,0x1
c00178b7:	eb 60                	jmp    c0017919 <Vm::faultHandler(regs*)+0x71c>
c00178b9:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00178bd:	50                   	push   eax
c00178be:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00178c2:	50                   	push   eax
c00178c3:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00178c7:	50                   	push   eax
c00178c8:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00178cc:	50                   	push   eax
c00178cd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00178d1:	50                   	push   eax
c00178d2:	52                   	push   edx
c00178d3:	52                   	push   edx
c00178d4:	68 a0 42 02 c0       	push   0xc00242a0
c00178d9:	e8 86 f6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00178de:	83 c4 20             	add    esp,0x20
c00178e1:	83 ec 0c             	sub    esp,0xc
c00178e4:	6a 60                	push   0x60
c00178e6:	e8 26 f3 ff ff       	call   c0016c11 <Vm::inbv(unsigned short)>
c00178eb:	83 c4 10             	add    esp,0x10
c00178ee:	0f b6 d0             	movzx  edx,al
c00178f1:	83 fa 1c             	cmp    edx,0x1c
c00178f4:	74 05                	je     c00178fb <Vm::faultHandler(regs*)+0x6fe>
c00178f6:	83 fa 5a             	cmp    edx,0x5a
c00178f9:	75 e6                	jne    c00178e1 <Vm::faultHandler(regs*)+0x6e4>
c00178fb:	0f b6 c0             	movzx  eax,al
c00178fe:	83 f8 1c             	cmp    eax,0x1c
c0017901:	74 05                	je     c0017908 <Vm::faultHandler(regs*)+0x70b>
c0017903:	83 f8 5a             	cmp    eax,0x5a
c0017906:	75 0f                	jne    c0017917 <Vm::faultHandler(regs*)+0x71a>
c0017908:	83 ec 0c             	sub    esp,0xc
c001790b:	6a 60                	push   0x60
c001790d:	e8 ff f2 ff ff       	call   c0016c11 <Vm::inbv(unsigned short)>
c0017912:	83 c4 10             	add    esp,0x10
c0017915:	eb e4                	jmp    c00178fb <Vm::faultHandler(regs*)+0x6fe>
c0017917:	31 c0                	xor    eax,eax
c0017919:	83 c4 2c             	add    esp,0x2c
c001791c:	5b                   	pop    ebx
c001791d:	5e                   	pop    esi
c001791e:	5f                   	pop    edi
c001791f:	5d                   	pop    ebp
c0017920:	c3                   	ret    
c0017921:	90                   	nop

c0017922 <noCopro(unsigned long)>:
c0017922:	c3                   	ret    
c0017923:	90                   	nop

c0017924 <CPU::close(int, int, void*)>:
c0017924:	31 c0                	xor    eax,eax
c0017926:	c3                   	ret    

c0017927 <x86ReadCMOS(unsigned char)>:
c0017927:	83 ec 14             	sub    esp,0x14
c001792a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001792e:	88 04 24             	mov    BYTE PTR [esp],al
c0017931:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017936:	0f b6 c0             	movzx  eax,al
c0017939:	85 c0                	test   eax,eax
c001793b:	74 04                	je     c0017941 <x86ReadCMOS(unsigned char)+0x1a>
c001793d:	b2 00                	mov    dl,0x0
c001793f:	eb 02                	jmp    c0017943 <x86ReadCMOS(unsigned char)+0x1c>
c0017941:	b2 80                	mov    dl,0x80
c0017943:	8a 04 24             	mov    al,BYTE PTR [esp]
c0017946:	09 d0                	or     eax,edx
c0017948:	0f b6 c0             	movzx  eax,al
c001794b:	66 c7 44 24 0e 70 00 	mov    WORD PTR [esp+0xe],0x70
c0017952:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017956:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001795a:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c001795f:	ee                   	out    dx,al
c0017960:	66 c7 44 24 12 71 00 	mov    WORD PTR [esp+0x12],0x71
c0017967:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001796c:	89 c2                	mov    edx,eax
c001796e:	ec                   	in     al,dx
c001796f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0017973:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0017977:	83 c4 14             	add    esp,0x14
c001797a:	c3                   	ret    

c001797b <x86WriteCMOS(unsigned char, unsigned char)>:
c001797b:	83 ec 18             	sub    esp,0x18
c001797e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017982:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017986:	88 54 24 04          	mov    BYTE PTR [esp+0x4],dl
c001798a:	88 04 24             	mov    BYTE PTR [esp],al
c001798d:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0017992:	0f b6 c0             	movzx  eax,al
c0017995:	85 c0                	test   eax,eax
c0017997:	74 04                	je     c001799d <x86WriteCMOS(unsigned char, unsigned char)+0x22>
c0017999:	b2 00                	mov    dl,0x0
c001799b:	eb 02                	jmp    c001799f <x86WriteCMOS(unsigned char, unsigned char)+0x24>
c001799d:	b2 80                	mov    dl,0x80
c001799f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00179a3:	09 d0                	or     eax,edx
c00179a5:	0f b6 c0             	movzx  eax,al
c00179a8:	66 c7 44 24 12 70 00 	mov    WORD PTR [esp+0x12],0x70
c00179af:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00179b3:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00179b7:	66 8b 54 24 12       	mov    dx,WORD PTR [esp+0x12]
c00179bc:	ee                   	out    dx,al
c00179bd:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c00179c1:	66 c7 44 24 16 71 00 	mov    WORD PTR [esp+0x16],0x71
c00179c8:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00179cc:	8a 44 24 15          	mov    al,BYTE PTR [esp+0x15]
c00179d0:	66 8b 54 24 16       	mov    dx,WORD PTR [esp+0x16]
c00179d5:	ee                   	out    dx,al
c00179d6:	90                   	nop
c00179d7:	83 c4 18             	add    esp,0x18
c00179da:	c3                   	ret    

c00179db <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>:
c00179db:	60                   	pusha  
c00179dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00179e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179e4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00179e8:	9c                   	pushf  
c00179e9:	fa                   	cli    
c00179ea:	0f 09                	wbinvd 
c00179ec:	0f 30                	wrmsr  
c00179ee:	9d                   	popf   
c00179ef:	89 c2                	mov    edx,eax
c00179f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179f5:	89 10                	mov    DWORD PTR [eax],edx
c00179f7:	61                   	popa   
c00179f8:	90                   	nop
c00179f9:	c3                   	ret    

c00179fa <AMD_K6_read_msr(unsigned int, REGS*)>:
c00179fa:	60                   	pusha  
c00179fb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00179ff:	89 c1                	mov    ecx,eax
c0017a01:	9c                   	pushf  
c0017a02:	fa                   	cli    
c0017a03:	0f 09                	wbinvd 
c0017a05:	31 c0                	xor    eax,eax
c0017a07:	31 d2                	xor    edx,edx
c0017a09:	0f 32                	rdmsr  
c0017a0b:	9d                   	popf   
c0017a0c:	89 c2                	mov    edx,eax
c0017a0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a12:	89 10                	mov    DWORD PTR [eax],edx
c0017a14:	61                   	popa   
c0017a15:	90                   	nop
c0017a16:	c3                   	ret    

c0017a17 <AMD_K6_writeback(int, int, int)>:
c0017a17:	83 ec 20             	sub    esp,0x20
c0017a1a:	a1 d4 cd 02 c0       	mov    eax,ds:0xc002cdd4
c0017a1f:	c1 e8 14             	shr    eax,0x14
c0017a22:	c1 e8 02             	shr    eax,0x2
c0017a25:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017a29:	83 7c 24 24 05       	cmp    DWORD PTR [esp+0x24],0x5
c0017a2e:	0f 85 9e 00 00 00    	jne    c0017ad2 <AMD_K6_writeback(int, int, int)+0xbb>
c0017a34:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a38:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017a3c:	83 7c 24 28 08       	cmp    DWORD PTR [esp+0x28],0x8
c0017a41:	75 19                	jne    c0017a5c <AMD_K6_writeback(int, int, int)+0x45>
c0017a43:	83 7c 24 2c 07       	cmp    DWORD PTR [esp+0x2c],0x7
c0017a48:	7f 0a                	jg     c0017a54 <AMD_K6_writeback(int, int, int)+0x3d>
c0017a4a:	c7 44 24 1c 07 00 00 00 	mov    DWORD PTR [esp+0x1c],0x7
c0017a52:	eb 08                	jmp    c0017a5c <AMD_K6_writeback(int, int, int)+0x45>
c0017a54:	c7 44 24 1c 09 00 00 00 	mov    DWORD PTR [esp+0x1c],0x9
c0017a5c:	83 7c 24 1c 06       	cmp    DWORD PTR [esp+0x1c],0x6
c0017a61:	7c 6e                	jl     c0017ad1 <AMD_K6_writeback(int, int, int)+0xba>
c0017a63:	83 7c 24 1c 07       	cmp    DWORD PTR [esp+0x1c],0x7
c0017a68:	7e 09                	jle    c0017a73 <AMD_K6_writeback(int, int, int)+0x5c>
c0017a6a:	83 7c 24 1c 09       	cmp    DWORD PTR [esp+0x1c],0x9
c0017a6f:	74 36                	je     c0017aa7 <AMD_K6_writeback(int, int, int)+0x90>
c0017a71:	eb 5e                	jmp    c0017ad1 <AMD_K6_writeback(int, int, int)+0xba>
c0017a73:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017a77:	50                   	push   eax
c0017a78:	68 82 00 00 c0       	push   0xc0000082
c0017a7d:	e8 78 ff ff ff       	call   c00179fa <AMD_K6_read_msr(unsigned int, REGS*)>
c0017a82:	83 c4 08             	add    esp,0x8
c0017a85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017a89:	01 c0                	add    eax,eax
c0017a8b:	83 e0 7f             	and    eax,0x7f
c0017a8e:	89 c2                	mov    edx,eax
c0017a90:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017a94:	50                   	push   eax
c0017a95:	6a 00                	push   0x0
c0017a97:	52                   	push   edx
c0017a98:	68 82 00 00 c0       	push   0xc0000082
c0017a9d:	e8 39 ff ff ff       	call   c00179db <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017aa2:	83 c4 10             	add    esp,0x10
c0017aa5:	eb 2b                	jmp    c0017ad2 <AMD_K6_writeback(int, int, int)+0xbb>
c0017aa7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017aab:	50                   	push   eax
c0017aac:	68 82 00 00 c0       	push   0xc0000082
c0017ab1:	e8 44 ff ff ff       	call   c00179fa <AMD_K6_read_msr(unsigned int, REGS*)>
c0017ab6:	83 c4 08             	add    esp,0x8
c0017ab9:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017abd:	50                   	push   eax
c0017abe:	6a 00                	push   0x0
c0017ac0:	6a 00                	push   0x0
c0017ac2:	68 82 00 00 c0       	push   0xc0000082
c0017ac7:	e8 0f ff ff ff       	call   c00179db <AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, REGS*)>
c0017acc:	83 c4 10             	add    esp,0x10
c0017acf:	eb 01                	jmp    c0017ad2 <AMD_K6_writeback(int, int, int)+0xbb>
c0017ad1:	90                   	nop
c0017ad2:	90                   	nop
c0017ad3:	83 c4 20             	add    esp,0x20
c0017ad6:	c3                   	ret    

c0017ad7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0017ad7:	56                   	push   esi
c0017ad8:	53                   	push   ebx
c0017ad9:	a1 40 5c 02 c0       	mov    eax,ds:0xc0025c40
c0017ade:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017ae2:	75 32                	jne    c0017b16 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0017ae4:	8b 15 80 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d780
c0017aea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aee:	89 10                	mov    DWORD PTR [eax],edx
c0017af0:	8b 15 7c d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d77c
c0017af6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017afa:	89 10                	mov    DWORD PTR [eax],edx
c0017afc:	8b 15 78 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d778
c0017b02:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b06:	89 10                	mov    DWORD PTR [eax],edx
c0017b08:	8b 15 74 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d774
c0017b0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b12:	89 10                	mov    DWORD PTR [eax],edx
c0017b14:	eb 5c                	jmp    c0017b72 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x9b>
c0017b16:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b1a:	ba 00 00 00 00       	mov    edx,0x0
c0017b1f:	89 d1                	mov    ecx,edx
c0017b21:	0f a2                	cpuid  
c0017b23:	89 c6                	mov    esi,eax
c0017b25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b29:	89 30                	mov    DWORD PTR [eax],esi
c0017b2b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b2f:	89 18                	mov    DWORD PTR [eax],ebx
c0017b31:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b35:	89 08                	mov    DWORD PTR [eax],ecx
c0017b37:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b3b:	89 10                	mov    DWORD PTR [eax],edx
c0017b3d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b41:	a3 40 5c 02 c0       	mov    ds:0xc0025c40,eax
c0017b46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b4c:	a3 80 d7 02 c0       	mov    ds:0xc002d780,eax
c0017b51:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b55:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b57:	a3 7c d7 02 c0       	mov    ds:0xc002d77c,eax
c0017b5c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017b60:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b62:	a3 78 d7 02 c0       	mov    ds:0xc002d778,eax
c0017b67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017b6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0017b6d:	a3 74 d7 02 c0       	mov    ds:0xc002d774,eax
c0017b72:	5b                   	pop    ebx
c0017b73:	5e                   	pop    esi
c0017b74:	c3                   	ret    

c0017b75 <cpuidCheckEDX(unsigned int)>:
c0017b75:	83 ec 10             	sub    esp,0x10
c0017b78:	89 e0                	mov    eax,esp
c0017b7a:	50                   	push   eax
c0017b7b:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017b7f:	50                   	push   eax
c0017b80:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017b84:	50                   	push   eax
c0017b85:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017b89:	50                   	push   eax
c0017b8a:	6a 01                	push   0x1
c0017b8c:	e8 46 ff ff ff       	call   c0017ad7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017b91:	83 c4 14             	add    esp,0x14
c0017b94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017b97:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017b9b:	0f 95 c0             	setne  al
c0017b9e:	83 c4 10             	add    esp,0x10
c0017ba1:	c3                   	ret    

c0017ba2 <cpuidCheckECX(unsigned int)>:
c0017ba2:	83 ec 10             	sub    esp,0x10
c0017ba5:	89 e0                	mov    eax,esp
c0017ba7:	50                   	push   eax
c0017ba8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017bac:	50                   	push   eax
c0017bad:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017bb1:	50                   	push   eax
c0017bb2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017bb6:	50                   	push   eax
c0017bb7:	6a 01                	push   0x1
c0017bb9:	e8 19 ff ff ff       	call   c0017ad7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017bbe:	83 c4 14             	add    esp,0x14
c0017bc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017bc5:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017bc9:	0f 95 c0             	setne  al
c0017bcc:	83 c4 10             	add    esp,0x10
c0017bcf:	c3                   	ret    

c0017bd0 <cpuidCheckExtendedEBX(unsigned int)>:
c0017bd0:	83 ec 10             	sub    esp,0x10
c0017bd3:	89 e0                	mov    eax,esp
c0017bd5:	50                   	push   eax
c0017bd6:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017bda:	50                   	push   eax
c0017bdb:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017bdf:	50                   	push   eax
c0017be0:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017be4:	50                   	push   eax
c0017be5:	6a 07                	push   0x7
c0017be7:	e8 eb fe ff ff       	call   c0017ad7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017bec:	83 c4 14             	add    esp,0x14
c0017bef:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bf3:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017bf7:	0f 95 c0             	setne  al
c0017bfa:	83 c4 10             	add    esp,0x10
c0017bfd:	c3                   	ret    

c0017bfe <cpuidCheckExtendedECX(unsigned int)>:
c0017bfe:	83 ec 10             	sub    esp,0x10
c0017c01:	89 e0                	mov    eax,esp
c0017c03:	50                   	push   eax
c0017c04:	8d 44 24 08          	lea    eax,[esp+0x8]
c0017c08:	50                   	push   eax
c0017c09:	8d 44 24 10          	lea    eax,[esp+0x10]
c0017c0d:	50                   	push   eax
c0017c0e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c12:	50                   	push   eax
c0017c13:	6a 07                	push   0x7
c0017c15:	e8 bd fe ff ff       	call   c0017ad7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017c1a:	83 c4 14             	add    esp,0x14
c0017c1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c21:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c0017c25:	0f 95 c0             	setne  al
c0017c28:	83 c4 10             	add    esp,0x10
c0017c2b:	c3                   	ret    

c0017c2c <HalDetectFeatures()>:
c0017c2c:	57                   	push   edi
c0017c2d:	56                   	push   esi
c0017c2e:	53                   	push   ebx
c0017c2f:	81 ec 90 00 00 00    	sub    esp,0x90
c0017c35:	83 ec 04             	sub    esp,0x4
c0017c38:	6a 08                	push   0x8
c0017c3a:	6a 00                	push   0x0
c0017c3c:	68 ac d7 02 c0       	push   0xc002d7ac
c0017c41:	e8 aa 88 fe ff       	call   c00004f0 <memset>
c0017c46:	83 c4 10             	add    esp,0x10
c0017c49:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017c4e:	83 c8 04             	or     eax,0x4
c0017c51:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017c56:	e8 9e 85 fe ff       	call   c00001f9 <detectCPUID>
c0017c5b:	85 c0                	test   eax,eax
c0017c5d:	0f 95 c0             	setne  al
c0017c60:	83 e0 01             	and    eax,0x1
c0017c63:	83 e0 01             	and    eax,0x1
c0017c66:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017c69:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017c6e:	83 e0 fd             	and    eax,0xfffffffd
c0017c71:	88 c2                	mov    dl,al
c0017c73:	88 c8                	mov    al,cl
c0017c75:	09 d0                	or     eax,edx
c0017c77:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017c7c:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017c81:	83 e0 02             	and    eax,0x2
c0017c84:	0f b6 c0             	movzx  eax,al
c0017c87:	85 c0                	test   eax,eax
c0017c89:	0f 84 7f 02 00 00    	je     c0017f0e <HalDetectFeatures()+0x2e2>
c0017c8f:	83 ec 0c             	sub    esp,0xc
c0017c92:	6a 20                	push   0x20
c0017c94:	e8 dc fe ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c0017c99:	83 c4 10             	add    esp,0x10
c0017c9c:	83 e0 01             	and    eax,0x1
c0017c9f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017ca6:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017cab:	83 e0 f7             	and    eax,0xfffffff7
c0017cae:	88 c2                	mov    dl,al
c0017cb0:	88 c8                	mov    al,cl
c0017cb2:	09 d0                	or     eax,edx
c0017cb4:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017cb9:	83 ec 0c             	sub    esp,0xc
c0017cbc:	68 00 00 00 04       	push   0x4000000
c0017cc1:	e8 af fe ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c0017cc6:	83 c4 10             	add    esp,0x10
c0017cc9:	89 c1                	mov    ecx,eax
c0017ccb:	83 e1 01             	and    ecx,0x1
c0017cce:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017cd3:	83 e0 fe             	and    eax,0xfffffffe
c0017cd6:	88 c2                	mov    dl,al
c0017cd8:	88 c8                	mov    al,cl
c0017cda:	09 d0                	or     eax,edx
c0017cdc:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017ce1:	83 ec 0c             	sub    esp,0xc
c0017ce4:	68 80 00 00 00       	push   0x80
c0017ce9:	e8 87 fe ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c0017cee:	83 c4 10             	add    esp,0x10
c0017cf1:	89 c1                	mov    ecx,eax
c0017cf3:	c1 e1 07             	shl    ecx,0x7
c0017cf6:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017cfb:	83 e0 7f             	and    eax,0x7f
c0017cfe:	88 c2                	mov    dl,al
c0017d00:	88 c8                	mov    al,cl
c0017d02:	09 d0                	or     eax,edx
c0017d04:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017d09:	83 ec 0c             	sub    esp,0xc
c0017d0c:	68 00 00 80 00       	push   0x800000
c0017d11:	e8 5f fe ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c0017d16:	83 c4 10             	add    esp,0x10
c0017d19:	83 e0 01             	and    eax,0x1
c0017d1c:	89 c1                	mov    ecx,eax
c0017d1e:	c1 e1 05             	shl    ecx,0x5
c0017d21:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017d26:	83 e0 df             	and    eax,0xffffffdf
c0017d29:	88 c2                	mov    dl,al
c0017d2b:	88 c8                	mov    al,cl
c0017d2d:	09 d0                	or     eax,edx
c0017d2f:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017d34:	a1 c4 cd 02 c0       	mov    eax,ds:0xc002cdc4
c0017d39:	83 e0 01             	and    eax,0x1
c0017d3c:	75 0c                	jne    c0017d4a <HalDetectFeatures()+0x11e>
c0017d3e:	a1 c4 cd 02 c0       	mov    eax,ds:0xc002cdc4
c0017d43:	25 00 04 00 00       	and    eax,0x400
c0017d48:	74 0f                	je     c0017d59 <HalDetectFeatures()+0x12d>
c0017d4a:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017d4f:	83 e0 fe             	and    eax,0xfffffffe
c0017d52:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017d57:	eb 28                	jmp    c0017d81 <HalDetectFeatures()+0x155>
c0017d59:	83 ec 0c             	sub    esp,0xc
c0017d5c:	68 00 02 00 00       	push   0x200
c0017d61:	e8 0f fe ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c0017d66:	83 c4 10             	add    esp,0x10
c0017d69:	89 c1                	mov    ecx,eax
c0017d6b:	83 e1 01             	and    ecx,0x1
c0017d6e:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017d73:	83 e0 fe             	and    eax,0xfffffffe
c0017d76:	88 c2                	mov    dl,al
c0017d78:	88 c8                	mov    al,cl
c0017d7a:	09 d0                	or     eax,edx
c0017d7c:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017d81:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017d86:	83 e0 01             	and    eax,0x1
c0017d89:	0f b6 c0             	movzx  eax,al
c0017d8c:	85 c0                	test   eax,eax
c0017d8e:	74 1c                	je     c0017dac <HalDetectFeatures()+0x180>
c0017d90:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017d95:	83 e0 08             	and    eax,0x8
c0017d98:	0f b6 c0             	movzx  eax,al
c0017d9b:	85 c0                	test   eax,eax
c0017d9d:	75 0d                	jne    c0017dac <HalDetectFeatures()+0x180>
c0017d9f:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017da4:	83 e0 fe             	and    eax,0xfffffffe
c0017da7:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017dac:	83 ec 0c             	sub    esp,0xc
c0017daf:	68 00 43 02 c0       	push   0xc0024300
c0017db4:	e8 ab f1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0017db9:	83 c4 10             	add    esp,0x10
c0017dbc:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017dc1:	83 e0 fe             	and    eax,0xfffffffe
c0017dc4:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017dc9:	c6 84 24 8f 00 00 00 01 	mov    BYTE PTR [esp+0x8f],0x1
c0017dd1:	c6 84 24 8f 00 00 00 00 	mov    BYTE PTR [esp+0x8f],0x0
c0017dd9:	0f b6 84 24 8f 00 00 00 	movzx  eax,BYTE PTR [esp+0x8f]
c0017de1:	85 c0                	test   eax,eax
c0017de3:	0f 84 ab 00 00 00    	je     c0017e94 <HalDetectFeatures()+0x268>
c0017de9:	83 ec 0c             	sub    esp,0xc
c0017dec:	6a 01                	push   0x1
c0017dee:	e8 af fd ff ff       	call   c0017ba2 <cpuidCheckECX(unsigned int)>
c0017df3:	83 c4 10             	add    esp,0x10
c0017df6:	83 e0 01             	and    eax,0x1
c0017df9:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0017dfc:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017e01:	83 e0 fd             	and    eax,0xfffffffd
c0017e04:	88 c2                	mov    dl,al
c0017e06:	88 c8                	mov    al,cl
c0017e08:	09 d0                	or     eax,edx
c0017e0a:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017e0f:	83 ec 0c             	sub    esp,0xc
c0017e12:	68 00 02 00 00       	push   0x200
c0017e17:	e8 86 fd ff ff       	call   c0017ba2 <cpuidCheckECX(unsigned int)>
c0017e1c:	83 c4 10             	add    esp,0x10
c0017e1f:	83 e0 01             	and    eax,0x1
c0017e22:	89 c1                	mov    ecx,eax
c0017e24:	c1 e1 04             	shl    ecx,0x4
c0017e27:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017e2c:	83 e0 ef             	and    eax,0xffffffef
c0017e2f:	88 c2                	mov    dl,al
c0017e31:	88 c8                	mov    al,cl
c0017e33:	09 d0                	or     eax,edx
c0017e35:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017e3a:	83 ec 0c             	sub    esp,0xc
c0017e3d:	68 00 00 08 00       	push   0x80000
c0017e42:	e8 5b fd ff ff       	call   c0017ba2 <cpuidCheckECX(unsigned int)>
c0017e47:	83 c4 10             	add    esp,0x10
c0017e4a:	83 e0 01             	and    eax,0x1
c0017e4d:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0017e54:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017e59:	83 e0 fb             	and    eax,0xfffffffb
c0017e5c:	88 c2                	mov    dl,al
c0017e5e:	88 c8                	mov    al,cl
c0017e60:	09 d0                	or     eax,edx
c0017e62:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017e67:	83 ec 0c             	sub    esp,0xc
c0017e6a:	68 00 00 10 00       	push   0x100000
c0017e6f:	e8 2e fd ff ff       	call   c0017ba2 <cpuidCheckECX(unsigned int)>
c0017e74:	83 c4 10             	add    esp,0x10
c0017e77:	83 e0 01             	and    eax,0x1
c0017e7a:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017e81:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0017e86:	83 e0 f7             	and    eax,0xfffffff7
c0017e89:	88 c2                	mov    dl,al
c0017e8b:	88 c8                	mov    al,cl
c0017e8d:	09 d0                	or     eax,edx
c0017e8f:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c0017e94:	83 ec 0c             	sub    esp,0xc
c0017e97:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017e9b:	50                   	push   eax
c0017e9c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017ea0:	50                   	push   eax
c0017ea1:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017ea5:	50                   	push   eax
c0017ea6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017eaa:	50                   	push   eax
c0017eab:	68 00 00 00 80       	push   0x80000000
c0017eb0:	e8 22 fc ff ff       	call   c0017ad7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017eb5:	83 c4 20             	add    esp,0x20
c0017eb8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ebc:	3d 00 00 00 80       	cmp    eax,0x80000000
c0017ec1:	76 4b                	jbe    c0017f0e <HalDetectFeatures()+0x2e2>
c0017ec3:	83 ec 0c             	sub    esp,0xc
c0017ec6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0017eca:	50                   	push   eax
c0017ecb:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0017ecf:	50                   	push   eax
c0017ed0:	8d 44 24 34          	lea    eax,[esp+0x34]
c0017ed4:	50                   	push   eax
c0017ed5:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0017ed9:	50                   	push   eax
c0017eda:	68 01 00 00 80       	push   0x80000001
c0017edf:	e8 f3 fb ff ff       	call   c0017ad7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0017ee4:	83 c4 20             	add    esp,0x20
c0017ee7:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017eec:	83 e0 bf             	and    eax,0xffffffbf
c0017eef:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017ef4:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017ef9:	83 e0 fd             	and    eax,0xfffffffd
c0017efc:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017f01:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017f06:	83 e0 fe             	and    eax,0xfffffffe
c0017f09:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017f0e:	a1 c4 cd 02 c0       	mov    eax,ds:0xc002cdc4
c0017f13:	25 00 04 00 00       	and    eax,0x400
c0017f18:	74 0d                	je     c0017f27 <HalDetectFeatures()+0x2fb>
c0017f1a:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017f1f:	83 e0 fb             	and    eax,0xfffffffb
c0017f22:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0017f27:	c6 05 a8 d7 02 c0 01 	mov    BYTE PTR ds:0xc002d7a8,0x1
c0017f2e:	83 ec 04             	sub    esp,0x4
c0017f31:	6a 0d                	push   0xd
c0017f33:	6a 00                	push   0x0
c0017f35:	68 90 d7 02 c0       	push   0xc002d790
c0017f3a:	e8 b1 85 fe ff       	call   c00004f0 <memset>
c0017f3f:	83 c4 10             	add    esp,0x10
c0017f42:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0017f47:	83 e0 02             	and    eax,0x2
c0017f4a:	0f b6 c0             	movzx  eax,al
c0017f4d:	85 c0                	test   eax,eax
c0017f4f:	0f 84 16 08 00 00    	je     c001876b <HalDetectFeatures()+0xb3f>
c0017f55:	83 ec 0c             	sub    esp,0xc
c0017f58:	6a 10                	push   0x10
c0017f5a:	e8 16 fc ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c0017f5f:	83 c4 10             	add    esp,0x10
c0017f62:	83 e0 01             	and    eax,0x1
c0017f65:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0017f6c:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017f71:	83 e0 f7             	and    eax,0xfffffff7
c0017f74:	88 c2                	mov    dl,al
c0017f76:	88 c8                	mov    al,cl
c0017f78:	09 d0                	or     eax,edx
c0017f7a:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017f7f:	83 ec 0c             	sub    esp,0xc
c0017f82:	6a 40                	push   0x40
c0017f84:	e8 ec fb ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c0017f89:	83 c4 10             	add    esp,0x10
c0017f8c:	83 e0 01             	and    eax,0x1
c0017f8f:	89 c1                	mov    ecx,eax
c0017f91:	c1 e1 04             	shl    ecx,0x4
c0017f94:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017f99:	83 e0 ef             	and    eax,0xffffffef
c0017f9c:	88 c2                	mov    dl,al
c0017f9e:	88 c8                	mov    al,cl
c0017fa0:	09 d0                	or     eax,edx
c0017fa2:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017fa7:	83 ec 0c             	sub    esp,0xc
c0017faa:	6a 08                	push   0x8
c0017fac:	e8 c4 fb ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c0017fb1:	83 c4 10             	add    esp,0x10
c0017fb4:	83 e0 01             	and    eax,0x1
c0017fb7:	89 c1                	mov    ecx,eax
c0017fb9:	c1 e1 05             	shl    ecx,0x5
c0017fbc:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017fc1:	83 e0 df             	and    eax,0xffffffdf
c0017fc4:	88 c2                	mov    dl,al
c0017fc6:	88 c8                	mov    al,cl
c0017fc8:	09 d0                	or     eax,edx
c0017fca:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017fcf:	83 ec 0c             	sub    esp,0xc
c0017fd2:	68 00 20 00 00       	push   0x2000
c0017fd7:	e8 99 fb ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c0017fdc:	83 c4 10             	add    esp,0x10
c0017fdf:	83 e0 01             	and    eax,0x1
c0017fe2:	89 c1                	mov    ecx,eax
c0017fe4:	c1 e1 06             	shl    ecx,0x6
c0017fe7:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0017fec:	83 e0 bf             	and    eax,0xffffffbf
c0017fef:	88 c2                	mov    dl,al
c0017ff1:	88 c8                	mov    al,cl
c0017ff3:	09 d0                	or     eax,edx
c0017ff5:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0017ffa:	83 ec 0c             	sub    esp,0xc
c0017ffd:	68 00 00 01 00       	push   0x10000
c0018002:	e8 6e fb ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c0018007:	83 c4 10             	add    esp,0x10
c001800a:	89 c1                	mov    ecx,eax
c001800c:	c1 e1 07             	shl    ecx,0x7
c001800f:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0018014:	83 e0 7f             	and    eax,0x7f
c0018017:	88 c2                	mov    dl,al
c0018019:	88 c8                	mov    al,cl
c001801b:	09 d0                	or     eax,edx
c001801d:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c0018022:	83 ec 0c             	sub    esp,0xc
c0018025:	6a 01                	push   0x1
c0018027:	e8 49 fb ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c001802c:	83 c4 10             	add    esp,0x10
c001802f:	83 e0 01             	and    eax,0x1
c0018032:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018039:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c001803e:	83 e0 f7             	and    eax,0xfffffff7
c0018041:	88 c2                	mov    dl,al
c0018043:	88 c8                	mov    al,cl
c0018045:	09 d0                	or     eax,edx
c0018047:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c001804c:	83 ec 0c             	sub    esp,0xc
c001804f:	68 00 08 00 00       	push   0x800
c0018054:	e8 1c fb ff ff       	call   c0017b75 <cpuidCheckEDX(unsigned int)>
c0018059:	83 c4 10             	add    esp,0x10
c001805c:	89 c1                	mov    ecx,eax
c001805e:	83 e1 01             	and    ecx,0x1
c0018061:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0018066:	83 e0 fe             	and    eax,0xfffffffe
c0018069:	88 c2                	mov    dl,al
c001806b:	88 c8                	mov    al,cl
c001806d:	09 d0                	or     eax,edx
c001806f:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c0018074:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0018079:	83 e0 40             	and    eax,0x40
c001807c:	0f b6 c0             	movzx  eax,al
c001807f:	85 c0                	test   eax,eax
c0018081:	74 0a                	je     c001808d <HalDetectFeatures()+0x461>
c0018083:	c7 05 88 d7 02 c0 00 01 00 00 	mov    DWORD PTR ds:0xc002d788,0x100
c001808d:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c0018092:	83 e0 80             	and    eax,0xffffff80
c0018095:	0f b6 c0             	movzx  eax,al
c0018098:	85 c0                	test   eax,eax
c001809a:	74 0a                	je     c00180a6 <HalDetectFeatures()+0x47a>
c001809c:	c7 05 84 d7 02 c0 80 00 00 00 	mov    DWORD PTR ds:0xc002d784,0x80
c00180a6:	83 ec 0c             	sub    esp,0xc
c00180a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00180ad:	50                   	push   eax
c00180ae:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00180b2:	50                   	push   eax
c00180b3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00180b7:	50                   	push   eax
c00180b8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00180bc:	50                   	push   eax
c00180bd:	6a 00                	push   0x0
c00180bf:	e8 13 fa ff ff       	call   c0017ad7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00180c4:	83 c4 20             	add    esp,0x20
c00180c7:	c7 44 24 48 90 d7 02 c0 	mov    DWORD PTR [esp+0x48],0xc002d790
c00180cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c00180d3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00180d7:	c7 44 24 40 04 00 00 00 	mov    DWORD PTR [esp+0x40],0x4
c00180df:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00180e3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00180e7:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00180eb:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00180ef:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00180f3:	89 c6                	mov    esi,eax
c00180f5:	89 d7                	mov    edi,edx
c00180f7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00180f9:	89 c8                	mov    eax,ecx
c00180fb:	89 fa                	mov    edx,edi
c00180fd:	89 f3                	mov    ebx,esi
c00180ff:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0018103:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018107:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001810b:	b8 94 d7 02 c0       	mov    eax,0xc002d794
c0018110:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c0018114:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c001811c:	c7 44 24 5c 04 00 00 00 	mov    DWORD PTR [esp+0x5c],0x4
c0018124:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0018128:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c001812c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0018130:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0018134:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c0018138:	89 c6                	mov    esi,eax
c001813a:	89 d7                	mov    edi,edx
c001813c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001813e:	89 c8                	mov    eax,ecx
c0018140:	89 fa                	mov    edx,edi
c0018142:	89 f3                	mov    ebx,esi
c0018144:	89 5c 24 54          	mov    DWORD PTR [esp+0x54],ebx
c0018148:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c001814c:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018150:	b8 98 d7 02 c0       	mov    eax,0xc002d798
c0018155:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c001815c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018160:	89 44 24 7c          	mov    DWORD PTR [esp+0x7c],eax
c0018164:	c7 44 24 78 04 00 00 00 	mov    DWORD PTR [esp+0x78],0x4
c001816c:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018173:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c0018177:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c001817b:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0018182:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0018186:	89 c6                	mov    esi,eax
c0018188:	89 d7                	mov    edi,edx
c001818a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001818c:	89 c8                	mov    eax,ecx
c001818e:	89 fa                	mov    edx,edi
c0018190:	89 f3                	mov    ebx,esi
c0018192:	89 5c 24 70          	mov    DWORD PTR [esp+0x70],ebx
c0018196:	89 54 24 6c          	mov    DWORD PTR [esp+0x6c],edx
c001819a:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001819e:	83 ec 08             	sub    esp,0x8
c00181a1:	68 12 43 02 c0       	push   0xc0024312
c00181a6:	68 90 d7 02 c0       	push   0xc002d790
c00181ab:	e8 a0 85 fe ff       	call   c0000750 <strcmp>
c00181b0:	83 c4 10             	add    esp,0x10
c00181b3:	85 c0                	test   eax,eax
c00181b5:	74 19                	je     c00181d0 <HalDetectFeatures()+0x5a4>
c00181b7:	83 ec 08             	sub    esp,0x8
c00181ba:	68 1f 43 02 c0       	push   0xc002431f
c00181bf:	68 90 d7 02 c0       	push   0xc002d790
c00181c4:	e8 87 85 fe ff       	call   c0000750 <strcmp>
c00181c9:	83 c4 10             	add    esp,0x10
c00181cc:	85 c0                	test   eax,eax
c00181ce:	75 04                	jne    c00181d4 <HalDetectFeatures()+0x5a8>
c00181d0:	b0 01                	mov    al,0x1
c00181d2:	eb 02                	jmp    c00181d6 <HalDetectFeatures()+0x5aa>
c00181d4:	b0 00                	mov    al,0x0
c00181d6:	0f b6 c0             	movzx  eax,al
c00181d9:	85 c0                	test   eax,eax
c00181db:	74 0f                	je     c00181ec <HalDetectFeatures()+0x5c0>
c00181dd:	c7 05 a4 d7 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x2
c00181e7:	e9 0d 03 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c00181ec:	83 ec 08             	sub    esp,0x8
c00181ef:	68 2c 43 02 c0       	push   0xc002432c
c00181f4:	68 90 d7 02 c0       	push   0xc002d790
c00181f9:	e8 52 85 fe ff       	call   c0000750 <strcmp>
c00181fe:	83 c4 10             	add    esp,0x10
c0018201:	85 c0                	test   eax,eax
c0018203:	74 19                	je     c001821e <HalDetectFeatures()+0x5f2>
c0018205:	83 ec 08             	sub    esp,0x8
c0018208:	68 39 43 02 c0       	push   0xc0024339
c001820d:	68 90 d7 02 c0       	push   0xc002d790
c0018212:	e8 39 85 fe ff       	call   c0000750 <strcmp>
c0018217:	83 c4 10             	add    esp,0x10
c001821a:	85 c0                	test   eax,eax
c001821c:	75 04                	jne    c0018222 <HalDetectFeatures()+0x5f6>
c001821e:	b0 01                	mov    al,0x1
c0018220:	eb 02                	jmp    c0018224 <HalDetectFeatures()+0x5f8>
c0018222:	b0 00                	mov    al,0x0
c0018224:	0f b6 c0             	movzx  eax,al
c0018227:	85 c0                	test   eax,eax
c0018229:	74 0f                	je     c001823a <HalDetectFeatures()+0x60e>
c001822b:	c7 05 a4 d7 02 c0 04 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x4
c0018235:	e9 bf 02 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c001823a:	83 ec 08             	sub    esp,0x8
c001823d:	68 46 43 02 c0       	push   0xc0024346
c0018242:	68 90 d7 02 c0       	push   0xc002d790
c0018247:	e8 04 85 fe ff       	call   c0000750 <strcmp>
c001824c:	83 c4 10             	add    esp,0x10
c001824f:	85 c0                	test   eax,eax
c0018251:	74 19                	je     c001826c <HalDetectFeatures()+0x640>
c0018253:	83 ec 08             	sub    esp,0x8
c0018256:	68 53 43 02 c0       	push   0xc0024353
c001825b:	68 90 d7 02 c0       	push   0xc002d790
c0018260:	e8 eb 84 fe ff       	call   c0000750 <strcmp>
c0018265:	83 c4 10             	add    esp,0x10
c0018268:	85 c0                	test   eax,eax
c001826a:	75 04                	jne    c0018270 <HalDetectFeatures()+0x644>
c001826c:	b0 01                	mov    al,0x1
c001826e:	eb 02                	jmp    c0018272 <HalDetectFeatures()+0x646>
c0018270:	b0 00                	mov    al,0x0
c0018272:	0f b6 c0             	movzx  eax,al
c0018275:	85 c0                	test   eax,eax
c0018277:	74 0f                	je     c0018288 <HalDetectFeatures()+0x65c>
c0018279:	c7 05 a4 d7 02 c0 05 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x5
c0018283:	e9 71 02 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c0018288:	83 ec 08             	sub    esp,0x8
c001828b:	68 60 43 02 c0       	push   0xc0024360
c0018290:	68 90 d7 02 c0       	push   0xc002d790
c0018295:	e8 b6 84 fe ff       	call   c0000750 <strcmp>
c001829a:	83 c4 10             	add    esp,0x10
c001829d:	85 c0                	test   eax,eax
c001829f:	0f 94 c0             	sete   al
c00182a2:	0f b6 c0             	movzx  eax,al
c00182a5:	85 c0                	test   eax,eax
c00182a7:	74 0f                	je     c00182b8 <HalDetectFeatures()+0x68c>
c00182a9:	c7 05 a4 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x1
c00182b3:	e9 41 02 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c00182b8:	83 ec 08             	sub    esp,0x8
c00182bb:	68 6d 43 02 c0       	push   0xc002436d
c00182c0:	68 90 d7 02 c0       	push   0xc002d790
c00182c5:	e8 86 84 fe ff       	call   c0000750 <strcmp>
c00182ca:	83 c4 10             	add    esp,0x10
c00182cd:	85 c0                	test   eax,eax
c00182cf:	0f 94 c0             	sete   al
c00182d2:	0f b6 c0             	movzx  eax,al
c00182d5:	85 c0                	test   eax,eax
c00182d7:	74 0f                	je     c00182e8 <HalDetectFeatures()+0x6bc>
c00182d9:	c7 05 a4 d7 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x3
c00182e3:	e9 11 02 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c00182e8:	83 ec 08             	sub    esp,0x8
c00182eb:	68 2c 43 02 c0       	push   0xc002432c
c00182f0:	68 90 d7 02 c0       	push   0xc002d790
c00182f5:	e8 56 84 fe ff       	call   c0000750 <strcmp>
c00182fa:	83 c4 10             	add    esp,0x10
c00182fd:	85 c0                	test   eax,eax
c00182ff:	0f 94 c0             	sete   al
c0018302:	0f b6 c0             	movzx  eax,al
c0018305:	85 c0                	test   eax,eax
c0018307:	74 0f                	je     c0018318 <HalDetectFeatures()+0x6ec>
c0018309:	c7 05 a4 d7 02 c0 06 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x6
c0018313:	e9 e1 01 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c0018318:	83 ec 08             	sub    esp,0x8
c001831b:	68 7a 43 02 c0       	push   0xc002437a
c0018320:	68 90 d7 02 c0       	push   0xc002d790
c0018325:	e8 26 84 fe ff       	call   c0000750 <strcmp>
c001832a:	83 c4 10             	add    esp,0x10
c001832d:	85 c0                	test   eax,eax
c001832f:	0f 94 c0             	sete   al
c0018332:	0f b6 c0             	movzx  eax,al
c0018335:	85 c0                	test   eax,eax
c0018337:	74 0f                	je     c0018348 <HalDetectFeatures()+0x71c>
c0018339:	c7 05 a4 d7 02 c0 07 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x7
c0018343:	e9 b1 01 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c0018348:	83 ec 08             	sub    esp,0x8
c001834b:	68 87 43 02 c0       	push   0xc0024387
c0018350:	68 90 d7 02 c0       	push   0xc002d790
c0018355:	e8 f6 83 fe ff       	call   c0000750 <strcmp>
c001835a:	83 c4 10             	add    esp,0x10
c001835d:	85 c0                	test   eax,eax
c001835f:	0f 94 c0             	sete   al
c0018362:	0f b6 c0             	movzx  eax,al
c0018365:	85 c0                	test   eax,eax
c0018367:	74 0f                	je     c0018378 <HalDetectFeatures()+0x74c>
c0018369:	c7 05 a4 d7 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x8
c0018373:	e9 81 01 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c0018378:	83 ec 08             	sub    esp,0x8
c001837b:	68 94 43 02 c0       	push   0xc0024394
c0018380:	68 90 d7 02 c0       	push   0xc002d790
c0018385:	e8 c6 83 fe ff       	call   c0000750 <strcmp>
c001838a:	83 c4 10             	add    esp,0x10
c001838d:	85 c0                	test   eax,eax
c001838f:	0f 94 c0             	sete   al
c0018392:	0f b6 c0             	movzx  eax,al
c0018395:	85 c0                	test   eax,eax
c0018397:	74 0f                	je     c00183a8 <HalDetectFeatures()+0x77c>
c0018399:	c7 05 a4 d7 02 c0 09 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x9
c00183a3:	e9 51 01 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c00183a8:	83 ec 08             	sub    esp,0x8
c00183ab:	68 a1 43 02 c0       	push   0xc00243a1
c00183b0:	68 90 d7 02 c0       	push   0xc002d790
c00183b5:	e8 96 83 fe ff       	call   c0000750 <strcmp>
c00183ba:	83 c4 10             	add    esp,0x10
c00183bd:	85 c0                	test   eax,eax
c00183bf:	0f 94 c0             	sete   al
c00183c2:	0f b6 c0             	movzx  eax,al
c00183c5:	85 c0                	test   eax,eax
c00183c7:	74 0f                	je     c00183d8 <HalDetectFeatures()+0x7ac>
c00183c9:	c7 05 a4 d7 02 c0 0a 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xa
c00183d3:	e9 21 01 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c00183d8:	83 ec 08             	sub    esp,0x8
c00183db:	68 ae 43 02 c0       	push   0xc00243ae
c00183e0:	68 90 d7 02 c0       	push   0xc002d790
c00183e5:	e8 66 83 fe ff       	call   c0000750 <strcmp>
c00183ea:	83 c4 10             	add    esp,0x10
c00183ed:	85 c0                	test   eax,eax
c00183ef:	0f 94 c0             	sete   al
c00183f2:	0f b6 c0             	movzx  eax,al
c00183f5:	85 c0                	test   eax,eax
c00183f7:	74 0f                	je     c0018408 <HalDetectFeatures()+0x7dc>
c00183f9:	c7 05 a4 d7 02 c0 0b 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xb
c0018403:	e9 f1 00 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c0018408:	83 ec 08             	sub    esp,0x8
c001840b:	68 bb 43 02 c0       	push   0xc00243bb
c0018410:	68 90 d7 02 c0       	push   0xc002d790
c0018415:	e8 36 83 fe ff       	call   c0000750 <strcmp>
c001841a:	83 c4 10             	add    esp,0x10
c001841d:	85 c0                	test   eax,eax
c001841f:	0f 94 c0             	sete   al
c0018422:	0f b6 c0             	movzx  eax,al
c0018425:	85 c0                	test   eax,eax
c0018427:	74 0f                	je     c0018438 <HalDetectFeatures()+0x80c>
c0018429:	c7 05 a4 d7 02 c0 0c 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xc
c0018433:	e9 c1 00 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c0018438:	83 ec 08             	sub    esp,0x8
c001843b:	68 c8 43 02 c0       	push   0xc00243c8
c0018440:	68 90 d7 02 c0       	push   0xc002d790
c0018445:	e8 06 83 fe ff       	call   c0000750 <strcmp>
c001844a:	83 c4 10             	add    esp,0x10
c001844d:	85 c0                	test   eax,eax
c001844f:	0f 94 c0             	sete   al
c0018452:	0f b6 c0             	movzx  eax,al
c0018455:	85 c0                	test   eax,eax
c0018457:	74 0f                	je     c0018468 <HalDetectFeatures()+0x83c>
c0018459:	c7 05 a4 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xd
c0018463:	e9 91 00 00 00       	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c0018468:	83 ec 08             	sub    esp,0x8
c001846b:	68 d5 43 02 c0       	push   0xc00243d5
c0018470:	68 90 d7 02 c0       	push   0xc002d790
c0018475:	e8 d6 82 fe ff       	call   c0000750 <strcmp>
c001847a:	83 c4 10             	add    esp,0x10
c001847d:	85 c0                	test   eax,eax
c001847f:	0f 94 c0             	sete   al
c0018482:	0f b6 c0             	movzx  eax,al
c0018485:	85 c0                	test   eax,eax
c0018487:	74 0c                	je     c0018495 <HalDetectFeatures()+0x869>
c0018489:	c7 05 a4 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xd
c0018493:	eb 64                	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c0018495:	83 ec 08             	sub    esp,0x8
c0018498:	68 e2 43 02 c0       	push   0xc00243e2
c001849d:	68 90 d7 02 c0       	push   0xc002d790
c00184a2:	e8 a9 82 fe ff       	call   c0000750 <strcmp>
c00184a7:	83 c4 10             	add    esp,0x10
c00184aa:	85 c0                	test   eax,eax
c00184ac:	0f 94 c0             	sete   al
c00184af:	0f b6 c0             	movzx  eax,al
c00184b2:	85 c0                	test   eax,eax
c00184b4:	74 0c                	je     c00184c2 <HalDetectFeatures()+0x896>
c00184b6:	c7 05 a4 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xd
c00184c0:	eb 37                	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c00184c2:	83 ec 08             	sub    esp,0x8
c00184c5:	68 ef 43 02 c0       	push   0xc00243ef
c00184ca:	68 90 d7 02 c0       	push   0xc002d790
c00184cf:	e8 7c 82 fe ff       	call   c0000750 <strcmp>
c00184d4:	83 c4 10             	add    esp,0x10
c00184d7:	85 c0                	test   eax,eax
c00184d9:	0f 94 c0             	sete   al
c00184dc:	0f b6 c0             	movzx  eax,al
c00184df:	85 c0                	test   eax,eax
c00184e1:	74 0c                	je     c00184ef <HalDetectFeatures()+0x8c3>
c00184e3:	c7 05 a4 d7 02 c0 0d 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0xd
c00184ed:	eb 0a                	jmp    c00184f9 <HalDetectFeatures()+0x8cd>
c00184ef:	c7 05 a4 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x0
c00184f9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00184fd:	83 f8 06             	cmp    eax,0x6
c0018500:	0f 86 cc 00 00 00    	jbe    c00185d2 <HalDetectFeatures()+0x9a6>
c0018506:	83 ec 0c             	sub    esp,0xc
c0018509:	68 80 00 00 00       	push   0x80
c001850e:	e8 bd f6 ff ff       	call   c0017bd0 <cpuidCheckExtendedEBX(unsigned int)>
c0018513:	83 c4 10             	add    esp,0x10
c0018516:	89 c1                	mov    ecx,eax
c0018518:	83 e1 01             	and    ecx,0x1
c001851b:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c0018520:	83 e0 fe             	and    eax,0xfffffffe
c0018523:	88 c2                	mov    dl,al
c0018525:	88 c8                	mov    al,cl
c0018527:	09 d0                	or     eax,edx
c0018529:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c001852e:	83 ec 0c             	sub    esp,0xc
c0018531:	68 00 00 10 00       	push   0x100000
c0018536:	e8 95 f6 ff ff       	call   c0017bd0 <cpuidCheckExtendedEBX(unsigned int)>
c001853b:	83 c4 10             	add    esp,0x10
c001853e:	83 e0 01             	and    eax,0x1
c0018541:	89 c1                	mov    ecx,eax
c0018543:	c1 e1 06             	shl    ecx,0x6
c0018546:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c001854b:	83 e0 bf             	and    eax,0xffffffbf
c001854e:	88 c2                	mov    dl,al
c0018550:	88 c8                	mov    al,cl
c0018552:	09 d0                	or     eax,edx
c0018554:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018559:	83 ec 0c             	sub    esp,0xc
c001855c:	68 00 00 04 00       	push   0x40000
c0018561:	e8 6a f6 ff ff       	call   c0017bd0 <cpuidCheckExtendedEBX(unsigned int)>
c0018566:	83 c4 10             	add    esp,0x10
c0018569:	83 e0 01             	and    eax,0x1
c001856c:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001856f:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c0018574:	83 e0 fd             	and    eax,0xfffffffd
c0018577:	88 c2                	mov    dl,al
c0018579:	88 c8                	mov    al,cl
c001857b:	09 d0                	or     eax,edx
c001857d:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018582:	83 ec 0c             	sub    esp,0xc
c0018585:	6a 04                	push   0x4
c0018587:	e8 72 f6 ff ff       	call   c0017bfe <cpuidCheckExtendedECX(unsigned int)>
c001858c:	83 c4 10             	add    esp,0x10
c001858f:	83 e0 01             	and    eax,0x1
c0018592:	89 c1                	mov    ecx,eax
c0018594:	c1 e1 05             	shl    ecx,0x5
c0018597:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c001859c:	83 e0 df             	and    eax,0xffffffdf
c001859f:	88 c2                	mov    dl,al
c00185a1:	88 c8                	mov    al,cl
c00185a3:	09 d0                	or     eax,edx
c00185a5:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00185aa:	83 ec 0c             	sub    esp,0xc
c00185ad:	6a 20                	push   0x20
c00185af:	e8 4a f6 ff ff       	call   c0017bfe <cpuidCheckExtendedECX(unsigned int)>
c00185b4:	83 c4 10             	add    esp,0x10
c00185b7:	83 e0 01             	and    eax,0x1
c00185ba:	89 c1                	mov    ecx,eax
c00185bc:	c1 e1 04             	shl    ecx,0x4
c00185bf:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c00185c4:	83 e0 ef             	and    eax,0xffffffef
c00185c7:	88 c2                	mov    dl,al
c00185c9:	88 c8                	mov    al,cl
c00185cb:	09 d0                	or     eax,edx
c00185cd:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c00185d2:	83 ec 0c             	sub    esp,0xc
c00185d5:	8d 44 24 14          	lea    eax,[esp+0x14]
c00185d9:	50                   	push   eax
c00185da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00185de:	50                   	push   eax
c00185df:	8d 44 24 24          	lea    eax,[esp+0x24]
c00185e3:	50                   	push   eax
c00185e4:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00185e8:	50                   	push   eax
c00185e9:	6a 01                	push   0x1
c00185eb:	e8 e7 f4 ff ff       	call   c0017ad7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00185f0:	83 c4 20             	add    esp,0x20
c00185f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00185f7:	83 e0 0f             	and    eax,0xf
c00185fa:	a2 a0 d7 02 c0       	mov    ds:0xc002d7a0,al
c00185ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018603:	c1 e8 04             	shr    eax,0x4
c0018606:	83 e0 0f             	and    eax,0xf
c0018609:	a2 9e d7 02 c0       	mov    ds:0xc002d79e,al
c001860e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018612:	c1 e8 08             	shr    eax,0x8
c0018615:	83 e0 0f             	and    eax,0xf
c0018618:	a2 9d d7 02 c0       	mov    ds:0xc002d79d,al
c001861d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018621:	c1 e8 0c             	shr    eax,0xc
c0018624:	83 e0 03             	and    eax,0x3
c0018627:	a2 9f d7 02 c0       	mov    ds:0xc002d79f,al
c001862c:	a0 9d d7 02 c0       	mov    al,ds:0xc002d79d
c0018631:	0f b6 c0             	movzx  eax,al
c0018634:	83 f8 06             	cmp    eax,0x6
c0018637:	74 0d                	je     c0018646 <HalDetectFeatures()+0xa1a>
c0018639:	a0 9d d7 02 c0       	mov    al,ds:0xc002d79d
c001863e:	0f b6 c0             	movzx  eax,al
c0018641:	83 f8 0f             	cmp    eax,0xf
c0018644:	75 18                	jne    c001865e <HalDetectFeatures()+0xa32>
c0018646:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001864a:	c1 e8 10             	shr    eax,0x10
c001864d:	c1 e0 04             	shl    eax,0x4
c0018650:	88 c2                	mov    dl,al
c0018652:	a0 9e d7 02 c0       	mov    al,ds:0xc002d79e
c0018657:	09 d0                	or     eax,edx
c0018659:	a2 9e d7 02 c0       	mov    ds:0xc002d79e,al
c001865e:	a0 9d d7 02 c0       	mov    al,ds:0xc002d79d
c0018663:	0f b6 c0             	movzx  eax,al
c0018666:	83 f8 0f             	cmp    eax,0xf
c0018669:	75 15                	jne    c0018680 <HalDetectFeatures()+0xa54>
c001866b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001866f:	c1 e8 14             	shr    eax,0x14
c0018672:	88 c2                	mov    dl,al
c0018674:	a0 9d d7 02 c0       	mov    al,ds:0xc002d79d
c0018679:	01 d0                	add    eax,edx
c001867b:	a2 9d d7 02 c0       	mov    ds:0xc002d79d,al
c0018680:	c6 84 24 8e 00 00 00 00 	mov    BYTE PTR [esp+0x8e],0x0
c0018688:	0f b6 84 24 8e 00 00 00 	movzx  eax,BYTE PTR [esp+0x8e]
c0018690:	85 c0                	test   eax,eax
c0018692:	74 2d                	je     c00186c1 <HalDetectFeatures()+0xa95>
c0018694:	83 ec 0c             	sub    esp,0xc
c0018697:	68 00 00 00 40       	push   0x40000000
c001869c:	e8 01 f5 ff ff       	call   c0017ba2 <cpuidCheckECX(unsigned int)>
c00186a1:	83 c4 10             	add    esp,0x10
c00186a4:	83 e0 01             	and    eax,0x1
c00186a7:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c00186ae:	a0 ae d7 02 c0       	mov    al,ds:0xc002d7ae
c00186b3:	83 e0 fb             	and    eax,0xfffffffb
c00186b6:	88 c2                	mov    dl,al
c00186b8:	88 c8                	mov    al,cl
c00186ba:	09 d0                	or     eax,edx
c00186bc:	a2 ae d7 02 c0       	mov    ds:0xc002d7ae,al
c00186c1:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00186c6:	83 c8 04             	or     eax,0x4
c00186c9:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00186ce:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00186d3:	83 c8 08             	or     eax,0x8
c00186d6:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00186db:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00186e0:	83 c8 10             	or     eax,0x10
c00186e3:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00186e8:	83 ec 0c             	sub    esp,0xc
c00186eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00186ef:	50                   	push   eax
c00186f0:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00186f4:	50                   	push   eax
c00186f5:	8d 44 24 24          	lea    eax,[esp+0x24]
c00186f9:	50                   	push   eax
c00186fa:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00186fe:	50                   	push   eax
c00186ff:	68 00 00 00 80       	push   0x80000000
c0018704:	e8 ce f3 ff ff       	call   c0017ad7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018709:	83 c4 20             	add    esp,0x20
c001870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018710:	3d 00 00 00 80       	cmp    eax,0x80000000
c0018715:	0f 86 96 01 00 00    	jbe    c00188b1 <HalDetectFeatures()+0xc85>
c001871b:	83 ec 0c             	sub    esp,0xc
c001871e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018722:	50                   	push   eax
c0018723:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018727:	50                   	push   eax
c0018728:	8d 44 24 24          	lea    eax,[esp+0x24]
c001872c:	50                   	push   eax
c001872d:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0018731:	50                   	push   eax
c0018732:	68 01 00 00 80       	push   0x80000001
c0018737:	e8 9b f3 ff ff       	call   c0017ad7 <cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001873c:	83 c4 20             	add    esp,0x20
c001873f:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c0018744:	83 e0 7f             	and    eax,0x7f
c0018747:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c001874c:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0018751:	83 e0 fb             	and    eax,0xfffffffb
c0018754:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c0018759:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c001875e:	83 e0 fd             	and    eax,0xfffffffd
c0018761:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c0018766:	e9 46 01 00 00       	jmp    c00188b1 <HalDetectFeatures()+0xc85>
c001876b:	83 ec 08             	sub    esp,0x8
c001876e:	68 60 43 02 c0       	push   0xc0024360
c0018773:	68 90 d7 02 c0       	push   0xc002d790
c0018778:	e8 c3 7e fe ff       	call   c0000640 <strcpy>
c001877d:	83 c4 10             	add    esp,0x10
c0018780:	c7 05 a4 d7 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc002d7a4,0x1
c001878a:	e8 34 7a fe ff       	call   c00001c3 <is486>
c001878f:	85 c0                	test   eax,eax
c0018791:	0f 95 c0             	setne  al
c0018794:	0f b6 c0             	movzx  eax,al
c0018797:	85 c0                	test   eax,eax
c0018799:	0f 84 8d 00 00 00    	je     c001882c <HalDetectFeatures()+0xc00>
c001879f:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00187a4:	83 c8 04             	or     eax,0x4
c00187a7:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00187ac:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00187b1:	83 c8 08             	or     eax,0x8
c00187b4:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00187b9:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c00187be:	83 c8 10             	or     eax,0x10
c00187c1:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c00187c6:	0f 20 c0             	mov    eax,cr0
c00187c9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00187cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00187d1:	89 84 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],eax
c00187d8:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00187df:	83 e0 04             	and    eax,0x4
c00187e2:	74 1e                	je     c0018802 <HalDetectFeatures()+0xbd6>
c00187e4:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c00187eb:	83 e0 10             	and    eax,0x10
c00187ee:	75 12                	jne    c0018802 <HalDetectFeatures()+0xbd6>
c00187f0:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c00187f5:	83 e0 f7             	and    eax,0xfffffff7
c00187f8:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c00187fd:	e9 af 00 00 00       	jmp    c00188b1 <HalDetectFeatures()+0xc85>
c0018802:	e8 97 79 fe ff       	call   c000019e <hasLegacyFPU>
c0018807:	83 e0 01             	and    eax,0x1
c001880a:	83 e0 01             	and    eax,0x1
c001880d:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0018814:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0018819:	83 e0 f7             	and    eax,0xfffffff7
c001881c:	88 c2                	mov    dl,al
c001881e:	88 c8                	mov    al,cl
c0018820:	09 d0                	or     eax,edx
c0018822:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c0018827:	e9 85 00 00 00       	jmp    c00188b1 <HalDetectFeatures()+0xc85>
c001882c:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c0018831:	83 e0 fb             	and    eax,0xfffffffb
c0018834:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018839:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c001883e:	83 e0 f7             	and    eax,0xfffffff7
c0018841:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018846:	a0 af d7 02 c0       	mov    al,ds:0xc002d7af
c001884b:	83 e0 ef             	and    eax,0xffffffef
c001884e:	a2 af d7 02 c0       	mov    ds:0xc002d7af,al
c0018853:	0f 20 c0             	mov    eax,cr0
c0018856:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001885a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001885e:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c0018865:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001886c:	83 e0 04             	and    eax,0x4
c001886f:	74 1b                	je     c001888c <HalDetectFeatures()+0xc60>
c0018871:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018878:	83 e0 10             	and    eax,0x10
c001887b:	75 0f                	jne    c001888c <HalDetectFeatures()+0xc60>
c001887d:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0018882:	83 e0 f7             	and    eax,0xfffffff7
c0018885:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c001888a:	eb 25                	jmp    c00188b1 <HalDetectFeatures()+0xc85>
c001888c:	e8 0d 79 fe ff       	call   c000019e <hasLegacyFPU>
c0018891:	83 e0 01             	and    eax,0x1
c0018894:	83 e0 01             	and    eax,0x1
c0018897:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001889e:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c00188a3:	83 e0 f7             	and    eax,0xfffffff7
c00188a6:	88 c2                	mov    dl,al
c00188a8:	88 c8                	mov    al,cl
c00188aa:	09 d0                	or     eax,edx
c00188ac:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c00188b1:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c00188b6:	83 e0 08             	and    eax,0x8
c00188b9:	0f b6 c0             	movzx  eax,al
c00188bc:	85 c0                	test   eax,eax
c00188be:	75 25                	jne    c00188e5 <HalDetectFeatures()+0xcb9>
c00188c0:	e8 d9 78 fe ff       	call   c000019e <hasLegacyFPU>
c00188c5:	83 e0 01             	and    eax,0x1
c00188c8:	83 e0 01             	and    eax,0x1
c00188cb:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c00188d2:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c00188d7:	83 e0 f7             	and    eax,0xfffffff7
c00188da:	88 c2                	mov    dl,al
c00188dc:	88 c8                	mov    al,cl
c00188de:	09 d0                	or     eax,edx
c00188e0:	a2 b0 d7 02 c0       	mov    ds:0xc002d7b0,al
c00188e5:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c00188ea:	83 e0 08             	and    eax,0x8
c00188ed:	0f b6 c0             	movzx  eax,al
c00188f0:	85 c0                	test   eax,eax
c00188f2:	74 0d                	je     c0018901 <HalDetectFeatures()+0xcd5>
c00188f4:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c00188f9:	83 c8 10             	or     eax,0x10
c00188fc:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0018901:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018906:	83 e0 10             	and    eax,0x10
c0018909:	0f b6 c0             	movzx  eax,al
c001890c:	85 c0                	test   eax,eax
c001890e:	75 23                	jne    c0018933 <HalDetectFeatures()+0xd07>
c0018910:	e8 61 7f 00 00       	call   c0020876 <x87Detect>
c0018915:	83 e0 01             	and    eax,0x1
c0018918:	83 e0 01             	and    eax,0x1
c001891b:	89 c1                	mov    ecx,eax
c001891d:	c1 e1 04             	shl    ecx,0x4
c0018920:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018925:	83 e0 ef             	and    eax,0xffffffef
c0018928:	88 c2                	mov    dl,al
c001892a:	88 c8                	mov    al,cl
c001892c:	09 d0                	or     eax,edx
c001892e:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0018933:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0018938:	83 e0 01             	and    eax,0x1
c001893b:	0f b6 c0             	movzx  eax,al
c001893e:	85 c0                	test   eax,eax
c0018940:	75 2d                	jne    c001896f <HalDetectFeatures()+0xd43>
c0018942:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0018947:	83 e0 02             	and    eax,0x2
c001894a:	0f b6 c0             	movzx  eax,al
c001894d:	85 c0                	test   eax,eax
c001894f:	75 1e                	jne    c001896f <HalDetectFeatures()+0xd43>
c0018951:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0018956:	83 e0 04             	and    eax,0x4
c0018959:	0f b6 c0             	movzx  eax,al
c001895c:	85 c0                	test   eax,eax
c001895e:	75 0f                	jne    c001896f <HalDetectFeatures()+0xd43>
c0018960:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c0018965:	83 e0 08             	and    eax,0x8
c0018968:	0f b6 c0             	movzx  eax,al
c001896b:	85 c0                	test   eax,eax
c001896d:	74 0d                	je     c001897c <HalDetectFeatures()+0xd50>
c001896f:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018974:	83 c8 80             	or     eax,0xffffff80
c0018977:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c001897c:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018981:	83 e0 10             	and    eax,0x10
c0018984:	0f b6 c0             	movzx  eax,al
c0018987:	85 c0                	test   eax,eax
c0018989:	74 2f                	je     c00189ba <HalDetectFeatures()+0xd8e>
c001898b:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018990:	83 e0 80             	and    eax,0xffffff80
c0018993:	0f b6 c0             	movzx  eax,al
c0018996:	85 c0                	test   eax,eax
c0018998:	75 20                	jne    c00189ba <HalDetectFeatures()+0xd8e>
c001899a:	e8 91 7e 00 00       	call   c0020830 <sseDetect>
c001899f:	83 e0 01             	and    eax,0x1
c00189a2:	89 c1                	mov    ecx,eax
c00189a4:	c1 e1 07             	shl    ecx,0x7
c00189a7:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c00189ac:	83 e0 7f             	and    eax,0x7f
c00189af:	88 c2                	mov    dl,al
c00189b1:	88 c8                	mov    al,cl
c00189b3:	09 d0                	or     eax,edx
c00189b5:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c00189ba:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c00189bf:	83 e0 80             	and    eax,0xffffff80
c00189c2:	0f b6 c0             	movzx  eax,al
c00189c5:	85 c0                	test   eax,eax
c00189c7:	74 1c                	je     c00189e5 <HalDetectFeatures()+0xdb9>
c00189c9:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c00189ce:	83 e0 20             	and    eax,0x20
c00189d1:	0f b6 c0             	movzx  eax,al
c00189d4:	85 c0                	test   eax,eax
c00189d6:	75 0d                	jne    c00189e5 <HalDetectFeatures()+0xdb9>
c00189d8:	a0 ad d7 02 c0       	mov    al,ds:0xc002d7ad
c00189dd:	83 e0 df             	and    eax,0xffffffdf
c00189e0:	a2 ad d7 02 c0       	mov    ds:0xc002d7ad,al
c00189e5:	c6 05 a8 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d7a8,0x0
c00189ec:	90                   	nop
c00189ed:	81 c4 90 00 00 00    	add    esp,0x90
c00189f3:	5b                   	pop    ebx
c00189f4:	5e                   	pop    esi
c00189f5:	5f                   	pop    edi
c00189f6:	c3                   	ret    

c00189f7 <HalEnableNMI()>:
c00189f7:	c6 05 8c d7 02 c0 01 	mov    BYTE PTR ds:0xc002d78c,0x1
c00189fe:	6a 10                	push   0x10
c0018a00:	e8 22 ef ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0018a05:	83 c4 04             	add    esp,0x4
c0018a08:	90                   	nop
c0018a09:	c3                   	ret    

c0018a0a <HalDisableNMI()>:
c0018a0a:	c6 05 8c d7 02 c0 00 	mov    BYTE PTR ds:0xc002d78c,0x0
c0018a11:	6a 10                	push   0x10
c0018a13:	e8 0f ef ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0018a18:	83 c4 04             	add    esp,0x4
c0018a1b:	90                   	nop
c0018a1c:	c3                   	ret    

c0018a1d <HalGetNMIState()>:
c0018a1d:	a0 8c d7 02 c0       	mov    al,ds:0xc002d78c
c0018a22:	c3                   	ret    

c0018a23 <x86rdmsr(unsigned int)>:
c0018a23:	83 ec 1c             	sub    esp,0x1c
c0018a26:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018a2b:	83 e0 08             	and    eax,0x8
c0018a2e:	0f b6 c0             	movzx  eax,al
c0018a31:	85 c0                	test   eax,eax
c0018a33:	75 10                	jne    c0018a45 <x86rdmsr(unsigned int)+0x22>
c0018a35:	83 ec 0c             	sub    esp,0xc
c0018a38:	68 fb 43 02 c0       	push   0xc00243fb
c0018a3d:	e8 08 6c ff ff       	call   c000f64a <KePanic(char const*)>
c0018a42:	83 c4 10             	add    esp,0x10
c0018a45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018a49:	89 c1                	mov    ecx,eax
c0018a4b:	0f 32                	rdmsr  
c0018a4d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018a51:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018a55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a59:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a5d:	83 c4 1c             	add    esp,0x1c
c0018a60:	c3                   	ret    

c0018a61 <x86wrmsr(unsigned int, unsigned long long)>:
c0018a61:	83 ec 1c             	sub    esp,0x1c
c0018a64:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018a68:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0018a6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a70:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018a74:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018a79:	83 e0 08             	and    eax,0x8
c0018a7c:	0f b6 c0             	movzx  eax,al
c0018a7f:	85 c0                	test   eax,eax
c0018a81:	75 10                	jne    c0018a93 <x86wrmsr(unsigned int, unsigned long long)+0x32>
c0018a83:	83 ec 0c             	sub    esp,0xc
c0018a86:	68 01 44 02 c0       	push   0xc0024401
c0018a8b:	e8 ba 6b ff ff       	call   c000f64a <KePanic(char const*)>
c0018a90:	83 c4 10             	add    esp,0x10
c0018a93:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0018a97:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018a9b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018a9f:	0f 30                	wrmsr  
c0018aa1:	90                   	nop
c0018aa2:	83 c4 1c             	add    esp,0x1c
c0018aa5:	c3                   	ret    

c0018aa6 <HalHandleGeneralProtectionFault(void*, void*)>:
c0018aa6:	83 ec 0c             	sub    esp,0xc
c0018aa9:	83 ec 0c             	sub    esp,0xc
c0018aac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ab0:	e8 48 e7 ff ff       	call   c00171fd <Vm::faultHandler(regs*)>
c0018ab5:	83 c4 10             	add    esp,0x10
c0018ab8:	83 c4 0c             	add    esp,0xc
c0018abb:	c3                   	ret    

c0018abc <HalFindRSDP()>:
c0018abc:	83 ec 1c             	sub    esp,0x1c
c0018abf:	a1 e0 cd 02 c0       	mov    eax,ds:0xc002cde0
c0018ac4:	3d ff 07 00 00       	cmp    eax,0x7ff
c0018ac9:	7e 0c                	jle    c0018ad7 <HalFindRSDP()+0x1b>
c0018acb:	a1 c4 cd 02 c0       	mov    eax,ds:0xc002cdc4
c0018ad0:	25 00 04 00 00       	and    eax,0x400
c0018ad5:	74 0d                	je     c0018ae4 <HalFindRSDP()+0x28>
c0018ad7:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018adc:	83 e0 fb             	and    eax,0xfffffffb
c0018adf:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0018ae4:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018ae9:	83 e0 04             	and    eax,0x4
c0018aec:	0f b6 c0             	movzx  eax,al
c0018aef:	85 c0                	test   eax,eax
c0018af1:	75 07                	jne    c0018afa <HalFindRSDP()+0x3e>
c0018af3:	b8 00 00 00 00       	mov    eax,0x0
c0018af8:	eb 53                	jmp    c0018b4d <HalFindRSDP()+0x91>
c0018afa:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0018b02:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c0018b0a:	77 2f                	ja     c0018b3b <HalFindRSDP()+0x7f>
c0018b0c:	83 ec 04             	sub    esp,0x4
c0018b0f:	6a 08                	push   0x8
c0018b11:	68 07 44 02 c0       	push   0xc0024407
c0018b16:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018b1a:	e8 61 78 fe ff       	call   c0000380 <memcmp>
c0018b1f:	83 c4 10             	add    esp,0x10
c0018b22:	85 c0                	test   eax,eax
c0018b24:	0f 94 c0             	sete   al
c0018b27:	0f b6 c0             	movzx  eax,al
c0018b2a:	85 c0                	test   eax,eax
c0018b2c:	74 06                	je     c0018b34 <HalFindRSDP()+0x78>
c0018b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018b32:	eb 19                	jmp    c0018b4d <HalFindRSDP()+0x91>
c0018b34:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0018b39:	eb c7                	jmp    c0018b02 <HalFindRSDP()+0x46>
c0018b3b:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0018b40:	83 e0 fb             	and    eax,0xfffffffb
c0018b43:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c0018b48:	b8 00 00 00 00       	mov    eax,0x0
c0018b4d:	83 c4 1c             	add    esp,0x1c
c0018b50:	c3                   	ret    

c0018b51 <HalHandlePageFault(void*, void*)>:
c0018b51:	83 ec 1c             	sub    esp,0x1c
c0018b54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b58:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018b5b:	83 ec 08             	sub    esp,0x8
c0018b5e:	50                   	push   eax
c0018b5f:	68 4c 46 02 c0       	push   0xc002464c
c0018b64:	e8 fb e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018b69:	83 c4 10             	add    esp,0x10
c0018b6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018b70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018b73:	83 ec 08             	sub    esp,0x8
c0018b76:	50                   	push   eax
c0018b77:	68 10 44 02 c0       	push   0xc0024410
c0018b7c:	e8 e3 e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018b81:	83 c4 10             	add    esp,0x10
c0018b84:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0018b89:	8b 00                	mov    eax,DWORD PTR [eax]
c0018b8b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0018b8e:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0018b94:	0f 20 d2             	mov    edx,cr2
c0018b97:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0018b9b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b9f:	83 ec 08             	sub    esp,0x8
c0018ba2:	52                   	push   edx
c0018ba3:	50                   	push   eax
c0018ba4:	e8 7d ac ff ff       	call   c0013826 <VAS::tryLoadBackOffDisk(unsigned long)>
c0018ba9:	83 c4 10             	add    esp,0x10
c0018bac:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018bb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bb4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018bb7:	83 ec 08             	sub    esp,0x8
c0018bba:	50                   	push   eax
c0018bbb:	68 25 44 02 c0       	push   0xc0024425
c0018bc0:	e8 9f e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018bc5:	83 c4 10             	add    esp,0x10
c0018bc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018bcc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0018bcf:	83 ec 08             	sub    esp,0x8
c0018bd2:	50                   	push   eax
c0018bd3:	68 3f 44 02 c0       	push   0xc002443f
c0018bd8:	e8 87 e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018bdd:	83 c4 10             	add    esp,0x10
c0018be0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018be5:	83 ec 08             	sub    esp,0x8
c0018be8:	50                   	push   eax
c0018be9:	68 54 44 02 c0       	push   0xc0024454
c0018bee:	e8 71 e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018bf3:	83 c4 10             	add    esp,0x10
c0018bf6:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018bfa:	83 c4 1c             	add    esp,0x1c
c0018bfd:	c3                   	ret    

c0018bfe <HalHandleOpcodeFault(void*, void*)>:
c0018bfe:	83 ec 1c             	sub    esp,0x1c
c0018c01:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018c05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c09:	a0 a8 d7 02 c0       	mov    al,ds:0xc002d7a8
c0018c0e:	0f b6 c0             	movzx  eax,al
c0018c11:	85 c0                	test   eax,eax
c0018c13:	74 25                	je     c0018c3a <HalHandleOpcodeFault(void*, void*)+0x3c>
c0018c15:	83 ec 0c             	sub    esp,0xc
c0018c18:	68 80 46 02 c0       	push   0xc0024680
c0018c1d:	e8 42 e3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018c22:	83 c4 10             	add    esp,0x10
c0018c25:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c29:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018c2c:	8d 50 19             	lea    edx,[eax+0x19]
c0018c2f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018c33:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0018c36:	b0 01                	mov    al,0x1
c0018c38:	eb 02                	jmp    c0018c3c <HalHandleOpcodeFault(void*, void*)+0x3e>
c0018c3a:	b0 00                	mov    al,0x0
c0018c3c:	83 c4 1c             	add    esp,0x1c
c0018c3f:	c3                   	ret    

c0018c40 <HalDisplayDebugInfo(void*)>:
c0018c40:	83 ec 2c             	sub    esp,0x2c
c0018c43:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018c47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018c4b:	0f 20 c0             	mov    eax,cr0
c0018c4e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018c52:	0f 20 d0             	mov    eax,cr2
c0018c55:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018c59:	0f 20 d8             	mov    eax,cr3
c0018c5c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018c60:	0f 20 e0             	mov    eax,cr4
c0018c63:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c6b:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0018c6e:	83 ec 08             	sub    esp,0x8
c0018c71:	50                   	push   eax
c0018c72:	68 6f 44 02 c0       	push   0xc002446f
c0018c77:	e8 e8 e2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018c7c:	83 c4 10             	add    esp,0x10
c0018c7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c83:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0018c86:	83 ec 08             	sub    esp,0x8
c0018c89:	50                   	push   eax
c0018c8a:	68 60 44 02 c0       	push   0xc0024460
c0018c8f:	e8 d0 e2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018c94:	83 c4 10             	add    esp,0x10
c0018c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018c9b:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0018c9e:	83 ec 08             	sub    esp,0x8
c0018ca1:	50                   	push   eax
c0018ca2:	68 6b 44 02 c0       	push   0xc002446b
c0018ca7:	e8 b8 e2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018cac:	83 c4 10             	add    esp,0x10
c0018caf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018cb3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0018cb6:	83 ec 08             	sub    esp,0x8
c0018cb9:	50                   	push   eax
c0018cba:	68 7a 44 02 c0       	push   0xc002447a
c0018cbf:	e8 a0 e2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018cc4:	83 c4 10             	add    esp,0x10
c0018cc7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018ccb:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0018cce:	83 ec 08             	sub    esp,0x8
c0018cd1:	50                   	push   eax
c0018cd2:	68 85 44 02 c0       	push   0xc0024485
c0018cd7:	e8 88 e2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018cdc:	83 c4 10             	add    esp,0x10
c0018cdf:	83 ec 08             	sub    esp,0x8
c0018ce2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018ce6:	68 90 44 02 c0       	push   0xc0024490
c0018ceb:	e8 74 e2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018cf0:	83 c4 10             	add    esp,0x10
c0018cf3:	83 ec 08             	sub    esp,0x8
c0018cf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018cfa:	68 9b 44 02 c0       	push   0xc002449b
c0018cff:	e8 60 e2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018d04:	83 c4 10             	add    esp,0x10
c0018d07:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d0b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018d0e:	c1 e0 05             	shl    eax,0x5
c0018d11:	8d 90 a0 59 02 c0    	lea    edx,[eax-0x3ffda660]
c0018d17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d1b:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0018d1e:	83 ec 04             	sub    esp,0x4
c0018d21:	52                   	push   edx
c0018d22:	50                   	push   eax
c0018d23:	68 a6 44 02 c0       	push   0xc00244a6
c0018d28:	e8 37 e2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0018d2d:	83 c4 10             	add    esp,0x10
c0018d30:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018d35:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d3b:	83 ec 0c             	sub    esp,0xc
c0018d3e:	50                   	push   eax
c0018d3f:	e8 8f 8d ff ff       	call   c0011ad3 <setActiveTerminal(VgaText*)>
c0018d44:	83 c4 10             	add    esp,0x10
c0018d47:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018d4c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d52:	83 ec 08             	sub    esp,0x8
c0018d55:	68 b5 44 02 c0       	push   0xc00244b5
c0018d5a:	50                   	push   eax
c0018d5b:	e8 c0 90 ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018d60:	83 c4 10             	add    esp,0x10
c0018d63:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018d68:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d6e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018d72:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c0018d75:	83 ec 08             	sub    esp,0x8
c0018d78:	52                   	push   edx
c0018d79:	50                   	push   eax
c0018d7a:	e8 5b 90 ff ff       	call   c0011dda <VgaText::putx(unsigned int)>
c0018d7f:	83 c4 10             	add    esp,0x10
c0018d82:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018d87:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018d8d:	83 ec 08             	sub    esp,0x8
c0018d90:	68 c3 44 02 c0       	push   0xc00244c3
c0018d95:	50                   	push   eax
c0018d96:	e8 85 90 ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018d9b:	83 c4 10             	add    esp,0x10
c0018d9e:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018da3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018da9:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0018dae:	8b 12                	mov    edx,DWORD PTR [edx]
c0018db0:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018db3:	83 c2 0c             	add    edx,0xc
c0018db6:	83 ec 08             	sub    esp,0x8
c0018db9:	52                   	push   edx
c0018dba:	50                   	push   eax
c0018dbb:	e8 60 90 ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018dc0:	83 c4 10             	add    esp,0x10
c0018dc3:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018dc8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018dce:	83 ec 08             	sub    esp,0x8
c0018dd1:	68 cc 44 02 c0       	push   0xc00244cc
c0018dd6:	50                   	push   eax
c0018dd7:	e8 44 90 ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018ddc:	83 c4 10             	add    esp,0x10
c0018ddf:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018de4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018dea:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018dee:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0018df1:	83 ec 08             	sub    esp,0x8
c0018df4:	52                   	push   edx
c0018df5:	50                   	push   eax
c0018df6:	e8 df 8f ff ff       	call   c0011dda <VgaText::putx(unsigned int)>
c0018dfb:	83 c4 10             	add    esp,0x10
c0018dfe:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018e03:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e09:	83 ec 08             	sub    esp,0x8
c0018e0c:	68 d4 44 02 c0       	push   0xc00244d4
c0018e11:	50                   	push   eax
c0018e12:	e8 09 90 ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018e17:	83 c4 10             	add    esp,0x10
c0018e1a:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018e1f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e25:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e29:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0018e2c:	83 ec 08             	sub    esp,0x8
c0018e2f:	52                   	push   edx
c0018e30:	50                   	push   eax
c0018e31:	e8 a4 8f ff ff       	call   c0011dda <VgaText::putx(unsigned int)>
c0018e36:	83 c4 10             	add    esp,0x10
c0018e39:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018e3e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e44:	83 ec 08             	sub    esp,0x8
c0018e47:	68 dc 44 02 c0       	push   0xc00244dc
c0018e4c:	50                   	push   eax
c0018e4d:	e8 ce 8f ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018e52:	83 c4 10             	add    esp,0x10
c0018e55:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018e5a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e60:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e64:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0018e67:	83 ec 08             	sub    esp,0x8
c0018e6a:	52                   	push   edx
c0018e6b:	50                   	push   eax
c0018e6c:	e8 69 8f ff ff       	call   c0011dda <VgaText::putx(unsigned int)>
c0018e71:	83 c4 10             	add    esp,0x10
c0018e74:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018e79:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e7f:	83 ec 08             	sub    esp,0x8
c0018e82:	68 e4 44 02 c0       	push   0xc00244e4
c0018e87:	50                   	push   eax
c0018e88:	e8 93 8f ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018e8d:	83 c4 10             	add    esp,0x10
c0018e90:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018e95:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018e9b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018e9f:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0018ea2:	83 ec 08             	sub    esp,0x8
c0018ea5:	52                   	push   edx
c0018ea6:	50                   	push   eax
c0018ea7:	e8 2e 8f ff ff       	call   c0011dda <VgaText::putx(unsigned int)>
c0018eac:	83 c4 10             	add    esp,0x10
c0018eaf:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018eb4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018eba:	83 ec 08             	sub    esp,0x8
c0018ebd:	68 ec 44 02 c0       	push   0xc00244ec
c0018ec2:	50                   	push   eax
c0018ec3:	e8 58 8f ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018ec8:	83 c4 10             	add    esp,0x10
c0018ecb:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018ed0:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ed6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018eda:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0018edd:	83 ec 08             	sub    esp,0x8
c0018ee0:	52                   	push   edx
c0018ee1:	50                   	push   eax
c0018ee2:	e8 f3 8e ff ff       	call   c0011dda <VgaText::putx(unsigned int)>
c0018ee7:	83 c4 10             	add    esp,0x10
c0018eea:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018eef:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018ef5:	83 ec 08             	sub    esp,0x8
c0018ef8:	68 f4 44 02 c0       	push   0xc00244f4
c0018efd:	50                   	push   eax
c0018efe:	e8 1d 8f ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018f03:	83 c4 10             	add    esp,0x10
c0018f06:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018f0b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018f15:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0018f18:	83 ec 08             	sub    esp,0x8
c0018f1b:	52                   	push   edx
c0018f1c:	50                   	push   eax
c0018f1d:	e8 b8 8e ff ff       	call   c0011dda <VgaText::putx(unsigned int)>
c0018f22:	83 c4 10             	add    esp,0x10
c0018f25:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018f2a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f30:	83 ec 08             	sub    esp,0x8
c0018f33:	68 fc 44 02 c0       	push   0xc00244fc
c0018f38:	50                   	push   eax
c0018f39:	e8 e2 8e ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018f3e:	83 c4 10             	add    esp,0x10
c0018f41:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018f46:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f4c:	83 ec 08             	sub    esp,0x8
c0018f4f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0018f53:	50                   	push   eax
c0018f54:	e8 81 8e ff ff       	call   c0011dda <VgaText::putx(unsigned int)>
c0018f59:	83 c4 10             	add    esp,0x10
c0018f5c:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018f61:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f67:	83 ec 08             	sub    esp,0x8
c0018f6a:	68 05 45 02 c0       	push   0xc0024505
c0018f6f:	50                   	push   eax
c0018f70:	e8 ab 8e ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018f75:	83 c4 10             	add    esp,0x10
c0018f78:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018f7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f83:	83 ec 08             	sub    esp,0x8
c0018f86:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018f8a:	50                   	push   eax
c0018f8b:	e8 4a 8e ff ff       	call   c0011dda <VgaText::putx(unsigned int)>
c0018f90:	83 c4 10             	add    esp,0x10
c0018f93:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018f98:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018f9e:	83 ec 08             	sub    esp,0x8
c0018fa1:	68 0d 45 02 c0       	push   0xc002450d
c0018fa6:	50                   	push   eax
c0018fa7:	e8 74 8e ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0018fac:	83 c4 10             	add    esp,0x10
c0018faf:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c0018fb4:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0018fba:	83 ec 08             	sub    esp,0x8
c0018fbd:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018fc1:	50                   	push   eax
c0018fc2:	e8 13 8e ff ff       	call   c0011dda <VgaText::putx(unsigned int)>
c0018fc7:	83 c4 10             	add    esp,0x10
c0018fca:	fa                   	cli    
c0018fcb:	f4                   	hlt    
c0018fcc:	eb fe                	jmp    c0018fcc <HalDisplayDebugInfo(void*)+0x38c>

c0018fce <HalReceivedNMI()>:
c0018fce:	83 ec 1c             	sub    esp,0x1c
c0018fd1:	66 c7 44 24 08 92 00 	mov    WORD PTR [esp+0x8],0x92
c0018fd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018fdc:	89 c2                	mov    edx,eax
c0018fde:	ec                   	in     al,dx
c0018fdf:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0018fe3:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0018fe7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018feb:	66 c7 44 24 0c 61 00 	mov    WORD PTR [esp+0xc],0x61
c0018ff2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018ff6:	89 c2                	mov    edx,eax
c0018ff8:	ec                   	in     al,dx
c0018ff9:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0018ffd:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0019001:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0019005:	83 ec 0c             	sub    esp,0xc
c0019008:	68 15 45 02 c0       	push   0xc0024515
c001900d:	e8 52 df fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019012:	83 c4 10             	add    esp,0x10
c0019015:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001901a:	83 e0 10             	and    eax,0x10
c001901d:	74 10                	je     c001902f <HalReceivedNMI()+0x61>
c001901f:	83 ec 0c             	sub    esp,0xc
c0019022:	68 26 45 02 c0       	push   0xc0024526
c0019027:	e8 1e 66 ff ff       	call   c000f64a <KePanic(char const*)>
c001902c:	83 c4 10             	add    esp,0x10
c001902f:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c0019034:	83 e0 40             	and    eax,0x40
c0019037:	74 10                	je     c0019049 <HalReceivedNMI()+0x7b>
c0019039:	83 ec 0c             	sub    esp,0xc
c001903c:	68 33 45 02 c0       	push   0xc0024533
c0019041:	e8 04 66 ff ff       	call   c000f64a <KePanic(char const*)>
c0019046:	83 c4 10             	add    esp,0x10
c0019049:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c001904d:	0f be c0             	movsx  eax,al
c0019050:	85 c0                	test   eax,eax
c0019052:	79 10                	jns    c0019064 <HalReceivedNMI()+0x96>
c0019054:	83 ec 0c             	sub    esp,0xc
c0019057:	68 3d 45 02 c0       	push   0xc002453d
c001905c:	e8 e9 65 ff ff       	call   c000f64a <KePanic(char const*)>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	90                   	nop
c0019065:	83 c4 1c             	add    esp,0x1c
c0019068:	c3                   	ret    

c0019069 <HalSystemIdle()>:
c0019069:	56                   	push   esi
c001906a:	53                   	push   ebx
c001906b:	83 ec 14             	sub    esp,0x14
c001906e:	a0 b0 d7 02 c0       	mov    al,ds:0xc002d7b0
c0019073:	83 e0 10             	and    eax,0x10
c0019076:	0f b6 c0             	movzx  eax,al
c0019079:	85 c0                	test   eax,eax
c001907b:	74 43                	je     c00190c0 <HalSystemIdle()+0x57>
c001907d:	83 ec 0c             	sub    esp,0xc
c0019080:	68 e1 00 00 00       	push   0xe1
c0019085:	e8 99 f9 ff ff       	call   c0018a23 <x86rdmsr(unsigned int)>
c001908a:	83 c4 10             	add    esp,0x10
c001908d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019091:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0019095:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019099:	83 e0 02             	and    eax,0x2
c001909c:	89 c3                	mov    ebx,eax
c001909e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00190a2:	83 e0 00             	and    eax,0x0
c00190a5:	89 c6                	mov    esi,eax
c00190a7:	83 ec 04             	sub    esp,0x4
c00190aa:	56                   	push   esi
c00190ab:	53                   	push   ebx
c00190ac:	68 e1 00 00 00       	push   0xe1
c00190b1:	e8 ab f9 ff ff       	call   c0018a61 <x86wrmsr(unsigned int, unsigned long long)>
c00190b6:	83 c4 10             	add    esp,0x10
c00190b9:	e8 d6 70 fe ff       	call   c0000194 <doTPAUSE>
c00190be:	eb 01                	jmp    c00190c1 <HalSystemIdle()+0x58>
c00190c0:	f4                   	hlt    
c00190c1:	90                   	nop
c00190c2:	83 c4 14             	add    esp,0x14
c00190c5:	5b                   	pop    ebx
c00190c6:	5e                   	pop    esi
c00190c7:	c3                   	ret    

c00190c8 <i386SaveCoprocessor(void*)>:
c00190c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00190cc:	83 c0 3f             	add    eax,0x3f
c00190cf:	83 e0 c0             	and    eax,0xffffffc0
c00190d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190d6:	ff 25 70 d7 02 c0    	jmp    DWORD PTR ds:0xc002d770

c00190dc <i386LoadCoprocessor(void*)>:
c00190dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00190e0:	83 c0 3f             	add    eax,0x3f
c00190e3:	83 e0 c0             	and    eax,0xffffffc0
c00190e6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00190ea:	ff 25 6c d7 02 c0    	jmp    DWORD PTR ds:0xc002d76c

c00190f0 <x87EmulHandler(regs*, void*)>:
c00190f0:	53                   	push   ebx
c00190f1:	83 ec 08             	sub    esp,0x8
c00190f4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00190f9:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00190fd:	74 10                	je     c001910f <x87EmulHandler(regs*, void*)+0x1f>
c00190ff:	83 ec 0c             	sub    esp,0xc
c0019102:	68 4a 45 02 c0       	push   0xc002454a
c0019107:	e8 3e 65 ff ff       	call   c000f64a <KePanic(char const*)>
c001910c:	83 c4 10             	add    esp,0x10
c001910f:	0f 20 c0             	mov    eax,cr0
c0019112:	a8 08                	test   al,0x8
c0019114:	74 59                	je     c001916f <x87EmulHandler(regs*, void*)+0x7f>
c0019116:	0f 06                	clts   
c0019118:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c001911d:	85 c0                	test   eax,eax
c001911f:	74 0e                	je     c001912f <x87EmulHandler(regs*, void*)+0x3f>
c0019121:	83 ec 0c             	sub    esp,0xc
c0019124:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019127:	e8 9c ff ff ff       	call   c00190c8 <i386SaveCoprocessor(void*)>
c001912c:	83 c4 10             	add    esp,0x10
c001912f:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0019135:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c0019139:	75 12                	jne    c001914d <x87EmulHandler(regs*, void*)+0x5d>
c001913b:	83 ec 0c             	sub    esp,0xc
c001913e:	68 40 02 00 00       	push   0x240
c0019143:	e8 bb 61 ff ff       	call   c000f303 <malloc>
c0019148:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001914b:	eb 10                	jmp    c001915d <x87EmulHandler(regs*, void*)+0x6d>
c001914d:	83 ec 0c             	sub    esp,0xc
c0019150:	a1 68 d7 02 c0       	mov    eax,ds:0xc002d768
c0019155:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0019158:	e8 7f ff ff ff       	call   c00190dc <i386LoadCoprocessor(void*)>
c001915d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0019162:	83 c4 10             	add    esp,0x10
c0019165:	a3 68 d7 02 c0       	mov    ds:0xc002d768,eax
c001916a:	83 c4 08             	add    esp,0x8
c001916d:	5b                   	pop    ebx
c001916e:	c3                   	ret    
c001916f:	83 ec 0c             	sub    esp,0xc
c0019172:	68 5e 45 02 c0       	push   0xc002455e
c0019177:	e8 e8 dd fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001917c:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0019184:	83 c4 18             	add    esp,0x18
c0019187:	5b                   	pop    ebx
c0019188:	e9 b7 d9 ff ff       	jmp    c0016b44 <Thr::terminateFromIRQ(int)>

c001918d <HalInitialiseCoprocessor()>:
c001918d:	83 ec 10             	sub    esp,0x10
c0019190:	c7 05 68 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d768,0x0
c001919a:	6a 00                	push   0x0
c001919c:	68 f0 90 01 c0       	push   0xc00190f0
c00191a1:	6a 07                	push   0x7
c00191a3:	e8 9d 06 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00191a8:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c00191ad:	83 c4 10             	add    esp,0x10
c00191b0:	a8 80                	test   al,0x80
c00191b2:	74 1c                	je     c00191d0 <HalInitialiseCoprocessor()+0x43>
c00191b4:	c7 05 70 d7 02 c0 48 08 02 c0 	mov    DWORD PTR ds:0xc002d770,0xc0020848
c00191be:	c7 05 6c d7 02 c0 50 08 02 c0 	mov    DWORD PTR ds:0xc002d76c,0xc0020850
c00191c8:	83 c4 0c             	add    esp,0xc
c00191cb:	e9 88 76 00 00       	jmp    c0020858 <sseInit>
c00191d0:	a8 10                	test   al,0x10
c00191d2:	74 1c                	je     c00191f0 <HalInitialiseCoprocessor()+0x63>
c00191d4:	c7 05 70 d7 02 c0 97 08 02 c0 	mov    DWORD PTR ds:0xc002d770,0xc0020897
c00191de:	c7 05 6c d7 02 c0 9e 08 02 c0 	mov    DWORD PTR ds:0xc002d76c,0xc002089e
c00191e8:	83 c4 0c             	add    esp,0xc
c00191eb:	e9 b5 76 00 00       	jmp    c00208a5 <x87Init>
c00191f0:	c7 05 70 d7 02 c0 22 79 01 c0 	mov    DWORD PTR ds:0xc002d770,0xc0017922
c00191fa:	c7 05 6c d7 02 c0 22 79 01 c0 	mov    DWORD PTR ds:0xc002d76c,0xc0017922
c0019204:	0f 20 c0             	mov    eax,cr0
c0019207:	83 c8 04             	or     eax,0x4
c001920a:	0f 22 c0             	mov    cr0,eax
c001920d:	83 c4 0c             	add    esp,0xc
c0019210:	c3                   	ret    

c0019211 <HalPanic(char const*)>:
c0019211:	53                   	push   ebx
c0019212:	83 ec 10             	sub    esp,0x10
c0019215:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019219:	fa                   	cli    
c001921a:	53                   	push   ebx
c001921b:	68 74 45 02 c0       	push   0xc0024574
c0019220:	e8 3f dd fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019225:	a1 64 d7 02 c0       	mov    eax,ds:0xc002d764
c001922a:	83 c4 10             	add    esp,0x10
c001922d:	85 c0                	test   eax,eax
c001922f:	74 09                	je     c001923a <HalPanic(char const*)+0x29>
c0019231:	83 ec 0c             	sub    esp,0xc
c0019234:	53                   	push   ebx
c0019235:	ff d0                	call   eax
c0019237:	83 c4 10             	add    esp,0x10
c001923a:	a1 54 ce 02 c0       	mov    eax,ds:0xc002ce54
c001923f:	85 c0                	test   eax,eax
c0019241:	0f 84 dc 00 00 00    	je     c0019323 <HalPanic(char const*)+0x112>
c0019247:	52                   	push   edx
c0019248:	6a 01                	push   0x1
c001924a:	6a 0f                	push   0xf
c001924c:	50                   	push   eax
c001924d:	e8 c0 86 ff ff       	call   c0011912 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019252:	59                   	pop    ecx
c0019253:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c0019259:	e8 c0 88 ff ff       	call   c0011b1e <VgaText::clearScreen()>
c001925e:	58                   	pop    eax
c001925f:	5a                   	pop    edx
c0019260:	68 d7 35 02 c0       	push   0xc00235d7
c0019265:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c001926b:	e8 da 86 ff ff       	call   c001194a <VgaText::setTitle(char*)>
c0019270:	83 c4 0c             	add    esp,0xc
c0019273:	6a 01                	push   0x1
c0019275:	6a 0f                	push   0xf
c0019277:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c001927d:	e8 90 86 ff ff       	call   c0011912 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0019282:	59                   	pop    ecx
c0019283:	58                   	pop    eax
c0019284:	68 8d 45 02 c0       	push   0xc002458d
c0019289:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c001928f:	e8 8c 8b ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0019294:	83 c4 0c             	add    esp,0xc
c0019297:	6a 0f                	push   0xf
c0019299:	6a 01                	push   0x1
c001929b:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c00192a1:	e8 6c 86 ff ff       	call   c0011912 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00192a6:	58                   	pop    eax
c00192a7:	5a                   	pop    edx
c00192a8:	68 96 45 02 c0       	push   0xc0024596
c00192ad:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c00192b3:	e8 68 8b ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c00192b8:	83 c4 0c             	add    esp,0xc
c00192bb:	6a 01                	push   0x1
c00192bd:	6a 0f                	push   0xf
c00192bf:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c00192c5:	e8 48 86 ff ff       	call   c0011912 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00192ca:	59                   	pop    ecx
c00192cb:	58                   	pop    eax
c00192cc:	68 da 45 02 c0       	push   0xc00245da
c00192d1:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c00192d7:	e8 44 8b ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c00192dc:	58                   	pop    eax
c00192dd:	5a                   	pop    edx
c00192de:	68 a3 45 02 c0       	push   0xc00245a3
c00192e3:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c00192e9:	e8 32 8b ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c00192ee:	59                   	pop    ecx
c00192ef:	58                   	pop    eax
c00192f0:	68 dd 45 02 c0       	push   0xc00245dd
c00192f5:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c00192fb:	e8 20 8b ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0019300:	58                   	pop    eax
c0019301:	5a                   	pop    edx
c0019302:	53                   	push   ebx
c0019303:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c0019309:	e8 12 8b ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c001930e:	59                   	pop    ecx
c001930f:	5b                   	pop    ebx
c0019310:	68 da 45 02 c0       	push   0xc00245da
c0019315:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c001931b:	e8 00 8b ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c0019320:	83 c4 10             	add    esp,0x10
c0019323:	eb fe                	jmp    c0019323 <HalPanic(char const*)+0x112>

c0019325 <HalQueryPerformanceCounter()>:
c0019325:	31 c0                	xor    eax,eax
c0019327:	31 d2                	xor    edx,edx
c0019329:	f6 05 ae d7 02 c0 08 	test   BYTE PTR ds:0xc002d7ae,0x8
c0019330:	75 02                	jne    c0019334 <HalQueryPerformanceCounter()+0xf>
c0019332:	0f 31                	rdtsc  
c0019334:	c3                   	ret    

c0019335 <HalInitialise()>:
c0019335:	53                   	push   ebx
c0019336:	83 ec 08             	sub    esp,0x8
c0019339:	c6 05 60 d7 02 c0 00 	mov    BYTE PTR ds:0xc002d760,0x0
c0019340:	a0 ac d7 02 c0       	mov    al,ds:0xc002d7ac
c0019345:	83 e0 fe             	and    eax,0xfffffffe
c0019348:	a2 ac d7 02 c0       	mov    ds:0xc002d7ac,al
c001934d:	e8 d2 07 00 00       	call   c0019b24 <picOpen()>
c0019352:	80 3d 60 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d760,0x0
c0019359:	74 0a                	je     c0019365 <HalInitialise()+0x30>
c001935b:	e8 14 07 00 00       	call   c0019a74 <picDisable()>
c0019360:	e8 bf 6a 00 00       	call   c001fe24 <apicOpen()>
c0019365:	bb 0f 00 00 00       	mov    ebx,0xf
c001936a:	50                   	push   eax
c001936b:	6a 00                	push   0x0
c001936d:	68 c4 e2 00 c0       	push   0xc000e2c4
c0019372:	6a 00                	push   0x0
c0019374:	e8 cc 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019379:	83 c4 0c             	add    esp,0xc
c001937c:	6a 00                	push   0x0
c001937e:	68 c4 e2 00 c0       	push   0xc000e2c4
c0019383:	6a 01                	push   0x1
c0019385:	e8 bb 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001938a:	83 c4 0c             	add    esp,0xc
c001938d:	6a 00                	push   0x0
c001938f:	68 b4 e2 00 c0       	push   0xc000e2b4
c0019394:	6a 02                	push   0x2
c0019396:	e8 aa 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001939b:	83 c4 0c             	add    esp,0xc
c001939e:	6a 00                	push   0x0
c00193a0:	68 c4 e2 00 c0       	push   0xc000e2c4
c00193a5:	6a 03                	push   0x3
c00193a7:	e8 99 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00193ac:	83 c4 0c             	add    esp,0xc
c00193af:	6a 00                	push   0x0
c00193b1:	68 c4 e2 00 c0       	push   0xc000e2c4
c00193b6:	6a 04                	push   0x4
c00193b8:	e8 88 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00193bd:	83 c4 0c             	add    esp,0xc
c00193c0:	6a 00                	push   0x0
c00193c2:	68 c4 e2 00 c0       	push   0xc000e2c4
c00193c7:	6a 05                	push   0x5
c00193c9:	e8 77 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00193ce:	83 c4 0c             	add    esp,0xc
c00193d1:	6a 00                	push   0x0
c00193d3:	68 f8 e2 00 c0       	push   0xc000e2f8
c00193d8:	6a 06                	push   0x6
c00193da:	e8 66 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00193df:	83 c4 0c             	add    esp,0xc
c00193e2:	6a 00                	push   0x0
c00193e4:	68 4c e3 00 c0       	push   0xc000e34c
c00193e9:	6a 08                	push   0x8
c00193eb:	e8 55 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c00193f0:	83 c4 0c             	add    esp,0xc
c00193f3:	6a 00                	push   0x0
c00193f5:	68 c4 e2 00 c0       	push   0xc000e2c4
c00193fa:	6a 09                	push   0x9
c00193fc:	e8 44 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019401:	83 c4 0c             	add    esp,0xc
c0019404:	6a 00                	push   0x0
c0019406:	68 c4 e2 00 c0       	push   0xc000e2c4
c001940b:	6a 0a                	push   0xa
c001940d:	e8 33 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019412:	83 c4 0c             	add    esp,0xc
c0019415:	6a 00                	push   0x0
c0019417:	68 c4 e2 00 c0       	push   0xc000e2c4
c001941c:	6a 0b                	push   0xb
c001941e:	e8 22 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019423:	83 c4 0c             	add    esp,0xc
c0019426:	6a 00                	push   0x0
c0019428:	68 fc e1 00 c0       	push   0xc000e1fc
c001942d:	6a 0d                	push   0xd
c001942f:	e8 11 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019434:	83 c4 0c             	add    esp,0xc
c0019437:	6a 00                	push   0x0
c0019439:	68 50 e2 00 c0       	push   0xc000e250
c001943e:	6a 0e                	push   0xe
c0019440:	e8 00 04 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019445:	83 c4 10             	add    esp,0x10
c0019448:	50                   	push   eax
c0019449:	6a 00                	push   0x0
c001944b:	68 c4 e2 00 c0       	push   0xc000e2c4
c0019450:	53                   	push   ebx
c0019451:	43                   	inc    ebx
c0019452:	e8 ee 03 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c0019457:	83 c4 10             	add    esp,0x10
c001945a:	83 fb 1e             	cmp    ebx,0x1e
c001945d:	75 e9                	jne    c0019448 <HalInitialise()+0x113>
c001945f:	50                   	push   eax
c0019460:	6a 00                	push   0x0
c0019462:	68 90 17 01 c0       	push   0xc0011790
c0019467:	6a 60                	push   0x60
c0019469:	e8 d7 03 00 00       	call   c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>
c001946e:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c0019473:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c001947d:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0019484:	e8 7a 5e ff ff       	call   c000f303 <malloc>
c0019489:	89 04 24             	mov    DWORD PTR [esp],eax
c001948c:	89 c3                	mov    ebx,eax
c001948e:	e8 ff 0d 00 00       	call   c001a292 <RTC::RTC()>
c0019493:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001949d:	5a                   	pop    edx
c001949e:	59                   	pop    ecx
c001949f:	53                   	push   ebx
c00194a0:	ff 35 70 ad 02 c0    	push   DWORD PTR ds:0xc002ad70
c00194a6:	e8 e7 fb fe ff       	call   c0009092 <Device::addChild(Device*)>
c00194ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00194ad:	6a 00                	push   0x0
c00194af:	6a 00                	push   0x0
c00194b1:	6a 00                	push   0x0
c00194b3:	53                   	push   ebx
c00194b4:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00194b7:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c00194bc:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c00194c2:	83 c4 28             	add    esp,0x28
c00194c5:	5b                   	pop    ebx
c00194c6:	c3                   	ret    

c00194c7 <HalMakeBeep(int)>:
c00194c7:	53                   	push   ebx
c00194c8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00194cc:	85 db                	test   ebx,ebx
c00194ce:	75 07                	jne    c00194d7 <HalMakeBeep(int)+0x10>
c00194d0:	e4 61                	in     al,0x61
c00194d2:	83 e0 fc             	and    eax,0xfffffffc
c00194d5:	eb 26                	jmp    c00194fd <HalMakeBeep(int)+0x36>
c00194d7:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00194dc:	99                   	cdq    
c00194dd:	f7 fb                	idiv   ebx
c00194df:	89 c1                	mov    ecx,eax
c00194e1:	b0 b6                	mov    al,0xb6
c00194e3:	e6 43                	out    0x43,al
c00194e5:	88 c8                	mov    al,cl
c00194e7:	e6 42                	out    0x42,al
c00194e9:	89 c8                	mov    eax,ecx
c00194eb:	c1 e8 08             	shr    eax,0x8
c00194ee:	e6 42                	out    0x42,al
c00194f0:	e4 61                	in     al,0x61
c00194f2:	89 c2                	mov    edx,eax
c00194f4:	83 ca 03             	or     edx,0x3
c00194f7:	38 d0                	cmp    al,dl
c00194f9:	74 04                	je     c00194ff <HalMakeBeep(int)+0x38>
c00194fb:	88 d0                	mov    al,dl
c00194fd:	e6 61                	out    0x61,al
c00194ff:	5b                   	pop    ebx
c0019500:	c3                   	ret    

c0019501 <HalGetRand()>:
c0019501:	31 c0                	xor    eax,eax
c0019503:	c3                   	ret    

c0019504 <HalEndOfInterrupt(int)>:
c0019504:	80 3d 60 d7 02 c0 00 	cmp    BYTE PTR ds:0xc002d760,0x0
c001950b:	74 1d                	je     c001952a <HalEndOfInterrupt(int)+0x26>
c001950d:	83 ec 18             	sub    esp,0x18
c0019510:	6a 1b                	push   0x1b
c0019512:	e8 0c f5 ff ff       	call   c0018a23 <x86rdmsr(unsigned int)>
c0019517:	25 00 f0 ff ff       	and    eax,0xfffff000
c001951c:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0019526:	83 c4 1c             	add    esp,0x1c
c0019529:	c3                   	ret    
c001952a:	e9 79 07 00 00       	jmp    c0019ca8 <picEOI(int)>

c001952f <HalRestart()>:
c001952f:	c3                   	ret    

c0019530 <HalShutdown()>:
c0019530:	c3                   	ret    

c0019531 <HalSleep()>:
c0019531:	c3                   	ret    

c0019532 <CPU::CPU()>:
c0019532:	83 ec 0c             	sub    esp,0xc
c0019535:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019539:	83 ec 08             	sub    esp,0x8
c001953c:	68 4f 43 02 c0       	push   0xc002434f
c0019541:	50                   	push   eax
c0019542:	e8 ad fc fe ff       	call   c00091f4 <Device::Device(char const*)>
c0019547:	83 c4 10             	add    esp,0x10
c001954a:	ba ac 46 02 c0       	mov    edx,0xc00246ac
c001954f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019553:	89 10                	mov    DWORD PTR [eax],edx
c0019555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019559:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0019563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019567:	05 64 01 00 00       	add    eax,0x164
c001956c:	83 ec 0c             	sub    esp,0xc
c001956f:	50                   	push   eax
c0019570:	e8 2b 4e ff ff       	call   c000e3a0 <GDT::GDT()>
c0019575:	83 c4 10             	add    esp,0x10
c0019578:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001957c:	05 68 09 00 00       	add    eax,0x968
c0019581:	83 ec 0c             	sub    esp,0xc
c0019584:	50                   	push   eax
c0019585:	e8 6a 50 ff ff       	call   c000e5f4 <IDT::IDT()>
c001958a:	83 c4 10             	add    esp,0x10
c001958d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019591:	05 68 11 00 00       	add    eax,0x1168
c0019596:	83 ec 0c             	sub    esp,0xc
c0019599:	50                   	push   eax
c001959a:	e8 5d 8d ff ff       	call   c00122fc <TSS::TSS()>
c001959f:	83 c4 10             	add    esp,0x10
c00195a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195a6:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c00195b0:	90                   	nop
c00195b1:	83 c4 0c             	add    esp,0xc
c00195b4:	c3                   	ret    
c00195b5:	90                   	nop

c00195b6 <CPU::setupSMEP()>:
c00195b6:	0f 20 e0             	mov    eax,cr4
c00195b9:	0d 00 00 10 00       	or     eax,0x100000
c00195be:	0f 22 e0             	mov    cr4,eax
c00195c1:	c3                   	ret    

c00195c2 <CPU::setupUMIP()>:
c00195c2:	0f 20 e0             	mov    eax,cr4
c00195c5:	80 cc 08             	or     ah,0x8
c00195c8:	0f 22 e0             	mov    cr4,eax
c00195cb:	c3                   	ret    

c00195cc <CPU::setupTSC()>:
c00195cc:	0f 20 e0             	mov    eax,cr4
c00195cf:	83 c8 04             	or     eax,0x4
c00195d2:	0f 22 e0             	mov    cr4,eax
c00195d5:	c3                   	ret    

c00195d6 <CPU::setupLargePages()>:
c00195d6:	0f 20 e0             	mov    eax,cr4
c00195d9:	83 c8 10             	or     eax,0x10
c00195dc:	0f 22 e0             	mov    cr4,eax
c00195df:	c3                   	ret    

c00195e0 <CPU::setupPAT()>:
c00195e0:	f6 05 ac d7 02 c0 08 	test   BYTE PTR ds:0xc002d7ac,0x8
c00195e7:	74 28                	je     c0019611 <CPU::setupPAT()+0x31>
c00195e9:	53                   	push   ebx
c00195ea:	83 ec 14             	sub    esp,0x14
c00195ed:	68 77 02 00 00       	push   0x277
c00195f2:	e8 2c f4 ff ff       	call   c0018a23 <x86rdmsr(unsigned int)>
c00195f7:	83 c4 0c             	add    esp,0xc
c00195fa:	83 e2 f8             	and    edx,0xfffffff8
c00195fd:	83 ca 01             	or     edx,0x1
c0019600:	52                   	push   edx
c0019601:	50                   	push   eax
c0019602:	68 77 02 00 00       	push   0x277
c0019607:	e8 55 f4 ff ff       	call   c0018a61 <x86wrmsr(unsigned int, unsigned long long)>
c001960c:	83 c4 18             	add    esp,0x18
c001960f:	5b                   	pop    ebx
c0019610:	c3                   	ret    
c0019611:	c3                   	ret    

c0019612 <CPU::setupMTRR()>:
c0019612:	c3                   	ret    
c0019613:	90                   	nop

c0019614 <CPU::setupGlobalPages()>:
c0019614:	0f 20 e0             	mov    eax,cr4
c0019617:	0c 80                	or     al,0x80
c0019619:	0f 22 e0             	mov    cr4,eax
c001961c:	c3                   	ret    
c001961d:	90                   	nop

c001961e <CPU::allowUsermodeDataAccess()>:
c001961e:	f6 05 af d7 02 c0 40 	test   BYTE PTR ds:0xc002d7af,0x40
c0019625:	74 03                	je     c001962a <CPU::allowUsermodeDataAccess()+0xc>
c0019627:	0f 01 cb             	stac   
c001962a:	c3                   	ret    
c001962b:	90                   	nop

c001962c <CPU::prohibitUsermodeDataAccess()>:
c001962c:	f6 05 af d7 02 c0 40 	test   BYTE PTR ds:0xc002d7af,0x40
c0019633:	74 03                	je     c0019638 <CPU::prohibitUsermodeDataAccess()+0xc>
c0019635:	0f 01 ca             	clac   
c0019638:	c3                   	ret    
c0019639:	90                   	nop

c001963a <CPU::setupSMAP()>:
c001963a:	0f 20 e0             	mov    eax,cr4
c001963d:	0d 00 00 20 00       	or     eax,0x200000
c0019642:	0f 22 e0             	mov    cr4,eax
c0019645:	eb e5                	jmp    c001962c <CPU::prohibitUsermodeDataAccess()>
c0019647:	90                   	nop

c0019648 <CPU::setupFeatures()>:
c0019648:	53                   	push   ebx
c0019649:	83 ec 08             	sub    esp,0x8
c001964c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019650:	f6 05 af d7 02 c0 20 	test   BYTE PTR ds:0xc002d7af,0x20
c0019657:	74 18                	je     c0019671 <CPU::setupFeatures()+0x29>
c0019659:	83 ec 0c             	sub    esp,0xc
c001965c:	68 e8 45 02 c0       	push   0xc00245e8
c0019661:	e8 fe d8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019666:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019669:	e8 54 ff ff ff       	call   c00195c2 <CPU::setupUMIP()>
c001966e:	83 c4 10             	add    esp,0x10
c0019671:	f6 05 ae d7 02 c0 08 	test   BYTE PTR ds:0xc002d7ae,0x8
c0019678:	74 18                	je     c0019692 <CPU::setupFeatures()+0x4a>
c001967a:	83 ec 0c             	sub    esp,0xc
c001967d:	68 f2 45 02 c0       	push   0xc00245f2
c0019682:	e8 dd d8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c0019687:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001968a:	e8 3d ff ff ff       	call   c00195cc <CPU::setupTSC()>
c001968f:	83 c4 10             	add    esp,0x10
c0019692:	f6 05 ae d7 02 c0 20 	test   BYTE PTR ds:0xc002d7ae,0x20
c0019699:	74 18                	je     c00196b3 <CPU::setupFeatures()+0x6b>
c001969b:	83 ec 0c             	sub    esp,0xc
c001969e:	68 fb 45 02 c0       	push   0xc00245fb
c00196a3:	e8 bc d8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00196a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196ab:	e8 26 ff ff ff       	call   c00195d6 <CPU::setupLargePages()>
c00196b0:	83 c4 10             	add    esp,0x10
c00196b3:	f6 05 ae d7 02 c0 40 	test   BYTE PTR ds:0xc002d7ae,0x40
c00196ba:	74 18                	je     c00196d4 <CPU::setupFeatures()+0x8c>
c00196bc:	83 ec 0c             	sub    esp,0xc
c00196bf:	68 04 46 02 c0       	push   0xc0024604
c00196c4:	e8 9b d8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00196c9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196cc:	e8 43 ff ff ff       	call   c0019614 <CPU::setupGlobalPages()>
c00196d1:	83 c4 10             	add    esp,0x10
c00196d4:	f6 05 ae d7 02 c0 80 	test   BYTE PTR ds:0xc002d7ae,0x80
c00196db:	74 18                	je     c00196f5 <CPU::setupFeatures()+0xad>
c00196dd:	83 ec 0c             	sub    esp,0xc
c00196e0:	68 16 46 02 c0       	push   0xc0024616
c00196e5:	e8 7a d8 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00196ea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00196ed:	e8 ee fe ff ff       	call   c00195e0 <CPU::setupPAT()>
c00196f2:	83 c4 10             	add    esp,0x10
c00196f5:	f6 05 b0 d7 02 c0 04 	test   BYTE PTR ds:0xc002d7b0,0x4
c00196fc:	74 11                	je     c001970f <CPU::setupFeatures()+0xc7>
c00196fe:	c7 44 24 10 1f 46 02 c0 	mov    DWORD PTR [esp+0x10],0xc002461f
c0019706:	83 c4 08             	add    esp,0x8
c0019709:	5b                   	pop    ebx
c001970a:	e9 55 d8 fe ff       	jmp    c0006f64 <Dbg::kprintf(char const*, ...)>
c001970f:	83 c4 08             	add    esp,0x8
c0019712:	5b                   	pop    ebx
c0019713:	c3                   	ret    

c0019714 <CPU::open(int, int, void*)>:
c0019714:	55                   	push   ebp
c0019715:	57                   	push   edi
c0019716:	56                   	push   esi
c0019717:	53                   	push   ebx
c0019718:	83 ec 18             	sub    esp,0x18
c001971b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001971f:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019723:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0019727:	8d 83 64 01 00 00    	lea    eax,[ebx+0x164]
c001972d:	89 bb 60 01 00 00    	mov    DWORD PTR [ebx+0x160],edi
c0019733:	8d ab 68 11 00 00    	lea    ebp,[ebx+0x1168]
c0019739:	50                   	push   eax
c001973a:	e8 c3 4c ff ff       	call   c000e402 <GDT::setup()>
c001973f:	83 c4 0c             	add    esp,0xc
c0019742:	6a 00                	push   0x0
c0019744:	68 ef be ad de       	push   0xdeadbeef
c0019749:	55                   	push   ebp
c001974a:	e8 f1 8b ff ff       	call   c0012340 <TSS::setup(unsigned long, unsigned long)>
c001974f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019752:	e8 c9 8b ff ff       	call   c0012320 <TSS::flush()>
c0019757:	8d 83 68 09 00 00    	lea    eax,[ebx+0x968]
c001975d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019760:	e8 05 4f ff ff       	call   c000e66a <IDT::setup()>
c0019765:	b8 00 04 00 00       	mov    eax,0x400
c001976a:	0f 23 f8             	mov    dr7,eax
c001976d:	c7 83 5c 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x15c],0xc2400000
c0019777:	e8 c2 60 ff ff       	call   c000f83e <Phys::allocatePage()>
c001977c:	83 c4 10             	add    esp,0x10
c001977f:	89 83 58 01 00 00    	mov    DWORD PTR [ebx+0x158],eax
c0019785:	85 f6                	test   esi,esi
c0019787:	89 38                	mov    DWORD PTR [eax],edi
c0019789:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001978f:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019792:	74 10                	je     c00197a4 <CPU::open(int, int, void*)+0x90>
c0019794:	50                   	push   eax
c0019795:	50                   	push   eax
c0019796:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001979c:	56                   	push   esi
c001979d:	e8 58 95 ff ff       	call   c0012cfa <VAS::setCPUSpecific(unsigned long)>
c00197a2:	eb 0d                	jmp    c00197b1 <CPU::open(int, int, void*)+0x9d>
c00197a4:	83 ec 0c             	sub    esp,0xc
c00197a7:	68 29 46 02 c0       	push   0xc0024629
c00197ac:	e8 99 5e ff ff       	call   c000f64a <KePanic(char const*)>
c00197b1:	83 c4 10             	add    esp,0x10
c00197b4:	83 ec 0c             	sub    esp,0xc
c00197b7:	68 37 46 02 c0       	push   0xc0024637
c00197bc:	e8 0a 31 ff ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c00197c1:	e8 6f fb ff ff       	call   c0019335 <HalInitialise()>
c00197c6:	a1 c4 cd 02 c0       	mov    eax,ds:0xc002cdc4
c00197cb:	83 e0 10             	and    eax,0x10
c00197ce:	83 f8 01             	cmp    eax,0x1
c00197d1:	19 c0                	sbb    eax,eax
c00197d3:	83 e0 46             	and    eax,0x46
c00197d6:	83 c0 1e             	add    eax,0x1e
c00197d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00197dc:	e8 4c 0f ff ff       	call   c000a72d <setupTimer(int)>
c00197e1:	83 c4 10             	add    esp,0x10
c00197e4:	89 83 74 11 00 00    	mov    DWORD PTR [ebx+0x1174],eax
c00197ea:	f6 05 c4 cd 02 c0 20 	test   BYTE PTR ds:0xc002cdc4,0x20
c00197f1:	74 0c                	je     c00197ff <CPU::open(int, int, void*)+0xeb>
c00197f3:	83 ec 0c             	sub    esp,0xc
c00197f6:	53                   	push   ebx
c00197f7:	e8 4c fe ff ff       	call   c0019648 <CPU::setupFeatures()>
c00197fc:	83 c4 10             	add    esp,0x10
c00197ff:	83 c4 0c             	add    esp,0xc
c0019802:	31 c0                	xor    eax,eax
c0019804:	5b                   	pop    ebx
c0019805:	5e                   	pop    esi
c0019806:	5f                   	pop    edi
c0019807:	5d                   	pop    ebp
c0019808:	c3                   	ret    

c0019809 <convertLegacyIRQNumber(int)>:
c0019809:	83 ec 0c             	sub    esp,0xc
c001980c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019810:	f6 05 ac d7 02 c0 01 	test   BYTE PTR ds:0xc002d7ac,0x1
c0019817:	74 0c                	je     c0019825 <convertLegacyIRQNumber(int)+0x1c>
c0019819:	83 f8 0f             	cmp    eax,0xf
c001981c:	7f 0b                	jg     c0019829 <convertLegacyIRQNumber(int)+0x20>
c001981e:	0f b6 80 28 52 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdadd8]
c0019825:	83 c4 0c             	add    esp,0xc
c0019828:	c3                   	ret    
c0019829:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001982d:	83 ec 0c             	sub    esp,0xc
c0019830:	68 d0 46 02 c0       	push   0xc00246d0
c0019835:	e8 10 5e ff ff       	call   c000f64a <KePanic(char const*)>
c001983a:	83 c4 10             	add    esp,0x10
c001983d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019841:	83 c4 0c             	add    esp,0xc
c0019844:	c3                   	ret    

c0019845 <HalInstallISRHandler(int, void (*)(regs*, void*), void*)>:
c0019845:	56                   	push   esi
c0019846:	31 c0                	xor    eax,eax
c0019848:	53                   	push   ebx
c0019849:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001984d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019851:	89 ca                	mov    edx,ecx
c0019853:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019857:	c1 e2 04             	shl    edx,0x4
c001985a:	83 bc 82 80 bd 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd4280],0x0
c0019862:	74 17                	je     c001987b <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c0019864:	83 c0 01             	add    eax,0x1
c0019867:	83 f8 04             	cmp    eax,0x4
c001986a:	75 ee                	jne    c001985a <HalInstallISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c001986c:	c7 44 24 0c 31 47 02 c0 	mov    DWORD PTR [esp+0xc],0xc0024731
c0019874:	5b                   	pop    ebx
c0019875:	5e                   	pop    esi
c0019876:	e9 cf 5d ff ff       	jmp    c000f64a <KePanic(char const*)>
c001987b:	8d 04 88             	lea    eax,[eax+ecx*4]
c001987e:	89 1c 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],ebx
c0019885:	89 34 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],esi
c001988c:	5b                   	pop    ebx
c001988d:	5e                   	pop    esi
c001988e:	c3                   	ret    

c001988f <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001988f:	57                   	push   edi
c0019890:	f6 05 ac d7 02 c0 01 	test   BYTE PTR ds:0xc002d7ac,0x1
c0019897:	56                   	push   esi
c0019898:	53                   	push   ebx
c0019899:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001989d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00198a1:	74 54                	je     c00198f7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x68>
c00198a3:	89 c7                	mov    edi,eax
c00198a5:	84 c0                	test   al,al
c00198a7:	74 1d                	je     c00198c6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c00198a9:	83 fe 0f             	cmp    esi,0xf
c00198ac:	0f 8f d5 00 00 00    	jg     c0019987 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xf8>
c00198b2:	0f b6 b6 28 52 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdadd8]
c00198b9:	0f b7 bc 36 c0 aa 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd5540]
c00198c1:	d1 ef                	shr    edi,1
c00198c3:	83 e7 01             	and    edi,0x1
c00198c6:	83 ec 08             	sub    esp,0x8
c00198c9:	a1 00 e1 02 c0       	mov    eax,ds:0xc002e100
c00198ce:	31 db                	xor    ebx,ebx
c00198d0:	50                   	push   eax
c00198d1:	68 3e 47 02 c0       	push   0xc002473e
c00198d6:	e8 89 d6 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c00198db:	83 c4 10             	add    esp,0x10
c00198de:	a1 00 e1 02 c0       	mov    eax,ds:0xc002e100
c00198e3:	85 c0                	test   eax,eax
c00198e5:	7f 55                	jg     c001993c <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c00198e7:	83 ec 0c             	sub    esp,0xc
c00198ea:	68 55 47 02 c0       	push   0xc0024755
c00198ef:	e8 56 5d ff ff       	call   c000f64a <KePanic(char const*)>
c00198f4:	83 c4 10             	add    esp,0x10
c00198f7:	8d 7e 20             	lea    edi,[esi+0x20]
c00198fa:	89 f8                	mov    eax,edi
c00198fc:	31 d2                	xor    edx,edx
c00198fe:	c1 e0 04             	shl    eax,0x4
c0019901:	8b 8c 90 80 bd 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd4280]
c0019908:	85 c9                	test   ecx,ecx
c001990a:	0f 84 8e 00 00 00    	je     c001999e <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x10f>
c0019910:	83 c2 01             	add    edx,0x1
c0019913:	83 fa 04             	cmp    edx,0x4
c0019916:	75 e9                	jne    c0019901 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x72>
c0019918:	83 ec 0c             	sub    esp,0xc
c001991b:	68 0c 47 02 c0       	push   0xc002470c
c0019920:	e8 25 5d ff ff       	call   c000f64a <KePanic(char const*)>
c0019925:	83 c4 10             	add    esp,0x10
c0019928:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001992d:	5b                   	pop    ebx
c001992e:	5e                   	pop    esi
c001992f:	5f                   	pop    edi
c0019930:	c3                   	ret    
c0019931:	83 c3 01             	add    ebx,0x1
c0019934:	39 1d 00 e1 02 c0    	cmp    DWORD PTR ds:0xc002e100,ebx
c001993a:	7e ab                	jle    c00198e7 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x58>
c001993c:	83 ec 08             	sub    esp,0x8
c001993f:	8b 04 9d 20 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1ee0]
c0019946:	56                   	push   esi
c0019947:	50                   	push   eax
c0019948:	e8 63 66 00 00       	call   c001ffb0 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c001994d:	83 c4 10             	add    esp,0x10
c0019950:	84 c0                	test   al,al
c0019952:	74 dd                	je     c0019931 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa2>
c0019954:	83 ec 04             	sub    esp,0x4
c0019957:	89 f8                	mov    eax,edi
c0019959:	8b 1c 9d 20 e1 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd1ee0]
c0019960:	0f b6 f8             	movzx  edi,al
c0019963:	57                   	push   edi
c0019964:	8d 7e 20             	lea    edi,[esi+0x20]
c0019967:	6a 00                	push   0x0
c0019969:	89 f8                	mov    eax,edi
c001996b:	0f b6 c0             	movzx  eax,al
c001996e:	50                   	push   eax
c001996f:	89 f0                	mov    eax,esi
c0019971:	6a 00                	push   0x0
c0019973:	0f b6 c0             	movzx  eax,al
c0019976:	6a 00                	push   0x0
c0019978:	50                   	push   eax
c0019979:	53                   	push   ebx
c001997a:	e8 9d 67 00 00       	call   c002011c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c001997f:	83 c4 20             	add    esp,0x20
c0019982:	e9 73 ff ff ff       	jmp    c00198fa <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6b>
c0019987:	83 ec 0c             	sub    esp,0xc
c001998a:	31 ff                	xor    edi,edi
c001998c:	68 d0 46 02 c0       	push   0xc00246d0
c0019991:	e8 b4 5c ff ff       	call   c000f64a <KePanic(char const*)>
c0019996:	83 c4 10             	add    esp,0x10
c0019999:	e9 28 ff ff ff       	jmp    c00198c6 <HalInstallIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x37>
c001999e:	8d 04 ba             	lea    eax,[edx+edi*4]
c00199a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00199a5:	89 14 85 80 bd 02 c0 	mov    DWORD PTR [eax*4-0x3ffd4280],edx
c00199ac:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00199b0:	5b                   	pop    ebx
c00199b1:	89 14 85 80 ad 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5280],edx
c00199b8:	89 f0                	mov    eax,esi
c00199ba:	5e                   	pop    esi
c00199bb:	5f                   	pop    edi
c00199bc:	c3                   	ret    

c00199bd <HalUninstallISRHandler(int, void (*)(regs*, void*))>:
c00199bd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00199c1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00199c5:	c1 e0 04             	shl    eax,0x4
c00199c8:	8d 50 10             	lea    edx,[eax+0x10]
c00199cb:	39 88 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ecx
c00199d1:	74 08                	je     c00199db <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c00199d3:	83 c0 04             	add    eax,0x4
c00199d6:	39 d0                	cmp    eax,edx
c00199d8:	75 f1                	jne    c00199cb <HalUninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c00199da:	c3                   	ret    
c00199db:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c00199e5:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c00199ef:	eb e2                	jmp    c00199d3 <HalUninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c00199f1 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00199f1:	53                   	push   ebx
c00199f2:	83 ec 08             	sub    esp,0x8
c00199f5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00199f9:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00199fe:	74 09                	je     c0019a09 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0019a00:	f6 05 ac d7 02 c0 01 	test   BYTE PTR ds:0xc002d7ac,0x1
c0019a07:	75 37                	jne    c0019a40 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4f>
c0019a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a0d:	83 c0 20             	add    eax,0x20
c0019a10:	c1 e0 04             	shl    eax,0x4
c0019a13:	8d 50 10             	lea    edx,[eax+0x10]
c0019a16:	39 98 80 bd 02 c0    	cmp    DWORD PTR [eax-0x3ffd4280],ebx
c0019a1c:	74 0c                	je     c0019a2a <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x39>
c0019a1e:	83 c0 04             	add    eax,0x4
c0019a21:	39 d0                	cmp    eax,edx
c0019a23:	75 f1                	jne    c0019a16 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x25>
c0019a25:	83 c4 08             	add    esp,0x8
c0019a28:	5b                   	pop    ebx
c0019a29:	c3                   	ret    
c0019a2a:	c7 80 80 bd 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd4280],0x0
c0019a34:	c7 80 80 ad 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd5280],0x0
c0019a3e:	eb de                	jmp    c0019a1e <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2d>
c0019a40:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c0019a45:	7f 11                	jg     c0019a58 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x67>
c0019a47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a4b:	0f b6 80 28 52 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdadd8]
c0019a52:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019a56:	eb b1                	jmp    c0019a09 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0019a58:	83 ec 0c             	sub    esp,0xc
c0019a5b:	68 62 47 02 c0       	push   0xc0024762
c0019a60:	e8 e5 5b ff ff       	call   c000f64a <KePanic(char const*)>
c0019a65:	83 c4 10             	add    esp,0x10
c0019a68:	eb 9f                	jmp    c0019a09 <HalUninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x18>
c0019a6a:	66 90                	xchg   ax,ax

c0019a6c <picIoWait()>:
c0019a6c:	eb 00                	jmp    c0019a6e <picIoWait()+0x2>
c0019a6e:	eb 00                	jmp    c0019a70 <picIoWait()+0x4>
c0019a70:	90                   	nop
c0019a71:	c3                   	ret    
c0019a72:	66 90                	xchg   ax,ax

c0019a74 <picDisable()>:
c0019a74:	83 ec 10             	sub    esp,0x10
c0019a77:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0019a7e:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0019a83:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019a87:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019a8c:	ee                   	out    dx,al
c0019a8d:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0019a94:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0019a99:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019a9d:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0019aa2:	ee                   	out    dx,al
c0019aa3:	90                   	nop
c0019aa4:	83 c4 10             	add    esp,0x10
c0019aa7:	c3                   	ret    

c0019aa8 <picGetIRQReg(int)>:
c0019aa8:	83 ec 10             	sub    esp,0x10
c0019aab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019aaf:	0f b6 c0             	movzx  eax,al
c0019ab2:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019ab9:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0019abd:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019ac1:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019ac6:	ee                   	out    dx,al
c0019ac7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019acb:	0f b6 c0             	movzx  eax,al
c0019ace:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019ad5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0019ad9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019add:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019ae2:	ee                   	out    dx,al
c0019ae3:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0019aea:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0019aef:	89 c2                	mov    edx,eax
c0019af1:	ec                   	in     al,dx
c0019af2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0019af6:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019afa:	0f b6 c0             	movzx  eax,al
c0019afd:	c1 e0 08             	shl    eax,0x8
c0019b00:	89 c1                	mov    ecx,eax
c0019b02:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0019b09:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0019b0e:	89 c2                	mov    edx,eax
c0019b10:	ec                   	in     al,dx
c0019b11:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0019b15:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0019b19:	0f b6 c0             	movzx  eax,al
c0019b1c:	09 c8                	or     eax,ecx
c0019b1e:	83 c4 10             	add    esp,0x10
c0019b21:	c3                   	ret    
c0019b22:	66 90                	xchg   ax,ax

c0019b24 <picOpen()>:
c0019b24:	83 ec 50             	sub    esp,0x50
c0019b27:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0019b2e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0019b33:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0019b37:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019b3b:	ee                   	out    dx,al
c0019b3c:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0019b43:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0019b48:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0019b4c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0019b50:	ee                   	out    dx,al
c0019b51:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0019b59:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0019b61:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0019b68:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019b6c:	89 c2                	mov    edx,eax
c0019b6e:	ec                   	in     al,dx
c0019b6f:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0019b73:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0019b77:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0019b7b:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0019b82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0019b86:	89 c2                	mov    edx,eax
c0019b88:	ec                   	in     al,dx
c0019b89:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0019b8d:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0019b91:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0019b95:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0019b9c:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0019ba1:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0019ba5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0019ba9:	ee                   	out    dx,al
c0019baa:	e8 bd fe ff ff       	call   c0019a6c <picIoWait()>
c0019baf:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0019bb6:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0019bbb:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0019bbf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0019bc3:	ee                   	out    dx,al
c0019bc4:	e8 a3 fe ff ff       	call   c0019a6c <picIoWait()>
c0019bc9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0019bcd:	0f b6 c0             	movzx  eax,al
c0019bd0:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0019bd7:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0019bdb:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0019bdf:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019be3:	ee                   	out    dx,al
c0019be4:	e8 83 fe ff ff       	call   c0019a6c <picIoWait()>
c0019be9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0019bed:	0f b6 c0             	movzx  eax,al
c0019bf0:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0019bf7:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0019bfb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0019bff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0019c03:	ee                   	out    dx,al
c0019c04:	e8 63 fe ff ff       	call   c0019a6c <picIoWait()>
c0019c09:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0019c10:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0019c15:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0019c19:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019c1d:	ee                   	out    dx,al
c0019c1e:	e8 49 fe ff ff       	call   c0019a6c <picIoWait()>
c0019c23:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0019c2a:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0019c2f:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019c33:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0019c37:	ee                   	out    dx,al
c0019c38:	e8 2f fe ff ff       	call   c0019a6c <picIoWait()>
c0019c3d:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c0019c44:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0019c49:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0019c4d:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0019c51:	ee                   	out    dx,al
c0019c52:	e8 15 fe ff ff       	call   c0019a6c <picIoWait()>
c0019c57:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0019c5e:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c0019c63:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0019c67:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0019c6b:	ee                   	out    dx,al
c0019c6c:	e8 fb fd ff ff       	call   c0019a6c <picIoWait()>
c0019c71:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c0019c76:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0019c7d:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0019c81:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0019c85:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0019c89:	ee                   	out    dx,al
c0019c8a:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0019c8f:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c0019c96:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0019c9a:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0019c9e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0019ca2:	ee                   	out    dx,al
c0019ca3:	90                   	nop
c0019ca4:	83 c4 50             	add    esp,0x50
c0019ca7:	c3                   	ret    

c0019ca8 <picEOI(int)>:
c0019ca8:	83 ec 10             	sub    esp,0x10
c0019cab:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019cb0:	75 1e                	jne    c0019cd0 <picEOI(int)+0x28>
c0019cb2:	6a 0b                	push   0xb
c0019cb4:	e8 ef fd ff ff       	call   c0019aa8 <picGetIRQReg(int)>
c0019cb9:	83 c4 04             	add    esp,0x4
c0019cbc:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0019cc1:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c0019cc6:	25 80 00 00 00       	and    eax,0x80
c0019ccb:	74 73                	je     c0019d40 <picEOI(int)+0x98>
c0019ccd:	8d 76 00             	lea    esi,[esi+0x0]
c0019cd0:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0019cd5:	75 31                	jne    c0019d08 <picEOI(int)+0x60>
c0019cd7:	6a 0b                	push   0xb
c0019cd9:	e8 ca fd ff ff       	call   c0019aa8 <picGetIRQReg(int)>
c0019cde:	83 c4 04             	add    esp,0x4
c0019ce1:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0019ce6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019cea:	98                   	cwde   
c0019ceb:	85 c0                	test   eax,eax
c0019ced:	78 19                	js     c0019d08 <picEOI(int)+0x60>
c0019cef:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c0019cf6:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c0019cfb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0019cff:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0019d04:	ee                   	out    dx,al
c0019d05:	eb 3d                	jmp    c0019d44 <picEOI(int)+0x9c>
c0019d07:	90                   	nop
c0019d08:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0019d0d:	7e 19                	jle    c0019d28 <picEOI(int)+0x80>
c0019d0f:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0019d16:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c0019d1b:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0019d1f:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0019d24:	ee                   	out    dx,al
c0019d25:	8d 76 00             	lea    esi,[esi+0x0]
c0019d28:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0019d2f:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0019d34:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0019d38:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0019d3d:	ee                   	out    dx,al
c0019d3e:	eb 04                	jmp    c0019d44 <picEOI(int)+0x9c>
c0019d40:	90                   	nop
c0019d41:	8d 76 00             	lea    esi,[esi+0x0]
c0019d44:	83 c4 10             	add    esp,0x10
c0019d47:	c3                   	ret    

c0019d48 <RTC::open(int, int, void*)>:
c0019d48:	31 c0                	xor    eax,eax
c0019d4a:	c3                   	ret    
c0019d4b:	90                   	nop

c0019d4c <RTC::close(int, int, void*)>:
c0019d4c:	31 c0                	xor    eax,eax
c0019d4e:	c3                   	ret    
c0019d4f:	90                   	nop

c0019d50 <RTC::timeInSecondsUTC()>:
c0019d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d54:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0019d5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019d60:	c3                   	ret    
c0019d61:	90                   	nop

c0019d62 <RTC::timeInDatetimeUTC()>:
c0019d62:	53                   	push   ebx
c0019d63:	83 ec 14             	sub    esp,0x14
c0019d66:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0019d6a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019d6e:	8b 10                	mov    edx,DWORD PTR [eax]
c0019d70:	50                   	push   eax
c0019d71:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0019d74:	83 c4 0c             	add    esp,0xc
c0019d77:	52                   	push   edx
c0019d78:	50                   	push   eax
c0019d79:	53                   	push   ebx
c0019d7a:	e8 84 f0 fe ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c0019d7f:	89 d8                	mov    eax,ebx
c0019d81:	83 c4 14             	add    esp,0x14
c0019d84:	5b                   	pop    ebx
c0019d85:	c2 04 00             	ret    0x4

c0019d88 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0019d88:	56                   	push   esi
c0019d89:	53                   	push   ebx
c0019d8a:	83 ec 14             	sub    esp,0x14
c0019d8d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0019d91:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019d93:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c0019d96:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019d9a:	52                   	push   edx
c0019d9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019da3:	50                   	push   eax
c0019da4:	e8 5a f0 fe ff       	call   c0008e03 <KeSecondsToDatetime(unsigned long long)>
c0019da9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019dad:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0019db1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0019db5:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0019db9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0019dbd:	89 f0                	mov    eax,esi
c0019dbf:	83 c4 20             	add    esp,0x20
c0019dc2:	5b                   	pop    ebx
c0019dc3:	5e                   	pop    esi
c0019dc4:	ff e0                	jmp    eax

c0019dc6 <RTC::~RTC()>:
c0019dc6:	83 ec 0c             	sub    esp,0xc
c0019dc9:	ba 8c 47 02 c0       	mov    edx,0xc002478c
c0019dce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dd2:	89 10                	mov    DWORD PTR [eax],edx
c0019dd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019dd8:	83 ec 0c             	sub    esp,0xc
c0019ddb:	50                   	push   eax
c0019ddc:	e8 87 ed fe ff       	call   c0008b68 <Clock::~Clock()>
c0019de1:	83 c4 10             	add    esp,0x10
c0019de4:	90                   	nop
c0019de5:	83 c4 0c             	add    esp,0xc
c0019de8:	c3                   	ret    
c0019de9:	90                   	nop

c0019dea <RTC::~RTC()>:
c0019dea:	83 ec 0c             	sub    esp,0xc
c0019ded:	83 ec 0c             	sub    esp,0xc
c0019df0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019df4:	e8 cd ff ff ff       	call   c0019dc6 <RTC::~RTC()>
c0019df9:	83 c4 10             	add    esp,0x10
c0019dfc:	83 ec 08             	sub    esp,0x8
c0019dff:	68 60 01 00 00       	push   0x160
c0019e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019e08:	e8 7e 2b ff ff       	call   c000c98b <operator delete(void*, unsigned long)>
c0019e0d:	83 c4 10             	add    esp,0x10
c0019e10:	83 c4 0c             	add    esp,0xc
c0019e13:	c3                   	ret    

c0019e14 <RTC::get_update_in_progress_flag()>:
c0019e14:	83 ec 18             	sub    esp,0x18
c0019e17:	6a 0a                	push   0xa
c0019e19:	e8 09 db ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019e1e:	83 c4 1c             	add    esp,0x1c
c0019e21:	0f b6 c0             	movzx  eax,al
c0019e24:	c1 e8 07             	shr    eax,0x7
c0019e27:	c3                   	ret    

c0019e28 <RTC::completeRTCRefresh()>:
c0019e28:	55                   	push   ebp
c0019e29:	57                   	push   edi
c0019e2a:	56                   	push   esi
c0019e2b:	53                   	push   ebx
c0019e2c:	83 ec 3c             	sub    esp,0x3c
c0019e2f:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c0019e35:	83 ec 0c             	sub    esp,0xc
c0019e38:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019e3c:	e8 d3 ff ff ff       	call   c0019e14 <RTC::get_update_in_progress_flag()>
c0019e41:	83 c4 10             	add    esp,0x10
c0019e44:	84 c0                	test   al,al
c0019e46:	74 0e                	je     c0019e56 <RTC::completeRTCRefresh()+0x2e>
c0019e48:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019e4e:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c0019e54:	73 df                	jae    c0019e35 <RTC::completeRTCRefresh()+0xd>
c0019e56:	83 ec 0c             	sub    esp,0xc
c0019e59:	6a 00                	push   0x0
c0019e5b:	e8 c7 da ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019e60:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019e67:	89 c5                	mov    ebp,eax
c0019e69:	e8 b9 da ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019e6e:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019e75:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0019e79:	e8 a9 da ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019e7e:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019e85:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c0019e89:	e8 99 da ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019e8e:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019e95:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0019e99:	e8 89 da ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019e9e:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019ea5:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0019ea9:	e8 79 da ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019eae:	0f b6 c0             	movzx  eax,al
c0019eb1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0019eb5:	83 c4 10             	add    esp,0x10
c0019eb8:	8b 1d ec a7 02 c0    	mov    ebx,DWORD PTR ds:0xc002a7ec
c0019ebe:	83 ec 0c             	sub    esp,0xc
c0019ec1:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0019ec5:	e8 4a ff ff ff       	call   c0019e14 <RTC::get_update_in_progress_flag()>
c0019eca:	83 c4 10             	add    esp,0x10
c0019ecd:	84 c0                	test   al,al
c0019ecf:	74 0e                	je     c0019edf <RTC::completeRTCRefresh()+0xb7>
c0019ed1:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0019ed7:	3b 05 ec a7 02 c0    	cmp    eax,DWORD PTR ds:0xc002a7ec
c0019edd:	73 df                	jae    c0019ebe <RTC::completeRTCRefresh()+0x96>
c0019edf:	83 ec 0c             	sub    esp,0xc
c0019ee2:	6a 00                	push   0x0
c0019ee4:	e8 3e da ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019ee9:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c0019ef0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019ef4:	e8 2e da ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019ef9:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019f00:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019f04:	e8 1e da ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019f09:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0019f10:	88 c3                	mov    bl,al
c0019f12:	e8 10 da ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019f17:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0019f1e:	89 c6                	mov    esi,eax
c0019f20:	e8 02 da ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019f25:	c7 04 24 09 00 00 00 	mov    DWORD PTR [esp],0x9
c0019f2c:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0019f30:	e8 f2 d9 ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019f35:	89 e9                	mov    ecx,ebp
c0019f37:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0019f3b:	0f b6 f8             	movzx  edi,al
c0019f3e:	83 c4 10             	add    esp,0x10
c0019f41:	0f b6 eb             	movzx  ebp,bl
c0019f44:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c0019f48:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019f4d:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019f52:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019f56:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0019f5a:	0f 94 c0             	sete   al
c0019f5d:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0019f61:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c0019f65:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0019f6a:	0f 94 c2             	sete   dl
c0019f6d:	21 d0                	and    eax,edx
c0019f6f:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0019f73:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0019f77:	0f 94 c2             	sete   dl
c0019f7a:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0019f7e:	21 c2                	and    edx,eax
c0019f80:	89 f0                	mov    eax,esi
c0019f82:	0f b6 c0             	movzx  eax,al
c0019f85:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019f89:	89 f0                	mov    eax,esi
c0019f8b:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0019f8f:	0f 94 c0             	sete   al
c0019f92:	21 d0                	and    eax,edx
c0019f94:	31 d2                	xor    edx,edx
c0019f96:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0019f9a:	0f 94 c2             	sete   dl
c0019f9d:	85 c2                	test   edx,eax
c0019f9f:	75 27                	jne    c0019fc8 <RTC::completeRTCRefresh()+0x1a0>
c0019fa1:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0019fa5:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0019fa9:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0019fad:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c0019fb1:	89 f0                	mov    eax,esi
c0019fb3:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0019fb7:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0019fbb:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019fbf:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0019fc3:	e9 f0 fe ff ff       	jmp    c0019eb8 <RTC::completeRTCRefresh()+0x90>
c0019fc8:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c0019fcc:	75 d3                	jne    c0019fa1 <RTC::completeRTCRefresh()+0x179>
c0019fce:	83 ec 0c             	sub    esp,0xc
c0019fd1:	6a 0b                	push   0xb
c0019fd3:	e8 4f d9 ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c0019fd8:	83 c4 10             	add    esp,0x10
c0019fdb:	a8 04                	test   al,0x4
c0019fdd:	75 7a                	jne    c001a059 <RTC::completeRTCRefresh()+0x231>
c0019fdf:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019fe3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0019fe7:	83 e1 0f             	and    ecx,0xf
c0019fea:	c1 ea 04             	shr    edx,0x4
c0019fed:	83 e6 0f             	and    esi,0xf
c0019ff0:	6b d2 0a             	imul   edx,edx,0xa
c0019ff3:	c1 ef 04             	shr    edi,0x4
c0019ff6:	01 d1                	add    ecx,edx
c0019ff8:	6b ff 0a             	imul   edi,edi,0xa
c0019ffb:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0019fff:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001a003:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a007:	c1 ea 04             	shr    edx,0x4
c001a00a:	83 e1 0f             	and    ecx,0xf
c001a00d:	6b d2 0a             	imul   edx,edx,0xa
c001a010:	01 d1                	add    ecx,edx
c001a012:	89 ea                	mov    edx,ebp
c001a014:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c001a018:	c1 ea 04             	shr    edx,0x4
c001a01b:	89 d9                	mov    ecx,ebx
c001a01d:	83 e2 07             	and    edx,0x7
c001a020:	83 e1 0f             	and    ecx,0xf
c001a023:	6b d2 0a             	imul   edx,edx,0xa
c001a026:	83 e3 80             	and    ebx,0xffffff80
c001a029:	01 d1                	add    ecx,edx
c001a02b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a02f:	09 cb                	or     ebx,ecx
c001a031:	c1 ea 04             	shr    edx,0x4
c001a034:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a038:	6b d2 0a             	imul   edx,edx,0xa
c001a03b:	83 e1 0f             	and    ecx,0xf
c001a03e:	01 d6                	add    esi,edx
c001a040:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a044:	c1 ea 04             	shr    edx,0x4
c001a047:	6b d2 0a             	imul   edx,edx,0xa
c001a04a:	01 d1                	add    ecx,edx
c001a04c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a050:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001a054:	83 e2 0f             	and    edx,0xf
c001a057:	01 d7                	add    edi,edx
c001a059:	a8 02                	test   al,0x2
c001a05b:	75 15                	jne    c001a072 <RTC::completeRTCRefresh()+0x24a>
c001a05d:	f6 c3 80             	test   bl,0x80
c001a060:	74 10                	je     c001a072 <RTC::completeRTCRefresh()+0x24a>
c001a062:	83 e3 7f             	and    ebx,0x7f
c001a065:	b9 18 00 00 00       	mov    ecx,0x18
c001a06a:	8d 43 0c             	lea    eax,[ebx+0xc]
c001a06d:	99                   	cdq    
c001a06e:	f7 f9                	idiv   ecx
c001a070:	88 d3                	mov    bl,dl
c001a072:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c001a078:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c001a07e:	77 06                	ja     c001a086 <RTC::completeRTCRefresh()+0x25e>
c001a080:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c001a086:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a08b:	31 c9                	xor    ecx,ecx
c001a08d:	c1 e0 10             	shl    eax,0x10
c001a090:	89 cf                	mov    edi,ecx
c001a092:	c1 e5 10             	shl    ebp,0x10
c001a095:	31 d2                	xor    edx,edx
c001a097:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c001a09d:	09 c7                	or     edi,eax
c001a09f:	89 f0                	mov    eax,esi
c001a0a1:	89 f9                	mov    ecx,edi
c001a0a3:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001a0a7:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c001a0ab:	88 c2                	mov    dl,al
c001a0ad:	88 d9                	mov    cl,bl
c001a0af:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c001a0b3:	0f b7 c2             	movzx  eax,dx
c001a0b6:	09 e8                	or     eax,ebp
c001a0b8:	89 c2                	mov    edx,eax
c001a0ba:	50                   	push   eax
c001a0bb:	50                   	push   eax
c001a0bc:	51                   	push   ecx
c001a0bd:	52                   	push   edx
c001a0be:	e8 94 eb fe ff       	call   c0008c57 <KeDatetimeToSeconds(datetime_t)>
c001a0c3:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c001a0c7:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c001a0cd:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c001a0d3:	83 c4 4c             	add    esp,0x4c
c001a0d6:	5b                   	pop    ebx
c001a0d7:	5e                   	pop    esi
c001a0d8:	5f                   	pop    edi
c001a0d9:	5d                   	pop    ebp
c001a0da:	c3                   	ret    
c001a0db:	90                   	nop

c001a0dc <RTC::setTimeInDatetimeUTC(datetime_t)>:
c001a0dc:	55                   	push   ebp
c001a0dd:	57                   	push   edi
c001a0de:	56                   	push   esi
c001a0df:	53                   	push   ebx
c001a0e0:	83 ec 34             	sub    esp,0x34
c001a0e3:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001a0e7:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a0eb:	6a 00                	push   0x0
c001a0ed:	89 fb                	mov    ebx,edi
c001a0ef:	6a 00                	push   0x0
c001a0f1:	e8 85 d8 ff ff       	call   c001797b <x86WriteCMOS(unsigned char, unsigned char)>
c001a0f6:	5d                   	pop    ebp
c001a0f7:	58                   	pop    eax
c001a0f8:	6a 00                	push   0x0
c001a0fa:	6a 02                	push   0x2
c001a0fc:	e8 7a d8 ff ff       	call   c001797b <x86WriteCMOS(unsigned char, unsigned char)>
c001a101:	31 d2                	xor    edx,edx
c001a103:	c7 04 24 0b 00 00 00 	mov    DWORD PTR [esp],0xb
c001a10a:	89 f9                	mov    ecx,edi
c001a10c:	89 f8                	mov    eax,edi
c001a10e:	c1 e9 10             	shr    ecx,0x10
c001a111:	0f b6 c4             	movzx  eax,ah
c001a114:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c001a118:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001a11c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a120:	b9 64 00 00 00       	mov    ecx,0x64
c001a125:	89 f0                	mov    eax,esi
c001a127:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001a12b:	89 f0                	mov    eax,esi
c001a12d:	0f b6 c4             	movzx  eax,ah
c001a130:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a134:	89 f0                	mov    eax,esi
c001a136:	c1 e8 10             	shr    eax,0x10
c001a139:	f7 f1                	div    ecx
c001a13b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001a13f:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001a143:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001a147:	e8 db d7 ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c001a14c:	83 c4 10             	add    esp,0x10
c001a14f:	89 c5                	mov    ebp,eax
c001a151:	a8 04                	test   al,0x4
c001a153:	75 6e                	jne    c001a1c3 <RTC::setTimeInDatetimeUTC(datetime_t)+0xe7>
c001a155:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a159:	31 d2                	xor    edx,edx
c001a15b:	0f b6 c1             	movzx  eax,cl
c001a15e:	b9 0a 00 00 00       	mov    ecx,0xa
c001a163:	f7 f1                	div    ecx
c001a165:	c1 e0 04             	shl    eax,0x4
c001a168:	09 d0                	or     eax,edx
c001a16a:	31 d2                	xor    edx,edx
c001a16c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a170:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001a175:	f7 f1                	div    ecx
c001a177:	c1 e0 04             	shl    eax,0x4
c001a17a:	09 d0                	or     eax,edx
c001a17c:	31 d2                	xor    edx,edx
c001a17e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a182:	0f b6 c3             	movzx  eax,bl
c001a185:	f7 f1                	div    ecx
c001a187:	c1 e0 04             	shl    eax,0x4
c001a18a:	09 d0                	or     eax,edx
c001a18c:	31 d2                	xor    edx,edx
c001a18e:	89 c3                	mov    ebx,eax
c001a190:	89 f0                	mov    eax,esi
c001a192:	0f b6 c0             	movzx  eax,al
c001a195:	f7 f1                	div    ecx
c001a197:	c1 e0 04             	shl    eax,0x4
c001a19a:	09 d0                	or     eax,edx
c001a19c:	31 d2                	xor    edx,edx
c001a19e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a1a2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001a1a7:	f7 f1                	div    ecx
c001a1a9:	c1 e0 04             	shl    eax,0x4
c001a1ac:	09 d0                	or     eax,edx
c001a1ae:	31 d2                	xor    edx,edx
c001a1b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a1b4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a1b8:	f7 f1                	div    ecx
c001a1ba:	c1 e0 04             	shl    eax,0x4
c001a1bd:	09 d0                	or     eax,edx
c001a1bf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a1c3:	83 e5 02             	and    ebp,0x2
c001a1c6:	75 1e                	jne    c001a1e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a1c8:	0f b6 c3             	movzx  eax,bl
c001a1cb:	83 f8 0b             	cmp    eax,0xb
c001a1ce:	76 10                	jbe    c001a1e0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x104>
c001a1d0:	8d 53 f4             	lea    edx,[ebx-0xc]
c001a1d3:	88 d3                	mov    bl,dl
c001a1d5:	84 d2                	test   dl,dl
c001a1d7:	75 02                	jne    c001a1db <RTC::setTimeInDatetimeUTC(datetime_t)+0xff>
c001a1d9:	b3 0c                	mov    bl,0xc
c001a1db:	83 cb 80             	or     ebx,0xffffff80
c001a1de:	eb 06                	jmp    c001a1e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a1e0:	85 c0                	test   eax,eax
c001a1e2:	75 02                	jne    c001a1e6 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10a>
c001a1e4:	b3 0c                	mov    bl,0xc
c001a1e6:	0f b6 db             	movzx  ebx,bl
c001a1e9:	50                   	push   eax
c001a1ea:	50                   	push   eax
c001a1eb:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c001a1f0:	52                   	push   edx
c001a1f1:	6a 00                	push   0x0
c001a1f3:	e8 83 d7 ff ff       	call   c001797b <x86WriteCMOS(unsigned char, unsigned char)>
c001a1f8:	5a                   	pop    edx
c001a1f9:	59                   	pop    ecx
c001a1fa:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001a1ff:	50                   	push   eax
c001a200:	6a 02                	push   0x2
c001a202:	e8 74 d7 ff ff       	call   c001797b <x86WriteCMOS(unsigned char, unsigned char)>
c001a207:	5e                   	pop    esi
c001a208:	5f                   	pop    edi
c001a209:	53                   	push   ebx
c001a20a:	6a 04                	push   0x4
c001a20c:	e8 6a d7 ff ff       	call   c001797b <x86WriteCMOS(unsigned char, unsigned char)>
c001a211:	5d                   	pop    ebp
c001a212:	58                   	pop    eax
c001a213:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c001a218:	52                   	push   edx
c001a219:	6a 07                	push   0x7
c001a21b:	e8 5b d7 ff ff       	call   c001797b <x86WriteCMOS(unsigned char, unsigned char)>
c001a220:	58                   	pop    eax
c001a221:	5a                   	pop    edx
c001a222:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c001a227:	50                   	push   eax
c001a228:	6a 08                	push   0x8
c001a22a:	e8 4c d7 ff ff       	call   c001797b <x86WriteCMOS(unsigned char, unsigned char)>
c001a22f:	59                   	pop    ecx
c001a230:	5b                   	pop    ebx
c001a231:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c001a236:	55                   	push   ebp
c001a237:	6a 09                	push   0x9
c001a239:	e8 3d d7 ff ff       	call   c001797b <x86WriteCMOS(unsigned char, unsigned char)>
c001a23e:	5e                   	pop    esi
c001a23f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a243:	e8 e0 fb ff ff       	call   c0019e28 <RTC::completeRTCRefresh()>
c001a248:	83 c4 3c             	add    esp,0x3c
c001a24b:	b0 01                	mov    al,0x1
c001a24d:	5b                   	pop    ebx
c001a24e:	5e                   	pop    esi
c001a24f:	5f                   	pop    edi
c001a250:	5d                   	pop    ebp
c001a251:	c3                   	ret    

c001a252 <rtcIRQHandler(regs*, void*)>:
c001a252:	53                   	push   ebx
c001a253:	83 ec 14             	sub    esp,0x14
c001a256:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a25a:	6a 0c                	push   0xc
c001a25c:	e8 c6 d6 ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c001a261:	83 c4 10             	add    esp,0x10
c001a264:	a8 80                	test   al,0x80
c001a266:	74 24                	je     c001a28c <rtcIRQHandler(regs*, void*)+0x3a>
c001a268:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c001a26f:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c001a276:	66 ff 05 b4 d7 02 c0 	inc    WORD PTR ds:0xc002d7b4
c001a27d:	75 0d                	jne    c001a28c <rtcIRQHandler(regs*, void*)+0x3a>
c001a27f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001a283:	83 c4 08             	add    esp,0x8
c001a286:	5b                   	pop    ebx
c001a287:	e9 9c fb ff ff       	jmp    c0019e28 <RTC::completeRTCRefresh()>
c001a28c:	83 c4 08             	add    esp,0x8
c001a28f:	5b                   	pop    ebx
c001a290:	c3                   	ret    
c001a291:	90                   	nop

c001a292 <RTC::RTC()>:
c001a292:	83 ec 1c             	sub    esp,0x1c
c001a295:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a299:	83 ec 08             	sub    esp,0x8
c001a29c:	68 6f 47 02 c0       	push   0xc002476f
c001a2a1:	50                   	push   eax
c001a2a2:	e8 8b e8 fe ff       	call   c0008b32 <Clock::Clock(char const*)>
c001a2a7:	83 c4 10             	add    esp,0x10
c001a2aa:	ba 8c 47 02 c0       	mov    edx,0xc002478c
c001a2af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2b3:	89 10                	mov    DWORD PTR [eax],edx
c001a2b5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2b9:	83 ec 0c             	sub    esp,0xc
c001a2bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a2c0:	6a 01                	push   0x1
c001a2c2:	68 52 a2 01 c0       	push   0xc001a252
c001a2c7:	6a 08                	push   0x8
c001a2c9:	50                   	push   eax
c001a2ca:	e8 6f ed fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001a2cf:	83 c4 20             	add    esp,0x20
c001a2d2:	89 c2                	mov    edx,eax
c001a2d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a2d8:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001a2de:	fa                   	cli    
c001a2df:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001a2e4:	83 c0 01             	add    eax,0x1
c001a2e7:	a3 d0 d6 02 c0       	mov    ds:0xc002d6d0,eax
c001a2ec:	83 ec 0c             	sub    esp,0xc
c001a2ef:	6a 0b                	push   0xb
c001a2f1:	e8 31 d6 ff ff       	call   c0017927 <x86ReadCMOS(unsigned char)>
c001a2f6:	83 c4 10             	add    esp,0x10
c001a2f9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a2fd:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a301:	83 c8 10             	or     eax,0x10
c001a304:	0f b6 c0             	movzx  eax,al
c001a307:	83 ec 08             	sub    esp,0x8
c001a30a:	50                   	push   eax
c001a30b:	6a 0b                	push   0xb
c001a30d:	e8 69 d6 ff ff       	call   c001797b <x86WriteCMOS(unsigned char, unsigned char)>
c001a312:	83 c4 10             	add    esp,0x10
c001a315:	83 ec 0c             	sub    esp,0xc
c001a318:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a31c:	e8 07 fb ff ff       	call   c0019e28 <RTC::completeRTCRefresh()>
c001a321:	83 c4 10             	add    esp,0x10
c001a324:	f0 83 2d d0 d6 02 c0 01 	lock sub DWORD PTR ds:0xc002d6d0,0x1
c001a32c:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001a331:	85 c0                	test   eax,eax
c001a333:	75 01                	jne    c001a336 <RTC::RTC()+0xa4>
c001a335:	fb                   	sti    
c001a336:	90                   	nop
c001a337:	83 c4 1c             	add    esp,0x1c
c001a33a:	c3                   	ret    
c001a33b:	90                   	nop

c001a33c <HalConsoleScroll(int, int)>:
c001a33c:	83 ec 10             	sub    esp,0x10
c001a33f:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001a347:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c001a34f:	90                   	nop
c001a350:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a355:	0f 8f e1 00 00 00    	jg     c001a43c <HalConsoleScroll(int, int)+0x100>
c001a35b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a363:	90                   	nop
c001a364:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c001a36c:	0f 8f be 00 00 00    	jg     c001a430 <HalConsoleScroll(int, int)+0xf4>
c001a372:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a376:	89 d0                	mov    eax,edx
c001a378:	c1 e0 02             	shl    eax,0x2
c001a37b:	01 d0                	add    eax,edx
c001a37d:	c1 e0 05             	shl    eax,0x5
c001a380:	89 c2                	mov    edx,eax
c001a382:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a386:	01 d0                	add    eax,edx
c001a388:	89 c2                	mov    edx,eax
c001a38a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a38e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001a391:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a395:	89 d0                	mov    eax,edx
c001a397:	c1 e0 02             	shl    eax,0x2
c001a39a:	01 d0                	add    eax,edx
c001a39c:	c1 e0 05             	shl    eax,0x5
c001a39f:	89 c2                	mov    edx,eax
c001a3a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3a5:	01 d0                	add    eax,edx
c001a3a7:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c001a3ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3b1:	01 c2                	add    edx,eax
c001a3b3:	8a 01                	mov    al,BYTE PTR [ecx]
c001a3b5:	88 02                	mov    BYTE PTR [edx],al
c001a3b7:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001a3bc:	75 66                	jne    c001a424 <HalConsoleScroll(int, int)+0xe8>
c001a3be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3c2:	83 e0 01             	and    eax,0x1
c001a3c5:	74 39                	je     c001a400 <HalConsoleScroll(int, int)+0xc4>
c001a3c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a3cb:	83 e0 0f             	and    eax,0xf
c001a3ce:	88 c2                	mov    dl,al
c001a3d0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a3d4:	c1 e0 04             	shl    eax,0x4
c001a3d7:	09 d0                	or     eax,edx
c001a3d9:	88 c1                	mov    cl,al
c001a3db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a3df:	89 d0                	mov    eax,edx
c001a3e1:	c1 e0 02             	shl    eax,0x2
c001a3e4:	01 d0                	add    eax,edx
c001a3e6:	c1 e0 05             	shl    eax,0x5
c001a3e9:	89 c2                	mov    edx,eax
c001a3eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a3ef:	01 d0                	add    eax,edx
c001a3f1:	89 c2                	mov    edx,eax
c001a3f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f7:	01 d0                	add    eax,edx
c001a3f9:	88 ca                	mov    dl,cl
c001a3fb:	88 10                	mov    BYTE PTR [eax],dl
c001a3fd:	eb 25                	jmp    c001a424 <HalConsoleScroll(int, int)+0xe8>
c001a3ff:	90                   	nop
c001a400:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a404:	89 d0                	mov    eax,edx
c001a406:	c1 e0 02             	shl    eax,0x2
c001a409:	01 d0                	add    eax,edx
c001a40b:	c1 e0 05             	shl    eax,0x5
c001a40e:	89 c2                	mov    edx,eax
c001a410:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a414:	01 d0                	add    eax,edx
c001a416:	89 c2                	mov    edx,eax
c001a418:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a41c:	01 d0                	add    eax,edx
c001a41e:	c6 00 20             	mov    BYTE PTR [eax],0x20
c001a421:	8d 76 00             	lea    esi,[esi+0x0]
c001a424:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001a429:	e9 36 ff ff ff       	jmp    c001a364 <HalConsoleScroll(int, int)+0x28>
c001a42e:	66 90                	xchg   ax,ax
c001a430:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a435:	e9 16 ff ff ff       	jmp    c001a350 <HalConsoleScroll(int, int)+0x14>
c001a43a:	66 90                	xchg   ax,ax
c001a43c:	90                   	nop
c001a43d:	83 c4 10             	add    esp,0x10
c001a440:	c3                   	ret    
c001a441:	8d 76 00             	lea    esi,[esi+0x0]

c001a444 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001a444:	83 ec 14             	sub    esp,0x14
c001a447:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a44b:	88 04 24             	mov    BYTE PTR [esp],al
c001a44e:	8a 04 24             	mov    al,BYTE PTR [esp]
c001a451:	0f b6 c0             	movzx  eax,al
c001a454:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a458:	89 d1                	mov    ecx,edx
c001a45a:	83 e1 0f             	and    ecx,0xf
c001a45d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a461:	c1 e2 04             	shl    edx,0x4
c001a464:	0f b6 d2             	movzx  edx,dl
c001a467:	09 ca                	or     edx,ecx
c001a469:	c1 e2 08             	shl    edx,0x8
c001a46c:	09 d0                	or     eax,edx
c001a46e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c001a473:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c001a47b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a47f:	89 d0                	mov    eax,edx
c001a481:	c1 e0 02             	shl    eax,0x2
c001a484:	01 d0                	add    eax,edx
c001a486:	c1 e0 04             	shl    eax,0x4
c001a489:	89 c2                	mov    edx,eax
c001a48b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a48f:	01 d0                	add    eax,edx
c001a491:	01 c0                	add    eax,eax
c001a493:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001a497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a49b:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c001a4a0:	66 89 02             	mov    WORD PTR [edx],ax
c001a4a3:	90                   	nop
c001a4a4:	83 c4 14             	add    esp,0x14
c001a4a7:	c3                   	ret    

c001a4a8 <HalConsoleCursorUpdate(int, int)>:
c001a4a8:	83 ec 20             	sub    esp,0x20
c001a4ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a4af:	89 c2                	mov    edx,eax
c001a4b1:	c1 e2 02             	shl    edx,0x2
c001a4b4:	01 d0                	add    eax,edx
c001a4b6:	c1 e0 04             	shl    eax,0x4
c001a4b9:	89 c2                	mov    edx,eax
c001a4bb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a4bf:	01 d0                	add    eax,edx
c001a4c1:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001a4c6:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c001a4cd:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001a4d2:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001a4d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a4da:	ee                   	out    dx,al
c001a4db:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001a4e0:	0f b6 c0             	movzx  eax,al
c001a4e3:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c001a4ea:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001a4ee:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001a4f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a4f6:	ee                   	out    dx,al
c001a4f7:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001a4fe:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001a503:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001a507:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a50b:	ee                   	out    dx,al
c001a50c:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c001a511:	c1 e8 08             	shr    eax,0x8
c001a514:	0f b6 c0             	movzx  eax,al
c001a517:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c001a51e:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001a522:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001a526:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a52a:	ee                   	out    dx,al
c001a52b:	90                   	nop
c001a52c:	83 c4 20             	add    esp,0x20
c001a52f:	c3                   	ret    

c001a530 <FAT::getName()>:
c001a530:	b8 c0 47 02 c0       	mov    eax,0xc00247c0
c001a535:	c3                   	ret    
c001a536:	66 90                	xchg   ax,ax

c001a538 <FAT::tell(void*, unsigned long long*)>:
c001a538:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a53d:	75 09                	jne    c001a548 <FAT::tell(void*, unsigned long long*)+0x10>
c001a53f:	b8 04 00 00 00       	mov    eax,0x4
c001a544:	c3                   	ret    
c001a545:	8d 76 00             	lea    esi,[esi+0x0]
c001a548:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a54d:	75 09                	jne    c001a558 <FAT::tell(void*, unsigned long long*)+0x20>
c001a54f:	b8 04 00 00 00       	mov    eax,0x4
c001a554:	c3                   	ret    
c001a555:	8d 76 00             	lea    esi,[esi+0x0]
c001a558:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a55c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a55f:	ba 00 00 00 00       	mov    edx,0x0
c001a564:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a568:	89 01                	mov    DWORD PTR [ecx],eax
c001a56a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a56d:	b8 00 00 00 00       	mov    eax,0x0
c001a572:	c3                   	ret    
c001a573:	90                   	nop

c001a574 <FAT::stat(void*, unsigned long long*)>:
c001a574:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a579:	75 09                	jne    c001a584 <FAT::stat(void*, unsigned long long*)+0x10>
c001a57b:	b8 04 00 00 00       	mov    eax,0x4
c001a580:	c3                   	ret    
c001a581:	8d 76 00             	lea    esi,[esi+0x0]
c001a584:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a589:	75 09                	jne    c001a594 <FAT::stat(void*, unsigned long long*)+0x20>
c001a58b:	b8 04 00 00 00       	mov    eax,0x4
c001a590:	c3                   	ret    
c001a591:	8d 76 00             	lea    esi,[esi+0x0]
c001a594:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a598:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a59b:	ba 00 00 00 00       	mov    edx,0x0
c001a5a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a5a4:	89 01                	mov    DWORD PTR [ecx],eax
c001a5a6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001a5a9:	b8 00 00 00 00       	mov    eax,0x0
c001a5ae:	c3                   	ret    
c001a5af:	90                   	nop

c001a5b0 <FAT::~FAT()>:
c001a5b0:	83 ec 0c             	sub    esp,0xc
c001a5b3:	ba 0c 48 02 c0       	mov    edx,0xc002480c
c001a5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5bc:	89 10                	mov    DWORD PTR [eax],edx
c001a5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5c2:	83 ec 0c             	sub    esp,0xc
c001a5c5:	50                   	push   eax
c001a5c6:	e8 c9 d7 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001a5cb:	83 c4 10             	add    esp,0x10
c001a5ce:	90                   	nop
c001a5cf:	83 c4 0c             	add    esp,0xc
c001a5d2:	c3                   	ret    
c001a5d3:	90                   	nop

c001a5d4 <FAT::~FAT()>:
c001a5d4:	83 ec 0c             	sub    esp,0xc
c001a5d7:	83 ec 0c             	sub    esp,0xc
c001a5da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5de:	e8 cd ff ff ff       	call   c001a5b0 <FAT::~FAT()>
c001a5e3:	83 c4 10             	add    esp,0x10
c001a5e6:	83 ec 08             	sub    esp,0x8
c001a5e9:	6a 08                	push   0x8
c001a5eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a5ef:	e8 97 23 ff ff       	call   c000c98b <operator delete(void*, unsigned long)>
c001a5f4:	83 c4 10             	add    esp,0x10
c001a5f7:	83 c4 0c             	add    esp,0xc
c001a5fa:	c3                   	ret    
c001a5fb:	90                   	nop

c001a5fc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001a5fc:	83 ec 1c             	sub    esp,0x1c
c001a5ff:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c001a606:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c001a60b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a60f:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a616:	83 f8 ff             	cmp    eax,0xffffffff
c001a619:	75 35                	jne    c001a650 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c001a61b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a61f:	88 c2                	mov    dl,al
c001a621:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a626:	01 d0                	add    eax,edx
c001a628:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a62c:	8b 15 c0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7c0
c001a632:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a636:	89 14 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],edx
c001a63d:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a642:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001a646:	89 14 85 60 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27a0],edx
c001a64d:	eb 19                	jmp    c001a668 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001a64f:	90                   	nop
c001a650:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001a654:	88 c2                	mov    dl,al
c001a656:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a65a:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a661:	01 d0                	add    eax,edx
c001a663:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001a667:	90                   	nop
c001a668:	83 ec 04             	sub    esp,0x4
c001a66b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a66f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001a673:	8d 44 24 15          	lea    eax,[esp+0x15]
c001a677:	50                   	push   eax
c001a678:	e8 3b ab fe ff       	call   c00051b8 <f_getlabel>
c001a67d:	83 c4 10             	add    esp,0x10
c001a680:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a684:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001a689:	75 09                	jne    c001a694 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001a68b:	b8 00 00 00 00       	mov    eax,0x0
c001a690:	eb 0a                	jmp    c001a69c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c001a692:	66 90                	xchg   ax,ax
c001a694:	b8 01 00 00 00       	mov    eax,0x1
c001a699:	8d 76 00             	lea    esi,[esi+0x0]
c001a69c:	83 c4 1c             	add    esp,0x1c
c001a69f:	c3                   	ret    

c001a6a0 <FAT::setlabel(LogicalDisk*, int, char*)>:
c001a6a0:	57                   	push   edi
c001a6a1:	83 ec 58             	sub    esp,0x58
c001a6a4:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001a6ac:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a6b0:	b8 00 00 00 00       	mov    eax,0x0
c001a6b5:	b9 0f 00 00 00       	mov    ecx,0xf
c001a6ba:	fc                   	cld    
c001a6bb:	89 d7                	mov    edi,edx
c001a6bd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a6bf:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6c3:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a6ca:	83 f8 ff             	cmp    eax,0xffffffff
c001a6cd:	75 35                	jne    c001a704 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001a6cf:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a6d3:	88 c2                	mov    dl,al
c001a6d5:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a6da:	01 d0                	add    eax,edx
c001a6dc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a6e0:	8b 15 c0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7c0
c001a6e6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a6ea:	89 14 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],edx
c001a6f1:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a6f6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001a6fa:	89 14 85 60 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27a0],edx
c001a701:	eb 19                	jmp    c001a71c <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c001a703:	90                   	nop
c001a704:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001a708:	88 c2                	mov    dl,al
c001a70a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001a70e:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a715:	01 d0                	add    eax,edx
c001a717:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001a71b:	90                   	nop
c001a71c:	83 ec 08             	sub    esp,0x8
c001a71f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c001a723:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a727:	50                   	push   eax
c001a728:	e8 13 61 fe ff       	call   c0000840 <strcat>
c001a72d:	83 c4 10             	add    esp,0x10
c001a730:	83 ec 0c             	sub    esp,0xc
c001a733:	8d 44 24 18          	lea    eax,[esp+0x18]
c001a737:	50                   	push   eax
c001a738:	e8 cc ab fe ff       	call   c0005309 <f_setlabel>
c001a73d:	83 c4 10             	add    esp,0x10
c001a740:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001a744:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c001a749:	75 09                	jne    c001a754 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001a74b:	b8 00 00 00 00       	mov    eax,0x0
c001a750:	eb 0a                	jmp    c001a75c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c001a752:	66 90                	xchg   ax,ax
c001a754:	b8 01 00 00 00       	mov    eax,0x1
c001a759:	8d 76 00             	lea    esi,[esi+0x0]
c001a75c:	83 c4 58             	add    esp,0x58
c001a75f:	5f                   	pop    edi
c001a760:	c3                   	ret    
c001a761:	90                   	nop
c001a762:	66 90                	xchg   ax,ax

c001a764 <FAT::format(LogicalDisk*, int, char const*, int)>:
c001a764:	83 ec 2c             	sub    esp,0x2c
c001a767:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001a76f:	83 ec 08             	sub    esp,0x8
c001a772:	68 e4 47 02 c0       	push   0xc00247e4
c001a777:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a77b:	e8 d0 5f fe ff       	call   c0000750 <strcmp>
c001a780:	83 c4 10             	add    esp,0x10
c001a783:	85 c0                	test   eax,eax
c001a785:	0f 94 c0             	sete   al
c001a788:	0f b6 c0             	movzx  eax,al
c001a78b:	85 c0                	test   eax,eax
c001a78d:	74 0d                	je     c001a79c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001a78f:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a797:	e9 c0 00 00 00       	jmp    c001a85c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a79c:	83 ec 08             	sub    esp,0x8
c001a79f:	68 d6 47 02 c0       	push   0xc00247d6
c001a7a4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7a8:	e8 a3 5f fe ff       	call   c0000750 <strcmp>
c001a7ad:	83 c4 10             	add    esp,0x10
c001a7b0:	85 c0                	test   eax,eax
c001a7b2:	0f 94 c0             	sete   al
c001a7b5:	0f b6 c0             	movzx  eax,al
c001a7b8:	85 c0                	test   eax,eax
c001a7ba:	74 10                	je     c001a7cc <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c001a7bc:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a7c4:	e9 93 00 00 00       	jmp    c001a85c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a7c9:	8d 76 00             	lea    esi,[esi+0x0]
c001a7cc:	83 ec 08             	sub    esp,0x8
c001a7cf:	68 dc 47 02 c0       	push   0xc00247dc
c001a7d4:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a7d8:	e8 73 5f fe ff       	call   c0000750 <strcmp>
c001a7dd:	83 c4 10             	add    esp,0x10
c001a7e0:	85 c0                	test   eax,eax
c001a7e2:	0f 94 c0             	sete   al
c001a7e5:	0f b6 c0             	movzx  eax,al
c001a7e8:	85 c0                	test   eax,eax
c001a7ea:	74 0c                	je     c001a7f8 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c001a7ec:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001a7f4:	eb 66                	jmp    c001a85c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a7f6:	66 90                	xchg   ax,ax
c001a7f8:	83 ec 08             	sub    esp,0x8
c001a7fb:	68 bc 19 02 c0       	push   0xc00219bc
c001a800:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a804:	e8 47 5f fe ff       	call   c0000750 <strcmp>
c001a809:	83 c4 10             	add    esp,0x10
c001a80c:	85 c0                	test   eax,eax
c001a80e:	0f 94 c0             	sete   al
c001a811:	0f b6 c0             	movzx  eax,al
c001a814:	85 c0                	test   eax,eax
c001a816:	74 0c                	je     c001a824 <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c001a818:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c001a820:	eb 3a                	jmp    c001a85c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a822:	66 90                	xchg   ax,ax
c001a824:	83 ec 08             	sub    esp,0x8
c001a827:	68 e2 47 02 c0       	push   0xc00247e2
c001a82c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001a830:	e8 1b 5f fe ff       	call   c0000750 <strcmp>
c001a835:	83 c4 10             	add    esp,0x10
c001a838:	85 c0                	test   eax,eax
c001a83a:	0f 94 c0             	sete   al
c001a83d:	0f b6 c0             	movzx  eax,al
c001a840:	85 c0                	test   eax,eax
c001a842:	74 0c                	je     c001a850 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c001a844:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c001a84c:	eb 0e                	jmp    c001a85c <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c001a84e:	66 90                	xchg   ax,ax
c001a850:	b8 08 00 00 00       	mov    eax,0x8
c001a855:	e9 ea 00 00 00       	jmp    c001a944 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a85a:	66 90                	xchg   ax,ax
c001a85c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c001a863:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001a868:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a86c:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a873:	83 f8 ff             	cmp    eax,0xffffffff
c001a876:	75 34                	jne    c001a8ac <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c001a878:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a87c:	88 c2                	mov    dl,al
c001a87e:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a883:	01 d0                	add    eax,edx
c001a885:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a889:	8b 15 c0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7c0
c001a88f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a893:	89 14 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],edx
c001a89a:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a89f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a8a3:	89 14 85 60 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27a0],edx
c001a8aa:	eb 18                	jmp    c001a8c4 <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c001a8ac:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001a8b0:	88 c2                	mov    dl,al
c001a8b2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a8b6:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a8bd:	01 d0                	add    eax,edx
c001a8bf:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c001a8c3:	90                   	nop
c001a8c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a8c8:	88 04 24             	mov    BYTE PTR [esp],al
c001a8cb:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001a8cf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8d3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001a8db:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c001a8e0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a8e8:	83 ec 0c             	sub    esp,0xc
c001a8eb:	68 00 20 00 00       	push   0x2000
c001a8f0:	e8 0e 4a ff ff       	call   c000f303 <malloc>
c001a8f5:	83 c4 10             	add    esp,0x10
c001a8f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a8fc:	68 00 20 00 00       	push   0x2000
c001a901:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a905:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a909:	50                   	push   eax
c001a90a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001a90e:	50                   	push   eax
c001a90f:	e8 f2 ac fe ff       	call   c0005606 <f_mkfs>
c001a914:	83 c4 10             	add    esp,0x10
c001a917:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a91b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a920:	75 0a                	jne    c001a92c <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c001a922:	b8 00 00 00 00       	mov    eax,0x0
c001a927:	eb 1b                	jmp    c001a944 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a929:	8d 76 00             	lea    esi,[esi+0x0]
c001a92c:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c001a931:	75 09                	jne    c001a93c <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c001a933:	b8 09 00 00 00       	mov    eax,0x9
c001a938:	eb 0a                	jmp    c001a944 <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c001a93a:	66 90                	xchg   ax,ax
c001a93c:	b8 01 00 00 00       	mov    eax,0x1
c001a941:	8d 76 00             	lea    esi,[esi+0x0]
c001a944:	83 c4 2c             	add    esp,0x2c
c001a947:	c3                   	ret    

c001a948 <FAT::tryMount(LogicalDisk*, int)>:
c001a948:	81 ec 4c 03 00 00    	sub    esp,0x34c
c001a94e:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a953:	83 f8 14             	cmp    eax,0x14
c001a956:	75 18                	jne    c001a970 <FAT::tryMount(LogicalDisk*, int)+0x28>
c001a958:	83 ec 0c             	sub    esp,0xc
c001a95b:	68 e8 47 02 c0       	push   0xc00247e8
c001a960:	e8 e5 4c ff ff       	call   c000f64a <KePanic(char const*)>
c001a965:	83 c4 10             	add    esp,0x10
c001a968:	b0 00                	mov    al,0x0
c001a96a:	e9 ed 01 00 00       	jmp    c001ab5c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a96f:	90                   	nop
c001a970:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c001a977:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001a97d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001a983:	3d 00 02 00 00       	cmp    eax,0x200
c001a988:	74 0a                	je     c001a994 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001a98a:	b0 00                	mov    al,0x0
c001a98c:	e9 cb 01 00 00       	jmp    c001ab5c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a991:	8d 76 00             	lea    esi,[esi+0x0]
c001a994:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001a99c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001a9a3:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001a9aa:	83 f8 ff             	cmp    eax,0xffffffff
c001a9ad:	74 09                	je     c001a9b8 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001a9af:	b0 01                	mov    al,0x1
c001a9b1:	e9 a6 01 00 00       	jmp    c001ab5c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001a9b6:	66 90                	xchg   ax,ax
c001a9b8:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c001a9c2:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001a9ca:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c001a9d1:	88 c2                	mov    dl,al
c001a9d3:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a9d8:	01 d0                	add    eax,edx
c001a9da:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c001a9e1:	8b 15 c0 d7 02 c0    	mov    edx,DWORD PTR ds:0xc002d7c0
c001a9e7:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001a9ee:	89 14 85 e0 d7 02 c0 	mov    DWORD PTR [eax*4-0x3ffd2820],edx
c001a9f5:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001a9fa:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c001aa01:	89 14 85 60 d8 02 c0 	mov    DWORD PTR [eax*4-0x3ffd27a0],edx
c001aa08:	83 ec 0c             	sub    esp,0xc
c001aa0b:	68 34 02 00 00       	push   0x234
c001aa10:	e8 ee 48 ff ff       	call   c000f303 <malloc>
c001aa15:	83 c4 10             	add    esp,0x10
c001aa18:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c001aa1f:	83 ec 04             	sub    esp,0x4
c001aa22:	6a 00                	push   0x0
c001aa24:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001aa2b:	50                   	push   eax
c001aa2c:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001aa33:	e8 a9 93 fe ff       	call   c0003de1 <f_mount>
c001aa38:	83 c4 10             	add    esp,0x10
c001aa3b:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001aa42:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c001aa4a:	74 1c                	je     c001aa68 <FAT::tryMount(LogicalDisk*, int)+0x120>
c001aa4c:	83 ec 0c             	sub    esp,0xc
c001aa4f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001aa56:	e8 c8 48 ff ff       	call   c000f323 <rfree>
c001aa5b:	83 c4 10             	add    esp,0x10
c001aa5e:	b0 00                	mov    al,0x0
c001aa60:	e9 f7 00 00 00       	jmp    c001ab5c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001aa65:	8d 76 00             	lea    esi,[esi+0x0]
c001aa68:	83 ec 04             	sub    esp,0x4
c001aa6b:	68 00 01 00 00       	push   0x100
c001aa70:	6a 00                	push   0x0
c001aa72:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001aa79:	50                   	push   eax
c001aa7a:	e8 71 5a fe ff       	call   c00004f0 <memset>
c001aa7f:	83 c4 10             	add    esp,0x10
c001aa82:	83 ec 08             	sub    esp,0x8
c001aa85:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001aa8c:	50                   	push   eax
c001aa8d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001aa94:	50                   	push   eax
c001aa95:	e8 a6 5d fe ff       	call   c0000840 <strcat>
c001aa9a:	83 c4 10             	add    esp,0x10
c001aa9d:	83 ec 08             	sub    esp,0x8
c001aaa0:	68 f6 47 02 c0       	push   0xc00247f6
c001aaa5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001aaac:	50                   	push   eax
c001aaad:	e8 8e 5d fe ff       	call   c0000840 <strcat>
c001aab2:	83 c4 10             	add    esp,0x10
c001aab5:	83 ec 04             	sub    esp,0x4
c001aab8:	6a 01                	push   0x1
c001aaba:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c001aac1:	50                   	push   eax
c001aac2:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aac6:	50                   	push   eax
c001aac7:	e8 77 93 fe ff       	call   c0003e43 <f_open>
c001aacc:	83 c4 10             	add    esp,0x10
c001aacf:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c001aad6:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001aadd:	85 c0                	test   eax,eax
c001aadf:	74 0b                	je     c001aaec <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c001aae1:	78 31                	js     c001ab14 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aae3:	83 e8 04             	sub    eax,0x4
c001aae6:	83 f8 01             	cmp    eax,0x1
c001aae9:	77 29                	ja     c001ab14 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001aaeb:	90                   	nop
c001aaec:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c001aaf4:	83 ec 0c             	sub    esp,0xc
c001aaf7:	8d 44 24 14          	lea    eax,[esp+0x14]
c001aafb:	50                   	push   eax
c001aafc:	e8 11 9b fe ff       	call   c0004612 <f_close>
c001ab01:	83 c4 10             	add    esp,0x10
c001ab04:	90                   	nop
c001ab05:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c001ab0d:	85 c0                	test   eax,eax
c001ab0f:	74 43                	je     c001ab54 <FAT::tryMount(LogicalDisk*, int)+0x20c>
c001ab11:	eb 31                	jmp    c001ab44 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c001ab13:	90                   	nop
c001ab14:	83 ec 0c             	sub    esp,0xc
c001ab17:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c001ab1e:	e8 00 48 ff ff       	call   c000f323 <rfree>
c001ab23:	83 c4 10             	add    esp,0x10
c001ab26:	83 ec 04             	sub    esp,0x4
c001ab29:	6a 00                	push   0x0
c001ab2b:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001ab32:	50                   	push   eax
c001ab33:	6a 00                	push   0x0
c001ab35:	e8 a7 92 fe ff       	call   c0003de1 <f_mount>
c001ab3a:	83 c4 10             	add    esp,0x10
c001ab3d:	b0 00                	mov    al,0x0
c001ab3f:	eb 1b                	jmp    c001ab5c <FAT::tryMount(LogicalDisk*, int)+0x214>
c001ab41:	8d 76 00             	lea    esi,[esi+0x0]
c001ab44:	a1 c0 d7 02 c0       	mov    eax,ds:0xc002d7c0
c001ab49:	83 c0 01             	add    eax,0x1
c001ab4c:	a3 c0 d7 02 c0       	mov    ds:0xc002d7c0,eax
c001ab51:	8d 76 00             	lea    esi,[esi+0x0]
c001ab54:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c001ab5b:	90                   	nop
c001ab5c:	81 c4 4c 03 00 00    	add    esp,0x34c
c001ab62:	c3                   	ret    
c001ab63:	90                   	nop

c001ab64 <FAT::allocateSwapfile(char const*, int)>:
c001ab64:	55                   	push   ebp
c001ab65:	57                   	push   edi
c001ab66:	56                   	push   esi
c001ab67:	53                   	push   ebx
c001ab68:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001ab6e:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c001ab79:	83 ec 0c             	sub    esp,0xc
c001ab7c:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001ab83:	e8 7b 47 ff ff       	call   c000f303 <malloc>
c001ab88:	83 c4 10             	add    esp,0x10
c001ab8b:	89 c7                	mov    edi,eax
c001ab8d:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c001ab92:	83 ec 04             	sub    esp,0x4
c001ab95:	50                   	push   eax
c001ab96:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c001ab9d:	57                   	push   edi
c001ab9e:	e8 8f d5 fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001aba3:	83 c4 10             	add    esp,0x10
c001aba6:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c001abad:	83 ec 04             	sub    esp,0x4
c001abb0:	8d 44 24 13          	lea    eax,[esp+0x13]
c001abb4:	50                   	push   eax
c001abb5:	8d 44 24 18          	lea    eax,[esp+0x18]
c001abb9:	50                   	push   eax
c001abba:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001abc1:	e8 8c d8 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001abc6:	83 c4 10             	add    esp,0x10
c001abc9:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001abd0:	c1 e0 14             	shl    eax,0x14
c001abd3:	89 c7                	mov    edi,eax
c001abd5:	89 c5                	mov    ebp,eax
c001abd7:	c1 fd 1f             	sar    ebp,0x1f
c001abda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001abde:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abe2:	89 f9                	mov    ecx,edi
c001abe4:	31 c1                	xor    ecx,eax
c001abe6:	89 cb                	mov    ebx,ecx
c001abe8:	89 e9                	mov    ecx,ebp
c001abea:	31 d1                	xor    ecx,edx
c001abec:	89 ce                	mov    esi,ecx
c001abee:	89 f0                	mov    eax,esi
c001abf0:	09 d8                	or     eax,ebx
c001abf2:	0f 84 9c 00 00 00    	je     c001ac94 <FAT::allocateSwapfile(char const*, int)+0x130>
c001abf8:	83 ec 0c             	sub    esp,0xc
c001abfb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac02:	e8 17 d7 fe ff       	call   c000831e <File::unlink()>
c001ac07:	83 c4 10             	add    esp,0x10
c001ac0a:	83 ec 08             	sub    esp,0x8
c001ac0d:	6a 12                	push   0x12
c001ac0f:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac16:	e8 35 d5 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001ac1b:	83 c4 10             	add    esp,0x10
c001ac1e:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac25:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ac2b:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ac32:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001ac39:	c1 e0 14             	shl    eax,0x14
c001ac3c:	83 ec 04             	sub    esp,0x4
c001ac3f:	6a 01                	push   0x1
c001ac41:	50                   	push   eax
c001ac42:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c001ac49:	e8 4b a8 fe ff       	call   c0005499 <f_expand>
c001ac4e:	83 c4 10             	add    esp,0x10
c001ac51:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001ac58:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac5a:	83 c0 10             	add    eax,0x10
c001ac5d:	8b 00                	mov    eax,DWORD PTR [eax]
c001ac5f:	83 ec 0c             	sub    esp,0xc
c001ac62:	8d 54 24 24          	lea    edx,[esp+0x24]
c001ac66:	52                   	push   edx
c001ac67:	8d 54 24 30          	lea    edx,[esp+0x30]
c001ac6b:	52                   	push   edx
c001ac6c:	6a 00                	push   0x0
c001ac6e:	68 00 04 00 00       	push   0x400
c001ac73:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001ac7a:	ff d0                	call   eax
c001ac7c:	83 c4 20             	add    esp,0x20
c001ac7f:	83 ec 0c             	sub    esp,0xc
c001ac82:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ac89:	e8 20 d5 fe ff       	call   c00081ae <File::close()>
c001ac8e:	83 c4 10             	add    esp,0x10
c001ac91:	8d 76 00             	lea    esi,[esi+0x0]
c001ac94:	83 ec 08             	sub    esp,0x8
c001ac97:	6a 01                	push   0x1
c001ac99:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001aca0:	e8 ab d4 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001aca5:	83 c4 10             	add    esp,0x10
c001aca8:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001acaf:	8b 00                	mov    eax,DWORD PTR [eax]
c001acb1:	83 c0 0c             	add    eax,0xc
c001acb4:	8b 00                	mov    eax,DWORD PTR [eax]
c001acb6:	83 ec 0c             	sub    esp,0xc
c001acb9:	8d 54 24 24          	lea    edx,[esp+0x24]
c001acbd:	52                   	push   edx
c001acbe:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001acc2:	52                   	push   edx
c001acc3:	6a 00                	push   0x0
c001acc5:	6a 04                	push   0x4
c001acc7:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001acce:	ff d0                	call   eax
c001acd0:	83 c4 20             	add    esp,0x20
c001acd3:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001acda:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001ace0:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001ace7:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001acee:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001acf1:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c001acf8:	83 ec 0c             	sub    esp,0xc
c001acfb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001ad02:	e8 a7 d4 fe ff       	call   c00081ae <File::close()>
c001ad07:	83 c4 10             	add    esp,0x10
c001ad0a:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001ad11:	ba 00 00 00 00       	mov    edx,0x0
c001ad16:	81 c4 3c 04 00 00    	add    esp,0x43c
c001ad1c:	5b                   	pop    ebx
c001ad1d:	5e                   	pop    esi
c001ad1e:	5f                   	pop    edi
c001ad1f:	5d                   	pop    ebp
c001ad20:	c3                   	ret    
c001ad21:	90                   	nop
c001ad22:	66 90                	xchg   ax,ax

c001ad24 <FAT::readDir(void*, unsigned long, void*, int*)>:
c001ad24:	57                   	push   edi
c001ad25:	56                   	push   esi
c001ad26:	53                   	push   ebx
c001ad27:	81 ec 50 02 00 00    	sub    esp,0x250
c001ad2d:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001ad35:	74 0d                	je     c001ad44 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001ad37:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c001ad3f:	75 0f                	jne    c001ad50 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c001ad41:	8d 76 00             	lea    esi,[esi+0x0]
c001ad44:	b8 04 00 00 00       	mov    eax,0x4
c001ad49:	e9 3a 01 00 00       	jmp    c001ae88 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001ad4e:	66 90                	xchg   ax,ax
c001ad50:	83 ec 08             	sub    esp,0x8
c001ad53:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001ad5a:	50                   	push   eax
c001ad5b:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001ad62:	e8 78 9b fe ff       	call   c00048df <f_readdir>
c001ad67:	83 c4 10             	add    esp,0x10
c001ad6a:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001ad71:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c001ad78:	83 ec 0c             	sub    esp,0xc
c001ad7b:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001ad82:	83 c0 16             	add    eax,0x16
c001ad85:	50                   	push   eax
c001ad86:	e8 e5 57 fe ff       	call   c0000570 <strlen>
c001ad8b:	83 c4 10             	add    esp,0x10
c001ad8e:	ba 00 00 00 00       	mov    edx,0x0
c001ad93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad97:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001ad9b:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001ada2:	0f b6 c0             	movzx  eax,al
c001ada5:	83 e0 10             	and    eax,0x10
c001ada8:	74 0a                	je     c001adb4 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c001adaa:	b8 02 00 00 00       	mov    eax,0x2
c001adaf:	eb 0b                	jmp    c001adbc <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001adb1:	8d 76 00             	lea    esi,[esi+0x0]
c001adb4:	b8 01 00 00 00       	mov    eax,0x1
c001adb9:	8d 76 00             	lea    esi,[esi+0x0]
c001adbc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001adc0:	83 ec 08             	sub    esp,0x8
c001adc3:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c001adca:	83 c0 16             	add    eax,0x16
c001adcd:	50                   	push   eax
c001adce:	8d 44 24 14          	lea    eax,[esp+0x14]
c001add2:	83 c0 10             	add    eax,0x10
c001add5:	50                   	push   eax
c001add6:	e8 65 58 fe ff       	call   c0000640 <strcpy>
c001addb:	83 c4 10             	add    esp,0x10
c001adde:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001ade5:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c001adec:	8d 44 24 08          	lea    eax,[esp+0x8]
c001adf0:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001adf7:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001adfe:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001ae05:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c001ae0c:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001ae13:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c001ae1a:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c001ae21:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c001ae28:	89 c6                	mov    esi,eax
c001ae2a:	89 d7                	mov    edi,edx
c001ae2c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae2e:	89 c8                	mov    eax,ecx
c001ae30:	89 fa                	mov    edx,edi
c001ae32:	89 f3                	mov    ebx,esi
c001ae34:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c001ae3b:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001ae42:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c001ae49:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c001ae50:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001ae56:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c001ae5d:	0f be c0             	movsx  eax,al
c001ae60:	85 c0                	test   eax,eax
c001ae62:	75 08                	jne    c001ae6c <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c001ae64:	b8 07 00 00 00       	mov    eax,0x7
c001ae69:	eb 1d                	jmp    c001ae88 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001ae6b:	90                   	nop
c001ae6c:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001ae73:	85 c0                	test   eax,eax
c001ae75:	75 09                	jne    c001ae80 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c001ae77:	b8 00 00 00 00       	mov    eax,0x0
c001ae7c:	eb 0a                	jmp    c001ae88 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c001ae7e:	66 90                	xchg   ax,ax
c001ae80:	b8 01 00 00 00       	mov    eax,0x1
c001ae85:	8d 76 00             	lea    esi,[esi+0x0]
c001ae88:	81 c4 50 02 00 00    	add    esp,0x250
c001ae8e:	5b                   	pop    ebx
c001ae8f:	5e                   	pop    esi
c001ae90:	5f                   	pop    edi
c001ae91:	c3                   	ret    
c001ae92:	66 90                	xchg   ax,ax

c001ae94 <FAT::read(void*, unsigned long, void*, int*)>:
c001ae94:	83 ec 1c             	sub    esp,0x1c
c001ae97:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001ae9c:	74 0a                	je     c001aea8 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c001ae9e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001aea3:	75 0b                	jne    c001aeb0 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001aea5:	8d 76 00             	lea    esi,[esi+0x0]
c001aea8:	b8 04 00 00 00       	mov    eax,0x4
c001aead:	eb 41                	jmp    c001aef0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001aeaf:	90                   	nop
c001aeb0:	8d 44 24 08          	lea    eax,[esp+0x8]
c001aeb4:	50                   	push   eax
c001aeb5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aeb9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001aebd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001aec1:	e8 40 92 fe ff       	call   c0004106 <f_read>
c001aec6:	83 c4 10             	add    esp,0x10
c001aec9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001aecd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aed1:	89 c2                	mov    edx,eax
c001aed3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001aed7:	89 10                	mov    DWORD PTR [eax],edx
c001aed9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001aedd:	85 c0                	test   eax,eax
c001aedf:	75 07                	jne    c001aee8 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c001aee1:	b8 00 00 00 00       	mov    eax,0x0
c001aee6:	eb 08                	jmp    c001aef0 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c001aee8:	b8 01 00 00 00       	mov    eax,0x1
c001aeed:	8d 76 00             	lea    esi,[esi+0x0]
c001aef0:	83 c4 1c             	add    esp,0x1c
c001aef3:	c3                   	ret    

c001aef4 <FAT::write(void*, unsigned long, void*, int*)>:
c001aef4:	83 ec 1c             	sub    esp,0x1c
c001aef7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001aefc:	74 0a                	je     c001af08 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c001aefe:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001af03:	75 0b                	jne    c001af10 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001af05:	8d 76 00             	lea    esi,[esi+0x0]
c001af08:	b8 04 00 00 00       	mov    eax,0x4
c001af0d:	eb 41                	jmp    c001af50 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001af0f:	90                   	nop
c001af10:	8d 44 24 08          	lea    eax,[esp+0x8]
c001af14:	50                   	push   eax
c001af15:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001af1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af21:	e8 df 93 fe ff       	call   c0004305 <f_write>
c001af26:	83 c4 10             	add    esp,0x10
c001af29:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af2d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af31:	89 c2                	mov    edx,eax
c001af33:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001af37:	89 10                	mov    DWORD PTR [eax],edx
c001af39:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af3d:	85 c0                	test   eax,eax
c001af3f:	75 07                	jne    c001af48 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c001af41:	b8 00 00 00 00       	mov    eax,0x0
c001af46:	eb 08                	jmp    c001af50 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c001af48:	b8 01 00 00 00       	mov    eax,0x1
c001af4d:	8d 76 00             	lea    esi,[esi+0x0]
c001af50:	83 c4 1c             	add    esp,0x1c
c001af53:	c3                   	ret    

c001af54 <FAT::close(void*)>:
c001af54:	83 ec 1c             	sub    esp,0x1c
c001af57:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001af5c:	75 0a                	jne    c001af68 <FAT::close(void*)+0x14>
c001af5e:	b8 04 00 00 00       	mov    eax,0x4
c001af63:	eb 3f                	jmp    c001afa4 <FAT::close(void*)+0x50>
c001af65:	8d 76 00             	lea    esi,[esi+0x0]
c001af68:	83 ec 0c             	sub    esp,0xc
c001af6b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af6f:	e8 9e 96 fe ff       	call   c0004612 <f_close>
c001af74:	83 c4 10             	add    esp,0x10
c001af77:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001af7b:	83 ec 0c             	sub    esp,0xc
c001af7e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001af82:	e8 8c 43 ff ff       	call   c000f313 <free>
c001af87:	83 c4 10             	add    esp,0x10
c001af8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af8e:	85 c0                	test   eax,eax
c001af90:	75 0a                	jne    c001af9c <FAT::close(void*)+0x48>
c001af92:	b8 00 00 00 00       	mov    eax,0x0
c001af97:	eb 0b                	jmp    c001afa4 <FAT::close(void*)+0x50>
c001af99:	8d 76 00             	lea    esi,[esi+0x0]
c001af9c:	b8 01 00 00 00       	mov    eax,0x1
c001afa1:	8d 76 00             	lea    esi,[esi+0x0]
c001afa4:	83 c4 1c             	add    esp,0x1c
c001afa7:	c3                   	ret    

c001afa8 <FAT::closeDir(void*)>:
c001afa8:	83 ec 1c             	sub    esp,0x1c
c001afab:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c001afb0:	75 0a                	jne    c001afbc <FAT::closeDir(void*)+0x14>
c001afb2:	b8 04 00 00 00       	mov    eax,0x4
c001afb7:	eb 3f                	jmp    c001aff8 <FAT::closeDir(void*)+0x50>
c001afb9:	8d 76 00             	lea    esi,[esi+0x0]
c001afbc:	83 ec 0c             	sub    esp,0xc
c001afbf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afc3:	e8 f5 98 fe ff       	call   c00048bd <f_closedir>
c001afc8:	83 c4 10             	add    esp,0x10
c001afcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001afcf:	83 ec 0c             	sub    esp,0xc
c001afd2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001afd6:	e8 38 43 ff ff       	call   c000f313 <free>
c001afdb:	83 c4 10             	add    esp,0x10
c001afde:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001afe2:	85 c0                	test   eax,eax
c001afe4:	75 0a                	jne    c001aff0 <FAT::closeDir(void*)+0x48>
c001afe6:	b8 00 00 00 00       	mov    eax,0x0
c001afeb:	eb 0b                	jmp    c001aff8 <FAT::closeDir(void*)+0x50>
c001afed:	8d 76 00             	lea    esi,[esi+0x0]
c001aff0:	b8 01 00 00 00       	mov    eax,0x1
c001aff5:	8d 76 00             	lea    esi,[esi+0x0]
c001aff8:	83 c4 1c             	add    esp,0x1c
c001affb:	c3                   	ret    

c001affc <FAT::truncate(void*, unsigned long long)>:
c001affc:	83 ec 2c             	sub    esp,0x2c
c001afff:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b007:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b00b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b00f:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b014:	75 0a                	jne    c001b020 <FAT::truncate(void*, unsigned long long)+0x24>
c001b016:	b8 04 00 00 00       	mov    eax,0x4
c001b01b:	eb 47                	jmp    c001b064 <FAT::truncate(void*, unsigned long long)+0x68>
c001b01d:	8d 76 00             	lea    esi,[esi+0x0]
c001b020:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b024:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001b027:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b02b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001b033:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b037:	83 ec 08             	sub    esp,0x8
c001b03a:	50                   	push   eax
c001b03b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b03f:	e8 fd 95 fe ff       	call   c0004641 <f_lseek>
c001b044:	83 c4 10             	add    esp,0x10
c001b047:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b04b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b04f:	85 c0                	test   eax,eax
c001b051:	75 09                	jne    c001b05c <FAT::truncate(void*, unsigned long long)+0x60>
c001b053:	b8 00 00 00 00       	mov    eax,0x0
c001b058:	eb 0a                	jmp    c001b064 <FAT::truncate(void*, unsigned long long)+0x68>
c001b05a:	66 90                	xchg   ax,ax
c001b05c:	b8 01 00 00 00       	mov    eax,0x1
c001b061:	8d 76 00             	lea    esi,[esi+0x0]
c001b064:	83 c4 2c             	add    esp,0x2c
c001b067:	c3                   	ret    

c001b068 <FAT::seek(void*, unsigned long long)>:
c001b068:	83 ec 2c             	sub    esp,0x2c
c001b06b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b06f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001b073:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b077:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b07b:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001b080:	75 0a                	jne    c001b08c <FAT::seek(void*, unsigned long long)+0x24>
c001b082:	b8 04 00 00 00       	mov    eax,0x4
c001b087:	eb 33                	jmp    c001b0bc <FAT::seek(void*, unsigned long long)+0x54>
c001b089:	8d 76 00             	lea    esi,[esi+0x0]
c001b08c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b090:	83 ec 08             	sub    esp,0x8
c001b093:	50                   	push   eax
c001b094:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001b098:	e8 a4 95 fe ff       	call   c0004641 <f_lseek>
c001b09d:	83 c4 10             	add    esp,0x10
c001b0a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b0a4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b0a8:	85 c0                	test   eax,eax
c001b0aa:	75 08                	jne    c001b0b4 <FAT::seek(void*, unsigned long long)+0x4c>
c001b0ac:	b8 00 00 00 00       	mov    eax,0x0
c001b0b1:	eb 09                	jmp    c001b0bc <FAT::seek(void*, unsigned long long)+0x54>
c001b0b3:	90                   	nop
c001b0b4:	b8 01 00 00 00       	mov    eax,0x1
c001b0b9:	8d 76 00             	lea    esi,[esi+0x0]
c001b0bc:	83 c4 2c             	add    esp,0x2c
c001b0bf:	c3                   	ret    

c001b0c0 <fatWrapperReadDisk>:
c001b0c0:	53                   	push   ebx
c001b0c1:	83 ec 18             	sub    esp,0x18
c001b0c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b0c8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b0cc:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b0d1:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001b0d8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b0dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b0e0:	ba 00 00 00 00       	mov    edx,0x0
c001b0e5:	83 ec 0c             	sub    esp,0xc
c001b0e8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b0ec:	53                   	push   ebx
c001b0ed:	52                   	push   edx
c001b0ee:	50                   	push   eax
c001b0ef:	51                   	push   ecx
c001b0f0:	e8 f3 ef fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001b0f5:	83 c4 20             	add    esp,0x20
c001b0f8:	83 c4 18             	add    esp,0x18
c001b0fb:	5b                   	pop    ebx
c001b0fc:	c3                   	ret    
c001b0fd:	8d 76 00             	lea    esi,[esi+0x0]

c001b100 <fatWrapperWriteDisk>:
c001b100:	53                   	push   ebx
c001b101:	83 ec 18             	sub    esp,0x18
c001b104:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b108:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001b10c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b111:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001b118:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b11c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b120:	ba 00 00 00 00       	mov    edx,0x0
c001b125:	83 ec 0c             	sub    esp,0xc
c001b128:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b12c:	53                   	push   ebx
c001b12d:	52                   	push   edx
c001b12e:	50                   	push   eax
c001b12f:	51                   	push   ecx
c001b130:	e8 1f f0 fe ff       	call   c000a154 <LogicalDisk::write(unsigned long long, int, void*)>
c001b135:	83 c4 20             	add    esp,0x20
c001b138:	83 c4 18             	add    esp,0x18
c001b13b:	5b                   	pop    ebx
c001b13c:	c3                   	ret    
c001b13d:	8d 76 00             	lea    esi,[esi+0x0]

c001b140 <fatWrapperIoctl>:
c001b140:	53                   	push   ebx
c001b141:	83 ec 28             	sub    esp,0x28
c001b144:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001b148:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001b14c:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b150:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b154:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b159:	83 f8 02             	cmp    eax,0x2
c001b15c:	75 32                	jne    c001b190 <fatWrapperIoctl+0x50>
c001b15e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b162:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001b166:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b16b:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001b172:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b178:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b17e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001b182:	66 89 02             	mov    WORD PTR [edx],ax
c001b185:	b8 00 00 00 00       	mov    eax,0x0
c001b18a:	e9 c5 00 00 00       	jmp    c001b254 <fatWrapperIoctl+0x114>
c001b18f:	90                   	nop
c001b190:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b195:	83 f8 01             	cmp    eax,0x1
c001b198:	75 6a                	jne    c001b204 <fatWrapperIoctl+0xc4>
c001b19a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b19e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001b1a2:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b1a7:	8b 04 85 80 a7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5880]
c001b1ae:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001b1b4:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c001b1ba:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c001b1c0:	89 c8                	mov    eax,ecx
c001b1c2:	89 da                	mov    edx,ebx
c001b1c4:	0f a4 c2 0a          	shld   edx,eax,0xa
c001b1c8:	c1 e0 0a             	shl    eax,0xa
c001b1cb:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c001b1d0:	8b 0c 8d 80 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5880]
c001b1d7:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c001b1dd:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001b1e3:	89 cb                	mov    ebx,ecx
c001b1e5:	c1 fb 1f             	sar    ebx,0x1f
c001b1e8:	53                   	push   ebx
c001b1e9:	51                   	push   ecx
c001b1ea:	52                   	push   edx
c001b1eb:	50                   	push   eax
c001b1ec:	e8 c3 59 00 00       	call   c0020bb4 <__udivdi3>
c001b1f1:	83 c4 10             	add    esp,0x10
c001b1f4:	89 c2                	mov    edx,eax
c001b1f6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b1fa:	89 10                	mov    DWORD PTR [eax],edx
c001b1fc:	b8 00 00 00 00       	mov    eax,0x0
c001b201:	eb 51                	jmp    c001b254 <fatWrapperIoctl+0x114>
c001b203:	90                   	nop
c001b204:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b209:	85 c0                	test   eax,eax
c001b20b:	75 07                	jne    c001b214 <fatWrapperIoctl+0xd4>
c001b20d:	b8 00 00 00 00       	mov    eax,0x0
c001b212:	eb 40                	jmp    c001b254 <fatWrapperIoctl+0x114>
c001b214:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b219:	83 f8 03             	cmp    eax,0x3
c001b21c:	75 1a                	jne    c001b238 <fatWrapperIoctl+0xf8>
c001b21e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b222:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001b226:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b22a:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c001b230:	b8 00 00 00 00       	mov    eax,0x0
c001b235:	eb 1d                	jmp    c001b254 <fatWrapperIoctl+0x114>
c001b237:	90                   	nop
c001b238:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b23d:	83 f8 04             	cmp    eax,0x4
c001b240:	75 0a                	jne    c001b24c <fatWrapperIoctl+0x10c>
c001b242:	b8 00 00 00 00       	mov    eax,0x0
c001b247:	eb 0b                	jmp    c001b254 <fatWrapperIoctl+0x114>
c001b249:	8d 76 00             	lea    esi,[esi+0x0]
c001b24c:	b8 04 00 00 00       	mov    eax,0x4
c001b251:	8d 76 00             	lea    esi,[esi+0x0]
c001b254:	83 c4 28             	add    esp,0x28
c001b257:	5b                   	pop    ebx
c001b258:	c3                   	ret    
c001b259:	90                   	nop
c001b25a:	66 90                	xchg   ax,ax

c001b25c <FAT::FAT()>:
c001b25c:	83 ec 1c             	sub    esp,0x1c
c001b25f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b263:	83 ec 0c             	sub    esp,0xc
c001b266:	50                   	push   eax
c001b267:	e8 04 cb fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001b26c:	83 c4 10             	add    esp,0x10
c001b26f:	ba 0c 48 02 c0       	mov    edx,0xc002480c
c001b274:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b278:	89 10                	mov    DWORD PTR [eax],edx
c001b27a:	c7 05 c0 d7 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002d7c0,0x0
c001b284:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b28c:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c001b291:	7f 19                	jg     c001b2ac <FAT::FAT()+0x50>
c001b293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b297:	c7 04 85 e0 d7 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd2820],0xffffffff
c001b2a2:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001b2a7:	eb e3                	jmp    c001b28c <FAT::FAT()+0x30>
c001b2a9:	8d 76 00             	lea    esi,[esi+0x0]
c001b2ac:	90                   	nop
c001b2ad:	83 c4 1c             	add    esp,0x1c
c001b2b0:	c3                   	ret    
c001b2b1:	90                   	nop
c001b2b2:	66 90                	xchg   ax,ax

c001b2b4 <FAT::fixFilepath(char*)>:
c001b2b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2b8:	8a 00                	mov    al,BYTE PTR [eax]
c001b2ba:	0f be c0             	movsx  eax,al
c001b2bd:	83 f8 40             	cmp    eax,0x40
c001b2c0:	7e 2e                	jle    c001b2f0 <FAT::fixFilepath(char*)+0x3c>
c001b2c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2c6:	8a 00                	mov    al,BYTE PTR [eax]
c001b2c8:	83 e8 41             	sub    eax,0x41
c001b2cb:	88 c2                	mov    dl,al
c001b2cd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2d1:	88 10                	mov    BYTE PTR [eax],dl
c001b2d3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2d7:	8a 00                	mov    al,BYTE PTR [eax]
c001b2d9:	0f be c0             	movsx  eax,al
c001b2dc:	8b 04 85 e0 d7 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd2820]
c001b2e3:	83 c0 30             	add    eax,0x30
c001b2e6:	88 c2                	mov    dl,al
c001b2e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001b2ec:	88 10                	mov    BYTE PTR [eax],dl
c001b2ee:	66 90                	xchg   ax,ax
c001b2f0:	90                   	nop
c001b2f1:	c3                   	ret    
c001b2f2:	66 90                	xchg   ax,ax

c001b2f4 <FAT::open(char const*, void**, FileOpenMode)>:
c001b2f4:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b2fa:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b302:	74 0c                	je     c001b310 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001b304:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b30c:	75 0e                	jne    c001b31c <FAT::open(char const*, void**, FileOpenMode)+0x28>
c001b30e:	66 90                	xchg   ax,ax
c001b310:	b8 04 00 00 00       	mov    eax,0x4
c001b315:	e9 46 01 00 00       	jmp    c001b460 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001b31a:	66 90                	xchg   ax,ax
c001b31c:	83 ec 08             	sub    esp,0x8
c001b31f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b326:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b32a:	50                   	push   eax
c001b32b:	e8 10 53 fe ff       	call   c0000640 <strcpy>
c001b330:	83 c4 10             	add    esp,0x10
c001b333:	83 ec 08             	sub    esp,0x8
c001b336:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b33a:	50                   	push   eax
c001b33b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b342:	e8 6d ff ff ff       	call   c001b2b4 <FAT::fixFilepath(char*)>
c001b347:	83 c4 10             	add    esp,0x10
c001b34a:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001b352:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b359:	83 e0 01             	and    eax,0x1
c001b35c:	74 12                	je     c001b370 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c001b35e:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b365:	83 c8 01             	or     eax,0x1
c001b368:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b36f:	90                   	nop
c001b370:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b377:	83 e0 04             	and    eax,0x4
c001b37a:	74 24                	je     c001b3a0 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c001b37c:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b383:	83 c8 30             	or     eax,0x30
c001b386:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b38d:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b394:	83 c8 02             	or     eax,0x2
c001b397:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b39e:	66 90                	xchg   ax,ax
c001b3a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b3a7:	83 e0 02             	and    eax,0x2
c001b3aa:	74 14                	je     c001b3c0 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c001b3ac:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b3b3:	83 c8 02             	or     eax,0x2
c001b3b6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b3bd:	8d 76 00             	lea    esi,[esi+0x0]
c001b3c0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b3c7:	83 e0 08             	and    eax,0x8
c001b3ca:	74 14                	je     c001b3e0 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c001b3cc:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b3d3:	83 c8 04             	or     eax,0x4
c001b3d6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b3dd:	8d 76 00             	lea    esi,[esi+0x0]
c001b3e0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001b3e7:	83 e0 10             	and    eax,0x10
c001b3ea:	74 14                	je     c001b400 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c001b3ec:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001b3f3:	83 c8 08             	or     eax,0x8
c001b3f6:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c001b3fd:	8d 76 00             	lea    esi,[esi+0x0]
c001b400:	83 ec 0c             	sub    esp,0xc
c001b403:	68 28 02 00 00       	push   0x228
c001b408:	e8 f6 3e ff ff       	call   c000f303 <malloc>
c001b40d:	83 c4 10             	add    esp,0x10
c001b410:	89 c2                	mov    edx,eax
c001b412:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b419:	89 10                	mov    DWORD PTR [eax],edx
c001b41b:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001b423:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b42a:	8b 00                	mov    eax,DWORD PTR [eax]
c001b42c:	83 ec 04             	sub    esp,0x4
c001b42f:	52                   	push   edx
c001b430:	8d 54 24 10          	lea    edx,[esp+0x10]
c001b434:	52                   	push   edx
c001b435:	50                   	push   eax
c001b436:	e8 08 8a fe ff       	call   c0003e43 <f_open>
c001b43b:	83 c4 10             	add    esp,0x10
c001b43e:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001b445:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c001b44d:	74 09                	je     c001b458 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c001b44f:	b8 01 00 00 00       	mov    eax,0x1
c001b454:	eb 0a                	jmp    c001b460 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001b456:	66 90                	xchg   ax,ax
c001b458:	b8 00 00 00 00       	mov    eax,0x0
c001b45d:	8d 76 00             	lea    esi,[esi+0x0]
c001b460:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b466:	c3                   	ret    
c001b467:	90                   	nop

c001b468 <FAT::openDir(char const*, void**)>:
c001b468:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b46e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b476:	74 0c                	je     c001b484 <FAT::openDir(char const*, void**)+0x1c>
c001b478:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c001b480:	75 0e                	jne    c001b490 <FAT::openDir(char const*, void**)+0x28>
c001b482:	66 90                	xchg   ax,ax
c001b484:	b8 04 00 00 00       	mov    eax,0x4
c001b489:	e9 82 00 00 00       	jmp    c001b510 <FAT::openDir(char const*, void**)+0xa8>
c001b48e:	66 90                	xchg   ax,ax
c001b490:	83 ec 08             	sub    esp,0x8
c001b493:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b49a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b49e:	50                   	push   eax
c001b49f:	e8 9c 51 fe ff       	call   c0000640 <strcpy>
c001b4a4:	83 c4 10             	add    esp,0x10
c001b4a7:	83 ec 08             	sub    esp,0x8
c001b4aa:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b4ae:	50                   	push   eax
c001b4af:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b4b6:	e8 f9 fd ff ff       	call   c001b2b4 <FAT::fixFilepath(char*)>
c001b4bb:	83 c4 10             	add    esp,0x10
c001b4be:	83 ec 0c             	sub    esp,0xc
c001b4c1:	6a 30                	push   0x30
c001b4c3:	e8 3b 3e ff ff       	call   c000f303 <malloc>
c001b4c8:	83 c4 10             	add    esp,0x10
c001b4cb:	89 c2                	mov    edx,eax
c001b4cd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b4d4:	89 10                	mov    DWORD PTR [eax],edx
c001b4d6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001b4dd:	8b 00                	mov    eax,DWORD PTR [eax]
c001b4df:	83 ec 08             	sub    esp,0x8
c001b4e2:	8d 54 24 14          	lea    edx,[esp+0x14]
c001b4e6:	52                   	push   edx
c001b4e7:	50                   	push   eax
c001b4e8:	e8 05 93 fe ff       	call   c00047f2 <f_opendir>
c001b4ed:	83 c4 10             	add    esp,0x10
c001b4f0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b4f7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c001b4ff:	74 07                	je     c001b508 <FAT::openDir(char const*, void**)+0xa0>
c001b501:	b8 01 00 00 00       	mov    eax,0x1
c001b506:	eb 08                	jmp    c001b510 <FAT::openDir(char const*, void**)+0xa8>
c001b508:	b8 00 00 00 00       	mov    eax,0x0
c001b50d:	8d 76 00             	lea    esi,[esi+0x0]
c001b510:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b516:	c3                   	ret    
c001b517:	90                   	nop

c001b518 <FAT::stat(char const*, unsigned long long*, bool*)>:
c001b518:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b51e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001b526:	75 0c                	jne    c001b534 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c001b528:	b8 04 00 00 00       	mov    eax,0x4
c001b52d:	e9 d6 00 00 00       	jmp    c001b608 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b532:	66 90                	xchg   ax,ax
c001b534:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001b53c:	75 0a                	jne    c001b548 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001b53e:	b8 04 00 00 00       	mov    eax,0x4
c001b543:	e9 c0 00 00 00       	jmp    c001b608 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b548:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c001b550:	75 0a                	jne    c001b55c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001b552:	b8 04 00 00 00       	mov    eax,0x4
c001b557:	e9 ac 00 00 00       	jmp    c001b608 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b55c:	83 ec 08             	sub    esp,0x8
c001b55f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b566:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b56d:	50                   	push   eax
c001b56e:	e8 cd 50 fe ff       	call   c0000640 <strcpy>
c001b573:	83 c4 10             	add    esp,0x10
c001b576:	83 ec 08             	sub    esp,0x8
c001b579:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001b580:	50                   	push   eax
c001b581:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b588:	e8 27 fd ff ff       	call   c001b2b4 <FAT::fixFilepath(char*)>
c001b58d:	83 c4 10             	add    esp,0x10
c001b590:	83 ec 08             	sub    esp,0x8
c001b593:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b597:	50                   	push   eax
c001b598:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001b59f:	50                   	push   eax
c001b5a0:	e8 cc 93 fe ff       	call   c0004971 <f_stat>
c001b5a5:	83 c4 10             	add    esp,0x10
c001b5a8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b5af:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b5b6:	85 c0                	test   eax,eax
c001b5b8:	74 0a                	je     c001b5c4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001b5ba:	83 f8 04             	cmp    eax,0x4
c001b5bd:	74 39                	je     c001b5f8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001b5bf:	eb 3f                	jmp    c001b600 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c001b5c1:	8d 76 00             	lea    esi,[esi+0x0]
c001b5c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001b5c8:	0f b6 c0             	movzx  eax,al
c001b5cb:	83 e0 10             	and    eax,0x10
c001b5ce:	0f 95 c2             	setne  dl
c001b5d1:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c001b5d8:	88 10                	mov    BYTE PTR [eax],dl
c001b5da:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b5de:	ba 00 00 00 00       	mov    edx,0x0
c001b5e3:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c001b5ea:	89 01                	mov    DWORD PTR [ecx],eax
c001b5ec:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001b5ef:	b8 00 00 00 00       	mov    eax,0x0
c001b5f4:	eb 12                	jmp    c001b608 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b5f6:	66 90                	xchg   ax,ax
c001b5f8:	b8 02 00 00 00       	mov    eax,0x2
c001b5fd:	eb 09                	jmp    c001b608 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001b5ff:	90                   	nop
c001b600:	b8 01 00 00 00       	mov    eax,0x1
c001b605:	8d 76 00             	lea    esi,[esi+0x0]
c001b608:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b60e:	c3                   	ret    
c001b60f:	90                   	nop

c001b610 <FAT::unlink(char const*)>:
c001b610:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b616:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b61e:	75 08                	jne    c001b628 <FAT::unlink(char const*)+0x18>
c001b620:	b8 04 00 00 00       	mov    eax,0x4
c001b625:	eb 61                	jmp    c001b688 <FAT::unlink(char const*)+0x78>
c001b627:	90                   	nop
c001b628:	83 ec 08             	sub    esp,0x8
c001b62b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b632:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b636:	50                   	push   eax
c001b637:	e8 04 50 fe ff       	call   c0000640 <strcpy>
c001b63c:	83 c4 10             	add    esp,0x10
c001b63f:	83 ec 08             	sub    esp,0x8
c001b642:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b646:	50                   	push   eax
c001b647:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b64e:	e8 61 fc ff ff       	call   c001b2b4 <FAT::fixFilepath(char*)>
c001b653:	83 c4 10             	add    esp,0x10
c001b656:	83 ec 0c             	sub    esp,0xc
c001b659:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b65d:	50                   	push   eax
c001b65e:	e8 80 95 fe ff       	call   c0004be3 <f_unlink>
c001b663:	83 c4 10             	add    esp,0x10
c001b666:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b66d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b674:	85 c0                	test   eax,eax
c001b676:	75 08                	jne    c001b680 <FAT::unlink(char const*)+0x70>
c001b678:	b8 00 00 00 00       	mov    eax,0x0
c001b67d:	eb 09                	jmp    c001b688 <FAT::unlink(char const*)+0x78>
c001b67f:	90                   	nop
c001b680:	b8 01 00 00 00       	mov    eax,0x1
c001b685:	8d 76 00             	lea    esi,[esi+0x0]
c001b688:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b68e:	c3                   	ret    
c001b68f:	90                   	nop

c001b690 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c001b690:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b696:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001b69d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c001b6a4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001b6a8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001b6ac:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001b6b4:	75 0a                	jne    c001b6c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c001b6b6:	b8 04 00 00 00       	mov    eax,0x4
c001b6bb:	e9 7c 01 00 00       	jmp    c001b83c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001b6c0:	83 ec 08             	sub    esp,0x8
c001b6c3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b6ca:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b6ce:	50                   	push   eax
c001b6cf:	e8 6c 4f fe ff       	call   c0000640 <strcpy>
c001b6d4:	83 c4 10             	add    esp,0x10
c001b6d7:	83 ec 08             	sub    esp,0x8
c001b6da:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b6de:	50                   	push   eax
c001b6df:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001b6e6:	e8 c9 fb ff ff       	call   c001b2b4 <FAT::fixFilepath(char*)>
c001b6eb:	83 c4 10             	add    esp,0x10
c001b6ee:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c001b6f6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c001b6fe:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b703:	83 e0 01             	and    eax,0x1
c001b706:	74 14                	je     c001b71c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c001b708:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b70f:	83 c8 01             	or     eax,0x1
c001b712:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b719:	8d 76 00             	lea    esi,[esi+0x0]
c001b71c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b721:	83 e0 02             	and    eax,0x2
c001b724:	74 12                	je     c001b738 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c001b726:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b72d:	83 c8 20             	or     eax,0x20
c001b730:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b737:	90                   	nop
c001b738:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b73d:	83 e0 04             	and    eax,0x4
c001b740:	74 12                	je     c001b754 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c001b742:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b749:	83 c8 04             	or     eax,0x4
c001b74c:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b753:	90                   	nop
c001b754:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b759:	83 e0 08             	and    eax,0x8
c001b75c:	74 12                	je     c001b770 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c001b75e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b765:	83 c8 02             	or     eax,0x2
c001b768:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c001b76f:	90                   	nop
c001b770:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b775:	83 e0 01             	and    eax,0x1
c001b778:	74 12                	je     c001b78c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c001b77a:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b781:	83 c8 01             	or     eax,0x1
c001b784:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b78b:	90                   	nop
c001b78c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b791:	83 e0 02             	and    eax,0x2
c001b794:	74 12                	je     c001b7a8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c001b796:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b79d:	83 c8 20             	or     eax,0x20
c001b7a0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b7a7:	90                   	nop
c001b7a8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b7ad:	83 e0 04             	and    eax,0x4
c001b7b0:	74 12                	je     c001b7c4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c001b7b2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b7b9:	83 c8 04             	or     eax,0x4
c001b7bc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b7c3:	90                   	nop
c001b7c4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001b7c9:	83 e0 08             	and    eax,0x8
c001b7cc:	74 12                	je     c001b7e0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c001b7ce:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c001b7d5:	83 c8 02             	or     eax,0x2
c001b7d8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b7df:	90                   	nop
c001b7e0:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c001b7e7:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c001b7ee:	09 d0                	or     eax,edx
c001b7f0:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c001b7f7:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c001b7ff:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c001b807:	83 ec 04             	sub    esp,0x4
c001b80a:	52                   	push   edx
c001b80b:	50                   	push   eax
c001b80c:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b810:	50                   	push   eax
c001b811:	e8 42 98 fe ff       	call   c0005058 <f_chmod>
c001b816:	83 c4 10             	add    esp,0x10
c001b819:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c001b820:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c001b827:	85 c0                	test   eax,eax
c001b829:	75 09                	jne    c001b834 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c001b82b:	b8 00 00 00 00       	mov    eax,0x0
c001b830:	eb 0a                	jmp    c001b83c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c001b832:	66 90                	xchg   ax,ax
c001b834:	b8 01 00 00 00       	mov    eax,0x1
c001b839:	8d 76 00             	lea    esi,[esi+0x0]
c001b83c:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b842:	c3                   	ret    
c001b843:	90                   	nop

c001b844 <FAT::rename(char const*, char const*)>:
c001b844:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001b84a:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001b852:	74 0c                	je     c001b860 <FAT::rename(char const*, char const*)+0x1c>
c001b854:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c001b85c:	75 0e                	jne    c001b86c <FAT::rename(char const*, char const*)+0x28>
c001b85e:	66 90                	xchg   ax,ax
c001b860:	b8 04 00 00 00       	mov    eax,0x4
c001b865:	e9 9e 00 00 00       	jmp    c001b908 <FAT::rename(char const*, char const*)+0xc4>
c001b86a:	66 90                	xchg   ax,ax
c001b86c:	83 ec 08             	sub    esp,0x8
c001b86f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b876:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b87d:	50                   	push   eax
c001b87e:	e8 bd 4d fe ff       	call   c0000640 <strcpy>
c001b883:	83 c4 10             	add    esp,0x10
c001b886:	83 ec 08             	sub    esp,0x8
c001b889:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c001b890:	50                   	push   eax
c001b891:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b898:	e8 17 fa ff ff       	call   c001b2b4 <FAT::fixFilepath(char*)>
c001b89d:	83 c4 10             	add    esp,0x10
c001b8a0:	83 ec 08             	sub    esp,0x8
c001b8a3:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c001b8aa:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b8ae:	50                   	push   eax
c001b8af:	e8 8c 4d fe ff       	call   c0000640 <strcpy>
c001b8b4:	83 c4 10             	add    esp,0x10
c001b8b7:	83 ec 08             	sub    esp,0x8
c001b8ba:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b8be:	50                   	push   eax
c001b8bf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001b8c6:	e8 e9 f9 ff ff       	call   c001b2b4 <FAT::fixFilepath(char*)>
c001b8cb:	83 c4 10             	add    esp,0x10
c001b8ce:	83 ec 08             	sub    esp,0x8
c001b8d1:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b8d5:	50                   	push   eax
c001b8d6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c001b8dd:	50                   	push   eax
c001b8de:	e8 bd 95 fe ff       	call   c0004ea0 <f_rename>
c001b8e3:	83 c4 10             	add    esp,0x10
c001b8e6:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c001b8ed:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c001b8f4:	85 c0                	test   eax,eax
c001b8f6:	75 08                	jne    c001b900 <FAT::rename(char const*, char const*)+0xbc>
c001b8f8:	b8 00 00 00 00       	mov    eax,0x0
c001b8fd:	eb 09                	jmp    c001b908 <FAT::rename(char const*, char const*)+0xc4>
c001b8ff:	90                   	nop
c001b900:	b8 01 00 00 00       	mov    eax,0x1
c001b905:	8d 76 00             	lea    esi,[esi+0x0]
c001b908:	81 c4 1c 02 00 00    	add    esp,0x21c
c001b90e:	c3                   	ret    
c001b90f:	90                   	nop

c001b910 <FAT::mkdir(char const*)>:
c001b910:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001b916:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001b91e:	75 08                	jne    c001b928 <FAT::mkdir(char const*)+0x18>
c001b920:	b8 04 00 00 00       	mov    eax,0x4
c001b925:	eb 61                	jmp    c001b988 <FAT::mkdir(char const*)+0x78>
c001b927:	90                   	nop
c001b928:	83 ec 08             	sub    esp,0x8
c001b92b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b932:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b936:	50                   	push   eax
c001b937:	e8 04 4d fe ff       	call   c0000640 <strcpy>
c001b93c:	83 c4 10             	add    esp,0x10
c001b93f:	83 ec 08             	sub    esp,0x8
c001b942:	8d 44 24 14          	lea    eax,[esp+0x14]
c001b946:	50                   	push   eax
c001b947:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001b94e:	e8 61 f9 ff ff       	call   c001b2b4 <FAT::fixFilepath(char*)>
c001b953:	83 c4 10             	add    esp,0x10
c001b956:	83 ec 0c             	sub    esp,0xc
c001b959:	8d 44 24 18          	lea    eax,[esp+0x18]
c001b95d:	50                   	push   eax
c001b95e:	e8 a2 93 fe ff       	call   c0004d05 <f_mkdir>
c001b963:	83 c4 10             	add    esp,0x10
c001b966:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001b96d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001b974:	85 c0                	test   eax,eax
c001b976:	75 08                	jne    c001b980 <FAT::mkdir(char const*)+0x70>
c001b978:	b8 00 00 00 00       	mov    eax,0x0
c001b97d:	eb 09                	jmp    c001b988 <FAT::mkdir(char const*)+0x78>
c001b97f:	90                   	nop
c001b980:	b8 01 00 00 00       	mov    eax,0x1
c001b985:	8d 76 00             	lea    esi,[esi+0x0]
c001b988:	81 c4 1c 01 00 00    	add    esp,0x11c
c001b98e:	c3                   	ret    
c001b98f:	90                   	nop

c001b990 <FAT::exists(char const*)>:
c001b990:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001b996:	83 ec 08             	sub    esp,0x8
c001b999:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b9a0:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b9a4:	50                   	push   eax
c001b9a5:	e8 96 4c fe ff       	call   c0000640 <strcpy>
c001b9aa:	83 c4 10             	add    esp,0x10
c001b9ad:	83 ec 08             	sub    esp,0x8
c001b9b0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001b9b4:	50                   	push   eax
c001b9b5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001b9bc:	e8 f3 f8 ff ff       	call   c001b2b4 <FAT::fixFilepath(char*)>
c001b9c1:	83 c4 10             	add    esp,0x10
c001b9c4:	83 ec 08             	sub    esp,0x8
c001b9c7:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c001b9ce:	50                   	push   eax
c001b9cf:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b9d3:	50                   	push   eax
c001b9d4:	e8 98 8f fe ff       	call   c0004971 <f_stat>
c001b9d9:	83 c4 10             	add    esp,0x10
c001b9dc:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001b9e3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c001b9ea:	85 c0                	test   eax,eax
c001b9ec:	75 06                	jne    c001b9f4 <FAT::exists(char const*)+0x64>
c001b9ee:	b0 01                	mov    al,0x1
c001b9f0:	eb 06                	jmp    c001b9f8 <FAT::exists(char const*)+0x68>
c001b9f2:	66 90                	xchg   ax,ax
c001b9f4:	b0 00                	mov    al,0x0
c001b9f6:	66 90                	xchg   ax,ax
c001b9f8:	81 c4 2c 02 00 00    	add    esp,0x22c
c001b9fe:	c3                   	ret    
c001b9ff:	90                   	nop

c001ba00 <isoReadDiscSectorHelper>:
c001ba00:	83 ec 2c             	sub    esp,0x2c
c001ba03:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ba07:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001ba0b:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c001ba10:	83 e8 41             	sub    eax,0x41
c001ba13:	8b 0c 85 80 a7 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd5880]
c001ba1a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ba1e:	ba 00 00 00 00       	mov    edx,0x0
c001ba23:	83 ec 0c             	sub    esp,0xc
c001ba26:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ba2a:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ba2e:	52                   	push   edx
c001ba2f:	50                   	push   eax
c001ba30:	51                   	push   ecx
c001ba31:	e8 b2 e6 fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001ba36:	83 c4 20             	add    esp,0x20
c001ba39:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ba3d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ba42:	74 0c                	je     c001ba50 <isoReadDiscSectorHelper+0x50>
c001ba44:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ba48:	c1 e0 0b             	shl    eax,0xb
c001ba4b:	eb 0b                	jmp    c001ba58 <isoReadDiscSectorHelper+0x58>
c001ba4d:	8d 76 00             	lea    esi,[esi+0x0]
c001ba50:	b8 00 00 00 00       	mov    eax,0x0
c001ba55:	8d 76 00             	lea    esi,[esi+0x0]
c001ba58:	83 c4 2c             	add    esp,0x2c
c001ba5b:	c3                   	ret    

c001ba5c <iso_kprintf>:
c001ba5c:	83 ec 0c             	sub    esp,0xc
c001ba5f:	83 ec 08             	sub    esp,0x8
c001ba62:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba66:	68 b1 44 02 c0       	push   0xc00244b1
c001ba6b:	e8 f4 b4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ba70:	83 c4 10             	add    esp,0x10
c001ba73:	90                   	nop
c001ba74:	83 c4 0c             	add    esp,0xc
c001ba77:	c3                   	ret    

c001ba78 <iso_kprintfd>:
c001ba78:	83 ec 0c             	sub    esp,0xc
c001ba7b:	83 ec 08             	sub    esp,0x8
c001ba7e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ba82:	68 39 26 02 c0       	push   0xc0022639
c001ba87:	e8 d8 b4 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ba8c:	83 c4 10             	add    esp,0x10
c001ba8f:	90                   	nop
c001ba90:	83 c4 0c             	add    esp,0xc
c001ba93:	c3                   	ret    

c001ba94 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001ba94:	b8 08 00 00 00       	mov    eax,0x8
c001ba99:	c3                   	ret    

c001ba9a <ISO9660::truncate(void*, unsigned long long)>:
c001ba9a:	b8 01 00 00 00       	mov    eax,0x1
c001ba9f:	c3                   	ret    

c001baa0 <ISO9660::getName()>:
c001baa0:	b8 70 48 02 c0       	mov    eax,0xc0024870
c001baa5:	c3                   	ret    

c001baa6 <ISO9660::closeDir(void*)>:
c001baa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001baaa:	8b 00                	mov    eax,DWORD PTR [eax]
c001baac:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c001baaf:	90                   	nop

c001bab0 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001bab0:	b8 01 00 00 00       	mov    eax,0x1
c001bab5:	c3                   	ret    

c001bab6 <ISO9660::unlink(char const*)>:
c001bab6:	b8 01 00 00 00       	mov    eax,0x1
c001babb:	c3                   	ret    

c001babc <ISO9660::write(void*, unsigned long, void*, int*)>:
c001babc:	b8 03 00 00 00       	mov    eax,0x3
c001bac1:	c3                   	ret    

c001bac2 <ISO9660::rename(char const*, char const*)>:
c001bac2:	b8 01 00 00 00       	mov    eax,0x1
c001bac7:	c3                   	ret    

c001bac8 <ISO9660::mkdir(char const*)>:
c001bac8:	b8 01 00 00 00       	mov    eax,0x1
c001bacd:	c3                   	ret    

c001bace <ISO9660::~ISO9660()>:
c001bace:	83 ec 0c             	sub    esp,0xc
c001bad1:	ba b0 49 02 c0       	mov    edx,0xc00249b0
c001bad6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bada:	89 10                	mov    DWORD PTR [eax],edx
c001badc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae0:	83 ec 0c             	sub    esp,0xc
c001bae3:	50                   	push   eax
c001bae4:	e8 ab c2 fe ff       	call   c0007d94 <Filesystem::~Filesystem()>
c001bae9:	83 c4 10             	add    esp,0x10
c001baec:	90                   	nop
c001baed:	83 c4 0c             	add    esp,0xc
c001baf0:	c3                   	ret    
c001baf1:	90                   	nop

c001baf2 <ISO9660::~ISO9660()>:
c001baf2:	83 ec 0c             	sub    esp,0xc
c001baf5:	83 ec 0c             	sub    esp,0xc
c001baf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bafc:	e8 cd ff ff ff       	call   c001bace <ISO9660::~ISO9660()>
c001bb01:	83 c4 10             	add    esp,0x10
c001bb04:	83 ec 08             	sub    esp,0x8
c001bb07:	6a 08                	push   0x8
c001bb09:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bb0d:	e8 79 0e ff ff       	call   c000c98b <operator delete(void*, unsigned long)>
c001bb12:	83 c4 10             	add    esp,0x10
c001bb15:	83 c4 0c             	add    esp,0xc
c001bb18:	c3                   	ret    
c001bb19:	90                   	nop

c001bb1a <ISO9660::exists(char const*)>:
c001bb1a:	83 ec 18             	sub    esp,0x18
c001bb1d:	68 8b 48 02 c0       	push   0xc002488b
c001bb22:	e8 23 3b ff ff       	call   c000f64a <KePanic(char const*)>
c001bb27:	31 c0                	xor    eax,eax
c001bb29:	83 c4 1c             	add    esp,0x1c
c001bb2c:	c3                   	ret    
c001bb2d:	90                   	nop

c001bb2e <ISO9660::open(char const*, void**, FileOpenMode)>:
c001bb2e:	56                   	push   esi
c001bb2f:	53                   	push   ebx
c001bb30:	53                   	push   ebx
c001bb31:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bb35:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001bb39:	85 db                	test   ebx,ebx
c001bb3b:	0f 84 ca 00 00 00    	je     c001bc0b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001bb41:	85 f6                	test   esi,esi
c001bb43:	0f 84 c2 00 00 00    	je     c001bc0b <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c001bb49:	b8 03 00 00 00       	mov    eax,0x3
c001bb4e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c001bb53:	0f 85 b7 00 00 00    	jne    c001bc10 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001bb59:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001bb5b:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001bb62:	38 0d c0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8c0,cl
c001bb68:	74 1b                	je     c001bb85 <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c001bb6a:	85 c0                	test   eax,eax
c001bb6c:	74 10                	je     c001bb7e <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c001bb6e:	83 ec 0c             	sub    esp,0xc
c001bb71:	68 a9 48 02 c0       	push   0xc00248a9
c001bb76:	e8 cf 3a ff ff       	call   c000f64a <KePanic(char const*)>
c001bb7b:	83 c4 10             	add    esp,0x10
c001bb7e:	8a 03                	mov    al,BYTE PTR [ebx]
c001bb80:	a2 c0 d8 02 c0       	mov    ds:0xc002d8c0,al
c001bb85:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bb88:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001bb8f:	85 c0                	test   eax,eax
c001bb91:	74 09                	je     c001bb9c <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c001bb93:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001bb9a:	74 48                	je     c001bbe4 <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c001bb9c:	83 ec 0c             	sub    esp,0xc
c001bb9f:	68 b9 48 02 c0       	push   0xc00248b9
c001bba4:	e8 bb b3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bba9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bbac:	83 c4 10             	add    esp,0x10
c001bbaf:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001bbb6:	85 c0                	test   eax,eax
c001bbb8:	74 17                	je     c001bbd1 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001bbba:	83 ec 0c             	sub    esp,0xc
c001bbbd:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001bbc4:	68 d9 48 02 c0       	push   0xc00248d9
c001bbc9:	e8 96 b3 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bbce:	83 c4 10             	add    esp,0x10
c001bbd1:	83 ec 0c             	sub    esp,0xc
c001bbd4:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001bbdb:	50                   	push   eax
c001bbdc:	e8 4d b0 fe ff       	call   c0006c2e <init_percd>
c001bbe1:	83 c4 10             	add    esp,0x10
c001bbe4:	83 c3 03             	add    ebx,0x3
c001bbe7:	51                   	push   ecx
c001bbe8:	51                   	push   ecx
c001bbe9:	6a 00                	push   0x0
c001bbeb:	53                   	push   ebx
c001bbec:	e8 04 ab fe ff       	call   c00066f5 <iso_open>
c001bbf1:	83 c4 10             	add    esp,0x10
c001bbf4:	89 c2                	mov    edx,eax
c001bbf6:	b8 01 00 00 00       	mov    eax,0x1
c001bbfb:	83 fa ff             	cmp    edx,0xffffffff
c001bbfe:	74 10                	je     c001bc10 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001bc00:	83 c2 32             	add    edx,0x32
c001bc03:	31 c0                	xor    eax,eax
c001bc05:	01 d2                	add    edx,edx
c001bc07:	89 16                	mov    DWORD PTR [esi],edx
c001bc09:	eb 05                	jmp    c001bc10 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001bc0b:	b8 04 00 00 00       	mov    eax,0x4
c001bc10:	5a                   	pop    edx
c001bc11:	5b                   	pop    ebx
c001bc12:	5e                   	pop    esi
c001bc13:	c3                   	ret    

c001bc14 <ISO9660::read(void*, unsigned long, void*, int*)>:
c001bc14:	53                   	push   ebx
c001bc15:	83 ec 08             	sub    esp,0x8
c001bc18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bc1c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc20:	85 c0                	test   eax,eax
c001bc22:	74 2d                	je     c001bc51 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001bc24:	85 db                	test   ebx,ebx
c001bc26:	74 29                	je     c001bc51 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001bc28:	b9 02 00 00 00       	mov    ecx,0x2
c001bc2d:	52                   	push   edx
c001bc2e:	99                   	cdq    
c001bc2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bc33:	f7 f9                	idiv   ecx
c001bc35:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001bc39:	83 e8 32             	sub    eax,0x32
c001bc3c:	50                   	push   eax
c001bc3d:	e8 5b ab fe ff       	call   c000679d <iso_read>
c001bc42:	83 c4 10             	add    esp,0x10
c001bc45:	89 03                	mov    DWORD PTR [ebx],eax
c001bc47:	09 d0                	or     eax,edx
c001bc49:	0f 94 c0             	sete   al
c001bc4c:	0f b6 c0             	movzx  eax,al
c001bc4f:	eb 05                	jmp    c001bc56 <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001bc51:	b8 04 00 00 00       	mov    eax,0x4
c001bc56:	83 c4 08             	add    esp,0x8
c001bc59:	5b                   	pop    ebx
c001bc5a:	c3                   	ret    
c001bc5b:	90                   	nop

c001bc5c <ISO9660::seek(void*, unsigned long long)>:
c001bc5c:	57                   	push   edi
c001bc5d:	56                   	push   esi
c001bc5e:	b8 04 00 00 00       	mov    eax,0x4
c001bc63:	51                   	push   ecx
c001bc64:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bc68:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001bc6c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001bc70:	85 d2                	test   edx,edx
c001bc72:	74 26                	je     c001bc9a <ISO9660::seek(void*, unsigned long long)+0x3e>
c001bc74:	6a 00                	push   0x0
c001bc76:	b9 02 00 00 00       	mov    ecx,0x2
c001bc7b:	57                   	push   edi
c001bc7c:	89 d0                	mov    eax,edx
c001bc7e:	56                   	push   esi
c001bc7f:	99                   	cdq    
c001bc80:	f7 f9                	idiv   ecx
c001bc82:	83 e8 32             	sub    eax,0x32
c001bc85:	50                   	push   eax
c001bc86:	e8 28 ac fe ff       	call   c00068b3 <iso_seek>
c001bc8b:	83 c4 10             	add    esp,0x10
c001bc8e:	31 f0                	xor    eax,esi
c001bc90:	31 fa                	xor    edx,edi
c001bc92:	09 d0                	or     eax,edx
c001bc94:	0f 95 c0             	setne  al
c001bc97:	0f b6 c0             	movzx  eax,al
c001bc9a:	5a                   	pop    edx
c001bc9b:	5e                   	pop    esi
c001bc9c:	5f                   	pop    edi
c001bc9d:	c3                   	ret    

c001bc9e <ISO9660::tell(void*, unsigned long long*)>:
c001bc9e:	53                   	push   ebx
c001bc9f:	83 ec 08             	sub    esp,0x8
c001bca2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bca6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bcaa:	85 c0                	test   eax,eax
c001bcac:	74 24                	je     c001bcd2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001bcae:	85 db                	test   ebx,ebx
c001bcb0:	74 20                	je     c001bcd2 <ISO9660::tell(void*, unsigned long long*)+0x34>
c001bcb2:	83 ec 0c             	sub    esp,0xc
c001bcb5:	b9 02 00 00 00       	mov    ecx,0x2
c001bcba:	99                   	cdq    
c001bcbb:	f7 f9                	idiv   ecx
c001bcbd:	83 e8 32             	sub    eax,0x32
c001bcc0:	50                   	push   eax
c001bcc1:	e8 71 ac fe ff       	call   c0006937 <iso_tell>
c001bcc6:	83 c4 10             	add    esp,0x10
c001bcc9:	89 03                	mov    DWORD PTR [ebx],eax
c001bccb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001bcce:	31 c0                	xor    eax,eax
c001bcd0:	eb 05                	jmp    c001bcd7 <ISO9660::tell(void*, unsigned long long*)+0x39>
c001bcd2:	b8 04 00 00 00       	mov    eax,0x4
c001bcd7:	83 c4 08             	add    esp,0x8
c001bcda:	5b                   	pop    ebx
c001bcdb:	c3                   	ret    

c001bcdc <ISO9660::stat(void*, unsigned long long*)>:
c001bcdc:	53                   	push   ebx
c001bcdd:	83 ec 14             	sub    esp,0x14
c001bce0:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001bce4:	68 fd 48 02 c0       	push   0xc00248fd
c001bce9:	e8 76 b2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bcee:	83 c4 10             	add    esp,0x10
c001bcf1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bcf6:	74 2c                	je     c001bd24 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001bcf8:	85 db                	test   ebx,ebx
c001bcfa:	74 28                	je     c001bd24 <ISO9660::stat(void*, unsigned long long*)+0x48>
c001bcfc:	83 ec 0c             	sub    esp,0xc
c001bcff:	b9 02 00 00 00       	mov    ecx,0x2
c001bd04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001bd08:	99                   	cdq    
c001bd09:	f7 f9                	idiv   ecx
c001bd0b:	83 e8 32             	sub    eax,0x32
c001bd0e:	50                   	push   eax
c001bd0f:	e8 54 ac fe ff       	call   c0006968 <iso_total>
c001bd14:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001bd1b:	89 03                	mov    DWORD PTR [ebx],eax
c001bd1d:	83 c4 10             	add    esp,0x10
c001bd20:	31 c0                	xor    eax,eax
c001bd22:	eb 05                	jmp    c001bd29 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001bd24:	b8 04 00 00 00       	mov    eax,0x4
c001bd29:	83 c4 08             	add    esp,0x8
c001bd2c:	5b                   	pop    ebx
c001bd2d:	c3                   	ret    

c001bd2e <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001bd2e:	55                   	push   ebp
c001bd2f:	57                   	push   edi
c001bd30:	56                   	push   esi
c001bd31:	53                   	push   ebx
c001bd32:	83 ec 18             	sub    esp,0x18
c001bd35:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001bd39:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001bd3d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001bd41:	68 05 49 02 c0       	push   0xc0024905
c001bd46:	e8 19 b2 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bd4b:	83 c4 10             	add    esp,0x10
c001bd4e:	85 ff                	test   edi,edi
c001bd50:	0f 94 c0             	sete   al
c001bd53:	85 f6                	test   esi,esi
c001bd55:	0f 94 c2             	sete   dl
c001bd58:	09 d0                	or     eax,edx
c001bd5a:	a8 01                	test   al,0x1
c001bd5c:	0f 85 dd 00 00 00    	jne    c001be3f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001bd62:	85 db                	test   ebx,ebx
c001bd64:	0f 84 d5 00 00 00    	je     c001be3f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001bd6a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001bd6d:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001bd73:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001bd7a:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001bd81:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001bd83:	38 0d c0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8c0,cl
c001bd89:	74 1b                	je     c001bda6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001bd8b:	85 c0                	test   eax,eax
c001bd8d:	74 10                	je     c001bd9f <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001bd8f:	83 ec 0c             	sub    esp,0xc
c001bd92:	68 a9 48 02 c0       	push   0xc00248a9
c001bd97:	e8 ae 38 ff ff       	call   c000f64a <KePanic(char const*)>
c001bd9c:	83 c4 10             	add    esp,0x10
c001bd9f:	8a 03                	mov    al,BYTE PTR [ebx]
c001bda1:	a2 c0 d8 02 c0       	mov    ds:0xc002d8c0,al
c001bda6:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bda9:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001bdb0:	85 c0                	test   eax,eax
c001bdb2:	74 09                	je     c001bdbd <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001bdb4:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001bdbb:	74 51                	je     c001be0e <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001bdbd:	83 ec 0c             	sub    esp,0xc
c001bdc0:	68 0d 49 02 c0       	push   0xc002490d
c001bdc5:	e8 9a b1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bdca:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bdcd:	83 c4 10             	add    esp,0x10
c001bdd0:	83 3c 85 7c a6 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd5984],0x0
c001bdd8:	74 21                	je     c001bdfb <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001bdda:	83 ec 0c             	sub    esp,0xc
c001bddd:	68 2d 49 02 c0       	push   0xc002492d
c001bde2:	e8 7d b1 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bde7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001bdea:	83 c4 10             	add    esp,0x10
c001bded:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001bdf4:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001bdfb:	83 ec 0c             	sub    esp,0xc
c001bdfe:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001be05:	50                   	push   eax
c001be06:	e8 23 ae fe ff       	call   c0006c2e <init_percd>
c001be0b:	83 c4 10             	add    esp,0x10
c001be0e:	83 c3 03             	add    ebx,0x3
c001be11:	52                   	push   edx
c001be12:	52                   	push   edx
c001be13:	6a 00                	push   0x0
c001be15:	53                   	push   ebx
c001be16:	e8 da a8 fe ff       	call   c00066f5 <iso_open>
c001be1b:	83 c4 10             	add    esp,0x10
c001be1e:	89 c5                	mov    ebp,eax
c001be20:	83 f8 ff             	cmp    eax,0xffffffff
c001be23:	75 21                	jne    c001be46 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001be25:	50                   	push   eax
c001be26:	50                   	push   eax
c001be27:	6a 01                	push   0x1
c001be29:	53                   	push   ebx
c001be2a:	e8 c6 a8 fe ff       	call   c00066f5 <iso_open>
c001be2f:	83 c4 10             	add    esp,0x10
c001be32:	ba 02 00 00 00       	mov    edx,0x2
c001be37:	40                   	inc    eax
c001be38:	74 2b                	je     c001be65 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001be3a:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001be3d:	eb 24                	jmp    c001be63 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001be3f:	ba 04 00 00 00       	mov    edx,0x4
c001be44:	eb 1f                	jmp    c001be65 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001be46:	83 ec 0c             	sub    esp,0xc
c001be49:	50                   	push   eax
c001be4a:	e8 19 ab fe ff       	call   c0006968 <iso_total>
c001be4f:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001be56:	89 07                	mov    DWORD PTR [edi],eax
c001be58:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001be5b:	e8 1f a9 fe ff       	call   c000677f <iso_close>
c001be60:	83 c4 10             	add    esp,0x10
c001be63:	31 d2                	xor    edx,edx
c001be65:	83 c4 0c             	add    esp,0xc
c001be68:	89 d0                	mov    eax,edx
c001be6a:	5b                   	pop    ebx
c001be6b:	5e                   	pop    esi
c001be6c:	5f                   	pop    edi
c001be6d:	5d                   	pop    ebp
c001be6e:	c3                   	ret    
c001be6f:	90                   	nop

c001be70 <ISO9660::close(void*)>:
c001be70:	83 ec 0c             	sub    esp,0xc
c001be73:	b8 04 00 00 00       	mov    eax,0x4
c001be78:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001be7c:	85 d2                	test   edx,edx
c001be7e:	74 1b                	je     c001be9b <ISO9660::close(void*)+0x2b>
c001be80:	83 ec 0c             	sub    esp,0xc
c001be83:	b9 02 00 00 00       	mov    ecx,0x2
c001be88:	89 d0                	mov    eax,edx
c001be8a:	99                   	cdq    
c001be8b:	f7 f9                	idiv   ecx
c001be8d:	83 e8 32             	sub    eax,0x32
c001be90:	50                   	push   eax
c001be91:	e8 e9 a8 fe ff       	call   c000677f <iso_close>
c001be96:	83 c4 10             	add    esp,0x10
c001be99:	31 c0                	xor    eax,eax
c001be9b:	83 c4 0c             	add    esp,0xc
c001be9e:	c3                   	ret    
c001be9f:	90                   	nop

c001bea0 <ISO9660::openDir(char const*, void**)>:
c001bea0:	56                   	push   esi
c001bea1:	53                   	push   ebx
c001bea2:	50                   	push   eax
c001bea3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001bea7:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001beab:	85 db                	test   ebx,ebx
c001bead:	0f 84 bd 00 00 00    	je     c001bf70 <ISO9660::openDir(char const*, void**)+0xd0>
c001beb3:	85 f6                	test   esi,esi
c001beb5:	0f 84 b5 00 00 00    	je     c001bf70 <ISO9660::openDir(char const*, void**)+0xd0>
c001bebb:	8a 13                	mov    dl,BYTE PTR [ebx]
c001bebd:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001bec4:	38 15 c0 d8 02 c0    	cmp    BYTE PTR ds:0xc002d8c0,dl
c001beca:	74 1b                	je     c001bee7 <ISO9660::openDir(char const*, void**)+0x47>
c001becc:	85 c0                	test   eax,eax
c001bece:	74 10                	je     c001bee0 <ISO9660::openDir(char const*, void**)+0x40>
c001bed0:	83 ec 0c             	sub    esp,0xc
c001bed3:	68 a9 48 02 c0       	push   0xc00248a9
c001bed8:	e8 6d 37 ff ff       	call   c000f64a <KePanic(char const*)>
c001bedd:	83 c4 10             	add    esp,0x10
c001bee0:	8a 03                	mov    al,BYTE PTR [ebx]
c001bee2:	a2 c0 d8 02 c0       	mov    ds:0xc002d8c0,al
c001bee7:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001beea:	8b 04 85 7c a6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd5984]
c001bef1:	85 c0                	test   eax,eax
c001bef3:	74 10                	je     c001bf05 <ISO9660::openDir(char const*, void**)+0x65>
c001bef5:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001befc:	74 1a                	je     c001bf18 <ISO9660::openDir(char const*, void**)+0x78>
c001befe:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001bf05:	83 ec 0c             	sub    esp,0xc
c001bf08:	0f be 05 c0 d8 02 c0 	movsx  eax,BYTE PTR ds:0xc002d8c0
c001bf0f:	50                   	push   eax
c001bf10:	e8 19 ad fe ff       	call   c0006c2e <init_percd>
c001bf15:	83 c4 10             	add    esp,0x10
c001bf18:	83 c3 03             	add    ebx,0x3
c001bf1b:	50                   	push   eax
c001bf1c:	50                   	push   eax
c001bf1d:	6a 01                	push   0x1
c001bf1f:	53                   	push   ebx
c001bf20:	e8 d0 a7 fe ff       	call   c00066f5 <iso_open>
c001bf25:	83 c4 10             	add    esp,0x10
c001bf28:	89 c3                	mov    ebx,eax
c001bf2a:	83 f8 ff             	cmp    eax,0xffffffff
c001bf2d:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c001bf32:	75 1c                	jne    c001bf50 <ISO9660::openDir(char const*, void**)+0xb0>
c001bf34:	53                   	push   ebx
c001bf35:	53                   	push   ebx
c001bf36:	68 51 49 02 c0       	push   0xc0024951
c001bf3b:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001bf41:	e8 da 5e ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c001bf46:	83 c4 10             	add    esp,0x10
c001bf49:	b8 01 00 00 00       	mov    eax,0x1
c001bf4e:	eb 25                	jmp    c001bf75 <ISO9660::openDir(char const*, void**)+0xd5>
c001bf50:	01 db                	add    ebx,ebx
c001bf52:	51                   	push   ecx
c001bf53:	83 c3 65             	add    ebx,0x65
c001bf56:	51                   	push   ecx
c001bf57:	68 64 49 02 c0       	push   0xc0024964
c001bf5c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001bf62:	e8 b9 5e ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c001bf67:	89 1e                	mov    DWORD PTR [esi],ebx
c001bf69:	83 c4 10             	add    esp,0x10
c001bf6c:	31 c0                	xor    eax,eax
c001bf6e:	eb 05                	jmp    c001bf75 <ISO9660::openDir(char const*, void**)+0xd5>
c001bf70:	b8 04 00 00 00       	mov    eax,0x4
c001bf75:	5a                   	pop    edx
c001bf76:	5b                   	pop    ebx
c001bf77:	5e                   	pop    esi
c001bf78:	c3                   	ret    
c001bf79:	90                   	nop

c001bf7a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001bf7a:	55                   	push   ebp
c001bf7b:	57                   	push   edi
c001bf7c:	56                   	push   esi
c001bf7d:	53                   	push   ebx
c001bf7e:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001bf84:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001bf8b:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001bf92:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001bf9a:	0f 84 e7 00 00 00    	je     c001c087 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001bfa0:	85 db                	test   ebx,ebx
c001bfa2:	0f 84 df 00 00 00    	je     c001c087 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001bfa8:	83 ec 0c             	sub    esp,0xc
c001bfab:	68 77 49 02 c0       	push   0xc0024977
c001bfb0:	e8 af af fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001bfb5:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001bfbc:	b9 02 00 00 00       	mov    ecx,0x2
c001bfc1:	99                   	cdq    
c001bfc2:	f7 f9                	idiv   ecx
c001bfc4:	83 e8 32             	sub    eax,0x32
c001bfc7:	89 04 24             	mov    DWORD PTR [esp],eax
c001bfca:	e8 eb a9 fe ff       	call   c00069ba <iso_readdir>
c001bfcf:	83 c4 10             	add    esp,0x10
c001bfd2:	89 c6                	mov    esi,eax
c001bfd4:	85 c0                	test   eax,eax
c001bfd6:	75 37                	jne    c001c00f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001bfd8:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c001bfdd:	56                   	push   esi
c001bfde:	56                   	push   esi
c001bfdf:	68 82 49 02 c0       	push   0xc0024982
c001bfe4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001bfea:	e8 31 5e ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c001bfef:	83 c4 0c             	add    esp,0xc
c001bff2:	68 10 01 00 00       	push   0x110
c001bff7:	6a 00                	push   0x0
c001bff9:	57                   	push   edi
c001bffa:	e8 f1 44 fe ff       	call   c00004f0 <memset>
c001bfff:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001c005:	83 c4 10             	add    esp,0x10
c001c008:	b8 01 00 00 00       	mov    eax,0x1
c001c00d:	eb 7d                	jmp    c001c08c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001c00f:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001c015:	8d 68 08             	lea    ebp,[eax+0x8]
c001c018:	83 ec 0c             	sub    esp,0xc
c001c01b:	55                   	push   ebp
c001c01c:	e8 4f 45 fe ff       	call   c0000570 <strlen>
c001c021:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001c029:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c02d:	83 c4 10             	add    esp,0x10
c001c030:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001c034:	75 0a                	jne    c001c040 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001c036:	b8 02 00 00 00       	mov    eax,0x2
c001c03b:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001c03e:	74 05                	je     c001c045 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001c040:	b8 01 00 00 00       	mov    eax,0x1
c001c045:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c049:	50                   	push   eax
c001c04a:	50                   	push   eax
c001c04b:	55                   	push   ebp
c001c04c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001c050:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c054:	50                   	push   eax
c001c055:	e8 e6 45 fe ff       	call   c0000640 <strcpy>
c001c05a:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001c061:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c063:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001c069:	5a                   	pop    edx
c001c06a:	a1 f8 d6 02 c0       	mov    eax,ds:0xc002d6f8
c001c06f:	59                   	pop    ecx
c001c070:	68 95 49 02 c0       	push   0xc0024995
c001c075:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001c07b:	e8 a0 5d ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c001c080:	83 c4 10             	add    esp,0x10
c001c083:	31 c0                	xor    eax,eax
c001c085:	eb 05                	jmp    c001c08c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001c087:	b8 04 00 00 00       	mov    eax,0x4
c001c08c:	81 c4 1c 01 00 00    	add    esp,0x11c
c001c092:	5b                   	pop    ebx
c001c093:	5e                   	pop    esi
c001c094:	5f                   	pop    edi
c001c095:	5d                   	pop    ebp
c001c096:	c3                   	ret    

c001c097 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001c097:	57                   	push   edi
c001c098:	56                   	push   esi
c001c099:	53                   	push   ebx
c001c09a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c09e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c0a2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c0a6:	39 35 c4 d8 02 c0    	cmp    DWORD PTR ds:0xc002d8c4,esi
c001c0ac:	0f be cb             	movsx  ecx,bl
c001c0af:	75 0b                	jne    c001c0bc <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001c0b1:	0f be 05 44 5c 02 c0 	movsx  eax,BYTE PTR ds:0xc0025c44
c001c0b8:	39 c8                	cmp    eax,ecx
c001c0ba:	74 47                	je     c001c103 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001c0bc:	83 ec 0c             	sub    esp,0xc
c001c0bf:	31 d2                	xor    edx,edx
c001c0c1:	68 e0 d8 02 c0       	push   0xc002d8e0
c001c0c6:	6a 01                	push   0x1
c001c0c8:	52                   	push   edx
c001c0c9:	56                   	push   esi
c001c0ca:	ff 34 8d 7c a6 02 c0 	push   DWORD PTR [ecx*4-0x3ffd5984]
c001c0d1:	e8 12 e0 fe ff       	call   c000a0e8 <LogicalDisk::read(unsigned long long, int, void*)>
c001c0d6:	83 c4 20             	add    esp,0x20
c001c0d9:	85 c0                	test   eax,eax
c001c0db:	75 0e                	jne    c001c0eb <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001c0dd:	89 35 c4 d8 02 c0    	mov    DWORD PTR ds:0xc002d8c4,esi
c001c0e3:	88 1d 44 5c 02 c0    	mov    BYTE PTR ds:0xc0025c44,bl
c001c0e9:	eb 18                	jmp    c001c103 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001c0eb:	50                   	push   eax
c001c0ec:	68 00 08 00 00       	push   0x800
c001c0f1:	6a 00                	push   0x0
c001c0f3:	57                   	push   edi
c001c0f4:	e8 f7 43 fe ff       	call   c00004f0 <memset>
c001c0f9:	83 c4 10             	add    esp,0x10
c001c0fc:	b8 01 00 00 00       	mov    eax,0x1
c001c101:	eb 0e                	jmp    c001c111 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001c103:	be e0 d8 02 c0       	mov    esi,0xc002d8e0
c001c108:	b9 00 08 00 00       	mov    ecx,0x800
c001c10d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c10f:	31 c0                	xor    eax,eax
c001c111:	5b                   	pop    ebx
c001c112:	5e                   	pop    esi
c001c113:	5f                   	pop    edi
c001c114:	c3                   	ret    
c001c115:	90                   	nop

c001c116 <ISO9660::tryMount(LogicalDisk*, int)>:
c001c116:	53                   	push   ebx
c001c117:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001c11d:	c7 05 c4 d8 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc002d8c4,0xdeadbeef
c001c127:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001c12e:	8d 58 41             	lea    ebx,[eax+0x41]
c001c131:	0f be db             	movsx  ebx,bl
c001c134:	53                   	push   ebx
c001c135:	8d 44 24 08          	lea    eax,[esp+0x8]
c001c139:	50                   	push   eax
c001c13a:	6a 10                	push   0x10
c001c13c:	e8 56 ff ff ff       	call   c001c097 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001c141:	83 c4 10             	add    esp,0x10
c001c144:	31 d2                	xor    edx,edx
c001c146:	85 c0                	test   eax,eax
c001c148:	75 33                	jne    c001c17d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c14a:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001c14f:	75 2c                	jne    c001c17d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c151:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001c156:	75 25                	jne    c001c17d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c158:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001c15d:	75 1e                	jne    c001c17d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c15f:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001c164:	75 17                	jne    c001c17d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c166:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001c16b:	75 10                	jne    c001c17d <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001c16d:	83 ec 0c             	sub    esp,0xc
c001c170:	53                   	push   ebx
c001c171:	e8 b8 aa fe ff       	call   c0006c2e <init_percd>
c001c176:	83 c4 10             	add    esp,0x10
c001c179:	40                   	inc    eax
c001c17a:	0f 95 c2             	setne  dl
c001c17d:	88 d0                	mov    al,dl
c001c17f:	81 c4 08 08 00 00    	add    esp,0x808
c001c185:	5b                   	pop    ebx
c001c186:	c3                   	ret    
c001c187:	90                   	nop

c001c188 <ISO9660::ISO9660()>:
c001c188:	83 ec 0c             	sub    esp,0xc
c001c18b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c18f:	83 ec 0c             	sub    esp,0xc
c001c192:	50                   	push   eax
c001c193:	e8 d8 bb fe ff       	call   c0007d70 <Filesystem::Filesystem()>
c001c198:	83 c4 10             	add    esp,0x10
c001c19b:	ba b0 49 02 c0       	mov    edx,0xc00249b0
c001c1a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a4:	89 10                	mov    DWORD PTR [eax],edx
c001c1a6:	e8 95 ab fe ff       	call   c0006d40 <fs_iso9660_init>
c001c1ab:	90                   	nop
c001c1ac:	83 c4 0c             	add    esp,0xc
c001c1af:	c3                   	ret    

c001c1b0 <SoundCard::beginPlayback()>:
c001c1b0:	c7 44 24 04 14 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024a14
c001c1b8:	e9 8d 34 ff ff       	jmp    c000f64a <KePanic(char const*)>
c001c1bd:	90                   	nop

c001c1be <SoundCard::stopPlayback()>:
c001c1be:	c7 44 24 04 14 4a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024a14
c001c1c6:	e9 7f 34 ff ff       	jmp    c000f64a <KePanic(char const*)>
c001c1cb:	90                   	nop

c001c1cc <SoundCard::SoundCard(char const*)>:
c001c1cc:	83 ec 1c             	sub    esp,0x1c
c001c1cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1d3:	83 ec 08             	sub    esp,0x8
c001c1d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c1da:	50                   	push   eax
c001c1db:	e8 14 d0 fe ff       	call   c00091f4 <Device::Device(char const*)>
c001c1e0:	83 c4 10             	add    esp,0x10
c001c1e3:	ba 60 4a 02 c0       	mov    edx,0xc0024a60
c001c1e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1ec:	89 10                	mov    DWORD PTR [eax],edx
c001c1ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1f2:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c1f9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c1fd:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001c207:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c20b:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001c215:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c219:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001c223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c227:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001c231:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001c239:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001c23e:	7f 1a                	jg     c001c25a <SoundCard::SoundCard(char const*)+0x8e>
c001c240:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c244:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001c248:	83 c2 54             	add    edx,0x54
c001c24b:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001c253:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001c258:	eb df                	jmp    c001c239 <SoundCard::SoundCard(char const*)+0x6d>
c001c25a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c25e:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001c265:	90                   	nop
c001c266:	83 c4 1c             	add    esp,0x1c
c001c269:	c3                   	ret    

c001c26a <SoundCard::~SoundCard()>:
c001c26a:	83 ec 0c             	sub    esp,0xc
c001c26d:	ba 60 4a 02 c0       	mov    edx,0xc0024a60
c001c272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c276:	89 10                	mov    DWORD PTR [eax],edx
c001c278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c27c:	83 ec 0c             	sub    esp,0xc
c001c27f:	50                   	push   eax
c001c280:	e8 0f cd fe ff       	call   c0008f94 <Device::~Device()>
c001c285:	83 c4 10             	add    esp,0x10
c001c288:	90                   	nop
c001c289:	83 c4 0c             	add    esp,0xc
c001c28c:	c3                   	ret    
c001c28d:	90                   	nop

c001c28e <SoundCard::~SoundCard()>:
c001c28e:	83 ec 0c             	sub    esp,0xc
c001c291:	83 ec 0c             	sub    esp,0xc
c001c294:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c298:	e8 cd ff ff ff       	call   c001c26a <SoundCard::~SoundCard()>
c001c29d:	83 c4 10             	add    esp,0x10
c001c2a0:	83 ec 08             	sub    esp,0x8
c001c2a3:	68 e8 01 00 00       	push   0x1e8
c001c2a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c2ac:	e8 da 06 ff ff       	call   c000c98b <operator delete(void*, unsigned long)>
c001c2b1:	83 c4 10             	add    esp,0x10
c001c2b4:	83 c4 0c             	add    esp,0xc
c001c2b7:	c3                   	ret    

c001c2b8 <SoundCard::configureRates(int, int, int)>:
c001c2b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001c2bc:	31 c0                	xor    eax,eax
c001c2be:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001c2c5:	75 20                	jne    c001c2e7 <SoundCard::configureRates(int, int, int)+0x2f>
c001c2c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c2cb:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001c2d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c2d5:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001c2db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2df:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001c2e5:	b0 01                	mov    al,0x1
c001c2e7:	c3                   	ret    

c001c2e8 <SoundCard::getSamples16(int, short*)>:
c001c2e8:	55                   	push   ebp
c001c2e9:	57                   	push   edi
c001c2ea:	31 ff                	xor    edi,edi
c001c2ec:	56                   	push   esi
c001c2ed:	53                   	push   ebx
c001c2ee:	31 db                	xor    ebx,ebx
c001c2f0:	83 ec 10             	sub    esp,0x10
c001c2f3:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001c2f7:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c2fb:	8d 04 36             	lea    eax,[esi+esi*1]
c001c2fe:	50                   	push   eax
c001c2ff:	6a 00                	push   0x0
c001c301:	55                   	push   ebp
c001c302:	e8 e9 41 fe ff       	call   c00004f0 <memset>
c001c307:	83 c4 10             	add    esp,0x10
c001c30a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c30e:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001c315:	85 c0                	test   eax,eax
c001c317:	74 1b                	je     c001c334 <SoundCard::getSamples16(int, short*)+0x4c>
c001c319:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c31d:	75 15                	jne    c001c334 <SoundCard::getSamples16(int, short*)+0x4c>
c001c31f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c323:	55                   	push   ebp
c001c324:	56                   	push   esi
c001c325:	50                   	push   eax
c001c326:	e8 8d 03 00 00       	call   c001c6b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001c32b:	83 c4 10             	add    esp,0x10
c001c32e:	39 c7                	cmp    edi,eax
c001c330:	7d 02                	jge    c001c334 <SoundCard::getSamples16(int, short*)+0x4c>
c001c332:	89 c7                	mov    edi,eax
c001c334:	43                   	inc    ebx
c001c335:	83 fb 20             	cmp    ebx,0x20
c001c338:	75 d0                	jne    c001c30a <SoundCard::getSamples16(int, short*)+0x22>
c001c33a:	83 c4 0c             	add    esp,0xc
c001c33d:	89 f8                	mov    eax,edi
c001c33f:	5b                   	pop    ebx
c001c340:	5e                   	pop    esi
c001c341:	5f                   	pop    edi
c001c342:	5d                   	pop    ebp
c001c343:	c3                   	ret    

c001c344 <SoundCard::getSamples32(int, int*)>:
c001c344:	55                   	push   ebp
c001c345:	57                   	push   edi
c001c346:	31 ff                	xor    edi,edi
c001c348:	56                   	push   esi
c001c349:	31 f6                	xor    esi,esi
c001c34b:	53                   	push   ebx
c001c34c:	83 ec 10             	sub    esp,0x10
c001c34f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001c353:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001c357:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001c35b:	c1 e0 02             	shl    eax,0x2
c001c35e:	50                   	push   eax
c001c35f:	6a 00                	push   0x0
c001c361:	55                   	push   ebp
c001c362:	e8 89 41 fe ff       	call   c00004f0 <memset>
c001c367:	83 c4 10             	add    esp,0x10
c001c36a:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001c371:	85 c0                	test   eax,eax
c001c373:	74 1b                	je     c001c390 <SoundCard::getSamples32(int, int*)+0x4c>
c001c375:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001c379:	75 15                	jne    c001c390 <SoundCard::getSamples32(int, int*)+0x4c>
c001c37b:	53                   	push   ebx
c001c37c:	55                   	push   ebp
c001c37d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c381:	50                   	push   eax
c001c382:	e8 fd 03 00 00       	call   c001c784 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001c387:	83 c4 10             	add    esp,0x10
c001c38a:	39 c6                	cmp    esi,eax
c001c38c:	7d 02                	jge    c001c390 <SoundCard::getSamples32(int, int*)+0x4c>
c001c38e:	89 c6                	mov    esi,eax
c001c390:	47                   	inc    edi
c001c391:	83 ff 20             	cmp    edi,0x20
c001c394:	75 d4                	jne    c001c36a <SoundCard::getSamples32(int, int*)+0x26>
c001c396:	85 f6                	test   esi,esi
c001c398:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001c39f:	75 0f                	jne    c001c3b0 <SoundCard::getSamples32(int, int*)+0x6c>
c001c3a1:	85 c0                	test   eax,eax
c001c3a3:	74 1b                	je     c001c3c0 <SoundCard::getSamples32(int, int*)+0x7c>
c001c3a5:	83 ec 0c             	sub    esp,0xc
c001c3a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c3aa:	53                   	push   ebx
c001c3ab:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001c3ae:	eb 0d                	jmp    c001c3bd <SoundCard::getSamples32(int, int*)+0x79>
c001c3b0:	85 c0                	test   eax,eax
c001c3b2:	75 0c                	jne    c001c3c0 <SoundCard::getSamples32(int, int*)+0x7c>
c001c3b4:	83 ec 0c             	sub    esp,0xc
c001c3b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c3b9:	53                   	push   ebx
c001c3ba:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001c3bd:	83 c4 10             	add    esp,0x10
c001c3c0:	83 c4 0c             	add    esp,0xc
c001c3c3:	89 f0                	mov    eax,esi
c001c3c5:	5b                   	pop    ebx
c001c3c6:	5e                   	pop    esi
c001c3c7:	5f                   	pop    edi
c001c3c8:	5d                   	pop    ebp
c001c3c9:	c3                   	ret    

c001c3ca <SoundCard::addChannel(SoundPort*)>:
c001c3ca:	83 ec 0c             	sub    esp,0xc
c001c3cd:	31 c0                	xor    eax,eax
c001c3cf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c3d3:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001c3db:	74 1b                	je     c001c3f8 <SoundCard::addChannel(SoundPort*)+0x2e>
c001c3dd:	40                   	inc    eax
c001c3de:	83 f8 20             	cmp    eax,0x20
c001c3e1:	75 f0                	jne    c001c3d3 <SoundCard::addChannel(SoundPort*)+0x9>
c001c3e3:	83 ec 0c             	sub    esp,0xc
c001c3e6:	68 39 4a 02 c0       	push   0xc0024a39
c001c3eb:	e8 5a 32 ff ff       	call   c000f64a <KePanic(char const*)>
c001c3f0:	83 c4 10             	add    esp,0x10
c001c3f3:	83 c8 ff             	or     eax,0xffffffff
c001c3f6:	eb 0b                	jmp    c001c403 <SoundCard::addChannel(SoundPort*)+0x39>
c001c3f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001c3fc:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001c403:	83 c4 0c             	add    esp,0xc
c001c406:	c3                   	ret    
c001c407:	90                   	nop

c001c408 <SoundCard::removeChannel(int)>:
c001c408:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c40c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c410:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001c41b:	c3                   	ret    

c001c41c <SoundPort::SoundPort(int, int, int, int)>:
c001c41c:	83 ec 0c             	sub    esp,0xc
c001c41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c423:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c42a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c42e:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c432:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c436:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c43a:	89 10                	mov    DWORD PTR [eax],edx
c001c43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c440:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c444:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c44f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c452:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001c457:	75 13                	jne    c001c46c <SoundPort::SoundPort(int, int, int, int)+0x50>
c001c459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c45d:	8b 00                	mov    eax,DWORD PTR [eax]
c001c45f:	05 a0 0f 00 00       	add    eax,0xfa0
c001c464:	01 c0                	add    eax,eax
c001c466:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c46a:	66 90                	xchg   ax,ax
c001c46c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c470:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c474:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001c477:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c47b:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001c482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c486:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c489:	c1 e0 02             	shl    eax,0x2
c001c48c:	83 ec 0c             	sub    esp,0xc
c001c48f:	50                   	push   eax
c001c490:	e8 6e 2e ff ff       	call   c000f303 <malloc>
c001c495:	83 c4 10             	add    esp,0x10
c001c498:	89 c2                	mov    edx,eax
c001c49a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c49e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001c4a1:	90                   	nop
c001c4a2:	83 c4 0c             	add    esp,0xc
c001c4a5:	c3                   	ret    
c001c4a6:	66 90                	xchg   ax,ax

c001c4a8 <SoundPort::~SoundPort()>:
c001c4a8:	83 ec 0c             	sub    esp,0xc
c001c4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4af:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c4b2:	85 c0                	test   eax,eax
c001c4b4:	74 1e                	je     c001c4d4 <SoundPort::~SoundPort()+0x2c>
c001c4b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001c4bd:	83 ec 0c             	sub    esp,0xc
c001c4c0:	50                   	push   eax
c001c4c1:	e8 4d 2e ff ff       	call   c000f313 <free>
c001c4c6:	83 c4 10             	add    esp,0x10
c001c4c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001c4d4:	90                   	nop
c001c4d5:	83 c4 0c             	add    esp,0xc
c001c4d8:	c3                   	ret    
c001c4d9:	90                   	nop
c001c4da:	66 90                	xchg   ax,ax

c001c4dc <SoundPort::unpause()>:
c001c4dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4e0:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001c4e4:	c3                   	ret    
c001c4e5:	90                   	nop
c001c4e6:	66 90                	xchg   ax,ax

c001c4e8 <SoundPort::pause()>:
c001c4e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ec:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001c4f0:	c3                   	ret    
c001c4f1:	90                   	nop
c001c4f2:	66 90                	xchg   ax,ax

c001c4f4 <SoundPort::getBufferUsed()>:
c001c4f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4f8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001c4fb:	c3                   	ret    

c001c4fc <SoundPort::getBufferSize()>:
c001c4fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c500:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001c503:	c3                   	ret    

c001c504 <SoundPort::buffer8(signed char*, int)>:
c001c504:	55                   	push   ebp
c001c505:	57                   	push   edi
c001c506:	56                   	push   esi
c001c507:	53                   	push   ebx
c001c508:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c50c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001c510:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c513:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c516:	74 70                	je     c001c588 <SoundPort::buffer8(signed char*, int)+0x84>
c001c518:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c51c:	85 c9                	test   ecx,ecx
c001c51e:	7e 68                	jle    c001c588 <SoundPort::buffer8(signed char*, int)+0x84>
c001c520:	0f be 75 00          	movsx  esi,BYTE PTR [ebp+0x0]
c001c524:	8d 48 01             	lea    ecx,[eax+0x1]
c001c527:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c52a:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c52d:	89 f1                	mov    ecx,esi
c001c52f:	c1 e1 18             	shl    ecx,0x18
c001c532:	29 f1                	sub    ecx,esi
c001c534:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c537:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c53a:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c53d:	74 51                	je     c001c590 <SoundPort::buffer8(signed char*, int)+0x8c>
c001c53f:	31 ff                	xor    edi,edi
c001c541:	eb 25                	jmp    c001c568 <SoundPort::buffer8(signed char*, int)+0x64>
c001c543:	90                   	nop
c001c544:	0f be 74 05 00       	movsx  esi,BYTE PTR [ebp+eax*1+0x0]
c001c549:	8d 59 01             	lea    ebx,[ecx+0x1]
c001c54c:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001c54f:	89 f3                	mov    ebx,esi
c001c551:	c1 e3 18             	shl    ebx,0x18
c001c554:	29 f3                	sub    ebx,esi
c001c556:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001c559:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001c55c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c55f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c562:	74 1c                	je     c001c580 <SoundPort::buffer8(signed char*, int)+0x7c>
c001c564:	89 c7                	mov    edi,eax
c001c566:	66 90                	xchg   ax,ax
c001c568:	8d 47 01             	lea    eax,[edi+0x1]
c001c56b:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001c56f:	75 d3                	jne    c001c544 <SoundPort::buffer8(signed char*, int)+0x40>
c001c571:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c575:	8d 76 00             	lea    esi,[esi+0x0]
c001c578:	5b                   	pop    ebx
c001c579:	5e                   	pop    esi
c001c57a:	5f                   	pop    edi
c001c57b:	5d                   	pop    ebp
c001c57c:	c3                   	ret    
c001c57d:	8d 76 00             	lea    esi,[esi+0x0]
c001c580:	5b                   	pop    ebx
c001c581:	8d 47 02             	lea    eax,[edi+0x2]
c001c584:	5e                   	pop    esi
c001c585:	5f                   	pop    edi
c001c586:	5d                   	pop    ebp
c001c587:	c3                   	ret    
c001c588:	5b                   	pop    ebx
c001c589:	31 c0                	xor    eax,eax
c001c58b:	5e                   	pop    esi
c001c58c:	5f                   	pop    edi
c001c58d:	5d                   	pop    ebp
c001c58e:	c3                   	ret    
c001c58f:	90                   	nop
c001c590:	b8 01 00 00 00       	mov    eax,0x1
c001c595:	eb e1                	jmp    c001c578 <SoundPort::buffer8(signed char*, int)+0x74>
c001c597:	90                   	nop

c001c598 <SoundPort::buffer16(short*, int)>:
c001c598:	55                   	push   ebp
c001c599:	57                   	push   edi
c001c59a:	56                   	push   esi
c001c59b:	53                   	push   ebx
c001c59c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c5a0:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001c5a4:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001c5a7:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001c5aa:	74 70                	je     c001c61c <SoundPort::buffer16(short*, int)+0x84>
c001c5ac:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001c5b0:	85 c9                	test   ecx,ecx
c001c5b2:	7e 68                	jle    c001c61c <SoundPort::buffer16(short*, int)+0x84>
c001c5b4:	0f bf 75 00          	movsx  esi,WORD PTR [ebp+0x0]
c001c5b8:	8d 48 01             	lea    ecx,[eax+0x1]
c001c5bb:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c5be:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c001c5c1:	89 f1                	mov    ecx,esi
c001c5c3:	c1 e1 10             	shl    ecx,0x10
c001c5c6:	29 f1                	sub    ecx,esi
c001c5c8:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001c5cb:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c5ce:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c5d1:	74 51                	je     c001c624 <SoundPort::buffer16(short*, int)+0x8c>
c001c5d3:	31 ff                	xor    edi,edi
c001c5d5:	eb 25                	jmp    c001c5fc <SoundPort::buffer16(short*, int)+0x64>
c001c5d7:	90                   	nop
c001c5d8:	0f bf 74 45 00       	movsx  esi,WORD PTR [ebp+eax*2+0x0]
c001c5dd:	8d 59 01             	lea    ebx,[ecx+0x1]
c001c5e0:	89 5a 14             	mov    DWORD PTR [edx+0x14],ebx
c001c5e3:	89 f3                	mov    ebx,esi
c001c5e5:	c1 e3 10             	shl    ebx,0x10
c001c5e8:	29 f3                	sub    ebx,esi
c001c5ea:	8b 72 0c             	mov    esi,DWORD PTR [edx+0xc]
c001c5ed:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c001c5f0:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c5f3:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c5f6:	74 1c                	je     c001c614 <SoundPort::buffer16(short*, int)+0x7c>
c001c5f8:	89 c7                	mov    edi,eax
c001c5fa:	66 90                	xchg   ax,ax
c001c5fc:	8d 47 01             	lea    eax,[edi+0x1]
c001c5ff:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001c603:	75 d3                	jne    c001c5d8 <SoundPort::buffer16(short*, int)+0x40>
c001c605:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c609:	8d 76 00             	lea    esi,[esi+0x0]
c001c60c:	5b                   	pop    ebx
c001c60d:	5e                   	pop    esi
c001c60e:	5f                   	pop    edi
c001c60f:	5d                   	pop    ebp
c001c610:	c3                   	ret    
c001c611:	8d 76 00             	lea    esi,[esi+0x0]
c001c614:	5b                   	pop    ebx
c001c615:	8d 47 02             	lea    eax,[edi+0x2]
c001c618:	5e                   	pop    esi
c001c619:	5f                   	pop    edi
c001c61a:	5d                   	pop    ebp
c001c61b:	c3                   	ret    
c001c61c:	5b                   	pop    ebx
c001c61d:	31 c0                	xor    eax,eax
c001c61f:	5e                   	pop    esi
c001c620:	5f                   	pop    edi
c001c621:	5d                   	pop    ebp
c001c622:	c3                   	ret    
c001c623:	90                   	nop
c001c624:	b8 01 00 00 00       	mov    eax,0x1
c001c629:	eb e1                	jmp    c001c60c <SoundPort::buffer16(short*, int)+0x74>
c001c62b:	90                   	nop

c001c62c <SoundPort::buffer32(int*, int)>:
c001c62c:	55                   	push   ebp
c001c62d:	57                   	push   edi
c001c62e:	56                   	push   esi
c001c62f:	53                   	push   ebx
c001c630:	83 ec 04             	sub    esp,0x4
c001c633:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c637:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001c63b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c63e:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c642:	89 04 24             	mov    DWORD PTR [esp],eax
c001c645:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c648:	74 5a                	je     c001c6a4 <SoundPort::buffer32(int*, int)+0x78>
c001c64a:	85 c0                	test   eax,eax
c001c64c:	7e 56                	jle    c001c6a4 <SoundPort::buffer32(int*, int)+0x78>
c001c64e:	8d 71 01             	lea    esi,[ecx+0x1]
c001c651:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001c654:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001c657:	8b 37                	mov    esi,DWORD PTR [edi]
c001c659:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001c65c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c65f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c662:	74 4c                	je     c001c6b0 <SoundPort::buffer32(int*, int)+0x84>
c001c664:	31 f6                	xor    esi,esi
c001c666:	eb 1c                	jmp    c001c684 <SoundPort::buffer32(int*, int)+0x58>
c001c668:	8d 69 01             	lea    ebp,[ecx+0x1]
c001c66b:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001c66e:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001c671:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001c674:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001c678:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001c67b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001c67e:	74 18                	je     c001c698 <SoundPort::buffer32(int*, int)+0x6c>
c001c680:	89 de                	mov    esi,ebx
c001c682:	66 90                	xchg   ax,ax
c001c684:	8d 5e 01             	lea    ebx,[esi+0x1]
c001c687:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001c68a:	75 dc                	jne    c001c668 <SoundPort::buffer32(int*, int)+0x3c>
c001c68c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001c68f:	90                   	nop
c001c690:	83 c4 04             	add    esp,0x4
c001c693:	5b                   	pop    ebx
c001c694:	5e                   	pop    esi
c001c695:	5f                   	pop    edi
c001c696:	5d                   	pop    ebp
c001c697:	c3                   	ret    
c001c698:	83 c4 04             	add    esp,0x4
c001c69b:	8d 46 02             	lea    eax,[esi+0x2]
c001c69e:	5b                   	pop    ebx
c001c69f:	5e                   	pop    esi
c001c6a0:	5f                   	pop    edi
c001c6a1:	5d                   	pop    ebp
c001c6a2:	c3                   	ret    
c001c6a3:	90                   	nop
c001c6a4:	83 c4 04             	add    esp,0x4
c001c6a7:	31 c0                	xor    eax,eax
c001c6a9:	5b                   	pop    ebx
c001c6aa:	5e                   	pop    esi
c001c6ab:	5f                   	pop    edi
c001c6ac:	5d                   	pop    ebp
c001c6ad:	c3                   	ret    
c001c6ae:	66 90                	xchg   ax,ax
c001c6b0:	b8 01 00 00 00       	mov    eax,0x1
c001c6b5:	eb d9                	jmp    c001c690 <SoundPort::buffer32(int*, int)+0x64>
c001c6b7:	90                   	nop

c001c6b8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001c6b8:	57                   	push   edi
c001c6b9:	56                   	push   esi
c001c6ba:	53                   	push   ebx
c001c6bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6bf:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001c6c3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001c6c9:	39 03                	cmp    DWORD PTR [ebx],eax
c001c6cb:	74 13                	je     c001c6e0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001c6cd:	83 ec 0c             	sub    esp,0xc
c001c6d0:	68 8c 4a 02 c0       	push   0xc0024a8c
c001c6d5:	e8 70 2f ff ff       	call   c000f64a <KePanic(char const*)>
c001c6da:	83 c4 10             	add    esp,0x10
c001c6dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c6e0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001c6e6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001c6e9:	74 11                	je     c001c6fc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001c6eb:	83 ec 0c             	sub    esp,0xc
c001c6ee:	68 cb 4a 02 c0       	push   0xc0024acb
c001c6f3:	e8 52 2f ff ff       	call   c000f64a <KePanic(char const*)>
c001c6f8:	83 c4 10             	add    esp,0x10
c001c6fb:	90                   	nop
c001c6fc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001c702:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001c705:	74 11                	je     c001c718 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001c707:	83 ec 0c             	sub    esp,0xc
c001c70a:	68 cb 4a 02 c0       	push   0xc0024acb
c001c70f:	e8 36 2f ff ff       	call   c000f64a <KePanic(char const*)>
c001c714:	83 c4 10             	add    esp,0x10
c001c717:	90                   	nop
c001c718:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001c71b:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001c71f:	7e 07                	jle    c001c728 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001c721:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001c725:	8d 76 00             	lea    esi,[esi+0x0]
c001c728:	85 f6                	test   esi,esi
c001c72a:	7e 2c                	jle    c001c758 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001c72c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c730:	8d 3c 36             	lea    edi,[esi+esi*1]
c001c733:	31 c9                	xor    ecx,ecx
c001c735:	01 d7                	add    edi,edx
c001c737:	90                   	nop
c001c738:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001c73b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001c73e:	85 c0                	test   eax,eax
c001c740:	79 06                	jns    c001c748 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001c742:	05 ff 7f 00 00       	add    eax,0x7fff
c001c747:	90                   	nop
c001c748:	c1 f8 0f             	sar    eax,0xf
c001c74b:	83 c1 04             	add    ecx,0x4
c001c74e:	66 01 02             	add    WORD PTR [edx],ax
c001c751:	83 c2 02             	add    edx,0x2
c001c754:	39 d7                	cmp    edi,edx
c001c756:	75 e0                	jne    c001c738 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001c758:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001c75b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001c75e:	83 ec 04             	sub    esp,0x4
c001c761:	29 f0                	sub    eax,esi
c001c763:	c1 e0 02             	shl    eax,0x2
c001c766:	50                   	push   eax
c001c767:	8d 04 b2             	lea    eax,[edx+esi*4]
c001c76a:	50                   	push   eax
c001c76b:	52                   	push   edx
c001c76c:	e8 5f 3c fe ff       	call   c00003d0 <memmove>
c001c771:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001c774:	83 c4 10             	add    esp,0x10
c001c777:	29 f0                	sub    eax,esi
c001c779:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001c77c:	89 f0                	mov    eax,esi
c001c77e:	5b                   	pop    ebx
c001c77f:	5e                   	pop    esi
c001c780:	5f                   	pop    edi
c001c781:	c3                   	ret    
c001c782:	66 90                	xchg   ax,ax

c001c784 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001c784:	57                   	push   edi
c001c785:	56                   	push   esi
c001c786:	53                   	push   ebx
c001c787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c78b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001c78f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001c793:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001c799:	39 06                	cmp    DWORD PTR [esi],eax
c001c79b:	74 13                	je     c001c7b0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001c79d:	83 ec 0c             	sub    esp,0xc
c001c7a0:	68 ac 4a 02 c0       	push   0xc0024aac
c001c7a5:	e8 a0 2e ff ff       	call   c000f64a <KePanic(char const*)>
c001c7aa:	83 c4 10             	add    esp,0x10
c001c7ad:	8d 76 00             	lea    esi,[esi+0x0]
c001c7b0:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001c7b6:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001c7b9:	74 11                	je     c001c7cc <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001c7bb:	83 ec 0c             	sub    esp,0xc
c001c7be:	68 e7 4a 02 c0       	push   0xc0024ae7
c001c7c3:	e8 82 2e ff ff       	call   c000f64a <KePanic(char const*)>
c001c7c8:	83 c4 10             	add    esp,0x10
c001c7cb:	90                   	nop
c001c7cc:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001c7d2:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001c7d5:	74 11                	je     c001c7e8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001c7d7:	83 ec 0c             	sub    esp,0xc
c001c7da:	68 e7 4a 02 c0       	push   0xc0024ae7
c001c7df:	e8 66 2e ff ff       	call   c000f64a <KePanic(char const*)>
c001c7e4:	83 c4 10             	add    esp,0x10
c001c7e7:	90                   	nop
c001c7e8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001c7eb:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001c7ef:	7e 07                	jle    c001c7f8 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001c7f1:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c7f5:	8d 76 00             	lea    esi,[esi+0x0]
c001c7f8:	85 ff                	test   edi,edi
c001c7fa:	7e 1c                	jle    c001c818 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001c7fc:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001c803:	31 c0                	xor    eax,eax
c001c805:	8d 76 00             	lea    esi,[esi+0x0]
c001c808:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c80b:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001c80e:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001c811:	83 c0 04             	add    eax,0x4
c001c814:	39 c1                	cmp    ecx,eax
c001c816:	75 f0                	jne    c001c808 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001c818:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001c81b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001c81e:	83 ec 04             	sub    esp,0x4
c001c821:	29 f8                	sub    eax,edi
c001c823:	c1 e0 02             	shl    eax,0x2
c001c826:	50                   	push   eax
c001c827:	8d 04 ba             	lea    eax,[edx+edi*4]
c001c82a:	50                   	push   eax
c001c82b:	52                   	push   edx
c001c82c:	e8 9f 3b fe ff       	call   c00003d0 <memmove>
c001c831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001c834:	83 c4 10             	add    esp,0x10
c001c837:	29 f8                	sub    eax,edi
c001c839:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001c83c:	89 f8                	mov    eax,edi
c001c83e:	5b                   	pop    ebx
c001c83f:	5e                   	pop    esi
c001c840:	5f                   	pop    edi
c001c841:	c3                   	ret    

c001c842 <PCI::open(int, int, void*)>:
c001c842:	83 ec 18             	sub    esp,0x18
c001c845:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c849:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001c84d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c853:	8b 10                	mov    edx,DWORD PTR [eax]
c001c855:	50                   	push   eax
c001c856:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001c859:	31 c0                	xor    eax,eax
c001c85b:	83 c4 1c             	add    esp,0x1c
c001c85e:	c3                   	ret    
c001c85f:	90                   	nop

c001c860 <PCI::close(int, int, void*)>:
c001c860:	31 c0                	xor    eax,eax
c001c862:	c3                   	ret    
c001c863:	90                   	nop

c001c864 <PCI::PCI()>:
c001c864:	83 ec 0c             	sub    esp,0xc
c001c867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c86b:	83 ec 08             	sub    esp,0x8
c001c86e:	68 03 4b 02 c0       	push   0xc0024b03
c001c873:	50                   	push   eax
c001c874:	e8 93 c0 fe ff       	call   c000890c <Bus::Bus(char const*)>
c001c879:	83 c4 10             	add    esp,0x10
c001c87c:	ba 10 4c 02 c0       	mov    edx,0xc0024c10
c001c881:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c885:	89 10                	mov    DWORD PTR [eax],edx
c001c887:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c88b:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001c895:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c899:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c001c89e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c8a8:	0f b6 d0             	movzx  edx,al
c001c8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8af:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001c8b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ba:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c8c0:	0f b6 d0             	movzx  edx,al
c001c8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8c7:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001c8cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8d0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001c8d6:	8d 50 01             	lea    edx,[eax+0x1]
c001c8d9:	88 d1                	mov    cl,dl
c001c8db:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c8df:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001c8e5:	0f b6 d0             	movzx  edx,al
c001c8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8ec:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001c8f0:	83 c9 c0             	or     ecx,0xffffffc0
c001c8f3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001c8f7:	90                   	nop
c001c8f8:	83 c4 0c             	add    esp,0xc
c001c8fb:	c3                   	ret    

c001c8fc <PCI::readBAR8(unsigned int, int)>:
c001c8fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c900:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c904:	f6 c2 01             	test   dl,0x1
c001c907:	74 07                	je     c001c910 <PCI::readBAR8(unsigned int, int)+0x14>
c001c909:	83 e2 fc             	and    edx,0xfffffffc
c001c90c:	01 c2                	add    edx,eax
c001c90e:	ec                   	in     al,dx
c001c90f:	c3                   	ret    
c001c910:	83 e2 f0             	and    edx,0xfffffff0
c001c913:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001c916:	c3                   	ret    
c001c917:	90                   	nop

c001c918 <PCI::readBAR16(unsigned int, int)>:
c001c918:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c91c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c920:	f6 c2 01             	test   dl,0x1
c001c923:	74 08                	je     c001c92d <PCI::readBAR16(unsigned int, int)+0x15>
c001c925:	83 e2 fc             	and    edx,0xfffffffc
c001c928:	01 c2                	add    edx,eax
c001c92a:	66 ed                	in     ax,dx
c001c92c:	c3                   	ret    
c001c92d:	83 e2 f0             	and    edx,0xfffffff0
c001c930:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001c934:	c3                   	ret    
c001c935:	90                   	nop

c001c936 <PCI::readBAR32(unsigned int, int)>:
c001c936:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c93a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c93e:	f6 c2 01             	test   dl,0x1
c001c941:	74 07                	je     c001c94a <PCI::readBAR32(unsigned int, int)+0x14>
c001c943:	83 e2 fc             	and    edx,0xfffffffc
c001c946:	01 c2                	add    edx,eax
c001c948:	ed                   	in     eax,dx
c001c949:	c3                   	ret    
c001c94a:	83 e2 f0             	and    edx,0xfffffff0
c001c94d:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001c950:	c3                   	ret    
c001c951:	90                   	nop

c001c952 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001c952:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c956:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c95a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c95e:	f6 c2 01             	test   dl,0x1
c001c961:	74 07                	je     c001c96a <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001c963:	83 e2 fc             	and    edx,0xfffffffc
c001c966:	01 ca                	add    edx,ecx
c001c968:	ee                   	out    dx,al
c001c969:	c3                   	ret    
c001c96a:	83 e2 f0             	and    edx,0xfffffff0
c001c96d:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001c970:	c3                   	ret    
c001c971:	90                   	nop

c001c972 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001c972:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c97a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c97e:	f6 c2 01             	test   dl,0x1
c001c981:	74 08                	je     c001c98b <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001c983:	83 e2 fc             	and    edx,0xfffffffc
c001c986:	01 ca                	add    edx,ecx
c001c988:	66 ef                	out    dx,ax
c001c98a:	c3                   	ret    
c001c98b:	83 e2 f0             	and    edx,0xfffffff0
c001c98e:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001c992:	c3                   	ret    
c001c993:	90                   	nop

c001c994 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001c994:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001c998:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c99c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001c9a0:	f6 c2 01             	test   dl,0x1
c001c9a3:	74 07                	je     c001c9ac <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001c9a5:	83 e2 fc             	and    edx,0xfffffffc
c001c9a8:	01 ca                	add    edx,ecx
c001c9aa:	ef                   	out    dx,eax
c001c9ab:	c3                   	ret    
c001c9ac:	83 e2 f0             	and    edx,0xfffffff0
c001c9af:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001c9b2:	c3                   	ret    
c001c9b3:	90                   	nop

c001c9b4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001c9b4:	55                   	push   ebp
c001c9b5:	57                   	push   edi
c001c9b6:	56                   	push   esi
c001c9b7:	53                   	push   ebx
c001c9b8:	83 ec 0c             	sub    esp,0xc
c001c9bb:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001c9c0:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001c9c4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001c9c8:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001c9cc:	83 fe 07             	cmp    esi,0x7
c001c9cf:	76 10                	jbe    c001c9e1 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001c9d1:	83 ec 0c             	sub    esp,0xc
c001c9d4:	68 0b 4b 02 c0       	push   0xc0024b0b
c001c9d9:	e8 6c 2c ff ff       	call   c000f64a <KePanic(char const*)>
c001c9de:	83 c4 10             	add    esp,0x10
c001c9e1:	0f b6 db             	movzx  ebx,bl
c001c9e4:	83 fb 0f             	cmp    ebx,0xf
c001c9e7:	76 10                	jbe    c001c9f9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001c9e9:	83 ec 0c             	sub    esp,0xc
c001c9ec:	68 3b 4b 02 c0       	push   0xc0024b3b
c001c9f1:	e8 54 2c ff ff       	call   c000f64a <KePanic(char const*)>
c001c9f6:	83 c4 10             	add    esp,0x10
c001c9f9:	8d 04 36             	lea    eax,[esi+esi*1]
c001c9fc:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ca01:	83 c8 f0             	or     eax,0xfffffff0
c001ca04:	ee                   	out    dx,al
c001ca05:	ba fa 0c 00 00       	mov    edx,0xcfa
c001ca0a:	89 e8                	mov    eax,ebp
c001ca0c:	ee                   	out    dx,al
c001ca0d:	83 c4 0c             	add    esp,0xc
c001ca10:	89 d8                	mov    eax,ebx
c001ca12:	89 f9                	mov    ecx,edi
c001ca14:	c1 e0 08             	shl    eax,0x8
c001ca17:	0f b6 d9             	movzx  ebx,cl
c001ca1a:	83 e3 fc             	and    ebx,0xfffffffc
c001ca1d:	09 d8                	or     eax,ebx
c001ca1f:	5b                   	pop    ebx
c001ca20:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001ca25:	5e                   	pop    esi
c001ca26:	5f                   	pop    edi
c001ca27:	5d                   	pop    ebp
c001ca28:	c3                   	ret    
c001ca29:	90                   	nop

c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ca2a:	57                   	push   edi
c001ca2b:	56                   	push   esi
c001ca2c:	53                   	push   ebx
c001ca2d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ca31:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ca35:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ca3b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001ca3f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001ca43:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001ca47:	83 ff 01             	cmp    edi,0x1
c001ca4a:	75 3f                	jne    c001ca8b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001ca4c:	89 de                	mov    esi,ebx
c001ca4e:	0f b6 c0             	movzx  eax,al
c001ca51:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ca57:	c1 e0 10             	shl    eax,0x10
c001ca5a:	0f b6 c9             	movzx  ecx,cl
c001ca5d:	09 f0                	or     eax,esi
c001ca5f:	c1 e1 08             	shl    ecx,0x8
c001ca62:	0f b6 d2             	movzx  edx,dl
c001ca65:	09 c8                	or     eax,ecx
c001ca67:	c1 e2 0b             	shl    edx,0xb
c001ca6a:	09 d0                	or     eax,edx
c001ca6c:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ca71:	0d 00 00 00 80       	or     eax,0x80000000
c001ca76:	ef                   	out    dx,eax
c001ca77:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ca7c:	ed                   	in     eax,dx
c001ca7d:	83 e3 02             	and    ebx,0x2
c001ca80:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ca87:	d3 e8                	shr    eax,cl
c001ca89:	eb 44                	jmp    c001cacf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ca8b:	83 ff 02             	cmp    edi,0x2
c001ca8e:	75 2d                	jne    c001cabd <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001ca90:	83 ec 0c             	sub    esp,0xc
c001ca93:	0f b6 c9             	movzx  ecx,cl
c001ca96:	0f b6 d2             	movzx  edx,dl
c001ca99:	0f b6 fb             	movzx  edi,bl
c001ca9c:	0f b6 c0             	movzx  eax,al
c001ca9f:	57                   	push   edi
c001caa0:	51                   	push   ecx
c001caa1:	52                   	push   edx
c001caa2:	50                   	push   eax
c001caa3:	56                   	push   esi
c001caa4:	e8 0b ff ff ff       	call   c001c9b4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001caa9:	89 c2                	mov    edx,eax
c001caab:	ed                   	in     eax,dx
c001caac:	83 e3 02             	and    ebx,0x2
c001caaf:	83 c4 20             	add    esp,0x20
c001cab2:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001cab9:	d3 e8                	shr    eax,cl
c001cabb:	eb 12                	jmp    c001cacf <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001cabd:	83 ec 0c             	sub    esp,0xc
c001cac0:	68 6b 4b 02 c0       	push   0xc0024b6b
c001cac5:	e8 80 2b ff ff       	call   c000f64a <KePanic(char const*)>
c001caca:	83 c4 10             	add    esp,0x10
c001cacd:	31 c0                	xor    eax,eax
c001cacf:	5b                   	pop    ebx
c001cad0:	5e                   	pop    esi
c001cad1:	5f                   	pop    edi
c001cad2:	c3                   	ret    
c001cad3:	90                   	nop

c001cad4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001cad4:	83 ec 18             	sub    esp,0x18
c001cad7:	6a 00                	push   0x0
c001cad9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cade:	50                   	push   eax
c001cadf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cae4:	50                   	push   eax
c001cae5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001caea:	50                   	push   eax
c001caeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001caef:	e8 36 ff ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001caf4:	83 c4 2c             	add    esp,0x2c
c001caf7:	c3                   	ret    

c001caf8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001caf8:	83 ec 18             	sub    esp,0x18
c001cafb:	6a 0e                	push   0xe
c001cafd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb02:	50                   	push   eax
c001cb03:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb08:	50                   	push   eax
c001cb09:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb0e:	50                   	push   eax
c001cb0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb13:	e8 12 ff ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb18:	83 c4 2c             	add    esp,0x2c
c001cb1b:	0f b6 c0             	movzx  eax,al
c001cb1e:	c3                   	ret    
c001cb1f:	90                   	nop

c001cb20 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001cb20:	55                   	push   ebp
c001cb21:	57                   	push   edi
c001cb22:	56                   	push   esi
c001cb23:	53                   	push   ebx
c001cb24:	83 ec 18             	sub    esp,0x18
c001cb27:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001cb2c:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001cb31:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001cb36:	6a 0a                	push   0xa
c001cb38:	56                   	push   esi
c001cb39:	55                   	push   ebp
c001cb3a:	57                   	push   edi
c001cb3b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb3f:	e8 e6 fe ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb44:	83 c4 14             	add    esp,0x14
c001cb47:	89 c3                	mov    ebx,eax
c001cb49:	6a 0a                	push   0xa
c001cb4b:	0f b6 db             	movzx  ebx,bl
c001cb4e:	56                   	push   esi
c001cb4f:	55                   	push   ebp
c001cb50:	57                   	push   edi
c001cb51:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cb55:	e8 d0 fe ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb5a:	83 c4 2c             	add    esp,0x2c
c001cb5d:	25 00 ff 00 00       	and    eax,0xff00
c001cb62:	09 d8                	or     eax,ebx
c001cb64:	5b                   	pop    ebx
c001cb65:	5e                   	pop    esi
c001cb66:	5f                   	pop    edi
c001cb67:	5d                   	pop    ebp
c001cb68:	c3                   	ret    
c001cb69:	90                   	nop

c001cb6a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001cb6a:	83 ec 18             	sub    esp,0x18
c001cb6d:	6a 08                	push   0x8
c001cb6f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb74:	50                   	push   eax
c001cb75:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb7a:	50                   	push   eax
c001cb7b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb80:	50                   	push   eax
c001cb81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cb85:	e8 a0 fe ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cb8a:	83 c4 2c             	add    esp,0x2c
c001cb8d:	0f b6 c4             	movzx  eax,ah
c001cb90:	c3                   	ret    
c001cb91:	90                   	nop

c001cb92 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001cb92:	83 ec 18             	sub    esp,0x18
c001cb95:	6a 08                	push   0x8
c001cb97:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cb9c:	50                   	push   eax
c001cb9d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cba2:	50                   	push   eax
c001cba3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cba8:	50                   	push   eax
c001cba9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbad:	e8 78 fe ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbb2:	83 c4 2c             	add    esp,0x2c
c001cbb5:	c3                   	ret    

c001cbb6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001cbb6:	83 ec 18             	sub    esp,0x18
c001cbb9:	6a 3c                	push   0x3c
c001cbbb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbc0:	50                   	push   eax
c001cbc1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbc6:	50                   	push   eax
c001cbc7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbcc:	50                   	push   eax
c001cbcd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbd1:	e8 54 fe ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbd6:	83 c4 2c             	add    esp,0x2c
c001cbd9:	c3                   	ret    

c001cbda <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001cbda:	83 ec 18             	sub    esp,0x18
c001cbdd:	6a 18                	push   0x18
c001cbdf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbe4:	50                   	push   eax
c001cbe5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbea:	50                   	push   eax
c001cbeb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001cbf0:	50                   	push   eax
c001cbf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cbf5:	e8 30 fe ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cbfa:	83 c4 2c             	add    esp,0x2c
c001cbfd:	0f b6 c4             	movzx  eax,ah
c001cc00:	c3                   	ret    
c001cc01:	90                   	nop

c001cc02 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001cc02:	55                   	push   ebp
c001cc03:	57                   	push   edi
c001cc04:	56                   	push   esi
c001cc05:	53                   	push   ebx
c001cc06:	83 ec 28             	sub    esp,0x28
c001cc09:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001cc0d:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001cc12:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001cc17:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001cc1c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001cc23:	8d 43 12             	lea    eax,[ebx+0x12]
c001cc26:	83 c3 10             	add    ebx,0x10
c001cc29:	0f b6 c0             	movzx  eax,al
c001cc2c:	0f b6 db             	movzx  ebx,bl
c001cc2f:	50                   	push   eax
c001cc30:	51                   	push   ecx
c001cc31:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001cc35:	57                   	push   edi
c001cc36:	55                   	push   ebp
c001cc37:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cc3b:	e8 ea fd ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc40:	83 c4 14             	add    esp,0x14
c001cc43:	89 c6                	mov    esi,eax
c001cc45:	53                   	push   ebx
c001cc46:	c1 e6 10             	shl    esi,0x10
c001cc49:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cc4d:	51                   	push   ecx
c001cc4e:	57                   	push   edi
c001cc4f:	55                   	push   ebp
c001cc50:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001cc54:	e8 d1 fd ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cc59:	83 c4 3c             	add    esp,0x3c
c001cc5c:	0f b7 c0             	movzx  eax,ax
c001cc5f:	5b                   	pop    ebx
c001cc60:	09 f0                	or     eax,esi
c001cc62:	5e                   	pop    esi
c001cc63:	5f                   	pop    edi
c001cc64:	5d                   	pop    ebp
c001cc65:	c3                   	ret    

c001cc66 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001cc66:	55                   	push   ebp
c001cc67:	57                   	push   edi
c001cc68:	56                   	push   esi
c001cc69:	53                   	push   ebx
c001cc6a:	83 ec 0c             	sub    esp,0xc
c001cc6d:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001cc71:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001cc75:	89 f5                	mov    ebp,esi
c001cc77:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001cc7d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc81:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cc85:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001cc89:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001cc8d:	83 f9 01             	cmp    ecx,0x1
c001cc90:	75 5d                	jne    c001ccef <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001cc92:	0f b6 c8             	movzx  ecx,al
c001cc95:	0f b6 d2             	movzx  edx,dl
c001cc98:	c1 e1 10             	shl    ecx,0x10
c001cc9b:	c1 e2 0b             	shl    edx,0xb
c001cc9e:	89 f0                	mov    eax,esi
c001cca0:	25 fc 00 00 00       	and    eax,0xfc
c001cca5:	09 c1                	or     ecx,eax
c001cca7:	89 e8                	mov    eax,ebp
c001cca9:	0f b6 c0             	movzx  eax,al
c001ccac:	c1 e0 08             	shl    eax,0x8
c001ccaf:	09 c1                	or     ecx,eax
c001ccb1:	09 d1                	or     ecx,edx
c001ccb3:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ccb8:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001ccbe:	89 c8                	mov    eax,ecx
c001ccc0:	ef                   	out    dx,eax
c001ccc1:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ccc6:	ed                   	in     eax,dx
c001ccc7:	0f b7 db             	movzx  ebx,bx
c001ccca:	83 e6 02             	and    esi,0x2
c001cccd:	74 0a                	je     c001ccd9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001cccf:	0f b7 d0             	movzx  edx,ax
c001ccd2:	c1 e3 10             	shl    ebx,0x10
c001ccd5:	09 d3                	or     ebx,edx
c001ccd7:	eb 05                	jmp    c001ccde <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001ccd9:	66 31 c0             	xor    ax,ax
c001ccdc:	09 c3                	or     ebx,eax
c001ccde:	ba f8 0c 00 00       	mov    edx,0xcf8
c001cce3:	89 c8                	mov    eax,ecx
c001cce5:	ef                   	out    dx,eax
c001cce6:	ba fc 0c 00 00       	mov    edx,0xcfc
c001cceb:	89 d8                	mov    eax,ebx
c001cced:	eb 41                	jmp    c001cd30 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001ccef:	83 f9 02             	cmp    ecx,0x2
c001ccf2:	75 45                	jne    c001cd39 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001ccf4:	83 ec 0c             	sub    esp,0xc
c001ccf7:	0f b6 d2             	movzx  edx,dl
c001ccfa:	89 f1                	mov    ecx,esi
c001ccfc:	0f b6 c0             	movzx  eax,al
c001ccff:	0f b6 f1             	movzx  esi,cl
c001cd02:	89 e9                	mov    ecx,ebp
c001cd04:	56                   	push   esi
c001cd05:	0f b6 c9             	movzx  ecx,cl
c001cd08:	51                   	push   ecx
c001cd09:	52                   	push   edx
c001cd0a:	50                   	push   eax
c001cd0b:	57                   	push   edi
c001cd0c:	e8 a3 fc ff ff       	call   c001c9b4 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001cd11:	89 c2                	mov    edx,eax
c001cd13:	ed                   	in     eax,dx
c001cd14:	83 c4 20             	add    esp,0x20
c001cd17:	0f b7 db             	movzx  ebx,bx
c001cd1a:	f6 c2 02             	test   dl,0x2
c001cd1d:	74 0c                	je     c001cd2b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001cd1f:	0f b7 c8             	movzx  ecx,ax
c001cd22:	89 d8                	mov    eax,ebx
c001cd24:	c1 e0 10             	shl    eax,0x10
c001cd27:	09 c8                	or     eax,ecx
c001cd29:	eb 05                	jmp    c001cd30 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001cd2b:	66 31 c0             	xor    ax,ax
c001cd2e:	09 d8                	or     eax,ebx
c001cd30:	ef                   	out    dx,eax
c001cd31:	83 c4 0c             	add    esp,0xc
c001cd34:	5b                   	pop    ebx
c001cd35:	5e                   	pop    esi
c001cd36:	5f                   	pop    edi
c001cd37:	5d                   	pop    ebp
c001cd38:	c3                   	ret    
c001cd39:	c7 44 24 20 6b 4b 02 c0 	mov    DWORD PTR [esp+0x20],0xc0024b6b
c001cd41:	83 c4 0c             	add    esp,0xc
c001cd44:	5b                   	pop    ebx
c001cd45:	5e                   	pop    esi
c001cd46:	5f                   	pop    edi
c001cd47:	5d                   	pop    ebp
c001cd48:	e9 fd 28 ff ff       	jmp    c000f64a <KePanic(char const*)>
c001cd4d:	90                   	nop

c001cd4e <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001cd4e:	55                   	push   ebp
c001cd4f:	57                   	push   edi
c001cd50:	56                   	push   esi
c001cd51:	53                   	push   ebx
c001cd52:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001cd58:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001cd5f:	80 3d ec e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0ec,0x0
c001cd66:	0f 85 bd 00 00 00    	jne    c001ce29 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001cd6c:	83 ec 0c             	sub    esp,0xc
c001cd6f:	68 14 01 00 00       	push   0x114
c001cd74:	e8 8a 25 ff ff       	call   c000f303 <malloc>
c001cd79:	83 c4 0c             	add    esp,0xc
c001cd7c:	89 c3                	mov    ebx,eax
c001cd7e:	ff 35 f8 d6 02 c0    	push   DWORD PTR ds:0xc002d6f8
c001cd84:	68 71 4b 02 c0       	push   0xc0024b71
c001cd89:	50                   	push   eax
c001cd8a:	e8 a3 b3 fe ff       	call   c0008132 <File::File(char const*, Process*)>
c001cd8f:	83 c4 10             	add    esp,0x10
c001cd92:	85 db                	test   ebx,ebx
c001cd94:	0f 84 67 02 00 00    	je     c001d001 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001cd9a:	56                   	push   esi
c001cd9b:	56                   	push   esi
c001cd9c:	6a 01                	push   0x1
c001cd9e:	53                   	push   ebx
c001cd9f:	e8 ac b3 fe ff       	call   c0008150 <File::open(FileOpenMode)>
c001cda4:	83 c4 10             	add    esp,0x10
c001cda7:	85 c0                	test   eax,eax
c001cda9:	0f 85 52 02 00 00    	jne    c001d001 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001cdaf:	52                   	push   edx
c001cdb0:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001cdb4:	50                   	push   eax
c001cdb5:	8d 44 24 48          	lea    eax,[esp+0x48]
c001cdb9:	50                   	push   eax
c001cdba:	53                   	push   ebx
c001cdbb:	e8 92 b6 fe ff       	call   c0008452 <File::stat(unsigned long long*, bool*)>
c001cdc0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001cdc4:	40                   	inc    eax
c001cdc5:	89 04 24             	mov    DWORD PTR [esp],eax
c001cdc8:	e8 36 25 ff ff       	call   c000f303 <malloc>
c001cdcd:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001cdd1:	a3 e8 e0 02 c0       	mov    ds:0xc002e0e8,eax
c001cdd6:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001cdda:	59                   	pop    ecx
c001cddb:	8b 13                	mov    edx,DWORD PTR [ebx]
c001cddd:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001cde1:	51                   	push   ecx
c001cde2:	50                   	push   eax
c001cde3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cde7:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001cdeb:	53                   	push   ebx
c001cdec:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001cdef:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001cdf3:	83 c4 20             	add    esp,0x20
c001cdf6:	89 c8                	mov    eax,ecx
c001cdf8:	99                   	cdq    
c001cdf9:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001cdfd:	0f 85 fe 01 00 00    	jne    c001d001 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001ce03:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001ce07:	0f 85 f4 01 00 00    	jne    c001d001 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001ce0d:	83 ec 0c             	sub    esp,0xc
c001ce10:	53                   	push   ebx
c001ce11:	e8 98 b3 fe ff       	call   c00081ae <File::close()>
c001ce16:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ce1a:	c6 05 ec e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0ec,0x1
c001ce21:	a3 e4 e0 02 c0       	mov    ds:0xc002e0e4,eax
c001ce26:	83 c4 10             	add    esp,0x10
c001ce29:	a1 e4 e0 02 c0       	mov    eax,ds:0xc002e0e4
c001ce2e:	8b 1d e8 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e0e8
c001ce34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce38:	31 f6                	xor    esi,esi
c001ce3a:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001ce42:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001ce49:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001ce4e:	31 c9                	xor    ecx,ecx
c001ce50:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001ce58:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001ce5d:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001ce65:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ce69:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001ce71:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ce75:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001ce79:	0f 8e 82 01 00 00    	jle    c001d001 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001ce7f:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001ce82:	d4 40                	aam    0x40
c001ce84:	d5 39                	aad    0x39
c001ce86:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ce8a:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001ce8e:	d4 40                	aam    0x40
c001ce90:	d5 39                	aad    0x39
c001ce92:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001ce96:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001ce9a:	d4 40                	aam    0x40
c001ce9c:	d5 39                	aad    0x39
c001ce9e:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001cea2:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001cea6:	d4 40                	aam    0x40
c001cea8:	d5 39                	aad    0x39
c001ceaa:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001ceae:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001ceb2:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001ceb6:	3c 56                	cmp    al,0x56
c001ceb8:	74 43                	je     c001cefd <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001ceba:	d4 40                	aam    0x40
c001cebc:	d5 39                	aad    0x39
c001cebe:	8d 48 d0             	lea    ecx,[eax-0x30]
c001cec1:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001cec5:	0f b6 c9             	movzx  ecx,cl
c001cec8:	c1 e1 04             	shl    ecx,0x4
c001cecb:	d4 40                	aam    0x40
c001cecd:	d5 39                	aad    0x39
c001cecf:	83 e8 30             	sub    eax,0x30
c001ced2:	0f b6 c0             	movzx  eax,al
c001ced5:	09 c1                	or     ecx,eax
c001ced7:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001cedb:	c1 e1 04             	shl    ecx,0x4
c001cede:	d4 40                	aam    0x40
c001cee0:	d5 39                	aad    0x39
c001cee2:	83 e8 30             	sub    eax,0x30
c001cee5:	0f b6 c0             	movzx  eax,al
c001cee8:	09 c1                	or     ecx,eax
c001ceea:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001ceee:	c1 e1 04             	shl    ecx,0x4
c001cef1:	d4 40                	aam    0x40
c001cef3:	d5 39                	aad    0x39
c001cef5:	83 e8 30             	sub    eax,0x30
c001cef8:	0f b6 c0             	movzx  eax,al
c001cefb:	09 c1                	or     ecx,eax
c001cefd:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001cf01:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001cf05:	3c 58                	cmp    al,0x58
c001cf07:	74 47                	je     c001cf50 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001cf09:	d4 40                	aam    0x40
c001cf0b:	d5 39                	aad    0x39
c001cf0d:	8d 50 d0             	lea    edx,[eax-0x30]
c001cf10:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001cf14:	0f b6 d2             	movzx  edx,dl
c001cf17:	c1 e2 04             	shl    edx,0x4
c001cf1a:	d4 40                	aam    0x40
c001cf1c:	d5 39                	aad    0x39
c001cf1e:	83 e8 30             	sub    eax,0x30
c001cf21:	0f b6 c0             	movzx  eax,al
c001cf24:	09 c2                	or     edx,eax
c001cf26:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001cf2a:	c1 e2 04             	shl    edx,0x4
c001cf2d:	d4 40                	aam    0x40
c001cf2f:	d5 39                	aad    0x39
c001cf31:	83 e8 30             	sub    eax,0x30
c001cf34:	0f b6 c0             	movzx  eax,al
c001cf37:	09 c2                	or     edx,eax
c001cf39:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001cf3d:	c1 e2 04             	shl    edx,0x4
c001cf40:	d4 40                	aam    0x40
c001cf42:	d5 39                	aad    0x39
c001cf44:	83 e8 30             	sub    eax,0x30
c001cf47:	0f b6 c0             	movzx  eax,al
c001cf4a:	09 c2                	or     edx,eax
c001cf4c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001cf50:	83 c6 10             	add    esi,0x10
c001cf53:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001cf57:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001cf5b:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001cf5f:	83 fa 0a             	cmp    edx,0xa
c001cf62:	74 0b                	je     c001cf6f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001cf64:	47                   	inc    edi
c001cf65:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001cf69:	75 19                	jne    c001cf84 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001cf6b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001cf6f:	31 c0                	xor    eax,eax
c001cf71:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001cf76:	0f 94 c0             	sete   al
c001cf79:	01 c6                	add    esi,eax
c001cf7b:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001cf80:	75 0b                	jne    c001cf8d <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001cf82:	eb 14                	jmp    c001cf98 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001cf84:	46                   	inc    esi
c001cf85:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001cf88:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001cf8b:	eb ca                	jmp    c001cf57 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001cf8d:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001cf92:	0f 85 dd fe ff ff    	jne    c001ce75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001cf98:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001cf9d:	74 10                	je     c001cfaf <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001cf9f:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001cfa4:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001cfa9:	0f 85 c6 fe ff ff    	jne    c001ce75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001cfaf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cfb3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001cfb7:	83 e8 30             	sub    eax,0x30
c001cfba:	83 ef 30             	sub    edi,0x30
c001cfbd:	c1 e0 04             	shl    eax,0x4
c001cfc0:	09 f8                	or     eax,edi
c001cfc2:	0f b6 c0             	movzx  eax,al
c001cfc5:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001cfc9:	0f 85 a6 fe ff ff    	jne    c001ce75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001cfcf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfd3:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001cfd7:	83 e8 30             	sub    eax,0x30
c001cfda:	83 ef 30             	sub    edi,0x30
c001cfdd:	c1 e0 04             	shl    eax,0x4
c001cfe0:	09 f8                	or     eax,edi
c001cfe2:	0f b6 c0             	movzx  eax,al
c001cfe5:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001cfe9:	0f 85 86 fe ff ff    	jne    c001ce75 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001cfef:	50                   	push   eax
c001cff0:	50                   	push   eax
c001cff1:	8d 44 24 48          	lea    eax,[esp+0x48]
c001cff5:	50                   	push   eax
c001cff6:	55                   	push   ebp
c001cff7:	e8 44 36 fe ff       	call   c0000640 <strcpy>
c001cffc:	83 c4 10             	add    esp,0x10
c001cfff:	eb 06                	jmp    c001d007 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001d001:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001d005:	31 ed                	xor    ebp,ebp
c001d007:	81 c4 4c 01 00 00    	add    esp,0x14c
c001d00d:	89 e8                	mov    eax,ebp
c001d00f:	5b                   	pop    ebx
c001d010:	5e                   	pop    esi
c001d011:	5f                   	pop    edi
c001d012:	5d                   	pop    ebp
c001d013:	c3                   	ret    

c001d014 <PCI::checkBus(unsigned char)>:
c001d014:	56                   	push   esi
c001d015:	53                   	push   ebx
c001d016:	31 db                	xor    ebx,ebx
c001d018:	51                   	push   ecx
c001d019:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001d01e:	52                   	push   edx
c001d01f:	53                   	push   ebx
c001d020:	43                   	inc    ebx
c001d021:	56                   	push   esi
c001d022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d026:	e8 6f 03 00 00       	call   c001d39a <PCI::checkDevice(unsigned char, unsigned char)>
c001d02b:	83 c4 10             	add    esp,0x10
c001d02e:	83 fb 20             	cmp    ebx,0x20
c001d031:	75 eb                	jne    c001d01e <PCI::checkBus(unsigned char)+0xa>
c001d033:	58                   	pop    eax
c001d034:	5b                   	pop    ebx
c001d035:	5e                   	pop    esi
c001d036:	c3                   	ret    
c001d037:	90                   	nop

c001d038 <PCI::foundDevice(PCIDeviceInfo)>:
c001d038:	55                   	push   ebp
c001d039:	57                   	push   edi
c001d03a:	56                   	push   esi
c001d03b:	53                   	push   ebx
c001d03c:	81 ec 8c 00 00 00    	sub    esp,0x8c
c001d042:	0f b7 84 24 a6 00 00 00 	movzx  eax,WORD PTR [esp+0xa6]
c001d04a:	8b ac 24 a0 00 00 00 	mov    ebp,DWORD PTR [esp+0xa0]
c001d051:	3d ff ff 00 00       	cmp    eax,0xffff
c001d056:	0f 84 b7 01 00 00    	je     c001d213 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001d05c:	0f b7 9c 24 a4 00 00 00 	movzx  ebx,WORD PTR [esp+0xa4]
c001d064:	66 81 fb 06 04       	cmp    bx,0x406
c001d069:	75 32                	jne    c001d09d <PCI::foundDevice(PCIDeviceInfo)+0x65>
c001d06b:	0f b6 84 24 aa 00 00 00 	movzx  eax,BYTE PTR [esp+0xaa]
c001d073:	50                   	push   eax
c001d074:	0f b6 84 24 ad 00 00 00 	movzx  eax,BYTE PTR [esp+0xad]
c001d07c:	50                   	push   eax
c001d07d:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001d085:	50                   	push   eax
c001d086:	55                   	push   ebp
c001d087:	e8 4e fb ff ff       	call   c001cbda <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001d08c:	59                   	pop    ecx
c001d08d:	0f b6 c0             	movzx  eax,al
c001d090:	5b                   	pop    ebx
c001d091:	50                   	push   eax
c001d092:	55                   	push   ebp
c001d093:	e8 7c ff ff ff       	call   c001d014 <PCI::checkBus(unsigned char)>
c001d098:	e9 16 01 00 00       	jmp    c001d1b3 <PCI::foundDevice(PCIDeviceInfo)+0x17b>
c001d09d:	8b b4 24 ac 00 00 00 	mov    esi,DWORD PTR [esp+0xac]
c001d0a4:	8b 85 cc 00 00 00    	mov    eax,DWORD PTR [ebp+0xcc]
c001d0aa:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001d0ae:	8b bc 24 a4 00 00 00 	mov    edi,DWORD PTR [esp+0xa4]
c001d0b5:	0f b6 b4 24 c4 00 00 00 	movzx  esi,BYTE PTR [esp+0xc4]
c001d0bd:	85 c0                	test   eax,eax
c001d0bf:	74 36                	je     c001d0f7 <PCI::foundDevice(PCIDeviceInfo)+0xbf>
c001d0c1:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001d0c4:	85 d2                	test   edx,edx
c001d0c6:	74 2b                	je     c001d0f3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001d0c8:	8b 8a 18 01 00 00    	mov    ecx,DWORD PTR [edx+0x118]
c001d0ce:	31 f9                	xor    ecx,edi
c001d0d0:	81 e1 ff 00 ff ff    	and    ecx,0xffff00ff
c001d0d6:	75 1b                	jne    c001d0f3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001d0d8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d0dc:	39 8a 20 01 00 00    	cmp    DWORD PTR [edx+0x120],ecx
c001d0e2:	75 0f                	jne    c001d0f3 <PCI::foundDevice(PCIDeviceInfo)+0xbb>
c001d0e4:	0f b6 92 38 01 00 00 	movzx  edx,BYTE PTR [edx+0x138]
c001d0eb:	39 f2                	cmp    edx,esi
c001d0ed:	0f 84 20 01 00 00    	je     c001d213 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001d0f3:	8b 00                	mov    eax,DWORD PTR [eax]
c001d0f5:	eb c6                	jmp    c001d0bd <PCI::foundDevice(PCIDeviceInfo)+0x85>
c001d0f7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001d0fb:	be a4 4b 02 c0       	mov    esi,0xc0024ba4
c001d100:	b9 07 00 00 00       	mov    ecx,0x7
c001d105:	fc                   	cld    
c001d106:	31 d2                	xor    edx,edx
c001d108:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d10a:	66 c7 44 24 35 30 30 	mov    WORD PTR [esp+0x35],0x3030
c001d111:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001d115:	b9 12 00 00 00       	mov    ecx,0x12
c001d11a:	83 ec 0c             	sub    esp,0xc
c001d11d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d11f:	0f b6 84 24 b0 00 00 00 	movzx  eax,BYTE PTR [esp+0xb0]
c001d127:	b9 0a 00 00 00       	mov    ecx,0xa
c001d12c:	f7 f1                	div    ecx
c001d12e:	83 c0 30             	add    eax,0x30
c001d131:	83 c2 30             	add    edx,0x30
c001d134:	88 44 24 39          	mov    BYTE PTR [esp+0x39],al
c001d138:	88 54 24 3a          	mov    BYTE PTR [esp+0x3a],dl
c001d13c:	0f b6 84 24 b1 00 00 00 	movzx  eax,BYTE PTR [esp+0xb1]
c001d144:	31 d2                	xor    edx,edx
c001d146:	f7 f1                	div    ecx
c001d148:	83 c0 30             	add    eax,0x30
c001d14b:	83 c2 30             	add    edx,0x30
c001d14e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001d152:	88 54 24 3e          	mov    BYTE PTR [esp+0x3e],dl
c001d156:	8d 44 24 28          	lea    eax,[esp+0x28]
c001d15a:	50                   	push   eax
c001d15b:	e8 6b f7 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001d160:	83 c4 10             	add    esp,0x10
c001d163:	81 fb 01 06 00 00    	cmp    ebx,0x601
c001d169:	8d b4 24 a4 00 00 00 	lea    esi,[esp+0xa4]
c001d170:	75 46                	jne    c001d1b8 <PCI::foundDevice(PCIDeviceInfo)+0x180>
c001d172:	83 ec 0c             	sub    esp,0xc
c001d175:	68 64 01 00 00       	push   0x164
c001d17a:	e8 84 21 ff ff       	call   c000f303 <malloc>
c001d17f:	89 c3                	mov    ebx,eax
c001d181:	89 04 24             	mov    DWORD PTR [esp],eax
c001d184:	e8 39 11 00 00       	call   c001e2c2 <SATABus::SATABus()>
c001d189:	58                   	pop    eax
c001d18a:	5a                   	pop    edx
c001d18b:	53                   	push   ebx
c001d18c:	55                   	push   ebp
c001d18d:	e8 00 bf fe ff       	call   c0009092 <Device::addChild(Device*)>
c001d192:	83 ec 1c             	sub    esp,0x1c
c001d195:	b9 09 00 00 00       	mov    ecx,0x9
c001d19a:	89 e7                	mov    edi,esp
c001d19c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d19e:	53                   	push   ebx
c001d19f:	e8 34 be fe ff       	call   c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>
c001d1a4:	83 c4 30             	add    esp,0x30
c001d1a7:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d1a9:	6a 00                	push   0x0
c001d1ab:	6a 00                	push   0x0
c001d1ad:	6a 00                	push   0x0
c001d1af:	53                   	push   ebx
c001d1b0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d1b3:	83 c4 10             	add    esp,0x10
c001d1b6:	eb 5b                	jmp    c001d213 <PCI::foundDevice(PCIDeviceInfo)+0x1db>
c001d1b8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d1be:	75 19                	jne    c001d1d9 <PCI::foundDevice(PCIDeviceInfo)+0x1a1>
c001d1c0:	83 ec 0c             	sub    esp,0xc
c001d1c3:	68 70 02 00 00       	push   0x270
c001d1c8:	e8 36 21 ff ff       	call   c000f303 <malloc>
c001d1cd:	89 c3                	mov    ebx,eax
c001d1cf:	89 04 24             	mov    DWORD PTR [esp],eax
c001d1d2:	e8 93 02 00 00       	call   c001d46a <IDE::IDE()>
c001d1d7:	eb b0                	jmp    c001d189 <PCI::foundDevice(PCIDeviceInfo)+0x151>
c001d1d9:	83 ec 0c             	sub    esp,0xc
c001d1dc:	68 58 01 00 00       	push   0x158
c001d1e1:	e8 1d 21 ff ff       	call   c000f303 <malloc>
c001d1e6:	89 c3                	mov    ebx,eax
c001d1e8:	58                   	pop    eax
c001d1e9:	5a                   	pop    edx
c001d1ea:	68 8a 4b 02 c0       	push   0xc0024b8a
c001d1ef:	53                   	push   ebx
c001d1f0:	e8 51 c1 fe ff       	call   c0009346 <DriverlessDevice::DriverlessDevice(char const*)>
c001d1f5:	59                   	pop    ecx
c001d1f6:	5f                   	pop    edi
c001d1f7:	53                   	push   ebx
c001d1f8:	55                   	push   ebp
c001d1f9:	e8 94 be fe ff       	call   c0009092 <Device::addChild(Device*)>
c001d1fe:	83 ec 1c             	sub    esp,0x1c
c001d201:	b9 09 00 00 00       	mov    ecx,0x9
c001d206:	89 e7                	mov    edi,esp
c001d208:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d20a:	53                   	push   ebx
c001d20b:	e8 c8 bd fe ff       	call   c0008fd8 <Device::preOpenPCI(PCIDeviceInfo)>
c001d210:	83 c4 30             	add    esp,0x30
c001d213:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d219:	5b                   	pop    ebx
c001d21a:	5e                   	pop    esi
c001d21b:	5f                   	pop    edi
c001d21c:	5d                   	pop    ebp
c001d21d:	c3                   	ret    

c001d21e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001d21e:	55                   	push   ebp
c001d21f:	57                   	push   edi
c001d220:	56                   	push   esi
c001d221:	53                   	push   ebx
c001d222:	83 ec 68             	sub    esp,0x68
c001d225:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001d229:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001d230:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d234:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001d23b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001d240:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d244:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001d24b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001d250:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d254:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001d259:	6a 0c                	push   0xc
c001d25b:	57                   	push   edi
c001d25c:	53                   	push   ebx
c001d25d:	56                   	push   esi
c001d25e:	55                   	push   ebp
c001d25f:	e8 c6 f7 ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d264:	83 c4 20             	add    esp,0x20
c001d267:	57                   	push   edi
c001d268:	53                   	push   ebx
c001d269:	56                   	push   esi
c001d26a:	55                   	push   ebp
c001d26b:	e8 b0 f8 ff ff       	call   c001cb20 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001d270:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001d275:	57                   	push   edi
c001d276:	53                   	push   ebx
c001d277:	56                   	push   esi
c001d278:	55                   	push   ebp
c001d279:	e8 38 f9 ff ff       	call   c001cbb6 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001d27e:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d282:	83 c4 14             	add    esp,0x14
c001d285:	6a 3c                	push   0x3c
c001d287:	57                   	push   edi
c001d288:	53                   	push   ebx
c001d289:	56                   	push   esi
c001d28a:	55                   	push   ebp
c001d28b:	e8 9a f7 ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d290:	0f b6 c4             	movzx  eax,ah
c001d293:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d297:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001d29b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001d29f:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001d2a4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001d2aa:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001d2b0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d2b4:	83 c4 20             	add    esp,0x20
c001d2b7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001d2bc:	74 30                	je     c001d2ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001d2be:	31 c0                	xor    eax,eax
c001d2c0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001d2c4:	7e 28                	jle    c001d2ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001d2c6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001d2ce:	39 cb                	cmp    ebx,ecx
c001d2d0:	75 19                	jne    c001d2eb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001d2d2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001d2da:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001d2de:	75 0b                	jne    c001d2eb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001d2e0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001d2e7:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001d2eb:	40                   	inc    eax
c001d2ec:	eb d2                	jmp    c001d2c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001d2ee:	31 d2                	xor    edx,edx
c001d2f0:	83 ec 0c             	sub    esp,0xc
c001d2f3:	57                   	push   edi
c001d2f4:	53                   	push   ebx
c001d2f5:	56                   	push   esi
c001d2f6:	52                   	push   edx
c001d2f7:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001d2fb:	55                   	push   ebp
c001d2fc:	e8 01 f9 ff ff       	call   c001cc02 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d301:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001d305:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001d309:	42                   	inc    edx
c001d30a:	83 c4 20             	add    esp,0x20
c001d30d:	83 fa 06             	cmp    edx,0x6
c001d310:	75 de                	jne    c001d2f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001d312:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d316:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d31a:	c1 e2 08             	shl    edx,0x8
c001d31d:	83 ec 0c             	sub    esp,0xc
c001d320:	0f b6 c4             	movzx  eax,ah
c001d323:	09 d0                	or     eax,edx
c001d325:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001d32a:	6a 02                	push   0x2
c001d32c:	57                   	push   edi
c001d32d:	53                   	push   ebx
c001d32e:	56                   	push   esi
c001d32f:	55                   	push   ebp
c001d330:	e8 f5 f6 ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d335:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001d33a:	83 c4 20             	add    esp,0x20
c001d33d:	57                   	push   edi
c001d33e:	53                   	push   ebx
c001d33f:	56                   	push   esi
c001d340:	55                   	push   ebp
c001d341:	e8 24 f8 ff ff       	call   c001cb6a <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001d346:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001d34a:	57                   	push   edi
c001d34b:	53                   	push   ebx
c001d34c:	56                   	push   esi
c001d34d:	55                   	push   ebp
c001d34e:	e8 81 f7 ff ff       	call   c001cad4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d353:	b9 09 00 00 00       	mov    ecx,0x9
c001d358:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001d35d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001d361:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001d365:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001d369:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001d36d:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001d371:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001d375:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001d379:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001d37d:	83 ec 0c             	sub    esp,0xc
c001d380:	fc                   	cld    
c001d381:	89 e7                	mov    edi,esp
c001d383:	8d 74 24 58          	lea    esi,[esp+0x58]
c001d387:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001d389:	55                   	push   ebp
c001d38a:	e8 a9 fc ff ff       	call   c001d038 <PCI::foundDevice(PCIDeviceInfo)>
c001d38f:	81 c4 8c 00 00 00    	add    esp,0x8c
c001d395:	5b                   	pop    ebx
c001d396:	5e                   	pop    esi
c001d397:	5f                   	pop    edi
c001d398:	5d                   	pop    ebp
c001d399:	c3                   	ret    

c001d39a <PCI::checkDevice(unsigned char, unsigned char)>:
c001d39a:	55                   	push   ebp
c001d39b:	57                   	push   edi
c001d39c:	56                   	push   esi
c001d39d:	53                   	push   ebx
c001d39e:	83 ec 0c             	sub    esp,0xc
c001d3a1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001d3a5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001d3aa:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001d3af:	6a 00                	push   0x0
c001d3b1:	56                   	push   esi
c001d3b2:	57                   	push   edi
c001d3b3:	55                   	push   ebp
c001d3b4:	e8 1b f7 ff ff       	call   c001cad4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d3b9:	6a 00                	push   0x0
c001d3bb:	56                   	push   esi
c001d3bc:	57                   	push   edi
c001d3bd:	55                   	push   ebp
c001d3be:	e8 5b fe ff ff       	call   c001d21e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d3c3:	83 c4 20             	add    esp,0x20
c001d3c6:	6a 00                	push   0x0
c001d3c8:	56                   	push   esi
c001d3c9:	57                   	push   edi
c001d3ca:	55                   	push   ebp
c001d3cb:	e8 28 f7 ff ff       	call   c001caf8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d3d0:	83 c4 10             	add    esp,0x10
c001d3d3:	a8 80                	test   al,0x80
c001d3d5:	74 2d                	je     c001d404 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001d3d7:	bb 01 00 00 00       	mov    ebx,0x1
c001d3dc:	53                   	push   ebx
c001d3dd:	56                   	push   esi
c001d3de:	57                   	push   edi
c001d3df:	55                   	push   ebp
c001d3e0:	e8 ef f6 ff ff       	call   c001cad4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d3e5:	83 c4 10             	add    esp,0x10
c001d3e8:	0f b7 c0             	movzx  eax,ax
c001d3eb:	3d ff ff 00 00       	cmp    eax,0xffff
c001d3f0:	74 0c                	je     c001d3fe <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001d3f2:	53                   	push   ebx
c001d3f3:	56                   	push   esi
c001d3f4:	57                   	push   edi
c001d3f5:	55                   	push   ebp
c001d3f6:	e8 23 fe ff ff       	call   c001d21e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001d3fb:	83 c4 10             	add    esp,0x10
c001d3fe:	43                   	inc    ebx
c001d3ff:	83 fb 08             	cmp    ebx,0x8
c001d402:	75 d8                	jne    c001d3dc <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001d404:	83 c4 0c             	add    esp,0xc
c001d407:	5b                   	pop    ebx
c001d408:	5e                   	pop    esi
c001d409:	5f                   	pop    edi
c001d40a:	5d                   	pop    ebp
c001d40b:	c3                   	ret    

c001d40c <PCI::detect()>:
c001d40c:	56                   	push   esi
c001d40d:	53                   	push   ebx
c001d40e:	53                   	push   ebx
c001d40f:	31 db                	xor    ebx,ebx
c001d411:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d415:	6a 00                	push   0x0
c001d417:	6a 00                	push   0x0
c001d419:	6a 00                	push   0x0
c001d41b:	56                   	push   esi
c001d41c:	e8 d7 f6 ff ff       	call   c001caf8 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001d421:	83 c4 10             	add    esp,0x10
c001d424:	a8 80                	test   al,0x80
c001d426:	75 21                	jne    c001d449 <PCI::detect()+0x3d>
c001d428:	51                   	push   ecx
c001d429:	51                   	push   ecx
c001d42a:	6a 00                	push   0x0
c001d42c:	56                   	push   esi
c001d42d:	e8 e2 fb ff ff       	call   c001d014 <PCI::checkBus(unsigned char)>
c001d432:	83 c4 10             	add    esp,0x10
c001d435:	eb 2a                	jmp    c001d461 <PCI::detect()+0x55>
c001d437:	52                   	push   edx
c001d438:	52                   	push   edx
c001d439:	53                   	push   ebx
c001d43a:	43                   	inc    ebx
c001d43b:	56                   	push   esi
c001d43c:	e8 d3 fb ff ff       	call   c001d014 <PCI::checkBus(unsigned char)>
c001d441:	83 c4 10             	add    esp,0x10
c001d444:	83 fb 08             	cmp    ebx,0x8
c001d447:	74 18                	je     c001d461 <PCI::detect()+0x55>
c001d449:	53                   	push   ebx
c001d44a:	6a 00                	push   0x0
c001d44c:	6a 00                	push   0x0
c001d44e:	56                   	push   esi
c001d44f:	e8 80 f6 ff ff       	call   c001cad4 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001d454:	83 c4 10             	add    esp,0x10
c001d457:	0f b7 c0             	movzx  eax,ax
c001d45a:	3d ff ff 00 00       	cmp    eax,0xffff
c001d45f:	74 d6                	je     c001d437 <PCI::detect()+0x2b>
c001d461:	58                   	pop    eax
c001d462:	5b                   	pop    ebx
c001d463:	5e                   	pop    esi
c001d464:	c3                   	ret    
c001d465:	90                   	nop

c001d466 <IDE::close(int, int, void*)>:
c001d466:	83 c8 ff             	or     eax,0xffffffff
c001d469:	c3                   	ret    

c001d46a <IDE::IDE()>:
c001d46a:	83 ec 0c             	sub    esp,0xc
c001d46d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d471:	83 ec 08             	sub    esp,0x8
c001d474:	68 34 4c 02 c0       	push   0xc0024c34
c001d479:	50                   	push   eax
c001d47a:	e8 6d bf fe ff       	call   c00093ec <HardDiskController::HardDiskController(char const*)>
c001d47f:	83 c4 10             	add    esp,0x10
c001d482:	ba 60 4d 02 c0       	mov    edx,0xc0024d60
c001d487:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d48b:	89 10                	mov    DWORD PTR [eax],edx
c001d48d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d491:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001d498:	90                   	nop
c001d499:	83 c4 0c             	add    esp,0xc
c001d49c:	c3                   	ret    
c001d49d:	90                   	nop

c001d49e <IDE::prepareInterrupt(unsigned char)>:
c001d49e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001d4a3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d4a7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001d4af:	c3                   	ret    

c001d4b0 <selectDrive(unsigned char, unsigned char)>:
c001d4b0:	c3                   	ret    
c001d4b1:	90                   	nop

c001d4b2 <IDE::getBase(unsigned char)>:
c001d4b2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001d4b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d4bb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001d4c3:	c3                   	ret    

c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001d4c4:	55                   	push   ebp
c001d4c5:	57                   	push   edi
c001d4c6:	56                   	push   esi
c001d4c7:	53                   	push   ebx
c001d4c8:	83 ec 1c             	sub    esp,0x1c
c001d4cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d4cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d4d3:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001d4d6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001d4da:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001d4de:	80 f9 03             	cmp    cl,0x3
c001d4e1:	77 4f                	ja     c001d532 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001d4e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d4e7:	0f b6 fa             	movzx  edi,dl
c001d4ea:	0f b6 db             	movzx  ebx,bl
c001d4ed:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001d4f0:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001d4f5:	80 ca 80             	or     dl,0x80
c001d4f8:	52                   	push   edx
c001d4f9:	6a 0c                	push   0xc
c001d4fb:	57                   	push   edi
c001d4fc:	56                   	push   esi
c001d4fd:	e8 c2 ff ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d502:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001d507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d50b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001d50f:	ee                   	out    dx,al
c001d510:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d515:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001d519:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001d51d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001d521:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001d529:	83 c4 2c             	add    esp,0x2c
c001d52c:	5b                   	pop    ebx
c001d52d:	5e                   	pop    esi
c001d52e:	5f                   	pop    edi
c001d52f:	5d                   	pop    ebp
c001d530:	eb 92                	jmp    c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d532:	0f b6 cb             	movzx  ecx,bl
c001d535:	83 f9 07             	cmp    ecx,0x7
c001d538:	77 12                	ja     c001d54c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001d53a:	0f b6 d2             	movzx  edx,dl
c001d53d:	0f b6 db             	movzx  ebx,bl
c001d540:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001d548:	01 da                	add    edx,ebx
c001d54a:	eb 2f                	jmp    c001d57b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d54c:	83 f9 0d             	cmp    ecx,0xd
c001d54f:	77 13                	ja     c001d564 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001d551:	0f b6 d2             	movzx  edx,dl
c001d554:	0f b6 db             	movzx  ebx,bl
c001d557:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001d55e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001d562:	eb 17                	jmp    c001d57b <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001d564:	83 f9 15             	cmp    ecx,0x15
c001d567:	77 13                	ja     c001d57c <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001d569:	0f b6 d2             	movzx  edx,dl
c001d56c:	0f b6 db             	movzx  ebx,bl
c001d56f:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001d577:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001d57b:	ee                   	out    dx,al
c001d57c:	83 c4 1c             	add    esp,0x1c
c001d57f:	5b                   	pop    ebx
c001d580:	5e                   	pop    esi
c001d581:	5f                   	pop    edi
c001d582:	5d                   	pop    ebp
c001d583:	c3                   	ret    

c001d584 <IDE::read(unsigned char, unsigned char)>:
c001d584:	55                   	push   ebp
c001d585:	57                   	push   edi
c001d586:	56                   	push   esi
c001d587:	53                   	push   ebx
c001d588:	83 ec 1c             	sub    esp,0x1c
c001d58b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001d58f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001d593:	8d 43 f8             	lea    eax,[ebx-0x8]
c001d596:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001d59a:	3c 03                	cmp    al,0x3
c001d59c:	77 40                	ja     c001d5de <IDE::read(unsigned char, unsigned char)+0x5a>
c001d59e:	0f b6 f9             	movzx  edi,cl
c001d5a1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001d5a4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001d5a9:	0c 80                	or     al,0x80
c001d5ab:	50                   	push   eax
c001d5ac:	6a 0c                	push   0xc
c001d5ae:	57                   	push   edi
c001d5af:	56                   	push   esi
c001d5b0:	e8 0f ff ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5b5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001d5ba:	0f b6 d3             	movzx  edx,bl
c001d5bd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001d5c1:	ec                   	in     al,dx
c001d5c2:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001d5c6:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001d5cb:	52                   	push   edx
c001d5cc:	6a 0c                	push   0xc
c001d5ce:	57                   	push   edi
c001d5cf:	56                   	push   esi
c001d5d0:	e8 ef fe ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d5d5:	83 c4 20             	add    esp,0x20
c001d5d8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d5dc:	eb 4c                	jmp    c001d62a <IDE::read(unsigned char, unsigned char)+0xa6>
c001d5de:	0f b6 d3             	movzx  edx,bl
c001d5e1:	83 fa 07             	cmp    edx,0x7
c001d5e4:	77 12                	ja     c001d5f8 <IDE::read(unsigned char, unsigned char)+0x74>
c001d5e6:	0f b6 c9             	movzx  ecx,cl
c001d5e9:	0f b6 d3             	movzx  edx,bl
c001d5ec:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001d5f4:	01 c2                	add    edx,eax
c001d5f6:	eb 31                	jmp    c001d629 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d5f8:	83 fa 0d             	cmp    edx,0xd
c001d5fb:	77 13                	ja     c001d610 <IDE::read(unsigned char, unsigned char)+0x8c>
c001d5fd:	0f b6 c9             	movzx  ecx,cl
c001d600:	0f b6 d3             	movzx  edx,bl
c001d603:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001d60a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001d60e:	eb 19                	jmp    c001d629 <IDE::read(unsigned char, unsigned char)+0xa5>
c001d610:	31 c0                	xor    eax,eax
c001d612:	83 fa 15             	cmp    edx,0x15
c001d615:	77 13                	ja     c001d62a <IDE::read(unsigned char, unsigned char)+0xa6>
c001d617:	0f b6 c9             	movzx  ecx,cl
c001d61a:	0f b6 d3             	movzx  edx,bl
c001d61d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001d625:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001d629:	ec                   	in     al,dx
c001d62a:	83 c4 1c             	add    esp,0x1c
c001d62d:	5b                   	pop    ebx
c001d62e:	5e                   	pop    esi
c001d62f:	5f                   	pop    edi
c001d630:	5d                   	pop    ebp
c001d631:	c3                   	ret    

c001d632 <IDE::waitInterrupt(unsigned char)>:
c001d632:	55                   	push   ebp
c001d633:	57                   	push   edi
c001d634:	56                   	push   esi
c001d635:	53                   	push   ebx
c001d636:	31 db                	xor    ebx,ebx
c001d638:	83 ec 0c             	sub    esp,0xc
c001d63b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001d63f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001d644:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001d64c:	89 e8                	mov    eax,ebp
c001d64e:	84 c0                	test   al,al
c001d650:	75 30                	jne    c001d682 <IDE::waitInterrupt(unsigned char)+0x50>
c001d652:	50                   	push   eax
c001d653:	6a 0c                	push   0xc
c001d655:	56                   	push   esi
c001d656:	57                   	push   edi
c001d657:	e8 28 ff ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001d65c:	83 c4 10             	add    esp,0x10
c001d65f:	a8 01                	test   al,0x1
c001d661:	75 27                	jne    c001d68a <IDE::waitInterrupt(unsigned char)+0x58>
c001d663:	f6 c3 04             	test   bl,0x4
c001d666:	75 12                	jne    c001d67a <IDE::waitInterrupt(unsigned char)+0x48>
c001d668:	83 fb 32             	cmp    ebx,0x32
c001d66b:	7e 0d                	jle    c001d67a <IDE::waitInterrupt(unsigned char)+0x48>
c001d66d:	83 ec 0c             	sub    esp,0xc
c001d670:	6a 64                	push   0x64
c001d672:	e8 f5 8d ff ff       	call   c001646c <milliTenthSleep(unsigned int)>
c001d677:	83 c4 10             	add    esp,0x10
c001d67a:	83 fb 3c             	cmp    ebx,0x3c
c001d67d:	74 0b                	je     c001d68a <IDE::waitInterrupt(unsigned char)+0x58>
c001d67f:	43                   	inc    ebx
c001d680:	eb c2                	jmp    c001d644 <IDE::waitInterrupt(unsigned char)+0x12>
c001d682:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001d68a:	83 c4 0c             	add    esp,0xc
c001d68d:	89 e8                	mov    eax,ebp
c001d68f:	5b                   	pop    ebx
c001d690:	5e                   	pop    esi
c001d691:	5f                   	pop    edi
c001d692:	5d                   	pop    ebp
c001d693:	c3                   	ret    

c001d694 <ideChannel0IRQHandler(regs*, void*)>:
c001d694:	83 ec 10             	sub    esp,0x10
c001d697:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d69b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001d6a2:	6a 07                	push   0x7
c001d6a4:	6a 00                	push   0x0
c001d6a6:	50                   	push   eax
c001d6a7:	e8 d8 fe ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001d6ac:	83 c4 1c             	add    esp,0x1c
c001d6af:	c3                   	ret    

c001d6b0 <ideChannel1IRQHandler(regs*, void*)>:
c001d6b0:	83 ec 10             	sub    esp,0x10
c001d6b3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d6b7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001d6be:	6a 07                	push   0x7
c001d6c0:	6a 01                	push   0x1
c001d6c2:	50                   	push   eax
c001d6c3:	e8 bc fe ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001d6c8:	83 c4 1c             	add    esp,0x1c
c001d6cb:	c3                   	ret    

c001d6cc <IDE::enableIRQs(unsigned char, bool)>:
c001d6cc:	57                   	push   edi
c001d6cd:	b8 02 00 00 00       	mov    eax,0x2
c001d6d2:	56                   	push   esi
c001d6d3:	53                   	push   ebx
c001d6d4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d6d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d6dc:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001d6e1:	74 02                	je     c001d6e5 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001d6e3:	31 c0                	xor    eax,eax
c001d6e5:	0f b6 db             	movzx  ebx,bl
c001d6e8:	bf 04 00 00 00       	mov    edi,0x4
c001d6ed:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001d6f4:	50                   	push   eax
c001d6f5:	6a 0c                	push   0xc
c001d6f7:	53                   	push   ebx
c001d6f8:	56                   	push   esi
c001d6f9:	e8 c6 fd ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d6fe:	83 c4 10             	add    esp,0x10
c001d701:	50                   	push   eax
c001d702:	6a 0c                	push   0xc
c001d704:	53                   	push   ebx
c001d705:	56                   	push   esi
c001d706:	e8 79 fe ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001d70b:	83 c4 10             	add    esp,0x10
c001d70e:	4f                   	dec    edi
c001d70f:	75 f0                	jne    c001d701 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001d711:	5b                   	pop    ebx
c001d712:	5e                   	pop    esi
c001d713:	5f                   	pop    edi
c001d714:	c3                   	ret    
c001d715:	90                   	nop

c001d716 <IDE::open(int, int, void*)>:
c001d716:	57                   	push   edi
c001d717:	56                   	push   esi
c001d718:	53                   	push   ebx
c001d719:	83 ec 10             	sub    esp,0x10
c001d71c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d720:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001d729:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001d732:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001d739:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001d740:	0f 85 84 02 00 00    	jne    c001d9ca <IDE::open(int, int, void*)+0x2b4>
c001d746:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001d74c:	a8 70                	test   al,0x70
c001d74e:	75 44                	jne    c001d794 <IDE::open(int, int, void*)+0x7e>
c001d750:	ba 20 84 00 00       	mov    edx,0x8420
c001d755:	0f a3 c2             	bt     edx,eax
c001d758:	73 3a                	jae    c001d794 <IDE::open(int, int, void*)+0x7e>
c001d75a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001d760:	83 ec 0c             	sub    esp,0xc
c001d763:	83 e0 fc             	and    eax,0xfffffffc
c001d766:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d76d:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001d773:	83 e0 fc             	and    eax,0xfffffffc
c001d776:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d77d:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001d783:	83 e0 fc             	and    eax,0xfffffffc
c001d786:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d78d:	68 75 24 02 c0       	push   0xc0022475
c001d792:	eb 60                	jmp    c001d7f4 <IDE::open(int, int, void*)+0xde>
c001d794:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001d79e:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001d7a8:	be 64 00 00 00       	mov    esi,0x64
c001d7ad:	57                   	push   edi
c001d7ae:	57                   	push   edi
c001d7af:	68 4c 4c 02 c0       	push   0xc0024c4c
c001d7b4:	8d 7c 24 12          	lea    edi,[esp+0x12]
c001d7b8:	57                   	push   edi
c001d7b9:	e8 82 2e fe ff       	call   c0000640 <strcpy>
c001d7be:	0f b6 8b 1f 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11f]
c001d7c5:	31 d2                	xor    edx,edx
c001d7c7:	89 c8                	mov    eax,ecx
c001d7c9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d7cc:	f7 f6                	div    esi
c001d7ce:	be 0a 00 00 00       	mov    esi,0xa
c001d7d3:	83 c0 30             	add    eax,0x30
c001d7d6:	31 d2                	xor    edx,edx
c001d7d8:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001d7dc:	89 c8                	mov    eax,ecx
c001d7de:	f7 f6                	div    esi
c001d7e0:	89 d1                	mov    ecx,edx
c001d7e2:	31 d2                	xor    edx,edx
c001d7e4:	83 c1 30             	add    ecx,0x30
c001d7e7:	f7 f6                	div    esi
c001d7e9:	88 4c 24 1a          	mov    BYTE PTR [esp+0x1a],cl
c001d7ed:	83 c2 30             	add    edx,0x30
c001d7f0:	88 54 24 19          	mov    BYTE PTR [esp+0x19],dl
c001d7f4:	e8 d2 f0 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001d7f9:	bf f8 0c 00 00       	mov    edi,0xcf8
c001d7fe:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d805:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d80c:	c1 e1 10             	shl    ecx,0x10
c001d80f:	c1 e0 0b             	shl    eax,0xb
c001d812:	83 c4 10             	add    esp,0x10
c001d815:	09 c1                	or     ecx,eax
c001d817:	89 fa                	mov    edx,edi
c001d819:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d820:	c1 e0 08             	shl    eax,0x8
c001d823:	09 c1                	or     ecx,eax
c001d825:	89 c8                	mov    eax,ecx
c001d827:	0d 08 00 00 80       	or     eax,0x80000008
c001d82c:	ef                   	out    dx,eax
c001d82d:	be fc 0c 00 00       	mov    esi,0xcfc
c001d832:	89 f2                	mov    edx,esi
c001d834:	ed                   	in     eax,dx
c001d835:	c1 e8 10             	shr    eax,0x10
c001d838:	3d ff ff 00 00       	cmp    eax,0xffff
c001d83d:	0f 84 e5 00 00 00    	je     c001d928 <IDE::open(int, int, void*)+0x212>
c001d843:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001d849:	89 fa                	mov    edx,edi
c001d84b:	89 c8                	mov    eax,ecx
c001d84d:	ef                   	out    dx,eax
c001d84e:	b0 fe                	mov    al,0xfe
c001d850:	89 f2                	mov    edx,esi
c001d852:	ee                   	out    dx,al
c001d853:	89 c8                	mov    eax,ecx
c001d855:	89 fa                	mov    edx,edi
c001d857:	ef                   	out    dx,eax
c001d858:	89 f2                	mov    edx,esi
c001d85a:	ed                   	in     eax,dx
c001d85b:	3c fe                	cmp    al,0xfe
c001d85d:	0f 85 85 00 00 00    	jne    c001d8e8 <IDE::open(int, int, void*)+0x1d2>
c001d863:	83 ec 0c             	sub    esp,0xc
c001d866:	68 ab 24 02 c0       	push   0xc00224ab
c001d86b:	e8 5b f0 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001d870:	c7 04 24 52 4c 02 c0 	mov    DWORD PTR [esp],0xc0024c52
c001d877:	e8 e8 96 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d87c:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001d886:	c7 04 24 ec 26 02 c0 	mov    DWORD PTR [esp],0xc00226ec
c001d88d:	e8 39 f0 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001d892:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001d899:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d8a0:	c1 e1 10             	shl    ecx,0x10
c001d8a3:	c1 e0 08             	shl    eax,0x8
c001d8a6:	89 fa                	mov    edx,edi
c001d8a8:	09 c1                	or     ecx,eax
c001d8aa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d8b1:	c1 e0 0b             	shl    eax,0xb
c001d8b4:	09 c1                	or     ecx,eax
c001d8b6:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001d8bc:	89 c8                	mov    eax,ecx
c001d8be:	ef                   	out    dx,eax
c001d8bf:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001d8c5:	89 f2                	mov    edx,esi
c001d8c7:	ee                   	out    dx,al
c001d8c8:	89 c8                	mov    eax,ecx
c001d8ca:	89 fa                	mov    edx,edi
c001d8cc:	ef                   	out    dx,eax
c001d8cd:	89 f2                	mov    edx,esi
c001d8cf:	ed                   	in     eax,dx
c001d8d0:	0f b6 c0             	movzx  eax,al
c001d8d3:	83 c4 10             	add    esp,0x10
c001d8d6:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001d8dc:	74 5a                	je     c001d938 <IDE::open(int, int, void*)+0x222>
c001d8de:	83 ec 0c             	sub    esp,0xc
c001d8e1:	68 67 4c 02 c0       	push   0xc0024c67
c001d8e6:	eb 48                	jmp    c001d930 <IDE::open(int, int, void*)+0x21a>
c001d8e8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001d8f1:	75 2b                	jne    c001d91e <IDE::open(int, int, void*)+0x208>
c001d8f3:	0f b6 83 1f 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11f]
c001d8fa:	3d 80 00 00 00       	cmp    eax,0x80
c001d8ff:	74 07                	je     c001d908 <IDE::open(int, int, void*)+0x1f2>
c001d901:	3d 8a 00 00 00       	cmp    eax,0x8a
c001d906:	75 16                	jne    c001d91e <IDE::open(int, int, void*)+0x208>
c001d908:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d90f:	83 ec 0c             	sub    esp,0xc
c001d912:	68 9e 1f 02 c0       	push   0xc0021f9e
c001d917:	e8 af ef fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001d91c:	eb 17                	jmp    c001d935 <IDE::open(int, int, void*)+0x21f>
c001d91e:	83 ec 0c             	sub    esp,0xc
c001d921:	68 6f 4c 02 c0       	push   0xc0024c6f
c001d926:	eb 08                	jmp    c001d930 <IDE::open(int, int, void*)+0x21a>
c001d928:	83 ec 0c             	sub    esp,0xc
c001d92b:	68 a0 4c 02 c0       	push   0xc0024ca0
c001d930:	e8 15 1d ff ff       	call   c000f64a <KePanic(char const*)>
c001d935:	83 c4 10             	add    esp,0x10
c001d938:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001d93f:	0f 84 bf 00 00 00    	je     c001da04 <IDE::open(int, int, void*)+0x2ee>
c001d945:	83 ec 0c             	sub    esp,0xc
c001d948:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001d94e:	83 e0 fc             	and    eax,0xfffffffc
c001d951:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001d958:	83 c0 08             	add    eax,0x8
c001d95b:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001d962:	68 ca 4c 02 c0       	push   0xc0024cca
c001d967:	e8 f8 95 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001d96c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001d973:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d97a:	50                   	push   eax
c001d97b:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d982:	50                   	push   eax
c001d983:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d98a:	50                   	push   eax
c001d98b:	ff 35 e0 e0 02 c0    	push   DWORD PTR ds:0xc002e0e0
c001d991:	e8 94 f0 ff ff       	call   c001ca2a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001d996:	83 c4 18             	add    esp,0x18
c001d999:	83 c8 07             	or     eax,0x7
c001d99c:	0f b7 c0             	movzx  eax,ax
c001d99f:	50                   	push   eax
c001d9a0:	6a 04                	push   0x4
c001d9a2:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001d9a9:	50                   	push   eax
c001d9aa:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001d9b1:	50                   	push   eax
c001d9b2:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001d9b9:	50                   	push   eax
c001d9ba:	ff 35 e0 e0 02 c0    	push   DWORD PTR ds:0xc002e0e0
c001d9c0:	e8 a1 f2 ff ff       	call   c001cc66 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>
c001d9c5:	83 c4 20             	add    esp,0x20
c001d9c8:	eb 3a                	jmp    c001da04 <IDE::open(int, int, void*)+0x2ee>
c001d9ca:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001d9d0:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001d9d7:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001d9de:	05 06 02 00 00       	add    eax,0x206
c001d9e3:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001d9ea:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001d9f1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001d9f8:	05 06 02 00 00       	add    eax,0x206
c001d9fd:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001da04:	83 ec 0c             	sub    esp,0xc
c001da07:	68 43 2c 02 c0       	push   0xc0022c43
c001da0c:	e8 ba ee fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001da11:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001da17:	83 c4 10             	add    esp,0x10
c001da1a:	89 c2                	mov    edx,eax
c001da1c:	83 e2 0f             	and    edx,0xf
c001da1f:	83 fa 08             	cmp    edx,0x8
c001da22:	75 0a                	jne    c001da2e <IDE::open(int, int, void*)+0x318>
c001da24:	83 e8 02             	sub    eax,0x2
c001da27:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001da2e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001da34:	89 c2                	mov    edx,eax
c001da36:	83 e2 0f             	and    edx,0xf
c001da39:	83 fa 08             	cmp    edx,0x8
c001da3c:	75 0a                	jne    c001da48 <IDE::open(int, int, void*)+0x332>
c001da3e:	83 e8 02             	sub    eax,0x2
c001da41:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001da48:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001da4f:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001da56:	89 d0                	mov    eax,edx
c001da58:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001da5b:	8d 7a 01             	lea    edi,[edx+0x1]
c001da5e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001da62:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001da66:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001da6a:	83 e1 3f             	and    ecx,0x3f
c001da6d:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001da71:	89 f9                	mov    ecx,edi
c001da73:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001da7a:	0f b6 c9             	movzx  ecx,cl
c001da7d:	8d 78 02             	lea    edi,[eax+0x2]
c001da80:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001da83:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001da87:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001da8b:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001da8f:	83 e2 3f             	and    edx,0x3f
c001da92:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001da96:	89 f9                	mov    ecx,edi
c001da98:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001da9e:	0f b6 d1             	movzx  edx,cl
c001daa1:	8d 78 03             	lea    edi,[eax+0x3]
c001daa4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001daa7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001daab:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001daaf:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001dab3:	83 e1 3f             	and    ecx,0x3f
c001dab6:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001daba:	89 fa                	mov    edx,edi
c001dabc:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001dac2:	0f b6 ca             	movzx  ecx,dl
c001dac5:	8d 78 04             	lea    edi,[eax+0x4]
c001dac8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001dacb:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001dacf:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001dad3:	89 fa                	mov    edx,edi
c001dad5:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001dadb:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001dadf:	83 e2 3f             	and    edx,0x3f
c001dae2:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001dae6:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001daed:	66 85 f6             	test   si,si
c001daf0:	74 24                	je     c001db16 <IDE::open(int, int, void*)+0x400>
c001daf2:	89 f9                	mov    ecx,edi
c001daf4:	83 c0 05             	add    eax,0x5
c001daf7:	0f b6 d1             	movzx  edx,cl
c001dafa:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001dafd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001db01:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001db05:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001db0b:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001db0f:	83 e0 3f             	and    eax,0x3f
c001db12:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001db16:	83 ec 0c             	sub    esp,0xc
c001db19:	68 e2 4c 02 c0       	push   0xc0024ce2
c001db1e:	e8 a8 ed fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001db23:	58                   	pop    eax
c001db24:	5a                   	pop    edx
c001db25:	6a 00                	push   0x0
c001db27:	53                   	push   ebx
c001db28:	e8 71 f9 ff ff       	call   c001d49e <IDE::prepareInterrupt(unsigned char)>
c001db2d:	59                   	pop    ecx
c001db2e:	5e                   	pop    esi
c001db2f:	6a 01                	push   0x1
c001db31:	53                   	push   ebx
c001db32:	e8 67 f9 ff ff       	call   c001d49e <IDE::prepareInterrupt(unsigned char)>
c001db37:	c7 04 24 31 45 02 c0 	mov    DWORD PTR [esp],0xc0024531
c001db3e:	e8 88 ed fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001db43:	83 c4 0c             	add    esp,0xc
c001db46:	6a 00                	push   0x0
c001db48:	6a 00                	push   0x0
c001db4a:	53                   	push   ebx
c001db4b:	e8 7c fb ff ff       	call   c001d6cc <IDE::enableIRQs(unsigned char, bool)>
c001db50:	83 c4 0c             	add    esp,0xc
c001db53:	6a 00                	push   0x0
c001db55:	6a 01                	push   0x1
c001db57:	53                   	push   ebx
c001db58:	e8 6f fb ff ff       	call   c001d6cc <IDE::enableIRQs(unsigned char, bool)>
c001db5d:	c7 04 24 e4 4c 02 c0 	mov    DWORD PTR [esp],0xc0024ce4
c001db64:	e8 62 ed fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001db69:	83 c4 10             	add    esp,0x10
c001db6c:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001db73:	74 3c                	je     c001dbb1 <IDE::open(int, int, void*)+0x49b>
c001db75:	83 ec 0c             	sub    esp,0xc
c001db78:	53                   	push   ebx
c001db79:	6a 01                	push   0x1
c001db7b:	68 94 d6 01 c0       	push   0xc001d694
c001db80:	6a 0e                	push   0xe
c001db82:	53                   	push   ebx
c001db83:	e8 b6 b4 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001db88:	83 c4 14             	add    esp,0x14
c001db8b:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001db91:	53                   	push   ebx
c001db92:	6a 01                	push   0x1
c001db94:	68 b0 d6 01 c0       	push   0xc001d6b0
c001db99:	6a 0f                	push   0xf
c001db9b:	53                   	push   ebx
c001db9c:	e8 9d b4 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dba1:	83 c4 14             	add    esp,0x14
c001dba4:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001dbaa:	68 f2 28 02 c0       	push   0xc00228f2
c001dbaf:	eb 40                	jmp    c001dbf1 <IDE::open(int, int, void*)+0x4db>
c001dbb1:	83 ec 0c             	sub    esp,0xc
c001dbb4:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001dbbe:	53                   	push   ebx
c001dbbf:	6a 00                	push   0x0
c001dbc1:	68 94 d6 01 c0       	push   0xc001d694
c001dbc6:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001dbcc:	53                   	push   ebx
c001dbcd:	e8 6c b4 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dbd2:	83 c4 14             	add    esp,0x14
c001dbd5:	53                   	push   ebx
c001dbd6:	6a 00                	push   0x0
c001dbd8:	68 b0 d6 01 c0       	push   0xc001d6b0
c001dbdd:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001dbe3:	53                   	push   ebx
c001dbe4:	e8 55 b4 fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001dbe9:	83 c4 14             	add    esp,0x14
c001dbec:	68 ad 35 02 c0       	push   0xc00235ad
c001dbf1:	e8 d5 ec fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001dbf6:	83 c4 10             	add    esp,0x10
c001dbf9:	83 ec 0c             	sub    esp,0xc
c001dbfc:	68 e6 4c 02 c0       	push   0xc0024ce6
c001dc01:	e8 c5 ec fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001dc06:	8b 03                	mov    eax,DWORD PTR [ebx]
c001dc08:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dc0b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001dc0e:	c7 04 24 b5 3c 02 c0 	mov    DWORD PTR [esp],0xc0023cb5
c001dc15:	e8 b1 ec fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001dc1a:	83 c4 0c             	add    esp,0xc
c001dc1d:	6a 07                	push   0x7
c001dc1f:	6a 00                	push   0x0
c001dc21:	53                   	push   ebx
c001dc22:	e8 5d f9 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001dc27:	83 c4 0c             	add    esp,0xc
c001dc2a:	6a 07                	push   0x7
c001dc2c:	6a 01                	push   0x1
c001dc2e:	53                   	push   ebx
c001dc2f:	e8 50 f9 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001dc34:	c7 04 24 8c 33 02 c0 	mov    DWORD PTR [esp],0xc002338c
c001dc3b:	e8 8b ec fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001dc40:	83 c4 0c             	add    esp,0xc
c001dc43:	6a 01                	push   0x1
c001dc45:	6a 00                	push   0x0
c001dc47:	53                   	push   ebx
c001dc48:	e8 7f fa ff ff       	call   c001d6cc <IDE::enableIRQs(unsigned char, bool)>
c001dc4d:	83 c4 0c             	add    esp,0xc
c001dc50:	6a 01                	push   0x1
c001dc52:	6a 01                	push   0x1
c001dc54:	53                   	push   ebx
c001dc55:	e8 72 fa ff ff       	call   c001d6cc <IDE::enableIRQs(unsigned char, bool)>
c001dc5a:	c7 04 24 e9 4c 02 c0 	mov    DWORD PTR [esp],0xc0024ce9
c001dc61:	e8 65 ec fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001dc66:	83 c4 20             	add    esp,0x20
c001dc69:	31 c0                	xor    eax,eax
c001dc6b:	5b                   	pop    ebx
c001dc6c:	5e                   	pop    esi
c001dc6d:	5f                   	pop    edi
c001dc6e:	c3                   	ret    
c001dc6f:	90                   	nop

c001dc70 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001dc70:	55                   	push   ebp
c001dc71:	57                   	push   edi
c001dc72:	56                   	push   esi
c001dc73:	53                   	push   ebx
c001dc74:	83 ec 1c             	sub    esp,0x1c
c001dc77:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001dc7b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001dc7f:	8d 42 f8             	lea    eax,[edx-0x8]
c001dc82:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001dc86:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001dc8a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001dc8e:	3c 03                	cmp    al,0x3
c001dc90:	77 5a                	ja     c001dcec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001dc92:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001dc96:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001dc9a:	0f b6 db             	movzx  ebx,bl
c001dc9d:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001dca0:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dca5:	0c 80                	or     al,0x80
c001dca7:	50                   	push   eax
c001dca8:	6a 0c                	push   0xc
c001dcaa:	53                   	push   ebx
c001dcab:	56                   	push   esi
c001dcac:	e8 13 f8 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcb1:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001dcb6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001dcba:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001dcbe:	0f b6 d2             	movzx  edx,dl
c001dcc1:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001dcc5:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dcc7:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001dccc:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001dcd0:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001dcd4:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001dcd8:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001dce0:	83 c4 2c             	add    esp,0x2c
c001dce3:	5b                   	pop    ebx
c001dce4:	5e                   	pop    esi
c001dce5:	5f                   	pop    edi
c001dce6:	5d                   	pop    ebp
c001dce7:	e9 d8 f7 ff ff       	jmp    c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001dcec:	0f b6 c2             	movzx  eax,dl
c001dcef:	83 f8 07             	cmp    eax,0x7
c001dcf2:	77 12                	ja     c001dd06 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001dcf4:	0f b6 c2             	movzx  eax,dl
c001dcf7:	0f b6 db             	movzx  ebx,bl
c001dcfa:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001dd02:	01 c2                	add    edx,eax
c001dd04:	eb 2f                	jmp    c001dd35 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001dd06:	83 f8 0d             	cmp    eax,0xd
c001dd09:	77 13                	ja     c001dd1e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001dd0b:	0f b6 db             	movzx  ebx,bl
c001dd0e:	0f b6 d2             	movzx  edx,dl
c001dd11:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001dd18:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001dd1c:	eb 17                	jmp    c001dd35 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001dd1e:	83 f8 15             	cmp    eax,0x15
c001dd21:	77 14                	ja     c001dd37 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001dd23:	0f b6 db             	movzx  ebx,bl
c001dd26:	0f b6 d2             	movzx  edx,dl
c001dd29:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001dd31:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001dd35:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001dd37:	83 c4 1c             	add    esp,0x1c
c001dd3a:	5b                   	pop    ebx
c001dd3b:	5e                   	pop    esi
c001dd3c:	5f                   	pop    edi
c001dd3d:	5d                   	pop    ebp
c001dd3e:	c3                   	ret    
c001dd3f:	90                   	nop

c001dd40 <IDE::detect()>:
c001dd40:	55                   	push   ebp
c001dd41:	57                   	push   edi
c001dd42:	56                   	push   esi
c001dd43:	53                   	push   ebx
c001dd44:	81 ec 28 02 00 00    	sub    esp,0x228
c001dd4a:	8b 9c 24 3c 02 00 00 	mov    ebx,DWORD PTR [esp+0x23c]
c001dd51:	68 eb 4c 02 c0       	push   0xc0024ceb
c001dd56:	e8 70 eb fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001dd5b:	8a 83 58 01 00 00    	mov    al,BYTE PTR [ebx+0x158]
c001dd61:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c001dd65:	83 c4 10             	add    esp,0x10
c001dd68:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001dd6d:	0f 85 2f 04 00 00    	jne    c001e1a2 <IDE::detect()+0x462>
c001dd73:	83 ec 0c             	sub    esp,0xc
c001dd76:	31 f6                	xor    esi,esi
c001dd78:	68 ee 4c 02 c0       	push   0xc0024cee
c001dd7d:	31 ff                	xor    edi,edi
c001dd7f:	e8 47 eb fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001dd84:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001dd8b:	83 c4 10             	add    esp,0x10
c001dd8e:	83 ec 0c             	sub    esp,0xc
c001dd91:	68 f1 4c 02 c0       	push   0xc0024cf1
c001dd96:	e8 30 eb fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001dd9b:	83 c4 10             	add    esp,0x10
c001dd9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dda5:	83 ec 0c             	sub    esp,0xc
c001dda8:	31 ed                	xor    ebp,ebp
c001ddaa:	68 f4 4c 02 c0       	push   0xc0024cf4
c001ddaf:	e8 17 eb fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001ddb4:	89 f8                	mov    eax,edi
c001ddb6:	c1 e0 06             	shl    eax,0x6
c001ddb9:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001ddc1:	c7 04 24 f7 4c 02 c0 	mov    DWORD PTR [esp],0xc0024cf7
c001ddc8:	e8 fe ea fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001ddcd:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001ddd1:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001ddd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd9:	c1 e0 04             	shl    eax,0x4
c001dddc:	83 c8 a0             	or     eax,0xffffffa0
c001dddf:	0f b6 c0             	movzx  eax,al
c001dde2:	50                   	push   eax
c001dde3:	6a 06                	push   0x6
c001dde5:	56                   	push   esi
c001dde6:	53                   	push   ebx
c001dde7:	e8 d8 f6 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ddec:	83 c4 1c             	add    esp,0x1c
c001ddef:	6a 0c                	push   0xc
c001ddf1:	56                   	push   esi
c001ddf2:	53                   	push   ebx
c001ddf3:	e8 8c f7 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001ddf8:	83 c4 0c             	add    esp,0xc
c001ddfb:	6a 0c                	push   0xc
c001ddfd:	56                   	push   esi
c001ddfe:	53                   	push   ebx
c001ddff:	e8 80 f7 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001de04:	83 c4 0c             	add    esp,0xc
c001de07:	6a 0c                	push   0xc
c001de09:	56                   	push   esi
c001de0a:	53                   	push   ebx
c001de0b:	e8 74 f7 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001de10:	83 c4 0c             	add    esp,0xc
c001de13:	6a 0c                	push   0xc
c001de15:	56                   	push   esi
c001de16:	53                   	push   ebx
c001de17:	e8 68 f7 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001de1c:	c7 04 24 fa 4c 02 c0 	mov    DWORD PTR [esp],0xc0024cfa
c001de23:	e8 a3 ea fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001de28:	68 ec 00 00 00       	push   0xec
c001de2d:	6a 07                	push   0x7
c001de2f:	56                   	push   esi
c001de30:	53                   	push   ebx
c001de31:	e8 8e f6 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001de36:	83 c4 1c             	add    esp,0x1c
c001de39:	6a 0c                	push   0xc
c001de3b:	56                   	push   esi
c001de3c:	53                   	push   ebx
c001de3d:	e8 42 f7 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001de42:	83 c4 0c             	add    esp,0xc
c001de45:	6a 0c                	push   0xc
c001de47:	56                   	push   esi
c001de48:	53                   	push   ebx
c001de49:	e8 36 f7 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001de4e:	83 c4 0c             	add    esp,0xc
c001de51:	6a 0c                	push   0xc
c001de53:	56                   	push   esi
c001de54:	53                   	push   ebx
c001de55:	e8 2a f7 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001de5a:	83 c4 0c             	add    esp,0xc
c001de5d:	6a 0c                	push   0xc
c001de5f:	56                   	push   esi
c001de60:	53                   	push   ebx
c001de61:	e8 1e f7 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001de66:	c7 04 24 fd 4c 02 c0 	mov    DWORD PTR [esp],0xc0024cfd
c001de6d:	e8 59 ea fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001de72:	83 c4 0c             	add    esp,0xc
c001de75:	6a 0c                	push   0xc
c001de77:	56                   	push   esi
c001de78:	53                   	push   ebx
c001de79:	e8 06 f7 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001de7e:	83 c4 10             	add    esp,0x10
c001de81:	84 c0                	test   al,al
c001de83:	75 1f                	jne    c001dea4 <IDE::detect()+0x164>
c001de85:	83 ec 0c             	sub    esp,0xc
c001de88:	68 00 4d 02 c0       	push   0xc0024d00
c001de8d:	e8 39 ea fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001de92:	e9 e9 02 00 00       	jmp    c001e180 <IDE::detect()+0x440>
c001de97:	a8 80                	test   al,0x80
c001de99:	74 21                	je     c001debc <IDE::detect()+0x17c>
c001de9b:	45                   	inc    ebp
c001de9c:	81 fd 17 01 00 00    	cmp    ebp,0x117
c001dea2:	7f 1e                	jg     c001dec2 <IDE::detect()+0x182>
c001dea4:	50                   	push   eax
c001dea5:	6a 0c                	push   0xc
c001dea7:	56                   	push   esi
c001dea8:	53                   	push   ebx
c001dea9:	e8 d6 f6 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001deae:	83 c4 10             	add    esp,0x10
c001deb1:	a8 01                	test   al,0x1
c001deb3:	74 e2                	je     c001de97 <IDE::detect()+0x157>
c001deb5:	c6 44 24 06 01       	mov    BYTE PTR [esp+0x6],0x1
c001deba:	eb 22                	jmp    c001dede <IDE::detect()+0x19e>
c001debc:	a8 08                	test   al,0x8
c001debe:	74 db                	je     c001de9b <IDE::detect()+0x15b>
c001dec0:	eb 17                	jmp    c001ded9 <IDE::detect()+0x199>
c001dec2:	83 ec 0c             	sub    esp,0xc
c001dec5:	6a 32                	push   0x32
c001dec7:	e8 a0 85 ff ff       	call   c001646c <milliTenthSleep(unsigned int)>
c001decc:	83 c4 10             	add    esp,0x10
c001decf:	81 fd 2c 01 00 00    	cmp    ebp,0x12c
c001ded5:	75 cd                	jne    c001dea4 <IDE::detect()+0x164>
c001ded7:	eb dc                	jmp    c001deb5 <IDE::detect()+0x175>
c001ded9:	c6 44 24 06 00       	mov    BYTE PTR [esp+0x6],0x0
c001dede:	83 ec 0c             	sub    esp,0xc
c001dee1:	68 03 4d 02 c0       	push   0xc0024d03
c001dee6:	e8 e0 e9 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001deeb:	83 c4 10             	add    esp,0x10
c001deee:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001def3:	74 60                	je     c001df55 <IDE::detect()+0x215>
c001def5:	50                   	push   eax
c001def6:	6a 04                	push   0x4
c001def8:	56                   	push   esi
c001def9:	53                   	push   ebx
c001defa:	e8 85 f6 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001deff:	83 c4 0c             	add    esp,0xc
c001df02:	89 c5                	mov    ebp,eax
c001df04:	6a 05                	push   0x5
c001df06:	56                   	push   esi
c001df07:	53                   	push   ebx
c001df08:	e8 77 f6 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001df0d:	83 c4 10             	add    esp,0x10
c001df10:	89 e9                	mov    ecx,ebp
c001df12:	0f b6 c0             	movzx  eax,al
c001df15:	0f b6 e9             	movzx  ebp,cl
c001df18:	83 fd 14             	cmp    ebp,0x14
c001df1b:	75 07                	jne    c001df24 <IDE::detect()+0x1e4>
c001df1d:	3d eb 00 00 00       	cmp    eax,0xeb
c001df22:	eb 0e                	jmp    c001df32 <IDE::detect()+0x1f2>
c001df24:	3d 96 00 00 00       	cmp    eax,0x96
c001df29:	0f 85 54 02 00 00    	jne    c001e183 <IDE::detect()+0x443>
c001df2f:	83 fd 69             	cmp    ebp,0x69
c001df32:	0f 85 4b 02 00 00    	jne    c001e183 <IDE::detect()+0x443>
c001df38:	68 a1 00 00 00       	push   0xa1
c001df3d:	6a 07                	push   0x7
c001df3f:	56                   	push   esi
c001df40:	53                   	push   ebx
c001df41:	e8 7e f5 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001df46:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001df4d:	e8 1a 85 ff ff       	call   c001646c <milliTenthSleep(unsigned int)>
c001df52:	83 c4 10             	add    esp,0x10
c001df55:	83 ec 0c             	sub    esp,0xc
c001df58:	89 fd                	mov    ebp,edi
c001df5a:	68 06 4d 02 c0       	push   0xc0024d06
c001df5f:	c1 e5 06             	shl    ebp,0x6
c001df62:	e8 64 e9 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001df67:	01 dd                	add    ebp,ebx
c001df69:	8d 54 24 20          	lea    edx,[esp+0x20]
c001df6d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c001df74:	52                   	push   edx
c001df75:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001df79:	6a 00                	push   0x0
c001df7b:	56                   	push   esi
c001df7c:	53                   	push   ebx
c001df7d:	e8 ee fc ff ff       	call   c001dc70 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001df82:	83 c4 14             	add    esp,0x14
c001df85:	68 0a 4d 02 c0       	push   0xc0024d0a
c001df8a:	e8 3c e9 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001df8f:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001df94:	c6 85 6c 01 00 00 01 	mov    BYTE PTR [ebp+0x16c],0x1
c001df9b:	66 89 85 70 01 00 00 	mov    WORD PTR [ebp+0x170],ax
c001dfa2:	89 f0                	mov    eax,esi
c001dfa4:	88 85 6d 01 00 00    	mov    BYTE PTR [ebp+0x16d],al
c001dfaa:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001dfae:	88 85 6e 01 00 00    	mov    BYTE PTR [ebp+0x16e],al
c001dfb4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfb8:	66 89 85 72 01 00 00 	mov    WORD PTR [ebp+0x172],ax
c001dfbf:	66 8b 84 24 82 00 00 00 	mov    ax,WORD PTR [esp+0x82]
c001dfc7:	66 89 85 74 01 00 00 	mov    WORD PTR [ebp+0x174],ax
c001dfce:	0f b6 84 24 c4 00 00 00 	movzx  eax,BYTE PTR [esp+0xc4]
c001dfd6:	89 85 78 01 00 00    	mov    DWORD PTR [ebp+0x178],eax
c001dfdc:	c7 04 24 0e 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d0e
c001dfe3:	e8 e3 e8 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001dfe8:	83 c4 10             	add    esp,0x10
c001dfeb:	f6 85 7b 01 00 00 04 	test   BYTE PTR [ebp+0x17b],0x4
c001dff2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001dff6:	74 09                	je     c001e001 <IDE::detect()+0x2c1>
c001dff8:	8b 8c 24 d8 00 00 00 	mov    ecx,DWORD PTR [esp+0xd8]
c001dfff:	eb 07                	jmp    c001e008 <IDE::detect()+0x2c8>
c001e001:	8b 8c 24 88 00 00 00 	mov    ecx,DWORD PTR [esp+0x88]
c001e008:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e00c:	89 f8                	mov    eax,edi
c001e00e:	83 ec 0c             	sub    esp,0xc
c001e011:	c1 e0 06             	shl    eax,0x6
c001e014:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c001e017:	89 8d 7c 01 00 00    	mov    DWORD PTR [ebp+0x17c],ecx
c001e01d:	68 12 4d 02 c0       	push   0xc0024d12
c001e022:	e8 a4 e8 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001e027:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e02b:	89 e8                	mov    eax,ebp
c001e02d:	83 c4 10             	add    esp,0x10
c001e030:	8d 6a 28             	lea    ebp,[edx+0x28]
c001e033:	8a 4a 37             	mov    cl,BYTE PTR [edx+0x37]
c001e036:	83 c0 02             	add    eax,0x2
c001e039:	88 88 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],cl
c001e03f:	83 c2 02             	add    edx,0x2
c001e042:	8a 4a 34             	mov    cl,BYTE PTR [edx+0x34]
c001e045:	88 88 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],cl
c001e04b:	39 d5                	cmp    ebp,edx
c001e04d:	75 e4                	jne    c001e033 <IDE::detect()+0x2f3>
c001e04f:	89 f8                	mov    eax,edi
c001e051:	c1 e0 06             	shl    eax,0x6
c001e054:	01 d8                	add    eax,ebx
c001e056:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001e05d:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001e064:	c1 ea 09             	shr    edx,0x9
c001e067:	83 e2 01             	and    edx,0x1
c001e06a:	f6 80 75 01 00 00 01 	test   BYTE PTR [eax+0x175],0x1
c001e071:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001e077:	8a 54 24 07          	mov    dl,BYTE PTR [esp+0x7]
c001e07b:	74 0c                	je     c001e089 <IDE::detect()+0x349>
c001e07d:	66 83 bc f3 5e 01 00 00 00 	cmp    WORD PTR [ebx+esi*8+0x15e],0x0
c001e086:	0f 95 c2             	setne  dl
c001e089:	83 ec 0c             	sub    esp,0xc
c001e08c:	89 fd                	mov    ebp,edi
c001e08e:	c1 e5 06             	shl    ebp,0x6
c001e091:	01 dd                	add    ebp,ebx
c001e093:	88 95 ab 01 00 00    	mov    BYTE PTR [ebp+0x1ab],dl
c001e099:	68 16 4d 02 c0       	push   0xc0024d16
c001e09e:	e8 28 e8 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001e0a3:	83 c4 10             	add    esp,0x10
c001e0a6:	f6 44 24 06 01       	test   BYTE PTR [esp+0x6],0x1
c001e0ab:	75 66                	jne    c001e113 <IDE::detect()+0x3d3>
c001e0ad:	83 bd 7c 01 00 00 00 	cmp    DWORD PTR [ebp+0x17c],0x0
c001e0b4:	0f 84 b8 00 00 00    	je     c001e172 <IDE::detect()+0x432>
c001e0ba:	83 ec 0c             	sub    esp,0xc
c001e0bd:	68 1a 4d 02 c0       	push   0xc0024d1a
c001e0c2:	e8 04 e8 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001e0c7:	c7 04 24 8c 01 00 00 	mov    DWORD PTR [esp],0x18c
c001e0ce:	e8 30 12 ff ff       	call   c000f303 <malloc>
c001e0d3:	89 04 24             	mov    DWORD PTR [esp],eax
c001e0d6:	89 c5                	mov    ebp,eax
c001e0d8:	e8 43 05 00 00       	call   c001e620 <ATA::ATA()>
c001e0dd:	c7 04 24 1e 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d1e
c001e0e4:	e8 e2 e7 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001e0e9:	59                   	pop    ecx
c001e0ea:	58                   	pop    eax
c001e0eb:	55                   	push   ebp
c001e0ec:	53                   	push   ebx
c001e0ed:	e8 a0 af fe ff       	call   c0009092 <Device::addChild(Device*)>
c001e0f2:	c7 04 24 23 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d23
c001e0f9:	e8 cd e7 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001e0fe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e101:	53                   	push   ebx
c001e102:	57                   	push   edi
c001e103:	6a 00                	push   0x0
c001e105:	55                   	push   ebp
c001e106:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e109:	83 c4 14             	add    esp,0x14
c001e10c:	68 28 4d 02 c0       	push   0xc0024d28
c001e111:	eb 57                	jmp    c001e16a <IDE::detect()+0x42a>
c001e113:	83 ec 0c             	sub    esp,0xc
c001e116:	68 2d 4d 02 c0       	push   0xc0024d2d
c001e11b:	e8 ab e7 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001e120:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001e127:	e8 d7 11 ff ff       	call   c000f303 <malloc>
c001e12c:	89 04 24             	mov    DWORD PTR [esp],eax
c001e12f:	89 c5                	mov    ebp,eax
c001e131:	e8 98 0c 00 00       	call   c001edce <ATAPI::ATAPI()>
c001e136:	c7 04 24 33 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d33
c001e13d:	e8 89 e7 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001e142:	58                   	pop    eax
c001e143:	5a                   	pop    edx
c001e144:	55                   	push   ebp
c001e145:	53                   	push   ebx
c001e146:	e8 47 af fe ff       	call   c0009092 <Device::addChild(Device*)>
c001e14b:	c7 04 24 3a 4d 02 c0 	mov    DWORD PTR [esp],0xc0024d3a
c001e152:	e8 74 e7 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001e157:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001e15a:	53                   	push   ebx
c001e15b:	57                   	push   edi
c001e15c:	6a 00                	push   0x0
c001e15e:	55                   	push   ebp
c001e15f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e162:	83 c4 14             	add    esp,0x14
c001e165:	68 41 4d 02 c0       	push   0xc0024d41
c001e16a:	e8 5c e7 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001e16f:	83 c4 10             	add    esp,0x10
c001e172:	83 ec 0c             	sub    esp,0xc
c001e175:	47                   	inc    edi
c001e176:	68 48 4d 02 c0       	push   0xc0024d48
c001e17b:	e8 4b e7 fe ff       	call   c000c8cb <KeSetBootMessage(char const*)>
c001e180:	83 c4 10             	add    esp,0x10
c001e183:	83 3c 24 01          	cmp    DWORD PTR [esp],0x1
c001e187:	74 0c                	je     c001e195 <IDE::detect()+0x455>
c001e189:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001e190:	e9 10 fc ff ff       	jmp    c001dda5 <IDE::detect()+0x65>
c001e195:	4e                   	dec    esi
c001e196:	74 0a                	je     c001e1a2 <IDE::detect()+0x462>
c001e198:	be 01 00 00 00       	mov    esi,0x1
c001e19d:	e9 ec fb ff ff       	jmp    c001dd8e <IDE::detect()+0x4e>
c001e1a2:	81 c4 1c 02 00 00    	add    esp,0x21c
c001e1a8:	5b                   	pop    ebx
c001e1a9:	5e                   	pop    esi
c001e1aa:	5f                   	pop    edi
c001e1ab:	5d                   	pop    ebp
c001e1ac:	c3                   	ret    
c001e1ad:	90                   	nop

c001e1ae <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001e1ae:	55                   	push   ebp
c001e1af:	57                   	push   edi
c001e1b0:	56                   	push   esi
c001e1b1:	53                   	push   ebx
c001e1b2:	83 ec 1c             	sub    esp,0x1c
c001e1b5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e1b9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001e1bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e1c1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001e1c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001e1c9:	88 c3                	mov    bl,al
c001e1cb:	25 ff 00 00 00       	and    eax,0xff
c001e1d0:	0f 84 88 00 00 00    	je     c001e25e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e1d6:	83 ec 0c             	sub    esp,0xc
c001e1d9:	89 c7                	mov    edi,eax
c001e1db:	68 4c 4d 02 c0       	push   0xc0024d4c
c001e1e0:	e8 7f 8d fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001e1e5:	83 c4 10             	add    esp,0x10
c001e1e8:	83 ff 01             	cmp    edi,0x1
c001e1eb:	74 6b                	je     c001e258 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001e1ed:	83 ff 02             	cmp    edi,0x2
c001e1f0:	75 58                	jne    c001e24a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001e1f2:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001e1f7:	01 ff                	add    edi,edi
c001e1f9:	50                   	push   eax
c001e1fa:	09 fe                	or     esi,edi
c001e1fc:	6a 01                	push   0x1
c001e1fe:	89 f0                	mov    eax,esi
c001e200:	0f b6 f0             	movzx  esi,al
c001e203:	c1 e6 06             	shl    esi,0x6
c001e206:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001e20e:	50                   	push   eax
c001e20f:	55                   	push   ebp
c001e210:	e8 6f f3 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001e215:	83 c4 10             	add    esp,0x10
c001e218:	a8 01                	test   al,0x1
c001e21a:	74 02                	je     c001e21e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001e21c:	b3 07                	mov    bl,0x7
c001e21e:	a8 02                	test   al,0x2
c001e220:	74 02                	je     c001e224 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001e222:	b3 03                	mov    bl,0x3
c001e224:	a8 04                	test   al,0x4
c001e226:	74 02                	je     c001e22a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001e228:	b3 14                	mov    bl,0x14
c001e22a:	a8 08                	test   al,0x8
c001e22c:	74 02                	je     c001e230 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001e22e:	b3 03                	mov    bl,0x3
c001e230:	a8 10                	test   al,0x10
c001e232:	74 02                	je     c001e236 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001e234:	b3 15                	mov    bl,0x15
c001e236:	a8 20                	test   al,0x20
c001e238:	74 02                	je     c001e23c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001e23a:	b3 03                	mov    bl,0x3
c001e23c:	a8 40                	test   al,0x40
c001e23e:	74 02                	je     c001e242 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001e240:	b3 16                	mov    bl,0x16
c001e242:	a8 80                	test   al,0x80
c001e244:	74 18                	je     c001e25e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e246:	b3 0d                	mov    bl,0xd
c001e248:	eb 14                	jmp    c001e25e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e24a:	83 ff 03             	cmp    edi,0x3
c001e24d:	74 0d                	je     c001e25c <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001e24f:	83 ff 04             	cmp    edi,0x4
c001e252:	75 0a                	jne    c001e25e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e254:	b3 08                	mov    bl,0x8
c001e256:	eb 06                	jmp    c001e25e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e258:	b3 13                	mov    bl,0x13
c001e25a:	eb 02                	jmp    c001e25e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001e25c:	b3 17                	mov    bl,0x17
c001e25e:	83 c4 1c             	add    esp,0x1c
c001e261:	88 d8                	mov    al,bl
c001e263:	5b                   	pop    ebx
c001e264:	5e                   	pop    esi
c001e265:	5f                   	pop    edi
c001e266:	5d                   	pop    ebp
c001e267:	c3                   	ret    

c001e268 <IDE::polling(unsigned char, unsigned int)>:
c001e268:	57                   	push   edi
c001e269:	56                   	push   esi
c001e26a:	53                   	push   ebx
c001e26b:	bb 04 00 00 00       	mov    ebx,0x4
c001e270:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001e274:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001e279:	52                   	push   edx
c001e27a:	6a 0c                	push   0xc
c001e27c:	56                   	push   esi
c001e27d:	57                   	push   edi
c001e27e:	e8 01 f3 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001e283:	83 c4 10             	add    esp,0x10
c001e286:	4b                   	dec    ebx
c001e287:	75 f0                	jne    c001e279 <IDE::polling(unsigned char, unsigned int)+0x11>
c001e289:	bb a0 86 01 00       	mov    ebx,0x186a0
c001e28e:	50                   	push   eax
c001e28f:	6a 0c                	push   0xc
c001e291:	56                   	push   esi
c001e292:	57                   	push   edi
c001e293:	e8 ec f2 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001e298:	83 c4 10             	add    esp,0x10
c001e29b:	a8 01                	test   al,0x1
c001e29d:	75 17                	jne    c001e2b6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e29f:	a8 20                	test   al,0x20
c001e2a1:	75 0f                	jne    c001e2b2 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001e2a3:	4b                   	dec    ebx
c001e2a4:	74 10                	je     c001e2b6 <IDE::polling(unsigned char, unsigned int)+0x4e>
c001e2a6:	a8 80                	test   al,0x80
c001e2a8:	75 e4                	jne    c001e28e <IDE::polling(unsigned char, unsigned int)+0x26>
c001e2aa:	a8 08                	test   al,0x8
c001e2ac:	74 e0                	je     c001e28e <IDE::polling(unsigned char, unsigned int)+0x26>
c001e2ae:	31 c0                	xor    eax,eax
c001e2b0:	eb 06                	jmp    c001e2b8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e2b2:	b0 01                	mov    al,0x1
c001e2b4:	eb 02                	jmp    c001e2b8 <IDE::polling(unsigned char, unsigned int)+0x50>
c001e2b6:	b0 02                	mov    al,0x2
c001e2b8:	5b                   	pop    ebx
c001e2b9:	5e                   	pop    esi
c001e2ba:	5f                   	pop    edi
c001e2bb:	c3                   	ret    

c001e2bc <SATABus::close(int, int, void*)>:
c001e2bc:	31 c0                	xor    eax,eax
c001e2be:	c3                   	ret    
c001e2bf:	90                   	nop

c001e2c0 <SATABus::detect()>:
c001e2c0:	c3                   	ret    
c001e2c1:	90                   	nop

c001e2c2 <SATABus::SATABus()>:
c001e2c2:	83 ec 0c             	sub    esp,0xc
c001e2c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2c9:	83 ec 08             	sub    esp,0x8
c001e2cc:	68 84 4d 02 c0       	push   0xc0024d84
c001e2d1:	50                   	push   eax
c001e2d2:	e8 15 b1 fe ff       	call   c00093ec <HardDiskController::HardDiskController(char const*)>
c001e2d7:	83 c4 10             	add    esp,0x10
c001e2da:	ba b0 4d 02 c0       	mov    edx,0xc0024db0
c001e2df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2e3:	89 10                	mov    DWORD PTR [eax],edx
c001e2e5:	83 ec 0c             	sub    esp,0xc
c001e2e8:	6a 50                	push   0x50
c001e2ea:	e8 2d 16 ff ff       	call   c000f91c <Phys::allocateContiguousPages(int)>
c001e2ef:	83 c4 10             	add    esp,0x10
c001e2f2:	89 c2                	mov    edx,eax
c001e2f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2f8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e2fe:	83 ec 0c             	sub    esp,0xc
c001e301:	6a 50                	push   0x50
c001e303:	e8 51 47 ff ff       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c001e308:	83 c4 10             	add    esp,0x10
c001e30b:	89 c2                	mov    edx,eax
c001e30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e311:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e317:	a1 f0 ce 02 c0       	mov    eax,ds:0xc002cef0
c001e31c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e320:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001e326:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e32a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e330:	83 ec 0c             	sub    esp,0xc
c001e333:	6a 03                	push   0x3
c001e335:	6a 50                	push   0x50
c001e337:	51                   	push   ecx
c001e338:	52                   	push   edx
c001e339:	50                   	push   eax
c001e33a:	e8 e7 4f ff ff       	call   c0013326 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e33f:	83 c4 20             	add    esp,0x20
c001e342:	90                   	nop
c001e343:	83 c4 0c             	add    esp,0xc
c001e346:	c3                   	ret    
c001e347:	90                   	nop

c001e348 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001e348:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e34c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001e34f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001e352:	09 c2                	or     edx,eax
c001e354:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e358:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e35e:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e360:	31 c0                	xor    eax,eax
c001e362:	c1 e9 08             	shr    ecx,0x8
c001e365:	83 e1 0f             	and    ecx,0xf
c001e368:	39 c8                	cmp    eax,ecx
c001e36a:	74 0a                	je     c001e376 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001e36c:	f6 c2 01             	test   dl,0x1
c001e36f:	74 08                	je     c001e379 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001e371:	d1 ea                	shr    edx,1
c001e373:	40                   	inc    eax
c001e374:	eb f2                	jmp    c001e368 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001e376:	83 c8 ff             	or     eax,0xffffffff
c001e379:	c3                   	ret    

c001e37a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001e37a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e37e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001e381:	89 c2                	mov    edx,eax
c001e383:	c1 ea 08             	shr    edx,0x8
c001e386:	83 e2 0f             	and    edx,0xf
c001e389:	4a                   	dec    edx
c001e38a:	75 32                	jne    c001e3be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e38c:	83 e0 0f             	and    eax,0xf
c001e38f:	83 f8 03             	cmp    eax,0x3
c001e392:	75 2a                	jne    c001e3be <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001e394:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001e397:	b8 02 00 00 00       	mov    eax,0x2
c001e39c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001e3a2:	74 1c                	je     c001e3c0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e3a4:	b8 04 00 00 00       	mov    eax,0x4
c001e3a9:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001e3af:	74 0f                	je     c001e3c0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001e3b1:	31 c0                	xor    eax,eax
c001e3b3:	83 fa 03             	cmp    edx,0x3
c001e3b6:	0f 94 c0             	sete   al
c001e3b9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001e3bd:	c3                   	ret    
c001e3be:	31 c0                	xor    eax,eax
c001e3c0:	c3                   	ret    
c001e3c1:	90                   	nop

c001e3c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001e3c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e3c6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e3c9:	0f ba e2 0f          	bt     edx,0xf
c001e3cd:	72 f7                	jb     c001e3c6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001e3cf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e3d2:	83 ca 10             	or     edx,0x10
c001e3d5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e3d8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e3db:	83 ca 01             	or     edx,0x1
c001e3de:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e3e1:	c3                   	ret    

c001e3e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001e3e2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e3e6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e3e9:	83 e2 fe             	and    edx,0xfffffffe
c001e3ec:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e3ef:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e3f2:	83 e2 ef             	and    edx,0xffffffef
c001e3f5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e3f8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e3fb:	0f ba e2 0e          	bt     edx,0xe
c001e3ff:	72 f7                	jb     c001e3f8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e401:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e404:	0f ba e2 0f          	bt     edx,0xf
c001e408:	72 ee                	jb     c001e3f8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001e40a:	c3                   	ret    
c001e40b:	90                   	nop

c001e40c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001e40c:	55                   	push   ebp
c001e40d:	57                   	push   edi
c001e40e:	56                   	push   esi
c001e40f:	53                   	push   ebx
c001e410:	83 ec 1c             	sub    esp,0x1c
c001e413:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001e417:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001e41b:	53                   	push   ebx
c001e41c:	56                   	push   esi
c001e41d:	e8 c0 ff ff ff       	call   c001e3e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001e422:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001e426:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e42c:	83 ec 0c             	sub    esp,0xc
c001e42f:	c1 e5 0a             	shl    ebp,0xa
c001e432:	01 e8                	add    eax,ebp
c001e434:	89 03                	mov    DWORD PTR [ebx],eax
c001e436:	8b 03                	mov    eax,DWORD PTR [ebx]
c001e438:	68 00 04 00 00       	push   0x400
c001e43d:	6a 00                	push   0x0
c001e43f:	50                   	push   eax
c001e440:	e8 ab 20 fe ff       	call   c00004f0 <memset>
c001e445:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001e44b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001e44f:	01 e8                	add    eax,ebp
c001e451:	83 c4 1c             	add    esp,0x1c
c001e454:	89 03                	mov    DWORD PTR [ebx],eax
c001e456:	c1 e2 08             	shl    edx,0x8
c001e459:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001e460:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001e466:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001e46c:	01 f8                	add    eax,edi
c001e46e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001e471:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001e474:	68 00 01 00 00       	push   0x100
c001e479:	6a 00                	push   0x0
c001e47b:	50                   	push   eax
c001e47c:	e8 6f 20 fe ff       	call   c00004f0 <memset>
c001e481:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001e487:	01 fa                	add    edx,edi
c001e489:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e48d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001e490:	c1 e7 0d             	shl    edi,0xd
c001e493:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001e49a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001e4a0:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001e4a6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001e4aa:	31 ff                	xor    edi,edi
c001e4ac:	83 c4 10             	add    esp,0x10
c001e4af:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001e4b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e4b9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001e4bf:	83 c5 20             	add    ebp,0x20
c001e4c2:	01 f8                	add    eax,edi
c001e4c4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e4c7:	52                   	push   edx
c001e4c8:	68 00 01 00 00       	push   0x100
c001e4cd:	6a 00                	push   0x0
c001e4cf:	50                   	push   eax
c001e4d0:	e8 1b 20 fe ff       	call   c00004f0 <memset>
c001e4d5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e4d9:	83 c4 10             	add    esp,0x10
c001e4dc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001e4e2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001e4e9:	01 f8                	add    eax,edi
c001e4eb:	81 c7 00 01 00 00    	add    edi,0x100
c001e4f1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e4f4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001e4fa:	75 b3                	jne    c001e4af <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001e4fc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001e503:	50                   	push   eax
c001e504:	50                   	push   eax
c001e505:	53                   	push   ebx
c001e506:	56                   	push   esi
c001e507:	e8 b6 fe ff ff       	call   c001e3c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e50c:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001e513:	83 c4 2c             	add    esp,0x2c
c001e516:	5b                   	pop    ebx
c001e517:	5e                   	pop    esi
c001e518:	5f                   	pop    edi
c001e519:	5d                   	pop    ebp
c001e51a:	c3                   	ret    
c001e51b:	90                   	nop

c001e51c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001e51c:	55                   	push   ebp
c001e51d:	57                   	push   edi
c001e51e:	56                   	push   esi
c001e51f:	53                   	push   ebx
c001e520:	31 db                	xor    ebx,ebx
c001e522:	83 ec 0c             	sub    esp,0xc
c001e525:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001e529:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001e52d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001e530:	f7 c7 01 00 00 00    	test   edi,0x1
c001e536:	74 7a                	je     c001e5b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e538:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001e53c:	89 d8                	mov    eax,ebx
c001e53e:	c1 e0 07             	shl    eax,0x7
c001e541:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001e548:	55                   	push   ebp
c001e549:	56                   	push   esi
c001e54a:	e8 2b fe ff ff       	call   c001e37a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001e54f:	5a                   	pop    edx
c001e550:	83 f8 01             	cmp    eax,0x1
c001e553:	59                   	pop    ecx
c001e554:	75 21                	jne    c001e577 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001e556:	50                   	push   eax
c001e557:	53                   	push   ebx
c001e558:	55                   	push   ebp
c001e559:	56                   	push   esi
c001e55a:	e8 ad fe ff ff       	call   c001e40c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e55f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001e566:	e8 98 0d ff ff       	call   c000f303 <malloc>
c001e56b:	89 c5                	mov    ebp,eax
c001e56d:	89 04 24             	mov    DWORD PTR [esp],eax
c001e570:	e8 25 0f 00 00       	call   c001f49a <SATA::SATA()>
c001e575:	eb 24                	jmp    c001e59b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001e577:	83 f8 04             	cmp    eax,0x4
c001e57a:	75 36                	jne    c001e5b2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001e57c:	51                   	push   ecx
c001e57d:	53                   	push   ebx
c001e57e:	55                   	push   ebp
c001e57f:	56                   	push   esi
c001e580:	e8 87 fe ff ff       	call   c001e40c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e585:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001e58c:	e8 72 0d ff ff       	call   c000f303 <malloc>
c001e591:	89 c5                	mov    ebp,eax
c001e593:	89 04 24             	mov    DWORD PTR [esp],eax
c001e596:	e8 97 12 00 00       	call   c001f832 <SATAPI::SATAPI()>
c001e59b:	58                   	pop    eax
c001e59c:	5a                   	pop    edx
c001e59d:	55                   	push   ebp
c001e59e:	56                   	push   esi
c001e59f:	e8 ee aa fe ff       	call   c0009092 <Device::addChild(Device*)>
c001e5a4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001e5a7:	56                   	push   esi
c001e5a8:	6a 00                	push   0x0
c001e5aa:	53                   	push   ebx
c001e5ab:	55                   	push   ebp
c001e5ac:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001e5af:	83 c4 20             	add    esp,0x20
c001e5b2:	d1 ef                	shr    edi,1
c001e5b4:	43                   	inc    ebx
c001e5b5:	83 fb 20             	cmp    ebx,0x20
c001e5b8:	0f 85 72 ff ff ff    	jne    c001e530 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001e5be:	83 c4 0c             	add    esp,0xc
c001e5c1:	5b                   	pop    ebx
c001e5c2:	5e                   	pop    esi
c001e5c3:	5f                   	pop    edi
c001e5c4:	5d                   	pop    ebp
c001e5c5:	c3                   	ret    

c001e5c6 <SATABus::open(int, int, void*)>:
c001e5c6:	53                   	push   ebx
c001e5c7:	83 ec 08             	sub    esp,0x8
c001e5ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e5ce:	8b 83 34 01 00 00    	mov    eax,DWORD PTR [ebx+0x134]
c001e5d4:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001e5da:	e8 05 7a ff ff       	call   c0015fe4 <KeDisablePreemption()>
c001e5df:	52                   	push   edx
c001e5e0:	52                   	push   edx
c001e5e1:	ff b3 60 01 00 00    	push   DWORD PTR [ebx+0x160]
c001e5e7:	53                   	push   ebx
c001e5e8:	e8 2f ff ff ff       	call   c001e51c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001e5ed:	e8 1a 7a ff ff       	call   c001600c <KeRestorePreemption()>
c001e5f2:	31 c0                	xor    eax,eax
c001e5f4:	83 c4 18             	add    esp,0x18
c001e5f7:	5b                   	pop    ebx
c001e5f8:	c3                   	ret    
c001e5f9:	90                   	nop

c001e5fa <ATA::close(int, int, void*)>:
c001e5fa:	83 ec 0c             	sub    esp,0xc
c001e5fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e601:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e607:	85 c0                	test   eax,eax
c001e609:	74 0c                	je     c001e617 <ATA::close(int, int, void*)+0x1d>
c001e60b:	83 ec 0c             	sub    esp,0xc
c001e60e:	8b 10                	mov    edx,DWORD PTR [eax]
c001e610:	50                   	push   eax
c001e611:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001e614:	83 c4 10             	add    esp,0x10
c001e617:	31 c0                	xor    eax,eax
c001e619:	83 c4 0c             	add    esp,0xc
c001e61c:	c3                   	ret    
c001e61d:	90                   	nop

c001e61e <ATA::powerSaving(PowerSavingLevel)>:
c001e61e:	c3                   	ret    
c001e61f:	90                   	nop

c001e620 <ATA::ATA()>:
c001e620:	83 ec 0c             	sub    esp,0xc
c001e623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e627:	83 ec 04             	sub    esp,0x4
c001e62a:	68 00 02 00 00       	push   0x200
c001e62f:	68 31 4f 02 c0       	push   0xc0024f31
c001e634:	50                   	push   eax
c001e635:	e8 3c ae fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001e63a:	83 c4 10             	add    esp,0x10
c001e63d:	ba 98 4e 02 c0       	mov    edx,0xc0024e98
c001e642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e646:	89 10                	mov    DWORD PTR [eax],edx
c001e648:	90                   	nop
c001e649:	83 c4 0c             	add    esp,0xc
c001e64c:	c3                   	ret    
c001e64d:	90                   	nop

c001e64e <ATA::flush(bool)>:
c001e64e:	53                   	push   ebx
c001e64f:	83 ec 08             	sub    esp,0x8
c001e652:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e656:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001e65b:	83 f8 01             	cmp    eax,0x1
c001e65e:	19 c0                	sbb    eax,eax
c001e660:	83 e0 fd             	and    eax,0xfffffffd
c001e663:	05 ea 00 00 00       	add    eax,0xea
c001e668:	50                   	push   eax
c001e669:	6a 07                	push   0x7
c001e66b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e672:	50                   	push   eax
c001e673:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e679:	e8 46 ee ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e67e:	83 c4 0c             	add    esp,0xc
c001e681:	6a 00                	push   0x0
c001e683:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e68a:	50                   	push   eax
c001e68b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e691:	e8 d2 fb ff ff       	call   c001e268 <IDE::polling(unsigned char, unsigned int)>
c001e696:	83 c4 18             	add    esp,0x18
c001e699:	5b                   	pop    ebx
c001e69a:	c3                   	ret    
c001e69b:	90                   	nop

c001e69c <ATA::readyForCommand()>:
c001e69c:	56                   	push   esi
c001e69d:	53                   	push   ebx
c001e69e:	53                   	push   ebx
c001e69f:	31 db                	xor    ebx,ebx
c001e6a1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e6a5:	51                   	push   ecx
c001e6a6:	6a 0c                	push   0xc
c001e6a8:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001e6af:	50                   	push   eax
c001e6b0:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001e6b6:	e8 c9 ee ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001e6bb:	83 c4 10             	add    esp,0x10
c001e6be:	a8 88                	test   al,0x88
c001e6c0:	74 1f                	je     c001e6e1 <ATA::readyForCommand()+0x45>
c001e6c2:	43                   	inc    ebx
c001e6c3:	83 fb 63             	cmp    ebx,0x63
c001e6c6:	7e dd                	jle    c001e6a5 <ATA::readyForCommand()+0x9>
c001e6c8:	83 ec 0c             	sub    esp,0xc
c001e6cb:	6a 0a                	push   0xa
c001e6cd:	e8 9a 7d ff ff       	call   c001646c <milliTenthSleep(unsigned int)>
c001e6d2:	83 c4 10             	add    esp,0x10
c001e6d5:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001e6db:	75 c8                	jne    c001e6a5 <ATA::readyForCommand()+0x9>
c001e6dd:	31 c0                	xor    eax,eax
c001e6df:	eb 02                	jmp    c001e6e3 <ATA::readyForCommand()+0x47>
c001e6e1:	b0 01                	mov    al,0x1
c001e6e3:	5a                   	pop    edx
c001e6e4:	5b                   	pop    ebx
c001e6e5:	5e                   	pop    esi
c001e6e6:	c3                   	ret    
c001e6e7:	90                   	nop

c001e6e8 <ATA::access(unsigned long long, int, void*, bool)>:
c001e6e8:	55                   	push   ebp
c001e6e9:	57                   	push   edi
c001e6ea:	56                   	push   esi
c001e6eb:	53                   	push   ebx
c001e6ec:	83 ec 2c             	sub    esp,0x2c
c001e6ef:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e6f3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001e6f7:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e6fb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e6ff:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001e703:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001e707:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e70b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e711:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e715:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001e71b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001e71f:	c1 e0 06             	shl    eax,0x6
c001e722:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001e72a:	74 5d                	je     c001e789 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001e72c:	89 fa                	mov    edx,edi
c001e72e:	89 f0                	mov    eax,esi
c001e730:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001e734:	c1 ea 1c             	shr    edx,0x1c
c001e737:	89 d1                	mov    ecx,edx
c001e739:	09 c1                	or     ecx,eax
c001e73b:	74 25                	je     c001e762 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001e73d:	31 ed                	xor    ebp,ebp
c001e73f:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001e746:	89 fa                	mov    edx,edi
c001e748:	89 f0                	mov    eax,esi
c001e74a:	0f ad d0             	shrd   eax,edx,cl
c001e74d:	d3 ea                	shr    edx,cl
c001e74f:	f6 c1 20             	test   cl,0x20
c001e752:	74 02                	je     c001e756 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001e754:	89 d0                	mov    eax,edx
c001e756:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001e75a:	45                   	inc    ebp
c001e75b:	83 fd 06             	cmp    ebp,0x6
c001e75e:	75 df                	jne    c001e73f <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001e760:	eb 76                	jmp    c001e7d8 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001e762:	89 f0                	mov    eax,esi
c001e764:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001e769:	89 fa                	mov    edx,edi
c001e76b:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e772:	0f ac d0 10          	shrd   eax,edx,0x10
c001e776:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e77b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001e77f:	c1 ee 18             	shr    esi,0x18
c001e782:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001e787:	eb 56                	jmp    c001e7df <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001e789:	6a 00                	push   0x0
c001e78b:	6a 3f                	push   0x3f
c001e78d:	57                   	push   edi
c001e78e:	56                   	push   esi
c001e78f:	e8 20 25 00 00       	call   c0020cb4 <__umoddi3>
c001e794:	83 c4 10             	add    esp,0x10
c001e797:	40                   	inc    eax
c001e798:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001e79c:	6a 00                	push   0x0
c001e79e:	68 f0 03 00 00       	push   0x3f0
c001e7a3:	57                   	push   edi
c001e7a4:	56                   	push   esi
c001e7a5:	e8 0a 24 00 00       	call   c0020bb4 <__udivdi3>
c001e7aa:	83 c4 10             	add    esp,0x10
c001e7ad:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001e7b2:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001e7b9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001e7be:	6a 00                	push   0x0
c001e7c0:	6a 3f                	push   0x3f
c001e7c2:	57                   	push   edi
c001e7c3:	56                   	push   esi
c001e7c4:	e8 eb 23 00 00       	call   c0020bb4 <__udivdi3>
c001e7c9:	83 c4 10             	add    esp,0x10
c001e7cc:	83 e0 0f             	and    eax,0xf
c001e7cf:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001e7d4:	89 c6                	mov    esi,eax
c001e7d6:	eb 07                	jmp    c001e7df <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001e7d8:	31 f6                	xor    esi,esi
c001e7da:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001e7df:	55                   	push   ebp
c001e7e0:	6a 00                	push   0x0
c001e7e2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e7e9:	50                   	push   eax
c001e7ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001e7ee:	e8 d9 ee ff ff       	call   c001d6cc <IDE::enableIRQs(unsigned char, bool)>
c001e7f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e7f6:	e8 a1 fe ff ff       	call   c001e69c <ATA::readyForCommand()>
c001e7fb:	83 c4 10             	add    esp,0x10
c001e7fe:	84 c0                	test   al,al
c001e800:	75 0a                	jne    c001e80c <ATA::access(unsigned long long, int, void*, bool)+0x124>
c001e802:	be 01 00 00 00       	mov    esi,0x1
c001e807:	e9 c2 02 00 00       	jmp    c001eace <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001e80c:	fa                   	cli    
c001e80d:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c001e813:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e819:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001e81e:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001e824:	75 0a                	jne    c001e830 <ATA::access(unsigned long long, int, void*, bool)+0x148>
c001e826:	c1 e0 04             	shl    eax,0x4
c001e829:	09 c6                	or     esi,eax
c001e82b:	83 ce a0             	or     esi,0xffffffa0
c001e82e:	eb 08                	jmp    c001e838 <ATA::access(unsigned long long, int, void*, bool)+0x150>
c001e830:	c1 e0 04             	shl    eax,0x4
c001e833:	09 c6                	or     esi,eax
c001e835:	83 ce e0             	or     esi,0xffffffe0
c001e838:	89 f0                	mov    eax,esi
c001e83a:	0f b6 d2             	movzx  edx,dl
c001e83d:	0f b6 f0             	movzx  esi,al
c001e840:	56                   	push   esi
c001e841:	6a 06                	push   0x6
c001e843:	52                   	push   edx
c001e844:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e84a:	e8 75 ec ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e84f:	83 c4 10             	add    esp,0x10
c001e852:	6a 00                	push   0x0
c001e854:	6a 01                	push   0x1
c001e856:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e85d:	50                   	push   eax
c001e85e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e864:	e8 5b ec ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e869:	83 c4 10             	add    esp,0x10
c001e86c:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001e871:	83 f8 02             	cmp    eax,0x2
c001e874:	75 6e                	jne    c001e8e4 <ATA::access(unsigned long long, int, void*, bool)+0x1fc>
c001e876:	6a 00                	push   0x0
c001e878:	6a 08                	push   0x8
c001e87a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e881:	50                   	push   eax
c001e882:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e888:	e8 37 ec ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e88d:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001e892:	50                   	push   eax
c001e893:	6a 09                	push   0x9
c001e895:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e89c:	50                   	push   eax
c001e89d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8a3:	e8 1c ec ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8a8:	83 c4 20             	add    esp,0x20
c001e8ab:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001e8b0:	50                   	push   eax
c001e8b1:	6a 0a                	push   0xa
c001e8b3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8ba:	50                   	push   eax
c001e8bb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8c1:	e8 fe eb ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8c6:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001e8cb:	50                   	push   eax
c001e8cc:	6a 0b                	push   0xb
c001e8ce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8d5:	50                   	push   eax
c001e8d6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8dc:	e8 e3 eb ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8e1:	83 c4 20             	add    esp,0x20
c001e8e4:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001e8e9:	50                   	push   eax
c001e8ea:	6a 02                	push   0x2
c001e8ec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e8f3:	50                   	push   eax
c001e8f4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e8fa:	e8 c5 eb ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e8ff:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001e904:	50                   	push   eax
c001e905:	6a 03                	push   0x3
c001e907:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e90e:	50                   	push   eax
c001e90f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e915:	e8 aa eb ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e91a:	83 c4 20             	add    esp,0x20
c001e91d:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001e922:	50                   	push   eax
c001e923:	6a 04                	push   0x4
c001e925:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e92c:	50                   	push   eax
c001e92d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e933:	e8 8c eb ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e938:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001e93d:	50                   	push   eax
c001e93e:	6a 05                	push   0x5
c001e940:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e947:	50                   	push   eax
c001e948:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e94e:	e8 71 eb ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e953:	83 c4 20             	add    esp,0x20
c001e956:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001e95b:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001e960:	74 13                	je     c001e975 <ATA::access(unsigned long long, int, void*, bool)+0x28d>
c001e962:	83 f8 02             	cmp    eax,0x2
c001e965:	74 20                	je     c001e987 <ATA::access(unsigned long long, int, void*, bool)+0x29f>
c001e967:	48                   	dec    eax
c001e968:	0f 85 94 fe ff ff    	jne    c001e802 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001e96e:	b8 30 00 00 00       	mov    eax,0x30
c001e973:	eb 1e                	jmp    c001e993 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001e975:	83 f8 02             	cmp    eax,0x2
c001e978:	74 14                	je     c001e98e <ATA::access(unsigned long long, int, void*, bool)+0x2a6>
c001e97a:	48                   	dec    eax
c001e97b:	b8 20 00 00 00       	mov    eax,0x20
c001e980:	74 11                	je     c001e993 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001e982:	e9 7b fe ff ff       	jmp    c001e802 <ATA::access(unsigned long long, int, void*, bool)+0x11a>
c001e987:	b8 34 00 00 00       	mov    eax,0x34
c001e98c:	eb 05                	jmp    c001e993 <ATA::access(unsigned long long, int, void*, bool)+0x2ab>
c001e98e:	b8 24 00 00 00       	mov    eax,0x24
c001e993:	50                   	push   eax
c001e994:	6a 07                	push   0x7
c001e996:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e99d:	50                   	push   eax
c001e99e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e9a4:	e8 1b eb ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001e9a9:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001e9b0:	83 c4 10             	add    esp,0x10
c001e9b3:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c001e9ba:	75 01                	jne    c001e9bd <ATA::access(unsigned long long, int, void*, bool)+0x2d5>
c001e9bc:	fb                   	sti    
c001e9bd:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e9c1:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e9c6:	85 f6                	test   esi,esi
c001e9c8:	0f 84 dd 00 00 00    	je     c001eaab <ATA::access(unsigned long long, int, void*, bool)+0x3c3>
c001e9ce:	57                   	push   edi
c001e9cf:	6a 01                	push   0x1
c001e9d1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001e9d8:	50                   	push   eax
c001e9d9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001e9df:	e8 84 f8 ff ff       	call   c001e268 <IDE::polling(unsigned char, unsigned int)>
c001e9e4:	83 c4 10             	add    esp,0x10
c001e9e7:	0f b6 c0             	movzx  eax,al
c001e9ea:	85 c0                	test   eax,eax
c001e9ec:	74 23                	je     c001ea11 <ATA::access(unsigned long long, int, void*, bool)+0x329>
c001e9ee:	50                   	push   eax
c001e9ef:	89 c6                	mov    esi,eax
c001e9f1:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001e9f8:	50                   	push   eax
c001e9f9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea00:	50                   	push   eax
c001ea01:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea07:	e8 a2 f7 ff ff       	call   c001e1ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ea0c:	e9 ba 00 00 00       	jmp    c001eacb <ATA::access(unsigned long long, int, void*, bool)+0x3e3>
c001ea11:	85 ed                	test   ebp,ebp
c001ea13:	74 49                	je     c001ea5e <ATA::access(unsigned long long, int, void*, bool)+0x376>
c001ea15:	fa                   	cli    
c001ea16:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c001ea1c:	31 c9                	xor    ecx,ecx
c001ea1e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ea22:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ea26:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001ea2a:	51                   	push   ecx
c001ea2b:	51                   	push   ecx
c001ea2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea33:	50                   	push   eax
c001ea34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea3a:	e8 73 ea ff ff       	call   c001d4b2 <IDE::getBase(unsigned char)>
c001ea3f:	89 c2                	mov    edx,eax
c001ea41:	89 f8                	mov    eax,edi
c001ea43:	66 ef                	out    dx,ax
c001ea45:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ea49:	83 c4 10             	add    esp,0x10
c001ea4c:	41                   	inc    ecx
c001ea4d:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001ea53:	75 c9                	jne    c001ea1e <ATA::access(unsigned long long, int, void*, bool)+0x336>
c001ea55:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001ea5c:	eb 35                	jmp    c001ea93 <ATA::access(unsigned long long, int, void*, bool)+0x3ab>
c001ea5e:	fa                   	cli    
c001ea5f:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c001ea65:	52                   	push   edx
c001ea66:	52                   	push   edx
c001ea67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ea6e:	50                   	push   eax
c001ea6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ea75:	e8 38 ea ff ff       	call   c001d4b2 <IDE::getBase(unsigned char)>
c001ea7a:	b9 00 01 00 00       	mov    ecx,0x100
c001ea7f:	89 c2                	mov    edx,eax
c001ea81:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001ea85:	fc                   	cld    
c001ea86:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001ea89:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001ea90:	83 c4 10             	add    esp,0x10
c001ea93:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c001ea9a:	75 01                	jne    c001ea9d <ATA::access(unsigned long long, int, void*, bool)+0x3b5>
c001ea9c:	fb                   	sti    
c001ea9d:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001eaa5:	4e                   	dec    esi
c001eaa6:	e9 1b ff ff ff       	jmp    c001e9c6 <ATA::access(unsigned long long, int, void*, bool)+0x2de>
c001eaab:	31 f6                	xor    esi,esi
c001eaad:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001eab2:	74 1a                	je     c001eace <ATA::access(unsigned long long, int, void*, bool)+0x3e6>
c001eab4:	50                   	push   eax
c001eab5:	50                   	push   eax
c001eab6:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001eabb:	83 f8 02             	cmp    eax,0x2
c001eabe:	0f 94 c0             	sete   al
c001eac1:	0f b6 c0             	movzx  eax,al
c001eac4:	50                   	push   eax
c001eac5:	53                   	push   ebx
c001eac6:	e8 83 fb ff ff       	call   c001e64e <ATA::flush(bool)>
c001eacb:	83 c4 10             	add    esp,0x10
c001eace:	83 c4 2c             	add    esp,0x2c
c001ead1:	89 f0                	mov    eax,esi
c001ead3:	5b                   	pop    ebx
c001ead4:	5e                   	pop    esi
c001ead5:	5f                   	pop    edi
c001ead6:	5d                   	pop    ebp
c001ead7:	c3                   	ret    

c001ead8 <ATA::read(unsigned long long, int, void*)>:
c001ead8:	57                   	push   edi
c001ead9:	b8 04 00 00 00       	mov    eax,0x4
c001eade:	56                   	push   esi
c001eadf:	53                   	push   ebx
c001eae0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eae4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001eae8:	8d 7a ff             	lea    edi,[edx-0x1]
c001eaeb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001eaef:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001eaf3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001eaf9:	77 25                	ja     c001eb20 <ATA::read(unsigned long long, int, void*)+0x48>
c001eafb:	b8 06 00 00 00       	mov    eax,0x6
c001eb00:	85 f6                	test   esi,esi
c001eb02:	74 1c                	je     c001eb20 <ATA::read(unsigned long long, int, void*)+0x48>
c001eb04:	50                   	push   eax
c001eb05:	50                   	push   eax
c001eb06:	6a 00                	push   0x0
c001eb08:	56                   	push   esi
c001eb09:	52                   	push   edx
c001eb0a:	53                   	push   ebx
c001eb0b:	51                   	push   ecx
c001eb0c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001eb10:	e8 d3 fb ff ff       	call   c001e6e8 <ATA::access(unsigned long long, int, void*, bool)>
c001eb15:	83 c4 20             	add    esp,0x20
c001eb18:	85 c0                	test   eax,eax
c001eb1a:	0f 95 c0             	setne  al
c001eb1d:	0f b6 c0             	movzx  eax,al
c001eb20:	5b                   	pop    ebx
c001eb21:	5e                   	pop    esi
c001eb22:	5f                   	pop    edi
c001eb23:	c3                   	ret    

c001eb24 <ATA::write(unsigned long long, int, void*)>:
c001eb24:	57                   	push   edi
c001eb25:	b8 04 00 00 00       	mov    eax,0x4
c001eb2a:	56                   	push   esi
c001eb2b:	53                   	push   ebx
c001eb2c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eb30:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001eb34:	8d 7a ff             	lea    edi,[edx-0x1]
c001eb37:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001eb3b:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001eb3f:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001eb45:	77 25                	ja     c001eb6c <ATA::write(unsigned long long, int, void*)+0x48>
c001eb47:	b8 06 00 00 00       	mov    eax,0x6
c001eb4c:	85 f6                	test   esi,esi
c001eb4e:	74 1c                	je     c001eb6c <ATA::write(unsigned long long, int, void*)+0x48>
c001eb50:	50                   	push   eax
c001eb51:	50                   	push   eax
c001eb52:	6a 01                	push   0x1
c001eb54:	56                   	push   esi
c001eb55:	52                   	push   edx
c001eb56:	53                   	push   ebx
c001eb57:	51                   	push   ecx
c001eb58:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001eb5c:	e8 87 fb ff ff       	call   c001e6e8 <ATA::access(unsigned long long, int, void*, bool)>
c001eb61:	83 c4 20             	add    esp,0x20
c001eb64:	85 c0                	test   eax,eax
c001eb66:	0f 95 c0             	setne  al
c001eb69:	0f b6 c0             	movzx  eax,al
c001eb6c:	5b                   	pop    ebx
c001eb6d:	5e                   	pop    esi
c001eb6e:	5f                   	pop    edi
c001eb6f:	c3                   	ret    

c001eb70 <ATA::detectCHS()>:
c001eb70:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eb74:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001eb7a:	c1 e0 06             	shl    eax,0x6
c001eb7d:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001eb83:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001eb8d:	c7 44 24 04 d4 4d 02 c0 	mov    DWORD PTR [esp+0x4],0xc0024dd4
c001eb95:	e9 b0 0a ff ff       	jmp    c000f64a <KePanic(char const*)>

c001eb9a <ATA::open(int, int, void*)>:
c001eb9a:	53                   	push   ebx
c001eb9b:	83 ec 08             	sub    esp,0x8
c001eb9e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eba2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001eba6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ebaa:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001ebb0:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001ebb6:	c1 e0 06             	shl    eax,0x6
c001ebb9:	01 d0                	add    eax,edx
c001ebbb:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001ebc2:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001ebc8:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001ebcf:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001ebd9:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001ebdf:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001ebe6:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001ebed:	75 0c                	jne    c001ebfb <ATA::open(int, int, void*)+0x61>
c001ebef:	83 ec 0c             	sub    esp,0xc
c001ebf2:	53                   	push   ebx
c001ebf3:	e8 78 ff ff ff       	call   c001eb70 <ATA::detectCHS()>
c001ebf8:	83 c4 10             	add    esp,0x10
c001ebfb:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001ec01:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ec07:	c1 e0 06             	shl    eax,0x6
c001ec0a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001ec11:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001ec1b:	d1 e8                	shr    eax,1
c001ec1d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001ec23:	6a 04                	push   0x4
c001ec25:	6a 0c                	push   0xc
c001ec27:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ec2e:	50                   	push   eax
c001ec2f:	52                   	push   edx
c001ec30:	e8 8f e8 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec35:	90                   	nop
c001ec36:	90                   	nop
c001ec37:	6a 00                	push   0x0
c001ec39:	6a 0c                	push   0xc
c001ec3b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ec42:	50                   	push   eax
c001ec43:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ec49:	e8 76 e8 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ec4e:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001ec54:	83 c4 20             	add    esp,0x20
c001ec57:	c1 e0 06             	shl    eax,0x6
c001ec5a:	03 83 6c 01 00 00    	add    eax,DWORD PTR [ebx+0x16c]
c001ec60:	80 b8 ab 01 00 00 00 	cmp    BYTE PTR [eax+0x1ab],0x0
c001ec67:	0f 84 00 01 00 00    	je     c001ed6d <ATA::open(int, int, void*)+0x1d3>
c001ec6d:	83 ec 0c             	sub    esp,0xc
c001ec70:	6a 08                	push   0x8
c001ec72:	e8 a5 0c ff ff       	call   c000f91c <Phys::allocateContiguousPages(int)>
c001ec77:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001ec7d:	c7 04 24 e6 4d 02 c0 	mov    DWORD PTR [esp],0xc0024de6
c001ec84:	e8 db 82 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ec89:	c7 04 24 02 00 00 00 	mov    DWORD PTR [esp],0x2
c001ec90:	e8 c4 3d ff ff       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c001ec95:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ec9b:	6a 03                	push   0x3
c001ec9d:	50                   	push   eax
c001ec9e:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001eca4:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c001ecaa:	e8 8d 44 ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c001ecaf:	83 c4 20             	add    esp,0x20
c001ecb2:	e8 87 0b ff ff       	call   c000f83e <Phys::allocatePage()>
c001ecb7:	83 ec 0c             	sub    esp,0xc
c001ecba:	89 83 84 01 00 00    	mov    DWORD PTR [ebx+0x184],eax
c001ecc0:	6a 01                	push   0x1
c001ecc2:	e8 92 3d ff ff       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c001ecc7:	89 83 88 01 00 00    	mov    DWORD PTR [ebx+0x188],eax
c001eccd:	6a 03                	push   0x3
c001eccf:	50                   	push   eax
c001ecd0:	ff b3 84 01 00 00    	push   DWORD PTR [ebx+0x184]
c001ecd6:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c001ecdc:	e8 5b 44 ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c001ece1:	83 c4 14             	add    esp,0x14
c001ece4:	68 1f 4e 02 c0       	push   0xc0024e1f
c001ece9:	e8 76 82 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001ecee:	0f b6 83 84 01 00 00 	movzx  eax,BYTE PTR [ebx+0x184]
c001ecf5:	50                   	push   eax
c001ecf6:	6a 12                	push   0x12
c001ecf8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ecff:	50                   	push   eax
c001ed00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed06:	e8 b9 e7 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed0b:	83 c4 20             	add    esp,0x20
c001ed0e:	8b 83 84 01 00 00    	mov    eax,DWORD PTR [ebx+0x184]
c001ed14:	0f b6 c4             	movzx  eax,ah
c001ed17:	50                   	push   eax
c001ed18:	6a 13                	push   0x13
c001ed1a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed21:	50                   	push   eax
c001ed22:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed28:	e8 97 e7 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed2d:	0f b6 83 86 01 00 00 	movzx  eax,BYTE PTR [ebx+0x186]
c001ed34:	50                   	push   eax
c001ed35:	6a 14                	push   0x14
c001ed37:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed3e:	50                   	push   eax
c001ed3f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed45:	e8 7a e7 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed4a:	83 c4 20             	add    esp,0x20
c001ed4d:	0f b6 83 87 01 00 00 	movzx  eax,BYTE PTR [ebx+0x187]
c001ed54:	50                   	push   eax
c001ed55:	6a 15                	push   0x15
c001ed57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ed5e:	50                   	push   eax
c001ed5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ed65:	e8 5a e7 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ed6a:	83 c4 10             	add    esp,0x10
c001ed6d:	83 ec 0c             	sub    esp,0xc
c001ed70:	53                   	push   ebx
c001ed71:	e8 68 a7 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001ed76:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed79:	e8 00 b6 fe ff       	call   c000a37e <createPartitionsForDisk(PhysicalDisk*)>
c001ed7e:	31 c0                	xor    eax,eax
c001ed80:	83 c4 18             	add    esp,0x18
c001ed83:	5b                   	pop    ebx
c001ed84:	c3                   	ret    

c001ed85 <combineCharAndColour(char, unsigned char)>:
c001ed85:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ed8a:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001ed90:	c1 e0 08             	shl    eax,0x8
c001ed93:	09 d0                	or     eax,edx
c001ed95:	c3                   	ret    

c001ed96 <combineColours(unsigned char, unsigned char)>:
c001ed96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001ed9b:	c1 e0 04             	shl    eax,0x4
c001ed9e:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001eda2:	c3                   	ret    
c001eda3:	90                   	nop

c001eda4 <ATAPI::write(unsigned long long, int, void*)>:
c001eda4:	b8 03 00 00 00       	mov    eax,0x3
c001eda9:	c3                   	ret    

c001edaa <ATAPI::close(int, int, void*)>:
c001edaa:	83 ec 0c             	sub    esp,0xc
c001edad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edb1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001edb7:	85 c0                	test   eax,eax
c001edb9:	74 0c                	je     c001edc7 <ATAPI::close(int, int, void*)+0x1d>
c001edbb:	83 ec 0c             	sub    esp,0xc
c001edbe:	8b 10                	mov    edx,DWORD PTR [eax]
c001edc0:	50                   	push   eax
c001edc1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001edc4:	83 c4 10             	add    esp,0x10
c001edc7:	31 c0                	xor    eax,eax
c001edc9:	83 c4 0c             	add    esp,0xc
c001edcc:	c3                   	ret    
c001edcd:	90                   	nop

c001edce <ATAPI::ATAPI()>:
c001edce:	83 ec 0c             	sub    esp,0xc
c001edd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edd5:	83 ec 04             	sub    esp,0x4
c001edd8:	68 00 08 00 00       	push   0x800
c001eddd:	68 d1 4f 02 c0       	push   0xc0024fd1
c001ede2:	50                   	push   eax
c001ede3:	e8 8e a6 fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001ede8:	83 c4 10             	add    esp,0x10
c001edeb:	ba e0 4e 02 c0       	mov    edx,0xc0024ee0
c001edf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001edf4:	89 10                	mov    DWORD PTR [eax],edx
c001edf6:	90                   	nop
c001edf7:	83 c4 0c             	add    esp,0xc
c001edfa:	c3                   	ret    
c001edfb:	90                   	nop

c001edfc <ATAPI::readyForCommand()>:
c001edfc:	56                   	push   esi
c001edfd:	53                   	push   ebx
c001edfe:	53                   	push   ebx
c001edff:	31 db                	xor    ebx,ebx
c001ee01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ee05:	51                   	push   ecx
c001ee06:	6a 0c                	push   0xc
c001ee08:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001ee0f:	50                   	push   eax
c001ee10:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001ee16:	e8 69 e7 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001ee1b:	83 c4 10             	add    esp,0x10
c001ee1e:	a8 88                	test   al,0x88
c001ee20:	74 25                	je     c001ee47 <ATAPI::readyForCommand()+0x4b>
c001ee22:	43                   	inc    ebx
c001ee23:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001ee29:	7e da                	jle    c001ee05 <ATAPI::readyForCommand()+0x9>
c001ee2b:	83 ec 0c             	sub    esp,0xc
c001ee2e:	68 5e 01 00 00       	push   0x15e
c001ee33:	e8 34 76 ff ff       	call   c001646c <milliTenthSleep(unsigned int)>
c001ee38:	83 c4 10             	add    esp,0x10
c001ee3b:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001ee41:	75 c2                	jne    c001ee05 <ATAPI::readyForCommand()+0x9>
c001ee43:	31 c0                	xor    eax,eax
c001ee45:	eb 02                	jmp    c001ee49 <ATAPI::readyForCommand()+0x4d>
c001ee47:	b0 01                	mov    al,0x1
c001ee49:	5a                   	pop    edx
c001ee4a:	5b                   	pop    ebx
c001ee4b:	5e                   	pop    esi
c001ee4c:	c3                   	ret    
c001ee4d:	90                   	nop

c001ee4e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001ee4e:	55                   	push   ebp
c001ee4f:	57                   	push   edi
c001ee50:	56                   	push   esi
c001ee51:	53                   	push   ebx
c001ee52:	83 ec 20             	sub    esp,0x20
c001ee55:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001ee59:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001ee5d:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001ee61:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001ee65:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001ee69:	6a 01                	push   0x1
c001ee6b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee72:	50                   	push   eax
c001ee73:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee79:	e8 4e e8 ff ff       	call   c001d6cc <IDE::enableIRQs(unsigned char, bool)>
c001ee7e:	5e                   	pop    esi
c001ee7f:	58                   	pop    eax
c001ee80:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ee87:	50                   	push   eax
c001ee88:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ee8e:	e8 0b e6 ff ff       	call   c001d49e <IDE::prepareInterrupt(unsigned char)>
c001ee93:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ee96:	e8 61 ff ff ff       	call   c001edfc <ATAPI::readyForCommand()>
c001ee9b:	83 c4 10             	add    esp,0x10
c001ee9e:	84 c0                	test   al,al
c001eea0:	75 0a                	jne    c001eeac <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001eea2:	bb 01 00 00 00       	mov    ebx,0x1
c001eea7:	e9 60 02 00 00       	jmp    c001f10c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001eeac:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001eeb2:	c1 e0 04             	shl    eax,0x4
c001eeb5:	0f b6 c0             	movzx  eax,al
c001eeb8:	50                   	push   eax
c001eeb9:	6a 06                	push   0x6
c001eebb:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eec2:	50                   	push   eax
c001eec3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eec9:	e8 f6 e5 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eece:	6a 00                	push   0x0
c001eed0:	6a 01                	push   0x1
c001eed2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eed9:	50                   	push   eax
c001eeda:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eee0:	e8 df e5 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001eee5:	83 c4 20             	add    esp,0x20
c001eee8:	0f b6 c3             	movzx  eax,bl
c001eeeb:	0f b6 df             	movzx  ebx,bh
c001eeee:	50                   	push   eax
c001eeef:	6a 04                	push   0x4
c001eef1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eef8:	50                   	push   eax
c001eef9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001eeff:	e8 c0 e5 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef04:	53                   	push   ebx
c001ef05:	6a 05                	push   0x5
c001ef07:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef0e:	50                   	push   eax
c001ef0f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef15:	e8 aa e5 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef1a:	83 c4 20             	add    esp,0x20
c001ef1d:	68 a0 00 00 00       	push   0xa0
c001ef22:	6a 07                	push   0x7
c001ef24:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef2b:	50                   	push   eax
c001ef2c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef32:	e8 8d e5 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ef37:	83 c4 0c             	add    esp,0xc
c001ef3a:	6a 01                	push   0x1
c001ef3c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001ef43:	50                   	push   eax
c001ef44:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef4a:	e8 19 f3 ff ff       	call   c001e268 <IDE::polling(unsigned char, unsigned int)>
c001ef4f:	83 c4 10             	add    esp,0x10
c001ef52:	0f b6 d8             	movzx  ebx,al
c001ef55:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001ef5b:	85 db                	test   ebx,ebx
c001ef5d:	74 20                	je     c001ef7f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001ef5f:	53                   	push   ebx
c001ef60:	0f b6 c0             	movzx  eax,al
c001ef63:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001ef6a:	52                   	push   edx
c001ef6b:	50                   	push   eax
c001ef6c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef72:	e8 37 f2 ff ff       	call   c001e1ae <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ef77:	83 c4 10             	add    esp,0x10
c001ef7a:	e9 8d 01 00 00       	jmp    c001f10c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001ef7f:	0f b6 c0             	movzx  eax,al
c001ef82:	53                   	push   ebx
c001ef83:	53                   	push   ebx
c001ef84:	50                   	push   eax
c001ef85:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001ef8b:	e8 22 e5 ff ff       	call   c001d4b2 <IDE::getBase(unsigned char)>
c001ef90:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ef94:	b9 06 00 00 00       	mov    ecx,0x6
c001ef99:	89 c2                	mov    edx,eax
c001ef9b:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001ef9e:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001efa2:	83 c4 10             	add    esp,0x10
c001efa5:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001efaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001efae:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001efb4:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001efbb:	85 db                	test   ebx,ebx
c001efbd:	0f 84 ec 00 00 00    	je     c001f0af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001efc3:	51                   	push   ecx
c001efc4:	51                   	push   ecx
c001efc5:	52                   	push   edx
c001efc6:	50                   	push   eax
c001efc7:	e8 66 e6 ff ff       	call   c001d632 <IDE::waitInterrupt(unsigned char)>
c001efcc:	83 c4 10             	add    esp,0x10
c001efcf:	84 c0                	test   al,al
c001efd1:	0f 84 cb fe ff ff    	je     c001eea2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001efd7:	56                   	push   esi
c001efd8:	56                   	push   esi
c001efd9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001efe0:	50                   	push   eax
c001efe1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001efe7:	e8 b2 e4 ff ff       	call   c001d49e <IDE::prepareInterrupt(unsigned char)>
c001efec:	83 c4 0c             	add    esp,0xc
c001efef:	6a 04                	push   0x4
c001eff1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001eff8:	50                   	push   eax
c001eff9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001efff:	e8 80 e5 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001f004:	83 c4 0c             	add    esp,0xc
c001f007:	89 c6                	mov    esi,eax
c001f009:	6a 05                	push   0x5
c001f00b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f012:	50                   	push   eax
c001f013:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f019:	e8 66 e5 ff ff       	call   c001d584 <IDE::read(unsigned char, unsigned char)>
c001f01e:	89 f1                	mov    ecx,esi
c001f020:	0f b6 c0             	movzx  eax,al
c001f023:	0f b6 f1             	movzx  esi,cl
c001f026:	c1 e0 08             	shl    eax,0x8
c001f029:	09 c6                	or     esi,eax
c001f02b:	d1 fe                	sar    esi,1
c001f02d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001f031:	83 c4 10             	add    esp,0x10
c001f034:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001f039:	74 41                	je     c001f07c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001f03b:	31 c9                	xor    ecx,ecx
c001f03d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f043:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f04a:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001f04e:	75 0a                	jne    c001f05a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001f050:	01 c9                	add    ecx,ecx
c001f052:	01 cd                	add    ebp,ecx
c001f054:	4b                   	dec    ebx
c001f055:	e9 54 ff ff ff       	jmp    c001efae <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001f05a:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001f05f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001f063:	51                   	push   ecx
c001f064:	51                   	push   ecx
c001f065:	52                   	push   edx
c001f066:	50                   	push   eax
c001f067:	e8 46 e4 ff ff       	call   c001d4b2 <IDE::getBase(unsigned char)>
c001f06c:	89 c2                	mov    edx,eax
c001f06e:	89 f0                	mov    eax,esi
c001f070:	66 ef                	out    dx,ax
c001f072:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001f076:	83 c4 10             	add    esp,0x10
c001f079:	41                   	inc    ecx
c001f07a:	eb c1                	jmp    c001f03d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001f07c:	31 f6                	xor    esi,esi
c001f07e:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001f084:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001f08b:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001f08f:	75 06                	jne    c001f097 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001f091:	01 f6                	add    esi,esi
c001f093:	01 f5                	add    ebp,esi
c001f095:	eb bd                	jmp    c001f054 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001f097:	51                   	push   ecx
c001f098:	51                   	push   ecx
c001f099:	52                   	push   edx
c001f09a:	50                   	push   eax
c001f09b:	e8 12 e4 ff ff       	call   c001d4b2 <IDE::getBase(unsigned char)>
c001f0a0:	89 c2                	mov    edx,eax
c001f0a2:	66 ed                	in     ax,dx
c001f0a4:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001f0a9:	83 c4 10             	add    esp,0x10
c001f0ac:	46                   	inc    esi
c001f0ad:	eb cf                	jmp    c001f07e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001f0af:	51                   	push   ecx
c001f0b0:	51                   	push   ecx
c001f0b1:	52                   	push   edx
c001f0b2:	50                   	push   eax
c001f0b3:	e8 7a e5 ff ff       	call   c001d632 <IDE::waitInterrupt(unsigned char)>
c001f0b8:	83 c4 10             	add    esp,0x10
c001f0bb:	84 c0                	test   al,al
c001f0bd:	0f 84 df fd ff ff    	je     c001eea2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001f0c3:	bb a0 86 01 00       	mov    ebx,0x186a0
c001f0c8:	52                   	push   edx
c001f0c9:	52                   	push   edx
c001f0ca:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f0d1:	50                   	push   eax
c001f0d2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f0d8:	e8 c1 e3 ff ff       	call   c001d49e <IDE::prepareInterrupt(unsigned char)>
c001f0dd:	83 c4 10             	add    esp,0x10
c001f0e0:	50                   	push   eax
c001f0e1:	50                   	push   eax
c001f0e2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001f0e9:	50                   	push   eax
c001f0ea:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001f0f0:	e8 bd e3 ff ff       	call   c001d4b2 <IDE::getBase(unsigned char)>
c001f0f5:	8d 50 07             	lea    edx,[eax+0x7]
c001f0f8:	ec                   	in     al,dx
c001f0f9:	83 c4 10             	add    esp,0x10
c001f0fc:	a8 88                	test   al,0x88
c001f0fe:	74 0a                	je     c001f10a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001f100:	4b                   	dec    ebx
c001f101:	75 dd                	jne    c001f0e0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001f103:	bb 02 00 00 00       	mov    ebx,0x2
c001f108:	eb 02                	jmp    c001f10c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001f10a:	31 db                	xor    ebx,ebx
c001f10c:	83 c4 1c             	add    esp,0x1c
c001f10f:	89 d8                	mov    eax,ebx
c001f111:	5b                   	pop    ebx
c001f112:	5e                   	pop    esi
c001f113:	5f                   	pop    edi
c001f114:	5d                   	pop    ebp
c001f115:	c3                   	ret    

c001f116 <ATAPI::diskRemoved()>:
c001f116:	53                   	push   ebx
c001f117:	83 ec 14             	sub    esp,0x14
c001f11a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f11e:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f125:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001f12b:	e8 3e af fe ff       	call   c000a06e <LogicalDisk::unmount()>
c001f130:	58                   	pop    eax
c001f131:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001f137:	e8 e4 b8 fe ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c001f13c:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001f142:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f146:	83 c4 18             	add    esp,0x18
c001f149:	5b                   	pop    ebx
c001f14a:	e9 c1 b8 fe ff       	jmp    c000aa10 <VCache::invalidateReadBuffer()>
c001f14f:	90                   	nop

c001f150 <ATAPI::eject()>:
c001f150:	57                   	push   edi
c001f151:	b9 03 00 00 00       	mov    ecx,0x3
c001f156:	53                   	push   ebx
c001f157:	83 ec 14             	sub    esp,0x14
c001f15a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001f15e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f162:	fc                   	cld    
c001f163:	31 c0                	xor    eax,eax
c001f165:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f167:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001f16c:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001f171:	50                   	push   eax
c001f172:	50                   	push   eax
c001f173:	6a 00                	push   0x0
c001f175:	6a 00                	push   0x0
c001f177:	6a 00                	push   0x0
c001f179:	6a 02                	push   0x2
c001f17b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f17f:	50                   	push   eax
c001f180:	53                   	push   ebx
c001f181:	e8 c8 fc ff ff       	call   c001ee4e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f186:	83 c4 14             	add    esp,0x14
c001f189:	53                   	push   ebx
c001f18a:	e8 87 ff ff ff       	call   c001f116 <ATAPI::diskRemoved()>
c001f18f:	83 c4 24             	add    esp,0x24
c001f192:	31 c0                	xor    eax,eax
c001f194:	5b                   	pop    ebx
c001f195:	5f                   	pop    edi
c001f196:	c3                   	ret    
c001f197:	90                   	nop

c001f198 <ATAPI::diskInserted()>:
c001f198:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f19c:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001f1a3:	c3                   	ret    

c001f1a4 <ATAPI::detectMedia()>:
c001f1a4:	56                   	push   esi
c001f1a5:	53                   	push   ebx
c001f1a6:	83 ec 28             	sub    esp,0x28
c001f1a9:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f1ad:	6a 0c                	push   0xc
c001f1af:	6a 00                	push   0x0
c001f1b1:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001f1b5:	56                   	push   esi
c001f1b6:	e8 35 13 fe ff       	call   c00004f0 <memset>
c001f1bb:	58                   	pop    eax
c001f1bc:	5a                   	pop    edx
c001f1bd:	6a 00                	push   0x0
c001f1bf:	6a 00                	push   0x0
c001f1c1:	6a 00                	push   0x0
c001f1c3:	6a 00                	push   0x0
c001f1c5:	56                   	push   esi
c001f1c6:	53                   	push   ebx
c001f1c7:	e8 82 fc ff ff       	call   c001ee4e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f1cc:	83 c4 1c             	add    esp,0x1c
c001f1cf:	6a 0c                	push   0xc
c001f1d1:	6a 00                	push   0x0
c001f1d3:	56                   	push   esi
c001f1d4:	e8 17 13 fe ff       	call   c00004f0 <memset>
c001f1d9:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001f1de:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001f1e3:	59                   	pop    ecx
c001f1e4:	58                   	pop    eax
c001f1e5:	6a 01                	push   0x1
c001f1e7:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001f1eb:	50                   	push   eax
c001f1ec:	6a 00                	push   0x0
c001f1ee:	6a 12                	push   0x12
c001f1f0:	56                   	push   esi
c001f1f1:	53                   	push   ebx
c001f1f2:	e8 57 fc ff ff       	call   c001ee4e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f1f7:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001f1fb:	83 c4 20             	add    esp,0x20
c001f1fe:	83 e0 7f             	and    eax,0x7f
c001f201:	83 f8 70             	cmp    eax,0x70
c001f204:	74 15                	je     c001f21b <ATAPI::detectMedia()+0x77>
c001f206:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f20d:	75 0c                	jne    c001f21b <ATAPI::detectMedia()+0x77>
c001f20f:	83 ec 0c             	sub    esp,0xc
c001f212:	53                   	push   ebx
c001f213:	e8 80 ff ff ff       	call   c001f198 <ATAPI::diskInserted()>
c001f218:	83 c4 10             	add    esp,0x10
c001f21b:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001f21f:	83 e0 0f             	and    eax,0xf
c001f222:	83 f8 02             	cmp    eax,0x2
c001f225:	75 1b                	jne    c001f242 <ATAPI::detectMedia()+0x9e>
c001f227:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001f22c:	75 2d                	jne    c001f25b <ATAPI::detectMedia()+0xb7>
c001f22e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f235:	74 24                	je     c001f25b <ATAPI::detectMedia()+0xb7>
c001f237:	83 ec 0c             	sub    esp,0xc
c001f23a:	53                   	push   ebx
c001f23b:	e8 d6 fe ff ff       	call   c001f116 <ATAPI::diskRemoved()>
c001f240:	eb 16                	jmp    c001f258 <ATAPI::detectMedia()+0xb4>
c001f242:	85 c0                	test   eax,eax
c001f244:	75 15                	jne    c001f25b <ATAPI::detectMedia()+0xb7>
c001f246:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f24d:	75 0c                	jne    c001f25b <ATAPI::detectMedia()+0xb7>
c001f24f:	83 ec 0c             	sub    esp,0xc
c001f252:	53                   	push   ebx
c001f253:	e8 40 ff ff ff       	call   c001f198 <ATAPI::diskInserted()>
c001f258:	83 c4 10             	add    esp,0x10
c001f25b:	83 c4 24             	add    esp,0x24
c001f25e:	5b                   	pop    ebx
c001f25f:	5e                   	pop    esi
c001f260:	c3                   	ret    
c001f261:	90                   	nop

c001f262 <ATAPI::open(int, int, void*)>:
c001f262:	56                   	push   esi
c001f263:	53                   	push   ebx
c001f264:	50                   	push   eax
c001f265:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f269:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f26d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f271:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f277:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001f27d:	c1 e0 06             	shl    eax,0x6
c001f280:	01 d0                	add    eax,edx
c001f282:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001f289:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001f28f:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001f296:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001f2a0:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f2a6:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001f2ad:	6a 04                	push   0x4
c001f2af:	6a 0c                	push   0xc
c001f2b1:	51                   	push   ecx
c001f2b2:	52                   	push   edx
c001f2b3:	e8 0c e2 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2b8:	90                   	nop
c001f2b9:	90                   	nop
c001f2ba:	6a 00                	push   0x0
c001f2bc:	6a 0c                	push   0xc
c001f2be:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001f2c5:	50                   	push   eax
c001f2c6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001f2cc:	e8 f3 e1 ff ff       	call   c001d4c4 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001f2d1:	83 c4 14             	add    esp,0x14
c001f2d4:	68 78 01 00 00       	push   0x178
c001f2d9:	e8 25 00 ff ff       	call   c000f303 <malloc>
c001f2de:	83 c4 0c             	add    esp,0xc
c001f2e1:	89 c6                	mov    esi,eax
c001f2e3:	6a 00                	push   0x0
c001f2e5:	68 ff ff ff 7f       	push   0x7fffffff
c001f2ea:	6a 00                	push   0x0
c001f2ec:	6a 00                	push   0x0
c001f2ee:	53                   	push   ebx
c001f2ef:	68 83 50 02 c0       	push   0xc0025083
c001f2f4:	50                   	push   eax
c001f2f5:	e8 b2 ab fe ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001f2fa:	83 c4 14             	add    esp,0x14
c001f2fd:	56                   	push   esi
c001f2fe:	e8 69 ac fe ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c001f303:	5a                   	pop    edx
c001f304:	0f be c0             	movsx  eax,al
c001f307:	59                   	pop    ecx
c001f308:	50                   	push   eax
c001f309:	68 c8 4e 02 c0       	push   0xc0024ec8
c001f30e:	e8 51 7c fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f313:	58                   	pop    eax
c001f314:	5a                   	pop    edx
c001f315:	56                   	push   esi
c001f316:	53                   	push   ebx
c001f317:	e8 76 9d fe ff       	call   c0009092 <Device::addChild(Device*)>
c001f31c:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001f322:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f325:	e8 b4 a1 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001f32a:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001f331:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f334:	e8 6b fe ff ff       	call   c001f1a4 <ATAPI::detectMedia()>
c001f339:	83 c4 14             	add    esp,0x14
c001f33c:	31 c0                	xor    eax,eax
c001f33e:	5b                   	pop    ebx
c001f33f:	5e                   	pop    esi
c001f340:	c3                   	ret    
c001f341:	90                   	nop

c001f342 <ATAPI::read(unsigned long long, int, void*)>:
c001f342:	55                   	push   ebp
c001f343:	57                   	push   edi
c001f344:	56                   	push   esi
c001f345:	53                   	push   ebx
c001f346:	83 ec 1c             	sub    esp,0x1c
c001f349:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f34d:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f351:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001f355:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f35c:	74 3c                	je     c001f39a <ATAPI::read(unsigned long long, int, void*)+0x58>
c001f35e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001f362:	b9 03 00 00 00       	mov    ecx,0x3
c001f367:	fc                   	cld    
c001f368:	31 c0                	xor    eax,eax
c001f36a:	0f ce                	bswap  esi
c001f36c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001f36e:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001f373:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001f377:	89 e8                	mov    eax,ebp
c001f379:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001f37d:	50                   	push   eax
c001f37e:	50                   	push   eax
c001f37f:	55                   	push   ebp
c001f380:	c1 e5 0b             	shl    ebp,0xb
c001f383:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001f387:	6a 00                	push   0x0
c001f389:	55                   	push   ebp
c001f38a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001f38e:	50                   	push   eax
c001f38f:	53                   	push   ebx
c001f390:	e8 b9 fa ff ff       	call   c001ee4e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001f395:	83 c4 20             	add    esp,0x20
c001f398:	eb 1a                	jmp    c001f3b4 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001f39a:	83 ec 0c             	sub    esp,0xc
c001f39d:	53                   	push   ebx
c001f39e:	e8 01 fe ff ff       	call   c001f1a4 <ATAPI::detectMedia()>
c001f3a3:	83 c4 10             	add    esp,0x10
c001f3a6:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001f3ad:	75 af                	jne    c001f35e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001f3af:	b8 02 00 00 00       	mov    eax,0x2
c001f3b4:	83 c4 1c             	add    esp,0x1c
c001f3b7:	5b                   	pop    ebx
c001f3b8:	5e                   	pop    esi
c001f3b9:	5f                   	pop    edi
c001f3ba:	5d                   	pop    ebp
c001f3bb:	c3                   	ret    

c001f3bc <SATA::close(int, int, void*)>:
c001f3bc:	83 ec 0c             	sub    esp,0xc
c001f3bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f3c9:	85 c0                	test   eax,eax
c001f3cb:	74 0c                	je     c001f3d9 <SATA::close(int, int, void*)+0x1d>
c001f3cd:	83 ec 0c             	sub    esp,0xc
c001f3d0:	8b 10                	mov    edx,DWORD PTR [eax]
c001f3d2:	50                   	push   eax
c001f3d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f3d6:	83 c4 10             	add    esp,0x10
c001f3d9:	31 c0                	xor    eax,eax
c001f3db:	83 c4 0c             	add    esp,0xc
c001f3de:	c3                   	ret    
c001f3df:	90                   	nop

c001f3e0 <SATA::powerSaving(PowerSavingLevel)>:
c001f3e0:	c3                   	ret    
c001f3e1:	90                   	nop

c001f3e2 <SATA::open(int, int, void*)>:
c001f3e2:	56                   	push   esi
c001f3e3:	53                   	push   ebx
c001f3e4:	83 ec 10             	sub    esp,0x10
c001f3e7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001f3eb:	68 10 4f 02 c0       	push   0xc0024f10
c001f3f0:	e8 6f 7b fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f3f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001f3f9:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001f403:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001f409:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001f413:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f417:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001f421:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001f427:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001f42e:	e8 0b 04 ff ff       	call   c000f83e <Phys::allocatePage()>
c001f433:	89 c6                	mov    esi,eax
c001f435:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001f43b:	81 c6 00 10 00 00    	add    esi,0x1000
c001f441:	e8 f8 03 ff ff       	call   c000f83e <Phys::allocatePage()>
c001f446:	83 c4 10             	add    esp,0x10
c001f449:	39 c6                	cmp    esi,eax
c001f44b:	74 10                	je     c001f45d <SATA::open(int, int, void*)+0x7b>
c001f44d:	83 ec 0c             	sub    esp,0xc
c001f450:	68 1c 4f 02 c0       	push   0xc0024f1c
c001f455:	e8 f0 01 ff ff       	call   c000f64a <KePanic(char const*)>
c001f45a:	83 c4 10             	add    esp,0x10
c001f45d:	83 ec 0c             	sub    esp,0xc
c001f460:	6a 02                	push   0x2
c001f462:	e8 f2 35 ff ff       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c001f467:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001f46d:	6a 03                	push   0x3
c001f46f:	50                   	push   eax
c001f470:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001f476:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c001f47c:	e8 bb 3c ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c001f481:	83 c4 14             	add    esp,0x14
c001f484:	53                   	push   ebx
c001f485:	e8 54 a0 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001f48a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001f48d:	e8 ec ae fe ff       	call   c000a37e <createPartitionsForDisk(PhysicalDisk*)>
c001f492:	83 c4 14             	add    esp,0x14
c001f495:	31 c0                	xor    eax,eax
c001f497:	5b                   	pop    ebx
c001f498:	5e                   	pop    esi
c001f499:	c3                   	ret    

c001f49a <SATA::SATA()>:
c001f49a:	83 ec 0c             	sub    esp,0xc
c001f49d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4a1:	83 ec 04             	sub    esp,0x4
c001f4a4:	68 00 02 00 00       	push   0x200
c001f4a9:	68 30 4f 02 c0       	push   0xc0024f30
c001f4ae:	50                   	push   eax
c001f4af:	e8 c2 9f fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f4b4:	83 c4 10             	add    esp,0x10
c001f4b7:	ba a0 4f 02 c0       	mov    edx,0xc0024fa0
c001f4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c0:	89 10                	mov    DWORD PTR [eax],edx
c001f4c2:	90                   	nop
c001f4c3:	83 c4 0c             	add    esp,0xc
c001f4c6:	c3                   	ret    
c001f4c7:	90                   	nop

c001f4c8 <SATA::access(unsigned long long, int, void*, bool)>:
c001f4c8:	55                   	push   ebp
c001f4c9:	57                   	push   edi
c001f4ca:	56                   	push   esi
c001f4cb:	53                   	push   ebx
c001f4cc:	83 ec 2c             	sub    esp,0x2c
c001f4cf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f4d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001f4d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f4db:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f4df:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001f4e3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f4e7:	fa                   	cli    
c001f4e8:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c001f4ee:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001f4f3:	7e 10                	jle    c001f505 <SATA::access(unsigned long long, int, void*, bool)+0x3d>
c001f4f5:	83 ec 0c             	sub    esp,0xc
c001f4f8:	68 40 4f 02 c0       	push   0xc0024f40
c001f4fd:	e8 48 01 ff ff       	call   c000f64a <KePanic(char const*)>
c001f502:	83 c4 10             	add    esp,0x10
c001f505:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001f50b:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001f511:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f517:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f51b:	89 d0                	mov    eax,edx
c001f51d:	c1 e0 07             	shl    eax,0x7
c001f520:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f524:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f52e:	51                   	push   ecx
c001f52f:	8d 42 02             	lea    eax,[edx+0x2]
c001f532:	51                   	push   ecx
c001f533:	c1 e0 07             	shl    eax,0x7
c001f536:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f53a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f53e:	50                   	push   eax
c001f53f:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001f545:	e8 fe ed ff ff       	call   c001e348 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f54a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f54e:	83 c4 10             	add    esp,0x10
c001f551:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f556:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f55a:	0f 84 a4 01 00 00    	je     c001f704 <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c001f560:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f564:	c1 e0 09             	shl    eax,0x9
c001f567:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f56c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f570:	74 0e                	je     c001f580 <SATA::access(unsigned long long, int, void*, bool)+0xb8>
c001f572:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001f578:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001f57c:	89 c1                	mov    ecx,eax
c001f57e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f580:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f586:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f58a:	8d 42 02             	lea    eax,[edx+0x2]
c001f58d:	c1 e0 07             	shl    eax,0x7
c001f590:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001f594:	8b 00                	mov    eax,DWORD PTR [eax]
c001f596:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f59c:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f5a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f5a6:	c1 e1 05             	shl    ecx,0x5
c001f5a9:	01 c8                	add    eax,ecx
c001f5ab:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f5af:	83 e1 01             	and    ecx,0x1
c001f5b2:	89 ce                	mov    esi,ecx
c001f5b4:	8a 08                	mov    cl,BYTE PTR [eax]
c001f5b6:	c1 e6 06             	shl    esi,0x6
c001f5b9:	83 e1 bf             	and    ecx,0xffffffbf
c001f5bc:	09 f1                	or     ecx,esi
c001f5be:	88 08                	mov    BYTE PTR [eax],cl
c001f5c0:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f5c2:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001f5c8:	81 c9 05 00 01 00    	or     ecx,0x10005
c001f5ce:	89 08                	mov    DWORD PTR [eax],ecx
c001f5d0:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001f5d6:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001f5dc:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001f5e2:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001f5e5:	50                   	push   eax
c001f5e6:	68 90 00 00 00       	push   0x90
c001f5eb:	6a 00                	push   0x0
c001f5ed:	56                   	push   esi
c001f5ee:	e8 fd 0e fe ff       	call   c00004f0 <memset>
c001f5f3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001f5f9:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001f5ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001f603:	83 c4 10             	add    esp,0x10
c001f606:	48                   	dec    eax
c001f607:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f60c:	89 c1                	mov    ecx,eax
c001f60e:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001f614:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f619:	09 c8                	or     eax,ecx
c001f61b:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001f621:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001f627:	83 c8 80             	or     eax,0xffffff80
c001f62a:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001f630:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f633:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f637:	25 00 7f 00 00       	and    eax,0x7f00
c001f63c:	0d 27 80 ff ff       	or     eax,0xffff8027
c001f641:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f646:	66 89 06             	mov    WORD PTR [esi],ax
c001f649:	b0 35                	mov    al,0x35
c001f64b:	75 02                	jne    c001f64f <SATA::access(unsigned long long, int, void*, bool)+0x187>
c001f64d:	b0 25                	mov    al,0x25
c001f64f:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001f652:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001f656:	89 e8                	mov    eax,ebp
c001f658:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001f65c:	c1 e8 10             	shr    eax,0x10
c001f65f:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001f662:	89 e8                	mov    eax,ebp
c001f664:	c1 e8 18             	shr    eax,0x18
c001f667:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001f66a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001f66e:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001f671:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001f675:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001f678:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001f67c:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001f680:	89 d6                	mov    esi,edx
c001f682:	31 c0                	xor    eax,eax
c001f684:	c1 e6 07             	shl    esi,0x7
c001f687:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001f68b:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001f691:	80 e1 88             	and    cl,0x88
c001f694:	74 0a                	je     c001f6a0 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001f696:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f69b:	74 0a                	je     c001f6a7 <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c001f69d:	40                   	inc    eax
c001f69e:	eb eb                	jmp    c001f68b <SATA::access(unsigned long long, int, void*, bool)+0x1c3>
c001f6a0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f6a5:	75 0a                	jne    c001f6b1 <SATA::access(unsigned long long, int, void*, bool)+0x1e9>
c001f6a7:	83 ec 0c             	sub    esp,0xc
c001f6aa:	68 79 4f 02 c0       	push   0xc0024f79
c001f6af:	eb 36                	jmp    c001f6e7 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001f6b1:	b8 01 00 00 00       	mov    eax,0x1
c001f6b6:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001f6ba:	c1 e2 07             	shl    edx,0x7
c001f6bd:	d3 e0                	shl    eax,cl
c001f6bf:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001f6c3:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001f6c9:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001f6cf:	85 c8                	test   eax,ecx
c001f6d1:	74 25                	je     c001f6f8 <SATA::access(unsigned long long, int, void*, bool)+0x230>
c001f6d3:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001f6d9:	0f ba e1 1e          	bt     ecx,0x1e
c001f6dd:	73 ea                	jae    c001f6c9 <SATA::access(unsigned long long, int, void*, bool)+0x201>
c001f6df:	83 ec 0c             	sub    esp,0xc
c001f6e2:	68 87 4f 02 c0       	push   0xc0024f87
c001f6e7:	e8 78 78 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f6ec:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001f6f3:	83 c4 10             	add    esp,0x10
c001f6f6:	eb 13                	jmp    c001f70b <SATA::access(unsigned long long, int, void*, bool)+0x243>
c001f6f8:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001f6fe:	0f ba e0 1e          	bt     eax,0x1e
c001f702:	73 18                	jae    c001f71c <SATA::access(unsigned long long, int, void*, bool)+0x254>
c001f704:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001f70b:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c001f712:	75 01                	jne    c001f715 <SATA::access(unsigned long long, int, void*, bool)+0x24d>
c001f714:	fb                   	sti    
c001f715:	b8 01 00 00 00       	mov    eax,0x1
c001f71a:	eb 2c                	jmp    c001f748 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001f71c:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001f721:	75 10                	jne    c001f733 <SATA::access(unsigned long long, int, void*, bool)+0x26b>
c001f723:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001f729:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001f72d:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f731:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f733:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c001f73a:	a1 d0 d6 02 c0       	mov    eax,ds:0xc002d6d0
c001f73f:	85 c0                	test   eax,eax
c001f741:	75 03                	jne    c001f746 <SATA::access(unsigned long long, int, void*, bool)+0x27e>
c001f743:	fb                   	sti    
c001f744:	eb 02                	jmp    c001f748 <SATA::access(unsigned long long, int, void*, bool)+0x280>
c001f746:	31 c0                	xor    eax,eax
c001f748:	83 c4 2c             	add    esp,0x2c
c001f74b:	5b                   	pop    ebx
c001f74c:	5e                   	pop    esi
c001f74d:	5f                   	pop    edi
c001f74e:	5d                   	pop    ebp
c001f74f:	c3                   	ret    

c001f750 <SATA::read(unsigned long long, int, void*)>:
c001f750:	57                   	push   edi
c001f751:	b8 04 00 00 00       	mov    eax,0x4
c001f756:	56                   	push   esi
c001f757:	53                   	push   ebx
c001f758:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001f75c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001f760:	8d 7a ff             	lea    edi,[edx-0x1]
c001f763:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f767:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001f76b:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001f771:	77 25                	ja     c001f798 <SATA::read(unsigned long long, int, void*)+0x48>
c001f773:	b8 06 00 00 00       	mov    eax,0x6
c001f778:	85 f6                	test   esi,esi
c001f77a:	74 1c                	je     c001f798 <SATA::read(unsigned long long, int, void*)+0x48>
c001f77c:	50                   	push   eax
c001f77d:	50                   	push   eax
c001f77e:	6a 00                	push   0x0
c001f780:	56                   	push   esi
c001f781:	52                   	push   edx
c001f782:	53                   	push   ebx
c001f783:	51                   	push   ecx
c001f784:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001f788:	e8 3b fd ff ff       	call   c001f4c8 <SATA::access(unsigned long long, int, void*, bool)>
c001f78d:	83 c4 20             	add    esp,0x20
c001f790:	85 c0                	test   eax,eax
c001f792:	0f 95 c0             	setne  al
c001f795:	0f b6 c0             	movzx  eax,al
c001f798:	5b                   	pop    ebx
c001f799:	5e                   	pop    esi
c001f79a:	5f                   	pop    edi
c001f79b:	c3                   	ret    

c001f79c <SATA::write(unsigned long long, int, void*)>:
c001f79c:	55                   	push   ebp
c001f79d:	b8 04 00 00 00       	mov    eax,0x4
c001f7a2:	57                   	push   edi
c001f7a3:	56                   	push   esi
c001f7a4:	53                   	push   ebx
c001f7a5:	83 ec 0c             	sub    esp,0xc
c001f7a8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001f7ac:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001f7b0:	8d 73 ff             	lea    esi,[ebx-0x1]
c001f7b3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001f7b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f7bb:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001f7c1:	77 3d                	ja     c001f800 <SATA::write(unsigned long long, int, void*)+0x64>
c001f7c3:	b8 06 00 00 00       	mov    eax,0x6
c001f7c8:	85 ed                	test   ebp,ebp
c001f7ca:	74 34                	je     c001f800 <SATA::write(unsigned long long, int, void*)+0x64>
c001f7cc:	c1 e3 09             	shl    ebx,0x9
c001f7cf:	01 eb                	add    ebx,ebp
c001f7d1:	89 d6                	mov    esi,edx
c001f7d3:	89 cf                	mov    edi,ecx
c001f7d5:	83 c6 01             	add    esi,0x1
c001f7d8:	83 d7 00             	adc    edi,0x0
c001f7db:	50                   	push   eax
c001f7dc:	50                   	push   eax
c001f7dd:	6a 01                	push   0x1
c001f7df:	55                   	push   ebp
c001f7e0:	81 c5 00 02 00 00    	add    ebp,0x200
c001f7e6:	6a 01                	push   0x1
c001f7e8:	51                   	push   ecx
c001f7e9:	52                   	push   edx
c001f7ea:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001f7ee:	e8 d5 fc ff ff       	call   c001f4c8 <SATA::access(unsigned long long, int, void*, bool)>
c001f7f3:	83 c4 20             	add    esp,0x20
c001f7f6:	89 f2                	mov    edx,esi
c001f7f8:	89 f9                	mov    ecx,edi
c001f7fa:	39 dd                	cmp    ebp,ebx
c001f7fc:	75 d3                	jne    c001f7d1 <SATA::write(unsigned long long, int, void*)+0x35>
c001f7fe:	31 c0                	xor    eax,eax
c001f800:	83 c4 0c             	add    esp,0xc
c001f803:	5b                   	pop    ebx
c001f804:	5e                   	pop    esi
c001f805:	5f                   	pop    edi
c001f806:	5d                   	pop    ebp
c001f807:	c3                   	ret    

c001f808 <SATAPI::write(unsigned long long, int, void*)>:
c001f808:	b8 03 00 00 00       	mov    eax,0x3
c001f80d:	c3                   	ret    

c001f80e <SATAPI::close(int, int, void*)>:
c001f80e:	83 ec 0c             	sub    esp,0xc
c001f811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f815:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001f81b:	85 c0                	test   eax,eax
c001f81d:	74 0c                	je     c001f82b <SATAPI::close(int, int, void*)+0x1d>
c001f81f:	83 ec 0c             	sub    esp,0xc
c001f822:	8b 10                	mov    edx,DWORD PTR [eax]
c001f824:	50                   	push   eax
c001f825:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001f828:	83 c4 10             	add    esp,0x10
c001f82b:	31 c0                	xor    eax,eax
c001f82d:	83 c4 0c             	add    esp,0xc
c001f830:	c3                   	ret    
c001f831:	90                   	nop

c001f832 <SATAPI::SATAPI()>:
c001f832:	83 ec 0c             	sub    esp,0xc
c001f835:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f839:	83 ec 04             	sub    esp,0x4
c001f83c:	68 00 08 00 00       	push   0x800
c001f841:	68 d0 4f 02 c0       	push   0xc0024fd0
c001f846:	50                   	push   eax
c001f847:	e8 2a 9c fe ff       	call   c0009476 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001f84c:	83 c4 10             	add    esp,0x10
c001f84f:	ba c4 50 02 c0       	mov    edx,0xc00250c4
c001f854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f858:	89 10                	mov    DWORD PTR [eax],edx
c001f85a:	90                   	nop
c001f85b:	83 c4 0c             	add    esp,0xc
c001f85e:	c3                   	ret    
c001f85f:	90                   	nop

c001f860 <SATAPI::diskRemoved()>:
c001f860:	c3                   	ret    
c001f861:	90                   	nop

c001f862 <SATAPI::diskInserted()>:
c001f862:	83 ec 18             	sub    esp,0x18
c001f865:	68 dc 4f 02 c0       	push   0xc0024fdc
c001f86a:	e8 f5 76 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001f86f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f873:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001f87a:	83 c4 1c             	add    esp,0x1c
c001f87d:	c3                   	ret    

c001f87e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001f87e:	55                   	push   ebp
c001f87f:	57                   	push   edi
c001f880:	56                   	push   esi
c001f881:	53                   	push   ebx
c001f882:	83 ec 34             	sub    esp,0x34
c001f885:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001f889:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f88d:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001f891:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f895:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001f899:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001f89f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001f8a5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001f8a9:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001f8af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001f8b3:	83 c0 02             	add    eax,0x2
c001f8b6:	c1 e0 07             	shl    eax,0x7
c001f8b9:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f8bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f8c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f8c5:	c1 e0 07             	shl    eax,0x7
c001f8c8:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f8cc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001f8d0:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001f8da:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001f8de:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001f8e4:	e8 5f ea ff ff       	call   c001e348 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001f8e9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001f8ed:	83 c4 10             	add    esp,0x10
c001f8f0:	b8 01 00 00 00       	mov    eax,0x1
c001f8f5:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001f8fa:	0f 84 53 02 00 00    	je     c001fb53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001f900:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f906:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f90a:	8b 00                	mov    eax,DWORD PTR [eax]
c001f90c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001f912:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001f918:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f91c:	c1 e1 05             	shl    ecx,0x5
c001f91f:	01 c8                	add    eax,ecx
c001f921:	8b 08                	mov    ecx,DWORD PTR [eax]
c001f923:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001f929:	81 c9 25 00 01 00    	or     ecx,0x10025
c001f92f:	89 08                	mov    DWORD PTR [eax],ecx
c001f931:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001f937:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001f93d:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001f943:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001f946:	8d 7b 40             	lea    edi,[ebx+0x40]
c001f949:	50                   	push   eax
c001f94a:	68 90 00 00 00       	push   0x90
c001f94f:	6a 00                	push   0x0
c001f951:	53                   	push   ebx
c001f952:	e8 99 0b fe ff       	call   c00004f0 <memset>
c001f957:	b9 0c 00 00 00       	mov    ecx,0xc
c001f95c:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001f960:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f962:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001f968:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001f96c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001f972:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001f976:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001f97a:	48                   	dec    eax
c001f97b:	25 ff ff 3f 00       	and    eax,0x3fffff
c001f980:	89 c1                	mov    ecx,eax
c001f982:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001f988:	25 00 00 c0 ff       	and    eax,0xffc00000
c001f98d:	09 c8                	or     eax,ecx
c001f98f:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001f995:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001f99b:	83 c8 80             	or     eax,0xffffff80
c001f99e:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001f9a4:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001f9a7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001f9ab:	25 00 7f 00 00       	and    eax,0x7f00
c001f9b0:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001f9b4:	0d 27 80 ff ff       	or     eax,0xffff8027
c001f9b9:	66 89 03             	mov    WORD PTR [ebx],ax
c001f9bc:	89 d0                	mov    eax,edx
c001f9be:	c1 ea 18             	shr    edx,0x18
c001f9c1:	c1 e8 10             	shr    eax,0x10
c001f9c4:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001f9c7:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001f9ca:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001f9ce:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001f9d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001f9d5:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001f9d8:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001f9dc:	83 c4 10             	add    esp,0x10
c001f9df:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001f9e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f9e7:	31 c0                	xor    eax,eax
c001f9e9:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001f9ef:	80 e1 88             	and    cl,0x88
c001f9f2:	74 0a                	je     c001f9fe <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001f9f4:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001f9f9:	74 0a                	je     c001fa05 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001f9fb:	40                   	inc    eax
c001f9fc:	eb eb                	jmp    c001f9e9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001f9fe:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001fa03:	75 43                	jne    c001fa48 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001fa05:	83 ec 0c             	sub    esp,0xc
c001fa08:	68 f4 4f 02 c0       	push   0xc0024ff4
c001fa0d:	e8 52 75 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fa12:	58                   	pop    eax
c001fa13:	5a                   	pop    edx
c001fa14:	68 09 50 02 c0       	push   0xc0025009
c001fa19:	ff 35 54 ce 02 c0    	push   DWORD PTR ds:0xc002ce54
c001fa1f:	e8 fc 23 ff ff       	call   c0011e20 <VgaText::puts(char const*)>
c001fa24:	59                   	pop    ecx
c001fa25:	5b                   	pop    ebx
c001fa26:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001fa2a:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001fa30:	e8 ad e9 ff ff       	call   c001e3e2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001fa35:	5e                   	pop    esi
c001fa36:	5f                   	pop    edi
c001fa37:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001fa3b:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001fa41:	e8 7c e9 ff ff       	call   c001e3c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001fa46:	eb 48                	jmp    c001fa90 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001fa48:	be 01 00 00 00       	mov    esi,0x1
c001fa4d:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001fa51:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001fa55:	d3 e6                	shl    esi,cl
c001fa57:	c1 e7 07             	shl    edi,0x7
c001fa5a:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001fa60:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001fa65:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001fa69:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001fa6f:	85 c6                	test   esi,eax
c001fa71:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001fa77:	0f 84 a3 00 00 00    	je     c001fb20 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001fa7d:	0f ba e0 1e          	bt     eax,0x1e
c001fa81:	73 1a                	jae    c001fa9d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001fa83:	83 ec 0c             	sub    esp,0xc
c001fa86:	68 1b 50 02 c0       	push   0xc002501b
c001fa8b:	e8 d4 74 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fa90:	83 c4 10             	add    esp,0x10
c001fa93:	b8 01 00 00 00       	mov    eax,0x1
c001fa98:	e9 b6 00 00 00       	jmp    c001fb53 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001fa9d:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001faa3:	83 f8 0d             	cmp    eax,0xd
c001faa6:	77 0a                	ja     c001fab2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001faa8:	83 ec 0c             	sub    esp,0xc
c001faab:	68 c8 00 00 00       	push   0xc8
c001fab0:	eb 28                	jmp    c001fada <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001fab2:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001fab8:	83 f8 0d             	cmp    eax,0xd
c001fabb:	77 0a                	ja     c001fac7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001fabd:	83 ec 0c             	sub    esp,0xc
c001fac0:	68 58 02 00 00       	push   0x258
c001fac5:	eb 13                	jmp    c001fada <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001fac7:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001facd:	83 f8 06             	cmp    eax,0x6
c001fad0:	77 10                	ja     c001fae2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001fad2:	83 ec 0c             	sub    esp,0xc
c001fad5:	68 dc 05 00 00       	push   0x5dc
c001fada:	e8 8d 69 ff ff       	call   c001646c <milliTenthSleep(unsigned int)>
c001fadf:	83 c4 10             	add    esp,0x10
c001fae2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001fae6:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001fae9:	75 06                	jne    c001faf1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001faeb:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001faef:	74 15                	je     c001fb06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001faf1:	83 fb 06             	cmp    ebx,0x6
c001faf4:	77 10                	ja     c001fb06 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001faf6:	83 ec 0c             	sub    esp,0xc
c001faf9:	68 c4 09 00 00       	push   0x9c4
c001fafe:	e8 69 69 ff ff       	call   c001646c <milliTenthSleep(unsigned int)>
c001fb03:	83 c4 10             	add    esp,0x10
c001fb06:	43                   	inc    ebx
c001fb07:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001fb0d:	0f 85 56 ff ff ff    	jne    c001fa69 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001fb13:	83 ec 0c             	sub    esp,0xc
c001fb16:	68 2e 50 02 c0       	push   0xc002502e
c001fb1b:	e9 6b ff ff ff       	jmp    c001fa8b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001fb20:	0f ba e0 1e          	bt     eax,0x1e
c001fb24:	73 0d                	jae    c001fb33 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001fb26:	83 ec 0c             	sub    esp,0xc
c001fb29:	68 42 50 02 c0       	push   0xc0025042
c001fb2e:	e9 58 ff ff ff       	jmp    c001fa8b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001fb33:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001fb38:	74 17                	je     c001fb51 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001fb3a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001fb3f:	74 10                	je     c001fb51 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001fb41:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001fb47:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001fb4b:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001fb4f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001fb51:	31 c0                	xor    eax,eax
c001fb53:	83 c4 2c             	add    esp,0x2c
c001fb56:	5b                   	pop    ebx
c001fb57:	5e                   	pop    esi
c001fb58:	5f                   	pop    edi
c001fb59:	5d                   	pop    ebp
c001fb5a:	c3                   	ret    
c001fb5b:	90                   	nop

c001fb5c <SATAPI::eject()>:
c001fb5c:	57                   	push   edi
c001fb5d:	b9 03 00 00 00       	mov    ecx,0x3
c001fb62:	83 ec 18             	sub    esp,0x18
c001fb65:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001fb69:	fc                   	cld    
c001fb6a:	31 c0                	xor    eax,eax
c001fb6c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fb6e:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001fb73:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001fb78:	50                   	push   eax
c001fb79:	6a 00                	push   0x0
c001fb7b:	6a 00                	push   0x0
c001fb7d:	6a 00                	push   0x0
c001fb7f:	6a 00                	push   0x0
c001fb81:	6a 02                	push   0x2
c001fb83:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001fb87:	50                   	push   eax
c001fb88:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001fb8c:	e8 ed fc ff ff       	call   c001f87e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fb91:	31 c0                	xor    eax,eax
c001fb93:	83 c4 38             	add    esp,0x38
c001fb96:	5f                   	pop    edi
c001fb97:	c3                   	ret    

c001fb98 <SATAPI::detectMedia()>:
c001fb98:	53                   	push   ebx
c001fb99:	83 ec 14             	sub    esp,0x14
c001fb9c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001fba0:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fba6:	e8 75 ae fe ff       	call   c000aa20 <VCache::writeWriteBuffer()>
c001fbab:	59                   	pop    ecx
c001fbac:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001fbb2:	e8 59 ae fe ff       	call   c000aa10 <VCache::invalidateReadBuffer()>
c001fbb7:	c7 04 24 57 50 02 c0 	mov    DWORD PTR [esp],0xc0025057
c001fbbe:	e8 a1 73 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fbc3:	83 c4 10             	add    esp,0x10
c001fbc6:	31 c0                	xor    eax,eax
c001fbc8:	8b 14 85 80 a7 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5880]
c001fbcf:	85 d2                	test   edx,edx
c001fbd1:	74 0f                	je     c001fbe2 <SATAPI::detectMedia()+0x4a>
c001fbd3:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001fbd9:	75 07                	jne    c001fbe2 <SATAPI::detectMedia()+0x4a>
c001fbdb:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001fbe2:	40                   	inc    eax
c001fbe3:	83 f8 1a             	cmp    eax,0x1a
c001fbe6:	75 e0                	jne    c001fbc8 <SATAPI::detectMedia()+0x30>
c001fbe8:	83 c4 08             	add    esp,0x8
c001fbeb:	5b                   	pop    ebx
c001fbec:	c3                   	ret    
c001fbed:	90                   	nop

c001fbee <SATAPI::open(int, int, void*)>:
c001fbee:	56                   	push   esi
c001fbef:	53                   	push   ebx
c001fbf0:	51                   	push   ecx
c001fbf1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fbf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fbf9:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001fc03:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001fc09:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001fc13:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001fc17:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001fc21:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001fc27:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001fc2e:	e8 0b fc fe ff       	call   c000f83e <Phys::allocatePage()>
c001fc33:	89 c6                	mov    esi,eax
c001fc35:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001fc3b:	81 c6 00 10 00 00    	add    esi,0x1000
c001fc41:	e8 f8 fb fe ff       	call   c000f83e <Phys::allocatePage()>
c001fc46:	39 c6                	cmp    esi,eax
c001fc48:	74 10                	je     c001fc5a <SATAPI::open(int, int, void*)+0x6c>
c001fc4a:	83 ec 0c             	sub    esp,0xc
c001fc4d:	68 6c 50 02 c0       	push   0xc002506c
c001fc52:	e8 f3 f9 fe ff       	call   c000f64a <KePanic(char const*)>
c001fc57:	83 c4 10             	add    esp,0x10
c001fc5a:	83 ec 0c             	sub    esp,0xc
c001fc5d:	6a 02                	push   0x2
c001fc5f:	e8 f5 2d ff ff       	call   c0012a59 <Virt::allocateKernelVirtualPages(int)>
c001fc64:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001fc6a:	6a 03                	push   0x3
c001fc6c:	50                   	push   eax
c001fc6d:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001fc73:	ff 35 f0 ce 02 c0    	push   DWORD PTR ds:0xc002cef0
c001fc79:	e8 be 34 ff ff       	call   c001313c <VAS::mapPage(unsigned long, unsigned long, int)>
c001fc7e:	83 c4 14             	add    esp,0x14
c001fc81:	68 78 01 00 00       	push   0x178
c001fc86:	e8 78 f6 fe ff       	call   c000f303 <malloc>
c001fc8b:	83 c4 0c             	add    esp,0xc
c001fc8e:	89 c6                	mov    esi,eax
c001fc90:	6a 00                	push   0x0
c001fc92:	68 ff ff ff 7f       	push   0x7fffffff
c001fc97:	6a 00                	push   0x0
c001fc99:	6a 00                	push   0x0
c001fc9b:	53                   	push   ebx
c001fc9c:	68 82 50 02 c0       	push   0xc0025082
c001fca1:	50                   	push   eax
c001fca2:	e8 05 a2 fe ff       	call   c0009eac <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001fca7:	83 c4 14             	add    esp,0x14
c001fcaa:	56                   	push   esi
c001fcab:	e8 bc a2 fe ff       	call   c0009f6c <LogicalDisk::assignDriveLetter()>
c001fcb0:	5a                   	pop    edx
c001fcb1:	0f be c0             	movsx  eax,al
c001fcb4:	59                   	pop    ecx
c001fcb5:	50                   	push   eax
c001fcb6:	68 c8 4e 02 c0       	push   0xc0024ec8
c001fcbb:	e8 a4 72 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fcc0:	58                   	pop    eax
c001fcc1:	5a                   	pop    edx
c001fcc2:	56                   	push   esi
c001fcc3:	53                   	push   ebx
c001fcc4:	e8 c9 93 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001fcc9:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001fccf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fcd2:	e8 07 98 fe ff       	call   c00094de <PhysicalDisk::startCache()>
c001fcd7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001fcde:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001fce1:	e8 b2 fe ff ff       	call   c001fb98 <SATAPI::detectMedia()>
c001fce6:	83 c4 14             	add    esp,0x14
c001fce9:	31 c0                	xor    eax,eax
c001fceb:	5b                   	pop    ebx
c001fcec:	5e                   	pop    esi
c001fced:	c3                   	ret    

c001fcee <SATAPI::read(unsigned long long, int, void*)>:
c001fcee:	57                   	push   edi
c001fcef:	56                   	push   esi
c001fcf0:	53                   	push   ebx
c001fcf1:	83 ec 30             	sub    esp,0x30
c001fcf4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001fcf8:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001fcfc:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001fd00:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001fd04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fd08:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001fd0c:	83 fe 04             	cmp    esi,0x4
c001fd0f:	7e 10                	jle    c001fd21 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001fd11:	83 ec 0c             	sub    esp,0xc
c001fd14:	68 90 50 02 c0       	push   0xc0025090
c001fd19:	e8 2c f9 fe ff       	call   c000f64a <KePanic(char const*)>
c001fd1e:	83 c4 10             	add    esp,0x10
c001fd21:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001fd27:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001fd2d:	51                   	push   ecx
c001fd2e:	50                   	push   eax
c001fd2f:	83 c0 02             	add    eax,0x2
c001fd32:	c1 e0 07             	shl    eax,0x7
c001fd35:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001fd3b:	50                   	push   eax
c001fd3c:	52                   	push   edx
c001fd3d:	e8 ca e6 ff ff       	call   c001e40c <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001fd42:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001fd46:	b9 03 00 00 00       	mov    ecx,0x3
c001fd4b:	fc                   	cld    
c001fd4c:	31 c0                	xor    eax,eax
c001fd4e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fd50:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001fd55:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001fd5a:	83 c4 0c             	add    esp,0xc
c001fd5d:	6a 00                	push   0x0
c001fd5f:	6a 00                	push   0x0
c001fd61:	6a 00                	push   0x0
c001fd63:	6a 00                	push   0x0
c001fd65:	6a 02                	push   0x2
c001fd67:	8d 44 24 30          	lea    eax,[esp+0x30]
c001fd6b:	50                   	push   eax
c001fd6c:	53                   	push   ebx
c001fd6d:	e8 0c fb ff ff       	call   c001f87e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fd72:	83 c4 20             	add    esp,0x20
c001fd75:	85 c0                	test   eax,eax
c001fd77:	75 44                	jne    c001fdbd <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001fd79:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001fd7d:	b9 03 00 00 00       	mov    ecx,0x3
c001fd82:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001fd84:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fd88:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001fd8d:	0f c8                	bswap  eax
c001fd8f:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001fd93:	89 f0                	mov    eax,esi
c001fd95:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001fd99:	50                   	push   eax
c001fd9a:	56                   	push   esi
c001fd9b:	c1 e6 0b             	shl    esi,0xb
c001fd9e:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001fda2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fda6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001fdaa:	56                   	push   esi
c001fdab:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001fdaf:	50                   	push   eax
c001fdb0:	53                   	push   ebx
c001fdb1:	e8 c8 fa ff ff       	call   c001f87e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001fdb6:	83 c4 20             	add    esp,0x20
c001fdb9:	85 c0                	test   eax,eax
c001fdbb:	74 14                	je     c001fdd1 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001fdbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001fdc1:	83 ec 0c             	sub    esp,0xc
c001fdc4:	53                   	push   ebx
c001fdc5:	e8 ce fd ff ff       	call   c001fb98 <SATAPI::detectMedia()>
c001fdca:	83 c4 10             	add    esp,0x10
c001fdcd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fdd1:	83 c4 30             	add    esp,0x30
c001fdd4:	5b                   	pop    ebx
c001fdd5:	5e                   	pop    esi
c001fdd6:	5f                   	pop    edi
c001fdd7:	c3                   	ret    

c001fdd8 <IOAPIC::close(int, int, void*)>:
c001fdd8:	b8 00 00 00 00       	mov    eax,0x0
c001fddd:	c3                   	ret    

c001fdde <apicGetBase()>:
c001fdde:	55                   	push   ebp
c001fddf:	89 e5                	mov    ebp,esp
c001fde1:	83 ec 08             	sub    esp,0x8
c001fde4:	83 ec 0c             	sub    esp,0xc
c001fde7:	68 f4 50 02 c0       	push   0xc00250f4
c001fdec:	e8 59 f8 fe ff       	call   c000f64a <KePanic(char const*)>
c001fdf1:	83 c4 10             	add    esp,0x10
c001fdf4:	b8 00 00 00 00       	mov    eax,0x0
c001fdf9:	c9                   	leave  
c001fdfa:	c3                   	ret    
c001fdfb:	90                   	nop

c001fdfc <IOAPIC::IOAPIC()>:
c001fdfc:	83 ec 0c             	sub    esp,0xc
c001fdff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe03:	83 ec 08             	sub    esp,0x8
c001fe06:	68 03 51 02 c0       	push   0xc0025103
c001fe0b:	50                   	push   eax
c001fe0c:	e8 e3 93 fe ff       	call   c00091f4 <Device::Device(char const*)>
c001fe11:	83 c4 10             	add    esp,0x10
c001fe14:	ba 24 51 02 c0       	mov    edx,0xc0025124
c001fe19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe1d:	89 10                	mov    DWORD PTR [eax],edx
c001fe1f:	90                   	nop
c001fe20:	83 c4 0c             	add    esp,0xc
c001fe23:	c3                   	ret    

c001fe24 <apicOpen()>:
c001fe24:	55                   	push   ebp
c001fe25:	89 e5                	mov    ebp,esp
c001fe27:	53                   	push   ebx
c001fe28:	83 ec 34             	sub    esp,0x34
c001fe2b:	83 ec 0c             	sub    esp,0xc
c001fe2e:	68 0b 51 02 c0       	push   0xc002510b
c001fe33:	e8 2c 71 fe ff       	call   c0006f64 <Dbg::kprintf(char const*, ...)>
c001fe38:	83 c4 10             	add    esp,0x10
c001fe3b:	a0 40 e1 02 c0       	mov    al,ds:0xc002e140
c001fe40:	83 f0 01             	xor    eax,0x1
c001fe43:	0f b6 c0             	movzx  eax,al
c001fe46:	85 c0                	test   eax,eax
c001fe48:	0f 84 a3 00 00 00    	je     c001fef1 <apicOpen()+0xcd>
c001fe4e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001fe52:	a0 e0 aa 02 c0       	mov    al,ds:0xc002aae0
c001fe57:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001fe5b:	0f b6 c0             	movzx  eax,al
c001fe5e:	39 c2                	cmp    edx,eax
c001fe60:	0f 83 84 00 00 00    	jae    c001feea <apicOpen()+0xc6>
c001fe66:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001fe6d:	83 ec 0c             	sub    esp,0xc
c001fe70:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001fe73:	e8 8b f4 fe ff       	call   c000f303 <malloc>
c001fe78:	83 c4 10             	add    esp,0x10
c001fe7b:	89 c3                	mov    ebx,eax
c001fe7d:	83 ec 0c             	sub    esp,0xc
c001fe80:	53                   	push   ebx
c001fe81:	e8 76 ff ff ff       	call   c001fdfc <IOAPIC::IOAPIC()>
c001fe86:	83 c4 10             	add    esp,0x10
c001fe89:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001fe8c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001fe90:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001fe93:	89 14 85 20 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ee0],edx
c001fe9a:	a1 00 e1 02 c0       	mov    eax,ds:0xc002e100
c001fe9f:	83 c0 01             	add    eax,0x1
c001fea2:	a3 00 e1 02 c0       	mov    ds:0xc002e100,eax
c001fea7:	a1 70 ad 02 c0       	mov    eax,ds:0xc002ad70
c001feac:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001feb2:	83 ec 08             	sub    esp,0x8
c001feb5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001feb8:	50                   	push   eax
c001feb9:	e8 d4 91 fe ff       	call   c0009092 <Device::addChild(Device*)>
c001febe:	83 c4 10             	add    esp,0x10
c001fec1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001fec4:	8b 00                	mov    eax,DWORD PTR [eax]
c001fec6:	83 c0 08             	add    eax,0x8
c001fec9:	8b 00                	mov    eax,DWORD PTR [eax]
c001fecb:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001fecf:	6a 00                	push   0x0
c001fed1:	6a 00                	push   0x0
c001fed3:	52                   	push   edx
c001fed4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001fed7:	ff d0                	call   eax
c001fed9:	83 c4 10             	add    esp,0x10
c001fedc:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001fedf:	83 c0 01             	add    eax,0x1
c001fee2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001fee5:	e9 68 ff ff ff       	jmp    c001fe52 <apicOpen()+0x2e>
c001feea:	c6 05 40 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e140,0x1
c001fef1:	e8 e8 fe ff ff       	call   c001fdde <apicGetBase()>
c001fef6:	05 f0 00 00 00       	add    eax,0xf0
c001fefb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001fefe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ff01:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff03:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001ff06:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001ff0d:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001ff14:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001ff17:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001ff1a:	89 10                	mov    DWORD PTR [eax],edx
c001ff1c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001ff23:	a1 2c aa 02 c0       	mov    eax,ds:0xc002aa2c
c001ff28:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001ff2b:	7d 7c                	jge    c001ffa9 <apicOpen()+0x185>
c001ff2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ff30:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001ff37:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001ff3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ff3d:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001ff44:	c1 e8 08             	shr    eax,0x8
c001ff47:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001ff4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001ff4e:	8b 04 85 40 aa 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd55c0]
c001ff55:	c1 e8 18             	shr    eax,0x18
c001ff58:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001ff5b:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001ff5f:	3d ff 00 00 00       	cmp    eax,0xff
c001ff64:	75 3a                	jne    c001ffa0 <apicOpen()+0x17c>
c001ff66:	e8 73 fe ff ff       	call   c001fdde <apicGetBase()>
c001ff6b:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001ff6f:	83 fa 01             	cmp    edx,0x1
c001ff72:	75 07                	jne    c001ff7b <apicOpen()+0x157>
c001ff74:	ba 60 03 00 00       	mov    edx,0x360
c001ff79:	eb 05                	jmp    c001ff80 <apicOpen()+0x15c>
c001ff7b:	ba 50 03 00 00       	mov    edx,0x350
c001ff80:	01 d0                	add    eax,edx
c001ff82:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001ff85:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ff88:	8b 00                	mov    eax,DWORD PTR [eax]
c001ff8a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001ff8d:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001ff94:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001ff98:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001ff9b:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001ff9e:	89 10                	mov    DWORD PTR [eax],edx
c001ffa0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001ffa4:	e9 7a ff ff ff       	jmp    c001ff23 <apicOpen()+0xff>
c001ffa9:	90                   	nop
c001ffaa:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001ffad:	c9                   	leave  
c001ffae:	c3                   	ret    
c001ffaf:	90                   	nop

c001ffb0 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001ffb0:	55                   	push   ebp
c001ffb1:	89 e5                	mov    ebp,esp
c001ffb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffb6:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ffbc:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ffbf:	72 1d                	jb     c001ffde <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ffc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffc4:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001ffca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffcd:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001ffd3:	01 d0                	add    eax,edx
c001ffd5:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001ffd8:	73 04                	jae    c001ffde <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001ffda:	b0 01                	mov    al,0x1
c001ffdc:	eb 02                	jmp    c001ffe0 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001ffde:	b0 00                	mov    al,0x0
c001ffe0:	5d                   	pop    ebp
c001ffe1:	c3                   	ret    

c001ffe2 <IOAPIC::read(int)>:
c001ffe2:	55                   	push   ebp
c001ffe3:	89 e5                	mov    ebp,esp
c001ffe5:	83 ec 10             	sub    esp,0x10
c001ffe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001ffeb:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001fff1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001fff4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001fff7:	0f b6 d0             	movzx  edx,al
c001fffa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001fffd:	89 10                	mov    DWORD PTR [eax],edx
c001ffff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020002:	83 c0 10             	add    eax,0x10
c0020005:	8b 00                	mov    eax,DWORD PTR [eax]
c0020007:	c9                   	leave  
c0020008:	c3                   	ret    
c0020009:	90                   	nop

c002000a <IOAPIC::open(int, int, void*)>:
c002000a:	55                   	push   ebp
c002000b:	89 e5                	mov    ebp,esp
c002000d:	57                   	push   edi
c002000e:	56                   	push   esi
c002000f:	53                   	push   ebx
c0020010:	83 ec 04             	sub    esp,0x4
c0020013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020016:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0020019:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002001f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020022:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020028:	8b 14 85 20 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd54e0]
c002002f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020032:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002003b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0020041:	8b 14 85 a0 ab 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd5460]
c0020048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002004b:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0020051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020054:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c002005a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002005d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0020063:	0f b6 f0             	movzx  esi,al
c0020066:	89 d0                	mov    eax,edx
c0020068:	ba 00 00 00 00       	mov    edx,0x0
c002006d:	89 c7                	mov    edi,eax
c002006f:	83 e7 ff             	and    edi,0xffffffff
c0020072:	89 f9                	mov    ecx,edi
c0020074:	0f b6 da             	movzx  ebx,dl
c0020077:	89 c8                	mov    eax,ecx
c0020079:	89 da                	mov    edx,ebx
c002007b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002007e:	8d 5e 08             	lea    ebx,[esi+0x8]
c0020081:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0020085:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0020089:	83 e0 00             	and    eax,0x0
c002008c:	09 d0                	or     eax,edx
c002008e:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0020092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0020095:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002009b:	8d 50 01             	lea    edx,[eax+0x1]
c002009e:	88 d1                	mov    cl,dl
c00200a0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00200a3:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c00200a9:	0f b6 d0             	movzx  edx,al
c00200ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200af:	83 c2 08             	add    edx,0x8
c00200b2:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00200b6:	0f b6 c9             	movzx  ecx,cl
c00200b9:	81 c9 00 ad de 00    	or     ecx,0xdead00
c00200bf:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00200c3:	6a 01                	push   0x1
c00200c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00200c8:	e8 15 ff ff ff       	call   c001ffe2 <IOAPIC::read(int)>
c00200cd:	83 c4 08             	add    esp,0x8
c00200d0:	c1 f8 10             	sar    eax,0x10
c00200d3:	0f b6 c0             	movzx  eax,al
c00200d6:	8d 50 01             	lea    edx,[eax+0x1]
c00200d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200dc:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c00200e2:	b8 00 00 00 00       	mov    eax,0x0
c00200e7:	8d 65 f4             	lea    esp,[ebp-0xc]
c00200ea:	5b                   	pop    ebx
c00200eb:	5e                   	pop    esi
c00200ec:	5f                   	pop    edi
c00200ed:	5d                   	pop    ebp
c00200ee:	c3                   	ret    
c00200ef:	90                   	nop

c00200f0 <IOAPIC::write(int, int)>:
c00200f0:	55                   	push   ebp
c00200f1:	89 e5                	mov    ebp,esp
c00200f3:	83 ec 10             	sub    esp,0x10
c00200f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00200f9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00200ff:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0020102:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020105:	0f b6 d0             	movzx  edx,al
c0020108:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c002010b:	89 10                	mov    DWORD PTR [eax],edx
c002010d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0020110:	8d 50 10             	lea    edx,[eax+0x10]
c0020113:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020116:	89 02                	mov    DWORD PTR [edx],eax
c0020118:	90                   	nop
c0020119:	c9                   	leave  
c002011a:	c3                   	ret    
c002011b:	90                   	nop

c002011c <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c002011c:	55                   	push   ebp
c002011d:	89 e5                	mov    ebp,esp
c002011f:	53                   	push   ebx
c0020120:	83 ec 2c             	sub    esp,0x2c
c0020123:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0020126:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0020129:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c002012c:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c002012f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0020132:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0020135:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0020138:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002013b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c002013e:	88 d8                	mov    al,bl
c0020140:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0020143:	88 c8                	mov    al,cl
c0020145:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0020148:	88 d0                	mov    al,dl
c002014a:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c002014d:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0020151:	83 c0 08             	add    eax,0x8
c0020154:	01 c0                	add    eax,eax
c0020156:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0020159:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002015d:	83 c0 08             	add    eax,0x8
c0020160:	01 c0                	add    eax,eax
c0020162:	83 c0 01             	add    eax,0x1
c0020165:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0020168:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002016b:	50                   	push   eax
c002016c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002016f:	e8 6e fe ff ff       	call   c001ffe2 <IOAPIC::read(int)>
c0020174:	83 c4 08             	add    esp,0x8
c0020177:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002017a:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0020181:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0020184:	c1 e0 18             	shl    eax,0x18
c0020187:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002018a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002018d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0020190:	52                   	push   edx
c0020191:	50                   	push   eax
c0020192:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0020195:	e8 56 ff ff ff       	call   c00200f0 <IOAPIC::write(int, int)>
c002019a:	83 c4 0c             	add    esp,0xc
c002019d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00201a0:	50                   	push   eax
c00201a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00201a4:	e8 39 fe ff ff       	call   c001ffe2 <IOAPIC::read(int)>
c00201a9:	83 c4 08             	add    esp,0x8
c00201ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00201af:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c00201b6:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c00201bd:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c00201c4:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c00201c8:	85 c0                	test   eax,eax
c00201ca:	74 09                	je     c00201d5 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c00201cc:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c00201d3:	eb 07                	jmp    c00201dc <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c00201d5:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c00201dc:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c00201e0:	85 c0                	test   eax,eax
c00201e2:	74 09                	je     c00201ed <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c00201e4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c00201eb:	eb 07                	jmp    c00201f4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c00201ed:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c00201f4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c00201fb:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c00201ff:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0020202:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0020205:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0020208:	52                   	push   edx
c0020209:	50                   	push   eax
c002020a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002020d:	e8 de fe ff ff       	call   c00200f0 <IOAPIC::write(int, int)>
c0020212:	83 c4 0c             	add    esp,0xc
c0020215:	90                   	nop
c0020216:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0020219:	c9                   	leave  
c002021a:	c3                   	ret    
c002021b:	90                   	nop

c002021c <APICTimer::close(int, int, void*)>:
c002021c:	b8 00 00 00 00       	mov    eax,0x0
c0020221:	c3                   	ret    
c0020222:	66 90                	xchg   ax,ax

c0020224 <apicTimerHandler(regs*, void*)>:
c0020224:	83 ec 0c             	sub    esp,0xc
c0020227:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002022b:	8b 08                	mov    ecx,DWORD PTR [eax]
c002022d:	b8 10 27 00 00       	mov    eax,0x2710
c0020232:	ba 00 00 00 00       	mov    edx,0x0
c0020237:	f7 f1                	div    ecx
c0020239:	83 ec 0c             	sub    esp,0xc
c002023c:	50                   	push   eax
c002023d:	e8 26 a5 fe ff       	call   c000a768 <timerHandler(unsigned int)>
c0020242:	83 c4 10             	add    esp,0x10
c0020245:	90                   	nop
c0020246:	83 c4 0c             	add    esp,0xc
c0020249:	c3                   	ret    
c002024a:	66 90                	xchg   ax,ax

c002024c <APICTimer::open(int, int, void*)>:
c002024c:	83 ec 0c             	sub    esp,0xc
c002024f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020253:	8b 00                	mov    eax,DWORD PTR [eax]
c0020255:	83 c0 24             	add    eax,0x24
c0020258:	8b 00                	mov    eax,DWORD PTR [eax]
c002025a:	83 ec 08             	sub    esp,0x8
c002025d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020265:	ff d0                	call   eax
c0020267:	83 c4 10             	add    esp,0x10
c002026a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002026e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020272:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0020278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002027c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0020280:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0020286:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002028a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0020290:	83 ec 0c             	sub    esp,0xc
c0020293:	51                   	push   ecx
c0020294:	6a 01                	push   0x1
c0020296:	68 24 02 02 c0       	push   0xc0020224
c002029b:	52                   	push   edx
c002029c:	50                   	push   eax
c002029d:	e8 9c 8d fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00202a2:	83 c4 20             	add    esp,0x20
c00202a5:	89 c2                	mov    edx,eax
c00202a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202ab:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00202b1:	b8 00 00 00 00       	mov    eax,0x0
c00202b6:	83 c4 0c             	add    esp,0xc
c00202b9:	c3                   	ret    
c00202ba:	66 90                	xchg   ax,ax

c00202bc <APICTimer::write(int)>:
c00202bc:	83 ec 0c             	sub    esp,0xc
c00202bf:	83 ec 0c             	sub    esp,0xc
c00202c2:	68 48 51 02 c0       	push   0xc0025148
c00202c7:	e8 7e f3 fe ff       	call   c000f64a <KePanic(char const*)>
c00202cc:	83 c4 10             	add    esp,0x10
c00202cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00202d7:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00202dd:	90                   	nop
c00202de:	83 c4 0c             	add    esp,0xc
c00202e1:	c3                   	ret    
c00202e2:	66 90                	xchg   ax,ax

c00202e4 <APICTimer::APICTimer()>:
c00202e4:	83 ec 0c             	sub    esp,0xc
c00202e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00202eb:	83 ec 08             	sub    esp,0x8
c00202ee:	68 58 51 02 c0       	push   0xc0025158
c00202f3:	50                   	push   eax
c00202f4:	e8 a3 a3 fe ff       	call   c000a69c <Timer::Timer(char const*)>
c00202f9:	83 c4 10             	add    esp,0x10
c00202fc:	ba 6c 51 02 c0       	mov    edx,0xc002516c
c0020301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020305:	89 10                	mov    DWORD PTR [eax],edx
c0020307:	90                   	nop
c0020308:	83 c4 0c             	add    esp,0xc
c002030b:	c3                   	ret    

c002030c <PIT::write(int)>:
c002030c:	83 ec 10             	sub    esp,0x10
c002030f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020313:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0020317:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002031d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0020321:	a3 44 e1 02 c0       	mov    ds:0xc002e144,eax
c0020326:	b8 dc 34 12 00       	mov    eax,0x1234dc
c002032b:	89 c2                	mov    edx,eax
c002032d:	c1 fa 1f             	sar    edx,0x1f
c0020330:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0020334:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020338:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c002033f:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0020344:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0020348:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c002034d:	ee                   	out    dx,al
c002034e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020352:	0f b6 c0             	movzx  eax,al
c0020355:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c002035c:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0020360:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0020364:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0020369:	ee                   	out    dx,al
c002036a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002036e:	c1 f8 08             	sar    eax,0x8
c0020371:	0f b6 c0             	movzx  eax,al
c0020374:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002037b:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002037f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020383:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0020388:	ee                   	out    dx,al
c0020389:	90                   	nop
c002038a:	83 c4 10             	add    esp,0x10
c002038d:	c3                   	ret    
c002038e:	66 90                	xchg   ax,ax

c0020390 <pitHandler(regs*, void*)>:
c0020390:	83 ec 0c             	sub    esp,0xc
c0020393:	8b 0d 44 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e144
c0020399:	b8 10 27 00 00       	mov    eax,0x2710
c002039e:	89 c2                	mov    edx,eax
c00203a0:	c1 fa 1f             	sar    edx,0x1f
c00203a3:	f7 f9                	idiv   ecx
c00203a5:	83 ec 0c             	sub    esp,0xc
c00203a8:	50                   	push   eax
c00203a9:	e8 ba a3 fe ff       	call   c000a768 <timerHandler(unsigned int)>
c00203ae:	83 c4 10             	add    esp,0x10
c00203b1:	90                   	nop
c00203b2:	83 c4 0c             	add    esp,0xc
c00203b5:	c3                   	ret    
c00203b6:	66 90                	xchg   ax,ax

c00203b8 <PIT::open(int, int, void*)>:
c00203b8:	83 ec 0c             	sub    esp,0xc
c00203bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00203c1:	83 c0 24             	add    eax,0x24
c00203c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00203c6:	83 ec 08             	sub    esp,0x8
c00203c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00203d1:	ff d0                	call   eax
c00203d3:	83 c4 10             	add    esp,0x10
c00203d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203da:	83 ec 0c             	sub    esp,0xc
c00203dd:	6a 00                	push   0x0
c00203df:	6a 01                	push   0x1
c00203e1:	68 90 03 02 c0       	push   0xc0020390
c00203e6:	6a 00                	push   0x0
c00203e8:	50                   	push   eax
c00203e9:	e8 50 8c fe ff       	call   c000903e <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00203ee:	83 c4 20             	add    esp,0x20
c00203f1:	89 c2                	mov    edx,eax
c00203f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00203f7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00203fd:	b8 00 00 00 00       	mov    eax,0x0
c0020402:	83 c4 0c             	add    esp,0xc
c0020405:	c3                   	ret    
c0020406:	66 90                	xchg   ax,ax

c0020408 <PIT::close(int, int, void*)>:
c0020408:	83 ec 0c             	sub    esp,0xc
c002040b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002040f:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0020419:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002041d:	6a 01                	push   0x1
c002041f:	68 90 03 02 c0       	push   0xc0020390
c0020424:	6a 00                	push   0x0
c0020426:	50                   	push   eax
c0020427:	e8 48 8c fe ff       	call   c0009074 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c002042c:	83 c4 10             	add    esp,0x10
c002042f:	b8 00 00 00 00       	mov    eax,0x0
c0020434:	83 c4 0c             	add    esp,0xc
c0020437:	c3                   	ret    

c0020438 <PIT::PIT()>:
c0020438:	83 ec 0c             	sub    esp,0xc
c002043b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002043f:	83 ec 08             	sub    esp,0x8
c0020442:	68 94 51 02 c0       	push   0xc0025194
c0020447:	50                   	push   eax
c0020448:	e8 4f a2 fe ff       	call   c000a69c <Timer::Timer(char const*)>
c002044d:	83 c4 10             	add    esp,0x10
c0020450:	ba bc 51 02 c0       	mov    edx,0xc00251bc
c0020455:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020459:	89 10                	mov    DWORD PTR [eax],edx
c002045b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002045f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020465:	0f b6 d0             	movzx  edx,al
c0020468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002046c:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0020473:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020477:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002047d:	0f b6 d0             	movzx  edx,al
c0020480:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020484:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0020489:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002048d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0020493:	8d 50 01             	lea    edx,[eax+0x1]
c0020496:	88 d1                	mov    cl,dl
c0020498:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002049c:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c00204a2:	0f b6 d0             	movzx  edx,al
c00204a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00204a9:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00204ad:	83 e1 3f             	and    ecx,0x3f
c00204b0:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00204b4:	90                   	nop
c00204b5:	83 c4 0c             	add    esp,0xc
c00204b8:	c3                   	ret    
c00204b9:	66 90                	xchg   ax,ax
c00204bb:	66 90                	xchg   ax,ax
c00204bd:	66 90                	xchg   ax,ax
c00204bf:	90                   	nop

c00204c0 <avxDetect>:
c00204c0:	b8 01 00 00 00       	mov    eax,0x1
c00204c5:	0f a2                	cpuid  
c00204c7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c00204cd:	74 15                	je     c00204e4 <avxDetect.noAVX>
c00204cf:	b8 01 00 00 00       	mov    eax,0x1
c00204d4:	0f a2                	cpuid  
c00204d6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c00204dc:	74 06                	je     c00204e4 <avxDetect.noAVX>
c00204de:	b8 01 00 00 00       	mov    eax,0x1
c00204e3:	c3                   	ret    

c00204e4 <avxDetect.noAVX>:
c00204e4:	b8 00 00 00 00       	mov    eax,0x0
c00204e9:	c3                   	ret    

c00204ea <avxSave>:
c00204ea:	53                   	push   ebx
c00204eb:	52                   	push   edx
c00204ec:	31 c0                	xor    eax,eax
c00204ee:	48                   	dec    eax
c00204ef:	89 c2                	mov    edx,eax
c00204f1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00204f5:	0f ae 23             	xsave  [ebx]
c00204f8:	5a                   	pop    edx
c00204f9:	5b                   	pop    ebx
c00204fa:	c3                   	ret    

c00204fb <avxLoad>:
c00204fb:	53                   	push   ebx
c00204fc:	52                   	push   edx
c00204fd:	31 c0                	xor    eax,eax
c00204ff:	48                   	dec    eax
c0020500:	89 c2                	mov    edx,eax
c0020502:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020506:	0f ae 2b             	xrstor [ebx]
c0020509:	5a                   	pop    edx
c002050a:	5b                   	pop    ebx
c002050b:	c3                   	ret    

c002050c <avxInit>:
c002050c:	e8 47 03 00 00       	call   c0020858 <sseInit>
c0020511:	50                   	push   eax
c0020512:	51                   	push   ecx
c0020513:	0f 20 e0             	mov    eax,cr4
c0020516:	0d 00 00 04 00       	or     eax,0x40000
c002051b:	0f 22 e0             	mov    cr4,eax
c002051e:	31 c9                	xor    ecx,ecx
c0020520:	0f 01 d0             	xgetbv 
c0020523:	0d 07 00 00 00       	or     eax,0x7
c0020528:	0f 01 d1             	xsetbv 
c002052b:	59                   	pop    ecx
c002052c:	58                   	pop    eax
c002052d:	c3                   	ret    

c002052e <avxClose>:
c002052e:	c3                   	ret    
c002052f:	90                   	nop

c0020530 <isr0>:
c0020530:	fa                   	cli    
c0020531:	68 00 00 00 00       	push   0x0
c0020536:	68 00 00 00 00       	push   0x0
c002053b:	e9 56 01 00 00       	jmp    c0020696 <int_common_stub>

c0020540 <isr1>:
c0020540:	fa                   	cli    
c0020541:	6a 00                	push   0x0
c0020543:	6a 01                	push   0x1
c0020545:	e9 4c 01 00 00       	jmp    c0020696 <int_common_stub>

c002054a <isr2>:
c002054a:	fa                   	cli    
c002054b:	6a 00                	push   0x0
c002054d:	6a 02                	push   0x2
c002054f:	e9 42 01 00 00       	jmp    c0020696 <int_common_stub>

c0020554 <isr3>:
c0020554:	fa                   	cli    
c0020555:	6a 00                	push   0x0
c0020557:	6a 03                	push   0x3
c0020559:	e9 38 01 00 00       	jmp    c0020696 <int_common_stub>

c002055e <isr4>:
c002055e:	fa                   	cli    
c002055f:	6a 00                	push   0x0
c0020561:	6a 04                	push   0x4
c0020563:	e9 2e 01 00 00       	jmp    c0020696 <int_common_stub>

c0020568 <isr5>:
c0020568:	fa                   	cli    
c0020569:	6a 00                	push   0x0
c002056b:	6a 05                	push   0x5
c002056d:	e9 24 01 00 00       	jmp    c0020696 <int_common_stub>

c0020572 <isr6>:
c0020572:	fa                   	cli    
c0020573:	6a 00                	push   0x0
c0020575:	6a 06                	push   0x6
c0020577:	e9 1a 01 00 00       	jmp    c0020696 <int_common_stub>

c002057c <isr7>:
c002057c:	fa                   	cli    
c002057d:	6a 00                	push   0x0
c002057f:	6a 07                	push   0x7
c0020581:	e9 10 01 00 00       	jmp    c0020696 <int_common_stub>

c0020586 <isr8>:
c0020586:	fa                   	cli    
c0020587:	6a 08                	push   0x8
c0020589:	e9 08 01 00 00       	jmp    c0020696 <int_common_stub>

c002058e <isr9>:
c002058e:	fa                   	cli    
c002058f:	6a 00                	push   0x0
c0020591:	6a 09                	push   0x9
c0020593:	e9 fe 00 00 00       	jmp    c0020696 <int_common_stub>

c0020598 <isr10>:
c0020598:	fa                   	cli    
c0020599:	6a 0a                	push   0xa
c002059b:	e9 f6 00 00 00       	jmp    c0020696 <int_common_stub>

c00205a0 <isr11>:
c00205a0:	fa                   	cli    
c00205a1:	6a 0b                	push   0xb
c00205a3:	e9 ee 00 00 00       	jmp    c0020696 <int_common_stub>

c00205a8 <isr12>:
c00205a8:	fa                   	cli    
c00205a9:	6a 0c                	push   0xc
c00205ab:	e9 e6 00 00 00       	jmp    c0020696 <int_common_stub>

c00205b0 <isr13>:
c00205b0:	fa                   	cli    
c00205b1:	6a 0d                	push   0xd
c00205b3:	53                   	push   ebx
c00205b4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00205b8:	81 fb 86 07 02 c0    	cmp    ebx,0xc0020786
c00205be:	5b                   	pop    ebx
c00205bf:	0f 84 c3 01 00 00    	je     c0020788 <finishSignal2>
c00205c5:	e9 cc 00 00 00       	jmp    c0020696 <int_common_stub>

c00205ca <isr14>:
c00205ca:	fa                   	cli    
c00205cb:	6a 0e                	push   0xe
c00205cd:	e9 c4 00 00 00       	jmp    c0020696 <int_common_stub>

c00205d2 <isr15>:
c00205d2:	fa                   	cli    
c00205d3:	6a 00                	push   0x0
c00205d5:	6a 0f                	push   0xf
c00205d7:	e9 ba 00 00 00       	jmp    c0020696 <int_common_stub>

c00205dc <isr16>:
c00205dc:	fa                   	cli    
c00205dd:	6a 00                	push   0x0
c00205df:	6a 10                	push   0x10
c00205e1:	e9 b0 00 00 00       	jmp    c0020696 <int_common_stub>

c00205e6 <isr17>:
c00205e6:	fa                   	cli    
c00205e7:	6a 00                	push   0x0
c00205e9:	6a 11                	push   0x11
c00205eb:	e9 a6 00 00 00       	jmp    c0020696 <int_common_stub>

c00205f0 <isr18>:
c00205f0:	fa                   	cli    
c00205f1:	6a 00                	push   0x0
c00205f3:	6a 12                	push   0x12
c00205f5:	e9 9c 00 00 00       	jmp    c0020696 <int_common_stub>

c00205fa <irq3>:
c00205fa:	fa                   	cli    
c00205fb:	6a 00                	push   0x0
c00205fd:	6a 23                	push   0x23
c00205ff:	e9 92 00 00 00       	jmp    c0020696 <int_common_stub>

c0020604 <irq4>:
c0020604:	fa                   	cli    
c0020605:	6a 00                	push   0x0
c0020607:	6a 24                	push   0x24
c0020609:	e9 88 00 00 00       	jmp    c0020696 <int_common_stub>

c002060e <irq5>:
c002060e:	fa                   	cli    
c002060f:	6a 00                	push   0x0
c0020611:	6a 25                	push   0x25
c0020613:	e9 7e 00 00 00       	jmp    c0020696 <int_common_stub>

c0020618 <irq6>:
c0020618:	fa                   	cli    
c0020619:	6a 00                	push   0x0
c002061b:	6a 26                	push   0x26
c002061d:	e9 74 00 00 00       	jmp    c0020696 <int_common_stub>

c0020622 <irq7>:
c0020622:	fa                   	cli    
c0020623:	6a 00                	push   0x0
c0020625:	6a 27                	push   0x27
c0020627:	e9 6a 00 00 00       	jmp    c0020696 <int_common_stub>

c002062c <irq8>:
c002062c:	fa                   	cli    
c002062d:	6a 00                	push   0x0
c002062f:	6a 28                	push   0x28
c0020631:	e9 60 00 00 00       	jmp    c0020696 <int_common_stub>

c0020636 <irq9>:
c0020636:	fa                   	cli    
c0020637:	6a 00                	push   0x0
c0020639:	6a 29                	push   0x29
c002063b:	e9 56 00 00 00       	jmp    c0020696 <int_common_stub>

c0020640 <irq10>:
c0020640:	fa                   	cli    
c0020641:	6a 00                	push   0x0
c0020643:	6a 2a                	push   0x2a
c0020645:	e9 4c 00 00 00       	jmp    c0020696 <int_common_stub>

c002064a <irq11>:
c002064a:	fa                   	cli    
c002064b:	6a 00                	push   0x0
c002064d:	6a 2b                	push   0x2b
c002064f:	e9 42 00 00 00       	jmp    c0020696 <int_common_stub>

c0020654 <irq12>:
c0020654:	fa                   	cli    
c0020655:	6a 00                	push   0x0
c0020657:	6a 2c                	push   0x2c
c0020659:	e9 38 00 00 00       	jmp    c0020696 <int_common_stub>

c002065e <irq13>:
c002065e:	fa                   	cli    
c002065f:	6a 00                	push   0x0
c0020661:	6a 2d                	push   0x2d
c0020663:	e9 2e 00 00 00       	jmp    c0020696 <int_common_stub>

c0020668 <irq14>:
c0020668:	fa                   	cli    
c0020669:	6a 00                	push   0x0
c002066b:	6a 2e                	push   0x2e
c002066d:	e9 24 00 00 00       	jmp    c0020696 <int_common_stub>

c0020672 <irq15>:
c0020672:	fa                   	cli    
c0020673:	6a 00                	push   0x0
c0020675:	6a 2f                	push   0x2f
c0020677:	e9 1a 00 00 00       	jmp    c0020696 <int_common_stub>

c002067c <irq1>:
c002067c:	fa                   	cli    
c002067d:	6a 00                	push   0x0
c002067f:	6a 21                	push   0x21
c0020681:	eb 13                	jmp    c0020696 <int_common_stub>

c0020683 <irq2>:
c0020683:	fa                   	cli    
c0020684:	6a 00                	push   0x0
c0020686:	6a 22                	push   0x22
c0020688:	eb 0c                	jmp    c0020696 <int_common_stub>

c002068a <isr96>:
c002068a:	6a 00                	push   0x0
c002068c:	6a 60                	push   0x60
c002068e:	fb                   	sti    
c002068f:	eb 37                	jmp    c00206c8 <syscall_common_stub>

c0020691 <irq0>:
c0020691:	fa                   	cli    
c0020692:	6a 00                	push   0x0
c0020694:	6a 20                	push   0x20

c0020696 <int_common_stub>:
c0020696:	60                   	pusha  
c0020697:	1e                   	push   ds
c0020698:	06                   	push   es
c0020699:	0f a0                	push   fs
c002069b:	0f a8                	push   gs
c002069d:	66 b8 10 00          	mov    ax,0x10
c00206a1:	66 8e d8             	mov    ds,ax
c00206a4:	66 8e c0             	mov    es,ax
c00206a7:	66 8e e0             	mov    fs,ax
c00206aa:	66 8e e8             	mov    gs,ax
c00206ad:	54                   	push   esp
c00206ae:	fc                   	cld    
c00206af:	e8 c8 d9 fe ff       	call   c000e07c <int_handler>
c00206b4:	81 c4 04 00 00 00    	add    esp,0x4
c00206ba:	0f a9                	pop    gs
c00206bc:	0f a1                	pop    fs
c00206be:	07                   	pop    es
c00206bf:	1f                   	pop    ds
c00206c0:	61                   	popa   
c00206c1:	81 c4 08 00 00 00    	add    esp,0x8
c00206c7:	cf                   	iret   

c00206c8 <syscall_common_stub>:
c00206c8:	60                   	pusha  
c00206c9:	1e                   	push   ds
c00206ca:	06                   	push   es
c00206cb:	0f a0                	push   fs
c00206cd:	0f a8                	push   gs
c00206cf:	66 b8 10 00          	mov    ax,0x10
c00206d3:	66 8e d8             	mov    ds,ax
c00206d6:	66 8e c0             	mov    es,ax
c00206d9:	66 8e e0             	mov    fs,ax
c00206dc:	66 8e e8             	mov    gs,ax
c00206df:	54                   	push   esp
c00206e0:	fc                   	cld    
c00206e1:	e8 96 d9 fe ff       	call   c000e07c <int_handler>
c00206e6:	81 c4 04 00 00 00    	add    esp,0x4
c00206ec:	0f a9                	pop    gs
c00206ee:	0f a1                	pop    fs
c00206f0:	07                   	pop    es
c00206f1:	1f                   	pop    ds
c00206f2:	e8 10 02 ff ff       	call   c0010907 <KiCheckSignalZ>
c00206f7:	3d 00 00 00 00       	cmp    eax,0x0
c00206fc:	0f 84 c0 00 00 00    	je     c00207c2 <skipSignals>
c0020702:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c0020707:	61                   	popa   
c0020708:	53                   	push   ebx
c0020709:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c002070f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0020712:	5b                   	pop    ebx
c0020713:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c0020718:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c002071b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c002071e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0020721:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c0020724:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c0020727:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c002072a:	81 c4 08 00 00 00    	add    esp,0x8
c0020730:	5e                   	pop    esi
c0020731:	5b                   	pop    ebx
c0020732:	59                   	pop    ecx
c0020733:	5a                   	pop    edx
c0020734:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c0020737:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c002073a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002073d:	52                   	push   edx
c002073e:	51                   	push   ecx
c002073f:	53                   	push   ebx
c0020740:	56                   	push   esi
c0020741:	81 ec 08 00 00 00    	sub    esp,0x8
c0020747:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c002074a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c002074d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c0020750:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0020753:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020756:	60                   	pusha  
c0020757:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c002075d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0020760:	89 e3                	mov    ebx,esp
c0020762:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c0020765:	52                   	push   edx
c0020766:	68 86 07 02 c0       	push   0xc0020786
c002076b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c002076e:	89 dc                	mov    esp,ebx
c0020770:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0020773:	68 23 00 00 00       	push   0x23
c0020778:	51                   	push   ecx
c0020779:	68 02 02 00 00       	push   0x202
c002077e:	68 1b 00 00 00       	push   0x1b
c0020783:	ff 36                	push   DWORD PTR [esi]
c0020785:	cf                   	iret   

c0020786 <finishSignal>:
c0020786:	cd 0f                	int    0xf

c0020788 <finishSignal2>:
c0020788:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c002078e:	e8 f1 01 ff ff       	call   c0010984 <KiFinishSignalZ>
c0020793:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c0020799:	68 23 00 00 00       	push   0x23
c002079e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c00207a1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c00207a4:	68 1b 00 00 00       	push   0x1b
c00207a9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c00207ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00207af:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00207b2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00207b5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00207b8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c00207bb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c00207be:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c00207c1:	cf                   	iret   

c00207c2 <skipSignals>:
c00207c2:	61                   	popa   
c00207c3:	81 c4 08 00 00 00    	add    esp,0x8
c00207c9:	cf                   	iret   
c00207ca:	90                   	nop
c00207cb:	90                   	nop

c00207cc <irq16>:
c00207cc:	fa                   	cli    
c00207cd:	6a 00                	push   0x0
c00207cf:	6a 30                	push   0x30
c00207d1:	e9 c0 fe ff ff       	jmp    c0020696 <int_common_stub>

c00207d6 <irq17>:
c00207d6:	fa                   	cli    
c00207d7:	6a 00                	push   0x0
c00207d9:	6a 31                	push   0x31
c00207db:	e9 b6 fe ff ff       	jmp    c0020696 <int_common_stub>

c00207e0 <irq18>:
c00207e0:	fa                   	cli    
c00207e1:	6a 00                	push   0x0
c00207e3:	6a 32                	push   0x32
c00207e5:	e9 ac fe ff ff       	jmp    c0020696 <int_common_stub>

c00207ea <irq19>:
c00207ea:	fa                   	cli    
c00207eb:	6a 00                	push   0x0
c00207ed:	6a 33                	push   0x33
c00207ef:	e9 a2 fe ff ff       	jmp    c0020696 <int_common_stub>

c00207f4 <irq20>:
c00207f4:	fa                   	cli    
c00207f5:	6a 00                	push   0x0
c00207f7:	6a 34                	push   0x34
c00207f9:	e9 98 fe ff ff       	jmp    c0020696 <int_common_stub>

c00207fe <irq21>:
c00207fe:	fa                   	cli    
c00207ff:	6a 00                	push   0x0
c0020801:	6a 35                	push   0x35
c0020803:	e9 8e fe ff ff       	jmp    c0020696 <int_common_stub>

c0020808 <irq22>:
c0020808:	fa                   	cli    
c0020809:	6a 00                	push   0x0
c002080b:	6a 36                	push   0x36
c002080d:	e9 84 fe ff ff       	jmp    c0020696 <int_common_stub>

c0020812 <irq23>:
c0020812:	fa                   	cli    
c0020813:	6a 00                	push   0x0
c0020815:	6a 37                	push   0x37
c0020817:	e9 7a fe ff ff       	jmp    c0020696 <int_common_stub>
c002081c:	66 90                	xchg   ax,ax
c002081e:	66 90                	xchg   ax,ax

c0020820 <i386GetRDRAND>:
c0020820:	b9 64 00 00 00       	mov    ecx,0x64

c0020825 <retry>:
c0020825:	0f c7 f0             	rdrand eax
c0020828:	72 05                	jb     c002082f <retry.done>
c002082a:	e2 f9                	loop   c0020825 <retry>

c002082c <retry.fail>:
c002082c:	31 c0                	xor    eax,eax
c002082e:	c3                   	ret    

c002082f <retry.done>:
c002082f:	c3                   	ret    

c0020830 <sseDetect>:
c0020830:	b8 01 00 00 00       	mov    eax,0x1
c0020835:	0f a2                	cpuid  
c0020837:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002083d:	74 06                	je     c0020845 <sseDetect.noSSE>
c002083f:	b8 01 00 00 00       	mov    eax,0x1
c0020844:	c3                   	ret    

c0020845 <sseDetect.noSSE>:
c0020845:	31 c0                	xor    eax,eax
c0020847:	c3                   	ret    

c0020848 <sseSave>:
c0020848:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002084c:	0f ae 00             	fxsave [eax]
c002084f:	c3                   	ret    

c0020850 <sseLoad>:
c0020850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020854:	0f ae 08             	fxrstor [eax]
c0020857:	c3                   	ret    

c0020858 <sseInit>:
c0020858:	e8 48 00 00 00       	call   c00208a5 <x87Init>
c002085d:	0f 20 e0             	mov    eax,cr4
c0020860:	66 0d 00 06          	or     ax,0x600
c0020864:	0f 22 e0             	mov    cr4,eax
c0020867:	c3                   	ret    

c0020868 <sseClose>:
c0020868:	c3                   	ret    
c0020869:	66 90                	xchg   ax,ax
c002086b:	66 90                	xchg   ax,ax
c002086d:	66 90                	xchg   ax,ax
c002086f:	90                   	nop

c0020870 <value_37F>:
c0020870:	7f 03                	jg     c0020875 <value_37A+0x1>

c0020872 <value_37E>:
c0020872:	7e 03                	jle    c0020877 <x87Detect+0x1>

c0020874 <value_37A>:
c0020874:	7a 03                	jp     c0020879 <x87Detect+0x3>

c0020876 <x87Detect>:
c0020876:	53                   	push   ebx
c0020877:	51                   	push   ecx
c0020878:	52                   	push   edx
c0020879:	b8 01 00 00 00       	mov    eax,0x1
c002087e:	0f a2                	cpuid  
c0020880:	f7 c2 01 00 00 00    	test   edx,0x1
c0020886:	74 06                	je     c002088e <x87Detect.nox87>
c0020888:	b8 01 00 00 00       	mov    eax,0x1
c002088d:	c3                   	ret    

c002088e <x87Detect.nox87>:
c002088e:	b8 00 00 00 00       	mov    eax,0x0
c0020893:	5a                   	pop    edx
c0020894:	59                   	pop    ecx
c0020895:	5b                   	pop    ebx
c0020896:	c3                   	ret    

c0020897 <x87Save>:
c0020897:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002089b:	dd 30                	fnsave [eax]
c002089d:	c3                   	ret    

c002089e <x87Load>:
c002089e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00208a2:	dd 20                	frstor [eax]
c00208a4:	c3                   	ret    

c00208a5 <x87Init>:
c00208a5:	0f 20 c0             	mov    eax,cr0
c00208a8:	66 25 fb ff          	and    ax,0xfffb
c00208ac:	66 0d 22 00          	or     ax,0x22
c00208b0:	0f 22 c0             	mov    cr0,eax
c00208b3:	db e3                	fninit 
c00208b5:	0f 06                	clts   
c00208b7:	d9 2d 74 08 02 c0    	fldcw  WORD PTR ds:0xc0020874
c00208bd:	c3                   	ret    

c00208be <x87Close>:
c00208be:	c3                   	ret    
c00208bf:	90                   	nop

c00208c0 <__do_global_ctors_aux>:
c00208c0:	a1 74 18 02 c0       	mov    eax,ds:0xc0021874
c00208c5:	83 f8 ff             	cmp    eax,0xffffffff
c00208c8:	74 1a                	je     c00208e4 <__do_global_ctors_aux+0x24>
c00208ca:	55                   	push   ebp
c00208cb:	89 e5                	mov    ebp,esp
c00208cd:	53                   	push   ebx
c00208ce:	52                   	push   edx
c00208cf:	bb 74 18 02 c0       	mov    ebx,0xc0021874
c00208d4:	ff d0                	call   eax
c00208d6:	83 eb 04             	sub    ebx,0x4
c00208d9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00208db:	83 f8 ff             	cmp    eax,0xffffffff
c00208de:	75 f4                	jne    c00208d4 <__do_global_ctors_aux+0x14>
c00208e0:	58                   	pop    eax
c00208e1:	5b                   	pop    ebx
c00208e2:	5d                   	pop    ebp
c00208e3:	c3                   	ret    
c00208e4:	c3                   	ret    
c00208e5:	66 90                	xchg   ax,ax
c00208e7:	90                   	nop

c00208e8 <__divdi3>:
c00208e8:	55                   	push   ebp
c00208e9:	57                   	push   edi
c00208ea:	56                   	push   esi
c00208eb:	53                   	push   ebx
c00208ec:	83 ec 1c             	sub    esp,0x1c
c00208ef:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00208f3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00208f7:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00208fa:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00208fe:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020902:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020906:	85 db                	test   ebx,ebx
c0020908:	0f 88 8e 00 00 00    	js     c002099c <__divdi3+0xb4>
c002090e:	89 dd                	mov    ebp,ebx
c0020910:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020918:	89 d3                	mov    ebx,edx
c002091a:	85 d2                	test   edx,edx
c002091c:	79 0d                	jns    c002092b <__divdi3+0x43>
c002091e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0020922:	f7 d8                	neg    eax
c0020924:	83 d2 00             	adc    edx,0x0
c0020927:	f7 da                	neg    edx
c0020929:	89 d3                	mov    ebx,edx
c002092b:	89 c7                	mov    edi,eax
c002092d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020930:	85 db                	test   ebx,ebx
c0020932:	75 48                	jne    c002097c <__divdi3+0x94>
c0020934:	39 ef                	cmp    edi,ebp
c0020936:	76 24                	jbe    c002095c <__divdi3+0x74>
c0020938:	89 ea                	mov    edx,ebp
c002093a:	f7 f7                	div    edi
c002093c:	89 c1                	mov    ecx,eax
c002093e:	31 f6                	xor    esi,esi
c0020940:	89 c8                	mov    eax,ecx
c0020942:	89 f2                	mov    edx,esi
c0020944:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020948:	85 c9                	test   ecx,ecx
c002094a:	74 07                	je     c0020953 <__divdi3+0x6b>
c002094c:	f7 d8                	neg    eax
c002094e:	83 d2 00             	adc    edx,0x0
c0020951:	f7 da                	neg    edx
c0020953:	83 c4 1c             	add    esp,0x1c
c0020956:	5b                   	pop    ebx
c0020957:	5e                   	pop    esi
c0020958:	5f                   	pop    edi
c0020959:	5d                   	pop    ebp
c002095a:	c3                   	ret    
c002095b:	90                   	nop
c002095c:	85 ff                	test   edi,edi
c002095e:	75 0b                	jne    c002096b <__divdi3+0x83>
c0020960:	b8 01 00 00 00       	mov    eax,0x1
c0020965:	31 d2                	xor    edx,edx
c0020967:	f7 f3                	div    ebx
c0020969:	89 c7                	mov    edi,eax
c002096b:	31 d2                	xor    edx,edx
c002096d:	89 e8                	mov    eax,ebp
c002096f:	f7 f7                	div    edi
c0020971:	89 c6                	mov    esi,eax
c0020973:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020976:	f7 f7                	div    edi
c0020978:	89 c1                	mov    ecx,eax
c002097a:	eb c4                	jmp    c0020940 <__divdi3+0x58>
c002097c:	39 eb                	cmp    ebx,ebp
c002097e:	77 3c                	ja     c00209bc <__divdi3+0xd4>
c0020980:	0f bd f3             	bsr    esi,ebx
c0020983:	83 f6 1f             	xor    esi,0x1f
c0020986:	75 40                	jne    c00209c8 <__divdi3+0xe0>
c0020988:	39 eb                	cmp    ebx,ebp
c002098a:	72 09                	jb     c0020995 <__divdi3+0xad>
c002098c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c002098f:	0f 87 97 00 00 00    	ja     c0020a2c <__divdi3+0x144>
c0020995:	b9 01 00 00 00       	mov    ecx,0x1
c002099a:	eb a4                	jmp    c0020940 <__divdi3+0x58>
c002099c:	f7 d9                	neg    ecx
c002099e:	83 d3 00             	adc    ebx,0x0
c00209a1:	f7 db                	neg    ebx
c00209a3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00209a6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00209aa:	89 dd                	mov    ebp,ebx
c00209ac:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00209b4:	e9 5f ff ff ff       	jmp    c0020918 <__divdi3+0x30>
c00209b9:	8d 76 00             	lea    esi,[esi+0x0]
c00209bc:	31 f6                	xor    esi,esi
c00209be:	31 c9                	xor    ecx,ecx
c00209c0:	e9 7b ff ff ff       	jmp    c0020940 <__divdi3+0x58>
c00209c5:	8d 76 00             	lea    esi,[esi+0x0]
c00209c8:	b8 20 00 00 00       	mov    eax,0x20
c00209cd:	29 f0                	sub    eax,esi
c00209cf:	89 f1                	mov    ecx,esi
c00209d1:	d3 e3                	shl    ebx,cl
c00209d3:	89 fa                	mov    edx,edi
c00209d5:	88 c1                	mov    cl,al
c00209d7:	d3 ea                	shr    edx,cl
c00209d9:	09 da                	or     edx,ebx
c00209db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00209df:	89 f1                	mov    ecx,esi
c00209e1:	d3 e7                	shl    edi,cl
c00209e3:	89 eb                	mov    ebx,ebp
c00209e5:	88 c1                	mov    cl,al
c00209e7:	d3 eb                	shr    ebx,cl
c00209e9:	89 f1                	mov    ecx,esi
c00209eb:	d3 e5                	shl    ebp,cl
c00209ed:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00209f0:	88 c1                	mov    cl,al
c00209f2:	d3 ea                	shr    edx,cl
c00209f4:	09 d5                	or     ebp,edx
c00209f6:	89 e8                	mov    eax,ebp
c00209f8:	89 da                	mov    edx,ebx
c00209fa:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00209fe:	89 d3                	mov    ebx,edx
c0020a00:	89 c5                	mov    ebp,eax
c0020a02:	f7 e7                	mul    edi
c0020a04:	39 d3                	cmp    ebx,edx
c0020a06:	72 18                	jb     c0020a20 <__divdi3+0x138>
c0020a08:	74 0a                	je     c0020a14 <__divdi3+0x12c>
c0020a0a:	89 e9                	mov    ecx,ebp
c0020a0c:	31 f6                	xor    esi,esi
c0020a0e:	e9 2d ff ff ff       	jmp    c0020940 <__divdi3+0x58>
c0020a13:	90                   	nop
c0020a14:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0020a17:	89 f1                	mov    ecx,esi
c0020a19:	d3 e7                	shl    edi,cl
c0020a1b:	39 c7                	cmp    edi,eax
c0020a1d:	73 eb                	jae    c0020a0a <__divdi3+0x122>
c0020a1f:	90                   	nop
c0020a20:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0020a23:	31 f6                	xor    esi,esi
c0020a25:	e9 16 ff ff ff       	jmp    c0020940 <__divdi3+0x58>
c0020a2a:	66 90                	xchg   ax,ax
c0020a2c:	31 c9                	xor    ecx,ecx
c0020a2e:	e9 0d ff ff ff       	jmp    c0020940 <__divdi3+0x58>
c0020a33:	90                   	nop

c0020a34 <__moddi3>:
c0020a34:	55                   	push   ebp
c0020a35:	57                   	push   edi
c0020a36:	56                   	push   esi
c0020a37:	53                   	push   ebx
c0020a38:	83 ec 2c             	sub    esp,0x2c
c0020a3b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0020a3f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0020a43:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0020a47:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0020a4b:	85 db                	test   ebx,ebx
c0020a4d:	0f 88 85 00 00 00    	js     c0020ad8 <__moddi3+0xa4>
c0020a53:	89 de                	mov    esi,ebx
c0020a55:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0020a5d:	89 d7                	mov    edi,edx
c0020a5f:	85 d2                	test   edx,edx
c0020a61:	79 09                	jns    c0020a6c <__moddi3+0x38>
c0020a63:	f7 d8                	neg    eax
c0020a65:	83 d2 00             	adc    edx,0x0
c0020a68:	f7 da                	neg    edx
c0020a6a:	89 d7                	mov    edi,edx
c0020a6c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020a70:	89 cd                	mov    ebp,ecx
c0020a72:	85 ff                	test   edi,edi
c0020a74:	75 52                	jne    c0020ac8 <__moddi3+0x94>
c0020a76:	89 c3                	mov    ebx,eax
c0020a78:	39 f0                	cmp    eax,esi
c0020a7a:	76 24                	jbe    c0020aa0 <__moddi3+0x6c>
c0020a7c:	89 c8                	mov    eax,ecx
c0020a7e:	89 f2                	mov    edx,esi
c0020a80:	f7 f3                	div    ebx
c0020a82:	89 d6                	mov    esi,edx
c0020a84:	89 f0                	mov    eax,esi
c0020a86:	31 d2                	xor    edx,edx
c0020a88:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0020a8c:	85 c9                	test   ecx,ecx
c0020a8e:	74 07                	je     c0020a97 <__moddi3+0x63>
c0020a90:	f7 d8                	neg    eax
c0020a92:	83 d2 00             	adc    edx,0x0
c0020a95:	f7 da                	neg    edx
c0020a97:	83 c4 2c             	add    esp,0x2c
c0020a9a:	5b                   	pop    ebx
c0020a9b:	5e                   	pop    esi
c0020a9c:	5f                   	pop    edi
c0020a9d:	5d                   	pop    ebp
c0020a9e:	c3                   	ret    
c0020a9f:	90                   	nop
c0020aa0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0020aa4:	85 db                	test   ebx,ebx
c0020aa6:	75 0d                	jne    c0020ab5 <__moddi3+0x81>
c0020aa8:	b8 01 00 00 00       	mov    eax,0x1
c0020aad:	31 d2                	xor    edx,edx
c0020aaf:	f7 f7                	div    edi
c0020ab1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020ab5:	89 f0                	mov    eax,esi
c0020ab7:	31 d2                	xor    edx,edx
c0020ab9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020abd:	f7 f7                	div    edi
c0020abf:	89 e8                	mov    eax,ebp
c0020ac1:	f7 f7                	div    edi
c0020ac3:	89 d6                	mov    esi,edx
c0020ac5:	eb bd                	jmp    c0020a84 <__moddi3+0x50>
c0020ac7:	90                   	nop
c0020ac8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020acc:	39 f7                	cmp    edi,esi
c0020ace:	76 20                	jbe    c0020af0 <__moddi3+0xbc>
c0020ad0:	89 c8                	mov    eax,ecx
c0020ad2:	89 f2                	mov    edx,esi
c0020ad4:	eb b2                	jmp    c0020a88 <__moddi3+0x54>
c0020ad6:	66 90                	xchg   ax,ax
c0020ad8:	f7 d9                	neg    ecx
c0020ada:	83 d3 00             	adc    ebx,0x0
c0020add:	f7 db                	neg    ebx
c0020adf:	89 de                	mov    esi,ebx
c0020ae1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0020ae9:	e9 6f ff ff ff       	jmp    c0020a5d <__moddi3+0x29>
c0020aee:	66 90                	xchg   ax,ax
c0020af0:	0f bd c7             	bsr    eax,edi
c0020af3:	83 f0 1f             	xor    eax,0x1f
c0020af6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020afa:	75 24                	jne    c0020b20 <__moddi3+0xec>
c0020afc:	39 f7                	cmp    edi,esi
c0020afe:	72 06                	jb     c0020b06 <__moddi3+0xd2>
c0020b00:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0020b04:	77 0c                	ja     c0020b12 <__moddi3+0xde>
c0020b06:	89 e9                	mov    ecx,ebp
c0020b08:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0020b0c:	19 fe                	sbb    esi,edi
c0020b0e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0020b12:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b16:	89 f2                	mov    edx,esi
c0020b18:	e9 6b ff ff ff       	jmp    c0020a88 <__moddi3+0x54>
c0020b1d:	8d 76 00             	lea    esi,[esi+0x0]
c0020b20:	b8 20 00 00 00       	mov    eax,0x20
c0020b25:	89 c2                	mov    edx,eax
c0020b27:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0020b2b:	29 da                	sub    edx,ebx
c0020b2d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0020b31:	88 d9                	mov    cl,bl
c0020b33:	d3 e7                	shl    edi,cl
c0020b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020b39:	88 d1                	mov    cl,dl
c0020b3b:	d3 e8                	shr    eax,cl
c0020b3d:	09 c7                	or     edi,eax
c0020b3f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0020b43:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0020b47:	89 d8                	mov    eax,ebx
c0020b49:	88 d9                	mov    cl,bl
c0020b4b:	d3 e7                	shl    edi,cl
c0020b4d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020b51:	89 f3                	mov    ebx,esi
c0020b53:	88 d1                	mov    cl,dl
c0020b55:	d3 eb                	shr    ebx,cl
c0020b57:	89 c7                	mov    edi,eax
c0020b59:	88 c1                	mov    cl,al
c0020b5b:	d3 e6                	shl    esi,cl
c0020b5d:	89 e8                	mov    eax,ebp
c0020b5f:	88 d1                	mov    cl,dl
c0020b61:	d3 e8                	shr    eax,cl
c0020b63:	09 f0                	or     eax,esi
c0020b65:	89 f9                	mov    ecx,edi
c0020b67:	d3 e5                	shl    ebp,cl
c0020b69:	89 da                	mov    edx,ebx
c0020b6b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0020b6f:	89 d3                	mov    ebx,edx
c0020b71:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020b75:	89 c6                	mov    esi,eax
c0020b77:	89 d1                	mov    ecx,edx
c0020b79:	39 d3                	cmp    ebx,edx
c0020b7b:	72 27                	jb     c0020ba4 <__moddi3+0x170>
c0020b7d:	74 21                	je     c0020ba0 <__moddi3+0x16c>
c0020b7f:	29 f5                	sub    ebp,esi
c0020b81:	19 cb                	sbb    ebx,ecx
c0020b83:	89 de                	mov    esi,ebx
c0020b85:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0020b89:	d3 e6                	shl    esi,cl
c0020b8b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0020b8f:	89 f9                	mov    ecx,edi
c0020b91:	d3 ed                	shr    ebp,cl
c0020b93:	09 ee                	or     esi,ebp
c0020b95:	89 f0                	mov    eax,esi
c0020b97:	d3 eb                	shr    ebx,cl
c0020b99:	89 da                	mov    edx,ebx
c0020b9b:	e9 e8 fe ff ff       	jmp    c0020a88 <__moddi3+0x54>
c0020ba0:	39 c5                	cmp    ebp,eax
c0020ba2:	73 db                	jae    c0020b7f <__moddi3+0x14b>
c0020ba4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020ba8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0020bac:	89 d1                	mov    ecx,edx
c0020bae:	89 c6                	mov    esi,eax
c0020bb0:	eb cd                	jmp    c0020b7f <__moddi3+0x14b>
c0020bb2:	66 90                	xchg   ax,ax

c0020bb4 <__udivdi3>:
c0020bb4:	55                   	push   ebp
c0020bb5:	57                   	push   edi
c0020bb6:	56                   	push   esi
c0020bb7:	53                   	push   ebx
c0020bb8:	83 ec 1c             	sub    esp,0x1c
c0020bbb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0020bbf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0020bc3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020bc7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0020bcb:	85 d2                	test   edx,edx
c0020bcd:	75 41                	jne    c0020c10 <__udivdi3+0x5c>
c0020bcf:	39 f7                	cmp    edi,esi
c0020bd1:	76 15                	jbe    c0020be8 <__udivdi3+0x34>
c0020bd3:	89 e8                	mov    eax,ebp
c0020bd5:	89 f2                	mov    edx,esi
c0020bd7:	f7 f7                	div    edi
c0020bd9:	31 db                	xor    ebx,ebx
c0020bdb:	89 da                	mov    edx,ebx
c0020bdd:	83 c4 1c             	add    esp,0x1c
c0020be0:	5b                   	pop    ebx
c0020be1:	5e                   	pop    esi
c0020be2:	5f                   	pop    edi
c0020be3:	5d                   	pop    ebp
c0020be4:	c3                   	ret    
c0020be5:	8d 76 00             	lea    esi,[esi+0x0]
c0020be8:	89 f9                	mov    ecx,edi
c0020bea:	85 ff                	test   edi,edi
c0020bec:	75 0b                	jne    c0020bf9 <__udivdi3+0x45>
c0020bee:	b8 01 00 00 00       	mov    eax,0x1
c0020bf3:	31 d2                	xor    edx,edx
c0020bf5:	f7 f7                	div    edi
c0020bf7:	89 c1                	mov    ecx,eax
c0020bf9:	31 d2                	xor    edx,edx
c0020bfb:	89 f0                	mov    eax,esi
c0020bfd:	f7 f1                	div    ecx
c0020bff:	89 c3                	mov    ebx,eax
c0020c01:	89 e8                	mov    eax,ebp
c0020c03:	f7 f1                	div    ecx
c0020c05:	89 da                	mov    edx,ebx
c0020c07:	83 c4 1c             	add    esp,0x1c
c0020c0a:	5b                   	pop    ebx
c0020c0b:	5e                   	pop    esi
c0020c0c:	5f                   	pop    edi
c0020c0d:	5d                   	pop    ebp
c0020c0e:	c3                   	ret    
c0020c0f:	90                   	nop
c0020c10:	39 f2                	cmp    edx,esi
c0020c12:	77 1c                	ja     c0020c30 <__udivdi3+0x7c>
c0020c14:	0f bd da             	bsr    ebx,edx
c0020c17:	83 f3 1f             	xor    ebx,0x1f
c0020c1a:	75 24                	jne    c0020c40 <__udivdi3+0x8c>
c0020c1c:	39 f2                	cmp    edx,esi
c0020c1e:	72 08                	jb     c0020c28 <__udivdi3+0x74>
c0020c20:	39 ef                	cmp    edi,ebp
c0020c22:	0f 87 84 00 00 00    	ja     c0020cac <__udivdi3+0xf8>
c0020c28:	b8 01 00 00 00       	mov    eax,0x1
c0020c2d:	eb ac                	jmp    c0020bdb <__udivdi3+0x27>
c0020c2f:	90                   	nop
c0020c30:	31 db                	xor    ebx,ebx
c0020c32:	31 c0                	xor    eax,eax
c0020c34:	89 da                	mov    edx,ebx
c0020c36:	83 c4 1c             	add    esp,0x1c
c0020c39:	5b                   	pop    ebx
c0020c3a:	5e                   	pop    esi
c0020c3b:	5f                   	pop    edi
c0020c3c:	5d                   	pop    ebp
c0020c3d:	c3                   	ret    
c0020c3e:	66 90                	xchg   ax,ax
c0020c40:	b8 20 00 00 00       	mov    eax,0x20
c0020c45:	29 d8                	sub    eax,ebx
c0020c47:	88 d9                	mov    cl,bl
c0020c49:	d3 e2                	shl    edx,cl
c0020c4b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c4f:	89 fa                	mov    edx,edi
c0020c51:	88 c1                	mov    cl,al
c0020c53:	d3 ea                	shr    edx,cl
c0020c55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020c59:	09 d1                	or     ecx,edx
c0020c5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020c5f:	88 d9                	mov    cl,bl
c0020c61:	d3 e7                	shl    edi,cl
c0020c63:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020c67:	89 f7                	mov    edi,esi
c0020c69:	88 c1                	mov    cl,al
c0020c6b:	d3 ef                	shr    edi,cl
c0020c6d:	88 d9                	mov    cl,bl
c0020c6f:	d3 e6                	shl    esi,cl
c0020c71:	89 ea                	mov    edx,ebp
c0020c73:	88 c1                	mov    cl,al
c0020c75:	d3 ea                	shr    edx,cl
c0020c77:	09 d6                	or     esi,edx
c0020c79:	89 f0                	mov    eax,esi
c0020c7b:	89 fa                	mov    edx,edi
c0020c7d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020c81:	89 d7                	mov    edi,edx
c0020c83:	89 c6                	mov    esi,eax
c0020c85:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020c89:	39 d7                	cmp    edi,edx
c0020c8b:	72 13                	jb     c0020ca0 <__udivdi3+0xec>
c0020c8d:	74 09                	je     c0020c98 <__udivdi3+0xe4>
c0020c8f:	89 f0                	mov    eax,esi
c0020c91:	31 db                	xor    ebx,ebx
c0020c93:	e9 43 ff ff ff       	jmp    c0020bdb <__udivdi3+0x27>
c0020c98:	88 d9                	mov    cl,bl
c0020c9a:	d3 e5                	shl    ebp,cl
c0020c9c:	39 c5                	cmp    ebp,eax
c0020c9e:	73 ef                	jae    c0020c8f <__udivdi3+0xdb>
c0020ca0:	8d 46 ff             	lea    eax,[esi-0x1]
c0020ca3:	31 db                	xor    ebx,ebx
c0020ca5:	e9 31 ff ff ff       	jmp    c0020bdb <__udivdi3+0x27>
c0020caa:	66 90                	xchg   ax,ax
c0020cac:	31 c0                	xor    eax,eax
c0020cae:	e9 28 ff ff ff       	jmp    c0020bdb <__udivdi3+0x27>
c0020cb3:	90                   	nop

c0020cb4 <__umoddi3>:
c0020cb4:	55                   	push   ebp
c0020cb5:	57                   	push   edi
c0020cb6:	56                   	push   esi
c0020cb7:	53                   	push   ebx
c0020cb8:	83 ec 1c             	sub    esp,0x1c
c0020cbb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0020cbf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0020cc3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0020cc7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020ccb:	89 da                	mov    edx,ebx
c0020ccd:	85 c0                	test   eax,eax
c0020ccf:	75 37                	jne    c0020d08 <__umoddi3+0x54>
c0020cd1:	39 df                	cmp    edi,ebx
c0020cd3:	76 13                	jbe    c0020ce8 <__umoddi3+0x34>
c0020cd5:	89 f0                	mov    eax,esi
c0020cd7:	f7 f7                	div    edi
c0020cd9:	89 d0                	mov    eax,edx
c0020cdb:	31 d2                	xor    edx,edx
c0020cdd:	83 c4 1c             	add    esp,0x1c
c0020ce0:	5b                   	pop    ebx
c0020ce1:	5e                   	pop    esi
c0020ce2:	5f                   	pop    edi
c0020ce3:	5d                   	pop    ebp
c0020ce4:	c3                   	ret    
c0020ce5:	8d 76 00             	lea    esi,[esi+0x0]
c0020ce8:	89 fd                	mov    ebp,edi
c0020cea:	85 ff                	test   edi,edi
c0020cec:	75 0b                	jne    c0020cf9 <__umoddi3+0x45>
c0020cee:	b8 01 00 00 00       	mov    eax,0x1
c0020cf3:	31 d2                	xor    edx,edx
c0020cf5:	f7 f7                	div    edi
c0020cf7:	89 c5                	mov    ebp,eax
c0020cf9:	89 d8                	mov    eax,ebx
c0020cfb:	31 d2                	xor    edx,edx
c0020cfd:	f7 f5                	div    ebp
c0020cff:	89 f0                	mov    eax,esi
c0020d01:	f7 f5                	div    ebp
c0020d03:	89 d0                	mov    eax,edx
c0020d05:	eb d4                	jmp    c0020cdb <__umoddi3+0x27>
c0020d07:	90                   	nop
c0020d08:	89 f1                	mov    ecx,esi
c0020d0a:	39 d8                	cmp    eax,ebx
c0020d0c:	76 0a                	jbe    c0020d18 <__umoddi3+0x64>
c0020d0e:	89 f0                	mov    eax,esi
c0020d10:	83 c4 1c             	add    esp,0x1c
c0020d13:	5b                   	pop    ebx
c0020d14:	5e                   	pop    esi
c0020d15:	5f                   	pop    edi
c0020d16:	5d                   	pop    ebp
c0020d17:	c3                   	ret    
c0020d18:	0f bd e8             	bsr    ebp,eax
c0020d1b:	83 f5 1f             	xor    ebp,0x1f
c0020d1e:	75 1c                	jne    c0020d3c <__umoddi3+0x88>
c0020d20:	39 d8                	cmp    eax,ebx
c0020d22:	72 04                	jb     c0020d28 <__umoddi3+0x74>
c0020d24:	39 f7                	cmp    edi,esi
c0020d26:	77 08                	ja     c0020d30 <__umoddi3+0x7c>
c0020d28:	89 da                	mov    edx,ebx
c0020d2a:	29 fe                	sub    esi,edi
c0020d2c:	19 c2                	sbb    edx,eax
c0020d2e:	89 f1                	mov    ecx,esi
c0020d30:	89 c8                	mov    eax,ecx
c0020d32:	83 c4 1c             	add    esp,0x1c
c0020d35:	5b                   	pop    ebx
c0020d36:	5e                   	pop    esi
c0020d37:	5f                   	pop    edi
c0020d38:	5d                   	pop    ebp
c0020d39:	c3                   	ret    
c0020d3a:	66 90                	xchg   ax,ax
c0020d3c:	ba 20 00 00 00       	mov    edx,0x20
c0020d41:	29 ea                	sub    edx,ebp
c0020d43:	89 e9                	mov    ecx,ebp
c0020d45:	d3 e0                	shl    eax,cl
c0020d47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020d4b:	89 f8                	mov    eax,edi
c0020d4d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0020d51:	88 d1                	mov    cl,dl
c0020d53:	d3 e8                	shr    eax,cl
c0020d55:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0020d59:	09 c1                	or     ecx,eax
c0020d5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0020d5f:	89 e9                	mov    ecx,ebp
c0020d61:	d3 e7                	shl    edi,cl
c0020d63:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0020d67:	89 d8                	mov    eax,ebx
c0020d69:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020d6d:	88 d1                	mov    cl,dl
c0020d6f:	d3 e8                	shr    eax,cl
c0020d71:	89 c7                	mov    edi,eax
c0020d73:	89 e9                	mov    ecx,ebp
c0020d75:	d3 e3                	shl    ebx,cl
c0020d77:	89 f0                	mov    eax,esi
c0020d79:	88 d1                	mov    cl,dl
c0020d7b:	d3 e8                	shr    eax,cl
c0020d7d:	09 d8                	or     eax,ebx
c0020d7f:	89 e9                	mov    ecx,ebp
c0020d81:	d3 e6                	shl    esi,cl
c0020d83:	89 f3                	mov    ebx,esi
c0020d85:	89 fa                	mov    edx,edi
c0020d87:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0020d8b:	89 d1                	mov    ecx,edx
c0020d8d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0020d91:	89 c6                	mov    esi,eax
c0020d93:	89 d7                	mov    edi,edx
c0020d95:	39 d1                	cmp    ecx,edx
c0020d97:	72 27                	jb     c0020dc0 <__umoddi3+0x10c>
c0020d99:	74 21                	je     c0020dbc <__umoddi3+0x108>
c0020d9b:	89 ca                	mov    edx,ecx
c0020d9d:	29 f3                	sub    ebx,esi
c0020d9f:	19 fa                	sbb    edx,edi
c0020da1:	89 d0                	mov    eax,edx
c0020da3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0020da7:	d3 e0                	shl    eax,cl
c0020da9:	89 e9                	mov    ecx,ebp
c0020dab:	d3 eb                	shr    ebx,cl
c0020dad:	09 d8                	or     eax,ebx
c0020daf:	d3 ea                	shr    edx,cl
c0020db1:	83 c4 1c             	add    esp,0x1c
c0020db4:	5b                   	pop    ebx
c0020db5:	5e                   	pop    esi
c0020db6:	5f                   	pop    edi
c0020db7:	5d                   	pop    ebp
c0020db8:	c3                   	ret    
c0020db9:	8d 76 00             	lea    esi,[esi+0x0]
c0020dbc:	39 c3                	cmp    ebx,eax
c0020dbe:	73 db                	jae    c0020d9b <__umoddi3+0xe7>
c0020dc0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0020dc4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0020dc8:	89 d7                	mov    edi,edx
c0020dca:	89 c6                	mov    esi,eax
c0020dcc:	eb cd                	jmp    c0020d9b <__umoddi3+0xe7>

Disassembly of section .init:

c0020dce <_init>:
c0020dce:	55                   	push   ebp
c0020dcf:	89 e5                	mov    ebp,esp
c0020dd1:	e8 1e f3 fd ff       	call   c00000f4 <frame_dummy>
c0020dd6:	e8 e5 fa ff ff       	call   c00208c0 <__do_global_ctors_aux>
c0020ddb:	5d                   	pop    ebp
c0020ddc:	c3                   	ret    

Disassembly of section .fini:

c0020ddd <_fini>:
c0020ddd:	55                   	push   ebp
c0020dde:	89 e5                	mov    ebp,esp
c0020de0:	e8 9f f2 fd ff       	call   c0000084 <__do_global_dtors_aux>
c0020de5:	5d                   	pop    ebp
c0020de6:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0020de8 <DriverlessDevice::~DriverlessDevice()>:
c0020de8:	ba a0 27 02 c0       	mov    edx,0xc00227a0
c0020ded:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020df1:	89 10                	mov    DWORD PTR [eax],edx
c0020df3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020df7:	50                   	push   eax
c0020df8:	e8 97 81 fe ff       	call   c0008f94 <Device::~Device()>
c0020dfd:	83 c4 04             	add    esp,0x4
c0020e00:	90                   	nop
c0020e01:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0020e02 <DriverlessDevice::~DriverlessDevice()>:
c0020e02:	83 ec 0c             	sub    esp,0xc
c0020e05:	83 ec 0c             	sub    esp,0xc
c0020e08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e0c:	e8 d7 ff ff ff       	call   c0020de8 <DriverlessDevice::~DriverlessDevice()>
c0020e11:	83 c4 10             	add    esp,0x10
c0020e14:	83 ec 08             	sub    esp,0x8
c0020e17:	68 58 01 00 00       	push   0x158
c0020e1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020e20:	e8 66 bb fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c0020e25:	83 c4 10             	add    esp,0x10
c0020e28:	83 c4 0c             	add    esp,0xc
c0020e2b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0020e2c <LinkedList<Device>::addElement(Device*)>:
c0020e2c:	83 ec 0c             	sub    esp,0xc
c0020e2f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020e34:	75 10                	jne    c0020e46 <LinkedList<Device>::addElement(Device*)+0x1a>
c0020e36:	83 ec 0c             	sub    esp,0xc
c0020e39:	68 34 27 02 c0       	push   0xc0022734
c0020e3e:	e8 07 e8 fe ff       	call   c000f64a <KePanic(char const*)>
c0020e43:	83 c4 10             	add    esp,0x10
c0020e46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e4c:	85 c0                	test   eax,eax
c0020e4e:	74 3a                	je     c0020e8a <LinkedList<Device>::addElement(Device*)+0x5e>
c0020e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020e57:	85 c0                	test   eax,eax
c0020e59:	74 2f                	je     c0020e8a <LinkedList<Device>::addElement(Device*)+0x5e>
c0020e5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e5f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020e62:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020e66:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0020e6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e70:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020e74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e7b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020e7e:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020e88:	eb 68                	jmp    c0020ef2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0020e90:	85 c0                	test   eax,eax
c0020e92:	75 4e                	jne    c0020ee2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0020e94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020e98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020e9b:	85 c0                	test   eax,eax
c0020e9d:	75 43                	jne    c0020ee2 <LinkedList<Device>::addElement(Device*)+0xb6>
c0020e9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ea3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020ea7:	89 10                	mov    DWORD PTR [eax],edx
c0020ea9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ead:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0020eb1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0020eb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020eb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020ebb:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0020ec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ec9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020ecc:	85 c0                	test   eax,eax
c0020ece:	74 22                	je     c0020ef2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020ed0:	83 ec 0c             	sub    esp,0xc
c0020ed3:	68 56 27 02 c0       	push   0xc0022756
c0020ed8:	e8 6d e7 fe ff       	call   c000f64a <KePanic(char const*)>
c0020edd:	83 c4 10             	add    esp,0x10
c0020ee0:	eb 10                	jmp    c0020ef2 <LinkedList<Device>::addElement(Device*)+0xc6>
c0020ee2:	83 ec 0c             	sub    esp,0xc
c0020ee5:	68 60 27 02 c0       	push   0xc0022760
c0020eea:	e8 5b e7 fe ff       	call   c000f64a <KePanic(char const*)>
c0020eef:	83 c4 10             	add    esp,0x10
c0020ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020ef6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020ef9:	8d 50 01             	lea    edx,[eax+0x1]
c0020efc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f00:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0020f03:	90                   	nop
c0020f04:	83 c4 0c             	add    esp,0xc
c0020f07:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0020f08 <LinkedList<Device>::LinkedList()>:
c0020f08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f0c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020f12:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f16:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020f1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f21:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020f28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020f32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f36:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020f3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0020f48:	90                   	nop
c0020f49:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0020f4c <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0020f4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f50:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f52:	85 c0                	test   eax,eax
c0020f54:	75 0e                	jne    c0020f64 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020f56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f5d:	85 c0                	test   eax,eax
c0020f5f:	75 03                	jne    c0020f64 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0020f61:	b0 01                	mov    al,0x1
c0020f63:	c3                   	ret    
c0020f64:	b0 00                	mov    al,0x0
c0020f66:	90                   	nop
c0020f67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0020f68 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0020f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0020f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f6e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0020f70 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0020f70:	83 ec 0c             	sub    esp,0xc
c0020f73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f77:	8b 00                	mov    eax,DWORD PTR [eax]
c0020f79:	85 c0                	test   eax,eax
c0020f7b:	75 17                	jne    c0020f94 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c0020f7d:	83 ec 0c             	sub    esp,0xc
c0020f80:	68 d0 29 02 c0       	push   0xc00229d0
c0020f85:	e8 c0 e6 fe ff       	call   c000f64a <KePanic(char const*)>
c0020f8a:	83 c4 10             	add    esp,0x10
c0020f8d:	e9 96 00 00 00       	jmp    c0021028 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c0020f92:	66 90                	xchg   ax,ax
c0020f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020f98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0020f9b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020f9e:	85 c0                	test   eax,eax
c0020fa0:	0f 95 c0             	setne  al
c0020fa3:	0f b6 c0             	movzx  eax,al
c0020fa6:	85 c0                	test   eax,eax
c0020fa8:	74 12                	je     c0020fbc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c0020faa:	83 ec 0c             	sub    esp,0xc
c0020fad:	68 1b 2a 02 c0       	push   0xc0022a1b
c0020fb2:	e8 93 e6 fe ff       	call   c000f64a <KePanic(char const*)>
c0020fb7:	83 c4 10             	add    esp,0x10
c0020fba:	66 90                	xchg   ax,ax
c0020fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fc0:	8b 00                	mov    eax,DWORD PTR [eax]
c0020fc2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0020fc5:	85 c0                	test   eax,eax
c0020fc7:	0f 94 c0             	sete   al
c0020fca:	0f b6 c0             	movzx  eax,al
c0020fcd:	85 c0                	test   eax,eax
c0020fcf:	74 33                	je     c0021004 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c0020fd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fd5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0020fdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fdf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0020fe6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020fea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0020fed:	83 f8 01             	cmp    eax,0x1
c0020ff0:	74 22                	je     c0021014 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0020ff2:	83 ec 0c             	sub    esp,0xc
c0020ff5:	68 f4 29 02 c0       	push   0xc00229f4
c0020ffa:	e8 4b e6 fe ff       	call   c000f64a <KePanic(char const*)>
c0020fff:	83 c4 10             	add    esp,0x10
c0021002:	eb 10                	jmp    c0021014 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c0021004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021008:	8b 00                	mov    eax,DWORD PTR [eax]
c002100a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c002100d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021011:	89 10                	mov    DWORD PTR [eax],edx
c0021013:	90                   	nop
c0021014:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021018:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002101b:	8d 50 ff             	lea    edx,[eax-0x1]
c002101e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021022:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021025:	8d 76 00             	lea    esi,[esi+0x0]
c0021028:	83 c4 0c             	add    esp,0xc
c002102b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002102c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002102c:	83 ec 0c             	sub    esp,0xc
c002102f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0021034:	75 12                	jne    c0021048 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c0021036:	83 ec 0c             	sub    esp,0xc
c0021039:	68 34 27 02 c0       	push   0xc0022734
c002103e:	e8 07 e6 fe ff       	call   c000f64a <KePanic(char const*)>
c0021043:	83 c4 10             	add    esp,0x10
c0021046:	66 90                	xchg   ax,ax
c0021048:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002104c:	8b 00                	mov    eax,DWORD PTR [eax]
c002104e:	85 c0                	test   eax,eax
c0021050:	74 36                	je     c0021088 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c0021052:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021056:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021059:	85 c0                	test   eax,eax
c002105b:	74 2b                	je     c0021088 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c002105d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021061:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021064:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021068:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002106b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002106f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021073:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002107a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002107d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0021084:	eb 6a                	jmp    c00210f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c0021086:	66 90                	xchg   ax,ax
c0021088:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002108c:	8b 00                	mov    eax,DWORD PTR [eax]
c002108e:	85 c0                	test   eax,eax
c0021090:	75 4e                	jne    c00210e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c0021092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021096:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021099:	85 c0                	test   eax,eax
c002109b:	75 43                	jne    c00210e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c002109d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210a5:	89 10                	mov    DWORD PTR [eax],edx
c00210a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00210af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00210b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00210b9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00210c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00210c7:	85 c0                	test   eax,eax
c00210c9:	74 25                	je     c00210f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00210cb:	83 ec 0c             	sub    esp,0xc
c00210ce:	68 56 27 02 c0       	push   0xc0022756
c00210d3:	e8 72 e5 fe ff       	call   c000f64a <KePanic(char const*)>
c00210d8:	83 c4 10             	add    esp,0x10
c00210db:	eb 13                	jmp    c00210f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c00210dd:	8d 76 00             	lea    esi,[esi+0x0]
c00210e0:	83 ec 0c             	sub    esp,0xc
c00210e3:	68 60 27 02 c0       	push   0xc0022760
c00210e8:	e8 5d e5 fe ff       	call   c000f64a <KePanic(char const*)>
c00210ed:	83 c4 10             	add    esp,0x10
c00210f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00210f7:	8d 50 01             	lea    edx,[eax+0x1]
c00210fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00210fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021101:	90                   	nop
c0021102:	83 c4 0c             	add    esp,0xc
c0021105:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0021108 <ACPI::~ACPI()>:
c0021108:	83 ec 0c             	sub    esp,0xc
c002110b:	ba cc 2d 02 c0       	mov    edx,0xc0022dcc
c0021110:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021114:	89 10                	mov    DWORD PTR [eax],edx
c0021116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002111a:	83 ec 0c             	sub    esp,0xc
c002111d:	50                   	push   eax
c002111e:	e8 71 7e fe ff       	call   c0008f94 <Device::~Device()>
c0021123:	83 c4 10             	add    esp,0x10
c0021126:	90                   	nop
c0021127:	83 c4 0c             	add    esp,0xc
c002112a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c002112c <ACPI::~ACPI()>:
c002112c:	83 ec 0c             	sub    esp,0xc
c002112f:	83 ec 0c             	sub    esp,0xc
c0021132:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021136:	e8 cd ff ff ff       	call   c0021108 <ACPI::~ACPI()>
c002113b:	83 c4 10             	add    esp,0x10
c002113e:	83 ec 08             	sub    esp,0x8
c0021141:	68 64 12 00 00       	push   0x1264
c0021146:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002114a:	e8 3c b8 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c002114f:	83 c4 10             	add    esp,0x10
c0021152:	83 c4 0c             	add    esp,0xc
c0021155:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c0021158 <LinkedList<Device>::~LinkedList()>:
c0021158:	90                   	nop
c0021159:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c002115c <LinkedList<Device>::isEmpty()>:
c002115c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021160:	8b 00                	mov    eax,DWORD PTR [eax]
c0021162:	85 c0                	test   eax,eax
c0021164:	75 0e                	jne    c0021174 <LinkedList<Device>::isEmpty()+0x18>
c0021166:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002116a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002116d:	85 c0                	test   eax,eax
c002116f:	75 03                	jne    c0021174 <LinkedList<Device>::isEmpty()+0x18>
c0021171:	b0 01                	mov    al,0x1
c0021173:	c3                   	ret    
c0021174:	b0 00                	mov    al,0x0
c0021176:	90                   	nop
c0021177:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c0021178 <LinkedList<Device>::getFirstElement()>:
c0021178:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002117c:	8b 00                	mov    eax,DWORD PTR [eax]
c002117e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0021180 <LinkedList<Device>::removeFirst()>:
c0021180:	83 ec 0c             	sub    esp,0xc
c0021183:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021187:	8b 00                	mov    eax,DWORD PTR [eax]
c0021189:	85 c0                	test   eax,eax
c002118b:	75 17                	jne    c00211a4 <LinkedList<Device>::removeFirst()+0x24>
c002118d:	83 ec 0c             	sub    esp,0xc
c0021190:	68 d0 29 02 c0       	push   0xc00229d0
c0021195:	e8 b0 e4 fe ff       	call   c000f64a <KePanic(char const*)>
c002119a:	83 c4 10             	add    esp,0x10
c002119d:	e9 92 00 00 00       	jmp    c0021234 <LinkedList<Device>::removeFirst()+0xb4>
c00211a2:	66 90                	xchg   ax,ax
c00211a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00211ab:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00211b1:	85 c0                	test   eax,eax
c00211b3:	74 13                	je     c00211c8 <LinkedList<Device>::removeFirst()+0x48>
c00211b5:	83 ec 0c             	sub    esp,0xc
c00211b8:	68 1b 2a 02 c0       	push   0xc0022a1b
c00211bd:	e8 88 e4 fe ff       	call   c000f64a <KePanic(char const*)>
c00211c2:	83 c4 10             	add    esp,0x10
c00211c5:	8d 76 00             	lea    esi,[esi+0x0]
c00211c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211cc:	8b 00                	mov    eax,DWORD PTR [eax]
c00211ce:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00211d4:	85 c0                	test   eax,eax
c00211d6:	75 34                	jne    c002120c <LinkedList<Device>::removeFirst()+0x8c>
c00211d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00211e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00211ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00211f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00211f4:	83 f8 01             	cmp    eax,0x1
c00211f7:	74 27                	je     c0021220 <LinkedList<Device>::removeFirst()+0xa0>
c00211f9:	83 ec 0c             	sub    esp,0xc
c00211fc:	68 f4 29 02 c0       	push   0xc00229f4
c0021201:	e8 44 e4 fe ff       	call   c000f64a <KePanic(char const*)>
c0021206:	83 c4 10             	add    esp,0x10
c0021209:	eb 15                	jmp    c0021220 <LinkedList<Device>::removeFirst()+0xa0>
c002120b:	90                   	nop
c002120c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021210:	8b 00                	mov    eax,DWORD PTR [eax]
c0021212:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c0021218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002121c:	89 10                	mov    DWORD PTR [eax],edx
c002121e:	66 90                	xchg   ax,ax
c0021220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021224:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021227:	8d 50 ff             	lea    edx,[eax-0x1]
c002122a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002122e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021231:	8d 76 00             	lea    esi,[esi+0x0]
c0021234:	83 c4 0c             	add    esp,0xc
c0021237:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0021238 <Computer::~Computer()>:
c0021238:	83 ec 0c             	sub    esp,0xc
c002123b:	ba 7c 30 02 c0       	mov    edx,0xc002307c
c0021240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021244:	89 10                	mov    DWORD PTR [eax],edx
c0021246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002124a:	83 ec 0c             	sub    esp,0xc
c002124d:	50                   	push   eax
c002124e:	e8 41 7d fe ff       	call   c0008f94 <Device::~Device()>
c0021253:	83 c4 10             	add    esp,0x10
c0021256:	90                   	nop
c0021257:	83 c4 0c             	add    esp,0xc
c002125a:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c002125c <Computer::~Computer()>:
c002125c:	83 ec 0c             	sub    esp,0xc
c002125f:	83 ec 0c             	sub    esp,0xc
c0021262:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021266:	e8 cd ff ff ff       	call   c0021238 <Computer::~Computer()>
c002126b:	83 c4 10             	add    esp,0x10
c002126e:	83 ec 08             	sub    esp,0x8
c0021271:	68 6c 01 00 00       	push   0x16c
c0021276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002127a:	e8 0c b7 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c002127f:	83 c4 10             	add    esp,0x10
c0021282:	83 c4 0c             	add    esp,0xc
c0021285:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0021286 <idleCommon()>:
c0021286:	83 ec 0c             	sub    esp,0xc
c0021289:	fa                   	cli    
c002128a:	ff 05 d0 d6 02 c0    	inc    DWORD PTR ds:0xc002d6d0
c0021290:	e8 ef 4f ff ff       	call   c0016284 <schedule()>
c0021295:	f0 ff 0d d0 d6 02 c0 	lock dec DWORD PTR ds:0xc002d6d0
c002129c:	83 3d d0 d6 02 c0 00 	cmp    DWORD PTR ds:0xc002d6d0,0x0
c00212a3:	75 01                	jne    c00212a6 <idleCommon()+0x20>
c00212a5:	fb                   	sti    
c00212a6:	83 c4 0c             	add    esp,0xc
c00212a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c00212aa <LinkedList<UnixFile>::~LinkedList()>:
c00212aa:	90                   	nop
c00212ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c00212ac <LinkedList<UnixFile>::LinkedList()>:
c00212ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212b0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212ba:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212c5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00212cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00212d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00212e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00212e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00212ec:	90                   	nop
c00212ed:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00212ee <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00212ee:	83 ec 0c             	sub    esp,0xc
c00212f1:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00212f6:	75 10                	jne    c0021308 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00212f8:	83 ec 0c             	sub    esp,0xc
c00212fb:	68 34 27 02 c0       	push   0xc0022734
c0021300:	e8 45 e3 fe ff       	call   c000f64a <KePanic(char const*)>
c0021305:	83 c4 10             	add    esp,0x10
c0021308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002130c:	8b 00                	mov    eax,DWORD PTR [eax]
c002130e:	85 c0                	test   eax,eax
c0021310:	74 34                	je     c0021346 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0021312:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021316:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021319:	85 c0                	test   eax,eax
c002131b:	74 29                	je     c0021346 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002131d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021321:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021324:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021328:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002132b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002132f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021333:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002133a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002133d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0021344:	eb 65                	jmp    c00213ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002134a:	8b 00                	mov    eax,DWORD PTR [eax]
c002134c:	85 c0                	test   eax,eax
c002134e:	75 4b                	jne    c002139b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0021350:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021354:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021357:	85 c0                	test   eax,eax
c0021359:	75 40                	jne    c002139b <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002135b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002135f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021363:	89 10                	mov    DWORD PTR [eax],edx
c0021365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021369:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002136d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021374:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021377:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002137e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021382:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021385:	85 c0                	test   eax,eax
c0021387:	74 22                	je     c00213ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0021389:	83 ec 0c             	sub    esp,0xc
c002138c:	68 56 27 02 c0       	push   0xc0022756
c0021391:	e8 b4 e2 fe ff       	call   c000f64a <KePanic(char const*)>
c0021396:	83 c4 10             	add    esp,0x10
c0021399:	eb 10                	jmp    c00213ab <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002139b:	83 ec 0c             	sub    esp,0xc
c002139e:	68 60 27 02 c0       	push   0xc0022760
c00213a3:	e8 a2 e2 fe ff       	call   c000f64a <KePanic(char const*)>
c00213a8:	83 c4 10             	add    esp,0x10
c00213ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213af:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213b2:	8d 50 01             	lea    edx,[eax+0x1]
c00213b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213b9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00213bc:	90                   	nop
c00213bd:	83 c4 0c             	add    esp,0xc
c00213c0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00213c2 <LinkedList<UnixFile>::getFirstElement()>:
c00213c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00213c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00213c8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00213ca <LinkedList<UnixFile>::removeFirst()>:
c00213ca:	83 ec 0c             	sub    esp,0xc
c00213cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213d1:	8b 00                	mov    eax,DWORD PTR [eax]
c00213d3:	85 c0                	test   eax,eax
c00213d5:	75 12                	jne    c00213e9 <LinkedList<UnixFile>::removeFirst()+0x1f>
c00213d7:	83 ec 0c             	sub    esp,0xc
c00213da:	68 d0 29 02 c0       	push   0xc00229d0
c00213df:	e8 66 e2 fe ff       	call   c000f64a <KePanic(char const*)>
c00213e4:	83 c4 10             	add    esp,0x10
c00213e7:	eb 7e                	jmp    c0021467 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00213e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00213ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00213f0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00213f3:	85 c0                	test   eax,eax
c00213f5:	74 10                	je     c0021407 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00213f7:	83 ec 0c             	sub    esp,0xc
c00213fa:	68 1b 2a 02 c0       	push   0xc0022a1b
c00213ff:	e8 46 e2 fe ff       	call   c000f64a <KePanic(char const*)>
c0021404:	83 c4 10             	add    esp,0x10
c0021407:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002140b:	8b 00                	mov    eax,DWORD PTR [eax]
c002140d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021410:	85 c0                	test   eax,eax
c0021412:	75 33                	jne    c0021447 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0021414:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021418:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002141e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021422:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021429:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002142d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021430:	83 f8 01             	cmp    eax,0x1
c0021433:	74 21                	je     c0021456 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021435:	83 ec 0c             	sub    esp,0xc
c0021438:	68 f4 29 02 c0       	push   0xc00229f4
c002143d:	e8 08 e2 fe ff       	call   c000f64a <KePanic(char const*)>
c0021442:	83 c4 10             	add    esp,0x10
c0021445:	eb 0f                	jmp    c0021456 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0021447:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002144b:	8b 00                	mov    eax,DWORD PTR [eax]
c002144d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0021450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021454:	89 10                	mov    DWORD PTR [eax],edx
c0021456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002145a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002145d:	8d 50 ff             	lea    edx,[eax-0x1]
c0021460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021464:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021467:	83 c4 0c             	add    esp,0xc
c002146a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002146c <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002146c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021470:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0021473:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0021474 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0021474:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021478:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002147b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c002147c <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c002147c:	90                   	nop
c002147d:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0021480 <ThreadControlBlock::ThreadControlBlock()>:
c0021480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021484:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002148b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002148f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0021496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002149a:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00214a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214a5:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c00214ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214b0:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c00214b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214bb:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00214bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214c3:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c00214c7:	90                   	nop
c00214c8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00214cc <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00214cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214d0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214da:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00214e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214e5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00214ec:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214f0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00214f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00214fa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0021501:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021505:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002150c:	90                   	nop
c002150d:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c002150e <CPU::~CPU()>:
c002150e:	83 ec 0c             	sub    esp,0xc
c0021511:	ba ac 46 02 c0       	mov    edx,0xc00246ac
c0021516:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002151a:	89 10                	mov    DWORD PTR [eax],edx
c002151c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021520:	83 ec 0c             	sub    esp,0xc
c0021523:	50                   	push   eax
c0021524:	e8 6b 7a fe ff       	call   c0008f94 <Device::~Device()>
c0021529:	83 c4 10             	add    esp,0x10
c002152c:	90                   	nop
c002152d:	83 c4 0c             	add    esp,0xc
c0021530:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0021532 <CPU::~CPU()>:
c0021532:	83 ec 0c             	sub    esp,0xc
c0021535:	83 ec 0c             	sub    esp,0xc
c0021538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002153c:	e8 cd ff ff ff       	call   c002150e <CPU::~CPU()>
c0021541:	83 c4 10             	add    esp,0x10
c0021544:	83 ec 08             	sub    esp,0x8
c0021547:	68 78 11 00 00       	push   0x1178
c002154c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021550:	e8 36 b4 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c0021555:	83 c4 10             	add    esp,0x10
c0021558:	83 c4 0c             	add    esp,0xc
c002155b:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002155c <PCI::~PCI()>:
c002155c:	83 ec 0c             	sub    esp,0xc
c002155f:	ba 10 4c 02 c0       	mov    edx,0xc0024c10
c0021564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021568:	89 10                	mov    DWORD PTR [eax],edx
c002156a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002156e:	83 ec 0c             	sub    esp,0xc
c0021571:	50                   	push   eax
c0021572:	e8 cd 73 fe ff       	call   c0008944 <Bus::~Bus()>
c0021577:	83 c4 10             	add    esp,0x10
c002157a:	90                   	nop
c002157b:	83 c4 0c             	add    esp,0xc
c002157e:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0021580 <PCI::~PCI()>:
c0021580:	83 ec 0c             	sub    esp,0xc
c0021583:	83 ec 0c             	sub    esp,0xc
c0021586:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002158a:	e8 cd ff ff ff       	call   c002155c <PCI::~PCI()>
c002158f:	83 c4 10             	add    esp,0x10
c0021592:	83 ec 08             	sub    esp,0x8
c0021595:	68 5c 01 00 00       	push   0x15c
c002159a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002159e:	e8 e8 b3 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c00215a3:	83 c4 10             	add    esp,0x10
c00215a6:	83 c4 0c             	add    esp,0xc
c00215a9:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c00215aa <IDE::~IDE()>:
c00215aa:	83 ec 0c             	sub    esp,0xc
c00215ad:	ba 60 4d 02 c0       	mov    edx,0xc0024d60
c00215b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215b6:	89 10                	mov    DWORD PTR [eax],edx
c00215b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00215bc:	83 ec 0c             	sub    esp,0xc
c00215bf:	50                   	push   eax
c00215c0:	e8 5f 7e fe ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c00215c5:	83 c4 10             	add    esp,0x10
c00215c8:	90                   	nop
c00215c9:	83 c4 0c             	add    esp,0xc
c00215cc:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00215ce <IDE::~IDE()>:
c00215ce:	83 ec 0c             	sub    esp,0xc
c00215d1:	83 ec 0c             	sub    esp,0xc
c00215d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215d8:	e8 cd ff ff ff       	call   c00215aa <IDE::~IDE()>
c00215dd:	83 c4 10             	add    esp,0x10
c00215e0:	83 ec 08             	sub    esp,0x8
c00215e3:	68 70 02 00 00       	push   0x270
c00215e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00215ec:	e8 9a b3 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c00215f1:	83 c4 10             	add    esp,0x10
c00215f4:	83 c4 0c             	add    esp,0xc
c00215f7:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00215f8 <SATABus::~SATABus()>:
c00215f8:	83 ec 0c             	sub    esp,0xc
c00215fb:	ba b0 4d 02 c0       	mov    edx,0xc0024db0
c0021600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021604:	89 10                	mov    DWORD PTR [eax],edx
c0021606:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002160a:	83 ec 0c             	sub    esp,0xc
c002160d:	50                   	push   eax
c002160e:	e8 11 7e fe ff       	call   c0009424 <HardDiskController::~HardDiskController()>
c0021613:	83 c4 10             	add    esp,0x10
c0021616:	90                   	nop
c0021617:	83 c4 0c             	add    esp,0xc
c002161a:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c002161c <SATABus::~SATABus()>:
c002161c:	83 ec 0c             	sub    esp,0xc
c002161f:	83 ec 0c             	sub    esp,0xc
c0021622:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021626:	e8 cd ff ff ff       	call   c00215f8 <SATABus::~SATABus()>
c002162b:	83 c4 10             	add    esp,0x10
c002162e:	83 ec 08             	sub    esp,0x8
c0021631:	68 64 01 00 00       	push   0x164
c0021636:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002163a:	e8 4c b3 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c002163f:	83 c4 10             	add    esp,0x10
c0021642:	83 c4 0c             	add    esp,0xc
c0021645:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0021646 <ATA::~ATA()>:
c0021646:	83 ec 0c             	sub    esp,0xc
c0021649:	ba 98 4e 02 c0       	mov    edx,0xc0024e98
c002164e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021652:	89 10                	mov    DWORD PTR [eax],edx
c0021654:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021658:	83 ec 0c             	sub    esp,0xc
c002165b:	50                   	push   eax
c002165c:	e8 a5 7e fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c0021661:	83 c4 10             	add    esp,0x10
c0021664:	90                   	nop
c0021665:	83 c4 0c             	add    esp,0xc
c0021668:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c002166a <ATA::~ATA()>:
c002166a:	83 ec 0c             	sub    esp,0xc
c002166d:	83 ec 0c             	sub    esp,0xc
c0021670:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021674:	e8 cd ff ff ff       	call   c0021646 <ATA::~ATA()>
c0021679:	83 c4 10             	add    esp,0x10
c002167c:	83 ec 08             	sub    esp,0x8
c002167f:	68 8c 01 00 00       	push   0x18c
c0021684:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021688:	e8 fe b2 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c002168d:	83 c4 10             	add    esp,0x10
c0021690:	83 c4 0c             	add    esp,0xc
c0021693:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0021694 <ATAPI::~ATAPI()>:
c0021694:	83 ec 0c             	sub    esp,0xc
c0021697:	ba e0 4e 02 c0       	mov    edx,0xc0024ee0
c002169c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a0:	89 10                	mov    DWORD PTR [eax],edx
c00216a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216a6:	83 ec 0c             	sub    esp,0xc
c00216a9:	50                   	push   eax
c00216aa:	e8 57 7e fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c00216af:	83 c4 10             	add    esp,0x10
c00216b2:	90                   	nop
c00216b3:	83 c4 0c             	add    esp,0xc
c00216b6:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c00216b8 <ATAPI::~ATAPI()>:
c00216b8:	83 ec 0c             	sub    esp,0xc
c00216bb:	83 ec 0c             	sub    esp,0xc
c00216be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216c2:	e8 cd ff ff ff       	call   c0021694 <ATAPI::~ATAPI()>
c00216c7:	83 c4 10             	add    esp,0x10
c00216ca:	83 ec 08             	sub    esp,0x8
c00216cd:	68 84 01 00 00       	push   0x184
c00216d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00216d6:	e8 b0 b2 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c00216db:	83 c4 10             	add    esp,0x10
c00216de:	83 c4 0c             	add    esp,0xc
c00216e1:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00216e2 <SATA::~SATA()>:
c00216e2:	83 ec 0c             	sub    esp,0xc
c00216e5:	ba a0 4f 02 c0       	mov    edx,0xc0024fa0
c00216ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216ee:	89 10                	mov    DWORD PTR [eax],edx
c00216f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00216f4:	83 ec 0c             	sub    esp,0xc
c00216f7:	50                   	push   eax
c00216f8:	e8 09 7e fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c00216fd:	83 c4 10             	add    esp,0x10
c0021700:	90                   	nop
c0021701:	83 c4 0c             	add    esp,0xc
c0021704:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0021706 <SATA::~SATA()>:
c0021706:	83 ec 0c             	sub    esp,0xc
c0021709:	83 ec 0c             	sub    esp,0xc
c002170c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021710:	e8 cd ff ff ff       	call   c00216e2 <SATA::~SATA()>
c0021715:	83 c4 10             	add    esp,0x10
c0021718:	83 ec 08             	sub    esp,0x8
c002171b:	68 7c 01 00 00       	push   0x17c
c0021720:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021724:	e8 62 b2 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c0021729:	83 c4 10             	add    esp,0x10
c002172c:	83 c4 0c             	add    esp,0xc
c002172f:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0021730 <SATAPI::~SATAPI()>:
c0021730:	83 ec 0c             	sub    esp,0xc
c0021733:	ba c4 50 02 c0       	mov    edx,0xc00250c4
c0021738:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002173c:	89 10                	mov    DWORD PTR [eax],edx
c002173e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021742:	83 ec 0c             	sub    esp,0xc
c0021745:	50                   	push   eax
c0021746:	e8 bb 7d fe ff       	call   c0009506 <PhysicalDisk::~PhysicalDisk()>
c002174b:	83 c4 10             	add    esp,0x10
c002174e:	90                   	nop
c002174f:	83 c4 0c             	add    esp,0xc
c0021752:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0021754 <SATAPI::~SATAPI()>:
c0021754:	83 ec 0c             	sub    esp,0xc
c0021757:	83 ec 0c             	sub    esp,0xc
c002175a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002175e:	e8 cd ff ff ff       	call   c0021730 <SATAPI::~SATAPI()>
c0021763:	83 c4 10             	add    esp,0x10
c0021766:	83 ec 08             	sub    esp,0x8
c0021769:	68 84 01 00 00       	push   0x184
c002176e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021772:	e8 14 b2 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c0021777:	83 c4 10             	add    esp,0x10
c002177a:	83 c4 0c             	add    esp,0xc
c002177d:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c002177e <IOAPIC::~IOAPIC()>:
c002177e:	83 ec 0c             	sub    esp,0xc
c0021781:	ba 24 51 02 c0       	mov    edx,0xc0025124
c0021786:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002178a:	89 10                	mov    DWORD PTR [eax],edx
c002178c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021790:	83 ec 0c             	sub    esp,0xc
c0021793:	50                   	push   eax
c0021794:	e8 fb 77 fe ff       	call   c0008f94 <Device::~Device()>
c0021799:	83 c4 10             	add    esp,0x10
c002179c:	90                   	nop
c002179d:	83 c4 0c             	add    esp,0xc
c00217a0:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c00217a2 <IOAPIC::~IOAPIC()>:
c00217a2:	83 ec 0c             	sub    esp,0xc
c00217a5:	83 ec 0c             	sub    esp,0xc
c00217a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217ac:	e8 cd ff ff ff       	call   c002177e <IOAPIC::~IOAPIC()>
c00217b1:	83 c4 10             	add    esp,0x10
c00217b4:	83 ec 08             	sub    esp,0x8
c00217b7:	68 68 01 00 00       	push   0x168
c00217bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217c0:	e8 c6 b1 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c00217c5:	83 c4 10             	add    esp,0x10
c00217c8:	83 c4 0c             	add    esp,0xc
c00217cb:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c00217cc <APICTimer::~APICTimer()>:
c00217cc:	83 ec 0c             	sub    esp,0xc
c00217cf:	ba 6c 51 02 c0       	mov    edx,0xc002516c
c00217d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217d8:	89 10                	mov    DWORD PTR [eax],edx
c00217da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217de:	83 ec 0c             	sub    esp,0xc
c00217e1:	50                   	push   eax
c00217e2:	e8 ed 8e fe ff       	call   c000a6d4 <Timer::~Timer()>
c00217e7:	83 c4 10             	add    esp,0x10
c00217ea:	90                   	nop
c00217eb:	83 c4 0c             	add    esp,0xc
c00217ee:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c00217f0 <APICTimer::~APICTimer()>:
c00217f0:	83 ec 0c             	sub    esp,0xc
c00217f3:	83 ec 0c             	sub    esp,0xc
c00217f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217fa:	e8 cd ff ff ff       	call   c00217cc <APICTimer::~APICTimer()>
c00217ff:	83 c4 10             	add    esp,0x10
c0021802:	83 ec 08             	sub    esp,0x8
c0021805:	68 60 01 00 00       	push   0x160
c002180a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002180e:	e8 78 b1 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c0021813:	83 c4 10             	add    esp,0x10
c0021816:	83 c4 0c             	add    esp,0xc
c0021819:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c002181c <PIT::~PIT()>:
c002181c:	83 ec 0c             	sub    esp,0xc
c002181f:	ba bc 51 02 c0       	mov    edx,0xc00251bc
c0021824:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021828:	89 10                	mov    DWORD PTR [eax],edx
c002182a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002182e:	83 ec 0c             	sub    esp,0xc
c0021831:	50                   	push   eax
c0021832:	e8 9d 8e fe ff       	call   c000a6d4 <Timer::~Timer()>
c0021837:	83 c4 10             	add    esp,0x10
c002183a:	90                   	nop
c002183b:	83 c4 0c             	add    esp,0xc
c002183e:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0021840 <PIT::~PIT()>:
c0021840:	83 ec 0c             	sub    esp,0xc
c0021843:	83 ec 0c             	sub    esp,0xc
c0021846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002184a:	e8 cd ff ff ff       	call   c002181c <PIT::~PIT()>
c002184f:	83 c4 10             	add    esp,0x10
c0021852:	83 ec 08             	sub    esp,0x8
c0021855:	68 5c 01 00 00       	push   0x15c
c002185a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002185e:	e8 28 b1 fe ff       	call   c000c98b <operator delete(void*, unsigned long)>
c0021863:	83 c4 10             	add    esp,0x10
c0021866:	83 c4 0c             	add    esp,0xc
c0021869:	c3                   	ret    

Disassembly of section userkernel:

c0026000 <KiDefaultSignalHandlerAbort(int)>:
c0026000:	57                   	push   edi
c0026001:	b9 07 00 00 00       	mov    ecx,0x7
c0026006:	56                   	push   esi
c0026007:	be 5f 34 02 c0       	mov    esi,0xc002345f
c002600c:	83 ec 24             	sub    esp,0x24
c002600f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0026013:	fc                   	cld    
c0026014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002601a:	50                   	push   eax
c002601b:	6a 00                	push   0x0
c002601d:	6a 38                	push   0x38
c002601f:	6a 01                	push   0x1
c0026021:	e8 2c 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0026026:	83 c4 34             	add    esp,0x34
c0026029:	5e                   	pop    esi
c002602a:	5f                   	pop    edi
c002602b:	c3                   	ret    

c002602c <KiDefaultSignalHandlerTerminate(int)>:
c002602c:	57                   	push   edi
c002602d:	b9 08 00 00 00       	mov    ecx,0x8
c0026032:	56                   	push   esi
c0026033:	be 7b 34 02 c0       	mov    esi,0xc002347b
c0026038:	83 ec 24             	sub    esp,0x24
c002603b:	89 e7                	mov    edi,esp
c002603d:	fc                   	cld    
c002603e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0026040:	54                   	push   esp
c0026041:	6a 00                	push   0x0
c0026043:	6a 37                	push   0x37
c0026045:	6a 01                	push   0x1
c0026047:	e8 06 00 00 00       	call   c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002604c:	83 c4 34             	add    esp,0x34
c002604f:	5e                   	pop    esi
c0026050:	5f                   	pop    edi
c0026051:	c3                   	ret    

c0026052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0026052:	53                   	push   ebx
c0026053:	83 ec 10             	sub    esp,0x10
c0026056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002605a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002605e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0026062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0026066:	cd 60                	int    0x60
c0026068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002606c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0026074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026078:	83 c4 10             	add    esp,0x10
c002607b:	5b                   	pop    ebx
c002607c:	c3                   	ret    

Disassembly of section align_previous:

c0027000 <DO_NOT_DELETE()>:
c0027000:	c3                   	ret    
